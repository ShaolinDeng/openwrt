cscope 15 $HOME/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk -q 0000030575 0003525959
	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/flash.c

24 
	~<comm⁄.h
>

25 
	~<π_mm≠.h
>

27 #unde‡
DEBUG


28 
Êash_öfo_t
 
	gÊash_öfo
[
CFG_MAX_FLASH_BANKS
];

30 
ul⁄g
 
π2880_Êash_°¨t_t
;

36 #ifde‡
CONFIG_FLASH_16BIT


37 
	tFLASH_PORT_WIDTH
;

38 vﬁ©ûê
	tFLASH_PORT_WIDTHV
;

39 
	#FLASH_ID_MASK
 0xFFFF

	)

41 
	tFLASH_PORT_WIDTH
;

42 vﬁ©ûê
	tFLASH_PORT_WIDTHV
;

43 
	#FLASH_ID_MASK
 0xFFFFFFFF

	)

46 
	#FPW
 
FLASH_PORT_WIDTH


	)

47 
	#FPWV
 
FLASH_PORT_WIDTHV


	)

49 
	#ORMASK
(
size
Ë((-sizeË& 
OR_AM_MSK
)

	)

55 
	#FLASH_CYCLE1
 0x05555

	)

56 
	#FLASH_CYCLE2
 0x02Øa

	)

66 
	gFLASH_CYCLE1
 = 0x05555;

68 
	gFLASH_CYCLE2
 = 0x02aaa;

70 
	gÊash_u£_SSI_°™d¨d
 = 0;

76 
ul⁄g
 
Êash_gë_size
(
FPWV
 *
addr
, 
Êash_öfo_t
 *
öfo
);

77 
Êash_ª£t
(
Êash_öfo_t
 *
öfo
);

78 
wrôe_w‹d_öãl
(
Êash_öfo_t
 *
öfo
, 
FPWV
 *
de°
, 
FPW
 
d©a
);

79 
wrôe_w‹d_amd
(
Êash_öfo_t
 *
öfo
, 
FPWV
 *
de°
, 
FPW
 
d©a
);

80 
Êash_gë_off£ts
(
ul⁄g
 
ba£
, 
Êash_öfo_t
 *
öfo
);

81 
Êash_öfo_t
 *
Êash_gë_öfo
(
ul⁄g
 
ba£
);

88 
	$Êash_öô
 ()

90 
size
 = 0;

91 
i
;

93 
u32
 
ªgvÆue
,
kk0
 = 0xF,
kk1
 = 0xF ;

94 *
s
;

96 
s
 = 
	`gëív
("twe0");

99 if(
s
)

100 
kk0
 = 
	`sim∂e_°πoul
 (
s
, 
NULL
, 16);

102 
s
 = 
	`gëív
("toe0");

105 if(
s
)

106 
kk1
 = 
	`sim∂e_°πoul
 (
s
, 
NULL
, 16);

107 #i‡
	`deföed
(
RT3883_ASIC_BOARD
Ë|| deföed(
RT3883_FPGA_BOARD
)

108 
ªgvÆue
 = *(vﬁ©ûê
u_l⁄g
 *)(
RALINK_SYSCTL_BASE
 + 0x0700);

110 
ªgvÆue
 = *(vﬁ©ûê
u_l⁄g
 *)(
RALINK_SYSCTL_BASE
 + 0x0308);

112 #ifde‡
DEBUG


113 
	`¥ötf
("\¿DeÁu… FLASH_CFG0 = %08X \n",
ªgvÆue
);

115 
ªgvÆue
 &= ~(0x3 << 26);

116 
ªgvÆue
 |= (0x1 << 26);

118 
ªgvÆue
 |= (0x1 << 24);

120 
ªgvÆue
 &= ~(0x3 << 20);

121 
ªgvÆue
 |= (0x1 << 20);

123 
ªgvÆue
 &= ~(0x3 << 16);

124 
ªgvÆue
 |= (0x1 << 16);

126 
ªgvÆue
 &= ~(0xF << 12);

127 
ªgvÆue
 |(
kk0
 << 12);

129 
ªgvÆue
 &= ~(0xF << 8);

130 
ªgvÆue
 |(
kk1
 << 8);

131 #ifde‡
DEBUG


132 
	`¥ötf
("\¿Ródy Së VÆuê0x%08X\n",
ªgvÆue
);

135 #i‡
	`deföed
(
RT3883_ASIC_BOARD
Ë|| deföed(
RT3883_FPGA_BOARD
)

136 *(vﬁ©ûê
u_l⁄g
 *)(
RALINK_SYSCTL_BASE
 + 0x0700Ë
ªgvÆue
;

138 *(vﬁ©ûê
u_l⁄g
 *)(
RALINK_SYSCTL_BASE
 + 0x0308Ë
ªgvÆue
;

141 #i‡
	`deföed
(
RT3883_ASIC_BOARD
Ë|| deföed(
RT3883_FPGA_BOARD
)

142 
ªgvÆue
 = *(vﬁ©ûê
u_l⁄g
 *)(
RALINK_SYSCTL_BASE
 + 0x0700);

144 
ªgvÆue
 = *(vﬁ©ûê
u_l⁄g
 *)(
RALINK_SYSCTL_BASE
 + 0x0308);

146 #ifde‡
DEBUG


147 
	`¥ötf
("\¿Sëu∞FLASH_CFG0 = %08X \n",
ªgvÆue
);

152 
i
=0; i < 
CFG_MAX_FLASH_BANKS
; ++i) {

153 
ul⁄g
 
Êashba£
 = 
PHYS_FLASH_START
;

154 #i‡
	`deföed
 (
RT3052_MP2
Ë&& deföed (
ON_BOARD_32M_FLASH_COMPONENT
)

155 i‡(
i
 == 1)

156 
ul⁄g
 
Êashba£
 = 
PHYS_FLASH2_START
;

159 
	`mem£t
(&
Êash_öfo
[
i
], 0, (
Êash_öfo_t
));

162 
Êash_öfo
[
i
].
size
 =

163 
	`Êash_gë_size
((
FPW
 *)
Êashba£
, &
Êash_öfo
[
i
]);

165 i‡(
Êash_öfo
[
i
].
Êash_id
 =
FLASH_UNKNOWN
) {

166 
	`¥ötf
("## Unknown FLASH on Bank %d - Size = 0x%08lx\n",

167 
i
, 
Êash_öfo
[i].
size
);

170 
size
 +
Êash_öfo
[
i
].size;

173 #i‡
CFG_MONITOR_BASE
 >
CFG_FLASH_BASE


175 
	`Êash_¥Ÿe˘
(
FLAG_PROTECT_SET
,

176 
PHYS_FLASH_1
,

177 
PHYS_FLASH_1
+
m⁄ô‹_Êash_Àn
-1,

178 
	`Êash_gë_öfo
(
PHYS_FLASH_1
));

179 #ifde‡
DEBUG


180 
	`¥ötf
("\¿ m⁄ô‹ÖrŸe˘i⁄ ON by deÁu…,m⁄ô‹_Êash_À¿%d \n",
m⁄ô‹_Êash_Àn
);

185 #i‚def 
CFG_RUN_CODE_IN_RAM


187 #ifde‡
DEBUG


188 
	`¥ötf
("\n ENVÖrotection ON by default !! \n");

190 
	`Êash_¥Ÿe˘
(
FLAG_PROTECT_SET
,

191 
CFG_ENV_ADDR
,

192 
CFG_ENV_ADDR
+
CFG_ENV_SIZE
-1,

193 
	`Êash_gë_öfo
(
CFG_ENV_ADDR
));

197  
size
;

198 
	}
}

203 
	$Êash_ª£t
(
Êash_öfo_t
 *
öfo
)

205 
FPWV
 *
ba£
 = (FPWV *)(
öfo
->
°¨t
[0]);

208 i‡((
öfo
->
Êash_id
 & 
FLASH_VENDMASK
Ë=
FLASH_MAN_INTEL
)

209 *
ba£
 = (
FPW
)0x00FF00FF;

210 i‡((
öfo
->
Êash_id
 & 
FLASH_VENDMASK
Ë=
FLASH_MAN_AMD
)

212 *
ba£
 = (
FPW
)0x00F000F0;

213 #ifde‡
DEBUG


214 
	`¥ötf
("\nAMD Ród Mode, fœshÑe£t,åigîáà%08X\n",
ba£
);

217 i‡((
öfo
->
Êash_id
 & 
FLASH_VENDMASK
Ë=
FLASH_MAN_MX
)

219 *
ba£
 = (
FPW
)0x00F000F0;

220 #ifde‡
DEBUG


221 
	`¥ötf
("\¿ MX Ród Modê,ÊashÑe£t,Årigîáà%08X\n",
ba£
);

226 *
ba£
 = (
FPW
)0x00F000F0;

227 #ifde‡
DEBUG


228 
	`¥ötf
("\n EON Flash series !! \n");

231 
	}
}

235 
	$Êash_gë_off£ts
(
ul⁄g
 
ba£
, 
Êash_öfo_t
 *
öfo
)

237 
i
;

238 #ifde‡
kaikî


240 i‡((
öfo
->
Êash_id
 & 
FLASH_VENDMASK
Ë=
FLASH_MAN_INTEL


241 && (
öfo
->
Êash_id
 & 
FLASH_BTYPE
)) {

242 
boŸ£˘_size
;

243 
£˘_size
;

245 
boŸ£˘_size
 = 0x00002000 * ((
FPW
)/2);

246 
£˘_size
 = 0x00010000 * ((
FPW
)/2);

249 
i
 = 0; i < 8; ++i) {

250 
öfo
->
°¨t
[
i
] = 
ba£
 + (ò* 
boŸ£˘_size
);

252 
i
 = 8; i < 
öfo
->
£˘‹_cou¡
; i++) {

253 
öfo
->
°¨t
[
i
] = 
ba£
 + ((ò- 7Ë* 
£˘_size
);

255 } i‡((
öfo
->
Êash_id
 & 
FLASH_VENDMASK
Ë=
FLASH_MAN_AMD


256 && (
öfo
->
Êash_id
 & 
FLASH_TYPEMASK
Ë=
FLASH_AM640U
) {

258 
£˘_size
;

260 
£˘_size
 = 0x00010000 * ((
FPW
)/2);

263  
i
 = 0; i < 
öfo
->
£˘‹_cou¡
; i++ )

264 
öfo
->
°¨t
[
i
] = 
ba£
 + (ò* 
£˘_size
);

267 i‡((
öfo
->
Êash_id
 & 
FLASH_VENDMASK
Ë=
FLASH_MAN_MX


268 && (
öfo
->
Êash_id
 & 
FLASH_TYPEMASK
Ë=
MX_ID_LV320BT
) {

270 i‡((
öfo
->
Êash_id
 & 
FLASH_VENDMASK
Ë=
FLASH_MAN_MX


271 && ((
öfo
->
Êash_id
 & 
FLASH_TYPEMASK
Ë=
MX_ID_LV320BT
 ||

272 (
öfo
->
Êash_id
 & 
FLASH_TYPEMASK
Ë=
MX_ID_29LV640DB
 ||

273 (
öfo
->
Êash_id
 & 
FLASH_TYPEMASK
Ë=
MX_ID_29LV128DB
)) {

275 
boŸ£˘_size
;

276 
£˘_size
;

278 
boŸ£˘_size
 = 0x00002000 * ((
FPW
)/2);

279 
£˘_size
 = 0x00010000 * ((
FPW
)/2);

282 
i
 = 0; i < 8; ++i) {

283 
öfo
->
°¨t
[
i
] = 
ba£
 + (ò* 
boŸ£˘_size
);

285 
i
 = 8; i < 
öfo
->
£˘‹_cou¡
; i++) {

286 
öfo
->
°¨t
[
i
] = 
ba£
 + ((ò- 7Ë* 
£˘_size
);

289 i‡((
öfo
->
Êash_id
 & 
FLASH_VENDMASK
Ë=
FLASH_MAN_MX


290 && ((
öfo
->
Êash_id
 & 
FLASH_TYPEMASK
Ë=
MX_ID_29GL128EHT
)) {

291 
£˘_size
;

293 
£˘_size
 = 0x00020000 * ((
FPW
)/2);

294 
i
 = 0; i < 
öfo
->
£˘‹_cou¡
; i++) {

295 
öfo
->
°¨t
[
i
] = 
ba£
 + ( i * 
£˘_size
);

298 i‡((
öfo
->
Êash_id
 & 
FLASH_VENDMASK
Ë=
FLASH_MAN_MX


299 && ((
öfo
->
Êash_id
 & 
FLASH_TYPEMASK
Ë=
MX_ID_LV160B
)) {

300 
öfo
->
°¨t
[0] = 
ba£
;

301 
öfo
->
°¨t
[1] = info->start[0] + 0x4000;

302 
öfo
->
°¨t
[2] = info->start[1] + 0x2000;

303 
öfo
->
°¨t
[3] = info->start[2] + 0x2000;

304 
öfo
->
°¨t
[4] = info->start[3] + 0x8000;

305 
i
 = 5; i < 
öfo
->
£˘‹_cou¡
; i++) {

306 
öfo
->
°¨t
[
i
] = info->start[4] + ( (i-4) * 0x00010000);

309 i‡((
öfo
->
Êash_id
 & 
FLASH_VENDMASK
Ë=
FLASH_MAN_MX


310 && ((
öfo
->
Êash_id
 & 
FLASH_TYPEMASK
Ë=
MX_ID_LV160T
)) {

311 
i
 = 0; i < 
öfo
->
£˘‹_cou¡
 - 4; i++) {

312 
öfo
->
°¨t
[
i
] = 
ba£
 + (i * 0x10000);

314 
öfo
->
°¨t
[31] = info->start[30] + 0x10000;

315 
öfo
->
°¨t
[32] = info->start[31] + 0x8000;

316 
öfo
->
°¨t
[33] = info->start[32] + 0x2000;

317 
öfo
->
°¨t
[34] = info->start[33] + 0x2000;

322 
£˘_size
;

324 
£˘_size
 = 0x00010000 * ((
FPW
)/2);

327  
i
 = 0; i < 
öfo
->
£˘‹_cou¡
; i++ )

328 
öfo
->
°¨t
[
i
] = 
ba£
 + (ò* 
£˘_size
);

330 
	`¥ötf
("\¿Së info->°¨t[0]=%08X\n",
öfo
->
°¨t
[0]);

332 
	}
}

337 
Êash_öfo_t
 *
	$Êash_gë_öfo
(
ul⁄g
 
ba£
)

339 
i
;

340 
Êash_öfo_t
 * 
öfo
;

342 
i
 = 0; i < 
CFG_MAX_FLASH_BANKS
; i ++) {

343 
öfo
 = & 
Êash_öfo
[
i
];

344 i‡(
öfo
->
°¨t
[0] <
ba£
 && ba£ < info->°¨t[0] + info->
size
)

348  
i
 =
CFG_MAX_FLASH_BANKS
 ? 0 : 
öfo
;

349 
	}
}

354 
	$Êash_¥öt_öfo
(
Êash_öfo_t
 *
öfo
)

356 #ifde‡
kaikî


357 
i
;

358 
uch¨
 *
boŸty≥
;

359 
uch¨
 *
boŸÀâî
;

360 
uch¨
 *
fmt
;

361 
uch¨
 
bŸboŸÀâî
[] = "B";

362 
uch¨
 
t›boŸÀâî
[] = "T";

363 
uch¨
 
bŸboŸty≥
[] = "bottom boot sector";

364 
uch¨
 
t›boŸty≥
[] = "top boot sector";

366 i‡(
öfo
->
Êash_id
 =
FLASH_UNKNOWN
) {

367 
	`¥ötf
("missing or unknown FLASHÅype\n");

371 
öfo
->
Êash_id
 & 
FLASH_VENDMASK
) {

372 
FLASH_MAN_AMD
: 
	`¥ötf
("AMD ");

374 
FLASH_MAN_BM
: 
	`¥ötf
("BRIGHT MICRO ");

376 
FLASH_MAN_FUJ
: 
	`¥ötf
("FUJITSU ");

378 
FLASH_MAN_SST
: 
	`¥ötf
("SST ");

380 
FLASH_MAN_STM
: 
	`¥ötf
("STM ");

382 
FLASH_MAN_INTEL
: 
	`¥ötf
("INTEL ");

384 : 
	`¥ötf
("Unknown Vendor ");

389 i‡(
öfo
->
Êash_id
 & 
FLASH_BTYPE
) {

390 
boŸty≥
 = 
bŸboŸty≥
;

391 
boŸÀâî
 = 
bŸboŸÀâî
;

393 
boŸty≥
 = 
t›boŸty≥
;

394 
boŸÀâî
 = 
t›boŸÀâî
;

397 
öfo
->
Êash_id
 & 
FLASH_TYPEMASK
) {

398 
FLASH_AM640U
:

399 
fmt
 = "29LV641D (64 Mbit, uniform sectors)\n";

401 
FLASH_28F800C3B
:

402 
FLASH_28F800C3T
:

403 
fmt
 = "28F800C3%s (8 Mbit, %s)\n";

405 
FLASH_INTEL800B
:

406 
FLASH_INTEL800T
:

407 
fmt
 = "28F800B3%s (8 Mbit, %s)\n";

409 
FLASH_28F160C3B
:

410 
FLASH_28F160C3T
:

411 
fmt
 = "28F160C3%s (16 Mbit, %s)\n";

413 
FLASH_INTEL160B
:

414 
FLASH_INTEL160T
:

415 
fmt
 = "28F160B3%s (16 Mbit, %s)\n";

417 
FLASH_28F320C3B
:

418 
FLASH_28F320C3T
:

419 
fmt
 = "28F320C3%s (32 Mbit, %s)\n";

421 
FLASH_INTEL320B
:

422 
FLASH_INTEL320T
:

423 
fmt
 = "28F320B3%s (32 Mbit, %s)\n";

425 
FLASH_28F640C3B
:

426 
FLASH_28F640C3T
:

427 
fmt
 = "28F640C3%s (64 Mbit, %s)\n";

429 
FLASH_INTEL640B
:

430 
FLASH_INTEL640T
:

431 
fmt
 = "28F640B3%s (64 Mbit, %s)\n";

434 
fmt
 = "Unknown Chip Type\n";

438 
	`¥ötf
(
fmt
, 
boŸÀâî
, 
boŸty≥
);

440 
	`¥ötf
(" Size: %ld MB in %d Sectors\n",

441 
öfo
->
size
 >> 20,

442 
öfo
->
£˘‹_cou¡
);

444 
	`¥ötf
(" Sector Start Addresses:");

446 
i
=0; i<
öfo
->
£˘‹_cou¡
; ++i) {

447 i‡((
i
 % 5) == 0) {

448 
	`¥ötf
("\n ");

451 
	`¥ötf
(" %08lX%s", 
öfo
->
°¨t
[
i
],

452 
öfo
->
¥Ÿe˘
[
i
] ? " (RO)" : " ");

455 
	`¥ötf
("\n");

457 
	}
}

466 
ul⁄g
 
	$Êash_gë_size
(
FPWV
 *
addr
, 
Êash_öfo_t
 *
öfo
)

473 
addr
[
FLASH_CYCLE1
] = (
FPW
)0x00AA00AA;

474 
addr
[
FLASH_CYCLE2
] = (
FPW
)0x00550055;

475 
addr
[
FLASH_CYCLE1
] = (
FPW
)0x00900090;

481 if(
addr
[0] !(
FPW
)
SST_MANUFACT
)

483 
FLASH_CYCLE1
 = 0x0555;

484 
FLASH_CYCLE2
 = 0x02aa;

486 
addr
[
FLASH_CYCLE1
] = (
FPW
)0x00AA00AA;

487 
addr
[
FLASH_CYCLE2
] = (
FPW
)0x00550055;

488 
addr
[
FLASH_CYCLE1
] = (
FPW
)0x00900090;

494 
	`¥ötf
("\n The Flash follow SSI standard \n");

495 
Êash_u£_SSI_°™d¨d
 = 1;

502 
addr
[0] & 0xff) {

504 (
uch¨
)
AMD_MANUFACT
:

505 
öfo
->
Êash_id
 = 
FLASH_MAN_AMD
;

509 (
uch¨
)
INTEL_MANUFACT
:

510 
öfo
->
Êash_id
 = 
FLASH_MAN_INTEL
;

514 (
uch¨
)
MX_MANUFACT
:

515 
öfo
->
Êash_id
 = 
FLASH_MAN_MX
;

519 (
uch¨
)
AMD_MANUFACT_EON
:

520 
öfo
->
Êash_id
 = 
FLASH_MAN_AMD
;

525 
öfo
->
Êash_id
 = 
FLASH_MAN_AMD
;

538 i‡(
öfo
->
Êash_id
 !
FLASH_UNKNOWN
)

540 
addr
[1]) {

542 (
FPW
)
AMD_ID_LV640U
:

543 
öfo
->
Êash_id
 +
FLASH_AM640U
;

544 
öfo
->
£˘‹_cou¡
 = 128;

545 
öfo
->
size
 = 0x00800000 * ((
FPW
)/2);

548 (
FPW
)
INTEL_ID_28F800C3B
:

549 
öfo
->
Êash_id
 +
FLASH_28F800C3B
;

550 
öfo
->
£˘‹_cou¡
 = 23;

551 
öfo
->
size
 = 0x00100000 * ((
FPW
)/2);

554 (
FPW
)
INTEL_ID_28F800B3B
:

555 
öfo
->
Êash_id
 +
FLASH_INTEL800B
;

556 
öfo
->
£˘‹_cou¡
 = 23;

557 
öfo
->
size
 = 0x00100000 * ((
FPW
)/2);

560 (
FPW
)
INTEL_ID_28F160C3B
:

561 
öfo
->
Êash_id
 +
FLASH_28F160C3B
;

562 
öfo
->
£˘‹_cou¡
 = 39;

563 
öfo
->
size
 = 0x00200000 * ((
FPW
)/2);

566 (
FPW
)
INTEL_ID_28F160B3B
:

567 
öfo
->
Êash_id
 +
FLASH_INTEL160B
;

568 
öfo
->
£˘‹_cou¡
 = 39;

569 
öfo
->
size
 = 0x00200000 * ((
FPW
)/2);

572 (
FPW
)
INTEL_ID_28F320C3B
:

573 
öfo
->
Êash_id
 +
FLASH_28F320C3B
;

574 
öfo
->
£˘‹_cou¡
 = 71;

575 
öfo
->
size
 = 0x00400000 * ((
FPW
)/2);

578 (
FPW
)
INTEL_ID_28F320B3B
:

579 
öfo
->
Êash_id
 +
FLASH_INTEL320B
;

580 
öfo
->
£˘‹_cou¡
 = 71;

581 
öfo
->
size
 = 0x00400000 * ((
FPW
)/2);

584 (
FPW
)
INTEL_ID_28F640C3B
:

585 
öfo
->
Êash_id
 +
FLASH_28F640C3B
;

586 
öfo
->
£˘‹_cou¡
 = 135;

587 
öfo
->
size
 = 0x00800000 * ((
FPW
)/2);

590 (
FPW
)
INTEL_ID_28F640B3B
:

591 
öfo
->
Êash_id
 +
FLASH_INTEL640B
;

592 
öfo
->
£˘‹_cou¡
 = 135;

593 
öfo
->
size
 = 0x00800000 * ((
FPW
)/2);

596 (
FPW
)
AMD_ID_LV320B
:

597 
öfo
->
Êash_id
 +
AMD_ID_LV320B
;

598 
öfo
->
£˘‹_cou¡
 = 71;

599 
öfo
->
size
 = 0x00400000 * ((
FPW
)/2);

603 (
FPW
)
MX_ID_LV320BT
:

604 
öfo
->
Êash_id
 +
MX_ID_LV320BT
;

605 
öfo
->
£˘‹_cou¡
 = 71;

606 
öfo
->
size
 = 0x00400000 * ((
FPW
)/2);

610 (
FPW
)
MX_ID_LV160B
:

611 (
FPW
)
MX_ID_LV160T
:

612 
öfo
->
Êash_id
 +
addr
[1];

613 
öfo
->
£˘‹_cou¡
 = 35;

614 
öfo
->
size
 = 0x00200000 * ((
FPW
)/2);

618 (
FPW
)
MX_ID_29LV640DB
:

619 
öfo
->
Êash_id
 +
MX_ID_29LV640DB
;

620 
öfo
->
£˘‹_cou¡
 = 135;

621 
öfo
->
size
 = 0x00800000 * ((
FPW
)/2);

624 (
FPW
)
MX_ID_29LV128DB
:

625 
öfo
->
Êash_id
 +
MX_ID_29LV128DB
;

626 
öfo
->
£˘‹_cou¡
 = 263;

627 
öfo
->
size
 = 0x01000000 * ((
FPW
)/2);

630 (
FPW
Ë
MX_ID_29GL128EHT
:

631 
öfo
->
Êash_id
 +
MX_ID_29GL128EHT
;

632 
öfo
->
£˘‹_cou¡
 = 128;

633 
öfo
->
size
 = 0x01000000 * ((
FPW
)/2);

636 #i‡
	`deföed
 (
RT3052_MP2
Ë&& deföed (
ON_BOARD_32M_FLASH_COMPONENT
)

637 (
FPW
)
FLASH_S29GL256N
:

650 
öfo
->
Êash_id
 +
FLASH_S29GL256N
;

651 
öfo
->
£˘‹_cou¡
 = 256;

652 
öfo
->
size
 = 0x01000000 * ((
FPW
)/2);

657 
öfo
->
Êash_id
 +
EN_ID_29LV640H
;

658 
öfo
->
£˘‹_cou¡
 = 128;

659 
öfo
->
size
 = 0x00800000 * ((
FPW
)/2);

663 
öfo
->
Êash_id
 = 
FLASH_UNKNOWN
;

664 
öfo
->
£˘‹_cou¡
 = 0;

665 
öfo
->
size
 = 0;

671 
	`Êash_gë_off£ts
((
ul⁄g
)
addr
, 
öfo
);

674 
	`Êash_ª£t
(
öfo
);

676  (
öfo
->
size
);

677 
	}
}

681 
	$îa£_Æl_chù
(
Êash_öfo_t
 *
öfo
, 
s_fú°
, 
s_œ°
)

683 
rcode
 = 0;

684 
FPWV
 *
addr
;

685 
£˘
 = 0;

686 
öãl
 = (
öfo
->
Êash_id
 & 
FLASH_VENDMASK
Ë=
FLASH_MAN_INTEL
;

687 
ul⁄g
 
°¨t
, 
now
, 
œ°
;

689 
pﬁl
;

691 i‡((
s_fú°
 < 0Ë|| (s_fú° > 
s_œ°
)) {

692 i‡(
öfo
->
Êash_id
 =
FLASH_UNKNOWN
) {

693 
	`¥ötf
("- missing\n");

695 
	`¥ötf
("-Ço sectorsÅoÉrase\n");

700 
öfo
->
Êash_id
 & 
FLASH_TYPEMASK
) {

701 
FLASH_INTEL800B
:

702 
FLASH_INTEL160B
:

703 
FLASH_INTEL320B
:

704 
FLASH_INTEL640B
:

705 
FLASH_28F800C3B
:

706 
FLASH_28F160C3B
:

707 
FLASH_28F320C3B
:

708 
FLASH_28F640C3B
:

709 
FLASH_AM640U
:

710 
FLASH_MXLV320BT
:

711 
FLASH_MXLV160B
:

712 
FLASH_MXLV160T
:

713 
AMD_ID_LV320B
:

714 
EN_ID_29LV640H
:

715 
MX_ID_29GL128EHT
:

717 
FLASH_UNKNOWN
:

719 
	`¥ötf
("Can'tÉrase unknown flashÅype %08lx -áborted\n",

720 
öfo
->
Êash_id
);

724 
œ°
 = 
	`gë_timî
(0);

727 
	`¥ötf
("\n Erase All \n");

733 
addr
 = (
FPWV
 *)(
öfo
->
°¨t
[
£˘
]);

736 
FPWV
 *
ba£
;

738 
ba£
 = (
FPWV
 *)(
öfo
->
°¨t
[0]);

739 
ba£
[
FLASH_CYCLE1
] = (
FPW
)0x00AA00AA;

740 
ba£
[
FLASH_CYCLE2
] = (
FPW
)0x00550055;

741 
ba£
[
FLASH_CYCLE1
] = (
FPW
)0x00800080;

742 
ba£
[
FLASH_CYCLE1
] = (
FPW
)0x00AA00AA;

743 
ba£
[
FLASH_CYCLE2
] = (
FPW
)0x00550055;

744 
ba£
[
FLASH_CYCLE1
] = (
FPW
)0x10101010;

754 
°¨t
 = 
	`gë_timî
(0);

760 
	`udñay
(1000);

762 
pﬁl
 = 0;

763 (*
addr
 & (
FPW
)0x00800080) != (FPW)0x00800080) {

764 i‡((
now
 = 
	`gë_timî
(
°¨t
)Ë> 
CFG_FLASH_ERASE_TOUT
) {

765 
	`¥ötf
("Timeout\n");

767 i‡(
öãl
) {

769 *
addr
 = (
FPW
)0x00B000B0;

772 
	`Êash_ª£t
(
öfo
);

773 
rcode
 = 1;

777 
pﬁl
++;

779 i‡((
	`gë_timî
(
œ°
)Ë> 
CFG_HZ
) {

780 
	`putc
('*');

781 
œ°
 = 
	`gë_timî
(0);

784 
	`¥ötf
(" Eraseáll OK!! \n");

786 
£˘
=
s_fú°
; se˘<=
s_œ°
; ++sect) {

787 i‡(
öfo
->
¥Ÿe˘
[
£˘
]) {

789 
öfo
->
¥Ÿe˘
[
£˘
]=0;

792 
	`¥ötf
("protect offáll !\n");

797 
	`Êash_ª£t
(
öfo
);

800 
	`¥ötf
(" done\n");

802  
rcode
;

803 
	}
}

807 
	$Êash_îa£
(
Êash_öfo_t
 *
öfo
, 
s_fú°
, 
s_œ°
)

809 
FPWV
 *
addr
;

810 
¥Ÿ
, 
£˘
;

811 
öãl
 = (
öfo
->
Êash_id
 & 
FLASH_VENDMASK
Ë=
FLASH_MAN_INTEL
;

812 
ul⁄g
 
°¨t
, 
now
, 
œ°
;

813 
rcode
 = 0;

814 
pﬁl
,
kk
,
s_kk
 = 8;

815 
u32
 
s_£˘‹_size
 = 0x00001000 ;

816 
FPWV
 *
ba£
;

819 i‡((
s_fú°
 < 0Ë|| (s_fú° > 
s_œ°
)) {

820 i‡(
öfo
->
Êash_id
 =
FLASH_UNKNOWN
) {

821 
	`¥ötf
("- missing\n");

823 
	`¥ötf
("-Ço sectorsÅoÉrase\n");

828 
öfo
->
Êash_id
 & 
FLASH_TYPEMASK
) {

829 
FLASH_INTEL800B
:

830 
FLASH_INTEL160B
:

831 
FLASH_INTEL320B
:

832 
FLASH_INTEL640B
:

833 
FLASH_28F800C3B
:

834 
FLASH_28F160C3B
:

835 
FLASH_28F320C3B
:

836 
FLASH_28F640C3B
:

837 
FLASH_AM640U
:

838 
FLASH_MXLV320BT
:

839 
FLASH_MXLV160B
:

840 
FLASH_MXLV160T
:

841 
AMD_ID_LV320B
:

842 
EN_ID_29LV640H
:

843 
MX_ID_29LV640DB
:

844 
MX_ID_29LV128DB
:

845 #i‡
	`deföed
 (
RT3052_MP2
Ë&& deföed (
ON_BOARD_32M_FLASH_COMPONENT
)

846 
FLASH_S29GL256N
:

848 
MX_ID_29GL128EHT
:

850 
FLASH_UNKNOWN
:

852 
	`¥ötf
("Can'tÉrase unknown flashÅype %08lx -áborted\n",

853 
öfo
->
Êash_id
);

857 
¥Ÿ
 = 0;

858 
£˘
=
s_fú°
; se˘<=
s_œ°
; ++sect) {

859 i‡(
öfo
->
¥Ÿe˘
[
£˘
]) {

862 
	`¥ötf
("\¿¥Ÿe˘ se˘[%d]\n",
£˘
);

864 
¥Ÿ
++;

868 i‡(
¥Ÿ
) {

869 
	`¥ötf
("- Warning: %dÖrotected sectors willÇot beÉrased!\n",

870 
¥Ÿ
);

872 
	`¥ötf
("\n");

875 
œ°
 = 
	`gë_timî
(0);

879 if(
Êash_u£_SSI_°™d¨d
)

881 
s_kk
 = 16;

882 
s_£˘‹_size
 = 0x00000800;

883 
	`¥ötf
("\n SSI Manufacture so its small sector \n");

886 
£˘
 = 
s_fú°
; se˘<=
s_œ°
 && 
rcode
 == 0; sect++) {

888 i‡(
öfo
->
¥Ÿe˘
[
£˘
] != 0)

890 
	`¥ötf
("\¿£˘[%d] i†¥Ÿe˘ed,skù \n",
£˘
);

893 
	`¥ötf
("\¿îa£ se˘‹ = %d \n",
£˘
);

898 
addr
 = (
FPWV
 *)(
öfo
->
°¨t
[
£˘
]);

902 if–
£˘
 =0 || 
Êash_u£_SSI_°™d¨d
 == 1)

904 
ba£
 = (
FPWV
 *)(
öfo
->
°¨t
[0]);

906 if(
Êash_u£_SSI_°™d¨d
)

908 
	`¥ötf
("\¿Eø£Åÿ£˘‹áddªss[%08X]\n",
addr
);

912 
	`¥ötf
("\n Elase Sector 0 with 8K SIZE,The sector 0 is Total 64K\n");

915 
kk
 =0 ; kk < 
s_kk
 ;kk++)

919 
ba£
[
FLASH_CYCLE1
] = (
FPW
)0x00AA00AA;

920 
ba£
[
FLASH_CYCLE2
] = (
FPW
)0x00550055;

921 
ba£
[
FLASH_CYCLE1
] = (
FPW
)0x00800080;

922 
ba£
[
FLASH_CYCLE1
] = (
FPW
)0x00AA00AA;

923 
ba£
[
FLASH_CYCLE2
] = (
FPW
)0x00550055;

924 *
addr
 = (
FPW
)0x00300030;

926 
°¨t
 = 
	`gë_timî
(0);

931 
	`udñay
(1000);

933 
pﬁl
 = 0;

935 (*
addr
 & (
FPW
)0x00800080) != (FPW)0x00800080)

937 i‡((
now
 = 
	`gë_timî
(
°¨t
)Ë> (
ul⁄g
)
CFG_FLASH_ERASE_TOUT
)

939 
	`¥ötf
("Timeout\n");

940 
	`Êash_ª£t
(
öfo
);

941 
rcode
 = 1;

945 
pﬁl
++;

947 i‡((
	`gë_timî
(
œ°
)Ë> 
CFG_HZ
)

949 
	`putc
('*');

950 
œ°
 = 
	`gë_timî
(0);

956 i‡((
	`gë_timî
(
œ°
)Ë> 
CFG_HZ
) {

957 
	`putc
('.');

958 
œ°
 = 
	`gë_timî
(0);

961 
	`Êash_ª£t
(
öfo
);

965 
addr
 =ádd∏+ 
s_£˘‹_size
;

968 if(!
Êash_u£_SSI_°™d¨d
)

970 
	`¥ötf
("\n Exit Sector 0Érase !! \n");

973 
£˘
 = 7;

976 i‡(
öãl
) {

977 *
addr
 = (
FPW
)0x00500050;

978 *
addr
 = (
FPW
)0x00200020;

979 *
addr
 = (
FPW
)0x00D000D0;

984 
ba£
 = (
FPWV
 *)(
öfo
->
°¨t
[0]);

985 
ba£
[
FLASH_CYCLE1
] = (
FPW
)0x00AA00AA;

986 
ba£
[
FLASH_CYCLE2
] = (
FPW
)0x00550055;

987 
ba£
[
FLASH_CYCLE1
] = (
FPW
)0x00800080;

988 
ba£
[
FLASH_CYCLE1
] = (
FPW
)0x00AA00AA;

989 
ba£
[
FLASH_CYCLE2
] = (
FPW
)0x00550055;

990 *
addr
 = (
FPW
)0x00300030;

999 
°¨t
 = 
	`gë_timî
(0);

1005 
	`udñay
(1000);

1007 
pﬁl
 = 0;

1008 (*
addr
 & (
FPW
)0x00800080) != (FPW)0x00800080) {

1009 i‡((
now
 = 
	`gë_timî
(
°¨t
)Ë> (
ul⁄g
)
CFG_FLASH_ERASE_TOUT
) {

1010 
	`¥ötf
("Timeout\n");

1012 i‡(
öãl
) {

1014 *
addr
 = (
FPW
)0x00B000B0;

1017 
	`Êash_ª£t
(
öfo
);

1018 
rcode
 = 1;

1022 
pﬁl
++;

1024 i‡((
	`gë_timî
(
œ°
)Ë> 
CFG_HZ
) {

1025 
	`putc
('*');

1026 
œ°
 = 
	`gë_timî
(0);

1029 
	`¥ötf
("£˘ = %d,s_œ° = %d,îa£Öﬁ»%d\n",
£˘
,
s_œ°
,
pﬁl
);

1036 i‡((
	`gë_timî
(
œ°
)Ë> 
CFG_HZ
) {

1037 
	`putc
('.');

1038 
œ°
 = 
	`gë_timî
(0);

1041 
	`Êash_ª£t
(
öfo
);

1044 
	`¥ötf
(" done\n");

1045  
rcode
;

1046 
	}
}

1054 
	$wrôe_buff
(
Êash_öfo_t
 *
öfo
, 
uch¨
 *
§c
, 
ul⁄g
 
addr
, ul⁄g 
˙t
)

1056 
FPW
 
d©a
 = 0;

1057 
byãs
;

1058 
À·
;

1059 
i
, 
ªs
;

1061 
À·
 = 
˙t
, 
ªs
 = 0;

1062 
À·
 > 0 && 
ªs
 == 0;

1063 
addr
 +(
d©a
), 
À·
 -(d©aË- 
byãs
) {

1065 
byãs
 = 
addr
 & ((
d©a
) - 1);

1066 
addr
 &~((
d©a
) - 1);

1071 
i
 = 0; i < (
d©a
); i++) {

1072 i‡(
i
 < 
byãs
 || i - byã†>
À·
 )

1073 *((
uch¨
 *)&
d©a
 + 
i
Ë*((uch¨ *)
addr
 + i);

1075 *((
uch¨
 *)&
d©a
 + 
i
)*
§c
++;

1077 if(
	`gë_timî
(
π2880_Êash_°¨t_t
Ë> 
CFG_FLASH_STATE_DISPLAY_TOUT
)

1079 
	`¥ötf
("\¿add∏0x%08X ,˙t=%d ",
addr
,
À·
);

1080 
π2880_Êash_°¨t_t
 = 
	`gë_timî
(0);

1084 
öfo
->
Êash_id
 & 
FLASH_VENDMASK
) {

1085 
FLASH_MAN_AMD
:

1086 
ªs
 = 
	`wrôe_w‹d_amd
(
öfo
, (
FPWV
 *)
addr
, 
d©a
);

1088 
FLASH_MAN_INTEL
:

1089 
ªs
 = 
	`wrôe_w‹d_öãl
(
öfo
, (
FPWV
 *)
addr
, 
d©a
);

1091 
FLASH_MAN_MX
:

1093 
ªs
 = 
	`wrôe_w‹d_amd
(
öfo
, (
FPWV
 *)
addr
, 
d©a
);

1097 
	`¥ötf
("missing or unknown FLASHÅype\n");

1098 
ªs
 = 1;

1103  (
ªs
);

1104 
	}
}

1116 
	$wrôe_w‹d_amd
(
Êash_öfo_t
 *
öfo
, 
FPWV
 *
de°
, 
FPW
 
d©a
)

1118 
ul⁄g
 
°¨t
;

1120 
ªs
 = 0;

1121 
FPWV
 *
ba£
;

1123 
°¨t
 = 
	`gë_timî
(0);

1125 *
de°
 != 0xFFFF) {

1126 #i‚de‡
RT3052_FPGA_BOARD


1127 i‡(
	`gë_timî
(
°¨t
Ë> 
CFG_FLASH_STATE_DISPLAY_TOUT
)

1129 
°¨t
 = 
	`gë_timî
(0);

1130 
	`¥ötf
("\¿de°[0x%08X]=%04X\n",
de°
,*dest);

1136 
	`¥ötf
("NŸ Eø£:áddªs†0x%08x(vÆue=0x%08x)\n", (
ul⁄g
Ë
de°
, *dest);

1141 
ba£
 = (
FPWV
 *)(
öfo
->
°¨t
[0]);

1146 
ba£
[
FLASH_CYCLE1
] = (
FPW
)0x00AA00AA;

1147 
ba£
[
FLASH_CYCLE2
] = (
FPW
)0x00550055;

1148 
ba£
[
FLASH_CYCLE1
] = (
FPW
)0x00A000A0;

1150 *
de°
 = 
d©a
;

1158 
°¨t
 = 
	`gë_timî
(0);

1162 
ªs
 =0 && (*
de°
 & (
FPW
)0x00800080Ë!(
d©a
 & (FPW)0x00800080)) {

1163 i‡(
	`gë_timî
(
°¨t
Ë> 
CFG_FLASH_WRITE_TOUT
) {

1164 *
de°
 = (
FPW
)0x00F000F0;

1165 
ªs
 = 1;

1171 
ﬁd°©us
, 
°©us
, 
pﬁl
=0;

1172 
dq6
, 
dq5
, 
dq2
;

1174 
	`udñay
(10);

1175 
ﬁd°©us
 = *
de°
;

1176 
°©us
 = *
de°
;

1180 
dq6
 = (1<<6) & 0x000000FF;

1181 
dq5
 = (1<<5) & 0x000000FF;

1182 
dq2
 = (1<<2) & 0x000000FF;

1184  
ªs
 ==0 && (
°©us
 & 
dq6
Ë!(
ﬁd°©us
 & dq6) &&

1185 (
°©us
 & 
dq5
) != dq5 ) {

1187 i‡(
	`gë_timî
(
°¨t
Ë> 
CFG_FLASH_WRITE_TOUT
) {

1188 *
de°
 = (
FPW
)0x00F000F0;

1189 
	`¥ötf
("*reset bank\n");

1190 
ªs
 = 1;

1193 
pﬁl
++;

1194 
ﬁd°©us
 = *
de°
;

1196 
°©us
 = *
de°
;

1206  (
ªs
);

1207 
	}
}

1219 
	$wrôe_w‹d_öãl
(
Êash_öfo_t
 *
öfo
, 
FPWV
 *
de°
, 
FPW
 
d©a
)

1221 
ªs
 = 0;

1222 #ifde‡
kaikî


1223 
ul⁄g
 
°¨t
;

1226 i‡((*
de°
 & 
d©a
) != data) {

1233 *
de°
 = (
FPW
)0x00500050;

1234 *
de°
 = (
FPW
)0x00FF00FF;

1235 *
de°
 = (
FPW
)0x00400040;

1237 *
de°
 = 
d©a
;

1245 
°¨t
 = 
	`gë_timî
(0);

1247 
ªs
 =0 && (*
de°
 & (
FPW
)0x00800080) != (FPW)0x00800080) {

1248 i‡(
	`gë_timî
(
°¨t
Ë> 
CFG_FLASH_WRITE_TOUT
) {

1249 *
de°
 = (
FPW
)0x00B000B0;

1250 
ªs
 = 1;

1254 i‡(
ªs
 =0 && (*
de°
 & (
FPW
)0x00100010))

1255 
ªs
 = 1;

1257 *
de°
 = (
FPW
)0x00500050;

1258 *
de°
 = (
FPW
)0x00FF00FF;

1260  (
ªs
);

1261 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/CpuCp0RegDef.h

40 #i‚de‡
CPUCP0REGDEF_H


41 
	#CPUCP0REGDEF_H


	)

62 
	#R_r0
 0

	)

63 
	#R_r1
 1

	)

64 
	#R_r2
 2

	)

65 
	#R_r3
 3

	)

66 
	#R_r4
 4

	)

67 
	#R_r5
 5

	)

68 
	#R_r6
 6

	)

69 
	#R_r7
 7

	)

70 
	#R_r8
 8

	)

71 
	#R_r9
 9

	)

72 
	#R_r10
 10

	)

73 
	#R_r11
 11

	)

74 
	#R_r12
 12

	)

75 
	#R_r13
 13

	)

76 
	#R_r14
 14

	)

77 
	#R_r15
 15

	)

78 
	#R_r16
 16

	)

79 
	#R_r17
 17

	)

80 
	#R_r18
 18

	)

81 
	#R_r19
 19

	)

82 
	#R_r20
 20

	)

83 
	#R_r21
 21

	)

84 
	#R_r22
 22

	)

85 
	#R_r23
 23

	)

86 
	#R_r24
 24

	)

87 
	#R_r25
 25

	)

88 
	#R_r26
 26

	)

89 
	#R_r27
 27

	)

90 
	#R_r28
 28

	)

91 
	#R_r29
 29

	)

92 
	#R_r30
 30

	)

93 
	#R_r31
 31

	)

94 
	#R_hi
 32

	)

95 
	#R_lo
 33

	)

141 
	#C0_Index
 
$0


	)

142 
	#R_C0_Index
 0

	)

144 
	#S_IndexP
 31

	)

145 
	#M_IndexP
 (0x1 << 
S_IndexP
)

	)

147 
	#S_IndexIndex
 0

	)

148 
	#M_IndexIndex
 (0x‡<< 
S_IndexIndex
)

	)

150 
	#M_Index0Fõlds
 0x7ffffff0

	)

151 
	#M_IndexRFõlds
 0x80000000

	)

167 
	#C0_R™dom
 
$1


	)

168 
	#R_C0_R™dom
 1

	)

170 
	#S_R™domIndex
 0

	)

171 
	#M_R™domIndex
 (0x‡<< 
S_R™domIndex
)

	)

173 
	#M_R™dom0Fõlds
 0xfffffff0

	)

174 
	#M_R™domRFõlds
 0x0000000f

	)

189 
	#C0_E¡ryLo0
 
$2


	)

190 
	#R_C0_E¡ryLo0
 2

	)

192 
	#S_E¡ryLoPFN
 6

	)

193 
	#M_E¡ryLoPFN
 (0xffff‡<< 
S_E¡ryLoPFN
)

	)

194 
	#S_E¡ryLoC
 3

	)

195 
	#M_E¡ryLoC
 (0x7 << 
S_E¡ryLoC
)

	)

196 
	#S_E¡ryLoD
 2

	)

197 
	#M_E¡ryLoD
 (0x1 << 
S_E¡ryLoD
)

	)

198 
	#S_E¡ryLoV
 1

	)

199 
	#M_E¡ryLoV
 (0x1 << 
S_E¡ryLoV
)

	)

200 
	#S_E¡ryLoG
 0

	)

201 
	#M_E¡ryLoG
 (0x1 << 
S_E¡ryLoG
)

	)

203 
	#M_E¡ryLoOddPFN
 (0x1 << 
S_E¡ryLoPFN
Ë

	)

206 
	#S_E¡ryLo_LS
 
S_E¡ryLoPFN


	)

207 
	#S_E¡ryLo_RS
 
K_PageAlign


	)

209 
	#M_E¡ryLo0Fõlds
 0x3c000000

	)

210 
	#M_E¡ryLoRFõlds
 0xc0000000

	)

220 
	#K_CacheAârCWTnWA
 0

	)

221 
	#K_CacheAârCWTWA
 1

	)

222 
	#K_CacheAârU
 2

	)

223 
	#K_CacheAârC
 3

	)

224 
	#K_CacheAârCN
 3

	)

225 
	#K_CacheAârCCE
 4

	)

226 
	#K_CacheAârCCS
 5

	)

227 
	#K_CacheAârCCU
 6

	)

228 
	#K_CacheAârUA
 7

	)

243 
	#C0_E¡ryLo1
 
$3


	)

244 
	#R_C0_E¡ryLo1
 3

	)

263 
	#C0_C⁄ãxt
 
$4


	)

264 
	#R_C0_C⁄ãxt
 4

	)

266 
	#S_C⁄ãxtPTEBa£
 23

	)

267 
	#M_C⁄ãxtPTEBa£
 (0x1f‡<< 
S_C⁄ãxtPTEBa£
)

	)

268 
	#S_C⁄ãxtBadVPN
 4

	)

269 
	#M_C⁄ãxtBadVPN
 (0x7fff‡<< 
S_C⁄ãxtBadVPN
)

	)

271 
	#S_C⁄ãxtBadVPN_LS
 9

	)

272 
	#S_C⁄ãxtBadVPN_RS
 13

	)

274 
	#M_C⁄ãxt0Fõlds
 0x0000000f

	)

275 
	#M_C⁄ãxtRFõlds
 0x007ffff0

	)

290 
	#C0_PageMask
 
$5


	)

291 
	#R_C0_PageMask
 5

	)

293 
	#S_PageMaskMask
 13

	)

294 
	#M_PageMaskMask
 (0xff‡<< 
S_PageMaskMask
)

	)

296 
	#M_PageMask0Fõlds
 0x„001fff

	)

297 
	#M_PageMaskRFõlds
 0x00000000

	)

302 
	#K_PageMask4K
 0x000

	)

303 
	#K_PageMask16K
 0x003

	)

304 
	#K_PageMask64K
 0x00f

	)

305 
	#K_PageMask256K
 0x03f

	)

306 
	#K_PageMask1M
 0x0ff

	)

307 
	#K_PageMask4M
 0x3ff

	)

308 
	#K_PageMask16M
 0xfff

	)

310 
	#M_PageMask4K
 (
K_PageMask4K
 << 
S_PageMaskMask
Ë

	)

311 
	#M_PageMask16K
 (
K_PageMask16K
 << 
S_PageMaskMask
Ë

	)

312 
	#M_PageMask64K
 (
K_PageMask64K
 << 
S_PageMaskMask
)

	)

313 
	#M_PageMask256K
 (
K_PageMask256K
 << 
S_PageMaskMask
)

	)

314 
	#M_PageMask1M
 (
K_PageMask1M
 << 
S_PageMaskMask
)

	)

315 
	#M_PageMask4M
 (
K_PageMask4M
 << 
S_PageMaskMask
)

	)

316 
	#M_PageMask16M
 (
K_PageMask16M
 << 
S_PageMaskMask
)

	)

332 
	#C0_Wúed
 
$6


	)

333 
	#R_C0_Wúed
 6

	)

335 
	#S_WúedIndex
 0

	)

336 
	#M_WúedIndex
 (0x‡<< 
S_WúedIndex
)

	)

338 
	#M_Wúed0Fõlds
 0xfffffff0

	)

339 
	#M_WúedRFõlds
 0x00000000

	)

354 
	#C0_BadVAddr
 
$8


	)

355 
	#R_C0_BadVAddr
 8

	)

358 
	#M_BadVAddrOddPage
 
K_PageSize


	)

360 
	#M_BadVAddr0Fõlds
 0x00000000

	)

361 
	#M_BadVAddrRFõlds
 0xffffffff

	)

376 
	#C0_Cou¡
 
$9


	)

377 
	#R_C0_Cou¡
 9

	)

379 
	#M_Cou¡0Fõlds
 0x00000000

	)

380 
	#M_Cou¡RFõlds
 0x00000000

	)

395 
	#C0_E¡ryHi
 
$10


	)

396 
	#R_C0_E¡ryHi
 10

	)

398 
	#S_E¡ryHiVPN2
 13

	)

399 
	#M_E¡ryHiVPN2
 (0x7fff‡<< 
S_E¡ryHiVPN2
)

	)

400 
	#S_E¡ryHiASID
 0

	)

401 
	#M_E¡ryHiASID
 (0xf‡<< 
S_E¡ryHiASID
)

	)

404 
	#S_E¡ryHiVPN_Shf
 
S_E¡ryHiVPN2


	)

406 
	#M_E¡ryHi0Fõlds
 0x00001f00

	)

407 
	#M_E¡ryHiRFõlds
 0x00000000

	)

422 
	#C0_Com∑ª
 
$11


	)

423 
	#R_C0_Com∑ª
 11

	)

425 
	#M_Com∑ª0Fõlds
 0x00000000

	)

426 
	#M_Com∑ªRFõlds
 0x00000000

	)

443 
	#C0_Sètus
 
$12


	)

444 
	#R_C0_Sètus
 12

	)

446 
	#S_SètusCU
 28

	)

447 
	#M_SètusCU
 (0x‡<< 
S_SètusCU
)

	)

448 
	#S_SètusCU3
 31

	)

449 
	#M_SètusCU3
 (0x1 << 
S_SètusCU3
)

	)

450 
	#S_SètusCU2
 30

	)

451 
	#M_SètusCU2
 (0x1 << 
S_SètusCU2
)

	)

452 
	#S_SètusCU1
 29

	)

453 
	#M_SètusCU1
 (0x1 << 
S_SètusCU1
)

	)

454 
	#S_SètusCU0
 28

	)

455 
	#M_SètusCU0
 (0x1 << 
S_SètusCU0
)

	)

456 
	#S_SètusRP
 27

	)

457 
	#M_SètusRP
 (0x1 << 
S_SètusRP
)

	)

458 
	#S_SètusRE
 25

	)

459 
	#M_SètusRE
 (0x1 << 
S_SètusRE
)

	)

460 
	#S_SètusBEV
 22

	)

461 
	#M_SètusBEV
 (0x1 << 
S_SètusBEV
)

	)

462 
	#S_SètusTS
 21

	)

463 
	#M_SètusTS
 (0x1 << 
S_SètusTS
)

	)

464 
	#S_SètusSR
 20

	)

465 
	#M_SètusSR
 (0x1 << 
S_SètusSR
)

	)

466 
	#S_SètusNMI
 19

	)

467 
	#M_SètusNMI
 (0x1 << 
S_SètusNMI
)

	)

468 
	#S_SètusIM
 8

	)

469 
	#M_SètusIM
 (0xf‡<< 
S_SètusIM
)

	)

470 
	#S_SètusIM7
 15

	)

471 
	#M_SètusIM7
 (0x1 << 
S_SètusIM7
)

	)

472 
	#S_SètusIM6
 14

	)

473 
	#M_SètusIM6
 (0x1 << 
S_SètusIM6
)

	)

474 
	#S_SètusIM5
 13

	)

475 
	#M_SètusIM5
 (0x1 << 
S_SètusIM5
)

	)

476 
	#S_SètusIM4
 12

	)

477 
	#M_SètusIM4
 (0x1 << 
S_SètusIM4
)

	)

478 
	#S_SètusIM3
 11

	)

479 
	#M_SètusIM3
 (0x1 << 
S_SètusIM3
)

	)

480 
	#S_SètusIM2
 10

	)

481 
	#M_SètusIM2
 (0x1 << 
S_SètusIM2
)

	)

482 
	#S_SètusIM1
 9

	)

483 
	#M_SètusIM1
 (0x1 << 
S_SètusIM1
)

	)

484 
	#S_SètusIM0
 8

	)

485 
	#M_SètusIM0
 (0x1 << 
S_SètusIM0
)

	)

486 
	#S_SètusUM
 4

	)

487 
	#M_SètusUM
 (0x1 << 
S_SètusUM
)

	)

488 
	#S_SètusERL
 2

	)

489 
	#M_SètusERL
 (0x1 << 
S_SètusERL
)

	)

490 
	#S_SètusEXL
 1

	)

491 
	#M_SètusEXL
 (0x1 << 
S_SètusEXL
)

	)

492 
	#S_SètusIE
 0

	)

493 
	#M_SètusIE
 (0x1 << 
S_SètusIE
)

	)

495 
	#M_Sètus0Fõlds
 0x01840000

	)

496 
	#M_SètusRFõlds
 0x040300e8

	)

513 
	#C0_Cau£
 
$13


	)

514 
	#R_C0_Cau£
 13

	)

516 
	#S_Cau£BD
 31

	)

517 
	#M_Cau£BD
 (0x1 << 
S_Cau£BD
)

	)

518 
	#S_Cau£CE
 28

	)

519 
	#M_Cau£CE
 (0x3<< 
S_Cau£CE
)

	)

520 
	#S_Cau£IV
 23

	)

521 
	#M_Cau£IV
 (0x1 << 
S_Cau£IV
)

	)

522 
	#S_Cau£WP
 22

	)

523 
	#M_Cau£WP
 (0x1 << 
S_Cau£WP
)

	)

524 
	#S_Cau£IP
 8

	)

525 
	#M_Cau£IP
 (0xf‡<< 
S_Cau£IP
)

	)

526 
	#S_Cau£IPEXT
 10

	)

527 
	#M_Cau£IPEXT
 (0x3‡<< 
S_Cau£IPEXT
)

	)

528 
	#S_Cau£IP7
 15

	)

529 
	#M_Cau£IP7
 (0x1 << 
S_Cau£IP7
)

	)

530 
	#S_Cau£IP6
 14

	)

531 
	#M_Cau£IP6
 (0x1 << 
S_Cau£IP6
)

	)

532 
	#S_Cau£IP5
 13

	)

533 
	#M_Cau£IP5
 (0x1 << 
S_Cau£IP5
)

	)

534 
	#S_Cau£IP4
 12

	)

535 
	#M_Cau£IP4
 (0x1 << 
S_Cau£IP4
)

	)

536 
	#S_Cau£IP3
 11

	)

537 
	#M_Cau£IP3
 (0x1 << 
S_Cau£IP3
)

	)

538 
	#S_Cau£IP2
 10

	)

539 
	#M_Cau£IP2
 (0x1 << 
S_Cau£IP2
)

	)

540 
	#S_Cau£IP1
 9

	)

541 
	#M_Cau£IP1
 (0x1 << 
S_Cau£IP1
)

	)

542 
	#S_Cau£IP0
 8

	)

543 
	#M_Cau£IP0
 (0x1 << 
S_Cau£IP0
)

	)

544 
	#S_Cau£ExcCode
 2

	)

545 
	#M_Cau£ExcCode
 (0x1‡<< 
S_Cau£ExcCode
)

	)

547 
	#M_Cau£0Fõlds
 0x4f3f0083

	)

548 
	#M_Cau£RFõlds
 0xb000fc7c

	)

553 
	#K_Cau£CE0
 0

	)

554 
	#K_Cau£CE1
 1

	)

555 
	#K_Cau£CE2
 2

	)

556 
	#K_Cau£CE3
 3

	)

561 
	#EX_INT
 0

	)

562 
	#EXC_INT
 (
EX_INT
 << 
S_Cau£ExcCode
)

	)

563 
	#EX_MOD
 1

	)

564 
	#EXC_MOD
 (
EX_MOD
 << 
S_Cau£ExcCode
)

	)

565 
	#EX_TLBL
 2

	)

566 
	#EXC_TLBL
 (
EX_TLBL
 << 
S_Cau£ExcCode
)

	)

567 
	#EX_TLBS
 3

	)

568 
	#EXC_TLBS
 (
EX_TLBS
 << 
S_Cau£ExcCode
)

	)

569 
	#EX_ADEL
 4

	)

570 
	#EXC_ADEL
 (
EX_ADEL
 << 
S_Cau£ExcCode
)

	)

571 
	#EX_ADES
 5

	)

572 
	#EXC_ADES
 (
EX_ADES
 << 
S_Cau£ExcCode
)

	)

573 
	#EX_IBE
 6

	)

574 
	#EXC_IBE
 (
EX_IBE
 << 
S_Cau£ExcCode
)

	)

575 
	#EX_DBE
 7

	)

576 
	#EXC_DBE
 (
EX_DBE
 << 
S_Cau£ExcCode
)

	)

577 
	#EX_SYS
 8

	)

578 
	#EXC_SYS
 (
EX_SYS
 << 
S_Cau£ExcCode
)

	)

579 
	#EX_SYSCALL
 
EX_SYS


	)

580 
	#EXC_SYSCALL
 
EXC_SYS


	)

581 
	#EX_BP
 9

	)

582 
	#EXC_BP
 (
EX_BP
 << 
S_Cau£ExcCode
)

	)

583 
	#EX_BREAK
 
EX_BP


	)

584 
	#EXC_BREAK
 
EXC_BP


	)

585 
	#EX_RI
 10

	)

586 
	#EXC_RI
 (
EX_RI
 << 
S_Cau£ExcCode
)

	)

587 
	#EX_CPU
 11

	)

588 
	#EXC_CPU
 (
EX_CPU
 << 
S_Cau£ExcCode
)

	)

589 
	#EX_OV
 12

	)

590 
	#EXC_OV
 (
EX_OV
 << 
S_Cau£ExcCode
)

	)

591 
	#EX_TR
 13

	)

592 
	#EXC_TR
 (
EX_TR
 << 
S_Cau£ExcCode
)

	)

593 
	#EX_TRAP
 
EX_TR


	)

594 
	#EXC_TRAP
 
EXC_TR


	)

595 
	#EX_WATCH
 23

	)

596 
	#EXC_WATCH
 (
EX_WATCH
 << 
S_Cau£ExcCode
)

	)

597 
	#EX_MCHECK
 24

	)

598 
	#EXC_MCHECK
 (
EX_MCHECK
 << 
S_Cau£ExcCode
)

	)

613 
	#C0_EPC
 
$14


	)

614 
	#R_C0_EPC
 14

	)

616 
	#M_EPC0Fõlds
 0x00000000

	)

617 
	#M_EPCRFõlds
 0x00000000

	)

632 
	#C0_PRId
 
$15


	)

633 
	#R_C0_PRId
 15

	)

635 
	#S_PRIdCoID
 16

	)

636 
	#M_PRIdCoID
 (0xf‡<< 
S_PRIdCoID
)

	)

637 
	#S_PRIdImp
 8

	)

638 
	#M_PRIdImp
 (0xf‡<< 
S_PRIdImp
)

	)

639 
	#S_PRIdRev
 0

	)

640 
	#M_PRIdRev
 (0xf‡<< 
S_PRIdRev
)

	)

642 
	#M_PRId0Fõlds
 0x00000000

	)

643 
	#M_PRIdRFõlds
 0xffffffff

	)

648 
	#K_PRIdCoID_MIPS
 1

	)

649 
	#K_PRIdCoID_Brﬂdcom
 2

	)

650 
	#K_PRIdCoID_Alchemy
 3

	)

651 
	#K_PRIdCoID_SiByã
 4

	)

652 
	#K_PRIdCoID_S™dCø·
 5

	)

653 
	#K_PRIdCoID_Phûùs
 6

	)

654 
	#K_PRIdCoID_NextAvaûabÀ
 7

	)

659 
	#K_PRIdImp_Jade
 0x80

	)

660 
	#K_PRIdImp_O∑l
 0x81

	)

661 
	#K_PRIdImp_Ruby
 0x82

	)

662 
	#K_PRIdImp_JadeLôe
 0x83

	)

663 
	#K_PRIdImp_4KEc
 0x84

	)

664 
	#K_PRIdImp_4KEmp
 0x85

	)

665 
	#K_PRIdImp_4KSc
 0x86

	)

667 
	#K_PRIdImp_R3000
 0x01

	)

668 
	#K_PRIdImp_R4000
 0x04

	)

669 
	#K_PRIdImp_R10000
 0x09

	)

670 
	#K_PRIdImp_R4300
 0x0b

	)

671 
	#K_PRIdImp_R5000
 0x23

	)

672 
	#K_PRIdImp_R5200
 0x28

	)

673 
	#K_PRIdImp_R5400
 0x54

	)

690 
	#C0_C⁄fig
 
$16


	)

691 
	#R_C0_C⁄fig
 16

	)

693 
	#S_C⁄figM‹e
 31

	)

694 
	#M_C⁄figM‹e
 (0x1 << 
S_C⁄figM‹e
)

	)

695 
	#S_C⁄figMDU
 20

	)

696 
	#M_C⁄figMDU
 (0x1 << 
S_C⁄figMDU
)

	)

697 
	#S_C⁄figMM
 17

	)

698 
	#M_C⁄figMM
 (0x3 << 
S_C⁄figMM
)

	)

699 
	#S_C⁄figBM
 16

	)

700 
	#M_C⁄figBM
 (0x1 << 
S_C⁄figBM
)

	)

701 
	#S_C⁄figBE
 15

	)

702 
	#M_C⁄figBE
 (0x1 << 
S_C⁄figBE
)

	)

703 
	#S_C⁄figAT
 13

	)

704 
	#M_C⁄figAT
 (0x3 << 
S_C⁄figAT
)

	)

705 
	#S_C⁄figAR
 10

	)

706 
	#M_C⁄figAR
 (0x7 << 
S_C⁄figAR
)

	)

707 
	#S_C⁄figMT
 7

	)

708 
	#M_C⁄figMT
 (0x7 << 
S_C⁄figMT
)

	)

709 
	#S_C⁄figK0
 0

	)

710 
	#M_C⁄figK0
 (0x7 << 
S_C⁄figK0
)

	)

720 
	#S_C⁄figK23
 28

	)

721 
	#M_C⁄figK23
 (0x7 << 
S_C⁄figK23
)

	)

722 
	#S_C⁄figKU
 25

	)

723 
	#M_C⁄figKU
 (0x7 << 
S_C⁄figKU
)

	)

725 
	#M_C⁄fig0Fõlds
 0x00000078

	)

726 
	#M_C⁄figRFõlds
 0x01e80000

	)

736 
	#K_C⁄figMDU_Fa°
 0

	)

737 
	#K_C⁄figMDU_Iãøtive
 0

	)

742 
	#K_C⁄figAT_MIPS32
 0

	)

743 
	#K_C⁄figAT_MIPS64S
 1

	)

744 
	#K_C⁄figAT_MIPS64
 2

	)

750 
	#K_C⁄figMT_NoMMU
 0

	)

751 
	#K_C⁄figMT_TLBMMU
 1

	)

752 
	#K_C⁄figMT_BATMMU
 2

	)

753 
	#K_C⁄figMT_FMMMU
 3

	)

769 
	#C0_C⁄fig1
 
$16
,1

	)

770 
	#R_C0_C⁄fig1
 16

	)

772 
	#S_C⁄fig1MMUSize
 25

	)

773 
	#M_C⁄fig1MMUSize
 (0x3‡<< 
S_C⁄fig1MMUSize
)

	)

774 
	#S_C⁄fig1IS
 22

	)

775 
	#M_C⁄fig1IS
 (0x7 << 
S_C⁄fig1IS
)

	)

776 
	#S_C⁄fig1IL
 19

	)

777 
	#M_C⁄fig1IL
 (0x7 << 
S_C⁄fig1IL
)

	)

778 
	#S_C⁄fig1IA
 16

	)

779 
	#M_C⁄fig1IA
 (0x7 << 
S_C⁄fig1IA
)

	)

780 
	#S_C⁄fig1DS
 13

	)

781 
	#M_C⁄fig1DS
 (0x7 << 
S_C⁄fig1DS
)

	)

782 
	#S_C⁄fig1DL
 10

	)

783 
	#M_C⁄fig1DL
 (0x7 << 
S_C⁄fig1DL
)

	)

784 
	#S_C⁄fig1DA
 7

	)

785 
	#M_C⁄fig1DA
 (0x7 << 
S_C⁄fig1DA
)

	)

786 
	#S_C⁄fig1PC
 4

	)

787 
	#M_C⁄fig1PC
 (0x1 << 
S_C⁄fig1PC
)

	)

788 
	#S_C⁄fig1WR
 3

	)

789 
	#M_C⁄fig1WR
 (0x1 << 
S_C⁄fig1WR
)

	)

790 
	#S_C⁄fig1CA
 2

	)

791 
	#M_C⁄fig1CA
 (0x1 << 
S_C⁄fig1CA
)

	)

792 
	#S_C⁄fig1EP
 1

	)

793 
	#M_C⁄fig1EP
 (0x1 << 
S_C⁄fig1EP
)

	)

794 
	#S_C⁄fig1FP
 0

	)

795 
	#M_C⁄fig1FP
 (0x1 << 
S_C⁄fig1FP
)

	)

797 
	#M_C⁄fig10Fõlds
 0x80000060

	)

798 
	#M_C⁄fig1RFõlds
 0x7fffff9f

	)

848 
	#C0_LLAddr
 
$17


	)

849 
	#R_C0_LLAddr
 17

	)

851 
	#S_LLAddrPAddr
 0

	)

852 
	#M_LLAddrPAddr
 (0xffffff‡<< 
S_LLAddrPAddr
)

	)

854 
	#M_LLAddr0Fõlds
 0xf0000000

	)

855 
	#M_LLAddrRFõlds
 0x0fffffff

	)

870 
	#C0_W©chLo
 
$18


	)

871 
	#R_C0_W©chLo
 18

	)

873 
	#S_W©chLoVAddr
 3

	)

874 
	#M_W©chLoVAddr
 (0x1ffffff‡<< 
S_W©chLoVAddr
)

	)

875 
	#S_W©chLoI
 2

	)

876 
	#M_W©chLoI
 (0x1 << 
S_W©chLoI
)

	)

877 
	#S_W©chLoR
 1

	)

878 
	#M_W©chLoR
 (0x1 << 
S_W©chLoR
)

	)

879 
	#S_W©chLoW
 0

	)

880 
	#M_W©chLoW
 (0x1 << 
S_W©chLoW
)

	)

882 
	#M_W©chLo0Fõlds
 0x00000000

	)

883 
	#M_W©chLoRFõlds
 0x00000000

	)

885 
	#M_W©chLoE«bÀs
 (
M_W©chLoI
 | 
M_W©chLoR
 | 
M_W©chLoW
)

	)

900 
	#C0_W©chHi
 
$19


	)

901 
	#R_C0_W©chHi
 19

	)

903 
	#S_W©chHiG
 30

	)

904 
	#M_W©chHiG
 (0x1 << 
S_W©chHiG
)

	)

905 
	#S_W©chHiASID
 16

	)

906 
	#M_W©chHiASID
 (0xf‡<< 
S_W©chHiASID
)

	)

907 
	#S_W©chHiMask
 3

	)

908 
	#M_W©chHiMask
 (0x1f‡<< 
S_W©chHiMask
)

	)

910 
	#M_W©chHi0Fõlds
 0xbf00f007

	)

911 
	#M_W©chHiRFõlds
 0x00000000

	)

932 
	#C0_Debug
 
$23


	)

933 
	#R_C0_Debug
 23

	)

935 
	#S_DebugDBD
 31

	)

936 
	#M_DebugDBD
 (0x1 << 
S_DebugDBD
)

	)

937 
	#S_DebugDM
 30

	)

938 
	#M_DebugDM
 (0x1 << 
S_DebugDM
)

	)

939 
	#S_DebugLSNM
 28

	)

940 
	#M_DebugLSNM
 (0x1 << 
S_DebugLSNM
)

	)

941 
	#S_DebugDoze
 27

	)

942 
	#M_DebugDoze
 (0x1 << 
S_DebugDoze
)

	)

943 
	#S_DebugHÆt
 26

	)

944 
	#M_DebugHÆt
 (0x1 << 
S_DebugHÆt
)

	)

945 
	#S_DebugCou¡DM
 25

	)

946 
	#M_DebugCou¡DM
 (0x1 << 
S_DebugCou¡DM
)

	)

947 
	#S_DebugIBusEP
 24

	)

948 
	#M_DebugIBusEP
 (0x1 << 
S_DebugIBusEP
)

	)

949 
	#S_DebugDBusEP
 21

	)

950 
	#M_DebugDBusEP
 (0x1 << 
S_DebugDBusEP
)

	)

951 
	#S_DebugIEXI
 20

	)

952 
	#M_DebugIEXI
 (0x1 << 
S_DebugIEXI
)

	)

953 
	#S_DebugEJTAGvî
 15

	)

954 
	#M_DebugEJTAGvî
 (0x7 << 
S_DebugEJTAGvî
)

	)

955 
	#S_DebugDExcCode
 10

	)

956 
	#M_DebugDExcCode
 (0x1‡<< 
S_DebugDExcCode
)

	)

957 
	#S_DebugSSt
 8

	)

958 
	#M_DebugSSt
 (0x1 << 
S_DebugSSt
)

	)

959 
	#S_DebugDINT
 5

	)

960 
	#M_DebugDINT
 (0x1 << 
S_DebugDINT
)

	)

961 
	#S_DebugDIB
 4

	)

962 
	#M_DebugDIB
 (0x1 << 
S_DebugDIB
)

	)

963 
	#S_DebugDDBS
 3

	)

964 
	#M_DebugDDBS
 (0x1 << 
S_DebugDDBS
)

	)

965 
	#S_DebugDDBL
 2

	)

966 
	#M_DebugDDBL
 (0x1 << 
S_DebugDDBL
)

	)

967 
	#S_DebugDBp
 1

	)

968 
	#M_DebugDBp
 (0x1 << 
S_DebugDBp
)

	)

969 
	#S_DebugDSS
 0

	)

970 
	#M_DebugDSS
 (0x1 << 
S_DebugDSS
)

	)

972 
	#M_Debug0Fõlds
 0x20cc02c0

	)

973 
	#M_DebugRFõlds
 0x˚03fc3f

	)

989 
	#C0_DEPC
 
$24


	)

990 
	#R_C0_DEPC
 24

	)

992 
	#M_DEEPC0Fõlds
 0x00000000

	)

993 
	#M_DEEPCRFõlds
 0x00000000

	)

1010 
	#C0_TagLo
 
$28


	)

1011 
	#R_C0_TagLo
 28

	)

1013 
	#S_TagLoPA
 10

	)

1014 
	#M_TagLoPA
 (0x3ffff‡<< 
S_TagLoPA
)

	)

1015 
	#S_TagLoVÆid
 4

	)

1016 
	#M_TagLoVÆid
 (0x‡<< 
S_TagLoVÆid
)

	)

1017 
	#S_TagLoL
 2

	)

1018 
	#M_TagLoL
 (0x1 << 
S_TagLoL
)

	)

1019 
	#S_TagLoLRF
 1

	)

1020 
	#M_TagLoLRF
 (0x1 << 
S_TagLoLRF
)

	)

1022 
	#M_TagLo0Fõlds
 0x00000309

	)

1023 
	#M_TagLoRFõlds
 0x00000000

	)

1038 
	#C0_D©aLo
 
$28
,1

	)

1039 
	#R_C0_D©aLo
 28

	)

1041 
	#M_D©aLo0Fõlds
 0x00000000

	)

1042 
	#M_D©aLoRFõlds
 0xffffffff

	)

1057 
	#C0_Eº‹EPC
 
$30


	)

1058 
	#R_C0_Eº‹EPC
 30

	)

1060 
	#M_Eº‹EPC0Fõlds
 0x00000000

	)

1061 
	#M_Eº‹EPCRFõlds
 0x00000000

	)

1076 
	#C0_DESAVE
 
$31


	)

1077 
	#R_C0_DESAVE
 31

	)

1079 
	#M_DESAVE0Fõlds
 0x00000000

	)

1080 
	#M_DESAVERFõlds
 0x00000000

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/aux_intc.h

39 #i‚de‡
AUX_INTC_H


40 
	#AUX_INTC_H


	)

51 
	#INTC_DESHW_DMA_INT
 
INTC_DMA_AUX0_INT


	)

52 
	#deshwDmaI¡
 
dmaAux0I¡


	)

54 
	#INTC_PCMCIA_DMA_INT
 
INTC_DMA_AUX1_INT


	)

55 
	#pcmcüDmaI¡
 
dmaAux1I¡


	)

59 
	#INTC_DESHW_INT
 
INTC_AUX0_INT


	)

60 
	#deshwI¡
 
aux0I¡


	)

62 
	#INTC_PCMCIA_INT
 
INTC_AUX1_INT


	)

63 
	#pcmcüI¡
 
aux1I¡


	)

65 
	#INTC_IDE3710_INT
 
INTC_AUX2_INT


	)

66 
	#ide3710I¡
 
aux2I¡


	)

68 
	#INTC_ENET_INT
 
INTC_AUX3_INT


	)

69 
	#íëI¡
 
aux3I¡


	)

71 
	#INTC_ENET1_INT
 
INTC_AUX4_INT


	)

72 
	#íë1I¡
 
aux4I¡


	)

74 
	#INTC_IDE37101_INT
 
INTC_AUX5_INT


	)

75 
	#ide37101I¡
 
aux5I¡


	)

77 
	#INTC_ATA_INT
 
INTC_AUX6_INT


	)

78 
	#©aI¡
 
aux6I¡


	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/aux_reg_map.h

36 #i‚de‡
AUX_REG_MAP_H


37 
	#AUX_REG_MAP_H


	)

48 
	#DESHW
 
AUX0


	)

49 
	#PCMCIA
 
AUX1


	)

50 
	#IDE3710
 
AUX2


	)

51 
	#ENET
 
AUX3


	)

52 
	#ENET1
 
AUX4


	)

53 
	#IDE37101
 
AUX5


	)

54 
	#ATA
 
AUX6


	)

57 
	#DESHW_BASE
 
AUX0_BASE


	)

58 
	#PCMCIA_BASE
 
AUX1_BASE


	)

59 
	#IDE3710_BASE
 
AUX2_BASE


	)

60 
	#ENET_BASE
 
AUX3_BASE


	)

61 
	#ENET1_BASE
 
AUX4_BASE


	)

62 
	#IDE37101_BASE
 
AUX5_BASE


	)

63 
	#ATA_BASE
 
AUX6_BASE


	)

71 
	#DMA_DESHW_BASE
 
DMA_AUX0_BASE


	)

72 
	#DMA_PCMCIA_BASE
 
DMA_AUX1_BASE


	)

79 
	#DMA_ATA_BASE
 (
DMA_AUX1_BASE
)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/chip_reg_map.h

34 #i‚de‡
CHIP_REG_MAP_H


35 
	#CHIP_REG_MAP_H


	)

40 
	~"aux_ªg_m≠.h
"

53 
	#SYSC
 0x0000

	)

54 
	#TMR
 0x0001

	)

55 
	#INTC
 0x0002

	)

56 
	#MAC
 0x0003

	)

57 
	#RSV1
 0x0004

	)

58 
	#UART
 0x0005

	)

59 
	#PIO
 0x0006

	)

60 
	#DMA
 0x0007

	)

61 
	#LCD
 0x0008

	)

62 
	#I2C
 0x0009

	)

63 
	#RTC
 0x000A

	)

64 
	#SPI
 0x000B

	)

65 
	#UARTLITE
 0x000C

	)

66 
	#RSV2
 0x000D

	)

67 
	#RSV3
 0x000E

	)

68 
	#RSV4
 0x000F

	)

69 
	#AUX0
 0X0010

	)

70 
	#AUX1
 0X0014

	)

71 
	#AUX2
 0X0018

	)

72 
	#AUX3
 0x001C

	)

73 
	#AUX4
 0x0020

	)

74 
	#AUX5
 0x0024

	)

75 
	#AUX6
 0x0028

	)

76 
	#AUX7
 0x002C

	)

77 
	#AUX8
 0x0030

	)

78 
	#AUX9
 0x0034

	)

79 
	#AUX10
 0x0038

	)

81 
	#IRAM
 0x000D

	)

82 
	#ERAM
 0x000E

	)

83 
	#EROM
 0x000F

	)

84 
	#SRAM
 
ERAM


	)

85 
	#FROM
 
EROM


	)

87 
	#SYSC_BASE
 (
PALMPAK_BASE
 + (
SYSC
 << 8)Ë

	)

88 
	#TMR_BASE
 (
PALMPAK_BASE
 + (
TMR
 << 8)Ë

	)

89 
	#INTC_BASE
 (
PALMPAK_BASE
 + (
INTC
 << 8)Ë

	)

90 
	#MAC_BASE
 (
PALMPAK_BASE
 + (
MAC
 << 8)Ë

	)

91 
	#RSV1_BASE
 (
PALMPAK_BASE
 + (
RSV1
 << 8)Ë

	)

92 
	#UART_BASE
 (
PALMPAK_BASE
 + (
UART
 << 8)Ë

	)

93 
	#PIO_BASE
 (
PALMPAK_BASE
 + (
PIO
 << 8)Ë

	)

94 
	#DMA_BASE
 (
PALMPAK_BASE
 + (
DMA
 << 8)Ë

	)

95 
	#LCD_BASE
 (
PALMPAK_BASE
 + (
LCD
 << 8)Ë

	)

96 
	#I2C_BASE
 (
PALMPAK_BASE
 + (
I2C
 << 8)Ë

	)

97 
	#RTC_BASE
 (
PALMPAK_BASE
 + (
RTC
 << 8)Ë

	)

98 
	#SPI_BASE
 (
PALMPAK_BASE
 + (
SPI
 << 8)Ë

	)

99 
	#UARTLITE_BASE
 (
PALMPAK_BASE
 + (
UARTLITE
 << 8)Ë

	)

100 
	#RSV2_BASE
 (
PALMPAK_BASE
 + (
RSV2
 << 8)Ë

	)

101 
	#RSV3_BASE
 (
PALMPAK_BASE
 + (
RSV3
 << 8)Ë

	)

102 
	#RSV4_BASE
 (
PALMPAK_BASE
 + (
RSV4
 << 8)Ë

	)

103 
	#AUX0_BASE
 (
PALMPAK_BASE
 + (
AUX0
 << 8)Ë

	)

104 
	#AUX1_BASE
 (
PALMPAK_BASE
 + (
AUX1
 << 8)Ë

	)

105 
	#AUX2_BASE
 (
PALMPAK_BASE
 + (
AUX2
 << 8)Ë

	)

106 
	#AUX3_BASE
 (
PALMPAK_BASE
 + (
AUX3
 << 8)Ë

	)

107 
	#AUX4_BASE
 (
PALMPAK_BASE
 + (
AUX4
 << 8)Ë

	)

108 
	#AUX5_BASE
 (
PALMPAK_BASE
 + (
AUX5
 << 8)Ë

	)

109 
	#AUX6_BASE
 (
PALMPAK_BASE
 + (
AUX6
 << 8)Ë

	)

110 
	#AUX7_BASE
 (
PALMPAK_BASE
 + (
AUX7
 << 8)Ë

	)

111 
	#AUX8_BASE
 (
PALMPAK_BASE
 + (
AUX8
 << 8)Ë

	)

112 
	#AUX9_BASE
 (
PALMPAK_BASE
 + (
AUX9
 << 8)Ë

	)

113 
	#AUX10_BASE
 (
PALMPAK_BASE
 + (
AUX10
 << 8)Ë

	)

115 
	#UART0_BASE
 
UART_BASE


	)

118 
	#PLL
 
SYSC


	)

119 
	#PLL_BASE
 (
SYSC_BASE
 + 0x40)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/compiler.h

40 #i‚de‡
COMPILER_H


41 
	#COMPILER_H


	)

54 
	#INLINE


	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/cpu.h

39 #i‚de‡
CPU_H


40 
	#CPU_H


	)

45 
	~"mem_m≠.h
"

56 
	#KSEG_MSK
 0xE0000000

	)

57 
	#KSEG0BASE
 0x80000000

	)

58 
	#KSEG1BASE
 0xA0000000

	)

59 
	#KSEG2BASE
 0xC0000000

	)

60 
	#KSEG3BASE
 0xE0000000

	)

61 
	#KUSEGBASE
 0x00000000

	)

63 
	#KSEG0
(
addr
Ë((◊ddrË& ~
KSEG_MSK
Ë| 
KSEG0BASE
)

	)

64 
	#KSEG1
(
addr
Ë((◊ddrË& ~
KSEG_MSK
Ë| 
KSEG1BASE
)

	)

65 
	#KSEG2
(
addr
Ë((◊ddrË& ~
KSEG_MSK
Ë| 
KSEG2BASE
)

	)

66 
	#KSEG3
(
addr
Ë((◊ddrË& ~
KSEG_MSK
Ë| 
KSEG3BASE
)

	)

67 
	#KUSEG
(
addr
Ë–◊ddrË& ~
KSEG_MSK
)

	)

69 
	#UNCACHED
(
addr
Ë
	`KSEG1
◊ddr)

	)

71 #ifde‡
USE_CACHE


72 
	#CACHED
(
addr
Ë
	`KSEG0
◊ddr)

	)

74 
	#CACHED
(
addr
Ë
	`KSEG1
◊ddr)

	)

77 
	#PHYS
(
addr
Ë
	`KUSEG
◊ddr)

	)

81 
	#CPU_ADDR
(
addr
Ë
	`PHYS
◊ddr)

	)

87 
	#CACHE_OP
(
code
, 
ty≥
Ë(((codeË<< 2Ë| (ty≥))

	)

101 
	#ICACHE_INDEX_INVALIDATE
 
	`CACHE_OP
(0x0, 0)

	)

102 
	#ICACHE_INDEX_LOAD_TAG
 
	`CACHE_OP
(0x1, 0)

	)

103 
	#ICACHE_INDEX_STORE_TAG
 
	`CACHE_OP
(0x2, 0)

	)

105 
	#DCACHE_INDEX_WRITEBACK_INVALIDATE
 
	`CACHE_OP
(0x0, 1)

	)

106 
	#DCACHE_INDEX_LOAD_TAG
 
	`CACHE_OP
(0x1, 1)

	)

107 
	#DCACHE_INDEX_STORE_TAG
 
	`CACHE_OP
(0x2, 1)

	)

109 
	#ICACHE_ADDR_HIT_INVALIDATE
 
	`CACHE_OP
(0x4, 0)

	)

110 
	#ICACHE_ADDR_FILL
 
	`CACHE_OP
(0x5, 0)

	)

111 
	#ICACHE_ADDR_FETCH_LOCK
 
	`CACHE_OP
(0x7, 0)

	)

113 
	#DCACHE_ADDR_HIT_INVALIDATE
 
	`CACHE_OP
(0x4, 1)

	)

114 
	#DCACHE_ADDR_HIT_WRITEBACK_INVALIDATE
 
	`CACHE_OP
(0x5, 1)

	)

115 
	#DCACHE_ADDR_HIT_WRITEBACK
 
	`CACHE_OP
(0x6, 1)

	)

116 
	#DCACHE_ADDR_FETCH_LOCK
 
	`CACHE_OP
(0x7, 1)

	)

126 
	#DISABLE_TMR_DELAY_IRAM
 (0x30)

	)

127 
	#DISABLE_TMR_DELAY
 (0x80)

	)

133 
	#INTC_NUM_IRQS
 2

134 

	)

135 
	#IRQ0_SETUP_MASK
 
M_SètusIM2


	)

136 
	#IRQ1_SETUP_MASK
 
M_SètusIM3


	)

138 
	#IRQ0_DETECT_MASK
 
M_Cau£IP2


	)

139 
	#IRQ1_DETECT_MASK
 
M_Cau£IP3


	)

145 
	#VECTORS_BASE
 (0x80000000)

146 
	#BEV1_VECTORS_BASE
 (0xBFC00000)

147 

	)

148 
	#TLBMISS_VEC_OFFSET
 (0x000)

	)

149 
	#EXCEPT_VEC_OFFSET
 (0x180)

	)

150 
	#INT_VEC_OFFSET
 (0x200)

	)

152 
	#BEV1_RESET_VEC_OFFSET
 (0x000)

	)

153 
	#BEV1_TLBMISS_VEC_OFFSET
 (0x200)

	)

154 
	#BEV1_EXCEPT_VEC_OFFSET
 (0x380)

	)

155 
	#BEV1_INT_VEC_OFFSET
 (0x400)

	)

156 
	#BEV1_DEBUG_VEC_OFFSET
 (0x480)

	)

159 
	#UNDEF_INST_VEC_LOC
 (0x0)

	)

160 
	#PREF_ABORT_VEC_LOC
 
EXCEPT_VEC_LOC


	)

162 
	#TLBMISS_VEC_LOC
 (
VECTORS_BASE
 | 
TLBMISS_VEC_OFFSET
)

	)

163 
	#EXCEPT_VEC_LOC
 (
VECTORS_BASE
 | 
EXCEPT_VEC_OFFSET
)

	)

164 
	#INT_VEC_LOC
 (
VECTORS_BASE
 | 
INT_VEC_OFFSET
)

	)

166 
	#RESET_VEC_LOC
 (
BEV1_VECTORS_BASE
 | 
BEV1_RESET_VEC_OFFSET
)

	)

167 
	#BEV1_TBLMISS_VEC_LOC
 (
BEV1_VECTORS_BASE
 | 
BEV1_TLBMISS_VEC_OFFSET
)

	)

168 
	#BEV1_EXCEPT_VEC_LOC
 (
BEV1_VECTORS_BASE
 | 
BEV1_EXCEPT_VEC_OFFSET
)

	)

169 
	#BEV1_INT_VEC_LOC
 (
BEV1_VECTORS_BASE
 | 
BEV1_INT_VEC_OFFSET
)

	)

170 
	#BEV1_DEBUG_VEC_LOC
 (
BEV1_VECTORS_BASE
 | 
BEV1_DEBUG_VEC_OFFSET
)

	)

177 
	#INT_STACK_SIZE
 (0x100)

	)

179 #ifde‡
STK_IN_VECTMEM


180 #ifde‡
REMAPPED_VECTOR_MEM


181 
	#INT_SP_BASE
 (
VECTMEM_REMAPPED_END
)

	)

183 
	#INT_SP_BASE
 (
VECTMEM_BOOT_END
)

	)

186 #ifde‡
STK_IN_SRAM


187 
	#INT_SP_BASE
 (
SRAM_END
)

	)

189 #ifde‡
REMAPPED_IRAM


190 
	#INT_SP_BASE
 (
ISRAM_REMAPPED_END
)

	)

192 
	#INT_SP_BASE
 (
ISRAM_BOOT_END
)

	)

198 
	#MAIN_SP_BASE
 (
INT_SP_BASE
 - 
INT_STACK_SIZE
)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/cpu_except.h

40 #i‚de‡
CPU_EXCEPT_H


41 
	#CPU_EXCEPT_H


	)

46 
	~"mem_m≠.h
"

64 #ifde‡
CODE_IN_ROM


65 
	#DATA_ABORT_VEC_LOC
 
EXCEPT_VEC_LOC


	)

67 
	#DATA_ABORT_VEC_LOC
 (
Ab‹tH™dÀrJump
)

	)

74 
PUBLIC
 
uöt32
 *
	gAb‹tH™dÀrJump
;

82 
	#In°ÆlIrqH™dÀrs
()

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/ethernet.h

66 #i‚de‡
ETHERNET_H


67 
	#ETHERNET_H


	)

72 
	~"¥odu˘.h
"

73 
	~"pubdefs.h
"

80 
	#E√tMacBa£
(
ëBa£
Ë”tBa£)

	)

81 
	#E√tDmaBa£
(
ëBa£
Ë(”tBa£Ë+ 0x100)

	)

86 
	#ENET_DMA_RESET
 (0x00000001)

	)

87 
	#ENET_DMA_BUS_PRIORITY
 (0x00000002)

	)

88 
	#ENET_DMA_DESC_SKIP_DWORD_SHIFT
 (2)

	)

89 
	#ENET_DMA_DESC_SKIP_DWORD_MASK
 (0x001F)

	)

90 
	#ENET_DMA_BIG_ENDIAN
 (0x00000080)

	)

91 
	#ENET_DMA_BURST_LENGTH_SHIFT
 (8)

	)

92 
	#ENET_DMA_BURST_LENGTH_MASK
 (0x003F)

	)

93 
	#ENET_DMA_TX_AUTO_POLL_SHIFT
 (17)

	)

94 
	#ENET_DMA_TX_AUTO_POLL_MASK
 (0x0007)

	)

95 
	#ENET_DMA_DESC_BIG_ENDIAN
 (0x00100000)

	)

96 
	#ENET_DMA_TX_ADDR_INCR
 (0x00200000)

	)

100 
	#ENET_DMA_DESC_LIST_ADDR_SHIFT
 (0)

	)

101 
	#ENET_DMA_DESC_LIST_ADDR_MASK
 (0xFFFFFFFC)

	)

106 
	#ENET_DMA_TX_DONE_INT
 (0x00000001)

	)

107 
	#ENET_DMA_TX_STOPPED_INT
 (0x00000002)

	)

108 
	#ENET_DMA_TX_BUF_UNAVAIL_INT
 (0x00000004)

	)

109 
	#ENET_DMA_TX_JAB_TIMEOUT_INT
 (0x00000008)

	)

110 
	#ENET_DMA_TX_UFLOW_INT
 (0x00000020)

	)

111 
	#ENET_DMA_RX_DONE_INT
 (0x00000040)

	)

112 
	#ENET_DMA_RX_BUF_UNAVAIL_INT
 (0x00000080)

	)

113 
	#ENET_DMA_RX_STOPPED_INT
 (0x00000100)

	)

114 
	#ENET_DMA_GP_RX_WDOG_TMR_INT
 (0x00000200)

	)

115 
	#ENET_DMA_TX_EARLY_INT
 (0x00000400)

	)

116 
	#ENET_DMA_GP_TMR_INT
 (0x00000800)

	)

117 
	#ENET_DMA_BUS_ERROR_INT
 (0x00002000)

	)

118 
	#ENET_DMA_RX_EARLY_INT
 (0x00004000)

	)

119 
	#ENET_DMA_ABNORM_INT
 (0x00008000)

	)

120 
	#ENET_DMA_NORM_INT
 (0x00010000)

	)

121 
	#ENET_DMA_RX_STATE_SHIFT
 (17)

	)

122 
	#ENET_DMA_RX_STATE_MASK
 (0x0007)

	)

123 
	#ENET_DMA_TX_STATE_SHIFT
 (20)

	)

124 
	#ENET_DMA_TX_STATE_MASK
 (0x0007)

	)

125 
	#ENET_DMA_ERROR_SHIFT
 (23)

	)

126 
	#ENET_DMA_ERROR_MASK
 (0x0007)

	)

127 
	#ENET_DMA_ALL_INTS
 (0x0001FFFF)

	)

131 
	#ENET_DMA_RX
 (0x00000002)

	)

132 
	#ENET_DMA_TX_SECOND_FRM
 (0x00000004)

	)

133 
	#ENET_DMA_TX
 (0x00002000)

	)

134 
	#ENET_DMA_TX_THOLD_SHIFT
 (14)

	)

135 
	#ENET_DMA_TX_THOLD_MASK
 (0x0003)

	)

136 
	#ENET_DMA_TX_STORE_FWD
 (0x00200000)

	)

137 
	#ENET_DMA_TX_THOLD_MODE
 (0x00400000)

	)

141 
	#ENET_DMA_TRANS_SHIFT
 (0)

	)

142 
	#ENET_DMA_TRANS_MASK
 (0x0003)

	)

143 
	#ENET_DMA_FRM_ADDR_SHIFT
 (2)

	)

144 
	#ENET_DMA_FRM_ADDR_MASK
 (0x3FFFFFFF)

	)

148 
	#ENET_DMA_FRM_MISSED_HOST_SHIFT
 (0Ë

	)

149 
	#ENET_DMA_FRM_MISSED_HOST_MASK
 (0xFFFFË

	)

150 
	#ENET_DMA_FRM_MISSED_CTRL_SHIFT
 (16Ë

	)

151 
	#ENET_DMA_FRM_MISSED_CTRL_MASK
 (0xFFFFË

	)

155 
	#ENET_MAC_RX_ENABLE
 (0x00000004)

	)

156 
	#ENET_MAC_TX_ENABLE
 (0x00000008)

	)

157 
	#ENET_MAC_DEFERRAL_CHECK
 (0x00000020)

	)

158 
	#ENET_MAC_BOLMT_SHIFT
 (6)

	)

159 
	#ENET_MAC_BOLMT_MASK
 (0x0003)

	)

160 
	#ENET_MAC_PAD_STRIPPING
 (0x00000100)

	)

161 
	#ENET_MAC_RETRY_DISABLE
 (0x00000400)

	)

162 
	#ENET_MAC_BROADCAST_DISABLE
 (0x00000800)

	)

163 
	#ENET_MAC_LATE_COLLISION
 (0x00001000)

	)

164 
	#ENET_MAC_HASH_PERFECT_FILTER
 (0x00002000)

	)

165 
	#ENET_MAC_HASH_ONLY
 (0x00008000)

	)

166 
	#ENET_MAC_PASS_BAD_FRM
 (0x00010000)

	)

167 
	#ENET_MAC_INVERSE_FILTER
 (0x00020000)

	)

168 
	#ENET_MAC_PASS_ALL_ADDR
 (0x00040000)

	)

169 
	#ENET_MAC_MULTICAST
 (0x00080000)

	)

170 
	#ENET_MAC_FULL_DUPLEX
 (0x00100000)

	)

171 
	#ENET_MAC_LOOPBACK_MODE_SHIFT
 (21)

	)

172 
	#ENET_MAC_LOOPBACK_MODE_MASK
 (0x003)

	)

173 
	#ENET_MAC_RX_OWN_DISABLE
 (0x00800000)

	)

174 
	#ENET_MAC_PORT_SELECT
 (0x08000000)

	)

175 
	#ENET_MAC_SQE_DISABLE
 (0x10000000)

	)

176 
	#ENET_MAC_BIG_ENDIAN
 (0x40000000)

	)

177 
	#ENET_MAC_RX_ALL_ADDR
 (0x80000000)

	)

181 
	#ENET_MAC_HI_ADDR_SHIFT
 (0)

	)

182 
	#ENET_MAC_HI_ADDR_MASK
 (0xFFFF)

	)

183 
	#ENET_MAC_LO_ADDR_SHIFT
 (0)

	)

184 
	#ENET_MAC_LO_ADDR_MASK
 (0xFFFFFFFF)

	)

188 
	#ENET_MAC_MII_BUSY
 (0x00000001)

	)

189 
	#ENET_MAC_MII_WR
 (0x00000002)

	)

190 
	#ENET_MAC_MII_REG_SEL_SHIFT
 (6)

	)

191 
	#ENET_MAC_MII_REG_SEL_MASK
 (0x001F)

	)

192 
	#ENET_MAC_MII_PHY_ADDR_SHIFT
 (11)

	)

193 
	#ENET_MAC_MII_PHY_ADDR_MASK
 (0x001F)

	)

197 
	#ENET_MAC_MII_DATA_SHIFT
 (0)

	)

198 
	#ENET_MAC_MII_DATA_MASK
 (0xFFFF)

	)

202 
	#ENET_MAC_FLOW_CTRL_BUSY
 (0x00000001)

	)

203 
	#ENET_MAC_FLOW_CTRL_ENABLE
 (0x00000002)

	)

204 
	#ENET_MAC_FLOW_CTRL_FRM_ENABLE
 (0x00000004)

	)

205 
	#ENET_MAC_FLOW_PAUSE_TIME_SHIFT
 (16)

	)

206 
	#ENET_MAC_FLOW_PAUSE_TIME_MASK
 (0xFFFF)

	)

210 
	#ENET_MAC_VLAN1_TAG_SHIFT
 (0)

	)

211 
	#ENET_MAC_VLAN1_TAG_MASK
 (0xFFFF)

	)

215 
	#ENET_MAC_VLAN2_TAG_SHIFT
 (0)

	)

216 
	#ENET_MAC_VLAN2_TAG_MASK
 (0xFFFF)

	)

222 
	#ENET_DESC_RX_STAT_USR0
 (0x00000002)

	)

223 
	#ENET_DESC_RX_STAT_USR1_SHIFT
 (2)

	)

224 
	#ENET_DESC_RX_STAT_USR1_MASK
 (0x1F)

	)

225 
	#ENET_DESC_RX_STAT_USR2
 (0x000080)

	)

226 
	#ENET_DESC_RX_STAT_LAST_DESC
 (0x00000100)

	)

227 
	#ENET_DESC_RX_STAT_FIRST_DESC
 (0x00000200)

	)

228 
	#ENET_DESC_RX_STAT_USR3_SHIFT
 (10)

	)

229 
	#ENET_DESC_RX_STAT_USR3_MASK
 (0x0F)

	)

230 
	#ENET_DESC_RX_STAT_DESC_ERROR
 (0x00004000)

	)

231 
	#ENET_DESC_RX_STAT_ERROR
 (0x00008000)

	)

232 
	#ENET_DESC_RX_STAT_LENGTH_SHIFT
 (16)

	)

233 
	#ENET_DESC_RX_STAT_LENGTH_MASK
 (0x00003FFF)

	)

237 
	#ENET_DESC_TX_STAT_UFLOW
 (0x00000002)

	)

238 
	#ENET_DESC_TX_STAT_USR1_SHIFT
 (2)

	)

239 
	#ENET_DESC_TX_STAT_USR1_MASK
 (0x1FFF)

	)

240 
	#ENET_DESC_TX_STAT_ERROR
 (0x00008000)

	)

244 
	#ENET_DESC_TX_PAD_DISABLE
 (0x00800000)

	)

245 
	#ENET_DESC_TX_CRC_DISABLE
 (0x04000000)

	)

246 
	#ENET_DESC_TX_FIRST_SEGMENT
 (0x20000000)

	)

247 
	#ENET_DESC_TX_LAST_SEGMENT
 (0x40000000)

	)

248 
	#ENET_DESC_TX_DONE_INT_ENABLE
 (0x80000000)

	)

252 
	#ENET_DESC_OWN
 (0x80000000)

	)

253 
	#ENET_DESC_STAT_ALL_BITS
 (0x7FFFFFFF)

	)

254 
	#ENET_DESC_FRM_LENGTH_SHIFT
 (16)

	)

255 
	#ENET_DESC_FRM_LENGTH_MASK
 (0x3FFF)

	)

257 
	#ENET_DESC_SECOND_ADDR_CHAINED
 (0x01000000)

	)

258 
	#ENET_DESC_RING_END
 (0x02000000)

	)

259 
	#ENET_DESC_BUF_PTR_SHIFT
 (0)

	)

260 
	#ENET_DESC_BUF_PTR_MASK
 (0xFFFFFFFC)

	)

261 
	#ENET_DESC_BUF1_SIZE_SHIFT
 (0)

	)

262 
	#ENET_DESC_BUF1_SIZE_MASK
 (0x07FF)

	)

263 
	#ENET_DESC_BUF2_SIZE_SHIFT
 (11)

	)

264 
	#ENET_DESC_BUF2_SIZE_MASK
 (0x07FF)

	)

273 
	síëDmaRegs_t


275 vﬁ©ûê
uöt32
 
	mdmaBusMode
;

276 vﬁ©ûê
uöt32
 
	mdmaTxDescPﬁl
;

277 vﬁ©ûê
uöt32
 
	mdmaRxDescPﬁl
;

278 vﬁ©ûê
uöt32
 
	mdmaRxDescLi°Addr
;

279 vﬁ©ûê
uöt32
 
	mdmaTxDescLi°Addr
;

280 vﬁ©ûê
uöt32
 
	mdmaSèt
;

281 vﬁ©ûê
uöt32
 
	mdmaCål
;

282 vﬁ©ûê
uöt32
 
	mdmaI¡E«bÀ
;

283 vﬁ©ûê
uöt32
 
	mdmaMis£dFrm
;

284 vﬁ©ûê
uöt32
 
	mª£rved0
[10];

285 vﬁ©ûê
uöt32
 
	mdmaTxDe°Addr
;

286 vﬁ©ûê
uöt32
 
	mdmaTxBufAddr
;

287 vﬁ©ûê
uöt32
 
	mdmaRxBufAddr
;

288 } 
	tíëDmaRegs
;

292 
	síëMacRegs_t


294 vﬁ©ûê
uöt32
 
	mmacCål
;

295 vﬁ©ûê
uöt32
 
	mmacAddrHi
;

296 vﬁ©ûê
uöt32
 
	mmacAddrLo
;

297 vﬁ©ûê
uöt32
 
	mmacMu…iˇ°Hi
;

298 vﬁ©ûê
uöt32
 
	mmacMu…iˇ°Lo
;

299 vﬁ©ûê
uöt32
 
	mmacMiiAddr
;

300 vﬁ©ûê
uöt32
 
	mmacMiiD©a
;

301 vﬁ©ûê
uöt32
 
	mmacFlowCål
;

302 vﬁ©ûê
uöt32
 
	mmacVœn1Tag
;

303 vﬁ©ûê
uöt32
 
	mmacVœn2Tag
;

304 } 
	tíëMacRegs
;

308 
	eíëDmaTxSèã_t


310 
	mtxSt›≥d
,

311 
	mtxDescFëch
,

312 
	mtxWaô
,

313 
	mtxBufFûl
,

314 
	mtxRe£rved0
,

315 
	mtxRe£rved1
,

316 
	mtxSu•íded
,

317 
	mtxDescClo£


319 } 
	tíëDmaTxSèã
;

323 
	eíëDmaRxSèã_t


325 
	mrxSt›≥d
,

326 
	mrxDescFëch
,

327 
	mrxWaôPackëEnd
,

328 
	mrxWaôNextPackë
,

329 
	mrxSu•íded
,

330 
	mrxDescClo£
,

331 
	mrxBufFlush
,

332 
	mrxBufEm±y


334 } 
	tíëDmaRxSèã
;

338 
	eíëDmaTønß˘i⁄_t


340 
	m°¨t
,

341 
	möProgªss
,

342 
	mœ°Dw‹d
,

343 
	m°©


345 } 
	tíëDmaTønß˘i⁄
;

349 
	eíëMacBﬁmtBôs_t


351 
	mbﬁmtBôs10
,

352 
	mbﬁmtBôs8
,

353 
	mbﬁmtBôs4
,

354 
	mbﬁmtBôs1


356 } 
	tíëMacBﬁmtBôs
;

360 
	eíëMacLo›backModes_t


362 
	mnoLo›back
,

363 
	mötLo›back
,

364 
	mextLo›back
,

365 
	mª£rvedLo›back


367 } 
	tíëMacLo›backModes
;

371 
	eíëMacMiiReg_t


373 
	mmiiReg0
,

374 
	mmiiReg1
,

375 
	mmiiReg2
,

376 
	mmiiReg3
,

377 
	mmiiReg4
,

378 
	mmiiReg5
,

379 
	mmiiReg6
,

380 
	mmiiReg7
,

381 
	mmiiReg8
,

382 
	mmiiReg9
,

383 
	mmiiReg10
,

384 
	mmiiReg11
,

385 
	mmiiReg12
,

386 
	mmiiReg13
,

387 
	mmiiReg14
,

388 
	mmiiReg15
,

389 
	mmiiReg16
,

390 
	mmiiReg17
,

391 
	mmiiReg18


392 } 
	tíëMacMiiReg
;

396 
	síëDesc_t


398 vﬁ©ûê
uöt32
 
	mdescFrmSèt
;

399 vﬁ©ûê
uöt32
 
	mdescCål
;

400 vﬁ©ûê
uöt32
 
	mdescBuf1På
;

401 vﬁ©ûê
uöt32
 
	mdescBuf2På
;

403 } 
	tíëDesc
;

414 
PUBLIC
 
E√tDescInô
 ( 
íëDesc
 *
íëDescPå
, 
uöt32
 
íëDescCålBôs
,

415 
uöt32
 
íëDescBuf1Addr
, uöt32 
íëDescBuf1Size
,

416 
uöt32
 
íëDescBuf2Addr
, uöt32 
íëDescBuf2Size
 );

417 
PUBLIC
 
E√tMacLﬂdPhyMiiReg
 ( 
íëMacRegs
 *
ëMacPå
, 
uöt32
 
ëPhyAddr
,

418 
íëMacMiiReg
 
ëMiiReg
, 
uöt32
 
vÆue
 );

419 
PUBLIC
 
uöt32
 
E√tMacGëPhyMiiReg
 ( 
íëMacRegs
 *
ëMacPå
, uöt32 
ëPhyAddr
,

420 
íëMacMiiReg
 
ëMiiReg
 );

447 
	#E√tDmaGëBusMode
(
íëPå
) \

448 ((
íëPå
)->
dmaBusMode
)

	)

471 
	#E√tDmaLﬂdBusMode
(
íëPå
,
vÆ
) \

476 (
íëPå
)->
dmaBusMode
 = (
uöt32
)(
vÆ
); \

477 } 0)

	)

500 
	#E√tDmaSëBusMode
(
íëPå
,
bôs
) \

504 (
íëPå
)->
dmaBusMode
 |(
bôs
); \

505 } 0)

	)

528 
	#E√tDmaCÃBusMode
(
íëPå
,
bôs
) \

532 (
íëPå
)->
dmaBusMode
 &~(
bôs
); \

533 } 0)

	)

556 
	#E√tDmaIsBusMode
(
íëPå
,
bôs
) \

557 (((
íëPå
)->
dmaBusMode
 & (
bôs
)Ë? 
TRUE
 : 
FALSE
)

	)

583 
	#E√tDmaLﬂdTxDescPﬁl
(
íëPå
,
vÆ
) \

587 (
íëPå
)->
dmaTxDescPﬁl
 = (
uöt32
)(
vÆ
); \

588 } 0)

	)

612 
	#E√tDmaLﬂdRxDescPﬁl
(
íëPå
,
vÆ
) \

616 (
íëPå
)->
dmaRxDescPﬁl
 = (
uöt32
)(
vÆ
); \

617 } 0)

	)

639 
	#E√tDmaGëRxDescLi°Addr
(
íëPå
) \

640 ((
íëPå
)->
dmaRxDescLi°Addr
)

	)

664 
	#E√tDmaLﬂdRxDescLi°Addr
(
íëPå
,
vÆ
) \

668 (
íëPå
)->
dmaRxDescLi°Addr
 = \

669 (((
uöt32
)(
vÆ
Ë& 
ENET_DMA_DESC_LIST_ADDR_MASK
) << \

670 
ENET_DMA_DESC_LIST_ADDR_SHIFT
); \

671 } 0)

	)

693 
	#E√tDmaGëTxDescLi°Addr
(
íëPå
) \

694 ((
íëPå
)->
dmaTxDescLi°Addr
)

	)

718 
	#E√tDmaLﬂdTxDescLi°Addr
(
íëPå
,
vÆ
) \

722 (
íëPå
)->
dmaTxDescLi°Addr
 = \

723 (((
uöt32
)(
vÆ
Ë& 
ENET_DMA_DESC_LIST_ADDR_MASK
) << \

724 
ENET_DMA_DESC_LIST_ADDR_SHIFT
); \

725 } 0)

	)

748 
	#E√tDmaGëSèt
(
íëPå
) \

749 ((
íëPå
)->
dmaSèt
)

	)

772 
	#E√tDmaCÃSèt
(
íëPå
,
bôs
) \

776 (
íëPå
)->
dmaSèt
 |(
bôs
); \

777 } 0)

	)

800 
	#E√tDmaIsSèt
(
íëPå
,
bôs
) \

801 (((
íëPå
)->
dmaSèt
 & (
bôs
)Ë? 
TRUE
 : 
FALSE
)

	)

825 
	#E√tDmaGëCål
(
íëPå
) \

826 ((
íëPå
)->
dmaCål
)

	)

849 
	#E√tDmaLﬂdCål
(
íëPå
,
vÆ
) \

853 (
íëPå
)->
dmaCål
 = (
uöt32
)(
vÆ
); \

854 } 0)

	)

877 
	#E√tDmaSëCål
(
íëPå
,
bôs
) \

881 (
íëPå
)->
dmaCål
 |(
bôs
); \

882 } 0)

	)

905 
	#E√tDmaCÃCål
(
íëPå
,
bôs
) \

909 (
íëPå
)->
dmaCål
 &~(
bôs
); \

910 } 0)

	)

933 
	#E√tDmaIsCål
(
íëPå
,
bôs
) \

934 (((
íëPå
)->
dmaCål
 & (
bôs
)Ë? 
TRUE
 : 
FALSE
)

	)

958 
	#E√tDmaGëI¡E«bÀ
(
íëPå
) \

959 ((
íëPå
)->
dmaI¡E«bÀ
)

	)

982 
	#E√tDmaE«bÀI¡
(
íëPå
,
bôs
) \

986 (
íëPå
)->
dmaI¡E«bÀ
 |(
bôs
); \

987 } 0)

	)

1010 
	#E√tDmaDißbÀI¡
(
íëPå
,
bôs
) \

1014 (
íëPå
)->
dmaI¡E«bÀ
 &~(
bôs
); \

1015 } 0)

	)

1039 
	#E√tDmaIsI¡E«bÀ
(
íëPå
,
bôs
) \

1040 (((
íëPå
)->
dmaI¡E«bÀ
 & (
bôs
)Ë? 
TRUE
 : 
FALSE
)

	)

1064 
	#E√tDmaGëTxDe°Addr
(
íëPå
) \

1065 ((
íëPå
)->
dmaTxDe°Addr
)

	)

1088 
	#E√tDmaGëTxBufAddr
(
íëPå
) \

1089 ((
íëPå
)->
dmaTxBufAddr
)

	)

1111 
	#E√tDmaGëRxBufAddr
(
íëPå
) \

1112 ((
íëPå
)->
dmaRxBufAddr
)

	)

1136 
	#E√tDmaLﬂdRxBufAddr
(
íëPå
,
vÆ
) \

1140 (
íëPå
)->
dmaRxBufAddr
 = (
uöt32
)(
vÆ
); \

1141 } 0)

	)

1163 
	#E√tDmaGëMis£dFrm
(
íëPå
) \

1164 ((
íëPå
)->
dmaMis£dFrm
)

	)

1186 
	#E√tMacGëCål
(
íëPå
) \

1187 ((
íëPå
)->
macCål
)

	)

1210 
	#E√tMacLﬂdCål
(
íëPå
,
vÆ
) \

1214 (
íëPå
)->
macCål
 = (
uöt32
)(
vÆ
); \

1215 } 0)

	)

1238 
	#E√tMacSëCål
(
íëPå
,
bôs
) \

1242 (
íëPå
)->
macCål
 |(
bôs
); \

1243 } 0)

	)

1266 
	#E√tMacCÃCål
(
íëPå
,
bôs
) \

1270 (
íëPå
)->
macCål
 &~(
bôs
); \

1271 } 0)

	)

1294 
	#E√tMacIsCål
(
íëPå
,
bôs
) \

1295 (((
íëPå
)->
macCål
 & (
bôs
)Ë? 
TRUE
 : 
FALSE
)

	)

1319 
	#E√tMacGëAddrHi
(
íëPå
) \

1320 ((
íëPå
)->
macAddrHi
)

	)

1343 
	#E√tMacLﬂdAddrHi
(
íëPå
,
vÆ
) \

1347 (
íëPå
)->
macAddrHi
 = (((
uöt32
)(
vÆ
Ë& 
ENET_MAC_HI_ADDR_MASK
) << \

1348 
ENET_MAC_HI_ADDR_SHIFT
); \

1349 } 0)

	)

1371 
	#E√tMacGëAddrLo
(
íëPå
) \

1372 ((
íëPå
)->
macAddrLo
)

	)

1395 
	#E√tMacLﬂdAddrLo
(
íëPå
,
vÆ
) \

1399 (
íëPå
)->
macAddrLo
 = (((
uöt32
)(
vÆ
Ë& 
ENET_MAC_LO_ADDR_MASK
) << \

1400 
ENET_MAC_LO_ADDR_SHIFT
); \

1401 } 0)

	)

1423 
	#E√tMacGëMu…iˇ°Lo
(
íëPå
) \

1424 ((
íëPå
)->
macMu…iˇ°Lo
)

	)

1448 
	#E√tMacLﬂdMu…iˇ°Lo
(
íëPå
,
vÆ
) \

1452 (
íëPå
)->
macMu…iˇ°Lo
 = (
uöt32
)(
vÆ
); \

1453 } 0)

	)

1476 
	#E√tMacGëMu…iˇ°Hi
(
íëPå
) \

1477 ((
íëPå
)->
macMu…iˇ°Hi
)

	)

1501 
	#E√tMacLﬂdMu…iˇ°Hi
(
íëPå
,
vÆ
) \

1505 (
íëPå
)->
macMu…iˇ°Hi
 = (
uöt32
)(
vÆ
); \

1506 } 0)

	)

1528 
	#E√tMacGëMiiAddr
(
íëPå
) \

1529 ((
íëPå
)->
macMiiAddr
)

	)

1552 
	#E√tMacLﬂdMiiAddr
(
íëPå
,
vÆ
) \

1556 (
íëPå
)->
macMiiAddr
 = (
uöt32
)(
vÆ
); \

1557 } 0)

	)

1579 
	#E√tMacGëMiiD©a
(
íëPå
) \

1580 ((
íëPå
)->
macMiiD©a
)

	)

1603 
	#E√tMacLﬂdMiiD©a
(
íëPå
,
vÆ
) \

1607 (
íëPå
)->
macMiiD©a
 = (((
uöt32
)(
vÆ
Ë& 
ENET_MAC_MII_DATA_MASK
) << \

1608 
ENET_MAC_MII_DATA_SHIFT
); \

1609 } 0)

	)

1631 
	#E√tMacGëFlowCål
(
íëPå
) \

1632 ((
íëPå
)->
macFlowCål
)

	)

1655 
	#E√tMacLﬂdFlowCål
(
íëPå
,
vÆ
) \

1659 (
íëPå
)->
macFlowCål
 = (
uöt32
)(
vÆ
); \

1660 } 0)

	)

1683 
	#E√tMacSëFlowCål
(
íëPå
,
bôs
) \

1687 (
íëPå
)->
macFlowCål
 |(
bôs
); \

1688 } 0)

	)

1711 
	#E√tMacCÃFlowCål
(
íëPå
,
bôs
) \

1715 (
íëPå
)->
macFlowCål
 &~(
bôs
); \

1716 } 0)

	)

1740 
	#E√tMacIsFlowCål
(
íëPå
,
bôs
) \

1741 (((
íëPå
)->
macFlowCål
 & (
bôs
)Ë? 
TRUE
 : 
FALSE
)

	)

1763 
	#E√tMacGëVœn1Tag
(
íëPå
) \

1764 ((
íëPå
)->
macVœn1Tag
)

	)

1787 
	#E√tMacLﬂdVœn1Tag
(
íëPå
,
vÆ
) \

1791 (
íëPå
)->
macVœn1Tag
 = (((
uöt32
)(
vÆ
Ë& 
ENET_MAC_VLAN1_TAG_MASK
) << \

1792 
ENET_MAC_VLAN1_TAG_SHIFT
); \

1793 } 0)

	)

1816 
	#E√tMacGëVœn2Tag
(
íëPå
) \

1817 ((
íëPå
)->
macVœn2Tag
)

	)

1840 
	#E√tMacLﬂdVœn2Tag
(
íëPå
,
vÆ
) \

1844 (
íëPå
)->
macVœn2Tag
 = (((
uöt32
)(
vÆ
Ë& 
ENET_MAC_VLAN2_TAG_MASK
) << \

1845 
ENET_MAC_VLAN2_TAG_SHIFT
); \

1846 } 0)

	)

1870 
	#E√tDmaGëDescSkùDw‹d
(
íëPå
) \

1871 –(
	`E√tDmaGëBusMode
(
íëPå
Ë>> 
ENET_DMA_DESC_SKIP_DWORD_SHIFT
) & \

1872 
ENET_DMA_DESC_SKIP_DWORD_MASK
 )

	)

1896 
	#E√tDmaSëDescSkùDw‹d
(
íëPå
,
vÆ
) \

1900 
	`E√tDmaLﬂdBusMode
 ( 
íëPå
, \

1901 –(
	`E√tDmaGëBusMode
(
íëPå
) & \

1902 (~(
ENET_DMA_DESC_SKIP_DWORD_MASK
 << \

1903 
ENET_DMA_DESC_SKIP_DWORD_SHIFT
))) | \

1904 (((
uöt32
)(
vÆ
Ë& 
ENET_DMA_DESC_SKIP_DWORD_MASK
) << \

1905 
ENET_DMA_DESC_SKIP_DWORD_SHIFT
)) ); \

1906 } 0)

	)

1928 
	#E√tDmaGëBur°Lígth
(
íëPå
) \

1929 –(
	`E√tDmaGëBusMode
(
íëPå
Ë>> 
ENET_DMA_BURST_LENGTH_SHIFT
) & \

1930 
ENET_DMA_BURST_LENGTH_MASK
 )

	)

1954 
	#E√tDmaSëBur°Lígth
(
íëPå
,
vÆ
) \

1958 
	`E√tDmaLﬂdBusMode
 ( 
íëPå
, \

1959 –(
	`E√tDmaGëBusMode
(
íëPå
) & \

1960 (~(
ENET_DMA_BURST_LENGTH_MASK
 << \

1961 
ENET_DMA_BURST_LENGTH_SHIFT
))) | \

1962 (((
uöt32
)(
vÆ
Ë& 
ENET_DMA_BURST_LENGTH_MASK
) << \

1963 
ENET_DMA_BURST_LENGTH_SHIFT
)) ); \

1964 } 0)

	)

1986 
	#E√tDmaGëTxAutoPﬁl
(
íëPå
) \

1987 –(
	`E√tDmaGëBusMode
(
íëPå
Ë>> 
ENET_DMA_TX_AUTO_POLL_SHIFT
) & \

1988 
ENET_DMA_TX_AUTO_POLL_MASK
 )

	)

2012 
	#E√tDmaSëTxAutoPﬁl
(
íëPå
,
vÆ
) \

2016 
	`E√tDmaLﬂdBusMode
 ( 
íëPå
, \

2017 –(
	`E√tDmaGëBusMode
(
íëPå
) & \

2018 (~(
ENET_DMA_TX_AUTO_POLL_MASK
 << \

2019 
ENET_DMA_TX_AUTO_POLL_SHIFT
))) | \

2020 (((
uöt32
)(
vÆ
Ë& 
ENET_DMA_TX_AUTO_POLL_MASK
) << \

2021 
ENET_DMA_TX_AUTO_POLL_SHIFT
)) ); \

2022 } 0)

	)

2044 
	#E√tDmaGëRxSèã
(
íëPå
) \

2045 –(
	`E√tDmaGëSèt
(
íëPå
Ë>> 
ENET_DMA_RX_STATE_SHIFT
) & \

2046 
ENET_DMA_RX_STATE_MASK
 )

	)

2068 
	#E√tDmaGëTxSèã
(
íëPå
) \

2069 –(
	`E√tDmaGëSèt
(
íëPå
Ë>> 
ENET_DMA_TX_STATE_SHIFT
) & \

2070 
ENET_DMA_TX_STATE_MASK
 )

	)

2092 
	#E√tDmaGëEº‹
(
íëPå
) \

2093 –(
	`E√tDmaGëSèt
(
íëPå
Ë>> 
ENET_DMA_ERROR_SHIFT
) & \

2094 
ENET_DMA_ERROR_MASK
 )

	)

2116 
	#E√tDmaGëTxThﬁd
(
íëPå
) \

2117 –(
	`E√tDmaGëCål
(
íëPå
Ë>> 
ENET_DMA_TX_THOLD_SHIFT
) & \

2118 
ENET_DMA_TX_THOLD_MASK
 )

	)

2142 
	#E√tDmaSëTxThﬁd
(
íëPå
,
vÆ
) \

2146 
	`E√tDmaLﬂdCål
 ( 
íëPå
 , \

2147 –(
	`E√tDmaGëCål
(
íëPå
) & \

2148 (~(
ENET_DMA_TX_THOLD_MASK
 << 
ENET_DMA_TX_THOLD_SHIFT
))) | \

2149 (((
uöt32
)(
vÆ
Ë& 
ENET_DMA_TX_THOLD_MASK
) << \

2150 
ENET_DMA_TX_THOLD_SHIFT
)) ); \

2151 } 0)

	)

2173 
	#E√tDmaGëTxDe°Tøns
(
íëPå
) \

2174 –(
	`E√tDmaGëTxDe°Addr
(
íëPå
Ë>> 
ENET_DMA_TRANS_SHIFT
) & \

2175 
ENET_DMA_TRANS_MASK
 )

	)

2197 
	#E√tDmaGëTxDe°FrmAddr
(
íëPå
) \

2198 –(
	`E√tDmaGëTxDe°Addr
(
íëPå
Ë>> 
ENET_DMA_FRM_ADDR_SHIFT
) & \

2199 
ENET_DMA_FRM_ADDR_MASK
 )

	)

2221 
	#E√tDmaGëFrmMis£dHo°
(
íëPå
) \

2222 –(
	`E√tDmaGëMis£dFrm
(
íëPå
Ë>> 
ENET_DMA_FRM_MISSED_HOST_SHIFT
) & \

2223 
ENET_DMA_FRM_MISSED_HOST_MASK
 )

	)

2245 
	#E√tDmaGëFrmMis£dCål
(
íëPå
) \

2246 –(
	`E√tDmaGëMis£dFrm
(
íëPå
Ë>> 
ENET_DMA_FRM_MISSED_CTRL_SHIFT
) & \

2247 
ENET_DMA_FRM_MISSED_CTRL_MASK
 )

	)

2269 
	#E√tMacGëBﬁmt
(
íëPå
) \

2270 –(
	`E√tMacGëCål
(
íëPå
Ë>> 
ENET_MAC_BOLMT_SHIFT
) & \

2271 
ENET_MAC_BOLMT_MASK
 )

	)

2294 
	#E√tMacSëBﬁmt
(
íëPå
,
vÆ
) \

2298 
	`E√tMacLﬂdCål
 ( 
íëPå
, \

2299 –(
	`E√tMacGëCål
(
íëPå
) & \

2300 (~(
ENET_MAC_BOLMT_MASK
 << 
ENET_MAC_BOLMT_SHIFT
))) | \

2301 (((
uöt32
)(
vÆ
Ë& 
ENET_MAC_BOLMT_MASK
) << \

2302 
ENET_MAC_BOLMT_SHIFT
)) ); \

2303 } 0)

	)

2325 
	#E√tMacGëLo›backMode
(
íëPå
) \

2326 –(
	`E√tMacGëCål
(
íëPå
Ë>> 
ENET_MAC_LOOPBACK_MODE_SHIFT
) & \

2327 
ENET_MAC_LOOPBACK_MODE_MASK
 )

	)

2351 
	#E√tMacSëLo›backMode
(
íëPå
,
vÆ
) \

2355 
	`E√tMacLﬂdCål
 ( 
íëPå
, \

2356 –(
	`E√tMacGëCål
(
íëPå
) & \

2357 (~(
ENET_MAC_LOOPBACK_MODE_MASK
 << \

2358 
ENET_MAC_LOOPBACK_MODE_SHIFT
))) | \

2359 (((
uöt32
)(
vÆ
Ë& 
ENET_MAC_LOOPBACK_MODE_MASK
) << \

2360 
ENET_MAC_LOOPBACK_MODE_SHIFT
)) ); \

2361 } 0)

	)

2383 
	#E√tMacGëMiiRegSñ
(
íëPå
) \

2384 –(
	`E√tMacGëMiiAddr
(
íëPå
Ë>> 
ENET_MAC_MII_REG_SEL_SHIFT
) & \

2385 
ENET_MAC_MII_REG_SEL_MASK
 )

	)

2408 
	#E√tMacSëMiiRegSñ
(
íëPå
,
vÆ
) \

2412 
	`E√tMacLﬂdMiiAddr
 ( 
íëPå
, \

2413 –(
	`E√tMacGëMiiAddr
(
íëPå
) & \

2414 (~(
ENET_MAC_MII_REG_SEL_MASK
 << 
ENET_MAC_MII_REG_SEL_SHIFT
))) | \

2415 (((
uöt32
)(
vÆ
Ë& 
ENET_MAC_MII_REG_SEL_MASK
) << \

2416 
ENET_MAC_MII_REG_SEL_SHIFT
)) ); \

2417 } 0)

	)

2439 
	#E√tMacGëMiiPhyAddr
(
íëPå
) \

2440 –(
	`E√tMacGëMiiAddr
(
íëPå
Ë>> 
ENET_MAC_MII_PHY_ADDR_SHIFT
) & \

2441 
ENET_MAC_MII_PHY_ADDR_MASK
 )

	)

2465 
	#E√tMacSëMiiPhyAddr
(
íëPå
,
vÆ
) \

2469 
	`E√tMacLﬂdMiiAddr
 ( 
íëPå
, \

2470 –(
	`E√tMacGëMiiAddr
(
íëPå
) & \

2471 (~(
ENET_MAC_MII_PHY_ADDR_MASK
 << 
ENET_MAC_MII_PHY_ADDR_SHIFT
))) |\

2472 (((
uöt32
)(
vÆ
Ë& 
ENET_MAC_MII_PHY_ADDR_MASK
) << \

2473 
ENET_MAC_MII_PHY_ADDR_SHIFT
)) ); \

2474 } 0)

	)

2496 
	#E√tMacGëFlowPau£Time
(
íëPå
) \

2497 –(
	`E√tMacGëFlowCål
(
íëPå
Ë>> 
ENET_MAC_FLOW_PAUSE_TIME_SHIFT
) & \

2498 
ENET_MAC_FLOW_PAUSE_TIME_MASK
 )

	)

2522 
	#E√tMacSëFlowPau£Time
(
íëPå
,
vÆ
) \

2526 
	`E√tMacLﬂdFlowCål
 ( 
íëPå
 , \

2527 –(
	`E√tMacGëFlowCål
(
íëPå
) & \

2528 (~((
uöt32
)
ENET_MAC_FLOW_PAUSE_TIME_MASK
 << \

2529 
ENET_MAC_FLOW_PAUSE_TIME_SHIFT
))) | \

2530 (((
uöt32
)(
vÆ
Ë& 
ENET_MAC_FLOW_PAUSE_TIME_MASK
) << \

2531 
ENET_MAC_FLOW_PAUSE_TIME_SHIFT
)) ); \

2532 } 0)

	)

2555 
	#E√tDescGëFrmSèt
(
íëDescPå
) \

2556 ((
íëDescPå
)->
descFrmSèt
)

	)

2581 
	#E√tDescLﬂdFrmSèt
(
íëDescPå
,
vÆ
) \

2585 (
íëDescPå
)->
descFrmSèt
 = (
uöt32
)(
vÆ
); \

2586 } 0)

	)

2611 
	#E√tDescSëFrmSèt
(
íëDescPå
,
bôs
) \

2615 (
íëDescPå
)->
descFrmSèt
 |(
bôs
); \

2616 } 0)

	)

2641 
	#E√tDescCÃFrmSèt
(
íëDescPå
,
bôs
) \

2645 (
íëDescPå
)->
descFrmSèt
 &~(
bôs
); \

2646 } 0)

	)

2671 
	#E√tDescIsFrmSèt
(
íëDescPå
,
bôs
) \

2672 (((
íëDescPå
)->
descFrmSèt
 & (
bôs
)Ë? 
TRUE
 : 
FALSE
)

	)

2696 
	#E√tDescGëCål
(
íëDescPå
) \

2697 ((
íëDescPå
)->
descCål
)

	)

2721 
	#E√tDescLﬂdCål
(
íëDescPå
,
vÆ
) \

2725 (
íëDescPå
)->
descCål
 = (
uöt32
)(
vÆ
); \

2726 } 0)

	)

2750 
	#E√tDescSëCål
(
íëDescPå
,
bôs
) \

2754 (
íëDescPå
)->
descCål
 |(
bôs
); \

2755 } 0)

	)

2779 
	#E√tDescCÃCål
(
íëDescPå
,
bôs
) \

2783 (
íëDescPå
)->
descCål
 &~(
bôs
); \

2784 } 0)

	)

2809 
	#E√tDescIsCål
(
íëDescPå
,
bôs
) \

2810 (((
íëDescPå
)->
descCål
 & (
bôs
)Ë? 
TRUE
 : 
FALSE
)

	)

2833 
	#E√tDescGëBuf1På
(
íëDescPå
) \

2834 ((
íëDescPå
)->
descBuf1På
)

	)

2860 
	#E√tDescLﬂdBuf1På
(
íëDescPå
,
vÆ
) \

2864 (
íëDescPå
)->
descBuf1På
 = (((
uöt32
)(
vÆ
) & \

2865 
ENET_DESC_BUF_PTR_MASK
) << \

2866 
ENET_DESC_BUF_PTR_SHIFT
); \

2867 } 0)

	)

2890 
	#E√tDescGëBuf2På
(
íëDescPå
) \

2891 ((
íëDescPå
)->
descBuf2På
)

	)

2917 
	#E√tDescLﬂdBuf2På
(
íëDescPå
,
vÆ
) \

2921 (
íëDescPå
)->
descBuf2På
 = (((
uöt32
)(
vÆ
) & \

2922 
ENET_DESC_BUF_PTR_MASK
) << \

2923 
ENET_DESC_BUF_PTR_SHIFT
); \

2924 } 0)

	)

2948 
	#E√tDescGëFrmLígth
(
íëDescPå
) \

2949 –(
	`E√tDescGëFrmSèt
(
íëDescPå
Ë>> 
ENET_DESC_FRM_LENGTH_SHIFT
) & \

2950 
ENET_DESC_FRM_LENGTH_MASK
 )

	)

2974 
	#E√tDescGëBuf1Size
(
íëDescPå
) \

2975 –(
	`E√tDescGëCål
(
íëDescPå
Ë>> 
ENET_DESC_BUF1_SIZE_SHIFT
) & \

2976 
ENET_DESC_BUF1_SIZE_MASK
 )

	)

3002 
	#E√tDescSëBuf1Size
(
íëDescPå
,
vÆ
) \

3006 
	`E√tDescLﬂdCål
 ( 
íëDescPå
 , \

3007 –(
	`E√tDescGëCål
(
íëDescPå
) & \

3008 (~((
uöt32
)
ENET_DESC_BUF1_SIZE_MASK
 << \

3009 
ENET_DESC_BUF1_SIZE_SHIFT
))) | \

3010 (((
uöt32
)(
vÆ
Ë& 
ENET_DESC_BUF1_SIZE_MASK
) << \

3011 
ENET_DESC_BUF1_SIZE_SHIFT
)) ); \

3012 } 0)

	)

3036 
	#E√tDescGëBuf2Size
(
íëDescPå
) \

3037 –(
	`E√tDescGëCål
(
íëDescPå
Ë>> 
ENET_DESC_BUF2_SIZE_SHIFT
) & \

3038 
ENET_DESC_BUF2_SIZE_MASK
 )

	)

3064 
	#E√tDescSëBuf2Size
(
íëDescPå
,
vÆ
) \

3068 
	`E√tDescLﬂdCål
 ( 
íëDescPå
 , \

3069 –(
	`E√tDescGëCål
(
íëDescPå
) & \

3070 (~((
uöt32
)
ENET_DESC_BUF2_SIZE_MASK
 << \

3071 
ENET_DESC_BUF2_SIZE_SHIFT
))) | \

3072 (((
uöt32
)(
vÆ
Ë& 
ENET_DESC_BUF2_SIZE_MASK
) << \

3073 
ENET_DESC_BUF2_SIZE_SHIFT
)) ); \

3074 } 0)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/except.h

46 #i‚de‡
EXCEPT_H


47 
	#EXCEPT_H


	)

52 
	~"pubdefs.h
"

53 
	~"¥odu˘.h
"

54 
	~"ötc.h
"

55 
	~"˝u_ex˚±.h
"

56 
	~"˝u.h
"

63 
	eötPri‹ôy_t
 {

64 
	mNoPri‹ôy
,

65 
	mPri‹ôy1
,

66 
	mPri‹ôy2
,

67 
	mPri‹ôy3
,

68 
	mPri‹ôy4
,

69 
	mPri‹ôy5
,

70 
	mPri‹ôy6
,

71 
	mPri‹ôy7
,

72 
	mPri‹ôy8
,

73 
	mPri‹ôy9
,

74 
	mPri‹ôy10
,

75 
	mPri‹ôy11
,

76 
	mPri‹ôy12
,

77 
	mPri‹ôy13
,

78 
	mPri‹ôy14
,

79 
	mPri‹ôy15
,

80 
	mPri‹ôy16


81 } 
	tötPri‹ôy
;

83 
	sötVe˘‹_t
 {

84 
uöt32
 
	miBô
;

85 
voidFuncPå
 
	miFunc
;

86 } 
	tötVe˘‹
;

88 °ru˘ { 
ötVe˘‹
 
	múqs
[
maxI¡s
]; } 
	túqVe˘‹TabÀ
;

96 
PUBLIC
 
úqVe˘‹TabÀ
 
	gúqVecTabÀ
[];

99 
PUBLIC
 
voidFuncPå
 
	gex˚±Ve˘‹s
[];

108 
PUBLIC
 
Regi°îIrqVec
 ( 
ötCode
 
Code
, 
ötPri‹ôy
 
Prio
,

109 
uöt32
 
IrqNum
, 
voidFuncPå
 
F
 );

110 
PUBLIC
 
voidFuncPå
 
In°ÆlNewIrqVec
 ( 
uöt32
 
IrqNum
, 
ötCode
 
Code
,

111 
voidFuncPå
 
F
 );

112 
PUBLIC
 
InôIrqTabÀs
 ( );

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/ide3710.h

62 #i‚de‡
IDE3710_H


63 
	#IDE3710_H


	)

68 
	~"¥odu˘.h
"

69 
	~"pubdefs.h
"

70 
	~"timî.h
"

78 
	#IDE_ERR_BAD_LBA_MODE
 (0x10)

	)

80 
	#IDE_ERR_CMDDONE_STAT_DEV_ERROR
 (0x20)

	)

81 
	#IDE_ERR_CMDDONE_STAT_DEV_FAULT
 (0x21)

	)

82 
	#IDE_ERR_CMDDONE_STAT_OTHER_ERROR
 (0x22)

	)

84 
	#IDE_ERR_IDENTDEV_NO_DRDY
 (0x30)

	)

85 
	#IDE_ERR_IDENTDEV_CMDWAIT_TIMED_OUT
 (0x31)

	)

86 
	#IDE_ERR_IDENTDEV_BAD_PRE_STATUS
 (0x32)

	)

88 
	#IDE_ERR_SETFEAT_XFERMODE_NO_DRDY
 (0x40)

	)

89 
	#IDE_ERR_SETMULT_NO_DRDY
 (0x41)

	)

91 
	#IDE_ERR_PIOWAIT_TIMED_OUT
 (0x50)

	)

93 
	#IDE_ERR_PIO_INVALID_CMD
 (0x60)

	)

94 
	#IDE_ERR_PIO_CANNOT_SELECT_DRIVE
 (0x61)

	)

95 
	#IDE_ERR_PIO_BAD_PRE_STATUS
 (0x62)

	)

96 
	#IDE_ERR_PIO_BAD_POST_STATUS
 (0x63)

	)

97 
	#IDE_ERR_PIO_BAD_FINAL_STATUS
 (0x64)

	)

99 
	#IDE_ERR_DMASETUP_ODD_ADDR
 (0x70)

	)

100 
	#IDE_ERR_DMASETUP_ODD_COUNT
 (0x71)

	)

102 
	#IDE_ERR_DMAWAIT_BM_XFER_ERROR
 (0x81)

	)

103 
	#IDE_ERR_DMAWAIT_INT_TIMED_OUT
 (0x82)

	)

104 
	#IDE_ERR_DMAWAIT_POLL_TIMED_OUT
 (0x83)

	)

106 
	#IDE_ERR_DMA_INVALID_CMD
 (0x90)

	)

107 
	#IDE_ERR_DMA_CANNOT_SELECT_DRIVE
 (0x91)

	)

108 
	#IDE_ERR_DMA_CMDWAIT_TIMED_OUT
 (0x92)

	)

109 
	#IDE_ERR_DMA_BAD_FINAL_STATUS
 (0x94)

	)

110 
	#IDE_ERR_DMA_BAD_BM_STATUS
 (0x95)

	)

112 
	#IDE_ERR_ABTCHK_TIMED_OUT
 (0xA0)

	)

113 
	#IDE_ERR_ABTCHK_DEV_ERROR
 (0xA1)

	)

114 
	#IDE_ERR_ABTCHK_DEV_FAULT
 (0xA2)

	)

116 
	#IDE_ERR_ABTDMA_INVALID_CMD
 (0xB0)

	)

117 
	#IDE_ERR_ABTDMA_CANNOT_SELECT_DRIVE
 (0xB1)

	)

118 
	#IDE_ERR_ABTDMA_CMDDONE_TIMED_OUT
 (0xB2)

	)

119 
	#IDE_ERR_ABTDMA_BAD_FINAL_STATUS
 (0xB3)

	)

120 
	#IDE_ERR_ABTDMA_BAD_BM_STATUS
 (0xB4)

	)

122 
	#IDE_ERR_IDE0_HARD_RESET_PROC
 (0xC0)

	)

123 
	#IDE_ERR_IDE1_HARD_RESET_PROC
 (0xC1)

	)

127 
	#IDE_BM_OFFSET
 (0x00)

	)

128 
	#IDE_CFG_REG_OFFSET
 (0x40)

	)

129 
	#IDE_PRI_TASKFILE_OFFSET
 (0x1F0)

	)

130 
	#IDE_SEC_TASKFILE_OFFSET
 (0x170)

	)

132 
	#IdeBmBa£
(
ideBa£
Ë(ideBa£ + 
IDE_BM_OFFSET
)

	)

133 
	#IdeCfgRegBa£
(
ideBa£
Ë(ideBa£ + 
IDE_CFG_REG_OFFSET
)

	)

135 
	#IdeTaskFûeBa£
(
ideBa£
, 
ideIf
) \

136 (((
ideIf
Ë=
IDE_IF_PRIMARY
Ë? ((
ideBa£
Ë+ 
IDE_PRI_TASKFILE_OFFSET
) : \

137 ((
ideIf
Ë=
IDE_IF_SECONDARY
Ë? ((
ideBa£
Ë+ 
IDE_SEC_TASKFILE_OFFSET
) : \

138 ((
ideBa£
Ë+ 
IDE_PRI_TASKFILE_OFFSET
))

	)

139 
	#IdePriTaskFûeBa£
(
ideBa£
Ë(ideBa£ + 
IDE_PRI_TASKFILE_OFFSET
)

	)

140 
	#IdeSecTaskFûeBa£
(
ideBa£
Ë(ideBa£ + 
IDE_SEC_TASKFILE_OFFSET
)

	)

149 
	#IDE_DMA_XFER_START
 (0x0001Ë

	)

150 
	#IDE_DMA_BM_WRITE
 (0x0008Ë

	)

154 
	#IDE_BM_SR_MASK_ERR
 (0x02Ë

	)

155 
	#IDE_BM_SR_MASK_INT
 (0x04Ë

	)

160 
	#IDE_BMIDTP_MASK
 (0xFFFF)

	)

161 
	#IDE_BMIDTP_HI_SHIFT
 (16)

	)

172 
	#IDE_TIM_0_PIO_FAST_ENABLE
 (0x01)

	)

173 
	#IDE_TIM_0_IORDY_ENABLE
 (0x02)

	)

174 
	#IDE_TIM_0_PIO_PREPOST_ENABLE
 (0x04)

	)

175 
	#IDE_TIM_0_DMA_FAST_ENABLE
 (0x08)

	)

176 
	#IDE_TIM_1_PIO_FAST_ENABLE
 (0x10)

	)

177 
	#IDE_TIM_1_IORDY_ENABLE
 (0x20)

	)

178 
	#IDE_TIM_1_PIO_PREPOST_ENABLE
 (0x40)

	)

179 
	#IDE_TIM_1_DMA_FAST_ENABLE
 (0x80)

	)

181 
	#IDE_TIM_RDY_RECOVERY_MASK
 (0x3)

	)

182 
	#IDE_TIM_RDY_RECOVERY_SHIFT
 (0)

	)

183 
	#IDE_TIM_RDY_SAMPLE_MASK
 (0x3)

	)

184 
	#IDE_TIM_RDY_SAMPLE_SHIFT
 (4)

	)

185 
	#IDE_TIM_SLAVE_TIM_ENABLE
 (0x40)

	)

186 
	#IDE_TIM_DECODE_ENABLE
 (0x80)

	)

189 
	#IDE_SLTIM_PRI_RDY_RECOVERY_MASK
 (0x3)

	)

190 
	#IDE_SLTIM_PRI_RDY_RECOVERY_SHIFT
 (0)

	)

191 
	#IDE_SLTIM_PRI_RDY_SAMPLE_MASK
 (0x3)

	)

192 
	#IDE_SLTIM_PRI_RDY_SAMPLE_SHIFT
 (2)

	)

193 
	#IDE_SLTIM_SEC_RDY_RECOVERY_MASK
 (0x3)

	)

194 
	#IDE_SLTIM_SEC_RDY_RECOVERY_SHIFT
 (4)

	)

195 
	#IDE_SLTIM_SEC_RDY_SAMPLE_MASK
 (0x3)

	)

196 
	#IDE_SLTIM_SEC_RDY_SAMPLE_SHIFT
 (6)

	)

199 
	#IDE_REC_PIO_MODE1
 (0x0)

	)

200 
	#IDE_SAM_PIO_MODE1
 (0x0)

	)

201 
	#IDE_REC_PIO_MODE2
 (0x1)

	)

202 
	#IDE_SAM_PIO_MODE2
 (0x1)

	)

203 
	#IDE_REC_PIO_MODE3
 (0x2)

	)

204 
	#IDE_SAM_PIO_MODE3
 (0x2)

	)

205 
	#IDE_REC_PIO_MODE4
 (0x3)

	)

206 
	#IDE_SAM_PIO_MODE4
 (0x3)

	)

208 
	#IDE_REC_MDMA_MODE0
 (0x0)

	)

209 
	#IDE_SAM_MDMA_MODE0
 (0x0)

	)

210 
	#IDE_REC_MDMA_MODE1
 (0x1)

	)

211 
	#IDE_SAM_MDMA_MODE1
 (0x1)

	)

212 
	#IDE_REC_MDMA_MODE2
 (0x2)

	)

213 
	#IDE_SAM_MDMA_MODE2
 (0x2)

	)

216 
	#IDE_SLEW_MASK
 (0x00FF)

	)

217 
	#IDE_SLEW_HI_SHIFT
 (8)

	)

220 
	#IDE_PRI_0_UDMA_ENABLE
 (0x1)

	)

221 
	#IDE_PRI_1_UDMA_ENABLE
 (0x2)

	)

222 
	#IDE_SEC_0_UDMA_ENABLE
 (0x4)

	)

223 
	#IDE_SEC_1_UDMA_ENABLE
 (0x8)

	)

226 
	#IDE_UDMA_TIM_MASK
 (0x00FF)

	)

227 
	#IDE_UDMA_TIM_HI_SHIFT
 (8)

	)

228 
	#IDE_PRI_0_TMODE_MASK
 (0x0007)

	)

229 
	#IDE_PRI_0_TMODE_SHIFT
 (0)

	)

230 
	#IDE_PRI_1_TMODE_MASK
 (0x0007)

	)

231 
	#IDE_PRI_1_TMODE_SHIFT
 (4)

	)

233 
	#IDE_UTIM_0_MODE_MASK
 (0x7)

	)

234 
	#IDE_UTIM_0_MODE_SHIFT
 (0)

	)

235 
	#IDE_UTIM_1_MODE_MASK
 (0x7)

	)

236 
	#IDE_UTIM_1_MODE_SHIFT
 (4)

	)

239 
	#IDE_UDMA_MODE0
 (0Ë

	)

240 
	#IDE_UDMA_MODE1
 (1)

	)

241 
	#IDE_UDMA_MODE2
 (2)

	)

242 
	#IDE_UDMA_MODE3
 (3)

	)

243 
	#IDE_UDMA_MODE4
 (4)

	)

244 
	#IDE_UDMA_MODE5
 (5)

	)

245 
	#IDE_UDMA_MODE6
 (6Ë

	)

246 
	#IDE_UDMA_DEFAULT_MODE
 (
IDE_UDMA_MODE0
)

	)

249 
	#IDE_TIMORIDE_OVERRIDE_ENA
 (0x1)

	)

252 
	#IDE_REGSTB_0_WIDTH_MASK
 (0x7F)

	)

253 
	#IDE_REGSTB_0_WIDTH_SHIFT
 (0)

	)

254 
	#IDE_REGSTB_1_WIDTH_MASK
 (0x7F)

	)

255 
	#IDE_REGSTB_1_WIDTH_SHIFT
 (8)

	)

256 
	#IDE_REGSTB_DEF_WIDTH_MASK
 (0x7F)

	)

257 
	#IDE_REGSTB_DEF_WIDTH_SHIFT
 (16)

	)

260 
	#IDE_REGRCVR_0_TIM_MASK
 (0x7F)

	)

261 
	#IDE_REGRCVR_0_TIM_SHIFT
 (0)

	)

262 
	#IDE_REGRCVR_1_TIM_MASK
 (0x7F)

	)

263 
	#IDE_REGRCVR_1_TIM_SHIFT
 (8)

	)

264 
	#IDE_REGRCVR_DEF_TIM_MASK
 (0x7F)

	)

265 
	#IDE_REGRCVR_DEF_TIM_SHIFT
 (16)

	)

268 
	#IDE_DATASTB_0_WIDTH_MASK
 (0x7F)

	)

269 
	#IDE_DATASTB_0_WIDTH_SHIFT
 (0)

	)

270 
	#IDE_DATASTB_1_WIDTH_MASK
 (0x7F)

	)

271 
	#IDE_DATASTB_1_WIDTH_SHIFT
 (8)

	)

274 
	#IDE_DATARCVR_0_WIDTH_MASK
 (0x7F)

	)

275 
	#IDE_DATARCVR_0_WIDTH_SHIFT
 (0)

	)

276 
	#IDE_DATARCVR_1_WIDTH_MASK
 (0x7F)

	)

277 
	#IDE_DATARCVR_1_WIDTH_SHIFT
 (8)

	)

280 
	#IDE_DMASTB_0_WIDTH_MASK
 (0x7F)

	)

281 
	#IDE_DMASTB_0_WIDTH_SHIFT
 (0)

	)

282 
	#IDE_DMASTB_1_WIDTH_MASK
 (0x7F)

	)

283 
	#IDE_DMASTB_1_WIDTH_SHIFT
 (8)

	)

286 
	#IDE_DMARCVR_0_WIDTH_MASK
 (0x7F)

	)

287 
	#IDE_DMARCVR_0_WIDTH_SHIFT
 (0)

	)

288 
	#IDE_DMARCVR_1_WIDTH_MASK
 (0x7F)

	)

289 
	#IDE_DMARCVR_1_WIDTH_SHIFT
 (8)

	)

292 
	#IDE_UDMASTB_0_WIDTH_MASK
 (0xF)

	)

293 
	#IDE_UDMASTB_0_WIDTH_SHIFT
 (0)

	)

294 
	#IDE_UDMASTB_1_WIDTH_MASK
 (0xF)

	)

295 
	#IDE_UDMASTB_1_WIDTH_SHIFT
 (8)

	)

298 
	#IDE_UDMARTP_0_WIDTH_MASK
 (0x1F)

	)

299 
	#IDE_UDMARTP_0_WIDTH_SHIFT
 (0)

	)

300 
	#IDE_UDMARTP_1_WIDTH_MASK
 (0x1F)

	)

301 
	#IDE_UDMARTP_1_WIDTH_SHIFT
 (8)

	)

304 
	#IDE_PINCTRL_RESETPIN_ENA
 (0x2)

	)

305 
	#IDE_PINCTRL_ASSERT_RESET
 (0x1)

	)

309 
	#IDE_IF_PRIMARY
 (1)

	)

310 
	#IDE_IF_SECONDARY
 (2)

	)

313 
	#IDE_DEV_MASTER
 (0)

	)

314 
	#IDE_DEV_SLAVE
 (1)

	)

317 
	#IDE_NO_FEATURE
 (0)

	)

320 
	#BCOUNT
 (2048)

	)

328 
	#IDE_CB_DC_IEN
 (0x00Ë

	)

329 
	#IDE_CB_DC_NIEN
 (0x02Ë

	)

330 
	#IDE_CB_DC_SRST
 (0x04Ë

	)

331 
	#IDE_CB_DC_HD15
 (0x08Ë

	)

334 
	#IDE_CB_DH_LBA
 (0x40Ë

	)

335 
	#IDE_CB_DH_DEV0
 (0xa0Ë

	)

336 
	#IDE_CB_DH_DEV1
 (0xb0Ë

	)

339 
	#IDE_CB_STAT_ERR
 (0x01Ë

	)

340 
	#IDE_CB_STAT_DRQ
 (0x08Ë

	)

341 
	#IDE_CB_STAT_DF
 (0x20Ë

	)

342 
	#IDE_CB_STAT_DRDY
 (0x40Ë

	)

343 
	#IDE_CB_STAT_BSY
 (0x80Ë

	)

346 
	#IDE_CMD_DEVICE_RESET
 (0x08)

	)

347 
	#IDE_CMD_READ_SECT
 (0x20)

	)

348 
	#IDE_CMD_WRITE_SECT
 (0x30)

	)

349 
	#IDE_CMD_EXE_DEV_DIAG
 (0x90)

	)

350 
	#IDE_CMD_READ_MULT
 (0xC4)

	)

351 
	#IDE_CMD_WRITE_MULT
 (0xC5)

	)

352 
	#IDE_CMD_READ_DMA
 (0xC8)

	)

353 
	#IDE_CMD_WRITE_DMA
 (0xCA)

	)

354 
	#IDE_CMD_CFA_WRITE_MULT_NO_ERASE
 (0xCD)

	)

355 
	#IDE_CMD_READ_LONG
 (0x22)

	)

356 
	#IDE_CMD_WRITE_LONG
 (0x32)

	)

357 
	#IDE_CMD_READ_BUFFER
 (0xE4)

	)

358 
	#IDE_CMD_WRITE_BUFFER
 (0xE8)

	)

359 
	#IDE_CMD_ID_DEV
 (0xEC)

	)

360 
	#IDE_CMD_SET_MULT_MODE
 (0xC6)

	)

361 
	#IDE_CMD_SET_FEATURES
 (0xEF)

	)

362 
	#IDE_CMD_READ_SECT_EXT
 (0x24)

	)

363 
	#IDE_CMD_READ_MULT_EXT
 (0x29)

	)

364 
	#IDE_CMD_READ_DMA_EXT
 (0x25)

	)

365 
	#IDE_CMD_WRITE_SECT_EXT
 (0x34)

	)

366 
	#IDE_CMD_WRITE_MULT_EXT
 (0x39)

	)

367 
	#IDE_CMD_WRITE_DMA_EXT
 (0x35)

	)

368 
	#IDE_CMD_READ_VERIFY_EXT
 (0x42)

	)

376 
	#IDE_SETFEAT_SET_XFERMODE_VIA_SECTCNT
 (0x03)

	)

383 
	#IDE_SETFEAT_XFERMODE_PIO_MODE0
 (0x08)

	)

384 
	#IDE_SETFEAT_XFERMODE_PIO_MODE1
 (0x09)

	)

385 
	#IDE_SETFEAT_XFERMODE_PIO_MODE2
 (0x0A)

	)

386 
	#IDE_SETFEAT_XFERMODE_PIO_MODE3
 (0x0B)

	)

387 
	#IDE_SETFEAT_XFERMODE_PIO_MODE4
 (0x0C)

	)

390 
	#IDE_SETFEAT_XFERMODE_MDMA_MODE0
 (0x20)

	)

391 
	#IDE_SETFEAT_XFERMODE_MDMA_MODE1
 (0x21)

	)

392 
	#IDE_SETFEAT_XFERMODE_MDMA_MODE2
 (0x22)

	)

395 
	#IDE_SETFEAT_XFERMODE_UDMA_MODE0
 (0x40)

	)

396 
	#IDE_SETFEAT_XFERMODE_UDMA_MODE1
 (0x41)

	)

397 
	#IDE_SETFEAT_XFERMODE_UDMA_MODE2
 (0x42)

	)

398 
	#IDE_SETFEAT_XFERMODE_UDMA_MODE3
 (0x43)

	)

399 
	#IDE_SETFEAT_XFERMODE_UDMA_MODE4
 (0x44)

	)

400 
	#IDE_SETFEAT_XFERMODE_UDMA_MODE5
 (0x45)

	)

401 
	#IDE_SETFEAT_XFERMODE_UDMA_MODE6
 (0x46)

	)

405 
	#IDE_REG_CONFIG_TYPE_ATAPI
 (3)

	)

409 
	#IDE_PRD_ADDR_SHIFT
 (16)

	)

410 
	#IDE_PRD_ADDR_MASK
 (0xFFFF)

	)

411 
	#IDE_PRD_EOT
 (0x80000000)

	)

412 
	#IDE_PRD_BYTE_CNT_SHIFT
 (0)

	)

413 
	#IDE_PRD_BYTE_CNT_MASK
 (0xFFFF)

	)

414 
	#IDE_PRD_MAX_SIZE
 (0x00010000Ë

	)

418 
	#IDE_CYL_HI_SHIFT
 (8)

	)

419 
	#IDE_CYL_HI_MASK
 (0x00FF)

	)

420 
	#IDE_CYL_LO_SHIFT
 (0)

	)

421 
	#IDE_CYL_LO_MASK
 (0x00FF)

	)

422 
	#IDE_DEV_HEAD_SHIFT
 (0)

	)

423 
	#IDE_DEV_HEAD_MASK
 (0x004F)

	)

427 
	#ID_DEVICE_INFO_WORDS
 (256Ë

	)

428 
	#ID_MULT_SUPPORT_WORD
 (47)

	)

429 
	#ID_MULT_SUPPORT_MAXSECT_MASK
 (0xFFË

	)

430 
	#ID_CAPABILITIES_WORD
 (49)

	)

431 
	#ID_CAPABILITIES_LBA_SUPPORTED
 (0x0100Ë

	)

432 
	#ID_CAPABILITIES_DMA_SUPPORTED
 (0x0200Ë

	)

433 
	#ID_FIELDVALID_WORD
 (53)

	)

434 
	#ID_FIELDVALID_PIODMA_VALID
 (0x0002Ë

	)

435 
	#ID_FIELDVALID_UDMA_VALID
 (0x0004Ë

	)

436 
	#ID_MULTISECT_WORD
 (59)

	)

437 
	#ID_MULTISECT_SELECTED
 (0x0100Ë

	)

438 
	#ID_MULTISECT_CURR_SECTCNT_MASK
 (0xFFË

	)

439 
	#ID_MAX_LBA28_WORD1
 (60)

	)

440 
	#ID_MAX_LBA28_WORD2
 (61)

	)

441 
	#ID_MAX_LBA28_VAL
 (0x0FFFFFFFË

	)

442 
	#ID_MDMA_WORD
 (63)

	)

443 
	#ID_MDMA_MODE0_SUPPORTED
 (0x0001Ë

	)

444 
	#ID_MDMA_MODE1_SUPPORTED
 (0x0002Ë

	)

445 
	#ID_MDMA_MODE2_SUPPORTED
 (0x0004Ë

	)

446 
	#ID_MDMA_MODE0_SELECTED
 (0x0100Ë

	)

447 
	#ID_MDMA_MODE1_SELECTED
 (0x0200Ë

	)

448 
	#ID_MDMA_MODE2_SELECTED
 (0x0400Ë

	)

449 
	#ID_PIO_WORD
 (64)

	)

450 
	#ID_PIO_MODE3_SUPPORTED
 (0x0001Ë

	)

451 
	#ID_PIO_MODE4_SUPPORTED
 (0x0002Ë

	)

452 
	#ID_FEATCMD_WORD2
 (83)

	)

453 
	#ID_FEATCMD_LBA48_SUPPORTED
 (0x0400Ë

	)

454 
	#ID_UDMA_WORD
 (88)

	)

455 
	#ID_UDMA_MODE0_SUPPORTED
 (0x0001Ë

	)

456 
	#ID_UDMA_MODE1_SUPPORTED
 (0x0002Ë

	)

457 
	#ID_UDMA_MODE2_SUPPORTED
 (0x0004Ë

	)

458 
	#ID_UDMA_MODE3_SUPPORTED
 (0x0008Ë

	)

459 
	#ID_UDMA_MODE4_SUPPORTED
 (0x0010Ë

	)

460 
	#ID_UDMA_MODE5_SUPPORTED
 (0x0020Ë

	)

461 
	#ID_UDMA_MODE6_SUPPORTED
 (0x0040Ë

	)

462 
	#ID_UDMA_MODE0_SELECTED
 (0x0100Ë

	)

463 
	#ID_UDMA_MODE1_SELECTED
 (0x0200Ë

	)

464 
	#ID_UDMA_MODE2_SELECTED
 (0x0400Ë

	)

465 
	#ID_UDMA_MODE3_SELECTED
 (0x0800Ë

	)

466 
	#ID_UDMA_MODE4_SELECTED
 (0x1000Ë

	)

467 
	#ID_UDMA_MODE5_SELECTED
 (0x2000Ë

	)

468 
	#ID_UDMA_MODE6_SELECTED
 (0x4000Ë

	)

469 
	#ID_MAX_LBA48_WORD1
 (100)

	)

470 
	#ID_MAX_LBA48_WORD2
 (101)

	)

471 
	#ID_MAX_LBA48_WORD3
 (102)

	)

472 
	#ID_MAX_LBA48_WORD4
 (103)

	)

473 
	#ID_MAX_LBA48_VAL_HI
 (0x0000FFFF)

	)

474 
	#ID_MAX_LBA48_VAL_LO
 (0xFFFFFFFF)

	)

481 
	sideRegs_t


483 vﬁ©ûê
uöt8
 
	m¥iIdeTimLo
;

484 vﬁ©ûê
uöt8
 
	m¥iIdeTimHi
;

485 vﬁ©ûê
uöt8
 
	m£cIdeTimLo
;

486 vﬁ©ûê
uöt8
 
	m£cIdeTimHi
;

487 vﬁ©ûê
uöt8
 
	msIdeTim
;

488 vﬁ©ûê
uöt8
 
	mideSÀwLo
;

489 vﬁ©ûê
uöt8
 
	mideSÀwHi
;

490 vﬁ©ûê
uöt8
 
	mideSètus
;

491 vﬁ©ûê
uöt8
 
	mudmaCé
;

492 vﬁ©ûê
uöt8
 
	mª£rved
;

493 vﬁ©ûê
uöt8
 
	mudmaTimLo
;

494 vﬁ©ûê
uöt8
 
	mudmaTimHi
;

495 vﬁ©ûê
uöt32
 
	mª£rved1
;

496 vﬁ©ûê
uöt32
 
	mtimOvîride
;

497 vﬁ©ûê
uöt32
 
	mªgStbWidth
;

498 vﬁ©ûê
uöt32
 
	mªgRcvrTim
;

499 vﬁ©ûê
uöt32
 
	md©aStbWidth
;

500 vﬁ©ûê
uöt32
 
	md©aRcvrTim
;

501 vﬁ©ûê
uöt32
 
	mdmaStbWidth
;

502 vﬁ©ûê
uöt32
 
	mdmaRcvrTim
;

503 vﬁ©ûê
uöt32
 
	mudmaStbWidth
;

504 vﬁ©ûê
uöt32
 
	mudmaRTPTim
;

505 vﬁ©ûê
uöt32
 
	mª£rved2
[3];

506 vﬁ©ûê
uöt32
 
	mpioDmaE«
;

507 vﬁ©ûê
uöt8
 
	mpöCål
;

508 } 
	tideRegs
;

512 
	sideBM_t


514 vﬁ©ûê
uöt16
 
	mideBMICP
;

515 vﬁ©ûê
uöt16
 
	mideBMISP
;

516 vﬁ©ûê
uöt16
 
	mideBMIDTPP_LO
;

517 vﬁ©ûê
uöt16
 
	mideBMIDTPP_HI
;

518 vﬁ©ûê
uöt16
 
	mideBMICS
;

519 vﬁ©ûê
uöt16
 
	mideBMISS
;

520 vﬁ©ûê
uöt16
 
	mideBMIDTPS_LO
;

521 vﬁ©ûê
uöt16
 
	mideBMIDTPS_HI
;

522 vﬁ©ûê
uöt32
 
	mideDmaPå
;

523 vﬁ©ûê
uöt32
 
	mideDmaLí
;

524 vﬁ©ûê
uöt32
 
	mideDmaSèã
;

525 vﬁ©ûê
uöt32
 
	mideSe˘Size
;

526 } 
	tideBM
;

529 
	sideTaskFûe_t


531 vﬁ©ûê
uöt8
 
	md©a
;

532 vﬁ©ûê
uöt8
 
	mîrFót
;

533 vﬁ©ûê
uöt8
 
	m£˘C¡
;

534 vﬁ©ûê
uöt8
 
	m£˘Num
;

535 vﬁ©ûê
uöt8
 
	mcylLo
;

536 vﬁ©ûê
uöt8
 
	mcylHi
;

537 vﬁ©ûê
uöt8
 
	mdevHód
;

538 vﬁ©ûê
uöt8
 
	m°©Cmd
;

539 vﬁ©ûê
uöt8
 
	mª£rved
[510];

540 vﬁ©ûê
uöt8
 
	mÆtSètDevCål
;

541 vﬁ©ûê
uöt8
 
	mdevAddr
;

543 } 
	tideTaskFûe
;

546 
	eideTimögMode_t


549 
	mIDE_PIO_MODE0
 = 0,

550 
	mIDE_PIO_MODE1
,

551 
	mIDE_PIO_MODE2
,

552 
	mIDE_PIO_MODE3
,

553 
	mIDE_PIO_MODE4
,

555 
	mIDE_MDMA_MODE0
,

556 
	mIDE_MDMA_MODE1
,

557 
	mIDE_MDMA_MODE2
,

558 
	mIDE_DEFAULT_MODE
 = 
IDE_PIO_MODE0


559 } 
	tideTimögMode
;

566 
	sideTimî_t


568 
tmrBlkRegs
 *
	mideTmrPå
;

569 
uöt32
 
	mideTmrNum
;

570 
uöt32
 
	mideTmrFªqkHz
;

571 
uöt32
 
	mcmdTimeout
;

572 } 
	tideTimî
;

574 
	eideLbaMode_t


576 
	mideChs
,

577 
	mideLba28
,

578 
	mideLba48


579 } 
	tideLbaMode
;

581 
	sideX„rInfo_t


583 
ideTimî
 
	mtmrInfo
;

584 
uöt32
 
	m£˘Size
;

585 
uöt32
 
	mblkSize
;

586 
uöt32
 
	mideIf
;

587 
uöt32
 
	mdev
;

588 
uöt32
 
	mcmd
;

589 
uöt32
 
	msc
;

590 
ideLbaMode
 
	mlbaMode
;

591 
uöt32
 
	mlbaLo
;

592 
uöt32
 
	mlbaHi
;

593 
uöt32
 
	m£˘
;

594 
uöt32
 
	mcylLo
;

595 
uöt32
 
	mcylHi
;

596 
uöt32
 
	mhód
;

597 
uöt32
 
	mextSe˘
;

598 
uöt32
 
	mextCylLo
;

599 
uöt32
 
	mextCylHi
;

600 
uöt32
 
	mextHód
;

601 
uöt32
 *
	maddr
;

602 
uöt32
 
	mvídC¡
;

603 } 
	tideX„rInfo
;

619 
uöt32
 
IdeH¨dRe£tProc
 ();

621 
IdeOvîrideTimeTo33
 ( 
ideRegs
 *
idePå
 );

623 
uöt32
 
IdeAb‹tDma
 ( uöt32 
ideBa£
, 
ideX„rInfo
 *
x„rInfo
, uöt32 *
¥dBufPå
,

624 
uöt32
 *
ideI¡I¡rFœg
, uöt32 
ideI¡U£I¡rFœg
 );

626 
uöt32
 
IdeDmaD©aX„r
 ( uöt32 
ideBa£
, 
ideX„rInfo
 *
x„rInfo
,

627 
uöt32
 *
¥dBufPå
, uöt32 *
ideI¡I¡rFœg
,

628 
uöt32
 
ideI¡U£I¡rFœg
 );

630 
uöt32
 
IdePioD©aX„r
 ( uöt32 
ideBa£
, 
ideX„rInfo
 *
x„rInfo
,

631 
uöt32
 *
ideI¡I¡rFœg
, uöt32 
ideI¡U£I¡rFœg
 );

633 
uöt32
 
IdeIdítifyDevi˚
 ( 
ideTaskFûe
 *
èskFûePå
, uöt32 
ideDev
,

634 
ideTimî
 *
ideTmr
,

635 
uöt32
 *
ideI¡I¡rFœg
, uöt32 
ideI¡U£I¡rFœg
,

636 
uöt16
 *
buf
 );

638 
uöt32
 
IdeSëFótuªsX„rMode
 ( 
ideTaskFûe
 *
èskFûePå
, uöt32 
ideDev
,

639 
uöt32
 
mode
 );

640 
uöt32
 
IdeSëMu…ùÀMode
 ( 
ideTaskFûe
 *
èskFûePå
, uöt32 
ideDev
,

641 
uöt32
 
blkSize
 );

643 
IdeSëTimMode
 ( 
ideRegs
 *
idePå
, 
uöt32
 
ideIf
,

644 
ideTimögMode
 
dev0mode
, ideTimögModê
dev1mode
 );

645 
IdeSëUdmaTimMode
 ( 
ideRegs
 *
idePå
, 
uöt32
 
ideIf
, uöt32 
dev0mode
,

646 
uöt32
 
dev1mode
 );

648 
IdeTimîSëup
 ( 
ideTimî
 *
ideTmr
, 
tmrBlkRegs
 *
tmrBlkPå
,

649 
uöt32
 
timîNum
 );

681 
	#IdeIsPrim¨y
(
ideIf
Ë((ideIfË=
IDE_IF_PRIMARY
)

	)

703 
	#IdeCÀ¨DmaSètus
(
bmPå
, 
ideIf
) \

706 i‡((
ideIf
Ë=
IDE_IF_SECONDARY
) \

707 (
bmPå
)->
ideBMISS
 |(
IDE_BM_SR_MASK_INT
 | 
IDE_BM_SR_MASK_ERR
); \

709 (
bmPå
)->
ideBMISP
 |(
IDE_BM_SR_MASK_INT
 | 
IDE_BM_SR_MASK_ERR
); \

710 } 0)

	)

736 
	#IdeE«bÀPioFa°Tim
(
idePå
, 
ideIf
, 
ideDev
) \

739 
uöt8
 
bô
; \

741 i‡((
ideDev
Ë=
IDE_DEV_SLAVE
Ë
bô
 = 
IDE_TIM_1_PIO_FAST_ENABLE
; \

742 
bô
 = 
IDE_TIM_0_PIO_FAST_ENABLE
; \

743 i‡((
ideIf
Ë=
IDE_IF_SECONDARY
Ë(
idePå
)->
£cIdeTimLo
 |
bô
; \

744 (
idePå
)->
¥iIdeTimLo
 |
bô
; \

745 } 0)

	)

771 
	#IdeE«bÀI‹dy
(
idePå
, 
ideIf
, 
ideDev
) \

774 
uöt8
 
bô
; \

776 i‡((
ideDev
Ë=
IDE_DEV_SLAVE
Ë
bô
 = 
IDE_TIM_1_IORDY_ENABLE
; \

777 
bô
 = 
IDE_TIM_0_IORDY_ENABLE
; \

778 i‡((
ideIf
Ë=
IDE_IF_SECONDARY
Ë(
idePå
)->
£cIdeTimLo
 |
bô
; \

779 (
idePå
)->
¥iIdeTimLo
 |
bô
; \

780 } 0)

	)

806 
	#IdeE«bÀPªFëch
(
idePå
, 
ideIf
, 
ideDev
) \

809 
uöt8
 
bô
; \

811 i‡((
ideDev
Ë=
IDE_DEV_SLAVE
Ë
bô
 = 
IDE_TIM_1_PIO_PREPOST_ENABLE
; \

812 
bô
 = 
IDE_TIM_0_PIO_PREPOST_ENABLE
; \

813 i‡((
ideIf
Ë=
IDE_IF_SECONDARY
Ë(
idePå
)->
£cIdeTimLo
 |
bô
; \

814 (
idePå
)->
¥iIdeTimLo
 |
bô
; \

816 0)

	)

842 
	#IdeE«bÀDmaFa°Tim
(
idePå
, 
ideIf
, 
ideDev
) \

845 
uöt8
 
bô
; \

847 i‡((
ideDev
Ë=
IDE_DEV_SLAVE
Ë
bô
 = 
IDE_TIM_0_DMA_FAST_ENABLE
; \

848 
bô
 = 
IDE_TIM_1_DMA_FAST_ENABLE
; \

849 i‡((
ideIf
Ë=
IDE_IF_SECONDARY
Ë(
idePå
)->
£cIdeTimLo
 |
bô
; \

850 (
idePå
)->
¥iIdeTimLo
 |
bô
; \

851 } 0)

	)

878 
	#IdeGëRcvryTim
(
idePå
, 
ideIf
, 
ideDev
) \

879 (((
ideIf
Ë=
IDE_IF_SECONDARY
) ? \

880 (((
ideDev
Ë=
IDE_IF_SLAVE
) ? \

881 
	`IdeGëSec1RcvryTim
(
idePå
Ë: 
	`IdeGëSec0RcvryTim
(idePtr)) \

882 : (((
ideDev
Ë=
IDE_IF_SLAVE
) ? \

883 
	`IdeGëPri1RcvryTim
(
idePå
Ë: 
	`IdeGëPri0RcvryTim
(idePå)))

	)

886 
	#IdeGëPri0RcvryTim
(
idePå
) \

887 (((
idePå
)->
¥iIdeTimHi
 >> 
IDE_TIM_RDY_RECOVERY_SHIFT
) \

888 & 
IDE_TIM_RDY_RECOVERY_MASK
)

	)

889 
	#IdeGëPri1RcvryTim
(
idePå
) \

890 (((
idePå
)->
sIdeTim
 >> 
IDE_SLTIM_PRI_RDY_RECOVERY_SHIFT
) \

891 & 
IDE_SLTIM_PRI_RDY_RECOVERY_MASK
)

	)

892 
	#IdeGëSec0RcvryTim
(
idePå
) \

893 (((
idePå
)->
£cIdeTimHi
 >> 
IDE_TIM_RDY_RECOVERY_SHIFT
) \

894 & 
IDE_TIM_RDY_RECOVERY_MASK
)

	)

895 
	#IdeGëSec1RcvryTim
(
idePå
) \

896 (((
idePå
)->
sIdeTim
 >> 
IDE_SLTIM_SEC_RDY_RECOVERY_SHIFT
) \

897 & 
IDE_SLTIM_SEC_RDY_RECOVERY_MASK
)

	)

924 
	#IdeLﬂdRcvryTim
(
idePå
, 
ideIf
, 
ideDev
, 
vÆ
) \

927 i‡((
ideIf
Ë=
IDE_IF_SECONDARY
) \

929 i‡((
ideDev
Ë=
IDE_DEV_SLAVE
) \

930 
	`IdeLﬂdSec1RcvryTim
((
idePå
), (
vÆ
)); \

932 
	`IdeLﬂdSec0RcvryTim
((
idePå
), (
vÆ
)); \

936 i‡((
ideDev
Ë=
IDE_DEV_SLAVE
) \

937 
	`IdeLﬂdPri1RcvryTim
((
idePå
), (
vÆ
)); \

939 
	`IdeLﬂdPri0RcvryTim
((
idePå
), (
vÆ
)); \

942 0)

	)

945 
	#IdeLﬂdPri0RcvryTim
(
idePå
, 
vÆ
) \

948 (
idePå
)->
¥iIdeTimHi
 = ((idePtr)->priIdeTimHi \

949 & ~(
IDE_TIM_RDY_RECOVERY_MASK
 \

950 << 
IDE_TIM_RDY_RECOVERY_SHIFT
)) \

951 | (((
vÆ
Ë& 
IDE_TIM_RDY_RECOVERY_MASK
) \

952 << 
IDE_TIM_RDY_RECOVERY_SHIFT
); \

953 } 0)

	)

954 
	#IdeLﬂdPri1RcvryTim
(
idePå
, 
vÆ
) \

957 (
idePå
)->
sIdeTim
 = ((idePtr)->sIdeTim \

958 & ~(
IDE_SLTIM_PRI_RDY_RECOVERY_MASK
 \

959 << 
IDE_SLTIM_PRI_RDY_RECOVERY_SHIFT
)) \

960 | (((
vÆ
Ë& 
IDE_SLTIM_PRI_RDY_RECOVERY_MASK
) \

961 << 
IDE_SLTIM_PRI_RDY_RECOVERY_SHIFT
); \

962 } 0)

	)

963 
	#IdeLﬂdSec0RcvryTim
(
idePå
, 
vÆ
) \

966 (
idePå
)->
£cIdeTimHi
 = ((idePtr)->secIdeTimHi \

967 & ~(
IDE_TIM_RDY_RECOVERY_MASK
 \

968 << 
IDE_TIM_RDY_RECOVERY_SHIFT
)) \

969 | (((
vÆ
Ë& 
IDE_TIM_RDY_RECOVERY_MASK
) \

970 << 
IDE_TIM_RDY_RECOVERY_SHIFT
); \

971 } 0)

	)

972 
	#IdeLﬂdSec1RcvryTim
(
idePå
, 
vÆ
) \

975 (
idePå
)->
sIdeTim
 = ((idePtr)->sIdeTim \

976 & ~(
IDE_SLTIM_SEC_RDY_RECOVERY_MASK
 \

977 << 
IDE_SLTIM_SEC_RDY_RECOVERY_SHIFT
)) \

978 | (((
vÆ
Ë& 
IDE_SLTIM_SEC_RDY_RECOVERY_MASK
) \

979 << 
IDE_SLTIM_SEC_RDY_RECOVERY_SHIFT
); \

980 } 0)

	)

1006 
	#IdeGëI‹dySp
(
idePå
, 
ideIf
, 
ideDev
) \

1007 (((
ideIf
Ë=
IDE_IF_SECONDARY
) ? \

1008 (((
ideDev
Ë=
IDE_IF_SLAVE
) ? \

1009 
	`IdeGëSec1I‹dySp
(
idePå
Ë: 
	`IdeGëSec0I‹dySp
(idePtr)) \

1010 : (((
ideDev
Ë=
IDE_IF_SLAVE
) ? \

1011 
	`IdeGëPri1I‹dySp
(
idePå
Ë: 
	`IdeGëPri0I‹dySp
(idePå)))

	)

1014 
	#IdeGëPri0I‹dySp
(
idePå
) \

1015 (((
idePå
)->
¥iIdeTimHi
 >> 
IDE_TIM_RDY_SAMPLE_SHIFT
) \

1016 & 
IDE_TIM_RDY_SAMPLE_MASK
)

	)

1017 
	#IdeGëPri1I‹dySp
(
idePå
) \

1018 (((
idePå
)->
sIdeTim
 >> 
IDE_SLTIM_PRI_RDY_SAMPLE_SHIFT
) \

1019 & 
IDE_SLTIM_PRI_RDY_SAMPLE_MASK
)

	)

1020 
	#IdeGëSec0I‹dySp
(
idePå
) \

1021 (((
idePå
)->
£cIdeTimHi
 >> 
IDE_TIM_RDY_SAMPLE_SHIFT
) \

1022 & 
IDE_TIM_RDY_SAMPLE_MASK
)

	)

1023 
	#IdeGëSec1I‹dySp
(
idePå
) \

1024 (((
idePå
)->
sIdeTim
 >> 
IDE_SLTIM_SEC_RDY_SAMPLE_SHIFT
) \

1025 & 
IDE_SLTIM_SEC_RDY_SAMPLE_MASK
)

	)

1052 
	#IdeLﬂdI‹dySp
(
idePå
, 
ideIf
, 
ideDev
, 
vÆ
) \

1055 i‡((
ideIf
Ë=
IDE_IF_SECONDARY
) \

1057 i‡((
ideDev
Ë=
IDE_DEV_SLAVE
) \

1058 
	`IdeLﬂdSec1I‹dySp
((
idePå
), (
vÆ
)); \

1060 
	`IdeLﬂdSec0I‹dySp
((
idePå
), (
vÆ
)); \

1064 i‡((
ideDev
Ë=
IDE_DEV_SLAVE
) \

1065 
	`IdeLﬂdPri1I‹dySp
((
idePå
), (
vÆ
)); \

1067 
	`IdeLﬂdPri0I‹dySp
((
idePå
), (
vÆ
)); \

1070 0)

	)

1073 
	#IdeLﬂdPri0I‹dySp
(
idePå
, 
vÆ
) \

1076 (
idePå
)->
¥iIdeTimHi
 = ((idePtr)->priIdeTimHi \

1077 & ~(
IDE_TIM_RDY_SAMPLE_MASK
 \

1078 << 
IDE_TIM_RDY_SAMPLE_SHIFT
)) \

1079 | (((
vÆ
Ë& 
IDE_TIM_RDY_SAMPLE_MASK
) \

1080 << 
IDE_TIM_RDY_SAMPLE_SHIFT
); \

1081 } 0)

	)

1082 
	#IdeLﬂdPri1I‹dySp
(
idePå
, 
vÆ
) \

1085 (
idePå
)->
sIdeTim
 = ((idePtr)->sIdeTim \

1086 & ~(
IDE_SLTIM_PRI_RDY_SAMPLE_MASK
 \

1087 << 
IDE_SLTIM_PRI_RDY_SAMPLE_SHIFT
)) \

1088 | (((
vÆ
Ë& 
IDE_SLTIM_PRI_RDY_SAMPLE_MASK
) \

1089 << 
IDE_SLTIM_PRI_RDY_SAMPLE_SHIFT
); \

1090 } 0)

	)

1091 
	#IdeLﬂdSec0I‹dySp
(
idePå
, 
vÆ
) \

1094 (
idePå
)->
£cIdeTimHi
 = ((idePtr)->secIdeTimHi \

1095 & ~(
IDE_TIM_RDY_SAMPLE_MASK
 \

1096 << 
IDE_TIM_RDY_SAMPLE_SHIFT
)) \

1097 | (((
vÆ
Ë& 
IDE_TIM_RDY_SAMPLE_MASK
) \

1098 << 
IDE_TIM_RDY_SAMPLE_SHIFT
); \

1099 } 0)

	)

1100 
	#IdeLﬂdSec1I‹dySp
(
idePå
, 
vÆ
) \

1103 (
idePå
)->
sIdeTim
 = ((idePtr)->sIdeTim \

1104 & ~(
IDE_SLTIM_SEC_RDY_SAMPLE_MASK
 \

1105 << 
IDE_SLTIM_SEC_RDY_SAMPLE_SHIFT
)) \

1106 | (((
vÆ
Ë& 
IDE_SLTIM_SEC_RDY_SAMPLE_MASK
) \

1107 << 
IDE_SLTIM_SEC_RDY_SAMPLE_SHIFT
); \

1108 } 0)

	)

1131 
	#IdeGëIdeTim
(
idePå
, 
ideIf
) \

1132 (((
ideIf
Ë=
IDE_IF_SECONDARY
) ? \

1133 ((
idePå
)->
£cIdeTimLo
 | ((idePå)->
£cIdeTimHi
 << 8)) \

1134 : ((
idePå
)->
¥iIdeTimLo
 | ((idePå)->
¥iIdeTimHi
 << 8))

	)

1158 
	#IdeLﬂdIdeTim
(
idePå
, 
ideIf
, 
vÆ
) \

1161 i‡((
ideIf
Ë=
IDE_IF_SECONDARY
) \

1163 (
idePå
)->
£cIdeTimLo
 = (
vÆ
) & 0xFF; \

1164 (
idePå
)->
£cIdeTimHi
 = ((
vÆ
) & 0xFF00) >> 8; \

1168 (
idePå
)->
¥iIdeTimLo
 = (
vÆ
) & 0xFF; \

1169 (
idePå
)->
¥iIdeTimHi
 = ((
vÆ
) & 0xFF00) >> 8; \

1171 } 0)

	)

1194 
	#IdeE«bÀSœveTim
(
idePå
, 
ideIf
) \

1197 i‡((
ideIf
Ë=
IDE_IF_SECONDARY
) \

1198 (
idePå
)->
£cIdeTimHi
 |
IDE_TIM_SLAVE_TIM_ENABLE
; \

1200 (
idePå
)->
¥iIdeTimHi
 |
IDE_TIM_SLAVE_TIM_ENABLE
; \

1201 } 0)

	)

1223 
	#IdeE«bÀDecode
(
idePå
, 
ideIf
) \

1226 i‡((
ideIf
Ë=
IDE_IF_SECONDARY
) \

1227 (
idePå
)->
£cIdeTimHi
 |
IDE_TIM_DECODE_ENABLE
; \

1229 (
idePå
)->
¥iIdeTimHi
 |
IDE_TIM_DECODE_ENABLE
; \

1230 } 0)

	)

1252 
	#IdeDißbÀDecode
(
idePå
, 
ideIf
) \

1255 i‡((
ideIf
Ë=
IDE_IF_SECONDARY
) \

1256 (
idePå
)->
£cIdeTimHi
 &~
IDE_TIM_DECODE_ENABLE
; \

1258 (
idePå
)->
¥iIdeTimHi
 &~
IDE_TIM_DECODE_ENABLE
; \

1259 } 0)

	)

1282 
	#IdeIsDecodeE«bÀd
(
idePå
, 
ideIf
) \

1283 (((
ideIf
Ë=
IDE_IF_SECONDARY
) ? \

1284 ((
boﬁ
)((
idePå
)->
£cIdeTimHi
 & 
IDE_TIM_DECODE_ENABLE
)) \

1285 : ((
boﬁ
)((
idePå
)->
¥iIdeTimHi
 & 
IDE_TIM_DECODE_ENABLE
)))

	)

1305 
	#IdeGëSIdeTim
(
idePå
) \

1306 ((
idePå
)->
sIdeTim
)

	)

1327 
	#IdeLﬂdSIdeTim
(
idePå
, 
vÆ
) \

1330 (
idePå
)->
sIdeTim
 = (
vÆ
); \

1331 } 0)

	)

1353 
	#IdeGëIdeSÀwLo
(
idePå
) \

1354 ((
idePå
)->
ideSÀwLo
)

	)

1376 
	#IdeLﬂdIdeSÀwLo
(
idePå
, 
vÆ
) \

1379 (
idePå
)->
ideSÀwLo
 = (
uöt8
)((
vÆ
Ë& 
IDE_SLEW_MASK
); \

1380 } 0)

	)

1402 
	#IdeGëIdeSÀwHi
(
idePå
) \

1403 ((
idePå
)->
ideSÀwHi
)

	)

1425 
	#IdeLﬂdIdeSÀwHi
(
idePå
, 
vÆ
) \

1428 (
idePå
)->
ideSÀwHi
 = (
uöt8
)((
vÆ
Ë& 
IDE_SLEW_MASK
); \

1429 } 0)

	)

1449 
	#IdeGëIdeSÀw
(
idePå
) \

1450 (((
	`IdeGëIdeSÀwHi
(
idePå
Ë& 
IDE_SLEW_MASK
Ë<< 
IDE_SLEW_HI_SHIFT
) | \

1451 (
	`IdeGëIdeSÀwLo
(
idePå
Ë& 
IDE_SLEW_MASK
))

	)

1473 
	#IdeLﬂdIdeSÀw
(
idePå
, 
vÆ
) \

1476 
	`IdeLﬂdIdeSÀwLo
(
idePå
, (
uöt8
)((
vÆ
Ë& 
IDE_SLEW_MASK
)); \

1477 
	`IdeLﬂdIdeSÀwHi
(
idePå
, (
uöt8
)(((
vÆ
Ë>> 
IDE_SLEW_HI_SHIFT
) & \

1478 
IDE_SLEW_MASK
)); \

1479 } 0)

	)

1499 
	#IdeGëIdeSètus
(
idePå
) \

1500 ((
idePå
)->
ideSètus
)

	)

1521 
	#IdeLﬂdIdeSètus
(
idePå
,
vÆ
) \

1524 (
idePå
)->
ideSètus
 = (
uöt8
)(
vÆ
); \

1525 } 0)

	)

1545 
	#IdeGëUdmaCé
(
idePå
) \

1546 ((
idePå
)->
udmaCé
)

	)

1567 
	#IdeLﬂdUdmaCé
(
idePå
,
vÆ
) \

1570 (
idePå
)->
udmaCé
 = (
uöt8
)(
vÆ
); \

1571 } 0)

	)

1596 
	#IdeE«bÀUdma
(
idePå
, 
ideIf
, 
ideDev
) \

1599 i‡((
ideIf
Ë=
IDE_IF_SECONDARY
) \

1600 (
idePå
)->
udmaCé
 |(((
ideDev
Ë=
IDE_DEV_SLAVE
) ? \

1601 
IDE_SEC_1_UDMA_ENABLE
 : 
IDE_SEC_0_UDMA_ENABLE
); \

1603 (
idePå
)->
udmaCé
 |(((
ideDev
Ë=
IDE_DEV_SLAVE
) ? \

1604 
IDE_PRI_1_UDMA_ENABLE
 : 
IDE_PRI_0_UDMA_ENABLE
); \

1605 } 0)

	)

1630 
	#IdeDißbÀUdma
(
idePå
, 
ideIf
, 
ideDev
) \

1633 i‡((
ideIf
Ë=
IDE_IF_SECONDARY
) \

1634 (
idePå
)->
udmaCé
 &~(((
ideDev
Ë=
IDE_DEV_SLAVE
) ? \

1635 
IDE_SEC_1_UDMA_ENABLE
 : 
IDE_SEC_0_UDMA_ENABLE
); \

1637 (
idePå
)->
udmaCé
 &~(((
ideDev
Ë=
IDE_DEV_SLAVE
) ? \

1638 
IDE_PRI_1_UDMA_ENABLE
 : 
IDE_PRI_0_UDMA_ENABLE
); \

1639 } 0)

	)

1660 
	#IdeGëUdmaTimLo
(
idePå
) \

1661 ((
idePå
)->
udmaTimLo
)

	)

1683 
	#IdeLﬂdUdmaTimLo
(
idePå
, 
vÆ
) \

1686 (
idePå
)->
udmaTimLo
 = (
uöt8
)((
vÆ
Ë& 
IDE_UDMA_TIM_MASK
); \

1687 } 0)

	)

1708 
	#IdeGëUdmaTimHi
(
idePå
) \

1709 ((
idePå
)->
udmaTimHi
)

	)

1731 
	#IdeLﬂdUdmaTimHi
(
idePå
, 
vÆ
) \

1734 (
idePå
)->
udmaTimHi
 = (
uöt8
)((
vÆ
Ë& 
IDE_UDMA_TIM_MASK
); \

1735 } 0)

	)

1755 
	#IdeGëUdmaTim
(
idePå
) \

1756 (((
	`IdeGëUdmaTimHi
(
idePå
Ë& 
IDE_UDMA_TIM_MASK
Ë<< 
IDE_UDMA_TIM_HI_SHIFT
) |\

1757 (
	`IdeGëUdmaTimLo
(
idePå
Ë& 
IDE_UDMA_TIM_MASK
))

	)

1779 
	#IdeLﬂdUdmaTim
(
idePå
, 
vÆ
) \

1782 
	`IdeLﬂdUdmaTimLo
(
idePå
, (
uöt8
)((
vÆ
Ë& 
IDE_UDMA_TIM_MASK
)); \

1783 
	`IdeLﬂdUdmaTimHi
(
idePå
, (
uöt8
)(((
vÆ
Ë>> 
IDE_UDMA_TIM_HI_SHIFT
) & \

1784 
IDE_UDMA_TIM_MASK
)); \

1785 } 0)

	)

1812 
	#IdeSëPri0UdmaTimMode
(
idePå
, 
mode
) \

1815 (
idePå
)->
udmaTimLo
 = ((idePtr)->udmaTimLo \

1816 & ~(
IDE_UTIM_0_MODE_MASK
 \

1817 << 
IDE_UTIM_0_MODE_SHIFT
)) \

1818 | (((
mode
Ë& 
IDE_UTIM_0_MODE_MASK
) \

1819 << 
IDE_UTIM_0_MODE_SHIFT
); \

1820 } 0)

	)

1821 
	#IdeSëPri1UdmaTimMode
(
idePå
, 
mode
) \

1824 (
idePå
)->
udmaTimLo
 = ((idePtr)->udmaTimLo \

1825 & ~(
IDE_UTIM_1_MODE_MASK
 \

1826 << 
IDE_UTIM_1_MODE_SHIFT
)) \

1827 | (((
mode
Ë& 
IDE_UTIM_1_MODE_MASK
) \

1828 << 
IDE_UTIM_1_MODE_SHIFT
); \

1829 } 0)

	)

1830 
	#IdeSëSec0UdmaTimMode
(
idePå
, 
mode
) \

1833 (
idePå
)->
udmaTimHi
 = ((idePtr)->udmaTimHi \

1834 & ~(
IDE_UTIM_0_MODE_MASK
 \

1835 << 
IDE_UTIM_0_MODE_SHIFT
)) \

1836 | (((
mode
Ë& 
IDE_UTIM_0_MODE_MASK
) \

1837 << 
IDE_UTIM_0_MODE_SHIFT
); \

1838 } 0)

	)

1839 
	#IdeSëSec1UdmaTimMode
(
idePå
, 
mode
) \

1842 (
idePå
)->
udmaTimHi
 = ((idePtr)->udmaTimHi \

1843 & ~(
IDE_UTIM_1_MODE_MASK
 \

1844 << 
IDE_UTIM_1_MODE_SHIFT
)) \

1845 | (((
mode
Ë& 
IDE_UTIM_1_MODE_MASK
) \

1846 << 
IDE_UTIM_1_MODE_SHIFT
); \

1847 } 0)

	)

1868 
	#IdeGëBMICP
(
bmPå
) \

1869 ((
bmPå
)->
ideBMICP
)

	)

1890 
	#IdeLﬂdBMICP
(
bmPå
,
vÆ
) \

1893 (
bmPå
)->
ideBMICP
 = (
uöt16
)(
vÆ
); \

1894 } 0)

	)

1915 
	#IdeGëBMISP
(
bmPå
) \

1916 ((
bmPå
)->
ideBMISP
)

	)

1937 
	#IdeLﬂdBMISP
(
bmPå
,
vÆ
) \

1940 (
bmPå
)->
ideBMISP
 = (
uöt16
)(
vÆ
); \

1941 } 0)

	)

1963 
	#IdeGëBMIDTPPLo
(
bmPå
) \

1964 ((
bmPå
)->
ideBMIDTPP_LO
)

	)

1987 
	#IdeLﬂdBMIDTPPLo
(
bmPå
, 
vÆ
) \

1990 (
bmPå
)->
ideBMIDTPP_LO
 = (
uöt16
)((
vÆ
Ë& 
IDE_BMIDTP_MASK
); \

1991 } 0)

	)

2013 
	#IdeGëBMIDTPPHi
(
bmPå
) \

2014 ((
bmPå
)->
ideBMIDTPP_HI
)

	)

2037 
	#IdeLﬂdBMIDTPPHi
(
bmPå
, 
vÆ
) \

2040 (
bmPå
)->
ideBMIDTPP_HI
 = (
uöt16
)((
vÆ
Ë& 
IDE_BMIDTP_MASK
); \

2041 } 0)

	)

2063 
	#IdeGëBMIDTPP
(
idePå
) \

2064 (((
	`IdeGëBMIDTPPHi
(
idePå
Ë& 
IDE_BMIDTP_MASK
Ë<< 
IDE_BMIDTP_HI_SHIFT
) | \

2065 (
	`IdeGëBMIDTPPLo
(
idePå
Ë& 
IDE_BMIDTP_MASK
))

	)

2088 
	#IdeLﬂdBMIDTPP
(
idePå
, 
vÆ
) \

2091 
	`IdeLﬂdBMIDTPPLo
(
idePå
, (
uöt16
)((
vÆ
Ë& 
IDE_BMIDTP_MASK
)); \

2092 
	`IdeLﬂdBMIDTPPHi
(
idePå
, (
uöt16
)(((
vÆ
Ë>> 
IDE_BMIDTP_HI_SHIFT
) & \

2093 
IDE_BMIDTP_MASK
)); \

2094 } 0)

	)

2116 
	#IdeGëBMICS
(
bmPå
) \

2117 ((
bmPå
)->
ideBMICS
)

	)

2139 
	#IdeLﬂdBMICS
(
bmPå
,
vÆ
) \

2142 (
bmPå
)->
ideBMICS
 = (
uöt16
)(
vÆ
); \

2143 } 0)

	)

2165 
	#IdeGëBMISS
(
bmPå
) \

2166 ((
bmPå
)->
ideBMISS
)

	)

2189 
	#IdeGëBMISètus
(
bmPå
, 
ideIf
) \

2190 (((
ideIf
Ë=
IDE_IF_SECONDARY
Ë? (
bmPå
)->
ideBMISS
 : (bmPå)->
ideBMISP
)

	)

2212 
	#IdeLﬂdBMISS
(
bmPå
,
vÆ
) \

2215 (
bmPå
)->
ideBMISS
 = (
uöt16
)(
vÆ
); \

2216 } 0)

	)

2238 
	#IdeGëBMIDTPSLo
(
bmPå
) \

2239 ((
bmPå
)->
ideBMIDTPS_LO
)

	)

2262 
	#IdeLﬂdBMIDTPSLo
(
bmPå
, 
vÆ
) \

2265 (
bmPå
)->
ideBMIDTPS_LO
 = ((
uöt16
)(
vÆ
Ë& 
IDE_BMIDTP_MASK
); \

2266 } 0)

	)

2288 
	#IdeGëBMIDTPSHi
(
bmPå
) \

2289 ((
bmPå
)->
ideBMIDTPS_HI
)

	)

2312 
	#IdeLﬂdBMIDTPSHi
(
bmPå
, 
vÆ
) \

2315 (
bmPå
)->
ideBMIDTPS_HI
 = (
uöt16
)((
vÆ
Ë& 
IDE_BMIDTP_MASK
); \

2316 } 0)

	)

2338 
	#IdeGëBMIDTPS
(
idePå
) \

2339 (((
	`IdeGëBMIDTPSHi
(
idePå
Ë& 
IDE_BMIDTP_MASK
Ë<< 
IDE_BMIDTP_HI_SHIFT
) | \

2340 (
	`IdeGëBMIDTPSLo
(
idePå
Ë& 
IDE_BMIDTP_MASK
))

	)

2364 
	#IdeLﬂdBMIDTPS
(
idePå
, 
vÆ
) \

2367 
	`IdeLﬂdBMIDTPSLo
(
idePå
, (
uöt16
)((
vÆ
Ë& 
IDE_BMIDTP_MASK
)); \

2368 
	`IdeLﬂdBMIDTPSHi
(
idePå
, (
uöt16
)(((
vÆ
Ë>> 
IDE_BMIDTP_HI_SHIFT
) & \

2369 
IDE_BMIDTP_MASK
)); \

2370 } 0)

	)

2396 
	#IdeLﬂdBMIDescTabPå
(
idePå
, 
ideIf
, 
vÆ
) \

2399 i‡((
ideIf
Ë=
IDE_IF_SECONDARY
Ë{ 
	`IdeLﬂdBMIDTPS
((
idePå
), (
vÆ
)); } \

2400 { 
	`IdeLﬂdBMIDTPP
((
idePå
), (
vÆ
)); } \

2401 } 0)

	)

2425 
	#IdeSëDmaWrôeAè
(
bmPå
, 
ideIf
) \

2428 i‡((
ideIf
Ë=
IDE_IF_SECONDARY
) \

2429 (
bmPå
)->
ideBMICS
 &~((
uöt16
)
IDE_DMA_BM_WRITE
); \

2431 (
bmPå
)->
ideBMICP
 &~((
uöt16
)
IDE_DMA_BM_WRITE
); \

2432 } 0)

	)

2456 
	#IdeSëDmaRódAè
(
bmPå
, 
ideIf
) \

2459 i‡((
ideIf
Ë=
IDE_IF_SECONDARY
) \

2460 (
bmPå
)->
ideBMICS
 |(
uöt16
)
IDE_DMA_BM_WRITE
; \

2462 (
bmPå
)->
ideBMICP
 |(
uöt16
)
IDE_DMA_BM_WRITE
; \

2463 } 0)

	)

2486 
	#IdeSèπDmaX„r
(
bmPå
, 
ideIf
) \

2489 i‡((
ideIf
Ë=
IDE_IF_SECONDARY
) \

2490 (
bmPå
)->
ideBMICS
 |(
uöt16
)
IDE_DMA_XFER_START
; \

2492 (
bmPå
)->
ideBMICP
 |(
uöt16
)
IDE_DMA_XFER_START
; \

2493 } 0)

	)

2515 
	#IdeSt›DmaX„r
(
bmPå
, 
ideIf
) \

2518 i‡((
ideIf
Ë=
IDE_IF_SECONDARY
) \

2519 (
bmPå
)->
ideBMICS
 &~((
uöt16
)
IDE_DMA_XFER_START
); \

2521 (
bmPå
)->
ideBMICP
 &~((
uöt16
)
IDE_DMA_XFER_START
); \

2522 } 0)

	)

2542 
	#IdeIsDmaX„rSèπed
(
idePå
) \

2543 ((
	`IdeGëBMICP
(
idePå
Ë& 
IDE_DMA_XFER_START
)

	)

2563 
	#IdeE«bÀTimOvîride
(
idePå
) \

2566 (
idePå
)->
timOvîride
 |
IDE_TIMORIDE_OVERRIDE_ENA
; \

2567 } 0)

	)

2587 
	#IdeDißbÀTimOvîride
(
idePå
) \

2590 (
idePå
)->
timOvîride
 &~
IDE_TIMORIDE_OVERRIDE_ENA
; \

2591 } 0)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/intc.h

41 #i‚de‡
INTC_H


42 
	#INTC_H


	)

47 
	~"pubdefs.h
"

48 
	~"¥odu˘.h
"

50 
	~"aux_ötc.h
"

67 
	#INTC_TIMER0_INT
 (0x00000001)

	)

68 
	#INTC_WDTIMER_INT
 (0x00000002)

	)

69 
	#INTC_UART0_INT
 (0x00000004)

	)

70 
	#INTC_PIO_INT
 (0x00000008)

	)

71 
	#INTC_BTN_INT
 (0x00000010)

	)

72 
	#INTC_LCD_INT
 (0x00000020)

	)

73 
	#INTC_DMA_AUX0_INT
 (0x00000040)

	)

74 
	#INTC_DMA_AUX1_INT
 (0x00000080)

	)

75 
	#INTC_UARTLITE_INT
 (0x00000100)

	)

76 
	#INTC_RTC_TMR_INT
 (0x00000200)

	)

77 
	#INTC_RTC_ALARM_INT
 (0x00000400)

	)

78 
	#INTC_EXT0_INT
 (0x00000800)

	)

79 
	#INTC_EXT1_INT
 (0x00001000)

	)

80 
	#INTC_AUX0_INT
 (0x00002000)

	)

81 
	#INTC_AUX1_INT
 (0x00004000)

	)

82 
	#INTC_AUX2_INT
 (0x00008000)

	)

83 
	#INTC_AUX3_INT
 (0x00010000)

	)

84 
	#INTC_AUX4_INT
 (0x00020000)

	)

85 
	#INTC_AUX5_INT
 (0x00040000)

	)

86 
	#INTC_AUX6_INT
 (0x00080000)

	)

87 
	#INTC_AUX7_INT
 (0x00100000)

	)

88 
	#INTC_AUX8_INT
 (0x00200000)

	)

89 
	#INTC_AUX9_INT
 (0x00400000)

	)

90 
	#INTC_AUX10_INT
 (0x00800000)

	)

92 
	#GLOBAL_INT
 (0x80000000)

	)

93 
	#ALL_INTS
 (0x00FFFFFFË

	)

100 
	sötcRegs_t


102 vﬁ©ûê
uöt32
 
	múq0Sètus
;

103 vﬁ©ûê
uöt32
 
	múq1Sètus
;

104 vﬁ©ûê
uöt32
 
	mª£rved
[6];

105 vﬁ©ûê
uöt32
 
	mötTy≥
;

106 vﬁ©ûê
uöt32
 
	mª£rved1
[3];

107 vﬁ©ûê
uöt32
 
	møwSètus
;

108 vﬁ©ûê
uöt32
 
	mötE«bÀ
;

109 vﬁ©ûê
uöt32
 
	mötDißbÀ
;

110 } 
	tötcRegs
;

115 
	mtimîI¡
,

116 
	mw©chdogI¡
,

117 
	mu¨tI¡
,

118 
	mpioI¡
,

119 
	mbäI¡
,

120 
	mlcdI¡
,

121 
	mdmaAux0I¡
,

122 
	mdmaAux1I¡
,

123 
	mu¨éôeI¡
,

124 
	mπcTmrI¡
,

125 
	mπcAœrmI¡
,

127 
	mext0I¡
,

128 
	mext1I¡
,

129 
	maux0I¡
,

130 
	maux1I¡
,

131 
	maux2I¡
,

132 
	maux3I¡
,

133 
	maux4I¡
,

134 
	maux5I¡
,

135 
	maux6I¡
,

136 
	maux7I¡
,

137 
	maux8I¡
,

138 
	maux9I¡
,

139 
	maux10I¡
,

141 
	mmaxI¡s


142 } 
	tötCode
;

174 
	#I¡cE«bÀI¡
(
vÆ
) \

178 ((
ötcRegs
 *)(
INTC_BASE
))->
ötE«bÀ
 = (
vÆ
); \

179 } 0)

	)

207 
	#I¡cIsI¡E«bÀ
(
vÆ
Ë–((
ötcRegs
 *)
INTC_BASE
)->
ötE«bÀ
 & (vÆË)

	)

228 
	#I¡cDißbÀI¡
(
vÆ
) \

232 ((
ötcRegs
 *)(
INTC_BASE
))->
ötDißbÀ
 = (
vÆ
); \

233 } 0)

	)

255 
	#I¡cE«bÀAŒI¡
() \

259 ((
ötcRegs
 *)(
INTC_BASE
))->
ötE«bÀ
 = 
GLOBAL_INT
; \

260 } 0)

	)

282 
	#I¡cDißbÀAŒI¡
() \

286 ((
ötcRegs
 *)(
INTC_BASE
))->
ötDißbÀ
 = 
GLOBAL_INT
; \

287 } 0)

	)

309 
	#I¡cSëIrqI¡
(
vÆ
,
úqNum
) \

313 i‡((
úqNum
) == 0) \

315 ((
ötcRegs
 *)(
INTC_BASE
))->
ötTy≥
 &~(
vÆ
); \

319 ((
ötcRegs
 *)(
INTC_BASE
))->
ötTy≥
 |(
vÆ
); \

321 } 0)

	)

345 
	#I¡cCheckIrq0I¡
(
vÆ
Ë((
boﬁ
)(((
ötcRegs
*)(
INTC_BASE
))->
úq0Sètus
 & (vÆ)))

	)

369 
	#I¡cCheckIrq1I¡
(
vÆ
Ë((
boﬁ
)(((
ötcRegs
*)(
INTC_BASE
))->
úq1Sètus
 & (vÆ)))

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/lcd.h

50 #i‚de‡
LCD_H


51 
	#LCD_H


	)

56 
	~"¥odu˘.h
"

57 
	~"pubdefs.h
"

58 
	~"timî.h
"

66 
	#LCD_BUSY
 (0x0001Ë

	)

67 
	#LCD_FINISH
 (0x0002Ë

	)

68 
	#LCD_HOLD_EMPTY
 (0x0004Ë

	)

69 
	#LCD_DISP_ERROR
 (0x0008Ë

	)

70 
	#LCD_DISP_URUN
 (0x0010Ë

	)

71 
	#LCD_DISP_ORUN
 (0x0020Ë

	)

72 
	#LCD_DISP_MAX_DEPTH
 (2Ë

	)

73 
	#LCD_DISP_DEPTH_MASK
 (0x0003Ë

	)

74 
	#LCD_DISP_DEPTH_SHIFT
 (6Ë

	)

75 
	#LCD_CTRL_URUN
 (0x0100Ë

	)

76 
	#LCD_CTRL_ORUN
 (0x0200Ë

	)

77 
	#LCD_CTRL_MAX_DEPTH
 (2Ë

	)

78 
	#LCD_CTRL_DEPTH_MASK
 (0x0003Ë

	)

79 
	#LCD_CTRL_DEPTH_SHIFT
 (10Ë

	)

80 
	#LCD_ALL_STATUS_MASK
 (0x033EË

	)

84 
	#LCD_FINISH_INT
 (0x0002Ë

	)

85 
	#LCD_HOLD_EMPTY_INT
 (0x0004Ë

	)

86 
	#LCD_DISP_ERROR_INT
 (0x0008Ë

	)

87 
	#LCD_DISP_URUN_INT
 (0x0010Ë

	)

88 
	#LCD_DISP_ORUN_INT
 (0x0020Ë

	)

89 
	#LCD_CTRL_URUN_INT
 (0x0100Ë

	)

90 
	#LCD_CTRL_ORUN_INT
 (0x0200Ë

	)

91 
	#LCD_ALL_INT_MASK
 (0x033EË

	)

95 
	#LCD_ENABLE_POL
 (0x0001Ë

	)

96 
	#LCD_REG_STROBE_POL
 (0x0002Ë

	)

97 
	#LCD_RWDIR_POL
 (0x0004Ë

	)

99 
	#LCD_CHIP_SEL_POL
 (0x0008Ë

	)

100 
	#LCD_DISP_LENGTH
 (0x0010Ë

	)

101 
	#LCD_CTRL_LENGTH
 (0x0020Ë

	)

102 
	#LCD_BACKLIGHT_MODE
 (0x4000Ë

	)

104 
	#LCD_BACKLIGHT_ENABLE
 (0x8000Ë

	)

108 
	#LCD_SETUPVAL_MASK
 (0x000FË

	)

109 
	#LCD_SETUPVAL_SHIFT
 (0Ë

	)

110 
	#LCD_HOLDVAL_MASK
 (0x000FË

	)

111 
	#LCD_HOLDVAL_SHIFT
 (4Ë

	)

112 
	#LCD_EPWVAL_MASK
 (0x00FFË

	)

114 
	#LCD_EPWVAL_SHIFT
 (8Ë

	)

116 
	#LCD_RECOVVAL_MASK
 (0xFFFFË

	)

117 
	#LCD_RECOVVAL_SHIFT
 (16Ë

	)

124 
	#LCD_REQREAD
 (0x10000Ë

	)

127 
	#LCD_CTRL_MASK
 (0x00FFË

	)

128 
	#LCD_CTRL_SHIFT
 (0Ë

	)

129 
	#LCD_DEV_BUSY
 (0x0080Ë

	)

133 
	#LCD_DISP_MASK
 (0x00FFË

	)

134 
	#LCD_DISP_SHIFT
 (0Ë

	)

141 
	#LCD_INIT_SETUPVAL
 ((
uöt32
Ë0x0002Ë

	)

142 
	#LCD_INIT_EPWVAL
 ((
uöt32
Ë0x0008Ë

	)

143 
	#LCD_INIT_HOLDVAL
 ((
uöt32
Ë000001Ë

	)

144 
	#LCD_INIT_RECOVVAL
 ((
uöt32
Ë0x0800Ë

	)

146 
	#LCD_INIT_PARAM
 ( 
LCD_INIT_SETUPVAL
 << 
LCD_SETUPVAL_SHIFT
 \

147 | 
LCD_INIT_EPWVAL
 << 
LCD_EPWVAL_SHIFT
 \

148 | 
LCD_INIT_HOLDVAL
 << 
LCD_HOLDVAL_SHIFT
 \

149 | 
LCD_INIT_RECOVVAL
 << 
LCD_RECOVVAL_SHIFT
 )

	)

153 
	#LCD_INIT_CONFIG
 ( 
LCD_DISP_LENGTH
 | 
LCD_CTRL_LENGTH
 )

	)

157 
	#LCD_INIT_DELAY1_US
 400000

	)

158 
	#LCD_INIT_DELAY2_US
 100000

	)

159 
	#LCD_INIT_DELAY3_US
 2000

	)

163 
	#LCD_NUMLINES
 (4Ë

	)

164 
	#LCD_NUMCHARS
 (16Ë

	)

165 
	#LCD_FUNSET
 (0x38Ë

	)

166 
	#LCD_DISPON
 (0x0CË

	)

167 
	#LCD_DISPCLR
 (0x01Ë

	)

168 
	#LCD_EMODESET
 (0x06Ë

	)

169 
	#LCD_ADDRDRAM
 (0x80Ë

	)

170 
	#LCD_AC_MASK
 (0x7FË

	)

178 
	slcdRegs_t


180 vﬁ©ûê
uöt32
 
	mlcd°©
;

181 vﬁ©ûê
uöt32
 
	mlcdöt
;

182 vﬁ©ûê
uöt32
 
	mlcdöãn
;

183 vﬁ©ûê
uöt32
 
	mª£rved1
[5] ;

184 vﬁ©ûê
uöt32
 
	mlcdcfg
;

185 vﬁ©ûê
uöt32
 
	mlcd∑øm
;

186 vﬁ©ûê
uöt32
 
	mª£rved2
[2] ;

187 vﬁ©ûê
uöt32
 
	mlcd˘æ
;

188 vﬁ©ûê
uöt32
 
	mlcdd©a
;

189 vﬁ©ûê
uöt32
 
	mª£rved3
[42];

190 vﬁ©ûê
uöt32
 
	mlcdsim∑øm
;

191 } 
	tlcdRegs
;

202 
PUBLIC
 
LcdInô
 ( 
lcdRegs
 *
lcdPå
, 
tmrBlkRegs
 *
tmrPå
, 
timîNum
);

203 
PUBLIC
 
LcdCÃs¸
 ( 
lcdRegs
 *
lcdPå
 );

204 
PUBLIC
 
LcdSëpos
 ( 
lcdRegs
 *
lcdPå
, 
uöt32
 
löe
, uöt32 
ch¨pos
 );

205 
PUBLIC
 
uöt32
 
LcdGëpos
 ( 
lcdRegs
 *
lcdPå
 );

206 
PUBLIC
 
LcdPutch¨
 ( 
lcdRegs
 *
lcdPå
, 
öt8
 
thech¨
 );

207 
PUBLIC
 
LcdPuthex
 ( 
lcdRegs
 *
lcdPå
, 
öt8
 
hexch¨
 );

208 
PUBLIC
 
LcdDi•Dec
 ( 
lcdRegs
 *
lcdPå
, 
uöt32
 
hexVÆue
, uöt32 
decPœ˚s
 );

209 
PUBLIC
 
LcdPrötSåög
 ( 
lcdRegs
 *
lcdPå
, c⁄° 
öt8
 *
the°rög
 );

210 
PUBLIC
 
LcdCÀ¨Löe
 ( 
lcdRegs
 *
lcdPå
, 
uöt32
 
löe
 );

234 
	#LcdGëSètus
(
lcdPå
) \

235 ((
lcdPå
)->
lcd°©
)

	)

257 
	#LcdCÀ¨Sètus
(
lcdPå
,
bô
) \

261 (
lcdPå
)->
lcdöt
 |(
bô
); \

262 } 0)

	)

283 
	#LcdIsBusy
(
lcdPå
) \

284 (((
lcdPå
)->
lcd°©
 & 
LCD_BUSY
Ë? 
TRUE
: 
FALSE
)

	)

305 
	#LcdIsX„rCom∂ëe
(
lcdPå
) \

306 (((
lcdPå
)->
lcd°©
 & 
LCD_FINISH
Ë? 
TRUE
: 
FALSE
)

	)

327 
	#LcdIsHﬁdRegEm±y
(
lcdPå
) \

328 (((
lcdPå
)->
lcd°©
 & 
LCD_HOLD_EMPTY
Ë? 
TRUE
: 
FALSE
)

	)

349 
	#LcdIsDi•X„rEº‹
(
lcdPå
) \

350 (((
lcdPå
)->
lcd°©
 & 
LCD_DISP_ERROR
Ë? 
TRUE
: 
FALSE
)

	)

371 
	#LcdIsDi•URunEº‹
(
lcdPå
) \

372 (((
lcdPå
)->
lcd°©
 & 
LCD_DISP_URUN
Ë? 
TRUE
: 
FALSE
)

	)

393 
	#LcdIsDi•ORunEº‹
(
lcdPå
) \

394 (((
lcdPå
)->
lcd°©
 & 
LCD_DISP_ORUN
Ë? 
TRUE
: 
FALSE
)

	)

415 
	#LcdGëDi•Dïth
(
lcdPå
) \

416 (((
lcdPå
)->
lcd°©
 >> 
LCD_DISP_DEPTH_SHIFT
Ë& 
LCD_DISP_DEPTH_MASK
)

	)

437 
	#LcdIsCålURunEº‹
(
lcdPå
) \

438 (((
lcdPå
)->
lcd°©
 & 
LCD_CTRL_URUN
Ë? 
TRUE
: 
FALSE
)

	)

459 
	#LcdIsCålORunEº‹
(
lcdPå
) \

460 (((
lcdPå
)->
lcd°©
 & 
LCD_CTRL_ORUN
Ë? 
TRUE
: 
FALSE
)

	)

481 
	#LcdGëCålDïth
(
lcdPå
) \

482 (((
lcdPå
)->
lcd°©
 >> 
LCD_CTRL_DEPTH_SHIFT
Ë& 
LCD_CTRL_DEPTH_MASK
)

	)

503 
	#LcdGëI¡Sètus
(
lcdPå
) \

504 ((
lcdPå
)->
lcdöt
)

	)

526 
	#LcdCÀ¨I¡Sètus
(
lcdPå
,) \

530 (
lcdPå
)->
lcdöt
 |(
uöt32
)(); \

531 } 0)

	)

552 
	#LcdGëI¡E«bÀ
(
lcdPå
) \

553 ((
lcdPå
)->
lcdöãn
)

	)

575 
	#LcdDißbÀI¡
(
lcdPå
,) \

579 (
lcdPå
)->
lcdöãn
 &(
uöt32
)(~()); \

580 } 0)

	)

602 
	#LcdE«bÀI¡
(
lcdPå
,) \

606 (
lcdPå
)->
lcdöãn
 |(
uöt32
)(); \

607 } 0)

	)

628 
	#LcdGëC⁄fig
(
lcdPå
) \

629 ((
lcdPå
)->
lcdcfg
)

	)

651 
	#LcdCÀ¨C⁄fig
(
lcdPå
,
c⁄figBôs
) \

655 (
lcdPå
)->
lcdcfg
 &(
uöt32
Ë(~(
c⁄figBôs
)); \

656 } 0)

	)

678 
	#LcdSëC⁄fig
(
lcdPå
,
c⁄figBôs
) \

682 (
lcdPå
)->
lcdcfg
 |(
uöt32
)(
c⁄figBôs
); \

683 } 0)

	)

705 
	#LcdLﬂdC⁄fig
(
lcdPå
,
c⁄figBôs
) \

709 (
lcdPå
)->
lcdcfg
 = (
uöt32
)(
c⁄figBôs
); \

710 } 0)

	)

731 
	#LcdGëAŒP¨amVÆs
(
lcdPå
) \

732 ((
lcdPå
)->
lcd∑øm
)

	)

754 
	#LcdLﬂdAŒP¨amVÆs
(
lcdPå
,
∑ømVÆ
) \

758 (
lcdPå
)->
lcd∑øm
 = (
∑ømVÆ
); \

759 } 0)

	)

781 
	#LcdLﬂdSëupP¨amVÆ
(
lcdPå
,
∑ømVÆ
) \

785 (
lcdPå
)->
lcd∑øm
 = ( ((lcdPtr)->lcdparam & \

786 (~(
LCD_SETUPVAL_MASK
 << 
LCD_SETUPVAL_SHIFT
))) | \

787 (((
∑ømVÆ
Ë& 
LCD_SETUPVAL_MASK
) << \

788 
LCD_SETUPVAL_SHIFT
) ); \

789 } 0)

	)

810 
	#LcdGëSëupP¨amVÆ
(
lcdPå
) \

811 (((
lcdPå
)->
lcd∑øm
 >> 
LCD_SETUPVAL_SHIFT
Ë& 
LCD_SETUPVAL_MASK
)

	)

833 
	#LcdLﬂdHﬁdP¨amVÆ
(
lcdPå
,
∑ømVÆ
) \

837 (
lcdPå
)->
lcd∑øm
 = ( ((lcdPtr)->lcdparam & \

838 (~(
LCD_HOLDVAL_MASK
 << 
LCD_HOLDVAL_SHIFT
))) | \

839 (((
∑ømVÆ
Ë& 
LCD_HOLDVAL_MASK
) << \

840 
LCD_HOLDVAL_SHIFT
) ); \

841 } 0)

	)

862 
	#LcdGëHﬁdP¨amVÆ
(
lcdPå
) \

863 (((
lcdPå
)->
lcd∑øm
 >> 
LCD_HOLDVAL_SHIFT
Ë& 
LCD_HOLDVAL_MASK
)

	)

885 
	#LcdLﬂdEpwP¨amVÆ
(
lcdPå
,
∑ømVÆ
) \

889 (
lcdPå
)->
lcd∑øm
 = ( ((lcdPtr)->lcdparam & \

890 (~(
LCD_EPWVAL_MASK
 << 
LCD_EPWVAL_SHIFT
))) | \

891 (((
∑ømVÆ
Ë& 
LCD_EPWVAL_MASK
) << \

892 
LCD_EPWVAL_SHIFT
) ); \

893 } 0)

	)

914 
	#LcdGëEpwP¨amVÆ
(
lcdPå
) \

915 (((
lcdPå
)->
lcd∑øm
 >> 
LCD_EPWVAL_SHIFT
Ë& 
LCD_EPWVAL_MASK
)

	)

938 
	#LcdLﬂdRecovP¨amVÆ
(
lcdPå
,
∑ømVÆ
) \

942 (
lcdPå
)->
lcd∑øm
 = ( ((lcdPtr)->lcdparam & \

943 (~(((
uöt32
)
LCD_RECOVVAL_MASK
) << \

944 
LCD_RECOVVAL_SHIFT
))) | \

945 (((
uöt32
)((
∑ømVÆ
Ë& 
LCD_RECOVVAL_MASK
)) << \

946 
LCD_RECOVVAL_SHIFT
) ); \

947 } 0)

	)

968 
	#LcdGëRecovP¨amVÆ
(
lcdPå
) \

969 (((
lcdPå
)->
lcd∑øm
 >> 
LCD_RECOVVAL_SHIFT
Ë& 
LCD_RECOVVAL_MASK
)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/mac.h

42 #i‚de‡
MAC_H


43 
	#MAC_H


	)

48 
	~"pubdefs.h
"

49 
	~"¥odu˘.h
"

57 
	#MAC_SDRAM_REFR_CNTL_REG
 (
MAC_BASE
 + 0x00)

	)

58 
	#MAC_ROM_CONFIG_REG
 (
MAC_BASE
 + 0x14)

	)

59 
	#MAC_SRAM_CONFIG_REG
 (
MAC_BASE
 + 0x24)

	)

61 
	#MAC_SDRAM_CNTL_REG
 (
MAC_BASE
 + 0x30)

	)

62 
	#MAC_SDRAM_CONFIG_REG
 (
MAC_BASE
 + 0x34)

	)

63 
	#MAC_SDRAM_MODE_REG
 (
MAC_BASE
 + 0x38)

	)

65 
	#MAC_SDRAM2_CNTL_REG
 (
MAC_BASE
 + 0x40)

	)

66 
	#MAC_SDRAM2_CONFIG_REG
 (
MAC_BASE
 + 0x44)

	)

67 
	#MAC_SDRAM2_MODE_REG
 (
MAC_BASE
 + 0x48)

	)

69 
	#MAC_WRITESTAT_REG
 (
MAC_BASE
 + 0x90)

	)

70 
	#MAC_POSTWRITE_EN_REG
 (
MAC_BASE
 + 0x94)

	)

74 
	#MAC_WIDTH_8
 (0x0)

	)

75 
	#MAC_WIDTH_16
 (0x1)

	)

76 
	#MAC_WIDTH_32
 (0x2)

	)

77 
	#MAC_WIDTH_SHIFT
 (0)

	)

78 
	#MAC_WIDTH_MASK
 (0x3)

	)

80 
	#MAC_BANKTYPE_ASYNC
 (0x2)

	)

81 
	#MAC_BANKTYPE_SHIFT
 (2)

	)

82 
	#MAC_BANKTYPE_MASK
 (0x3)

	)

84 
	#MAC_RHOLD_SHIFT
 (4)

	)

85 
	#MAC_RHOLD_MASK
 (0x3)

	)

86 
	#MAC_WHOLD_SHIFT
 (6)

	)

87 
	#MAC_WHOLD_MASK
 (0x3)

	)

89 
	#MAC_OE_SHIFT
 (8Ë

	)

90 
	#MAC_OE_MASK
 (0xF)

	)

91 
	#MAC_WE_SHIFT
 (12Ë

	)

92 
	#MAC_WE_MASK
 (0xF)

	)

94 
	#MAC_RADDR_SETUP_SHIFT
 (16Ë

	)

95 
	#MAC_RADDR_SETUP_MASK
 (0x3)

	)

96 
	#MAC_WADDR_SETUP_SHIFT
 (18Ë

	)

97 
	#MAC_WADDR_SETUP_MASK
 (0x3)

	)

99 
	#MAC_ADDR2CS_SETUP_SHIFT
 (20Ë

	)

100 
	#MAC_ADDR2CS_SETUP_MASK
 (0x3)

	)

102 
	#MAC_CS2ADDR_HOLD_SHIFT
 (22Ë

	)

103 
	#MAC_CS2ADDR_HOLD_MASK
 (0x1)

	)

105 
	#MAC_BYTE_EN_SHIFT
 (23Ë

	)

106 
	#MAC_BYTE_EN_MASK
 (0x1)

	)

111 
	#MAC_REFRESH_RATE_SHIFT
 (0)

	)

112 
	#MAC_REFRESH_RATE_MASK
 (0xFFF)

	)

113 
	#MAC_REFRESH_PRESCALE_SHIFT
 (13)

	)

114 
	#MAC_REFRESH_PRESCALE_MASK
 (0x7)

	)

118 
	#MAC_CTRL_SDRAMCLK
 (1)

	)

119 
	#MAC_CTRL_SDRAMINI
 (2)

	)

123 
	#MAC_SDRAM_WIDTH_16
 (0x0)

	)

124 
	#MAC_SDRAM_WIDTH_32
 (0x1)

	)

125 
	#MAC_SDRAM_WIDTH_SHIFT
 (0)

	)

126 
	#MAC_SDRAM_WIDTH_MASK
 (0x3)

	)

128 
	#MAC_BANKTYPE_SDRAM
 (0x3)

	)

130 
	#MAC_PGSIZE_SHIFT
 (4)

	)

131 
	#MAC_PGSIZE_MASK
 (0x3)

	)

133 
	#MAC_PCABIT_SHIFT
 (6)

	)

134 
	#MAC_PCABIT_MASK
 (0x3)

	)

136 
	#MAC_SDRAMTYP_SHIFT
 (8)

	)

137 
	#MAC_SDRAMTYP_MASK
 (0x1)

	)

139 
	#MAC_NUMROWADR_SHIFT
 (9)

	)

140 
	#MAC_NUMROWADR_MASK
 (0x7)

	)

142 
	#MAC_PRECHGOPT_SHIFT
 (12)

	)

143 
	#MAC_PRECHGOPT_MASK
 (0x3)

	)

145 
	#MAC_PRECHRG_SHIFT
 (16)

	)

146 
	#MAC_PRECHRG_MASK
 (0x3)

	)

148 
	#MAC_ACTIVE_SHIFT
 (18)

	)

149 
	#MAC_ACTIVE_MASK
 (0x3)

	)

151 
	#MAC_MODE_SHIFT
 (20)

	)

152 
	#MAC_MODE_MASK
 (0x3)

	)

154 
	#MAC_TERM_SHIFT
 (22)

	)

155 
	#MAC_TERM_MASK
 (0x3)

	)

157 
	#MAC_REFR_SHIFT
 (24)

	)

158 
	#MAC_REFR_MASK
 (0xf)

	)

162 
	#MAC_MODEDATA_SHIFT
 (0)

	)

163 
	#MAC_MODEDATA_MASK
 (0x3ff)

	)

166 
	#MAC_MD_BURSTLEN_SHIFT
 (0)

	)

167 
	#MAC_MD_BURSTLEN_MASK
 (0x7)

	)

169 
	#MAC_MD_WRAPTYPE_SEQUENTIAL
 (0x0)

	)

170 
	#MAC_MD_WRAPTYPE_INTERLEAVE
 (0x8)

	)

172 
	#MAC_MD_LATMODE_SHIFT
 (4Ë

	)

173 
	#MAC_MD_LATMODE_MASK
 (0x7)

	)

175 
	#MAC_MD_BURST_WRITE
 (0x0)

	)

176 
	#MAC_MD_SINGLE_WRITE
 (0x200)

	)

184 
	smacRegs_t


186 vﬁ©ûê
uöt32
 
	msdømRe‰Cål
;

187 vﬁ©ûê
uöt32
 
	mª£rved1
[4];

188 vﬁ©ûê
uöt32
 
	mromC⁄fig
;

189 vﬁ©ûê
uöt32
 
	mª£rved2
[3];

190 vﬁ©ûê
uöt32
 
	m§amC⁄fig
;

191 vﬁ©ûê
uöt32
 
	mª£rved3
[2];

192 vﬁ©ûê
uöt32
 
	msdømCål
;

193 vﬁ©ûê
uöt32
 
	msdømC⁄fig
;

194 vﬁ©ûê
uöt32
 
	msdømMode
;

195 vﬁ©ûê
uöt32
 
	mª£rved4
;

196 vﬁ©ûê
uöt32
 
	msdøm2Cål
;

197 vﬁ©ûê
uöt32
 
	msdøm2C⁄fig
;

198 vﬁ©ûê
uöt32
 
	msdøm2Mode
;

199 vﬁ©ûê
uöt32
 
	mª£rved5
[17];

200 vﬁ©ûê
uöt32
 
	mwrôeSèt
;

201 vﬁ©ûê
uöt32
 
	mpo°wrôeEn
;

202 } 
	tmacRegs
;

204 
	emacBoŸMemWidth_t


206 
	mBoŸMem8
,

207 
	mBoŸMem16
,

208 
	mBoŸMem32


209 } 
	tmacBoŸMemWidth
;

225 
	#MacIsRomWidth8
(
macPå
Ë((((macPå)->
romC⁄fig
 >> 
MAC_WIDTH_SHIFT
Ë& 
MAC_WIDTH_MASK
Ë=
MAC_WIDTH_8
)

	)

226 
	#MacIsRomWidth16
(
macPå
Ë((((macPå)->
romC⁄fig
 >> 
MAC_WIDTH_SHIFT
Ë& 
MAC_WIDTH_MASK
Ë=
MAC_WIDTH_16
)

	)

227 
	#MacIsRomWidth32
(
macPå
Ë((((macPå)->
romC⁄fig
 >> 
MAC_WIDTH_SHIFT
Ë& 
MAC_WIDTH_MASK
Ë=
MAC_WIDTH_32
)

	)

229 
	#MacIsSømWidth8
(
macPå
Ë((((macPå)->
§amC⁄fig
 >> 
MAC_WIDTH_SHIFT
Ë& 
MAC_WIDTH_MASK
Ë=
MAC_WIDTH_8
)

	)

230 
	#MacIsSømWidth16
(
macPå
Ë((((macPå)->
§amC⁄fig
 >> 
MAC_WIDTH_SHIFT
Ë& 
MAC_WIDTH_MASK
Ë=
MAC_WIDTH_16
)

	)

231 
	#MacIsSømWidth32
(
macPå
Ë((((macPå)->
§amC⁄fig
 >> 
MAC_WIDTH_SHIFT
Ë& 
MAC_WIDTH_MASK
Ë=
MAC_WIDTH_32
)

	)

233 
	#MacIsSdømWidth16
(
macPå
Ë((((macPå)->
sdømC⁄fig
 >> 
MAC_SDRAM_WIDTH_SHIFT
Ë& 
MAC_SDRAM_WIDTH_MASK
Ë=
MAC_SDRAM_WIDTH_16
)

	)

234 
	#MacIsSdømWidth32
(
macPå
Ë((((macPå)->
sdømC⁄fig
 >> 
MAC_SDRAM_WIDTH_SHIFT
Ë& 
MAC_SDRAM_WIDTH_MASK
Ë=
MAC_SDRAM_WIDTH_32
)

	)

236 
	#MacIsSdøm2Width16
(
macPå
Ë((((macPå)->
sdøm2C⁄fig
 >> 
MAC_SDRAM_WIDTH_SHIFT
Ë& 
MAC_SDRAM_WIDTH_MASK
Ë=
MAC_SDRAM_WIDTH_16
)

	)

237 
	#MacIsSdøm2Width32
(
macPå
Ë((((macPå)->
sdøm2C⁄fig
 >> 
MAC_SDRAM_WIDTH_SHIFT
Ë& 
MAC_SDRAM_WIDTH_MASK
Ë=
MAC_SDRAM_WIDTH_32
)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/mem_map.h

35 
	~<π_mm≠.h
>

37 #i‚de‡
MEM_MAP_H


38 
	#MEM_MAP_H


	)

44 
	~"mem_m≠_1fc0.h
"

45 
	~"chù_ªg_m≠.h
"

53 #ifde‡
USE_CACHE


58 #unde‡
MAC_ROM_BASE


59 
	#MAC_ROM_BASE
 (0x9fc00000)

	)

60 
	#MAC_ROM_BASE_NC
 (0xbfc00000)

	)

63 #unde‡
ROM_REMAPPED_BASE


64 
	#ROM_REMAPPED_BASE
 (0x9fc02000)

	)

65 
	#ROM_REMAPPED_BASE_NC
 (0xbfc02000)

	)

68 #unde‡
ISRAM_BOOT_BASE


69 
	#ISRAM_BOOT_BASE
 (0x80200000)

	)

70 
	#ISRAM_BOOT_BASE_NC
 (0xa0200000)

	)

73 #unde‡
ISRAM_REMAPPED_BASE


74 
	#ISRAM_REMAPPED_BASE
 (0x9fc00000)

	)

75 
	#ISRAM_REMAPPED_BASE_NC
 (0xbfc00000)

	)

78 #unde‡
PALMPAK_BASE


79 
	#PALMPAK_BASE
 (
RALINK_SYSCTL_BASE
)

	)

82 #unde‡
MAC_SRAM_BASE


83 
	#MAC_SRAM_BASE
 (0x80000000)

	)

84 
	#MAC_SRAM_BASE_NC
 (0xa0000000)

	)

87 #unde‡
MAC_SDRAM_BASE


88 
	#MAC_SDRAM_BASE
 (0x88000000)

	)

89 
	#MAC_SDRAM_BASE_NC
 (0xa8000000)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/mem_map_1fc0.h

37 #i‚de‡
MEM_MAP_1FC0_H


38 
	#MEM_MAP_1FC0_H


	)

57 
	#MAC_ROM_BASE
 (0x1fc00000)

	)

58 
	#MAC_ROM_SIZE
 (0x00200000Ë

	)

59 
	#MAC_ROM_END
 (
MAC_ROM_BASE
 + 
MAC_ROM_SIZE
)

	)

61 
	#ROM_BASE
 (
MAC_ROM_BASE
)

	)

62 
	#ROM_SIZE
 (0x00200000Ë

	)

63 
	#ROM_END
 (
ROM_BASE
 + 
ROM_SIZE
)

	)

69 
	#ROM_REMAPPED_BASE
 (
ISRAM_REMAPPED_END
)

	)

70 
	#ROM_REMAPPED_SIZE
 (
ROM_SIZE
 - 
ISRAM_SIZE
)

	)

71 
	#ROM_REMAPPED_END
 (
ROM_END
)

	)

74 
	#ROM_BANK_IS_FLASH


	)

78 
	#ISRAM_BOOT_BASE
 (0x00200000Ë

	)

79 
	#ISRAM_SIZE
 (0x00002000Ë

	)

84 
	#ISRAM_BOOT_END
 (
ISRAM_BOOT_BASE
 + 
ISRAM_SIZE
)

	)

89 
	#ISRAM_REMAPPED_BASE
 (
ROM_BASE
)

	)

90 
	#ISRAM_REMAPPED_END
 (
ISRAM_REMAPPED_BASE
 + 
ISRAM_SIZE
)

	)

94 
	#VECTMEM_BOOT_BASE
 (0x00202000Ë

	)

95 
	#VECTMEM_SIZE
 (0x00002000Ë

	)

96 
	#VECTMEM_BOOT_END
 (
VECTMEM_BOOT_BASE
 + 
VECTMEM_SIZE
)

	)

101 
	#VECTMEM_REMAPPED_BASE
 (0x00000000)

	)

102 
	#VECTMEM_REMAPPED_END
 (
VECTMEM_REMAPPED_BASE
 + 
VECTMEM_SIZE
)

	)

107 
	#PALMPAK_BASE
 (0x00300000Ë

	)

108 
	#PALMPAK_SIZE
 (0x00010000Ë

	)

109 
	#PALMPAK_END
 (
PALMPAK_BASE
 + 
PALMPAK_SIZE
)

	)

116 
	#MAC_SRAM_BASE
 (0x00000000)

	)

117 
	#MAC_SRAM_SIZE
 (0x00200000Ë

	)

118 
	#MAC_SRAM_END
 (
MAC_SRAM_BASE
 + 
MAC_SRAM_SIZE
)

	)

120 
	#SRAM_BASE
 
MAC_SRAM_BASE


	)

121 #ifde‡
DEV_BOARD_SRAM_SIZE


125 
	#SRAM_SIZE
 
DEV_BOARD_SRAM_SIZE


	)

127 
	#SRAM_SIZE
 (0x00200000Ë

	)

129 
	#SRAM_END
 (
SRAM_BASE
 + 
SRAM_SIZE
)

	)

133 #ifde‡
USE_SDRAM


134 
	#MAC_SDRAM_BASE
 (0x08000000)

	)

135 
	#MAC_SDRAM_SIZE
 (0x08000000Ë

	)

136 
	#MAC_SDRAM_END
 (
MAC_SDRAM_BASE
 + 
MAC_SDRAM_SIZE
)

	)

138 
	#SDRAM_BASE
 (
MAC_SDRAM_BASE
)

	)

139 
	#SDRAM_SIZE
 (
MAC_SDRAM_SIZE
Ë

	)

140 
	#SDRAM_END
 (
SDRAM_BASE
 + 
SDRAM_SIZE
)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/mem_tst.h

40 #i‚de‡
MEM_TST_H


41 
	#MEM_TST_H


	)

46 
	~"pubdefs.h
"

47 
	~"¥odu˘.h
"

55 
	#MEM_ADDR_WRAP_1_FAILCODE
 (0x1)

	)

56 
	#MEM_ADDR_WRAP_2_FAILCODE
 (0x2)

	)

58 
	#MEM_BAD_WORD_WRITE_READ_FAILCODE
 (0x3)

	)

59 
	#MEM_BAD_BYTE_READ_FAILCODE
 (0x4)

	)

60 
	#MEM_BAD_HALFWORD_READ_1_FAILCODE
 (0x5)

	)

61 
	#MEM_BAD_HALFWORD_READ_2_FAILCODE
 (0x6)

	)

62 
	#MEM_BAD_BYTE_WRITE_FAILCODE
 (0x7)

	)

63 
	#MEM_BAD_HALFWORD_WRITE_FAILCODE
 (0x8)

	)

74 
PUBLIC
 
uöt32
 
GëDeÁu…WøpOff£t
(uöt32 
memSize
);

75 
PUBLIC
 
uöt8
 
CheckMemAddrWøp
(
uöt32
 
Addr1
, uöt32 
Addr2
);

76 
PUBLIC
 
uöt8
 
CheckMemAc˚ss
(
uöt32
 
Addr
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/palmpak_tst.h

39 #i‚de‡
PALMPAK_TST_H


40 
	#PALMPAK_TST_H


	)

45 
	~"lcd.h
"

46 
	~"mem_m≠.h
"

47 
	~"pio.h
"

48 
	~"pubdefs.h
"

49 
	~"sysc.h
"

56 
	#TIMEOUT_REG
 ((
uöt32
)(
PALMPAK_BASE
 + 0xFFFC))

	)

57 
	#timeout
(
uSec
Ë(*((
uöt32
 *Ë
TIMEOUT_REG
)ËuSec;

	)

59 
	#TEST_PASS
 ((
uöt32
)0xCAFECAFE)

	)

60 
	#TEST_FAIL
 ((
uöt32
)0xBADDBEEF)

	)

61 
	#TEST_NA
 ((
uöt32
)0xBAD0CAFE)

	)

62 
	#USE_DATA
 ((
uöt32
)0x000000FF)

	)

66 
	#SëTe°Sèt2
(
vÆ
) \

69 *(
uöt32
 *)(
TEST_RESULT2_REG
Ë(
vÆ
); \

70 } 0)

	)

80 
	#Te°FaûEº‹
(
îrNum
Ë
	`As£π
(
FALSE
, (îrNum))

	)

82 
	#As£π
(
c⁄d
, 
code
) \

84 i‡(!(
c⁄d
)) \

86 
	`As£πFun˘i⁄
–
code
 ); \

88 }

	)

90 
	#Te°Pass
(Ë
	`Te°End
(
TEST_PASS
, "TEST PASS")

	)

91 
	#Te°Faû
(Ë
	`Te°End
(
TEST_FAIL
, "TEST FAIL")

	)

92 
	#Te°NŸAµliˇbÀ
(Ë
	`Te°End
(
TEST_NA
, "TEST NOT APPLICABLE")

	)

102 
PUBLIC
 
As£πFun˘i⁄
–
uöt32
 
subcode
 );

103 
PUBLIC
 
Te°End
–
uöt32
 
ã°°©us
, 
öt8
 * 
msg
 );

104 
PUBLIC
 
SëBlockNumbî
–
uöt32
 
BlockNumbî
 );

105 
PUBLIC
 
SëTe°Numbî
–
uöt32
 
Te°Numbî
 );

106 
PUBLIC
 
uöt8
 
GëBlockNumbî
( );

107 
PUBLIC
 
uöt8
 
GëTe°Numbî
( );

109 
PUBLIC
 
LcdCÀ¨LöeLib
–
lcdRegs
 *
lcdPå
, 
uöt32
 
löe
 );

110 
PUBLIC
 
LcdPuthexLib
–
lcdRegs
 *
lcdPå
, 
öt8
 
hexch¨
 );

111 
PUBLIC
 
LcdPrötSåögLib
–
lcdRegs
 *
lcdPå
, c⁄° 
öt8
 *
the°rög
 );

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/pio.h

41 #i‚de‡
PIO_H


42 
	#PIO_H


	)

47 
	~"pubdefs.h
"

48 
	~"¥odu˘.h
"

55 
	#PIO_ALL_GPIO_MASK
 (0xFFFF)

	)

56 
	#PIO_GPIO_SHIFT
 (0)

	)

58 
	#PIO_ALL_BTN_MASK
 (0x000F)

	)

59 
	#PIO_BTN_SHIFT
 (0)

	)

61 
	#PIO_ALL_LED_MASK
 (0x000F)

	)

62 
	#PIO_LED_SHIFT
 (16)

	)

66 
	#PIO_ALL_GPIO
 (
PIO_ALL_GPIO_MASK
)

	)

67 
	#PIO_GPIO_0
 (0x0001)

	)

68 
	#PIO_GPIO_1
 (0x0002)

	)

69 
	#PIO_GPIO_2
 (0x0004)

	)

70 
	#PIO_GPIO_3
 (0x0008)

	)

71 
	#PIO_GPIO_4
 (0x0010)

	)

72 
	#PIO_GPIO_5
 (0x0020)

	)

73 
	#PIO_GPIO_6
 (0x0040)

	)

74 
	#PIO_GPIO_7
 (0x0080)

	)

75 
	#PIO_GPIO_8
 (0x0100)

	)

76 
	#PIO_GPIO_9
 (0x0200)

	)

77 
	#PIO_GPIO_10
 (0x0400)

	)

78 
	#PIO_GPIO_11
 (0x0800)

	)

79 
	#PIO_GPIO_12
 (0x1000)

	)

80 
	#PIO_GPIO_13
 (0x2000)

	)

81 
	#PIO_GPIO_14
 (0x4000)

	)

82 
	#PIO_GPIO_15
 (0x8000)

	)

85 
	#PIO_ALL_BTN
 (
PIO_ALL_BTN_MASK
)

	)

86 
	#PIO_BTN_0
 (0x0001)

	)

87 
	#PIO_BTN_1
 (0x0002)

	)

88 
	#PIO_BTN_2
 (0x0004)

	)

89 
	#PIO_BTN_3
 (0x0008)

	)

92 
	#PIO_ALL_LED
 (
PIO_ALL_LED_MASK
)

	)

93 
	#PIO_LED_0
 (0x0001)

	)

94 
	#PIO_LED_1
 (0x0002)

	)

95 
	#PIO_LED_2
 (0x0004)

	)

96 
	#PIO_LED_3
 (0x0008)

	)

100 
	#PIO_ALL_BTN_INT_STATUS_MASK
 (
PIO_ALL_BTN_MASK
)

	)

101 
	#PIO_BTN_INT_STATUS_SHIFT
 (
PIO_BTN_SHIFT
)

	)

104 
	#PIO_ALL_BTN_INT_EDGE_MASK
 (
PIO_ALL_BTN_MASK
)

	)

105 
	#PIO_BTN_INT_EDGE_SHIFT
 (
PIO_BTN_SHIFT
)

	)

108 
	#PIO_ALL_BTN_RISE_MASK
 (
PIO_ALL_BTN_MASK
)

	)

109 
	#PIO_BTN_RISE_SHIFT
 (
PIO_BTN_SHIFT
)

	)

112 
	#PIO_ALL_BTN_FALL_MASK
 (
PIO_ALL_BTN_MASK
)

	)

113 
	#PIO_BTN_FALL_SHIFT
 (
PIO_BTN_SHIFT
)

	)

116 
	#PIO_ALL_BTN_DATA_MASK
 (
PIO_ALL_BTN_MASK
)

	)

117 
	#PIO_BTN_DATA_SHIFT
 (
PIO_BTN_SHIFT
)

	)

118 
	#PIO_ALL_LED_DATA_MASK
 (
PIO_ALL_LED_MASK
)

	)

119 
	#PIO_LED_DATA_SHIFT
 (
PIO_LED_SHIFT
)

	)

122 
	#PIO_ALL_BTN_POL_MASK
 (
PIO_ALL_BTN_MASK
)

	)

123 
	#PIO_BTN_POL_SHIFT
 (
PIO_BTN_SHIFT
)

	)

124 
	#PIO_ALL_LED_POL_MASK
 (
PIO_ALL_LED_MASK
)

	)

125 
	#PIO_LED_POL_SHIFT
 (
PIO_LED_SHIFT
)

	)

128 
	#PIO_ALL_LED_USE_DATA_MASK
 (
PIO_ALL_LED_MASK
Ë

	)

129 
	#PIO_LED_USE_DATA_SHIFT
 (0)

	)

130 
	#PIO_ALL_LED_USE_ALT_MASK
 (
PIO_ALL_LED_MASK
Ë

	)

131 
	#PIO_LED_USE_ALT_SHIFT
 (
PIO_LED_SHIFT
)

	)

140 
	spioRegs_t


142 vﬁ©ûê
uöt32
 
	mötSèt
;

143 vﬁ©ûê
uöt32
 
	mötEdge
;

144 vﬁ©ûê
uöt32
 
	mrMask
;

145 vﬁ©ûê
uöt32
 
	mfMask
;

146 vﬁ©ûê
uöt32
 
	mrsvd0
[4];

147 vﬁ©ûê
uöt32
 
	md©a
;

148 vﬁ©ûê
uöt32
 
	mdúe˘i⁄
;

149 vﬁ©ûê
uöt32
 
	mpﬁ¨ôy
;

150 vﬁ©ûê
uöt32
 
	mrsvd1
[5];

151 vﬁ©ûê
uöt32
 
	mbäI¡Sèt
;

152 vﬁ©ûê
uöt32
 
	mbäI¡Edge
;

153 vﬁ©ûê
uöt32
 
	mbäRMask
;

154 vﬁ©ûê
uöt32
 
	mbäFMask
;

155 vﬁ©ûê
uöt32
 
	mrsvd2
[4];

156 vﬁ©ûê
uöt32
 
	md©a2
;

157 vﬁ©ûê
uöt32
 
	mpﬁ¨ôy2
;

158 vﬁ©ûê
uöt32
 
	mÀdCfg
;

159 vﬁ©ûê
uöt32
 
	mrsvd
[33];

160 vﬁ©ûê
uöt32
 
	mbäSë
;

161 } 
	tpioRegs
;

173 
PUBLIC
 
LedTu∫On
 ( 
pioRegs
 *
pioBlk
, 
uöt32
 
ÀdD©a
 );

174 
PUBLIC
 
LedTu∫Off
 ( 
pioRegs
 *
pioBlk
, 
uöt32
 
ÀdD©a
 );

175 
PUBLIC
 
LedTu∫AŒOn
 ( 
pioRegs
 *
pioBlk
 );

176 
PUBLIC
 
LedTu∫AŒOff
 ( 
pioRegs
 *
pioBlk
 );

177 
PUBLIC
 
LedLﬂdD©a
 ( 
pioRegs
 *
pioBlk
, 
uöt32
 
ÀdD©a
 );

205 
	#PioGëI¡Sètus
(
pioBlk
Ë(’ioBlk)->
ötSèt
)

	)

206 
	#BäGëI¡Sètus
(
pioBlk
Ë(’ioBlk)->
bäI¡Sèt
)

	)

232 
	#PioIsI¡
(
pioBlk
,
sig
Ë–(’ioBlk)->
ötSèt
Ë& (sigË)

	)

233 
	#BäIsI¡
(
pioBlk
,
sig
Ë–(’ioBlk)->
bäI¡Sèt
Ë& (sigË)

	)

258 
	#PioCÀ¨I¡
(
pioBlk
,
sig
) \

261 (
pioBlk
)->
ötSèt
 = (
sig
); \

262 } 0)

	)

264 
	#BäCÀ¨I¡
(
pioBlk
,
sig
) \

267 (
pioBlk
)->
bäI¡Sèt
 = (
sig
); \

268 } 0)

	)

292 
	#PioGëI¡EdgeSètus
(
pioBlk
Ë(’ioBlk)->
ötEdge
)

	)

293 
	#BäGëI¡EdgeSètus
(
pioBlk
Ë(’ioBlk)->
bäI¡Edge
)

	)

320 
	#PioIsI¡Edge
(
pioBlk
,
sig
Ë–(’ioBlk)->
ötEdge
Ë& (sigË)

	)

321 
	#BäIsI¡Edge
(
pioBlk
,
sig
Ë–(’ioBlk)->
bäI¡Edge
Ë& (sigË)

	)

347 
	#PioCÀ¨I¡Edge
(
pioBlk
,
sig
) \

350 (
pioBlk
)->
ötEdge
 = (
sig
); \

351 } 0)

	)

353 
	#BäCÀ¨I¡Edge
(
pioBlk
,
sig
) \

356 (
pioBlk
)->
bäI¡Edge
 = (
sig
); \

357 } 0)

	)

381 
	#PioGëRi£Mask
(
pioBlk
) \

382 –(((
pioBlk
)->
rMask
Ë>> 
PIO_GPIO_SHIFT
Ë& 
PIO_ALL_GPIO_MASK
 )

	)

384 
	#BäGëRi£Mask
(
pioBlk
) \

385 –(((
pioBlk
)->
bäRMask
Ë>> 
PIO_BTN_RISE_SHIFT
Ë& 
PIO_ALL_BTN_RISE_MASK
 )

	)

410 
	#PioSëRi£Mask
(
pioBlk
,
d©a
) \

413 (
pioBlk
)->
rMask
 |–((
uöt32
)((
d©a
Ë& 
PIO_ALL_GPIO_MASK
)) << \

414 
PIO_GPIO_SHIFT
 ); \

415 } 0)

	)

417 
	#BäSëRi£Mask
(
pioBlk
,
d©a
) \

420 (
pioBlk
)->
bäRMask
 |–((
uöt32
)((
d©a
Ë& 
PIO_ALL_BTN_RISE_MASK
)) << \

421 
PIO_BTN_RISE_SHIFT
 ); \

422 } 0)

	)

447 
	#PioCÀ¨Ri£Mask
(
pioBlk
,
d©a
) \

450 (
pioBlk
)->
rMask
 &–~((
uöt32
)((
d©a
Ë& 
PIO_ALL_GPIO_MASK
)) << \

451 
PIO_GPIO_SHIFT
 ); \

452 } 0)

	)

454 
	#BäCÀ¨Ri£Mask
(
pioBlk
,
d©a
) \

457 (
pioBlk
)->
bäRMask
 &–~((
uöt32
)((
d©a
Ë& 
PIO_ALL_BTN_RISE_MASK
)) << \

458 
PIO_BTN_RISE_SHIFT
 ); \

459 } 0)

	)

483 
	#PioGëFÆlMask
(
pioBlk
) \

484 –(((
pioBlk
)->
fMask
Ë>> 
PIO_GPIO_SHIFT
Ë& 
PIO_ALL_GPIO_MASK
 )

	)

486 
	#BäGëFÆlMask
(
pioBlk
) \

487 –(((
pioBlk
)->
bäFMask
Ë>> 
PIO_BTN_FALL_SHIFT
Ë& 
PIO_ALL_BTN_FALL_MASK
 )

	)

512 
	#PioSëFÆlMask
(
pioBlk
,
d©a
) \

515 (
pioBlk
)->
fMask
 |–((
uöt32
)((
d©a
Ë& 
PIO_ALL_GPIO_MASK
)) << \

516 
PIO_GPIO_SHIFT
 ); \

517 } 0)

	)

519 
	#BäSëFÆlMask
(
pioBlk
,
d©a
) \

522 (
pioBlk
)->
bäFMask
 |–((
uöt32
)((
d©a
Ë& 
PIO_ALL_BTN_FALL_MASK
)) << \

523 
PIO_BTN_FALL_SHIFT
 ); \

524 } 0)

	)

549 
	#PioCÀ¨FÆlMask
(
pioBlk
,
d©a
) \

552 (
pioBlk
)->
fMask
 &–~((
uöt32
)((
d©a
Ë& 
PIO_ALL_GPIO_MASK
)) << \

553 
PIO_GPIO_SHIFT
 ); \

554 } 0)

	)

556 
	#BäCÀ¨FÆlMask
(
pioBlk
,
d©a
) \

559 (
pioBlk
)->
bäFMask
 &–~((
uöt32
)((
d©a
Ë& 
PIO_ALL_BTN_FALL_MASK
)) << \

560 
PIO_BTN_FALL_SHIFT
 ); \

561 } 0)

	)

587 
	#PioGëD©a
(
pioBlk
) \

588 –(((
pioBlk
)->
d©a
Ë>> 
PIO_GPIO_SHIFT
Ë& 
PIO_ALL_GPIO_MASK
 )

	)

590 
	#BäGëD©a
(
pioBlk
) \

591 –(((
pioBlk
)->
d©a2
Ë>> 
PIO_BTN_DATA_SHIFT
Ë& 
PIO_ALL_BTN_DATA_MASK
 )

	)

593 
	#LedGëD©a
(
pioBlk
) \

594 –(((
pioBlk
)->
d©a2
Ë>> 
PIO_LED_DATA_SHIFT
Ë& 
PIO_ALL_LED_DATA_MASK
 )

	)

620 
	#PioSëD©a
(
pioBlk
,
bôs
) \

623 (
pioBlk
)->
d©a
 |–((
uöt32
)(
bôs
Ë& 
PIO_ALL_GPIO_MASK
) << \

624 
PIO_GPIO_SHIFT
 ); \

625 } 0)

	)

627 
	#LedSëD©a
(
pioBlk
,
bôs
) \

630 (
pioBlk
)->
d©a2
 |–((
uöt32
)(
bôs
Ë& 
PIO_ALL_LED_MASK
) << \

631 
PIO_LED_SHIFT
 ); \

632 } 0)

	)

657 
	#PioCÀ¨D©a
(
pioBlk
,
bôs
) \

660 (
pioBlk
)->
d©a
 &–~((
uöt32
)(
bôs
Ë& 
PIO_ALL_GPIO_MASK
) << \

661 
PIO_GPIO_SHIFT
 ); \

662 } 0)

	)

664 
	#LedCÀ¨D©a
(
pioBlk
,
bôs
) \

667 (
pioBlk
)->
d©a2
 &–~(((
uöt32
)(
bôs
Ë& 
PIO_ALL_LED_MASK
) << \

668 
PIO_LED_SHIFT
) ); \

669 } 0)

	)

694 
	#PioPutD©a
(
pioBlk
,
bôs
) \

697 (
pioBlk
)->
d©a
 = ( ((
uöt32
)(
bôs
Ë& 
PIO_ALL_GPIO_MASK
) << \

698 
PIO_GPIO_SHIFT
 ); \

699 } 0)

	)

701 
	#LedPutD©a
(
pioBlk
,
bôs
) \

704 (
pioBlk
)->
d©a2
 &~(
PIO_ALL_LED_MASK
 << 
PIO_LED_SHIFT
); \

705 (
pioBlk
)->
d©a2
 |((
bôs
Ë& 
PIO_ALL_LED_MASK
Ë<< 
PIO_LED_SHIFT
; \

706 } 0)

	)

730 
	#BäPutD©a
(
pioBlk
,
bôs
) \

733 (
pioBlk
)->
bäSë
 = ((
bôs
Ë& 
PIO_ALL_BTN_DATA_MASK
Ë<< 
PIO_BTN_SHIFT
; \

734 } 0)

	)

755 
	#PioGëDú
(
pioBlk
) \

756 –(((
pioBlk
)->
dúe˘i⁄
Ë>> 
PIO_GPIO_SHIFT
Ë& 
PIO_ALL_GPIO_MASK
 )

	)

778 
	#PioSëDúOuçut
(
pioBlk
,
dú
) \

781 (
pioBlk
)->
dúe˘i⁄
 |–((
uöt32
)(
dú
Ë& 
PIO_ALL_GPIO_MASK
) << \

782 
PIO_GPIO_SHIFT
 ); \

783 } 0)

	)

805 
	#PioSëDúI≈ut
(
pioBlk
,
dú
) \

808 (
pioBlk
)->
dúe˘i⁄
 &–~((
uöt32
)(
dú
Ë& 
PIO_ALL_GPIO_MASK
) << \

809 
PIO_GPIO_SHIFT
 ); \

810 } 0)

	)

836 
	#PioGëPﬁ
(
pioBlk
) \

837 –(((
pioBlk
)->
pﬁ¨ôy
Ë>> 
PIO_GPIO_SHIFT
Ë& 
PIO_ALL_GPIO_MASK
 )

	)

839 
	#BäGëPﬁ
(
pioBlk
) \

840 –(((
pioBlk
)->
pﬁ¨ôy2
Ë>> 
PIO_BTN_POL_SHIFT
Ë& 
PIO_ALL_BTN_POL_MASK
 )

	)

842 
	#LedGëPﬁ
(
pioBlk
) \

843 –(((
pioBlk
)->
pﬁ¨ôy2
Ë>> 
PIO_LED_POL_SHIFT
Ë& 
PIO_ALL_LED_POL_MASK
 )

	)

871 
	#PioSëPﬁ
(
pioBlk
,
pﬁ
) \

874 (
pioBlk
)->
pﬁ¨ôy
 |–((
uöt32
)((
pﬁ
Ë& 
PIO_ALL_GPIO_MASK
)) << \

875 
PIO_GPIO_SHIFT
 ); \

876 } 0)

	)

878 
	#BäSëPﬁ
(
pioBlk
,
pﬁ
) \

881 (
pioBlk
)->
pﬁ¨ôy2
 |–((
uöt32
)((
pﬁ
Ë& 
PIO_ALL_BTN_POL_MASK
)) << \

882 
PIO_BTN_POL_SHIFT
 ); \

883 } 0)

	)

885 
	#LedSëPﬁ
(
pioBlk
,
pﬁ
) \

888 (
pioBlk
)->
pﬁ¨ôy2
 |–((
uöt32
)((
pﬁ
Ë& 
PIO_ALL_LED_POL_MASK
)) << \

889 
PIO_LED_POL_SHIFT
 ); \

890 } 0)

	)

917 
	#PioCÀ¨Pﬁ
(
pioBlk
,
pﬁ
) \

920 (
pioBlk
)->
pﬁ¨ôy
 &–~((
uöt32
)((
pﬁ
Ë& 
PIO_ALL_GPIO_MASK
)) << \

921 
PIO_GPIO_SHIFT
 ); \

922 } 0)

	)

924 
	#BäCÀ¨Pﬁ
(
pioBlk
,
pﬁ
) \

927 (
pioBlk
)->
pﬁ¨ôy2
 &–~((
uöt32
)((
pﬁ
Ë& 
PIO_ALL_BTN_POL_MASK
)) << \

928 
PIO_BTN_POL_SHIFT
 ); \

929 } 0)

	)

931 
	#LedCÀ¨Pﬁ
(
pioBlk
,
pﬁ
) \

934 (
pioBlk
)->
pﬁ¨ôy2
 &–~((
uöt32
)((
pﬁ
Ë& 
PIO_ALL_LED_POL_MASK
)) << \

935 
PIO_LED_POL_SHIFT
 ); \

936 } 0)

	)

959 
	#LedGëD©Cfg
(
pioBlk
) \

960 –((
pioBlk
)->
ÀdCfg
 >> 
PIO_LED_USE_DATA_SHIFT
Ë& 
PIO_ALL_LED_USE_DATA_MASK
 )

	)

984 
	#LedSëD©Cfg
(
pioBlk
,
d©Cfg
) \

985 (
pioBlk
)->
ÀdCfg
 |((
uöt32
)((
d©Cfg
Ë& 
PIO_ALL_LED_USE_DATA_MASK
) << \

986 
PIO_LED_USE_DATA_SHIFT
);

	)

1009 
	#LedCÀ¨D©Cfg
(
pioBlk
,
d©Cfg
) \

1010 (
pioBlk
)->
ÀdCfg
 &~(((
d©Cfg
Ë& 
PIO_ALL_LED_USE_DAT_MASK
) << \

1011 
PIO_LED_USE_DAT_SHIFT
);

	)

1034 
	#LedGëA…Cfg
(
pioBlk
) \

1035 –((
pioBlk
)->
ÀdCfg
 >> 
PIO_LED_USE_ALT_SHIFT
Ë& 
PIO_ALL_LED_USE_ALT_MASK
 )

	)

1059 
	#LedSëA…Cfg
(
pioBlk
,
ÆtCfg
) \

1062 (
pioBlk
)->
ÀdCfg
 &~(
PIO_ALL_LED_USE_ALT_MASK
 << 
PIO_LED_USE_ALT_SHIFT
);\

1063 (
pioBlk
)->
ÀdCfg
 |(
uöt32
)(((
ÆtCfg
Ë& 
PIO_ALL_LED_USE_ALT_MASK
)) << \

1064 
PIO_LED_USE_ALT_SHIFT
; \

1065 } 0)

	)

1089 
	#LedCÀ¨A…Cfg
(
pioBlk
,
ÆtCfg
) \

1090 (
pioBlk
)->
ÀdCfg
 &~(((
ÆtCfg
Ë& 
PIO_ALL_LED_USE_ALT_MASK
) << \

1091 
PIO_LED_USE_ALT_SHIFT
);

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/product.h

44 #i‚de‡
PRODUCT_H


45 
	#PRODUCT_H


	)

47 
	~<c⁄fig.h
>

49 #i‡
deföed
(
CFG_RUN_CODE_IN_RAM
)

50 
	#CODE_IN_SDRAM


	)

54 
	#USE_DEVBOARD
 1

	)

55 
	#USE_ROM32
 1

	)

57 
	#USE_SDRAM
 1

	)

58 
	#USE_SDRAM32
 1

	)

59 
	#USE_ESRAM
 1

	)

60 
	#USE_BUFFERED_MAC
 1

	)

61 
	#USE_UART_FIFO
 1

	)

62 
	#USE_CACHE
 1

	)

68 
	#REMAPPED_VECTOR_MEM
 1

	)

72 
	#SRAM32
 1

	)

73 
	#SDRAM32
 1

	)

74 
	#SDRAM_MEM_WIDTH
 32

	)

81 
	~"mem_m≠.h
"

82 
	~"chù_ªg_m≠.h
"

109 
	#XTAL_KHZ
 (16667Ë

	)

115 #i‚de‡
XTAL_KHZ


124 #i‡!
deföed
(
CFG_RUN_CODE_IN_RAM
)

125 
	#USE_DLL_INIT
 1

	)

126 
	#USE_PLL_INIT
 1

	)

140 
	#DLL_INVERT
 (0Ë

	)

141 
	#DLL_PHASE
 (
DLL_PHASE_270
Ë

	)

153 #i‚de‡
USE_PLL_INIT


154 #ifde‡
USE_DLL_INIT


155 
	#SYS_CLK_KHZ
 (
XTAL_KHZ
 / 2)

	)

157 
	#SYS_CLK_KHZ
 (
XTAL_KHZ
)

	)

163 #i‡(
XTAL_KHZ
 == 16667)

171 
	#SYS_CLK_KHZ
 (133336Ë

	)

173 #i‡(
XTAL_KHZ
 == 33330)

179 #i‡(
XTAL_KHZ
 == 14746)

192 #i‡(
SYS_CLK_KHZ
 =(
XTAL_KHZ
 / 2))

193 
	#PLL_MULT
 (1)

	)

194 
	#PLL_DIV
 (2)

	)

196 #i‡(
SYS_CLK_KHZ
 =(
XTAL_KHZ
 * 1))

197 
	#PLL_MULT
 (1)

	)

198 
	#PLL_DIV
 (1)

	)

200 #i‡(
SYS_CLK_KHZ
 =(
XTAL_KHZ
 * 2))

201 
	#PLL_MULT
 (2)

	)

202 
	#PLL_DIV
 (1)

	)

204 #i‡(
SYS_CLK_KHZ
 =(
XTAL_KHZ
 * 3))

205 
	#PLL_MULT
 (3)

	)

206 
	#PLL_DIV
 (1)

	)

208 #i‡(
SYS_CLK_KHZ
 =(
XTAL_KHZ
 * 4))

209 
	#PLL_MULT
 (4)

	)

210 
	#PLL_DIV
 (1)

	)

212 #i‡(
SYS_CLK_KHZ
 =(
XTAL_KHZ
 * 5))

213 
	#PLL_MULT
 (5)

	)

214 
	#PLL_DIV
 (1)

	)

216 #i‡(
SYS_CLK_KHZ
 =(
XTAL_KHZ
 * 6))

217 
	#PLL_MULT
 (6)

	)

218 
	#PLL_DIV
 (1)

	)

220 #i‡(
SYS_CLK_KHZ
 =(
XTAL_KHZ
 * 7))

221 
	#PLL_MULT
 (7)

	)

222 
	#PLL_DIV
 (1)

	)

224 #i‡(
SYS_CLK_KHZ
 =(
XTAL_KHZ
 * 8))

225 
	#PLL_MULT
 (8)

	)

226 
	#PLL_DIV
 (1)

	)

228 #i‡(
SYS_CLK_KHZ
 =(
XTAL_KHZ
 * 9))

229 
	#PLL_MULT
 (9)

	)

230 
	#PLL_DIV
 (1)

	)

247 #i‚de‡
SYS_CLK_KHZ


253 
	#SYS_CLK_MHZ
 (
SYS_CLK_KHZ
 / 1000)

	)

258 
	#AUD_SYS_CLK_HZ
 (11289600)

	)

261 
	#SYS_CLK_NS
 (1000 / 
SYS_CLK_MHZ
)

	)

269 
	#MVISTA
 1

	)

271 #i‡
PARALOGOS
 || 
HARDHAT
 || 
MVISTA


295 
	#ENET_MAC_ADDRNUM
 0xA

	)

302 
	#KERNEL_ENTRY_ADDR
 (0x8a1b6040)

303 

	)

305 #ifde‡
BUILD_BL_PROG


306 
	#LINUX_BIN_BASE
 (0x9fc40000)

307 
	#MAX_LINUX_BIN_SIZE
 (0x001c0000)

	)

311 
	#LINUX_BIN_BASE
 (0x9fc20000)

312 
	#MAX_LINUX_BIN_SIZE
 (0x00200000)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/pubdefs.h

36 #i‚de‡
PUBDEFS_H


37 
	#PUBDEFS_H


	)

43 
	~"compûî.h
"

50 
	töt8
;

51 
	töt16
;

52 
	töt32
;

54 
	tuöt8
;

55 
	tuöt16
;

56 
	tuöt32
;

57 vﬁ©ûê
	tasi¸eg
;

59 
	tboﬁ
;

61 (*
	tvoidFuncPå
)();

63 
	#PUBLIC
 

	)

64 
	#PRIVATE
 

	)

65 
	#FAST
 

	)

66 
	#REG
 

	)

68 #i‚de‡
TRUE


69 
	#TRUE
 (1)

	)

70 
	#FALSE
 (0)

	)

73 
	#MIN
–
x
, 
y
 ) ( (xË< (yË? (xË: (yË)

	)

74 
	#MAX
–
x
, 
y
 ) ( (xË> (yË? (xË: (yË)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/regdef.h

39 #i‚de‡
REGDEF_H


40 
	#REGDEF_H


	)

52 
	#zîo
 
$0


	)

53 
	#AT
 
$1


	)

54 
	#v0
 
$2


	)

55 
	#v1
 
$3


	)

56 
	#a0
 
$4


	)

57 
	#a1
 
$5


	)

58 
	#a2
 
$6


	)

59 
	#a3
 
$7


	)

60 
	#t0
 
$8


	)

61 
	#t1
 
$9


	)

62 
	#t2
 
$10


	)

63 
	#t3
 
$11


	)

64 
	#t4
 
$12


	)

65 
	#t5
 
$13


	)

66 
	#t6
 
$14


	)

67 
	#t7
 
$15


	)

68 
	#s0
 
$16


	)

69 
	#s1
 
$17


	)

70 
	#s2
 
$18


	)

71 
	#s3
 
$19


	)

72 
	#s4
 
$20


	)

73 
	#s5
 
$21


	)

74 
	#s6
 
$22


	)

75 
	#s7
 
$23


	)

76 
	#t8
 
$24


	)

77 
	#t9
 
$25


	)

78 
	#k0
 
$26


	)

79 
	#k1
 
$27


	)

80 
	#gp
 
$gp


	)

81 
	#•
 
$•


	)

82 
	#s8
 
$30


	)

83 
	#Â
 
$30


	)

84 
	#ø
 
$31


	)

85 
	#pc
 
$pc


	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/sysc.h

39 #i‚de‡
SYSC_H


40 
	#SYSC_H


	)

46 
	~"¥odu˘.h
"

47 
	~"mem_m≠.h
"

54 
	#CPU_CONFIG_REG
 (
SYSC_BASE
 + 0x0010)

	)

55 
	#TEST_RESULT_REG
 (
SYSC_BASE
 + 0x0018)

	)

56 
	#TEST_RESULT2_REG
 (
SYSC_BASE
 + 0x001C)

	)

57 
	#RESET_STATUS_REG
 (
SYSC_BASE
 + 0x0038)

	)

58 
	#DLL_CONFIG_REG
 (
SYSC_BASE
 + 0x004C)

	)

61 
	#TEST_RESULT2_NMI
 (0xC0000001)

	)

65 
	#CHIPNAME0
 (0x70617247Ë

	)

66 
	#CHIPNAME1
 (0x65746968Ë

	)

70 
	#CHIP_REV_MASK
 (0xFFFF)

	)

71 
	#CHIP_REV_SHIFT
 (0)

	)

72 
	#CHIP_NUM_MASK
 (0xFFFF)

	)

73 
	#CHIP_NUM_SHIFT
 (16)

	)

75 
	#CHIP_REV
 (0x0000)

	)

76 
	#CHIP_NUM
 (0x0000)

	)

77 
	#CHIP_ID
 ((
CHIP_NUM
 << 
CHIP_NUM_SHIFT
Ë| (
CHIP_REV
 << 
CHIP_REV_SHIFT
))

	)

81 
	#ALL_REMAP_BITS_MASK
 (0x001F)

	)

82 
	#REMAP_ROM
 (0x0001)

	)

83 
	#REMAP_VECTMEM
 (0x0002Ë

	)

84 
	#REMAP_SDRAM2VEC
 (0x0004Ë

	)

85 
	#REMAP_SDRAM2ROM
 (0x0008Ë

	)

86 
	#REMAP_SRAM
 (0x0010Ë

	)

87 
	#ALL_CPU_ERRORS
 (0x0F80)

	)

88 
	#CPU_DMA_ERROR
 (0x0080)

	)

89 
	#CPU_DATA_ADDR_ERROR
 (0x0100)

	)

90 
	#CPU_INST_ADDR_ERROR
 (0x0200)

	)

91 
	#CPU_DATA_ALIGN_ERROR
 (0x0400)

	)

92 
	#CPU_INST_ALIGN_ERROR
 (0x0800)

	)

93 
	#PERIPH_8_AND_16_WR_ENA
 (0x1000Ë

	)

94 
	#LCD_MUX_ENA
 (0x2000Ë

	)

95 
	#POST_WRITE_DIS
 (0x4000Ë

	)

97 
	#CPU_DATA_ERRORS
 (
CPU_DATA_ADDR_ERROR
 | 
CPU_DATA_ALIGN_ERROR
)

	)

98 
	#CPU_INST_ERRORS
 (
CPU_INST_ADDR_ERROR
 | 
CPU_INST_ALIGN_ERROR
)

	)

101 
	#BAD_DATA_INFO_MASK
 (0x7F)

	)

102 
	#BAD_DATA_BYTESEL_MASK
 (0x78)

	)

103 
	#BAD_DATA_BYTESEL_SHIFT
 (3)

	)

104 
	#BAD_DATA_DIR_MASK
 (0x04)

	)

105 
	#BAD_DATA_SIZE_MASK
 (0x03)

	)

107 
	#BAD_DATA_READ
 (0x00)

	)

108 
	#BAD_DATA_WRITE
 (0x04)

	)

110 
	#BAD_DATA_TYPE_MASK
 (0x07Ë

	)

111 
	#BAD_BYTE_READ
 (0x00)

	)

112 
	#BAD_WORD_READ
 (0x01)

	)

113 
	#BAD_DWORD_READ
 (0x02)

	)

114 
	#BAD_BYTE_WRITE
 (0x04)

	)

115 
	#BAD_WORD_WRITE
 (0x05)

	)

116 
	#BAD_DWORD_WRITE
 (0x06)

	)

119 
	#BAD_INST_INFO_MASK
 (0x3F)

	)

120 
	#BAD_INST_BYTESEL_MASK
 (0x3C)

	)

121 
	#BAD_INST_BYTESEL_SHIFT
 (2)

	)

122 
	#BAD_INST_SIZE_MASK
 (0x03)

	)

124 
	#BAD_BYTE_INST
 (0x00)

	)

125 
	#BAD_WORD_INST
 (0x01)

	)

126 
	#BAD_DWORD_INST
 (0x02)

	)

129 
	#SYS_SLEEP_ENABLE
 (0x1)

	)

130 
	#CPU_SLEEP_ENABLE
 (0x2)

	)

133 
	#RESET_SYSC
 (0x00000001)

	)

134 
	#RESET_TMR
 (0x00000002)

	)

135 
	#RESET_INTC
 (0x00000004)

	)

136 
	#RESET_MAC
 (0x00000008)

	)

137 
	#RESET_CPU
 (0x00000010)

	)

138 
	#RESET_UART
 (0x00000020)

	)

139 
	#RESET_PIO
 (0x00000040)

	)

140 
	#RESET_DMA
 (0x00000080)

	)

141 
	#RESET_LCD
 (0x00000100)

	)

142 
	#RESET_I2C
 (0x00000200)

	)

143 
	#RESET_RTC
 (0x00000400)

	)

144 
	#RESET_SPI
 (0x00000800)

	)

145 
	#RESET_UARTLITE
 (0x00001000)

	)

146 
	#RESET_AUX0
 (0x00010000)

	)

147 
	#RESET_AUX1
 (0x00020000)

	)

148 
	#RESET_AUX2
 (0x00040000)

	)

149 
	#RESET_AUX3
 (0x00080000)

	)

150 
	#RESET_AUX4
 (0x00100000)

	)

151 
	#RESET_AUX5
 (0x00200000)

	)

152 
	#RESET_AUX6
 (0x00400000)

	)

153 
	#RESET_AUX7
 (0x00800000)

	)

154 
	#RESET_AUX8
 (0x01000000)

	)

155 
	#RESET_AUX9
 (0x02000000)

	)

156 
	#RESET_AUX10
 (0x04000000)

	)

159 
	#POR_RESET_STATUS
 (0)

	)

160 
	#ALL_RESETS
 (0xF)

	)

161 
	#EXT_PIN_RESET
 (0x1)

	)

162 
	#WATCHDOG_RESET
 (0x2)

	)

163 
	#SW_SYSTEM_RESET
 (0x4)

	)

164 
	#SW_CPU_RESET
 (0x8)

	)

167 
	#PLL_BYPASS
 (0x00000001)

	)

168 
	#PLL_ENABLE
 (0x00000002)

	)

169 
	#PLL_RESET
 (0x00000004)

	)

172 
	#PLL_REFCLK_MDIV_MASK
 (0xFF)

	)

173 
	#PLL_REFCLK_MDIV_SHIFT
 (0)

	)

174 
	#PLL_FEEDBACK_NDIV_MASK
 (0xFF)

	)

175 
	#PLL_FEEDBACK_NDIV_SHIFT
 (8)

	)

178 
	#PLL_LOCKED
 (0x00000001)

	)

181 
	#DLL_PHASE_MASK
 (0x3)

	)

182 
	#DLL_PHASE_SHIFT
 (0)

	)

183 
	#DLL_INVERT_SYSCLK
 (0x00000004)

	)

184 
	#DLL_ENABLE
 (0x00000008)

	)

186 
	#DLL_PHASE_0
 (0x0)

	)

187 
	#DLL_PHASE_90
 (0x1)

	)

188 
	#DLL_PHASE_180
 (0x2)

	)

189 
	#DLL_PHASE_270
 (0x3)

	)

193 
	#DLL_LOCKED
 (0x00000001)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/timer.h

40 #i‚de‡
TIMER_H


41 
	#TIMER_H


	)

47 
	~"pubdefs.h
"

48 
	~"¥odu˘.h
"

56 
	#TMR_STATUS_REG
 (
TMR_BASE
)

	)

59 
	#TMR_INT
 (0x0001)

	)

60 
	#WD_INT
 (0x0002)

	)

61 
	#TMR_INTS
 (0x0003)

	)

62 
	#TMR_RESET
 (0x0010)

	)

63 
	#WD_RESET
 (0x0020)

	)

67 
	#TMR_SCALE_MASK
 (0xf)

	)

68 
	#TMR_NUM_SCALES
 (0x10)

	)

70 
	#TMR_SCALE_DN_0
 (0x0000)

	)

71 
	#TMR_SCALE_DN_4
 (0x0001)

	)

72 
	#TMR_SCALE_DN_8
 (0x0002)

	)

73 
	#TMR_SCALE_DN_16
 (0x0003)

	)

74 
	#TMR_SCALE_DN_32
 (0x0004)

	)

75 
	#TMR_SCALE_DN_64
 (0x0005)

	)

76 
	#TMR_SCALE_DN_128
 (0x0006)

	)

77 
	#TMR_SCALE_DN_256
 (0x0007)

	)

79 
	#TMR_MODE_SHIFT
 (4)

	)

80 
	#TMR_MODE_MASK
 (0x3 << 
TMR_MODE_SHIFT
)

	)

82 
	#TMR_FREE_RUN_MODE
 (0x00)

	)

83 
	#TMR_PERIODIC_MODE
 (0x01 << 
TMR_MODE_SHIFT
)

	)

84 
	#TMR_TIME_OUT_MODE
 (0x02 << 
TMR_MODE_SHIFT
Ë

	)

85 
	#TMR_WATCHDOG_MODE
 (0x03 << 
TMR_MODE_SHIFT
Ë

	)

87 
	#TMR_ENABLE
 (0x0080)

	)

88 
	#TMR_DISABLE
 (0x0000)

	)

89 
	#TMR_MAX_CNT
 (0xffff)

	)

92 
	#TMR_BLK_TMR0
 (0)

	)

93 
	#TMR_BLK_WDOG
 (1)

	)

100 
	stmrRegs_t


102 vﬁ©ûê
uöt32
 
	mlﬂdVÆ
;

103 vﬁ©ûê
uöt32
 
	mcou¡î
;

104 vﬁ©ûê
uöt32
 
	mc⁄åﬁ
;

105 
uöt32
 
	mRe£rved0
;

106 } 
	ttmrRegs
;

109 
	stmrBlkRegs_t


111 vﬁ©ûê
uöt32
 
	m°©us
;

112 
uöt32
 
	mRe£rved1
[3];

113 
tmrRegs
 
	mtimî
[2];

114 } 
	ttmrBlkRegs
;

116 
	etmrMode_t


118 
	mFªeRu¬ög
,

119 
	mPîiodic
,

120 
	mTimeOut
,

121 
	mW©chDog


122 } 
	ttmrMode
;

124 
	etmrClkFªq_t


126 
	mSysClk
,

127 
	mSysClkDiv4
,

128 
	mSysClkDiv8
,

129 
	mSysClkDiv16
,

130 
	mSysClkDiv32
,

131 
	mSysClkDiv64
,

132 
	mSysClkDiv128
,

133 
	mSysClkDiv256
,

134 
	mSysClkDiv512
,

135 
	mSysClkDiv1k
,

136 
	mSysClkDiv2k
,

137 
	mSysClkDiv4k
,

138 
	mSysClkDiv8k
,

139 
	mSysClkDiv16k
,

140 
	mSysClkDiv32k
,

141 
	mSysClkDiv64k
,

142 
	mMaxSysClkDivVÆ


143 } 
	ttmrClkFªq
;

153 
PUBLIC
 
TmrSëDividî
 ( 
tmrBlkRegs
 *
tPå
, 
timîNum
, 
tmrClkFªq
 
‰eq
 );

154 
PUBLIC
 
TmrSëMode
 ( 
tmrBlkRegs
 *
tPå
, 
timîNum
, 
tmrMode
 
mode
 );

155 
PUBLIC
 
TmrDñay_us
 ( 
tmrBlkRegs
 *
tPå
, 
timîNum
, 
uöt32
 
mi¸o£cs
 );

157 
PUBLIC
 
uöt32
 
TmrGëMu…
 ( 
tmrClkFªq
 
‰eq
 );

183 
	#TmrE«bÀ
(
tPå
,
timîNum
Ëdÿ{ÅPå->
timî
[timîNum].
c⁄åﬁ
 |(
uöt32
)
TMR_ENABLE
; } 0)

	)

207 
	#TmrDißbÀ
(
tPå
,
timîNum
Ëdÿ{ÅPå->
timî
[timîNum].
c⁄åﬁ
 &~((
uöt32
)
TMR_ENABLE
); } 0)

	)

234 
	#TmrLﬂd
(
tPå
,
timîNum
,
vÆ
Ëdÿ{ÅPå->
timî
[timîNum].
lﬂdVÆ
 = vÆ; } 0)

	)

259 
	#TmrRe£t
(
tPå
,
timîNum
Ëdÿ{ i‡—imîNum==
TMR_BLK_TMR0
ËtPå->
°©us
|=
TMR_RESET
; i‡—imîNum==
TMR_BLK_WDOG
ËtPå->°©us|=
WD_RESET
; } 0)

	)

283 
	#TmrIsE«bÀd
(
tPå
,
timîNum
Ë–(
boﬁ
ËtPå->
timî
[timîNum].
c⁄åﬁ
 & 
TMR_ENABLE
 )

	)

309 
	#TmrIsI¡
(
tPå
,
timîNum
Ë–(
boﬁ
Ë(—På->
°©us
 & (—imîNum==
TMR_BLK_TMR0
)?
TMR_INT
:
WD_INT
ËË? 
TRUE
 : 
FALSE
Ë)

	)

333 
	#TmrCÀ¨I¡
(
tPå
,
timîNum
Ëdÿ{ i‡—imîNum==
TMR_BLK_TMR0
ËtPå->
°©us
|=
TMR_INT
; i‡—imîNum==
TMR_BLK_WDOG
ËtPå->°©us|=
WD_INT
; } 0)

	)

354 
	#TmrRódCou¡
(
tPå
,
timîNum
Ë–tPå->
timî
[timîNum].
cou¡î
 )

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/uart.h

41 #i‚de‡
UART_H


42 
	#UART_H


	)

47 
	~"pubdefs.h
"

48 
	~"¥odu˘.h
"

56 
	#UART_DATA_AVAIL_ID_INT
 (0x01)

	)

57 
	#UART_TX_BUF_EMPTY_ID_INT
 (0x02)

	)

58 
	#UART_LINE_ID_INT
 (0x04)

	)

59 
	#UART_MODEM_ID_INT
 (0x08)

	)

61 
	#UART_INT_MASK
 (0x000F)

	)

64 
	#UART_INT_PENDING
 (0x01)

	)

65 
	#UART_ID_MASK
 (0x0F)

	)

66 
	#UART_FIFOS_ENABLED_MASK
 (0xC0)

	)

68 
	#UART_NO_ID
 (0x01Ë

	)

69 
	#UART_LINE_STAT_ID
 (0x06Ë

	)

70 
	#UART_RX_DATA_AVAIL_ID
 (0x04Ë

	)

71 
	#UART_CHAR_TIMEOUT_ID
 (0x0CË

	)

72 
	#UART_TX_BUF_EMPTY_ID
 (0x02Ë

	)

73 
	#UART_MODEM_STAT_ID
 (0x00Ë

	)

75 
	#UART_FIFOS_NONE
 (0x00Ë

	)

76 
	#UART_FIFOS_UNUSABLE
 (0x80Ë

	)

77 
	#UART_FIFOS_ENABLED
 (0xC0)

	)

80 
	#UART_FIFO_ENABLE
 (0x01)

	)

81 
	#UART_RX_FIFO_RESET
 (0x02)

	)

82 
	#UART_TX_FIFO_RESET
 (0x04)

	)

83 
	#UART_DMA_ENABLE
 (0x08)

	)

85 
	#UART_TX_BUF_TRIG_SHIFT
 (4)

	)

86 
	#UART_TX_BUF_TRIG_MASK
 (0x3 << 
UART_TX_BUF_TRIG_SHIFT
)

	)

87 
	#UART_TX_TRIG_AT_0
 (0 << 
UART_TX_BUF_TRIG_SHIFT
)

	)

88 
	#UART_TX_TRIG_AT_4
 (1 << 
UART_TX_BUF_TRIG_SHIFT
)

	)

89 
	#UART_TX_TRIG_AT_8
 (2 << 
UART_TX_BUF_TRIG_SHIFT
)

	)

90 
	#UART_TX_TRIG_AT_12
 (3 << 
UART_TX_BUF_TRIG_SHIFT
)

	)

92 
	#UART_RX_BUF_TRIG_SHIFT
 (6)

	)

93 
	#UART_RX_BUF_TRIG_MASK
 (0x3 << 
UART_RX_BUF_TRIG_SHIFT
)

	)

94 
	#UART_RX_TRIG_AT_1
 (0 << 
UART_RX_BUF_TRIG_SHIFT
)

	)

95 
	#UART_RX_TRIG_AT_4
 (1 << 
UART_RX_BUF_TRIG_SHIFT
)

	)

96 
	#UART_RX_TRIG_AT_8
 (2 << 
UART_RX_BUF_TRIG_SHIFT
)

	)

97 
	#UART_RX_TRIG_AT_14
 (3 << 
UART_RX_BUF_TRIG_SHIFT
)

	)

100 
	#UART_DATA_BIT_MASK
 (0x03)

	)

101 
	#UART_DATA_BIT_5
 (0x00)

	)

102 
	#UART_DATA_BIT_6
 (0x01)

	)

103 
	#UART_DATA_BIT_7
 (0x02)

	)

104 
	#UART_DATA_BIT_8
 (0x03)

	)

105 
	#UART_STOP_BITS_2
 (0x04Ë

	)

106 
	#UART_PARITY_ENABLE
 (0x08)

	)

107 
	#UART_EVEN_PARITY
 (0x10)

	)

108 
	#UART_FORCE_PARITY
 (0x20)

	)

109 
	#UART_FORCE_BREAK
 (0x40)

	)

112 
	#UART_DTR_SIGNAL
 (0x01)

	)

113 
	#UART_RTS_SIGNAL
 (0x02)

	)

114 
	#UART_OUT1_SIGNAL
 (0x04)

	)

115 
	#UART_OUT2_SIGNAL
 (0x08)

	)

116 
	#UART_LOOP_MODE
 (0x10)

	)

119 
	#UART_DATA_READY
 (0x01)

	)

120 
	#UART_OVERRUN_ERR
 (0x02)

	)

121 
	#UART_PARITY_ERR
 (0x04)

	)

122 
	#UART_FRAMING_ERR
 (0x08)

	)

123 
	#UART_BREAK_INT
 (0x10)

	)

124 
	#UART_TX_BUF_EMPTY
 (0x20)

	)

125 
	#UART_TX_EMPTY
 (0x40)

	)

126 
	#UART_RX_FIFO_ERR
 (0x80)

	)

128 #ifde‡
USE_UART_FIFO


129 
	#UART_LINE_ERRORS_MASK
 ( 
UART_OVERRUN_ERR
 | UART_OVERRUN_ERR \

130 | 
UART_PARITY_ERR
 | 
UART_FRAMING_ERR
 \

131 | 
UART_BREAK_INT
 | 
UART_RX_FIFO_ERR
 )

	)

133 
	#UART_LINE_ERRORS_MASK
 ( 
UART_OVERRUN_ERR
 | UART_OVERRUN_ERR \

134 | 
UART_PARITY_ERR
 | 
UART_FRAMING_ERR
 \

135 | 
UART_BREAK_INT
 )

	)

139 
	#UART_DELTA_CTS_INT
 (0x01)

	)

140 
	#UART_DELTA_DSR_INT
 (0x02)

	)

141 
	#UART_TE_RI_INT
 (0x04)

	)

142 
	#UART_DELTA_DCD_INT
 (0x08)

	)

143 
	#UART_CTS_SIGNAL
 (0x10)

	)

144 
	#UART_DSR_SIGNAL
 (0x20)

	)

145 
	#UART_RI_SIGNAL
 (0x40)

	)

146 
	#UART_DCD_SIGNAL
 (0x80)

	)

148 
	#UART_MODEM_INT_MASK
 ( 
UART_DELTA_CTS_INT
 | 
UART_DELTA_DSR_INT
 \

149 | 
UART_TE_RI_INT
 | 
UART_DELTA_DCD_INT
 )

	)

153 
	#UART_SCRATCH_REG_MASK
 (0xFF)

	)

163 
	#UART_BAUD_2400
 ((
uöt32
)((
SYS_CLK_KHZ
 * 1000Ë/ (16 * 2400)))

	)

164 
	#UART_BAUD_4800
 ((
uöt32
)((
SYS_CLK_KHZ
 * 1000Ë/ (16 * 4800)))

	)

165 
	#UART_BAUD_9600
 ((
uöt32
)((
SYS_CLK_KHZ
 * 1000Ë/ (16 * 9600)))

	)

166 
	#UART_BAUD_19200
 ((
uöt32
)((
SYS_CLK_KHZ
 * 1000Ë/ (16 * 19200)))

	)

167 
	#UART_BAUD_38400
 ((
uöt32
)((
SYS_CLK_KHZ
 * 1000Ë/ (16 * 38400)))

	)

168 
	#UART_BAUD_57600
 ((
uöt32
)((
SYS_CLK_KHZ
 * 1000Ë/ (16 * 57600)))

	)

169 
	#UART_BAUD_115200
 ((
uöt32
)((
SYS_CLK_KHZ
 * 1000Ë/ (16 * 115200)))

	)

170 
	#UART_BAUD_230400
 ((
uöt32
)((
SYS_CLK_KHZ
 * 1000Ë/ (16 * 230400)))

	)

171 
	#UART_BAUD_460800
 ((
uöt32
)((
SYS_CLK_KHZ
 * 1000Ë/ (16 * 460800)))

	)

172 
	#UART_BAUD_921600
 ((
uöt32
)((
SYS_CLK_KHZ
 * 1000Ë/ (16 * 921600)))

	)

176 
	#UART_PARITY_NONE
 (0)

	)

177 
	#UART_PARITY_EVEN
 (1)

	)

178 
	#UART_PARITY_ODD
 (2)

	)

180 
	#UART_TX_FIFO_DEPTH
 (16)

	)

181 
	#UART_RX_FIFO_DEPTH
 (16)

	)

190 
	#UART_DATA_ERROR
 (0x8000)

	)

197 
	su¨tRegs_t


199 vﬁ©ûê
uöt32
 
	mrxD©a
;

200 vﬁ©ûê
uöt32
 
	mtxD©a
;

201 vﬁ©ûê
uöt32
 
	mötE«bÀ
;

202 vﬁ©ûê
uöt32
 
	mötId
;

203 vﬁ©ûê
uöt32
 
	mfifoC⁄åﬁ
;

204 vﬁ©ûê
uöt32
 
	mlöeC⁄åﬁ
;

205 vﬁ©ûê
uöt32
 
	mmodemC⁄åﬁ
;

206 vﬁ©ûê
uöt32
 
	mlöeSètus
;

207 vﬁ©ûê
uöt32
 
	mmodemSètus
;

208 vﬁ©ûê
uöt32
 
	ms¸©ch
;

209 vﬁ©ûê
uöt32
 
	m˛kDividî
;

210 } 
	tu¨tRegs
;

212 
	eu¨tD©aBôs_t


214 
	md©aBôs5
,

215 
	md©aBôs6
,

216 
	md©aBôs7
,

217 
	md©aBôs8


218 } 
	tu¨tD©aBôs
;

220 
	eu¨tSt›Bôs_t


222 
	m°›Bôs1
,

223 
	m°›Bôs2


224 } 
	tu¨tSt›Bôs
;

226 
	eu¨tP¨ôy_t


228 
	mNoP¨ôy
,

229 
	mEvíP¨ôy
,

230 
	mOddP¨ôy


231 } 
	tu¨tP¨ôy
;

233 
	eu¨tBaud_t


235 
	mB2400
,

236 
	mB4800
,

237 
	mB9600
,

238 
	mB19200
,

239 
	mB38400
,

240 
	mB57600
,

241 
	mB115200
,

242 
	mB230400
,

243 
	mB460800
,

244 
	mB921600


245 } 
	tu¨tBaud
;

247 
	eu¨tFlowC⁄åﬁ_t


249 
	mH¨dw¨e
,

250 
	mX⁄Xoff


251 } 
	tu¨tFlowC⁄åﬁ
;

262 
PUBLIC
 
U¨tSëBaud
 ( 
u¨tRegs
 *
uPå
, 
u¨tBaud
 
baud
 );

263 
PUBLIC
 
U¨tSëD©aBôs
 ( 
u¨tRegs
 *
uPå
, 
u¨tD©aBôs
 
dBôs
 );

264 
PUBLIC
 
U¨tSëSt›Bôs
 ( 
u¨tRegs
 *
uPå
, 
u¨tSt›Bôs
 
°›Bôs
 );

265 
PUBLIC
 
U¨tSëP¨ôy
 ( 
u¨tRegs
 *
uPå
, 
u¨tP¨ôy
 
∑rôy
 );

266 
PUBLIC
 
U¨tStickP¨ôy
 ( 
u¨tRegs
 *
uPå
, 
boﬁ
 
£t
 );

267 
PUBLIC
 
U¨tSëRxFifoTriggî
 ( 
u¨tRegs
 *
uPå
, 
uöt32
 
åigLevñ
 );

268 
PUBLIC
 
U¨tSëTxFifoTriggî
 ( 
u¨tRegs
 *
uPå
, 
uöt32
 
åigLevñ
 );

269 
PUBLIC
 
U¨tC⁄figuª
 ( 
u¨tRegs
 *
uPå
, 
uöt32
 
c⁄fig
 );

270 
PUBLIC
 
uöt32
 
U¨tPutCh¨
 ( 
u¨tRegs
 *
uPå
, 
uöt8
 
d©a
 );

271 
PUBLIC
 
uöt32
 
U¨tGëCh¨
 ( 
u¨tRegs
 *
uPå
 );

272 
PUBLIC
 
U¨tLo›backMode
 ( 
u¨tRegs
 *
uPå
, 
boﬁ
 
mode
 );

297 
	#U¨tE«bÀIdI¡
(
uPå
,
uI¡s
) \

301 (
uPå
)->
ötE«bÀ
 |(
uI¡s
); \

302 } 0)

	)

323 
	#U¨tDißbÀIdI¡
(
uPå
,
uI¡s
) \

327 (
uPå
)->
ötE«bÀ
 &~(
uI¡s
); \

328 } 0)

	)

350 
	#U¨tGëI¡Id
(
uPå
Ë–(
uöt32
)((uPå)->
ötId
 & 
UART_ID_MASK
Ë)

	)

371 
	#U¨tIsFifoE«bÀd
(
uPå
) \

372 –((
uPå
)->
ötId
 & 
UART_FIFOS_ENABLED_MASK
Ë=
UART_FIFOS_ENABLED
 )

	)

392 
	#U¨tGëLöeSètus
(
uPå
Ë–(uPå)->
löeSètus
 )

	)

412 
	#U¨tGëLöeC⁄åﬁ
(
uPå
Ë–(uPå)->
löeC⁄åﬁ
 )

	)

439 
	#U¨tC⁄figuª
(
uPå
, 
c⁄fig
) \

442 
uPå
->
löeC⁄åﬁ
 = 
c⁄fig
; \

443 } 0)

	)

463 
	#U¨tGëModemSètus
(
uPå
Ë–(uPå)->
modemSètus
 )

	)

485 
	#U¨tAs£πModemSig«l
(
uPå
,
sig
) \

489 (
uPå
)->
modemC⁄åﬁ
 |(
sig
); \

490 } 0)

	)

512 
	#U¨tDós£πModemSig«l
(
uPå
,
sig
) \

516 (
uPå
)->
modemC⁄åﬁ
 &~(
sig
); \

517 } 0)

	)

537 
	#U¨tE«bÀFifo
(
uPå
) \

541 (
uPå
)->
fifoC⁄åﬁ
 |
UART_FIFO_ENABLE
; \

542 } 0)

	)

562 
	#U¨tDißbÀFifo
(
uPå
) \

566 (
uPå
)->
fifoC⁄åﬁ
 &~
UART_FIFO_ENABLE
; \

567 } 0)

	)

588 
	#U¨tRe£tRxFifo
(
uPå
) \

592 (
uPå
)->
fifoC⁄åﬁ
 |
UART_RX_FIFO_RESET
; \

593 } 0)

	)

614 
	#U¨tRe£tTxFifo
(
uPå
) \

618 (
uPå
)->
fifoC⁄åﬁ
 |
UART_TX_FIFO_RESET
; \

619 } 0)

	)

641 
	#U¨tRe£tFifos
(
uPå
) \

645 (
uPå
)->
fifoC⁄åﬁ
 |(
UART_TX_FIFO_RESET
 | 
UART_RX_FIFO_RESET
); \

646 } 0)

	)

666 
	#U¨tE«bÀDma
(
uPå
) \

670 (
uPå
)->
fifoC⁄åﬁ
 |
UART_DMA_ENABLE
; \

671 } 0)

	)

691 
	#U¨tDißbÀDma
(
uPå
) \

695 (
uPå
)->
fifoC⁄åﬁ
 &~
UART_DMA_ENABLE
; \

696 } 0)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/rt2880.c

24 
	~<comm⁄.h
>

25 
	~<comm™d.h
>

26 
	~<asm/addr•a˚.h
>

31 
	#MAX_SDRAM_SIZE
 (256*1024*1024)

	)

32 
	#MIN_SDRAM_SIZE
 (8*1024*1024)

	)

34 #ifde‡
SDRAM_CFG_USE_16BIT


35 
	#MIN_RT2880_SDRAM_SIZE
 (16*1024*1024)

	)

37 
	#MIN_RT2880_SDRAM_SIZE
 (32*1024*1024)

	)

46 
	$gë_øm_size
(vﬁ©ûê*
ba£
, 
maxsize
)

48 vﬁ©ûê*
addr
;

49 
ßve
[32];

50 
˙t
;

51 
vÆ
;

52 
size
;

53 
i
 = 0;

55 
˙t
 = (
maxsize
 /  ()) >> 1; cnt > 0; cnt >>= 1) {

56 
addr
 = 
ba£
 + 
˙t
;

57 
ßve
[
i
++] = *
addr
;

59 *
addr
 = ~
˙t
;

64 
addr
 = 
ba£
;

65 
ßve
[
i
] = *
addr
;

67 *
addr
 = 0;

70 i‡((
vÆ
 = *
addr
) != 0) {

73 *
addr
 = 
ßve
[
i
];

74 
˙t
 = 1; c¡ < 
maxsize
 / (); cnt <<= 1) {

75 
addr
 = 
ba£
 + 
˙t
;

76 *
addr
 = 
ßve
[--
i
];

81 
˙t
 = 1; c¡ < 
maxsize
 /  (); cnt <<= 1) {

82 
addr
 = 
ba£
 + 
˙t
;

85 
vÆ
 = *
addr
;

86 *
addr
 = 
ßve
[--
i
];

87 i‡(
vÆ
 !~
˙t
) {

88 
size
 = 
˙t
 *  ();

94 
˙t
 <<1; c¡ < 
maxsize
 /  (); cnt <<= 1) {

95 
addr
 = 
ba£
 + 
˙t
;

96 *
addr
 = 
ßve
[--
i
];

98  (
size
);

102  (
maxsize
);

103 
	}
}

107 
	$öôdøm
(
bﬂrd_ty≥
)

109 
ul⁄g
 
size
, 
max_size
 = 
MAX_SDRAM_SIZE
;

110 
ul⁄g
 
our_addªss
;

111 #i‚de‡
CONFIG_MIPS16


112 
asm
 vﬁ©ûê("movê%0, $25" : "Ù" (
our_addªss
) :);

117 #i‡
	`deföed
(
CFG_RUN_CODE_IN_RAM
)

119 
	`¥ötf
("\n In RAMÑun \n");

120  
MIN_SDRAM_SIZE
;

123 
	`¥ötf
("\n In FLASHÑun \n");

124  
MIN_RT2880_SDRAM_SIZE
;

128 #i‡
	`deföed
 (
RT2880_FPGA_BOARD
Ë|| deföed (
RT2880_ASIC_BOARD
)

129 i‡(
	`PHYSADDR
(
our_addªss
Ë< PHYSADDR(
PHYS_FLASH_1
))

134 
	`¥ötf
("\n In RAMÑun \n");

135  
MIN_SDRAM_SIZE
;

141 
size
 = 
	`gë_øm_size
((
ul⁄g
 *)
CFG_SDRAM_BASE
, 
MAX_SDRAM_SIZE
);

142 i‡(
size
 > 
max_size
)

144 
max_size
 = 
size
;

146  
max_size
;

149  
size
;

151 
	}
}

153 
	$checkbﬂrd
 ()

155 
	`puts
 ("Board: Ralink APSoC ");

157 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/serial.c

31 
	~<comm⁄.h
>

32 
	~"£rül.h
"

33 
	~<π_mm≠.h
>

35 #ifde‡
CONFIG_MIPS16


36 
	#˝u_to_À32
(
x
Ë(x)

	)

39 #i‡
deföed
(
RT6855A_ASIC_BOARD
Ë|| deföed(
RT6855A_FPGA_BOARD
)

40 
	gu˛k_20M
[13]={

56 
	$bbu_u¨t_öô
()

58 
i
;

59 
div_x
, 
div_y
;

60 
w‹d
;

63 
	`ø_outb
(
CR_UART_FCR
, (0x0f|(0x0<<6)));

66 
	`ø_outb
(
CR_UART_MCR
, 0x0);

69 
	`ø_outb
(
CR_UART_MISCC
, 0x0);

76 
	`ø_outb
(
CR_UART_LCR
, 
LCR_DLAB
);

78 
div_y
 = 65000;

79 
div_x
 = 
u˛k_20M
[1];

80 
w‹d
 = (
div_x
<<16)|
div_y
;

81 
	`ø_oué
(
CR_UART_XYD
, 
w‹d
);

84 
	`ø_outb
(
CR_UART_BRDL
, 0x01);

85 
	`ø_outb
(
CR_UART_BRDH
, 0x00);

88 
	`ø_outb
(
CR_UART_LCR
, 
LCR_WLS0
 | 
LCR_WLS1
);

89 
	}
}

94 
	$£rül_£tbrg
 ()

97 
˛ock_divis‹
 = 0;

98 #i‡
	`deföed
(
RT2880_FPGA_BOARD
Ë|| deföed(
RT2880_ASIC_BOARD
) || \

99 
	`deföed
(
RT3052_FPGA_BOARD
Ë|| deföed(
RT3052_ASIC_BOARD
)

100 
mùs_bus_„q
;

101 
u32
 
ªg
 = 0, 
˝u_˛ock
 = 0;

102 
u8
 
˛k_£l
;

103 
u8
 
˛k_£l2
;

109 #ifde‡
RT2880_FPGA_BOARD


110 
˝u_˛ock
 = 25 * 1000 * 1000;

111 
mùs_bus_„q
 = 
˝u_˛ock
 / 2;

112 #ñi‡
	`deföed
 (
RT3052_FPGA_BOARD
)

113 
˝u_˛ock
 = 40 * 1000 * 1000;

114 
mùs_bus_„q
 = 
˝u_˛ock
 / 3;

115 #ñi‡
	`deföed
(
RT3052_ASIC_BOARD
)

116 #i‡
	`deföed
(
RT3350_ASIC_BOARD
)

118 
˝u_˛ock
 = (320*1000*1000);

120 
ªg
 = 
	`RALINK_REG
(
RT2880_SYSCFG_REG
);

121 
˛k_£l
 = (
ªg
>>18) & 0x01;

122 
˛k_£l
) {

124 
˝u_˛ock
 = (320*1000*1000);

127 
˝u_˛ock
 = (384*1000*1000);

131 
mùs_bus_„q
 = 
˝u_˛ock
 / 3;

132 #ñi‡
	`deföed
(
RT2880_ASIC_BOARD
)

133 
ªg
 = 
	`RALINK_REG
(
RT2880_SYSCFG_REG
);

134 
˛k_£l
 = (
ªg
>>20) & 0x03;

135 
˛k_£l
) {

136 #ifde‡
RT2880_MP


138 
˝u_˛ock
 = (250*1000*1000);

141 
˝u_˛ock
 = (266*1000*1000);

144 
˝u_˛ock
 = (280*1000*1000);

147 
˝u_˛ock
 = (300*1000*1000);

151 
˝u_˛ock
 = (233*1000*1000);

154 
˝u_˛ock
 = (250*1000*1000);

157 
˝u_˛ock
 = (266*1000*1000);

160 
˝u_˛ock
 = (280*1000*1000);

166 
mùs_bus_„q
 = 
˝u_˛ock
 / 2;

170 #i‡
	`deföed
(
RT2880_ASIC_BOARD
Ë|| deföed(
RT2880_FPGA_BOARD
)

171 *(*)(
RALINK_SYSCTL_BASE
 + 0x0034Ë|
	`˝u_to_À32
(1<<12);

172 *(*)(
RALINK_SYSCTL_BASE
 + 0x0034) &= ~(1<<12);

173 #ñi‡
	`deföed
(
RT2883_ASIC_BOARD
Ë|| deföed(
RT2883_FPGA_BOARD
) || \

174 
	`deföed
(
RT3052_ASIC_BOARD
Ë|| deföed(
RT3052_FPGA_BOARD
) || \

175 
	`deföed
(
RT3352_ASIC_BOARD
Ë|| deföed(
RT3352_FPGA_BOARD
) || \

176 
	`deföed
(
RT5350_ASIC_BOARD
Ë|| deföed(
RT5350_FPGA_BOARD
) || \

177 
	`deföed
(
RT3883_ASIC_BOARD
Ë|| deföed(
RT3883_FPGA_BOARD
) || \

178 
	`deföed
(
RT6855_ASIC_BOARD
Ë|| deföed(
RT6855_FPGA_BOARD
) || \

179 
	`deföed
(
MT7620_ASIC_BOARD
Ë|| deföed(
MT7620_FPGA_BOARD
) || \

180 
	`deföed
(
MT7628_ASIC_BOARD
Ë|| deföed(
MT7628_FPGA_BOARD
)

181 *(*)(
RALINK_SYSCTL_BASE
 + 0x0034Ë|
	`˝u_to_À32
(1<<19|1<<12);

183 *(*)(
RALINK_SYSCTL_BASE
 + 0x0034) &= ~(1<<19|1<<12);

186 
u32
 
ªg
;

187 
ªg
 = *(*)(
RT2880_GPIOMODE_REG
);

188 
ªg
 &= ~(0x7 << 2);

189 *(*)(
RT2880_GPIOMODE_REG
Ë
ªg
;

191 #ñi‡
	`deföed
 (
MT7621_ASIC_BOARD
Ë|| deföed (
MT7621_FPGA_BOARD
)

192 *(*)(
RALINK_SYSCTL_BASE
 + 0x0034Ë|
	`˝u_to_À32
(1<<19|1<<20|1<<21);

193 *(*)(
RALINK_SYSCTL_BASE
 + 0x0034) &= ~(1<<19|1<<20|1<<21);

195 
u32
 
ªg
;

196 
ªg
 = 
	`ø_öl
(
RT2880_GPIOMODE_REG
);

198 
ªg
 &= ~(0x3 << 3);

200 
ªg
 &= ~(0x3 << 5);

201 
	`ø_oué
(
RT2880_GPIOMODE_REG
, 
ªg
);

203 #ñi‡
	`deföed
(
RT6855A_ASIC_BOARD
Ë|| deföed(
RT6855A_FPGA_BOARD
)

211 #i‡
	`deföed
(
RT3883_ASIC_BOARD
Ë|| deföed(
RT3883_FPGA_BOARD
) || \

212 
	`deföed
(
RT3352_ASIC_BOARD
Ë|| deföed(
RT3352_FPGA_BOARD
) || \

213 
	`deföed
(
RT5350_ASIC_BOARD
Ë|| deföed(
RT5350_FPGA_BOARD
) || \

214 
	`deföed
(
RT6855_ASIC_BOARD
Ë|| deföed(
RT6855_FPGA_BOARD
) || \

215 
	`deföed
(
MT7620_ASIC_BOARD
Ë|| deföed(
MT7620_FPGA_BOARD
) || \

216 
	`deföed
(
MT7628_ASIC_BOARD
Ë|| deföed(
MT7628_FPGA_BOARD
)

217 
˛ock_divis‹
 = (40*1000*1000/ 
SERIAL_CLOCK_DIVISOR
 / 
CONFIG_BAUDRATE
);

218 #ñi‡ 
	`deföed
(
MT7621_ASIC_BOARD
Ë|| deföed(
MT7621_FPGA_BOARD
)

219 
˛ock_divis‹
 = (50 * 1000*1000/ 
SERIAL_CLOCK_DIVISOR
 / 
CONFIG_BAUDRATE
);

221 
˛ock_divis‹
 = (
mùs_bus_„q
/ 
SERIAL_CLOCK_DIVISOR
 / 
CONFIG_BAUDRATE
);

224 
	`IER
(
CFG_RT2880_CONSOLE
) = 0;

225 
	`FCR
(
CFG_RT2880_CONSOLE
) = 0;

228 
	`LCR
(
CFG_RT2880_CONSOLE
Ë
LCR_WLS0
 | 
LCR_WLS1
 | 
LCR_DLAB
;

229 
	`DLL
(
CFG_RT2880_CONSOLE
Ë
˛ock_divis‹
 & 0xff;

230 
	`DLM
(
CFG_RT2880_CONSOLE
Ë
˛ock_divis‹
 >> 8;

231 
	`LCR
(
CFG_RT2880_CONSOLE
Ë
LCR_WLS0
 | 
LCR_WLS1
;

232 
	}
}

240 
	$£rül_öô
 ()

242 #i‡
	`deföed
(
RT6855A_ASIC_BOARD
Ë|| deföed(
RT6855A_FPGA_BOARD
)

243 
	`bbu_u¨t_öô
();

245 
	`£rül_£tbrg
 ();

248 
	}
}

254 
	$£rül_putc
 (c⁄° 
c
)

256 #i‡
	`deföed
 (
RT6855A_FPGA_BOARD
Ë|| deföed (
RT6855A_ASIC_BOARD
)

257 !(
	`ø_öb
(
CR_UART_LSR
Ë& 
LSR_TEMT
));

258 
	`ø_outb
(
CR_UART_THR
, 
c
);

259 i‡(
c
 == '\n')

260 
	`£rül_putc
 ('\r');

263 (
	`LSR
(
CFG_RT2880_CONSOLE
Ë& 
LSR_TEMT
) == 0);

265 
	`TBR
(
CFG_RT2880_CONSOLE
Ë
c
;

268 i‡(
c
 == '\n')

269 
	`£rül_putc
 ('\r');

271 
	}
}

278 
	$£rül_t°c
 ()

280 #i‡
	`deföed
 (
RT6855A_FPGA_BOARD
Ë|| deföed (
RT6855A_ASIC_BOARD
)

281  (
	`ø_öb
(
CR_UART_LSR
Ë& 
LSR_DR
);

283  
	`LSR
(
CFG_RT2880_CONSOLE
Ë& 
LSR_DR
;

285 
	}
}

292 
	$£rül_gëc
 ()

294 #i‡
	`deföed
 (
RT6855A_FPGA_BOARD
Ë|| deföed (
RT6855A_ASIC_BOARD
)

295 !(
	`ø_öb
(
CR_UART_LSR
Ë& 
LSR_DR
));

296  (Ë(
	`ø_öb
(
CR_UART_RBR
) & 0xff);

298 !(
	`LSR
(
CFG_RT2880_CONSOLE
Ë& 
LSR_DR
));

299  (Ë
	`RBR
(
CFG_RT2880_CONSOLE
) & 0xff;

301 
	}
}

304 
	$£rül_puts
 (c⁄° *
s
)

306 *
s
) {

307 
	`£rül_putc
 (*
s
++);

309 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/serial.h

2 #unde‡
io_p2v


3 #unde‡
__REG


4 #i‚de‡
__ASSEMBLY__


5 
	#io_p2v
(
PhAdd
Ë(PhAdd)

	)

6 
	#__REG
(
x
Ë(*((vﬁ©ûê
u32
 *)
	`io_p2v
(x)))

	)

7 
	#__REG2
(
x
,
y
Ë(*(vﬁ©ûê
u32
 *)((u32)&
	`__REG
(xË+ (y)))

	)

9 
	#__REG
(
x
Ë(x)

	)

16 #i‡
deföed
 (
MT7621_FPGA_BOARD
Ë|| deföed (
MT7621_ASIC_BOARD
Ë|| deföed (
MT7628_FPGA_BOARD
Ë|| deföed (
MT7628_ASIC_BOARD
)

17 
	#RT2880_UART1
 0x0C00

	)

18 
	#RT2880_UART2
 0x0D00

	)

19 
	#RT2880_UART3
 0x0E00

	)

20 
	#CFG_RT2880_CONSOLE
 
RT2880_UART1


	)

22 
	#RT2880_UART1
 0x0500

	)

23 
	#RT2880_UART2
 0x0C00

	)

24 
	#CFG_RT2880_CONSOLE
 
RT2880_UART2


	)

28 #i‡
deföed
 (
MT7621_FPGA_BOARD
Ë|| deföed (
MT7621_ASIC_BOARD
Ë|| deföed (
MT7628_FPGA_BOARD
Ë|| deföed (
MT7628_ASIC_BOARD
)

29 
	#RT2880_UART_RBR_OFFSET
 0x00

	)

30 
	#RT2880_UART_TBR_OFFSET
 0x00

	)

31 
	#RT2880_UART_IER_OFFSET
 0x04

	)

32 
	#RT2880_UART_IIR_OFFSET
 0x08

	)

33 
	#RT2880_UART_FCR_OFFSET
 0x08

	)

34 
	#RT2880_UART_LCR_OFFSET
 0x0C

	)

35 
	#RT2880_UART_MCR_OFFSET
 0x10

	)

36 
	#RT2880_UART_LSR_OFFSET
 0x14

	)

37 
	#RT2880_UART_DLL_OFFSET
 0x00

	)

38 
	#RT2880_UART_DLM_OFFSET
 0x04

	)

40 
	#RT2880_UART_RBR_OFFSET
 0x00

	)

41 
	#RT2880_UART_TBR_OFFSET
 0x04

	)

42 
	#RT2880_UART_IER_OFFSET
 0x08

	)

43 
	#RT2880_UART_IIR_OFFSET
 0x0C

	)

44 
	#RT2880_UART_FCR_OFFSET
 0x10

	)

45 
	#RT2880_UART_LCR_OFFSET
 0x14

	)

46 
	#RT2880_UART_MCR_OFFSET
 0x18

	)

47 
	#RT2880_UART_LSR_OFFSET
 0x1C

	)

48 
	#RT2880_UART_DLL_OFFSET
 0x2C

	)

49 
	#RT2880_UART_DLM_OFFSET
 0x30

	)

52 
	#RBR
(
x
Ë
	`__REG
(
RALINK_SYSCTL_BASE
+(x)+
RT2880_UART_RBR_OFFSET
)

	)

53 
	#TBR
(
x
Ë
	`__REG
(
RALINK_SYSCTL_BASE
+(x)+
RT2880_UART_TBR_OFFSET
)

	)

54 
	#IER
(
x
Ë
	`__REG
(
RALINK_SYSCTL_BASE
+(x)+
RT2880_UART_IER_OFFSET
)

	)

55 
	#IIR
(
x
Ë
	`__REG
(
RALINK_SYSCTL_BASE
+(x)+
RT2880_UART_IIR_OFFSET
)

	)

56 
	#FCR
(
x
Ë
	`__REG
(
RALINK_SYSCTL_BASE
+(x)+
RT2880_UART_FCR_OFFSET
)

	)

57 
	#LCR
(
x
Ë
	`__REG
(
RALINK_SYSCTL_BASE
+(x)+
RT2880_UART_LCR_OFFSET
)

	)

58 
	#MCR
(
x
Ë
	`__REG
(
RALINK_SYSCTL_BASE
+(x)+
RT2880_UART_MCR_OFFSET
)

	)

59 
	#LSR
(
x
Ë
	`__REG
(
RALINK_SYSCTL_BASE
+(x)+
RT2880_UART_LSR_OFFSET
)

	)

60 
	#DLL
(
x
Ë
	`__REG
(
RALINK_SYSCTL_BASE
+(x)+
RT2880_UART_DLL_OFFSET
)

	)

61 
	#DLM
(
x
Ë
	`__REG
(
RALINK_SYSCTL_BASE
+(x)+
RT2880_UART_DLM_OFFSET
)

	)

63 
	#IER_ELSI
 (1 << 2Ë

	)

64 
	#IER_ETBEI
 (1 << 1Ë

	)

65 
	#IER_ERBFI
 (1 << 0Ë

	)

67 
	#IIR_FIFOES1
 (1 << 7Ë

	)

68 
	#IIR_FIFOES0
 (1 << 6Ë

	)

69 
	#IIR_IID3
 (1 << 3Ë

	)

70 
	#IIR_IID2
 (1 << 2Ë

	)

71 
	#IIR_IID1
 (1 << 1Ë

	)

72 
	#IIR_IP
 (1 << 0Ë

	)

74 
	#FCR_RXTRIG1
 (1 << 7Ë

	)

75 
	#FCR_RXTRIG0
 (1 << 6Ë

	)

76 
	#FCR_TXTRIG1
 (1 << 5Ë

	)

77 
	#FCR_TXTRIG0
 (1 << 4Ë

	)

78 
	#FCR_DMAMODE
 (1 << 3Ë

	)

79 
	#FCR_TXRST
 (1 << 2Ë

	)

80 
	#FCR_RXRST
 (1 << 1Ë

	)

81 
	#FCR_FIFOE
 (1 << 0Ë

	)

84 
	#LCR_DLAB
 (1 << 7Ë

	)

85 
	#LCR_SB
 (1 << 6Ë

	)

86 
	#LCR_STKYP
 (1 << 5Ë

	)

87 
	#LCR_EPS
 (1 << 4Ë

	)

88 
	#LCR_PEN
 (1 << 3Ë

	)

89 
	#LCR_STB
 (1 << 2Ë

	)

90 
	#LCR_WLS1
 (1 << 1Ë

	)

91 
	#LCR_WLS0
 (1 << 0Ë

	)

93 
	#MCR_LOOP
 (1 << 4Ë

	)

95 
	#MSR_DCD
 (1 << 7Ë

	)

96 
	#MSR_RI
 (1 << 6Ë

	)

97 
	#MSR_DSR
 (1 << 5Ë

	)

98 
	#MSR_CTS
 (1 << 4Ë

	)

99 
	#MSR_DDCD
 (1 << 3Ë

	)

100 
	#MSR_TERI
 (1 << 2Ë

	)

101 
	#MSR_DDSR
 (1 << 1Ë

	)

102 
	#MSR_DCTS
 (1 << 0Ë

	)

105 
	#LSR_FIFOE
 (1 << 7Ë

	)

106 
	#LSR_TEMT
 (1 << 6Ë

	)

107 
	#LSR_TDRQ
 (1 << 5Ë

	)

108 
	#LSR_BI
 (1 << 4Ë

	)

109 
	#LSR_FE
 (1 << 3Ë

	)

110 
	#LSR_PE
 (1 << 2Ë

	)

111 
	#LSR_OE
 (1 << 1Ë

	)

112 
	#LSR_DR
 (1 << 0Ë

	)

115 #i‡
deföed
 (
RT6855A_FPGA_BOARD
Ë|| deföed (
RT6855A_ASIC_BOARD
)

116 
	#CR_UART_RBR
 (0x00+
RALINK_UART_LITE_BASE
)

	)

117 
	#CR_UART_THR
 (0x00+
RALINK_UART_LITE_BASE
)

	)

118 
	#CR_UART_IER
 (0x04+
RALINK_UART_LITE_BASE
)

	)

119 
	#CR_UART_IIR
 (0x08+
RALINK_UART_LITE_BASE
)

	)

120 
	#CR_UART_FCR
 (0x08+
RALINK_UART_LITE_BASE
)

	)

121 
	#CR_UART_LCR
 (0x0c+
RALINK_UART_LITE_BASE
)

	)

122 
	#CR_UART_MCR
 (0x10+
RALINK_UART_LITE_BASE
)

	)

123 
	#CR_UART_LSR
 (0x14+
RALINK_UART_LITE_BASE
)

	)

124 
	#CR_UART_MSR
 (0x18+
RALINK_UART_LITE_BASE
)

	)

125 
	#CR_UART_SCR
 (0x1c+
RALINK_UART_LITE_BASE
)

	)

126 
	#CR_UART_BRDL
 (0x00+
RALINK_UART_LITE_BASE
)

	)

127 
	#CR_UART_BRDH
 (0x04+
RALINK_UART_LITE_BASE
)

	)

128 
	#CR_UART_WORDA
 (0x20+
RALINK_UART_LITE_BASE
)

	)

129 
	#CR_UART_HWORDA
 (0x28+
RALINK_UART_LITE_BASE
)

	)

130 
	#CR_UART_MISCC
 (0x24+
RALINK_UART_LITE_BASE
)

	)

131 
	#CR_UART_XYD
 (0x2c+
RALINK_UART_LITE_BASE
)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/cmd_bdinfo.c

27 
	~<comm⁄.h
>

28 
	~<comm™d.h
>

29 
	~<√t.h
>

32 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_BDI
)

33 
¥öt_num
(c⁄° *, 
ul⁄g
);

35 #i‚de‡
CONFIG_ARM


37 #ifde‡
CONFIG_PPC


38 
¥öt_°r
(const *, const *);

40 
	$do_bdöfo
 ( 
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

42 
DECLARE_GLOBAL_DATA_PTR
;

44 
i
;

45 
bd_t
 *
bd
 = 
gd
->bd;

46 
buf
[32];

48 #ifde‡
DEBUG


49 
	`¥öt_num
 ("bdáddªss", (
ul⁄g
)
bd
 );

51 
	`¥öt_num
 ("mem°¨t", 
bd
->
bi_mem°¨t
 );

52 
	`¥öt_num
 ("memsize", 
bd
->
bi_memsize
 );

53 
	`¥öt_num
 ("Êash°¨t", 
bd
->
bi_Êash°¨t
 );

54 
	`¥öt_num
 ("Êashsize", 
bd
->
bi_Êashsize
 );

55 
	`¥öt_num
 ("Êashoff£t", 
bd
->
bi_Êashoff£t
 );

56 
	`¥öt_num
 ("§am°¨t", 
bd
->
bi_§am°¨t
 );

57 
	`¥öt_num
 ("§amsize", 
bd
->
bi_§amsize
 );

58 #i‡
	`deföed
(
CONFIG_5xx
Ë|| deföed(
CONFIG_8xx
) || \

59 
	`deföed
(
CONFIG_8260
Ë|| deföed(
CONFIG_E500
)

60 
	`¥öt_num
 ("immr_ba£", 
bd
->
bi_immr_ba£
 );

62 
	`¥öt_num
 ("boŸÊags", 
bd
->
bi_boŸÊags
 );

63 #i‡
	`deföed
(
CONFIG_405GP
Ë|| deföed(
CONFIG_405CR
) || \

64 
	`deföed
(
CONFIG_405EP
Ë|| deföed(
CONFIG_XILINX_ML300
)

65 
	`¥öt_°r
 ("¥oc‰eq", 
	`°rmhz
(
buf
, 
bd
->
bi_¥oc‰eq
));

66 
	`¥öt_°r
 ("∂b_bus‰eq", 
	`°rmhz
(
buf
, 
bd
->
bi_∂b_bus‰eq
));

67 #i‡
	`deföed
(
CONFIG_405GP
Ë|| deföed(
CONFIG_405EP
Ë|| deföed(
CONFIG_XILINX_ML300
)

68 
	`¥öt_°r
 ("pci_bus‰eq", 
	`°rmhz
(
buf
, 
bd
->
bi_pci_bus‰eq
));

71 #i‡
	`deföed
(
CONFIG_8260
Ë|| deföed(
CONFIG_MPC8560
)

72 
	`¥öt_°r
 ("vco", 
	`°rmhz
(
buf
, 
bd
->
bi_vco
));

73 
	`¥öt_°r
 ("scc‰eq", 
	`°rmhz
(
buf
, 
bd
->
bi_scc‰eq
));

74 
	`¥öt_°r
 ("brg‰eq", 
	`°rmhz
(
buf
, 
bd
->
bi_brg‰eq
));

76 
	`¥öt_°r
 ("öt‰eq", 
	`°rmhz
(
buf
, 
bd
->
bi_öt‰eq
));

77 #i‡
	`deföed
(
CONFIG_8260
Ë|| deföed(
CONFIG_MPC8560
)

78 
	`¥öt_°r
 ("˝m‰eq", 
	`°rmhz
(
buf
, 
bd
->
bi_˝m‰eq
));

80 
	`¥öt_°r
 ("bus‰eq", 
	`°rmhz
(
buf
, 
bd
->
bi_bus‰eq
));

82 #i‡
	`deföed
(
CONFIG_MPC8220
)

83 
	`¥öt_°r
 ("öp‰eq", 
	`°rmhz
(
buf
, 
bd
->
bi_öp‰eq
));

84 
	`¥öt_°r
 ("Êb‰eq", 
	`°rmhz
(
buf
, 
bd
->
bi_Êb‰eq
));

85 
	`¥öt_°r
 ("pci‰eq", 
	`°rmhz
(
buf
, 
bd
->
bi_pci‰eq
));

86 
	`¥öt_°r
 ("vco‰eq", 
	`°rmhz
(
buf
, 
bd
->
bi_vco‰eq
));

87 
	`¥öt_°r
 ("≥v‰eq", 
	`°rmhz
(
buf
, 
bd
->
bi_≥v‰eq
));

90 
	`puts
 ("ethaddr =");

91 
i
=0; i<6; ++i) {

92 
	`¥ötf
 ("%c%02X", 
i
 ? ':' : ' ', 
bd
->
bi_íëaddr
[i]);

95 #i‡
	`deföed
(
CONFIG_HAS_ETH1
)

96 
	`puts
 ("\neth1addr =");

97 
i
=0; i<6; ++i) {

98 
	`¥ötf
 ("%c%02X", 
i
 ? ':' : ' ', 
bd
->
bi_íë1addr
[i]);

102 #i‡
	`deföed
(
CONFIG_HAS_ETH2
)

103 
	`puts
 ("\neth2addr =");

104 
i
=0; i<6; ++i) {

105 
	`¥ötf
 ("%c%02X", 
i
 ? ':' : ' ', 
bd
->
bi_íë2addr
[i]);

109 #i‡
	`deföed
(
CONFIG_HAS_ETH3
)

110 
	`puts
 ("\neth3addr =");

111 
i
=0; i<6; ++i) {

112 
	`¥ötf
 ("%c%02X", 
i
 ? ':' : ' ', 
bd
->
bi_íë3addr
[i]);

116 #ifde‡
CONFIG_HERMES


117 
	`¥öt_°r
 ("ëh•ìd", 
	`°rmhz
(
buf
, 
bd
->
bi_ëh•ìd
));

119 
	`puts
 ("\nIPádd∏ = "); 
	`¥öt_IPaddr
 (
bd
->
bi_ù_addr
);

120 
	`¥ötf
 ("\nbaudøã = %6ld bps\n", 
bd
->
bi_baudøã
 );

122 
	}
}

124 #ñi‡
deföed
(
CONFIG_NIOS
)

126 
	$do_bdöfo
 ( 
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

128 
DECLARE_GLOBAL_DATA_PTR
;

130 
i
;

131 
bd_t
 *
bd
 = 
gd
->bd;

133 
	`¥öt_num
 ("mem°¨t", (
ul⁄g
)
bd
->
bi_mem°¨t
);

134 
	`¥öt_num
 ("memsize", (
ul⁄g
)
bd
->
bi_memsize
);

135 
	`¥öt_num
 ("Êash°¨t", (
ul⁄g
)
bd
->
bi_Êash°¨t
);

136 
	`¥öt_num
 ("Êashsize", (
ul⁄g
)
bd
->
bi_Êashsize
);

137 
	`¥öt_num
 ("Êashoff£t", (
ul⁄g
)
bd
->
bi_Êashoff£t
);

139 
	`puts
 ("ethaddr =");

140 
i
=0; i<6; ++i) {

141 
	`¥ötf
 ("%c%02X", 
i
 ? ':' : ' ', 
bd
->
bi_íëaddr
[i]);

143 
	`puts
 ("\nip_addr = ");

144 
	`¥öt_IPaddr
 (
bd
->
bi_ù_addr
);

145 
	`¥ötf
 ("\nbaudøã = %ld bps\n", 
bd
->
bi_baudøã
);

148 
	}
}

150 #ñi‡
deföed
(
CONFIG_NIOS2
)

152 
	$do_bdöfo
 ( 
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

154 
DECLARE_GLOBAL_DATA_PTR
;

156 
i
;

157 
bd_t
 *
bd
 = 
gd
->bd;

159 
	`¥öt_num
 ("mem sèπ", (
ul⁄g
)
bd
->
bi_mem°¨t
);

160 
	`¥öt_num
 ("mem size", (
ul⁄g
)
bd
->
bi_memsize
);

161 
	`¥öt_num
 ("Êash sèπ", (
ul⁄g
)
bd
->
bi_Êash°¨t
);

162 
	`¥öt_num
 ("Êash size", (
ul⁄g
)
bd
->
bi_Êashsize
);

163 
	`¥öt_num
 ("Êash off£t", (
ul⁄g
)
bd
->
bi_Êashoff£t
);

165 #i‡
	`deföed
(
CFG_SRAM_BASE
)

166 
	`¥öt_num
 ("§am sèπ", (
ul⁄g
)
bd
->
bi_§am°¨t
);

167 
	`¥öt_num
 ("§am size", (
ul⁄g
)
bd
->
bi_§amsize
);

170 #i‡
	`deföed
(
CFG_CMD_NET
)

171 
	`puts
 ("ethaddr =");

172 
i
=0; i<6; ++i) {

173 
	`¥ötf
 ("%c%02X", 
i
 ? ':' : ' ', 
bd
->
bi_íëaddr
[i]);

175 
	`puts
 ("\nip_addr = ");

176 
	`¥öt_IPaddr
 (
bd
->
bi_ù_addr
);

179 
	`¥ötf
 ("\nbaudøã = %ld bps\n", 
bd
->
bi_baudøã
);

182 
	}
}

186 
	$do_bdöfo
 ( 
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

188 
DECLARE_GLOBAL_DATA_PTR
;

190 
i
;

191 
bd_t
 *
bd
 = 
gd
->bd;

193 
	`¥öt_num
 ("boŸ_∑øms", (
ul⁄g
)
bd
->
bi_boŸ_∑øms
);

194 
	`¥öt_num
 ("mem°¨t", (
ul⁄g
)
bd
->
bi_mem°¨t
);

195 
	`¥öt_num
 ("memsize", (
ul⁄g
)
bd
->
bi_memsize
);

196 
	`¥öt_num
 ("Êash°¨t", (
ul⁄g
)
bd
->
bi_Êash°¨t
);

197 
	`¥öt_num
 ("Êashsize", (
ul⁄g
)
bd
->
bi_Êashsize
);

198 
	`¥öt_num
 ("Êashoff£t", (
ul⁄g
)
bd
->
bi_Êashoff£t
);

200 
	`puts
 ("ethaddr =");

201 
i
=0; i<6; ++i) {

202 
	`¥ötf
 ("%c%02X", 
i
 ? ':' : ' ', 
bd
->
bi_íëaddr
[i]);

204 
	`puts
 ("\nip_addr = ");

205 
	`¥öt_IPaddr
 (
bd
->
bi_ù_addr
);

206 
	`¥ötf
 ("\nbaudøã = %d bps\n", 
bd
->
bi_baudøã
);

209 
	}
}

213 #ifde‡
RT2880_U_BOOT_CMD_OPEN


215 
	$do_bdöfo
 ( 
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

217 
DECLARE_GLOBAL_DATA_PTR
;

219 
i
;

220 
bd_t
 *
bd
 = 
gd
->bd;

222 
	`¥öt_num
 ("¨ch_numbî", 
bd
->
bi_¨ch_numbî
);

223 
	`¥öt_num
 ("ív_t", (
ul⁄g
)
bd
->
bi_ív
);

224 
	`¥öt_num
 ("boŸ_∑øms", (
ul⁄g
)
bd
->
bi_boŸ_∑øms
);

226 
i
=0; i<
CONFIG_NR_DRAM_BANKS
; ++i) {

227 
	`¥öt_num
("DRAM b™k", 
i
);

228 
	`¥öt_num
("-> sèπ", 
bd
->
bi_døm
[
i
].
°¨t
);

229 
	`¥öt_num
("-> size", 
bd
->
bi_døm
[
i
].
size
);

232 
	`puts
 ("ethaddr =");

233 
i
=0; i<6; ++i) {

234 
	`¥ötf
 ("%c%02X", 
i
 ? ':' : ' ', 
bd
->
bi_íëaddr
[i]);

236 
	`puts
 ( "\n"

238 
	`¥öt_IPaddr
 (
bd
->
bi_ù_addr
);

239 
	`¥ötf
 ("\n"

240 "baudøã = %d bps\n", 
bd
->
bi_baudøã
);

243 
	}
}

247 
	$¥öt_num
(c⁄° *
«me
, 
ul⁄g
 
vÆue
)

249 
	`¥ötf
 ("%-12s0x%08lX\n", 
«me
, 
vÆue
);

250 
	}
}

252 #ifde‡
CONFIG_PPC


253 
	$¥öt_°r
(c⁄° *
«me
, c⁄° *
°r
)

255 
	`¥ötf
 ("%-12s%6†MHz\n", 
«me
, 
°r
);

256 
	}
}

261 #ifde‡
RT2880_U_BOOT_CMD_OPEN


263 
U_BOOT_CMD
(

264 
bdöfo
, 1, 1, 
do_bdöfo
,

266 
NULL


	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/cmd_boot.c

27 
	~<comm⁄.h
>

28 
	~<comm™d.h
>

29 
	~<√t.h
>

33 
	$do_go
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

36 #i‡
	`deföed
(
CONFIG_I386
)

37 
DECLARE_GLOBAL_DATA_PTR
;

39 
ul⁄g
 
addr
, 
rc
;

40 
rcode
 = 0;

42 i‡(
¨gc
 < 2) {

43 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

47 
addr
 = 
	`sim∂e_°πoul
(
¨gv
[1], 
NULL
, 16);

49 
	`¥ötf
 ("## Sèπögáµliˇti⁄áà0x%08lX ...\n", 
addr
);

55 #i‡
	`deföed
(
CONFIG_I386
)

60 
¨gv
[0] = (*)
gd
;

62 #i‡!
	`deföed
(
CONFIG_NIOS
)

63 
rc
 = ((
	`ul⁄g
 (*)(, *[]))
addr
Ë(--
¨gc
, &
¨gv
[1]);

68 
rc
 = ((
	`ul⁄g
 (*)(, *[]))(
addr
>>1)Ë(--
¨gc
, &
¨gv
[1]);

70 i‡(
rc
 !0Ë
rcode
 = 1;

72 
	`¥ötf
 ("## Aµliˇti⁄Åîmö©ed,Ñ¯0x%lX\n", 
rc
);

74  
rcode
;

75 
	}
}

79 
U_BOOT_CMD
(

80 
go
, 
CFG_MAXARGS
, 1, 
do_go
,

86 
do_ª£t
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[]);

88 
U_BOOT_CMD
(

89 
ª£t
, 1, 0, 
do_ª£t
,

91 
NULL


	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/cmd_bootm.c

27 
	~<comm⁄.h
>

28 
	~<w©chdog.h
>

29 
	~<comm™d.h
>

30 
	~<image.h
>

31 
	~<mÆloc.h
>

32 
	~<π_mm≠.h
>

34 
	~<ívú⁄mít.h
>

35 
	~<asm/byã‹dî.h
>

37 #ifde‡
CONFIG_GZIP


38 
	~<zlib.h
>

41 #ifde‡
CONFIG_BZIP2


42 
	~<bzlib.h
>

45 #ifde‡
CONFIG_LZMA


46 
	~<LzmaDecode.h
>

49 #ifde‡
CONFIG_XZ


50 
	~<unxz.h
>

54 
do_ª£t
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[]);

56 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_DATE
Ë|| 
deföed
(
CONFIG_TIMESTAMP
)

57 
	~<πc.h
>

60 #ifde‡
CFG_HUSH_PARSER


61 
	~<hush.h
>

64 #ifde‡
CONFIG_SHOW_BOOT_PROGRESS


65 
	~<°©us_Àd.h
>

66 
	#SHOW_BOOT_PROGRESS
(
¨g
Ë
	`show_boŸ_¥ogªss
◊rg)

	)

68 
	#SHOW_BOOT_PROGRESS
(
¨g
)

	)

71 #ifde‡
CFG_INIT_RAM_LOCK


72 
	~<asm/ˇche.h
>

75 #ifde‡
CONFIG_LOGBUFFER


76 
	~<logbuff.h
>

79 #ifde‡
CONFIG_HAS_DATAFLASH


80 
	~<d©aÊash.h
>

88 #i‡
deföed
(
CONFIG_HW_WATCHDOG
Ë|| deföed(
CONFIG_WATCHDOG
)

89 
	#CHUNKSZ
 (64 * 1024)

	)

93 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_IMI
)

94 #ifde‡
RT2880_U_BOOT_CMD_OPEN


95 
image_öfo
 (
addr
);

99 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_IMLS
)

100 
	~<Êash.h
>

101 
Êash_öfo_t
 
Êash_öfo
[
CFG_MAX_FLASH_BANKS
];

102 
do_imls
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[]);

105 
¥öt_ty≥
 (
image_hódî_t
 *
hdr
);

107 #ifde‡
__I386__


108 
image_hódî_t
 *
Áke_hódî
(image_hódî_à*
hdr
, *
±r
, 
size
);

111 
	#IH_TYPE_STANDALONE_SUPPORT


	)

112 
	#CONFIG_NONE


	)

122 
	tboŸ_os_F˙
 (
	tcmd_tbl_t
 *
	tcmdç
, 
	tÊag
,

123 
	t¨gc
, *
	t¨gv
[],

124 
	tul⁄g
 
	taddr
,

125 
	tul⁄g
 *
	tÀn_±r
,

126 
	tvîify
);

128 #ifdef 
DEBUG


129 
do_bdöfo
 ( 
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[]);

132 #ifde‡
CONFIG_PPC


133 
boŸ_os_F˙
 
	gdo_boŸm_löux
;

135 
boŸ_os_F˙
 
do_boŸm_löux
;

137 #ifde‡
CONFIG_SILENT_CONSOLE


138 
fixup_sûít_löux
 ();

140 #ifde‡
CONFIG_NETBSD


141 
boŸ_os_F˙
 
	gdo_boŸm_√tbsd
;

143 #ifde‡
CONFIG_RTEMS


144 
boŸ_os_F˙
 
	gdo_boŸm_πems
;

146 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_ELF
)

147 
boŸ_os_F˙
 
	gdo_boŸm_vxw‹ks
;

148 
boŸ_os_F˙
 
	gdo_boŸm_qnxñf
;

149 
do_boŸvx
 ( 
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[] );

150 
do_boŸñf
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[] );

152 #i‡
deföed
(
CONFIG_ARTOS
Ë&& deföed(
CONFIG_PPC
)

153 
boŸ_os_F˙
 
	gdo_boŸm_¨tos
;

155 #ifde‡
CONFIG_LYNXKDI


156 
boŸ_os_F˙
 
	gdo_boŸm_lynxkdi
;

157 
lynxkdi_boŸ
–
image_hódî_t
 * );

160 
image_hódî_t
 
	ghódî
;

161 
ul⁄g
 
	glﬂd_addr
 = 
CFG_LOAD_ADDR
;

163 
ölöe
 
	$mùs_ˇche_£t
(
u32
 
v
)

165 
asm
 vﬁ©ûê("mtc0 %0, $16" : : "r" (
v
));

166 
	}
}

170 
	$do_boŸm
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

172 
ul⁄g
 
addr
;

173 
ul⁄g
 
d©a
, 
Àn
, 
checksum
;

174 
ul⁄g
 *
Àn_±r
;

175 
uöt
 
unc_Àn
 = 0x800000;

176 
i
, 
vîify
;

177 *
«me
, *
s
;

178 (*
≠∂
)(, *[]);

179 
image_hódî_t
 *
hdr
 = &
hódî
;

184 
s
 = 
	`gëív
 ("verify");

185 
vîify
 = (
s
 && (*s == 'n')) ? 0 : 1;

187 i‡(
¨gc
 < 2) {

188 
addr
 = 
lﬂd_addr
;

190 
addr
 = 
	`sim∂e_°πoul
(
¨gv
[1], 
NULL
, 16);

194 
	`SHOW_BOOT_PROGRESS
 (1);

195 
	`¥ötf
 ("## BoŸög imagê© %08lx ...\n", 
addr
);

197 #ifde‡
DUAL_IMAGE_SUPPORT


198 i‡(
	`°rcmp
(
	`gëív
("Image1Stable"), "1") != 0) {

199 
s
 = 
	`gëív
("Image1Try");

200 i‡(
s
 =
NULL
)

201 
	`£ãnv
("Image1Try", "1");

203 
buf
[32];

205 
i
 = ()
	`sim∂e_°πoul
(
s
, 
NULL
, 10);

206 
	`•rötf
(
buf
, "%d", ++
i
);

207 
	`£ãnv
("Image1Try", 
buf
);

209 
	`ßvìnv
();

214 i‡(
addr
 == 0x8A200000)

216 if(
addr
 == 0x80200000)

218 if(
addr
 == 0x8A300000)

220 if(
addr
 == 0x88001000)

222 if(
addr
 == 0x8B800000)

226 #ifde‡
CONFIG_HAS_DATAFLASH


227 i‡(
	`addr_d©aÊash
(
addr
)){

228 
	`ªad_d©aÊash
(
addr
, (
image_hódî_t
), (*)&
hódî
);

233 #i‡
	`deföed
 (
CFG_ENV_IS_IN_NAND
)

234 i‡(
addr
 >
CFG_FLASH_BASE
)

235 
	`ø«nd_ªad
(&
hódî
, (*)(
addr
 - 
CFG_FLASH_BASE
), (
image_hódî_t
));

237 
	`memmove
 (&
hódî
, (*)
addr
, (
image_hódî_t
));

238 #ñi‡
	`deföed
 (
CFG_ENV_IS_IN_SPI
)

239 i‡(
addr
 >
CFG_FLASH_BASE
)

240 
	`ø•i_ªad
(&
hódî
, (*)(
addr
 - 
CFG_FLASH_BASE
), (
image_hódî_t
));

242 
	`memmove
 (&
hódî
, (*)
addr
, (
image_hódî_t
));

244 
	`memmove
 (&
hódî
, (*)
addr
, (
image_hódî_t
));

247 i‡(
	`¡ohl
(
hdr
->
ih_magic
Ë!
IH_MAGIC
) {

248 #ifde‡
__I386__


249 i‡(
	`Áke_hódî
(
hdr
, (*)
addr
, -1Ë!
NULL
) {

251 
addr
 -(
image_hódî_t
);

255 
vîify
 = 0;

259 
	`¥ötf
 ("Bad Magi¯Numbî,%08X \n",
	`¡ohl
(
hdr
->
ih_magic
));

260 #i‡
	`deföed
 (
CFG_ENV_IS_IN_NAND
)

261 
addr
 +
CFG_BLOCKSIZE
;

262 i‡((
addr
-
CFG_FLASH_BASE
) < 0x2000000)

264 
	`¥ötf
("Sórch hódî i¿√xàblockáddªs†%x\n",
addr
-
CFG_FLASH_BASE
);

270 
	`SHOW_BOOT_PROGRESS
 (-1);

277 
	`SHOW_BOOT_PROGRESS
 (2);

279 
d©a
 = (
ul⁄g
)&
hódî
;

280 
Àn
 = (
image_hódî_t
);

282 
checksum
 = 
	`¡ohl
(
hdr
->
ih_h¸c
);

283 
hdr
->
ih_h¸c
 = 0;

285 i‡(
	`¸c32
 (0, (*)
d©a
, 
Àn
Ë!
checksum
) {

286 
	`puts
 ("Bad Header Checksum\n");

287 
	`SHOW_BOOT_PROGRESS
 (-2);

290 
	`SHOW_BOOT_PROGRESS
 (3);

293 
	`¥öt_image_hdr
 ((
image_hódî_t
 *)
hdr
);

295 
d©a
 = 
addr
 + (
image_hódî_t
);

296 
Àn
 = 
	`¡ohl
(
hdr
->
ih_size
);

298 #ifde‡
CONFIG_HAS_DATAFLASH


299 i‡(
	`addr_d©aÊash
(
addr
)){

300 
	`ªad_d©aÊash
(
d©a
, 
Àn
, (*)
CFG_LOAD_ADDR
);

301 
d©a
 = 
CFG_LOAD_ADDR
;

305 #i‡
	`deföed
 (
CFG_ENV_IS_IN_NAND
)

306 i‡(
addr
 >
CFG_FLASH_BASE
) {

307 
ul⁄g
 
lﬂd_addr
 = 
CFG_SPINAND_LOAD_ADDR
;

308 
	`ø«nd_ªad
(
lﬂd_addr
, 
d©a
 - 
CFG_FLASH_BASE
, 
Àn
);

309 
d©a
 = 
lﬂd_addr
;

311 #ñi‡
	`deföed
 (
CFG_ENV_IS_IN_SPI
)

312 i‡(
addr
 >
CFG_FLASH_BASE
) {

313 
ul⁄g
 
lﬂd_addr
 = 
CFG_SPINAND_LOAD_ADDR
;

314 
	`ø•i_ªad
(
lﬂd_addr
, 
d©a
 - 
CFG_FLASH_BASE
, 
Àn
);

315 
d©a
 = 
lﬂd_addr
;

320 i‡(
vîify
) {

321 
	`puts
 (" Verifying Checksum ... ");

322 i‡(
	`¸c32
 (0, (*)
d©a
, 
Àn
Ë!
	`¡ohl
(
hdr
->
ih_d¸c
)) {

323 
	`¥ötf
 ("Bad Data CRC\n");

324 
	`SHOW_BOOT_PROGRESS
 (-3);

327 
	`puts
 ("OK\n");

329 
	`SHOW_BOOT_PROGRESS
 (4);

331 
Àn_±r
 = (
ul⁄g
 *)
d©a
;

333 #i‡
	`deföed
(
__PPC__
)

334 i‡(
hdr
->
ih_¨ch
 !
IH_CPU_PPC
)

335 #ñi‡
	`deföed
(
__ARM__
)

336 i‡(
hdr
->
ih_¨ch
 !
IH_CPU_ARM
)

337 #ñi‡
	`deföed
(
__I386__
)

338 i‡(
hdr
->
ih_¨ch
 !
IH_CPU_I386
)

339 #ñi‡
	`deföed
(
__mùs__
)

340 i‡(
hdr
->
ih_¨ch
 !
IH_CPU_MIPS
)

341 #ñi‡
	`deföed
(
__nios__
)

342 i‡(
hdr
->
ih_¨ch
 !
IH_CPU_NIOS
)

343 #ñi‡
	`deföed
(
__M68K__
)

344 i‡(
hdr
->
ih_¨ch
 !
IH_CPU_M68K
)

345 #ñi‡
	`deföed
(
__mi¸obœze__
)

346 i‡(
hdr
->
ih_¨ch
 !
IH_CPU_MICROBLAZE
)

347 #ñi‡
	`deföed
(
__nios2__
)

348 i‡(
hdr
->
ih_¨ch
 !
IH_CPU_NIOS2
)

350 #îr‹ 
Unknown
 
CPU
 
ty≥


353 
	`¥ötf
 ("Unsuµ‹ãd Archôe˘uª 0x%x\n", 
hdr
->
ih_¨ch
);

354 
	`SHOW_BOOT_PROGRESS
 (-4);

357 
	`SHOW_BOOT_PROGRESS
 (5);

359 
hdr
->
ih_ty≥
) {

360 #ifde‡
IH_TYPE_STANDALONE_SUPPORT


361 
IH_TYPE_STANDALONE
:

362 
«me
 = "Standalone Application";

364 i‡(
¨gc
 > 2) {

365 
hdr
->
ih_lﬂd
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

369 
IH_TYPE_KERNEL
:

370 
«me
 = "Kernel Image";

372 #ifde‡
IH_TYPE_MULTI_SUPPORT


373 
IH_TYPE_MULTI
:

374 
«me
 = "Multi-File Image";

375 
Àn
 = 
	`¡ohl
(
Àn_±r
[0]);

377 
d©a
 += 8;

378 
i
=1; 
Àn_±r
[i]; ++i)

379 
d©a
 += 4;

382 : 
	`¥ötf
 ("Wr⁄g ImagêTy≥ f‹ %†comm™d\n", 
cmdç
->
«me
);

383 
	`SHOW_BOOT_PROGRESS
 (-5);

386 
	`SHOW_BOOT_PROGRESS
 (6);

396 #ifde‡
CONFIG_AMIGAONEG3SE


401 
	`iˇche_dißbÀ
();

402 
	`övÆid©e_l1_ö°ru˘i⁄_ˇche
();

403 
	`Êush_d©a_ˇche
();

404 
	`dˇche_dißbÀ
();

407 
hdr
->
ih_comp
) {

408 #ifde‡
CONFIG_NONE


409 
IH_COMP_NONE
:

410 if(
	`¡ohl
(
hdr
->
ih_lﬂd
Ë=
addr
) {

411 
	`¥ötf
 (" XIP %†... ", 
«me
);

413 #i‡
	`deföed
(
CONFIG_HW_WATCHDOG
Ë|| deföed(
CONFIG_WATCHDOG
)

414 
size_t
 
l
 = 
Àn
;

415 *
to
 = (*)
	`¡ohl
(
hdr
->
ih_lﬂd
);

416 *
‰om
 = (*)
d©a
;

418 
	`¥ötf
 (" Lﬂdög %†... ", 
«me
);

420 
l
 > 0) {

421 
size_t
 
èû
 = (
l
 > 
CHUNKSZ
) ? CHUNKSZ :Ü;

422 
	`WATCHDOG_RESET
();

423 
	`memmove
 (
to
, 
‰om
, 
èû
);

424 
to
 +
èû
;

425 
‰om
 +
èû
;

426 
l
 -
èû
;

429 
	`memmove
 ((*Ë
	`¡ohl
(
hdr
->
ih_lﬂd
), (
uch¨
 *)
d©a
, 
Àn
);

434 #ifde‡
CONFIG_GZIP


435 
IH_COMP_GZIP
:

436 
	`¥ötf
 (" Uncom¥essög %†... ", 
«me
);

437 i‡(
	`gunzù
 ((*)
	`¡ohl
(
hdr
->
ih_lﬂd
), 
unc_Àn
,

438 (
uch¨
 *)
d©a
, &
Àn
) != 0) {

439 
	`puts
 ("GUNZIP ERROR - must RESET boardÅoÑecover\n");

440 
	`SHOW_BOOT_PROGRESS
 (-6);

441 
	`do_ª£t
 (
cmdç
, 
Êag
, 
¨gc
, 
¨gv
);

445 #ifde‡
CONFIG_BZIP2


446 
IH_COMP_BZIP2
:

447 
	`¥ötf
 (" Uncom¥essög %†... ", 
«me
);

453 
i
 = 
	`BZ2_bzBuffToBuffDecom¥ess
 ((*)
	`¡ohl
(
hdr
->
ih_lﬂd
),

454 &
unc_Àn
, (*)
d©a
, 
Àn
,

455 
CFG_MALLOC_LEN
 < (4096 * 1024), 0);

456 i‡(
i
 !
BZ_OK
) {

457 
	`¥ötf
 ("BUNZIP2 ERROR %d - mu° RESET bﬂrdÅÿªcovî\n", 
i
);

458 
	`SHOW_BOOT_PROGRESS
 (-6);

459 
	`udñay
(100000);

460 
	`do_ª£t
 (
cmdç
, 
Êag
, 
¨gc
, 
¨gv
);

464 #ifde‡
CONFIG_LZMA


465 
IH_COMP_LZMA
:

466 
	`¥ötf
 (" Uncom¥essög %†... ", 
«me
);

468 #ifde‡
CONFIG_UNCOMPRESS_TIME


469 
tBUncom¥ess
 = 
	`gë_ticks
();

471 
de°Lí
 = 0;

472 
i
 = 
	`lzmaBuffToBuffDecom¥ess
 ((*)
	`¡ohl
(
hdr
->
ih_lﬂd
),

473 &
de°Lí
, (*)
d©a
, 
Àn
);

474 i‡(
i
 !
LZMA_RESULT_OK
) {

475 
	`¥ötf
 ("LZMA ERROR %d - mu° RESET bﬂrdÅÿªcovî\n", 
i
);

476 
	`SHOW_BOOT_PROGRESS
 (-6);

477 
	`udñay
(100000);

478 
	`do_ª£t
 (
cmdç
, 
Êag
, 
¨gc
, 
¨gv
);

480 #ifde‡
CONFIG_UNCOMPRESS_TIME


481 
tAUncom¥ess
 = 
	`gë_ticks
();

482 
tAUncom¥ess
 = (tAUncom¥es†- 
tBUncom¥ess
) >> 10;

483 
	`¥ötf
("Uncom¥essi⁄Åimê: %lu/%lu\n",
tAUncom¥ess
,
	`gë_tb˛k
());

484 
	`¥ötf
("Uncom¥essi⁄Üígth i†%d\n",
de°Lí
);

488 #ifde‡
CONFIG_XZ


489 
IH_COMP_XZ
:

490 
	`¥ötf
 (" Uncom¥essög %†... ", 
«me
);

491 
i
 = 
	`unxz
((*)
d©a
, 
Àn
,

492 (*)
	`¡ohl
(
hdr
->
ih_lﬂd
), &
unc_Àn
);

494 i‡(
i
 != 0) {

495 
	`¥ötf
 ("XZ: uncompress or overwriteÉrror %d "

496 "- mu° RESET bﬂrdÅÿªcovî\n", 
i
);

497 
	`SHOW_BOOT_PROGRESS
 (-6);

498 
	`udñay
(100000);

499 
	`do_ª£t
 (
cmdç
, 
Êag
, 
¨gc
, 
¨gv
);

508 
	`¥ötf
 ("Unim∂emíãd com¥essi⁄Åy≥ %d\n", 
hdr
->
ih_comp
);

509 
	`SHOW_BOOT_PROGRESS
 (-7);

512 
	`puts
 ("OK\n");

513 
	`SHOW_BOOT_PROGRESS
 (7);

515 
hdr
->
ih_ty≥
) {

516 #ifde‡
IH_TYPE_STANDALONE_SUPPORT


517 
IH_TYPE_STANDALONE
:

527 i‡(((
s
 = 
	`gëív
("auto°¨t")Ë!
NULL
Ë&& (
	`°rcmp
(s,"no") == 0)) {

528 
buf
[32];

529 
	`•rötf
(
buf
, "%lX", 
Àn
);

530 
	`£ãnv
("fûesize", 
buf
);

534 
≠∂
 = ((*)(, *[]))
	`¡ohl
(
hdr
->
ih_ï
);

535 (*
≠∂
)(
¨gc
-1, &
¨gv
[1]);

538 
IH_TYPE_KERNEL
:

540 #ifde‡
IH_TYPE_MULTI_SUPPORT


541 
IH_TYPE_MULTI
:

549 
	`¥ötf
 ("C™'àboŸ imagêty≥ %d\n", 
hdr
->
ih_ty≥
);

550 
	`SHOW_BOOT_PROGRESS
 (-8);

553 
	`SHOW_BOOT_PROGRESS
 (8);

555 
hdr
->
ih_os
) {

557 
IH_OS_LINUX
:

558 #ifde‡
CONFIG_SILENT_CONSOLE


559 
	`fixup_sûít_löux
();

561 
	`do_boŸm_löux
 (
cmdç
, 
Êag
, 
¨gc
, 
¨gv
,

562 
addr
, 
Àn_±r
, 
vîify
);

565 #ifde‡
CONFIG_NETBSD


566 
IH_OS_NETBSD
:

567 
	`do_boŸm_√tbsd
 (
cmdç
, 
Êag
, 
¨gc
, 
¨gv
,

568 
addr
, 
Àn_±r
, 
vîify
);

572 #ifde‡
CONFIG_LYNXKDI


573 
IH_OS_LYNXOS
:

574 
	`do_boŸm_lynxkdi
 (
cmdç
, 
Êag
, 
¨gc
, 
¨gv
,

575 
addr
, 
Àn_±r
, 
vîify
);

579 #ifde‡
CONFIG_RTEMS


580 
IH_OS_RTEMS
:

581 
	`do_boŸm_πems
 (
cmdç
, 
Êag
, 
¨gc
, 
¨gv
,

582 
addr
, 
Àn_±r
, 
vîify
);

586 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_ELF
)

587 
IH_OS_VXWORKS
:

588 
	`do_boŸm_vxw‹ks
 (
cmdç
, 
Êag
, 
¨gc
, 
¨gv
,

589 
addr
, 
Àn_±r
, 
vîify
);

591 
IH_OS_QNX
:

592 
	`do_boŸm_qnxñf
 (
cmdç
, 
Êag
, 
¨gc
, 
¨gv
,

593 
addr
, 
Àn_±r
, 
vîify
);

596 #ifde‡
CONFIG_ARTOS


597 
IH_OS_ARTOS
:

598 
	`do_boŸm_¨tos
 (
cmdç
, 
Êag
, 
¨gc
, 
¨gv
,

599 
addr
, 
Àn_±r
, 
vîify
);

604 
	`SHOW_BOOT_PROGRESS
 (-9);

605 #ifde‡
DEBUG


606 
	`puts
 ("\n## ControlÑeturnedÅo monitor -Ñesetting...\n");

607 
	`do_ª£t
 (
cmdç
, 
Êag
, 
¨gc
, 
¨gv
);

610 
	}
}

612 #ifde‡
RALINK_CMDLINE


613 
U_BOOT_CMD
(

614 
boŸm
, 
CFG_MAXARGS
, 1, 
do_boŸm
,

622 #ifde‡
CONFIG_SILENT_CONSOLE


624 
	$fixup_sûít_löux
 ()

626 
DECLARE_GLOBAL_DATA_PTR
;

627 
buf
[256], *
°¨t
, *
íd
;

628 *
cmdlöe
 = 
	`gëív
 ("bootargs");

631 i‡(!(
gd
->
Êags
 & 
GD_FLG_SILENT
))

634 
	`debug
 ("bef‹êsûíàfix-up: %s\n", 
cmdlöe
);

635 i‡(
cmdlöe
) {

636 i‡((
°¨t
 = 
	`°r°r
 (
cmdlöe
, "c⁄sﬁe=")Ë!
NULL
) {

637 
íd
 = 
	`°rchr
 (
°¨t
, ' ');

638 
	`°∫˝y
 (
buf
, 
cmdlöe
, (
°¨t
 - cmdline + 8));

639 i‡(
íd
)

640 
	`°r˝y
 (
buf
 + (
°¨t
 - 
cmdlöe
 + 8), 
íd
);

642 
buf
[
°¨t
 - 
cmdlöe
 + 8] = '\0';

644 
	`°r˝y
 (
buf
, 
cmdlöe
);

645 
	`°rˇt
 (
buf
, " console=");

648 
	`°r˝y
 (
buf
, "console=");

651 
	`£ãnv
 ("boŸ¨gs", 
buf
);

652 
	`debug
 ("a·î sûíàfix-up: %s\n", 
buf
);

653 
	}
}

656 #ifde‡
CONFIG_PPC


658 
	$do_boŸm_löux
 (
cmd_tbl_t
 *
cmdç
, 
Êag
,

659 
¨gc
, *
¨gv
[],

660 
ul⁄g
 
addr
,

661 
ul⁄g
 *
Àn_±r
,

662 
vîify
)

664 
DECLARE_GLOBAL_DATA_PTR
;

666 
ul⁄g
 
•
;

667 
ul⁄g
 
Àn
, 
checksum
;

668 
ul⁄g
 
öôrd_°¨t
, 
öôrd_íd
;

669 
ul⁄g
 
cmd_°¨t
, 
cmd_íd
;

670 
ul⁄g
 
öôrd_high
;

671 
ul⁄g
 
d©a
;

672 
öôrd_c›y_to_øm
 = 1;

673 *
cmdlöe
;

674 *
s
;

675 
bd_t
 *
kbd
;

676 (*
kî√l
)(
bd_t
 *, 
ul⁄g
, ulong, ulong, ulong);

677 
image_hódî_t
 *
hdr
 = &
hódî
;

679 i‡((
s
 = 
	`gëív
 ("öôrd_high")Ë!
NULL
) {

683 
öôrd_high
 = 
	`sim∂e_°πoul
(
s
, 
NULL
, 16);

684 i‡(
öôrd_high
 == ~0)

685 
öôrd_c›y_to_øm
 = 0;

687 
öôrd_high
 = ~0;

690 #ifde‡
CONFIG_LOGBUFFER


691 
kbd
=
gd
->
bd
;

693 i‡(
öôrd_high
 < (
kbd
->
bi_memsize
-
LOGBUFF_LEN
-
LOGBUFF_OVERHEAD
))

694 
öôrd_high
 = 
kbd
->
bi_memsize
-
LOGBUFF_LEN
-
LOGBUFF_OVERHEAD
;

695 
	`debug
 ("## Logbuf„∏© 0x%08lX ", 
kbd
->
bi_memsize
-
LOGBUFF_LEN
);

708 
	`asm
–"m∏%0,1": "Ù"(
•
) : );

710 
	`debug
 ("## Cuºíà°ackÉnd†© 0x%08lX ", 
•
);

712 
•
 -= 2048;

713 i‡(
•
 > 
CFG_BOOTMAPSZ
)

714 
•
 = 
CFG_BOOTMAPSZ
;

715 
•
 &= ~0xF;

717 
	`debug
 ("=> së uµîÜimôÅÿ0x%08lX\n", 
•
);

719 
cmdlöe
 = (*)((
•
 - 
CFG_BARGSIZE
) & ~0xF);

720 
kbd
 = (
bd_t
 *)(((
ul⁄g
)
cmdlöe
 - (bd_t)) & ~0xF);

722 i‡((
s
 = 
	`gëív
("boŸ¨gs")Ë=
NULL
)

723 
s
 = "";

725 
	`°r˝y
 (
cmdlöe
, 
s
);

727 
cmd_°¨t
 = (
ul⁄g
)&
cmdlöe
[0];

728 
cmd_íd
 = 
cmd_°¨t
 + 
	`°æí
(
cmdlöe
);

730 *
kbd
 = *(
gd
->
bd
);

732 #ifdef 
DEBUG


733 
	`¥ötf
 ("## cmdlöê© 0x%08lX ... 0x%08lX\n", 
cmd_°¨t
, 
cmd_íd
);

735 
	`do_bdöfo
 (
NULL
, 0, 0, NULL);

738 i‡((
s
 = 
	`gëív
 ("˛ocks_ö_mhz")Ë!
NULL
) {

740 
kbd
->
bi_öt‰eq
 /= 1000000L;

741 
kbd
->
bi_bus‰eq
 /= 1000000L;

742 #i‡
	`deföed
(
CONFIG_MPC8220
)

743 
kbd
->
bi_öp‰eq
 /= 1000000L;

744 
kbd
->
bi_pci‰eq
 /= 1000000L;

745 
kbd
->
bi_≥v‰eq
 /= 1000000L;

746 
kbd
->
bi_Êb‰eq
 /= 1000000L;

747 
kbd
->
bi_vco‰eq
 /= 1000000L;

749 #i‡
	`deföed
(
CONFIG_8260
Ë|| deföed(
CONFIG_MPC8560
)

750 
kbd
->
bi_˝m‰eq
 /= 1000000L;

751 
kbd
->
bi_brg‰eq
 /= 1000000L;

752 
kbd
->
bi_scc‰eq
 /= 1000000L;

753 
kbd
->
bi_vco
 /= 1000000L;

755 #i‡
	`deföed
(
CONFIG_MPC5xxx
)

756 
kbd
->
bi_ùb‰eq
 /= 1000000L;

757 
kbd
->
bi_pci‰eq
 /= 1000000L;

761 
kî√l
 = ((*)(
bd_t
 *, 
ul⁄g
, ul⁄g, ul⁄g, ul⁄g))
hdr
->
ih_ï
;

766 i‡(
¨gc
 >= 3) {

767 
	`SHOW_BOOT_PROGRESS
 (9);

769 
addr
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

771 
	`¥ötf
 ("## Lﬂdög RAMDisk Imagê© %08lx ...\n", 
addr
);

774 
	`memmove
 (&
hódî
, (*)
addr
, (
image_hódî_t
));

776 i‡(
hdr
->
ih_magic
 !
IH_MAGIC
) {

777 
	`puts
 ("Bad Magic Number\n");

778 
	`SHOW_BOOT_PROGRESS
 (-10);

779 
	`do_ª£t
 (
cmdç
, 
Êag
, 
¨gc
, 
¨gv
);

782 
d©a
 = (
ul⁄g
)&
hódî
;

783 
Àn
 = (
image_hódî_t
);

785 
checksum
 = 
hdr
->
ih_h¸c
;

786 
hdr
->
ih_h¸c
 = 0;

788 i‡(
	`¸c32
 (0, (*)
d©a
, 
Àn
Ë!
checksum
) {

789 
	`puts
 ("Bad Header Checksum\n");

790 
	`SHOW_BOOT_PROGRESS
 (-11);

791 
	`do_ª£t
 (
cmdç
, 
Êag
, 
¨gc
, 
¨gv
);

794 
	`SHOW_BOOT_PROGRESS
 (10);

796 
	`¥öt_image_hdr
 (
hdr
);

798 
d©a
 = 
addr
 + (
image_hódî_t
);

799 
Àn
 = 
hdr
->
ih_size
;

801 i‡(
vîify
) {

802 
ul⁄g
 
csum
 = 0;

803 #i‡
	`deföed
(
CONFIG_HW_WATCHDOG
Ë|| deföed(
CONFIG_WATCHDOG
)

804 
ul⁄g
 
cd©a
 = 
d©a
, 
ed©a
 = cd©®+ 
Àn
;

807 
	`puts
 (" Verifying Checksum ... ");

809 #i‡
	`deföed
(
CONFIG_HW_WATCHDOG
Ë|| deföed(
CONFIG_WATCHDOG
)

811 
cd©a
 < 
ed©a
) {

812 
ul⁄g
 
chunk
 = 
ed©a
 - 
cd©a
;

814 i‡(
chunk
 > 
CHUNKSZ
)

815 
chunk
 = 
CHUNKSZ
;

816 
csum
 = 
	`¸c32
 (csum, (*)
cd©a
, 
chunk
);

817 
cd©a
 +
chunk
;

819 
	`WATCHDOG_RESET
();

822 
csum
 = 
	`¸c32
 (0, (*)
d©a
, 
Àn
);

825 i‡(
csum
 !
hdr
->
ih_d¸c
) {

826 
	`puts
 ("Bad Data CRC\n");

827 
	`SHOW_BOOT_PROGRESS
 (-12);

828 
	`do_ª£t
 (
cmdç
, 
Êag
, 
¨gc
, 
¨gv
);

830 
	`puts
 ("OK\n");

833 
	`SHOW_BOOT_PROGRESS
 (11);

835 i‡((
hdr
->
ih_os
 !
IH_OS_LINUX
) ||

836 (
hdr
->
ih_¨ch
 !
IH_CPU_PPC
) ||

837 (
hdr
->
ih_ty≥
 !
IH_TYPE_RAMDISK
) ) {

838 
	`puts
 ("No Linux PPC Ramdisk Image\n");

839 
	`SHOW_BOOT_PROGRESS
 (-13);

840 
	`do_ª£t
 (
cmdç
, 
Êag
, 
¨gc
, 
¨gv
);

846 #ifde‡
IH_TYPE_MULTI_SUPPORT


847 } i‡((
hdr
->
ih_ty≥
==
IH_TYPE_MULTI
Ë&& (
Àn_±r
[1])) {

848 
u_l⁄g
 
èû
 = 
	`¡ohl
(
Àn_±r
[0]) % 4;

849 
i
;

851 
	`SHOW_BOOT_PROGRESS
 (13);

854 
d©a
 = (
ul⁄g
)(&
Àn_±r
[2]);

856 
i
=1; 
Àn_±r
[i]; ++i)

857 
d©a
 += 4;

859 
d©a
 +
	`¡ohl
(
Àn_±r
[0]);

860 i‡(
èû
) {

861 
d©a
 +4 - 
èû
;

864 
Àn
 = 
	`¡ohl
(
Àn_±r
[1]);

870 
	`SHOW_BOOT_PROGRESS
 (14);

872 
Àn
 = 
d©a
 = 0;

875 i‡(!
d©a
) {

876 
	`debug
 ("No initrd\n");

879 i‡(
d©a
) {

880 i‡(!
öôrd_c›y_to_øm
) {

881 
öôrd_°¨t
 = 
d©a
;

882 
öôrd_íd
 = 
öôrd_°¨t
 + 
Àn
;

884 
öôrd_°¨t
 = (
ul⁄g
)
kbd
 - 
Àn
;

885 
öôrd_°¨t
 &= ~(4096 - 1);

887 i‡(
öôrd_high
) {

888 
ul⁄g
 
n•
;

900 
	`asm
–"m∏%0,1": "Ù"(
n•
) : );

901 
n•
 -= 2048;

902 
n•
 &= ~0xF;

903 i‡(
n•
 > 
öôrd_high
)

904 
n•
 = 
öôrd_high
;

905 
n•
 -
Àn
;

906 
n•
 &= ~(4096 - 1);

907 i‡(
n•
 >
•
)

908 
öôrd_°¨t
 = 
n•
;

911 
	`SHOW_BOOT_PROGRESS
 (12);

913 
	`debug
 ("## initrdát 0x%08lX ... 0x%08lX (len=%ld=0x%lX)\n",

914 
d©a
, d©®+ 
Àn
 - 1,Üen,Üen);

916 
öôrd_íd
 = 
öôrd_°¨t
 + 
Àn
;

917 
	`¥ötf
 (" Loading RamdiskÅo %08lx,Énd %08lx ... ",

918 
öôrd_°¨t
, 
öôrd_íd
);

919 #i‡
	`deföed
(
CONFIG_HW_WATCHDOG
Ë|| deföed(
CONFIG_WATCHDOG
)

921 
size_t
 
l
 = 
Àn
;

922 *
to
 = (*)
öôrd_°¨t
;

923 *
‰om
 = (*)
d©a
;

925 
l
 > 0) {

926 
size_t
 
èû
 = (
l
 > 
CHUNKSZ
) ? CHUNKSZ :Ü;

927 
	`WATCHDOG_RESET
();

928 
	`memmove
 (
to
, 
‰om
, 
èû
);

929 
to
 +
èû
;

930 
‰om
 +
èû
;

931 
l
 -
èû
;

935 
	`memmove
 ((*)
öôrd_°¨t
, (*)
d©a
, 
Àn
);

937 
	`puts
 ("OK\n");

940 
öôrd_°¨t
 = 0;

941 
öôrd_íd
 = 0;

945 
	`debug
 ("## Transferring controlÅo Linux (atáddress %08lx) ...\n",

946 (
ul⁄g
)
kî√l
);

948 
	`SHOW_BOOT_PROGRESS
 (15);

950 #i‡
	`deföed
(
CFG_INIT_RAM_LOCK
Ë&& !deföed(
CONFIG_E500
)

951 
	`u∆ock_øm_ö_ˇche
();

961 (*
kî√l
Ë(
kbd
, 
öôrd_°¨t
, 
öôrd_íd
, 
cmd_°¨t
, 
cmd_íd
);

962 
	}
}

965 #ifde‡
CONFIG_NETBSD


967 
	$do_boŸm_√tbsd
 (
cmd_tbl_t
 *
cmdç
, 
Êag
,

968 
¨gc
, *
¨gv
[],

969 
ul⁄g
 
addr
,

970 
ul⁄g
 *
Àn_±r
,

971 
vîify
)

973 
DECLARE_GLOBAL_DATA_PTR
;

975 
image_hódî_t
 *
hdr
 = &
hódî
;

977 (*
lﬂdî
)(
bd_t
 *, 
image_hódî_t
 *, *, *);

978 
image_hódî_t
 *
img_addr
;

979 *
c⁄sdev
;

980 *
cmdlöe
;

995 
img_addr
 = 0;

996 #ifde‡
IH_TYPE_MULTI_SUPPORT


997 i‡((
hdr
->
ih_ty≥
==
IH_TYPE_MULTI
Ë&& (
Àn_±r
[1]))

998 
img_addr
 = (
image_hódî_t
 *Ë
addr
;

1001 
c⁄sdev
 = "";

1002 #i‡ 
	`deföed
 (
CONFIG_8xx_CONS_SMC1
)

1003 
c⁄sdev
 = "smc1";

1004 #ñi‡
	`deföed
 (
CONFIG_8xx_CONS_SMC2
)

1005 
c⁄sdev
 = "smc2";

1006 #ñi‡
	`deföed
 (
CONFIG_8xx_CONS_SCC2
)

1007 
c⁄sdev
 = "scc2";

1008 #ñi‡
	`deföed
 (
CONFIG_8xx_CONS_SCC3
)

1009 
c⁄sdev
 = "scc3";

1012 i‡(
¨gc
 > 2) {

1013 
ul⁄g
 
Àn
;

1014 
i
;

1016 
i
=2, 
Àn
=0 ; i<
¨gc
 ; i+=1)

1017 
Àn
 +
	`°æí
 (
¨gv
[
i
]) + 1;

1018 
cmdlöe
 = 
	`mÆloc
 (
Àn
);

1020 
i
=2, 
Àn
=0 ; i<
¨gc
 ; i+=1) {

1021 i‡(
i
 > 2)

1022 
cmdlöe
[
Àn
++] = ' ';

1023 
	`•rötf
(&
cmdlöe
[
Àn
], 
¨gv
[
i
]);

1024 
Àn
 +
	`°æí
 (
¨gv
[
i
]);

1026 } i‡((
cmdlöe
 = 
	`gëív
("boŸ¨gs")Ë=
NULL
) {

1027 
cmdlöe
 = "";

1030 
lﬂdî
 = ((*)(
bd_t
 *, 
image_hódî_t
 *, *, *)Ë
hdr
->
ih_ï
;

1032 
	`¥ötf
 ("## Transferring controlÅo NetBSD stage-2Üoader (atáddress %08lx) ...\n",

1033 (
ul⁄g
)
lﬂdî
);

1035 
	`SHOW_BOOT_PROGRESS
 (15);

1044 (*
lﬂdî
Ë(
gd
->
bd
, 
img_addr
, 
c⁄sdev
, 
cmdlöe
);

1045 
	}
}

1048 #i‡
deföed
(
CONFIG_ARTOS
Ë&& deföed(
CONFIG_PPC
)

1051 
	$uch¨
 (*
ív_gë_ch¨
)();

1054 
	$do_boŸm_¨tos
 (
cmd_tbl_t
 *
cmdç
, 
Êag
,

1055 
¨gc
, *
¨gv
[],

1056 
ul⁄g
 
addr
,

1057 
ul⁄g
 *
Àn_±r
,

1058 
vîify
)

1060 
DECLARE_GLOBAL_DATA_PTR
;

1061 
ul⁄g
 
t›
;

1062 *
s
, *
cmdlöe
;

1063 **
fwív
, **
ss
;

1064 
i
, 
j
, 
nxt
, 
Àn
, 
ívno
, 
ívsz
;

1065 
bd_t
 *
kbd
;

1066 (*
íåy
)(
bd_t
 *
bd
, *
cmdlöe
, **
fwív
, 
ul⁄g
 
t›
);

1067 
image_hódî_t
 *
hdr
 = &
hódî
;

1074 #ifde‡
CONFIG_PPC


1076 
asm
 vﬁ©ûê("m∏%0,1" : "Ù"(
t›
) );

1078 
	`debug
 ("## Cuºíà°ackÉnd†© 0x%08lX ", 
t›
);

1080 
t›
 -= 2048;

1081 i‡(
t›
 > 
CFG_BOOTMAPSZ
)

1082 
t›
 = 
CFG_BOOTMAPSZ
;

1083 
t›
 &= ~0xF;

1085 
	`debug
 ("=> së uµîÜimôÅÿ0x%08lX\n", 
t›
);

1088 i‡((
s
 = 
	`gëív
("aboŸ¨gs")Ë=
NULL
 && (s = getenv("bootargs")) == NULL)

1089 
s
 = "";

1092 
Àn
 = 
	`°æí
(
s
);

1093 
t›
 = (t› - (
Àn
 + 1)) & ~0xF;

1094 
cmdlöe
 = (*)
t›
;

1095 
	`debug
 ("## cmdlöê© 0x%08lX ", 
t›
);

1096 
	`°r˝y
(
cmdlöe
, 
s
);

1099 
t›
 = (t› - (
bd_t
)) & ~0xF;

1100 
	`debug
 ("## bdáà0x%08lX ", 
t›
);

1101 
kbd
 = (
bd_t
 *)
t›
;

1102 
	`mem˝y
(
kbd
, 
gd
->
bd
, (
bd_t
));

1105 
ívno
 = 0;

1106 
ívsz
 = 0;

1107 
i
 = 0; 
	`ív_gë_ch¨
(iË!'\0'; i = 
nxt
 + 1) {

1108 
nxt
 = 
i
; 
	`ív_gë_ch¨
(nxt) != '\0'; ++nxt)

1110 
ívno
++;

1111 
ívsz
 +(
nxt
 - 
i
) + 1;

1113 
ívno
++;

1114 
	`debug
 ("## %uÉnvv¨†tŸÆ sizê%u ", 
ívno
, 
ívsz
);

1116 
t›
 = (t› - (**)*
ívno
) & ~0xF;

1117 
fwív
 = (**)
t›
;

1118 
	`debug
 ("## fwíváà0x%08lX ", 
t›
);

1120 
t›
 = (t› - 
ívsz
) & ~0xF;

1121 
s
 = (*)
t›
;

1122 
ss
 = 
fwív
;

1125 
i
 = 0; 
	`ív_gë_ch¨
(iË!'\0'; i = 
nxt
 + 1) {

1126 
nxt
 = 
i
; 
	`ív_gë_ch¨
(nxt) != '\0'; ++nxt)

1128 *
ss
++ = 
s
;

1129 
j
 = 
i
; j < 
nxt
; ++j)

1130 *
s
++ = 
	`ív_gë_ch¨
(
j
);

1131 *
s
++ = '\0';

1133 *
ss
++ = 
NULL
;

1135 
íåy
 = ((*)(
bd_t
 *, *, **, 
ul⁄g
))
	`¡ohl
(
hdr
->
ih_ï
);

1136 (*
íåy
)(
kbd
, 
cmdlöe
, 
fwív
, 
t›
);

1137 
	}
}

1141 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_BOOTD
)

1142 
	$do_boŸd
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

1144 
rcode
 = 0;

1145 #i‚de‡
CFG_HUSH_PARSER


1146 i‡(
	`run_comm™d
 (
	`gëív
 ("boŸcmd"), 
Êag
Ë< 0Ë
rcode
 = 1;

1148 i‡(
	`∑r£_°rög_ouãr
(
	`gëív
("bootcmd"),

1149 
FLAG_PARSE_SEMICOLON
 | 
FLAG_EXIT_FROM_LOOP
Ë!0 ) 
rcode
 = 1;

1151  
rcode
;

1152 
	}
}

1154 
U_BOOT_CMD
(

1155 
boŸ
, 1, 1, 
do_boŸd
,

1157 
NULL


1161 
U_BOOT_CMD
(

1162 
boŸd
, 1, 1, 
do_boŸd
,

1164 
NULL


1169 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_IMI
)

1170 #ifde‡
RT2880_U_BOOT_CMD_OPEN


1171 
	$do_imöfo
 ( 
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

1173 
¨g
;

1174 
ul⁄g
 
addr
;

1175 
rcode
=0;

1177 i‡(
¨gc
 < 2) {

1178  
	`image_öfo
 (
lﬂd_addr
);

1181 
¨g
=1;árg <
¨gc
; ++arg) {

1182 
addr
 = 
	`sim∂e_°πoul
(
¨gv
[
¨g
], 
NULL
, 16);

1183 i‡(
	`image_öfo
 (
addr
Ë!0Ë
rcode
 = 1;

1186  
rcode
;

1187 
	}
}

1189 
	$image_öfo
 (
ul⁄g
 
addr
)

1192 
ul⁄g
 
d©a
, 
Àn
, 
checksum
;

1193 
image_hódî_t
 *
hdr
 = &
hódî
;

1195 
	`¥ötf
 ("\n## Checkög Imagê© %08lx ...\n", 
addr
);

1198 
	`memmove
 (&
hódî
, (*)
addr
, (
image_hódî_t
));

1200 i‡(
	`¡ohl
(
hdr
->
ih_magic
Ë!
IH_MAGIC
) {

1201 
	`puts
 (" Bad Magic Number\n");

1205 
d©a
 = (
ul⁄g
)&
hódî
;

1206 
Àn
 = (
image_hódî_t
);

1208 
checksum
 = 
	`¡ohl
(
hdr
->
ih_h¸c
);

1209 
hdr
->
ih_h¸c
 = 0;

1211 i‡(
	`¸c32
 (0, (*)
d©a
, 
Àn
Ë!
checksum
) {

1212 
	`puts
 (" Bad Header Checksum\n");

1217 
	`¥öt_image_hdr
 ((
image_hódî_t
 *)
addr
);

1219 
d©a
 = 
addr
 + (
image_hódî_t
);

1220 
Àn
 = 
	`¡ohl
(
hdr
->
ih_size
);

1222 
	`puts
 (" Verifying Checksum ... ");

1223 i‡(
	`¸c32
 (0, (*)
d©a
, 
Àn
Ë!
	`¡ohl
(
hdr
->
ih_d¸c
)) {

1224 
	`puts
 (" Bad Data CRC\n");

1227 
	`puts
 ("OK\n");

1230 
	}
}

1233 #ifde‡
RT2880_U_BOOT_CMD_OPEN


1234 
U_BOOT_CMD
(

1235 
imöfo
, 
CFG_MAXARGS
, 1, 
do_imöfo
,

1245 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_IMLS
)

1249 #ifde‡
RT2880_U_BOOT_CMD_OPEN


1251 
	$do_imls
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

1255 
Êash_öfo_t
 *
öfo
;

1256 
i
, 
j
;

1257 
image_hódî_t
 *
hdr
;

1258 
ul⁄g
 
d©a
, 
Àn
, 
checksum
;

1260 
i
=0, 
öfo
=&
Êash_öfo
[0]; i<
CFG_MAX_FLASH_BANKS
; ++i, ++info) {

1261 i‡(
öfo
->
Êash_id
 =
FLASH_UNKNOWN
)

1262 
√xt_b™k
;

1263 
j
=0; j<
CFG_MAX_FLASH_SECT
; ++j) {

1265 i‡(!(
hdr
=(
image_hódî_t
 *)
öfo
->
°¨t
[
j
]) ||

1266 (
	`¡ohl
(
hdr
->
ih_magic
Ë!
IH_MAGIC
))

1267 
√xt_£˘‹
;

1270 
	`memmove
 (&
hódî
, (*)
hdr
, (
image_hódî_t
));

1272 
checksum
 = 
	`¡ohl
(
hódî
.
ih_h¸c
);

1273 
hódî
.
ih_h¸c
 = 0;

1275 i‡(
	`¸c32
 (0, (*)&
hódî
, (
image_hódî_t
))

1276 !
checksum
)

1277 
√xt_£˘‹
;

1279 
	`¥ötf
 ("Imagê© %08lX:\n", (
ul⁄g
)
hdr
);

1280 
	`¥öt_image_hdr
–
hdr
 );

1282 
d©a
 = (
ul⁄g
)
hdr
 + (
image_hódî_t
);

1283 
Àn
 = 
	`¡ohl
(
hdr
->
ih_size
);

1285 
	`puts
 (" Verifying Checksum ... ");

1286 i‡(
	`¸c32
 (0, (*)
d©a
, 
Àn
Ë!
	`¡ohl
(
hdr
->
ih_d¸c
)) {

1287 
	`puts
 (" Bad Data CRC\n");

1289 
	`puts
 ("OK\n");

1290 
√xt_£˘‹
: ;

1292 
√xt_b™k
: ;

1296 
	}
}

1298 
U_BOOT_CMD
(

1299 
imls
, 1, 1, 
do_imls
,

1310 
	$¥öt_image_hdr
 (
image_hódî_t
 *
hdr
)

1312 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_DATE
Ë|| 
	`deföed
(
CONFIG_TIMESTAMP
)

1313 
time_t
 
time°amp
 = (time_t)
	`¡ohl
(
hdr
->
ih_time
);

1314 
πc_time
 
tm
;

1317 
	`¥ötf
 (" ImagêName: %.*s\n", 
IH_NMLEN
, 
hdr
->
ih_«me
);

1318 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_DATE
Ë|| 
	`deföed
(
CONFIG_TIMESTAMP
)

1319 
	`to_tm
 (
time°amp
, &
tm
);

1320 
	`¥ötf
 (" Created: %4d-%02d-%02d %2d:%02d:%02d UTC\n",

1321 
tm
.
tm_yór
,Åm.
tm_m⁄
,Åm.
tm_mday
,

1322 
tm
.
tm_hour
,Åm.
tm_mö
,Åm.
tm_£c
);

1325 
	`puts
 (" ImagêTy≥: "); 
	`¥öt_ty≥
(
hdr
);

1326 
	`¥ötf
 ("\¿ D©®Size: %d Byã†", 
	`¡ohl
(
hdr
->
ih_size
));

1327 
	`¥öt_size
 (
	`¡ohl
(
hdr
->
ih_size
), "\n");

1328 
	`¥ötf
 (" Load Address: %08x\n"

1330 
	`¡ohl
(
hdr
->
ih_lﬂd
),Çtohl(hdr->
ih_ï
));

1332 #ifde‡
IH_TYPE_MULTI_SUPPORT


1333 i‡(
hdr
->
ih_ty≥
 =
IH_TYPE_MULTI
) {

1334 
i
;

1335 
ul⁄g
 
Àn
;

1336 
ul⁄g
 *
Àn_±r
 = (ul⁄g *)((ul⁄g)
hdr
 + (
image_hódî_t
));

1338 
	`puts
 (" Contents:\n");

1339 
i
=0; (
Àn
 = 
	`¡ohl
(*
Àn_±r
)); ++i, ++len_ptr) {

1340 
	`¥ötf
 (" Imagê%d: %8ld Byã†", 
i
, 
Àn
);

1341 
	`¥öt_size
 (
Àn
, "\n");

1345 
	}
}

1349 
	$¥öt_ty≥
 (
image_hódî_t
 *
hdr
)

1351 *
os
, *
¨ch
, *
ty≥
, *
comp
;

1353 
hdr
->
ih_os
) {

1354 
IH_OS_INVALID
: 
os
 = "Invalid OS"; ;

1355 
IH_OS_NETBSD
: 
os
 = "NetBSD"; ;

1356 
IH_OS_LINUX
: 
os
 = "Linux"; ;

1357 
IH_OS_VXWORKS
: 
os
 = "VxWorks"; ;

1358 
IH_OS_QNX
: 
os
 = "QNX"; ;

1359 
IH_OS_U_BOOT
: 
os
 = "U-Boot"; ;

1360 
IH_OS_RTEMS
: 
os
 = "RTEMS"; ;

1361 #ifde‡
CONFIG_ARTOS


1362 
IH_OS_ARTOS
: 
os
 = "ARTOS"; ;

1364 #ifde‡
CONFIG_LYNXKDI


1365 
IH_OS_LYNXOS
: 
os
 = "LynxOS"; ;

1367 : 
os
 = "Unknown OS"; ;

1370 
hdr
->
ih_¨ch
) {

1371 
IH_CPU_INVALID
: 
¨ch
 = "Invalid CPU"; ;

1372 
IH_CPU_ALPHA
: 
¨ch
 = "Alpha"; ;

1373 
IH_CPU_ARM
: 
¨ch
 = "ARM"; ;

1374 
IH_CPU_I386
: 
¨ch
 = "Intel x86"; ;

1375 
IH_CPU_IA64
: 
¨ch
 = "IA64"; ;

1376 
IH_CPU_MIPS
: 
¨ch
 = "MIPS"; ;

1377 
IH_CPU_MIPS64
: 
¨ch
 = "MIPS 64 Bit"; ;

1378 
IH_CPU_PPC
: 
¨ch
 = "PowerPC"; ;

1379 
IH_CPU_S390
: 
¨ch
 = "IBM S390"; ;

1380 
IH_CPU_SH
: 
¨ch
 = "SuperH"; ;

1381 
IH_CPU_SPARC
: 
¨ch
 = "SPARC"; ;

1382 
IH_CPU_SPARC64
: 
¨ch
 = "SPARC 64 Bit"; ;

1383 
IH_CPU_M68K
: 
¨ch
 = "M68K"; ;

1384 
IH_CPU_MICROBLAZE
: 
¨ch
 = "Microblaze"; ;

1385 : 
¨ch
 = "Unknown Architecture"; ;

1388 
hdr
->
ih_ty≥
) {

1389 
IH_TYPE_INVALID
: 
ty≥
 = "Invalid Image"; ;

1390 #ifde‡
IH_TYPE_STANDALONE_SUPPORT


1391 
IH_TYPE_STANDALONE
:
ty≥
 = "Standalone Program"; ;

1393 
IH_TYPE_KERNEL
: 
ty≥
 = "Kernel Image"; ;

1394 
IH_TYPE_RAMDISK
: 
ty≥
 = "RAMDisk Image"; ;

1395 #ifde‡
IH_TYPE_MULTI_SUPPORT


1396 
IH_TYPE_MULTI
: 
ty≥
 = "Multi-File Image"; ;

1398 
IH_TYPE_FIRMWARE
: 
ty≥
 = "Firmware"; ;

1399 
IH_TYPE_SCRIPT
: 
ty≥
 = "Script"; ;

1400 : 
ty≥
 = "Unknown Image"; ;

1403 
hdr
->
ih_comp
) {

1404 
IH_COMP_NONE
: 
comp
 = "uncompressed"; ;

1405 
IH_COMP_GZIP
: 
comp
 = "gzip compressed"; ;

1406 
IH_COMP_BZIP2
: 
comp
 = "bzip2 compressed"; ;

1407 
IH_COMP_LZMA
: 
comp
 = "lzma compressed"; ;

1408 
IH_COMP_XZ
: 
comp
 = "xz compressed"; ;

1409 : 
comp
 = "unknown compression"; ;

1412 
	`¥ötf
 ("%†%†%†(%s)", 
¨ch
, 
os
, 
ty≥
, 
comp
);

1413 
	}
}

1415 #ifde‡
CONFIG_GZIP


1416 
	#ZALLOC_ALIGNMENT
 16

	)

1418 *
	$zÆloc
(*
x
, 
ôems
, 
size
)

1420 *
p
;

1422 
size
 *
ôems
;

1423 
size
 = (sizê+ 
ZALLOC_ALIGNMENT
 - 1) & ~(ZALLOC_ALIGNMENT - 1);

1425 
p
 = 
	`mÆloc
 (
size
);

1427  (
p
);

1428 
	}
}

1430 
	$z‰ì
(*
x
, *
addr
, 
nb
)

1432 
	`‰ì
 (
addr
);

1433 
	}
}

1436 
	#HEAD_CRC
 2

	)

1437 
	#EXTRA_FIELD
 4

	)

1438 
	#ORIG_NAME
 8

	)

1439 
	#COMMENT
 0x10

	)

1440 
	#RESERVED
 0xe0

	)

1442 
	#DEFLATED
 8

	)

1444 
	$gunzù
(*
d°
, 
d°Àn
, *
§c
, *
À≈
)

1446 
z_°ªam
 
s
;

1447 
r
, 
i
, 
Êags
;

1450 
i
 = 10;

1451 
Êags
 = 
§c
[3];

1452 i‡(
§c
[2] !
DEFLATED
 || (
Êags
 & 
RESERVED
) != 0) {

1453 
	`puts
 ("Error: Bad gzipped data\n");

1456 i‡((
Êags
 & 
EXTRA_FIELD
) != 0)

1457 
i
 = 12 + 
§c
[10] + (src[11] << 8);

1458 i‡((
Êags
 & 
ORIG_NAME
) != 0)

1459 
§c
[
i
++] != 0)

1461 i‡((
Êags
 & 
COMMENT
) != 0)

1462 
§c
[
i
++] != 0)

1464 i‡((
Êags
 & 
HEAD_CRC
) != 0)

1465 
i
 += 2;

1466 i‡(
i
 >*
À≈
) {

1467 
	`puts
 ("Error: gunzip out of data in header\n");

1471 
s
.
zÆloc
 = zalloc;

1472 
s
.
z‰ì
 = zfree;

1473 #i‡
	`deföed
(
CONFIG_HW_WATCHDOG
Ë|| deföed(
CONFIG_WATCHDOG
)

1474 
s
.
outcb
 = (
cb_func
)
WATCHDOG_RESET
;

1476 
s
.
outcb
 = 
Z_NULL
;

1479 
r
 = 
	`öÊ©eInô2
(&
s
, -
MAX_WBITS
);

1480 i‡(
r
 !
Z_OK
) {

1481 
	`¥ötf
 ("Eº‹: inÊ©eInô2(Ëªtu∫ed %d\n", 
r
);

1484 
s
.
√xt_ö
 = 
§c
 + 
i
;

1485 
s
.
avaû_ö
 = *
À≈
 - 
i
;

1486 
s
.
√xt_out
 = 
d°
;

1487 
s
.
avaû_out
 = 
d°Àn
;

1488 
r
 = 
	`öÊ©e
(&
s
, 
Z_FINISH
);

1489 i‡(
r
 !
Z_OK
 &&Ñ !
Z_STREAM_END
) {

1490 
	`¥ötf
 ("Eº‹: inÊ©e(Ëªtu∫ed %d\n", 
r
);

1493 *
À≈
 = 
s
.
√xt_out
 - (*Ë
d°
;

1494 
	`öÊ©eEnd
(&
s
);

1497 
	}
}

1499 #ifde‡
CONFIG_BZIP2


1500 
	$bz_öã∫Æ_îr‹
(
îrcode
)

1502 
	`¥ötf
 ("BZIP2 i¡î«»îr‹ %d\n", 
îrcode
);

1503 
	}
}

1506 #ifde‡
CONFIG_RTEMS


1508 
	$do_boŸm_πems
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[],

1509 
ul⁄g
 
addr
, ul⁄g *
Àn_±r
, 
vîify
)

1511 
DECLARE_GLOBAL_DATA_PTR
;

1512 
image_hódî_t
 *
hdr
 = &
hódî
;

1513 (*
íåy_poöt
)(
bd_t
 *);

1515 
íåy_poöt
 = ((*)(
bd_t
 *)Ë
hdr
->
ih_ï
;

1517 
	`¥ötf
 ("## Transferring controlÅo RTEMS (atáddress %08lx) ...\n",

1518 (
ul⁄g
)
íåy_poöt
);

1520 
	`SHOW_BOOT_PROGRESS
 (15);

1527 (*
íåy_poöt
 ) ( 
gd
->
bd
 );

1528 
	}
}

1531 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_ELF
)

1533 
	$do_boŸm_vxw‹ks
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[],

1534 
ul⁄g
 
addr
, ul⁄g *
Àn_±r
, 
vîify
)

1536 
image_hódî_t
 *
hdr
 = &
hódî
;

1537 
°r
[80];

1539 
	`•rötf
(
°r
, "%x", 
hdr
->
ih_ï
);

1540 
	`£ãnv
("lﬂdaddr", 
°r
);

1541 
	`do_boŸvx
(
cmdç
, 0, 0, 
NULL
);

1542 
	}
}

1545 
	$do_boŸm_qnxñf
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[],

1546 
ul⁄g
 
addr
, ul⁄g *
Àn_±r
, 
vîify
)

1548 
image_hódî_t
 *
hdr
 = &
hódî
;

1549 *
loˇl_¨gs
[2];

1550 
°r
[16];

1552 
	`•rötf
(
°r
, "%x", 
hdr
->
ih_ï
);

1553 
loˇl_¨gs
[0] = 
¨gv
[0];

1554 
loˇl_¨gs
[1] = 
°r
;

1555 
	`do_boŸñf
(
cmdç
, 0, 2, 
loˇl_¨gs
);

1556 
	}
}

1559 #ifde‡
CONFIG_LYNXKDI


1561 
	$do_boŸm_lynxkdi
 (
cmd_tbl_t
 *
cmdç
, 
Êag
,

1562 
¨gc
, *
¨gv
[],

1563 
ul⁄g
 
addr
,

1564 
ul⁄g
 *
Àn_±r
,

1565 
vîify
)

1567 
	`lynxkdi_boŸ
–&
hódî
 );

1568 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/cmd_console.c

27 
	~<comm⁄.h
>

28 
	~<comm™d.h
>

29 
	~<devi˚s.h
>

31 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_CONSOLE
)

32 #ifde‡
RT2880_U_BOOT_CMD_OPEN


34 
_do_c⁄öfo
 ();

35 
	$do_c⁄öfo
 (
cmd_tbl_t
 * 
cmd
, 
Êag
, 
¨gc
, *
¨gv
[])

37 
i
, 
l
;

41 
	`puts
 ("List ofávailable devices:\n");

43 
i
 = 1; i <
	`Li°NumIãms
 (
devli°
); i++) {

44 
devi˚_t
 *
dev
 = 
	`Li°GëPåToIãm
 (
devli°
, 
i
);

46 
	`¥ötf
 ("%-8s %08x %c%c%c ",

47 
dev
->
«me
,

48 
dev
->
Êags
,

49 (
dev
->
Êags
 & 
DEV_FLAGS_SYSTEM
) ? 'S' : '.',

50 (
dev
->
Êags
 & 
DEV_FLAGS_INPUT
) ? 'I' : '.',

51 (
dev
->
Êags
 & 
DEV_FLAGS_OUTPUT
) ? 'O' : '.');

53 
l
 = 0;Ü < 
MAX_FILES
;Ü++) {

54 i‡(
°dio_devi˚s
[
l
] =
dev
) {

55 
	`¥ötf
 ("%†", 
°dio_«mes
[
l
]);

58 
	`putc
 ('\n');

61 
	}
}

66 
U_BOOT_CMD
(

67 
c⁄öfo
, 3, 1, 
do_c⁄öfo
,

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/cmd_fat.c

27 
	~<comm⁄.h
>

28 
	~<comm™d.h
>

29 
	~<s_ªc‹d.h
>

30 
	~<√t.h
>

31 
	~<©a.h
>

33 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_FAT
)

35 #unde‡
DEBUG


37 
	~<Át.h
>

40 
block_dev_desc_t
 *
	$gë_dev
 (* 
i‚ame
, 
dev
)

42 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_IDE
)

43 i‡(
	`°∫cmp
(
i‚ame
,"ide",3)==0) {

44 
block_dev_desc_t
 * 
	`ide_gë_dev
(
dev
);

45 (
	`ide_gë_dev
(
dev
));

48 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_SCSI
)

49 i‡(
	`°∫cmp
(
i‚ame
,"scsi",4)==0) {

50 
block_dev_desc_t
 * 
	`scsi_gë_dev
(
dev
);

51 (
	`scsi_gë_dev
(
dev
));

54 #i‡((
CONFIG_COMMANDS
 & 
CFG_CMD_USB
Ë&& 
	`deföed
(
CONFIG_USB_STORAGE
))

55 i‡(
	`°∫cmp
(
i‚ame
,"usb",3)==0) {

56 
block_dev_desc_t
 * 
	`usb_°‹_gë_dev
(
dev
);

57 (
	`usb_°‹_gë_dev
(
dev
));

60 #i‡
	`deföed
(
CONFIG_MMC
)

61 i‡(
	`°∫cmp
(
i‚ame
,"mmc",3)==0) {

62 
block_dev_desc_t
 * 
	`mmc_gë_dev
(
dev
);

63 (
	`mmc_gë_dev
(
dev
));

66 #i‡
	`deföed
(
CONFIG_SYSTEMACE
)

67 i‡(
	`°rcmp
(
i‚ame
,"ace")==0) {

68 
block_dev_desc_t
 * 
	`sy°ema˚_gë_dev
(
dev
);

69 (
	`sy°ema˚_gë_dev
(
dev
));

72  
NULL
;

73 
	}
}

76 
	$do_Át_f¶ﬂd
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

78 
size
;

79 
off£t
;

80 
cou¡
;

81 
buf
 [12];

82 
block_dev_desc_t
 *
dev_desc
=
NULL
;

83 
dev
=0;

84 
∑π
=1;

85 *
ï
;

87 i‡(
¨gc
 < 5) {

88 
	`¥ötf
 ("usage: fatload <interface> <dev[:part]> <addr> <filename> [bytes]\n");

91 
dev
 = ()
	`sim∂e_°πoul
 (
¨gv
[2], &
ï
, 16);

92 
dev_desc
=
	`gë_dev
(
¨gv
[1],
dev
);

93 i‡(
dev_desc
==
NULL
) {

94 
	`puts
 ("\n** Invalid boot device **\n");

97 i‡(*
ï
) {

98 i‡(*
ï
 != ':') {

99 
	`puts
 ("\n** Invalid boot device, use `dev[:part]' **\n");

102 
∑π
 = ()
	`sim∂e_°πoul
(++
ï
, 
NULL
, 16);

104 i‡(
	`Át_ªgi°î_devi˚
(
dev_desc
,
∑π
)!=0) {

105 
	`¥ötf
 ("\n** U«bÀÅÿu£ %†%d:%d f‹ f©lﬂd **\n",
¨gv
[1],
dev
,
∑π
);

108 
off£t
 = 
	`sim∂e_°πoul
 (
¨gv
[3], 
NULL
, 16);

109 i‡(
¨gc
 == 6)

110 
cou¡
 = 
	`sim∂e_°πoul
 (
¨gv
[5], 
NULL
, 16);

112 
cou¡
 = 0;

113 
size
 = 
	`fûe_Át_ªad
 (
¨gv
[4], (*Ë
off£t
, 
cou¡
);

115 if(
size
==-1) {

116 
	`¥ötf
("\n** U«bÀÅÿªad \"%s\" from %†%d:%d **\n",
¨gv
[4],¨gv[1],
dev
,
∑π
);

120 
	`¥ötf
 ("\n%ld byã†ªad\n", 
size
);

122 
	`•rötf
(
buf
, "%lX", 
size
);

123 
	`£ãnv
("fûesize", 
buf
);

126 
	}
}

129 
U_BOOT_CMD
(

130 
Áéﬂd
, 6, 0, 
do_Át_f¶ﬂd
,

137 
	$do_Át_ls
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

139 *
fûíame
 = "/";

140 
ªt
;

141 
dev
=0;

142 
∑π
=1;

143 *
ï
;

144 
block_dev_desc_t
 *
dev_desc
=
NULL
;

146 i‡(
¨gc
 < 3) {

147 
	`¥ötf
 ("usage: fatls <interface> <dev[:part]> [directory]\n");

150 
dev
 = ()
	`sim∂e_°πoul
 (
¨gv
[2], &
ï
, 16);

151 
dev_desc
=
	`gë_dev
(
¨gv
[1],
dev
);

152 i‡(
dev_desc
==
NULL
) {

153 
	`puts
 ("\n** Invalid boot device **\n");

156 i‡(*
ï
) {

157 i‡(*
ï
 != ':') {

158 
	`puts
 ("\n** Invalid boot device, use `dev[:part]' **\n");

161 
∑π
 = ()
	`sim∂e_°πoul
(++
ï
, 
NULL
, 16);

163 i‡(
	`Át_ªgi°î_devi˚
(
dev_desc
,
∑π
)!=0) {

164 
	`¥ötf
 ("\n** U«bÀÅÿu£ %†%d:%d f‹ f©l†**\n",
¨gv
[1],
dev
,
∑π
);

167 i‡(
¨gc
 == 4)

168 
ªt
 = 
	`fûe_Át_ls
 (
¨gv
[3]);

170 
ªt
 = 
	`fûe_Át_ls
 (
fûíame
);

172 if(
ªt
!=0)

173 
	`¥ötf
("No Fat FS detected\n");

174  (
ªt
);

175 
	}
}

177 
U_BOOT_CMD
(

178 
Áés
, 4, 1, 
do_Át_ls
,

184 
	$do_Át_fsöfo
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

186 
dev
=0;

187 
∑π
=1;

188 *
ï
;

189 
block_dev_desc_t
 *
dev_desc
=
NULL
;

191 i‡(
¨gc
 < 2) {

192 
	`¥ötf
 ("usage: fatinfo <interface> <dev[:part]>\n");

195 
dev
 = ()
	`sim∂e_°πoul
 (
¨gv
[2], &
ï
, 16);

196 
dev_desc
=
	`gë_dev
(
¨gv
[1],
dev
);

197 i‡(
dev_desc
==
NULL
) {

198 
	`puts
 ("\n** Invalid boot device **\n");

201 i‡(*
ï
) {

202 i‡(*
ï
 != ':') {

203 
	`puts
 ("\n** Invalid boot device, use `dev[:part]' **\n");

206 
∑π
 = ()
	`sim∂e_°πoul
(++
ï
, 
NULL
, 16);

208 i‡(
	`Át_ªgi°î_devi˚
(
dev_desc
,
∑π
)!=0) {

209 
	`¥ötf
 ("\n** U«bÀÅÿu£ %†%d:%d f‹ f©öfÿ**\n",
¨gv
[1],
dev
,
∑π
);

212  (
	`fûe_Át_dëe˘fs
 ());

213 
	}
}

215 
U_BOOT_CMD
(

216 
Átöfo
, 3, 1, 
do_Át_fsöfo
,

222 #ifde‡
NOT_IMPLEMENTED_YET


224 
	$föd_Át_∑πôi⁄
 ()

226 
i
, 
j
;

227 
block_dev_desc_t
 *
dev_desc
;

228 *
∑π_èbÀ
;

229 
buf„r
[
ATA_BLOCKSIZE
];

231 
i
 = 0; i < 
CFG_IDE_MAXDEVICE
; i++) {

232 
dev_desc
 = 
	`ide_gë_dev
 (
i
);

233 i‡(!
dev_desc
) {

234 
	`debug
 ("couldn't get ide device!\n");

237 i‡(
dev_desc
->
∑π_ty≥
 =
PART_TYPE_DOS
) {

238 i‡(
dev_desc
->

239 
	`block_ªad
 (
dev_desc
->
dev
, 0, 1, (
ul⁄g
 *Ë
buf„r
) != 1) {

240 
	`debug
 ("can'tÖerform block_read!\n");

243 
∑π_èbÀ
 = &
buf„r
[0x1be];

244 
j
 = 0; j < 4; j++) {

245 i‡((
∑π_èbÀ
[4] == 1 ||

246 
∑π_èbÀ
[4] == 4 ||

247 
∑π_èbÀ
[4] == 6) &&

248 
∑π_èbÀ
[0] == 0x80) {

249 
cuº_dev
 = 
i
;

250 
∑π_off£t
 = 
∑π_èbÀ
[11];

251 
∑π_off£t
 <<= 8;

252 
∑π_off£t
 |
∑π_èbÀ
[10];

253 
∑π_off£t
 <<= 8;

254 
∑π_off£t
 |
∑π_èbÀ
[9];

255 
∑π_off£t
 <<= 8;

256 
∑π_off£t
 |
∑π_èbÀ
[8];

257 
	`debug
 ("foundÖ¨tôi⁄ sèπáà%ld\n", 
∑π_off£t
);

260 
∑π_èbÀ
 += 16;

265 
	`debug
 ("no valid devices found!\n");

267 
	}
}

270 
	$do_Át_dump
 (
cmd_tbl_t
 *
cmdç
, 
bd_t
 *
bd
, 
Êag
, 
¨gc
, *
¨gv
[])

272 
__u8
 
block
[1024];

273 
ªt
;

274 
bknum
;

276 
ªt
 = 0;

278 i‡(
¨gc
 != 2) {

279 
	`¥ötf
 ("needsánárgument!\n");

283 
bknum
 = 
	`sim∂e_°πoul
 (
¨gv
[1], 
NULL
, 10);

285 i‡(
	`disk_ªad
 (0, 
bknum
, 
block
) != 0) {

286 
	`¥ötf
 ("Error:Ñeading block\n");

289 
	`¥ötf
 ("FAT dump: %d\n", 
bknum
);

290 
	`hexdump
 (512, 
block
);

292  (
ªt
);

293 
	}
}

295 
	$disk_ªad
 (
__u32
 
°¨tblock
, __u32 
gësize
, 
__u8
 *
buÂå
)

297 
ul⁄g
 
tŸ
;

298 
block_dev_desc_t
 *
dev_desc
;

300 i‡(
cuº_dev
 < 0) {

301 i‡(
	`föd_Át_∑πôi⁄
 () != 0)

305 
dev_desc
 = 
	`ide_gë_dev
 (
cuº_dev
);

306 i‡(!
dev_desc
) {

307 
	`debug
 ("couldn't get ide device\n");

311 
tŸ
 = 
dev_desc
->
	`block_ªad
 (0, 
°¨tblock
 + 
∑π_off£t
,

312 
gësize
, (
ul⁄g
 *Ë
buÂå
);

318 i‡(
tŸ
 =
gësize
)

321 
	`debug
 ("unableÅoÑead from device!\n");

324 
	}
}

327 
	$i•röt
 (
ch
)

329 i‡(
ch
 >= 32 && ch < 127)

333 
	}
}

336 
	$hexdump
 (
˙t
, *
d©a
)

338 
i
;

339 
run
;

340 
off£t
;

342 
off£t
 = 0;

343 
˙t
) {

344 
	`¥ötf
 ("%04X : ", 
off£t
);

345 i‡(
˙t
 >= 16)

346 
run
 = 16;

348 
run
 = 
˙t
;

349 
˙t
 -
run
;

350 
i
 = 0; i < 
run
; i++)

351 
	`¥ötf
 ("%02X ", (Ë
d©a
[
i
]);

352 
	`¥ötf
 (": ");

353 
i
 = 0; i < 
run
; i++)

354 
	`¥ötf
 ("%c", 
	`i•röt
 (
d©a
[
i
]) ? data[i] : '.');

355 
	`¥ötf
 ("\n");

356 
d©a
 = &data[16];

357 
off£t
 +
run
;

359 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/cmd_flash.c

27 
	~<comm⁄.h
>

28 
	~<comm™d.h
>

31 #ifde‡
CONFIG_HAS_DATAFLASH


32 
	~<d©aÊash.h
>

35 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_FLASH
)

37 
Êash_öfo_t
 
Êash_öfo
[];

59 
	$abbªv_•ec
 (*
°r
, 
Êash_öfo_t
 ** 
pöfo
, *
psf
, *
p¶
)

61 
Êash_öfo_t
 *
Â
;

62 
b™k
, 
fú°
, 
œ°
;

63 *
p
, *
ï
;

65 i‡((
p
 = 
	`°rchr
 (
°r
, ':')Ë=
NULL
)

67 *
p
++ = '\0';

69 
b™k
 = 
	`sim∂e_°πoul
 (
°r
, &
ï
, 10);

70 i‡(
ï
 =
°r
 || *ep != '\0' ||

71 
b™k
 < 1 || b™k > 
CFG_MAX_FLASH_BANKS
 ||

72 (
Â
 = &
Êash_öfo
[
b™k
 - 1])->
Êash_id
 =
FLASH_UNKNOWN
)

75 
°r
 = 
p
;

76 i‡((
p
 = 
	`°rchr
 (
°r
, '-')Ë!
NULL
)

77 *
p
++ = '\0';

79 
fú°
 = 
	`sim∂e_°πoul
 (
°r
, &
ï
, 10);

80 i‡(
ï
 =
°r
 || *ï !'\0' || 
fú°
 >
Â
->
£˘‹_cou¡
)

83 i‡(
p
 !
NULL
) {

84 
œ°
 = 
	`sim∂e_°πoul
 (
p
, &
ï
, 10);

85 i‡(
ï
 =
p
 || *ep != '\0' ||

86 
œ°
 < 
fú°
 ||Üa° >
Â
->
£˘‹_cou¡
)

89 
œ°
 = 
fú°
;

92 *
pöfo
 = 
Â
;

93 *
psf
 = 
fú°
;

94 *
p¶
 = 
œ°
;

97 
	}
}

100 
	$Êash_fûl_£˘_ønges
 (
ul⁄g
 
addr_fú°
, ul⁄g 
addr_œ°
,

101 *
s_fú°
, *
s_œ°
,

102 *
s_cou¡
 )

104 
Êash_öfo_t
 *
öfo
;

105 
ul⁄g
 
b™k
;

106 
rcode
 = 0;

108 *
s_cou¡
 = 0;

110 
b™k
=0; b™k < 
CFG_MAX_FLASH_BANKS
; ++bank) {

111 
s_fú°
[
b™k
] = -1;

112 
s_œ°
 [
b™k
] = -1;

115 
b™k
=0,
öfo
=&
Êash_öfo
[0];

116 (
b™k
 < 
CFG_MAX_FLASH_BANKS
Ë&& (
addr_fú°
 <
addr_œ°
);

117 ++
b™k
, ++
öfo
) {

118 
ul⁄g
 
b_íd
;

119 
£˘
;

120 
s_íd
;

122 i‡(
öfo
->
Êash_id
 =
FLASH_UNKNOWN
) {

126 
b_íd
 = 
öfo
->
°¨t
[0] + info->
size
 - 1;

127 
s_íd
 = 
öfo
->
£˘‹_cou¡
 - 1;

128 
	`¥ötf
("\¿b_íd =%08X\n",
b_íd
);

130 
£˘
=0; se˘ < 
öfo
->
£˘‹_cou¡
; ++sect) {

131 
ul⁄g
 
íd
;

133 
íd
 = (
£˘
 =
s_íd
Ë? 
b_íd
 : 
öfo
->
°¨t
[sect + 1] - 1;

135 i‡(
addr_fú°
 > 
íd
)

137 i‡(
addr_œ°
 < 
öfo
->
°¨t
[
£˘
])

140 i‡(
addr_fú°
 =
öfo
->
°¨t
[
£˘
]) {

141 
s_fú°
[
b™k
] = 
£˘
;

143 i‡(
addr_œ°
 =
íd
) {

144 
s_œ°
[
b™k
] = 
£˘
;

147 i‡(
s_fú°
[
b™k
] >= 0) {

148 i‡(
s_œ°
[
b™k
] < 0) {

149 i‡(
addr_œ°
 > 
b_íd
) {

150 
s_œ°
[
b™k
] = 
s_íd
;

152 
	`puts
 ("Error:Éndáddress"

154 
rcode
 = 1;

158 i‡(
s_œ°
[
b™k
] < 
s_fú°
[bank]) {

159 
	`puts
 ("Error:Énd sector"

161 
rcode
 = 1;

164 
£˘
 = 
s_œ°
[
b™k
];

165 
addr_fú°
 = (
£˘
 =
s_íd
Ë? 
b_íd
 + 1: 
öfo
->
°¨t
[sect + 1];

166 (*
s_cou¡
Ë+
s_œ°
[
b™k
] - 
s_fú°
[bank] + 1;

167 } i‡(
addr_fú°
 >
öfo
->
°¨t
[0] &&áddr_fú° < 
b_íd
) {

168 
	`puts
 ("Error: startáddressÇot on sector boundary\n");

169 
	`¥ötf
("\náddr_first[0x%08X] >= info->start[0][0x%08X] &&áddr_first[0x%08X] < b_end[0x%08X]\n",

170 
addr_fú°
,
öfo
->
°¨t
[0],addr_fú°,
b_íd
);

171 
rcode
 = 1;

173 } i‡(
s_œ°
[
b™k
] >= 0) {

174 
	`puts
 ("Error: cannot spanácross banks whenÅheyáre"

176 
rcode
 = 1;

181  
rcode
;

182 
	}
}

183 #ifde‡
RT2880_U_BOOT_CMD_OPEN


185 
	$do_Êöfo
 ( 
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

187 
ul⁄g
 
b™k
;

189 #ifde‡
CONFIG_HAS_DATAFLASH


190 
	`d©aÊash_¥öt_öfo
();

193 i‡(
¨gc
 == 1) {

194 
b™k
=0; b™k <
CFG_MAX_FLASH_BANKS
; ++bank) {

195 
	`¥ötf
 ("\nB™k # %ld: ", 
b™k
+1);

197 
	`Êash_¥öt_öfo
 (&
Êash_öfo
[
b™k
]);

202 
b™k
 = 
	`sim∂e_°πoul
(
¨gv
[1], 
NULL
, 16);

203 i‡((
b™k
 < 1Ë|| (b™k > 
CFG_MAX_FLASH_BANKS
)) {

204 
	`¥ötf
 ("Only FLASH Banks # 1 ... # %d supported\n",

205 
CFG_MAX_FLASH_BANKS
);

208 
	`¥ötf
 ("\nB™k # %ld: ", 
b™k
);

209 
	`Êash_¥öt_öfo
 (&
Êash_öfo
[
b™k
-1]);

211 
	}
}

213 
	$do_Êîa£
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

215 
Êash_öfo_t
 *
öfo
;

216 
ul⁄g
 
b™k
, 
addr_fú°
, 
addr_œ°
;

217 
n
, 
£˘_fú°
, 
£˘_œ°
;

218 
rcode
 = 0;

220 i‡(
¨gc
 < 2) {

221 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

225 i‡(
	`°rcmp
(
¨gv
[1], "linux") == 0)

227 
	`¥ötf
("\n EraseÜinux kernel block !!\n");

228 
	`¥ötf
("From 0x%X Tÿ0x%X\n", 
CFG_KERN_ADDR
, CFG_KERN_ADDR + 
Êash_öfo
[0].
size


229 - (
CFG_BOOTLOADER_SIZE
 + 
CFG_CONFIG_SIZE
 + 
CFG_FACTORY_SIZE
) -1);

230 
rcode
 = 
	`Êash_£˘_îa£
(
CFG_KERN_ADDR
, CFG_KERN_ADDR + 
Êash_öfo
[0].
size


231 -(
CFG_BOOTLOADER_SIZE
 + 
CFG_CONFIG_SIZE
 + 
CFG_FACTORY_SIZE
) -1);

233  
rcode
;

235 i‡(
	`°rcmp
(
¨gv
[1], "uboot") == 0)

237 
	`¥ötf
("\n Erase u-boot block !!\n");

238 
	`¥ötf
("From 0x%X Tÿ0x%X\n", 
CFG_FLASH_BASE
, CFG_FLASH_BASE + 
CFG_BOOTLOADER_SIZE
 - 1);

239 
rcode
 = 
	`Êash_£˘_îa£
(
CFG_FLASH_BASE
, CFG_FLASH_BASE + 
CFG_BOOTLOADER_SIZE
 - 1);

241  
rcode
;

243 i‡(
	`°rcmp
(
¨gv
[1], "all") == 0) {

244 
b™k
=1; b™k<=
CFG_MAX_FLASH_BANKS
; ++bank) {

245 
	`¥ötf
 ("Eø£ Fœsh B™k # %ld ,öfo->£˘‹_cou¡ = %d", 
b™k
,
öfo
->
£˘‹_cou¡
-1);

246 
öfo
 = &
Êash_öfo
[
b™k
-1];

247 
rcode
 = 
	`îa£_Æl_chù
 (
öfo
, 0, info->
£˘‹_cou¡
-1);

249  
rcode
;

252 i‡((
n
 = 
	`abbªv_•ec
(
¨gv
[1], &
öfo
, &
£˘_fú°
, &
£˘_œ°
)) != 0) {

253 i‡(
n
 < 0) {

254 
	`puts
 ("Bad sector specification\n");

257 
	`¥ötf
 ("Erase Flash Sectors %d-%d in Bank # %d ",

258 
£˘_fú°
, 
£˘_œ°
, (
öfo
-
Êash_öfo
)+1);

259 
rcode
 = 
	`Êash_îa£
(
öfo
, 
£˘_fú°
, 
£˘_œ°
);

260  
rcode
;

263 i‡(
¨gc
 != 3) {

264 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

268 i‡(
	`°rcmp
(
¨gv
[1], "bank") == 0) {

269 
b™k
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

270 i‡((
b™k
 < 1Ë|| (b™k > 
CFG_MAX_FLASH_BANKS
)) {

271 
	`¥ötf
 ("Only FLASH Banks # 1 ... # %d supported\n",

272 
CFG_MAX_FLASH_BANKS
);

275 
	`¥ötf
 ("Eø£ Fœsh B™k # %ld ", 
b™k
);

276 
öfo
 = &
Êash_öfo
[
b™k
-1];

277 
rcode
 = 
	`Êash_îa£
 (
öfo
, 0, info->
£˘‹_cou¡
-1);

278  
rcode
;

281 
addr_fú°
 = 
	`sim∂e_°πoul
(
¨gv
[1], 
NULL
, 16);

282 
addr_œ°
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

284 i‡(
addr_fú°
 >
addr_œ°
) {

285 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

289 
rcode
 = 
	`Êash_£˘_îa£
(
addr_fú°
, 
addr_œ°
);

290  
rcode
;

291 
	}
}

293 
	$gë_addr_bound¨y
 (
ul⁄g
 *
addr
)

295 
i
;

296 
Êash_öfo_t
 *
öfo
 = &
Êash_öfo
[0];

298 i‡((*
addr
Ë> 
öfo
->
°¨t
[0] + info->
size
 - 1) {

299 
	`¥ötf
("Error: out of flasháddressÑange\n");

302 
i
 = 0; i < 
öfo
->
£˘‹_cou¡
; i++) {

303 i‡(
i
 =
öfo
->
£˘‹_cou¡
 -1) {

304 *
addr
 = 
öfo
->
°¨t
[0] + info->
size
 - 1;

307 i‡(
öfo
->
°¨t
[
i
] < (*
addr
) && (*addr) <= info->start[i+1]) {

308 *
addr
 = 
öfo
->
°¨t
[
i
+1] - 1;

313 
	}
}

315 
	$Êash_£˘_îa£
 (
ul⁄g
 
addr_fú°
, ul⁄g 
addr_œ°
)

317 
Êash_öfo_t
 *
öfo
;

318 
ul⁄g
 
b™k
;

319 
s_fú°
[
CFG_MAX_FLASH_BANKS
], 
s_œ°
[CFG_MAX_FLASH_BANKS];

320 
îa£d
 = 0;

321 
∂™√d
;

322 
rcode
 = 0;

324 
rcode
 = 
	`Êash_fûl_£˘_ønges
 (
addr_fú°
, 
addr_œ°
,

325 
s_fú°
, 
s_œ°
, &
∂™√d
 );

327 i‡(
∂™√d
 && (
rcode
 == 0)) {

328 
b™k
=0,
öfo
=&
Êash_öfo
[0];

329 (
b™k
 < 
CFG_MAX_FLASH_BANKS
Ë&& (
rcode
 == 0);

330 ++
b™k
, ++
öfo
) {

331 i‡(
s_fú°
[
b™k
]>=0) {

332 
îa£d
 +
s_œ°
[
b™k
] - 
s_fú°
[bank] + 1;

333 
	`debug
 ("Erase Flash from 0x%08lxÅo 0x%08lx "

335 
öfo
->
°¨t
[
s_fú°
[
b™k
]],

336 (
s_œ°
[
b™k
]+1 =
öfo
->
£˘‹_cou¡
) ?

337 
öfo
->
°¨t
[0] + info->
size
 - 1:

338 
öfo
->
°¨t
[
s_œ°
[
b™k
]+1] - 1,

339 
b™k
+1);

340 
rcode
 = 
	`Êash_îa£
 (
öfo
, 
s_fú°
[
b™k
], 
s_œ°
[bank]);

343 
	`¥ötf
 ("Eø£d %d se˘‹s\n", 
îa£d
);

344 } i‡(
rcode
 == 0) {

345 
	`puts
 ("Error: startánd/orÉndáddress"

347 
rcode
 = 1;

349  
rcode
;

350 
	}
}

352 
	$do_¥Ÿe˘
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

354 
Êash_öfo_t
 *
öfo
;

355 
ul⁄g
 
b™k
, 
addr_fú°
, 
addr_œ°
;

356 
i
, 
p
, 
n
, 
£˘_fú°
, 
£˘_œ°
;

357 
rcode
 = 0;

358 #ifde‡
CONFIG_HAS_DATAFLASH


359 
°©us
;

361 i‡(
¨gc
 < 3) {

362 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

366 i‡(
	`°rcmp
(
¨gv
[1], "off") == 0) {

367 
p
 = 0;

368 } i‡(
	`°rcmp
(
¨gv
[1], "on") == 0) {

369 
p
 = 1;

371 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

375 #ifde‡
CONFIG_HAS_DATAFLASH


376 i‡((
	`°rcmp
(
¨gv
[2], "all") != 0) && (strcmp(argv[2], "bank") != 0)) {

377 
addr_fú°
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

378 
addr_œ°
 = 
	`sim∂e_°πoul
(
¨gv
[3], 
NULL
, 16);

380 i‡(
	`addr_d©aÊash
(
addr_fú°
Ë&&áddr_d©aÊash(
addr_œ°
)) {

381 
°©us
 = 
	`d©aÊash_ªÆ_¥Ÿe˘
(
p
,
addr_fú°
,
addr_œ°
);

382 i‡(
°©us
 < 0){

383 
	`puts
 ("Bad DataFlash sector specification\n");

386 
	`¥ötf
("%sProtect %d DataFlash Sectors\n",

387 
p
 ? "" : "Un-", 
°©us
);

393 i‡(
	`°rcmp
(
¨gv
[2], "all") == 0) {

394 
b™k
=1; b™k<=
CFG_MAX_FLASH_BANKS
; ++bank) {

395 
öfo
 = &
Êash_öfo
[
b™k
-1];

396 i‡(
öfo
->
Êash_id
 =
FLASH_UNKNOWN
) {

399 
	`¥ötf
 ("%sProtect Flash Bank # %ld\n",

400 
p
 ? "" : "Un-", 
b™k
);

402 
i
=0; i<
öfo
->
£˘‹_cou¡
; ++i) {

403 #i‡
	`deföed
(
CFG_FLASH_PROTECTION
)

404 i‡(
	`Êash_ªÆ_¥Ÿe˘
(
öfo
, 
i
, 
p
))

405 
rcode
 = 1;

406 
	`putc
 ('.');

408 
öfo
->
¥Ÿe˘
[
i
] = 
p
;

413 #i‡
	`deföed
(
CFG_FLASH_PROTECTION
)

414 i‡(!
rcode
Ë
	`puts
 (" done\n");

417  
rcode
;

420 i‡((
n
 = 
	`abbªv_•ec
(
¨gv
[2], &
öfo
, &
£˘_fú°
, &
£˘_œ°
)) != 0) {

421 i‡(
n
 < 0) {

422 
	`puts
 ("Bad sector specification\n");

425 
	`¥ötf
("%sProtect Flash Sectors %d-%d in Bank # %d\n",

426 
p
 ? "" : "Un-", 
£˘_fú°
, 
£˘_œ°
,

427 (
öfo
-
Êash_öfo
)+1);

428 
i
 = 
£˘_fú°
; i <
£˘_œ°
; i++) {

429 #i‡
	`deföed
(
CFG_FLASH_PROTECTION
)

430 i‡(
	`Êash_ªÆ_¥Ÿe˘
(
öfo
, 
i
, 
p
))

431 
rcode
 = 1;

432 
	`putc
 ('.');

434 
öfo
->
¥Ÿe˘
[
i
] = 
p
;

438 #i‡
	`deföed
(
CFG_FLASH_PROTECTION
)

439 i‡(!
rcode
Ë
	`puts
 (" done\n");

442  
rcode
;

445 i‡(
¨gc
 != 4) {

446 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

450 i‡(
	`°rcmp
(
¨gv
[2], "bank") == 0) {

451 
b™k
 = 
	`sim∂e_°πoul
(
¨gv
[3], 
NULL
, 16);

452 i‡((
b™k
 < 1Ë|| (b™k > 
CFG_MAX_FLASH_BANKS
)) {

453 
	`¥ötf
 ("Only FLASH Banks # 1 ... # %d supported\n",

454 
CFG_MAX_FLASH_BANKS
);

457 
	`¥ötf
 ("%sProtect Flash Bank # %ld\n",

458 
p
 ? "" : "Un-", 
b™k
);

459 
öfo
 = &
Êash_öfo
[
b™k
-1];

461 i‡(
öfo
->
Êash_id
 =
FLASH_UNKNOWN
) {

462 
	`puts
 ("missing or unknown FLASHÅype\n");

465 
i
=0; i<
öfo
->
£˘‹_cou¡
; ++i) {

466 #i‡
	`deföed
(
CFG_FLASH_PROTECTION
)

467 i‡(
	`Êash_ªÆ_¥Ÿe˘
(
öfo
, 
i
, 
p
))

468 
rcode
 = 1;

469 
	`putc
 ('.');

471 
öfo
->
¥Ÿe˘
[
i
] = 
p
;

475 #i‡
	`deföed
(
CFG_FLASH_PROTECTION
)

476 i‡(!
rcode
Ë
	`puts
 (" done\n");

479  
rcode
;

482 
addr_fú°
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

483 
addr_œ°
 = 
	`sim∂e_°πoul
(
¨gv
[3], 
NULL
, 16);

485 i‡(
addr_fú°
 >
addr_œ°
) {

486 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

489 
rcode
 = 
	`Êash_£˘_¥Ÿe˘
 (
p
, 
addr_fú°
, 
addr_œ°
);

490  
rcode
;

491 
	}
}

494 
	$Êash_£˘_¥Ÿe˘
 (
p
, 
ul⁄g
 
addr_fú°
, ul⁄g 
addr_œ°
)

496 
Êash_öfo_t
 *
öfo
;

497 
ul⁄g
 
b™k
;

498 
s_fú°
[
CFG_MAX_FLASH_BANKS
], 
s_œ°
[CFG_MAX_FLASH_BANKS];

499 
¥Ÿe˘ed
, 
i
;

500 
∂™√d
;

501 
rcode
;

503 
rcode
 = 
	`Êash_fûl_£˘_ønges
–
addr_fú°
, 
addr_œ°
, 
s_fú°
, 
s_œ°
, &
∂™√d
 );

505 
¥Ÿe˘ed
 = 0;

507 i‡(
∂™√d
 && (
rcode
 == 0)) {

508 
b™k
=0,
öfo
=&
Êash_öfo
[0]; b™k < 
CFG_MAX_FLASH_BANKS
; ++bank, ++info) {

509 i‡(
öfo
->
Êash_id
 =
FLASH_UNKNOWN
) {

513 i‡(
s_fú°
[
b™k
]>=0 && s_fú°[b™k]<=
s_œ°
[bank]) {

514 
	`debug
 ("%sProtecting sectors %d..%d in bank %ld\n",

515 
p
 ? "" : "Un-",

516 
s_fú°
[
b™k
], 
s_œ°
[bank], bank+1);

517 
¥Ÿe˘ed
 +
s_œ°
[
b™k
] - 
s_fú°
[bank] + 1;

518 
i
=
s_fú°
[
b™k
]; i<=
s_œ°
[bank]; ++i) {

519 #i‡
	`deföed
(
CFG_FLASH_PROTECTION
)

520 i‡(
	`Êash_ªÆ_¥Ÿe˘
(
öfo
, 
i
, 
p
))

521 
rcode
 = 1;

522 
	`putc
 ('.');

524 
öfo
->
¥Ÿe˘
[
i
] = 
p
;

528 #i‡
	`deföed
(
CFG_FLASH_PROTECTION
)

529 i‡(!
rcode
Ë
	`putc
 ('\n');

533 
	`¥ötf
 ("%sProtected %d sectors\n",

534 
p
 ? "" : "Un-", 
¥Ÿe˘ed
);

535 } i‡(
rcode
 == 0) {

536 
	`puts
 ("Error: startánd/orÉndáddress"

538 
rcode
 = 1;

540  
rcode
;

541 
	}
}

545 #ifde‡
RT2880_U_BOOT_CMD_OPEN


547 
U_BOOT_CMD
(

548 
Êöfo
, 2, 1, 
do_Êöfo
,

554 
U_BOOT_CMD
(

555 
îa£
, 3, 1, 
do_Êîa£
,

565 
U_BOOT_CMD
(

566 
¥Ÿe˘
, 4, 1, 
do_¥Ÿe˘
,

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/cmd_load.c

27 
	~<comm⁄.h
>

28 
	~<comm™d.h
>

29 
	~<s_ªc‹d.h
>

30 
	~<√t.h
>

31 
	~<exp‹ts.h
>

33 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_LOADS
)

34 
ul⁄g
 
lﬂd_£rül
 (ul⁄g 
off£t
);

35 
ªad_ªc‹d
 (*
buf
, 
ul⁄g
 
Àn
);

36 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_SAVES
)

37 
ßve_£rül
 (
ul⁄g
 
off£t
, ul⁄g 
size
);

38 
wrôe_ªc‹d
 (*
buf
);

41 
	gdo_echo
 = 1;

46 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_LOADS
)

47 
	$do_lﬂd_£rül
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

50 
ul⁄g
 
off£t
 = 0;

51 
ul⁄g
 
addr
;

52 
i
;

53 *
ív_echo
;

54 
rcode
 = 0;

55 #ifdef 
CFG_LOADS_BAUD_CHANGE


56 
DECLARE_GLOBAL_DATA_PTR
;

57 
lﬂd_baudøã
, 
cuºít_baudøã
;

59 
lﬂd_baudøã
 = 
cuºít_baudøã
 = 
gd
->
baudøã
;

62 i‡(((
ív_echo
 = 
	`gëív
("lﬂds_echo")Ë!
NULL
) && (*env_echo == '1')) {

63 
do_echo
 = 1;

65 
do_echo
 = 0;

68 #ifdef 
CFG_LOADS_BAUD_CHANGE


69 i‡(
¨gc
 >= 2) {

70 
off£t
 = 
	`sim∂e_°πoul
(
¨gv
[1], 
NULL
, 16);

72 i‡(
¨gc
 == 3) {

73 
lﬂd_baudøã
 = ()
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 10);

76 i‡(
lﬂd_baudøã
 == 0)

77 
lﬂd_baudøã
 = 
cuºít_baudøã
;

79 i‡(
lﬂd_baudøã
 !
cuºít_baudøã
) {

80 
	`¥ötf
 ("## Switch baudrateÅo %d bpsándÖress ENTER ...\n",

81 
lﬂd_baudøã
);

82 
	`udñay
(50000);

83 
gd
->
baudøã
 = 
lﬂd_baudøã
;

84 #i‡
	`deföed
(
RT6855A_ASIC_BOARD
Ë|| deföed(
RT6855A_FPGA_BOARD
)

85 
	`bbu_u¨t_öô
();

87 
	`£rül_£tbrg
 ();

90 
	`udñay
(50000);

92 i‡(
	`gëc
() == '\r')

97 i‡(
¨gc
 == 2) {

98 
off£t
 = 
	`sim∂e_°πoul
(
¨gv
[1], 
NULL
, 16);

102 
	`¥ötf
 ("## Ready for S-Record download ...\n");

104 
addr
 = 
	`lﬂd_£rül
 (
off£t
);

111 
i
=0; i<100; ++i) {

112 i‡(
	`t°c
()) {

113 (Ë
	`gëc
();

115 
	`udñay
(1000);

118 i‡(
addr
 == ~0) {

119 
	`¥ötf
 ("## S-Record downloadáborted\n");

120 
rcode
 = 1;

122 
	`¥ötf
 ("## Sèπ Add∏ = 0x%08lX\n", 
addr
);

123 
lﬂd_addr
 = 
addr
;

126 #ifdef 
CFG_LOADS_BAUD_CHANGE


127 i‡(
lﬂd_baudøã
 !
cuºít_baudøã
) {

128 
	`¥ötf
 ("## Switch baudrateÅo %d bpsándÖress ESC ...\n",

129 
cuºít_baudøã
);

130 
	`udñay
 (50000);

131 
gd
->
baudøã
 = 
cuºít_baudøã
;

132 #i‡
	`deföed
(
RT6855A_ASIC_BOARD
Ë|| deföed(
RT6855A_FPGA_BOARD
)

133 
	`bbu_u¨t_öô
();

135 
	`£rül_£tbrg
 ();

137 
	`udñay
 (50000);

139 i‡(
	`gëc
() == 0x1B)

144  
rcode
;

145 
	}
}

147 
ul⁄g


148 
	$lﬂd_£rül
 (
ul⁄g
 
off£t
)

150 
ªc‹d
[
SREC_MAXRECLEN
 + 1];

151 
böbuf
[
SREC_MAXBINLEN
];

152 
böÀn
;

153 
ty≥
;

154 
ul⁄g
 
addr
;

155 
ul⁄g
 
size
;

156 
buf
[32];

157 
ul⁄g
 
°‹e_addr
;

158 
ul⁄g
 
°¨t_addr
 = ~0;

159 
ul⁄g
 
íd_addr
 = 0;

160 
löe_cou¡
 = 0;

162 
	`ªad_ªc‹d
(
ªc‹d
, 
SREC_MAXRECLEN
 + 1) >= 0) {

163 
ty≥
 = 
	`§ec_decode
 (
ªc‹d
, &
böÀn
, &
addr
, 
böbuf
);

165 i‡(
ty≥
 < 0) {

169 
ty≥
) {

170 
SREC_DATA2
:

171 
SREC_DATA3
:

172 
SREC_DATA4
:

173 
°‹e_addr
 = 
addr
 + 
off£t
;

174 #i‚de‡
CFG_NO_FLASH


175 i‡(
	`addr2öfo
(
°‹e_addr
)) {

176 
rc
;

178 
rc
 = 
	`Êash_wrôe
((
uch¨
 *)
böbuf
,
°‹e_addr
,
böÀn
);

179 i‡(
rc
 != 0) {

180 
	`Êash_≥º‹
 (
rc
);

186 
	`mem˝y
 ((*)(
°‹e_addr
), 
böbuf
, 
böÀn
);

188 i‡((
°‹e_addr
Ë< 
°¨t_addr
)

189 
°¨t_addr
 = 
°‹e_addr
;

190 i‡((
°‹e_addr
 + 
böÀn
 - 1Ë> 
íd_addr
)

191 
íd_addr
 = 
°‹e_addr
 + 
böÀn
 - 1;

193 
SREC_END2
:

194 
SREC_END3
:

195 
SREC_END4
:

196 
	`udñay
 (10000);

197 
size
 = 
íd_addr
 - 
°¨t_addr
 + 1;

198 
	`¥ötf
 ("\n"

202 
°¨t_addr
, 
íd_addr
, 
size
, size

204 
	`Êush_ˇche
 (
°¨t_addr
, 
size
);

205 
	`•rötf
(
buf
, "%lX", 
size
);

206 
	`£ãnv
("fûesize", 
buf
);

207  (
addr
);

208 
SREC_START
:

213 i‡(!
do_echo
) {

214 i‡((++
löe_cou¡
 % 100) == 0)

215 
	`putc
 ('.');

220 
	}
}

223 
	$ªad_ªc‹d
 (*
buf
, 
ul⁄g
 
Àn
)

225 
DECLARE_GLOBAL_DATA_PTR
;

226 *
p
;

227 
c
;

229 --
Àn
;

231 
p
=
buf
;Ö < buf+
Àn
; ++p) {

232 
c
 = 
	`gëc
();

233 i‡(
do_echo
)

234 
	`putc
 (
c
);

236 
c
) {

239 *
p
 = '\0';

240  (
p
 - 
buf
);

245 *
p
 = 
c
;

249 i‡(
gd
->
jt
[
XF_gëc
] !
gëc
) {

250 i‡(
	`˘æc
()) {

257 *
p
 = '\0';

258  (
p
 - 
buf
);

259 
	}
}

261 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_SAVES
)

263 
	$do_ßve_£rül
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

265 
ul⁄g
 
off£t
 = 0;

266 
ul⁄g
 
size
 = 0;

267 #ifdef 
CFG_LOADS_BAUD_CHANGE


268 
DECLARE_GLOBAL_DATA_PTR
;

269 
ßve_baudøã
, 
cuºít_baudøã
;

271 
ßve_baudøã
 = 
cuºít_baudøã
 = 
gd
->
baudøã
;

274 i‡(
¨gc
 >= 2) {

275 
off£t
 = 
	`sim∂e_°πoul
(
¨gv
[1], 
NULL
, 16);

277 #ifdef 
CFG_LOADS_BAUD_CHANGE


278 i‡(
¨gc
 >= 3) {

279 
size
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

281 i‡(
¨gc
 == 4) {

282 
ßve_baudøã
 = ()
	`sim∂e_°πoul
(
¨gv
[3], 
NULL
, 10);

285 i‡(
ßve_baudøã
 == 0)

286 
ßve_baudøã
 = 
cuºít_baudøã
;

288 i‡(
ßve_baudøã
 !
cuºít_baudøã
) {

289 
	`¥ötf
 ("## Switch baudrateÅo %d bpsándÖress ENTER ...\n",

290 
ßve_baudøã
);

291 
	`udñay
(50000);

292 
gd
->
baudøã
 = 
ßve_baudøã
;

293 #i‡
	`deföed
(
RT6855A_ASIC_BOARD
Ë|| deföed(
RT6855A_FPGA_BOARD
)

294 
	`bbu_u¨t_öô
();

296 
	`£rül_£tbrg
 ();

299 
	`udñay
(50000);

301 i‡(
	`gëc
() == '\r')

306 i‡(
¨gc
 == 3) {

307 
size
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

311 
	`¥ötf
 ("## Ready for S-Record upload,Öress ENTERÅoÖroceed ...\n");

313 i‡(
	`gëc
() == '\r')

316 if(
	`ßve_£rül
 (
off£t
, 
size
)) {

317 
	`¥ötf
 ("## S-Record uploadáborted\n");

319 
	`¥ötf
 ("## S-Record upload complete\n");

321 #ifdef 
CFG_LOADS_BAUD_CHANGE


322 i‡(
ßve_baudøã
 !
cuºít_baudøã
) {

323 
	`¥ötf
 ("## Switch baudrateÅo %d bpsándÖress ESC ...\n",

324 ()
cuºít_baudøã
);

325 
	`udñay
 (50000);

326 
gd
->
baudøã
 = 
cuºít_baudøã
;

327 #i‡
	`deföed
(
RT6855A_ASIC_BOARD
Ë|| deföed(
RT6855A_FPGA_BOARD
)

328 
	`bbu_u¨t_öô
();

330 
	`£rül_£tbrg
 ();

333 
	`udñay
 (50000);

335 i‡(
	`gëc
() == 0x1B)

341 
	}
}

343 
	#SREC3_START
 "S0030000FC\n"

	)

344 
	#SREC3_FORMAT
 "S3%02X%08lX%s%02X\n"

	)

345 
	#SREC3_END
 "S70500000000FA\n"

	)

346 
	#SREC_BYTES_PER_RECORD
 16

	)

348 
	$ßve_£rül
 (
ul⁄g
 
addªss
, ul⁄g 
cou¡
)

350 
i
, 
c
, 
ª˛í
, 
checksum
, 
Àngth
;

351 *
hex
 = "0123456789ABCDEF";

352 
ªc‹d
[2*
SREC_BYTES_PER_RECORD
+16];

353 
d©a
[2*
SREC_BYTES_PER_RECORD
+1];

355 
ª˛í
 = 0;

356 
checksum
 = 0;

358 if(
	`wrôe_ªc‹d
(
SREC3_START
))

361 if(
cou¡
) {

362 
c
 = *(vﬁ©ûê
uch¨
*)(
addªss
 + 
ª˛í
);

363 
checksum
 +
c
;

364 
d©a
[2*
ª˛í
] = 
hex
[(
c
>>4)&0x0f];

365 
d©a
[2*
ª˛í
+1] = 
hex
[
c
 & 0x0f];

366 
d©a
[2*
ª˛í
+2] = '\0';

367 ++
ª˛í
;

368 --
cou¡
;

370 if(
ª˛í
 =
SREC_BYTES_PER_RECORD
 || 
cou¡
 == 0) {

372 if(
ª˛í
) {

374 
Àngth
 = 4 + 
ª˛í
 + 1;

377 
i
 = 0; i < 2; i++)

378 
checksum
 +(
Àngth
 >> (8*
i
)) & 0xff;

381 
i
 = 0; i < 4; i++)

382 
checksum
 +(
addªss
 >> (8*
i
)) & 0xff;

385 
checksum
 = ~checksum & 0xff;

388 
	`•rötf
(
ªc‹d
, 
SREC3_FORMAT
, 
Àngth
, 
addªss
, 
d©a
, 
checksum
);

389 if(
	`wrôe_ªc‹d
(
ªc‹d
))

392 
addªss
 +
ª˛í
;

393 
checksum
 = 0;

394 
ª˛í
 = 0;

397 
cou¡
);

398 if(
	`wrôe_ªc‹d
(
SREC3_END
))

401 
	}
}

404 
	$wrôe_ªc‹d
 (*
buf
)

406 
c
;

408 (
c
 = *
buf
++))

409 
	`putc
(
c
);

413 i‡(
	`˘æc
()) {

417 
	}
}

423 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_LOADB
)

425 
	#XON_CHAR
 17

	)

426 
	#XOFF_CHAR
 19

	)

427 
	#START_CHAR
 0x01

	)

428 
	#ETX_CHAR
 0x03

	)

429 
	#END_CHAR
 0x0D

	)

430 
	#SPACE
 0x20

	)

431 
	#K_ESCAPE
 0x23

	)

432 
	#SEND_TYPE
 'S'

	)

433 
	#DATA_TYPE
 'D'

	)

434 
	#ACK_TYPE
 'Y'

	)

435 
	#NACK_TYPE
 'N'

	)

436 
	#BREAK_TYPE
 'B'

	)

437 
	#toch¨
(
x
Ë((Ë(((xË+ 
SPACE
Ë& 0xff))

	)

438 
	#u¡och¨
(
x
Ë((Ë(((xË- 
SPACE
Ë& 0xff))

	)

440 
os_d©a_cou¡
;

441 
os_d©a_hódî
[8];

443 
£t_kîm_bö_mode
(*);

444 
k_ªcv
();

445 
ul⁄g
 
lﬂd_£rül_bö
 (ul⁄g 
off£t
);

448 
	ghis_eﬁ
;

449 
	ghis_∑d_cou¡
;

450 
	ghis_∑d_ch¨
;

451 
	ghis_quŸe
;

453 
	$do_lﬂd_£rül_bö
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

456 
DECLARE_GLOBAL_DATA_PTR
;

457 
ul⁄g
 
off£t
 = 0;

458 
ul⁄g
 
addr
;

459 
lﬂd_baudøã
, 
cuºít_baudøã
;

460 
rcode
 = 0;

461 *
s
;

464 
off£t
 = 
CFG_LOAD_ADDR
;

467 i‡((
s
 = 
	`gëív
("lﬂdaddr")Ë!
NULL
) {

468 
off£t
 = 
	`sim∂e_°πoul
(
s
, 
NULL
, 16);

471 
lﬂd_baudøã
 = 
cuºít_baudøã
 = 
gd
->
baudøã
;

473 i‡(
¨gc
 >= 2) {

474 
off£t
 = 
	`sim∂e_°πoul
(
¨gv
[1], 
NULL
, 16);

476 i‡(
¨gc
 == 3) {

477 
lﬂd_baudøã
 = ()
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 10);

480 i‡(
lﬂd_baudøã
 == 0)

481 
lﬂd_baudøã
 = 
cuºít_baudøã
;

484 i‡(
lﬂd_baudøã
 !
cuºít_baudøã
) {

485 
	`¥ötf
 ("## Switch baudrateÅo %d bpsándÖress ENTER ...\n",

486 
lﬂd_baudøã
);

487 
	`udñay
(50000);

488 
gd
->
baudøã
 = 
lﬂd_baudøã
;

489 #i‡
	`deföed
(
RT6855A_ASIC_BOARD
Ë|| deföed(
RT6855A_FPGA_BOARD
)

490 
	`bbu_u¨t_öô
();

492 
	`£rül_£tbrg
 ();

495 
	`udñay
(50000);

497 i‡(
	`gëc
() == '\r')

502 
	`¥ötf
 ("## Ready for binary (kermit) download "

504 
off£t
,

505 
lﬂd_baudøã
);

506 
addr
 = 
	`lﬂd_£rül_bö
 (
off£t
);

508 i‡(
addr
 == ~0) {

509 
lﬂd_addr
 = 0;

510 
	`¥ötf
 ("## Binary (kermit) downloadáborted\n");

511 
rcode
 = 1;

513 
	`¥ötf
 ("## Sèπ Add∏ = 0x%08lX\n", 
addr
);

514 
lﬂd_addr
 = 
addr
;

517 i‡(
lﬂd_baudøã
 !
cuºít_baudøã
) {

518 
	`¥ötf
 ("## Switch baudrateÅo %d bpsándÖress ESC ...\n",

519 
cuºít_baudøã
);

520 
	`udñay
 (50000);

521 
gd
->
baudøã
 = 
cuºít_baudøã
;

522 #i‡
	`deföed
(
RT6855A_ASIC_BOARD
Ë|| deföed(
RT6855A_FPGA_BOARD
)

523 
	`bbu_u¨t_öô
();

525 
	`£rül_£tbrg
 ();

528 
	`udñay
 (50000);

530 i‡(
	`gëc
() == 0x1B)

535 #ifde‡
CONFIG_AUTOSCRIPT


536 i‡(
lﬂd_addr
) {

537 *
s
;

539 i‡(((
s
 = 
	`gëív
("autos¸ùt")Ë!
NULL
Ë&& (
	`°rcmp
(s,"yes") == 0)) {

540 
	`¥ötf
("Ru¬ögáutos¸ùà©ádd∏0x%08lX ...\n", 
lﬂd_addr
);

541 
rcode
 = 
	`autos¸ùt
 (
lﬂd_addr
);

546  
rcode
;

547 
	}
}

550 
ul⁄g
 
	$lﬂd_£rül_bö
 (
ul⁄g
 
off£t
)

552 
size
, 
i
;

553 
buf
[32];

555 
	`£t_kîm_bö_mode
 ((
ul⁄g
 *Ë
off£t
);

556 
size
 = 
	`k_ªcv
 ();

563 
i
=0; i<100; ++i) {

564 i‡(
	`t°c
()) {

565 (Ë
	`gëc
();

567 
	`udñay
(1000);

570 
	`Êush_ˇche
 (
off£t
, 
size
);

572 
	`¥ötf
("## TŸÆ Sizê = 0x%08x = %d Byãs\n", 
size
, size);

573 
	`•rötf
(
buf
, "%X", 
size
);

574 
	`£ãnv
("fûesize", 
buf
);

576  
off£t
;

577 
	}
}

579 
	$£nd_∑d
 ()

581 
cou¡
 = 
his_∑d_cou¡
;

583 
cou¡
-- > 0)

584 
	`putc
 (
his_∑d_ch¨
);

585 
	}
}

588 
	$kå™s
 (
ö
)

590 i‡((
ö
 & 0x60) == 0x40) {

591  (Ë(
ö
 & ~0x40);

592 } i‡((
ö
 & 0x7f) == 0x3f) {

593  (Ë(
ö
 | 0x40);

595  
ö
;

596 
	}
}

598 
	$chk1
 (*
buf„r
)

600 
tŸÆ
 = 0;

602 *
buf„r
) {

603 
tŸÆ
 +*
buf„r
++;

605  (Ë((
tŸÆ
 + ((total >> 6) & 0x03)) & 0x3f);

606 
	}
}

608 
	$s1_£nd∑ckë
 (*
∑ckë
)

610 
	`£nd_∑d
 ();

611 *
∑ckë
) {

612 
	`putc
 (*
∑ckë
++);

614 
	}
}

616 
	ga_b
[24];

617 
	$£nd_ack
 (
n
)

619 
a_b
[0] = 
START_CHAR
;

620 
a_b
[1] = 
	`toch¨
 (3);

621 
a_b
[2] = 
	`toch¨
 (
n
);

622 
a_b
[3] = 
ACK_TYPE
;

623 
a_b
[4] = '\0';

624 
a_b
[4] = 
	`toch¨
 (
	`chk1
 (&a_b[1]));

625 
a_b
[5] = 
his_eﬁ
;

626 
a_b
[6] = '\0';

627 
	`s1_£nd∑ckë
 (
a_b
);

628 
	}
}

630 
	$£nd_«ck
 (
n
)

632 
a_b
[0] = 
START_CHAR
;

633 
a_b
[1] = 
	`toch¨
 (3);

634 
a_b
[2] = 
	`toch¨
 (
n
);

635 
a_b
[3] = 
NACK_TYPE
;

636 
a_b
[4] = '\0';

637 
a_b
[4] = 
	`toch¨
 (
	`chk1
 (&a_b[1]));

638 
a_b
[5] = 
his_eﬁ
;

639 
a_b
[6] = '\0';

640 
	`s1_£nd∑ckë
 (
a_b
);

641 
	}
}

649 (*
os_d©a_öô
) ();

650 (*
os_d©a_ch¨
Ë(
√w_ch¨
);

651 
os_d©a_°©e
, 
os_d©a_°©e_ßved
;

652 
os_d©a_cou¡
;

653 
os_d©a_cou¡_ßved
;

654 *
os_d©a_addr
, *
os_d©a_addr_ßved
;

655 *
bö_°¨t_addªss
;

656 
os_d©a_hódî
[8];

657 
	$bö_d©a_öô
 ()

659 
os_d©a_°©e
 = 0;

660 
os_d©a_cou¡
 = 0;

661 
os_d©a_addr
 = 
bö_°¨t_addªss
;

662 
	}
}

663 
	$os_d©a_ßve
 ()

665 
os_d©a_°©e_ßved
 = 
os_d©a_°©e
;

666 
os_d©a_cou¡_ßved
 = 
os_d©a_cou¡
;

667 
os_d©a_addr_ßved
 = 
os_d©a_addr
;

668 
	}
}

669 
	$os_d©a_ª°‹e
 ()

671 
os_d©a_°©e
 = 
os_d©a_°©e_ßved
;

672 
os_d©a_cou¡
 = 
os_d©a_cou¡_ßved
;

673 
os_d©a_addr
 = 
os_d©a_addr_ßved
;

674 
	}
}

675 
	$bö_d©a_ch¨
 (
√w_ch¨
)

677 
os_d©a_°©e
) {

679 *
os_d©a_addr
++ = 
√w_ch¨
;

680 --
os_d©a_cou¡
;

683 
	}
}

684 
	$£t_kîm_bö_mode
 (*
addr
)

686 
bö_°¨t_addªss
 = (*Ë
addr
;

687 
os_d©a_öô
 = 
bö_d©a_öô
;

688 
os_d©a_ch¨
 = 
bö_d©a_ch¨
;

689 
	}
}

693 
	gk_d©a_esˇ≥
, 
	gk_d©a_esˇ≥_ßved
;

694 
	$k_d©a_öô
 ()

696 
k_d©a_esˇ≥
 = 0;

697 
	`os_d©a_öô
 ();

698 
	}
}

699 
	$k_d©a_ßve
 ()

701 
k_d©a_esˇ≥_ßved
 = 
k_d©a_esˇ≥
;

702 
	`os_d©a_ßve
 ();

703 
	}
}

704 
	$k_d©a_ª°‹e
 ()

706 
k_d©a_esˇ≥
 = 
k_d©a_esˇ≥_ßved
;

707 
	`os_d©a_ª°‹e
 ();

708 
	}
}

709 
	$k_d©a_ch¨
 (
√w_ch¨
)

711 i‡(
k_d©a_esˇ≥
) {

713 
	`os_d©a_ch¨
 (
	`kå™s
 (
√w_ch¨
));

714 
k_d©a_esˇ≥
 = 0;

716 i‡(
√w_ch¨
 =
his_quŸe
) {

718 
k_d©a_esˇ≥
 = 1;

721 
	`os_d©a_ch¨
 (
√w_ch¨
);

724 
	}
}

726 
	#SEND_DATA_SIZE
 20

	)

727 
	g£nd_∑rms
[
SEND_DATA_SIZE
];

728 *
	g£nd_±r
;

732 
	$h™dÀ_£nd_∑ckë
 (
n
)

734 
Àngth
 = 3;

735 
byãs
;

738 
his_eﬁ
 = 
END_CHAR
;

739 
his_∑d_cou¡
 = 0;

740 
his_∑d_ch¨
 = '\0';

741 
his_quŸe
 = 
K_ESCAPE
;

744 i‡(
£nd_±r
 =&
£nd_∑rms
[
SEND_DATA_SIZE
 - 1])

745 --
£nd_±r
;

746 
byãs
 = 
£nd_±r
 - 
£nd_∑rms
;

748 i‡(
byãs
-- <= 0)

752 
a_b
[++
Àngth
] = 
	`toch¨
 (94);

753 i‡(
byãs
-- <= 0)

757 
a_b
[++
Àngth
] = 
	`toch¨
 (1);

758 i‡(
byãs
-- <= 0)

762 
his_∑d_cou¡
 = 
	`u¡och¨
 (
£nd_∑rms
[2]);

763 
a_b
[++
Àngth
] = 
	`toch¨
 (0);

764 i‡(
byãs
-- <= 0)

768 
his_∑d_ch¨
 = 
	`kå™s
 (
£nd_∑rms
[3]);

769 
a_b
[++
Àngth
] = 0x40;

770 i‡(
byãs
-- <= 0)

774 
his_eﬁ
 = 
	`u¡och¨
 (
£nd_∑rms
[4]);

775 
a_b
[++
Àngth
] = 
	`toch¨
 (
END_CHAR
);

776 i‡(
byãs
-- <= 0)

780 
his_quŸe
 = 
£nd_∑rms
[5];

781 
a_b
[++
Àngth
] = '#';

782 i‡(
byãs
-- <= 0)

786 
a_b
[++
Àngth
] = 'N';

787 i‡(
byãs
-- <= 0)

791 
a_b
[++
Àngth
] = '1';

792 i‡(
byãs
-- <= 0)

796 
a_b
[++
Àngth
] = 'N';

797 i‡(
byãs
-- <= 0)

801 
a_b
[++
Àngth
] = 
	`toch¨
 (2);

802 
a_b
[++
Àngth
] = 
	`toch¨
 (0);

803 
a_b
[++
Àngth
] = 
	`toch¨
 (94);

804 
a_b
[++
Àngth
] = 
	`toch¨
 (94);

807 
a_b
[0] = 
START_CHAR
;

808 
a_b
[1] = 
	`toch¨
 (
Àngth
);

809 
a_b
[2] = 
	`toch¨
 (
n
);

810 
a_b
[3] = 
ACK_TYPE
;

811 
a_b
[++
Àngth
] = '\0';

812 
a_b
[
Àngth
] = 
	`toch¨
 (
	`chk1
 (&a_b[1]));

813 
a_b
[++
Àngth
] = 
his_eﬁ
;

814 
a_b
[++
Àngth
] = '\0';

815 
	`s1_£nd∑ckë
 (
a_b
);

816 
	}
}

819 
	$k_ªcv
 ()

821 
√w_ch¨
;

822 
k_°©e
, 
k_°©e_ßved
;

823 
sum
;

824 
d⁄e
;

825 
Àngth
;

826 
n
, 
œ°_n
;

827 
z
 = 0;

828 
Àn_lo
, 
Àn_hi
;

831 
his_eﬁ
 = 
END_CHAR
;

832 
his_∑d_cou¡
 = 0;

833 
his_∑d_ch¨
 = '\0';

834 
his_quŸe
 = 
K_ESCAPE
;

837 
d⁄e
 = 0;

838 
k_°©e
 = 0;

839 
	`k_d©a_öô
 ();

840 
k_°©e_ßved
 = 
k_°©e
;

841 
	`k_d©a_ßve
 ();

842 
n
 = 0;

843 
œ°_n
 = -1;

854 !
d⁄e
) {

856 
£nd_±r
 = 
£nd_∑rms
;

867 
k_°©e_ßved
 = 
k_°©e
;

868 
	`k_d©a_ßve
 ();

874 
	`gëc
 ()) {

875 
START_CHAR
:

876 
START
;

877 
ETX_CHAR
:

883 
START
:

885 
sum
 = 0;

886 
√w_ch¨
 = 
	`gëc
 ();

887 i‡((
√w_ch¨
 & 0xE0) == 0)

888 
∑ckë_îr‹
;

889 
sum
 +
√w_ch¨
 & 0xff;

890 
Àngth
 = 
	`u¡och¨
 (
√w_ch¨
);

892 
√w_ch¨
 = 
	`gëc
 ();

893 i‡((
√w_ch¨
 & 0xE0) == 0)

894 
∑ckë_îr‹
;

895 
sum
 +
√w_ch¨
 & 0xff;

896 
n
 = 
	`u¡och¨
 (
√w_ch¨
);

897 --
Àngth
;

906 i‡(
n
 =
œ°_n
) {

908 
k_°©e
 = 
k_°©e_ßved
;

909 
	`k_d©a_ª°‹e
 ();

912 
œ°_n
 = 
n
;

913 
k_°©e_ßved
 = 
k_°©e
;

914 
	`k_d©a_ßve
 ();

919 
√w_ch¨
 = 
	`gëc
 ();

920 i‡((
√w_ch¨
 & 0xE0) == 0)

921 
∑ckë_îr‹
;

922 
sum
 +
√w_ch¨
 & 0xff;

923 
k_°©e
 = 
√w_ch¨
;

924 --
Àngth
;

926 i‡(
Àngth
 == -2) {

929 
√w_ch¨
 = 
	`gëc
 ();

930 i‡((
√w_ch¨
 & 0xE0) == 0)

931 
∑ckë_îr‹
;

932 
sum
 +
√w_ch¨
 & 0xff;

933 
Àn_hi
 = 
	`u¡och¨
 (
√w_ch¨
);

934 
√w_ch¨
 = 
	`gëc
 ();

935 i‡((
√w_ch¨
 & 0xE0) == 0)

936 
∑ckë_îr‹
;

937 
sum
 +
√w_ch¨
 & 0xff;

938 
Àn_lo
 = 
	`u¡och¨
 (
√w_ch¨
);

939 
Àngth
 = 
Àn_hi
 * 95 + 
Àn_lo
;

941 
√w_ch¨
 = 
	`gëc
 ();

942 i‡((
√w_ch¨
 & 0xE0) == 0)

943 
∑ckë_îr‹
;

944 i‡(
√w_ch¨
 !
	`toch¨
 ((
sum
 + ((sum >> 6) & 0x03)) & 0x3f))

945 
∑ckë_îr‹
;

946 
sum
 +
√w_ch¨
 & 0xff;

950 
Àngth
 > 1) {

951 
√w_ch¨
 = 
	`gëc
 ();

952 i‡((
√w_ch¨
 & 0xE0) == 0)

953 
∑ckë_îr‹
;

954 
sum
 +
√w_ch¨
 & 0xff;

955 --
Àngth
;

956 i‡(
k_°©e
 =
DATA_TYPE
) {

958 
	`k_d©a_ch¨
 (
√w_ch¨
);

959 } i‡(
k_°©e
 =
SEND_TYPE
) {

961 *
£nd_±r
++ = 
√w_ch¨
;

963 i‡(
£nd_±r
 >&
£nd_∑rms
[
SEND_DATA_SIZE
])

964 --
£nd_±r
;

968 
√w_ch¨
 = 
	`gëc
 ();

969 i‡((
√w_ch¨
 & 0xE0) == 0)

970 
∑ckë_îr‹
;

971 i‡(
√w_ch¨
 !
	`toch¨
 ((
sum
 + ((sum >> 6) & 0x03)) & 0x3f))

972 
∑ckë_îr‹
;

974 
√w_ch¨
 = 
	`gëc
 ();

975 i‡(
√w_ch¨
 !
END_CHAR
) {

976 
∑ckë_îr‹
:

978 
k_°©e
 = 
k_°©e_ßved
;

979 
	`k_d©a_ª°‹e
 ();

981 
	`£nd_«ck
 (
n
);

982 } i‡(
k_°©e
 =
SEND_TYPE
) {

984 
	`h™dÀ_£nd_∑ckë
 (
n
);

987 
	`£nd_ack
 (
n
);

989 i‡(
k_°©e
 =
BREAK_TYPE
)

990 
d⁄e
 = 1;

992 ++
z
;

994  ((
ul⁄g
Ë
os_d©a_addr
 - (ul⁄gË
bö_°¨t_addªss
);

995 
	}
}

1000 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_LOADS
)

1002 #ifdef 
CFG_LOADS_BAUD_CHANGE


1003 
U_BOOT_CMD
(

1004 
lﬂds
, 3, 0, 
do_lﬂd_£rül
,

1012 
U_BOOT_CMD
(

1013 
lﬂds
, 2, 0, 
do_lﬂd_£rül
,

1025 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_SAVES
)

1026 #ifdef 
CFG_LOADS_BAUD_CHANGE


1027 
U_BOOT_CMD
(

1028 
ßves
, 4, 0, 
do_ßve_£rül
,

1035 
U_BOOT_CMD
(

1036 
ßves
, 3, 0, 
do_ßve_£rül
,

1046 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_LOADB
)

1047 
U_BOOT_CMD
(

1048 
lﬂdb
, 3, 0, 
do_lﬂd_£rül_bö
,

1059 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_HWFLOW
)

1060 
	$do_hwÊow
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

1062 
	`hwÊow_⁄off
();

1064 i‡(
¨gc
 == 2) {

1065 i‡(
	`°rcmp
(
¨gv
[1], "off") == 0)

1066 
	`hwÊow_⁄off
(-1);

1068 i‡(
	`°rcmp
(
¨gv
[1], "on") == 0)

1069 
	`hwÊow_⁄off
(1);

1071 
	`¥ötf
("Ußge: %s\n", 
cmdç
->
ußge
);

1073 
	`¥ötf
("RTS/CTS h¨dw¨êÊow c⁄åﬁ: %s\n", 
	`hwÊow_⁄off
(0) ? "on" : "off");

1075 
	}
}

1079 
U_BOOT_CMD
(

1080 
hwÊow
, 2, 0, 
do_hwÊow
,

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/cmd_mem.c

30 
	~<comm⁄.h
>

31 
	~<comm™d.h
>

32 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_MMC
)

33 
	~<mmc.h
>

35 #ifde‡
CONFIG_HAS_DATAFLASH


36 
	~<d©aÊash.h
>

39 
ul⁄g
 
NëBoŸFûeX„rSize
;

41 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_MEMORY
)

42 
	$cmd_gë_d©a_size
(* 
¨g
, 
deÁu…_size
)

46 
Àn
 = 
	`°æí
(
¨g
);

47 i‡(
Àn
 > 2 && 
¨g
[len-2] == '.') {

48 
¨g
[
Àn
-1]) {

61  
deÁu…_size
;

62 
	}
}

64 
ul⁄g
 
	gba£_addªss
 = 0;

66 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_MEMORY
)

68 #ifdef 
CMD_MEM_DEBUG


69 
	#PRINTF
(
fmt
,
¨gs
...Ë
	`¥ötf
 (fmà,##¨gs)

	)

71 
	#PRINTF
(
fmt
,
¨gs
...)

	)

74 
mod_mem
(
cmd_tbl_t
 *, , , , *[]);

79 
uöt
 
	gdp_œ°_addr
, 
	gdp_œ°_size
;

80 
uöt
 
	gdp_œ°_Àngth
 = 0x40;

81 
uöt
 
	gmm_œ°_addr
, 
	gmm_œ°_size
;

88 
	#DISP_LINE_LEN
 16

	)

89 
	$do_mem_md
 ( 
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

91 
ul⁄g
 
addr
, 
Àngth
;

92 
ul⁄g
 
i
, 
nbyãs
, 
löebyãs
;

93 
u_ch¨
 *
˝
;

94 
size
;

95 
rc
 = 0;

100 
addr
 = 
dp_œ°_addr
;

101 
size
 = 
dp_œ°_size
;

102 
Àngth
 = 
dp_œ°_Àngth
;

104 i‡(
¨gc
 < 2) {

105 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

109 i‡((
Êag
 & 
CMD_FLAG_REPEAT
) == 0) {

113 i‡((
size
 = 
	`cmd_gë_d©a_size
(
¨gv
[0], 4)) < 0)

118 
addr
 = 
	`sim∂e_°πoul
(
¨gv
[1], 
NULL
, 16);

119 
addr
 +
ba£_addªss
;

124 i‡(
¨gc
 > 2)

125 
Àngth
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

133 
nbyãs
 = 
Àngth
 * 
size
;

135 
löebuf
[
DISP_LINE_LEN
];

136 
uöt
 *
uù
 = (uöà*)
löebuf
;

137 
ush‹t
 *
u•
 = (ush‹à*)
löebuf
;

138 
u_ch¨
 *
u˝
 = (u_ch¨ *)
löebuf
;

139 #ifde‡
CONFIG_HAS_DATAFLASH


140 
rc
;

142 
	`¥ötf
("%08lx:", 
addr
);

143 
löebyãs
 = (
nbyãs
>
DISP_LINE_LEN
)?DISP_LINE_LEN:nbytes;

145 #ifde‡
CONFIG_HAS_DATAFLASH


146 i‡((
rc
 = 
	`ªad_d©aÊash
(
addr
, (
löebyãs
/
size
)*size, 
löebuf
)Ë=
DATAFLASH_OK
){

152 
i
=0; i<
löebyãs
; i+
size
) {

153 i‡(
size
 == 4) {

154 
	`¥ötf
(" %08x", *
uù
++);

155 } i‡(
size
 == 2) {

156 
	`¥ötf
(" %04x", *
u•
++);

158 
	`¥ötf
(" %02x", *
u˝
++);

160 
addr
 +
size
;

165 
i
=0; i<
löebyãs
; i+
size
) {

166 i‡(
size
 == 4) {

167 
	`¥ötf
(" %08x", (*
uù
++ = *((
uöt
 *)
addr
)));

168 } i‡(
size
 == 2) {

169 
	`¥ötf
(" %04x", (*
u•
++ = *((
ush‹t
 *)
addr
)));

171 
	`¥ötf
(" %02x", (*
u˝
++ = *((
u_ch¨
 *)
addr
)));

173 
addr
 +
size
;

175 #ifde‡
CONFIG_HAS_DATAFLASH


178 
	`puts
 (" ");

179 
˝
 = 
löebuf
;

180 
i
=0; i<
löebyãs
; i++) {

181 i‡((*
˝
 < 0x20) || (*cp > 0x7e))

182 
	`putc
 ('.');

184 
	`¥ötf
("%c", *
˝
);

185 
˝
++;

187 
	`putc
 ('\n');

188 
nbyãs
 -
löebyãs
;

192 i‡(
	`˘æc
()) {

193 
rc
 = 1;

196 } 
nbyãs
 > 0);

198 
dp_œ°_addr
 = 
addr
;

199 
dp_œ°_Àngth
 = 
Àngth
;

200 
dp_œ°_size
 = 
size
;

201  (
rc
);

202 
	}
}

204 
	$do_mem_mm
 ( 
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

206  
	`mod_mem
 (
cmdç
, 1, 
Êag
, 
¨gc
, 
¨gv
);

207 
	}
}

208 
	$do_mem_nm
 ( 
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

210  
	`mod_mem
 (
cmdç
, 0, 
Êag
, 
¨gc
, 
¨gv
);

211 
	}
}

213 
	$do_mem_ba£
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

215 i‡(
¨gc
 > 1) {

218 
ba£_addªss
 = 
	`sim∂e_°πoul
(
¨gv
[1], 
NULL
, 16);

222 
	`¥ötf
("Ba£ Addªss: 0x%08lx\n", 
ba£_addªss
);

224 
	}
}

226 
	$do_mem_lo›
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

228 
ul⁄g
 
addr
, 
Àngth
, 
i
, 
junk
;

229 
size
;

230 vﬁ©ûê
uöt
 *
l⁄gp
;

231 vﬁ©ûê
ush‹t
 *
sh‹ç
;

232 vﬁ©ûê
u_ch¨
 *
˝
;

234 i‡(
¨gc
 < 3) {

235 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

242 i‡((
size
 = 
	`cmd_gë_d©a_size
(
¨gv
[0], 4)) < 0)

247 
addr
 = 
	`sim∂e_°πoul
(
¨gv
[1], 
NULL
, 16);

251 
Àngth
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

256 i‡(
Àngth
 == 1) {

257 i‡(
size
 == 4) {

258 
l⁄gp
 = (
uöt
 *)
addr
;

260 
i
 = *
l⁄gp
;

262 i‡(
size
 == 2) {

263 
sh‹ç
 = (
ush‹t
 *)
addr
;

265 
i
 = *
sh‹ç
;

267 
˝
 = (
u_ch¨
 *)
addr
;

269 
i
 = *
˝
;

272 i‡(
size
 == 4) {

274 
l⁄gp
 = (
uöt
 *)
addr
;

275 
i
 = 
Àngth
;

276 
i
-- > 0)

277 
junk
 = *
l⁄gp
++;

280 i‡(
size
 == 2) {

282 
sh‹ç
 = (
ush‹t
 *)
addr
;

283 
i
 = 
Àngth
;

284 
i
-- > 0)

285 
junk
 = *
sh‹ç
++;

289 
˝
 = (
u_ch¨
 *)
addr
;

290 
i
 = 
Àngth
;

291 
i
-- > 0)

292 
junk
 = *
˝
++;

294 
	}
}

297 #ifde‡
CONFIG_LOOPW


298 
	$do_mem_lo›w
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

300 
ul⁄g
 
addr
, 
Àngth
, 
i
, 
d©a
;

301 
size
;

302 vﬁ©ûê
uöt
 *
l⁄gp
;

303 vﬁ©ûê
ush‹t
 *
sh‹ç
;

304 vﬁ©ûê
u_ch¨
 *
˝
;

306 i‡(
¨gc
 < 4) {

307 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

314 i‡((
size
 = 
	`cmd_gë_d©a_size
(
¨gv
[0], 4)) < 0)

319 
addr
 = 
	`sim∂e_°πoul
(
¨gv
[1], 
NULL
, 16);

323 
Àngth
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

326 
d©a
 = 
	`sim∂e_°πoul
(
¨gv
[3], 
NULL
, 16);

331 i‡(
Àngth
 == 1) {

332 i‡(
size
 == 4) {

333 
l⁄gp
 = (
uöt
 *)
addr
;

335 *
l⁄gp
 = 
d©a
;

337 i‡(
size
 == 2) {

338 
sh‹ç
 = (
ush‹t
 *)
addr
;

340 *
sh‹ç
 = 
d©a
;

342 
˝
 = (
u_ch¨
 *)
addr
;

344 *
˝
 = 
d©a
;

347 i‡(
size
 == 4) {

349 
l⁄gp
 = (
uöt
 *)
addr
;

350 
i
 = 
Àngth
;

351 
i
-- > 0)

352 *
l⁄gp
++ = 
d©a
;

355 i‡(
size
 == 2) {

357 
sh‹ç
 = (
ush‹t
 *)
addr
;

358 
i
 = 
Àngth
;

359 
i
-- > 0)

360 *
sh‹ç
++ = 
d©a
;

364 
˝
 = (
u_ch¨
 *)
addr
;

365 
i
 = 
Àngth
;

366 
i
-- > 0)

367 *
˝
++ = 
d©a
;

369 
	}
}

373 #ifde‡
RT2880_U_BOOT_CMD_OPEN


379 
	$do_mem_mã°
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

381 
vu_l⁄g
 *
addr
, *
°¨t
, *
íd
;

382 
ul⁄g
 
vÆ
;

383 
ul⁄g
 
ªadback
;

385 #i‡
	`deföed
(
CFG_ALT_MEMTEST
)

386 
vu_l⁄g
 
addr_mask
;

387 
vu_l⁄g
 
off£t
;

388 
vu_l⁄g
 
ã°_off£t
;

389 
vu_l⁄g
 
∑âîn
;

390 
vu_l⁄g
 
ãmp
;

391 
vu_l⁄g
 
™ti_∑âîn
;

392 
vu_l⁄g
 
num_w‹ds
;

393 #i‡
	`deföed
(
CFG_MEMTEST_SCRATCH
)

394 
vu_l⁄g
 *
dummy
 = (vu_l⁄g*)
CFG_MEMTEST_SCRATCH
;

396 
vu_l⁄g
 *
dummy
 = 
NULL
;

398 
j
;

399 
ôî©i⁄s
 = 1;

401 c⁄° 
ul⁄g
 
bô∑âîn
[] = {

412 
ul⁄g
 
ö¸
;

413 
ul⁄g
 
∑âîn
;

414 
rcode
 = 0;

417 i‡(
¨gc
 > 1) {

418 
°¨t
 = (
ul⁄g
 *)
	`sim∂e_°πoul
(
¨gv
[1], 
NULL
, 16);

420 
°¨t
 = (
ul⁄g
 *)
CFG_MEMTEST_START
;

423 i‡(
¨gc
 > 2) {

424 
íd
 = (
ul⁄g
 *)
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

426 
íd
 = (
ul⁄g
 *)(
CFG_MEMTEST_END
);

429 i‡(
¨gc
 > 3) {

430 
∑âîn
 = (
ul⁄g
)
	`sim∂e_°πoul
(
¨gv
[3], 
NULL
, 16);

432 
∑âîn
 = 0;

435 #i‡
	`deföed
(
CFG_ALT_MEMTEST
)

436 
	`¥ötf
 ("Te°ög %08x ... %08x:\n", (
uöt
)
°¨t
, (uöt)
íd
);

437 
	`PRINTF
("%s:%d: start 0x%pÉnd 0x%p\n",

438 
__FUNCTION__
, 
__LINE__
, 
°¨t
, 
íd
);

441 i‡(
	`˘æc
()) {

442 
	`putc
 ('\n');

446 
	`¥ötf
("Iãøti⁄: %6d\r", 
ôî©i⁄s
);

447 
	`PRINTF
("Iãøti⁄: %6d\n", 
ôî©i⁄s
);

448 
ôî©i⁄s
++;

467 
addr
 = 
°¨t
;

468 
j
 = 0; j < (
bô∑âîn
)/(bitpattern[0]); j++) {

469 
vÆ
 = 
bô∑âîn
[
j
];

470 ; 
vÆ
 != 0; val <<= 1) {

471 *
addr
 = 
vÆ
;

472 *
dummy
 = ~
vÆ
;

473 
ªadback
 = *
addr
;

474 if(
ªadback
 !
vÆ
) {

475 
	`¥ötf
 ("FAILURE (dataÜine): "

477 
vÆ
, 
ªadback
);

479 *
addr
 = ~
vÆ
;

480 *
dummy
 = 
vÆ
;

481 
ªadback
 = *
addr
;

482 if(
ªadback
 !~
vÆ
) {

483 
	`¥ötf
 ("FAILURE (dataÜine): "

485 
ªadback
, ~
vÆ
);

531 
addr_mask
 = ((
ul⁄g
)
íd
 - (ul⁄g)
°¨t
)/(
vu_l⁄g
);

532 
∑âîn
 = (
vu_l⁄g
) 0xaaaaaaaa;

533 
™ti_∑âîn
 = (
vu_l⁄g
) 0x55555555;

535 
	`PRINTF
("%s:%d:áddr mask = 0x%.8lx\n",

536 
__FUNCTION__
, 
__LINE__
,

537 
addr_mask
);

542 
off£t
 = 1; (off£à& 
addr_mask
) != 0; offset <<= 1) {

543 
°¨t
[
off£t
] = 
∑âîn
;

549 
ã°_off£t
 = 0;

550 
°¨t
[
ã°_off£t
] = 
™ti_∑âîn
;

552 
off£t
 = 1; (off£à& 
addr_mask
) != 0; offset <<= 1) {

553 
ãmp
 = 
°¨t
[
off£t
];

554 i‡(
ãmp
 !
∑âîn
) {

555 
	`¥ötf
 ("\nFAILURE: Address bit stuck high @ 0x%.8lx:"

557 (
ul⁄g
)&
°¨t
[
off£t
], 
∑âîn
, 
ãmp
);

561 
°¨t
[
ã°_off£t
] = 
∑âîn
;

566 
ã°_off£t
 = 1; (ã°_off£à& 
addr_mask
) != 0;Åest_offset <<= 1) {

567 
°¨t
[
ã°_off£t
] = 
™ti_∑âîn
;

569 
off£t
 = 1; (off£à& 
addr_mask
) != 0; offset <<= 1) {

570 
ãmp
 = 
°¨t
[
off£t
];

571 i‡((
ãmp
 !
∑âîn
Ë&& (
off£t
 !
ã°_off£t
)) {

572 
	`¥ötf
 ("\nFAILURE: Address bit stuckÜow or shorted @"

574 (
ul⁄g
)&
°¨t
[
off£t
], 
∑âîn
, 
ãmp
);

578 
°¨t
[
ã°_off£t
] = 
∑âîn
;

593 
num_w‹ds
 = ((
ul⁄g
)
íd
 - (ul⁄g)
°¨t
)/(
vu_l⁄g
) + 1;

598 
∑âîn
 = 1, 
off£t
 = 0; off£à< 
num_w‹ds
;Öattern++, offset++) {

599 
°¨t
[
off£t
] = 
∑âîn
;

605 
∑âîn
 = 1, 
off£t
 = 0; off£à< 
num_w‹ds
;Öattern++, offset++) {

606 
ãmp
 = 
°¨t
[
off£t
];

607 i‡(
ãmp
 !
∑âîn
) {

608 
	`¥ötf
 ("\nFAILURE (read/write) @ 0x%.8lx:"

610 (
ul⁄g
)&
°¨t
[
off£t
], 
∑âîn
, 
ãmp
);

614 
™ti_∑âîn
 = ~
∑âîn
;

615 
°¨t
[
off£t
] = 
™ti_∑âîn
;

621 
∑âîn
 = 1, 
off£t
 = 0; off£à< 
num_w‹ds
;Öattern++, offset++) {

622 
™ti_∑âîn
 = ~
∑âîn
;

623 
ãmp
 = 
°¨t
[
off£t
];

624 i‡(
ãmp
 !
™ti_∑âîn
) {

625 
	`¥ötf
 ("\nFAILURE (read/write): @ 0x%.8lx:"

627 (
ul⁄g
)&
°¨t
[
off£t
], 
™ti_∑âîn
, 
ãmp
);

630 
°¨t
[
off£t
] = 0;

635 
ö¸
 = 1;

637 i‡(
	`˘æc
()) {

638 
	`putc
 ('\n');

642 
	`¥ötf
 ("\rPattern %08lX Writing..."

645 
∑âîn
, "");

647 
addr
=
°¨t
,
vÆ
=
∑âîn
;áddr<
íd
;áddr++) {

648 *
addr
 = 
vÆ
;

649 
vÆ
 +
ö¸
;

652 
	`puts
 ("Reading...");

654 
addr
=
°¨t
,
vÆ
=
∑âîn
;áddr<
íd
;áddr++) {

655 
ªadback
 = *
addr
;

656 i‡(
ªadback
 !
vÆ
) {

657 
	`¥ötf
 ("\nMemÉrror @ 0x%08X: "

659 (
uöt
)
addr
, 
ªadback
, 
vÆ
);

660 
rcode
 = 1;

662 
vÆ
 +
ö¸
;

671 if(
∑âîn
 & 0x80000000) {

672 
∑âîn
 = -pattern;

675 
∑âîn
 = ~pattern;

677 
ö¸
 = -incr;

679  
rcode
;

681 
	}
}

691 
	$mod_mem
(
cmd_tbl_t
 *
cmdç
, 
ö¸Êag
, 
Êag
, 
¨gc
, *
¨gv
[])

693 
ul⁄g
 
addr
, 
i
;

694 
nbyãs
, 
size
;

695 
c⁄sﬁe_buf„r
[];

697 i‡(
¨gc
 != 2) {

698 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

702 #ifde‡
CONFIG_BOOT_RETRY_TIME


703 
	`ª£t_cmd_timeout
();

708 
addr
 = 
mm_œ°_addr
;

709 
size
 = 
mm_œ°_size
;

711 i‡((
Êag
 & 
CMD_FLAG_REPEAT
) == 0) {

715 i‡((
size
 = 
	`cmd_gë_d©a_size
(
¨gv
[0], 4)) < 0)

720 
addr
 = 
	`sim∂e_°πoul
(
¨gv
[1], 
NULL
, 16);

721 
addr
 +
ba£_addªss
;

724 #ifde‡
CONFIG_HAS_DATAFLASH


725 i‡(
	`addr_d©aÊash
(
addr
)){

726 
	`puts
 ("Can't modify DataFlash inÖlace. Use cp instead.\n\r");

735 
	`¥ötf
("%08lx:", 
addr
);

736 i‡(
size
 == 4)

737 
	`¥ötf
(" %08x", *((
uöt
 *)
addr
));

738 i‡(
size
 == 2)

739 
	`¥ötf
(" %04x", *((
ush‹t
 *)
addr
));

741 
	`¥ötf
(" %02x", *((
u_ch¨
 *)
addr
));

743 
nbyãs
 = 
	`ªadlöe
 (" ? ", 0);

744 i‡(
nbyãs
 =0 || (nbyã†=1 && 
c⁄sﬁe_buf„r
[0] == '-')) {

748 i‡(
ö¸Êag
)

750 
addr
 +
nbyãs
 ? -
size
 : size;

751 
nbyãs
 = 0;

754 
nbyãs
 = 1;

755 #ifde‡
CONFIG_BOOT_RETRY_TIME


756 
	`ª£t_cmd_timeout
();

759 #ifde‡
CONFIG_BOOT_RETRY_TIME


760 i‡(
nbyãs
 == -2) {

765 *
ídp
;

766 
i
 = 
	`sim∂e_°πoul
(
c⁄sﬁe_buf„r
, &
ídp
, 16);

767 
nbyãs
 = 
ídp
 - 
c⁄sﬁe_buf„r
;

768 i‡(
nbyãs
) {

769 #ifde‡
CONFIG_BOOT_RETRY_TIME


772 
	`ª£t_cmd_timeout
();

774 i‡(
size
 == 4)

775 *((
uöt
 *)
addr
Ë
i
;

776 i‡(
size
 == 2)

777 *((
ush‹t
 *)
addr
Ë
i
;

779 *((
u_ch¨
 *)
addr
Ë
i
;

780 i‡(
ö¸Êag
)

781 
addr
 +
size
;

784 } 
nbyãs
);

786 
mm_œ°_addr
 = 
addr
;

787 
mm_œ°_size
 = 
size
;

789 
	}
}

791 #i‚de‡
CONFIG_CRC32_VERIFY


793 #ifde‡
RT2880_U_BOOT_CMD_OPEN


794 
	$do_mem_¸c
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

796 
ul⁄g
 
addr
, 
Àngth
;

797 
ul⁄g
 
¸c
;

798 
ul⁄g
 *
±r
;

800 i‡(
¨gc
 < 3) {

801 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

805 
addr
 = 
	`sim∂e_°πoul
 (
¨gv
[1], 
NULL
, 16);

806 
addr
 +
ba£_addªss
;

808 
Àngth
 = 
	`sim∂e_°πoul
 (
¨gv
[2], 
NULL
, 16);

810 
¸c
 = 
	`¸c32
 (0, (c⁄° 
uch¨
 *Ë
addr
, 
Àngth
);

812 
	`¥ötf
 ("CRC32 for %08lx ... %08lx ==> %08lx\n",

813 
addr
,ádd∏+ 
Àngth
 - 1, 
¸c
);

815 i‡(
¨gc
 > 3) {

816 
±r
 = (
ul⁄g
 *Ë
	`sim∂e_°πoul
 (
¨gv
[3], 
NULL
, 16);

817 *
±r
 = 
¸c
;

820 
	}
}

825 #i‡
deföed
(
RT2880_U_BOOT_CMD_OPEN
Ë|| deföed(
RALINK_USB
Ë|| deföed(
MTK_USB
)

826 
	$do_mem_¸c
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

828 
ul⁄g
 
addr
, 
Àngth
;

829 
ul⁄g
 
¸c
;

830 
ul⁄g
 *
±r
;

831 
ul⁄g
 
v¸c
;

832 
vîify
;

833 
ac
;

834 **
av
;

836 i‡(
¨gc
 < 3) {

837 
ußge
:

838 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

842 
av
 = 
¨gv
 + 1;

843 
ac
 = 
¨gc
 - 1;

844 i‡(
	`°rcmp
(*
av
, "-v") == 0) {

845 
vîify
 = 1;

846 
av
++;

847 
ac
--;

848 i‡(
ac
 < 3)

849 
ußge
;

851 
vîify
 = 0;

853 
addr
 = 
	`sim∂e_°πoul
(*
av
++, 
NULL
, 16);

854 
addr
 +
ba£_addªss
;

855 
Àngth
 = 
	`sim∂e_°πoul
(*
av
++, 
NULL
, 16);

857 
¸c
 = 
	`¸c32
(0, (c⁄° 
uch¨
 *Ë
addr
, 
Àngth
);

859 i‡(!
vîify
) {

860 
	`¥ötf
 ("CRC32 for %08lx ... %08lx ==> %08lx\n",

861 
addr
,ádd∏+ 
Àngth
 - 1, 
¸c
);

862 i‡(
ac
 > 2) {

863 
±r
 = (
ul⁄g
 *Ë
	`sim∂e_°πoul
 (*
av
++, 
NULL
, 16);

864 *
±r
 = 
¸c
;

867 
v¸c
 = 
	`sim∂e_°πoul
(*
av
++, 
NULL
, 16);

868 i‡(
v¸c
 !
¸c
) {

869 
	`¥ötf
 ("CRC32 for %08lx ... %08lx ==> %08lx != %08lx ** ERROR **\n",

870 
addr
,ádd∏+ 
Àngth
 - 1, 
¸c
, 
v¸c
);

877 
	}
}

882 
U_BOOT_CMD
(

883 
md
, 3, 1, 
do_mem_md
,

888 
U_BOOT_CMD
(

889 
mm
, 2, 1, 
do_mem_mm
,

894 
U_BOOT_CMD
(

895 
nm
, 2, 1, 
do_mem_nm
,

900 #i‚de‡
CONFIG_CRC32_VERIFY


901 #ifde‡
RT2880_U_BOOT_CMD_OPEN


902 
U_BOOT_CMD
(

903 
¸c32
, 4, 1, 
do_mem_¸c
,

909 #i‡
deföed
(
RT2880_U_BOOT_CMD_OPEN
Ë|| deföed(
RALINK_USB
Ë|| deföed(
MTK_USB
)

910 
U_BOOT_CMD
(

911 
¸c32
, 5, 1, 
do_mem_¸c
,

919 #ifde‡
RT2880_U_BOOT_CMD_OPEN


920 
U_BOOT_CMD
(

921 
ba£
, 2, 1, 
do_mem_ba£
,

927 
U_BOOT_CMD
(

928 
lo›
, 3, 1, 
do_mem_lo›
,

935 #ifde‡
CONFIG_LOOPW


936 
U_BOOT_CMD
(

937 
lo›w
, 4, 1, 
do_mem_lo›w
,

944 #ifde‡
RT2880_U_BOOT_CMD_OPEN


945 
U_BOOT_CMD
(

946 
mã°
, 4, 1, 
do_mem_mã°
,

953 #ifde‡
RALINK_SSO_TEST_FUN


954 
	$do_sso_ã°
(
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

956 
ul⁄g
 
b
, 
e
;

957 *
p
, 
±0
, 
±1
;

959 i‡(
¨gc
 != 6) {

960 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

963 
b
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

964 
e
 = 
	`sim∂e_°πoul
(
¨gv
[3], 
NULL
, 16);

965 
±1
 = 
	`sim∂e_°πoul
(
¨gv
[4], 
NULL
, 16);

966 
±0
 = 
	`sim∂e_°πoul
(
¨gv
[5], 
NULL
, 16);

967 
	`¥ötf
("°¨àSSOÅe° from 0x%xÅÿ0x%x\n", 
b
, 
e
);

968 
	`¥ötf
("∑âî¿0x%08x %08x\n", 
±1
, 
±0
);

969 
b
 |= 0xa0000000;

970 
e
 |= 0xa0000000;

972 
p
 = (*)
b
; (Ì < 
e
;Ö+=2) {

973 *
p
 = 
±0
;

974 *(
p
+1Ë
±1
;

976 
	`¥ötf
("done writing\n");

977 i‡(!
	`°∫cmp
(
¨gv
[1], "wr", 3)) {

978 
p
 = (*)
b
; (Ì < 
e
;Ö+=2) {

979 i‡(*
p
 !
±0
) {

980 
	`¥ötf
("°›≥d.Éº‹áà%x\n", 
p
);

983 i‡(*(
p
+1Ë!
±1
) {

984 
	`¥ötf
("°›≥d.Éº‹áà%x\n", 
p
);

988 
	`¥ötf
("doneÑeading successfully\n");

991 
	}
}

993 
U_BOOT_CMD
(

994 
ssŸe°
, 6, 1, 
do_sso_ã°
,

1003 #ifde‡
CFG_ENV_IS_IN_FLASH


1004 
	$do_mem_˝
 ( 
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

1006 
ul⁄g
 
addr
 = 0, 
de°
 = 0, 
cou¡
 = 0;

1007 
size
;

1009 if(!
	`memcmp
(
¨gv
[0],"cp.linux",("cp.linux")))

1015 #i‡(
	`deföed
 (
RT2880_ASIC_BOARD
Ë|| deföed (
RT2880_FPGA_BOARD
Ë|| deföed (
RT3052_MP1
)Ë&& (
deföed
 
ON_BOARD_8M_FLASH_COMPONENT
 || deföed 
ON_BOARD_16M_FLASH_COMPONENT
)

1016 
rc
;

1017 
ul⁄g
 
kînsz
 = 0x3B0000;

1019 
addr
 +
ba£_addªss
;

1020 
addr
 +
CFG_LOAD_ADDR
;

1021 
de°
 = de° + 
CFG_KERN_ADDR
 + 
ba£_addªss
;

1022 i‡(
NëBoŸFûeX„rSize
 <
kînsz
)

1023 
cou¡
 = 
NëBoŸFûeX„rSize
;

1025 
cou¡
 = 
kînsz
;

1026 
size
 = 1;

1028 
	`¥ötf
("\¿C›yÜöux image[%d byã]ÅÿFœsh[0x%08X].... \n",
cou¡
,
de°
);

1029 
	`puts
 ("CopyÅo Flash... ");

1030 
	`¥ötf
 ("\¿C›y %d byã†tÿFœsh... ", 
cou¡
);

1032 
rc
 = 
	`Êash_wrôe
 ((
uch¨
 *)
addr
, 
de°
, 
cou¡
);

1033 i‡(
rc
 != 0) {

1034 
	`Êash_≥º‹
 (
rc
);

1037 i‡(
cou¡
 < 
kînsz
)

1040 
addr
 +
kînsz
;

1041 
de°
 = 
PHYS_FLASH_2
;

1042 
cou¡
 = 
NëBoŸFûeX„rSize
 - 
kînsz
;

1043 
	`¥ötf
("\¿C›yÜöux fûêsy°em[%d byã]ÅÿFœsh[0x%08X].... \n",
cou¡
,
de°
);

1044 
	`puts
 ("CopyÅo Flash... ");

1045 
	`¥ötf
 ("\¿C›y %d byã†tÿFœsh... ", 
cou¡
);

1047 
rc
 = 
	`Êash_wrôe
 ((
uch¨
 *)
addr
, 
de°
, 
cou¡
);

1048 i‡(
rc
 != 0) {

1049 
	`Êash_≥º‹
 (
rc
);

1053 
	`puts
 ("done\n");

1056 
addr
 +
ba£_addªss
;

1057 
addr
 +
CFG_LOAD_ADDR
;

1058 
de°
 = de° + 
CFG_KERN_ADDR
 + 
ba£_addªss
;

1059 
	`¥ötf
("\¿C›yÜöux image[%d byã]ÅÿFœsh[0x%08X].... \n",
NëBoŸFûeX„rSize
,
de°
);

1060 
cou¡
 = 
NëBoŸFûeX„rSize
;

1061 
size
 = 1;

1062 
RT2880_START_WRITE_FLASH
;

1078 if(!
	`memcmp
(
¨gv
[0],"cp.uboot",("cp.uboot")))

1080 
addr
 +
ba£_addªss
;

1081 
addr
 +
CFG_LOAD_ADDR
;

1082 
de°
 = de° + 
CFG_FLASH_BASE
 + 
ba£_addªss
;

1083 
	`¥ötf
("\¿C›y uboŸ[%d byã]ÅÿFœsh[0x%08X].... \n",
NëBoŸFûeX„rSize
,
de°
);

1085 
cou¡
 = 
NëBoŸFûeX„rSize
;

1086 
size
 = 1;

1087 
RT2880_START_WRITE_FLASH
;

1090 i‡(
¨gc
 != 4) {

1091 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

1096 i‡((
size
 = 
	`cmd_gë_d©a_size
(
¨gv
[0], 4)) < 0)

1098 
	`puts
 (" cmdÉrror\n");

1102 
addr
 = 
	`sim∂e_°πoul
(
¨gv
[1], 
NULL
, 16);

1103 
addr
 +
ba£_addªss
;

1105 
de°
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

1106 
de°
 +
ba£_addªss
;

1108 
cou¡
 = 
	`sim∂e_°πoul
(
¨gv
[3], 
NULL
, 16);

1110 
RT2880_START_WRITE_FLASH
:

1112 i‡(
cou¡
 == 0) {

1113 
	`puts
 ("ZeroÜength ???\n");

1117 #i‚de‡
CFG_NO_FLASH


1119 i‡–(
	`addr2öfo
(
de°
Ë!
NULL
)

1120 #ifde‡
CONFIG_HAS_DATAFLASH


1121 && (!
	`addr_d©aÊash
(
addr
))

1124 
rc
;

1126 
	`puts
 ("CopyÅo Flash... ");

1127 
	`¥ötf
 ("\¿C›y %d byãÅÿFœsh... ",
cou¡
*
size
);

1129 
rc
 = 
	`Êash_wrôe
 ((
uch¨
 *)
addr
, 
de°
, 
cou¡
*
size
);

1130 i‡(
rc
 != 0) {

1131 
	`Êash_≥º‹
 (
rc
);

1134 
	`puts
 ("done\n");

1139 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_MMC
)

1140 i‡(
	`mmc2öfo
(
de°
)) {

1141 
rc
;

1143 
	`puts
 ("CopyÅo MMC... ");

1144 
rc
 = 
	`mmc_wrôe
 ((
uch¨
 *)
addr
, 
de°
, 
cou¡
*
size
)) {

1146 
	`putc
 ('\n');

1149 
	`puts
 ("failed\n");

1152 
	`¥ötf
 ("%s[%d] FIXME:Ñc=%d\n",
__FILE__
,
__LINE__
,
rc
);

1155 
	`puts
 ("done\n");

1159 i‡(
	`mmc2öfo
(
addr
)) {

1160 
rc
;

1162 
	`puts
 ("Copy from MMC... ");

1163 
rc
 = 
	`mmc_ªad
 (
addr
, (
uch¨
 *)
de°
, 
cou¡
*
size
)) {

1165 
	`putc
 ('\n');

1168 
	`puts
 ("failed\n");

1171 
	`¥ötf
 ("%s[%d] FIXME:Ñc=%d\n",
__FILE__
,
__LINE__
,
rc
);

1174 
	`puts
 ("done\n");

1179 #ifde‡
CONFIG_HAS_DATAFLASH


1181 i‡(
	`addr_d©aÊash
(
de°
Ë&& !addr_d©aÊash(
addr
)){

1182 
rc
;

1184 
	`puts
 ("CopyÅo DataFlash... ");

1186 
rc
 = 
	`wrôe_d©aÊash
 (
de°
, 
addr
, 
cou¡
*
size
);

1188 i‡(
rc
 != 1) {

1189 
	`d©aÊash_≥º‹
 (
rc
);

1192 
	`puts
 ("done\n");

1197 i‡(
	`addr_d©aÊash
(
addr
Ë&& !addr_d©aÊash(
de°
Ë&& (
	`addr2öfo
(de°)==
NULL
) ){

1198 
rc
;

1199 
rc
 = 
	`ªad_d©aÊash
(
addr
, 
cou¡
 * 
size
, (*Ë
de°
);

1200 i‡(
rc
 != 1) {

1201 
	`d©aÊash_≥º‹
 (
rc
);

1207 i‡(
	`addr_d©aÊash
(
addr
Ë&&áddr_d©aÊash(
de°
)){

1208 
	`puts
 ("Unsupported combination of source/destination.\n\r");

1213 
cou¡
-- > 0) {

1214 i‡(
size
 == 4)

1215 *((
ul⁄g
 *)
de°
Ë*((ul⁄g *)
addr
);

1216 i‡(
size
 == 2)

1217 *((
ush‹t
 *)
de°
Ë*((ush‹à*)
addr
);

1219 *((
u_ch¨
 *)
de°
Ë*((u_ch¨ *)
addr
);

1220 
addr
 +
size
;

1221 
de°
 +
size
;

1224 
	}
}

1226 
U_BOOT_CMD
(

1227 
˝
, 4, 1, 
do_mem_˝
,

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/cmd_misc.c

27 
	~<comm⁄.h
>

28 
	~<comm™d.h
>

30 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_MISC
)

31 #ifde‡
RT2880_U_BOOT_CMD_OPEN


33 
	$do_¶ìp
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

35 
ul⁄g
 
dñay
;

37 i‡(
¨gc
 != 2) {

38 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

42 
dñay
 = 
	`sim∂e_°πoul
(
¨gv
[1], 
NULL
, 10);

44 
dñay
) {

45 
i
;

46 
i
=0; i<1000; ++i) {

47 i‡(
	`˘æc
 ()) {

50 
	`udñay
 (1000);

52 --
dñay
;

55 
	}
}

58 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_IRQ
)

59 
do_úqöfo
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[]);

61 
U_BOOT_CMD
(

62 
úqöfo
, 1, 1, 
do_úqöfo
,

64 
NULL


67 #ifde‡
RT2880_U_BOOT_CMD_OPEN


69 
U_BOOT_CMD
(

70 
¶ìp
 , 2, 2, 
do_¶ìp
,

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/cmd_net.c

27 
	~<comm⁄.h
>

28 
	~<comm™d.h
>

29 
	~<√t.h
>

30 #unde‡
DEBUG


31 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_NET
)

34 
do_boŸm
 (
cmd_tbl_t
 *, , , *[]);

35 
modifõs
;

36 
√tboŸ_comm⁄
 (, 
cmd_tbl_t
 *, , *[]);

38 #ifde‡
RALINK_CMDLINE


39 #ifde‡
RT2880_U_BOOT_CMD_OPEN


40 
	$do_boŸp
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

42  
	`√tboŸ_comm⁄
 (
BOOTP
, 
cmdç
, 
¨gc
, 
¨gv
);

43 
	}
}

45 
U_BOOT_CMD
(

46 
boŸp
, 3, 1, 
do_boŸp
,

53 
	$do_t·pb
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

55 #ifde‡
DEBUG


56 
	`¥ötf
("Fûe: %s, Func: %s, Löe: %d\n", 
__FILE__
,
__FUNCTION__
 , 
__LINE__
);

58  
	`√tboŸ_comm⁄
 (
TFTP
, 
cmdç
, 
¨gc
, 
¨gv
);

59 
	}
}

61 #ifde‡
RALINK_CMDLINE


62 
U_BOOT_CMD
(

63 
t·pboŸ
, 3, 1, 
do_t·pb
,

69 #ifde‡
RT2880_U_BOOT_CMD_OPEN


70 #ifde‡
RALINK_CMDLINE


71 
	$do_øΩb
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

73  
	`√tboŸ_comm⁄
 (
RARP
, 
cmdç
, 
¨gc
, 
¨gv
);

74 
	}
}

76 
U_BOOT_CMD
(

77 
øΩboŸ
, 3, 1, 
do_øΩb
,

83 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_DHCP
)

84 
	$do_dh˝
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

86  
	`√tboŸ_comm⁄
(
DHCP
, 
cmdç
, 
¨gc
, 
¨gv
);

87 
	}
}

89 
U_BOOT_CMD
(

90 
dh˝
, 3, 1, 
do_dh˝
,

96 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_NFS
)

97 
	$do_nfs
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

99  
	`√tboŸ_comm⁄
(
NFS
, 
cmdç
, 
¨gc
, 
¨gv
);

100 
	}
}

102 
U_BOOT_CMD
(

103 
nfs
, 3, 1, 
do_nfs
,

109 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_ENV
)

110 
	$√tboŸ_upd©e_ív
 ()

112 
tmp
[22];

114 i‡(
NëOurG©ewayIP
) {

115 
	`ù_to_°rög
 (
NëOurG©ewayIP
, 
tmp
);

116 
	`£ãnv
 ("g©ewayù", 
tmp
);

119 i‡(
NëOurSub√tMask
) {

120 
	`ù_to_°rög
 (
NëOurSub√tMask
, 
tmp
);

121 
	`£ãnv
 ("√tmask", 
tmp
);

124 i‡(
NëOurHo°Name
[0])

125 
	`£ãnv
 ("ho°«me", 
NëOurHo°Name
);

127 i‡(
NëOurRoŸP©h
[0])

128 
	`£ãnv
 ("roŸ∑th", 
NëOurRoŸP©h
);

130 i‡(
NëOurIP
) {

131 
	`ù_to_°rög
 (
NëOurIP
, 
tmp
);

132 
	`£ãnv
 ("ùaddr", 
tmp
);

135 i‡(
NëSîvîIP
) {

136 
	`ù_to_°rög
 (
NëSîvîIP
, 
tmp
);

137 
	`£ãnv
 ("£rvîù", 
tmp
);

140 i‡(
NëOurDNSIP
) {

141 
	`ù_to_°rög
 (
NëOurDNSIP
, 
tmp
);

142 
	`£ãnv
 ("dnsù", 
tmp
);

144 #i‡(
CONFIG_BOOTP_MASK
 & 
CONFIG_BOOTP_DNS2
)

145 i‡(
NëOurDNS2IP
) {

146 
	`ù_to_°rög
 (
NëOurDNS2IP
, 
tmp
);

147 
	`£ãnv
 ("dnsù2", 
tmp
);

150 i‡(
NëOurNISDomaö
[0])

151 
	`£ãnv
 ("domaö", 
NëOurNISDomaö
);

153 
	}
}

157 
	$√tboŸ_comm⁄
 (
¥Ÿo
, 
cmd_tbl_t
 *
cmdç
, 
¨gc
, *
¨gv
[])

159 *
s
;

160 
rcode
 = 0;

161 
size
;

164 
	`¥ötf
("\¿√tboŸ_comm⁄,árgc%d \n", 
¨gc
);

166 i‡((
s
 = 
	`gëív
("lﬂdaddr")Ë!
NULL
) {

167 
lﬂd_addr
 = 
	`sim∂e_°πoul
(
s
, 
NULL
, 16);

170 
¨gc
) {

178 i‡(
¨gv
[1][0] == '"') {

179 
	`c›y_fûíame
 (
BoŸFûe
, 
¨gv
[1], (BootFile));

181 
lﬂd_addr
 = 
	`sim∂e_°πoul
(
¨gv
[1], 
NULL
, 16);

185 3: 
lﬂd_addr
 = 
	`sim∂e_°πoul
(
¨gv
[1], 
NULL
, 16);

186 
	`c›y_fûíame
 (
BoŸFûe
, 
¨gv
[2], (BootFile));

187 #ifde‡
DEBUG


188 
	`¥ötf
("lﬂdáddr0x%08x\n", 
lﬂd_addr
);

189 
	`¥ötf
("boŸ fûe%s\n", 
BoŸFûe
);

193 : 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

197 i‡((
size
 = 
	`NëLo›
(
¥Ÿo
)) < 0)

199 
	`¥ötf
("NëBoŸFûeX„rSize%08x\n", 
size
);

202 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_ENV
)

203 
	`√tboŸ_upd©e_ív
();

207 i‡(
size
 == 0)

211 
	`Êush_ˇche
(
lﬂd_addr
, 
size
);

214 i‡(((
s
 = 
	`gëív
("auto°¨t")Ë!
NULL
Ë&& (
	`°rcmp
(s,"yes") == 0)) {

215 *
loˇl_¨gs
[2];

216 
loˇl_¨gs
[0] = 
¨gv
[0];

217 
loˇl_¨gs
[1] = 
NULL
;

219 if(
modifõs
) {

220 
	`£ãnv
("autostart", "no");

221 
	`£ãnv
 ("boŸfûe", 
BoŸFûe
);

222 #ifde‡
DEBUG


223 
s
 = 
	`gëív
("bootfile");

224 
	`¥ötf
("ßvêboŸfûe%s\n", 
s
);

226 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_ENV
)

227 
	`ßvìnv
();

231 
	`¥ötf
 ("Autom©i¯boŸ o‡imagê©ádd∏0x%08lX ...\n", 
lﬂd_addr
);

232 
rcode
 = 
	`do_boŸm
 (
cmdç
, 0, 1, 
loˇl_¨gs
);

235 #ifde‡
CONFIG_AUTOSCRIPT


236 i‡(((
s
 = 
	`gëív
("autos¸ùt")Ë!
NULL
Ë&& (
	`°rcmp
(s,"yes") == 0)) {

237 
	`¥ötf
("Ru¬ögáutos¸ùà©ádd∏0x%08lX ...\n", 
lﬂd_addr
);

238 
rcode
 = 
	`autos¸ùt
 (
lﬂd_addr
);

241  
rcode
;

242 
	}
}

244 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_PING
)

245 
	$do_pög
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

249 i‡(
¨gc
 < 2)

252 
NëPögIP
 = 
	`°rög_to_ù
(
¨gv
[1]);

253 i‡(
NëPögIP
 == 0) {

254 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

258 i‡(
	`NëLo›
(
PING
) < 0) {

259 
	`¥ötf
("pög faûed; ho° %†i†nŸálive\n", 
¨gv
[1]);

263 
	`¥ötf
("ho° %†i†Æive\n", 
¨gv
[1]);

266 
	}
}

268 
U_BOOT_CMD
(

269 
pög
, 2, 1, 
do_pög
,

275 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_CDP
)

277 
	$cdp_upd©e_ív
()

279 
tmp
[16];

281 i‡(
CDPAµlün˚VLAN
 !
	`ht⁄s
(-1)) {

282 
	`¥ötf
("CDP of„ªdáµlün˚ VLAN %d\n", 
	`¡ohs
(
CDPAµlün˚VLAN
));

283 
	`VLAN_to_°rög
(
CDPAµlün˚VLAN
, 
tmp
);

284 
	`£ãnv
("vœn", 
tmp
);

285 
NëOurVLAN
 = 
CDPAµlün˚VLAN
;

288 i‡(
CDPN©iveVLAN
 !
	`ht⁄s
(-1)) {

289 
	`¥ötf
("CDP of„ªdÇ©ivêVLAN %d\n", 
	`¡ohs
(
CDPN©iveVLAN
));

290 
	`VLAN_to_°rög
(
CDPN©iveVLAN
, 
tmp
);

291 
	`£ãnv
("nvœn", 
tmp
);

292 
NëOurN©iveVLAN
 = 
CDPN©iveVLAN
;

295 
	}
}

297 
	$do_cdp
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

299 
r
;

301 
r
 = 
	`NëLo›
(
CDP
);

302 i‡(
r
 < 0) {

303 
	`¥ötf
("cdp failed;ÖerhapsÇotá CISCO switch?\n");

307 
	`cdp_upd©e_ív
();

310 
	}
}

312 
U_BOOT_CMD
(

313 
cdp
, 1, 1, 
do_cdp
,

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/cmd_nvedit.c

42 
	~<comm⁄.h
>

43 
	~<comm™d.h
>

44 
	~<ívú⁄mít.h
>

45 
	~<w©chdog.h
>

46 
	~<£rül.h
>

47 
	~<löux/°ddef.h
>

48 
	~<asm/byã‹dî.h
>

49 
	~<π_mm≠.h
>

51 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_NET
)

52 
	~<√t.h
>

55 #i‡!
deföed
(
CFG_ENV_IS_IN_NVRAM
) && \

56 !
deföed
(
CFG_ENV_IS_IN_EEPROM
) && \

57 !
deföed
(
CFG_ENV_IS_IN_FLASH
) && \

58 !
deföed
(
CFG_ENV_IS_IN_DATAFLASH
) && \

59 !
deföed
(
CFG_ENV_IS_IN_NAND
) && \

60 !
deföed
(
CFG_ENV_IS_IN_SPI
) && \

61 !
	$deföed
(
CFG_ENV_IS_NOWHERE
)

62 #îr‹ 
Deföe
 
⁄e
 
of
 
CFG_ENV_IS_IN_
{
NVRAM
|
EEPROM
|
FLASH
|
DATAFLASH
|
SPI
|
NOWHERE
}

65 
	#XMK_STR
(
x
Ë#x

	)

66 
	#MK_STR
(
x
Ë
	`XMK_STR
(x)

	)

72 
	$uch¨
 (*
ív_gë_ch¨
)();

76 
uch¨
 *
	`ív_gë_addr
();

79 
	`ív_¸c_upd©e
 ();

84 
	`ívm©ch
 (
uch¨
 *, );

89 c⁄° 
baudøã_èbÀ
[] = 
CFG_BAUDRATE_TABLE
;

90 
	#N_BAUDRATES
 ((
baudøã_èbÀ
Ë/ (baudøã_èbÀ[0]))

	)

96 #ifde‡
RALINK_CMDLINE


97 
	$do_¥öãnv
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

99 
i
, 
j
, 
k
, 
nxt
;

100 
rcode
 = 0;

102 i‡(
¨gc
 == 1) {

103 
i
=0; 
	`ív_gë_ch¨
(iË!'\0'; i=
nxt
+1) {

104 
nxt
=
i
; 
	`ív_gë_ch¨
(nxt) != '\0'; ++nxt)

106 
k
=
i
; k<
nxt
; ++k)

107 
	`putc
(
	`ív_gë_ch¨
(
k
));

108 
	`putc
 ('\n');

110 i‡(
	`˘æc
()) {

111 
	`puts
 ("\n ** Abort\n");

116 
	`¥ötf
("\nEnvú⁄míàsize: %d/%d byãs\n", 
i
, 
ENV_SIZE
);

121 
i
=1; i<
¨gc
; ++i) {

122 *
«me
 = 
¨gv
[
i
];

124 
k
 = -1;

126 
j
=0; 
	`ív_gë_ch¨
(jË!'\0'; j=
nxt
+1) {

128 
nxt
=
j
; 
	`ív_gë_ch¨
(nxt) != '\0'; ++nxt)

130 
k
 = 
	`ívm©ch
(
«me
, 
j
);

131 i‡(
k
 < 0) {

134 
	`puts
 (
«me
);

135 
	`putc
 ('=');

136 
k
 < 
nxt
)

137 
	`putc
(
	`ív_gë_ch¨
(
k
++));

138 
	`putc
 ('\n');

141 i‡(
k
 < 0) {

142 
	`¥ötf
 ("## Eº‹: \"%s\"ÇŸ deföed\n", 
«me
);

143 
rcode
 ++;

146  
rcode
;

147 
	}
}

157 
	$_do_£ãnv
 (
Êag
, 
¨gc
, *
¨gv
[])

159 
DECLARE_GLOBAL_DATA_PTR
;

161 
i
, 
Àn
, 
ﬁdvÆ
;

162 
c⁄sﬁe
 = -1;

163 
uch¨
 *
ív
, *
nxt
 = 
NULL
;

164 
uch¨
 *
«me
;

165 
bd_t
 *
bd
 = 
gd
->bd;

167 
uch¨
 *
ív_d©a
 = 
	`ív_gë_addr
(0);

169 i‡(!
ív_d©a
)

172 
«me
 = 
¨gv
[1];

177 
ﬁdvÆ
 = -1;

178 
ív
=
ív_d©a
; *ív;Énv=
nxt
+1) {

179 
nxt
=
ív
; *nxt; ++nxt)

181 i‡((
ﬁdvÆ
 = 
	`ívm©ch
(
«me
, 
ív
-
ív_d©a
)) >= 0)

188 i‡(
ﬁdvÆ
 >= 0) {

189 #i‚de‡
CONFIG_ENV_OVERWRITE


195 i‡–(
	`°rcmp
 (
«me
, "serial#") == 0) ||

196 ((
	`°rcmp
 (
«me
, "ethaddr") == 0)

197 #i‡
	`deföed
(
CONFIG_OVERWRITE_ETHADDR_ONCE
Ë&& deföed(
CONFIG_ETHADDR
)

198 && (
	`°rcmp
 (
	`ív_gë_addr
(
ﬁdvÆ
),
	`MK_STR
(
CONFIG_ETHADDR
)) != 0)

201 
	`¥ötf
 ("C™'àovîwrôê\"%s\"\n", 
«me
);

207 i‡(
	`°rcmp
(
«me
,"stdin") == 0) {

208 
c⁄sﬁe
 = 
°dö
;

209 } i‡(
	`°rcmp
(
«me
,"stdout") == 0) {

210 
c⁄sﬁe
 = 
°dout
;

211 } i‡(
	`°rcmp
(
«me
,"stderr") == 0) {

212 
c⁄sﬁe
 = 
°dîr
;

215 i‡(
c⁄sﬁe
 != -1) {

216 i‡(
¨gc
 < 3) {

217 
	`¥ötf
("C™'àdñëê\"%s\"\n", 
«me
);

222 i‡(
	`c⁄sﬁe_assign
 (
c⁄sﬁe
, 
¨gv
[2]) < 0)

225 #ifde‡
CONFIG_SERIAL_MULTI


226 i‡(
	`£rül_assign
 (
¨gv
[2]) < 0)

234 i‡(
	`°rcmp
(
¨gv
[1],"baudrate") == 0) {

235 
baudøã
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 10);

236 
i
;

237 
i
=0; i<
N_BAUDRATES
; ++i) {

238 i‡(
baudøã
 =
baudøã_èbÀ
[
i
])

241 i‡(
i
 =
N_BAUDRATES
) {

242 
	`¥ötf
 ("## Baudrate %d bpsÇot supported\n",

243 
baudøã
);

246 
	`¥ötf
 ("## Switch baudrateÅo %d bpsándÖress ENTER ...\n",

247 
baudøã
);

248 
	`udñay
(50000);

249 
gd
->
baudøã
 = baudrate;

250 #ifde‡
CONFIG_PPC


251 
gd
->
bd
->
bi_baudøã
 = 
baudøã
;

254 #i‡
	`deföed
(
RT6855A_ASIC_BOARD
Ë|| deföed(
RT6855A_FPGA_BOARD
)

255 
	`bbu_u¨t_öô
();

257 
	`£rül_£tbrg
 ();

260 
	`udñay
(50000);

262 i‡(
	`gëc
() == '\r')

267 i‡(*++
nxt
 == '\0') {

268 i‡(
ív
 > 
ív_d©a
) {

269 
ív
--;

271 *
ív
 = '\0';

275 *
ív
 = *
nxt
++;

276 i‡((*
ív
 ='\0'Ë&& (*
nxt
 == '\0'))

278 ++
ív
;

281 *++
ív
 = '\0';

284 #ifde‡
CONFIG_NET_MULTI


285 i‡(
	`°∫cmp
(
«me
, "eth", 3) == 0) {

286 *
íd
;

287 
num
 = 
	`sim∂e_°πoul
(
«me
+3, &
íd
, 10);

289 i‡(
	`°rcmp
(
íd
, "addr") == 0) {

290 
	`ëh_£t_íëaddr
(
num
, 
¨gv
[2]);

297 i‡((
¨gc
 < 3Ë|| 
¨gv
[2] =
NULL
) {

298 
	`ív_¸c_upd©e
 ();

305 
ív
=
ív_d©a
; *env || *(env+1); ++env)

307 i‡(
ív
 > 
ív_d©a
)

308 ++
ív
;

313 
Àn
 = 
	`°æí
(
«me
) + 2;

315 
i
=2; i<
¨gc
; ++i) {

316 
Àn
 +
	`°æí
(
¨gv
[
i
]) + 1;

318 i‡(
Àn
 > (&
ív_d©a
[
ENV_SIZE
]-
ív
)) {

319 
	`¥ötf
 ("## Eº‹:Énvú⁄míàovîÊow, \"%s\" dñëed\n", 
«me
);

322 (*
ív
 = *
«me
++) != '\0')

323 
ív
++;

324 
i
=2; i<
¨gc
; ++i) {

325 *
vÆ
 = 
¨gv
[
i
];

327 *
ív
 = (
i
==2) ? '=' : ' ';

328 (*++
ív
 = *
vÆ
++) != '\0')

333 *++
ív
 = '\0';

336 
	`ív_¸c_upd©e
 ();

343 i‡(
	`°rcmp
(
¨gv
[1],"ethaddr") == 0) {

344 *
s
 = 
¨gv
[2];

345 *
e
;

346 
i
=0; i<6; ++i) {

347 
bd
->
bi_íëaddr
[
i
] = 
s
 ? 
	`sim∂e_°πoul
(s, &
e
, 16) : 0;

348 i‡(
s
Ë†(*
e
) ?É+1 :É;

350 #ifde‡
CONFIG_NET_MULTI


351 
	`ëh_£t_íëaddr
(0, 
¨gv
[2]);

356 i‡(
	`°rcmp
(
¨gv
[1],"ipaddr") == 0) {

357 *
s
 = 
¨gv
[2];

358 *
e
;

359 
addr
;

360 
bd
->
bi_ù_addr
 = 0;

361 
addr
=0, 
i
=0; i<4; ++i) {

362 
ul⁄g
 
vÆ
 = 
s
 ? 
	`sim∂e_°πoul
(s, &
e
, 10) : 0;

363 
addr
 <<= 8;

364 
addr
 |(
vÆ
 & 0xFF);

365 i‡(
s
Ë†(*
e
) ?É+1 :É;

367 
bd
->
bi_ù_addr
 = 
	`ht⁄l
(
addr
);

370 i‡(
	`°rcmp
(
¨gv
[1],"loadaddr") == 0) {

371 
lﬂd_addr
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

374 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_NET
)

375 i‡(
	`°rcmp
(
¨gv
[1],"bootfile") == 0) {

376 
	`c›y_fûíame
 (
BoŸFûe
, 
¨gv
[2], (BootFile));

381 #ifde‡
CONFIG_AMIGAONEG3SE


382 i‡(
	`°rcmp
(
¨gv
[1], "vga_fg_color") == 0 ||

383 
	`°rcmp
(
¨gv
[1], "vga_bg_color") == 0 ) {

384 
	`video_£t_cﬁ‹
(
©å
);

385 
	`video_gë_©å
();

387 
	`video_£t_cﬁ‹
(
	`video_gë_©å
());

393 i‡(
	`°rcmp
(
¨gv
[1],"twe0") == 0) {

394 
	`¥ötf
("\n ResetÅo FlashÉnvironment \n");

397 
ªgvÆue
,
kk0
;

400 
kk0
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

402 
ªgvÆue
 = *(vﬁ©ûê
u_l⁄g
 *)(
RALINK_SYSCTL_BASE
 + 0x0308);

404 
	`¥ötf
("\¿DeÁu… FLASH_CS1_CFG = %08X \n",
ªgvÆue
);

406 
ªgvÆue
 &= ~(0x3 << 26);

407 
ªgvÆue
 |= (0x1 << 26);

409 
ªgvÆue
 |= (0x1 << 24);

411 
ªgvÆue
 &= ~(0x3 << 20);

412 
ªgvÆue
 |= (0x1 << 20);

414 
ªgvÆue
 &= ~(0x3 << 16);

415 
ªgvÆue
 |= (0x1 << 16);

417 
ªgvÆue
 &= ~(0xF << 12);

418 
ªgvÆue
 |(
kk0
 << 12);

421 *(vﬁ©ûê
u_l⁄g
 *)(
RALINK_SYSCTL_BASE
 + 0x0308Ë
ªgvÆue
;

423 
ªgvÆue
 = *(vﬁ©ûê
u_l⁄g
 *)(
RALINK_SYSCTL_BASE
 + 0x0308);

430 
	}
}

432 
	$£ãnv
 (*
v¨«me
, *
v¨vÆue
)

434 *
¨gv
[4] = { "£ãnv", 
v¨«me
, 
v¨vÆue
, 
NULL
 };

435 
	`_do_£ãnv
 (0, 3, 
¨gv
);

436 
	}
}

438 
	$do_£ãnv
 ( 
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

440 i‡(
¨gc
 < 2) {

441 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

445  
	`_do_£ãnv
 (
Êag
, 
¨gc
, 
¨gv
);

446 
	}
}

452 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_ASKENV
)

453 
	$do_askív
 ( 
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

455 
c⁄sﬁe_buf„r
[
CFG_CBSIZE
];

456 
mesßge
[
CFG_CBSIZE
];

457 
size
 = 
CFG_CBSIZE
 - 1;

458 
Àn
;

459 *
loˇl_¨gs
[4];

461 
loˇl_¨gs
[0] = 
¨gv
[0];

462 
loˇl_¨gs
[1] = 
¨gv
[1];

463 
loˇl_¨gs
[2] = 
NULL
;

464 
loˇl_¨gs
[3] = 
NULL
;

466 i‡(
¨gc
 < 2) {

467 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

471 
¨gc
) {

473 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

477 
	`•rötf
 (
mesßge
, "PÀa£É¡î '%s':", 
¨gv
[1]);

481 
	`•rötf
 (
mesßge
, "PÀa£É¡î '%s':", 
¨gv
[1]);

482 
size
 = 
	`sim∂e_°πoul
 (
¨gv
[2], 
NULL
, 10);

487 
i
;

488 
pos
 = 0;

490 
i
 = 2; i < 
¨gc
 - 1; i++) {

491 i‡(
pos
) {

492 
mesßge
[
pos
++] = ' ';

494 
	`°r˝y
 (
mesßge
+
pos
, 
¨gv
[
i
]);

495 
pos
 +
	`°æí
(
¨gv
[
i
]);

497 
mesßge
[
pos
] = '\0';

498 
size
 = 
	`sim∂e_°πoul
 (
¨gv
[
¨gc
 - 1], 
NULL
, 10);

503 i‡(
size
 >
CFG_CBSIZE
)

504 
size
 = 
CFG_CBSIZE
 - 1;

506 i‡(
size
 <= 0)

510 
Àn
 = 
	`ªadlöe
 (
mesßge
, 0);

512 i‡(
size
 < 
Àn
)

513 
c⁄sﬁe_buf„r
[
size
] = '\0';

515 
Àn
 = 2;

516 i‡(
c⁄sﬁe_buf„r
[0] != '\0') {

517 
loˇl_¨gs
[2] = 
c⁄sﬁe_buf„r
;

518 
Àn
 = 3;

522  
	`_do_£ãnv
 (
Êag
, 
Àn
, 
loˇl_¨gs
);

523 
	}
}

532 *
	$gëív
 (
uch¨
 *
«me
)

534 
i
, 
nxt
;

536 
	`WATCHDOG_RESET
();

538 
i
=0; 
	`ív_gë_ch¨
(iË!'\0'; i=
nxt
+1) {

539 
vÆ
;

541 
nxt
=
i
; 
	`ív_gë_ch¨
(nxt) != '\0'; ++nxt) {

542 i‡(
nxt
 >
CFG_ENV_SIZE
) {

543  (
NULL
);

546 i‡((
vÆ
=
	`ívm©ch
(
«me
, 
i
)) < 0)

548  (
	`ív_gë_addr
(
vÆ
));

551  (
NULL
);

552 
	}
}

555 
	$gëív_r
 (
uch¨
 *
«me
, uch¨ *
buf
, 
Àn
)

557 
i
, 
nxt
;

559 
i
=0; 
	`ív_gë_ch¨
(iË!'\0'; i=
nxt
+1) {

560 
vÆ
, 
n
;

562 
nxt
=
i
; 
	`ív_gë_ch¨
(nxt) != '\0'; ++nxt) {

563 i‡(
nxt
 >
CFG_ENV_SIZE
) {

567 i‡((
vÆ
=
	`ívm©ch
(
«me
, 
i
)) < 0)

570 
n
 = 0;

571 (
Àn
 > 
n
++Ë&& (*
buf
++ = 
	`ív_gë_ch¨
(
vÆ
++)) != '\0')

573 i‡(
Àn
 =
n
)

574 *
buf
 = '\0';

575  (
n
);

578 
	}
}

581 #ifde‡
RALINK_CMDLINE


582 #i‡
deföed
(
CFG_ENV_IS_IN_NVRAM
Ë|| deföed(
CFG_ENV_IS_IN_EEPROM
) || \

583 ((
	gCONFIG_COMMANDS
 & (
	gCFG_CMD_ENV
|
	gCFG_CMD_FLASH
)) == \

584 (
CFG_CMD_ENV
|
CFG_CMD_FLASH
))

585 
	$do_ßvìnv
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

587 * 
ív_«me_•ec
;

589 
	`¥ötf
 ("Savög Envú⁄míàtÿ%s...\n", 
ív_«me_•ec
);

591  (
	`ßvìnv
() ? 1 : 0);

592 
	}
}

604 
	$ívm©ch
 (
uch¨
 *
s1
, 
i2
)

607 *
s1
 =
	`ív_gë_ch¨
(
i2
++))

608 i‡(*
s1
++ == '=')

609 (
i2
);

610 i‡(*
s1
 ='\0' && 
	`ív_gë_ch¨
(
i2
-1) == '=')

611 (
i2
);

613 
	}
}

616 #ifde‡
RALINK_CMDLINE


619 
U_BOOT_CMD
(

620 
¥öãnv
, 
CFG_MAXARGS
, 1, 
do_¥öãnv
,

627 
U_BOOT_CMD
(

628 
£ãnv
, 
CFG_MAXARGS
, 0, 
do_£ãnv
,

636 #i‡
deföed
(
CFG_ENV_IS_IN_NVRAM
Ë|| deföed(
CFG_ENV_IS_IN_EEPROM
) || \

637 ((
	gCONFIG_COMMANDS
 & (
	gCFG_CMD_ENV
|
	gCFG_CMD_FLASH
)) == \

638 (
CFG_CMD_ENV
|
CFG_CMD_FLASH
))

639 
U_BOOT_CMD
(

640 
ßvìnv
, 1, 0, 
do_ßvìnv
,

642 
NULL


648 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_ASKENV
)

650 
U_BOOT_CMD
(

651 
askív
, 
CFG_MAXARGS
, 1, 
do_askív
,

665 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_RUN
)

666 
do_run
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[]);

667 
U_BOOT_CMD
(

668 
run
, 
CFG_MAXARGS
, 1, 
do_run
,

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/cmd_usb.c

28 
	~<comm⁄.h
>

29 
	~<comm™d.h
>

30 
	~<asm/byã‹dî.h
>

32 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_USB
)

34 
	~<usb.h
>

36 #ifde‡
CONFIG_USB_STORAGE


37 
	gusb_°‹_cuº_dev
=-1;

41 * 
	$usb_gë_˛ass_desc
(
d˛ass
)

43 
d˛ass
) {

44 
USB_CLASS_PER_INTERFACE
:

46 
USB_CLASS_AUDIO
:

48 
USB_CLASS_COMM
:

50 
USB_CLASS_HID
:

52 
USB_CLASS_PRINTER
:

54 
USB_CLASS_MASS_STORAGE
:

56 
USB_CLASS_HUB
:

58 
USB_CLASS_DATA
:

60 
USB_CLASS_VENDOR_SPEC
:

65 
	}
}

67 
	$usb_di•œy_˛ass_sub
(
d˛ass
,
sub˛ass
,
¥Ÿo
)

69 
d˛ass
) {

70 
USB_CLASS_PER_INTERFACE
:

71 
	`¥ötf
("See Interface");

73 
USB_CLASS_HID
:

74 
	`¥ötf
("Human Interface, Subclass: ");

75 
sub˛ass
) {

76 
USB_SUB_HID_NONE
:

77 
	`¥ötf
("None");

79 
USB_SUB_HID_BOOT
:

80 
	`¥ötf
("Boot ");

81 
¥Ÿo
) {

82 
USB_PROT_HID_NONE
:

83 
	`¥ötf
("None");

85 
USB_PROT_HID_KEYBOARD
:

86 
	`¥ötf
("Keyboard");

88 
USB_PROT_HID_MOUSE
:

89 
	`¥ötf
("Mouse");

92 
	`¥ötf
("reserved");

96 
	`¥ötf
("reserved");

99 
USB_CLASS_MASS_STORAGE
:

100 
	`¥ötf
("Mass Storage, ");

101 
sub˛ass
) {

102 
US_SC_RBC
:

103 
	`¥ötf
("RBC ");

105 
US_SC_8020
:

106 
	`¥ötf
("SFF-8020i (ATAPI)");

108 
US_SC_QIC
:

109 
	`¥ötf
("QIC-157 (Tape)");

111 
US_SC_UFI
:

112 
	`¥ötf
("UFI");

114 
US_SC_8070
:

115 
	`¥ötf
("SFF-8070");

117 
US_SC_SCSI
:

118 
	`¥ötf
("Transp. SCSI");

121 
	`¥ötf
("reserved");

124 
	`¥ötf
(", ");

125 
¥Ÿo
) {

126 
US_PR_CB
:

127 
	`¥ötf
("Command/Bulk");

129 
US_PR_CBI
:

130 
	`¥ötf
("Command/Bulk/Int");

132 
US_PR_BULK
:

133 
	`¥ötf
("Bulk only");

136 
	`¥ötf
("reserved");

140 
	`¥ötf
("%s",
	`usb_gë_˛ass_desc
(
d˛ass
));

142 
	}
}

144 
	$usb_di•œy_°rög
(
usb_devi˚
 *
dev
,
ödex
)

146 
buf„r
[256];

147 i‡(
ödex
!=0) {

148 i‡(
	`usb_°rög
(
dev
,
ödex
,&
buf„r
[0],256)>0);

149 
	`¥ötf
("Såög: \"%s\"",
buf„r
);

151 
	}
}

153 
	$usb_di•œy_desc
(
usb_devi˚
 *
dev
)

155 i‡(
dev
->
des¸ùt‹
.
bDes¸ùt‹Ty≥
==
USB_DT_DEVICE
) {

156 
	`¥ötf
("%d: %s, USB Revisi⁄ %x.%x\n",
dev
->
devnum
,
	`usb_gë_˛ass_desc
(dev->
c⁄fig
.
if_desc
[0].
desc
.
bI¡îÁ˚Cœss
),

157 (
dev
->
des¸ùt‹
.
bcdUSB
>>8) & 0xff,dev->descriptor.bcdUSB & 0xff);

158 i‡(
	`°æí
(
dev
->
mf
Ë|| såÀn(dev->
¥od
Ë|| såÀn(dev->
£rül
))

159 
	`¥ötf
(" - %†%†%s\n",
dev
->
mf
,dev->
¥od
,dev->
£rül
);

160 i‡(
dev
->
des¸ùt‹
.
bDevi˚Cœss
) {

161 
	`¥ötf
(" - Class: ");

162 
	`usb_di•œy_˛ass_sub
(
dev
->
des¸ùt‹
.
bDevi˚Cœss
,dev->des¸ùt‹.
bDevi˚SubCœss
,dev->des¸ùt‹.
bDevi˚PrŸocﬁ
);

163 
	`¥ötf
("\n");

166 
	`¥ötf
(" - Cœss: (‰om I¡îÁ˚Ë%s\n",
	`usb_gë_˛ass_desc
(
dev
->
c⁄fig
.
if_desc
[0].
desc
.
bI¡îÁ˚Cœss
));

168 
	`¥ötf
(" - PackëSize: %d C⁄figuøti⁄s: %d\n",
dev
->
des¸ùt‹
.
bMaxPackëSize0
,dev->des¸ùt‹.
bNumC⁄figuøti⁄s
);

169 
	`¥ötf
(" - Víd‹: 0x%04x Produ˘ 0x%04x Vîsi⁄ %d.%d\n",
dev
->
des¸ùt‹
.
idVíd‹
,dev->des¸ùt‹.
idProdu˘
,(dev->des¸ùt‹.
bcdDevi˚
>>8) & 0xff,dev->descriptor.bcdDevice & 0xff);

172 
	}
}

174 
	$usb_di•œy_c⁄f_desc
(
usb_c⁄fig_des¸ùt‹
 *
c⁄fig
,
usb_devi˚
 *
dev
)

176 
	`¥ötf
(" C⁄figuøti⁄: %d\n",
c⁄fig
->
bC⁄figuøti⁄VÆue
);

177 
	`¥ötf
(" - I¡îÁ˚s: %d %s%s%dmA\n",
c⁄fig
->
bNumI¡îÁ˚s
,(c⁄fig->
bmAâribuãs
 & 0x40) ? "Self Powered " : "Bus Powered ",

178 (
c⁄fig
->
bmAâribuãs
 & 0x20Ë? "RemŸêWakeu∞" : "",c⁄fig->
bMaxPowî
*2);

179 i‡(
c⁄fig
->
iC⁄figuøti⁄
) {

180 
	`¥ötf
(" - ");

181 
	`usb_di•œy_°rög
(
dev
,
c⁄fig
->
iC⁄figuøti⁄
);

182 
	`¥ötf
("\n");

184 
	}
}

186 
	$usb_di•œy_if_desc
(
usb_öãrÁ˚_des¸ùt‹
 *
ifdesc
,
usb_devi˚
 *
dev
)

188 
	`¥ötf
(" I¡îÁ˚: %d\n",
ifdesc
->
bI¡îÁ˚Numbî
);

189 
	`¥ötf
(" - A…î«ã Sëtög†%d, Endpoöts: %d\n",
ifdesc
->
bA…î«ãSëtög
,ifdesc->
bNumEndpoöts
);

190 
	`¥ötf
(" - Class ");

191 
	`usb_di•œy_˛ass_sub
(
ifdesc
->
bI¡îÁ˚Cœss
,ifdesc->
bI¡îÁ˚SubCœss
,ifdesc->
bI¡îÁ˚PrŸocﬁ
);

192 
	`¥ötf
("\n");

193 i‡(
ifdesc
->
iI¡îÁ˚
) {

194 
	`¥ötf
(" - ");

195 
	`usb_di•œy_°rög
(
dev
,
ifdesc
->
iI¡îÁ˚
);

196 
	`¥ötf
("\n");

198 
	}
}

200 
	$usb_di•œy_ï_desc
(
usb_ídpoöt_des¸ùt‹
 *
ïdesc
)

202 
	`¥ötf
(" - Endpoöà%d %†",
ïdesc
->
bEndpoötAddªss
 & 0xf,(epdesc->bEndpointAddress & 0x80) ? "In" : "Out");

203 (
ïdesc
->
bmAâribuãs
 & 0x03))

205 0: 
	`¥ötf
("Control"); ;

206 1: 
	`¥ötf
("Isochronous"); ;

207 2: 
	`¥ötf
("Bulk"); ;

208 3: 
	`¥ötf
("Interrupt"); ;

210 
	`¥ötf
(" MaxPackë %d",
ïdesc
->
wMaxPackëSize
);

211 i‡((
ïdesc
->
bmAâribuãs
 & 0x03)==0x3)

212 
	`¥ötf
(" I¡îvÆ %dms",
ïdesc
->
bI¡îvÆ
);

213 
	`¥ötf
("\n");

214 
	}
}

217 
	$usb_di•œy_c⁄fig
(
usb_devi˚
 *
dev
)

219 
usb_c⁄fig
 *
c⁄fig
;

220 
usb_öãrÁ˚
 *
ifdesc
;

221 
usb_ídpoöt_des¸ùt‹
 *
ïdesc
;

222 
i
, 
ii
;

224 
c⁄fig
 = &
dev
->config;

225 
	`usb_di•œy_c⁄f_desc
(&
c⁄fig
->
desc
, 
dev
);

226 
i
 = 0; i < 
c⁄fig
->
no_of_if
; i++) {

227 
ifdesc
 = &
c⁄fig
->
if_desc
[
i
];

228 
	`usb_di•œy_if_desc
(&
ifdesc
->
desc
, 
dev
);

229 
ii
 = 0; iò< 
ifdesc
->
no_of_ï
; ii++) {

230 
ïdesc
 = &
ifdesc
->
ï_desc
[
ii
];

231 
	`usb_di•œy_ï_desc
(
ïdesc
);

234 
	`¥ötf
("\n");

235 
	}
}

237 
ölöe
 *
	$p‹t•ìd
(
•ìd
)

239 i‡(
•ìd
 =
USB_SPEED_HIGH
)

241 i‡(
•ìd
 =
USB_SPEED_LOW
)

245 
	}
}

249 
	$usb_show_åì_gøph
(
usb_devi˚
 *
dev
,*
¥e
)

251 
i
,
ödex
;

252 
has_chûd
,
œ°_chûd
,
p‹t
;

254 
ödex
=
	`°æí
(
¥e
);

255 
	`¥ötf
(" %s",
¥e
);

257 
has_chûd
=0;

258 
i
=0;i<
dev
->
maxchûd
;i++) {

259 i‡(
dev
->
chûdªn
[
i
]!=
NULL
)

260 
has_chûd
=1;

263 
œ°_chûd
=1;

264 i‡(
dev
->
∑ª¡
!=
NULL
) {

265 
i
=0;i<
dev
->
∑ª¡
->
maxchûd
;i++) {

267 i‡(
dev
->
∑ª¡
->
chûdªn
[
i
]==dev) {

269 
p‹t
=
i
;

270 
i
++<
dev
->
∑ª¡
->
maxchûd
) {

271 i‡(
dev
->
∑ª¡
->
chûdªn
[
i
]!=
NULL
) {

273 
œ°_chûd
=0;

279 
	`¥ötf
("\b+-");

281 i‡(
œ°_chûd
) {

282 
¥e
[
ödex
-1]=' ';

286 
	`¥ötf
(" ");

287 
	`¥ötf
("%d ",
dev
->
devnum
);

288 
¥e
[
ödex
++]=' ';

289 
¥e
[
ödex
++]
has_chûd
 ? '|' : ' ';

290 
¥e
[
ödex
]=0;

291 
	`¥ötf
(" %†(%s, %dmA)\n",
	`usb_gë_˛ass_desc
(
dev
->
c⁄fig
.
if_desc
[0].
desc
.
bI¡îÁ˚Cœss
),

292 
	`p‹t•ìd
(
dev
->
•ìd
),dev->
c⁄fig
.
desc
.
bMaxPowî
 * 2);

293 i‡(
	`°æí
(
dev
->
mf
) ||

294 
	`°æí
(
dev
->
¥od
) ||

295 
	`°æí
(
dev
->
£rül
))

296 
	`¥ötf
(" %† %†%†%s\n",
¥e
,
dev
->
mf
,dev->
¥od
,dev->
£rül
);

297 
	`¥ötf
(" %s\n",
¥e
);

298 i‡(
dev
->
maxchûd
>0) {

299 
i
=0;i<
dev
->
maxchûd
;i++) {

300 i‡(
dev
->
chûdªn
[
i
]!=
NULL
) {

301 
	`usb_show_åì_gøph
(
dev
->
chûdªn
[
i
],
¥e
);

302 
¥e
[
ödex
]=0;

306 
	}
}

309 
	$usb_show_åì
(
usb_devi˚
 *
dev
)

311 
¥ómbÀ
[32];

313 
	`mem£t
(
¥ómbÀ
,0,32);

314 
	`usb_show_åì_gøph
(
dev
,&
¥ómbÀ
[0]);

315 
	}
}

321 #ifde‡
CONFIG_USB_STORAGE


322 
	$do_usbboŸ
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

324 *
boŸ_devi˚
 = 
NULL
;

325 *
ï
;

326 
dev
, 
∑π
=1, 
rcode
;

327 
ul⁄g
 
addr
, 
˙t
, 
checksum
;

328 
disk_∑πôi⁄_t
 
öfo
;

329 
image_hódî_t
 *
hdr
;

330 
block_dev_desc_t
 *
°‹_dev
;

333 
¨gc
) {

335 
addr
 = 
CFG_LOAD_ADDR
;

336 
boŸ_devi˚
 = 
	`gëív
 ("bootdevice");

339 
addr
 = 
	`sim∂e_°πoul
(
¨gv
[1], 
NULL
, 16);

340 
boŸ_devi˚
 = 
	`gëív
 ("bootdevice");

343 
addr
 = 
	`sim∂e_°πoul
(
¨gv
[1], 
NULL
, 16);

344 
boŸ_devi˚
 = 
¨gv
[2];

347 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

351 i‡(!
boŸ_devi˚
) {

352 
	`puts
 ("\n** No boot device **\n");

356 
dev
 = 
	`sim∂e_°πoul
(
boŸ_devi˚
, &
ï
, 16);

357 
°‹_dev
=
	`usb_°‹_gë_dev
(
dev
);

358 i‡(
°‹_dev
->
ty≥
 =
DEV_TYPE_UNKNOWN
) {

359 
	`¥ötf
 ("\n** Devi˚ %dÇŸávaûabÀ\n", 
dev
);

362 i‡(
°‹_dev
->
block_ªad
==
NULL
) {

363 
	`¥ötf
("storage deviceÇot initialized. Use usb scan\n");

366 i‡(*
ï
) {

367 i‡(*
ï
 != ':') {

368 
	`puts
 ("\n** Invalid boot device, use `dev[:part]' **\n");

371 
∑π
 = 
	`sim∂e_°πoul
(++
ï
, 
NULL
, 16);

374 i‡(
	`gë_∑πôi⁄_öfo
 (
°‹_dev
, 
∑π
, &
öfo
)) {

376 
	`°∫˝y
(&
öfo
.
ty≥
[0], 
BOOT_PART_TYPE
, (BOOT_PART_TYPE));

377 
	`°∫˝y
(&
öfo
.
«me
[0], "Raw", 4);

378 
öfo
.
°¨t
=0;

379 
öfo
.
blksz
=0x200;

380 
öfo
.
size
=2880;

381 
	`¥ötf
("errorÑeadingÖartinfo...tryÅo bootÑaw\n");

383 i‡((
	`°∫cmp
(
öfo
.
ty≥
, 
BOOT_PART_TYPE
, (info.type)) != 0) &&

384 (
	`°∫cmp
(
öfo
.
ty≥
, 
BOOT_PART_COMP
, (info.type)) != 0)) {

385 
	`¥ötf
 ("\n** InvalidÖartitionÅype \"%.32s\""

386 " (ex≥˘ \"" 
BOOT_PART_TYPE
 "\")\n",

387 
öfo
.
ty≥
);

390 
	`¥ötf
 ("\nLoading from USB device %d,Öartition %d: "

392 
dev
, 
∑π
, 
öfo
.
«me
, info.
ty≥
);

394 
	`debug
 ("First Block: %ld, # of blocks: %ld, Block Size: %ld\n",

395 
öfo
.
°¨t
, info.
size
, info.
blksz
);

397 i‡(
°‹_dev
->
	`block_ªad
(
dev
, 
öfo
.
°¨t
, 1, (
ul⁄g
 *)
addr
) != 1) {

398 
	`¥ötf
 ("** RódÉº‹ o¿%d:%d\n", 
dev
, 
∑π
);

402 
hdr
 = (
image_hódî_t
 *)
addr
;

404 i‡(
	`¡ohl
(
hdr
->
ih_magic
Ë!
IH_MAGIC
) {

405 
	`¥ötf
("\n** Bad Magic Number **\n");

409 
checksum
 = 
	`¡ohl
(
hdr
->
ih_h¸c
);

410 
hdr
->
ih_h¸c
 = 0;

412 i‡(
	`¸c32
 (0, (*)
hdr
, (
image_hódî_t
)Ë!
checksum
) {

413 
	`puts
 ("\n** Bad Header Checksum **\n");

416 
hdr
->
ih_h¸c
 = 
	`ht⁄l
(
checksum
);

418 
	`¥öt_image_hdr
 (
hdr
);

420 
˙t
 = (
	`¡ohl
(
hdr
->
ih_size
Ë+ (
image_hódî_t
));

421 
˙t
 +
öfo
.
blksz
 - 1;

422 
˙t
 /
öfo
.
blksz
;

423 
˙t
 -= 1;

425 i‡(
°‹_dev
->
	`block_ªad
 (
dev
, 
öfo
.
°¨t
+1, 
˙t
,

426 (
ul⁄g
 *)(
addr
+
öfo
.
blksz
)Ë!
˙t
) {

427 
	`¥ötf
 ("\n** RódÉº‹ o¿%d:%d\n", 
dev
, 
∑π
);

431 
lﬂd_addr
 = 
addr
;

433 
	`Êush_ˇche
 (
addr
, (
˙t
+1)*
öfo
.
blksz
);

436 i‡(((
ï
 = 
	`gëív
("auto°¨t")Ë!
NULL
Ë&& (
	`°rcmp
(ep,"yes") == 0)) {

437 *
loˇl_¨gs
[2];

438 
	`do_boŸm
 (
cmd_tbl_t
 *, , , *[]);

439 
loˇl_¨gs
[0] = 
¨gv
[0];

440 
loˇl_¨gs
[1] = 
NULL
;

441 
	`¥ötf
 ("Autom©i¯boŸ o‡imagê©ádd∏0x%08lX ...\n", 
addr
);

442 
rcode
=
	`do_boŸm
 (
cmdç
, 0, 1, 
loˇl_¨gs
);

443  
rcode
;

446 
	}
}

453 
	$do_usb
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

455 
i
;

456 
usb_devi˚
 *
dev
 = 
NULL
;

457 #ifde‡
CONFIG_USB_STORAGE


458 
block_dev_desc_t
 *
°‹_dev
;

461 i‡((
	`°∫cmp
(
¨gv
[1], "reset", 5) == 0) ||

462 (
	`°∫cmp
(
¨gv
[1], "start", 5) == 0)){

463 
	`usb_°›
();

464 
	`¥ötf
("(Re)start USB...\n");

465 
i
 = 
	`usb_öô
();

466 #ifde‡
CONFIG_USB_STORAGE


468 i‡(
i
 >= 0)

469 
usb_°‹_cuº_dev
 = 
	`usb_°‹_sˇn
(1);

473 i‡(
	`°∫cmp
(
¨gv
[1],"stop",4) == 0) {

474 #ifde‡
CONFIG_USB_KEYBOARD


475 i‡(
¨gc
==2) {

476 i‡(
	`usb_kbd_dîegi°î
()!=0) {

477 
	`¥ötf
("USBÇot stopped: usbkbd still using USB\n");

482 
	`c⁄sﬁe_assign
(
°dö
,"serial");

483 
	`usb_kbd_dîegi°î
();

486 
	`¥ötf
("stopping USB..\n");

487 
	`usb_°›
();

490 i‡(
	`°∫cmp
(
¨gv
[1],"tree",4) == 0) {

491 
	`¥ötf
("\nDevice Tree:\n");

492 
	`usb_show_åì
(
	`usb_gë_dev_ödex
(0));

495 i‡(
	`°∫cmp
(
¨gv
[1],"inf",3) == 0) {

496 
d
;

497 i‡(
¨gc
==2) {

498 
d
=0;d<
USB_MAX_DEVICE
;d++) {

499 
dev
=
	`usb_gë_dev_ödex
(
d
);

500 i‡(
dev
==
NULL
)

502 
	`usb_di•œy_desc
(
dev
);

503 
	`usb_di•œy_c⁄fig
(
dev
);

508 
d
;

510 
i
=
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

511 
	`¥ötf
("c⁄fig f‹ devi˚ %d\n",
i
);

512 
d
=0;d<
USB_MAX_DEVICE
;d++) {

513 
dev
=
	`usb_gë_dev_ödex
(
d
);

514 i‡(
dev
==
NULL
)

516 i‡(
dev
->
devnum
==
i
)

519 i‡(
dev
==
NULL
) {

520 
	`¥ötf
("*** NO Deviceávaiable ***\n");

524 
	`usb_di•œy_desc
(
dev
);

525 
	`usb_di•œy_c⁄fig
(
dev
);

530 #ifde‡
CONFIG_USB_STORAGE


531 i‡(
	`°∫cmp
(
¨gv
[1], "scan", 4) == 0) {

532 
	`¥ötf
(" NOTE:Åhis command is obsoleteánd will beÖhased out\n");

533 
	`¥ötf
("Ölease use 'usb storage' for USB storage devices information\n\n");

534 
	`usb_°‹_öfo
();

538 i‡(
	`°∫cmp
(
¨gv
[1], "stor", 4) == 0) {

539 
	`usb_°‹_öfo
();

543 i‡(
	`°∫cmp
(
¨gv
[1],"part",4) == 0) {

544 
devno
, 
ok
;

545 
ok
=0, 
devno
=0; devno<
USB_MAX_STOR_DEV
; ++devno) {

546 
°‹_dev
=
	`usb_°‹_gë_dev
(
devno
);

547 i‡(
°‹_dev
->
ty≥
!=
DEV_TYPE_UNKNOWN
) {

548 
ok
++;

549 i‡(
devno
)

550 
	`¥ötf
("\n");

551 
	`¥ötf
("¥öt_∑π o‡%x\n",
devno
);

552 
	`¥öt_∑π
(
°‹_dev
);

555 i‡(!
ok
) {

556 
	`¥ötf
("\nno USB devicesávailable\n");

561 i‡(
	`°rcmp
(
¨gv
[1],"read") == 0) {

562 i‡(
usb_°‹_cuº_dev
<0) {

563 
	`¥ötf
("no current device selected\n");

566 i‡(
¨gc
==5) {

567 
addr
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

568 
blk
 = 
	`sim∂e_°πoul
(
¨gv
[3], 
NULL
, 16);

569 
˙t
 = 
	`sim∂e_°πoul
(
¨gv
[4], 
NULL
, 16);

570 
n
;

571 
	`¥ötf
 ("\nUSBÑead: device %d block # %ld, count %ld ... ",

572 
usb_°‹_cuº_dev
, 
blk
, 
˙t
);

573 
°‹_dev
=
	`usb_°‹_gë_dev
(
usb_°‹_cuº_dev
);

574 
n
 = 
°‹_dev
->
	`block_ªad
(
usb_°‹_cuº_dev
, 
blk
, 
˙t
, (
ul⁄g
 *)
addr
);

575 
	`¥ötf
 ("%ld block†ªad: %s\n",
n
,“==
˙t
) ? "OK" : "ERROR");

576 i‡(
n
==
˙t
)

581 i‡(
	`°∫cmp
(
¨gv
[1], "dev", 3) == 0) {

582 i‡(
¨gc
 == 3) {

583 
dev
 = ()
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 10);

584 
	`¥ötf
 ("\nUSB devi˚ %d: ", 
dev
);

585 i‡(
dev
 >
USB_MAX_STOR_DEV
) {

586 
	`¥ötf
("unknown device\n");

589 
	`¥ötf
 ("\¿ Devi˚ %d: ", 
dev
);

590 
°‹_dev
=
	`usb_°‹_gë_dev
(
dev
);

591 
	`dev_¥öt
(
°‹_dev
);

592 i‡(
°‹_dev
->
ty≥
 =
DEV_TYPE_UNKNOWN
) {

595 
usb_°‹_cuº_dev
 = 
dev
;

596 
	`¥ötf
("... isÇow current device\n");

600 
	`¥ötf
 ("\nUSB devi˚ %d: ", 
usb_°‹_cuº_dev
);

601 
°‹_dev
=
	`usb_°‹_gë_dev
(
usb_°‹_cuº_dev
);

602 
	`dev_¥öt
(
°‹_dev
);

603 i‡(
°‹_dev
->
ty≥
 =
DEV_TYPE_UNKNOWN
) {

611 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

613 
	}
}

619 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_USB
)

621 #ifde‡
CONFIG_USB_STORAGE


622 
U_BOOT_CMD
(

623 
usb
, 5, 1, 
do_usb
,

637 
U_BOOT_CMD
(

638 
usbboŸ
, 3, 1, 
do_usbboŸ
,

644 
U_BOOT_CMD
(

645 
usb
, 5, 1, 
do_usb
,

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/command.c

28 
	~<comm⁄.h
>

29 
	~<comm™d.h
>

32 
	$do_vîsi⁄
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

34 
vîsi⁄_°rög
[];

35 
	`¥ötf
 ("\n%s\n", 
vîsi⁄_°rög
);

37 
	}
}

39 
U_BOOT_CMD
(

40 
vîsi⁄
, 1, 1, 
do_vîsi⁄
,

42 
NULL


45 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_ECHO
)

47 
	$do_echo
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

49 
i
, 
puäl
 = 1;

51 
i
 = 1; i < 
¨gc
; i++) {

52 *
p
 = 
¨gv
[
i
], 
c
;

54 i‡(
i
 > 1)

55 
	`putc
(' ');

56 (
c
 = *
p
++) != '\0') {

57 i‡(
c
 ='\\' && *
p
 == 'c') {

58 
puäl
 = 0;

59 
p
++;

61 
	`putc
(
c
);

66 i‡(
puäl
)

67 
	`putc
('\n');

69 
	}
}

71 
U_BOOT_CMD
(

72 
echo
, 
CFG_MAXARGS
, 1, 
do_echo
,

79 #ifde‡
CFG_HUSH_PARSER


82 
	$do_ã°
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

84 **
≠
;

85 
À·
, 
adv
, 
ex¥
, 
œ°_ex¥
, 
√g
, 
œ°_cmp
;

88 i‡(
¨gc
 < 3)

93 
	`¥ötf
("test:");

94 
À·
 = 1;

95 
¨gv
[
À·
])

96 
	`¥ötf
(" %s", 
¨gv
[
À·
++]);

100 
œ°_ex¥
 = 0;

101 
À·
 = 
¨gc
 - 1; 
≠
 = 
¨gv
 + 1;

102 i‡(
À·
 > 0 && 
	`°rcmp
(
≠
[0], "!") == 0) {

103 
√g
 = 1;

104 
≠
++;

105 
À·
--;

107 
√g
 = 0;

109 
ex¥
 = -1;

110 
œ°_cmp
 = -1;

111 
œ°_ex¥
 = -1;

112 
À·
 > 0) {

114 i‡(
	`°rcmp
(
≠
[0], "-o") == 0 || strcmp(ap[0], "-a") == 0)

115 
adv
 = 1;

116 i‡(
	`°rcmp
(
≠
[0], "-z") == 0 || strcmp(ap[0], "-n") == 0)

117 
adv
 = 2;

119 
adv
 = 3;

121 i‡(
À·
 < 
adv
) {

122 
ex¥
 = 1;

126 i‡(
adv
 == 1) {

127 i‡(
	`°rcmp
(
≠
[0], "-o") == 0) {

128 
œ°_ex¥
 = 
ex¥
;

129 
œ°_cmp
 = 0;

130 } i‡(
	`°rcmp
(
≠
[0], "-a") == 0) {

131 
œ°_ex¥
 = 
ex¥
;

132 
œ°_cmp
 = 1;

134 
ex¥
 = 1;

139 i‡(
adv
 == 2) {

140 i‡(
	`°rcmp
(
≠
[0], "-z") == 0)

141 
ex¥
 = 
	`°æí
(
≠
[1]) == 0 ? 0 : 1;

142 i‡(
	`°rcmp
(
≠
[0], "-n") == 0)

143 
ex¥
 = 
	`°æí
(
≠
[1]) == 0 ? 1 : 0;

145 
ex¥
 = 1;

149 i‡(
œ°_cmp
 == 0)

150 
ex¥
 = 
œ°_ex¥
 ||Éxpr;

151 i‡(
œ°_cmp
 == 1)

152 
ex¥
 = 
œ°_ex¥
 &&Éxpr;

153 
œ°_cmp
 = -1;

156 i‡(
adv
 == 3) {

157 i‡(
	`°rcmp
(
≠
[1], "=") == 0)

158 
ex¥
 = 
	`°rcmp
(
≠
[0],áp[2]) == 0;

159 i‡(
	`°rcmp
(
≠
[1], "!=") == 0)

160 
ex¥
 = 
	`°rcmp
(
≠
[0],áp[2]) != 0;

161 i‡(
	`°rcmp
(
≠
[1], ">") == 0)

162 
ex¥
 = 
	`°rcmp
(
≠
[0],áp[2]) > 0;

163 i‡(
	`°rcmp
(
≠
[1], "<") == 0)

164 
ex¥
 = 
	`°rcmp
(
≠
[0],áp[2]) < 0;

165 i‡(
	`°rcmp
(
≠
[1], "-eq") == 0)

166 
ex¥
 = 
	`sim∂e_°πﬁ
(
≠
[0], 
NULL
, 10) == simple_strtol(ap[2], NULL, 10);

167 i‡(
	`°rcmp
(
≠
[1], "-ne") == 0)

168 
ex¥
 = 
	`sim∂e_°πﬁ
(
≠
[0], 
NULL
, 10) != simple_strtol(ap[2], NULL, 10);

169 i‡(
	`°rcmp
(
≠
[1], "-lt") == 0)

170 
ex¥
 = 
	`sim∂e_°πﬁ
(
≠
[0], 
NULL
, 10) < simple_strtol(ap[2], NULL, 10);

171 i‡(
	`°rcmp
(
≠
[1], "-le") == 0)

172 
ex¥
 = 
	`sim∂e_°πﬁ
(
≠
[0], 
NULL
, 10) <= simple_strtol(ap[2], NULL, 10);

173 i‡(
	`°rcmp
(
≠
[1], "-gt") == 0)

174 
ex¥
 = 
	`sim∂e_°πﬁ
(
≠
[0], 
NULL
, 10) > simple_strtol(ap[2], NULL, 10);

175 i‡(
	`°rcmp
(
≠
[1], "-ge") == 0)

176 
ex¥
 = 
	`sim∂e_°πﬁ
(
≠
[0], 
NULL
, 10) >= simple_strtol(ap[2], NULL, 10);

178 
ex¥
 = 1;

182 i‡(
œ°_cmp
 == 0)

183 
ex¥
 = 
œ°_ex¥
 ||Éxpr;

184 i‡(
œ°_cmp
 == 1)

185 
ex¥
 = 
œ°_ex¥
 &&Éxpr;

186 
œ°_cmp
 = -1;

189 
≠
 +
adv
; 
À·
 -=ádv;

192 i‡(
√g
)

193 
ex¥
 = !expr;

195 
ex¥
 = !expr;

198 
	`¥ötf
(":Ñëu∫†%d\n", 
ex¥
);

201  
ex¥
;

202 
	}
}

204 
U_BOOT_CMD
(

205 
ã°
, 
CFG_MAXARGS
, 1, 
do_ã°
,

212 
	$do_exô
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

214 
r
;

216 
r
 = 0;

217 i‡(
¨gc
 > 1)

218 
r
 = 
	`sim∂e_°πoul
(
¨gv
[1], 
NULL
, 10);

220  -
r
 - 2;

221 
	}
}

223 
U_BOOT_CMD
(

224 
exô
, 2, 1, 
do_exô
,

236 
	$do_hñp
 (
cmd_tbl_t
 * 
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

238 
i
;

239 
rcode
 = 0;

241 i‡(
¨gc
 == 1) {

243 
cmd_ôems
 = &
__u_boŸ_cmd_íd
 -

244 &
__u_boŸ_cmd_°¨t
;

245 
cmd_tbl_t
 *
cmd_¨øy
[
cmd_ôems
];

246 
i
, 
j
, 
sw≠s
;

249 
cmdç
 = &
__u_boŸ_cmd_°¨t
;

250 
i
 = 0; i < 
cmd_ôems
; i++) {

251 
cmd_¨øy
[
i
] = 
cmdç
++;

255 
i
 = 
cmd_ôems
 - 1; i > 0; --i) {

256 
sw≠s
 = 0;

257 
j
 = 0; j < 
i
; ++j) {

258 i‡(
	`°rcmp
 (
cmd_¨øy
[
j
]->
«me
,

259 
cmd_¨øy
[
j
 + 1]->
«me
) > 0) {

260 
cmd_tbl_t
 *
tmp
;

261 
tmp
 = 
cmd_¨øy
[
j
];

262 
cmd_¨øy
[
j
] = cmd_array[j + 1];

263 
cmd_¨øy
[
j
 + 1] = 
tmp
;

264 ++
sw≠s
;

267 i‡(!
sw≠s
)

272 
i
 = 0; i < 
cmd_ôems
; i++) {

273 c⁄° *
ußge
 = 
cmd_¨øy
[
i
]->usage;

276 i‡(
	`˘æc
 ())

278 i‡(
ußge
 =
NULL
)

280 
	`puts
 (
ußge
);

287 
i
 = 1; i < 
¨gc
; ++i) {

288 i‡((
cmdç
 = 
	`föd_cmd
 (
¨gv
[
i
])Ë!
NULL
) {

289 #ifdef 
CFG_LONGHELP


291 
	`puts
 (
cmdç
->
«me
);

292 
	`putc
 (' ');

293 i‡(
cmdç
->
hñp
) {

294 
	`puts
 (
cmdç
->
hñp
);

296 
	`puts
 ("- No helpávailable.\n");

297 
rcode
 = 1;

299 
	`putc
 ('\n');

301 i‡(
cmdç
->
ußge
)

302 
	`puts
 (
cmdç
->
ußge
);

305 
	`¥ötf
 ("Unknown command '%s' -Åry 'help'"

307 " know¿comm™ds\n\n", 
¨gv
[
i
]

309 
rcode
 = 1;

312  
rcode
;

313 
	}
}

316 
U_BOOT_CMD
(

317 
hñp
, 
CFG_MAXARGS
, 1, 
do_hñp
,

328 #ifde‡ 
CFG_LONGHELP


329 
cmd_tbl_t
 
__u_boŸ_cmd_que°i⁄_m¨k
 
	gSåu˘_Se˘i⁄
 = {

330 "?", 
CFG_MAXARGS
, 1, 
do_hñp
,

332 
NULL


335 
cmd_tbl_t
 
__u_boŸ_cmd_que°i⁄_m¨k
 
	gSåu˘_Se˘i⁄
 = {

336 "?", 
CFG_MAXARGS
, 1, 
do_hñp
,

344 
cmd_tbl_t
 *
	$föd_cmd
 (c⁄° *
cmd
)

346 
cmd_tbl_t
 *
cmdç
;

347 
cmd_tbl_t
 *
cmdç_ãmp
 = &
__u_boŸ_cmd_°¨t
;

348 c⁄° *
p
;

349 
Àn
;

350 
n_found
 = 0;

356 
Àn
 = ((
p
 = 
	`°rchr
(
cmd
, '.')Ë=
NULL
Ë? 
	`°æí
 (cmd) : (p - cmd);

358 
cmdç
 = &
__u_boŸ_cmd_°¨t
;

359 
cmdç
 !&
__u_boŸ_cmd_íd
;

360 
cmdç
++) {

361 i‡(
	`°∫cmp
 (
cmd
, 
cmdç
->
«me
, 
Àn
) == 0) {

362 i‡(
Àn
 =
	`°æí
 (
cmdç
->
«me
))

363  
cmdç
;

365 
cmdç_ãmp
 = 
cmdç
;

366 
n_found
++;

369 i‡(
n_found
 == 1) {

370  
cmdç_ãmp
;

373  
NULL
;

374 
	}
}

376 #ifde‡
CONFIG_AUTO_COMPLETE


378 
	$v¨_com∂ëe
(
¨gc
, *
¨gv
[], 
œ°_ch¨
, 
maxv
, *
cmdv
[])

380 
tmp_buf
[512];

381 
•a˚
;

383 
•a˚
 = 
œ°_ch¨
 == '\0' ||Üast_char == ' ' ||Üast_char == '\t';

385 i‡(
•a˚
 && 
¨gc
 == 1)

386  
	`ív_com∂ëe
("", 
maxv
, 
cmdv
, (
tmp_buf
),Åmp_buf);

388 i‡(!
•a˚
 && 
¨gc
 == 2)

389  
	`ív_com∂ëe
(
¨gv
[1], 
maxv
, 
cmdv
, (
tmp_buf
),Åmp_buf);

392 
	}
}

394 
	$ö°Æl_auto_com∂ëe_h™dÀr
(c⁄° *
cmd
,

395 (*
com∂ëe
)(
¨gc
, *
¨gv
[], 
œ°_ch¨
, 
maxv
, *
cmdv
[]))

397 
cmd_tbl_t
 *
cmdç
;

399 
cmdç
 = 
	`föd_cmd
(
cmd
);

400 i‡(
cmdç
 =
NULL
)

403 
cmdç
->
com∂ëe
 = complete;

404 
	}
}

406 
	$ö°Æl_auto_com∂ëe
()

408 
	`ö°Æl_auto_com∂ëe_h™dÀr
("¥öãnv", 
v¨_com∂ëe
);

409 
	`ö°Æl_auto_com∂ëe_h™dÀr
("£ãnv", 
v¨_com∂ëe
);

410 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_RUN
)

411 
	`ö°Æl_auto_com∂ëe_h™dÀr
("run", 
v¨_com∂ëe
);

413 
	}
}

417 
	$com∂ëe_cmdv
(
¨gc
, *
¨gv
[], 
œ°_ch¨
, 
maxv
, *
cmdv
[])

419 
cmd_tbl_t
 *
cmdç
;

420 c⁄° *
p
;

421 
Àn
, 
˛í
;

422 
n_found
 = 0;

423 c⁄° *
cmd
;

426 i‡(
maxv
 < 2)

429 
cmdv
[0] = 
NULL
;

431 i‡(
¨gc
 == 0) {

433 
cmdç
 = &
__u_boŸ_cmd_°¨t
; cmdç !&
__u_boŸ_cmd_íd
; cmdtp++) {

434 i‡(
n_found
 >
maxv
 - 2) {

435 
cmdv
[
n_found
++] = "...";

438 
cmdv
[
n_found
++] = 
cmdç
->
«me
;

440 
cmdv
[
n_found
] = 
NULL
;

441  
n_found
;

445 i‡(
¨gc
 > 1 || (
œ°_ch¨
 == '\0' ||Üast_char == ' ' ||Üast_char == '\t')) {

446 
cmdç
 = 
	`föd_cmd
(
¨gv
[0]);

447 i‡(
cmdç
 =
NULL
 || cmdç->
com∂ëe
 == NULL) {

448 
cmdv
[0] = 
NULL
;

451  (*
cmdç
->
com∂ëe
)(
¨gc
, 
¨gv
, 
œ°_ch¨
, 
maxv
, 
cmdv
);

454 
cmd
 = 
¨gv
[0];

459 
p
 = 
	`°rchr
(
cmd
, '.');

460 i‡(
p
 =
NULL
)

461 
Àn
 = 
	`°æí
(
cmd
);

463 
Àn
 = 
p
 - 
cmd
;

466 
cmdç
 = &
__u_boŸ_cmd_°¨t
; cmdç !&
__u_boŸ_cmd_íd
; cmdtp++) {

468 
˛í
 = 
	`°æí
(
cmdç
->
«me
);

469 i‡(
˛í
 < 
Àn
)

472 i‡(
	`memcmp
(
cmd
, 
cmdç
->
«me
, 
Àn
) != 0)

476 i‡(
n_found
 >
maxv
 - 2) {

477 
cmdv
[
n_found
++] = "...";

481 
cmdv
[
n_found
++] = 
cmdç
->
«me
;

484 
cmdv
[
n_found
] = 
NULL
;

485  
n_found
;

486 
	}
}

488 
	$make_¨gv
(*
s
, 
¨gvsz
, *
¨gv
[])

490 
¨gc
 = 0;

493 
¨gc
 < 
¨gvsz
 - 1) {

496 (*
s
 == ' ') || (*s == '\t'))

497 ++
s
;

499 i‡(*
s
 == '\0')

502 
¨gv
[
¨gc
++] = 
s
;

505 *
s
 && (*s != ' ') && (*s != '\t'))

506 ++
s
;

508 i‡(*
s
 == '\0')

511 *
s
++ = '\0';

513 
¨gv
[
¨gc
] = 
NULL
;

515  
¨gc
;

516 
	}
}

518 
	$¥öt_¨gv
(c⁄° *
b™√r
, c⁄° *
Àadî
, c⁄° *
£p
, 
löemax
, *
¨gv
[])

520 
Œ
 = 
Àadî
 !
NULL
 ? 
	`°æí
(leader) : 0;

521 
¶
 = 
£p
 !
NULL
 ? 
	`°æí
(sep) : 0;

522 
Àn
, 
i
;

524 i‡(
b™√r
) {

525 
	`puts
("\n");

526 
	`puts
(
b™√r
);

529 
i
 = 
löemax
;

530 *
¨gv
 !
NULL
) {

531 
Àn
 = 
	`°æí
(*
¨gv
Ë+ 
¶
;

532 i‡(
i
 + 
Àn
 >
löemax
) {

533 
	`puts
("\n");

534 i‡(
Àadî
)

535 
	`puts
(
Àadî
);

536 
i
 = 
Œ
 - 
¶
;

537 } i‡(
£p
)

538 
	`puts
(
£p
);

539 
	`puts
(*
¨gv
++);

540 
i
 +
Àn
;

542 
	`¥ötf
("\n");

543 
	}
}

545 
	$föd_comm⁄_¥efix
(*
¨gv
[])

547 
i
, 
Àn
;

548 *
™ch‹
, *
s
, *
t
;

550 i‡(*
¨gv
 =
NULL
)

554 
™ch‹
 = *
¨gv
++;

555 
Àn
 = 
	`°æí
(
™ch‹
);

556 (
t
 = *
¨gv
++Ë!
NULL
) {

557 
s
 = 
™ch‹
;

558 
i
 = 0; i < 
Àn
; i++, 
t
++, 
s
++) {

559 i‡(*
t
 !*
s
)

562 
Àn
 = 
s
 - 
™ch‹
;

564  
Àn
;

565 
	}
}

567 
	gtmp_buf
[
CFG_CBSIZE
];

569 
	$cmd_auto_com∂ëe
(c⁄° *c⁄° 
¥om±
, *
buf
, *
≈
, *
cﬁp
)

571 
n
 = *
≈
, 
cﬁ
 = *
cﬁp
;

572 *
¨gv
[
CFG_MAXARGS
 + 1];

573 *
cmdv
[20];

574 *
s
, *
t
;

575 c⁄° *
£p
;

576 
i
, 
j
, 
k
, 
Àn
, 
£∂í
, 
¨gc
;

577 
˙t
;

578 
œ°_ch¨
;

580 i‡(
	`°rcmp
(
¥om±
, 
CFG_PROMPT
) != 0)

583 
˙t
 = 
	`°æí
(
buf
);

584 i‡(
˙t
 >= 1)

585 
œ°_ch¨
 = 
buf
[
˙t
 - 1];

587 
œ°_ch¨
 = '\0';

590 
	`°r˝y
(
tmp_buf
, 
buf
);

593 
¨gc
 = 
	`make_¨gv
(
tmp_buf
, (
¨gv
)/(argv[0]),árgv);

596 
i
 = 
	`com∂ëe_cmdv
(
¨gc
, 
¨gv
, 
œ°_ch¨
, (
cmdv
)/(cmdv[0]), cmdv);

599 i‡(
i
 == 0) {

600 i‡(
¨gc
 > 1)

602 
	`putc
('\a');

606 
s
 = 
NULL
;

607 
Àn
 = 0;

608 
£p
 = 
NULL
;

609 
£∂í
 = 0;

610 i‡(
i
 == 1) {

611 
k
 = 
	`°æí
(
¨gv
[
¨gc
 - 1]);

612 
s
 = 
cmdv
[0] + 
k
;

613 
Àn
 = 
	`°æí
(
s
);

614 
£p
 = " ";

615 
£∂í
 = 1;

616 } i‡(
i
 > 1 && (
j
 = 
	`föd_comm⁄_¥efix
(
cmdv
)) != 0) {

617 
k
 = 
	`°æí
(
¨gv
[
¨gc
 - 1]);

618 
j
 -
k
;

619 i‡(
j
 > 0) {

620 
s
 = 
cmdv
[0] + 
k
;

621 
Àn
 = 
j
;

625 i‡(
s
 !
NULL
) {

626 
k
 = 
Àn
 + 
£∂í
;

628 i‡(
n
 + 
k
 >
CFG_CBSIZE
 - 2) {

629 
	`putc
('\a');

633 
t
 = 
buf
 + 
˙t
;

634 
i
 = 0; i < 
Àn
; i++)

635 *
t
++ = *
s
++;

636 i‡(
£p
 !
NULL
)

637 
i
 = 0; i < 
£∂í
; i++)

638 *
t
++ = 
£p
[
i
];

639 *
t
 = '\0';

640 
n
 +
k
;

641 
cﬁ
 +
k
;

642 
	`puts
(
t
 - 
k
);

643 i‡(
£p
 =
NULL
)

644 
	`putc
('\a');

645 *
≈
 = 
n
;

646 *
cﬁp
 = 
cﬁ
;

648 
	`¥öt_¨gv
(
NULL
, " ", " ", 78, 
cmdv
);

650 
	`puts
(
¥om±
);

651 
	`puts
(
buf
);

654 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/console.c

24 
	~<comm⁄.h
>

25 
	~<°d¨g.h
>

26 
	~<mÆloc.h
>

27 
	~<c⁄sﬁe.h
>

28 
	~<exp‹ts.h
>

30 #ifde‡
CONFIG_AMIGAONEG3SE


31 
	gc⁄sﬁe_ch™ged
 = 0;

34 #ifde‡
CFG_CONSOLE_IS_IN_ENV


40 #ifde‡
CFG_CONSOLE_OVERWRITE_ROUTINE


41 
ovîwrôe_c⁄sﬁe
 ();

43 
	$ovîwrôe_c⁄sﬁe
 ()

46 
	}
}

51 
	$c⁄sﬁe_£tfûe
 (
fûe
, 
devi˚_t
 * 
dev
)

53 
DECLARE_GLOBAL_DATA_PTR
;

54 
îr‹
 = 0;

56 i‡(
dev
 =
NULL
)

59 
fûe
) {

60 
°dö
:

61 
°dout
:

62 
°dîr
:

64 i‡(
dev
->
°¨t
) {

65 
îr‹
 = 
dev
->
	`°¨t
 ();

67 i‡(
îr‹
 < 0)

72 
°dio_devi˚s
[
fûe
] = 
dev
;

78 
fûe
) {

79 
°dö
:

80 
gd
->
jt
[
XF_gëc
] = 
dev
->
gëc
;

81 
gd
->
jt
[
XF_t°c
] = 
dev
->
t°c
;

83 
°dout
:

84 
gd
->
jt
[
XF_putc
] = 
dev
->
putc
;

85 
gd
->
jt
[
XF_puts
] = 
dev
->
puts
;

86 
gd
->
jt
[
XF_¥ötf
] = 
¥ötf
;

92 
îr‹
 = -1;

94  
îr‹
;

95 
	}
}

99 
	$£rül_¥ötf
 (c⁄° *
fmt
, ...)

101 
va_li°
 
¨gs
;

102 
uöt
 
i
;

103 
¥ötbuf„r
[
CFG_PBSIZE
];

105 
	`va_°¨t
 (
¨gs
, 
fmt
);

110 
i
 = 
	`v•rötf
 (
¥ötbuf„r
, 
fmt
, 
¨gs
);

111 
	`va_íd
 (
¨gs
);

113 
	`£rül_puts
 (
¥ötbuf„r
);

114 
	}
}

116 
	$fgëc
 (
fûe
)

118 i‡(
fûe
 < 
MAX_FILES
)

119  
°dio_devi˚s
[
fûe
]->
	`gëc
 ();

122 
	}
}

124 
	$·°c
 (
fûe
)

126 i‡(
fûe
 < 
MAX_FILES
)

127  
°dio_devi˚s
[
fûe
]->
	`t°c
 ();

130 
	}
}

132 
	$Âutc
 (
fûe
, c⁄° 
c
)

134 i‡(
fûe
 < 
MAX_FILES
)

135 
°dio_devi˚s
[
fûe
]->
	`putc
 (
c
);

136 
	}
}

138 
	$Âuts
 (
fûe
, c⁄° *
s
)

140 i‡(
fûe
 < 
MAX_FILES
)

141 
°dio_devi˚s
[
fûe
]->
	`puts
 (
s
);

142 
	}
}

144 
	$Ârötf
 (
fûe
, c⁄° *
fmt
, ...)

146 
va_li°
 
¨gs
;

147 
uöt
 
i
;

148 
¥ötbuf„r
[
CFG_PBSIZE
];

150 
	`va_°¨t
 (
¨gs
, 
fmt
);

155 
i
 = 
	`v•rötf
 (
¥ötbuf„r
, 
fmt
, 
¨gs
);

156 
	`va_íd
 (
¨gs
);

159 
	`Âuts
 (
fûe
, 
¥ötbuf„r
);

160 
	}
}

164 
	$gëc
 ()

166 
DECLARE_GLOBAL_DATA_PTR
;

167 i‡(
gd
->
Êags
 & 
GD_FLG_DEVINIT
) {

169  
	`fgëc
 (
°dö
);

173  
	`£rül_gëc
 ();

174 
	}
}

176 
	$t°c
 ()

178 
DECLARE_GLOBAL_DATA_PTR
;

179 i‡(
gd
->
Êags
 & 
GD_FLG_DEVINIT
) {

181  
	`·°c
 (
°dö
);

185  
	`£rül_t°c
 ();

186 
	}
}

188 
	$putc
 (c⁄° 
c
)

190 
DECLARE_GLOBAL_DATA_PTR
;

192 #ifde‡
CONFIG_SILENT_CONSOLE


193 i‡(
gd
->
Êags
 & 
GD_FLG_SILENT
)

197 i‡(
gd
->
Êags
 & 
GD_FLG_DEVINIT
) {

199 
	`Âutc
 (
°dout
, 
c
);

202 
	`£rül_putc
 (
c
);

204 
	}
}

206 
	$puts
 (c⁄° *
s
)

208 
DECLARE_GLOBAL_DATA_PTR
;

210 #ifde‡
CONFIG_SILENT_CONSOLE


211 i‡(
gd
->
Êags
 & 
GD_FLG_SILENT
)

215 i‡(
gd
->
Êags
 & 
GD_FLG_DEVINIT
) {

217 
	`Âuts
 (
°dout
, 
s
);

220 
	`£rül_puts
 (
s
);

222 
	}
}

224 
	$¥ötf
 (c⁄° *
fmt
, ...)

226 
va_li°
 
¨gs
;

227 
uöt
 
i
;

228 
¥ötbuf„r
[
CFG_PBSIZE
];

230 
	`va_°¨t
 (
¨gs
, 
fmt
);

235 
i
 = 
	`v•rötf
 (
¥ötbuf„r
, 
fmt
, 
¨gs
);

236 
	`va_íd
 (
¨gs
);

239 
	`puts
 (
¥ötbuf„r
);

240 
	}
}

242 
	$v¥ötf
 (c⁄° *
fmt
, 
va_li°
 
¨gs
)

244 
uöt
 
i
;

245 
¥ötbuf„r
[
CFG_PBSIZE
];

250 
i
 = 
	`v•rötf
 (
¥ötbuf„r
, 
fmt
, 
¨gs
);

253 
	`puts
 (
¥ötbuf„r
);

254 
	}
}

257 
	g˘æc_dißbÀd
 = 0;

258 
	g˘æc_was_¥es£d
 = 0;

259 
	$˘æc
 ()

261 
DECLARE_GLOBAL_DATA_PTR
;

263 i‡(!
˘æc_dißbÀd
 && 
gd
->
have_c⁄sﬁe
) {

264 i‡(
	`t°c
 ()) {

265 
	`gëc
 ()) {

267 
˘æc_was_¥es£d
 = 1;

275 
	}
}

281 
	$dißbÀ_˘æc
 (
dißbÀ
)

283 
¥ev
 = 
˘æc_dißbÀd
;

285 
˘æc_dißbÀd
 = 
dißbÀ
;

286  
¥ev
;

287 
	}
}

289 
	$had_˘æc
 ()

291  
˘æc_was_¥es£d
;

292 
	}
}

294 
	$˛ór_˘æc
 ()

296 
˘æc_was_¥es£d
 = 0;

297 
	}
}

299 #ifde‡
CONFIG_MODEM_SUPPORT_DEBUG


300 
	gs¸ìn
[1024];

301 *
	gcurs‹
 = 
s¸ìn
;

302 
	g⁄˚
 = 0;

303 
ölöe
 
	$dbg
(c⁄° *
fmt
, ...)

305 
va_li°
 
¨gs
;

306 
uöt
 
i
;

307 
¥ötbuf„r
[
CFG_PBSIZE
];

309 i‡(!
⁄˚
) {

310 
	`mem£t
(
s¸ìn
, 0, (screen));

311 
⁄˚
++;

314 
	`va_°¨t
(
¨gs
, 
fmt
);

319 
i
 = 
	`v•rötf
(
¥ötbuf„r
, 
fmt
, 
¨gs
);

320 
	`va_íd
(
¨gs
);

322 i‡((
s¸ìn
 + (s¸ìnË- 1 - 
curs‹
Ë< 
	`°æí
(
¥ötbuf„r
)+1) {

323 
	`mem£t
(
s¸ìn
, 0, (screen));

324 
curs‹
 = 
s¸ìn
;

326 
	`•rötf
(
curs‹
, 
¥ötbuf„r
);

327 
curs‹
 +
	`°æí
(
¥ötbuf„r
);

329 
	}
}

331 
ölöe
 
	$dbg
(c⁄° *
fmt
, ...)

333 
	}
}

338 
	$c⁄sﬁe_assign
 (
fûe
, *
dev«me
)

340 
Êag
, 
i
;

343 
fûe
) {

344 
°dö
:

345 
Êag
 = 
DEV_FLAGS_INPUT
;

347 
°dout
:

348 
°dîr
:

349 
Êag
 = 
DEV_FLAGS_OUTPUT
;

357 
i
 = 1; i <
	`Li°NumIãms
 (
devli°
); i++) {

358 
devi˚_t
 *
dev
 = 
	`Li°GëPåToIãm
 (
devli°
, 
i
);

360 i‡(
	`°rcmp
 (
dev«me
, 
dev
->
«me
) == 0) {

361 i‡(
dev
->
Êags
 & 
Êag
)

362  
	`c⁄sﬁe_£tfûe
 (
fûe
, 
dev
);

369 
	}
}

372 
	$c⁄sﬁe_öô_f
 ()

374 
DECLARE_GLOBAL_DATA_PTR
;

375 
gd
->
have_c⁄sﬁe
 = 1;

376 #ifde‡
CONFIG_SILENT_CONSOLE


377 i‡(
	`gëív
("sûít"Ë!
NULL
)

378 
gd
->
Êags
 |
GD_FLG_SILENT
;

381 
	}
}

383 #i‡
deföed
(
CFG_CONSOLE_IS_IN_ENV
Ë|| deföed(
CONFIG_SPLASH_SCREEN
Ë|| deföed(
CONFIG_SILENT_CONSOLE
)

385 
devi˚_t
 *
	$£¨ch_devi˚
 (
Êags
, *
«me
)

387 
i
, 
ôems
;

388 
devi˚_t
 *
dev
 = 
NULL
;

390 
ôems
 = 
	`Li°NumIãms
 (
devli°
);

391 i‡(
«me
 =
NULL
)

392  
dev
;

394 
i
 = 1; i <
ôems
; i++) {

395 
dev
 = 
	`Li°GëPåToIãm
 (
devli°
, 
i
);

396 i‡((
dev
->
Êags
 & fœgsË&& (
	`°rcmp
 (
«me
, dev->name) == 0)) {

400  
dev
;

401 
	}
}

404 #ifde‡
CFG_CONSOLE_IS_IN_ENV


406 
	$c⁄sﬁe_öô_r
 ()

408 
DECLARE_GLOBAL_DATA_PTR
;

409 *
°dö«me
, *
°douäame
, *
°dî∫ame
;

410 
devi˚_t
 *
öputdev
 = 
NULL
, *
ouçutdev
 = NULL, *
îrdev
 = NULL;

411 #ifde‡
CFG_CONSOLE_ENV_OVERWRITE


412 
i
;

416 
gd
->
jt
[
XF_gëc
] = 
£rül_gëc
;

417 
gd
->
jt
[
XF_t°c
] = 
£rül_t°c
;

418 
gd
->
jt
[
XF_putc
] = 
£rül_putc
;

419 
gd
->
jt
[
XF_puts
] = 
£rül_puts
;

420 
gd
->
jt
[
XF_¥ötf
] = 
£rül_¥ötf
;

424 
°dö«me
 = 
	`gëív
 ("stdin");

425 
°douäame
 = 
	`gëív
 ("stdout");

426 
°dî∫ame
 = 
	`gëív
 ("stderr");

428 i‡(
	`ovîwrôe_c⁄sﬁe
 () == 0) {

429 
öputdev
 = 
	`£¨ch_devi˚
 (
DEV_FLAGS_INPUT
, 
°dö«me
);

430 
ouçutdev
 = 
	`£¨ch_devi˚
 (
DEV_FLAGS_OUTPUT
, 
°douäame
);

431 
îrdev
 = 
	`£¨ch_devi˚
 (
DEV_FLAGS_OUTPUT
, 
°dî∫ame
);

434 i‡(
öputdev
 =
NULL
) {

435 
öputdev
 = 
	`£¨ch_devi˚
 (
DEV_FLAGS_INPUT
, "serial");

437 i‡(
ouçutdev
 =
NULL
) {

438 
ouçutdev
 = 
	`£¨ch_devi˚
 (
DEV_FLAGS_OUTPUT
, "serial");

440 i‡(
îrdev
 =
NULL
) {

441 
îrdev
 = 
	`£¨ch_devi˚
 (
DEV_FLAGS_OUTPUT
, "serial");

444 i‡(
ouçutdev
 !
NULL
) {

445 
	`c⁄sﬁe_£tfûe
 (
°dout
, 
ouçutdev
);

447 i‡(
îrdev
 !
NULL
) {

448 
	`c⁄sﬁe_£tfûe
 (
°dîr
, 
îrdev
);

450 i‡(
öputdev
 !
NULL
) {

451 
	`c⁄sﬁe_£tfûe
 (
°dö
, 
öputdev
);

454 
gd
->
Êags
 |
GD_FLG_DEVINIT
;

456 #i‚de‡
CFG_CONSOLE_INFO_QUIET


458 
	`puts
 ("In: ");

459 i‡(
°dio_devi˚s
[
°dö
] =
NULL
) {

460 
	`puts
 ("No input devicesávailable!\n");

462 
	`¥ötf
 ("%s\n", 
°dio_devi˚s
[
°dö
]->
«me
);

465 
	`puts
 ("Out: ");

466 i‡(
°dio_devi˚s
[
°dout
] =
NULL
) {

467 
	`puts
 ("No output devicesávailable!\n");

469 
	`¥ötf
 ("%s\n", 
°dio_devi˚s
[
°dout
]->
«me
);

472 
	`puts
 ("Err: ");

473 i‡(
°dio_devi˚s
[
°dîr
] =
NULL
) {

474 
	`puts
 ("NoÉrror devicesávailable!\n");

476 
	`¥ötf
 ("%s\n", 
°dio_devi˚s
[
°dîr
]->
«me
);

480 #ifde‡
CFG_CONSOLE_ENV_OVERWRITE


482 
i
 = 0; i < 3; i++) {

483 
	`£ãnv
 (
°dio_«mes
[
i
], 
°dio_devi˚s
[i]->
«me
);

489 i‡((
°dio_devi˚s
[
°dö
] =
NULL
Ë&& (°dio_devi˚s[
°dout
] == NULL))

493 
	}
}

498 
	$c⁄sﬁe_öô_r
 ()

500 
DECLARE_GLOBAL_DATA_PTR
;

502 
devi˚_t
 *
öputdev
 = 
NULL
, *
ouçutdev
 = NULL;

503 
i
, 
ôems
 = 
	`Li°NumIãms
 (
devli°
);

505 #ifde‡
CONFIG_SPLASH_SCREEN


508 i‡(
	`gëív
("•œshimage"Ë!
NULL
)

509 
ouçutdev
 = 
	`£¨ch_devi˚
 (
DEV_FLAGS_OUTPUT
, "nulldev");

512 #ifde‡
CONFIG_SILENT_CONSOLE


514 i‡(
gd
->
Êags
 & 
GD_FLG_SILENT
)

515 
ouçutdev
 = 
	`£¨ch_devi˚
 (
DEV_FLAGS_OUTPUT
, "nulldev");

519 
i
 = 1;

520 (
i
 <
ôems
Ë&& ((
öputdev
 =
NULL
Ë|| (
ouçutdev
 == NULL));

521 
i
++

523 
devi˚_t
 *
dev
 = 
	`Li°GëPåToIãm
 (
devli°
, 
i
);

525 i‡((
dev
->
Êags
 & 
DEV_FLAGS_INPUT
Ë&& (
öputdev
 =
NULL
)) {

526 
öputdev
 = 
dev
;

528 i‡((
dev
->
Êags
 & 
DEV_FLAGS_OUTPUT
Ë&& (
ouçutdev
 =
NULL
)) {

529 
ouçutdev
 = 
dev
;

534 i‡(
ouçutdev
 !
NULL
) {

535 
	`c⁄sﬁe_£tfûe
 (
°dout
, 
ouçutdev
);

536 
	`c⁄sﬁe_£tfûe
 (
°dîr
, 
ouçutdev
);

540 i‡(
öputdev
 !
NULL
) {

541 
	`c⁄sﬁe_£tfûe
 (
°dö
, 
öputdev
);

544 
gd
->
Êags
 |
GD_FLG_DEVINIT
;

546 #i‚de‡
CFG_CONSOLE_INFO_QUIET


548 
	`puts
 ("In: ");

549 i‡(
°dio_devi˚s
[
°dö
] =
NULL
) {

550 
	`puts
 ("No input devicesávailable!\n");

552 
	`¥ötf
 ("%s\n", 
°dio_devi˚s
[
°dö
]->
«me
);

555 
	`puts
 ("Out: ");

556 i‡(
°dio_devi˚s
[
°dout
] =
NULL
) {

557 
	`puts
 ("No output devicesávailable!\n");

559 
	`¥ötf
 ("%s\n", 
°dio_devi˚s
[
°dout
]->
«me
);

562 
	`puts
 ("Err: ");

563 i‡(
°dio_devi˚s
[
°dîr
] =
NULL
) {

564 
	`puts
 ("NoÉrror devicesávailable!\n");

566 
	`¥ötf
 ("%s\n", 
°dio_devi˚s
[
°dîr
]->
«me
);

571 
i
 = 0; i < 3; i++) {

572 
	`£ãnv
 (
°dio_«mes
[
i
], 
°dio_devi˚s
[i]->
«me
);

577 i‡((
°dio_devi˚s
[
°dö
] =
NULL
Ë&& (°dio_devi˚s[
°dout
] == NULL))

582 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/devices.c

24 
	~<c⁄fig.h
>

25 
	~<comm⁄.h
>

26 
	~<°d¨g.h
>

27 
	~<mÆloc.h
>

28 
	~<devi˚s.h
>

29 
	~<£rül.h
>

30 #ifde‡
CONFIG_LOGBUFFER


31 
	~<logbuff.h
>

33 #i‡
deföed
(
CONFIG_HARD_I2C
Ë|| deföed(
CONFIG_SOFT_I2C
)

34 
	~<i2c.h
>

37 
li°_t
 
	gdevli°
 = 0;

38 
devi˚_t
 *
	g°dio_devi˚s
[] = { 
NULL
, NULL, NULL };

39 *
	g°dio_«mes
[
MAX_FILES
] = { "stdin", "stdout", "stderr" };

41 #i‡
deföed
(
CONFIG_SPLASH_SCREEN
Ë&& !deföed(
CFG_DEVICE_NULLDEV
)

42 
	#CFG_DEVICE_NULLDEV
 1

	)

46 #ifde‡
CFG_DEVICE_NULLDEV


47 
	$nuŒdev_putc
(c⁄° 
c
)

50 
	}
}

52 
	$nuŒdev_puts
(c⁄° *
s
)

55 
	}
}

57 
	$nuŒdev_öput
()

61 
	}
}

69 
	$drv_sy°em_öô
 ()

71 
devi˚_t
 
dev
;

73 
	`mem£t
 (&
dev
, 0,  (dev));

75 
	`°r˝y
 (
dev
.
«me
, "serial");

76 
dev
.
Êags
 = 
DEV_FLAGS_OUTPUT
 | 
DEV_FLAGS_INPUT
 | 
DEV_FLAGS_SYSTEM
;

77 #ifde‡
CONFIG_SERIAL_SOFTWARE_FIFO


78 
dev
.
putc
 = 
£rül_buf„ªd_putc
;

79 
dev
.
puts
 = 
£rül_buf„ªd_puts
;

80 
dev
.
gëc
 = 
£rül_buf„ªd_gëc
;

81 
dev
.
t°c
 = 
£rül_buf„ªd_t°c
;

83 
dev
.
putc
 = 
£rül_putc
;

84 
dev
.
puts
 = 
£rül_puts
;

85 
dev
.
gëc
 = 
£rül_gëc
;

86 
dev
.
t°c
 = 
£rül_t°c
;

89 
	`devi˚_ªgi°î
 (&
dev
);

91 #ifde‡
CFG_DEVICE_NULLDEV


92 
	`mem£t
 (&
dev
, 0,  (dev));

94 
	`°r˝y
 (
dev
.
«me
, "nulldev");

95 
dev
.
Êags
 = 
DEV_FLAGS_OUTPUT
 | 
DEV_FLAGS_INPUT
 | 
DEV_FLAGS_SYSTEM
;

96 
dev
.
putc
 = 
nuŒdev_putc
;

97 
dev
.
puts
 = 
nuŒdev_puts
;

98 
dev
.
gëc
 = 
nuŒdev_öput
;

99 
dev
.
t°c
 = 
nuŒdev_öput
;

101 
	`devi˚_ªgi°î
 (&
dev
);

103 
	}
}

110 
	$devi˚_ªgi°î
 (
devi˚_t
 * 
dev
)

112 
	`Li°In£πIãm
 (
devli°
, 
dev
, 
LIST_END
);

114 
	}
}

119 #ifdef 
CFG_DEVICE_DEREGISTER


120 
	$devi˚_dîegi°î
(*
dev«me
)

122 
i
,
l
,
dev_ödex
;

123 
devi˚_t
 *
dev
 = 
NULL
;

124 
ãmp_«mes
[3][8];

126 
dev_ödex
=-1;

127 
i
=1; i<=
	`Li°NumIãms
(
devli°
); i++) {

128 
dev
 = 
	`Li°GëPåToIãm
 (
devli°
, 
i
);

129 if(
	`°rcmp
(
dev
->
«me
,
dev«me
)==0) {

130 
dev_ödex
=
i
;

134 if(
dev_ödex
<0)

137 
l
=0 ;Ü< 
MAX_FILES
;Ü++) {

138 i‡(
°dio_devi˚s
[
l
] =
dev
) {

142 
	`mem˝y
 (&
ãmp_«mes
[
l
][0],

143 
°dio_devi˚s
[
l
]->
«me
,

144 (
°dio_devi˚s
[
l
]->
«me
));

146 
	`Li°RemoveIãm
(
devli°
,
NULL
,
dev_ödex
);

148 
i
=1; i<=
	`Li°NumIãms
(
devli°
); i++) {

149 
dev
 = 
	`Li°GëPåToIãm
 (
devli°
, 
i
);

150 
l
=0 ;Ü< 
MAX_FILES
;Ü++) {

151 if(
	`°rcmp
(
dev
->
«me
,
ãmp_«mes
[
l
])==0) {

152 
°dio_devi˚s
[
l
] = 
dev
;

157 
	}
}

160 
	$devi˚s_öô
 ()

162 #i‚de‡
CONFIG_ARM


163 
DECLARE_GLOBAL_DATA_PTR
;

165 
ul⁄g
 
ªloˇti⁄_off£t
 = 
gd
->
ªloc_off
;

166 
i
;

169 
i
 = 0; i < ( (
°dio_«mes
) /  (*)); ++i) {

170 
°dio_«mes
[
i
] = (*Ë(((
ul⁄g
) stdio_names[i]) +

171 
ªloˇti⁄_off£t
);

176 
devli°
 = 
	`Li°Cª©e
 ( (
devi˚_t
));

178 i‡(
devli°
 =
NULL
) {

179 
	`ïuts
 ("Cannot initializeÅheÜist of devices!\n");

182 #i‡
	`deföed
(
CONFIG_HARD_I2C
Ë|| deföed(
CONFIG_SOFT_I2C
)

183 
	`i2c_öô
 (
CFG_I2C_SPEED
, 
CFG_I2C_SLAVE
);

185 #ifde‡
CONFIG_LCD


186 
	`drv_lcd_öô
 ();

188 #i‡
	`deföed
(
CONFIG_VIDEO
Ë|| deföed(
CONFIG_CFB_CONSOLE
)

189 
	`drv_video_öô
 ();

191 #ifde‡
CONFIG_KEYBOARD


192 
	`drv_keybﬂrd_öô
 ();

194 #ifde‡
CONFIG_LOGBUFFER


195 
	`drv_logbuff_öô
 ();

197 
	`drv_sy°em_öô
 ();

198 #ifde‡
CONFIG_SERIAL_MULTI


199 
	`£rül_devi˚s_öô
 ();

201 #ifde‡
CONFIG_USB_TTY


202 
	`drv_usbây_öô
 ();

204 #ifde‡
CONFIG_NETCONSOLE


205 
	`drv_nc_öô
 ();

209 
	}
}

211 
	$devi˚s_d⁄e
 ()

213 
	`Li°Di•o£
 (
devli°
);

216 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/dlmalloc.c

226 #i‚de‡
__STD_C


227 #ifde‡
__STDC__


228 
	#__STD_C
 1

	)

230 #i‡
__˝lu•lus


231 
	#__STD_C
 1

	)

233 
	#__STD_C
 0

	)

238 #i‚de‡
Void_t


239 #i‡(
__STD_C
 || 
deföed
(
WIN32
))

240 
	#Void_t
 

	)

242 
	#Void_t
 

	)

246 #i‡
__STD_C


247 
	~<°ddef.h
>

249 
	~<sys/ty≥s.h
>

252 #ifde‡
__˝lu•lus


256 
	~<°dio.h
>

288 #ifde‡
DEBUG


289 
	~<as£π.h
>

291 
	#as£π
(
x
Ë(()0)

	)

304 #i‚de‡
INTERNAL_SIZE_T


305 
	#INTERNAL_SIZE_T
 
size_t


	)

325 #ifde‡
WIN32


326 
	#MORECORE
 
wsbrk


	)

327 
	#HAVE_MMAP
 0

	)

329 
	#LACKS_UNISTD_H


	)

330 
	#LACKS_SYS_PARAM_H


	)

340 
	#WIN32_LEAN_AND_MEAN


	)

341 
	~<wödows.h
>

358 
	#HAVE_MEMCPY


	)

360 #i‚de‡
USE_MEMCPY


361 #ifde‡
HAVE_MEMCPY


362 
	#USE_MEMCPY
 1

	)

364 
	#USE_MEMCPY
 0

	)

368 #i‡(
__STD_C
 || 
deföed
(
HAVE_MEMCPY
))

370 #i‡
__STD_C


371 * 
mem£t
(*, , 
size_t
);

372 * 
mem˝y
(*, c⁄° *, 
size_t
);

374 #ifde‡
WIN32


378 
Void_t
* 
mem£t
();

379 
Void_t
* 
mem˝y
();

384 #i‡
USE_MEMCPY


390 
	#MALLOC_ZERO
(
ch¨p
, 
nbyãs
) \

392 
INTERNAL_SIZE_T
 
mzsz
 = (
nbyãs
); \

393 if(
mzsz
 <= 9*(mzsz)) { \

394 
INTERNAL_SIZE_T
* 
mz
 = (INTERNAL_SIZE_T*Ë(
ch¨p
); \

395 if(
mzsz
 >5*(mzsz)Ë{ *
mz
++ = 0; \

396 *
mz
++ = 0; \

397 if(
mzsz
 >7*(mzsz)Ë{ *
mz
++ = 0; \

398 *
mz
++ = 0; \

399 if(
mzsz
 >9*(mzsz)Ë{ *
mz
++ = 0; \

400 *
mz
++ = 0; }}} \

401 *
mz
++ = 0; \

402 *
mz
++ = 0; \

403 *
mz
 = 0; \

404 } 
	`mem£t
((
ch¨p
), 0, 
mzsz
); \

405 } 0)

	)

407 
	#MALLOC_COPY
(
de°
,
§c
,
nbyãs
) \

409 
INTERNAL_SIZE_T
 
mcsz
 = (
nbyãs
); \

410 if(
mcsz
 <= 9*(mcsz)) { \

411 
INTERNAL_SIZE_T
* 
mc§c
 = (INTERNAL_SIZE_T*Ë(
§c
); \

412 
INTERNAL_SIZE_T
* 
mcd°
 = (INTERNAL_SIZE_T*Ë(
de°
); \

413 if(
mcsz
 >5*(mcsz)Ë{ *
mcd°
++ = *
mc§c
++; \

414 *
mcd°
++ = *
mc§c
++; \

415 if(
mcsz
 >7*(mcsz)Ë{ *
mcd°
++ = *
mc§c
++; \

416 *
mcd°
++ = *
mc§c
++; \

417 if(
mcsz
 >9*(mcsz)Ë{ *
mcd°
++ = *
mc§c
++; \

418 *
mcd°
++ = *
mc§c
++; }}} \

419 *
mcd°
++ = *
mc§c
++; \

420 *
mcd°
++ = *
mc§c
++; \

421 *
mcd°
 = *
mc§c
 ; \

422 } 
	`mem˝y
(
de°
, 
§c
, 
mcsz
); \

423 } 0)

	)

429 
	#MALLOC_ZERO
(
ch¨p
, 
nbyãs
) \

431 
INTERNAL_SIZE_T
* 
mzp
 = (INTERNAL_SIZE_T*)(
ch¨p
); \

432 
m˘mp
 = (
nbyãs
)/(
INTERNAL_SIZE_T
), 
m˙
; \

433 i‡(
m˘mp
 < 8Ë
m˙
 = 0; { mcn = (mctmp-1)/8; mctmp %= 8; } \

434 
m˘mp
) { \

435 0: ;;Ë{ *
mzp
++ = 0; \

436 7: *
mzp
++ = 0; \

437 6: *
mzp
++ = 0; \

438 5: *
mzp
++ = 0; \

439 4: *
mzp
++ = 0; \

440 3: *
mzp
++ = 0; \

441 2: *
mzp
++ = 0; \

442 1: *
mzp
++ = 0; if(
m˙
 <= 0) ; mcn--; } \

444 } 0)

	)

446 
	#MALLOC_COPY
(
de°
,
§c
,
nbyãs
) \

448 
INTERNAL_SIZE_T
* 
mc§c
 = (INTERNAL_SIZE_T*Ë
§c
; \

449 
INTERNAL_SIZE_T
* 
mcd°
 = (INTERNAL_SIZE_T*Ë
de°
; \

450 
m˘mp
 = (
nbyãs
)/(
INTERNAL_SIZE_T
), 
m˙
; \

451 i‡(
m˘mp
 < 8Ë
m˙
 = 0; { mcn = (mctmp-1)/8; mctmp %= 8; } \

452 
m˘mp
) { \

453 0: ;;Ë{ *
mcd°
++ = *
mc§c
++; \

454 7: *
mcd°
++ = *
mc§c
++; \

455 6: *
mcd°
++ = *
mc§c
++; \

456 5: *
mcd°
++ = *
mc§c
++; \

457 4: *
mcd°
++ = *
mc§c
++; \

458 3: *
mcd°
++ = *
mc§c
++; \

459 2: *
mcd°
++ = *
mc§c
++; \

460 1: *
mcd°
++ = *
mc§c
++; if(
m˙
 <= 0) ; mcn--; } \

462 } 0)

	)

473 #i‚de‡
HAVE_MMAP


474 
	#HAVE_MMAP
 1

	)

483 #i‚de‡
HAVE_MREMAP


484 #ifde‡
INTERNAL_LINUX_C_LIB


485 
	#HAVE_MREMAP
 1

	)

487 
	#HAVE_MREMAP
 0

	)

491 #i‡
HAVE_MMAP


493 
	~<uni°d.h
>

494 
	~<f˙é.h
>

495 
	~<sys/mm™.h
>

497 #i‡!
deföed
(
MAP_ANONYMOUS
Ë&& deföed(
MAP_ANON
)

498 
	#MAP_ANONYMOUS
 
MAP_ANON


	)

511 #i‚de‡
LACKS_UNISTD_H


512 
	~<uni°d.h
>

515 #i‚de‡
mÆloc_gë∑gesize


516 #ifde‡
_SC_PAGESIZE


517 #i‚de‡
_SC_PAGE_SIZE


518 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

521 #ifde‡
_SC_PAGE_SIZE


522 
	#mÆloc_gë∑gesize
 
	`sysc⁄f
(
_SC_PAGE_SIZE
)

	)

524 #i‡
deföed
(
BSD
Ë|| deföed(
DGUX
Ë|| deföed(
HAVE_GETPAGESIZE
)

525 
size_t
 
gë∑gesize
();

526 
	#mÆloc_gë∑gesize
 
	`gë∑gesize
()

	)

528 #ifde‡
WIN32


529 
	#mÆloc_gë∑gesize
 (4096Ë

	)

531 #i‚de‡
LACKS_SYS_PARAM_H


532 
	~<sys/∑øm.h
>

534 #ifde‡
EXEC_PAGESIZE


535 
	#mÆloc_gë∑gesize
 
EXEC_PAGESIZE


	)

537 #ifde‡
NBPG


538 #i‚de‡
CLSIZE


539 
	#mÆloc_gë∑gesize
 
NBPG


	)

541 
	#mÆloc_gë∑gesize
 (
NBPG
 * 
CLSIZE
)

	)

544 #ifde‡
NBPC


545 
	#mÆloc_gë∑gesize
 
NBPC


	)

547 #ifde‡
PAGESIZE


548 
	#mÆloc_gë∑gesize
 
PAGESIZE


	)

550 
	#mÆloc_gë∑gesize
 (4096Ë

	)

588 #i‡
HAVE_USR_INCLUDE_MALLOC_H


589 
	~"/u§/ö˛ude/mÆloc.h
"

594 
	smÆlöfo
 {

595 
	g¨ía
;

596 
	g‹dblks
;

597 
	gsmblks
;

598 
	ghblks
;

599 
	ghblkhd
;

600 
	gusmblks
;

601 
	gfsmblks
;

602 
	gu‹dblks
;

603 
	gf‹dblks
;

604 
	gkìpco°
;

609 
	#M_MXFAST
 1

	)

610 
	#M_NLBLKS
 2

	)

611 
	#M_GRAIN
 3

	)

612 
	#M_KEEP
 4

	)

618 
	#M_TRIM_THRESHOLD
 -1

	)

619 
	#M_TOP_PAD
 -2

	)

620 
	#M_MMAP_THRESHOLD
 -3

	)

621 
	#M_MMAP_MAX
 -4

	)

624 #i‚de‡
DEFAULT_TRIM_THRESHOLD


625 
	#DEFAULT_TRIM_THRESHOLD
 (128 * 1024)

	)

678 #i‚de‡
DEFAULT_TOP_PAD


679 
	#DEFAULT_TOP_PAD
 (0)

	)

711 #i‚de‡
DEFAULT_MMAP_THRESHOLD


712 
	#DEFAULT_MMAP_THRESHOLD
 (128 * 1024)

	)

754 #i‚de‡
DEFAULT_MMAP_MAX


755 #i‡
HAVE_MMAP


756 
	#DEFAULT_MMAP_MAX
 (64)

	)

758 
	#DEFAULT_MMAP_MAX
 (0)

	)

808 #ifde‡
INTERNAL_LINUX_C_LIB


810 #i‡
__STD_C


812 
Void_t
 * 
__deÁu…_m‹ec‹e_öô
 (
±rdiff_t
);

813 
	gVoid_t
 *(*
	g__m‹ec‹e
)(
	g±rdiff_t
Ë
__deÁu…_m‹ec‹e_öô
;

817 
Void_t
 * 
__deÁu…_m‹ec‹e_öô
 ();

818 
	gVoid_t
 *(*
	g__m‹ec‹e
)(Ë
__deÁu…_m‹ec‹e_öô
;

822 
	#MORECORE
 (*
__m‹ec‹e
)

	)

823 
	#MORECORE_FAILURE
 0

	)

824 
	#MORECORE_CLEARS
 1

	)

828 #i‡
__STD_C


829 
Void_t
* 
sbrk
(
±rdiff_t
);

831 
Void_t
* 
sbrk
();

834 #i‚de‡
MORECORE


835 
	#MORECORE
 
sbrk


	)

838 #i‚de‡
MORECORE_FAILURE


839 
	#MORECORE_FAILURE
 -1

	)

842 #i‚de‡
MORECORE_CLEARS


843 
	#MORECORE_CLEARS
 1

	)

848 #i‡
deföed
(
INTERNAL_LINUX_C_LIB
Ë&& deföed(
__ELF__
)

850 
	#cALLOc
 
__libc_ˇŒoc


	)

851 
	#fREe
 
__libc_‰ì


	)

852 
	#mALLOc
 
__libc_mÆloc


	)

853 
	#mEMALIGn
 
__libc_memÆign


	)

854 
	#rEALLOc
 
__libc_ªÆloc


	)

855 
	#vALLOc
 
__libc_vÆloc


	)

856 
	#pvALLOc
 
__libc_pvÆloc


	)

857 
	#mALLINFo
 
__libc_mÆlöfo


	)

858 
	#mALLOPt
 
__libc_mÆl›t


	)

860 #¥agm®
wók
 
ˇŒoc
 = 
__libc_ˇŒoc


861 #¥agm®
wók
 
‰ì
 = 
__libc_‰ì


862 #¥agm®
wók
 
c‰ì
 = 
__libc_‰ì


863 #¥agm®
wók
 
mÆloc
 = 
__libc_mÆloc


864 #¥agm®
wók
 
memÆign
 = 
__libc_memÆign


865 #¥agm®
wók
 
ªÆloc
 = 
__libc_ªÆloc


866 #¥agm®
wók
 
vÆloc
 = 
__libc_vÆloc


867 #¥agm®
wók
 
pvÆloc
 = 
__libc_pvÆloc


868 #¥agm®
wók
 
mÆlöfo
 = 
__libc_mÆlöfo


869 #¥agm®
wók
 
mÆl›t
 = 
__libc_mÆl›t


873 #ifde‡
USE_DL_PREFIX


874 
	#cALLOc
 
dlˇŒoc


	)

875 
	#fREe
 
dl‰ì


	)

876 
	#mALLOc
 
dlmÆloc


	)

877 
	#mEMALIGn
 
dlmemÆign


	)

878 
	#rEALLOc
 
dÃóŒoc


	)

879 
	#vALLOc
 
dlvÆloc


	)

880 
	#pvALLOc
 
dÕvÆloc


	)

881 
	#mALLINFo
 
dlmÆlöfo


	)

882 
	#mALLOPt
 
dlmÆl›t


	)

884 
	#cALLOc
 
ˇŒoc


	)

885 
	#fREe
 
‰ì


	)

886 
	#mALLOc
 
mÆloc


	)

887 
	#mEMALIGn
 
memÆign


	)

888 
	#rEALLOc
 
ªÆloc


	)

889 
	#vALLOc
 
vÆloc


	)

890 
	#pvALLOc
 
pvÆloc


	)

891 
	#mALLINFo
 
mÆlöfo


	)

892 
	#mALLOPt
 
mÆl›t


	)

899 #i‡
__STD_C


901 
Void_t
* 
mALLOc
(
size_t
);

902 
fREe
(
Void_t
*);

903 
Void_t
* 
rEALLOc
(Void_t*, 
size_t
);

904 
Void_t
* 
mEMALIGn
(
size_t
, size_t);

905 
Void_t
* 
vALLOc
(
size_t
);

906 
Void_t
* 
pvALLOc
(
size_t
);

907 
Void_t
* 
cALLOc
(
size_t
, size_t);

908 
c‰ì
(
Void_t
*);

909 
mÆloc_åim
(
size_t
);

910 
size_t
 
mÆloc_ußbÀ_size
(
Void_t
*);

911 
mÆloc_°©s
();

912 
mALLOPt
(, );

913 
mÆlöfo
 
mALLINFo
();

915 
Void_t
* 
mALLOc
();

916 
fREe
();

917 
Void_t
* 
rEALLOc
();

918 
Void_t
* 
mEMALIGn
();

919 
Void_t
* 
vALLOc
();

920 
Void_t
* 
pvALLOc
();

921 
Void_t
* 
cALLOc
();

922 
c‰ì
();

923 
mÆloc_åim
();

924 
size_t
 
mÆloc_ußbÀ_size
();

925 
mÆloc_°©s
();

926 
mALLOPt
();

927 
mÆlöfo
 
mALLINFo
();

931 #ifde‡
__˝lu•lus


938 
	~<mÆloc.h
>

940 #i‡
__STD_C


941 
mÆloc_upd©e_mÆlöfo
 ();

942 
mÆloc_°©s
 ();

944 
mÆloc_upd©e_mÆlöfo
 ();

945 
mÆloc_°©s
();

950 
	~<comm⁄.h
>

960 #ifde‡
WIN32


962 
	#AlignPage
(
add
Ë((◊ddË+ (
mÆloc_gë∑gesize
-1)) & \

963 ~(
mÆloc_gë∑gesize
-1))

	)

964 
	#AlignPage64K
(
add
Ë((◊ddË+ (0x10000 - 1)Ë& ~(0x10000 - 1))

	)

967 
	#RESERVED_SIZE
 (1024*1024*64)

	)

968 
	#NEXT_SIZE
 (2048*1024)

	)

969 
	#TOP_MEMORY
 (()2*1024*1024*1024)

	)

971 
	gGmLi°EÀmít
;

972 
GmLi°EÀmít
 
	tGmLi°EÀmít
;

974 
	sGmLi°EÀmít


976 
GmLi°EÀmít
* 
	m√xt
;

977 * 
	mba£
;

980 
GmLi°EÀmít
* 
	ghód
 = 0;

981 
	ggNextAddªss
 = 0;

982 
	ggAddªssBa£
 = 0;

983 
	ggAŒoˇãdSize
 = 0;

986 
GmLi°EÀmít
* 
	$makeGmLi°EÀmít
 (* 
bas
)

988 
GmLi°EÀmít
* 
this
;

989 
this
 = (
GmLi°EÀmít
*)(*)
	`LoˇlAŒoc
 (0,  (GmListElement));

990 
	`as£π
 (
this
);

991 i‡(
this
)

993 
this
->
ba£
 = 
bas
;

994 
this
->
√xt
 = 
hód
;

995 
hód
 = 
this
;

997  
this
;

998 
	}
}

1000 
	$g˛ónup
 ()

1002 
BOOL
 
rvÆ
;

1003 
	`as£π
 ( (
hód
 =
NULL
Ë|| (hód->
ba£
 =(*)
gAddªssBa£
));

1004 i‡(
gAddªssBa£
 && (
gNextAddªss
 - gAddressBase))

1006 
rvÆ
 = 
	`VútuÆFªe
 ((*)
gAddªssBa£
,

1007 
gNextAddªss
 - 
gAddªssBa£
,

1008 
MEM_DECOMMIT
);

1009 
	`as£π
 (
rvÆ
);

1011 
hód
)

1013 
GmLi°EÀmít
* 
√xt
 = 
hód
->next;

1014 
rvÆ
 = 
	`VútuÆFªe
 (
hód
->
ba£
, 0, 
MEM_RELEASE
);

1015 
	`as£π
 (
rvÆ
);

1016 
	`LoˇlFªe
 (
hód
);

1017 
hód
 = 
√xt
;

1019 
	}
}

1022 * 
	$födRegi⁄
 (* 
°¨t_addªss
, 
size
)

1024 
MEMORY_BASIC_INFORMATION
 
öfo
;

1025 i‡(
size
 >
TOP_MEMORY
Ë 
NULL
;

1027 ()
°¨t_addªss
 + 
size
 < 
TOP_MEMORY
)

1029 
	`VútuÆQuîy
 (
°¨t_addªss
, &
öfo
,  (info));

1030 i‡((
öfo
.
Sèã
 =
MEM_FREE
Ë&& (öfo.
Regi⁄Size
 >
size
))

1031  
°¨t_addªss
;

1039 
°¨t_addªss
 = (*)
öfo
.
Ba£Addªss
 + info.
Regi⁄Size
;

1053 
°¨t_addªss
 =

1054 (*Ë
	`AlignPage64K
((Ë
°¨t_addªss
);

1057  
NULL
;

1059 
	}
}

1062 * 
	$wsbrk
 (
size
)

1064 * 
tmp
;

1065 i‡(
size
 > 0)

1067 i‡(
gAddªssBa£
 == 0)

1069 
gAŒoˇãdSize
 = 
	`max
 (
RESERVED_SIZE
, 
	`AlignPage
 (
size
));

1070 
gNextAddªss
 = 
gAddªssBa£
 =

1071 ()
	`VútuÆAŒoc
 (
NULL
, 
gAŒoˇãdSize
,

1072 
MEM_RESERVE
, 
PAGE_NOACCESS
);

1073 } i‡(
	`AlignPage
 (
gNextAddªss
 + 
size
Ë> (
gAddªssBa£
 +

1074 
gAŒoˇãdSize
))

1076 
√w_size
 = 
	`max
 (
NEXT_SIZE
, 
	`AlignPage
 (
size
));

1077 * 
√w_addªss
 = (*)(
gAddªssBa£
+
gAŒoˇãdSize
);

1080 
√w_addªss
 = 
	`födRegi⁄
 (√w_addªss, 
√w_size
);

1082 i‡(
√w_addªss
 == 0)

1085 
gAddªssBa£
 = 
gNextAddªss
 =

1086 ()
	`VútuÆAŒoc
 (
√w_addªss
, 
√w_size
,

1087 
MEM_RESERVE
, 
PAGE_NOACCESS
);

1092 
gAddªssBa£
 == 0);

1094 
	`as£π
 (
√w_addªss
 =(*)
gAddªssBa£
);

1096 
gAŒoˇãdSize
 = 
√w_size
;

1098 i‡(!
	`makeGmLi°EÀmít
 ((*)
gAddªssBa£
))

1101 i‡((
size
 + 
gNextAddªss
Ë> 
	`AlignPage
 (gNextAddress))

1103 * 
ªs
;

1104 
ªs
 = 
	`VútuÆAŒoc
 ((*)
	`AlignPage
 (
gNextAddªss
),

1105 (
size
 + 
gNextAddªss
 -

1106 
	`AlignPage
 (
gNextAddªss
)),

1107 
MEM_COMMIT
, 
PAGE_READWRITE
);

1108 i‡(
ªs
 == 0)

1111 
tmp
 = (*)
gNextAddªss
;

1112 
gNextAddªss
 = ()
tmp
 + 
size
;

1113  
tmp
;

1115 i‡(
size
 < 0)

1117 
Æig√dGﬂl
 = 
	`AlignPage
 (
gNextAddªss
 + 
size
);

1119 i‡(
Æig√dGﬂl
 >
gAddªssBa£
)

1121 
	`VútuÆFªe
 ((*)
Æig√dGﬂl
, 
gNextAddªss
 -álignedGoal,

1122 
MEM_DECOMMIT
);

1123 
gNextAddªss
 = gNextAddªs†+ 
size
;

1124  (*)
gNextAddªss
;

1128 
	`VútuÆFªe
 ((*)
gAddªssBa£
, 
gNextAddªss
 - gAddressBase,

1129 
MEM_DECOMMIT
);

1130 
gNextAddªss
 = 
gAddªssBa£
;

1136  (*)
gNextAddªss
;

1138 
	}
}

1149 
	smÆloc_chunk


1151 
INTERNAL_SIZE_T
 
	m¥ev_size
;

1152 
INTERNAL_SIZE_T
 
	msize
;

1153 
mÆloc_chunk
* 
	mfd
;

1154 
mÆloc_chunk
* 
	mbk
;

1157 
mÆloc_chunk
* 
	tmchunk±r
;

1285 
	#SIZE_SZ
 ((
INTERNAL_SIZE_T
))

	)

1286 
	#MALLOC_ALIGNMENT
 (
SIZE_SZ
 + SIZE_SZ)

	)

1287 
	#MALLOC_ALIGN_MASK
 (
MALLOC_ALIGNMENT
 - 1)

	)

1288 
	#MINSIZE
 ((
mÆloc_chunk
))

	)

1292 
	#chunk2mem
(
p
Ë((
Void_t
*)((*)’Ë+ 2*
SIZE_SZ
))

	)

1293 
	#mem2chunk
(
mem
Ë((
mchunk±r
)((*)(memË- 2*
SIZE_SZ
))

	)

1297 
	#ªque°2size
(
ªq
) \

1298 ((()((
ªq
Ë+ (
SIZE_SZ
 + 
MALLOC_ALIGN_MASK
)) < \

1299 ()(
MINSIZE
 + 
MALLOC_ALIGN_MASK
)) ? MINSIZE : \

1300 (((
ªq
Ë+ (
SIZE_SZ
 + 
MALLOC_ALIGN_MASK
)Ë& ~(MALLOC_ALIGN_MASK)))

	)

1304 
	#Æig√d_OK
(
m
Ë((()((m)Ë& (
MALLOC_ALIGN_MASK
)Ë=0)

	)

1316 
	#PREV_INUSE
 0x1

	)

1320 
	#IS_MMAPPED
 0x2

	)

1324 
	#SIZE_BITS
 (
PREV_INUSE
|
IS_MMAPPED
)

	)

1329 
	#√xt_chunk
(
p
Ë((
mchunk±r
)–((*)’)Ë+ (’)->
size
 & ~
PREV_INUSE
Ë))

	)

1333 
	#¥ev_chunk
(
p
)\

1334 ((
mchunk±r
)–((*)(
p
)Ë- (’)->
¥ev_size
Ë))

	)

1339 
	#chunk_©_off£t
(
p
, 
s
Ë((
mchunk±r
)(((*)’)Ë+ (s)))

	)

1350 
	#öu£
(
p
)\

1351 ((((
mchunk±r
)(((*)(
p
))+(’)->
size
 & ~
PREV_INUSE
)))->sizeË& PREV_INUSE)

	)

1355 
	#¥ev_öu£
(
p
Ë(’)->
size
 & 
PREV_INUSE
)

	)

1359 
	#chunk_is_mm≠≥d
(
p
Ë(’)->
size
 & 
IS_MMAPPED
)

	)

1363 
	#£t_öu£
(
p
)\

1364 ((
mchunk±r
)(((*)(
p
)Ë+ (’)->
size
 & ~
PREV_INUSE
)))->sizê|
	)
PREV_INUSE

1366 
	#˛ór_öu£
(
p
)\

1367 ((
mchunk±r
)(((*)(
p
)Ë+ (’)->
size
 & ~
PREV_INUSE
)))->sizê&~(PREV_INUSE)

	)

1371 
	#öu£_bô_©_off£t
(
p
, 
s
)\

1372 (((
mchunk±r
)(((*)(
p
)Ë+ (
s
)))->
size
 & 
PREV_INUSE
)

	)

1374 
	#£t_öu£_bô_©_off£t
(
p
, 
s
)\

1375 (((
mchunk±r
)(((*)(
p
)Ë+ (
s
)))->
size
 |
PREV_INUSE
)

	)

1377 
	#˛ór_öu£_bô_©_off£t
(
p
, 
s
)\

1378 (((
mchunk±r
)(((*)(
p
)Ë+ (
s
)))->
size
 &~(
PREV_INUSE
))

	)

1389 
	#chunksize
(
p
Ë(’)->
size
 & ~(
SIZE_BITS
))

	)

1393 
	#£t_hód_size
(
p
, 
s
Ë(’)->
size
 = ((’)->sizê& 
PREV_INUSE
Ë| (s)))

	)

1397 
	#£t_hód
(
p
, 
s
Ë(’)->
size
 = (s))

	)

1401 
	#£t_foŸ
(
p
, 
s
Ë(((
mchunk±r
)((*)’Ë+ (s)))->
¥ev_size
 = (s))

	)

1441 
	#NAV
 128

	)

1443 
mÆloc_chunk
* 
	tmbö±r
;

1447 
	#bö_©
(
i
Ë((
mbö±r
)((*)&(
av_
[2*(iË+ 2]Ë- 2*
SIZE_SZ
))

	)

1448 
	#√xt_bö
(
b
Ë((
mbö±r
)((*)(bË+ 2 * (mbö±r)))

	)

1449 
	#¥ev_bö
(
b
Ë((
mbö±r
)((*)(bË- 2 * (mbö±r)))

	)

1457 
	#t›
 (
	`bö_©
(0)->
fd
Ë

	)

1458 
	#œ°_ªmaödî
 (
	`bö_©
(1)Ë

	)

1468 
	#öôül_t›
 ((
mchunk±r
)(
	`bö_©
(0)))

	)

1472 
	#IAV
(
i
Ë
	`bö_©
(i), bö_©(i)

	)

1474 
mbö±r
 
	gav_
[
NAV
 * 2 + 2] = {

1476 
IAV
(0), IAV(1), IAV(2), IAV(3), IAV(4), IAV(5), IAV(6), IAV(7),

1477 
IAV
(8), IAV(9), IAV(10), IAV(11), IAV(12), IAV(13), IAV(14), IAV(15),

1478 
IAV
(16), IAV(17), IAV(18), IAV(19), IAV(20), IAV(21), IAV(22), IAV(23),

1479 
IAV
(24), IAV(25), IAV(26), IAV(27), IAV(28), IAV(29), IAV(30), IAV(31),

1480 
IAV
(32), IAV(33), IAV(34), IAV(35), IAV(36), IAV(37), IAV(38), IAV(39),

1481 
IAV
(40), IAV(41), IAV(42), IAV(43), IAV(44), IAV(45), IAV(46), IAV(47),

1482 
IAV
(48), IAV(49), IAV(50), IAV(51), IAV(52), IAV(53), IAV(54), IAV(55),

1483 
IAV
(56), IAV(57), IAV(58), IAV(59), IAV(60), IAV(61), IAV(62), IAV(63),

1484 
IAV
(64), IAV(65), IAV(66), IAV(67), IAV(68), IAV(69), IAV(70), IAV(71),

1485 
IAV
(72), IAV(73), IAV(74), IAV(75), IAV(76), IAV(77), IAV(78), IAV(79),

1486 
IAV
(80), IAV(81), IAV(82), IAV(83), IAV(84), IAV(85), IAV(86), IAV(87),

1487 
IAV
(88), IAV(89), IAV(90), IAV(91), IAV(92), IAV(93), IAV(94), IAV(95),

1488 
IAV
(96), IAV(97), IAV(98), IAV(99), IAV(100), IAV(101), IAV(102), IAV(103),

1489 
IAV
(104), IAV(105), IAV(106), IAV(107), IAV(108), IAV(109), IAV(110), IAV(111),

1490 
IAV
(112), IAV(113), IAV(114), IAV(115), IAV(116), IAV(117), IAV(118), IAV(119),

1491 
IAV
(120), IAV(121), IAV(122), IAV(123), IAV(124), IAV(125), IAV(126), IAV(127)

1494 
	$mÆloc_bö_ªloc
 ()

1496 
DECLARE_GLOBAL_DATA_PTR
;

1498 *
p
 = (*)(&
av_
[2]);

1499 
i
;

1500 
i
=2; i<((
av_
)/(
mbö±r
)); ++i) {

1501 *
p
++ +
gd
->
ªloc_off
;

1503 
	}
}

1508 
	#fú°
(
b
Ë((b)->
fd
)

	)

1509 
	#œ°
(
b
Ë((b)->
bk
)

	)

1515 
	#bö_ödex
(
sz
) \

1516 ((((()(
sz
)) >> 9) == 0) ? ((()(sz)) >> 3): \

1517 (((()(
sz
)) >> 9) <= 4) ? 56 + ((()(sz)) >> 6): \

1518 (((()(
sz
)) >> 9) <= 20) ? 91 + ((()(sz)) >> 9): \

1519 (((()(
sz
)) >> 9) <= 84) ? 110 + ((()(sz)) >> 12): \

1520 (((()(
sz
)) >> 9) <= 340) ? 119 + ((()(sz)) >> 15): \

1521 (((()(
sz
)) >> 9) <= 1364) ? 124 + ((()(sz)) >> 18): \

1522 126)

	)

1528 
	#MAX_SMALLBIN
 63

	)

1529 
	#MAX_SMALLBIN_SIZE
 512

	)

1530 
	#SMALLBIN_WIDTH
 8

	)

1532 
	#smÆlbö_ödex
(
sz
Ë((()(sz)Ë>> 3)

	)

1538 
	#is_smÆl_ªque°
(
nb
Ë“b < 
MAX_SMALLBIN_SIZE
 - 
SMALLBIN_WIDTH
)

	)

1552 
	#BINBLOCKWIDTH
 4

	)

1554 
	#böblocks
 (
	`bö_©
(0)->
size
Ë

	)

1558 
	#idx2böblock
(
ix
Ë(()1 << (ix / 
BINBLOCKWIDTH
))

	)

1559 
	#m¨k_böblock
(
ii
Ë(
böblocks
 |
	`idx2böblock
(ii))

	)

1560 
	#˛ór_böblock
(
ii
Ë(
böblocks
 &~(
	`idx2böblock
(ii)))

	)

1570 
	gåim_thªshﬁd
 = 
DEFAULT_TRIM_THRESHOLD
;

1571 
	gt›_∑d
 = 
DEFAULT_TOP_PAD
;

1572 
	gn_mm≠s_max
 = 
DEFAULT_MMAP_MAX
;

1573 
	gmm≠_thªshﬁd
 = 
DEFAULT_MMAP_THRESHOLD
;

1576 * 
	gsbrk_ba£
 = (*)(-1);

1579 
	gmax_sbrked_mem
 = 0;

1582 
	gmax_tŸÆ_mem
 = 0;

1585 
mÆlöfo
 
	gcuºít_mÆlöfo
 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

1588 
	#sbrked_mem
 (
cuºít_mÆlöfo
.
¨ía
)

	)

1593 
	gn_mm≠s
 = 0;

1595 
	gmm≠≥d_mem
 = 0;

1596 #i‡
HAVE_MMAP


1597 
	gmax_n_mm≠s
 = 0;

1598 
	gmax_mm≠≥d_mem
 = 0;

1607 #ifde‡
DEBUG


1618 #i‡
__STD_C


1619 
	$do_check_chunk
(
mchunk±r
 
p
)

1621 
	$do_check_chunk
(
p
Ë
mchunk±r
Ö;

1625 
INTERNAL_SIZE_T
 
sz
 = 
p
->
size
 & ~
PREV_INUSE
;

1629 
	`as£π
(!
	`chunk_is_mm≠≥d
(
p
));

1632 
	`as£π
((*)
p
 >
sbrk_ba£
);

1633 i‡(
p
 !
t›
)

1634 
	`as£π
((*)
p
 + 
sz
 <(*)
t›
);

1636 
	`as£π
((*)
p
 + 
sz
 <
sbrk_ba£
 + 
sbrked_mem
);

1638 
	}
}

1641 #i‡
__STD_C


1642 
	$do_check_‰ì_chunk
(
mchunk±r
 
p
)

1644 
	$do_check_‰ì_chunk
(
p
Ë
mchunk±r
Ö;

1647 
INTERNAL_SIZE_T
 
sz
 = 
p
->
size
 & ~
PREV_INUSE
;

1649 
mchunk±r
 
√xt
 = 
	`chunk_©_off£t
(
p
, 
sz
);

1652 
	`do_check_chunk
(
p
);

1655 
	`as£π
(!
	`öu£
(
p
));

1658 i‡(()
sz
 >()
MINSIZE
)

1660 
	`as£π
((
sz
 & 
MALLOC_ALIGN_MASK
) == 0);

1661 
	`as£π
(
	`Æig√d_OK
(
	`chunk2mem
(
p
)));

1663 
	`as£π
(
√xt
->
¥ev_size
 =
sz
);

1665 
	`as£π
(
	`¥ev_öu£
(
p
));

1666 
	`as£π
 (
√xt
 =
t›
 || 
	`öu£
(next));

1669 
	`as£π
(
p
->
fd
->
bk
 ==Ö);

1670 
	`as£π
(
p
->
bk
->
fd
 ==Ö);

1673 
	`as£π
(
sz
 =
SIZE_SZ
);

1674 
	}
}

1676 #i‡
__STD_C


1677 
	$do_check_öu£_chunk
(
mchunk±r
 
p
)

1679 
	$do_check_öu£_chunk
(
p
Ë
mchunk±r
Ö;

1682 
mchunk±r
 
√xt
 = 
	`√xt_chunk
(
p
);

1683 
	`do_check_chunk
(
p
);

1686 
	`as£π
(
	`öu£
(
p
));

1692 i‡(!
	`¥ev_öu£
(
p
))

1694 
mchunk±r
 
¥v
 = 
	`¥ev_chunk
(
p
);

1695 
	`as£π
(
	`√xt_chunk
(
¥v
Ë=
p
);

1696 
	`do_check_‰ì_chunk
(
¥v
);

1698 i‡(
√xt
 =
t›
)

1700 
	`as£π
(
	`¥ev_öu£
(
√xt
));

1701 
	`as£π
(
	`chunksize
(
√xt
Ë>
MINSIZE
);

1703 i‡(!
	`öu£
(
√xt
))

1704 
	`do_check_‰ì_chunk
(
√xt
);

1706 
	}
}

1708 #i‡
__STD_C


1709 
	$do_check_mÆlo˚d_chunk
(
mchunk±r
 
p
, 
INTERNAL_SIZE_T
 
s
)

1711 
	$do_check_mÆlo˚d_chunk
(
p
, 
s
Ë
mchunk±r
Ö; 
INTERNAL_SIZE_T
 s;

1715 
INTERNAL_SIZE_T
 
sz
 = 
p
->
size
 & ~
PREV_INUSE
;

1716 
room
 = 
sz
 - 
s
;

1719 
	`do_check_öu£_chunk
(
p
);

1722 
	`as£π
(()
sz
 >()
MINSIZE
);

1723 
	`as£π
((
sz
 & 
MALLOC_ALIGN_MASK
) == 0);

1724 
	`as£π
(
room
 >= 0);

1725 
	`as£π
(
room
 < ()
MINSIZE
);

1728 
	`as£π
(
	`Æig√d_OK
(
	`chunk2mem
(
p
)));

1732 
	`as£π
(
	`¥ev_öu£
(
p
));

1734 
	}
}

1737 
	#check_‰ì_chunk
(
P
Ë
	`do_check_‰ì_chunk
(P)

	)

1738 
	#check_öu£_chunk
(
P
Ë
	`do_check_öu£_chunk
(P)

	)

1739 
	#check_chunk
(
P
Ë
	`do_check_chunk
(P)

	)

1740 
	#check_mÆlo˚d_chunk
(
P
,
N
Ë
	`do_check_mÆlo˚d_chunk
(P,N)

	)

1742 
	#check_‰ì_chunk
(
P
)

	)

1743 
	#check_öu£_chunk
(
P
)

	)

1744 
	#check_chunk
(
P
)

	)

1745 
	#check_mÆlo˚d_chunk
(
P
,
N
)

	)

1766 
	#‰⁄éök
(
P
, 
S
, 
IDX
, 
BK
, 
FD
) \

1768 i‡(
S
 < 
MAX_SMALLBIN_SIZE
) \

1770 
IDX
 = 
	`smÆlbö_ödex
(
S
); \

1771 
	`m¨k_böblock
(
IDX
); \

1772 
BK
 = 
	`bö_©
(
IDX
); \

1773 
FD
 = 
BK
->
fd
; \

1774 
P
->
bk
 = 
BK
; \

1775 
P
->
fd
 = 
FD
; \

1776 
FD
->
bk
 = 
BK
->
fd
 = 
P
; \

1780 
IDX
 = 
	`bö_ödex
(
S
); \

1781 
BK
 = 
	`bö_©
(
IDX
); \

1782 
FD
 = 
BK
->
fd
; \

1783 i‡(
FD
 =
BK
Ë
	`m¨k_böblock
(
IDX
); \

1786 
FD
 !
BK
 && 
S
 < 
	`chunksize
(FD)ËFD = FD->
fd
; \

1787 
BK
 = 
FD
->
bk
; \

1789 
P
->
bk
 = 
BK
; \

1790 
P
->
fd
 = 
FD
; \

1791 
FD
->
bk
 = 
BK
->
fd
 = 
P
; \

1793 }

	)

1798 
	#u∆ök
(
P
, 
BK
, 
FD
) \

1800 
BK
 = 
P
->
bk
; \

1801 
FD
 = 
P
->
fd
; \

1802 
FD
->
bk
 = 
BK
; \

1803 
BK
->
fd
 = 
FD
; \

1805 

	)

1808 
	#lök_œ°_ªmaödî
(
P
) \

1810 
œ°_ªmaödî
->
fd
 =Üa°_ªmaödî->
bk
 = 
P
; \

1811 
P
->
fd
 = P->
bk
 = 
œ°_ªmaödî
; \

1812 }

	)

1816 
	#˛ór_œ°_ªmaödî
 \

1817 (
œ°_ªmaödî
->
fd
 =Üa°_ªmaödî->
bk
 =Üa°_ªmaödî)

	)

1825 #i‡
HAVE_MMAP


1827 #i‡
__STD_C


1828 
mchunk±r
 
	$mm≠_chunk
(
size_t
 
size
)

1830 
mchunk±r
 
	$mm≠_chunk
(
size
Ë
size_t
 size;

1833 
size_t
 
∑ge_mask
 = 
mÆloc_gë∑gesize
 - 1;

1834 
mchunk±r
 
p
;

1836 #i‚de‡
MAP_ANONYMOUS


1837 
fd
 = -1;

1840 if(
n_mm≠s
 >
n_mm≠s_max
)  0;

1845 
size
 = (sizê+ 
SIZE_SZ
 + 
∑ge_mask
) & ~page_mask;

1847 #ifde‡
MAP_ANONYMOUS


1848 
p
 = (
mchunk±r
)
	`mm≠
(0, 
size
, 
PROT_READ
|
PROT_WRITE
,

1849 
MAP_PRIVATE
|
MAP_ANONYMOUS
, -1, 0);

1851 i‡(
fd
 < 0)

1853 
fd
 = 
	`›í
("/dev/zîo", 
O_RDWR
);

1854 if(
fd
 < 0)  0;

1856 
p
 = (
mchunk±r
)
	`mm≠
(0, 
size
, 
PROT_READ
|
PROT_WRITE
, 
MAP_PRIVATE
, 
fd
, 0);

1859 if(
p
 =(
mchunk±r
)-1)  0;

1861 
n_mm≠s
++;

1862 i‡(
n_mm≠s
 > 
max_n_mm≠s
) max_n_mmaps =Ç_mmaps;

1865 
	`as£π
(
	`Æig√d_OK
(
	`chunk2mem
(
p
)));

1871 
p
->
¥ev_size
 = 0;

1872 
	`£t_hód
(
p
, 
size
|
IS_MMAPPED
);

1874 
mm≠≥d_mem
 +
size
;

1875 i‡(()
mm≠≥d_mem
 > ()
max_mm≠≥d_mem
)

1876 
max_mm≠≥d_mem
 = 
mm≠≥d_mem
;

1877 i‡(()(
mm≠≥d_mem
 + 
sbrked_mem
Ë> ()
max_tŸÆ_mem
)

1878 
max_tŸÆ_mem
 = 
mm≠≥d_mem
 + 
sbrked_mem
;

1879  
p
;

1880 
	}
}

1882 #i‡
__STD_C


1883 
	$munm≠_chunk
(
mchunk±r
 
p
)

1885 
	$munm≠_chunk
(
p
Ë
mchunk±r
Ö;

1888 
INTERNAL_SIZE_T
 
size
 = 
	`chunksize
(
p
);

1889 
ªt
;

1891 
	`as£π
 (
	`chunk_is_mm≠≥d
(
p
));

1892 
	`as£π
(! ((*)
p
 >
sbrk_ba£
 && (*Ì < sbrk_ba£ + 
sbrked_mem
));

1893 
	`as£π
((
n_mm≠s
 > 0));

1894 
	`as£π
(((
p
->
¥ev_size
 + 
size
Ë& (
mÆloc_gë∑gesize
-1)) == 0);

1896 
n_mm≠s
--;

1897 
mm≠≥d_mem
 -(
size
 + 
p
->
¥ev_size
);

1899 
ªt
 = 
	`munm≠
((*)
p
 -Ö->
¥ev_size
, 
size
 +Ö->prev_size);

1902 
	`as£π
(
ªt
 == 0);

1903 
	}
}

1905 #i‡
HAVE_MREMAP


1907 #i‡
__STD_C


1908 
mchunk±r
 
	$mªm≠_chunk
(
mchunk±r
 
p
, 
size_t
 
√w_size
)

1910 
mchunk±r
 
	$mªm≠_chunk
(
p
, 
√w_size
Ë
mchunk±r
Ö; 
size_t
Çew_size;

1913 
size_t
 
∑ge_mask
 = 
mÆloc_gë∑gesize
 - 1;

1914 
INTERNAL_SIZE_T
 
off£t
 = 
p
->
¥ev_size
;

1915 
INTERNAL_SIZE_T
 
size
 = 
	`chunksize
(
p
);

1916 *
˝
;

1918 
	`as£π
 (
	`chunk_is_mm≠≥d
(
p
));

1919 
	`as£π
(! ((*)
p
 >
sbrk_ba£
 && (*Ì < sbrk_ba£ + 
sbrked_mem
));

1920 
	`as£π
((
n_mm≠s
 > 0));

1921 
	`as£π
(((
size
 + 
off£t
Ë& (
mÆloc_gë∑gesize
-1)) == 0);

1924 
√w_size
 = (√w_sizê+ 
off£t
 + 
SIZE_SZ
 + 
∑ge_mask
) & ~page_mask;

1926 
˝
 = (*)
	`mªm≠
((*)
p
 - 
off£t
, 
size
 + off£t, 
√w_size
, 1);

1928 i‡(
˝
 == (*)-1)  0;

1930 
p
 = (
mchunk±r
)(
˝
 + 
off£t
);

1932 
	`as£π
(
	`Æig√d_OK
(
	`chunk2mem
(
p
)));

1934 
	`as£π
((
p
->
¥ev_size
 =
off£t
));

1935 
	`£t_hód
(
p
, (
√w_size
 - 
off£t
)|
IS_MMAPPED
);

1937 
mm≠≥d_mem
 -
size
 + 
off£t
;

1938 
mm≠≥d_mem
 +
√w_size
;

1939 i‡(()
mm≠≥d_mem
 > ()
max_mm≠≥d_mem
)

1940 
max_mm≠≥d_mem
 = 
mm≠≥d_mem
;

1941 i‡(()(
mm≠≥d_mem
 + 
sbrked_mem
Ë> ()
max_tŸÆ_mem
)

1942 
max_tŸÆ_mem
 = 
mm≠≥d_mem
 + 
sbrked_mem
;

1943  
p
;

1944 
	}
}

1958 #i‡
__STD_C


1959 
	$mÆloc_exãnd_t›
(
INTERNAL_SIZE_T
 
nb
)

1961 
	$mÆloc_exãnd_t›
(
nb
Ë
INTERNAL_SIZE_T
Çb;

1964 * 
brk
;

1965 
INTERNAL_SIZE_T
 
‰⁄t_mißlign
;

1966 
INTERNAL_SIZE_T
 
c‹ª˘i⁄
;

1967 * 
√w_brk
;

1968 
INTERNAL_SIZE_T
 
t›_size
;

1970 
mchunk±r
 
ﬁd_t›
 = 
t›
;

1971 
INTERNAL_SIZE_T
 
ﬁd_t›_size
 = 
	`chunksize
(
ﬁd_t›
);

1972 * 
ﬁd_íd
 = (*)(
	`chunk_©_off£t
(
ﬁd_t›
, 
ﬁd_t›_size
));

1976 
INTERNAL_SIZE_T
 
sbrk_size
 = 
nb
 + 
t›_∑d
 + 
MINSIZE
;

1977 
∑gesz
 = 
mÆloc_gë∑gesize
;

1983 i‡(
sbrk_ba£
 != (*)(-1))

1984 
sbrk_size
 = (sbrk_sizê+ (
∑gesz
 - 1)) & ~(pagesz - 1);

1986 
brk
 = (*)(
	`MORECORE
 (
sbrk_size
));

1989 i‡(
brk
 =(*)(
MORECORE_FAILURE
) ||

1990 (
brk
 < 
ﬁd_íd
 && 
ﬁd_t›
 !
öôül_t›
))

1993 
sbrked_mem
 +
sbrk_size
;

1995 i‡(
brk
 =
ﬁd_íd
)

1997 
t›_size
 = 
sbrk_size
 + 
ﬁd_t›_size
;

1998 
	`£t_hód
(
t›
, 
t›_size
 | 
PREV_INUSE
);

2002 i‡(
sbrk_ba£
 == (*)(-1))

2003 
sbrk_ba£
 = 
brk
;

2005 
sbrked_mem
 +
brk
 - (*)
ﬁd_íd
;

2008 
‰⁄t_mißlign
 = ()
	`chunk2mem
(
brk
Ë& 
MALLOC_ALIGN_MASK
;

2009 i‡(
‰⁄t_mißlign
 > 0)

2011 
c‹ª˘i⁄
 = (
MALLOC_ALIGNMENT
Ë- 
‰⁄t_mißlign
;

2012 
brk
 +
c‹ª˘i⁄
;

2015 
c‹ª˘i⁄
 = 0;

2019 
c‹ª˘i⁄
 +(((()(
brk
 + 
sbrk_size
))+(
∑gesz
-1)) &

2020 ~(
∑gesz
 - 1)Ë- (()(
brk
 + 
sbrk_size
));

2023 
√w_brk
 = (*)(
	`MORECORE
 (
c‹ª˘i⁄
));

2024 i‡(
√w_brk
 =(*)(
MORECORE_FAILURE
)) ;

2026 
sbrked_mem
 +
c‹ª˘i⁄
;

2028 
t›
 = (
mchunk±r
)
brk
;

2029 
t›_size
 = 
√w_brk
 - 
brk
 + 
c‹ª˘i⁄
;

2030 
	`£t_hód
(
t›
, 
t›_size
 | 
PREV_INUSE
);

2032 i‡(
ﬁd_t›
 !
öôül_t›
)

2039 i‡(
ﬁd_t›_size
 < 
MINSIZE
)

2041 
	`£t_hód
(
t›
, 
PREV_INUSE
);

2046 
ﬁd_t›_size
 = (ﬁd_t›_sizê- 3*
SIZE_SZ
Ë& ~
MALLOC_ALIGN_MASK
;

2047 
	`£t_hód_size
(
ﬁd_t›
, 
ﬁd_t›_size
);

2048 
	`chunk_©_off£t
(
ﬁd_t›
, 
ﬁd_t›_size
 )->
size
 =

2049 
SIZE_SZ
|
PREV_INUSE
;

2050 
	`chunk_©_off£t
(
ﬁd_t›
, 
ﬁd_t›_size
 + 
SIZE_SZ
)->
size
 =

2051 
SIZE_SZ
|
PREV_INUSE
;

2053 i‡(
ﬁd_t›_size
 >
MINSIZE
)

2054 
	`fREe
(
	`chunk2mem
(
ﬁd_t›
));

2058 i‡(()
sbrked_mem
 > ()
max_sbrked_mem
)

2059 
max_sbrked_mem
 = 
sbrked_mem
;

2060 i‡(()(
mm≠≥d_mem
 + 
sbrked_mem
Ë> ()
max_tŸÆ_mem
)

2061 
max_tŸÆ_mem
 = 
mm≠≥d_mem
 + 
sbrked_mem
;

2064 
	`as£π
((()((*)
t›
 + 
t›_size
Ë& (
∑gesz
 - 1)) == 0);

2065 
	}
}

2132 #i‡
__STD_C


2133 
Void_t
* 
	$mALLOc
(
size_t
 
byãs
)

2135 
Void_t
* 
	$mALLOc
(
byãs
Ë
size_t
 bytes;

2138 
mchunk±r
 
vi˘im
;

2139 
INTERNAL_SIZE_T
 
vi˘im_size
;

2140 
idx
;

2141 
mbö±r
 
bö
;

2142 
mchunk±r
 
ªmaödî
;

2143 
ªmaödî_size
;

2144 
ªmaödî_ödex
;

2145 
block
;

2146 
°¨tidx
;

2147 
mchunk±r
 
fwd
;

2148 
mchunk±r
 
bck
;

2149 
mbö±r
 
q
;

2151 
INTERNAL_SIZE_T
 
nb
;

2153 i‡(()
byãs
 < 0)  0;

2155 
nb
 = 
	`ªque°2size
(
byãs
);

2159 i‡(
	`is_smÆl_ªque°
(
nb
))

2161 
idx
 = 
	`smÆlbö_ödex
(
nb
);

2165 
q
 = 
	`bö_©
(
idx
);

2166 
vi˘im
 = 
	`œ°
(
q
);

2169 i‡(
vi˘im
 =
q
)

2171 
q
 = 
	`√xt_bö
(q);

2172 
vi˘im
 = 
	`œ°
(
q
);

2174 i‡(
vi˘im
 !
q
)

2176 
vi˘im_size
 = 
	`chunksize
(
vi˘im
);

2177 
	`u∆ök
(
vi˘im
, 
bck
, 
fwd
);

2178 
	`£t_öu£_bô_©_off£t
(
vi˘im
, 
vi˘im_size
);

2179 
	`check_mÆlo˚d_chunk
(
vi˘im
, 
nb
);

2180  
	`chunk2mem
(
vi˘im
);

2183 
idx
 += 2;

2188 
idx
 = 
	`bö_ödex
(
nb
);

2189 
bö
 = 
	`bö_©
(
idx
);

2191 
vi˘im
 = 
	`œ°
(
bö
); vi˘im !bö; vi˘im = vi˘im->
bk
)

2193 
vi˘im_size
 = 
	`chunksize
(
vi˘im
);

2194 
ªmaödî_size
 = 
vi˘im_size
 - 
nb
;

2196 i‡(
ªmaödî_size
 >()
MINSIZE
)

2198 --
idx
;

2202 i‡(
ªmaödî_size
 >= 0)

2204 
	`u∆ök
(
vi˘im
, 
bck
, 
fwd
);

2205 
	`£t_öu£_bô_©_off£t
(
vi˘im
, 
vi˘im_size
);

2206 
	`check_mÆlo˚d_chunk
(
vi˘im
, 
nb
);

2207  
	`chunk2mem
(
vi˘im
);

2211 ++
idx
;

2217 i‡–(
vi˘im
 = 
œ°_ªmaödî
->
fd
) !=Üast_remainder)

2219 
vi˘im_size
 = 
	`chunksize
(
vi˘im
);

2220 
ªmaödî_size
 = 
vi˘im_size
 - 
nb
;

2222 i‡(
ªmaödî_size
 >()
MINSIZE
)

2224 
ªmaödî
 = 
	`chunk_©_off£t
(
vi˘im
, 
nb
);

2225 
	`£t_hód
(
vi˘im
, 
nb
 | 
PREV_INUSE
);

2226 
	`lök_œ°_ªmaödî
(
ªmaödî
);

2227 
	`£t_hód
(
ªmaödî
, 
ªmaödî_size
 | 
PREV_INUSE
);

2228 
	`£t_foŸ
(
ªmaödî
, 
ªmaödî_size
);

2229 
	`check_mÆlo˚d_chunk
(
vi˘im
, 
nb
);

2230  
	`chunk2mem
(
vi˘im
);

2233 
˛ór_œ°_ªmaödî
;

2235 i‡(
ªmaödî_size
 >= 0)

2237 
	`£t_öu£_bô_©_off£t
(
vi˘im
, 
vi˘im_size
);

2238 
	`check_mÆlo˚d_chunk
(
vi˘im
, 
nb
);

2239  
	`chunk2mem
(
vi˘im
);

2244 
	`‰⁄éök
(
vi˘im
, 
vi˘im_size
, 
ªmaödî_ödex
, 
bck
, 
fwd
);

2252 i‡–(
block
 = 
	`idx2böblock
(
idx
)Ë<
böblocks
)

2257 i‡–(
block
 & 
böblocks
) == 0)

2260 
idx
 = (idx & ~(
BINBLOCKWIDTH
 - 1)) + BINBLOCKWIDTH;

2261 
block
 <<= 1;

2262 (
block
 & 
böblocks
) == 0)

2264 
idx
 +
BINBLOCKWIDTH
;

2265 
block
 <<= 1;

2272 
°¨tidx
 = 
idx
;

2273 
q
 = 
bö
 = 
	`bö_©
(
idx
);

2280 
vi˘im
 = 
	`œ°
(
bö
); vi˘im !bö; vi˘im = vi˘im->
bk
)

2282 
vi˘im_size
 = 
	`chunksize
(
vi˘im
);

2283 
ªmaödî_size
 = 
vi˘im_size
 - 
nb
;

2285 i‡(
ªmaödî_size
 >()
MINSIZE
)

2287 
ªmaödî
 = 
	`chunk_©_off£t
(
vi˘im
, 
nb
);

2288 
	`£t_hód
(
vi˘im
, 
nb
 | 
PREV_INUSE
);

2289 
	`u∆ök
(
vi˘im
, 
bck
, 
fwd
);

2290 
	`lök_œ°_ªmaödî
(
ªmaödî
);

2291 
	`£t_hód
(
ªmaödî
, 
ªmaödî_size
 | 
PREV_INUSE
);

2292 
	`£t_foŸ
(
ªmaödî
, 
ªmaödî_size
);

2293 
	`check_mÆlo˚d_chunk
(
vi˘im
, 
nb
);

2294  
	`chunk2mem
(
vi˘im
);

2297 i‡(
ªmaödî_size
 >= 0)

2299 
	`£t_öu£_bô_©_off£t
(
vi˘im
, 
vi˘im_size
);

2300 
	`u∆ök
(
vi˘im
, 
bck
, 
fwd
);

2301 
	`check_mÆlo˚d_chunk
(
vi˘im
, 
nb
);

2302  
	`chunk2mem
(
vi˘im
);

2307 
bö
 = 
	`√xt_bö
(bin);

2309 } (++
idx
 & (
BINBLOCKWIDTH
 - 1)) != 0);

2315 i‡((
°¨tidx
 & (
BINBLOCKWIDTH
 - 1)) == 0)

2317 
böblocks
 &~
block
;

2320 --
°¨tidx
;

2321 
q
 = 
	`¥ev_bö
(q);

2322 } 
	`fú°
(
q
) == q);

2326 i‡–(
block
 <<1Ë<
böblocks
 && (block != 0) )

2328 (
block
 & 
böblocks
) == 0)

2330 
idx
 +
BINBLOCKWIDTH
;

2331 
block
 <<= 1;

2343 i‡–(
ªmaödî_size
 = 
	`chunksize
(
t›
Ë- 
nb
Ë< ()
MINSIZE
)

2346 #i‡
HAVE_MMAP


2348 i‡(()
nb
 >()
mm≠_thªshﬁd
 &&

2349 (
vi˘im
 = 
	`mm≠_chunk
(
nb
)) != 0)

2350  
	`chunk2mem
(
vi˘im
);

2354 
	`mÆloc_exãnd_t›
(
nb
);

2355 i‡–(
ªmaödî_size
 = 
	`chunksize
(
t›
Ë- 
nb
Ë< ()
MINSIZE
)

2359 
vi˘im
 = 
t›
;

2360 
	`£t_hód
(
vi˘im
, 
nb
 | 
PREV_INUSE
);

2361 
t›
 = 
	`chunk_©_off£t
(
vi˘im
, 
nb
);

2362 
	`£t_hód
(
t›
, 
ªmaödî_size
 | 
PREV_INUSE
);

2363 
	`check_mÆlo˚d_chunk
(
vi˘im
, 
nb
);

2364  
	`chunk2mem
(
vi˘im
);

2366 
	}
}

2393 #i‡
__STD_C


2394 
	$fREe
(
Void_t
* 
mem
)

2396 
	$fREe
(
mem
Ë
Void_t
* mem;

2399 
mchunk±r
 
p
;

2400 
INTERNAL_SIZE_T
 
hd
;

2401 
INTERNAL_SIZE_T
 
sz
;

2402 
idx
;

2403 
mchunk±r
 
√xt
;

2404 
INTERNAL_SIZE_T
 
√xtsz
;

2405 
INTERNAL_SIZE_T
 
¥evsz
;

2406 
mchunk±r
 
bck
;

2407 
mchunk±r
 
fwd
;

2408 
i¶r
;

2410 i‡(
mem
 == 0)

2413 
p
 = 
	`mem2chunk
(
mem
);

2414 
hd
 = 
p
->
size
;

2416 #i‡
HAVE_MMAP


2417 i‡(
hd
 & 
IS_MMAPPED
)

2419 
	`munm≠_chunk
(
p
);

2424 
	`check_öu£_chunk
(
p
);

2426 
sz
 = 
hd
 & ~
PREV_INUSE
;

2427 
√xt
 = 
	`chunk_©_off£t
(
p
, 
sz
);

2428 
√xtsz
 = 
	`chunksize
(
√xt
);

2430 i‡(
√xt
 =
t›
)

2432 
sz
 +
√xtsz
;

2434 i‡(!(
hd
 & 
PREV_INUSE
))

2436 
¥evsz
 = 
p
->
¥ev_size
;

2437 
p
 = 
	`chunk_©_off£t
’, -((Ë
¥evsz
));

2438 
sz
 +
¥evsz
;

2439 
	`u∆ök
(
p
, 
bck
, 
fwd
);

2442 
	`£t_hód
(
p
, 
sz
 | 
PREV_INUSE
);

2443 
t›
 = 
p
;

2444 i‡(()(
sz
Ë>()
åim_thªshﬁd
)

2445 
	`mÆloc_åim
(
t›_∑d
);

2449 
	`£t_hód
(
√xt
, 
√xtsz
);

2451 
i¶r
 = 0;

2453 i‡(!(
hd
 & 
PREV_INUSE
))

2455 
¥evsz
 = 
p
->
¥ev_size
;

2456 
p
 = 
	`chunk_©_off£t
’, -((Ë
¥evsz
));

2457 
sz
 +
¥evsz
;

2459 i‡(
p
->
fd
 =
œ°_ªmaödî
)

2460 
i¶r
 = 1;

2462 
	`u∆ök
(
p
, 
bck
, 
fwd
);

2465 i‡(!(
	`öu£_bô_©_off£t
(
√xt
, 
√xtsz
)))

2467 
sz
 +
√xtsz
;

2469 i‡(!
i¶r
 && 
√xt
->
fd
 =
œ°_ªmaödî
)

2471 
i¶r
 = 1;

2472 
	`lök_œ°_ªmaödî
(
p
);

2475 
	`u∆ök
(
√xt
, 
bck
, 
fwd
);

2479 
	`£t_hód
(
p
, 
sz
 | 
PREV_INUSE
);

2480 
	`£t_foŸ
(
p
, 
sz
);

2481 i‡(!
i¶r
)

2482 
	`‰⁄éök
(
p
, 
sz
, 
idx
, 
bck
, 
fwd
);

2483 
	}
}

2525 #i‡
__STD_C


2526 
Void_t
* 
	$rEALLOc
(
Void_t
* 
ﬁdmem
, 
size_t
 
byãs
)

2528 
Void_t
* 
	$rEALLOc
(
ﬁdmem
, 
byãs
Ë
Void_t
* oldmem; 
size_t
 bytes;

2531 
INTERNAL_SIZE_T
 
nb
;

2533 
mchunk±r
 
ﬁdp
;

2534 
INTERNAL_SIZE_T
 
ﬁdsize
;

2536 
mchunk±r
 
√wp
;

2537 
INTERNAL_SIZE_T
 
√wsize
;

2538 
Void_t
* 
√wmem
;

2540 
mchunk±r
 
√xt
;

2541 
INTERNAL_SIZE_T
 
√xtsize
;

2543 
mchunk±r
 
¥ev
;

2544 
INTERNAL_SIZE_T
 
¥evsize
;

2546 
mchunk±r
 
ªmaödî
;

2547 
INTERNAL_SIZE_T
 
ªmaödî_size
;

2549 
mchunk±r
 
bck
;

2550 
mchunk±r
 
fwd
;

2552 #ifde‡
REALLOC_ZERO_BYTES_FREES


2553 i‡(
byãs
 =0Ë{ 
	`fREe
(
ﬁdmem
);  0; }

2556 i‡(()
byãs
 < 0)  0;

2559 i‡(
ﬁdmem
 =0Ë 
	`mALLOc
(
byãs
);

2561 
√wp
 = 
ﬁdp
 = 
	`mem2chunk
(
ﬁdmem
);

2562 
√wsize
 = 
ﬁdsize
 = 
	`chunksize
(
ﬁdp
);

2565 
nb
 = 
	`ªque°2size
(
byãs
);

2567 #i‡
HAVE_MMAP


2568 i‡(
	`chunk_is_mm≠≥d
(
ﬁdp
))

2570 #i‡
HAVE_MREMAP


2571 
√wp
 = 
	`mªm≠_chunk
(
ﬁdp
, 
nb
);

2572 if(
√wp
Ë 
	`chunk2mem
(newp);

2575 if(
ﬁdsize
 - 
SIZE_SZ
 >
nb
Ë 
ﬁdmem
;

2577 
√wmem
 = 
	`mALLOc
(
byãs
);

2578 i‡(
√wmem
 == 0)  0;

2579 
	`MALLOC_COPY
(
√wmem
, 
ﬁdmem
, 
ﬁdsize
 - 2*
SIZE_SZ
);

2580 
	`munm≠_chunk
(
ﬁdp
);

2581  
√wmem
;

2585 
	`check_öu£_chunk
(
ﬁdp
);

2587 i‡(()(
ﬁdsize
Ë< ()(
nb
))

2592 
√xt
 = 
	`chunk_©_off£t
(
ﬁdp
, 
ﬁdsize
);

2593 i‡(
√xt
 =
t›
 || !
	`öu£
(next))

2595 
√xtsize
 = 
	`chunksize
(
√xt
);

2598 i‡(
√xt
 =
t›
)

2600 i‡(()(
√xtsize
 + 
√wsize
Ë>()(
nb
 + 
MINSIZE
))

2602 
√wsize
 +
√xtsize
;

2603 
t›
 = 
	`chunk_©_off£t
(
ﬁdp
, 
nb
);

2604 
	`£t_hód
(
t›
, (
√wsize
 - 
nb
Ë| 
PREV_INUSE
);

2605 
	`£t_hód_size
(
ﬁdp
, 
nb
);

2606  
	`chunk2mem
(
ﬁdp
);

2611 i‡((()(
√xtsize
 + 
√wsize
Ë>()(
nb
)))

2613 
	`u∆ök
(
√xt
, 
bck
, 
fwd
);

2614 
√wsize
 +
√xtsize
;

2615 
•lô
;

2620 
√xt
 = 0;

2621 
√xtsize
 = 0;

2626 i‡(!
	`¥ev_öu£
(
ﬁdp
))

2628 
¥ev
 = 
	`¥ev_chunk
(
ﬁdp
);

2629 
¥evsize
 = 
	`chunksize
(
¥ev
);

2633 i‡(
√xt
 != 0)

2636 i‡(
√xt
 =
t›
)

2638 i‡(()(
√xtsize
 + 
¥evsize
 + 
√wsize
Ë>()(
nb
 + 
MINSIZE
))

2640 
	`u∆ök
(
¥ev
, 
bck
, 
fwd
);

2641 
√wp
 = 
¥ev
;

2642 
√wsize
 +
¥evsize
 + 
√xtsize
;

2643 
√wmem
 = 
	`chunk2mem
(
√wp
);

2644 
	`MALLOC_COPY
(
√wmem
, 
ﬁdmem
, 
ﬁdsize
 - 
SIZE_SZ
);

2645 
t›
 = 
	`chunk_©_off£t
(
√wp
, 
nb
);

2646 
	`£t_hód
(
t›
, (
√wsize
 - 
nb
Ë| 
PREV_INUSE
);

2647 
	`£t_hód_size
(
√wp
, 
nb
);

2648  
√wmem
;

2653 i‡((()(
√xtsize
 + 
¥evsize
 + 
√wsize
Ë>()(
nb
)))

2655 
	`u∆ök
(
√xt
, 
bck
, 
fwd
);

2656 
	`u∆ök
(
¥ev
, 
bck
, 
fwd
);

2657 
√wp
 = 
¥ev
;

2658 
√wsize
 +
√xtsize
 + 
¥evsize
;

2659 
√wmem
 = 
	`chunk2mem
(
√wp
);

2660 
	`MALLOC_COPY
(
√wmem
, 
ﬁdmem
, 
ﬁdsize
 - 
SIZE_SZ
);

2661 
•lô
;

2666 i‡(
¥ev
 !0 && ()(
¥evsize
 + 
√wsize
Ë>()
nb
)

2668 
	`u∆ök
(
¥ev
, 
bck
, 
fwd
);

2669 
√wp
 = 
¥ev
;

2670 
√wsize
 +
¥evsize
;

2671 
√wmem
 = 
	`chunk2mem
(
√wp
);

2672 
	`MALLOC_COPY
(
√wmem
, 
ﬁdmem
, 
ﬁdsize
 - 
SIZE_SZ
);

2673 
•lô
;

2679 
√wmem
 = 
	`mALLOc
 (
byãs
);

2681 i‡(
√wmem
 == 0)

2687 i‡–(
√wp
 = 
	`mem2chunk
(
√wmem
)Ë=
	`√xt_chunk
(
ﬁdp
))

2689 
√wsize
 +
	`chunksize
(
√wp
);

2690 
√wp
 = 
ﬁdp
;

2691 
•lô
;

2695 
	`MALLOC_COPY
(
√wmem
, 
ﬁdmem
, 
ﬁdsize
 - 
SIZE_SZ
);

2696 
	`fREe
(
ﬁdmem
);

2697  
√wmem
;

2701 
•lô
:

2703 i‡(
√wsize
 - 
nb
 >
MINSIZE
)

2705 
ªmaödî
 = 
	`chunk_©_off£t
(
√wp
, 
nb
);

2706 
ªmaödî_size
 = 
√wsize
 - 
nb
;

2707 
	`£t_hód_size
(
√wp
, 
nb
);

2708 
	`£t_hód
(
ªmaödî
, 
ªmaödî_size
 | 
PREV_INUSE
);

2709 
	`£t_öu£_bô_©_off£t
(
ªmaödî
, 
ªmaödî_size
);

2710 
	`fREe
(
	`chunk2mem
(
ªmaödî
));

2714 
	`£t_hód_size
(
√wp
, 
√wsize
);

2715 
	`£t_öu£_bô_©_off£t
(
√wp
, 
√wsize
);

2718 
	`check_öu£_chunk
(
√wp
);

2719  
	`chunk2mem
(
√wp
);

2720 
	}
}

2744 #i‡
__STD_C


2745 
Void_t
* 
	$mEMALIGn
(
size_t
 
Æignmít
, size_à
byãs
)

2747 
Void_t
* 
	$mEMALIGn
(
Æignmít
, 
byãs
Ë
size_t
álignment; size_t bytes;

2750 
INTERNAL_SIZE_T
 
nb
;

2751 * 
m
;

2752 
mchunk±r
 
p
;

2753 * 
brk
;

2754 
mchunk±r
 
√wp
;

2755 
INTERNAL_SIZE_T
 
√wsize
;

2756 
INTERNAL_SIZE_T
 
Àadsize
;

2757 
mchunk±r
 
ªmaödî
;

2758 
ªmaödî_size
;

2760 i‡(()
byãs
 < 0)  0;

2764 i‡(
Æignmít
 <
MALLOC_ALIGNMENT
Ë 
	`mALLOc
(
byãs
);

2768 i‡(
Æignmít
 < 
MINSIZE
)álignment = MINSIZE;

2772 
nb
 = 
	`ªque°2size
(
byãs
);

2773 
m
 = (*)(
	`mALLOc
(
nb
 + 
Æignmít
 + 
MINSIZE
));

2775 i‡(
m
 == 0)  0;

2777 
p
 = 
	`mem2chunk
(
m
);

2779 i‡(((()(
m
)Ë% 
Æignmít
) == 0)

2781 #i‡
HAVE_MMAP


2782 if(
	`chunk_is_mm≠≥d
(
p
))

2783  
	`chunk2mem
(
p
);

2797 
brk
 = (*)
	`mem2chunk
((()(
m
 + 
Æignmít
 - 1)) & -((signed)álignment));

2798 i‡(()(
brk
 - (*)(
p
)Ë< 
MINSIZE
Ëbrk = brk + 
Æignmít
;

2800 
√wp
 = (
mchunk±r
)
brk
;

2801 
Àadsize
 = 
brk
 - (*)(
p
);

2802 
√wsize
 = 
	`chunksize
(
p
Ë- 
Àadsize
;

2804 #i‡
HAVE_MMAP


2805 if(
	`chunk_is_mm≠≥d
(
p
))

2807 
√wp
->
¥ev_size
 = 
p
->¥ev_sizê+ 
Àadsize
;

2808 
	`£t_hód
(
√wp
, 
√wsize
|
IS_MMAPPED
);

2809  
	`chunk2mem
(
√wp
);

2815 
	`£t_hód
(
√wp
, 
√wsize
 | 
PREV_INUSE
);

2816 
	`£t_öu£_bô_©_off£t
(
√wp
, 
√wsize
);

2817 
	`£t_hód_size
(
p
, 
Àadsize
);

2818 
	`fREe
(
	`chunk2mem
(
p
));

2819 
p
 = 
√wp
;

2821 
	`as£π
 (
√wsize
 >
nb
 && ((()(
	`chunk2mem
(
p
))Ë% 
Æignmít
) == 0);

2826 
ªmaödî_size
 = 
	`chunksize
(
p
Ë- 
nb
;

2828 i‡(
ªmaödî_size
 >()
MINSIZE
)

2830 
ªmaödî
 = 
	`chunk_©_off£t
(
p
, 
nb
);

2831 
	`£t_hód
(
ªmaödî
, 
ªmaödî_size
 | 
PREV_INUSE
);

2832 
	`£t_hód_size
(
p
, 
nb
);

2833 
	`fREe
(
	`chunk2mem
(
ªmaödî
));

2836 
	`check_öu£_chunk
(
p
);

2837  
	`chunk2mem
(
p
);

2839 
	}
}

2850 #i‡
__STD_C


2851 
Void_t
* 
	$vALLOc
(
size_t
 
byãs
)

2853 
Void_t
* 
	$vALLOc
(
byãs
Ë
size_t
 bytes;

2856  
	`mEMALIGn
 (
mÆloc_gë∑gesize
, 
byãs
);

2857 
	}
}

2865 #i‡
__STD_C


2866 
Void_t
* 
	$pvALLOc
(
size_t
 
byãs
)

2868 
Void_t
* 
	$pvALLOc
(
byãs
Ë
size_t
 bytes;

2871 
size_t
 
∑gesize
 = 
mÆloc_gë∑gesize
;

2872  
	`mEMALIGn
 (
∑gesize
, (
byãs
 +Öagesize - 1) & ~(pagesize - 1));

2873 
	}
}

2881 #i‡
__STD_C


2882 
Void_t
* 
	$cALLOc
(
size_t
 
n
, size_à
ñem_size
)

2884 
Void_t
* 
	$cALLOc
(
n
, 
ñem_size
Ë
size_t
Ç; size_tÉlem_size;

2887 
mchunk±r
 
p
;

2888 
INTERNAL_SIZE_T
 
csz
;

2890 
INTERNAL_SIZE_T
 
sz
 = 
n
 * 
ñem_size
;

2894 #i‡
MORECORE_CLEARS


2895 
mchunk±r
 
ﬁdt›
 = 
t›
;

2896 
INTERNAL_SIZE_T
 
ﬁdt›size
 = 
	`chunksize
(
t›
);

2898 
Void_t
* 
mem
 = 
	`mALLOc
 (
sz
);

2900 i‡(()
n
 < 0)  0;

2902 i‡(
mem
 == 0)

2906 
p
 = 
	`mem2chunk
(
mem
);

2911 #i‡
HAVE_MMAP


2912 i‡(
	`chunk_is_mm≠≥d
(
p
)Ë 
mem
;

2915 
csz
 = 
	`chunksize
(
p
);

2917 #i‡
MORECORE_CLEARS


2918 i‡(
p
 =
ﬁdt›
 && 
csz
 > 
ﬁdt›size
)

2921 
csz
 = 
ﬁdt›size
;

2925 
	`MALLOC_ZERO
(
mem
, 
csz
 - 
SIZE_SZ
);

2926  
mem
;

2928 
	}
}

2937 #i‡!
deföed
(
INTERNAL_LINUX_C_LIB
Ë|| !deföed(
__ELF__
)

2938 #i‡
__STD_C


2939 
	$c‰ì
(
Void_t
 *
mem
)

2941 
	$c‰ì
(
mem
Ë
Void_t
 *mem;

2944 
	`fREe
(
mem
);

2945 
	}
}

2973 #i‡
__STD_C


2974 
	$mÆloc_åim
(
size_t
 
∑d
)

2976 
	$mÆloc_åim
(
∑d
Ë
size_t
Öad;

2979 
t›_size
;

2980 
exåa
;

2981 * 
cuºít_brk
;

2982 * 
√w_brk
;

2984 
∑gesz
 = 
mÆloc_gë∑gesize
;

2986 
t›_size
 = 
	`chunksize
(
t›
);

2987 
exåa
 = ((
t›_size
 - 
∑d
 - 
MINSIZE
 + (
∑gesz
-1)) /Öagesz - 1) *Öagesz;

2989 i‡(
exåa
 < ()
∑gesz
)

2995 
cuºít_brk
 = (*)(
	`MORECORE
 (0));

2996 i‡(
cuºít_brk
 !(*)(
t›
Ë+ 
t›_size
)

3001 
√w_brk
 = (*)(
	`MORECORE
 (-
exåa
));

3003 i‡(
√w_brk
 =(*)(
MORECORE_FAILURE
))

3006 
cuºít_brk
 = (*)(
	`MORECORE
 (0));

3007 
t›_size
 = 
cuºít_brk
 - (*)
t›
;

3008 i‡(
t›_size
 >()
MINSIZE
)

3010 
sbrked_mem
 = 
cuºít_brk
 - 
sbrk_ba£
;

3011 
	`£t_hód
(
t›
, 
t›_size
 | 
PREV_INUSE
);

3013 
	`check_chunk
(
t›
);

3020 
	`£t_hód
(
t›
, (
t›_size
 - 
exåa
Ë| 
PREV_INUSE
);

3021 
sbrked_mem
 -
exåa
;

3022 
	`check_chunk
(
t›
);

3027 
	}
}

3042 #i‡
__STD_C


3043 
size_t
 
	$mÆloc_ußbÀ_size
(
Void_t
* 
mem
)

3045 
size_t
 
	$mÆloc_ußbÀ_size
(
mem
Ë
Void_t
* mem;

3048 
mchunk±r
 
p
;

3049 i‡(
mem
 == 0)

3053 
p
 = 
	`mem2chunk
(
mem
);

3054 if(!
	`chunk_is_mm≠≥d
(
p
))

3056 i‡(!
	`öu£
(
p
))  0;

3057 
	`check_öu£_chunk
(
p
);

3058  
	`chunksize
(
p
Ë- 
SIZE_SZ
;

3060  
	`chunksize
(
p
Ë- 2*
SIZE_SZ
;

3062 
	}
}

3070 
	$mÆloc_upd©e_mÆlöfo
()

3072 
i
;

3073 
mbö±r
 
b
;

3074 
mchunk±r
 
p
;

3075 #ifde‡
DEBUG


3076 
mchunk±r
 
q
;

3079 
INTERNAL_SIZE_T
 
avaû
 = 
	`chunksize
(
t›
);

3080 
«vaû
 = (()(
avaû
Ë>()
MINSIZE
)? 1 : 0;

3082 
i
 = 1; i < 
NAV
; ++i)

3084 
b
 = 
	`bö_©
(
i
);

3085 
p
 = 
	`œ°
(
b
);Ö !b;Ö =Ö->
bk
)

3087 #ifde‡
DEBUG


3088 
	`check_‰ì_chunk
(
p
);

3089 
q
 = 
	`√xt_chunk
(
p
);

3090 
q
 < 
t›
 && 
	`öu£
(qË&& ()(
	`chunksize
(q)Ë>()
MINSIZE
;

3091 
q
 = 
	`√xt_chunk
(q))

3092 
	`check_öu£_chunk
(
q
);

3094 
avaû
 +
	`chunksize
(
p
);

3095 
«vaû
++;

3099 
cuºít_mÆlöfo
.
‹dblks
 = 
«vaû
;

3100 
cuºít_mÆlöfo
.
u‹dblks
 = 
sbrked_mem
 - 
avaû
;

3101 
cuºít_mÆlöfo
.
f‹dblks
 = 
avaû
;

3102 
cuºít_mÆlöfo
.
hblks
 = 
n_mm≠s
;

3103 
cuºít_mÆlöfo
.
hblkhd
 = 
mm≠≥d_mem
;

3104 
cuºít_mÆlöfo
.
kìpco°
 = 
	`chunksize
(
t›
);

3106 
	}
}

3127 
	$mÆloc_°©s
()

3129 
	`mÆloc_upd©e_mÆlöfo
();

3130 
	`¥ötf
("max system bytes = %10u\n",

3131 ()(
max_tŸÆ_mem
));

3132 
	`¥ötf
("system bytes = %10u\n",

3133 ()(
sbrked_mem
 + 
mm≠≥d_mem
));

3134 
	`¥ötf
("in use bytes = %10u\n",

3135 ()(
cuºít_mÆlöfo
.
u‹dblks
 + 
mm≠≥d_mem
));

3136 #i‡
HAVE_MMAP


3137 
	`¥ötf
("max mmapÑegions = %10u\n",

3138 ()
max_n_mm≠s
);

3140 
	}
}

3148 
mÆlöfo
 
	$mALLINFo
()

3150 
	`mÆloc_upd©e_mÆlöfo
();

3151  
cuºít_mÆlöfo
;

3152 
	}
}

3171 #i‡
__STD_C


3172 
	$mALLOPt
(
∑øm_numbî
, 
vÆue
)

3174 
	$mALLOPt
(
∑øm_numbî
, 
vÆue
) param_number; value;

3177 
∑øm_numbî
)

3179 
M_TRIM_THRESHOLD
:

3180 
åim_thªshﬁd
 = 
vÆue
;  1;

3181 
M_TOP_PAD
:

3182 
t›_∑d
 = 
vÆue
;  1;

3183 
M_MMAP_THRESHOLD
:

3184 
mm≠_thªshﬁd
 = 
vÆue
;  1;

3185 
M_MMAP_MAX
:

3186 #i‡
HAVE_MMAP


3187 
n_mm≠s_max
 = 
vÆue
;  1;

3189 i‡(
vÆue
 !0Ë 0; 
n_mm≠s_max
 = value;  1;

3195 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/env_common.c

27 
	~<comm⁄.h
>

28 
	~<comm™d.h
>

29 
	~<ívú⁄mít.h
>

30 
	~<löux/°ddef.h
>

31 
	~<mÆloc.h
>

33 #ifde‡
CONFIG_SHOW_BOOT_PROGRESS


34 
	~<°©us_Àd.h
>

35 
	#SHOW_BOOT_PROGRESS
(
¨g
Ë
	`show_boŸ_¥ogªss
◊rg)

	)

37 
	#SHOW_BOOT_PROGRESS
(
¨g
)

	)

40 #ifde‡
CONFIG_AMIGAONEG3SE


41 
íabÀ_nvøm
();

42 
dißbÀ_nvøm
();

45 #unde‡
DEBUG_ENV


46 #ifde‡
DEBUG_ENV


47 
	#DEBUGF
(
fmt
,
¨gs
...Ë
	`¥ötf
(fmà,##¨gs)

	)

49 
	#DEBUGF
(
fmt
,
¨gs
...)

	)

52 
ív_t
 *
ív_±r
;

54 
ív_ªloˇã_•ec
 ();

55 
uch¨
 
ív_gë_ch¨_•ec
();

57 
uch¨
 
ív_gë_ch¨_öô
 (
ödex
);

58 
	$uch¨
 (*
ív_gë_ch¨
)(Ë
ív_gë_ch¨_öô
;

63 
	#XMK_STR
(
x
Ë#x

	)

64 
	#MK_STR
(
x
Ë
	`XMK_STR
(x)

	)

66 
uch¨
 
deÁu…_ívú⁄mít
[] = {

67 #ifdef 
CONFIG_BOOTARGS


68 "boŸ¨gs=" 
CONFIG_BOOTARGS
 "\0"

70 #ifdef 
CONFIG_BOOTCOMMAND


71 "boŸcmd=" 
CONFIG_BOOTCOMMAND
 "\0"

73 #ifdef 
CONFIG_RAMBOOTCOMMAND


74 "ømboŸ=" 
CONFIG_RAMBOOTCOMMAND
 "\0"

76 #ifdef 
CONFIG_NFSBOOTCOMMAND


77 "nfsboŸ=" 
CONFIG_NFSBOOTCOMMAND
 "\0"

79 #i‡
	`deföed
(
CONFIG_BOOTDELAY
) && (CONFIG_BOOTDELAY >= 0)

80 "boŸdñay=" 
	`MK_STR
(
CONFIG_BOOTDELAY
) "\0"

82 #i‡
	`deföed
(
CONFIG_BAUDRATE
) && (CONFIG_BAUDRATE >= 0)

83 "baudøã=" 
	`MK_STR
(
CONFIG_BAUDRATE
) "\0"

85 #ifdef 
CONFIG_LOADS_ECHO


86 "lﬂds_echo=" 
	`MK_STR
(
CONFIG_LOADS_ECHO
) "\0"

88 #ifdef 
CONFIG_ETHADDR


89 "ëhaddr=" 
	`MK_STR
(
CONFIG_ETHADDR
) "\0"

91 #ifdef 
CONFIG_ETH1ADDR


92 "ëh1addr=" 
	`MK_STR
(
CONFIG_ETH1ADDR
) "\0"

94 #ifdef 
CONFIG_ETH2ADDR


95 "ëh2addr=" 
	`MK_STR
(
CONFIG_ETH2ADDR
) "\0"

97 #ifdef 
CONFIG_ETH3ADDR


98 "ëh3addr=" 
	`MK_STR
(
CONFIG_ETH3ADDR
) "\0"

100 #ifdef 
CONFIG_IPADDR


101 "ùaddr=" 
	`MK_STR
(
CONFIG_IPADDR
) "\0"

103 #ifdef 
CONFIG_SERVERIP


104 "£rvîù=" 
	`MK_STR
(
CONFIG_SERVERIP
) "\0"

106 #ifdef 
CFG_AUTOLOAD


107 "autﬁﬂd=" 
CFG_AUTOLOAD
 "\0"

109 #ifdef 
CONFIG_PREBOOT


110 "¥eboŸ=" 
CONFIG_PREBOOT
 "\0"

112 #ifdef 
CONFIG_ROOTPATH


113 "roŸ∑th=" 
	`MK_STR
(
CONFIG_ROOTPATH
) "\0"

115 #ifdef 
CONFIG_GATEWAYIP


116 "g©ewayù=" 
	`MK_STR
(
CONFIG_GATEWAYIP
) "\0"

118 #ifdef 
CONFIG_NETMASK


119 "√tmask=" 
	`MK_STR
(
CONFIG_NETMASK
) "\0"

121 #ifdef 
CONFIG_HOSTNAME


122 "ho°«me=" 
	`MK_STR
(
CONFIG_HOSTNAME
) "\0"

124 #ifdef 
CONFIG_BOOTFILE


125 "boŸfûe=" 
	`MK_STR
(
CONFIG_BOOTFILE
) "\0"

127 #ifdef 
CONFIG_LOADADDR


128 "lﬂdaddr=" 
	`MK_STR
(
CONFIG_LOADADDR
) "\0"

130 #ifde‡ 
CONFIG_CLOCKS_IN_MHZ


133 #i‡
	`deföed
(
CONFIG_PCI_BOOTDELAY
) && (CONFIG_PCI_BOOTDELAY > 0)

134 "pcidñay=" 
	`MK_STR
(
CONFIG_PCI_BOOTDELAY
) "\0"

137 
	}
};

139 #i‡
deföed
(
CFG_ENV_IS_IN_NAND
)

140 
	gdeÁu…_ívú⁄mít_size
 = (
deÁu…_ívú⁄mít
);

143 
	$ív_¸c_upd©e
 ()

145 
ív_±r
->
¸c
 = 
	`¸c32
(0,Énv_±r->
d©a
, (0x1000 - 4));

147 
	}
}

149 
uch¨
 
	$ív_gë_ch¨_öô
 (
ödex
)

151 
DECLARE_GLOBAL_DATA_PTR
;

152 
uch¨
 
c
;

155 i‡(
gd
->
ív_vÆid
)

157 
c
 = 
	`ív_gë_ch¨_•ec
(
ödex
);

159 
c
 = 
deÁu…_ívú⁄mít
[
ödex
];

162  (
c
);

163 
	}
}

165 #ifde‡
CONFIG_AMIGAONEG3SE


166 
uch¨
 
	$ív_gë_ch¨_mem‹y
 (
ödex
)

168 
DECLARE_GLOBAL_DATA_PTR
;

169 
uch¨
 
ªtvÆ
;

170 
	`íabÀ_nvøm
();

171 i‡(
gd
->
ív_vÆid
) {

172 
ªtvÆ
 = ( *((
uch¨
 *)(
gd
->
ív_addr
 + 
ödex
)) );

174 
ªtvÆ
 = ( 
deÁu…_ívú⁄mít
[
ödex
] );

176 
	`dißbÀ_nvøm
();

177  
ªtvÆ
;

178 
	}
}

180 
uch¨
 
	$ív_gë_ch¨_mem‹y
 (
ödex
)

182 
DECLARE_GLOBAL_DATA_PTR
;

184 i‡(
gd
->
ív_vÆid
) {

185  ( *((
uch¨
 *)(
gd
->
ív_addr
 + 
ödex
)) );

187  ( 
deÁu…_ívú⁄mít
[
ödex
] );

189 
	}
}

192 
uch¨
 *
	$ív_gë_addr
 (
ödex
)

194 
DECLARE_GLOBAL_DATA_PTR
;

196 i‡(
gd
->
ív_vÆid
) {

197  ( ((
uch¨
 *)(
gd
->
ív_addr
 + 
ödex
)) );

199  (&
deÁu…_ívú⁄mít
[
ödex
]);

201 
	}
}

203 
	$ív_ªloˇã
 ()

205 
DECLARE_GLOBAL_DATA_PTR
;

207 
	`DEBUGF
 ("%s[%d] off£à0x%lx\n", 
__FUNCTION__
,
__LINE__
,

208 
gd
->
ªloc_off
);

210 #ifde‡
CONFIG_AMIGAONEG3SE


211 
	`íabÀ_nvøm
();

214 #ifde‡
ENV_IS_EMBEDDED


219 
ív_±r
 = (
ív_t
 *)((
ul⁄g
Înv_±∏+ 
gd
->
ªloc_off
);

220 
	`DEBUGF
 ("%s[%d]Émbedded ENVáà%p\n", 
__FUNCTION__
,
__LINE__
,
ív_±r
);

225 
ív_±r
 = (
ív_t
 *)
	`mÆloc
 (
CFG_ENV_SIZE
);

226 
	`DEBUGF
 ("%s[%d] mÆlo˚d ENVáà%p\n", 
__FUNCTION__
,
__LINE__
,
ív_±r
);

232 
ív_gë_ch¨
 = 
ív_gë_ch¨_mem‹y
;

234 i‡(
gd
->
ív_vÆid
 == 0) {

235 #i‡
	`deföed
(
CONFIG_GTH
Ë|| deföed(
CFG_ENV_IS_NOWHERE
)

236 
	`puts
 ("Using defaultÉnvironment\n\n");

238 
	`puts
 ("*** Warning - bad CRC, using defaultÉnvironment\n\n");

239 
	`SHOW_BOOT_PROGRESS
 (-1);

242 i‡((
deÁu…_ívú⁄mít
Ë> 
ENV_SIZE
)

244 
	`puts
 ("*** Error - defaultÉnvironment isÅooÜarge\n\n");

248 
	`mem£t
 (
ív_±r
, 0, (
ív_t
));

249 
	`mem˝y
 (
ív_±r
->
d©a
,

250 
deÁu…_ívú⁄mít
,

251 (
deÁu…_ívú⁄mít
));

252 #ifde‡
CFG_REDUNDAND_ENVIRONMENT


253 
ív_±r
->
Êags
 = 0xFF;

255 
	`ív_¸c_upd©e
 ();

256 
gd
->
ív_vÆid
 = 1;

259 
	`ív_ªloˇã_•ec
 ();

261 
gd
->
ív_addr
 = (
ul⁄g
)&(
ív_±r
->
d©a
);

263 #ifde‡
CONFIG_AMIGAONEG3SE


264 
	`dißbÀ_nvøm
();

266 
	}
}

268 #ifde‡
CONFIG_AUTO_COMPLETE


269 
	$ív_com∂ëe
(*
v¨
, 
maxv
, *
cmdv
[], 
bufsz
, *
buf
)

271 
i
, 
nxt
, 
Àn
, 
vÆÀn
, 
found
;

272 c⁄° *
lvÆ
, *
rvÆ
;

274 
found
 = 0;

275 
cmdv
[0] = 
NULL
;

277 
Àn
 = 
	`°æí
(
v¨
);

279 
i
=0; 
	`ív_gë_ch¨
(iË!'\0'; i=
nxt
+1) {

281 
nxt
=
i
; 
	`ív_gë_ch¨
(nxt) != '\0'; ++nxt)

284 
lvÆ
 = 
	`ív_gë_addr
(
i
);

285 
rvÆ
 = 
	`°rchr
(
lvÆ
, '=');

286 i‡(
rvÆ
 !
NULL
) {

287 
vÆÀn
 = 
rvÆ
 - 
lvÆ
;

288 
rvÆ
++;

290 
vÆÀn
 = 
	`°æí
(
lvÆ
);

292 i‡(
Àn
 > 0 && (
vÆÀn
 <Üí || 
	`memcmp
(
lvÆ
, 
v¨
,Üen) != 0))

295 i‡(
found
 >
maxv
 - 2 || 
bufsz
 < 
vÆÀn
 + 1) {

296 
cmdv
[
found
++] = "...";

299 
cmdv
[
found
++] = 
buf
;

300 
	`mem˝y
(
buf
, 
lvÆ
, 
vÆÀn
); bu‡+vÆÀn; 
bufsz
 -= vallen;

301 *
buf
++ = '\0'; 
bufsz
--;

304 
cmdv
[
found
] = 
NULL
;

305  
found
;

306 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/env_flash.c

29 
	~<comm⁄.h
>

31 #i‡
deföed
(
CFG_ENV_IS_IN_FLASH
)

33 
	~<comm™d.h
>

34 
	~<ívú⁄mít.h
>

35 
	~<löux/°ddef.h
>

36 
	~<mÆloc.h
>

39 #i‡((
CONFIG_COMMANDS
&(
CFG_CMD_ENV
|
CFG_CMD_FLASH
)) == (CFG_CMD_ENV|CFG_CMD_FLASH))

40 
	#CMD_SAVEENV


	)

41 #ñi‡
deföed
(
CFG_ENV_ADDR_REDUND
)

42 #îr‹ 
C™nŸ
 
u£
 
CFG_ENV_ADDR_REDUND
 
wôhout
 
CFG_CMD_ENV
 & 
CFG_CMD_FLASH


45 #i‡
deföed
(
CFG_ENV_SIZE_REDUND
Ë&& (CFG_ENV_SIZE_REDUND < 
CFG_ENV_SIZE
)

46 #îr‹ 
CFG_ENV_SIZE_REDUND
 
should
 
nŸ
 
be
 
Àss
 
thí
 
CFG_ENV_SIZE


49 #ifde‡
CONFIG_INFERNO


50 #ifde‡
CFG_ENV_ADDR_REDUND


51 #îr‹ 
CFG_ENV_ADDR_REDUND
 
is
 
nŸ
 
im∂emíãd
 
CONFIG_INFERNO


55 * 
	gív_«me_•ec
 = "Flash";

57 #ifde‡
ENV_IS_EMBEDDED


59 
uch¨
 
ívú⁄mít
[];

60 
ív_t
 *
	gív_±r
 = (ív_à*)(&
ívú⁄mít
[0]);

62 #ifde‡
CMD_SAVEENV


64 
ív_t
 *
	gÊash_addr
 = (ív_à*)
CFG_ENV_ADDR
;

69 
ív_t
 *
	gív_±r
 = (ív_à*)
CFG_ENV_ADDR
;

70 #ifde‡
CMD_SAVEENV


71 
ív_t
 *
	gÊash_addr
 = (ív_à*)
CFG_ENV_ADDR
;

76 #ifde‡
CFG_ENV_ADDR_REDUND


77 
ív_t
 *
	gÊash_addr_√w
 = (ív_à*)
CFG_ENV_ADDR_REDUND
;

80 
ul⁄g
 
	gíd_addr
 = 
CFG_ENV_ADDR
 + 
CFG_ENV_SECT_SIZE
 - 1;

81 
ul⁄g
 
	gíd_addr_√w
 = 
CFG_ENV_ADDR_REDUND
 + 
CFG_ENV_SECT_SIZE
 - 1;

83 
	#ACTIVE_FLAG
 1

	)

84 
	#OBSOLETE_FLAG
 0

	)

87 
uch¨
 
deÁu…_ívú⁄mít
[];

88 
deÁu…_ívú⁄mít_size
;

91 
uch¨
 
	$ív_gë_ch¨_•ec
 (
ödex
)

93 
DECLARE_GLOBAL_DATA_PTR
;

95  ( *((
uch¨
 *)(
gd
->
ív_addr
 + 
ödex
)) );

96 
	}
}

98 #ifde‡
CFG_ENV_ADDR_REDUND


100 
	$ív_öô
()

102 
DECLARE_GLOBAL_DATA_PTR
;

103 
¸c1_ok
 = 0, 
¸c2_ok
 = 0;

104 
uch¨
 
Êag1
 = 
Êash_addr
->
Êags
;

105 
uch¨
 
Êag2
 = 
Êash_addr_√w
->
Êags
;

107 
ul⁄g
 
addr_deÁu…
 = (ul⁄g)&
deÁu…_ívú⁄mít
[0];

108 
ul⁄g
 
addr1
 = (ul⁄g)&(
Êash_addr
->
d©a
);

109 
ul⁄g
 
addr2
 = (ul⁄g)&(
Êash_addr_√w
->
d©a
);

111 #ifde‡
CONFIG_OMAP2420H4


112 
	`Êash_¥obe
();

114 if(
	`Êash_¥obe
() == 0)

115 
bad_Êash
;

118 
¸c1_ok
 = (
	`¸c32
(0, 
Êash_addr
->
d©a
, 
ENV_SIZE
Ë=Êash_addr->
¸c
);

119 
¸c2_ok
 = (
	`¸c32
(0, 
Êash_addr_√w
->
d©a
, 
ENV_SIZE
Ë=Êash_addr_√w->
¸c
);

121 i‡(
¸c1_ok
 && ! 
¸c2_ok
) {

122 
gd
->
ív_addr
 = 
addr1
;

123 
gd
->
ív_vÆid
 = 1;

124 } i‡(! 
¸c1_ok
 && 
¸c2_ok
) {

125 
gd
->
ív_addr
 = 
addr2
;

126 
gd
->
ív_vÆid
 = 1;

127 } i‡(! 
¸c1_ok
 && ! 
¸c2_ok
) {

128 
gd
->
ív_addr
 = 
addr_deÁu…
;

129 
gd
->
ív_vÆid
 = 0;

130 } i‡(
Êag1
 =
ACTIVE_FLAG
 && 
Êag2
 =
OBSOLETE_FLAG
) {

131 
gd
->
ív_addr
 = 
addr1
;

132 
gd
->
ív_vÆid
 = 1;

133 } i‡(
Êag1
 =
OBSOLETE_FLAG
 && 
Êag2
 =
ACTIVE_FLAG
) {

134 
gd
->
ív_addr
 = 
addr2
;

135 
gd
->
ív_vÆid
 = 1;

136 } i‡(
Êag1
 =
Êag2
) {

137 
gd
->
ív_addr
 = 
addr1
;

138 
gd
->
ív_vÆid
 = 2;

139 } i‡(
Êag1
 == 0xFF) {

140 
gd
->
ív_addr
 = 
addr1
;

141 
gd
->
ív_vÆid
 = 2;

142 } i‡(
Êag2
 == 0xFF) {

143 
gd
->
ív_addr
 = 
addr2
;

144 
gd
->
ív_vÆid
 = 2;

147 #ifde‡
CONFIG_OMAP2420H4


148 
bad_Êash
:

151 
	}
}

153 #ifde‡
CMD_SAVEENV


154 
	$ßvìnv
()

156 *
ßved_d©a
 = 
NULL
;

157 
rc
 = 1;

158 
Êag
 = 
OBSOLETE_FLAG
, 
√w_Êag
 = 
ACTIVE_FLAG
;

159 #i‡
CFG_ENV_SECT_SIZE
 > 
CFG_ENV_SIZE


160 
ul⁄g
 
up_d©a
 = 0;

163 
	`debug
 ("Protect off %08lX ... %08lX\n",

164 (
ul⁄g
)
Êash_addr
, 
íd_addr
);

166 i‡(
	`Êash_£˘_¥Ÿe˘
 (0, (
ul⁄g
)
Êash_addr
, 
íd_addr
)) {

167 
D⁄e
;

170 
	`debug
 ("Protect off %08lX ... %08lX\n",

171 (
ul⁄g
)
Êash_addr_√w
, 
íd_addr_√w
);

173 i‡(
	`Êash_£˘_¥Ÿe˘
 (0, (
ul⁄g
)
Êash_addr_√w
, 
íd_addr_√w
)) {

174 
D⁄e
;

177 #i‡
CFG_ENV_SECT_SIZE
 > 
CFG_ENV_SIZE


178 
up_d©a
 = (
íd_addr_√w
 + 1 - (()
Êash_addr_√w
 + 
CFG_ENV_SIZE
));

179 
	`debug
 ("D©®tÿßvê0x%x\n", 
up_d©a
);

180 i‡(
up_d©a
) {

181 i‡((
ßved_d©a
 = 
	`mÆloc
(
up_d©a
)Ë=
NULL
) {

182 
	`¥ötf
("UnableÅo saveÅheÑest of sector (%ld)\n",

183 
up_d©a
);

184 
D⁄e
;

186 
	`mem˝y
(
ßved_d©a
,

187 (*)(()
Êash_addr_√w
 + 
CFG_ENV_SIZE
), 
up_d©a
);

188 
	`debug
 ("Data (start 0x%x,Üen 0x%x) savedát 0x%x\n",

189 ()
Êash_addr_√w
 + 
CFG_ENV_SIZE
,

190 
up_d©a
, 
ßved_d©a
);

193 
	`puts
 ("Erasing Flash...");

194 
	`debug
 (" %08lX ... %08lX ...",

195 (
ul⁄g
)
Êash_addr_√w
, 
íd_addr_√w
);

197 i‡(
	`Êash_£˘_îa£
 ((
ul⁄g
)
Êash_addr_√w
, 
íd_addr_√w
)) {

198 
D⁄e
;

201 
	`puts
 ("WritingÅo Flash... ");

202 
	`debug
 (" %08lX ... %08lX ...",

203 (
ul⁄g
)&(
Êash_addr_√w
->
d©a
),

204 (
ív_±r
->
d©a
)+(
ul⁄g
)&(
Êash_addr_√w
->data));

205 i‡((
rc
 = 
	`Êash_wrôe
(
ív_±r
->
d©a
,

206 (
ul⁄g
)&(
Êash_addr_√w
->
d©a
),

207 (
ív_±r
->
d©a
))) ||

208 (
rc
 = 
	`Êash_wrôe
((*)&(
ív_±r
->
¸c
),

209 (
ul⁄g
)&(
Êash_addr_√w
->
¸c
),

210 (
ív_±r
->
¸c
))) ||

211 (
rc
 = 
	`Êash_wrôe
(&
Êag
,

212 (
ul⁄g
)&(
Êash_addr
->
Êags
),

213 (
Êash_addr
->
Êags
))) ||

214 (
rc
 = 
	`Êash_wrôe
(&
√w_Êag
,

215 (
ul⁄g
)&(
Êash_addr_√w
->
Êags
),

216 (
Êash_addr_√w
->
Êags
))))

218 
	`Êash_≥º‹
 (
rc
);

219 
D⁄e
;

221 
	`puts
 ("done\n");

223 #i‡
CFG_ENV_SECT_SIZE
 > 
CFG_ENV_SIZE


224 i‡(
up_d©a
) {

225 
	`debug
 ("RestoringÅheÑest of dataÅo 0x%xÜen 0x%x\n",

226 ()
Êash_addr_√w
 + 
CFG_ENV_SIZE
, 
up_d©a
);

227 i‡(
	`Êash_wrôe
(
ßved_d©a
,

228 ()
Êash_addr_√w
 + 
CFG_ENV_SIZE
,

229 
up_d©a
)) {

230 
	`Êash_≥º‹
(
rc
);

231 
D⁄e
;

236 
ív_t
 * 
ëmp
 = 
Êash_addr
;

237 
ul⁄g
 
…mp
 = 
íd_addr
;

239 
Êash_addr
 = 
Êash_addr_√w
;

240 
Êash_addr_√w
 = 
ëmp
;

242 
íd_addr
 = 
íd_addr_√w
;

243 
íd_addr_√w
 = 
…mp
;

246 
rc
 = 0;

247 
D⁄e
:

249 i‡(
ßved_d©a
)

250 
	`‰ì
 (
ßved_d©a
);

252 (Ë
	`Êash_£˘_¥Ÿe˘
 (1, (
ul⁄g
)
Êash_addr
, 
íd_addr
);

253 (Ë
	`Êash_£˘_¥Ÿe˘
 (1, (
ul⁄g
)
Êash_addr_√w
, 
íd_addr_√w
);

255  
rc
;

256 
	}
}

261 
	$ív_öô
()

263 
DECLARE_GLOBAL_DATA_PTR
;

264 #ifde‡
CONFIG_OMAP2420H4


265 
	`Êash_¥obe
();

267 if(
	`Êash_¥obe
() == 0)

268 
bad_Êash
;

270 #ifde‡
CMD_SAVEENV


271 i‡(
	`¸c32
(0, 
ív_±r
->
d©a
, (0x1000-4)Ë=ív_±r->
¸c
) {

273 
gd
->
ív_addr
 = (
ul⁄g
)&(
ív_±r
->
d©a
);

274 
gd
->
ív_vÆid
 = 1;

279 #ifde‡
CONFIG_OMAP2420H4


280 
bad_Êash
:

282 
gd
->
ív_addr
 = (
ul⁄g
)&
deÁu…_ívú⁄mít
[0];

283 
gd
->
ív_vÆid
 = 0;

285 
	}
}

287 #ifde‡
CMD_SAVEENV


289 
	$ßvìnv
()

291 
Àn
, 
rc
;

292 
ul⁄g
 
íd_addr
;

293 
ul⁄g
 
Êash_£˘_addr
;

294 #i‡
	`deföed
(
CFG_ENV_SECT_SIZE
Ë&& (CFG_ENV_SECT_SIZE > 
CFG_ENV_SIZE
)

295 
ul⁄g
 
Êash_off£t
;

296 
uch¨
 
ív_buf„r
[
CFG_ENV_SECT_SIZE
];

298 
uch¨
 *
ív_buf„r
 = (*)
ív_±r
;

300 
rcode
 = 0;

302 
	`¥ötf
("Fûe: %s, Func: %s, Löe: %d\n", 
__FILE__
,
__FUNCTION__
 , 
__LINE__
);

304 #i‡
	`deföed
(
CFG_ENV_SECT_SIZE
Ë&& (CFG_ENV_SECT_SIZE > 
CFG_ENV_SIZE
)

306 
Êash_off£t
 = ((
ul⁄g
)
Êash_addr
Ë& (
CFG_ENV_SECT_SIZE
-1);

307 
Êash_£˘_addr
 = ((
ul⁄g
)
Êash_addr
Ë& ~(
CFG_ENV_SECT_SIZE
-1);

309 
	`debug
 ( "copy old content: "

311 
Êash_£˘_addr
, (
ul⁄g
)
Êash_addr
, 
Êash_off£t
);

314 
	`mem˝y
 (
ív_buf„r
, (*)
Êash_£˘_addr
, 
CFG_ENV_SECT_SIZE
);

317 
	`mem˝y
 ((
uch¨
 *)(()
ív_buf„r
 + 
Êash_off£t
),

318 
ív_±r
,

319 
CFG_ENV_SIZE
);

321 
Àn
 = 
CFG_ENV_SECT_SIZE
;

323 
Êash_£˘_addr
 = (
ul⁄g
)
Êash_addr
;

324 
Àn
 = 
CFG_ENV_SIZE
;

327 #i‚de‡
CONFIG_INFERNO


328 
íd_addr
 = 
Êash_£˘_addr
 + 
Àn
 - 1;

332 
íd_addr
 = 
Êash_£˘_addr
 + 0x20000 - 1;

335 
	`debug
 ("Protect off %08lX ... %08lX\n",

336 (
ul⁄g
)
Êash_£˘_addr
, 
íd_addr
);

338 i‡(
	`Êash_£˘_¥Ÿe˘
 (0, 
Êash_£˘_addr
, 
íd_addr
))

341 
	`puts
 ("Erasing Flash...");

342 i‡(
	`Êash_£˘_îa£
 (
Êash_£˘_addr
, 
íd_addr
))

345 
	`puts
 ("WritingÅo Flash... ");

346 
rc
 = 
	`Êash_wrôe
(
ív_buf„r
, 
Êash_£˘_addr
, 
Àn
);

347 i‡(
rc
 != 0) {

348 
	`Êash_≥º‹
 (
rc
);

349 
rcode
 = 1;

351 
	`puts
 ("done\n");

355 (Ë
	`Êash_£˘_¥Ÿe˘
 (1, 
Êash_£˘_addr
, 
íd_addr
);

356  
rcode
;

357 
	}
}

363 
	$ív_ªloˇã_•ec
 ()

365 #i‡!
	`deföed
(
ENV_IS_EMBEDDED
Ë|| deföed(
CFG_ENV_ADDR_REDUND
)

366 #ifde‡
CFG_ENV_ADDR_REDUND


367 
DECLARE_GLOBAL_DATA_PTR
;

369 i‡(
gd
->
ív_addr
 !(
ul⁄g
)&(
Êash_addr
->
d©a
)) {

370 
ív_t
 * 
ëmp
 = 
Êash_addr
;

371 
ul⁄g
 
…mp
 = 
íd_addr
;

373 
Êash_addr
 = 
Êash_addr_√w
;

374 
Êash_addr_√w
 = 
ëmp
;

376 
íd_addr
 = 
íd_addr_√w
;

377 
íd_addr_√w
 = 
…mp
;

380 i‡(
Êash_addr_√w
->
Êags
 !
OBSOLETE_FLAG
 &&

381 
	`¸c32
(0, 
Êash_addr_√w
->
d©a
, 
ENV_SIZE
) ==

382 
Êash_addr_√w
->
¸c
) {

383 
Êag
 = 
OBSOLETE_FLAG
;

385 
gd
->
ív_vÆid
 = 2;

386 
	`Êash_£˘_¥Ÿe˘
 (0, (
ul⁄g
)
Êash_addr_√w
, 
íd_addr_√w
);

387 
	`Êash_wrôe
(&
Êag
,

388 (
ul⁄g
)&(
Êash_addr_√w
->
Êags
),

389 (
Êash_addr_√w
->
Êags
));

390 
	`Êash_£˘_¥Ÿe˘
 (1, (
ul⁄g
)
Êash_addr_√w
, 
íd_addr_√w
);

393 i‡(
Êash_addr
->
Êags
 !
ACTIVE_FLAG
 &&

394 (
Êash_addr
->
Êags
 & 
ACTIVE_FLAG
) == ACTIVE_FLAG) {

395 
Êag
 = 
ACTIVE_FLAG
;

397 
gd
->
ív_vÆid
 = 2;

398 
	`Êash_£˘_¥Ÿe˘
 (0, (
ul⁄g
)
Êash_addr
, 
íd_addr
);

399 
	`Êash_wrôe
(&
Êag
,

400 (
ul⁄g
)&(
Êash_addr
->
Êags
),

401 (
Êash_addr
->
Êags
));

402 
	`Êash_£˘_¥Ÿe˘
 (1, (
ul⁄g
)
Êash_addr
, 
íd_addr
);

405 i‡(
gd
->
ív_vÆid
 == 2)

406 
	`puts
 ("*** Warning - someÖroblems detected "

409 #i‡((
CONFIG_COMMANDS
&(
CFG_CMD_ENV
|
CFG_CMD_FLASH
)) == (CFG_CMD_ENV|CFG_CMD_FLASH))

410 
	`mem˝y
 (
ív_±r
, (*)
Êash_addr
, 
CFG_ENV_SIZE
);

413 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/env_nand.c

1 
	~<comm⁄.h
>

3 #i‡
deföed
(
CFG_ENV_IS_IN_NAND
)

5 
	~<comm™d.h
>

6 
	~<ívú⁄mít.h
>

7 
	~<löux/°ddef.h
>

8 
	~<mÆloc.h
>

9 
	~<«nd_≠i.h
>

12 
	#CMD_SAVEENV


	)

13 #ñi‡
deföed
(
CFG_ENV_ADDR_REDUND
)

14 #îr‹ 
C™nŸ
 
u£
 
CFG_ENV_ADDR_REDUND
 
wôhout
 
CFG_CMD_ENV
 & 
CFG_CMD_FLASH


17 * 
	gív_«me_•ec
 = "NAND Flash";

19 
ív_t
 *
	gív_±r
;

20 
ív_t
 *
	gÊash_addr
;

22 
uch¨
 
deÁu…_ívú⁄mít
[];

23 
deÁu…_ívú⁄mít_size
;

24 #i‡
deföed
(
MTK_NAND
)

26 
is_«nd_∑ge_2048
;

29 
uch¨
 
	$ív_gë_ch¨_•ec
 (
ödex
)

31 
DECLARE_GLOBAL_DATA_PTR
;

33  ( *((
uch¨
 *)(
gd
->
ív_addr
 + 
ödex
)) );

34 
	}
}

37 
	$ív_öô
()

39 
DECLARE_GLOBAL_DATA_PTR
;

41 
gd
->
ív_addr
 = (
ul⁄g
)&
deÁu…_ívú⁄mít
[0];

42 
gd
->
ív_vÆid
 = 0;

44 
	}
}

46 
	$«nd_ív_öô
()

48 
DECLARE_GLOBAL_DATA_PTR
;

50 
ív_±r
 = (
ív_t
 *)
	`mÆloc
(
CFG_ENV_SIZE
);

51 i‡(
ív_±r
 =
NULL
)

54 #ifde‡
CMD_SAVEENV


55 
Êash_addr
 = (
ív_t
 *)(
CFG_ENV_ADDR
 - 
CFG_FLASH_BASE
);

58 i‡(
	`ø«nd_ªad
((
u8
 *)
ív_±r
, ()
Êash_addr
, 
CFG_ENV_SIZE
) != CFG_ENV_SIZE)

60 i‡(
	`¸c32
(0, 
ív_±r
->
d©a
, 
ENV_SIZE
Ë=ív_±r->
¸c
) {

61 
gd
->
ív_addr
 = (
ul⁄g
)&(
ív_±r
->
d©a
);

62 
gd
->
ív_vÆid
 = 1;

66 
gd
->
ív_addr
 = (
ul⁄g
)&
deÁu…_ívú⁄mít
[0];

67 
gd
->
ív_vÆid
 = 0;

69 
	}
}

71 #ifde‡
CMD_SAVEENV


73 
	$ßvìnv
()

75 
Àn
, 
rc
;

76 
ul⁄g
 
Êash_£˘_addr
;

77 
rcode
 = 0;

78 #i‡
	`deföed
(
MTK_NAND
)

79 
ul⁄g
 
Êash_off£t
;

80 
uch¨
* 
ív_buf„r
 = 
	`mÆloc
(
CFG_BLOCKSIZE
);

81 i‡(
ív_buf„r
 =
NULL
)

84 #i‡
	`deföed
(
CFG_BLOCKSIZE
Ë&& (CFG_BLOCKSIZE > 
CFG_ENV_SIZE
)

85 
ul⁄g
 
Êash_off£t
;

86 
uch¨
 
ív_buf„r
[
CFG_BLOCKSIZE
];

88 
uch¨
 *
ív_buf„r
 = (*)
ív_±r
;

92 #i‡(
	`deföed
(
CFG_BLOCKSIZE
Ë&& (CFG_BLOCKSIZE > 
CFG_ENV_SIZE
)Ë|| (deföed(
MTK_NAND
))

94 
Êash_off£t
 = ((
ul⁄g
)
Êash_addr
Ë& (
CFG_BLOCKSIZE
-1);

95 
Êash_£˘_addr
 = ((
ul⁄g
)
Êash_addr
Ë& ~(
CFG_BLOCKSIZE
-1);

96 
Àn
 = 
CFG_BLOCKSIZE
;

105 i‡(
	`ø«nd_ªad
(
ív_buf„r
, 
Êash_£˘_addr
, 
Àn
) !=Üen)

107 
rcode
 = 1;

108 
out
;

112 
	`mem˝y
 ((
uch¨
 *)(()
ív_buf„r
 + 
Êash_off£t
),

113 
ív_±r
, 
CFG_ENV_SIZE
);

115 
Êash_£˘_addr
 = (
ul⁄g
)
Êash_addr
;

116 
Àn
 = 
CFG_ENV_SIZE
;

119 
	`puts
 ("Erasing NAND Flash...\n");

120 i‡(
	`ø«nd_îa£
(
Êash_£˘_addr
, 
Àn
))

122 
rcode
 = 1;

123 
out
;

125 
	`puts
 ("WritingÅo NAND Flash...\n");

126 
rc
 = 
	`ø«nd_wrôe
(
ív_buf„r
, 
Êash_£˘_addr
, 
Àn
);

127 i‡(
rc
 !
Àn
) {

128 
	`¥ötf
 ("îr‹ %d!\n", 
rc
);

129 
rcode
 = 1;

131 
	`puts
 ("done\n");

133 
out
:

134 #i‡
	`deföed
(
MTK_NAND
)

135 
	`‰ì
(
ív_buf„r
);

137  
rcode
;

138 
	}
}

143 
	$ív_ªloˇã_•ec
 ()

145 #i‡!
	`deföed
(
ENV_IS_EMBEDDED
)

146 
	`ø«nd_ªad
((
u8
 *)
ív_±r
, ()
Êash_addr
, 
CFG_ENV_SIZE
);

148 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/env_spi.c

1 
	~<comm⁄.h
>

3 #i‡
deföed
(
CFG_ENV_IS_IN_SPI
)

5 
	~<comm™d.h
>

6 
	~<ívú⁄mít.h
>

7 
	~<löux/°ddef.h
>

8 
	~<mÆloc.h
>

9 
	~<•i_≠i.h
>

13 
	#CMD_SAVEENV


	)

14 #ñi‡
deföed
(
CFG_ENV_ADDR_REDUND
)

15 #îr‹ 
C™nŸ
 
u£
 
CFG_ENV_ADDR_REDUND
 
wôhout
 
CFG_CMD_ENV
 & 
CFG_CMD_FLASH


18 * 
	gív_«me_•ec
 = "SPI Flash";

20 #ifde‡
ENV_IS_EMBEDDED


22 
uch¨
 
ívú⁄mít
[];

23 
ív_t
 *
	gív_±r
 = (ív_à*)(&
ívú⁄mít
[0]);

24 #ifde‡
CMD_SAVEENV


25 
ív_t
 *
	gÊash_addr
 = (ív_à*)(
CFG_ENV_ADDR
 - 
CFG_FLASH_BASE
);

30 
ív_t
 *
	gív_±r
;

31 #ifde‡
CMD_SAVEENV


32 
ív_t
 *
	gÊash_addr
 = (ív_à*)(
CFG_ENV_ADDR
 - 
CFG_FLASH_BASE
);

37 
uch¨
 
deÁu…_ívú⁄mít
[];

38 
deÁu…_ívú⁄mít_size
;

41 
uch¨
 
	$ív_gë_ch¨_•ec
 (
ödex
)

43 
DECLARE_GLOBAL_DATA_PTR
;

45  ( *((
uch¨
 *)(
gd
->
ív_addr
 + 
ödex
)) );

46 
	}
}

49 
	$ív_öô
()

51 
DECLARE_GLOBAL_DATA_PTR
;

53 
gd
->
ív_addr
 = (
ul⁄g
)&
deÁu…_ívú⁄mít
[0];

54 
gd
->
ív_vÆid
 = 0;

56 
	}
}

58 
	$•i_ív_öô
()

60 
DECLARE_GLOBAL_DATA_PTR
;

62 
ív_±r
 = (
ív_t
 *)
	`mÆloc
(
CFG_ENV_SIZE
);

63 i‡(
ív_±r
 =
NULL
)

66 i‡(
	`ø•i_ªad
((
u8
 *)
ív_±r
, ()
Êash_addr
, 
CFG_ENV_SIZE
) != CFG_ENV_SIZE)

68 i‡(
	`¸c32
(0, 
ív_±r
->
d©a
, 
ENV_SIZE
Ë=ív_±r->
¸c
) {

69 
gd
->
ív_addr
 = (
ul⁄g
)&(
ív_±r
->
d©a
);

70 
gd
->
ív_vÆid
 = 1;

74 
gd
->
ív_addr
 = (
ul⁄g
)&
deÁu…_ívú⁄mít
[0];

75 
gd
->
ív_vÆid
 = 0;

77 
	}
}

79 #ifde‡
CMD_SAVEENV


81 
	$ßvìnv
()

83 
Àn
, 
rc
;

84 
ul⁄g
 
Êash_£˘_addr
;

85 #i‡
	`deföed
(
CFG_ENV_SECT_SIZE
Ë&& (CFG_ENV_SECT_SIZE > 
CFG_ENV_SIZE
)

86 
ul⁄g
 
Êash_off£t
;

87 
uch¨
 
ív_buf„r
[
CFG_ENV_SECT_SIZE
];

89 
uch¨
 *
ív_buf„r
 = (*)
ív_±r
;

91 
rcode
 = 0;

93 #i‡
	`deföed
(
CFG_ENV_SECT_SIZE
Ë&& (CFG_ENV_SECT_SIZE > 
CFG_ENV_SIZE
)

94 
Êash_off£t
 = ((
ul⁄g
)
Êash_addr
Ë& (
CFG_ENV_SECT_SIZE
-1);

95 
Êash_£˘_addr
 = ((
ul⁄g
)
Êash_addr
Ë& ~(
CFG_ENV_SECT_SIZE
-1);

96 
Àn
 = 
CFG_ENV_SECT_SIZE
;

105 i‡(
	`ø•i_ªad
(
ív_buf„r
, 
Êash_£˘_addr
, 
Àn
) !=Üen)

109 
	`mem˝y
 ((
uch¨
 *)(()
ív_buf„r
 + 
Êash_off£t
),

110 
ív_±r
, 
CFG_ENV_SIZE
);

112 
Êash_£˘_addr
 = (
ul⁄g
)
Êash_addr
;

113 
Àn
 = 
CFG_ENV_SIZE
;

116 
	`puts
 ("Erasing SPI Flash...\n");

117 i‡(
	`ø•i_îa£
(
Êash_£˘_addr
, 
Àn
))

120 
	`puts
 ("WritingÅo SPI Flash...\n");

121 
rc
 = 
	`ø•i_wrôe
(
ív_buf„r
, 
Êash_£˘_addr
, 
Àn
);

122 i‡(
rc
 !
Àn
) {

123 
	`¥ötf
 ("îr‹ %d!\n", 
rc
);

124 
rcode
 = 1;

126 
	`puts
 ("done\n");

129  
rcode
;

130 
	}
}

135 
	$ív_ªloˇã_•ec
 ()

137 #i‡!
	`deföed
(
ENV_IS_EMBEDDED
)

138 
	`ø•i_ªad
((
u8
 *)
ív_±r
, ()
Êash_addr
, 
CFG_ENV_SIZE
);

140 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/environment.c

24 
	~<c⁄fig.h
>

25 
	~<ívú⁄mít.h
>

31 #i‡
deföed
(
__APPLE__
)

33 
	#SYM_CHAR
 "_"

	)

35 
	#SYM_CHAR


	)

42 #i‡
deföed
(
ENV_IS_EMBEDDED
)

49 #i‡(
deföed
(
CONFIG_CMI
) || \

50 
deföed
(
CONFIG_FADS
) || \

51 
deföed
(
CONFIG_HYMOD
) || \

52 
deföed
(
CONFIG_ICU862
) || \

53 
deföed
(
CONFIG_R360MPI
) || \

54 
deföed
(
CONFIG_TQM8xxL
) || \

55 
deföed
(
CONFIG_RRVISION
) || \

56 
deföed
(
CONFIG_TRAB
) || \

57 
deföed
(
CONFIG_PPCHAMELEONEVB
) ) && \

58 
	$deföed
(
ENV_CRC
)

60 
	#__PPCENV__
 
	`__©åibuã__
 ((
	`£˘i⁄
(".µ˚nv")))

	)

61 
	#__PPCTEXT__
 
	`__©åibuã__
 ((
	`£˘i⁄
(".ãxt")))

	)

63 #ñi‡
	`deföed
(
USE_HOSTCC
)

64 
	#__PPCENV__


	)

65 
	#__PPCTEXT__


	)

69 
	#__PPCENV__
 
	`__©åibuã__
 ((
	`£˘i⁄
(".ãxt")))

	)

70 
	#__PPCTEXT__
 
	`__©åibuã__
 ((
	`£˘i⁄
(".ãxt")))

	)

76 
	#GEN_SYMNAME
(
°r
Ë
SYM_CHAR
 #°r

	)

77 
	#GEN_VALUE
(
°r
Ë#°r

	)

78 
	#GEN_ABS
(
«me
, 
vÆue
) \

79 
	`asm
 (".glob»" 
	`GEN_SYMNAME
(
«me
)); \

80 
	`asm
 (
	`GEN_SYMNAME
(
«me
Ë" = " 
	`GEN_VALUE
(
vÆue
))

	)

86 
	#XMK_STR
(
x
Ë#x

	)

87 
	#MK_STR
(
x
Ë
	`XMK_STR
(x)

	)

93 #i‡!
	`deföed
(
ENV_CRC
)

94 
	#ENV_CRC
 ~0

	)

97 
ív_t
 
ívú⁄mít
 
__PPCENV__
 = {

98 
ENV_CRC
,

99 #ifde‡
CFG_REDUNDAND_ENVIRONMENT


103 #i‡
	`deföed
(
CONFIG_BOOTARGS
)

104 "boŸ¨gs=" 
CONFIG_BOOTARGS
 "\0"

106 #i‡
	`deföed
(
CONFIG_BOOTCOMMAND
)

107 "boŸcmd=" 
CONFIG_BOOTCOMMAND
 "\0"

109 #i‡
	`deföed
(
CONFIG_RAMBOOTCOMMAND
)

110 "ømboŸ=" 
CONFIG_RAMBOOTCOMMAND
 "\0"

112 #i‡
	`deföed
(
CONFIG_NFSBOOTCOMMAND
)

113 "nfsboŸ=" 
CONFIG_NFSBOOTCOMMAND
 "\0"

115 #i‡
	`deföed
(
CONFIG_BOOTDELAY
) && (CONFIG_BOOTDELAY >= 0)

116 "boŸdñay=" 
	`MK_STR
(
CONFIG_BOOTDELAY
) "\0"

118 #i‡
	`deföed
(
CONFIG_BAUDRATE
) && (CONFIG_BAUDRATE >= 0)

119 "baudøã=" 
	`MK_STR
(
CONFIG_BAUDRATE
) "\0"

121 #ifdef 
CONFIG_LOADS_ECHO


122 "lﬂds_echo=" 
	`MK_STR
(
CONFIG_LOADS_ECHO
) "\0"

124 #ifdef 
CONFIG_ETHADDR


125 "ëhaddr=" 
	`MK_STR
(
CONFIG_ETHADDR
) "\0"

127 #ifdef 
CONFIG_ETH1ADDR


128 "ëh1addr=" 
	`MK_STR
(
CONFIG_ETH1ADDR
) "\0"

130 #ifdef 
CONFIG_ETH2ADDR


131 "ëh2addr=" 
	`MK_STR
(
CONFIG_ETH2ADDR
) "\0"

133 #ifdef 
CONFIG_ETH3ADDR


134 "ëh3addr=" 
	`MK_STR
(
CONFIG_ETH3ADDR
) "\0"

136 #ifdef 
CONFIG_ETHPRIME


137 "ëh¥ime=" 
CONFIG_ETHPRIME
 "\0"

139 #ifdef 
CONFIG_IPADDR


140 "ùaddr=" 
	`MK_STR
(
CONFIG_IPADDR
) "\0"

142 #ifdef 
CONFIG_SERVERIP


143 "£rvîù=" 
	`MK_STR
(
CONFIG_SERVERIP
) "\0"

145 #ifdef 
CFG_AUTOLOAD


146 "autﬁﬂd=" 
CFG_AUTOLOAD
 "\0"

148 #ifdef 
CONFIG_ROOTPATH


149 "roŸ∑th=" 
	`MK_STR
(
CONFIG_ROOTPATH
) "\0"

151 #ifdef 
CONFIG_GATEWAYIP


152 "g©ewayù=" 
	`MK_STR
(
CONFIG_GATEWAYIP
) "\0"

154 #ifdef 
CONFIG_NETMASK


155 "√tmask=" 
	`MK_STR
(
CONFIG_NETMASK
) "\0"

157 #ifdef 
CONFIG_HOSTNAME


158 "ho°«me=" 
	`MK_STR
(
CONFIG_HOSTNAME
) "\0"

160 #ifdef 
CONFIG_BOOTFILE


161 "boŸfûe=" 
	`MK_STR
(
CONFIG_BOOTFILE
) "\0"

163 #ifdef 
CONFIG_LOADADDR


164 "lﬂdaddr=" 
	`MK_STR
(
CONFIG_LOADADDR
) "\0"

166 #ifdef 
CONFIG_PREBOOT


167 "¥eboŸ=" 
CONFIG_PREBOOT
 "\0"

169 #ifdef 
CONFIG_CLOCKS_IN_MHZ


172 #i‡
	`deföed
(
CONFIG_PCI_BOOTDELAY
) && (CONFIG_PCI_BOOTDELAY > 0)

173 "pcidñay=" 
	`MK_STR
(
CONFIG_PCI_BOOTDELAY
) "\0"

177 
	}
};

178 #ifde‡
CFG_ENV_ADDR_REDUND


179 
ív_t
 
ªdund™d_ívú⁄mít
 
	g__PPCENV__
 = {

196 
ív_size
 
	g__PPCTEXT__
 = (
ív_t
);

201 
GEN_ABS
(
ív_off£t
, 
CFG_ENV_OFFSET
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/exports.c

1 
	~<comm⁄.h
>

2 
	~<exp‹ts.h
>

4 
	$dummy
()

6 
	}
}

8 
	$gë_vîsi⁄
()

10  
XF_VERSION
;

11 
	}
}

13 
	$jum±abÀ_öô
 ()

15 
DECLARE_GLOBAL_DATA_PTR
;

16 
i
;

18 
gd
->
jt
 = (**Ë
	`mÆloc
 (
XF_MAX
 *  (*));

19 
i
 = 0; i < 
XF_MAX
; i++)

20 
gd
->
jt
[
i
] = (*Ë
dummy
;

22 
gd
->
jt
[
XF_gë_vîsi⁄
] = (*Ë
gë_vîsi⁄
;

23 
gd
->
jt
[
XF_mÆloc
] = (*Ë
mÆloc
;

24 
gd
->
jt
[
XF_‰ì
] = (*Ë
‰ì
;

25 
gd
->
jt
[
XF_gë_timî
] = (*)
gë_timî
;

26 
gd
->
jt
[
XF_udñay
] = (*)
udñay
;

27 #i‡
	`deföed
(
CONFIG_I386
Ë|| deföed(
CONFIG_PPC
)

28 
gd
->
jt
[
XF_ö°Æl_hdÃ
] = (*Ë
úq_ö°Æl_h™dÀr
;

29 
gd
->
jt
[
XF_‰ì_hdÃ
] = (*Ë
úq_‰ì_h™dÀr
;

31 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/flash.c

26 
	~<comm⁄.h
>

27 
	~<Êash.h
>

29 
ul⁄g
 
	gπ2880_Êash_°¨t_t
;

32 #i‡!
deföed
(
CFG_NO_FLASH
)

34 
Êash_öfo_t
 
Êash_öfo
[
CFG_MAX_FLASH_BANKS
];

49 
	$Êash_¥Ÿe˘
 (
Êag
, 
ul⁄g
 
‰om
, ul⁄g 
to
, 
Êash_öfo_t
 *
öfo
)

51 
ul⁄g
 
b_íd
 = 
öfo
->
°¨t
[0] + info->
size
 - 1;

52 
s_íd
 = 
öfo
->
£˘‹_cou¡
 - 1;

53 
i
;

55 
	`debug
 ("flash_protect %s: from 0x%08lXÅo 0x%08lX\n",

56 (
Êag
 & 
FLAG_PROTECT_SET
) ? "ON" :

57 (
Êag
 & 
FLAG_PROTECT_CLEAR
) ? "OFF" : "???",

58 
‰om
, 
to
);

61 i‡(
öfo
->
£˘‹_cou¡
 =0 || info->
size
 =0 || 
to
 < 
‰om
) {

68 i‡(
öfo
->
Êash_id
 =
FLASH_UNKNOWN
 ||

69 
to
 < 
öfo
->
°¨t
[0] || 
‰om
 > 
b_íd
) {

73 
i
=0; i<
öfo
->
£˘‹_cou¡
; ++i) {

74 
ul⁄g
 
íd
;

76 
íd
 = (
i
 =
s_íd
Ë? 
b_íd
 : 
öfo
->
°¨t
[i + 1] - 1;

81 i‡(
‰om
 <
íd
 && 
to
 >
öfo
->
°¨t
[
i
]) {

82 i‡(
Êag
 & 
FLAG_PROTECT_CLEAR
) {

83 #i‡
	`deföed
(
CFG_FLASH_PROTECTION
)

84 
	`Êash_ªÆ_¥Ÿe˘
(
öfo
, 
i
, 0);

86 
öfo
->
¥Ÿe˘
[
i
] = 0;

88 
	`debug
 ("¥Ÿe˘ of‡%d\n", 
i
);

90 i‡(
Êag
 & 
FLAG_PROTECT_SET
) {

91 #i‡
	`deföed
(
CFG_FLASH_PROTECTION
)

92 
	`Êash_ªÆ_¥Ÿe˘
(
öfo
, 
i
, 1);

94 
öfo
->
¥Ÿe˘
[
i
] = 1;

100 
	}
}

105 
Êash_öfo_t
 *

106 
	$addr2öfo
 (
ul⁄g
 
addr
)

108 #i‚de‡
CONFIG_SPD823TS


109 
Êash_öfo_t
 *
öfo
;

110 
i
;

112 
i
=0, 
öfo
=&
Êash_öfo
[0]; i<
CFG_MAX_FLASH_BANKS
; ++i, ++info) {

113 i‡(
öfo
->
Êash_id
 !
FLASH_UNKNOWN
 &&

114 
addr
 >
öfo
->
°¨t
[0] &&

120 
addr
 <
öfo
->
°¨t
[0] + info->
size
 - 1) {

121  (
öfo
);

126  (
NULL
);

127 
	}
}

143 
	$Êash_wrôe
 (
uch¨
 *
§c
, 
ul⁄g
 
addr
, ul⁄g 
˙t
)

145 #ifde‡
CONFIG_SPD823TS


146  (
ERR_TIMOUT
);

148 
i
;

149 
ul⁄g
 
íd
 = 
addr
 + 
˙t
 - 1;

150 
Êash_öfo_t
 *
öfo_fú°
 = 
	`addr2öfo
 (
addr
);

151 
Êash_öfo_t
 *
öfo_œ°
 = 
	`addr2öfo
 (
íd
 );

152 
Êash_öfo_t
 *
öfo
;

156 i‡(
˙t
 == 0) {

157  (
ERR_OK
);

160 i‡(!
öfo_fú°
 || !
öfo_œ°
) {

161  (
ERR_INVAL
);

164 
öfo
 = 
öfo_fú°
; infÿ<
öfo_œ°
; ++info) {

165 
ul⁄g
 
b_íd
 = 
öfo
->
°¨t
[0] + info->
size
;

166 
s_íd
 = 
öfo
->
£˘‹_cou¡
 - 1;

167 
i
=0; i<
öfo
->
£˘‹_cou¡
; ++i) {

168 
ul⁄g
 
e_addr
 = (
i
 =
s_íd
Ë? 
b_íd
 : 
öfo
->
°¨t
[i + 1];

170 i‡((
íd
 >
öfo
->
°¨t
[
i
]Ë&& (
addr
 < 
e_addr
) &&

171 (
öfo
->
¥Ÿe˘
[
i
] != 0) ) {

172  (
ERR_PROTECTED
);

176 
π2880_Êash_°¨t_t
 = 
	`gë_timî
(0);

178 
öfo
 = 
öfo_fú°
; infÿ<
öfo_œ°
 && 
˙t
>0; ++info) {

179 
ul⁄g
 
Àn
;

181 
Àn
 = 
öfo
->
°¨t
[0] + info->
size
 - 
addr
;

184 i‡(
Àn
 > 
˙t
)

185 
Àn
 = 
˙t
;

186 i‡((
i
 = 
	`wrôe_buff
(
öfo
, 
§c
, 
addr
, 
Àn
)) != 0) {

187  (
i
);

189 
˙t
 -
Àn
;

190 
addr
 +
Àn
;

191 
§c
 +
Àn
;

193  (
ERR_OK
);

195 
	}
}

200 
	$Êash_≥º‹
 (
îr
)

202 
îr
) {

203 
ERR_OK
:

205 
ERR_TIMOUT
:

206 
	`puts
 ("Timeout writingÅo Flash\n");

208 
ERR_NOT_ERASED
:

209 
	`puts
 ("FlashÇot Erased\n");

211 
ERR_PROTECTED
:

212 
	`puts
 ("Can't writeÅoÖrotected Flash sectors\n");

214 
ERR_INVAL
:

215 
	`puts
 ("Outsideávailable Flash\n");

217 
ERR_ALIGN
:

218 
	`puts
 ("Startánd/orÉndáddressÇot on sector boundary\n");

220 
ERR_UNKNOWN_FLASH_VENDOR
:

221 
	`puts
 ("Unknown Vendor of Flash\n");

223 
ERR_UNKNOWN_FLASH_TYPE
:

224 
	`puts
 ("Unknown Type of Flash\n");

226 
ERR_PROG_ERROR
:

227 
	`puts
 ("General Flash Programming Error\n");

230 
	`¥ötf
 ("%s[%d] FIXME:Ñc=%d\n", 
__FILE__
, 
__LINE__
, 
îr
);

233 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/lists.c

1 
	~<comm⁄.h
>

2 
	~<mÆloc.h
>

3 
	~<li°s.h
>

5 
	#MAX
(
a
,
b
Ë((◊)>(b)Ë? (aË: (b))

	)

6 
	#MIN
(
a
,
b
Ë((◊)<(b)Ë? (aË: (b))

	)

7 
	#CAT4CHARS
(
a
,
b
,
c
,
d
Ë(◊<<24Ë| (b<<16Ë| (c<<8Ë| d)

	)

10 
	#kDeÁu…AŒoˇti⁄Pî˚¡In¸ó£
 10

	)

13 
	#kDeÁu…AŒoˇti⁄möNumIãmsIn¸ó£
 4

	)

19 
	#NUMITEMSPERALLOC
(
li°
Ë
	`MAX
(((*li°)->
li°Size
 * \

20 ((*
li°
)->
≥r˚¡In¸ó£
 + 100)) / 100, \

21 (*
li°
)->
möNumIãmsIn¸ó£
 )

	)

23 
	#ITEMPTR
(
li°
,
ôem
Ë&(((*)&(*li°)->
ôemLi°
)[(*÷i°))->
ôemSize
 * (ôem)])

	)

25 
	#LIST_SIGNATURE
 
	`CAT4CHARS
('L', 'I', 'S', 'T');

	)

27 
	#ˇŒoc
(
size
,
num
Ë
	`mÆloc
(size*num)

	)

31 
H™dÀ
 
	$NewH™dÀ
 (
numByãs
)

33 *
memPå
;

34 
H™dÀRec‹d
 *
h™På
;

36 
memPå
 = 
	`ˇŒoc
 (
numByãs
, 1);

37 
h™På
 = (
H™dÀRec‹d
 *Ë
	`ˇŒoc
 ( (HandleRecord), 1);

38 i‡(
h™På
 && (
memPå
 || 
numByãs
 == 0)) {

39 
h™På
->
±r
 = 
memPå
;

40 
h™På
->
size
 = 
numByãs
;

41  (
H™dÀ
Ë
h™På
;

43 
	`‰ì
 (
memPå
);

44 
	`‰ì
 (
h™På
);

45  
NULL
;

47 
	}
}

50 
	$Di•o£H™dÀ
 (
H™dÀ
 
h™dÀ
)

52 i‡(
h™dÀ
) {

53 
	`‰ì
 (*
h™dÀ
);

54 
	`‰ì
 ((*Ë
h™dÀ
);

56 
	}
}

59 
	$GëH™dÀSize
 (
H™dÀ
 
h™dÀ
)

61  ((
H™dÀRec‹d
 *Ë
h™dÀ
)->
size
;

62 
	}
}

65 
	$SëH™dÀSize
 (
H™dÀ
 
h™dÀ
, 
√wSize
)

67 
H™dÀRec‹d
 *
h™RecPå
 = (H™dÀRec‹d *Ë
h™dÀ
;

68 *
√wPå
, *
ﬁdPå
;

69 
ﬁdSize
;

72 
ﬁdPå
 = 
h™RecPå
->
±r
;

73 
ﬁdSize
 = 
h™RecPå
->
size
;

75 i‡(
ﬁdSize
 =
√wSize
)

78 i‡(
ﬁdPå
 =
NULL
) {

79 
√wPå
 = 
	`mÆloc
 (
√wSize
);

81 
√wPå
 = 
	`ªÆloc
 (
ﬁdPå
, 
√wSize
);

83 i‡(
√wPå
 || (
√wSize
 == 0)) {

84 
h™RecPå
->
±r
 = 
√wPå
;

85 
h™RecPå
->
size
 = 
√wSize
;

86 i‡(
√wSize
 > 
ﬁdSize
)

87 
	`mem£t
 ((*Ë
√wPå
 + 
ﬁdSize
, 0, 
√wSize
 - oldSize);

91 
	}
}

93 #ifdef 
CFG_ALL_LIST_FUNCTIONS


96 
	$Li°MemBlockCmp
 (*
a
, *
b
, 
size
)

98  
	`memcmp
 (
a
, 
b
, 
size
);

99 
	}
}

114 
	$BöSórch
 ( *
¨øy
, 
numEÀmíts
, 
ñemítSize
,

115 *
ôemPå
, 
Com∑ªFun˘i⁄
 
com∑ªFun˘i⁄
)

117 
low
, 
high
, 
mid
, 
cmp
;

118 *
¨øyIãmPå
;

120 
low
 = 0, 
high
 = 
numEÀmíts
 - 1, 
mid
 = 0, 
cmp
 = -1;Üow <= high;) {

121 
mid
 = (
low
 + 
high
) >> 1;

123 
¨øyIãmPå
 = (*Ë(((*Ë
¨øy
Ë+ (
mid
 * 
ñemítSize
));

124 
cmp
 = 
com∑ªFun˘i⁄


125 ? 
	`com∑ªFun˘i⁄
 (
ôemPå
, 
¨øyIãmPå
)

126 : 
	`Li°MemBlockCmp
 (
ôemPå
, 
¨øyIãmPå
, 
ñemítSize
);

127 i‡(
cmp
 == 0) {

128  
mid
;

129 } i‡(
cmp
 < 0) {

130 
high
 = 
mid
 - 1;

132 
low
 = 
mid
 + 1;

135 i‡(
cmp
 > 0)

136 
mid
++;

138  -
mid
 - 1;

139 
	}
}

155 
	$Ex∑ndLi°S∑˚
 (
li°_t
 
li°
, 
numNewIãms
)

157 i‡(
numNewIãms
 == 0) {

158 
numNewIãms
 = 
	`NUMITEMSPERALLOC
 (
li°
);

159 } i‡(
numNewIãms
 < 0) {

160 
numNewIãms
 = (-numNewIãmsË+ 
	`NUMITEMSPERALLOC
 (
li°
);

163 i‡(
	`SëH™dÀSize
 ((
H™dÀ
Ë
li°
,

164  (
Li°Såu˘
) +

165 ((*
li°
)->
li°Size
 +

166 
numNewIãms
Ë* (*
li°
)->
ôemSize
)) {

167 (*
li°
)->
li°Size
 +
numNewIãms
;

172 
	}
}

176 #ifdef 
CFG_ALL_LIST_FUNCTIONS


182 
	$Li°Com∑˘
 (
li°_t
 
li°
)

185 i‡(!
	`SëH™dÀSize
 ((
H™dÀ
Ë
li°
,

186  (
Li°Såu˘
) +

187 (*
li°
)->
numIãms
 * (*li°)->
ôemSize
)) {

191 (*
li°
)->
li°Size
 = (*li°)->
numIãms
;

192 
	}
}

198 
li°_t
 
	$Li°Cª©e
 (
ñemítSize
)

200 
li°_t
 
li°
;

202 
li°
 = (
li°_t
Ë(
	`NewH™dÀ
 ( (
Li°Såu˘
)));

203 i‡(
li°
) {

204 (*
li°
)->
sig«tuª
 = 
LIST_SIGNATURE
;

205 (*
li°
)->
numIãms
 = 0;

206 (*
li°
)->
li°Size
 = 0;

207 (*
li°
)->
ôemSize
 = 
ñemítSize
;

208 (*
li°
)->
≥r˚¡In¸ó£
 = 
kDeÁu…AŒoˇti⁄Pî˚¡In¸ó£
;

209 (*
li°
)->
möNumIãmsIn¸ó£
 =

210 
kDeÁu…AŒoˇti⁄möNumIãmsIn¸ó£
;

213  
li°
;

214 
	}
}

218 #ifdef 
CFG_ALL_LIST_FUNCTIONS


219 
	$Li°SëAŒoˇti⁄Pﬁicy
 (
li°_t
 
li°
, 
möIãmsPîAŒoc
,

220 
≥r˚¡In¸ó£PîAŒoc
)

222 (*
li°
)->
≥r˚¡In¸ó£
 = 
≥r˚¡In¸ó£PîAŒoc
;

223 (*
li°
)->
möNumIãmsIn¸ó£
 = 
möIãmsPîAŒoc
;

224 
	}
}

229 
	$Li°Di•o£
 (
li°_t
 
li°
)

231 
	`Di•o£H™dÀ
 ((
H™dÀ
Ë
li°
);

232 
	}
}

235 #ifdef 
CFG_ALL_LIST_FUNCTIONS


237 
	$Li°Di•o£PåLi°
 (
li°_t
 
li°
)

239 
ödex
;

240 
numIãms
;

242 i‡(
li°
) {

243 
numIãms
 = 
	`Li°NumIãms
 (
li°
);

245 
ödex
 = 1; index <
numIãms
; index++)

246 
	`‰ì
 (*(**Ë
	`Li°GëPåToIãm
 (
li°
, 
ödex
));

248 
	`Li°Di•o£
 (
li°
);

250 
	}
}

257 
	$Li°CÀ¨
 (
li°_t
 
li°
)

259 i‡(!
li°
)

261 (*
li°
)->
numIãms
 = 0;

262 
	}
}

269 
li°_t
 
	$Li°C›y
 (
li°_t
 
‹igöÆLi°
)

271 
li°_t
 
ãmpLi°
 = 
NULL
;

272 
numIãms
;

274 i‡(!
‹igöÆLi°
)

275  
NULL
;

277 
ãmpLi°
 = 
	`Li°Cª©e
 ((*
‹igöÆLi°
)->
ôemSize
);

278 i‡(
ãmpLi°
) {

279 
numIãms
 = 
	`Li°NumIãms
 (
‹igöÆLi°
);

281 i‡(!
	`SëH™dÀSize
 ((
H™dÀ
Ë
ãmpLi°
,

282  (
Li°Såu˘
) +

283 
numIãms
 * (*
ãmpLi°
)->
ôemSize
)) {

284 
	`Li°Di•o£
 (
ãmpLi°
);

285  
NULL
;

288 (*
ãmpLi°
)->
numIãms
 = (*
‹igöÆLi°
)->numItems;

289 (*
ãmpLi°
)->
li°Size
 = (*
‹igöÆLi°
)->
numIãms
;

290 (*
ãmpLi°
)->
ôemSize
 = (*
‹igöÆLi°
)->itemSize;

291 (*
ãmpLi°
)->
≥r˚¡In¸ó£
 = (*
‹igöÆLi°
)->percentIncrease;

292 (*
ãmpLi°
)->
möNumIãmsIn¸ó£
 =

293 (*
‹igöÆLi°
)->
möNumIãmsIn¸ó£
;

295 
	`mem˝y
 (
	`ITEMPTR
 (
ãmpLi°
, 0), ITEMPTR (
‹igöÆLi°
, 0),

296 
numIãms
 * (*
ãmpLi°
)->
ôemSize
);

299  
ãmpLi°
;

300 
	}
}

307 
	$Li°Aµíd
 (
li°_t
 
li°1
,Üi°_à
li°2
)

309 
numIãmsL1
, 
numIãmsL2
;

311 i‡(!
li°2
)

314 i‡(!
li°1
)

316 i‡((*
li°1
)->
ôemSize
 !(*
li°2
)->itemSize)

319 
numIãmsL1
 = 
	`Li°NumIãms
 (
li°1
);

320 
numIãmsL2
 = 
	`Li°NumIãms
 (
li°2
);

322 i‡(
numIãmsL2
 == 0)

325 i‡(!
	`SëH™dÀSize
 ((
H™dÀ
Ë
li°1
,

326  (
Li°Såu˘
Ë+ (
numIãmsL1
 + 
numIãmsL2
) *

327 (*
li°1
)->
ôemSize
)) {

331 (*
li°1
)->
numIãms
 = 
numIãmsL1
 + 
numIãmsL2
;

332 (*
li°1
)->
li°Size
 = 
numIãmsL1
 + 
numIãmsL2
;

334 
	`memmove
 (
	`ITEMPTR
 (
li°1
, 
numIãmsL1
),

335 
	`ITEMPTR
 (
li°2
, 0),

336 
numIãmsL2
 * (*
li°2
)->
ôemSize
);

339 
	}
}

349 
	$Li°In£πIãm
 (
li°_t
 
li°
, *
±rToIãm
, 
ôemPosôi⁄
)

351  
	`Li°In£πIãms
 (
li°
, 
±rToIãm
, 
ôemPosôi⁄
, 1);

352 
	}
}

356 
	$Li°In£πIãms
 (
li°_t
 
li°
, *
±rToIãms
, 
fú°IãmPosôi⁄
,

357 
numIãmsToIn£π
)

359 
numIãms
 = (*
li°
)->numItems;

361 i‡(
fú°IãmPosôi⁄
 =
numIãms
 + 1)

362 
fú°IãmPosôi⁄
 = 
LIST_END
;

363 i‡(
fú°IãmPosôi⁄
 > 
numIãms
)

366 i‡((*
li°
)->
numIãms
 >(*li°)->
li°Size
) {

367 i‡(!
	`Ex∑ndLi°S∑˚
 (
li°
, -
numIãmsToIn£π
))

371 i‡(
fú°IãmPosôi⁄
 =
LIST_START
) {

372 i‡(
numIãms
 == 0) {

374 
fú°IãmPosôi⁄
 = 
LIST_END
;

376 
fú°IãmPosôi⁄
 = 1;

380 i‡(
fú°IãmPosôi⁄
 =
LIST_END
) {

381 i‡(
±rToIãms
)

382 
	`mem˝y
 (
	`ITEMPTR
 (
li°
, 
numIãms
), 
±rToIãms
,

383 (*
li°
)->
ôemSize
 * 
numIãmsToIn£π
);

385 
	`mem£t
 (
	`ITEMPTR
 (
li°
, 
numIãms
), 0,

386 (*
li°
)->
ôemSize
 * 
numIãmsToIn£π
);

388 (*
li°
)->
numIãms
 +
numIãmsToIn£π
;

390 
	`memmove
 (
	`ITEMPTR
 (
li°
, 
fú°IãmPosôi⁄
 - 1 + 
numIãmsToIn£π
),

391 
	`ITEMPTR
 (
li°
, 
fú°IãmPosôi⁄
 - 1),

392 (
numIãms
 + 1 - 
fú°IãmPosôi⁄
Ë* (*
li°
)->
ôemSize
);

394 i‡(
±rToIãms
)

395 
	`memmove
 (
	`ITEMPTR
 (
li°
, 
fú°IãmPosôi⁄
 - 1), 
±rToIãms
,

396 (*
li°
)->
ôemSize
 * 
numIãmsToIn£π
);

398 
	`mem£t
 (
	`ITEMPTR
 (
li°
, 
fú°IãmPosôi⁄
 - 1), 0,

399 (*
li°
)->
ôemSize
 * 
numIãmsToIn£π
);

401 (*
li°
)->
numIãms
 +
numIãmsToIn£π
;

405 
	}
}

407 #ifde‡
CFG_ALL_LIST_FUNCTIONS


411 
	$Li°EquÆ
 (
li°_t
 
li°1
,Üi°_à
li°2
)

413 i‡(
li°1
 =
li°2
)

416 i‡(
li°1
 =
NULL
 || 
li°2
 == NULL)

419 i‡((*
li°1
)->
ôemSize
 == (*list1)->itemSize) {

420 i‡((*
li°1
)->
numIãms
 =(*
li°2
)->numItems) {

421  (
	`memcmp
 (
	`ITEMPTR
 (
li°1
, 0), ITEMPTR (
li°2
, 0),

422 (*
li°1
)->
ôemSize
 * (*li°1)->
numIãms
) == 0);

427 
	}
}

435 
	$Li°Rïœ˚Iãm
 (
li°_t
 
li°
, *
±rToIãm
, 
ôemPosôi⁄
)

437 
	`Li°Rïœ˚Iãms
 (
li°
, 
±rToIãm
, 
ôemPosôi⁄
, 1);

438 
	}
}

446 
	$Li°Rïœ˚Iãms
 ( 
li°_t
 
li°
, *
±rToIãms
,

447 
fú°IãmPosôi⁄
, 
numIãmsToRïœ˚
)

450 i‡(
fú°IãmPosôi⁄
 =
LIST_END
)

451 
fú°IãmPosôi⁄
 = (*
li°
)->
numIãms
;

452 i‡(
fú°IãmPosôi⁄
 =
LIST_START
)

453 
fú°IãmPosôi⁄
 = 1;

455 
	`memmove
 (
	`ITEMPTR
 (
li°
, 
fú°IãmPosôi⁄
 - 1), 
±rToIãms
,

456 (*
li°
)->
ôemSize
 * 
numIãmsToRïœ˚
);

457 
	}
}

461 
	$Li°GëIãm
 (
li°_t
 
li°
, *
ôemDe°ö©i⁄
, 
ôemPosôi⁄
)

463 
	`Li°GëIãms
 (
li°
, 
ôemDe°ö©i⁄
, 
ôemPosôi⁄
, 1);

464 
	}
}

470 #i‡
deföed
(
CFG_ALL_LIST_FUNCTIONS
Ë|| deföed(
CFG_DEVICE_DEREGISTER
)

472 
	$Li°RemoveIãm
 (
li°_t
 
li°
, *
ôemDe°ö©i⁄
, 
ôemPosôi⁄
)

474 
	`Li°RemoveIãms
 (
li°
, 
ôemDe°ö©i⁄
, 
ôemPosôi⁄
, 1);

475 
	}
}

479 
	$Li°RemoveIãms
 (
li°_t
 
li°
, *
ôemsDe°ö©i⁄
,

480 
fú°IãmPosôi⁄
, 
numIãmsToRemove
)

482 
fú°IãmA·îChunk
, 
numToMove
;

484 i‡(
fú°IãmPosôi⁄
 =
LIST_START
)

485 
fú°IãmPosôi⁄
 = 1;

486 i‡(
fú°IãmPosôi⁄
 =
LIST_END
)

487 
fú°IãmPosôi⁄
 = (*
li°
)->
numIãms
;

489 i‡(
ôemsDe°ö©i⁄
 !
NULL
)

490 
	`mem˝y
 (
ôemsDe°ö©i⁄
, 
	`ITEMPTR
 (
li°
, 
fú°IãmPosôi⁄
 - 1),

491 (*
li°
)->
ôemSize
 * 
numIãmsToRemove
);

493 
fú°IãmA·îChunk
 = 
fú°IãmPosôi⁄
 + 
numIãmsToRemove
;

494 
numToMove
 = (*
li°
)->
numIãms
 - (
fú°IãmA·îChunk
 - 1);

496 i‡(
numToMove
 > 0) {

500 
	`memmove
 (
	`ITEMPTR
 (
li°
, 
fú°IãmPosôi⁄
 - 1),

501 
	`ITEMPTR
 (
li°
, 
fú°IãmA·îChunk
 - 1),

502 (*
li°
)->
ôemSize
 * 
numToMove
);

505 (*
li°
)->
numIãms
 -
numIãmsToRemove
;

506 
	}
}

511 #ifde‡
CFG_ALL_LIST_FUNCTIONS


512 
	$Li°GëIãms
 (
li°_t
 
li°
, *
ôemsDe°ö©i⁄
,

513 
fú°IãmPosôi⁄
, 
numIãmsToGë
)

516 i‡(
fú°IãmPosôi⁄
 =
LIST_START
)

517 
fú°IãmPosôi⁄
 = 1;

518 i‡(
fú°IãmPosôi⁄
 =
LIST_END
)

519 
fú°IãmPosôi⁄
 = (*
li°
)->
numIãms
;

521 
	`mem˝y
 (
ôemsDe°ö©i⁄
,

522 
	`ITEMPTR
 (
li°
, 
fú°IãmPosôi⁄
 - 1),

523 (*
li°
)->
ôemSize
 * 
numIãmsToGë
);

524 
	}
}

533 *
	$Li°GëPåToIãm
 (
li°_t
 
li°
, 
ôemPosôi⁄
)

535 i‡(
ôemPosôi⁄
 =
LIST_START
)

536 
ôemPosôi⁄
 = 1;

537 i‡(
ôemPosôi⁄
 =
LIST_END
)

538 
ôemPosôi⁄
 = (*
li°
)->
numIãms
;

540  
	`ITEMPTR
 (
li°
, 
ôemPosôi⁄
 - 1);

541 
	}
}

545 #ifde‡
CFG_ALL_LIST_FUNCTIONS


550 *
	$Li°GëD©aPå
 (
li°_t
 
li°
)

552  &((*
li°
)->
ôemLi°
[0]);

553 
	}
}

558 #ifdef 
CFG_ALL_LIST_FUNCTIONS


560 
	$Li°AµlyToEach
 (
li°_t
 
li°
, 
as˚ndög
,

561 
Li°Aµliˇti⁄Func
 
funcToAµly
,

562 *
ˇŒbackD©a
)

564 
ªsu…
 = 0, 
ödex
;

566 i‡(!
li°
 || !
funcToAµly
)

567 
Eº‹
;

569 i‡(
as˚ndög
) {

570 
ödex
 = 1; index <
	`Li°NumIãms
 (
li°
); index++) {

571 
ªsu…
 = 
	`funcToAµly
 (
ödex
,

572 
	`Li°GëPåToIãm
 (
li°
, 
ödex
),

573 
ˇŒbackD©a
);

574 i‡(
ªsu…
 < 0)

575 
Eº‹
;

578 
ödex
 = 
	`Li°NumIãms
 (
li°
);

579 
ödex
 > 0 && index <
	`Li°NumIãms
 (
li°
);

580 
ödex
--) {

581 
ªsu…
 = 
	`funcToAµly
 (
ödex
,

582 
	`Li°GëPåToIãm
 (
li°
, 
ödex
),

583 
ˇŒbackD©a
);

584 i‡(
ªsu…
 < 0)

585 
Eº‹
;

589 
Eº‹
:

590  
ªsu…
;

591 
	}
}

597 #ifde‡
CFG_ALL_LIST_FUNCTIONS


598 
	$Li°GëIãmSize
 (
li°_t
 
li°
)

600  (*
li°
)->
ôemSize
;

601 
	}
}

606 
	$Li°NumIãms
 (
li°_t
 
li°
)

608  (*
li°
)->
numIãms
;

609 
	}
}

613 #ifdef 
CFG_ALL_LIST_FUNCTIONS


615 
	$Li°RemoveDu∂iˇãs
 (
li°_t
 
li°
, 
Com∑ªFun˘i⁄
 
com∑ªFun˘i⁄
)

617 
numIãms
, 
ödex
, 
°¨tIndexF‹Föd
, 
du∂iˇãsIndex
;

619 
numIãms
 = 
	`Li°NumIãms
 (
li°
);

621 
ödex
 = 1; index < 
numIãms
; index++) {

622 
°¨tIndexF‹Föd
 = 
ödex
 + 1;

623 
°¨tIndexF‹Föd
 <
numIãms
) {

624 
du∂iˇãsIndex
 =

625 
	`Li°FödIãm
 (
li°
,

626 
	`Li°GëPåToIãm
 (
li°
, 
ödex
),

627 
°¨tIndexF‹Föd
,

628 
com∑ªFun˘i⁄
);

629 i‡(
du∂iˇãsIndex
 > 0) {

630 
	`Li°RemoveIãm
 (
li°
, 
NULL
, 
du∂iˇãsIndex
);

631 
numIãms
--;

632 
°¨tIndexF‹Föd
 = 
du∂iˇãsIndex
;

638 
	}
}

645 
	$Li°FödIãm
 (
li°_t
 
li°
, *
±rToIãm
, 
°¨tögPosôi⁄
,

646 
Com∑ªFun˘i⁄
 
com∑ªFun˘i⁄
)

648 
numIãms
, 
size
, 
ödex
, 
cmp
;

649 *
li°IãmPå
;

651 i‡((
numIãms
 = (*
li°
)->numItems) == 0)

654 
size
 = (*
li°
)->
ôemSize
;

656 i‡(
°¨tögPosôi⁄
 =
LIST_START
)

657 
°¨tögPosôi⁄
 = 1;

658 i‡(
°¨tögPosôi⁄
 =
LIST_END
)

659 
°¨tögPosôi⁄
 = 
numIãms
;

661 
ödex
 = 
°¨tögPosôi⁄
; index <
numIãms
; index++) {

662 
li°IãmPå
 = 
	`ITEMPTR
 (
li°
, 
ödex
 - 1);

663 
cmp
 = 
com∑ªFun˘i⁄


664 ? 
	`com∑ªFun˘i⁄
 (
±rToIãm
, 
li°IãmPå
)

665 : 
	`Li°MemBlockCmp
 (
±rToIãm
, 
li°IãmPå
, 
size
);

666 i‡(
cmp
 == 0)

667  
ödex
;

671 
	}
}

675 
	$Sh‹tCom∑ª
 (*
a
, *
b
)

677 i‡(*(*Ë
a
 < *(*Ë
b
)

679 i‡(*(*Ë
a
 > *(*Ë
b
)

682 
	}
}

686 
	$I¡Com∑ª
 (*
a
, *
b
)

688 i‡(*(*Ë
a
 < *(*Ë
b
)

690 i‡(*(*Ë
a
 > *(*Ë
b
)

693 
	}
}

697 
	$CSåögCom∑ª
 (*
a
, *
b
)

699  
	`°rcmp
 (*(**Ë
a
, *(**Ë
b
);

700 
	}
}

705 
	$Li°BöSórch
 (
li°_t
 
li°
, *
±rToIãm
,

706 
Com∑ªFun˘i⁄
 
com∑ªFun˘i⁄
)

708 
ödex
;

710 
ödex
 = 
	`BöSórch
 (
	`ITEMPTR
 (
li°
, 0),

711 (Ë(*
li°
)->
numIãms
,

712 (Ë(*
li°
)->
ôemSize
, 
±rToIãm
,

713 
com∑ªFun˘i⁄
);

715 i‡(
ödex
 >= 0)

716 
ödex
++;

718 
ödex
 = 0;

720  
ödex
;

721 
	}
}

731 
	$Li°PªAŒoˇã
 (
li°_t
 
li°
, 
numIãms
)

733 i‡((*
li°
)->
li°Size
 - (*li°)->
numIãms
 <ÇumItems) {

734  
	`Ex∑ndLi°S∑˚
 (
li°
,

735 
numIãms
 - ((*
li°
)->
li°Size
 -

736 (*
li°
)->
numIãms
));

740 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/main.c

26 
	~<comm⁄.h
>

27 
	~<w©chdog.h
>

28 
	~<comm™d.h
>

29 
	~<mÆloc.h
>

31 #ifde‡
CFG_HUSH_PARSER


32 
	~<hush.h
>

35 
	~<po°.h
>

37 #i‡
deföed
(
CONFIG_BOOT_RETRY_TIME
Ë&& deföed(
CONFIG_RESET_TO_RETRY
)

38 
do_ª£t
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[]);

41 
do_boŸd
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[]);

44 
	#MAX_DELAY_STOP_STR
 32

	)

46 * 
dñëe_ch¨
 (*
buf„r
, *
p
, *
cﬁp
, *
≈
, 
∂í
);

47 
∑r£_löe
 (*, *[]);

48 #i‡
deföed
(
CONFIG_BOOTDELAY
) && (CONFIG_BOOTDELAY >= 0)

49 
ab‹tboŸ
();

52 #unde‡
DEBUG_PARSER


54 
c⁄sﬁe_buf„r
[
CFG_CBSIZE
];

56 
	#CONFIG_CMD_HISTORY


	)

57 #ifde‡
CONFIG_CMD_HISTORY


58 
	#HISTORY_SIZE
 10

	)

59 
	gc⁄sﬁe_hi°‹y
[
HISTORY_SIZE
][
CFG_CBSIZE
];

60 
	ghi°‹y_cur_idx
 = -1;

61 
	ghi°‹y_œ°_idx
 = -1;

62 
	ghi°‹y_cou¡î
 = 0;

63 
	ghi°‹y_íabÀ
 = 0;

66 #ifde‡
CONFIG_BOOT_RETRY_TIME


67 
uöt64_t
 
	gídtime
 = 0;

68 
	gªåy_time
 = -1;

71 
	#ídtick
(
£c⁄ds
Ë(
	`gë_ticks
(Ë+ (
uöt64_t
)(£c⁄dsË* 
	`gë_tb˛k
())

	)

73 #i‚de‡
CONFIG_BOOT_RETRY_MIN


74 
	#CONFIG_BOOT_RETRY_MIN
 
CONFIG_BOOT_RETRY_TIME


	)

77 #ifde‡
CONFIG_MODEM_SUPPORT


78 
	gdo_mdm_öô
 = 0;

79 
mdm_öô
();

87 #i‡
deföed
(
CONFIG_BOOTDELAY
) && (CONFIG_BOOTDELAY >= 0)

88 #i‡
deföed
(
CONFIG_AUTOBOOT_KEYED
)

89 
__ölöe__
 
	$ab‹tboŸ
(
boŸdñay
)

91 
ab‹t
 = 0;

92 
uöt64_t
 
ëime
 = 
	`ídtick
(
boŸdñay
);

95 * 
°r
;

96 
u_öt
 
Àn
;

97 
ªåy
;

99 
dñaykey
 [] =

101 { 
°r
: 
	`gëív
 ("boŸdñaykey"), 
ªåy
: 1 },

102 { 
°r
: 
	`gëív
 ("boŸdñaykey2"), 
ªåy
: 1 },

103 { 
°r
: 
	`gëív
 ("boŸ°›key"), 
ªåy
: 0 },

104 { 
°r
: 
	`gëív
 ("boŸ°›key2"), 
ªåy
: 0 },

107 
¥esskey
 [
MAX_DELAY_STOP_STR
];

108 
u_öt
 
¥esskey_Àn
 = 0;

109 
u_öt
 
¥esskey_max
 = 0;

110 
u_öt
 
i
;

112 #ifde‡
CONFIG_SILENT_CONSOLE


114 
DECLARE_GLOBAL_DATA_PTR
;

116 i‡(
gd
->
Êags
 & 
GD_FLG_SILENT
) {

118 
	`c⁄sﬁe_assign
 (
°dout
, "serial");

119 
	`c⁄sﬁe_assign
 (
°dîr
, "serial");

124 #ifde‡
CONFIG_AUTOBOOT_PROMPT


125 
	`¥ötf
 (
CONFIG_AUTOBOOT_PROMPT
, 
boŸdñay
);

128 #ifde‡
CONFIG_AUTOBOOT_DELAY_STR


129 i‡(
dñaykey
[0].
°r
 =
NULL
)

130 
dñaykey
[0].
°r
 = 
CONFIG_AUTOBOOT_DELAY_STR
;

132 #ifde‡
CONFIG_AUTOBOOT_DELAY_STR2


133 i‡(
dñaykey
[1].
°r
 =
NULL
)

134 
dñaykey
[1].
°r
 = 
CONFIG_AUTOBOOT_DELAY_STR2
;

136 #ifde‡
CONFIG_AUTOBOOT_STOP_STR


137 i‡(
dñaykey
[2].
°r
 =
NULL
)

138 
dñaykey
[2].
°r
 = 
CONFIG_AUTOBOOT_STOP_STR
;

140 #ifde‡
CONFIG_AUTOBOOT_STOP_STR2


141 i‡(
dñaykey
[3].
°r
 =
NULL
)

142 
dñaykey
[3].
°r
 = 
CONFIG_AUTOBOOT_STOP_STR2
;

145 
i
 = 0; i < (
dñaykey
) / (delaykey[0]); i ++) {

146 
dñaykey
[
i
].
Àn
 = dñaykey[i].
°r
 =
NULL
 ?

147 0 : 
	`°æí
 (
dñaykey
[
i
].
°r
);

148 
dñaykey
[
i
].
Àn
 = dñaykey[i].À¿> 
MAX_DELAY_STOP_STR
 ?

149 
MAX_DELAY_STOP_STR
 : 
dñaykey
[
i
].
Àn
;

151 
¥esskey_max
 =Öªsskey_max > 
dñaykey
[
i
].
Àn
 ?

152 
¥esskey_max
 : 
dñaykey
[
i
].
Àn
;

154 #i‡
DEBUG_BOOTKEYS


155 
	`¥ötf
("%s key:<%s>\n",

156 
dñaykey
[
i
].
ªåy
 ? "delay" : "stop",

157 
dñaykey
[
i
].
°r
 ? delaykey[i].str : "NULL");

164 !
ab‹t
 && 
	`gë_ticks
(Ë<
ëime
) {

165 
i
 = 0; i < (
dñaykey
) / (delaykey[0]); i ++) {

166 i‡(
dñaykey
[
i
].
Àn
 > 0 &&

167 
¥esskey_Àn
 >
dñaykey
[
i
].
Àn
 &&

168 
	`memcmp
 (
¥esskey
 + 
¥esskey_Àn
 - 
dñaykey
[
i
].
Àn
,

169 
dñaykey
[
i
].
°r
,

170 
dñaykey
[
i
].
Àn
) == 0) {

171 #i‡
DEBUG_BOOTKEYS


172 
	`¥ötf
("got %skey\n",

173 
dñaykey
[
i
].
ªåy
 ? "delay" : "stop");

176 #ifde‡
CONFIG_BOOT_RETRY_TIME


178 i‡(! 
dñaykey
[
i
].
ªåy
)

179 
ªåy_time
 = -1;

181 
ab‹t
 = 1;

185 i‡(
	`t°c
()) {

186 i‡(
¥esskey_Àn
 < 
¥esskey_max
) {

187 
¥esskey
 [
¥esskey_Àn
 ++] = 
	`gëc
();

190 
i
 = 0; i < 
¥esskey_max
 - 1; i ++)

191 
¥esskey
 [
i
] =Öresskey [i + 1];

193 
¥esskey
 [
i
] = 
	`gëc
();

197 #i‡
DEBUG_BOOTKEYS


198 i‡(!
ab‹t
)

199 
	`puts
 ("keyÅimeout\n");

202 #ifde‡
CONFIG_SILENT_CONSOLE


204 
DECLARE_GLOBAL_DATA_PTR
;

206 i‡(
ab‹t
) {

208 
gd
->
Êags
 &~(
GD_FLG_SILENT
);

209 } i‡(
gd
->
Êags
 & 
GD_FLG_SILENT
) {

211 
	`c⁄sﬁe_assign
 (
°dout
, "nulldev");

212 
	`c⁄sﬁe_assign
 (
°dîr
, "nulldev");

217  
ab‹t
;

218 
	}
}

222 #ifde‡
CONFIG_MENUKEY


223 
	gmíukey
 = 0;

226 
__ölöe__
 
	$ab‹tboŸ
(
boŸdñay
)

228 
ab‹t
 = 0;

230 #ifde‡
CONFIG_SILENT_CONSOLE


232 
DECLARE_GLOBAL_DATA_PTR
;

234 i‡(
gd
->
Êags
 & 
GD_FLG_SILENT
) {

236 
	`c⁄sﬁe_assign
 (
°dout
, "serial");

237 
	`c⁄sﬁe_assign
 (
°dîr
, "serial");

242 #ifde‡
CONFIG_MENUPROMPT


243 
	`¥ötf
(
CONFIG_MENUPROMPT
, 
boŸdñay
);

245 
	`¥ötf
("Hôány keyÅÿ°›áutoboŸ: %2d ", 
boŸdñay
);

248 #i‡
deföed
 
CONFIG_ZERO_BOOTDELAY_CHECK


253 i‡(
boŸdñay
 >= 0) {

254 i‡(
	`t°c
()) {

255 (Ë
	`gëc
();

256 
	`puts
 ("\b\b\b 0");

257 
ab‹t
 = 1;

262 (
boŸdñay
 > 0Ë&& (!
ab‹t
)) {

263 
i
;

265 --
boŸdñay
;

267 
i
=0; !
ab‹t
 && i<100; ++i) {

268 i‡(
	`t°c
()) {

269 
ab‹t
 = 1;

270 
boŸdñay
 = 0;

271 #ifde‡
CONFIG_MENUKEY


272 
míukey
 = 
	`gëc
();

274 (Ë
	`gëc
();

278 
	`udñay
 (10000);

281 
	`¥ötf
 ("\b\b\b%2d ", 
boŸdñay
);

284 
	`putc
 ('\n');

286 #ifde‡
CONFIG_SILENT_CONSOLE


288 
DECLARE_GLOBAL_DATA_PTR
;

290 i‡(
ab‹t
) {

292 
gd
->
Êags
 &~(
GD_FLG_SILENT
);

293 } i‡(
gd
->
Êags
 & 
GD_FLG_SILENT
) {

295 
	`c⁄sﬁe_assign
 (
°dout
, "nulldev");

296 
	`c⁄sﬁe_assign
 (
°dîr
, "nulldev");

301  
ab‹t
;

302 
	}
}

309 
	$maö_lo›
 ()

311 #i‚de‡
CFG_HUSH_PARSER


312 
œ°comm™d
[
CFG_CBSIZE
] = { 0, 
	}
};

313 
	gÀn
;

314 
	grc
 = 1;

315 
	gÊag
;

318 #i‡
deföed
(
CONFIG_BOOTDELAY
) && (CONFIG_BOOTDELAY >= 0)

319 *
	gs
;

320 
	gboŸdñay
;

322 #ifde‡
CONFIG_PREBOOT


323 *
	gp
;

325 #ifde‡
CONFIG_BOOTCOUNT_LIMIT


326 
	gboŸcou¡
 = 0;

327 
	gboŸlimô
 = 0;

328 *
	gbcs
;

329 
	gbcs_£t
[16];

331 #i‡
deföed
(
CONFIG_VFD
Ë&& deföed(
VFD_TEST_LOGO
)

332 
ul⁄g
 
	gbmp
 = 0;

333 
åab_vfd
 (
ul⁄g
 
bôm≠
);

335 #ifde‡
CONFIG_MODEM_SUPPORT


336 i‡(
	gdo_mdm_öô
)

337 
	gbmp
 = 1;

339 
åab_vfd
 (
bmp
);

342 #ifde‡
CONFIG_BOOTCOUNT_LIMIT


343 
	gboŸcou¡
 = 
boŸcou¡_lﬂd
();

344 
	gboŸcou¡
++;

345 
boŸcou¡_°‹e
 (
boŸcou¡
);

346 
•rötf
 (
bcs_£t
, "%lu", 
boŸcou¡
);

347 
£ãnv
 ("boŸcou¡", 
bcs_£t
);

348 
	gbcs
 = 
gëív
 ("bootlimit");

349 
	gboŸlimô
 = 
bcs
 ? 
	$sim∂e_°πoul
 (
bcs
, 
NULL
, 10) : 0;

352 #ifde‡
CONFIG_MODEM_SUPPORT


353 
	`debug
 ("DEBUG: maö_lo›: do_mdm_öô=%d\n", 
do_mdm_öô
);

354 i‡(
do_mdm_öô
) {

355 
uch¨
 *
°r
 = 
	`°rdup
(
	`gëív
("mdm_cmd"));

356 
	`£ãnv
 ("¥eboŸ", 
°r
);

357 i‡(
°r
 !
NULL
)

358 
	`‰ì
 (
°r
);

359 
	`mdm_öô
();

360 
	}
}

363 #ifde‡
CONFIG_VERSION_VARIABLE


365 
vîsi⁄_°rög
[];

367 
£ãnv
 ("vî", 
vîsi⁄_°rög
);

371 #ifde‡
CFG_HUSH_PARSER


372 
u_boŸ_hush_°¨t
 ();

375 #ifde‡
CONFIG_AUTO_COMPLETE


376 
ö°Æl_auto_com∂ëe
();

379 #ifde‡
CONFIG_PREBOOT


380 i‡((
	gp
 = 
gëív
 ("¥eboŸ")Ë!
NULL
) {

381 #ifde‡
CONFIG_AUTOBOOT_KEYED


382 
¥ev
 = 
dißbÀ_˘æc
(1);

385 #i‚de‡
CFG_HUSH_PARSER


386 
run_comm™d
 (
p
, 0);

388 
¥ötf
("\nÖarse_string_outer \n");

389 
∑r£_°rög_ouãr
(
p
, 
FLAG_PARSE_SEMICOLON
 |

390 
FLAG_EXIT_FROM_LOOP
);

393 #ifde‡
CONFIG_AUTOBOOT_KEYED


394 
dißbÀ_˘æc
(
¥ev
);

398 #i‡
deföed
(
CONFIG_BOOTDELAY
) && (CONFIG_BOOTDELAY >= 0)

399 
	gs
 = 
gëív
 ("bootdelay");

400 
	gboŸdñay
 = 
s
 ? ()
	$sim∂e_°πﬁ
(
s
, 
NULL
, 10Ë: 
CONFIG_BOOTDELAY
;

404 #ifde‡
CONFIG_BOOT_RETRY_TIME


405 
	`öô_cmd_timeout
 ();

408 #ifde‡
CONFIG_BOOTCOUNT_LIMIT


409 i‡(
boŸlimô
 && (
boŸcou¡
 > bootlimit)) {

410 
	`¥ötf
 ("Warning: Bootlimit (%u)Éxceeded. Usingáltbootcmd.\n",

411 ()
boŸlimô
);

412 
s
 = 
	`gëív
 ("altbootcmd");

413 
	}
}

416 
	gs
 = 
gëív
 ("bootcmd");

419 
	gboŸdñay
 = -1;

420 i‡(
	gboŸdñay
 >0 && 
s
 && !
	$ab‹tboŸ
 (
boŸdñay
)) {

421 #ifde‡
CONFIG_AUTOBOOT_KEYED


422 
¥ev
 = 
	`dißbÀ_˘æc
(1);

425 #i‚de‡
CFG_HUSH_PARSER


426 
	`run_comm™d
 (
s
, 0);

428 
	`∑r£_°rög_ouãr
(
s
, 
FLAG_PARSE_SEMICOLON
 |

429 
FLAG_EXIT_FROM_LOOP
);

432 #ifde‡
CONFIG_AUTOBOOT_KEYED


433 
	`dißbÀ_˘æc
(
¥ev
);

435 
	}
}

437 #ifde‡
CONFIG_MENUKEY


438 i‡(
	gmíukey
 =
CONFIG_MENUKEY
) {

439 
s
 = 
gëív
("menucmd");

440 i‡(
	gs
) {

441 #i‚de‡
CFG_HUSH_PARSER


442 
run_comm™d
 (
s
, 0);

444 
∑r£_°rög_ouãr
(
s
, 
FLAG_PARSE_SEMICOLON
 |

445 
FLAG_EXIT_FROM_LOOP
);

452 #ifde‡
CONFIG_AMIGAONEG3SE


454 
video_b™√r
();

455 
video_b™√r
();

462 #ifde‡
CFG_HUSH_PARSER


463 
∑r£_fûe_ouãr
();

468 #ifde‡
CONFIG_BOOT_RETRY_TIME


469 i‡(
	grc
 >= 0) {

473 
ª£t_cmd_timeout
();

476 
	gÀn
 = 
ªadlöe
 (
CFG_PROMPT
, 0);

478 
	gÊag
 = 0;

479 i‡(
	gÀn
 > 0)

480 
°r˝y
 (
œ°comm™d
, 
c⁄sﬁe_buf„r
);

481 i‡(
	gÀn
 == 0)

482 
Êag
 |
CMD_FLAG_REPEAT
;

483 #ifde‡
CONFIG_BOOT_RETRY_TIME


484 i‡(
	gÀn
 == -2) {

487 
puts
 ("\nTimed out waiting for command\n");

488 #ifde‡
CONFIG_RESET_TO_RETRY


490 
do_ª£t
 (
NULL
, 0, 0, NULL);

496 i‡(
	gÀn
 == -1)

497 
puts
 ("<INTERRUPT>\n");

499 
	grc
 = 
run_comm™d
 (
œ°comm™d
, 
Êag
);

501 i‡(
	grc
 <= 0) {

503 
œ°comm™d
[0] = 0;

509 #ifde‡
CONFIG_BOOT_RETRY_TIME


513 
	$öô_cmd_timeout
()

515 *
s
 = 
	`gëív
 ("bootretry");

517 i‡(
s
 !
NULL
)

518 
ªåy_time
 = ()
	`sim∂e_°πﬁ
(
s
, 
NULL
, 10);

520 
ªåy_time
 = 
CONFIG_BOOT_RETRY_TIME
;

522 i‡(
ªåy_time
 >0 &&Ñëry_timê< 
CONFIG_BOOT_RETRY_MIN
)

523 
ªåy_time
 = 
CONFIG_BOOT_RETRY_MIN
;

524 
	}
}

529 
	$ª£t_cmd_timeout
()

531 
ídtime
 = 
	`ídtick
(
ªåy_time
);

532 
	}
}

537 
	$∑r£_löe
 (*
löe
, *
¨gv
[])

539 
«rgs
 = 0;

541 #ifde‡
DEBUG_PARSER


542 
	`¥ötf
 ("∑r£_löe: \"%s\"\n", 
löe
);

544 
«rgs
 < 
CFG_MAXARGS
) {

547 (*
löe
 == ' ') || (*line == '\t')) {

548 ++
löe
;

551 i‡(*
löe
 == '\0') {

552 
¨gv
[
«rgs
] = 
NULL
;

553 #ifde‡
DEBUG_PARSER


554 
	`¥ötf
 ("∑r£_löe:Ç¨gs=%d\n", 
«rgs
);

556  (
«rgs
);

559 
¨gv
[
«rgs
++] = 
löe
;

562 *
löe
 && (*line != ' ') && (*line != '\t')) {

563 ++
löe
;

566 i‡(*
löe
 == '\0') {

567 
¨gv
[
«rgs
] = 
NULL
;

568 #ifde‡
DEBUG_PARSER


569 
	`¥ötf
 ("∑r£_löe:Ç¨gs=%d\n", 
«rgs
);

571  (
«rgs
);

574 *
löe
++ = '\0';

577 
	`¥ötf
 ("** Toÿm™yárg†(max. %dË**\n", 
CFG_MAXARGS
);

579 #ifde‡
DEBUG_PARSER


580 
	`¥ötf
 ("∑r£_löe:Ç¨gs=%d\n", 
«rgs
);

582  (
«rgs
);

583 
	}
}

587 
	$¥o˚ss_ma¸os
 (c⁄° *
öput
, *
ouçut
)

589 
c
, 
¥ev
;

590 c⁄° *
v¨«me_°¨t
 = 
NULL
;

591 
öput˙t
 = 
	`°æí
 (
öput
);

592 
ouçut˙t
 = 
CFG_CBSIZE
;

593 
°©e
 = 0;

597 #ifde‡
DEBUG_PARSER


598 *
ouçut_°¨t
 = 
ouçut
;

600 
	`¥ötf
 ("[PROCESS_MACROS] INPUTÜí %d: \"%s\"\n", 
	`°æí
(
öput
), input);

603 
¥ev
 = '\0';

605 
öput˙t
 && 
ouçut˙t
) {

606 
c
 = *
öput
++;

607 
öput˙t
--;

609 i‡(
°©e
!=3) {

611 i‡((
c
 ='\\'Ë&& (
¥ev
 != '\\')) {

612 i‡(
öput˙t
-- == 0)

614 
¥ev
 = 
c
;

615 
c
 = *
öput
++;

619 
°©e
) {

621 i‡((
c
 ='\''Ë&& (
¥ev
 != '\\')) {

622 
°©e
 = 3;

625 i‡((
c
 ='$'Ë&& (
¥ev
 != '\\')) {

626 
°©e
++;

628 *(
ouçut
++Ë
c
;

629 
ouçut˙t
--;

633 i‡(
c
 == '(' || c == '{') {

634 
°©e
++;

635 
v¨«me_°¨t
 = 
öput
;

637 
°©e
 = 0;

638 *(
ouçut
++) = '$';

639 
ouçut˙t
--;

641 i‡(
ouçut˙t
) {

642 *(
ouçut
++Ë
c
;

643 
ouçut˙t
--;

648 i‡(
c
 == ')' || c == '}') {

649 
i
;

650 
ív«me
[
CFG_CBSIZE
], *
ívvÆ
;

651 
ív˙t
 = 
öput
-
v¨«me_°¨t
-1;

654 
i
 = 0; i < 
ív˙t
; i++) {

655 
ív«me
[
i
] = 
v¨«me_°¨t
[i];

657 
ív«me
[
i
] = 0;

660 
ívvÆ
 = 
	`gëív
 (
ív«me
);

663 i‡(
ívvÆ
 !
NULL
)

664 (*
ívvÆ
Ë&& 
ouçut˙t
) {

665 *(
ouçut
++Ë*(
ívvÆ
++);

666 
ouçut˙t
--;

669 
°©e
 = 0;

673 i‡((
c
 ='\''Ë&& (
¥ev
 != '\\')) {

674 
°©e
 = 0;

676 *(
ouçut
++Ë
c
;

677 
ouçut˙t
--;

681 
¥ev
 = 
c
;

684 i‡(
ouçut˙t
)

685 *
ouçut
 = 0;

687 #ifde‡
DEBUG_PARSER


688 
	`¥ötf
 ("[PROCESS_MACROS] OUTPUTÜen %d: \"%s\"\n",

689 
	`°æí
(
ouçut_°¨t
), output_start);

691 
	}
}

727 
	$run_comm™d
 (c⁄° *
cmd
, 
Êag
)

729 
cmd_tbl_t
 *
cmdç
;

730 
cmdbuf
[
CFG_CBSIZE
];

731 *
tokí
;

732 *
£p
;

733 
föÆtokí
[
CFG_CBSIZE
];

734 *
°r
 = 
cmdbuf
;

735 *
¨gv
[
CFG_MAXARGS
 + 1];

736 
¨gc
, 
öquŸes
;

737 
ª≥©abÀ
 = 1;

738 
rc
 = 0;

740 #ifde‡
DEBUG_PARSER


741 
	`¥ötf
 ("[RUN_COMMAND] cmd[%p]=\"", 
cmd
);

742 
	`puts
 (
cmd
 ? cmd : "NULL");

743 
	`puts
 ("\"\n");

746 
	`˛ór_˘æc
();

748 i‡(!
cmd
 || !*cmd) {

752 i‡(
	`°æí
(
cmd
Ë>
CFG_CBSIZE
) {

753 
	`puts
 ("## CommandÅooÜong!\n");

757 
	`°r˝y
 (
cmdbuf
, 
cmd
);

763 #ifde‡
DEBUG_PARSER


764 
	`¥ötf
 ("[PROCESS_SEPARATORS] %s\n", 
cmd
);

766 *
°r
) {

772 
öquŸes
 = 0, 
£p
 = 
°r
; *sep; sep++) {

773 i‡((*
£p
=='\'') &&

774 (*(
£p
-1) != '\\'))

775 
öquŸes
=!inquotes;

777 i‡(!
öquŸes
 &&

778 (*
£p
 == ';') &&

779 –
£p
 !
°r
) &&

780 (*(
£p
-1) != '\\'))

787 
tokí
 = 
°r
;

788 i‡(*
£p
) {

789 
°r
 = 
£p
 + 1;

790 *
£p
 = '\0';

793 
°r
 = 
£p
;

794 #ifde‡
DEBUG_PARSER


795 
	`¥ötf
 ("tokí: \"%s\"\n", 
tokí
);

799 
	`¥o˚ss_ma¸os
 (
tokí
, 
föÆtokí
);

802 
¨gc
 = 
	`∑r£_löe
 (
föÆtokí
, 
¨gv
);

805 i‡((
cmdç
 = 
	`föd_cmd
(
¨gv
[0])Ë=
NULL
) {

806 
	`¥ötf
 ("Unknow¿comm™d '%s' -Åry 'hñp'\n", 
¨gv
[0]);

807 
rc
 = -1;

812 i‡(
¨gc
 > 
cmdç
->
max¨gs
) {

813 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

814 
rc
 = -1;

818 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_BOOTD
)

820 i‡(
cmdç
->
cmd
 =
do_boŸd
) {

821 #ifde‡
DEBUG_PARSER


822 
	`¥ötf
 ("[%s]\n", 
föÆtokí
);

824 i‡(
Êag
 & 
CMD_FLAG_BOOTD
) {

825 
	`puts
 ("'bootd'Ñecursion detected\n");

826 
rc
 = -1;

830 
Êag
 |
CMD_FLAG_BOOTD
;

835 i‡((
cmdç
->
cmd
Ë(cmdç, 
Êag
, 
¨gc
, 
¨gv
) != 0) {

836 
rc
 = -1;

839 
ª≥©abÀ
 &
cmdç
->repeatable;

842 i‡(
	`had_˘æc
 ())

846  
rc
 ?Ñ¯: 
ª≥©abÀ
;

847 
	}
}

851 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_RUN
)

852 
	$do_run
 (
cmd_tbl_t
 * 
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

854 
i
;

856 i‡(
¨gc
 < 2) {

857 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

861 
i
=1; i<
¨gc
; ++i) {

862 *
¨g
;

864 i‡((
¨g
 = 
	`gëív
 (
¨gv
[
i
])Ë=
NULL
) {

865 
	`¥ötf
 ("## Eº‹: \"%s\"ÇŸ deföed\n", 
¨gv
[
i
]);

868 #i‚de‡
CFG_HUSH_PARSER


869 i‡(
	`run_comm™d
 (
¨g
, 
Êag
) == -1)

872 i‡(
	`∑r£_°rög_ouãr
(
¨g
,

873 
FLAG_PARSE_SEMICOLON
 | 
FLAG_EXIT_FROM_LOOP
) != 0)

878 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/usb.c

47 
	~<comm⁄.h
>

48 
	~<comm™d.h
>

49 
	~<asm/¥o˚ss‹.h
>

50 
	~<löux/˘y≥.h
>

51 
	~<asm/addr•a˚.h
>

52 
	~<asm/byã‹dî.h
>

55 
	#DD
 
	`¥ötf
("### %†%d\n", 
__FUNCTION__
, 
__LINE__
);

	)

58 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_USB
)

60 
	~<usb.h
>

61 #ifde‡
CONFIG_4xx


62 
	~<405gp_pci.h
>

67 #ifdef 
USB_DEBUG


68 
	#USB_PRINTF
(
fmt
,
¨gs
...Ë
	`¥ötf
 (fmà,##¨gs)

	)

70 
	#USB_PRINTF
(
fmt
,
¨gs
...)

	)

73 
	#USB_BUFSIZ
 512

	)

75 
usb_devi˚
 
	gusb_dev
[
USB_MAX_DEVICE
];

76 
	gdev_ödex
;

77 
	gru¬ög
;

78 
	gasynch_Ælowed
;

79 
devªque°
 
	g£tup_∑ckë
;

84 
usb_hub_¥obe
(
usb_devi˚
 *
dev
, 
i‚um
);

85 
usb_hub_ª£t
();

92 
__ölöe__
 
	$waô_ms
(
ms
)

94 
ms
-->0)

95 
	`udñay
(1000);

96 
	}
}

101 
	$usb_öô
()

103 
ªsu…
;

104 *
˘æ
;

105 
i
, 
°¨t_ödex
 = 0;

106 
usb_devi˚
 *
dev
;

109 
ru¬ög
=0;

110 
dev_ödex
=0;

111 
asynch_Ælowed
=1;

112 
	`usb_hub_ª£t
();

115 
i
 = 0; i < 
USB_MAX_DEVICE
; i++) {

116 
	`mem£t
(&
usb_dev
[
i
], 0, (
usb_devi˚
));

117 
usb_dev
[
i
].
devnum
 = -1;

121 
	#CONFIG_USB_MAX_CONTROLLER_COUNT
 1

	)

122 
i
 = 0; i < 
CONFIG_USB_MAX_CONTROLLER_COUNT
; i++) {

124 
	`¥ötf
("USB%d: ", 
i
);

125 i‡(
	`usb_lowÀvñ_öô
(
i
, 
USB_INIT_HOST
, &
˘æ
)) {

126 
	`puts
("lowlevel init failed\n");

133 
°¨t_ödex
 = 
dev_ödex
;

134 
	`¥ötf
("sˇ¬ög bu†%d f‹ devi˚s... ", 
i
);

135 
dev
 = 
	`usb_Æloc_√w_devi˚
(
˘æ
);

140 i‡(
dev
)

141 
	`usb_√w_devi˚
(
dev
);

143 i‡(
°¨t_ödex
 =
dev_ödex
)

144 
	`puts
("No USB Device found\n");

146 
	`¥ötf
("%d USB Device(s) found\n",

147 
dev_ödex
 - 
°¨t_ödex
);

149 
ru¬ög
 = 1;

152 
	`USB_PRINTF
("scanÉnd\n");

153 i‡(!
ru¬ög
) {

154 
	`puts
("USBÉrror:áll controllers failedÜowlevel init\n");

159 
	}
}

164 
	$usb_°›
()

166 
asynch_Ælowed
=1;

167 
	`usb_hub_ª£t
();

168  
	`usb_lowÀvñ_°›
(0);

169 
	}
}

175 
	$usb_dißbÀ_asynch
(
dißbÀ
)

177 
asynch_Ælowed
=!
dißbÀ
;

180 
	}
}

190 
	$usb_submô_öt_msg
(
usb_devi˚
 *
dev
, 
pùe
,

191 *
buf„r
,
å™s„r_Àn
, 
öãrvÆ
)

193  
	`submô_öt_msg
(
dev
,
pùe
,
buf„r
,
å™s„r_Àn
,
öãrvÆ
);

194 
	}
}

205 
	$usb_c⁄åﬁ_msg
(
usb_devi˚
 *
dev
, 
pùe
,

206 
ªque°
, 
ªque°ty≥
,

207 
vÆue
, 
ödex
,

208 *
d©a
, 
size
, 
timeout
)

210 if((
timeout
==0)&&(!
asynch_Ælowed
))

214 
£tup_∑ckë
.
ªque°ty≥
 =Ñequesttype;

215 
£tup_∑ckë
.
ªque°
 =Ñequest;

216 
£tup_∑ckë
.
vÆue
 = 
	`sw≠_16
(value);

217 
£tup_∑ckë
.
ödex
 = 
	`sw≠_16
(index);

218 
£tup_∑ckë
.
Àngth
 = 
	`sw≠_16
(
size
);

219 
	`USB_PRINTF
("usb_control_msg:Ñequest: 0x%X,Ñequesttype: 0x%X\nvalue 0x%X index 0x%XÜength 0x%X\n",

220 
ªque°
,
ªque°ty≥
,
vÆue
,
ödex
,
size
);

221 
	`waô_ms
(10);

222 
dev
->
°©us
=
USB_ST_NOT_PROC
;

224 
	`submô_c⁄åﬁ_msg
(
dev
,
pùe
,
d©a
,
size
,&
£tup_∑ckë
);

225 if(
timeout
 == 0) {

226  ()
size
;

228 
timeout
--) {

229 if(!((vﬁ©ûê)
dev
->
°©us
 & 
USB_ST_NOT_PROC
))

231 
	`waô_ms
(1);

233 if(
dev
->
°©us
==0)

234  
dev
->
a˘_Àn
;

238 
	}
}

245 
	$usb_bulk_msg
(
usb_devi˚
 *
dev
, 
pùe
,

246 *
d©a
, 
Àn
, *
a˘uÆ_Àngth
, 
timeout
)

248 i‡(
Àn
 < 0)

250 
dev
->
°©us
=
USB_ST_NOT_PROC
;

251 
	`submô_bulk_msg
(
dev
,
pùe
,
d©a
,
Àn
);

252 
timeout
--) {

253 if(!((vﬁ©ûê)
dev
->
°©us
 & 
USB_ST_NOT_PROC
))

255 
	`waô_ms
(1);

257 *
a˘uÆ_Àngth
=
dev
->
a˘_Àn
;

258 if(
dev
->
°©us
==0)

262 
	}
}

273 
	$usb_max∑ckë
(
usb_devi˚
 *
dev
,
pùe
)

275 if((
pùe
 & 
USB_DIR_IN
)==0)

276 (
dev
->
ïmax∑ckëout
[((
pùe
>>15) & 0xf)]);

278 (
dev
->
ïmax∑ckëö
[((
pùe
>>15) & 0xf)]);

279 
	}
}

284 
	$usb_£t_max∑ckë
(
usb_devi˚
 *
dev
)

286 
i
,
ii
,
b
;

287 
usb_ídpoöt_des¸ùt‹
 *
ï
;

289 
i
=0; i<
dev
->
c⁄fig
.
desc
.
bNumI¡îÁ˚s
;i++) {

290 
ii
=0; ii<
dev
->
c⁄fig
.
if_desc
[
i
].
desc
.
bNumEndpoöts
; ii++) {

291 
ï
=&
dev
->
c⁄fig
.
if_desc
[
i
].
ï_desc
[
ii
];

292 
b
=
ï
->
bEndpoötAddªss
 & 
USB_ENDPOINT_NUMBER_MASK
;

294 if((
ï
->
bmAâribuãs
 & 
USB_ENDPOINT_XFERTYPE_MASK
)==
USB_ENDPOINT_XFER_CONTROL
) {

295 
dev
->
ïmax∑ckëout
[
b
] = 
ï
->
wMaxPackëSize
;

296 
dev
->
ïmax∑ckëö
 [
b
] = 
ï
->
wMaxPackëSize
;

297 
	`USB_PRINTF
("##C⁄åﬁ EPÉpmax∑ckëout/ö[%d] = %d\n",
b
,
dev
->
ïmax∑ckëö
[b]);

300 i‡((
ï
->
bEndpoötAddªss
 & 0x80)==0) {

301 if(
ï
->
wMaxPackëSize
 > 
dev
->
ïmax∑ckëout
[
b
]) {

302 
dev
->
ïmax∑ckëout
[
b
] = 
ï
->
wMaxPackëSize
;

303 
	`USB_PRINTF
("##EPÉpmax∑ckëout[%d] = %d\n",
b
,
dev
->
ïmax∑ckëout
[b]);

307 if(
ï
->
wMaxPackëSize
 > 
dev
->
ïmax∑ckëö
[
b
]) {

308 
dev
->
ïmax∑ckëö
[
b
] = 
ï
->
wMaxPackëSize
;

309 
	`USB_PRINTF
("##EPÉpmax∑ckëö[%d] = %d\n",
b
,
dev
->
ïmax∑ckëö
[b]);

316 
	}
}

322 
	$usb_∑r£_c⁄fig
(
usb_devi˚
 *
dev
, *
buf„r
, 
cfgno
)

324 
usb_des¸ùt‹_hódî
 *
hód
;

325 
ödex
,
i‚o
,
ïno
;

326 
i‚o
=-1;

327 
ïno
=-1;

329 
dev
->
c⁄figno
=
cfgno
;

330 
hód
 =(
usb_des¸ùt‹_hódî
 *)&
buf„r
[0];

331 if(
hód
->
bDes¸ùt‹Ty≥
!=
USB_DT_CONFIG
) {

332 
	`¥ötf
(" ERROR: NOT USB_CONFIG_DESC %x\n",
hód
->
bDes¸ùt‹Ty≥
);

335 
	`mem˝y
(&
dev
->
c⁄fig
,
buf„r
,buffer[0]);

336 
dev
->
c⁄fig
.
desc
.
wTŸÆLígth
=
	`sw≠_16
(dev->config.desc.wTotalLength);

337 
dev
->
c⁄fig
.
no_of_if
=0;

339 
ödex
=
dev
->
c⁄fig
.
desc
.
bLígth
;

341 
hód
=(
usb_des¸ùt‹_hódî
 *)&
buf„r
[
ödex
];

342 
ödex
+1 < 
dev
->
c⁄fig
.
desc
.
wTŸÆLígth
) {

343 
hód
->
bDes¸ùt‹Ty≥
) {

344 
USB_DT_INTERFACE
:

345 
i‚o
=
dev
->
c⁄fig
.
no_of_if
;

346 
dev
->
c⁄fig
.
no_of_if
++;

347 
	`mem˝y
(&
dev
->
c⁄fig
.
if_desc
[
i‚o
],&
buf„r
[
ödex
],buffer[index]);

348 
dev
->
c⁄fig
.
if_desc
[
i‚o
].
no_of_ï
=0;

351 
USB_DT_ENDPOINT
:

352 
ïno
=
dev
->
c⁄fig
.
if_desc
[
i‚o
].
no_of_ï
;

353 
dev
->
c⁄fig
.
if_desc
[
i‚o
].
no_of_ï
++;

354 
	`mem˝y
(&
dev
->
c⁄fig
.
if_desc
[
i‚o
].
ï_desc
[
ïno
],&
buf„r
[
ödex
],buffer[index]);

355 
dev
->
c⁄fig
.
if_desc
[
i‚o
].
ï_desc
[
ïno
].
wMaxPackëSize


356 =
	`sw≠_16
(
dev
->
c⁄fig
.
if_desc
[
i‚o
].
ï_desc
[
ïno
].
wMaxPackëSize
);

357 
	`USB_PRINTF
("i‡%d,É∞%d\n",
i‚o
,
ïno
);

360 if(
hód
->
bLígth
==0)

362 
	`USB_PRINTF
("unknow¿Des¸ùti⁄ Ty≥ : %x\n",
hód
->
bDes¸ùt‹Ty≥
);

364 
i
;

365 *
ch
;

366 
ch
=(*)
hód
;

367 
i
=0;i<
hód
->
bLígth
; i++)

368 
	`USB_PRINTF
("%02X ",*
ch
++);

369 
	`USB_PRINTF
("\n\n\n");

373 
ödex
+=
hód
->
bLígth
;

374 
hód
=(
usb_des¸ùt‹_hódî
 *)&
buf„r
[
ödex
];

377 
	}
}

384 
	$usb_˛ór_hÆt
(
usb_devi˚
 *
dev
, 
pùe
)

386 
ªsu…
;

387 
ídp
 = 
	`usb_pùìndpoöt
(
pùe
)|(
	`usb_pùeö
(pipe)<<7);

389 
ªsu…
 = 
	`usb_c⁄åﬁ_msg
(
dev
, 
	`usb_¢d˘æpùe
(dev, 0),

390 
USB_REQ_CLEAR_FEATURE
, 
USB_RECIP_ENDPOINT
, 0, 
ídp
, 
NULL
, 0, 
USB_CNTL_TIMEOUT
 * 3);

393 i‡(
ªsu…
 < 0)

394  
ªsu…
;

401 
	`usb_ídpoöt_ru¬ög
(
dev
, 
	`usb_pùìndpoöt
(
pùe
), 
	`usb_pùeout
(pipe));

404 
	`usb_£âoggÀ
(
dev
, 
	`usb_pùìndpoöt
(
pùe
), 
	`usb_pùeout
(pipe), 0);

406 
	}
}

412 
	$usb_gë_des¸ùt‹
(
usb_devi˚
 *
dev
, 
ty≥
, 
ödex
, *
buf
, 
size
)

414 
ªs
;

415 
ªs
 = 
	`usb_c⁄åﬁ_msg
(
dev
, 
	`usb_rcv˘æpùe
(dev, 0),

416 
USB_REQ_GET_DESCRIPTOR
, 
USB_DIR_IN
,

417 (
ty≥
 << 8Ë+ 
ödex
, 0,

418 
buf
, 
size
, 
USB_CNTL_TIMEOUT
);

419  
ªs
;

420 
	}
}

422 
	$usb_gë_c⁄figuøti⁄_no
(
usb_devi˚
 *
dev
,

423 *
buf„r
, 
cfgno
)

425 
ªsu…
;

426 
Àngth
;

427 
usb_c⁄fig_des¸ùt‹
 *
c⁄fig
;

429 
c⁄fig
 = (
usb_c⁄fig_des¸ùt‹
 *)&
buf„r
[0];

430 
ªsu…
 = 
	`usb_gë_des¸ùt‹
(
dev
, 
USB_DT_CONFIG
, 
cfgno
, 
buf„r
, 9);

431 i‡(
ªsu…
 < 9) {

432 i‡(
ªsu…
 < 0)

433 
	`¥ötf
("unableÅo get descriptor,Érror %lX\n",

434 
dev
->
°©us
);

436 
	`¥ötf
("config descriptorÅoo short " \

437 "”x≥˘ed %i, gŸ %i)\n", 9, 
ªsu…
);

440 
Àngth
 = 
	`À16_to_˝u
(
c⁄fig
->
wTŸÆLígth
);

442 i‡(
Àngth
 > 
USB_BUFSIZ
) {

443 
	`¥ötf
("%s: failedÅo get descriptor -ÅooÜong: %d\n",

444 
__func__
, 
Àngth
);

448 
ªsu…
 = 
	`usb_gë_des¸ùt‹
(
dev
, 
USB_DT_CONFIG
, 
cfgno
, 
buf„r
, 
Àngth
);

449 
	`USB_PRINTF
("gë_c⁄f_nÿ%d Resu… %d, wLígth %d\n", 
cfgno
, 
ªsu…
, 
Àngth
);

450 
c⁄fig
->
wTŸÆLígth
 = 
Àngth
;

452  
ªsu…
;

453 
	}
}

459 
	$usb_£t_addªss
(
usb_devi˚
 *
dev
)

461 
ªs
;

463 
	`USB_PRINTF
("£àaddªs†%d\n",
dev
->
devnum
);

464 
ªs
=
	`usb_c⁄åﬁ_msg
(
dev
, 
	`usb_¢ddef˘æ
(dev),

465 
USB_REQ_SET_ADDRESS
, 0,

466 (
dev
->
devnum
),0,

467 
NULL
,0, 
USB_CNTL_TIMEOUT
);

468  
ªs
;

469 
	}
}

474 
	$usb_£t_öãrÁ˚
(
usb_devi˚
 *
dev
, 
öãrÁ˚
, 
Æã∫©e
)

476 
usb_öãrÁ˚
 *
if_Á˚
 = 
NULL
;

477 
ªt
, 
i
;

479 
i
 = 0; i < 
dev
->
c⁄fig
.
desc
.
bNumI¡îÁ˚s
; i++) {

480 i‡(
dev
->
c⁄fig
.
if_desc
[
i
].
desc
.
bI¡îÁ˚Numbî
 =
öãrÁ˚
) {

481 
if_Á˚
 = &
dev
->
c⁄fig
.
if_desc
[
i
];

485 i‡(!
if_Á˚
) {

486 
	`¥ötf
("£À˘ög invÆid i¡îÁ˚ %d", 
öãrÁ˚
);

497 i‡(
if_Á˚
->
num_Æt£âög
 == 1)

500 i‡((
ªt
 = 
	`usb_c⁄åﬁ_msg
(
dev
, 
	`usb_¢d˘æpùe
(dev, 0),

501 
USB_REQ_SET_INTERFACE
, 
USB_RECIP_INTERFACE
, 
Æã∫©e
,

502 
öãrÁ˚
, 
NULL
, 0, 
USB_CNTL_TIMEOUT
 * 5)) < 0)

503  
ªt
;

506 
	}
}

511 
	$usb_£t_c⁄figuøti⁄
(
usb_devi˚
 *
dev
, 
c⁄figuøti⁄
)

513 
ªs
;

514 
	`USB_PRINTF
("£àc⁄figuøti⁄ %d\n",
c⁄figuøti⁄
);

516 
ªs
=
	`usb_c⁄åﬁ_msg
(
dev
, 
	`usb_¢d˘æpùe
(dev,0),

517 
USB_REQ_SET_CONFIGURATION
, 0,

518 
c⁄figuøti⁄
,0,

519 
NULL
,0, 
USB_CNTL_TIMEOUT
);

520 if(
ªs
==0) {

521 
dev
->
toggÀ
[0] = 0;

522 
dev
->
toggÀ
[1] = 0;

527 
	}
}

532 
	$usb_£t_¥Ÿocﬁ
(
usb_devi˚
 *
dev
, 
i‚um
, 
¥Ÿocﬁ
)

534  
	`usb_c⁄åﬁ_msg
(
dev
, 
	`usb_¢d˘æpùe
(dev, 0),

535 
USB_REQ_SET_PROTOCOL
, 
USB_TYPE_CLASS
 | 
USB_RECIP_INTERFACE
,

536 
¥Ÿocﬁ
, 
i‚um
, 
NULL
, 0, 
USB_CNTL_TIMEOUT
);

537 
	}
}

542 
	$usb_£t_idÀ
(
usb_devi˚
 *
dev
, 
i‚um
, 
duøti⁄
, 
ªp‹t_id
)

544  
	`usb_c⁄åﬁ_msg
(
dev
, 
	`usb_¢d˘æpùe
(dev, 0),

545 
USB_REQ_SET_IDLE
, 
USB_TYPE_CLASS
 | 
USB_RECIP_INTERFACE
,

546 (
duøti⁄
 << 8Ë| 
ªp‹t_id
, 
i‚um
, 
NULL
, 0, 
USB_CNTL_TIMEOUT
);

547 
	}
}

552 
	$usb_gë_ªp‹t
(
usb_devi˚
 *
dev
, 
i‚um
, 
ty≥
, 
id
, *
buf
, 
size
)

554  
	`usb_c⁄åﬁ_msg
(
dev
, 
	`usb_rcv˘æpùe
(dev, 0),

555 
USB_REQ_GET_REPORT
, 
USB_DIR_IN
 | 
USB_TYPE_CLASS
 | 
USB_RECIP_INTERFACE
,

556 (
ty≥
 << 8Ë+ 
id
, 
i‚um
, 
buf
, 
size
, 
USB_CNTL_TIMEOUT
);

557 
	}
}

562 
	$usb_gë_˛ass_des¸ùt‹
(
usb_devi˚
 *
dev
, 
i‚um
,

563 
ty≥
, 
id
, *
buf
, 
size
)

565  
	`usb_c⁄åﬁ_msg
(
dev
, 
	`usb_rcv˘æpùe
(dev, 0),

566 
USB_REQ_GET_DESCRIPTOR
, 
USB_RECIP_INTERFACE
 | 
USB_DIR_IN
,

567 (
ty≥
 << 8Ë+ 
id
, 
i‚um
, 
buf
, 
size
, 
USB_CNTL_TIMEOUT
);

568 
	}
}

573 
	$usb_gë_°rög
(
usb_devi˚
 *
dev
, 
œngid
, 
ödex
, *
buf
, 
size
)

575 
i
;

576 
ªsu…
;

578 
i
 = 0; i < 3; ++i) {

580 
ªsu…
 = 
	`usb_c⁄åﬁ_msg
(
dev
, 
	`usb_rcv˘æpùe
(dev, 0),

581 
USB_REQ_GET_DESCRIPTOR
, 
USB_DIR_IN
,

582 (
USB_DT_STRING
 << 8Ë+ 
ödex
, 
œngid
, 
buf
, 
size
,

583 
USB_CNTL_TIMEOUT
);

585 i‡(
ªsu…
 > 0)

589  
ªsu…
;

590 
	}
}

593 
	$usb_åy_°rög_w‹k¨ounds
(*
buf
, *
Àngth
)

595 
√wÀngth
, 
ﬁdÀngth
 = *
Àngth
;

597 
√wÀngth
 = 2;ÇewÀngth + 1 < 
ﬁdÀngth
;Çewlength += 2)

598 i‡(!
	`i•röt
(
buf
[
√wÀngth
]) || buf[newlength + 1])

601 i‡(
√wÀngth
 > 2) {

602 
buf
[0] = 
√wÀngth
;

603 *
Àngth
 = 
√wÀngth
;

605 
	}
}

608 
	$usb_°rög_sub
(
usb_devi˚
 *
dev
, 
œngid
,

609 
ödex
, *
buf
)

611 
rc
;

615 
rc
 = 
	`usb_gë_°rög
(
dev
, 
œngid
, 
ödex
, 
buf
, 255);

619 i‡(
rc
 < 2) {

620 
rc
 = 
	`usb_gë_°rög
(
dev
, 
œngid
, 
ödex
, 
buf
, 2);

621 i‡(
rc
 == 2)

622 
rc
 = 
	`usb_gë_°rög
(
dev
, 
œngid
, 
ödex
, 
buf
, buf[0]);

625 i‡(
rc
 >= 2) {

626 i‡(!
buf
[0] && !buf[1])

627 
	`usb_åy_°rög_w‹k¨ounds
(
buf
, &
rc
);

630 i‡(
buf
[0] < 
rc
)

631 
rc
 = 
buf
[0];

633 
rc
 =Ñc - (rc & 1);

636 i‡(
rc
 < 2)

637 
rc
 = -1;

639  
rc
;

640 
	}
}

648 
	$usb_°rög
(
usb_devi˚
 *
dev
, 
ödex
, *
buf
, 
size_t
 
size
)

650 
mybuf
[
USB_BUFSIZ
];

651 *
tbuf
;

652 
îr
;

653 
u
, 
idx
;

655 i‡(
size
 <0 || !
buf
 || !
ödex
)

657 
buf
[0] = 0;

658 
tbuf
=&
mybuf
[0];

661 i‡(!
dev
->
have_œngid
) {

662 
îr
 = 
	`usb_°rög_sub
(
dev
, 0, 0, 
tbuf
);

663 i‡(
îr
 < 0) {

664 
	`USB_PRINTF
("îr‹ gëtög såög des¸ùt‹ 0 (îr‹=%x)\n",
dev
->
°©us
);

666 } i‡(
tbuf
[0] < 4) {

667 
	`USB_PRINTF
("string descriptor 0Åoo short\n");

670 
dev
->
have_œngid
 = -1;

671 
dev
->
°rög_œngid
 = 
tbuf
[2] | (tbuf[3]<< 8);

673 
	`USB_PRINTF
("USB deviceÇumber %d defaultÜanguage ID 0x%x\n",

674 
dev
->
devnum
, dev->
°rög_œngid
);

678 
îr
 = 
	`usb_°rög_sub
(
dev
, dev->
°rög_œngid
, 
ödex
, 
tbuf
);

679 i‡(
îr
 < 0)

680  
îr
;

682 
size
--;

683 
idx
 = 0, 
u
 = 2; u < 
îr
; u += 2) {

684 i‡(
idx
 >
size
)

686 i‡(
tbuf
[
u
+1])

687 
buf
[
idx
++] = '?';

689 
buf
[
idx
++] = 
tbuf
[
u
];

691 
buf
[
idx
] = 0;

692 
îr
 = 
idx
;

693  
îr
;

694 
	}
}

706 
usb_devi˚
 * 
	$usb_gë_dev_ödex
(
ödex
)

708 if(
usb_dev
[
ödex
].
devnum
==-1)

709  
NULL
;

711  &
usb_dev
[
ödex
];

712 
	}
}

718 
usb_devi˚
 *
	$usb_Æloc_√w_devi˚
(*
c⁄åﬁÀr
)

720 
i
;

721 
	`USB_PRINTF
("New Devi˚ %d\n", 
dev_ödex
);

722 i‡(
dev_ödex
 =
USB_MAX_DEVICE
) {

723 
	`¥ötf
("ERROR,Åoÿm™y USB Devi˚s, max=%d\n", 
USB_MAX_DEVICE
);

724  
NULL
;

727 
usb_dev
[
dev_ödex
].
devnum
 = dev_index + 1;

728 
usb_dev
[
dev_ödex
].
maxchûd
 = 0;

729 
i
 = 0; i < 
USB_MAXCHILDREN
; i++)

730 
usb_dev
[
dev_ödex
].
chûdªn
[
i
] = 
NULL
;

731 
usb_dev
[
dev_ödex
].
∑ª¡
 = 
NULL
;

732 
usb_dev
[
dev_ödex
].
c⁄åﬁÀr
 = controller;

733 
dev_ödex
++;

734  &
usb_dev
[
dev_ödex
 - 1];

735 
	}
}

745 
	$usb_√w_devi˚
(
usb_devi˚
 *
dev
)

747 
addr
, 
îr
;

748 
tmp
;

749 
	`ALLOC_CACHE_ALIGN_BUFFER
(, 
tmpbuf_buf
, 
USB_BUFSIZ
);

750 *
tmpbuf
 = 
	`KSEG1ADDR
(
tmpbuf_buf
);

758 #ifde‡
CONFIG_USB_XHCI


759 i‡(
	`usb_Æloc_devi˚
(
dev
)) {

760 
	`¥ötf
("Cannotállocate device contextÅo get SLOT_ID\n");

766 
addr
 = 
dev
->
devnum
;

767 
dev
->
devnum
 = 0;

769 #ifde‡
CONFIG_LEGACY_USB_INIT_SEQ


775 
dev
->
des¸ùt‹
.
bMaxPackëSize0
 = 8;

776 
dev
->
max∑ckësize
 = 
PACKET_SIZE_8
;

777 
dev
->
ïmax∑ckëö
[0] = 8;

778 
dev
->
ïmax∑ckëout
[0] = 8;

780 
îr
 = 
	`usb_gë_des¸ùt‹
(
dev
, 
USB_DT_DEVICE
, 0, 
tmpbuf
, 8);

781 i‡(
îr
 < 8) {

782 
	`¥ötf
("\n USB deviceÇotÑesponding, " \

783 "givög u∞(°©us=%lX)\n", 
dev
->
°©us
);

786 
	`mem˝y
(&
dev
->
des¸ùt‹
, 
tmpbuf
, 8);

795 
usb_devi˚_des¸ùt‹
 *
desc
;

796 
p‹t
 = -1;

797 
usb_devi˚
 *
∑ª¡
 = 
dev
->parent;

798 
p‹t°©us
;

805 
desc
 = (
usb_devi˚_des¸ùt‹
 *)
tmpbuf
;

806 
dev
->
des¸ùt‹
.
bMaxPackëSize0
 = 64;

808 
dev
->
max∑ckësize
 = 
PACKET_SIZE_64
;

809 
dev
->
ïmax∑ckëö
[0] = 64;

810 
dev
->
ïmax∑ckëout
[0] = 64;

818 #i‚de‡
CONFIG_USB_XHCI


819 
îr
 = 
	`usb_gë_des¸ùt‹
(
dev
, 
USB_DT_DEVICE
, 0, 
desc
, 64);

820 i‡(
îr
 < 0) {

821 
	`USB_PRINTF
("usb_new_device: usb_get_descriptor() failed\n");

825 
dev
->
des¸ùt‹
.
bMaxPackëSize0
 = 
desc
->bMaxPacketSize0;

830 
dev
->
des¸ùt‹
.
bDevi˚Cœss
 = 
desc
->bDeviceClass;

833 i‡(
∑ª¡
) {

834 
j
;

837 
j
 = 0; j < 
∑ª¡
->
maxchûd
; j++) {

838 i‡(
∑ª¡
->
chûdªn
[
j
] =
dev
) {

839 
p‹t
 = 
j
;

843 i‡(
p‹t
 < 0) {

844 
	`¥ötf
("usb_new_device:cannotÜocate device'sÖort.\n");

849 
îr
 = 
	`hub_p‹t_ª£t
(
dev
->
∑ª¡
, 
p‹t
, &
p‹t°©us
);

850 i‡(
îr
 < 0) {

851 
	`¥ötf
("\¿ Couldn'àª£àp‹à%i\n", 
p‹t
);

857 
dev
->
ïmax∑ckëö
[0] = dev->
des¸ùt‹
.
bMaxPackëSize0
;

858 
dev
->
ïmax∑ckëout
[0] = dev->
des¸ùt‹
.
bMaxPackëSize0
;

859 
dev
->
des¸ùt‹
.
bMaxPackëSize0
) {

861 
dev
->
max∑ckësize
 = 
PACKET_SIZE_8
;

864 
dev
->
max∑ckësize
 = 
PACKET_SIZE_16
;

867 
dev
->
max∑ckësize
 = 
PACKET_SIZE_32
;

870 
dev
->
max∑ckësize
 = 
PACKET_SIZE_64
;

873 
dev
->
devnum
 = 
addr
;

875 
îr
 = 
	`usb_£t_addªss
(
dev
);

877 i‡(
îr
 < 0) {

878 
	`¥ötf
("\n USB deviceÇotácceptingÇewáddress " \

879 "”º‹=%lX)\n", 
dev
->
°©us
);

883 
	`mdñay
(10);

885 
tmp
 = (
dev
->
des¸ùt‹
);

886 
îr
 = 
	`usb_gë_des¸ùt‹
(
dev
, 
USB_DT_DEVICE
, 0,

887 
tmpbuf
, (
dev
->
des¸ùt‹
));

888 i‡(
îr
 < 
tmp
) {

889 i‡(
îr
 < 0)

890 
	`¥ötf
("unableÅo get device descriptor (error=%d)\n",

891 
îr
);

893 
	`¥ötf
("USB device descriptor shortÑead " \

894 "”x≥˘ed %i, gŸ %i)\n", 
tmp
, 
îr
);

898 
	`mem˝y
(&
dev
->
des¸ùt‹
, 
tmpbuf
, (dev->descriptor));

900 
	`À16_to_˝us
(&
dev
->
des¸ùt‹
.
bcdUSB
);

901 
	`À16_to_˝us
(&
dev
->
des¸ùt‹
.
idVíd‹
);

902 
	`À16_to_˝us
(&
dev
->
des¸ùt‹
.
idProdu˘
);

903 
	`À16_to_˝us
(&
dev
->
des¸ùt‹
.
bcdDevi˚
);

905 
îr
 = 
	`usb_gë_c⁄figuøti⁄_no
(
dev
, 
tmpbuf
, 0);

906 i‡(
îr
 < 0) {

907 
	`¥ötf
("usb_new_device: CannotÑead configuration, " \

909 
dev
->
des¸ùt‹
.
idVíd‹
, dev->des¸ùt‹.
idProdu˘
);

912 
	`usb_∑r£_c⁄fig
(
dev
, 
tmpbuf
, 0);

913 
	`usb_£t_max∑ckë
(
dev
);

915 i‡(
	`usb_£t_c⁄figuøti⁄
(
dev
, dev->
c⁄fig
.
desc
.
bC⁄figuøti⁄VÆue
)) {

916 
	`¥ötf
("failedÅo set default configuration " \

917 "À¿%d, sètu†%lX\n", 
dev
->
a˘_Àn
, dev->
°©us
);

920 
	`USB_PRINTF
("new device strings: Mfr=%d, Product=%d, SerialNumber=%d\n",

921 
dev
->
des¸ùt‹
.
iM™uÁ˘uªr
, dev->des¸ùt‹.
iProdu˘
,

922 
dev
->
des¸ùt‹
.
iSîülNumbî
);

923 
	`mem£t
(
dev
->
mf
, 0, (dev->mf));

924 
	`mem£t
(
dev
->
¥od
, 0, (dev->prod));

925 
	`mem£t
(
dev
->
£rül
, 0, (dev->serial));

926 i‡(
dev
->
des¸ùt‹
.
iM™uÁ˘uªr
)

927 
	`usb_°rög
(
dev
, dev->
des¸ùt‹
.
iM™uÁ˘uªr
,

928 
dev
->
mf
, (dev->mf));

929 i‡(
dev
->
des¸ùt‹
.
iProdu˘
)

930 
	`usb_°rög
(
dev
, dev->
des¸ùt‹
.
iProdu˘
,

931 
dev
->
¥od
, (dev->prod));

932 i‡(
dev
->
des¸ùt‹
.
iSîülNumbî
)

933 
	`usb_°rög
(
dev
, dev->
des¸ùt‹
.
iSîülNumbî
,

934 
dev
->
£rül
, (dev->serial));

935 
	`USB_PRINTF
("M™uÁ˘uª∏%s\n", 
dev
->
mf
);

936 
	`USB_PRINTF
("Produ˘ %s\n", 
dev
->
¥od
);

937 
	`USB_PRINTF
("SîülNumbî %s\n", 
dev
->
£rül
);

939 
	`usb_hub_¥obe
(
dev
, 0);

942 
	}
}

949 
	$usb_‰ì_devi˚
()

951 
dev_ödex
--;

952 
	`USB_PRINTF
("Fªeög devi˚Çode: %d\n", 
dev_ödex
);

953 
	`mem£t
(&
usb_dev
[
dev_ödex
], 0, (
usb_devi˚
));

954 
usb_dev
[
dev_ödex
].
devnum
 = -1;

955 
	}
}

957 
	~"usb_hub.c
"

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/usb_hub.c

25 
	~<comm⁄.h
>

26 
	~<comm™d.h
>

27 
	~<löux/˘y≥.h
>

28 
	~<asm/¥o˚ss‹.h
>

29 
	~<asm/addr•a˚.h
>

30 
	~<asm/byã‹dî.h
>

31 
	~<asm/u«lig√d.h
>

33 
	~<usb.h
>

34 #ifde‡
CONFIG_4xx


35 
	~<asm/4xx_pci.h
>

40 #ifdef 
USB_HUB_DEBUG


41 
	#USB_HUB_PRINTF
(
fmt
,
¨gs
...Ë
	`¥ötf
 (fmà,##¨gs)

	)

43 
	#USB_HUB_PRINTF
(
fmt
,
¨gs
...)

	)

46 #i‚de‡
CONFIG_USB_HUB_MIN_POWER_ON_DELAY


47 
	#CONFIG_USB_HUB_MIN_POWER_ON_DELAY
 100

	)

50 
	#USB_BUFSIZ
 512

	)

52 
	#CONFIG_SYS_HZ
 250

	)

54 
usb_hub_devi˚
 
	ghub_dev
[
USB_MAX_HUB
];

55 
	gusb_hub_ödex
;

57 
	$usb_hub_ª£t_devi˚s
(
p‹t
)

60 
	}
}

62 
	$usb_gë_hub_des¸ùt‹
(
usb_devi˚
 *
dev
, *
d©a
, 
size
)

64  
	`usb_c⁄åﬁ_msg
(
dev
, 
	`usb_rcv˘æpùe
(dev, 0),

65 
USB_REQ_GET_DESCRIPTOR
, 
USB_DIR_IN
 | 
USB_RT_HUB
,

66 
USB_DT_HUB
 << 8, 0, 
d©a
, 
size
, 
USB_CNTL_TIMEOUT
);

67 
	}
}

69 
	$usb_˛ór_p‹t_„©uª
(
usb_devi˚
 *
dev
, 
p‹t
, 
„©uª
)

71  
	`usb_c⁄åﬁ_msg
(
dev
, 
	`usb_¢d˘æpùe
(dev, 0),

72 
USB_REQ_CLEAR_FEATURE
, 
USB_RT_PORT
, 
„©uª
,

73 
p‹t
, 
NULL
, 0, 
USB_CNTL_TIMEOUT
);

74 
	}
}

76 
	$usb_£t_p‹t_„©uª
(
usb_devi˚
 *
dev
, 
p‹t
, 
„©uª
)

78  
	`usb_c⁄åﬁ_msg
(
dev
, 
	`usb_¢d˘æpùe
(dev, 0),

79 
USB_REQ_SET_FEATURE
, 
USB_RT_PORT
, 
„©uª
,

80 
p‹t
, 
NULL
, 0, 
USB_CNTL_TIMEOUT
);

81 
	}
}

83 
	$usb_gë_hub_°©us
(
usb_devi˚
 *
dev
, *
d©a
)

85  
	`usb_c⁄åﬁ_msg
(
dev
, 
	`usb_rcv˘æpùe
(dev, 0),

86 
USB_REQ_GET_STATUS
, 
USB_DIR_IN
 | 
USB_RT_HUB
, 0, 0,

87 
d©a
, (
usb_hub_°©us
), 
USB_CNTL_TIMEOUT
);

88 
	}
}

90 
	$usb_gë_p‹t_°©us
(
usb_devi˚
 *
dev
, 
p‹t
, *
d©a
)

92  
	`usb_c⁄åﬁ_msg
(
dev
, 
	`usb_rcv˘æpùe
(dev, 0),

93 
USB_REQ_GET_STATUS
, 
USB_DIR_IN
 | 
USB_RT_PORT
, 0, 
p‹t
,

94 
d©a
, (
usb_hub_°©us
), 
USB_CNTL_TIMEOUT
);

95 
	}
}

98 
	$usb_hub_powî_⁄
(
usb_hub_devi˚
 *
hub
)

100 
i
;

101 
usb_devi˚
 *
dev
;

102 
pgood_dñay
 = 
hub
->
desc
.
bPwrOn2PwrGood
 * 2;

103 
	`ALLOC_CACHE_ALIGN_BUFFER
(
usb_p‹t_°©us
, 
p‹t°s
, 1);

104 
p‹t°©us
;

105 
ªt
;

107 
dev
 = 
hub
->
pusb_dev
;

114 
	`USB_HUB_PRINTF
("enablingÖower onállÖorts\n");

115 
i
 = 0; i < 
dev
->
maxchûd
; i++) {

116 
	`usb_˛ór_p‹t_„©uª
(
dev
, 
i
 + 1, 
USB_PORT_FEAT_POWER
);

117 
	`USB_HUB_PRINTF
("p‹à%dÑëu∫†%lX\n", 
i
 + 1, 
dev
->
°©us
);

121 
	`mdñay
(
pgood_dñay
);

123 
i
 = 0; i < 
dev
->
maxchûd
; i++) {

124 
ªt
 = 
	`usb_gë_p‹t_°©us
(
dev
, 
i
 + 1, 
p‹t°s
);

125 i‡(
ªt
 < 0) {

126 
	`USB_HUB_PRINTF
("p‹à%d: gë_p‹t_°©u†Áûed\n", 
i
 + 1);

139 
p‹t°©us
 = 
	`À16_to_˝u
(
p‹t°s
->
wP‹tSètus
);

140 i‡(
p‹t°©us
 & (
USB_PORT_STAT_POWER
 << 1)) {

141 
	`USB_HUB_PRINTF
("p‹à%d: P‹àpowî ch™gêÁûed\n", 
i
 + 1);

146 
i
 = 0; i < 
dev
->
maxchûd
; i++) {

147 
	`usb_£t_p‹t_„©uª
(
dev
, 
i
 + 1, 
USB_PORT_FEAT_POWER
);

148 
	`USB_HUB_PRINTF
("p‹à%dÑëu∫†%lX\n", 
i
 + 1, 
dev
->
°©us
);

152 
	`mdñay
(
	`max
(
pgood_dñay
, 
CONFIG_USB_HUB_MIN_POWER_ON_DELAY
));

153 
	}
}

155 
	$usb_hub_ª£t
()

157 
usb_hub_ödex
 = 0;

158 
	}
}

160 
usb_hub_devi˚
 *
	$usb_hub_Æloˇã
()

162 i‡(
usb_hub_ödex
 < 
USB_MAX_HUB
)

163  &
hub_dev
[
usb_hub_ödex
++];

165 
	`¥ötf
("ERROR: USB_MAX_HUB (%dËªached\n", 
USB_MAX_HUB
);

166  
NULL
;

167 
	}
}

169 
	#MAX_TRIES
 5

	)

171 
ölöe
 *
	$p‹t•ìd
(
p‹t°©us
)

173 *
•ìd_°r
;

175 
p‹t°©us
 & 
USB_PORT_STAT_SPEED_MASK
) {

176 
USB_PORT_STAT_SUPER_SPEED
:

177 
•ìd_°r
 = "5 Gb/s";

179 
USB_PORT_STAT_HIGH_SPEED
:

180 
•ìd_°r
 = "480 Mb/s";

182 
USB_PORT_STAT_LOW_SPEED
:

183 
•ìd_°r
 = "1.5 Mb/s";

186 
•ìd_°r
 = "12 Mb/s";

190  
•ìd_°r
;

191 
	}
}

193 
	$hub_p‹t_ª£t
(
usb_devi˚
 *
dev
, 
p‹t
,

194 *
p‹t°©
)

196 
åõs
;

197 
	`ALLOC_CACHE_ALIGN_BUFFER
(
usb_p‹t_°©us
, 
p‹t°s
, 1);

198 
p‹t°©us
, 
p‹tch™ge
;

200 
	`USB_HUB_PRINTF
("hub_p‹t_ª£t:Ñe£âögÖ‹à%d...\n", 
p‹t
);

201 
åõs
 = 0;Årõ†< 
MAX_TRIES
;Åries++) {

203 
	`usb_£t_p‹t_„©uª
(
dev
, 
p‹t
 + 1, 
USB_PORT_FEAT_RESET
);

204 
	`mdñay
(200);

206 i‡(
	`usb_gë_p‹t_°©us
(
dev
, 
p‹t
 + 1, 
p‹t°s
) < 0) {

207 
	`USB_HUB_PRINTF
("get_port_status failed status %lX\n",

208 
dev
->
°©us
);

211 
p‹t°©us
 = 
	`À16_to_˝u
(
p‹t°s
->
wP‹tSètus
);

212 
p‹tch™ge
 = 
	`À16_to_˝u
(
p‹t°s
->
wP‹tCh™ge
);

214 
	`USB_HUB_PRINTF
("p‹t°©u†%x, ch™gê%x, %s\n", 
p‹t°©us
, 
p‹tch™ge
,

215 
	`p‹t•ìd
(
p‹t°©us
));

217 
	`USB_HUB_PRINTF
("STAT_C_CONNECTION = %d STAT_CONNECTION = %d" \

219 (
p‹tch™ge
 & 
USB_PORT_STAT_C_CONNECTION
) ? 1 : 0,

220 (
p‹t°©us
 & 
USB_PORT_STAT_CONNECTION
) ? 1 : 0,

221 (
p‹t°©us
 & 
USB_PORT_STAT_ENABLE
) ? 1 : 0);

223 i‡((
p‹tch™ge
 & 
USB_PORT_STAT_C_CONNECTION
) ||

224 !(
p‹t°©us
 & 
USB_PORT_STAT_CONNECTION
))

227 i‡(
p‹t°©us
 & 
USB_PORT_STAT_ENABLE
)

230 
	`mdñay
(200);

233 i‡(
åõs
 =
MAX_TRIES
) {

234 
	`USB_HUB_PRINTF
("CannotÉnableÖort %iáfter %iÑetries, " \

235 "dißblögÖ‹t.\n", 
p‹t
 + 1, 
MAX_TRIES
);

236 
	`USB_HUB_PRINTF
("MaybeÅhe USB cable is bad?\n");

240 
	`usb_˛ór_p‹t_„©uª
(
dev
, 
p‹t
 + 1, 
USB_PORT_FEAT_C_RESET
);

241 *
p‹t°©
 = 
p‹t°©us
;

243 
	}
}

246 
	$usb_hub_p‹t_c⁄√˘_ch™ge
(
usb_devi˚
 *
dev
, 
p‹t
)

248 
usb_devi˚
 *
usb
;

249 
	`ALLOC_CACHE_ALIGN_BUFFER
(
usb_p‹t_°©us
, 
p‹t°s
, 1);

250 
p‹t°©us
;

253 i‡(
	`usb_gë_p‹t_°©us
(
dev
, 
p‹t
 + 1, 
p‹t°s
) < 0) {

254 
	`USB_HUB_PRINTF
("get_port_status failed\n");

258 
p‹t°©us
 = 
	`À16_to_˝u
(
p‹t°s
->
wP‹tSètus
);

259 
	`USB_HUB_PRINTF
("portstatus %x, change %x, %s\n",

260 
p‹t°©us
,

261 
	`À16_to_˝u
(
p‹t°s
->
wP‹tCh™ge
),

262 
	`p‹t•ìd
(
p‹t°©us
));

265 
	`usb_˛ór_p‹t_„©uª
(
dev
, 
p‹t
 + 1, 
USB_PORT_FEAT_C_CONNECTION
);

268 i‡(((!(
p‹t°©us
 & 
USB_PORT_STAT_CONNECTION
)) &&

269 (!(
p‹t°©us
 & 
USB_PORT_STAT_ENABLE
))Ë|| (
dev
->
chûdªn
[
p‹t
])) {

270 
	`USB_HUB_PRINTF
("usb_disconnect(&hub->children[port]);\n");

272 i‡(!(
p‹t°©us
 & 
USB_PORT_STAT_CONNECTION
))

275 
	`mdñay
(200);

278 i‡(
	`hub_p‹t_ª£t
(
dev
, 
p‹t
, &
p‹t°©us
) < 0) {

279 
	`¥ötf
("ˇ¬ŸÑe£àp‹à%i!?\n", 
p‹t
 + 1);

283 
	`mdñay
(200);

286 
usb
 = 
	`usb_Æloc_√w_devi˚
(
dev
->
c⁄åﬁÀr
);

288 
p‹t°©us
 & 
USB_PORT_STAT_SPEED_MASK
) {

289 
USB_PORT_STAT_SUPER_SPEED
:

290 
usb
->
•ìd
 = 
USB_SPEED_SUPER
;

292 
USB_PORT_STAT_HIGH_SPEED
:

293 
usb
->
•ìd
 = 
USB_SPEED_HIGH
;

295 
USB_PORT_STAT_LOW_SPEED
:

296 
usb
->
•ìd
 = 
USB_SPEED_LOW
;

299 
usb
->
•ìd
 = 
USB_SPEED_FULL
;

303 
dev
->
chûdªn
[
p‹t
] = 
usb
;

304 
usb
->
∑ª¡
 = 
dev
;

305 
usb
->
p‹är
 = 
p‹t
 + 1;

307 i‡(
	`usb_√w_devi˚
(
usb
)) {

309 
	`usb_‰ì_devi˚
();

310 
dev
->
chûdªn
[
p‹t
] = 
NULL
;

311 
	`USB_HUB_PRINTF
("hub: dißblögÖ‹à%d\n", 
p‹t
 + 1);

312 
	`usb_˛ór_p‹t_„©uª
(
dev
, 
p‹t
 + 1, 
USB_PORT_FEAT_ENABLE
);

314 
	}
}

317 
	$usb_hub_c⁄figuª
(
usb_devi˚
 *
dev
)

319 
i
, 
Àngth
;

320 
	`ALLOC_CACHE_ALIGN_BUFFER
(, 
buf„r
, 
USB_BUFSIZ
);

321 *
bôm≠
;

322 
hubCh¨a˘îi°ics
;

323 
usb_hub_des¸ùt‹
 *
des¸ùt‹
;

324 
usb_hub_devi˚
 *
hub
;

325 
usb_hub_°©us
 *
hub°s
;

331 
hub
 = 
	`usb_hub_Æloˇã
();

332 i‡(
hub
 =
NULL
)

334 
hub
->
pusb_dev
 = 
dev
;

336 i‡(
	`usb_gë_hub_des¸ùt‹
(
dev
, 
buf„r
, 4) < 0) {

337 
	`USB_HUB_PRINTF
("usb_hub_configure: failedÅo get hub " \

338 "des¸ùt‹, givög u∞%lX\n", 
dev
->
°©us
);

341 
des¸ùt‹
 = (
usb_hub_des¸ùt‹
 *)
buf„r
;

343 
Àngth
 = 
	`mö
(
des¸ùt‹
->
bLígth
, (
usb_hub_des¸ùt‹
));

345 i‡(
	`usb_gë_hub_des¸ùt‹
(
dev
, 
buf„r
, 
Àngth
) < 0) {

346 
	`USB_HUB_PRINTF
("usb_hub_configure: failedÅo get hub " \

347 "des¸ùt‹ 2nd givög u∞%lX\n", 
dev
->
°©us
);

350 
	`mem˝y
((*)&
hub
->
desc
, 
buf„r
, 
Àngth
);

352 
	`put_u«lig√d
(
	`À16_to_˝u
(
	`gë_u«lig√d
(

353 &
des¸ùt‹
->
wHubCh¨a˘îi°ics
)),

354 &
hub
->
desc
.
wHubCh¨a˘îi°ics
);

356 
bôm≠
 = (*)&
hub
->
desc
.
Devi˚RemovabÀ
[0];

358 
	`mem£t
(
bôm≠
, 0xff, (
USB_MAXCHILDREN
+1+7)/8);

359 
bôm≠
 = (*)&
hub
->
desc
.
P‹tPowîCålMask
[0];

360 
	`mem£t
(
bôm≠
, 0xff, (
USB_MAXCHILDREN
+1+7)/8);

362 
i
 = 0; i < ((
hub
->
desc
.
bNbrP‹ts
 + 1 + 7)/8); i++)

363 
hub
->
desc
.
Devi˚RemovabÀ
[
i
] = 
des¸ùt‹
->DeviceRemovable[i];

365 
i
 = 0; i < ((
hub
->
desc
.
bNbrP‹ts
 + 1 + 7)/8); i++)

366 
hub
->
desc
.
P‹tPowîCålMask
[
i
] = 
des¸ùt‹
->PortPowerCtrlMask[i];

368 
dev
->
maxchûd
 = 
des¸ùt‹
->
bNbrP‹ts
;

369 
	`USB_HUB_PRINTF
("%dÖ‹t†dëe˘ed\n", 
dev
->
maxchûd
);

371 
hubCh¨a˘îi°ics
 = 
	`gë_u«lig√d
(&
hub
->
desc
.
wHubCh¨a˘îi°ics
);

372 
hubCh¨a˘îi°ics
 & 
HUB_CHAR_LPSM
) {

374 
	`USB_HUB_PRINTF
("gangedÖower switching\n");

377 
	`USB_HUB_PRINTF
("individualÖortÖower switching\n");

381 
	`USB_HUB_PRINTF
("unknownÑeservedÖower switching mode\n");

385 i‡(
hubCh¨a˘îi°ics
 & 
HUB_CHAR_COMPOUND
)

386 
	`USB_HUB_PRINTF
("part ofá compound device\n");

388 
	`USB_HUB_PRINTF
("standalone hub\n");

390 
hubCh¨a˘îi°ics
 & 
HUB_CHAR_OCPM
) {

392 
	`USB_HUB_PRINTF
("global over-currentÖrotection\n");

395 
	`USB_HUB_PRINTF
("individualÖort over-currentÖrotection\n");

399 
	`USB_HUB_PRINTF
("no over-currentÖrotection\n");

403 
	`USB_HUB_PRINTF
("power onÅoÖower goodÅime: %dms\n",

404 
des¸ùt‹
->
bPwrOn2PwrGood
 * 2);

405 
	`USB_HUB_PRINTF
("hub controller currentÑequirement: %dmA\n",

406 
des¸ùt‹
->
bHubC⁄åCuºít
);

408 
i
 = 0; i < 
dev
->
maxchûd
; i++)

409 
	`USB_HUB_PRINTF
("p‹à%d is%†ªmovabÀ\n", 
i
 + 1,

410 
hub
->
desc
.
Devi˚RemovabÀ
[(
i
 + 1) / 8] & \

411 (1 << ((
i
 + 1) % 8)) ? "Çot" : "");

413 i‡((
usb_hub_°©us
Ë> 
USB_BUFSIZ
) {

414 
	`USB_HUB_PRINTF
("usb_hub_configure: failedÅo get Status - " \

415 "toÿl⁄g: %d\n", 
des¸ùt‹
->
bLígth
);

419 i‡(
	`usb_gë_hub_°©us
(
dev
, 
buf„r
) < 0) {

420 
	`USB_HUB_PRINTF
("usb_hub_configure: failedÅo get Status %lX\n",

421 
dev
->
°©us
);

427 
hub°s
 = (
usb_hub_°©us
 *)
buf„r
;

430 
	`USB_HUB_PRINTF
("get_hub_statusÑeturned status %X, change %X\n",

431 
	`À16_to_˝u
(
hub°s
->
wHubSètus
),

432 
	`À16_to_˝u
(
hub°s
->
wHubCh™ge
));

433 
	`USB_HUB_PRINTF
("localÖower source is %s\n",

434 (
	`À16_to_˝u
(
hub°s
->
wHubSètus
Ë& 
HUB_STATUS_LOCAL_POWER
) ? \

436 
	`USB_HUB_PRINTF
("%sover-current conditionÉxists\n",

437 (
	`À16_to_˝u
(
hub°s
->
wHubSètus
Ë& 
HUB_STATUS_OVERCURRENT
) ? \

439 
	`usb_hub_powî_⁄
(
hub
);

446 
i
 = 0; i < 
dev
->
maxchûd
; i++)

447 
	`usb_hub_ª£t_devi˚s
(
i
 + 1);

449 
i
 = 0; i < 
dev
->
maxchûd
; i++) {

450 
	`ALLOC_CACHE_ALIGN_BUFFER
(
usb_p‹t_°©us
, 
p‹t°s
, 1);

451 
p‹t°©us
, 
p‹tch™ge
;

452 
ªt
;

453 
ul⁄g
 
°¨t
 = 
	`gë_timî
(0);

468 
ªt
 = 
	`usb_gë_p‹t_°©us
(
dev
, 
i
 + 1, 
p‹t°s
);

469 i‡(
ªt
 < 0) {

470 
	`USB_HUB_PRINTF
("get_port_status failed\n");

474 
p‹t°©us
 = 
	`À16_to_˝u
(
p‹t°s
->
wP‹tSètus
);

475 
p‹tch™ge
 = 
	`À16_to_˝u
(
p‹t°s
->
wP‹tCh™ge
);

477 i‡((
p‹tch™ge
 & 
USB_PORT_STAT_C_CONNECTION
) ==

478 (
p‹t°©us
 & 
USB_PORT_STAT_CONNECTION
)) {

483 } 
	`gë_timî
(
°¨t
Ë< 
CONFIG_SYS_HZ
 * 10);

485 
	`mdñay
(50);

487 i‡(
ªt
 < 0)

490 
	`USB_HUB_PRINTF
("Port %d Status %X Change %X\n",

491 
i
 + 1, 
p‹t°©us
, 
p‹tch™ge
);

493 i‡(
p‹tch™ge
 & 
USB_PORT_STAT_C_CONNECTION
) {

494 
	`USB_HUB_PRINTF
("p‹à%d c⁄√˘i⁄ ch™ge\n", 
i
 + 1);

495 
	`usb_hub_p‹t_c⁄√˘_ch™ge
(
dev
, 
i
);

497 i‡(
p‹tch™ge
 & 
USB_PORT_STAT_C_ENABLE
) {

498 
	`USB_HUB_PRINTF
("port %dÉnable change, status %x\n",

499 
i
 + 1, 
p‹t°©us
);

500 
	`usb_˛ór_p‹t_„©uª
(
dev
, 
i
 + 1,

501 
USB_PORT_FEAT_C_ENABLE
);

506 #i‚de‡
CONFIG_USB_EHCI_FARADAY


510 i‡(!(
p‹t°©us
 & 
USB_PORT_STAT_ENABLE
) &&

511 (
p‹t°©us
 & 
USB_PORT_STAT_CONNECTION
) &&

512 ((
dev
->
chûdªn
[
i
]))) {

513 
	`USB_HUB_PRINTF
("alreadyÑunningÖort %i " \

515 "ª-íablög...\n", 
i
 + 1);

516 
	`usb_hub_p‹t_c⁄√˘_ch™ge
(
dev
, 
i
);

520 i‡(
p‹t°©us
 & 
USB_PORT_STAT_SUSPEND
) {

521 
	`USB_HUB_PRINTF
("p‹à%d su•íd ch™ge\n", 
i
 + 1);

522 
	`usb_˛ór_p‹t_„©uª
(
dev
, 
i
 + 1,

523 
USB_PORT_FEAT_SUSPEND
);

526 i‡(
p‹tch™ge
 & 
USB_PORT_STAT_C_OVERCURRENT
) {

527 
	`USB_HUB_PRINTF
("p‹à%d ovî-cuºíàch™ge\n", 
i
 + 1);

528 
	`usb_˛ór_p‹t_„©uª
(
dev
, 
i
 + 1,

529 
USB_PORT_FEAT_C_OVER_CURRENT
);

530 
	`usb_hub_powî_⁄
(
hub
);

533 i‡(
p‹tch™ge
 & 
USB_PORT_STAT_C_RESET
) {

534 
	`USB_HUB_PRINTF
("p‹à%dÑe£àch™ge\n", 
i
 + 1);

535 
	`usb_˛ór_p‹t_„©uª
(
dev
, 
i
 + 1,

536 
USB_PORT_FEAT_C_RESET
);

541 
	}
}

543 
	$usb_hub_¥obe
(
usb_devi˚
 *
dev
, 
i‚um
)

545 
usb_öãrÁ˚
 *
iÁ˚
;

546 
usb_ídpoöt_des¸ùt‹
 *
ï
;

547 
ªt
;

549 
iÁ˚
 = &
dev
->
c⁄fig
.
if_desc
[
i‚um
];

551 i‡(
iÁ˚
->
desc
.
bI¡îÁ˚Cœss
 !
USB_CLASS_HUB
)

555 i‡((
iÁ˚
->
desc
.
bI¡îÁ˚SubCœss
 != 0) &&

556 (
iÁ˚
->
desc
.
bI¡îÁ˚SubCœss
 != 1))

559 i‡(
iÁ˚
->
desc
.
bNumEndpoöts
 != 1)

561 
ï
 = &
iÁ˚
->
ï_desc
[0];

563 i‡(!(
ï
->
bEndpoötAddªss
 & 
USB_DIR_IN
))

566 i‡((
ï
->
bmAâribuãs
 & 3) != 3)

569 
	`USB_HUB_PRINTF
("USB hub found\n");

570 
ªt
 = 
	`usb_hub_c⁄figuª
(
dev
);

571  
ªt
;

572 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/usb_storage.c

52 
	~<comm⁄.h
>

53 
	~<comm™d.h
>

54 
	~<asm/¥o˚ss‹.h
>

55 
	~<asm/addr•a˚.h
>

56 
	~<asm/byã‹dî.h
>

59 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_USB
)

60 
	~<usb.h
>

62 #ifde‡
CONFIG_USB_STORAGE


64 #unde‡
USB_STOR_DEBUG


65 #unde‡
BBB_COMDAT_TRACE


66 #unde‡
BBB_XPORT_TRACE


68 #ifdef 
USB_STOR_DEBUG


69 
	#USB_STOR_PRINTF
(
fmt
,
¨gs
...Ë
	`¥ötf
 (fmà,##¨gs)

	)

71 
	#USB_STOR_PRINTF
(
fmt
,
¨gs
...)

	)

74 
	~<scsi.h
>

78 
	gus_dúe˘i⁄
[256/8] = {

84 
	#US_DIRECTION
(
x
Ë((
us_dúe˘i⁄
[x>>3] >> (x & 7)Ë& 1)

	)

86 
	gusb_°‹_buf
[512];

87 
ccb
 
	gusb_ccb
;

93 
	#US_CBI_ADSC
 0

	)

98 
	#US_BBB_RESET
 0xff

	)

99 
	#US_BBB_GET_MAX_LUN
 0x„

	)

103 
__u32
 
	mdCBWSig«tuª
;

104 
	#CBWSIGNATURE
 0x43425355

	)

105 
__u32
 
	mdCBWTag
;

106 
__u32
 
	mdCBWD©aTøns„rLígth
;

107 
__u8
 
	mbCBWFœgs
;

108 
	#CBWFLAGS_OUT
 0x00

	)

109 
	#CBWFLAGS_IN
 0x80

	)

110 
__u8
 
	mbCBWLUN
;

111 
__u8
 
	mbCDBLígth
;

112 
	#CBWCDBLENGTH
 16

	)

113 
__u8
 
	mCBWCDB
[
CBWCDBLENGTH
];

114 } 
	tumass_bbb_cbw_t
;

115 
	#UMASS_BBB_CBW_SIZE
 31

	)

116 
__u32
 
	gCBWTag
 = 0;

120 
__u32
 
	mdCSWSig«tuª
;

121 
	#CSWSIGNATURE
 0x53425355

	)

122 
__u32
 
	mdCSWTag
;

123 
__u32
 
	mdCSWD©aResidue
;

124 
__u8
 
	mbCSWSètus
;

125 
	#CSWSTATUS_GOOD
 0x0

	)

126 
	#CSWSTATUS_FAILED
 0x1

	)

127 
	#CSWSTATUS_PHASE
 0x2

	)

128 } 
	tumass_bbb_csw_t
;

129 
	#UMASS_BBB_CSW_SIZE
 13

	)

131 
	#USB_MAX_STOR_DEV
 5

	)

132 
	gusb_max_devs
 = 0;

134 
block_dev_desc_t
 
	gusb_dev_desc
[
USB_MAX_STOR_DEV
];

136 
	gus_d©a
;

137 (*
	tå™s_cmnd
)(
	tccb
*, 
	tus_d©a
*);

138 (*
	tå™s_ª£t
)(
	tus_d©a
*);

140 
	sus_d©a
 {

141 
usb_devi˚
 *
pusb_dev
;

142 
Êags
;

143 
	#USB_READY
 (1 << 0)

	)

144 
i‚um
;

145 
ï_ö
;

146 
ï_out
;

147 
ï_öt
;

148 
sub˛ass
;

149 
¥Ÿocﬁ
;

150 
©ã¡i⁄_d⁄e
;

151 
ù_d©a
;

152 
a˘i⁄
;

153 
ù_w™ãd
;

154 *
úq_h™dÀ
;

155 
úqpùe
;

156 
úqmaxp
;

157 
úqöãrvÆ
;

158 
ccb
 *
§b
;

159 
å™s_ª£t
 
å™•‹t_ª£t
;

160 
å™s_cmnd
 
å™•‹t
;

163 
us_d©a
 
usb_°‹
[
USB_MAX_STOR_DEV
];

166 
	#USB_STOR_TRANSPORT_GOOD
 0

	)

167 
	#USB_STOR_TRANSPORT_FAILED
 -1

	)

168 
	#USB_STOR_TRANSPORT_ERROR
 -2

	)

171 
	`usb_°‹_gë_öfo
(
usb_devi˚
 *
dev
, 
us_d©a
 *
us
, 
block_dev_desc_t
 *
dev_desc
);

172 
	`usb_°‹age_¥obe
(
usb_devi˚
 *
dev
, 
i‚um
,
us_d©a
 *
ss
);

173 
	`usb_°‹_ªad
(
devi˚
, 
blkƒ
, 
blk˙t
, *
buf„r
);

174 
usb_devi˚
 * 
	`usb_gë_dev_ödex
(
ödex
);

175 
	`uhci_show_ãmp_öt_td
();

177 
block_dev_desc_t
 *
	$usb_°‹_gë_dev
(
ödex
)

179  &
usb_dev_desc
[
ödex
];

180 
	}
}

183 
	$usb_show_¥ogªss
()

185 
	`¥ötf
(".");

186 
	}
}

192 
	$usb_°‹_öfo
()

194 
i
;

196 i‡(
usb_max_devs
 > 0)

197 
i
 = 0; i < 
usb_max_devs
; i++) {

198 
	`¥ötf
 (" Devi˚ %d: ", 
i
);

199 
	`dev_¥öt
(&
usb_dev_desc
[
i
]);

202 
	`¥ötf
("No storage devices,ÖerhapsÇot 'usb start'ed..?\n");

203 
	}
}

210 
	$usb_°‹_sˇn
(
mode
)

212 
i
;

213 
usb_devi˚
 *
dev
;

216 
	`mem£t
(
usb_°‹_buf
, 0, (usb_stor_buf));

218 if(
mode
==1) {

219 
	`¥ötf
(" scanning bus for storage devices... ");

221 
	`usb_dißbÀ_asynch
(1);

223 
i
=0;i<
USB_MAX_STOR_DEV
;i++) {

224 
	`mem£t
(&
usb_dev_desc
[
i
],0,(
block_dev_desc_t
));

225 
usb_dev_desc
[
i
].
èrgë
=0xff;

226 
usb_dev_desc
[
i
].
if_ty≥
=
IF_TYPE_USB
;

227 
usb_dev_desc
[
i
].
dev
=i;

228 
usb_dev_desc
[
i
].
∑π_ty≥
=
PART_TYPE_UNKNOWN
;

229 
usb_dev_desc
[
i
].
block_ªad
=
usb_°‹_ªad
;

232 
usb_max_devs
=0;

233 
i
=0;i<
USB_MAX_DEVICE
;i++) {

235 
dev
=
	`usb_gë_dev_ödex
(
i
);

236 
	`USB_STOR_PRINTF
("i=%d\n",
i
);

237 if(
dev
==
NULL
) {

240 if(
	`usb_°‹age_¥obe
(
dev
,0,&
usb_°‹
[
usb_max_devs
])) {

242 if(
	`usb_°‹_gë_öfo
(
dev
, &
usb_°‹
[
usb_max_devs
], &
usb_dev_desc
[usb_max_devs]))

243 
usb_max_devs
++;

246 if(
usb_max_devs
==
USB_MAX_STOR_DEV
) {

247 
	`¥ötf
("max USB St‹agêDevi˚Ñóched: %d st›pög\n",
usb_max_devs
);

252 
	`usb_dißbÀ_asynch
(0);

253 
	`¥ötf
("%d St‹agêDevi˚(sËfound\n", 
usb_max_devs
);

254 if(
usb_max_devs
>0)

258 
	}
}

260 
	$usb_°‹_úq
(
usb_devi˚
 *
dev
)

262 
us_d©a
 *
us
;

263 
us
=(
us_d©a
 *)
dev
->
¥iv±r
;

265 if(
us
->
ù_w™ãd
) {

266 
us
->
ù_w™ãd
=0;

269 
	}
}

272 #ifdef 
USB_STOR_DEBUG


274 
	$usb_show_§b
(
ccb
 * 
pccb
)

276 
i
;

277 
	`¥ötf
("SRB:Üí %d d©Æí 0x%lX\¿",
pccb
->
cmdÀn
,pccb->
d©Æí
);

278 
i
=0;i<12;i++) {

279 
	`¥ötf
("%02X ",
pccb
->
cmd
[
i
]);

281 
	`¥ötf
("\n");

282 
	}
}

284 
	$di•œy_öt_°©us
(
tmp
)

286 
	`¥ötf
("Status: %s %s %s %s %s %s %s\n",

287 (
tmp
 & 
USB_ST_ACTIVE
) ? "Active" : "",

288 (
tmp
 & 
USB_ST_STALLED
) ? "Stalled" : "",

289 (
tmp
 & 
USB_ST_BUF_ERR
) ? "Buffer Error" : "",

290 (
tmp
 & 
USB_ST_BABBLE_DET
) ? "Babble Det" : "",

291 (
tmp
 & 
USB_ST_NAK_REC
) ? "NAKed" : "",

292 (
tmp
 & 
USB_ST_CRC_ERR
) ? "CRC Error" : "",

293 (
tmp
 & 
USB_ST_BIT_ERR
) ? "Bitstuff Error" : "");

294 
	}
}

300 
	$us_⁄e_å™s„r
(
us_d©a
 *
us
, 
pùe
, *
buf
, 
Àngth
)

302 
max_size
;

303 
this_x„r
;

304 
ªsu…
;

305 
∑πül
;

306 
maxåy
;

307 
°©
;

310 
max_size
 = 
	`usb_max∑ckë
(
us
->
pusb_dev
, 
pùe
) * 16;

313 
Àngth
) {

316 
this_x„r
 = 
Àngth
 > 
max_size
 ? max_size :Üength;

317 
Àngth
 -
this_x„r
;

320 
maxåy
 = 10;

325 
	`USB_STOR_PRINTF
("Bulk xfer 0x%x(%d)Åry #%d\n",

326 ()
buf
, 
this_x„r
, 11 - 
maxåy
);

327 
ªsu…
 = 
	`usb_bulk_msg
(
us
->
pusb_dev
, 
pùe
, 
buf
,

328 
this_x„r
, &
∑πül
, 
USB_CNTL_TIMEOUT
*5);

329 
	`USB_STOR_PRINTF
("bulk_msgÑeturned %d xferred %d/%d\n",

330 
ªsu…
, 
∑πül
, 
this_x„r
);

331 if(
us
->
pusb_dev
->
°©us
!=0) {

333 #ifde‡
USB_STOR_DEBUG


334 
	`di•œy_öt_°©us
(
us
->
pusb_dev
->
°©us
);

336 i‡(
us
->
pusb_dev
->
°©us
 & 
USB_ST_STALLED
) {

337 
	`USB_STOR_PRINTF
("°ÆÀd ->˛órögÉndpoöàhÆàf‹Öùê0x%x\n", 
pùe
);

338 
°©
 = 
us
->
pusb_dev
->
°©us
;

339 
	`usb_˛ór_hÆt
(
us
->
pusb_dev
, 
pùe
);

340 
us
->
pusb_dev
->
°©us
=
°©
;

341 if(
this_x„r
 =
∑πül
) {

342 
	`USB_STOR_PRINTF
("bulkÅøns„ºed wôhÉº‹ %X, buàd©®ok\n",
us
->
pusb_dev
->
°©us
);

346  
ªsu…
;

348 i‡(
us
->
pusb_dev
->
°©us
 & 
USB_ST_NAK_REC
) {

349 
	`USB_STOR_PRINTF
("Device NAKed bulk_msg\n");

350  
ªsu…
;

352 if(
this_x„r
 =
∑πül
) {

353 
	`USB_STOR_PRINTF
("bulkÅøns„ºed wôhÉº‹ %d, buàd©®ok\n",
us
->
pusb_dev
->
°©us
);

357 
	`USB_STOR_PRINTF
("bulkÅøns„ºed wôhÉº‹ %d, d©®%d\n",
us
->
pusb_dev
->
°©us
,
∑πül
);

358 i‡(!
maxåy
--)

359  
ªsu…
;

362 
this_x„r
 -
∑πül
;

363 
buf
 +
∑πül
;

365 }  
this_x„r
 );

370 
	}
}

372 
	$usb_°‹_BBB_ª£t
(
us_d©a
 *
us
)

374 
ªsu…
;

375 
pùe
;

391 
	`USB_STOR_PRINTF
("BBB_reset\n");

392 
ªsu…
 = 
	`usb_c⁄åﬁ_msg
(
us
->
pusb_dev
, 
	`usb_¢d˘æpùe
(us->pusb_dev,0),

393 
US_BBB_RESET
, 
USB_TYPE_CLASS
 | 
USB_RECIP_INTERFACE
,

394 0, 
us
->
i‚um
, 0, 0, 
USB_CNTL_TIMEOUT
*5);

396 if((
ªsu…
 < 0Ë&& (
us
->
pusb_dev
->
°©us
 & 
USB_ST_STALLED
))

398 
	`USB_STOR_PRINTF
("RESET:stall\n");

403 
	`waô_ms
(150);

404 
	`USB_STOR_PRINTF
("BBB_ª£àªsu… %d: sètu†%XÑe£t\n",
ªsu…
,
us
->
pusb_dev
->
°©us
);

405 
pùe
 = 
	`usb_rcvbulkpùe
(
us
->
pusb_dev
, us->
ï_ö
);

406 
ªsu…
 = 
	`usb_˛ór_hÆt
(
us
->
pusb_dev
, 
pùe
);

408 
	`waô_ms
(150);

409 
	`USB_STOR_PRINTF
("BBB_ª£àªsu… %d: sètu†%X cÀ¨ög INÉndpoöt\n",
ªsu…
,
us
->
pusb_dev
->
°©us
);

411 
pùe
 = 
	`usb_¢dbulkpùe
(
us
->
pusb_dev
, us->
ï_out
);

412 
ªsu…
 = 
	`usb_˛ór_hÆt
(
us
->
pusb_dev
, 
pùe
);

413 
	`waô_ms
(150);

414 
	`USB_STOR_PRINTF
("BBB_ª£àªsu… %d: sètu†%X cÀ¨ög OUTÉndpoöt\n",
ªsu…
,
us
->
pusb_dev
->
°©us
);

415 
	`USB_STOR_PRINTF
("BBB_reset done\n");

417 
	}
}

423 
	$usb_°‹_CB_ª£t
(
us_d©a
 *
us
)

425 
cmd
[12];

426 
ªsu…
;

428 
	`USB_STOR_PRINTF
("CB_reset\n");

429 
	`mem£t
(
cmd
, 0xFF, (cmd));

430 
cmd
[0] = 
SCSI_SEND_DIAG
;

431 
cmd
[1] = 4;

432 
ªsu…
 = 
	`usb_c⁄åﬁ_msg
(
us
->
pusb_dev
, 
	`usb_¢d˘æpùe
(us->pusb_dev,0),

433 
US_CBI_ADSC
, 
USB_TYPE_CLASS
 | 
USB_RECIP_INTERFACE
,

434 0, 
us
->
i‚um
, 
cmd
, (cmd), 
USB_CNTL_TIMEOUT
*5);

437 
	`waô_ms
(1500);

438 
	`USB_STOR_PRINTF
("CB_ª£àªsu… %d: sètu†%X cÀ¨ögÉndpoöàhÆt\n",
ªsu…
,
us
->
pusb_dev
->
°©us
);

439 
	`usb_˛ór_hÆt
(
us
->
pusb_dev
, 
	`usb_rcvbulkpùe
(us->pusb_dev, us->
ï_ö
));

440 
	`usb_˛ór_hÆt
(
us
->
pusb_dev
, 
	`usb_rcvbulkpùe
(us->pusb_dev, us->
ï_out
));

442 
	`USB_STOR_PRINTF
("CB_reset done\n");

444 
	}
}

450 
	$usb_°‹_BBB_comd©
(
ccb
 *
§b
, 
us_d©a
 *
us
)

452 
ªsu…
;

453 
a˘Àn
;

454 
dú_ö
;

455 
pùe
;

456 
	`ALLOC_CACHE_ALIGN_BUFFER
(
umass_bbb_cbw_t
, 
cbw_buf
, 1);

457 
umass_bbb_cbw_t
 *
cbw
 = (umass_bbb_cbw_à*)
	`KSEG1ADDR
(
cbw_buf
);

459 
dú_ö
 = 
	`US_DIRECTION
(
§b
->
cmd
[0]);

461 #ifde‡
BBB_COMDAT_TRACE


462 
	`¥ötf
("dir %dÜun %d cmdlen %d cmd %p datalen %luÖdata %p\n",

463 
dú_ö
, 
§b
->
lun
, srb->
cmdÀn
, srb->
cmd
, srb->
d©Æí
,

464 
§b
->
pd©a
);

465 i‡(
§b
->
cmdÀn
) {

466 
ªsu…
 = 0;Ñesu… < 
§b
->
cmdÀn
;Ñesult++)

467 
	`¥ötf
("cmd[%d] %#x ", 
ªsu…
, 
§b
->
cmd
[result]);

468 
	`¥ötf
("\n");

472 i‡(!(
§b
->
cmdÀn
 <
CBWCDBLENGTH
)) {

473 
	`USB_STOR_PRINTF
("usb_stor_BBB_comdat:cmdlenÅooÜarge\n");

478 
pùe
 = 
	`usb_¢dbulkpùe
(
us
->
pusb_dev
, us->
ï_out
);

480 
cbw
->
dCBWSig«tuª
 = 
	`˝u_to_À32
(
CBWSIGNATURE
);

481 
cbw
->
dCBWTag
 = 
	`˝u_to_À32
(
CBWTag
++);

482 
cbw
->
dCBWD©aTøns„rLígth
 = 
	`˝u_to_À32
(
§b
->
d©Æí
);

483 
cbw
->
bCBWFœgs
 = (
dú_ö
 ? 
CBWFLAGS_IN
 : 
CBWFLAGS_OUT
);

484 
cbw
->
bCBWLUN
 = 
§b
->
lun
;

485 
cbw
->
bCDBLígth
 = 
§b
->
cmdÀn
;

488 
	`mem˝y
(
cbw
->
CBWCDB
, 
§b
->
cmd
, srb->
cmdÀn
);

489 
ªsu…
 = 
	`usb_bulk_msg
(
us
->
pusb_dev
, 
pùe
, 
cbw
, 
UMASS_BBB_CBW_SIZE
,

490 &
a˘Àn
, 
USB_CNTL_TIMEOUT
 * 5);

491 i‡(
ªsu…
 < 0)

492 
	`USB_STOR_PRINTF
("usb_stor_BBB_comdat:usb_bulk_msgÉrror\n");

493  
ªsu…
;

494 
	}
}

499 
	$usb_°‹_CB_comd©
(
ccb
 *
§b
, 
us_d©a
 *
us
)

501 
ªsu…
;

502 
dú_ö
,
ªåy
;

503 
pùe
;

504 
°©us
;

506 
ªåy
=5;

507 
dú_ö
=
	`US_DIRECTION
(
§b
->
cmd
[0]);

509 if(
dú_ö
)

510 
pùe
=
	`usb_rcvbulkpùe
(
us
->
pusb_dev
, us->
ï_ö
);

512 
pùe
=
	`usb_¢dbulkpùe
(
us
->
pusb_dev
, us->
ï_out
);

513 
ªåy
--) {

514 
	`USB_STOR_PRINTF
("CBI gë†®comm™d: Try %d\n",5-
ªåy
);

515 #ifde‡
USB_STOR_DEBUG


516 
	`usb_show_§b
(
§b
);

519 
ªsu…
 = 
	`usb_c⁄åﬁ_msg
(
us
->
pusb_dev
, 
	`usb_¢d˘æpùe
(us->pusb_dev,0),

520 
US_CBI_ADSC
, 
USB_TYPE_CLASS
 | 
USB_RECIP_INTERFACE
,

521 0, 
us
->
i‚um
,

522 
§b
->
cmd
, srb->
cmdÀn
, 
USB_CNTL_TIMEOUT
*5);

523 
	`USB_STOR_PRINTF
("CB_å™•‹t: c⁄åﬁ msgÑëu∫ed %d, sètu†%X\n",
ªsu…
,
us
->
pusb_dev
->
°©us
);

525 i‡(
ªsu…
 < 0) {

526 if(
us
->
pusb_dev
->
°©us
 & 
USB_ST_STALLED
) {

527 
°©us
=
us
->
pusb_dev
->status;

528 
	`USB_STOR_PRINTF
(" stall during command found, clearÖipe\n");

529 
	`usb_˛ór_hÆt
(
us
->
pusb_dev
, 
	`usb_¢d˘æpùe
(us->pusb_dev,0));

530 
us
->
pusb_dev
->
°©us
=status;

532 
	`USB_STOR_PRINTF
("Éº‹ durög comm™d %02X Sèà%X\n",
§b
->
cmd
[0],
us
->
pusb_dev
->
°©us
);

533  
ªsu…
;

537 
	`USB_STOR_PRINTF
("CB_å™•‹t: c⁄åﬁ msgÑëu∫ed %d, dúe˘i⁄ i†%†tÿgÿ0x%lx\n",
ªsu…
,
dú_ö
 ? "IN" : "OUT",
§b
->
d©Æí
);

538 i‡(
§b
->
d©Æí
) {

539 
ªsu…
 = 
	`us_⁄e_å™s„r
(
us
, 
pùe
, 
§b
->
pd©a
, srb->
d©Æí
);

540 
	`USB_STOR_PRINTF
("CBIáâem±edÅÿå™s„∏d©a,Ñesu… i†%d sètu†%lX,Üí %d\n", 
ªsu…
,
us
->
pusb_dev
->
°©us
,us->pusb_dev->
a˘_Àn
);

541 if(!(
us
->
pusb_dev
->
°©us
 & 
USB_ST_NAK_REC
))

549  
ªsu…
;

550 
	}
}

553 
	$usb_°‹_CBI_gë_°©us
 (
ccb
 * 
§b
, 
us_d©a
 *
us
)

555 
timeout
;

557 
us
->
ù_w™ãd
 = 1;

558 
	`submô_öt_msg
 (
us
->
pusb_dev
, us->
úqpùe
,

559 (*Ë&
us
->
ù_d©a
, us->
úqmaxp
, us->
úqöãrvÆ
);

560 
timeout
 = 1000;

561 
timeout
--) {

562 i‡((vﬁ©ûê*Ë
us
->
ù_w™ãd
 == 0)

564 
	`waô_ms
 (10);

566 i‡(
us
->
ù_w™ãd
) {

567 
	`¥ötf
 (" DidÇot get interrupt on CBI\n");

568 
us
->
ù_w™ãd
 = 0;

569  
USB_STOR_TRANSPORT_ERROR
;

571 
USB_STOR_PRINTF


573 
us
->
ù_d©a
, us->
pusb_dev
->
úq_a˘_Àn
,

574 
us
->
pusb_dev
->
úq_°©us
);

576 i‡(
us
->
sub˛ass
 =
US_SC_UFI
) {

577 i‡(
§b
->
cmd
[0] =
SCSI_REQ_SENSE
 ||

578 
§b
->
cmd
[0] =
SCSI_INQUIRY
)

579  
USB_STOR_TRANSPORT_GOOD
;

580 i‡(
us
->
ù_d©a
)

581  
USB_STOR_TRANSPORT_FAILED
;

583  
USB_STOR_TRANSPORT_GOOD
;

586 
us
->
ù_d©a
) {

588  
USB_STOR_TRANSPORT_GOOD
;

590  
USB_STOR_TRANSPORT_FAILED
;

592  
USB_STOR_TRANSPORT_ERROR
;

594  
USB_STOR_TRANSPORT_ERROR
;

595 
	}
}

597 
	#USB_TRANSPORT_UNKNOWN_RETRY
 5

	)

598 
	#USB_TRANSPORT_NOT_READY_RETRY
 10

	)

601 
	$usb_°‹_BBB_˛ór_íd±_°Æl
(
us_d©a
 *
us
, 
__u8
 
íd±
)

603 
ªsu…
;

606 
ªsu…
 = 
	`usb_c⁄åﬁ_msg
(
us
->
pusb_dev
, 
	`usb_¢d˘æpùe
(us->pusb_dev,0),

607 
USB_REQ_CLEAR_FEATURE
, 
USB_RECIP_ENDPOINT
,

608 0, 
íd±
, 0, 0, 
USB_CNTL_TIMEOUT
*5);

609  
ªsu…
;

610 
	}
}

612 
	$usb_°‹_BBB_å™•‹t
(
ccb
 *
§b
, 
us_d©a
 *
us
)

614 
ªsu…
, 
ªåy
;

615 
dú_ö
;

616 
a˘Àn
, 
d©a_a˘Àn
;

617 
pùe
, 
pùeö
, 
pùeout
;

618 
	`ALLOC_CACHE_ALIGN_BUFFER
(
umass_bbb_csw_t
, 
csw_buf
, 1);

619 
umass_bbb_csw_t
 *
csw
 = 
	`KSEG1ADDR
(
csw_buf
);

620 *
±r1
, *
±r2
;

621 #ifde‡
BBB_XPORT_TRACE


622 *
±r
;

623 
ödex
;

625 
±r2
 = (*)
	`KSEG1ADDR
(
§b
->
pd©a
);

627 
dú_ö
 = 
	`US_DIRECTION
(
§b
->
cmd
[0]);

630 
	`USB_STOR_PRINTF
("COMMANDÖhase\n");

631 
ªsu…
 = 
	`usb_°‹_BBB_comd©
(
§b
, 
us
);

632 i‡(
ªsu…
 < 0) {

633 
	`USB_STOR_PRINTF
("failedÅo send CBW status %ld\n",

634 
us
->
pusb_dev
->
°©us
);

635 
	`usb_°‹_BBB_ª£t
(
us
);

636  
USB_STOR_TRANSPORT_FAILED
;

638 i‡(!(
us
->
Êags
 & 
USB_READY
))

639 
	`mdñay
(5);

640 
pùeö
 = 
	`usb_rcvbulkpùe
(
us
->
pusb_dev
, us->
ï_ö
);

641 
pùeout
 = 
	`usb_¢dbulkpùe
(
us
->
pusb_dev
, us->
ï_out
);

643 
d©a_a˘Àn
 = 0;

645 i‡(
§b
->
d©Æí
 == 0)

646 
°
;

647 
	`USB_STOR_PRINTF
("DATAÖhase\n");

648 i‡(
dú_ö
)

649 
pùe
 = 
pùeö
;

651 
pùe
 = 
pùeout
;

653 
ªsu…
 = 
	`usb_bulk_msg
(
us
->
pusb_dev
, 
pùe
, 
±r2
, 
§b
->
d©Æí
,

654 &
d©a_a˘Àn
, 
USB_CNTL_TIMEOUT
 * 5);

656 i‡((
ªsu…
 < 0Ë&& (
us
->
pusb_dev
->
°©us
 & 
USB_ST_STALLED
)) {

657 
	`USB_STOR_PRINTF
("DATA:stall\n");

659 
ªsu…
 = 
	`usb_°‹_BBB_˛ór_íd±_°Æl
(
us
,

660 
dú_ö
 ? 
us
->
ï_ö
 : us->
ï_out
);

661 i‡(
ªsu…
 >= 0)

663 
°
;

665 i‡(
ªsu…
 < 0) {

666 
	`USB_STOR_PRINTF
("usb_bulk_msgÉrror status %ld\n",

667 
us
->
pusb_dev
->
°©us
);

668 
	`usb_°‹_BBB_ª£t
(
us
);

669  
USB_STOR_TRANSPORT_FAILED
;

671 #ifde‡
BBB_XPORT_TRACE


672 
ödex
 = 0; index < 
d©a_a˘Àn
; index++)

673 
	`¥ötf
("pd©a[%d] %#x ", 
ödex
, 
§b
->
pd©a
[index]);

674 
	`¥ötf
("\n");

677 
°
:

678 
ªåy
 = 0;

679 
agaö
:

680 
	`USB_STOR_PRINTF
("STATUSÖhase\n");

681 
	`mem£t
(
csw
, 0, 
UMASS_BBB_CSW_SIZE
);

683 
ªsu…
 = 
	`usb_bulk_msg
(
us
->
pusb_dev
, 
pùeö
, 
csw
, 
UMASS_BBB_CSW_SIZE
,

684 &
a˘Àn
, 
USB_CNTL_TIMEOUT
*5);

687 i‡((
ªsu…
 < 0Ë&& (
ªåy
 < 1) &&

688 (
us
->
pusb_dev
->
°©us
 & 
USB_ST_STALLED
)) {

689 
	`USB_STOR_PRINTF
("STATUS:stall\n");

691 
ªsu…
 = 
	`usb_°‹_BBB_˛ór_íd±_°Æl
(
us
, us->
ï_ö
);

692 i‡(
ªsu…
 >0 && (
ªåy
++ < 1))

694 
agaö
;

696 i‡(
ªsu…
 < 0) {

697 
	`USB_STOR_PRINTF
("usb_bulk_msgÉrror status %ld\n",

698 
us
->
pusb_dev
->
°©us
);

699 
	`usb_°‹_BBB_ª£t
(
us
);

700  
USB_STOR_TRANSPORT_FAILED
;

702 #ifde‡
BBB_XPORT_TRACE


703 
±r
 = (*)
csw
;

704 
ödex
 = 0; index < 
UMASS_BBB_CSW_SIZE
; index++)

705 
	`¥ötf
("±r[%d] %#x ", 
ödex
, 
±r
[index]);

706 
	`¥ötf
("\n");

709 
pùe
 = 
	`À32_to_˝u
(
csw
->
dCSWD©aResidue
);

710 i‡(
pùe
 =0 && 
§b
->
d©Æí
 !0 && srb->d©Æí - 
d©a_a˘Àn
 != 0)

711 
pùe
 = 
§b
->
d©Æí
 - 
d©a_a˘Àn
;

712 i‡(
CSWSIGNATURE
 !
	`À32_to_˝u
(
csw
->
dCSWSig«tuª
)) {

713 
	`USB_STOR_PRINTF
("!CSWSIGNATURE\n");

714 
	`usb_°‹_BBB_ª£t
(
us
);

715  
USB_STOR_TRANSPORT_FAILED
;

716 } i‡((
CBWTag
 - 1Ë!
	`À32_to_˝u
(
csw
->
dCSWTag
)) {

717 
	`USB_STOR_PRINTF
("!Tag\n");

718 
	`usb_°‹_BBB_ª£t
(
us
);

719  
USB_STOR_TRANSPORT_FAILED
;

720 } i‡(
csw
->
bCSWSètus
 > 
CSWSTATUS_PHASE
) {

721 
	`USB_STOR_PRINTF
(">PHASE\n");

722 
	`usb_°‹_BBB_ª£t
(
us
);

723  
USB_STOR_TRANSPORT_FAILED
;

724 } i‡(
csw
->
bCSWSètus
 =
CSWSTATUS_PHASE
) {

725 
	`USB_STOR_PRINTF
("=PHASE\n");

726 
	`usb_°‹_BBB_ª£t
(
us
);

727  
USB_STOR_TRANSPORT_FAILED
;

728 } i‡(
d©a_a˘Àn
 > 
§b
->
d©Æí
) {

729 
	`USB_STOR_PRINTF
("transferred %dB instead of %ldB\n",

730 
d©a_a˘Àn
, 
§b
->
d©Æí
);

731  
USB_STOR_TRANSPORT_FAILED
;

732 } i‡(
csw
->
bCSWSètus
 =
CSWSTATUS_FAILED
) {

733 
	`USB_STOR_PRINTF
("FAILED\n");

734  
USB_STOR_TRANSPORT_FAILED
;

737  
ªsu…
;

738 
	}
}

740 
	$usb_°‹_CB_å™•‹t
(
ccb
 *
§b
, 
us_d©a
 *
us
)

742 
ªsu…
,
°©us
;

743 
ccb
 *
p§b
;

744 
ccb
 
ªq§b
;

745 
ªåy
,
nŸªady
;

747 
p§b
=&
ªq§b
;

748 
°©us
=
USB_STOR_TRANSPORT_GOOD
;

749 
ªåy
=0;

750 
nŸªady
=0;

752 
do_ªåy
:

753 
ªsu…
=
	`usb_°‹_CB_comd©
(
§b
,
us
);

754 
	`USB_STOR_PRINTF
("comm™d / D©®ªtu∫ed %d, sètu†%X\n",
ªsu…
,
us
->
pusb_dev
->
°©us
);

756 if(
us
->
¥Ÿocﬁ
==
US_PR_CBI
) {

757 
°©us
=
	`usb_°‹_CBI_gë_°©us
(
§b
,
us
);

759 if(
°©us
==
USB_STOR_TRANSPORT_ERROR
) {

760 
	`USB_STOR_PRINTF
(" USB CBI Command Error\n");

761  
°©us
;

763 
§b
->
£n£_buf
[12]=()(
us
->
ù_d©a
>>8);

764 
§b
->
£n£_buf
[13]=()(
us
->
ù_d©a
&0xff);

765 if(!
us
->
ù_d©a
) {

767 if(
°©us
==
USB_STOR_TRANSPORT_GOOD
) {

768 
	`USB_STOR_PRINTF
(" USB CBI Command Good\n");

769  
°©us
;

775 if((
ªsu…
<0Ë&& !(
us
->
pusb_dev
->
°©us
 & 
USB_ST_STALLED
)) {

776 
	`USB_STOR_PRINTF
("ERROR %X\n",
us
->
pusb_dev
->
°©us
);

777 
us
->
	`å™•‹t_ª£t
(us);

778  
USB_STOR_TRANSPORT_ERROR
;

780 if((
us
->
¥Ÿocﬁ
==
US_PR_CBI
) &&

781 ((
§b
->
cmd
[0]==
SCSI_REQ_SENSE
) ||

782 (
§b
->
cmd
[0]==
SCSI_INQUIRY
))) {

783 
	`USB_STOR_PRINTF
("NoáutoÑequestánd good\n");

784  
USB_STOR_TRANSPORT_GOOD
;

787 
	`mem£t
(&
p§b
->
cmd
[0],0,12);

788 
p§b
->
cmd
[0]=
SCSI_REQ_SENSE
;

789 
p§b
->
cmd
[1]=
§b
->
lun
<<5;

790 
p§b
->
cmd
[4]=18;

791 
p§b
->
d©Æí
=18;

792 
p§b
->
pd©a
=&
§b
->
£n£_buf
[0];

793 
p§b
->
cmdÀn
=12;

795 
ªsu…
=
	`usb_°‹_CB_comd©
(
p§b
,
us
);

796 
	`USB_STOR_PRINTF
("autÿªque°Ñëu∫ed %d\n",
ªsu…
);

798 if(
us
->
¥Ÿocﬁ
==
US_PR_CBI
) {

799 
°©us
=
	`usb_°‹_CBI_gë_°©us
(
p§b
,
us
);

801 if((
ªsu…
<0)&&!(
us
->
pusb_dev
->
°©us
 & 
USB_ST_STALLED
)) {

802 
	`USB_STOR_PRINTF
(" AUTO REQUEST ERROR %d\n",
us
->
pusb_dev
->
°©us
);

803  
USB_STOR_TRANSPORT_ERROR
;

805 
	`USB_STOR_PRINTF
("aut‹eque°Ñëu∫ed 0x%02X 0x%02X 0x%02X 0x%02X\n",
§b
->
£n£_buf
[0],srb->sense_buf[2],srb->sense_buf[12],srb->sense_buf[13]);

807 if((
§b
->
£n£_buf
[2]==0) &&

808 (
§b
->
£n£_buf
[12]==0) &&

809 (
§b
->
£n£_buf
[13]==0))

810  
USB_STOR_TRANSPORT_GOOD
;

812 
§b
->
£n£_buf
[2]) {

814  
USB_STOR_TRANSPORT_GOOD
;

817 if(
nŸªady
++ > 
USB_TRANSPORT_NOT_READY_RETRY
) {

818 
	`¥ötf
("cmd 0x%02XÑeturned 0x%02X 0x%02X 0x%02X 0x%02X (NOT READY)\n",

819 
§b
->
cmd
[0],§b->
£n£_buf
[0],srb->sense_buf[2],srb->sense_buf[12],srb->sense_buf[13]);

820  
USB_STOR_TRANSPORT_FAILED
;

822 
	`waô_ms
(100);

823 
do_ªåy
;

827 if(
ªåy
++ > 
USB_TRANSPORT_UNKNOWN_RETRY
) {

828 
	`¥ötf
("cmd 0x%02XÑeturned 0x%02X 0x%02X 0x%02X 0x%02X\n",

829 
§b
->
cmd
[0],§b->
£n£_buf
[0],srb->sense_buf[2],srb->sense_buf[12],srb->sense_buf[13]);

830  
USB_STOR_TRANSPORT_FAILED
;

832 
do_ªåy
;

836  
USB_STOR_TRANSPORT_FAILED
;

837 
	}
}

840 
	$usb_öquúy
(
ccb
 *
§b
,
us_d©a
 *
ss
)

842 
ªåy
,
i
;

843 
ªåy
=5;

846 
	`mem£t
(&
§b
->
cmd
[0],0,12);

847 
§b
->
cmd
[0]=
SCSI_INQUIRY
;

848 
§b
->
cmd
[1]=§b->
lun
<<5;

849 
§b
->
cmd
[4]=36;

850 
§b
->
d©Æí
=36;

851 
§b
->
cmdÀn
=12;

852 
i
=
ss
->
	`å™•‹t
(
§b
,ss);

853 
	`USB_STOR_PRINTF
("öquúyÑëu∫†%d\n",
i
);

854 if(
i
==0)

856 } 
ªåy
--);

858 if(!
ªåy
) {

859 
	`¥ötf
("error in inquiry\n");

863 
	}
}

865 
	$usb_ªque°_£n£
(
ccb
 *
§b
,
us_d©a
 *
ss
)

867 *
±r
;

869 
±r
=
§b
->
pd©a
;

870 
	`mem£t
(&
§b
->
cmd
[0],0,12);

871 
§b
->
cmd
[0]=
SCSI_REQ_SENSE
;

872 
§b
->
cmd
[1]=§b->
lun
<<5;

873 
§b
->
cmd
[4]=18;

874 
§b
->
d©Æí
=18;

875 
§b
->
pd©a
=&§b->
£n£_buf
[0];

876 
§b
->
cmdÀn
=12;

877 
ss
->
	`å™•‹t
(
§b
,ss);

878 
	`USB_STOR_PRINTF
("Reque° Sí£Ñëu∫ed %02X %02X %02X\n",
§b
->
£n£_buf
[2],srb->sense_buf[12],srb->sense_buf[13]);

879 
§b
->
pd©a
=
±r
;

881 
	}
}

883 
	$usb_ã°_unô_ªady
(
ccb
 *
§b
,
us_d©a
 *
ss
)

885 
ªåõs
 = 10;

888 
	`mem£t
(&
§b
->
cmd
[0],0,12);

889 
§b
->
cmd
[0]=
SCSI_TST_U_RDY
;

890 
§b
->
cmd
[1]=§b->
lun
<<5;

891 
§b
->
d©Æí
=0;

892 
§b
->
cmdÀn
=12;

893 if(
ss
->
	`å™•‹t
(
§b
,ss)==
USB_STOR_TRANSPORT_GOOD
) {

896 
	`usb_ªque°_£n£
 (
§b
, 
ss
);

897 
	`waô_ms
 (100);

898 } 
ªåõs
--);

901 
	}
}

903 
	$usb_ªad_ˇ∑côy
(
ccb
 *
§b
,
us_d©a
 *
ss
)

905 
ªåy
;

906 
ªåy
 = 3;

908 
	`mem£t
(&
§b
->
cmd
[0],0,12);

909 
§b
->
cmd
[0]=
SCSI_RD_CAPAC
;

910 
§b
->
cmd
[1]=§b->
lun
<<5;

911 
§b
->
d©Æí
=8;

912 
§b
->
cmdÀn
=12;

913 if(
ss
->
	`å™•‹t
(
§b
,ss)==
USB_STOR_TRANSPORT_GOOD
) {

916 } 
ªåy
--);

919 
	}
}

921 
	$usb_ªad_10
(
ccb
 *
§b
,
us_d©a
 *
ss
, 
°¨t
, 
blocks
)

923 
	`mem£t
(&
§b
->
cmd
[0],0,12);

924 
§b
->
cmd
[0]=
SCSI_READ10
;

925 
§b
->
cmd
[1]=§b->
lun
<<5;

926 
§b
->
cmd
[2]=((Ë(
°¨t
>>24))&0xff;

927 
§b
->
cmd
[3]=((Ë(
°¨t
>>16))&0xff;

928 
§b
->
cmd
[4]=((Ë(
°¨t
>>8))&0xff;

929 
§b
->
cmd
[5]=((Ë(
°¨t
))&0xff;

930 
§b
->
cmd
[7]=((Ë(
blocks
>>8))&0xff;

931 
§b
->
cmd
[8]=(Ë
blocks
 & 0xff;

932 
§b
->
cmdÀn
=12;

933 
	`USB_STOR_PRINTF
("ªad10: sèπ %lx block†%x\n",
°¨t
,
blocks
);

934  
ss
->
	`å™•‹t
(
§b
,ss);

935 
	}
}

938 #i‡
deföed
 (
RALINK_OHCI
)

939 
	#USB_MAX_READ_BLK
 1

	)

941 
	#USB_MAX_READ_BLK
 10

	)

944 
	$usb_°‹_ªad
(
devi˚
, 
blkƒ
, 
blk˙t
, *
tmp_buf
)

946 
°¨t
,
blks
, 
buf_addr
;

947 
smÆlblks
;

948 
usb_devi˚
 *
dev
;

949 
ªåy
,
i
;

950 
ccb
 *
§b
 = &
usb_ccb
;

951 *
buf„r
;

953 
buf„r
 = (*)
	`KSEG1ADDR
(
tmp_buf
);

955 i‡(
blk˙t
 == 0)

958 
devi˚
 &= 0xff;

961 
	`USB_STOR_PRINTF
("\nusb_ªad: dev %d \n", 
devi˚
);

962 
dev
=
NULL
;

963 
i
=0;i<
USB_MAX_DEVICE
;i++) {

964 
dev
=
	`usb_gë_dev_ödex
(
i
);

965 if(
dev
==
NULL
) {

968 if(
dev
->
devnum
==
usb_dev_desc
[
devi˚
].
èrgë
)

972 
	`usb_dißbÀ_asynch
(1);

973 
§b
->
lun
=
usb_dev_desc
[
devi˚
].lun;

974 
buf_addr
=()
buf„r
;

975 
°¨t
=
blkƒ
;

976 
blks
=
blk˙t
;

977 if(
	`usb_ã°_unô_ªady
(
§b
,(
us_d©a
 *)
dev
->
¥iv±r
)) {

978 
	`¥ötf
("Device NOTÑeady\n Request SenseÑeturned %02X %02X %02X\n",

979 
§b
->
£n£_buf
[2],srb->sense_buf[12],srb->sense_buf[13]);

983 
	`USB_STOR_PRINTF
("\nusb_ªad: dev %d sèπblk %lx, blc˙à%lx buf„∏%lx\n",
devi˚
,
°¨t
,
blks
, 
buf_addr
);

985 
ªåy
=2;

986 
§b
->
pd©a
=(*)
buf_addr
;

987 if(
blks
>
USB_MAX_READ_BLK
) {

988 
smÆlblks
=
USB_MAX_READ_BLK
;

990 
smÆlblks
=(Ë
blks
;

992 
ªåy_ô
:

993 if(
smÆlblks
==
USB_MAX_READ_BLK
)

994 
	`usb_show_¥ogªss
();

995 
§b
->
d©Æí
=
usb_dev_desc
[
devi˚
].
blksz
 * 
smÆlblks
;

996 
§b
->
pd©a
=(*)
buf_addr
;

997 if(
	`usb_ªad_10
(
§b
,(
us_d©a
 *)
dev
->
¥iv±r
, 
°¨t
, 
smÆlblks
)) {

998 
	`USB_STOR_PRINTF
("Read ERROR\n");

999 
	`usb_ªque°_£n£
(
§b
,(
us_d©a
 *)
dev
->
¥iv±r
);

1000 if(
ªåy
--)

1001 
ªåy_ô
;

1002 
blk˙t
-=
blks
;

1005 
°¨t
+=
smÆlblks
;

1006 
blks
-=
smÆlblks
;

1007 
§b
->
d©Æí
=
usb_dev_desc
[
devi˚
].
blksz
 * 
smÆlblks
;

1008 
buf_addr
+=
§b
->
d©Æí
;

1009 } 
blks
!=0);

1010 
	`USB_STOR_PRINTF
("usb_ªad:Énd sèπblk %lx, blc˙à%x buf„∏%lx\n",
°¨t
,
smÆlblks
,
buf_addr
);

1011 
	`usb_dißbÀ_asynch
(0);

1012 if(
blk˙t
>=
USB_MAX_READ_BLK
)

1013 
	`¥ötf
("\n");

1015 (
blk˙t
);

1016 
	}
}

1020 
	$usb_°‹age_¥obe
(
usb_devi˚
 *
dev
, 
i‚um
,
us_d©a
 *
ss
)

1022 
usb_öãrÁ˚
 *
iÁ˚
;

1023 
i
;

1024 
Êags
 = 0;

1026 
¥Ÿocﬁ
 = 0;

1027 
sub˛ass
 = 0;

1030 
iÁ˚
 = &
dev
->
c⁄fig
.
if_desc
[
i‚um
];

1034 
	`USB_STOR_PRINTF
("iVíd‹ %X iProdu˘ %X\n",
dev
->
des¸ùt‹
.
idVíd‹
,dev->des¸ùt‹.
idProdu˘
);

1035 i‡((
dev
->
des¸ùt‹
.
idVíd‹
Ë=0x066b && (dev->des¸ùt‹.
idProdu˘
) == 0x0103) {

1036 
	`USB_STOR_PRINTF
("patched for E-USB\n");

1037 
¥Ÿocﬁ
 = 
US_PR_CB
;

1038 
sub˛ass
 = 
US_SC_UFI
;

1042 i‡(
dev
->
des¸ùt‹
.
bDevi˚Cœss
 != 0 ||

1043 
iÁ˚
->
desc
.
bI¡îÁ˚Cœss
 !
USB_CLASS_MASS_STORAGE
 ||

1044 
iÁ˚
->
desc
.
bI¡îÁ˚SubCœss
 < 
US_SC_MIN
 ||

1045 
iÁ˚
->
desc
.
bI¡îÁ˚SubCœss
 > 
US_SC_MAX
) {

1050 
	`mem£t
(
ss
, 0, (
us_d©a
));

1053 
	`USB_STOR_PRINTF
("\n\nUSB Mass Storage device detected\n");

1056 
ss
->
Êags
 = flags;

1057 
ss
->
i‚um
 = ifnum;

1058 
ss
->
pusb_dev
 = 
dev
;

1059 
ss
->
©ã¡i⁄_d⁄e
 = 0;

1064 i‡(
sub˛ass
) {

1065 
ss
->
sub˛ass
 = subclass;

1066 
ss
->
¥Ÿocﬁ
 =Örotocol;

1068 
ss
->
sub˛ass
 = 
iÁ˚
->
desc
.
bI¡îÁ˚SubCœss
;

1069 
ss
->
¥Ÿocﬁ
 = 
iÁ˚
->
desc
.
bI¡îÁ˚PrŸocﬁ
;

1073 
	`USB_STOR_PRINTF
("Transport: ");

1074 
ss
->
¥Ÿocﬁ
) {

1075 
US_PR_CB
:

1076 
	`USB_STOR_PRINTF
("Control/Bulk\n");

1077 
ss
->
å™•‹t
 = 
usb_°‹_CB_å™•‹t
;

1078 
ss
->
å™•‹t_ª£t
 = 
usb_°‹_CB_ª£t
;

1081 
US_PR_CBI
:

1082 
	`USB_STOR_PRINTF
("Control/Bulk/Interrupt\n");

1083 
ss
->
å™•‹t
 = 
usb_°‹_CB_å™•‹t
;

1084 
ss
->
å™•‹t_ª£t
 = 
usb_°‹_CB_ª£t
;

1086 
US_PR_BULK
:

1087 
	`USB_STOR_PRINTF
("Bulk/Bulk/Bulk\n");

1088 
ss
->
å™•‹t
 = 
usb_°‹_BBB_å™•‹t
;

1089 
ss
->
å™•‹t_ª£t
 = 
usb_°‹_BBB_ª£t
;

1092 
	`¥ötf
("USB Storage Transport unknown /Çot yet implemented\n");

1102 
i
 = 0; i < 
iÁ˚
->
desc
.
bNumEndpoöts
; i++) {

1104 i‡((
iÁ˚
->
ï_desc
[
i
].
bmAâribuãs
 & 
USB_ENDPOINT_XFERTYPE_MASK
)

1105 =
USB_ENDPOINT_XFER_BULK
) {

1106 i‡(
iÁ˚
->
ï_desc
[
i
].
bEndpoötAddªss
 & 
USB_DIR_IN
)

1107 
ss
->
ï_ö
 = 
iÁ˚
->
ï_desc
[
i
].
bEndpoötAddªss
 &

1108 
USB_ENDPOINT_NUMBER_MASK
;

1110 
ss
->
ï_out
 = 
iÁ˚
->
ï_desc
[
i
].
bEndpoötAddªss
 &

1111 
USB_ENDPOINT_NUMBER_MASK
;

1115 i‡((
iÁ˚
->
ï_desc
[
i
].
bmAâribuãs
 & 
USB_ENDPOINT_XFERTYPE_MASK
)

1116 =
USB_ENDPOINT_XFER_INT
) {

1117 
ss
->
ï_öt
 = 
iÁ˚
->
ï_desc
[
i
].
bEndpoötAddªss
 &

1118 
USB_ENDPOINT_NUMBER_MASK
;

1119 
ss
->
úqöãrvÆ
 = 
iÁ˚
->
ï_desc
[
i
].
bI¡îvÆ
;

1122 
	`USB_STOR_PRINTF
("Endpoints In %d Out %d Int %d\n",

1123 
ss
->
ï_ö
, ss->
ï_out
, ss->
ï_öt
);

1132 #ifde‡
CONFIG_USB_XHCI


1133 
	`usb_£t_öãrÁ˚
(
dev
, 
iÁ˚
->
desc
.
bI¡îÁ˚Numbî
, 0) ||

1135 !
ss
->
ï_ö
 || !ss->
ï_out
 ||

1136 (
ss
->
¥Ÿocﬁ
 =
US_PR_CBI
 && ss->
ï_öt
 == 0)) {

1137 
	`USB_STOR_PRINTF
("Problems with device\n");

1145 i‡(
ss
->
sub˛ass
 !
US_SC_UFI
 && ss->sub˛as†!
US_SC_SCSI
 &&

1146 
ss
->
sub˛ass
 !
US_SC_8070
) {

1149 if(
ss
->
ï_öt
) {

1152 
ss
->
úqöãrvÆ
 = (ss->irqinterval > 0) ? ss->irqinterval : 255;

1153 
ss
->
úqpùe
 = 
	`usb_rcvöçùe
(ss->
pusb_dev
, ss->
ï_öt
);

1154 
ss
->
úqmaxp
 = 
	`usb_max∑ckë
(
dev
, ss->
úqpùe
);

1155 
dev
->
úq_h™dÀ
=
usb_°‹_úq
;

1157 
dev
->
¥iv±r
=(*)
ss
;

1159 
	}
}

1161 
	$usb_°‹_gë_öfo
(
usb_devi˚
 *
dev
,
us_d©a
 *
ss
,
block_dev_desc_t
 *
dev_desc
)

1163 
≥rq
,
modi
;

1164 
ˇp_buf
[2];

1165 *
ˇ∑côy
,*
blksz
;

1166 
ccb
 *
pccb
 = &
usb_ccb
;

1167 *
usb_°‹_buf_±r
 = (*)
	`KSEG1ADDR
(&
usb_°‹_buf
[0]);

1168 *
ˇp
 = (*)
	`KSEG1ADDR
(&
ˇp_buf
[0]);

1178 (
dev
->
des¸ùt‹
.
idVíd‹
 == 0x054c &&

1179 
dev
->
des¸ùt‹
.
idProdu˘
 == 0x019e)

1183 (
dev
->
des¸ùt‹
.
idVíd‹
 == 0x066f &&

1184 
dev
->
des¸ùt‹
.
idProdu˘
 == 0x2010)

1186 
	`USB_STOR_PRINTF
("usb_stor_get_info: skipping RESET..\n");

1188 
ss
->
	`å™•‹t_ª£t
(ss);

1191 
pccb
->
pd©a
 = (*)
usb_°‹_buf_±r
;

1192 
dev_desc
->
èrgë
 = 
dev
->
devnum
;

1193 
pccb
->
lun
 = 
dev_desc
->lun;

1194 
	`USB_STOR_PRINTF
("áddªs†%d\n",
dev_desc
->
èrgë
);

1196 if(
	`usb_öquúy
(
pccb
,
ss
))

1199 
≥rq
 = 
usb_°‹_buf_±r
[0];

1200 
modi
 = 
usb_°‹_buf_±r
[1];

1201 if((
≥rq
 & 0x1f) == 0x1f) {

1204 if((
modi
&0x80) == 0x80) {

1205 
dev_desc
->
ªmovabÀ
 = 1;

1208 
	`mem˝y
(&
dev_desc
->
víd‹
[0], &
usb_°‹_buf_±r
[8], 8);

1209 
	`mem˝y
(&
dev_desc
->
¥odu˘
[0], &
usb_°‹_buf_±r
[16], 16);

1210 
	`mem˝y
(&
dev_desc
->
ªvisi⁄
[0], &
usb_°‹_buf_±r
[32], 4);

1211 
dev_desc
->
víd‹
[8] = 0;

1212 
dev_desc
->
¥odu˘
[16] = 0;

1213 
dev_desc
->
ªvisi⁄
[4] = 0;

1214 
	`USB_STOR_PRINTF
("ISO Vî†%X, Re•⁄£ D©®%X\n",
usb_°‹_buf_±r
[2],usb_stor_buf_ptr[3]);

1215 if(
	`usb_ã°_unô_ªady
(
pccb
,
ss
)) {

1216 
	`¥ötf
("Devi˚ NOTÑódy\¿ Reque° Sí£Ñëu∫ed %02X %02X %02X\n",
pccb
->
£n£_buf
[2],pccb->sense_buf[12],pccb->sense_buf[13]);

1217 if(
dev_desc
->
ªmovabÀ
 == 1) {

1218 
dev_desc
->
ty≥
 = 
≥rq
;

1224 
pccb
->
pd©a
 = (*)
ˇp
;

1225 
	`mem£t
(
pccb
->
pd©a
,0,8);

1226 if(
	`usb_ªad_ˇ∑côy
(
pccb
,
ss
) != 0) {

1227 
	`¥ötf
("READ_CAP ERROR\n");

1228 
ˇp
[0] = 2880;

1229 
ˇp
[1] = 0x200;

1231 
	`USB_STOR_PRINTF
("Ród C≠acôyÑëu∫s: 0x%lx, 0x%lx\n",
ˇp
[0],cap[1]);

1233 if(
ˇp
[0]>(0x200000 * 10))

1234 
ˇp
[0]>>=16;

1236 #ifde‡
LITTLEENDIAN


1237 
ˇp
[0] = (()(

1238 ((()(
ˇp
[0]) & ()0x000000ffUL) << 24) |

1239 ((()(
ˇp
[0]) & ()0x0000ff00UL) << 8) |

1240 ((()(
ˇp
[0]) & ()0x00ff0000UL) >> 8) |

1241 ((()(
ˇp
[0]) & ()0xff000000UL) >> 24) ));

1242 
ˇp
[1] = (()(

1243 ((()(
ˇp
[1]) & ()0x000000ffUL) << 24) |

1244 ((()(
ˇp
[1]) & ()0x0000ff00UL) << 8) |

1245 ((()(
ˇp
[1]) & ()0x00ff0000UL) >> 8) |

1246 ((()(
ˇp
[1]) & ()0xff000000UL) >> 24) ));

1249 
ˇp
[0] += 1;

1250 
ˇ∑côy
 = &
ˇp
[0];

1251 
blksz
 = &
ˇp
[1];

1252 
	`USB_STOR_PRINTF
("C≠acôy = 0x%lx, blocksz = 0x%lx\n",*
ˇ∑côy
,*
blksz
);

1253 
dev_desc
->
lba
 = *
ˇ∑côy
;

1254 
dev_desc
->
blksz
 = *blksz;

1255 
dev_desc
->
ty≥
 = 
≥rq
;

1256 
	`USB_STOR_PRINTF
("áddªs†%d\n",
dev_desc
->
èrgë
);

1257 
	`USB_STOR_PRINTF
("∑πy≥: %d\n",
dev_desc
->
∑π_ty≥
);

1259 
	`öô_∑π
(
dev_desc
);

1261 
	`USB_STOR_PRINTF
("∑πy≥: %d\n",
dev_desc
->
∑π_ty≥
);

1263 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/cpu/ralink_soc/cpu.c

24 
	~<asm-mùs/mù§egs.h
>

25 
	~<asm-mùs/ˇche›s.h
>

26 
	~<comm⁄.h
>

27 
	~<comm™d.h
>

28 
	~<asm/mù§egs.h
>

29 
	~<π_mm≠.h
>

31 
	#ˇche_›
(
›
,
addr
) \

32 
__asm__
 
	`__vﬁ©ûe__
( \

39 : "i" (
›
), "R" (*(*)(
addr
)))

	)

42 #i‡
deföed
(
RT6855A_FPGA_BOARD
Ë|| deföed(
RT6855A_ASIC_BOARD
)

43 
	$do_ª£t
(
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

45 
	`ø_oué
(
RALINK_TIMER_BASE
 + 0x2c, 0x1);

46 
	`ø_‹
(
RALINK_TIMER_BASE
, (1 << 5) | (1 << 25));

48 
	}
}

51 
	#SOFTRES_REG
 (
RALINK_SYSCTL_BASE
 + 0x0034)

	)

52 
	#GORESET
 (0x01)

	)

54 
	$do_ª£t
(
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

56 *(vﬁ©ûê*)(
SOFTRES_REG
Ë
GORESET
;

58 
	}
}

61 #ifde‡
CONFIG_SYS_CACHELINE_SIZE


63 
ölöe
 
	$iˇche_löe_size
()

65  
CONFIG_SYS_CACHELINE_SIZE
;

66 
	}
}

68 
ölöe
 
	$dˇche_löe_size
()

70  
CONFIG_SYS_CACHELINE_SIZE
;

71 
	}
}

75 
__©åibuã__
((
nomùs16
)Ë
ölöe
 
	$iˇche_löe_size
()

77 
c⁄f1
, 
û
;

78 
c⁄f1
 = 
	`ªad_c0_c⁄fig1
();

79 
û
 = (
c⁄f1
 & 
MIPS_CONF1_IL
Ë>> 
MIPS_CONF1_IL_SHIFT
;

80 i‡(!
û
)

82  2 << 
û
;

83 
	}
}

85 
__©åibuã__
((
nomùs16
)Ë
ölöe
 
	$dˇche_löe_size
()

87 
c⁄f1
, 
dl
;

88 
c⁄f1
 = 
	`ªad_c0_c⁄fig1
();

89 
dl
 = (
c⁄f1
 & 
MIPS_CONF1_DL
Ë>> 
MIPS_CONF1_DL_SHIFT
;

90 i‡(!
dl
)

92  2 << 
dl
;

93 
	}
}

97 
__©åibuã__
((
nomùs16
)Ë
	$Êush_ˇche
 (
ul⁄g
 
°¨t_addr
, ul⁄g 
size
)

99 
ûsize
 = 
	`iˇche_löe_size
();

100 
dlsize
 = 
	`dˇche_löe_size
();

101 
addr
, 
´nd
;

104 i‡(
size
 == 0)

107 
addr
 = 
°¨t_addr
 & ~(
dlsize
 - 1);

108 
´nd
 = (
°¨t_addr
 + 
size
 - 1Ë& ~(
dlsize
 - 1);

110 i‡(
ûsize
 =
dlsize
) {

113 
	`ˇche_›
(
HIT_WRITEBACK_INV_D
, 
addr
);

114 
	`ˇche_›
(
HIT_INVALIDATE_I
, 
addr
);

115 i‡(
addr
 =
´nd
)

117 
addr
 +
dlsize
;

124 
	`ˇche_›
(
HIT_WRITEBACK_INV_D
, 
addr
);

125 i‡(
addr
 =
´nd
)

127 
addr
 +
dlsize
;

131 
addr
 = 
°¨t_addr
 & ~(
ûsize
 - 1);

132 
´nd
 = (
°¨t_addr
 + 
size
 - 1Ë& ~(
ûsize
 - 1);

134 
	`ˇche_›
(
HIT_INVALIDATE_I
, 
addr
);

135 i‡(
addr
 =
´nd
)

137 
addr
 +
ûsize
;

139 
	}
}

140 #ifde‡
RT2880_U_BOOT_CMD_OPEN


142 
__©åibuã__
((
nomùs16
)Ë
	$wrôe_⁄e_éb
–
ödex
, 
u32
 
∑gemask
, u32 
hi
, u32 
low0
, u32 
low1
 ){

143 
	`wrôe_32bô_˝0_ªgi°î
(
CP0_ENTRYLO0
, 
low0
);

144 
	`wrôe_32bô_˝0_ªgi°î
(
CP0_PAGEMASK
, 
∑gemask
);

145 
	`wrôe_32bô_˝0_ªgi°î
(
CP0_ENTRYLO1
, 
low1
);

146 
	`wrôe_32bô_˝0_ªgi°î
(
CP0_ENTRYHI
, 
hi
);

147 
	`wrôe_32bô_˝0_ªgi°î
(
CP0_INDEX
, 
ödex
);

148 
	`éb_wrôe_ödexed
();

149 
	}
}

152 
__©åibuã__
((
nomùs16
)Ë
	$Êush_dˇche_ønge
(
ul⁄g
 
°¨t_addr
, ul⁄g 
°›
)

154 
lsize
 = 
	`dˇche_löe_size
();

155 
addr
 = 
°¨t_addr
 & ~(
lsize
 - 1);

156 
´nd
 = (
°›
 - 1Ë& ~(
lsize
 - 1);

159 
	`ˇche_›
(
HIT_WRITEBACK_INV_D
, 
addr
);

160 i‡(
addr
 =
´nd
)

162 
addr
 +
lsize
;

164 
	}
}

166 
__©åibuã__
((
nomùs16
)Ë
	$övÆid©e_dˇche_ønge
(
ul⁄g
 
°¨t_addr
, ul⁄g 
°›
)

168 
lsize
 = 
	`dˇche_löe_size
();

169 
addr
 = 
°¨t_addr
 & ~(
lsize
 - 1);

170 
´nd
 = (
°›
 - 1Ë& ~(
lsize
 - 1);

173 
	`ˇche_›
(
HIT_INVALIDATE_D
, 
addr
);

174 i‡(
addr
 =
´nd
)

176 
addr
 +
lsize
;

178 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/cpu/ralink_soc/interrupts.c

24 
	~<comm⁄.h
>

26 
	$íabÀ_öãºu±s
()

28 
	}
}

30 
	$dißbÀ_öãºu±s
()

33 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/disk/part.c

24 
	~<comm⁄.h
>

25 
	~<comm™d.h
>

26 
	~<ide.h
>

28 #unde‡
PART_DEBUG


30 #ifdef 
PART_DEBUG


31 
	#PRINTF
(
fmt
,
¨gs
...Ë
	`¥ötf
 (fmà,##¨gs)

	)

33 
	#PRINTF
(
fmt
,
¨gs
...)

	)

36 #i‡((
CONFIG_COMMANDS
 & 
CFG_CMD_IDE
) || \

37 (
	gCONFIG_COMMANDS
 & 
	gCFG_CMD_SCSI
) || \

38 (
	gCONFIG_COMMANDS
 & 
	gCFG_CMD_USB
) || \

39 
deföed
(
CONFIG_MMC
) || \

40 
	$deföed
(
CONFIG_SYSTEMACE
) )

46 
	$dev_¥öt
 (
block_dev_desc_t
 *
dev_desc
)

48 #ifde‡
CONFIG_LBA48


49 
uöt64_t
 
lba512
;

51 
lbaöt_t
 
lba512
;

54 i‡(
dev_desc
->
ty≥
==
DEV_TYPE_UNKNOWN
) {

55 
	`puts
 ("notávailable\n");

58 i‡(
dev_desc
->
if_ty≥
==
IF_TYPE_SCSI
) {

59 
	`¥ötf
 ("(%d:%dË", 
dev_desc
->
èrgë
,dev_desc->
lun
);

61 i‡(
dev_desc
->
if_ty≥
==
IF_TYPE_IDE
) {

62 
	`¥ötf
 ("Model: %s Firm: %s Ser#: %s\n",

63 
dev_desc
->
víd‹
,

64 
dev_desc
->
ªvisi⁄
,

65 
dev_desc
->
¥odu˘
);

67 
	`¥ötf
 ("Vendor: %s Prod.: %s Rev: %s\n",

68 
dev_desc
->
víd‹
,

69 
dev_desc
->
¥odu˘
,

70 
dev_desc
->
ªvisi⁄
);

72 
	`puts
 (" Type: ");

73 i‡(
dev_desc
->
ªmovabÀ
)

74 
	`puts
 ("Removable ");

75 
dev_desc
->
ty≥
 & 0x1F) {

76 
DEV_TYPE_HARDDISK
: 
	`puts
 ("Hard Disk");

78 
DEV_TYPE_CDROM
: 
	`puts
 ("CD ROM");

80 
DEV_TYPE_OPDISK
: 
	`puts
 ("Optical Device");

82 
DEV_TYPE_TAPE
: 
	`puts
 ("Tape");

84 : 
	`¥ötf
 ("# %02X #", 
dev_desc
->
ty≥
 & 0x1F);

87 
	`puts
 ("\n");

88 i‡((
dev_desc
->
lba
 * dev_desc->
blksz
)>0L) {

89 
ul⁄g
 
mb
, 
mb_quŸ
, 
mb_ªm
, 
gb
, 
gb_quŸ
, 
gb_ªm
;

90 
lbaöt_t
 
lba
;

92 
lba
 = 
dev_desc
->lba;

94 
lba512
 = (
lba
 * (
dev_desc
->
blksz
/512));

95 
mb
 = (10 * 
lba512
) / 2048;

97 
mb_quŸ
 = 
mb
 / 10;

98 
mb_ªm
 = 
mb
 - (10 * 
mb_quŸ
);

100 
gb
 = 
mb
 / 1024;

101 
gb_quŸ
 = 
gb
 / 10;

102 
gb_ªm
 = 
gb
 - (10 * 
gb_quŸ
);

103 #ifde‡
CONFIG_LBA48


104 i‡(
dev_desc
->
lba48
)

105 
	`¥ötf
 (" Supports 48-bitáddressing\n");

107 #i‡
	`deföed
(
CFG_64BIT_LBA
Ë&& deföed(
CFG_64BIT_VSPRINTF
)

108 
	`¥ötf
 (" Capacity: %ld.%ld MB = %ld.%ld GB (%qd x %ld)\n",

109 
mb_quŸ
, 
mb_ªm
,

110 
gb_quŸ
, 
gb_ªm
,

111 
lba
,

112 
dev_desc
->
blksz
);

114 
	`¥ötf
 (" Capacity: %ld.%ld MB = %ld.%ld GB (%ld x %ld)\n",

115 
mb_quŸ
, 
mb_ªm
,

116 
gb_quŸ
, 
gb_ªm
,

117 (
ul⁄g
)
lba
,

118 
dev_desc
->
blksz
);

121 
	`puts
 (" Capacity:Çotávailable\n");

123 
	}
}

126 #i‡((
CONFIG_COMMANDS
 & 
CFG_CMD_IDE
) || \

127 (
	gCONFIG_COMMANDS
 & 
	gCFG_CMD_SCSI
) || \

128 (
	gCONFIG_COMMANDS
 & 
	gCFG_CMD_USB
) || \

129 
	$deföed
(
CONFIG_SYSTEMACE
) )

131 #i‡
	`deföed
(
CONFIG_MAC_PARTITION
) || \

132 
	`deföed
(
CONFIG_DOS_PARTITION
) || \

133 
	`deföed
(
CONFIG_ISO_PARTITION
) || \

134 
	$deföed
(
CONFIG_AMIGA_PARTITION
)

136 
	$öô_∑π
 (
block_dev_desc_t
 * 
dev_desc
)

138 #ifde‡
CONFIG_ISO_PARTITION


139 i‡(
	`ã°_∑π_iso
(
dev_desc
) == 0) {

140 
dev_desc
->
∑π_ty≥
 = 
PART_TYPE_ISO
;

145 #ifde‡
CONFIG_MAC_PARTITION


146 i‡(
	`ã°_∑π_mac
(
dev_desc
) == 0) {

147 
dev_desc
->
∑π_ty≥
 = 
PART_TYPE_MAC
;

152 #ifde‡
CONFIG_DOS_PARTITION


153 i‡(
	`ã°_∑π_dos
(
dev_desc
) == 0) {

154 
dev_desc
->
∑π_ty≥
 = 
PART_TYPE_DOS
;

159 #ifde‡
CONFIG_AMIGA_PARTITION


160 i‡(
	`ã°_∑π_amiga
(
dev_desc
) == 0) {

161 
dev_desc
->
∑π_ty≥
 = 
PART_TYPE_AMIGA
;

165 
	}
}

168 
	$gë_∑πôi⁄_öfo
 (
block_dev_desc_t
 *
dev_desc
, 
∑π
, 
disk_∑πôi⁄_t
 *
öfo
)

170 
dev_desc
->
∑π_ty≥
) {

171 #ifde‡
CONFIG_MAC_PARTITION


172 
PART_TYPE_MAC
:

173 i‡(
	`gë_∑πôi⁄_öfo_mac
(
dev_desc
,
∑π
,
öfo
) == 0) {

174 
	`PRINTF
 ("## Valid MACÖartition found ##\n");

180 #ifde‡
CONFIG_DOS_PARTITION


181 
PART_TYPE_DOS
:

182 i‡(
	`gë_∑πôi⁄_öfo_dos
(
dev_desc
,
∑π
,
öfo
) == 0) {

183 
	`PRINTF
 ("## Valid DOSÖartition found ##\n");

189 #ifde‡
CONFIG_ISO_PARTITION


190 
PART_TYPE_ISO
:

191 i‡(
	`gë_∑πôi⁄_öfo_iso
(
dev_desc
,
∑π
,
öfo
) == 0) {

192 
	`PRINTF
 ("## Valid ISO bootÖartition found ##\n");

198 #ifde‡
CONFIG_AMIGA_PARTITION


199 
PART_TYPE_AMIGA
:

200 i‡(
	`gë_∑πôi⁄_öfo_amiga
(
dev_desc
, 
∑π
, 
öfo
) == 0)

202 
	`PRINTF
 ("## Valid AmigaÖartition found ##\n");

211 
	}
}

213 
	$¥öt_∑π_hódî
 (c⁄° *
ty≥
, 
block_dev_desc_t
 * 
dev_desc
)

215 
	`puts
 ("\nPartition Map for ");

216 
dev_desc
->
if_ty≥
) {

217 
IF_TYPE_IDE
: 
	`puts
 ("IDE");

219 
IF_TYPE_SCSI
: 
	`puts
 ("SCSI");

221 
IF_TYPE_ATAPI
: 
	`puts
 ("ATAPI");

223 
IF_TYPE_USB
: 
	`puts
 ("USB");

225 
IF_TYPE_DOC
: 
	`puts
 ("DOC");

227 : 
	`puts
 ("UNKNOWN");

230 
	`¥ötf
 (" device %d -- Partition Type: %s\n\n",

231 
dev_desc
->
dev
, 
ty≥
);

232 
	}
}

234 
	$¥öt_∑π
 (
block_dev_desc_t
 * 
dev_desc
)

237 
dev_desc
->
∑π_ty≥
) {

238 #ifde‡
CONFIG_MAC_PARTITION


239 
PART_TYPE_MAC
:

240 
	`PRINTF
 ("## Testing for valid MACÖartition ##\n");

241 
	`¥öt_∑π_hódî
 ("MAC", 
dev_desc
);

242 
	`¥öt_∑π_mac
 (
dev_desc
);

245 #ifde‡
CONFIG_DOS_PARTITION


246 
PART_TYPE_DOS
:

247 
	`PRINTF
 ("## Testing for valid DOSÖartition ##\n");

248 
	`¥öt_∑π_hódî
 ("DOS", 
dev_desc
);

249 
	`¥öt_∑π_dos
 (
dev_desc
);

253 #ifde‡
CONFIG_ISO_PARTITION


254 
PART_TYPE_ISO
:

255 
	`PRINTF
 ("## Testing for valid ISO BootÖartition ##\n");

256 
	`¥öt_∑π_hódî
 ("ISO", 
dev_desc
);

257 
	`¥öt_∑π_iso
 (
dev_desc
);

261 #ifde‡
CONFIG_AMIGA_PARTITION


262 
PART_TYPE_AMIGA
:

263 
	`PRINTF
 ("## Testing forá valid AmigaÖartition ##\n");

264 
	`¥öt_∑π_hódî
 ("AMIGA", 
dev_desc
);

265 
	`¥öt_∑π_amiga
 (
dev_desc
);

269 
	`puts
 ("## UnknownÖartitionÅable\n");

270 
	}
}

274 #îr‹ 
√ôhî
 
CONFIG_MAC_PARTITION
 
n‹
 
CONFIG_DOS_PARTITION
Ç‹ 
CONFIG_ISO_PARTITION
 
c⁄figuªd
!

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/disk/part_amiga.c

24 
	~<comm⁄.h
>

25 
	~<comm™d.h
>

26 
	~<ide.h
>

27 
	~"∑π_amiga.h
"

29 #i‡((
CONFIG_COMMANDS
 & 
CFG_CMD_IDE
) || \

30 (
	gCONFIG_COMMANDS
 & 
	gCFG_CMD_SCSI
) || \

31 (
	gCONFIG_COMMANDS
 & 
	gCFG_CMD_USB
) || \

32 
deföed
(
CONFIG_MMC
) || \

33 
deföed
(
CONFIG_SYSTEMACE
ËË&& 
	$deföed
(
CONFIG_AMIGA_PARTITION
)

35 #unde‡
AMIGA_DEBUG


37 #ifde‡
AMIGA_DEBUG


38 
	#PRINTF
(
fmt
, 
¨gs
...Ë
	`¥ötf
(fmà,##¨gs)

	)

40 
	#PRINTF
(
fmt
, 
¨gs
...)

	)

43 
	sblock_hódî


45 
u32
 
id
;

46 
u32
 
summed_l⁄gs
;

47 
s32
 
chk_sum
;

50 
block_buf„r
[
DEFAULT_SECTOR_SIZE
];

51 
rigid_disk_block
 
rdb
 = {0
	}
};

52 
boŸcode_block
 
	gboŸcode
 = {0};

57 
	$b˝l_°r˝y
(*
to
, *
‰om
)

59 
Àn
 = *
‰om
++;

61 
Àn
)

63 *
to
++ = *
‰om
++;

64 
Àn
--;

66 *
to
 = 0;

67 
	}
}

73 
	$b°r_¥öt
(*
°rög
)

75 
Àn
 = *
°rög
++;

76 
buf„r
[256];

77 
i
;

79 
i
 = 0;

80 
Àn
)

82 
buf„r
[
i
++] = *
°rög
++;

83 
Àn
--;

86 
buf„r
[
i
] = 0;

87 
	`¥ötf
("%-10s", 
buf„r
);

88 
	}
}

95 
	$sum_block
(
block_hódî
 *
hódî
)

97 
s32
 *
block
 = (s32 *)
hódî
;

98 
u32
 
i
;

99 
s32
 
sum
 = 0;

101 
i
 = 0; i < 
hódî
->
summed_l⁄gs
; i++)

102 
sum
 +*
block
++;

104  (
sum
 != 0);

105 
	}
}

114 
	$¥öt_disk_ty≥
(
u32
 
disk_ty≥
)

116 
buf„r
[6];

117 
buf„r
[0] = (
disk_ty≥
 & 0xFF000000)>>24;

118 
buf„r
[1] = (
disk_ty≥
 & 0x00FF0000)>>16;

119 
buf„r
[2] = (
disk_ty≥
 & 0x0000FF00)>>8;

120 
buf„r
[3] = '\\';

121 
buf„r
[4] = (
disk_ty≥
 & 0x000000FF) + '0';

122 
buf„r
[5] = 0;

123 
	`¥ötf
("%s", 
buf„r
);

124 
	}
}

129 
	$¥öt_∑π_öfo
(
∑πôi⁄_block
 *
p
)

131 
amiga_∑π_geomëry
 *
g
;

133 
g
 = (
amiga_∑π_geomëry
 *)&(
p
->
ívú⁄mít
);

135 
	`b°r_¥öt
(
p
->
drive_«me
);

136 
	`¥ötf
("%6d\t%6d\t",

137 
g
->
low_cyl
 * g->
block_≥r_åack
 * g->
surÁ˚s
 ,

138 (
g
->
high_cyl
 - g->
low_cyl
 + 1Ë* g->
block_≥r_åack
 * g->
surÁ˚s
 - 1);

139 
	`¥öt_disk_ty≥
(
g
->
dos_ty≥
);

140 
	`¥ötf
("\t%5d\n", 
g
->
boŸ_¥i‹ôy
);

141 
	}
}

149 
rigid_disk_block
 *
	$gë_rdisk
(
block_dev_desc_t
 *
dev_desc
)

151 
i
;

152 
limô
;

153 *
s
;

155 
s
 = 
	`gëív
("amiga_scanlimit");

156 i‡(
s
)

157 
limô
 = 
	`©oi
(
s
);

159 
limô
 = 
AMIGA_BLOCK_LIMIT
;

161 
i
=0; i<
limô
; i++)

163 
ul⁄g
 
ªs
 = 
dev_desc
->
	`block_ªad
(dev_desc->
dev
, 
i
, 1,

164 (
ul⁄g
 *)
block_buf„r
);

165 i‡(
ªs
 == 1)

167 
rigid_disk_block
 *
ådb
 = (rigid_disk_block *)
block_buf„r
;

168 i‡(
ådb
->
id
 =
AMIGA_ID_RDISK
)

170 
	`PRINTF
("Rigid disk block su•e˘áà%d, checkög checksum\n",
i
);

171 i‡(
	`sum_block
((
block_hódî
 *)
block_buf„r
) == 0)

173 
	`PRINTF
("FOUND\n");

174 
	`mem˝y
(&
rdb
, 
ådb
, (
rigid_disk_block
));

175  (
rigid_disk_block
 *)&
rdb
;

180 
	`PRINTF
("Done scanning,Ço RDB found\n");

181  
NULL
;

182 
	}
}

190 
boŸcode_block
 *
	$gë_boŸcode
(
block_dev_desc_t
 *
dev_desc
)

192 
i
;

193 
limô
;

194 *
s
;

196 
s
 = 
	`gëív
("amiga_scanlimit");

197 i‡(
s
)

198 
limô
 = 
	`©oi
(
s
);

200 
limô
 = 
AMIGA_BLOCK_LIMIT
;

202 
	`PRINTF
("Sˇ¬ög f‹ BOOT from 0Åÿ%d\n", 
limô
);

204 
i
 = 0; i < 
limô
; i++)

206 
ul⁄g
 
ªs
 = 
dev_desc
->
	`block_ªad
(dev_desc->
dev
, 
i
, 1, (ul⁄g *)
block_buf„r
);

207 i‡(
ªs
 == 1)

209 
boŸcode_block
 *
boŸ
 = (boŸcode_block *)
block_buf„r
;

210 i‡(
boŸ
->
id
 =
AMIGA_ID_BOOT
)

212 
	`PRINTF
("BOOT blockáà%d, checkög checksum\n", 
i
);

213 i‡(
	`sum_block
((
block_hódî
 *)
block_buf„r
) == 0)

215 
	`PRINTF
("Found valid bootcode block\n");

216 
	`mem˝y
(&
boŸcode
, 
boŸ
, (
boŸcode_block
));

217  &
boŸcode
;

223 
	`PRINTF
("No boot code found on disk\n");

225 
	}
}

231 
	$ã°_∑π_amiga
(
block_dev_desc_t
 *
dev_desc
)

233 
rigid_disk_block
 *
rdb
;

234 
boŸcode_block
 *
boŸcode
;

236 
	`PRINTF
("test_part_amiga: Testing forán Amiga RDBÖartition\n");

238 
rdb
 = 
	`gë_rdisk
(
dev_desc
);

239 i‡(
rdb
)

241 
boŸcode
 = 
	`gë_boŸcode
(
dev_desc
);

242 i‡(
boŸcode
)

243 
	`PRINTF
("test_part_amiga: bootable Amiga disk\n");

245 
	`PRINTF
("test_part_amiga:Çon-bootable Amiga disk\n");

251 
	`PRINTF
("test_part_amiga:Ço RDB found\n");

255 
	}
}

260 
∑πôi⁄_block
 *
	$föd_∑πôi⁄
(
block_dev_desc_t
 *
dev_desc
, 
∑πnum
)

262 
rigid_disk_block
 *
rdb
;

263 
∑πôi⁄_block
 *
p
;

264 
u32
 
block
;

266 
	`PRINTF
("TryögÅÿfödÖ¨tôi⁄ block %d\n", 
∑πnum
);

267 
rdb
 = 
	`gë_rdisk
(
dev_desc
);

268 i‡(!
rdb
)

270 
	`PRINTF
("find_partition:ÇoÑdb found\n");

271  
NULL
;

274 
	`PRINTF
("find_partition: ScanningÖartitionÜist\n");

276 
block
 = 
rdb
->
∑πôi⁄_li°
;

277 
	`PRINTF
("föd_∑πôi⁄:Ö¨tôi⁄Üi°áà0x%x\n", 
block
);

279 
block
 != 0xFFFFFFFF)

281 
ul⁄g
 
ªs
 = 
dev_desc
->
	`block_ªad
(dev_desc->
dev
, 
block
, 1,

282 (
ul⁄g
 *)
block_buf„r
);

283 i‡(
ªs
 == 1)

285 
p
 = (
∑πôi⁄_block
 *)
block_buf„r
;

286 i‡(
p
->
id
 =
AMIGA_ID_PART
)

288 
	`PRINTF
("PART block su•e˘áà0x%x, checkög checksum\n",
block
);

289 i‡(
	`sum_block
((
block_hódî
 *)
p
) == 0)

291 i‡(
∑πnum
 == 0) ;

294 
∑πnum
--;

295 
block
 = 
p
->
√xt
;

298 } 
block
 = 0xFFFFFFFF;

299 } 
block
 = 0xFFFFFFFF;

302 i‡(
block
 == 0xFFFFFFFF)

304 
	`PRINTF
("PART blockÇot found\n");

305  
NULL
;

308  (
∑πôi⁄_block
 *)
block_buf„r
;

309 
	}
}

314 
	$gë_∑πôi⁄_öfo_amiga
 (
block_dev_desc_t
 *
dev_desc
, 
∑π
, 
disk_∑πôi⁄_t
 *
öfo
)

316 
∑πôi⁄_block
 *
p
 = 
	`föd_∑πôi⁄
(
dev_desc
, 
∑π
-1);

317 
amiga_∑π_geomëry
 *
g
;

318 
u32
 
disk_ty≥
;

320 i‡(!
p
)  -1;

322 
g
 = (
amiga_∑π_geomëry
 *)&(
p
->
ívú⁄mít
);

323 
öfo
->
°¨t
 = 
g
->
low_cyl
 * g->
block_≥r_åack
 * g->
surÁ˚s
;

324 
öfo
->
size
 = (
g
->
high_cyl
 - g->
low_cyl
 + 1Ë* g->
block_≥r_åack
 * g->
surÁ˚s
 - 1;

325 
öfo
->
blksz
 = 
rdb
.
block_byãs
;

326 
	`b˝l_°r˝y
(
öfo
->
«me
, 
p
->
drive_«me
);

329 
disk_ty≥
 = 
g
->
dos_ty≥
;

331 
öfo
->
ty≥
[0] = (
disk_ty≥
 & 0xFF000000)>>24;

332 
öfo
->
ty≥
[1] = (
disk_ty≥
 & 0x00FF0000)>>16;

333 
öfo
->
ty≥
[2] = (
disk_ty≥
 & 0x0000FF00)>>8;

334 
öfo
->
ty≥
[3] = '\\';

335 
öfo
->
ty≥
[4] = (
disk_ty≥
 & 0x000000FF) + '0';

336 
öfo
->
ty≥
[5] = 0;

339 
	}
}

341 
	$¥öt_∑π_amiga
 (
block_dev_desc_t
 *
dev_desc
)

343 
rigid_disk_block
 *
rdb
;

344 
boŸcode_block
 *
boŸ
;

345 
∑πôi⁄_block
 *
p
;

346 
u32
 
block
;

347 
i
 = 1;

349 
rdb
 = 
	`gë_rdisk
(
dev_desc
);

350 i‡(!
rdb
)

352 
	`PRINTF
("print_part_amiga:ÇoÑdb found\n");

356 
	`PRINTF
("print_part_amiga: ScanningÖartitionÜist\n");

358 
block
 = 
rdb
->
∑πôi⁄_li°
;

359 
	`PRINTF
("¥öt_∑π_amiga:Ö¨tôi⁄Üi°áà0x%x\n", 
block
);

361 
	`¥ötf
("Summary: DiskBlockSize: %d\n"

365 
rdb
->
block_byãs
,Ñdb->
cylödîs
,Ñdb->
£˘‹s
,

366 
rdb
->
hóds
);

368 
	`¥ötf
(" First Num. \n"

371 
block
 != 0xFFFFFFFF)

373 
ul⁄g
 
ªs
;

375 
	`PRINTF
("TryögÅÿlﬂd block #0x%X\n", 
block
);

377 
ªs
 = 
dev_desc
->
	`block_ªad
(dev_desc->
dev
, 
block
, 1,

378 (
ul⁄g
 *)
block_buf„r
);

379 i‡(
ªs
 == 1)

381 
p
 = (
∑πôi⁄_block
 *)
block_buf„r
;

382 i‡(
p
->
id
 =
AMIGA_ID_PART
)

384 
	`PRINTF
("PART block su•e˘áà0x%x, checkög checksum\n",
block
);

385 i‡(
	`sum_block
((
block_hódî
 *)
p
) == 0)

387 
	`¥ötf
("%-4d ", 
i
); i++;

388 
	`¥öt_∑π_öfo
(
p
);

389 
block
 = 
p
->
√xt
;

391 } 
block
 = 0xFFFFFFFF;

392 } 
block
 = 0xFFFFFFFF;

395 
boŸ
 = 
	`gë_boŸcode
(
dev_desc
);

396 i‡(
boŸ
)

398 
	`¥ötf
("Disk is bootable\n");

400 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/disk/part_amiga.h

25 #i‚de‡
_DISK_PART_AMIGA_H


26 
	#_DISK_PART_AMIGA_H


	)

27 
	~<comm⁄.h
>

29 #ifde‡
CONFIG_ISO_PARTITION


32 
	#DEFAULT_SECTOR_SIZE
 2048

	)

34 
	#DEFAULT_SECTOR_SIZE
 512

	)

38 
	#AMIGA_BLOCK_LIMIT
 16

	)

46 
	srigid_disk_block


48 
u32
 
	mid
;

49 
u32
 
	msummed_l⁄gs
;

50 
s32
 
	mchk_sum
;

51 
u32
 
	mho°_id
;

52 
u32
 
	mblock_byãs
;

53 
u32
 
	mÊags
;

54 
u32
 
	mbad_block_li°
;

55 
u32
 
	m∑πôi⁄_li°
;

56 
u32
 
	mfûe_sys_hódî_li°
;

57 
u32
 
	mdrive_öô
;

58 
u32
 
	mboŸcode_block
;

59 
u32
 
	mª£rved_1
[5];

62 
u32
 
	mcylödîs
;

63 
u32
 
	m£˘‹s
;

64 
u32
 
	mhóds
;

65 
u32
 
	möãæóve
;

66 
u32
 
	m∑rk
;

67 
u32
 
	mª£rved_2
[3];

68 
u32
 
	mwrôe_¥e_comp
;

69 
u32
 
	mªdu˚d_wrôe
;

70 
u32
 
	m°ï_øã
;

71 
u32
 
	mª£rved_3
[5];

74 
u32
 
	mrdb_blocks_lo
;

75 
u32
 
	mrdb_blocks_hi
;

76 
u32
 
	mlo_cylödî
;

77 
u32
 
	mhi_cylödî
;

78 
u32
 
	mcyl_blocks
;

79 
u32
 
	mauto_∑rk_£c⁄ds
;

80 
u32
 
	mhigh_rdsk_block
;

81 
u32
 
	mª£rved_4
;

83 
	mdisk_víd‹
[8];

84 
	mdisk_¥odu˘
[16];

85 
	mdisk_ªvisi⁄
[4];

86 
	mc⁄åﬁÀr_víd‹
[8];

87 
	mc⁄åﬁÀr_¥odu˘
[16];

88 
	mc⁄åﬁÀr_ªvisi⁄
[4];

90 
u32
 
	mª£rved_5
[10];

97 
	s∑πôi⁄_block


99 
u32
 
	mid
;

100 
u32
 
	msummed_l⁄gs
;

101 
s32
 
	mchk_sum
;

102 
u32
 
	mho°_id
;

103 
u32
 
	m√xt
;

104 
u32
 
	mÊags
;

105 
u32
 
	mª£rved_1
[2];

106 
u32
 
	mdev_Êags
;

107 
	mdrive_«me
[32];

108 
u32
 
	mª£rved_2
[15];

109 
u32
 
	mívú⁄mít
[17];

110 
u32
 
	mª£rved_3
[15];

113 
	sboŸcode_block


115 
u32
 
	mid
;

116 
u32
 
	msummed_l⁄gs
;

117 
s32
 
	mchk_sum
;

118 
u32
 
	mho°_id
;

119 
u32
 
	m√xt
;

120 
u32
 
	mlﬂd_d©a
[123];

124 
	#AMIGA_ID_RDISK
 0x5244534B

	)

125 
	#AMIGA_ID_PART
 0x50415254

	)

126 
	#AMIGA_ID_BOOT
 0x424f4f54

	)

133 
	samiga_∑π_geomëry


135 
u32
 
	mèbÀ_size
;

136 
u32
 
	msize_blocks
;

137 
u32
 
	munu£d1
;

138 
u32
 
	msurÁ˚s
;

139 
u32
 
	m£˘‹_≥r_block
;

140 
u32
 
	mblock_≥r_åack
;

141 
u32
 
	mª£rved
;

142 
u32
 
	m¥óŒoc
;

143 
u32
 
	möãæóve
;

144 
u32
 
	mlow_cyl
;

145 
u32
 
	mhigh_cyl
;

146 
u32
 
	mnum_buf„rs
;

147 
u32
 
	mbuf_mem_ty≥
;

148 
u32
 
	mmax_å™s„r
;

149 
u32
 
	mmask
;

150 
s32
 
	mboŸ_¥i‹ôy
;

151 
u32
 
	mdos_ty≥
;

152 
u32
 
	mbaud
;

153 
u32
 
	mc⁄åﬁ
;

154 
u32
 
	mboŸ_blocks
;

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/disk/part_dos.c

33 
	~<löux/compûî.h
>

34 
	~<asm/addr•a˚.h
>

35 
	~<asm/byã‹dî.h
>

36 
	~<comm⁄.h
>

37 
	~<comm™d.h
>

38 
	~<ide.h
>

39 
	~"∑π_dos.h
"

40 
	~<Át.h
>

43 
	#DD


	)

45 #i‡((
CONFIG_COMMANDS
 & 
CFG_CMD_IDE
) || \

46 (
	gCONFIG_COMMANDS
 & 
	gCFG_CMD_SCSI
) || \

47 (
	gCONFIG_COMMANDS
 & 
	gCFG_CMD_USB
) || \

48 
deföed
(
CONFIG_MMC
) || \

49 
deföed
(
CONFIG_SYSTEMACE
ËË&& 
	$deföed
(
CONFIG_DOS_PARTITION
)

53 
ölöe
 
	$À32_to_öt
(*
À32
)

55  ((
À32
[3] << 24) +

56 (
À32
[2] << 16) +

57 (
À32
[1] << 8) +

58 
À32
[0]

60 
	}
}

62 
ölöe
 
	$is_exãnded
(
∑π_ty≥
)

64  (
∑π_ty≥
 == 0x5 ||

65 
∑π_ty≥
 == 0xf ||

66 
∑π_ty≥
 == 0x85);

67 
	}
}

69 
	$¥öt_⁄e_∑π
 (
dos_∑πôi⁄_t
 *
p
, 
ext_∑π_£˘‹
, 
∑π_num
)

71 
lba_°¨t
 = 
ext_∑π_£˘‹
 + 
	`À32_to_öt
 (
p
->
°¨t4
);

72 
lba_size
 = 
	`À32_to_öt
 (
p
->
size4
);

74 
	`¥ötf
 ("%5d\t\t%10d\t%10d\t%2x%s\n",

75 
∑π_num
, 
lba_°¨t
, 
lba_size
, 
p
->
sys_öd
,

76 (
	`is_exãnded
 (
p
->
sys_öd
) ? " Extd" : ""));

77 
	}
}

79 
	$ã°_block_ty≥
(*
buf„r
)

81 if((
buf„r
[
DOS_PART_MAGIC_OFFSET
 + 0] != 0x55) ||

82 (
buf„r
[
DOS_PART_MAGIC_OFFSET
 + 1] != 0xaa) ) {

85 if(
	`°∫cmp
(&
buf„r
[
DOS_PBR_FSTYPE_OFFSET
],"FAT",3)==0)

86  
DOS_PBR
;

87  
DOS_MBR
;

88 
	}
}

91 
	$ã°_∑π_dos
 (
block_dev_desc_t
 *
dev_desc
)

93 
tmp_buf„r
[
DEFAULT_SECTOR_SIZE
];

94 *
buf„r
 = 
	`KSEG1ADDR
(&
tmp_buf„r
[0]);

96 i‡((
dev_desc
->
	`block_ªad
(dev_desc->
dev
, 0, 1, (
ul⁄g
 *Ë
buf„r
) != 1) ||

97 (
buf„r
[
DOS_PART_MAGIC_OFFSET
 + 0] != 0x55) ||

98 (
buf„r
[
DOS_PART_MAGIC_OFFSET
 + 1] != 0xaa) ) {

102 
	}
}

106 
	$¥öt_∑πôi⁄_exãnded
 (
block_dev_desc_t
 *
dev_desc
, 
ext_∑π_£˘‹
, 
ªœtive
,

107 
∑π_num
)

109 
tmp_buf
[
DEFAULT_SECTOR_SIZE
];

110 *
buf„r
 = 
	`KSEG1ADDR
(&
tmp_buf
[0]);

111 
dos_∑πôi⁄_t
 *
±
;

112 
i
;

114 i‡(
dev_desc
->
	`block_ªad
(dev_desc->
dev
, 
ext_∑π_£˘‹
, 1, (
ul⁄g
 *Ë
buf„r
) != 1) {

115 
	`¥ötf
 ("** Can'tÑeadÖartitionÅable on %d:%d **\n",

116 
dev_desc
->
dev
, 
ext_∑π_£˘‹
);

119 
i
=
	`ã°_block_ty≥
(
buf„r
);

120 if(
i
==-1) {

121 
	`¥ötf
 ("bad MBR sector signature 0x%02x%02x\n",

122 
buf„r
[
DOS_PART_MAGIC_OFFSET
],

123 
buf„r
[
DOS_PART_MAGIC_OFFSET
 + 1]);

126 if(
i
==
DOS_PBR
) {

127 
	`¥ötf
 (" 1\t\t 0\t%10ld\t%2x\n",

128 
dev_desc
->
lba
, 
buf„r
[
DOS_PBR_MEDIA_TYPE_OFFSET
]);

132 
±
 = (
dos_∑πôi⁄_t
 *Ë(
buf„r
 + 
DOS_PART_TBL_OFFSET
);

133 
i
 = 0; i < 4; i++, 
±
++) {

139 i‡((
±
->
sys_öd
 != 0) &&

140 (
ext_∑π_£˘‹
 =0 || !
	`is_exãnded
 (
±
->
sys_öd
)) ) {

141 
	`¥öt_⁄e_∑π
 (
±
, 
ext_∑π_£˘‹
, 
∑π_num
);

145 i‡((
ext_∑π_£˘‹
 == 0) ||

146 (
±
->
sys_öd
 !0 && !
	`is_exãnded
 (pt->sys_ind)) ) {

147 
∑π_num
++;

152 
±
 = (
dos_∑πôi⁄_t
 *Ë(
buf„r
 + 
DOS_PART_TBL_OFFSET
);

153 
i
 = 0; i < 4; i++, 
±
++) {

154 i‡(
	`is_exãnded
 (
±
->
sys_öd
)) {

155 
lba_°¨t
 = 
	`À32_to_öt
 (
±
->
°¨t4
Ë+ 
ªœtive
;

157 
	`¥öt_∑πôi⁄_exãnded
 (
dev_desc
, 
lba_°¨t
,

158 
ext_∑π_£˘‹
 =0 ? 
lba_°¨t


159 : 
ªœtive
,

160 
∑π_num
);

165 
	}
}

170 
	$gë_∑πôi⁄_öfo_exãnded
 (
block_dev_desc_t
 *
dev_desc
, 
ext_∑π_£˘‹
,

171 
ªœtive
, 
∑π_num
,

172 
which_∑π
, 
disk_∑πôi⁄_t
 *
öfo
)

174 
tmp_buf
[
DEFAULT_SECTOR_SIZE
];

175 *
buf„r
 = 
	`KSEG1ADDR
(&
tmp_buf
[0]);

176 
dos_∑πôi⁄_t
 *
±
;

177 
i
;

179 i‡(
dev_desc
->
	`block_ªad
 (dev_desc->
dev
, 
ext_∑π_£˘‹
, 1, (
ul⁄g
 *Ë
buf„r
) != 1) {

180 
	`¥ötf
 ("** Can'tÑeadÖartitionÅable on %d:%d **\n",

181 
dev_desc
->
dev
, 
ext_∑π_£˘‹
);

184 i‡(
buf„r
[
DOS_PART_MAGIC_OFFSET
] != 0x55 ||

185 
buf„r
[
DOS_PART_MAGIC_OFFSET
 + 1] != 0xaa) {

186 
	`¥ötf
 ("bad MBR sector signature 0x%02x%02x\n",

187 
buf„r
[
DOS_PART_MAGIC_OFFSET
],

188 
buf„r
[
DOS_PART_MAGIC_OFFSET
 + 1]);

193 
±
 = (
dos_∑πôi⁄_t
 *Ë(
buf„r
 + 
DOS_PART_TBL_OFFSET
);

196 if(
±
->
boŸ_öd
 != 0x80 &&Öt->boot_ind != 0x0){

197 
boŸ_£˘‹
 *
bs
;

198 
	`¥ötf
 ("It seemsÇoÖartitionÅablesÉxisted.\n");

199 
bs
 = (
boŸ_£˘‹
 *Ë(
buf„r
);

200 if(
ext_∑π_£˘‹
 =0 && 
bs
->
ª£rved
 && bs->
Áts
){

201 
öfo
->
blksz
 = 512;

202 
öfo
->
°¨t
 = 
ext_∑π_£˘‹
 + 0;

210 
i
 = 0; i < 4; i++, 
±
++) {

215 i‡((
±
->
sys_öd
 != 0) &&

216 (
∑π_num
 =
which_∑π
) &&

217 (
	`is_exãnded
(
±
->
sys_öd
) == 0)) {

218 
öfo
->
blksz
 = 512;

219 
öfo
->
°¨t
 = 
ext_∑π_£˘‹
 + 
	`À32_to_öt
 (
±
->
°¨t4
);

220 
öfo
->
size
 = 
	`À32_to_öt
 (
±
->
size4
);

221 
dev_desc
->
if_ty≥
) {

222 
IF_TYPE_IDE
:

223 
IF_TYPE_ATAPI
:

224 
	`•rötf
 (
öfo
->
«me
, "hd%c%d\n", 'a' + 
dev_desc
->
dev
, 
∑π_num
);

226 
IF_TYPE_SCSI
:

227 
	`•rötf
 (
öfo
->
«me
, "sd%c%d\n", 'a' + 
dev_desc
->
dev
, 
∑π_num
);

229 
IF_TYPE_USB
:

230 
	`•rötf
 (
öfo
->
«me
, "usbd%c%d\n", 'a' + 
dev_desc
->
dev
, 
∑π_num
);

232 
IF_TYPE_DOC
:

233 
	`•rötf
 (
öfo
->
«me
, "docd%c%d\n", 'a' + 
dev_desc
->
dev
, 
∑π_num
);

236 
	`•rötf
 (
öfo
->
«me
, "xx%c%d\n", 'a' + 
dev_desc
->
dev
, 
∑π_num
);

240 
	`•rötf
 (
öfo
->
ty≥
, "U-Boot");

245 i‡((
ext_∑π_£˘‹
 == 0) ||

246 (
±
->
sys_öd
 !0 && !
	`is_exãnded
 (pt->sys_ind)) ) {

247 
∑π_num
++;

252 
±
 = (
dos_∑πôi⁄_t
 *Ë(
buf„r
 + 
DOS_PART_TBL_OFFSET
);

253 
i
 = 0; i < 4; i++, 
±
++) {

254 i‡(
	`is_exãnded
 (
±
->
sys_öd
)) {

255 
lba_°¨t
 = 
	`À32_to_öt
 (
±
->
°¨t4
Ë+ 
ªœtive
;

257  
	`gë_∑πôi⁄_öfo_exãnded
 (
dev_desc
, 
lba_°¨t
,

258 
ext_∑π_£˘‹
 =0 ? 
lba_°¨t
 : 
ªœtive
,

259 
∑π_num
, 
which_∑π
, 
öfo
);

263 
	}
}

265 
	$¥öt_∑π_dos
 (
block_dev_desc_t
 *
dev_desc
)

267 
	`¥ötf
 ("Partition Start Sector Num Sectors Type\n");

268 
	`¥öt_∑πôi⁄_exãnded
 (
dev_desc
, 0, 0, 1);

269 
	}
}

271 
	$gë_∑πôi⁄_öfo_dos
 (
block_dev_desc_t
 *
dev_desc
, 
∑π
, 
disk_∑πôi⁄_t
 * 
öfo
)

273  
	`gë_∑πôi⁄_öfo_exãnded
 (
dev_desc
, 0, 0, 1, 
∑π
, 
öfo
);

274 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/disk/part_dos.h

24 #i‚de‡
_DISK_PART_DOS_H


25 
	#_DISK_PART_DOS_H


	)

28 #ifde‡
CONFIG_ISO_PARTITION


31 
	#DEFAULT_SECTOR_SIZE
 2048

	)

33 
	#DEFAULT_SECTOR_SIZE
 512

	)

35 
	#DOS_PART_TBL_OFFSET
 0x1be

	)

36 
	#DOS_PART_MAGIC_OFFSET
 0x1„

	)

37 
	#DOS_PBR_FSTYPE_OFFSET
 0x36

	)

38 
	#DOS_PBR_MEDIA_TYPE_OFFSET
 0x15

	)

39 
	#DOS_MBR
 0

	)

40 
	#DOS_PBR
 1

	)

42 
	sdos_∑πôi⁄
 {

43 
	mboŸ_öd
;

44 
	mhód
;

45 
	m£˘‹
;

46 
	mcyl
;

47 
	msys_öd
;

48 
	míd_hód
;

49 
	míd_£˘‹
;

50 
	míd_cyl
;

51 
	m°¨t4
[4];

52 
	msize4
[4];

53 } 
	tdos_∑πôi⁄_t
;

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/disk/part_iso.c

24 
	~<comm⁄.h
>

25 
	~<comm™d.h
>

26 
	~"∑π_iso.h
"

28 #i‡((
CONFIG_COMMANDS
 & 
CFG_CMD_IDE
) || \

29 (
	gCONFIG_COMMANDS
 & 
	gCFG_CMD_SCSI
) || \

30 (
	gCONFIG_COMMANDS
 & 
	gCFG_CMD_USB
) || \

31 
deföed
(
CONFIG_MMC
) || \

32 
deföed
(
CONFIG_SYSTEMACE
ËË&& 
	$deföed
(
CONFIG_ISO_PARTITION
)

36 #ifdef 
ISO_PART_DEBUG


37 
	#PRINTF
(
fmt
,
¨gs
...Ë
	`¥ötf
 (fmà,##¨gs)

	)

39 
	#PRINTF
(
fmt
,
¨gs
...)

	)

43 #unde‡
CHECK_FOR_POWERPC_PLATTFORM


44 
	#CD_SECTSIZE
 2048

	)

46 
tmpbuf
[
CD_SECTSIZE
];

50 
ölöe
 
	$À32_to_öt
(*
À32
)

52  ((
À32
[3] << 24) +

53 (
À32
[2] << 16) +

54 (
À32
[1] << 8) +

55 
À32
[0]

57 
	}
}

60 
ölöe
 
	$À16_to_öt
(*
À16
)

62  ((
À16
[1] << 8) +

63 
À16
[0]

65 
	}
}

69 
	$gë_∑πôi⁄_öfo_iso_vîb
(
block_dev_desc_t
 * 
dev_desc
, 
∑π_num
, 
disk_∑πôi⁄_t
 * 
öfo
, 
vîb
)

71 
i
,
off£t
,
íåy_num
;

72 *
chksumbuf
;

73 
chksum
;

74 
√wblkaddr
,
blkaddr
,
œ°£˘
,
boŸaddr
;

75 
iso_boŸ_ªc_t
 *
pbr
 = (iso_boŸ_ªc_à*)
tmpbuf
;

76 
iso_¥i_ªc_t
 *
µr
 = (iso_¥i_ªc_à*)
tmpbuf
;

77 
iso_vÆ_íåy_t
 *
pve
 = (iso_vÆ_íåy_à*)
tmpbuf
;

78 
iso_öô_def_íåy_t
 *
pide
;

81 
blkaddr
=
PVD_OFFSET
;

82 i‡(
dev_desc
->
	`block_ªad
 (dev_desc->
dev
, 
PVD_OFFSET
, 1, (
ul⁄g
 *Ë
tmpbuf
) != 1)

84 if(
µr
->
des˘y≥
!=0x01) {

85 if(
vîb
)

86 
	`¥ötf
 ("** First descriptor is NOTáÖrimary desc on %d:%d **\n",

87 
dev_desc
->
dev
, 
∑π_num
);

90 if(
	`°∫cmp
(
µr
->
°™d_idít
,"CD001",5)!=0) {

91 if(
vîb
)

92 
	`¥ötf
 ("** Wrong ISO Ident: %s on %d:%d **\n",

93 
µr
->
°™d_idít
,
dev_desc
->
dev
, 
∑π_num
);

96 
œ°£˘
((
µr
->
fú°£k_LE∑thèb1_LE
 & 0x000000ff)<<24) +

97 ((
µr
->
fú°£k_LE∑thèb1_LE
 & 0x0000ff00)<< 8) +

98 ((
µr
->
fú°£k_LE∑thèb1_LE
 & 0x00ff0000)>> 8) +

99 ((
µr
->
fú°£k_LE∑thèb1_LE
 & 0xff000000)>>24) ;

100 
öfo
->
blksz
=
µr
->
£csize_BE
;

101 
	`PRINTF
(" La°£˘:%08lx\n",
œ°£˘
);

102 
i
=
blkaddr
;i<
œ°£˘
;i++) {

103 
	`PRINTF
("Ródög block %d\n", 
i
);

104 i‡(
dev_desc
->
	`block_ªad
 (dev_desc->
dev
, 
i
, 1, (
ul⁄g
 *Ë
tmpbuf
) != 1)

106 if(
µr
->
des˘y≥
==0x00)

108 if(
µr
->
des˘y≥
==0xff) {

109 if(
vîb
)

110 
	`¥ötf
 ("** No valid boot catalog found on %d:%d **\n",

111 
dev_desc
->
dev
, 
∑π_num
);

116 if(
	`°∫cmp
(
pbr
->
idít_°r
,"EL TORITO SPECIFICATION",23)!=0) {

117 if(
vîb
)

118 
	`¥ötf
 ("** Wrong El Torito ident: %s on %d:%d **\n",

119 
pbr
->
idít_°r
,
dev_desc
->
dev
, 
∑π_num
);

122 
boŸaddr
=
	`À32_to_öt
(
pbr
->
poöãr
);

123 
	`PRINTF
(" BoŸ E¡ryát: %08lX\n",
boŸaddr
);

124 i‡(
dev_desc
->
	`block_ªad
 (dev_desc->
dev
, 
boŸaddr
, 1, (
ul⁄g
 *Ë
tmpbuf
) != 1) {

125 if(
vîb
)

126 
	`¥ötf
 ("** Can'tÑead Boot Entryát %lX on %d:%d **\n",

127 
boŸaddr
,
dev_desc
->
dev
, 
∑π_num
);

130 
chksum
=0;

131 
chksumbuf
 = (*)
tmpbuf
;

132 
i
=0;i<0x10;i++)

133 
chksum
+=((
chksumbuf
[
i
] &0xff)<<8)+((chksumbuf[i] &0xff00)>>8);

134 if(
chksum
!=0) {

135 if(
vîb
)

136 
	`¥ötf
 ("** Checksum Error in booting catalog validationÉntry on %d:%d **\n",

137 
dev_desc
->
dev
, 
∑π_num
);

140 if((
pve
->
key
[0]!=0x55)||(pve->key[1]!=0xAA)) {

141 if(
vîb
)

142 
	`¥ötf
 ("** Key 0x55 0xAAÉrror on %d:%d **\n",

143 
dev_desc
->
dev
, 
∑π_num
);

146 #ifde‡
CHECK_FOR_POWERPC_PLATTFORM


147 if(
pve
->
∂©f‹m
!=0x01) {

148 if(
vîb
)

149 
	`¥ötf
 ("** No PowerPCÖlatform CD on %d:%d **\n",

150 
dev_desc
->
dev
, 
∑π_num
);

155 
íåy_num
=0;

156 
off£t
=0x20;

157 
	`•rötf
 (
öfo
->
ty≥
, "U-Boot");

158 
dev_desc
->
if_ty≥
) {

159 
IF_TYPE_IDE
:

160 
IF_TYPE_ATAPI
:

161 
	`•rötf
 (
öfo
->
«me
, "hd%c%d\n", 'a' + 
dev_desc
->
dev
, 
∑π_num
);

163 
IF_TYPE_SCSI
:

164 
	`•rötf
 (
öfo
->
«me
, "sd%c%d\n", 'a' + 
dev_desc
->
dev
, 
∑π_num
);

166 
IF_TYPE_USB
:

167 
	`•rötf
 (
öfo
->
«me
, "usbd%c%d\n", 'a' + 
dev_desc
->
dev
, 
∑π_num
);

169 
IF_TYPE_DOC
:

170 
	`•rötf
 (
öfo
->
«me
, "docd%c%d\n", 'a' + 
dev_desc
->
dev
, 
∑π_num
);

173 
	`•rötf
 (
öfo
->
«me
, "xx%c%d\n", 'a' + 
dev_desc
->
dev
, 
∑π_num
);

178 
off£t
<2048) {

179 
pide
=(
iso_öô_def_íåy_t
 *)&
tmpbuf
[
off£t
];

180 i‡((
pide
->
boŸ_öd
==0x88) ||

181 (
pide
->
boŸ_öd
==0x00)) {

182 if(
íåy_num
==
∑π_num
) {

183 
found
;

185 
íåy_num
++;

186 
off£t
+=0x20;

189 i‡((
pide
->
boŸ_öd
==0x90) ||

190 (
pide
->
boŸ_öd
==0x91) ||

191 (
pide
->
boŸ_öd
==0x44)) {

192 
off£t
+=0x20;

195 if(
vîb
)

196 
	`¥ötf
 ("** Partition %dÇot found on device %d **\n",

197 
∑π_num
,
dev_desc
->
dev
);

203 if(
vîb
)

204 
	`¥ötf
 ("** Partition %dÇot found on device %d **\n",

205 
∑π_num
,
dev_desc
->
dev
);

207 
found
:

208 if(
pide
->
boŸ_öd
!=0x88) {

209 if(
vîb
)

210 
	`¥ötf
 ("** Partition %d isÇot bootable on device %d **\n",

211 
∑π_num
,
dev_desc
->
dev
);

214 
pide
->
boŸ_medü
) {

216 
öfo
->
size
=
	`À16_to_öt
(
pide
->
£c_˙t
)>>2;

218 0x01: 
öfo
->
size
=2400>>2; ;

219 0x02: 
öfo
->
size
=2880>>2; ;

220 0x03: 
öfo
->
size
=5760>>2; ;

221 0x04: 
öfo
->
size
=2880>>2; ;

222 : 
öfo
->
size
=0; ;

224 
√wblkaddr
=
	`À32_to_öt
(
pide
->
ªl_block_addr
);

225 
öfo
->
°¨t
=
√wblkaddr
;

226 
	`PRINTF
("Ö¨à%d found @ %lx sizê%lx\n",
∑π_num
,
√wblkaddr
,
öfo
->
size
);

228 
	}
}

230 
	$gë_∑πôi⁄_öfo_iso
(
block_dev_desc_t
 * 
dev_desc
, 
∑π_num
, 
disk_∑πôi⁄_t
 * 
öfo
)

232 (
	`gë_∑πôi⁄_öfo_iso_vîb
(
dev_desc
, 
∑π_num
, 
öfo
, 1));

233 
	}
}

236 
	$¥öt_∑π_iso
(
block_dev_desc_t
 * 
dev_desc
)

238 
disk_∑πôi⁄_t
 
öfo
;

239 
i
;

240 if(
	`gë_∑πôi⁄_öfo_iso_vîb
(
dev_desc
,0,&
öfo
,0)==-1) {

241 
	`¥ötf
("** NÿboŸÖ¨tôi⁄ found o¿devi˚ %d **\n",
dev_desc
->
dev
);

244 
	`¥ötf
("Part Start Sect x Size Type\n");

245 
i
=0;

247 
	`¥ötf
 (" %2d %8ld %8ld %6ld %.32s\n",

248 
i
, 
öfo
.
°¨t
, info.
size
, info.
blksz
, info.
ty≥
);

249 
i
++;

250 } 
	`gë_∑πôi⁄_öfo_iso_vîb
(
dev_desc
,
i
,&
öfo
,0)!=-1);

251 
	}
}

253 
	$ã°_∑π_iso
 (
block_dev_desc_t
 *
dev_desc
)

255 
disk_∑πôi⁄_t
 
öfo
;

257 (
	`gë_∑πôi⁄_öfo_iso_vîb
(
dev_desc
,0,&
öfo
,0));

258 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/disk/part_iso.h

23 #i‚de‡
_PART_CD_H


24 
	#_PART_CD_H


	)

26 
	#BRVD
 0x11

	)

27 
	#PVD_OFFSET
 0x10

	)

30 
	siso_boŸ_ªc
 {

31 
	mdes˘y≥
;

32 
	m°™d_idít
[5];

33 
	mvîs
;

34 
	midít_°r
[0x20];

35 
	munu£d
[0x20];

36 
	mpoöãr
[4];

37 } 
	tiso_boŸ_ªc_t
;

40 
	siso_¥i_ªc
 {

41 
	mdes˘y≥
;

42 
	m°™d_idít
[5];

43 
	mvîs
;

44 
	munu£d
;

45 
	msysid
[32];

46 
	mvﬁid
[32];

47 
	mzîos1
[8];

48 
	mvﬁsiz_LE
;

49 
	mvﬁsiz_BE
;

50 
	mzîos2
[32];

51 
	m£tsize_LE
;

52 
	m£tsize_BE
;

53 
	m£qnum_LE
;

54 
	m£qnum_BE
;

55 
	m£csize_LE
;

56 
	m£csize_BE
;

57 
	m∑thèbÀn_LE
;

58 
	m∑thèbÀn_BE
;

59 
	mfú°£k_LE∑thèb1_LE
;

60 
	mfú°£k_LE∑thèb2_LE
;

61 
	mfú°£k_BE∑thèb1_BE
;

62 
	mfú°£k_BE∑thèb2_BE
;

63 
	mroŸdú
[34];

64 
	mvﬁ£tid
[128];

65 
	mpubid
[128];

66 
	md©≠ªpid
[128];

67 
	m≠pid
[128];

68 
	mc›yr
[37];

69 
	mab°ø˘fûeid
[37];

70 
	mbibliofûeid
[37];

71 
	m¸óti⁄d©e
[17];

72 
	mmodify
[17];

73 
	mexpúe
[17];

74 
	mef„˘ive
[17];

75 
	mfûe°ruc_vî
;

76 } 
	tiso_¥i_ªc_t
;

78 
	siso_sup_ªc
 {

79 
	mdes˘y≥
;

80 
	m°™d_idít
[5];

81 
	mvîs
;

82 
	mvﬁumeÊags
;

83 
	msysid
[32];

84 
	mvﬁid
[32];

85 
	mzîos1
[8];

86 
	mvﬁsiz_LE
;

87 
	mvﬁsiz_BE
;

88 
	mesˇ≥£q
[32];

89 
	m£tsize_LE
;

90 
	m£tsize_BE
;

91 
	m£qnum_LE
;

92 
	m£qnum_BE
;

93 
	m£csize_LE
;

94 
	m£csize_BE
;

95 
	m∑thèbÀn_LE
;

96 
	m∑thèbÀn_BE
;

97 
	mfú°£k_LE∑thèb1_LE
;

98 
	mfú°£k_LE∑thèb2_LE
;

99 
	mfú°£k_BE∑thèb1_BE
;

100 
	mfú°£k_BE∑thèb2_BE
;

101 
	mroŸdú
[34];

102 
	mvﬁ£tid
[128];

103 
	mpubid
[128];

104 
	md©≠ªpid
[128];

105 
	m≠pid
[128];

106 
	mc›yr
[37];

107 
	mab°ø˘fûeid
[37];

108 
	mbibliofûeid
[37];

109 
	m¸óti⁄d©e
[17];

110 
	mmodify
[17];

111 
	mexpúe
[17];

112 
	mef„˘ive
[17];

113 
	mfûe°ruc_vî
;

114 }
	tiso_sup_ªc_t
;

116 
	siso_∑π_ªc
 {

117 
	mdes˘y≥
;

118 
	m°™d_idít
[5];

119 
	mvîs
;

120 
	munu£d
;

121 
	msysid
[32];

122 
	mvﬁid
[32];

123 
	m∑πloc_LE
;

124 
	m∑πloc_BE
;

125 
	m∑πsiz_LE
;

126 
	m∑πsiz_BE
;

127 }
	tiso_∑π_ªc_t
;

130 
	siso_vÆ_íåy
 {

131 
	mhódî_id
;

132 
	m∂©f‹m
;

133 
	mªs
[2];

134 
	mm™u_°r
[0x18];

135 
	mchk_sum
[2];

136 
	mkey
[2];

137 } 
	tiso_vÆ_íåy_t
;

139 
	siso_hódî_íåy
 {

140 
	mhódî_id
;

141 
	m∂©f‹m
;

142 
	mnumíåy
[2];

143 
	mid_°r
[0x1C];

144 } 
	tiso_hódî_íåy_t
;

147 
	siso_öô_def_íåy
 {

148 
	mboŸ_öd
;

149 
	mboŸ_medü
;

150 
	mld_£g
[2];

151 
	msy°y≥
;

152 
	mªs
;

153 
	m£c_˙t
[2];

154 
	mªl_block_addr
[4];

155 } 
	tiso_öô_def_íåy_t
;

158 
¥öt_∑πôi⁄_cd
(
dev
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/disk/part_mac.c

32 
	~<comm⁄.h
>

33 
	~<comm™d.h
>

34 
	~<ide.h
>

35 
	~"∑π_mac.h
"

37 #i‡((
CONFIG_COMMANDS
 & 
CFG_CMD_IDE
) || \

38 (
	gCONFIG_COMMANDS
 & 
	gCFG_CMD_SCSI
) || \

39 (
	gCONFIG_COMMANDS
 & 
	gCFG_CMD_USB
) || \

40 
deföed
(
CONFIG_MMC
) || \

41 
deföed
(
CONFIG_SYSTEMACE
ËË&& 
	$deföed
(
CONFIG_MAC_PARTITION
)

44 #i‚de‡
__ldiv_t_deföed


46 
quŸ
;

47 
ªm
;

48 } 
	tldiv_t
;

49 
ldiv_t
 
	`ldiv
 (
__numî
, 
__díom
);

50 
	#__ldiv_t_deföed
 1

	)

54 
	`∑π_mac_ªad_ddb
 (
block_dev_desc_t
 *
dev_desc
, 
mac_drivî_desc_t
 *
ddb_p
);

55 
	`∑π_mac_ªad_pdb
 (
block_dev_desc_t
 *
dev_desc
, 
∑π
, 
mac_∑πôi⁄_t
 *
pdb_p
);

60 
	$ã°_∑π_mac
 (
block_dev_desc_t
 *
dev_desc
)

62 
mac_drivî_desc_t
 
ddesc
;

63 
mac_∑πôi⁄_t
 
m∑π
;

64 
ul⁄g
 
i
, 
n
;

66 i‡(
	`∑π_mac_ªad_ddb
 (
dev_desc
, &
ddesc
)) {

71 
n
 = 1;

72 
i
=1; i<=
n
; ++i) {

73 i‡((
dev_desc
->
	`block_ªad
(dev_desc->
dev
, 
i
, 1, (
ul⁄g
 *)&
m∑π
) != 1) ||

74 (
m∑π
.
sig«tuª
 !
MAC_PARTITION_MAGIC
) ) {

78 
n
 = 
m∑π
.
m≠_cou¡
;

81 
	}
}

84 
	$¥öt_∑π_mac
 (
block_dev_desc_t
 *
dev_desc
)

86 
ul⁄g
 
i
, 
n
;

87 
mac_drivî_desc_t
 
ddesc
;

88 
mac_∑πôi⁄_t
 
m∑π
;

89 
ldiv_t
 
mb
, 
gb
;

91 i‡(
	`∑π_mac_ªad_ddb
 (
dev_desc
, &
ddesc
)) {

96 
n
 = 
ddesc
.
blk_cou¡
;

98 
mb
 = 
	`ldiv
(
n
, ((1024 * 1024Ë/ 
ddesc
.
blk_size
));

100 
mb
.
ªm
 *10 * 
ddesc
.
blk_size
;

101 
mb
.
ªm
 += 512 * 1024;

102 
mb
.
ªm
 /= 1024 * 1024;

104 
gb
 = 
	`ldiv
(10 * 
mb
.
quŸ
 + mb.
ªm
, 10240);

105 
gb
.
ªm
 += 512;

106 
gb
.
ªm
 /= 1024;

109 
	`¥ötf
 ("Block Size=%d, Number of Blocks=%d, "

114 
ddesc
.
blk_size
,

115 
ddesc
.
blk_cou¡
,

116 
mb
.
quŸ
, mb.
ªm
, 
gb
.quot, gb.rem,

117 
ddesc
.
dev_ty≥
, ddesc.
dev_id


120 
n
 = 1;

121 
i
=1; i<=
n
; ++i) {

122 
ul⁄g
 
byãs
;

123 
c
;

125 
	`¥ötf
 ("%4ld: ", 
i
);

126 i‡(
dev_desc
->
	`block_ªad
 (dev_desc->
dev
, 
i
, 1, (
ul⁄g
 *)&
m∑π
) != 1) {

127 
	`¥ötf
 ("** Can'tÑead Partition Map on %d:%ld **\n",

128 
dev_desc
->
dev
, 
i
);

132 i‡(
m∑π
.
sig«tuª
 !
MAC_PARTITION_MAGIC
) {

133 
	`¥ötf
 ("** Bad Signature on %d:%ld - "

135 
dev_desc
->
dev
, 
i
, 
MAC_PARTITION_MAGIC
, 
m∑π
.
sig«tuª
);

140 
n
 = 
m∑π
.
m≠_cou¡
;

142 
c
 = 'k';

143 
byãs
 = 
m∑π
.
block_cou¡
;

144 
byãs
 /(1024 / 
ddesc
.
blk_size
);

145 i‡(
byãs
 >= 1024) {

146 
byãs
 >>= 10;

147 
c
 = 'M';

149 i‡(
byãs
 >= 1024) {

150 
byãs
 >>= 10;

151 
c
 = 'G';

154 
	`¥ötf
 ("%20.32s %-18.32s %10u @ %-10u (%3ld%c)\n",

155 
m∑π
.
ty≥
,

156 
m∑π
.
«me
,

157 
m∑π
.
block_cou¡
,

158 
m∑π
.
°¨t_block
,

159 
byãs
, 
c


164 
	}
}

170 
	$∑π_mac_ªad_ddb
 (
block_dev_desc_t
 *
dev_desc
, 
mac_drivî_desc_t
 *
ddb_p
)

172 i‡(
dev_desc
->
	`block_ªad
(dev_desc->
dev
, 0, 1, (
ul⁄g
 *)
ddb_p
) != 1) {

173 
	`¥ötf
 ("** Can'tÑead Driver Desriptor Block **\n");

177 i‡(
ddb_p
->
sig«tuª
 !
MAC_DRIVER_MAGIC
) {

179 
	`¥ötf
 ("** Bad Signature:Éxpected 0x%04x, got 0x%04x\n",

180 
MAC_DRIVER_MAGIC
, 
ddb_p
->
sig«tuª
);

185 
	}
}

190 
	$∑π_mac_ªad_pdb
 (
block_dev_desc_t
 *
dev_desc
, 
∑π
, 
mac_∑πôi⁄_t
 *
pdb_p
)

192 
n
 = 1;

200 i‡(
dev_desc
->
	`block_ªad
 (dev_desc->
dev
, 
n
, 1, (
ul⁄g
 *)
pdb_p
) != 1) {

201 
	`¥ötf
 ("** Can'tÑead Partition Map on %d:%d **\n",

202 
dev_desc
->
dev
, 
n
);

206 i‡(
pdb_p
->
sig«tuª
 !
MAC_PARTITION_MAGIC
) {

207 
	`¥ötf
 ("** Bad Signature on %d:%d: "

209 
dev_desc
->
dev
, 
n
, 
MAC_PARTITION_MAGIC
, 
pdb_p
->
sig«tuª
);

213 i‡(
n
 =
∑π
)

216 i‡((
∑π
 < 1Ë|| (∑π > 
pdb_p
->
m≠_cou¡
)) {

217 
	`¥ötf
 ("** InvalidÖartition %d:%d [%d:1...%d:%d only]\n",

218 
dev_desc
->
dev
, 
∑π
,

219 
dev_desc
->
dev
,

220 
dev_desc
->
dev
, 
pdb_p
->
m≠_cou¡
);

225 
n
 = 
∑π
;

229 
	}
}

231 
	$gë_∑πôi⁄_öfo_mac
 (
block_dev_desc_t
 *
dev_desc
, 
∑π
, 
disk_∑πôi⁄_t
 *
öfo
)

233 
mac_drivî_desc_t
 
ddesc
;

234 
mac_∑πôi⁄_t
 
m∑π
;

236 i‡(
	`∑π_mac_ªad_ddb
 (
dev_desc
, &
ddesc
)) {

240 
öfo
->
blksz
 = 
ddesc
.
blk_size
;

242 i‡(
	`∑π_mac_ªad_pdb
 (
dev_desc
, 
∑π
, &
m∑π
)) {

246 
öfo
->
°¨t
 = 
m∑π
.
°¨t_block
;

247 
öfo
->
size
 = 
m∑π
.
block_cou¡
;

248 
	`mem˝y
 (
öfo
->
ty≥
, 
m∑π
.type, (info->type));

249 
	`mem˝y
 (
öfo
->
«me
, 
m∑π
.name, (info->name));

252 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/disk/part_mac.h

32 #i‚def 
_DISK_PART_MAC_H


33 
	#_DISK_PART_MAC_H


	)

35 
	#MAC_DRIVER_MAGIC
 0x4552

	)

42 
	smac_drivî_desc
 {

43 
__u16
 
	msig«tuª
;

44 
__u16
 
	mblk_size
;

45 
__u32
 
	mblk_cou¡
;

46 
__u16
 
	mdev_ty≥
;

47 
__u16
 
	mdev_id
;

48 
__u32
 
	md©a
;

49 
__u16
 
	mdrvr_˙t
;

50 
__u16
 
	mdrvr_m≠
[247];

51 } 
	tmac_drivî_desc_t
;

57 
	smac_drivî_íåy
 {

58 
__u32
 
	mblock
;

59 
__u16
 
	msize
;

60 
__u16
 
	mty≥
;

61 } 
	tmac_drivî_íåy_t
;

64 
	#MAC_PARTITION_MAGIC
 0x504d

	)

67 
	#APPLE_AUX_TYPE
 "AµÀ_UNIX_SVR2"

	)

72 
	smac_∑πôi⁄
 {

73 
__u16
 
	msig«tuª
;

74 
__u16
 
	msig_∑d
;

75 
__u32
 
	mm≠_cou¡
;

76 
__u32
 
	m°¨t_block
;

77 
__u32
 
	mblock_cou¡
;

78 
uch¨
 
	m«me
[32];

79 
uch¨
 
	mty≥
[32];

80 
__u32
 
	md©a_°¨t
;

81 
__u32
 
	md©a_cou¡
;

82 
__u32
 
	m°©us
;

83 
__u32
 
	mboŸ_°¨t
;

84 
__u32
 
	mboŸ_size
;

85 
__u32
 
	mboŸ_lﬂd
;

86 
__u32
 
	mboŸ_lﬂd2
;

87 
__u32
 
	mboŸ_íåy
;

88 
__u32
 
	mboŸ_íåy2
;

89 
__u32
 
	mboŸ_cksum
;

90 
uch¨
 
	m¥o˚ss‹
[16];

91 
__u16
 
	m∑π_∑d
[188];

92 #ifde‡
CONFIG_ISO_PARTITION


93 
uch¨
 
	miso_dummy
[2048];

95 } 
	tmac_∑πôi⁄_t
;

97 
	#MAC_STATUS_BOOTABLE
 8

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/MT7620_bmt.c

1 
	~<comm⁄.h
>

2 
	~<mÆloc.h
>

3 
	~"ølök_«nd.h
"

5 
	#__UBOOT_NAND__
 (1)

	)

6 
	~"MT7620_bmt.h
"

7 
	#MTK_NAND_BMT


	)

11 
	msig«tuª
[3];

12 
u8
 
	mvîsi⁄
;

13 
u8
 
	mbad_cou¡
;

14 
u8
 
	mm≠≥d_cou¡
;

15 
u8
 
	mchecksum
;

16 
u8
 
	mª£vîd
[13];

17 } 
	tphys_bmt_hódî
;

20 
phys_bmt_hódî
 
	mhódî
;

21 
bmt_íåy
 
	mèbÀ
[
MAX_BMT_SIZE
];

22 } 
	tphys_bmt_°ru˘
;

25 
	msig«tuª
[3];

26 } 
	tbmt_oob_d©a
;

28 
	gMAIN_SIGNATURE
[] = "BMT";

29 
	gOOB_SIGNATURE
[] = "bmt";

30 
	#SIGNATURE_SIZE
 (3)

	)

32 
	#MAX_DAT_SIZE
 0x1000

	)

33 
	#MAX_OOB_SIZE
 0x80

	)

35 #i‡
deföed
(
__PRELOADER_NAND__
)

37 
«nd_chù
 *
	g«nd_chù_bmt
;

38 
	#BLOCK_SIZE_BMT
 (
«nd_chù_bmt
->
îa£size
)

	)

39 
	#PAGE_SIZE_BMT
 (
«nd_chù_bmt
->
∑ge_size
)

	)

41 #ñi‡
deföed
(
__UBOOT_NAND__
)

48 
	#BLOCK_SIZE_BMT
 (1 << (
CONFIG_NUMPAGE_PER_BLOCK_BIT
 + 
CONFIG_PAGE_SIZE_BIT
))

	)

49 
	#PAGE_SIZE_BMT
 (1 << 
CONFIG_PAGE_SIZE_BIT
)

	)

51 #ñi‡
deföed
(
__KERNEL_NAND__
)

53 
mtd_öfo
 *
	gmtd_bmt
;

54 
«nd_chù
 *
	g«nd_chù_bmt
;

55 
	#BLOCK_SIZE_BMT
 (1 << 
«nd_chù_bmt
->
phys_îa£_shi·
)

	)

56 
	#PAGE_SIZE_BMT
 (1 << 
«nd_chù_bmt
->
∑ge_shi·
)

	)

61 
	#OFFSET
(
block
Ë((blockË* 
BLOCK_SIZE_BMT
)

62 
	#PAGE_ADDR
(
block
Ë((blockË* 
BLOCK_SIZE_BMT
 / 
PAGE_SIZE_BMT
)

	)

72 
u32
 
	gtŸÆ_block_cou¡
;

73 
u32
 
	gsy°em_block_cou¡
;

74 
	gbmt_block_cou¡
;

76 
	g∑ge_≥r_block
;

78 
u32
 
	gbmt_block_ödex
;

79 
bmt_°ru˘
 
	gbmt
;

81 
is_«nd_∑ge_2048
;

84 
u8
 
	g∑ge_buf
[
MAX_DAT_SIZE
+
MAX_OOB_SIZE
];

85 
u8
 *
	gd©_buf
 = 
NULL
;

86 
u8
 *
	goob_buf
 = 
NULL
;

88 
boﬁ
 
	gpoﬁ_îa£d
;

98 #i‡
deföed
(
__PRELOADER_NAND__
)

99 
	$«nd_ªad_∑ge_bmt
(
u32
 
∑ge
, 
u8
 *
d©
, u8 *
oob
)

102  
	`mt6575_«nd_ªad_∑ge_hw
(
∑ge
, 
d©
, 
oob
);

117 
	}
}

119 
boﬁ
 
	$«nd_block_bad_bmt
(
u32
 
off£t
)

121  
	`«nd_block_bad_hw
(
off£t
);

122 
	}
}

124 
boﬁ
 
	$«nd_îa£_bmt
(
u32
 
off£t
)

126  
	`mt6575_«nd_îa£_hw
(
off£t
);

127 
	}
}

129 
	$m¨k_block_bad_bmt
(
u32
 
off£t
)

131  
	`m¨k_block_bad_hw
(
off£t
);

132 
	}
}

134 
boﬁ
 
	$«nd_wrôe_∑ge_bmt
(
u32
 
∑ge
, 
u8
 *
d©
, u8 *
oob
)

136  
	`mt6575_«nd_wrôe_∑ge_hw
(
∑ge
, 
d©
, 
oob
);

137 
	}
}

141 #ñi‡
deföed
(
__UBOOT_NAND__
)

143 
	$«nd_ªad_∑ge_bmt
(
u32
 
∑ge
, 
u8
 *
d©
, u8 *
oob
)

148 i‡((
d©
+
CFG_PAGESIZE
Ë!
oob
)

150 
u8
 *
buf
;

151 
buf
 = (
u8
 *)
	`mÆloc
(
CFG_PAGESIZE
+
CFG_PAGE_OOBSIZE
);

152 i‡(!
buf
)

153  
Ál£
;

154 
	`mem˝y
(
buf
, 
d©
, 
CFG_PAGESIZE
);

155 
	`mem˝y
(
buf
+
CFG_PAGESIZE
, 
oob
, 
CFG_PAGE_OOBSIZE
);

156 i‡(
	`nfc_ªad_∑ge
(
buf
, 
∑ge
))

158 
	`‰ì
(
buf
);

159  
Ál£
;

161 
	`‰ì
(
buf
);

165 i‡(
	`nfc_ªad_∑ge
(
d©
, 
∑ge
))

166  
Ál£
;

169  
åue
;

170 
	}
}

172 
boﬁ
 
	$«nd_block_bad_bmt
(
u32
 
off£t
)

175  
	`ø«nd_block_isbad
((
loff_t
)
off£t
);

176 
	}
}

179 
boﬁ
 
	$«nd_îa£_bmt
(
u32
 
off£t
)

181 
∑ge
 = 
off£t
 >> 
CONFIG_PAGE_SIZE_BIT
;

182 i‡(
	`nfc_îa£_block
(
∑ge
))

183  
Ál£
;

184  
åue
;

185 
	}
}

187 
	$m¨k_block_bad_bmt
(
u32
 
off£t
)

189 
u8
 
bb
[
CFG_PAGE_OOBSIZE
];

190 
∑ge
 = 
off£t
 >> 
CONFIG_PAGE_SIZE_BIT
;

192 
	`mem£t
(
bb
, 0xff, 
CFG_PAGE_OOBSIZE
);

193 
bb
[
CONFIG_BAD_BLOCK_POS
] = 0x33;

194 
	`nfc_wrôe_oob
(
∑ge
, 0, 
bb
, 
CFG_PAGE_OOBSIZE
);

196 
	}
}

198 
boﬁ
 
	$«nd_wrôe_∑ge_bmt
(
u32
 
∑ge
, 
u8
 *
d©
, u8 *
oob
)

200 i‡((
d©
+
CFG_PAGESIZE
Ë!
oob
)

202 
u8
 *
buf
;

203 
buf
 = (
u8
 *)
	`mÆloc
(
CFG_PAGESIZE
+
CFG_PAGE_OOBSIZE
);

204 i‡(!
buf
)

205  
Ál£
;

206 
	`mem˝y
(
buf
, 
d©
, 
CFG_PAGESIZE
);

207 
	`mem˝y
(
buf
+
CFG_PAGESIZE
, 
oob
, 
CFG_PAGE_OOBSIZE
);

208 i‡(
	`nfc_wrôe_∑ge
(
buf
, 
∑ge
))

210 
	`‰ì
(
buf
);

211  
Ál£
;

213 
	`‰ì
(
buf
);

218 i‡(
	`nfc_wrôe_∑ge
(
d©
, 
∑ge
))

219  
Ál£
;

221  
åue
;

222 
	}
}

224 #ñi‡
deföed
(
__KERNEL_NAND__
)

226 
	$«nd_ªad_∑ge_bmt
(
u32
 
∑ge
, 
u8
 *
d©
, u8 *
oob
)

228  
	`mt6575_«nd_exec_ªad_∑ge
(
mtd_bmt
, 
∑ge
, 
PAGE_SIZE_BMT
, 
d©
, 
oob
);

229 
	}
}

231 
boﬁ
 
	$«nd_block_bad_bmt
(
u32
 
off£t
)

233  
	`mt6575_«nd_block_bad_hw
(
mtd_bmt
, (
loff_t
)
off£t
);

234 
	}
}

236 
boﬁ
 
	$«nd_îa£_bmt
(
u32
 
off£t
)

238 
°©us
;

239 i‡(
off£t
 < 0x20000)

241 
	`¥ötf
–"îa£ off£t: 0x%x\n", 
off£t
);

244 
°©us
 = 
	`mt6575_«nd_îa£_hw
(
mtd_bmt
, 
off£t
 / 
PAGE_SIZE_BMT
);

245 i‡(
°©us
 & 
NAND_STATUS_FAIL
)

246  
Ál£
;

248  
åue
;

249 
	}
}

251 
	$m¨k_block_bad_bmt
(
u32
 
off£t
)

253  
	`mt6575_«nd_block_m¨kbad_hw
(
mtd_bmt
, (
loff_t
)
off£t
);

254 
	}
}

256 
boﬁ
 
	$«nd_wrôe_∑ge_bmt
(
u32
 
∑ge
, 
u8
 *
d©
, u8 *
oob
)

258 i‡(
	`mt6575_«nd_exec_wrôe_∑ge
(
mtd_bmt
, 
∑ge
, 
PAGE_SIZE_BMT
, 
d©
, 
oob
))

259  
Ál£
;

261  
åue
;

262 
	}
}

273 
	$dump_bmt_öfo
(
bmt_°ru˘
 *
bmt
)

275 
i
;

277 
	`¥ötf
–"BMT v%d.ÅŸÆ %d m≠pög:\n", 
bmt
->
vîsi⁄
, bmt->
m≠≥d_cou¡
);

278 
i
 = 0; i < 
bmt
->
m≠≥d_cou¡
; i++)

280 
	`¥ötf
–"\t0x%x -> 0x%x\n", 
bmt
->
èbÀ
[
i
].
bad_ödex
, bmt->èbÀ[i].
m≠≥d_ödex
);

282 
	}
}

284 
	$dump_bmt
()

286 
	`dump_bmt_öfo
(&
bmt
);

287 
	}
}

290 
boﬁ
 
	$m©ch_bmt_sig«tuª
(
u8
 *
d©
, u8 *
oob
)

294 i‡(
	`memcmp
(
d©
 + 
MAIN_SIGNATURE_OFFSET
, 
MAIN_SIGNATURE
, 
SIGNATURE_SIZE
))

296  
Ál£
;

299 i‡(
	`memcmp
(
oob
 + 
OOB_SIGNATURE_OFFSET
, 
OOB_SIGNATURE
, 
SIGNATURE_SIZE
))

301 
	`¥ötf
( "main signature match, oob signature doesn't match, but ignore\n");

303  
åue
;

304 
	}
}

306 
u8
 
	$ˇl_bmt_checksum
(
phys_bmt_°ru˘
 *
phys_èbÀ
, 
bmt_size
)

308 
i
;

309 
u8
 
checksum
 = 0;

310 
u8
 *
d©
 = (u8 *)
phys_èbÀ
;

312 
checksum
 +
phys_èbÀ
->
hódî
.
vîsi⁄
;

314 
checksum
 +
phys_èbÀ
->
hódî
.
m≠≥d_cou¡
;

316 
d©
 +(
phys_bmt_hódî
);

317 
i
 = 0; i < 
bmt_size
 * (
bmt_íåy
); i++)

319 
checksum
 +
d©
[
i
];

322  
checksum
;

323 
	}
}

326 
	$is_block_m≠≥d
(
ödex
)

328 
i
;

329 
i
 = 0; i < 
bmt
.
m≠≥d_cou¡
; i++)

331 i‡(
ödex
 =
bmt
.
èbÀ
[
i
].
m≠≥d_ödex
)

332  
i
;

335 
	}
}

337 
boﬁ
 
	$is_∑ge_u£d
(
u8
 *
d©
, u8 *
oob
)

339  ( (
oob
[
OOB_INDEX_OFFSET
] != 0xFF) || (oob[OOB_INDEX_OFFSET + 1] != 0xFF) ||

340 (
oob
[
CONFIG_ECC_OFFSET
] != 0xFF) || (oob[CONFIG_ECC_OFFSET+1] != 0xFF) || (oob[CONFIG_ECC_OFFSET+2] != 0xFF) );

341 
	}
}

343 
boﬁ
 
	$vÆid_bmt_d©a
(
phys_bmt_°ru˘
 *
phys_èbÀ
)

345 
i
;

346 
u8
 
checksum
 = 
	`ˇl_bmt_checksum
(
phys_èbÀ
, 
bmt_block_cou¡
);

349 i‡–
phys_èbÀ
->
hódî
.
checksum
 != checksum)

351 
	`¥ötf
–"BMT D©®checksumÉº‹: %x %x\n", 
phys_èbÀ
->
hódî
.
checksum
, checksum);

352  
Ál£
;

355 
	`¥ötf
–"BMT Checksum is: 0x%x\n", 
phys_èbÀ
->
hódî
.
checksum
);

358 
i
 = 0; i < 
phys_èbÀ
->
hódî
.
m≠≥d_cou¡
; i++)

360 i‡(
phys_èbÀ
->
èbÀ
[
i
].
bad_ödex
 >
tŸÆ_block_cou¡
 ||

361 
phys_èbÀ
->
èbÀ
[
i
].
m≠≥d_ödex
 >
tŸÆ_block_cou¡
 ||

362 
phys_èbÀ
->
èbÀ
[
i
].
m≠≥d_ödex
 < 
sy°em_block_cou¡
)

364 
	`¥ötf
( "indexÉrror: bad_index: %d, mapped_index: %d\n",

365 
phys_èbÀ
->
èbÀ
[
i
].
bad_ödex
,Öhys_èbÀ->èbÀ[i].
m≠≥d_ödex
);

366  
Ál£
;

371 
	`¥ötf
–"VÆid BMT, vîsi⁄ v%d\n", 
phys_èbÀ
->
hódî
.
vîsi⁄
);

372  
åue
;

373 
	}
}

376 
	$fûl_«nd_bmt_buf„r
(
bmt_°ru˘
 *
bmt
, 
u8
 *
d©
, u8 *
oob
)

378 
phys_bmt_°ru˘
 
phys_bmt
;

380 
	`dump_bmt_öfo
(
bmt
);

383 
	`mem£t
(&
phys_bmt
, 0xFF, (phys_bmt));

385 
	`mem˝y
(
phys_bmt
.
hódî
.
sig«tuª
, 
MAIN_SIGNATURE
, 
SIGNATURE_SIZE
);

386 
phys_bmt
.
hódî
.
vîsi⁄
 = 
BMT_VERSION
;

388 
phys_bmt
.
hódî
.
m≠≥d_cou¡
 = 
bmt
->mapped_count;

389 
	`mem˝y
(
phys_bmt
.
èbÀ
, 
bmt
->èbÀ, (
bmt_íåy
Ë* 
bmt_block_cou¡
);

391 
phys_bmt
.
hódî
.
checksum
 = 
	`ˇl_bmt_checksum
(&phys_bmt, 
bmt_block_cou¡
);

393 
	`mem˝y
(
d©
 + 
MAIN_SIGNATURE_OFFSET
, &
phys_bmt
, (phys_bmt));

394 
	`mem˝y
(
oob
 + 
OOB_SIGNATURE_OFFSET
, 
OOB_SIGNATURE
, 
SIGNATURE_SIZE
);

395 
	}
}

398 
	$lﬂd_bmt_d©a
(
°¨t
, 
poﬁ_size
)

400 
bmt_ödex
 = 
°¨t
 + 
poﬁ_size
 - 1;

401 
phys_bmt_°ru˘
 
phys_èbÀ
;

402 
i
;

404 
	`¥ötf
–"[%s]: begöÅÿ£¨ch BMT from block 0x%x\n", 
__FUNCTION__
, 
bmt_ödex
);

406 
bmt_ödex
 = 
°¨t
 + 
poﬁ_size
 - 1; bmt_index >= start; bmt_index--)

408 i‡(
	`«nd_block_bad_bmt
(
	`OFFSET
(
bmt_ödex
)))

410 
	`¥ötf
–"Skù bad block: %d\n", 
bmt_ödex
);

414 i‡(!
	`«nd_ªad_∑ge_bmt
(
	`PAGE_ADDR
(
bmt_ödex
), 
d©_buf
, 
oob_buf
))

416 
	`¥ötf
–"Eº‹ found whíÑód block %d\n", 
bmt_ödex
);

420 i‡(!
	`m©ch_bmt_sig«tuª
(
d©_buf
, 
oob_buf
))

425 
	`¥ötf
–"M©ch bmàsig«tuª @ block: 0x%x\n", 
bmt_ödex
);

427 
	`mem˝y
(&
phys_èbÀ
, 
d©_buf
 + 
MAIN_SIGNATURE_OFFSET
, (phys_table));

429 i‡(!
	`vÆid_bmt_d©a
(&
phys_èbÀ
))

431 
	`¥ötf
–"BMT d©®i†nŸ c‹ª˘ %d\n", 
bmt_ödex
);

436 
bmt
.
m≠≥d_cou¡
 = 
phys_èbÀ
.
hódî
.mapped_count;

437 
bmt
.
vîsi⁄
 = 
phys_èbÀ
.
hódî
.version;

439 
	`mem˝y
(
bmt
.
èbÀ
, 
phys_èbÀ
.èbÀ, bmt.
m≠≥d_cou¡
 * (
bmt_íåy
));

441 
	`¥ötf
–"bmàfoundáàblock: %d, m≠≥d block: %d\n", 
bmt_ödex
, 
bmt
.
m≠≥d_cou¡
);

443 
i
 = 0; i < 
bmt
.
m≠≥d_cou¡
; i++)

445 i‡(!
	`«nd_block_bad_bmt
(
	`OFFSET
(
bmt
.
èbÀ
[
i
].
bad_ödex
)))

447 
	`¥ötf
–"block 0x%x i†nŸ m¨k bad, should bêpowîÜo°Üa°Åime\n", 
bmt
.
èbÀ
[
i
].
bad_ödex
);

448 
	`m¨k_block_bad_bmt
(
	`OFFSET
(
bmt
.
èbÀ
[
i
].
bad_ödex
));

452  
bmt_ödex
;

456 
	`¥ötf
( "bmt blockÇot found!\n");

458 
	}
}

467 
	$föd_avaûabÀ_block
(
boﬁ
 
°¨t_‰om_íd
)

469 
i
;

470 
block
 = 
sy°em_block_cou¡
;

471 
dúe˘i⁄
;

473 
	`¥ötf
–"TryÅÿföd_avaûabÀ_block,Öoﬁ_îa£: %d\n", 
poﬁ_îa£d
);

476 i‡(!
poﬁ_îa£d
)

478 
	`¥ötf
( "Eraseáll un-mapped blocks inÖool\n");

479 
i
 = 0; i < 
bmt_block_cou¡
; i++)

481 i‡(
block
 =
bmt_block_ödex
)

483 
	`¥ötf
–"Skù bmàblock 0x%x\n", 
block
);

487 i‡(
	`«nd_block_bad_bmt
(
	`OFFSET
(
block
 + 
i
)))

489 
	`¥ötf
–"Skù bad block 0x%x\n", 
block
 + 
i
);

498 i‡(
	`is_block_m≠≥d
(
block
 + 
i
) >= 0)

500 
	`¥ötf
–"Skù m≠≥d block 0x%x\n", 
block
 + 
i
);

504 i‡(!
	`«nd_îa£_bmt
(
	`OFFSET
(
block
 + 
i
)))

506 
	`¥ötf
–"Eø£ block 0x%x faûed\n", 
block
 + 
i
);

507 
	`m¨k_block_bad_bmt
(
	`OFFSET
(
block
 + 
i
));

511 
poﬁ_îa£d
 = 1;

514 i‡(
°¨t_‰om_íd
)

516 
block
 = 
tŸÆ_block_cou¡
 - 1;

517 
dúe˘i⁄
 = -1;

521 
block
 = 
sy°em_block_cou¡
;

522 
dúe˘i⁄
 = 1;

525 
i
 = 0; i < 
bmt_block_cou¡
; i++, 
block
 +
dúe˘i⁄
)

527 i‡(
block
 =
bmt_block_ödex
)

529 
	`¥ötf
–"Skù bmàblock 0x%x\n", 
block
);

533 i‡(
	`«nd_block_bad_bmt
(
	`OFFSET
(
block
)))

535 
	`¥ötf
–"Skù bad block 0x%x\n", 
block
);

539 i‡(
	`is_block_m≠≥d
(
block
) >= 0)

541 
	`¥ötf
–"Skù m≠≥d block 0x%x\n", 
block
);

545 
	`¥ötf
–"Föd block 0x%xávaûabÀ\n", 
block
);

546  
block
;

550 
	}
}

553 
	$gë_bad_ödex_‰om_oob
(
u8
 *
oob_buf
)

555 
ödex
;

556 
	`mem˝y
(&
ödex
, 
oob_buf
 + 
OOB_INDEX_OFFSET
, 
OOB_INDEX_SIZE
);

558  
ödex
;

559 
	}
}

561 
	$£t_bad_ödex_to_oob
(
u8
 *
oob
, 
u16
 
ödex
)

563 
	`mem˝y
(
oob
 + 
OOB_INDEX_OFFSET
, &
ödex
, (index));

564 
	}
}

566 
	$migøã_‰om_bad
(
off£t
, 
u8
 *
wrôe_d©
, u8 *
wrôe_oob
)

568 
∑ge
;

569 
îr‹_block
 = 
off£t
 / 
BLOCK_SIZE_BMT
;

570 
îr‹_∑ge
 = (
off£t
 / 
PAGE_SIZE_BMT
Ë% 
∑ge_≥r_block
;

571 
to_ödex
;

574 
	`mem£t
(
oob_buf
, 0xff, 
MAX_OOB_SIZE
);

576 
to_ödex
 = 
	`föd_avaûabÀ_block
(
Ál£
);

578 i‡(!
to_ödex
)

580 
	`¥ötf
( "Cannot findánávailable block for BMT\n");

585 
	`¥ötf
–"Wrôêîr‹Öage: 0x%x\n", 
îr‹_∑ge
);

586 i‡(!
wrôe_d©
)

588 
	`«nd_ªad_∑ge_bmt
(
	`PAGE_ADDR
(
îr‹_block
Ë+ 
îr‹_∑ge
, 
d©_buf
, 
NULL
);

589 
wrôe_d©
 = 
d©_buf
;

594 i‡(
îr‹_block
 < 
sy°em_block_cou¡
)

595 
	`£t_bad_ödex_to_oob
(
oob_buf
, 
îr‹_block
);

597 i‡(!
	`«nd_wrôe_∑ge_bmt
(
	`PAGE_ADDR
(
to_ödex
Ë+ 
îr‹_∑ge
, 
wrôe_d©
, 
oob_buf
))

599 
	`¥ötf
–"Wrôêtÿ∑gê0x%x faû\n", 
	`PAGE_ADDR
(
to_ödex
Ë+ 
îr‹_∑ge
);

600 
	`m¨k_block_bad_bmt
(
	`OFFSET
(
to_ödex
));

601  
	`migøã_‰om_bad
(
off£t
, 
wrôe_d©
, 
wrôe_oob
);

607 
∑ge
 = 0;Öagê< 
∑ge_≥r_block
;Öage++)

609 i‡(
∑ge
 !
îr‹_∑ge
)

611 
	`«nd_ªad_∑ge_bmt
(
	`PAGE_ADDR
(
îr‹_block
Ë+ 
∑ge
, 
d©_buf
, 
oob_buf
);

612 i‡(
	`is_∑ge_u£d
(
d©_buf
, 
oob_buf
))

614 i‡(
îr‹_block
 < 
sy°em_block_cou¡
)

616 
	`£t_bad_ödex_to_oob
(
oob_buf
, 
îr‹_block
);

618 
	`¥ötf
( "\tmigrateÖage 0x%xÅoÖage 0x%x\n",

619 
	`PAGE_ADDR
(
îr‹_block
Ë+ 
∑ge
, PAGE_ADDR(
to_ödex
) +Öage);

620 
oob_buf
[
CONFIG_BAD_BLOCK_POS
] = 0xff;

621 i‡(!
	`«nd_wrôe_∑ge_bmt
(
	`PAGE_ADDR
(
to_ödex
Ë+ 
∑ge
, 
d©_buf
, 
oob_buf
))

623 
	`¥ötf
–"Wrôêtÿ∑gê0x%x faû\n", 
	`PAGE_ADDR
(
to_ödex
Ë+ 
∑ge
);

624 
	`m¨k_block_bad_bmt
(
	`OFFSET
(
to_ödex
));

625  
	`migøã_‰om_bad
(
off£t
, 
wrôe_d©
, 
wrôe_oob
);

631 
	`¥ötf
–"Migøã from 0x%xÅÿ0x%x d⁄e!\n", 
îr‹_block
, 
to_ödex
);

633  
to_ödex
;

634 
	}
}

636 
boﬁ
 
	$wrôe_bmt_to_Êash
(
u8
 *
d©
, u8 *
oob
)

638 
boﬁ
 
√ed_îa£
 = 
åue
;

639 
	`¥ötf
( "TryÅo write BMT\n");

641 i‡(
bmt_block_ödex
 == 0)

644 
√ed_îa£
 = 
Ál£
;

645 i‡–!(
bmt_block_ödex
 = 
	`föd_avaûabÀ_block
(
åue
)) )

647 
	`¥ötf
( "Cannot findánávailable block for BMT\n");

648  
Ál£
;

652 
	`¥ötf
–"Föd BMT block: 0x%x\n", 
bmt_block_ödex
);

655 i‡(
√ed_îa£
)

657 i‡(!
	`«nd_îa£_bmt
(
	`OFFSET
(
bmt_block_ödex
)))

659 
	`¥ötf
–"BMT blockÉø£ faû, m¨k bad: 0x%x\n", 
bmt_block_ödex
);

660 
	`m¨k_block_bad_bmt
(
	`OFFSET
(
bmt_block_ödex
));

663 
bmt_block_ödex
 = 0;

664  
	`wrôe_bmt_to_Êash
(
d©
, 
oob
);

668 i‡–!
	`«nd_wrôe_∑ge_bmt
(
	`PAGE_ADDR
(
bmt_block_ödex
), 
d©
, 
oob
) )

670 
	`¥ötf
( "Write BMT data fail,ÇeedÅo writeágain\n");

671 
	`m¨k_block_bad_bmt
(
	`OFFSET
(
bmt_block_ödex
));

674 
bmt_block_ödex
 = 0;

675  
	`wrôe_bmt_to_Êash
(
d©
, 
oob
);

678 
	`¥ötf
–"WrôêBMT d©®tÿblock 0x%x suc˚ss\n", 
bmt_block_ödex
);

679  
åue
;

680 
	}
}

688 
bmt_°ru˘
 *
	$ªc⁄°ru˘_bmt
(
bmt_°ru˘
 * 
bmt
)

690 
i
;

691 
ödex
 = 
sy°em_block_cou¡
;

692 
bad_ödex
;

693 
m≠≥d
;

696 
bmt
->
vîsi⁄
 = 
BMT_VERSION
;

697 
bmt
->
bad_cou¡
 = 0;

698 
bmt
->
m≠≥d_cou¡
 = 0;

700 
	`mem£t
(
bmt
->
èbÀ
, 0, 
bmt_block_cou¡
 * (
bmt_íåy
));

702 
i
 = 0; i < 
bmt_block_cou¡
; i++, 
ödex
++)

704 i‡(
	`«nd_block_bad_bmt
(
	`OFFSET
(
ödex
)))

706 
	`¥ötf
–"Skù bad block: 0x%x\n", 
ödex
);

711 
	`¥ötf
–"ªadÖage: 0x%x\n", 
	`PAGE_ADDR
(
ödex
));

712 
	`«nd_ªad_∑ge_bmt
(
	`PAGE_ADDR
(
ödex
), 
d©_buf
, 
oob_buf
);

719 i‡((
bad_ödex
 = 
	`gë_bad_ödex_‰om_oob
(
oob_buf
)Ë>
sy°em_block_cou¡
)

721 
	`¥ötf
–"gë bad index: 0x%x\n", 
bad_ödex
);

722 i‡(
bad_ödex
 != 0xFFFF)

723 
	`¥ötf
–"InvÆid bad index found i¿block 0x%x, bad index 0x%x\n", 
ödex
, 
bad_ödex
);

727 
	`¥ötf
–"Block 0x%x i†m≠≥dÅÿbad block: 0x%x\n", 
ödex
, 
bad_ödex
);

729 i‡(!
	`«nd_block_bad_bmt
(
	`OFFSET
(
bad_ödex
)))

731 
	`¥ötf
–"\tbuàblock 0x%x i†nŸ m¨kedá†bad, invÆid m≠pög\n", 
bad_ödex
);

736 i‡–(
m≠≥d
 = 
	`is_block_m≠≥d
(
bad_ödex
)) >= 0)

738 
	`¥ötf
( "bad block 0x%x is mappedÅo 0x%x, should be caused byÖowerÜost,Ñeplace with one\n",

739 
bmt
->
èbÀ
[
m≠≥d
].
bad_ödex
, bmt->èbÀ[m≠≥d].
m≠≥d_ödex
);

740 
bmt
->
èbÀ
[
m≠≥d
].
m≠≥d_ödex
 = 
ödex
;

745 
bmt
->
èbÀ
[bmt->
m≠≥d_cou¡
].
bad_ödex
 = bad_index;

746 
bmt
->
èbÀ
[bmt->
m≠≥d_cou¡
].
m≠≥d_ödex
 = 
ödex
;

747 
bmt
->
m≠≥d_cou¡
++;

750 
	`¥ötf
–"Add m≠pög: 0x%x -> 0x%xÅÿBMT\n", 
bad_ödex
, 
ödex
);

754 
	`¥ötf
–"Sˇ¿ª∂a˚Öoﬁ d⁄e, m≠≥d block: %d\n", 
bmt
->
m≠≥d_cou¡
);

755 #ifde‡
MTK_NAND_BMT_DEBUG


756 
	`dump_bmt_öfo
(
bmt
);

761 
	`mem£t
(
oob_buf
, 0xFF, (oob_buf));

762 
	`fûl_«nd_bmt_buf„r
(
bmt
, 
d©_buf
, 
oob_buf
);

765 i‡(!
	`wrôe_bmt_to_Êash
(
d©_buf
, 
oob_buf
))

767 
	`¥ötf
( "TRAGEDY: cannot findáÖlaceÅo write BMT!!!!\n");

770  
bmt
;

771 
	}
}

786 
bmt_°ru˘
 *
	$öô_bmt
(
size
)

789 #i‡
	`deföed
(
__KERNEL_NAND__
)

790 
mt6575_«nd_ho°
 *
ho°
;

793 i‡(
size
 > 0 && sizê< 
MAX_BMT_SIZE
)

795 
	`¥ötf
–"Inô bmàèbÀ, size: %d\n", 
size
);

796 
bmt_block_cou¡
 = 
size
;

800 
	`¥ötf
–"InvÆid bmàèbÀ size: %d\n", 
size
);

801  
NULL
;

804 #i‡
	`deföed
(
__PRELOADER_NAND__
)

806 
«nd_chù_bmt
 = 
chù
;

807 
sy°em_block_cou¡
 = 
chù
->
chùsize
 / chù->
îa£size
;

808 
tŸÆ_block_cou¡
 = 
bmt_block_cou¡
 + 
sy°em_block_cou¡
;

809 
∑ge_≥r_block
 = 
chù
->
îa£size
 / chù->
∑ge_size
;

811 #ñi‡
	`deföed
(
__UBOOT_NAND__
)

820 
tŸÆ_block_cou¡
 = (1 << (
CONFIG_CHIP_SIZE_BIT
 - 
CONFIG_PAGE_SIZE_BIT
 - 
CONFIG_NUMPAGE_PER_BLOCK_BIT
));

821 
sy°em_block_cou¡
 = 
tŸÆ_block_cou¡
 - 
size
;

822 
∑ge_≥r_block
 = 
BLOCK_SIZE_BMT
 / 
PAGE_SIZE_BMT
;

824 #ñi‡
	`deföed
(
__KERNEL_NAND__
)

826 
«nd_chù_bmt
 = 
chù
;

827 
sy°em_block_cou¡
 = 
chù
->
chùsize
 >> chù->
phys_îa£_shi·
;

828 
tŸÆ_block_cou¡
 = 
bmt_block_cou¡
 + 
sy°em_block_cou¡
;

829 
∑ge_≥r_block
 = 
BLOCK_SIZE_BMT
 / 
PAGE_SIZE_BMT
;

830 
ho°
 = (
mt6575_«nd_ho°
 *)
chù
->
¥iv
;

831 
mtd_bmt
 = &
ho°
->
mtd
;

833 
	`¥ötf
–"mtd_bmt: %p,Ç™d_chù_bmt: %p\n", 
mtd_bmt
, 
«nd_chù_bmt
);

836 
	`¥ötf
–"bmàcou¡: %d, sy°em cou¡: %d\n", 
bmt_block_cou¡
, 
sy°em_block_cou¡
);

839 
poﬁ_îa£d
 = 0;

842 
	`mem£t
(
bmt
.
èbÀ
, 0, 
size
 * (
bmt_íåy
));

844 
	`mem£t
(
∑ge_buf
, 0x0, (page_buf));

845 
d©_buf
 = 
∑ge_buf
;

846 
oob_buf
 = 
∑ge_buf
 + 
PAGE_SIZE_BMT
;

847 #ifde‡
MTK_NAND_BMT_DEBUG


848 
	`¥ötf
("tŸÆ_block_cou¡ = %d \n", 
tŸÆ_block_cou¡
);

849 
	`¥ötf
("sy°em_block_cou¡ = %d \n", 
sy°em_block_cou¡
);

850 
	`¥ötf
("PAGE_SIZE_BMT = %d \n", 
PAGE_SIZE_BMT
);

851 
	`¥ötf
("BLOCK_SIZE_BMT = %d \n", 
BLOCK_SIZE_BMT
);

852 
	`¥ötf
("d©_buf=0x%x, oob_buf=0x%x \n", 
d©_buf
, 
oob_buf
);

856 i‡((
bmt_block_ödex
 = 
	`lﬂd_bmt_d©a
(
sy°em_block_cou¡
, 
size
)))

858 
	`¥ötf
–"Lﬂd bmàd©®suc˚s†@ block 0x%x\n", 
bmt_block_ödex
);

859 
	`dump_bmt_öfo
(&
bmt
);

860  &
bmt
;

864 
	`¥ötf
( "Load bmt data fail,ÇeedÑe-construct!\n");

866 i‡(
	`ªc⁄°ru˘_bmt
(&
bmt
))

868 #ifde‡
MTK_NAND_BMT_DEBUG


869 
	`¥ötf
("reconstruct_bmt success!\n");

871  &
bmt
;

875 #ifde‡
MTK_NAND_BMT_DEBUG


876 
	`¥ötf
("reconstruct_bmt fail!\n");

880  
NULL
;

883 
	}
}

900 
boﬁ
 
	$upd©e_bmt
(
u32
 
off£t
, 
upd©e_ªas⁄_t
 
ªas⁄
, 
u8
 *
d©
, u8 *
oob
)

902 
m≠_ödex
;

903 
‹ig_bad_block
 = -1;

905 
i
;

906 
bad_ödex
 = 
off£t
 / 
BLOCK_SIZE_BMT
;

908 #i‚de‡
MTK_NAND_BMT


909  
Ál£
;

911 i‡(
ªas⁄
 =
UPDATE_WRITE_FAIL
)

913 
	`¥ötf
( "Write fail,ÇeedÅo migrate\n");

914 i‡–!(
m≠_ödex
 = 
	`migøã_‰om_bad
(
off£t
, 
d©
, 
oob
)) )

916 
	`¥ötf
( "migrate fail\n");

917  
Ál£
;

922 i‡–!(
m≠_ödex
 = 
	`föd_avaûabÀ_block
(
Ál£
)) )

924 
	`¥ötf
( "Cannot find block inÖool\n");

925  
Ál£
;

930 i‡(
bad_ödex
 >
sy°em_block_cou¡
)

932 
i
 = 0; i < 
bmt_block_cou¡
; i++)

934 i‡(
bmt
.
èbÀ
[
i
].
m≠≥d_ödex
 =
bad_ödex
)

936 
‹ig_bad_block
 = 
bmt
.
èbÀ
[
i
].
bad_ödex
;

941 
	`¥ötf
–"M≠≥d block become†bad, orig bad block i†0x%x\n", 
‹ig_bad_block
);

943 
bmt
.
èbÀ
[
i
].
m≠≥d_ödex
 = 
m≠_ödex
;

947 
bmt
.
èbÀ
[bmt.
m≠≥d_cou¡
].
m≠≥d_ödex
 = 
m≠_ödex
;

948 
bmt
.
èbÀ
[bmt.
m≠≥d_cou¡
].
bad_ödex
 = bad_index;

949 
bmt
.
m≠≥d_cou¡
++;

952 
	`mem£t
(
oob_buf
, 0xFF, (oob_buf));

953 
	`fûl_«nd_bmt_buf„r
(&
bmt
, 
d©_buf
, 
oob_buf
);

954 i‡(!
	`wrôe_bmt_to_Êash
(
d©_buf
, 
oob_buf
))

955  
Ál£
;

957 
	`m¨k_block_bad_bmt
(
off£t
);

959  
åue
;

960 
	}
}

975 
u16
 
	$gë_m≠pög_block_ödex
(
ödex
)

977 
i
;

978 #i‚de‡
MTK_NAND_BMT


979  
ödex
;

981 i‡(
ödex
 > 
sy°em_block_cou¡
)

983  
ödex
;

986 
i
 = 0; i < 
bmt
.
m≠≥d_cou¡
; i++)

988 i‡(
bmt
.
èbÀ
[
i
].
bad_ödex
 =
ödex
)

990  
bmt
.
èbÀ
[
i
].
m≠≥d_ödex
;

994  
ödex
;

995 
	}
}

997 
	$upd©e_bmt_∑ge
(*
∑ge
, 
u8
 *
oob
)

999 
block
;

1000 
u16
 
∑ge_ö_block
;

1001 
m≠≥d_block
;

1003 
block
 = (*
∑ge
Ë>> 
CONFIG_NUMPAGE_PER_BLOCK_BIT
;

1004 
∑ge_ö_block
 = (*
∑ge
Ë& ((1 << 
CONFIG_NUMPAGE_PER_BLOCK_BIT
) - 1);

1005 
m≠≥d_block
 = 
	`gë_m≠pög_block_ödex
(
block
);

1007 i‡(
block
 < 
sy°em_block_cou¡
)

1008 
	`£t_bad_ödex_to_oob
(
oob
, 
block
);

1009 i‡(
m≠≥d_block
 !
block
)

1010 *
∑ge
 = 
∑ge_ö_block
 + (
m≠≥d_block
 << 
CONFIG_NUMPAGE_PER_BLOCK_BIT
);

1012 
	}
}

1014 #ifde‡
__KERNEL_NAND__


1015 
EXPORT_SYMBOL
(
öô_bmt
);

1016 
EXPORT_SYMBOL
(
upd©e_bmt
);

1018 
EXPORT_SYMBOL
(
gë_m≠pög_block_ödex
);

1019 
EXPORT_SYMBOL
(
upd©e_bmt_∑ge
);

1021 
MODULE_LICENSE
("GPL");

1022 
MODULE_AUTHOR
("Fei Jiang @ MediaTek");

1023 
MODULE_DESCRIPTION
("Block mapping management for MediaTek NAND Flash Driver");

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/MT7620_bmt.h

1 #i‚de‡
__BMT_H__


2 
	#__BMT_H__


	)

5 
	~<löux/ty≥s.h
>

9 #i‡
deföed
(
__PRELOADER_NAND__
)

11 
	~"«nd.h
"

13 #ñi‡
deföed
(
__UBOOT_NAND__
)

15 
	~<löux/mtd/«nd.h
>

19 #ñi‡
deföed
(
__KERNEL_NAND__
)

21 
	~<löux/mtd/mtd.h
>

22 
	~<löux/mtd/«nd.h
>

23 
	~"mt6575_«nd.h
"

24 
	~<löux/mtd/mt6575_ty≥defs.h
>

28 
	#MAX_BMT_SIZE
 (0x80)

	)

29 
	#BMT_VERSION
 (1)

30 

	)

31 
	#MAIN_SIGNATURE_OFFSET
 (0)

	)

33 
	#OOB_SIGNATURE_OFFSET
 (11)

	)

36 
	#OOB_INDEX_OFFSET
 (14)

	)

37 
	#OOB_INDEX_SIZE
 (2)

	)

38 
	#FAKE_INDEX
 (0xAAAA)

	)

40 
	s_bmt_íåy_


42 
u16
 
	mbad_ödex
;

43 
u16
 
	mm≠≥d_ödex
;

44 } 
	tbmt_íåy
;

48 
	mUPDATE_ERASE_FAIL
,

49 
	mUPDATE_WRITE_FAIL
,

50 
	mUPDATE_UNMAPPED_BLOCK
,

51 
	mUPDATE_REASON_COUNT
,

52 } 
	tupd©e_ªas⁄_t
;

55 
bmt_íåy
 
	mèbÀ
[
MAX_BMT_SIZE
];

56 
u8
 
	mvîsi⁄
;

57 
u8
 
	mm≠≥d_cou¡
;

58 
u8
 
	mbad_cou¡
;

59 }
	tbmt_°ru˘
;

62 
	tboﬁ
;

63 
	#åue
 (1)

	)

64 
	#Ál£
 (0)

	)

71 #i‡
deföed
(
__PRELOADER_NAND__
)

73 
mt6575_«nd_ªad_∑ge_hw
(
u32
 
∑ge
, 
u8
 *
d©
, u8 *
oob
);

74 
boﬁ
 
«nd_block_bad_hw
(
u32
 
off£t
);

75 
boﬁ
 
mt6575_«nd_îa£_hw
(
u32
 
off£t
);

76 
boﬁ
 
m¨k_block_bad_hw
(
u32
 
off£t
);

77 
mt6575_«nd_wrôe_∑ge_hw
(
u32
 
∑ge
, 
u8
 *
d©
, u8 *
oob
);

79 #ñi‡
deföed
(
__UBOOT_NAND__
)

83 
nfc_ªad_∑ge
(*
buf
, 
∑ge
);

84 
nfc_wrôe_∑ge
(*
buf
, 
∑ge
);

85 
ø«nd_block_isbad
(
loff_t
 
offs
);

86 
nfc_îa£_block
(
row_addr
);

87 
nfc_wrôe_oob
(
∑ge
, 
offs
, *
buf
, 
Àn
);

89 #ñi‡
deföed
(
__KERNEL_NAND__
)

91 
boﬁ
 
mt6575_«nd_exec_ªad_∑ge
(
mtd_öfo
 *
mtd
, 
u32
 
row
, u32 
∑ge_size
, 
u8
 *
d©
, u8 *
oob
);

92 
mt6575_«nd_block_bad_hw
(
mtd_öfo
 *
mtd
, 
loff_t
 
ofs
);

93 
mt6575_«nd_îa£_hw
(
mtd_öfo
 *
mtd
, 
∑ge
);

94 
mt6575_«nd_block_m¨kbad_hw
(
mtd_öfo
 *
mtd
, 
loff_t
 
ofs
);

95 
mt6575_«nd_exec_wrôe_∑ge
(
mtd_öfo
 *
mtd
, 
u32
 
row
, u32 
∑ge_size
, 
u8
 *
d©
, u8 *
oob
);

106 
£t_bad_ödex_to_oob
(
u8
 *
oob
, 
u16
 
ödex
);

109 #i‡
deföed
(
__PRELOADER_NAND__
)

111 
bmt_°ru˘
 *
öô_bmt
(
«nd_chù
* 
«nd
, 
size
);

112 
boﬁ
 
upd©e_bmt
(
u32
 
off£t
, 
upd©e_ªas⁄_t
 
ªas⁄
, 
u8
 *
d©
, u8 *
oob
);

113 
gë_m≠pög_block_ödex
(
ödex
);

115 #ñi‡
deföed
(
__UBOOT_NAND__
)

117 
bmt_°ru˘
 *
öô_bmt
(
size
);

118 
boﬁ
 
upd©e_bmt
(
u32
 
off£t
, 
upd©e_ªas⁄_t
 
ªas⁄
, 
u8
 *
d©
, u8 *
oob
);

119 
gë_m≠pög_block_ödex
(
ödex
);

120 
upd©e_bmt_∑ge
(*
∑ge
, 
u8
 *
oob
);

122 #ñi‡
deföed
(
__KERNEL_NAND__
)

124 
bmt_°ru˘
 *
öô_bmt
(
«nd_chù
* 
«nd
, 
size
);

125 
boﬁ
 
upd©e_bmt
(
u32
 
off£t
, 
upd©e_ªas⁄_t
 
ªas⁄
, 
u8
 *
d©
, u8 *
oob
);

126 
gë_m≠pög_block_ödex
(
ödex
);

127 
upd©e_bmt_∑ge
(*
∑ge
, 
u8
 *
oob
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/bbu_spiflash.h

1 #i‚de‡
__SPIFLASH_H__


2 
	#__SPIFLASH_H__


	)

4 
	~<π_mm≠.h
>

6 
	#STM_PAGE_SIZE
 256

	)

8 
	#SPI_WRITE_ENABLE
 0

	)

9 
	#SPI_WRITE_DISABLE
 1

	)

10 
	#SPI_RD_STATUS
 2

	)

11 
	#SPI_WR_STATUS
 3

	)

12 
	#SPI_RD_DATA
 4

	)

13 
	#SPI_FAST_RD_DATA
 5

	)

14 
	#SPI_PAGE_PROGRAM
 6

	)

15 
	#SPI_SECTOR_ERASE
 7

	)

16 
	#SPI_BULK_ERASE
 8

	)

17 
	#SPI_DEEP_PWRDOWN
 9

	)

18 
	#SPI_RD_SIG
 10

	)

19 
	#SPI_RD_ID
 11

	)

20 
	#SPI_RD_STATUS2
 12

	)

21 
	#SPI_HPM_ENABLE
 13

	)

22 
	#SPI_MAX_OPCODES
 14

	)

24 
	#SFI_WRITE_BUFFER_SIZE
 4

	)

25 
	#SFI_FLASH_ADDR_MASK
 0x00ffffff

	)

31 
	#STM_OP_WR_ENABLE
 0x06

	)

32 
	#STM_OP_WR_DISABLE
 0x04

	)

33 
	#STM_OP_RD_STATUS
 0x05

	)

34 
	#STM_OP_RD_STATUS2
 0x35

	)

35 
	#STM_OP_WR_STATUS
 0x01

	)

36 
	#STM_OP_RD_DATA
 0x03

	)

37 
	#STM_OP_FAST_RD_DATA
 0x0b

	)

38 
	#STM_OP_PAGE_PGRM
 0x02

	)

39 
	#STM_OP_SECTOR_ERASE
 0xd8

	)

40 
	#STM_OP_BULK_ERASE
 0xc7

	)

41 
	#STM_OP_DEEP_PWRDOWN
 0xb9

	)

42 
	#STM_OP_RD_SIG
 0xab

	)

43 
	#STM_OP_RD_ID
 0x9‡

	)

44 
	#STM_OP_HPM
 0xa3

	)

46 
	#STM_STATUS_WIP
 0x01

	)

47 
	#STM_STATUS_WEL
 0x02

	)

48 
	#STM_STATUS_BP0
 0x04

	)

49 
	#STM_STATUS_BP1
 0x08

	)

50 
	#STM_STATUS_BP2
 0x10

	)

51 
	#STM_STATUS_SRWD
 0x80

	)

53 
	#STM_STATUS_QE
 0x02

	)

55 
	#SPI_REG_CTL
 (
RALINK_SPI_BASE
 + 0x00)

	)

56 
	#SPI_REG_OPCODE
 (
RALINK_SPI_BASE
 + 0x04)

	)

57 
	#SPI_REG_DATA0
 (
RALINK_SPI_BASE
 + 0x08)

	)

58 
	#SPI_REG_DATA
(
x
Ë(
SPI_REG_DATA0
 + (x * 4))

	)

59 
	#SPI_REG_MASTER
 (
RALINK_SPI_BASE
 + 0x28)

	)

60 
	#SPI_REG_MOREBUF
 (
RALINK_SPI_BASE
 + 0x2c)

	)

61 
	#SPI_REG_Q_CTL
 (
RALINK_SPI_BASE
 + 0x30)

	)

62 
	#SPI_REG_SPACE_CR
 (
RALINK_SPI_BASE
 + 0x3c)

	)

64 
	#SPI_CTL_START
 0x00000100

	)

65 
	#SPI_CTL_BUSY
 0x00010000

	)

66 
	#SPI_CTL_TXCNT_MASK
 0x0000000f

	)

67 
	#SPI_CTL_RXCNT_MASK
 0x000000f0

	)

68 
	#SPI_CTL_TX_RX_CNT_MASK
 0x000000ff

	)

69 
	#SPI_CTL_SIZE_MASK
 0x00180000

	)

70 
	#SPI_CTL_ADDREXT_MASK
 0xff000000

	)

72 
	#SPI_MBCTL_TXCNT_MASK
 0x000001ff

	)

73 
	#SPI_MBCTL_RXCNT_MASK
 0x001ff000

	)

74 
	#SPI_MBCTL_TX_RX_CNT_MASK
 (
SPI_MBCTL_TXCNT_MASK
 | 
SPI_MBCTL_RXCNT_MASK
)

	)

75 
	#SPI_MBCTL_CMD_MASK
 0x2f000000

	)

77 
	#SPI_CTL_CLK_SEL_MASK
 0x03000000

	)

78 
	#SPI_OPCODE_MASK
 0x000000ff

	)

80 
	#SPI_STATUS_WIP
 
STM_STATUS_WIP


	)

82 #ifde‡
CONFIG_DUAL_IMAGE


83 
	s•i_Êash_öfo
 {

84 c⁄° 
u16
 
	mm‰_id
;

85 c⁄° 
u16
 
	mdev_id
;

86 c⁄° 
u16
 
	mexåa_id
;

87 c⁄° *
	m«me
;

88 c⁄° 
	mDevi˚Size
;

89 c⁄° 
	mEø£Size
;

90 
	mmode
;

93 
•iÊash_öô
 (
rom_ba£
);

94 
•iÊash_îa£
(
addr
, 
size
);

95 
•iÊash_ªad
(
‰om
, 
Àn
,

96 *
ªéí
, *
buf
);

97 
•iÊash_wrôe
(
to
, 
Àn
,

98 *
ªéí
, c⁄° *
buf
);

101 
	s›codes
 {

102 
__u16
 
	mcode
;

103 
__s8
 
	mtx_˙t
;

104 
__s8
 
	mrx_˙t
;

105 } 
	g°m_›codes
[] = {

106 {
STM_OP_WR_ENABLE
, 1, 0},

107 {
STM_OP_WR_DISABLE
, 1, 0},

108 {
STM_OP_RD_STATUS
, 1, 1},

109 {
STM_OP_WR_STATUS
, 2, 0},

110 {
STM_OP_RD_DATA
, 4, 4},

111 {
STM_OP_FAST_RD_DATA
, 1, 0},

112 {
STM_OP_PAGE_PGRM
, 8, 0},

113 {
STM_OP_SECTOR_ERASE
, 4, 0},

114 {
STM_OP_BULK_ERASE
, 1, 0},

115 {
STM_OP_DEEP_PWRDOWN
, 1, 0},

116 {
STM_OP_RD_SIG
, 4, 1},

117 {
STM_OP_RD_ID
, 1, 3},

118 {
STM_OP_RD_STATUS2
, 1, 1},

119 {
STM_OP_HPM
, 1, 0}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/ehci-core.h

22 #i‚de‡
USB_EHCI_CORE_H


23 
	#USB_EHCI_CORE_H


	)

25 
roŸdev
;

26 
ehci_hc¸
 *
hc¸
;

27 vﬁ©ûê
ehci_hc‹
 *
hc‹
;

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/ehci-hcd.c

26 #ifde‡
DEBUG


27 #unde‡
DEBUG


30 
	~<comm⁄.h
>

31 
	~<asm/byã‹dî.h
>

32 
	~<usb.h
>

33 
	~<asm/io.h
>

34 
	~<mÆloc.h
>

36 
	~"ehci.h
"

38 
	#EHCI_vút_to_bus
(
x
Ë
	`vút_to_bus
((vﬁ©ûê*)(x))

	)

40 
	groŸdev
;

41 
ehci_hc¸
 *
	ghc¸
;

42 vﬁ©ûê
ehci_hc‹
 *
	ghc‹
;

44 #i‡
deföed
(
MT7628_ASIC_BOARD
)

45 
	gphy_öô_Êag
 = 
Ál£
;

46 
	g¶ewøã_ˇl_Êag
 = 
Ál£
;

47 
	#U2_SR_COEF_7628
 32

	)

50 
uöt16_t
 
	gp‹åe£t
;

51 
QH
 
qh_li°_globÆ
 
__©åibuã__
((
Æig√d
(32)));

52 
QH
 *
	gqh_li°
 = 
NULL
;

53 
QH
 
Æloc_qh
 
__©åibuã__
((
Æig√d
(32)));

54 
qTD
 
	gÆloc_td
[3] 
__©åibuã__
((
Æig√d
 (32)));

56 
	sdes¸ùt‹
 {

57 
usb_hub_des¸ùt‹
 
	mhub
;

58 
usb_devi˚_des¸ùt‹
 
	mdevi˚
;

59 
usb_löux_c⁄fig_des¸ùt‹
 
	mc⁄fig
;

60 
usb_löux_öãrÁ˚_des¸ùt‹
 
	möãrÁ˚
;

61 
usb_ídpoöt_des¸ùt‹
 
	mídpoöt
;

62 } 
__©åibuã__
 ((
∑cked
)Ë
	gdes¸ùt‹
 = {

92 
˝u_to_À16
(0x19),

122 #i‡
deföed
(
CONFIG_EHCI_IS_TDI
)

123 
	#ehci_is_TDI
(Ë(1)

	)

125 
	#ehci_is_TDI
(Ë(0)

	)

128 #i‡
deföed
(
CONFIG_EHCI_DCACHE
)

134 
	$Êush_övÆid©e
(
u32
 
addr
, 
size
, 
Êush
)

136 i‡(
Êush
)

137 
	`Êush_dˇche_ønge
(
addr
,ádd∏+ 
size
);

139 
	`övÆid©e_dˇche_ønge
(
addr
,ádd∏+ 
size
);

140 
	}
}

142 
	$ˇche_qtd
(
qTD
 *
qtd
, 
Êush
)

144 
u32
 *
±r
 = (u32 *)
qtd
->
qt_buf„r
[0];

145 
Àn
 = (
qtd
->
qt_tokí
 & 0x7fff0000) >> 16;

147 
	`Êush_övÆid©e
((
u32
)
qtd
, (
qTD
), 
Êush
);

148 i‡(
±r
 && 
Àn
)

149 
	`Êush_övÆid©e
((
u32
)
±r
, 
Àn
, 
Êush
);

150 
	}
}

152 
ölöe
 
QH
 *
	$qh_addr
(
QH
 *
qh
)

154  (
QH
 *)((
u32
)
qh
 & 0xffffffe0);

155 
	}
}

157 
	$ˇche_qh
(
QH
 *
qh
, 
Êush
)

159 
qTD
 *
qtd
;

160 
qTD
 *
√xt
;

161 
qTD
 *
fú°_qtd
;

167 
	`Êush_övÆid©e
((
u32
)
	`qh_addr
(
qh
), (
QH
), 
Êush
);

168 i‡((
u32
)
qh
 & 
QH_LINK_TYPE_QH
)

170 
qh
 = 
	`qh_addr
(qh);

171 
qh
 = (
QH
 *)qh->
qh_lök
;

173 
qh
 = 
	`qh_addr
(qh);

178 i‡(
Êush
)

179 
fú°_qtd
 = 
qtd
 = (
qTD
 *)(*(
u32
 *)&
qh
->
qh_ovîœy
 & 0xffffffe0);

181 
qtd
 = 
fú°_qtd
;

187 i‡(
qtd
 =
NULL
)

189 
	`ˇche_qtd
(
qtd
, 
Êush
);

190 
√xt
 = (
qTD
 *)((
u32
)
qtd
->
qt_√xt
 & 0xffffffe0);

191 i‡(
√xt
 =
qtd
)

193 
qtd
 = 
√xt
;

195 
	}
}

197 
ölöe
 
	$ehci_Êush_dˇche
(
QH
 *
qh
)

199 
	`ˇche_qh
(
qh
, 1);

200 
	}
}

202 
ölöe
 
	$ehci_övÆid©e_dˇche
(
QH
 *
qh
)

204 
	`ˇche_qh
(
qh
, 0);

205 
	}
}

210 
ölöe
 
	$ehci_Êush_dˇche
(
QH
 *
qh
)

212 
	}
}

214 
ölöe
 
	$ehci_övÆid©e_dˇche
(
QH
 *
qh
)

216 
	}
}

219 #i‡
deföed
(
MT7628_ASIC_BOARD
)

220 
	$PhyWrôeFõld32
(
addr
, 
off£t
, 
mask
, 
vÆue
)

222 
cur_vÆue
;

223 
√w_vÆue
;

225 
cur_vÆue
 = 
	`ªadl
(
addr
);

226 
√w_vÆue
 = (
cur_vÆue
 & (~
mask
Ë| ((
vÆue
 << 
off£t
) & mask));

227 
	`wrôñ
(
√w_vÆue
, 
addr
);

230 
	}
}

232 
	$ehci_phy_öô
()

234 
ãmp
;

239 i‡(
phy_öô_Êag
 =
Ál£
) {

240 
ãmp
 = 
	`ªadl
(
U2_PHY_BASE
+0x8);

243 
ãmp
 = 
	`ªadl
(
U2_PHY_BASE
+0x10);

246 
ãmp
 = 
	`ªadl
(
U2_PHY_BASE
+0x60);

250 
	`wrôñ
(0xffff02, (
U2_PHY_BASE
+0x60));

251 
ãmp
 = 
	`ªadl
(
U2_PHY_BASE
+0x60);

254 
	`wrôñ
(0x555502, (
U2_PHY_BASE
+0x60));

255 
ãmp
 = 
	`ªadl
(
U2_PHY_BASE
+0x60);

258 
	`wrôñ
(0xØØ02, (
U2_PHY_BASE
+0x60));

259 
ãmp
 = 
	`ªadl
(
U2_PHY_BASE
+0x60);

260 
	`¥ötf
(" 6. u2phyd¸0(0x%08x)=0x%08x\n", (
U2_PHY_BASE
+0x60), 
ãmp
);

262 
	`wrôñ
(0x402, (
U2_PHY_BASE
+0x60));

263 
ãmp
 = 
	`ªadl
(
U2_PHY_BASE
+0x60);

266 
	`wrôñ
(0x48086a, (
U2_PHY_BASE
+0x0));

270 
	`wrôñ
(0x4400001c, (
U2_PHY_BASE
+0x04));

274 
	`wrôñ
(0xc0200000, (
U2_PHY_BASE
+0x1c));

278 
	`wrôñ
(0x2000000, (
U2_PHY_BASE
+0x68));

282 
phy_öô_Êag
 = 
åue
;

285 
	}
}

287 
	$mt7628_u2_¶ew_øã_ˇlibøti⁄
()

289 
ãmp
;

290 
i
;

291 
u4FmOut
;

292 
fgRë
;

293 
u4Tmp
;

299 i‡(
¶ewøã_ˇl_Êag
 =
Ál£
) {

300 
¶ewøã_ˇl_Êag
 = 
åue
;

302 
	`PhyWrôeFõld32
((
U2_PHY_BASE
+0x10), (23), (0x1<<23), 0x1);

303 
	`mdñay
(1);

307 
	`PhyWrôeFõld32
((
SIFSLV_FM_FEG_BASE
+0x10), (8), (0x1<<8), 1);

311 
	`PhyWrôeFõld32
((
SIFSLV_FM_FEG_BASE
+0x0), (0), (0xffffff<<0), 0x400);

315 
	`PhyWrôeFõld32
((
SIFSLV_FM_FEG_BASE
+0x0), (24), (0x1<<24), 0x1);

319 
i
=0; i<10; i++)

321 
u4FmOut
 = 
	`ªadl
(
SIFSLV_FM_FEG_BASE
+0x0c);

322 
	`¥ötf
(" FM_OUT vÆue: u4FmOuà%d(0x%08X)\n", 
u4FmOut
, u4FmOut);

326 i‡(
u4FmOut
 != 0)

328 
fgRë
 = 0;

329 
	`¥ötf
(" FM dëe˘i⁄ d⁄e!Üo› = %d\n", 
i
);

334 
fgRë
 = 1;

335 
	`mdñay
(1);

338 
	`PhyWrôeFõld32
((
SIFSLV_FM_FEG_BASE
+0x0), (24), (0x1<<24), 0);

342 
	`PhyWrôeFõld32
((
SIFSLV_FM_FEG_BASE
+0x10), (8), (0x1<<8), 0);

346 
	`PhyWrôeFõld32
((
U2_PHY_BASE
+0x10), (23), (0x1<<23), 0);

347 
	`mdñay
(1);

351 i‡(
u4FmOut
 == 0)

353 
	`PhyWrôeFõld32
((
U2_PHY_BASE
+0x10), (16), (0x7<<16), 0x4);

357 
fgRë
 = 1;

362 
u4Tmp
 = (((1024 * 25 * 
U2_SR_COEF_7628
Ë/ 
u4FmOut
) + 500) / 1000;

363 
	`¥ötf
(" SR cÆibøti⁄ vÆuêu1SrCÆVÆ = %d\n", 
u4Tmp
);

365 
	`PhyWrôeFõld32
((
U2_PHY_BASE
+0x10), (16), (0x7<<16), 
u4Tmp
);

370 
	`¥ötf
("\n\n");

371  
fgRë
;

372 
	}
}

374 
	$mt7628_phy_öô
()

376 
	`ehci_phy_öô
();

377 
	`mt7628_u2_¶ew_øã_ˇlibøti⁄
();

380 
	}
}

383 
	$h™dshake
(
uöt32_t
 *
±r
, uöt32_à
mask
, uöt32_à
d⁄e
, 
u£c
)

385 
uöt32_t
 
ªsu…
;

387 
ªsu…
 = 
	`ehci_ªadl
(
±r
);

388 i‡(
ªsu…
 =~(
uöt32_t
)0)

390 
ªsu…
 &
mask
;

391 i‡(
ªsu…
 =
d⁄e
)

393 
	`udñay
(1);

394 
u£c
--;

395 } 
u£c
 > 0);

397 
	}
}

399 
	$ehci_‰ì
(*
p
, 
size_t
 
sz
)

401 
	}
}

403 
	$ehci_ª£t
()

405 
uöt32_t
 
cmd
;

406 
uöt32_t
 
tmp
;

407 
uöt32_t
 *
ªg_±r
;

408 
ªt
 = 0;

410 
cmd
 = 
	`ehci_ªadl
(&
hc‹
->
‹_usbcmd
);

411 
cmd
 |
CMD_RESET
;

412 
	`ehci_wrôñ
(&
hc‹
->
‹_usbcmd
, 
cmd
);

413 
ªt
 = 
	`h™dshake
((
uöt32_t
 *)&
hc‹
->
‹_usbcmd
, 
CMD_RESET
, 0, 250 * 1000);

414 i‡(
ªt
 < 0) {

415 
	`¥ötf
("EHCI failÅoÑeset\n");

416 
out
;

419 i‡(
	`ehci_is_TDI
()) {

420 
ªg_±r
 = (
uöt32_t
 *)((
u8
 *)
hc‹
 + 
USBMODE
);

421 
tmp
 = 
	`ehci_ªadl
(
ªg_±r
);

422 
tmp
 |
USBMODE_CM_HC
;

423 #i‡
	`deföed
(
CONFIG_EHCI_MMIO_BIG_ENDIAN
)

424 
tmp
 |
USBMODE_BE
;

426 
	`ehci_wrôñ
(
ªg_±r
, 
tmp
);

428 
out
:

429  
ªt
;

430 
	}
}

432 
	$π_sync_buf_to_˝u
(*
buf
, 
size_t
 
sz
)

434 *
buf_n⁄ˇche
 = 
	`KSEG1ADDR
(
buf
);

435 
	`mem˝y
(
buf
, 
buf_n⁄ˇche
, 
sz
);

436 
	}
}

438 *
	$ehci_Æloc
(
size_t
 
sz
, size_à
Æign
, 
td_num
)

442 
¡ds
=0;

443 *
p
;

445 
sz
) {

446 (
QH
):

447 
p
 = &
Æloc_qh
;

448 
¡ds
 = 0;

450 (
qTD
):

451 i‡(
¡ds
 == 3) {

452 
	`debug
("out of TDs\n");

453  
NULL
;

455 
p
 = &
Æloc_td
[
¡ds
];

456 
¡ds
++;

459 
	`debug
("unknownállocation size\n");

460  
NULL
;

463 
p
 = 
	`KSEG1ADDR
(p);

464 
	`mem£t
(
p
, 
sz
, 0);

465  
p
;

466 
	}
}

468 
	$ehci_td_buf„r
(
qTD
 *
td
, *
buf
, 
size_t
 
sz
)

470 
uöt32_t
 
addr
, 
dñè
, 
√xt
;

471 
idx
;

473 *
buf_n⁄ˇche
;

475 
addr
 = (
uöt32_t
Ë
buf
;

476 
idx
 = 0;

477 
idx
 < 5) {

478 
td
->
qt_buf„r
[
idx
] = 
	`EHCI_vút_to_bus
(
	`˝u_to_hc32
(
addr
));

479 
√xt
 = (
addr
 + 4096) & ~4095;

480 
dñè
 = 
√xt
 - 
addr
;

481 i‡(
dñè
 >
sz
)

483 
sz
 -
dñè
;

484 
addr
 = 
√xt
;

485 
idx
++;

488 i‡(
idx
 == 5) {

489 
	`debug
("ouào‡buf„∏poöãr†(%u byã†À·)\n", 
sz
);

493 
buf_n⁄ˇche
 = 
	`KSEG1ADDR
(
buf
);

494 
	`mem˝y
(
buf_n⁄ˇche
, 
buf
, 
sz
);

497 
	}
}

500 
	$ehci_submô_async
(
usb_devi˚
 *
dev
, 
pùe
, *
buf„r
,

501 
Àngth
, 
devªque°
 *
ªq
)

503 
QH
 *
qh
;

504 
qTD
 *
td
;

505 vﬁ©ûê
qTD
 *
vtd
;

506 
ts
;

507 
uöt32_t
 *
tdp
;

508 
uöt32_t
 
íd±
, 
tokí
, 
usb°s
;

509 
uöt32_t
 
c
, 
toggÀ
;

510 
uöt32_t
 
cmd
;

511 
ªt
 = 0;

514 i‡(
ªq
 !
NULL
)

515 
	`debug
("ehci_submit_async():Ñeq=%u (%#x),Åype=%u (%#x), value=%u (%#x), index=%u\n",

516 
ªq
->
ªque°
,Ñeq->request,

517 
ªq
->
ªque°ty≥
,Ñeq->requesttype,

518 
	`À16_to_˝u
(
ªq
->
vÆue
),Üe16_to_cpu(req->value),

519 
	`À16_to_˝u
(
ªq
->
ödex
));

521 
qh
 = 
	`ehci_Æloc
((
QH
), 32, 0);

522 i‡(
qh
 =
NULL
) {

523 
	`debug
("unableÅoállocate QH\n");

526 
qh
->
qh_lök
 = 
	`EHCI_vút_to_bus
(
	`˝u_to_hc32
((
uöt32_t
)
qh_li°
 | 
QH_LINK_TYPE_QH
));

527 
c
 = (
	`usb_pùe•ìd
(
pùe
Ë!
USB_SPEED_HIGH
 &&

528 
	`usb_pùìndpoöt
(
pùe
) == 0) ? 1 : 0;

529 
íd±
 = (8 << 28) |

530 (
c
 << 27) |

531 (
	`usb_max∑ckë
(
dev
, 
pùe
) << 16) |

534 (
	`usb_pùe•ìd
(
pùe
) << 12) |

535 (
	`usb_pùìndpoöt
(
pùe
) << 8) |

536 (0 << 7Ë| (
	`usb_pùedevi˚
(
pùe
) << 0);

538 
qh
->
qh_íd±1
 = 
	`˝u_to_hc32
(
íd±
);

539 
íd±
 = (1 << 30) |

540 (
dev
->
p‹är
 << 23) |

541 (
dev
->
∑ª¡
->
devnum
 << 16) | (0 << 8) | (0 << 0);

542 
qh
->
qh_íd±2
 = 
	`˝u_to_hc32
(
íd±
);

543 
qh
->
qh_ovîœy
.
qt_√xt
 = 
	`˝u_to_hc32
(
QT_NEXT_TERMINATE
);

544 
qh
->
qh_ovîœy
.
qt_Æäext
 = 
	`˝u_to_hc32
(
QT_NEXT_TERMINATE
);

546 
td
 = 
NULL
;

547 
tdp
 = &
qh
->
qh_ovîœy
.
qt_√xt
;

549 
toggÀ
 =

550 
	`usb_gëtoggÀ
(
dev
, 
	`usb_pùìndpoöt
(
pùe
), 
	`usb_pùeout
(pipe));

552 i‡(
ªq
 !
NULL
) {

553 
td
 = 
	`ehci_Æloc
((
qTD
), 32, 0);

554 i‡(
td
 =
NULL
) {

555 
	`debug
("unableÅoállocate SETUPÅd\n");

556 
Áû
;

558 
td
->
qt_√xt
 = 
	`˝u_to_hc32
(
QT_NEXT_TERMINATE
);

559 
td
->
qt_Æäext
 = 
	`˝u_to_hc32
(
QT_NEXT_TERMINATE
);

560 
tokí
 = (0 << 31) |

561 ((*
ªq
) << 16) |

563 
td
->
qt_tokí
 = 
	`˝u_to_hc32
(
tokí
);

564 i‡(
	`ehci_td_buf„r
(
td
, 
ªq
, (*req)) != 0) {

565 
	`debug
("unable construct SETUPÅd\n");

566 
	`ehci_‰ì
(
td
, (*td));

567 
Áû
;

569 *
tdp
 = 
	`EHCI_vút_to_bus
(
	`˝u_to_hc32
((
uöt32_t
Ë
td
));

570 
tdp
 = &
td
->
qt_√xt
;

571 
toggÀ
 = 1;

575 i‡(
Àngth
 > 0 || 
ªq
 =
NULL
) {

576 
td
 = 
	`ehci_Æloc
((
qTD
), 32, 1);

578 i‡(
td
 =
NULL
) {

579 
	`debug
("unableÅoállocate DATAÅd\n");

580 
Áû
;

582 
td
->
qt_√xt
 = 
	`˝u_to_hc32
(
QT_NEXT_TERMINATE
);

583 
td
->
qt_Æäext
 = 
	`˝u_to_hc32
(
QT_NEXT_TERMINATE
);

584 
tokí
 = (
toggÀ
 << 31) |

585 (
Àngth
 << 16) |

586 ((
ªq
 =
NULL
 ? 1 : 0) << 15) |

589 ((
	`usb_pùeö
(
pùe
) ? 1 : 0) << 8) | (0x80 << 0);

590 
td
->
qt_tokí
 = 
	`˝u_to_hc32
(
tokí
);

591 i‡(
	`ehci_td_buf„r
(
td
, 
buf„r
, 
Àngth
) != 0) {

592 
	`debug
("unable construct DATAÅd\n");

593 
	`ehci_‰ì
(
td
, (*td));

594 
Áû
;

596 *
tdp
 = 
	`EHCI_vút_to_bus
(
	`˝u_to_hc32
((
uöt32_t
Ë
td
));

597 
tdp
 = &
td
->
qt_√xt
;

600 i‡(
ªq
 !
NULL
) {

601 
td
 = 
	`ehci_Æloc
((
qTD
), 32, 2);

602 i‡(
td
 =
NULL
) {

603 
	`debug
("unableÅoállocate ACKÅd\n");

604 
Áû
;

606 
td
->
qt_√xt
 = 
	`˝u_to_hc32
(
QT_NEXT_TERMINATE
);

607 
td
->
qt_Æäext
 = 
	`˝u_to_hc32
(
QT_NEXT_TERMINATE
);

608 
tokí
 = 0;

609 
tokí
 = (
toggÀ
 << 31) |

614 ((
	`usb_pùeö
(
pùe
) ? 0 : 1) << 8) | (0x80 << 0);

615 
td
->
qt_tokí
 = 
	`˝u_to_hc32
(
tokí
);

616 *
tdp
 = 
	`EHCI_vút_to_bus
(
	`˝u_to_hc32
((
uöt32_t
Ë
td
));

617 
tdp
 = &
td
->
qt_√xt
;

620 
qh_li°
->
qh_lök
 = 
	`EHCI_vút_to_bus
(
	`˝u_to_hc32
((
uöt32_t
Ë
qh
 | 
QH_LINK_TYPE_QH
));

623 
	`ehci_Êush_dˇche
(
qh_li°
);

625 
usb°s
 = 
	`ehci_ªadl
(&
hc‹
->
‹_usb°s
);

626 
	`ehci_wrôñ
(&
hc‹
->
‹_usb°s
, (
usb°s
 & 0x3f));

629 
cmd
 = 
	`ehci_ªadl
(&
hc‹
->
‹_usbcmd
);

630 
cmd
 |
CMD_ASE
;

631 
	`ehci_wrôñ
(&
hc‹
->
‹_usbcmd
, 
cmd
);

633 
ªt
 = 
	`h™dshake
((
uöt32_t
 *)&
hc‹
->
‹_usb°s
, 
STD_ASS
, STD_ASS, 100 * 1000);

634 i‡(
ªt
 < 0) {

635 
	`¥ötf
("EHCI failÅimeout STD_ASS set\n");

636 
Áû
;

640 
ts
 = 
	`gë_timî
(0);

641 
vtd
 = 
td
;

644 
	`ehci_övÆid©e_dˇche
(
qh_li°
);

646 
tokí
 = 
	`hc32_to_˝u
(
vtd
->
qt_tokí
);

647 i‡(!(
tokí
 & 0x80))

649 } 
	`gë_timî
(
ts
Ë< 
CFG_HZ
);

653 
cmd
 = 
	`ehci_ªadl
(&
hc‹
->
‹_usbcmd
);

654 
cmd
 &~
CMD_ASE
;

655 
	`ehci_wrôñ
(&
hc‹
->
‹_usbcmd
, 
cmd
);

657 
ªt
 = 
	`h™dshake
((
uöt32_t
 *)&
hc‹
->
‹_usb°s
, 
STD_ASS
, 0, 100 * 1000);

658 i‡(
ªt
 < 0) {

659 
	`¥ötf
("EHCI failÅimeout STD_ASSÑeset\n");

660 
Áû
;

663 
	`π_sync_buf_to_˝u
(
buf„r
, 
Àngth
);

665 
qh_li°
->
qh_lök
 = 
	`EHCI_vút_to_bus
(
	`˝u_to_hc32
((
uöt32_t
)qh_li° | 
QH_LINK_TYPE_QH
));

667 
tokí
 = 
	`hc32_to_˝u
(
qh
->
qh_ovîœy
.
qt_tokí
);

668 i‡(!(
tokí
 & 0x80)) {

670 
tokí
 & 0xfc) {

672 
toggÀ
 = 
tokí
 >> 31;

673 
	`usb_£âoggÀ
(
dev
, 
	`usb_pùìndpoöt
(
pùe
), 
	`usb_pùeout
’ùe), 
toggÀ
);

674 
dev
->
°©us
 = 0;

677 
dev
->
°©us
 = 
USB_ST_STALLED
;

681 
dev
->
°©us
 = 
USB_ST_BUF_ERR
;

685 
dev
->
°©us
 = 
USB_ST_BABBLE_DET
;

688 
dev
->
°©us
 = 
USB_ST_CRC_ERR
;

692 if(
Àngth
)

693 
dev
->
a˘_Àn
 = 
Àngth
 - ((
tokí
 >> 16) & 0x7fff);

695 
dev
->
a˘_Àn
 = 0;

697 
dev
->
a˘_Àn
 = 0;

698 
	`debug
("dev=%u, usb°s=%#x,Ö[1]=%#x,Ö[2]=%#x\n", 
dev
->
devnum
, 
	`ehci_ªadl
(&
hc‹
->
‹_usb°s
),Éhci_ªadl(&hc‹->
‹_p‹tsc
[0]),Éhci_readl(&hcor->or_portsc[1]));

701 #ifde‡
PRINT_DEBUG


703 
i
, 
mö
;

704 *
tmp
 = 
buf„r
;

705 
mö
 = 
dev
->
a˘_Àn
 > 5 ? 5 : dev->act_len;

706 
	`¥ötf
("dev->a˘_Àn=%d\n", 
dev
->
a˘_Àn
);

707 
i
=0; i< 
mö
; i++)

708 
	`¥ötf
("%x ", 
tmp
[
i
]);

712  (
dev
->
°©us
 !
USB_ST_NOT_PROC
) ? 0 : -1;

714 
Áû
:

715 
td
 = (*)
	`hc32_to_˝u
(
qh
->
qh_ovîœy
.
qt_√xt
);

716 
td
 !(*)
QT_NEXT_TERMINATE
) {

717 
qh
->
qh_ovîœy
.
qt_√xt
 = 
td
->qt_next;

718 
	`ehci_‰ì
(
td
, (*td));

719 
td
 = (*)
	`hc32_to_˝u
(
qh
->
qh_ovîœy
.
qt_√xt
);

721 
	`ehci_‰ì
(
qh
, (*qh));

723 
	}
}

725 
ölöe
 
	$mö3
(
a
, 
b
, 
c
)

727 i‡(
b
 < 
a
)

728 
a
 = 
b
;

729 i‡(
c
 < 
a
)

730 
a
 = 
c
;

731  
a
;

732 
	}
}

735 
	$ehci_submô_roŸ
(
usb_devi˚
 *
dev
, 
pùe
, *
buf„r
,

736 
Àngth
, 
devªque°
 *
ªq
)

738 
uöt8_t
 
tmpbuf
[4];

739 
u16
 
ty≥Req
;

740 *
§˝å
 = 
NULL
;

741 
Àn
, 
§˛í
;

742 
uöt32_t
 
ªg
;

743 
uöt32_t
 *
°©us_ªg
;

745 i‡(
	`À16_to_˝u
(
ªq
->
ödex
Ë>
CONFIG_SYS_USB_EHCI_MAX_ROOT_PORTS
) {

746 
	`¥ötf
("Thêªque°Ö‹t(%dËi†nŸ c⁄figuªd\n", 
	`À16_to_˝u
(
ªq
->
ödex
) - 1);

749 
°©us_ªg
 = (
uöt32_t
 *)&
hc‹
->
‹_p‹tsc
[
	`À16_to_˝u
(
ªq
->
ödex
) - 1];

750 
§˛í
 = 0;

752 
	`debug
("ehci_submit_root()Ñeq=%u (%#x),Åype=%u (%#x), value=%u, index=%u\n",

753 
ªq
->
ªque°
,Ñeq->request,

754 
ªq
->
ªque°ty≥
,Ñeq->requesttype,

755 
	`À16_to_˝u
(
ªq
->
vÆue
),Üe16_to_˝u‘eq->
ödex
));

757 
ty≥Req
 = 
ªq
->
ªque°
 |Ñeq->
ªque°ty≥
 << 8;

759 
	`À16_to_˝u
(
ty≥Req
)) {

760 
Devi˚Reque°
 | 
USB_REQ_GET_DESCRIPTOR
:

761 
	`À16_to_˝u
(
ªq
->
vÆue
) >> 8) {

762 
USB_DT_DEVICE
:

763 
	`debug
("USB_DT_DEVICEÑequest\n");

764 
§˝å
 = &
des¸ùt‹
.
devi˚
;

765 
§˛í
 = 0x12;

767 
USB_DT_CONFIG
:

768 
	`debug
("USB_DT_CONFIG config\n");

769 
§˝å
 = &
des¸ùt‹
.
c⁄fig
;

770 
§˛í
 = 0x19;

772 
USB_DT_STRING
:

773 
	`debug
("USB_DT_STRING config\n");

774 
	`À16_to_˝u
(
ªq
->
vÆue
) & 0xff) {

776 
§˝å
 = "\4\3\1\0";

777 
§˛í
 = 4;

780 
§˝å
 = "\16\3u\0-\0b\0o\0o\0t\0";

781 
§˛í
 = 14;

784 
§˝å
 = "\52\3E\0H\0C\0I\0 "

787 
§˛í
 = 42;

790 
	`debug
("unknown value DT_STRING %x\n",

791 
	`À16_to_˝u
(
ªq
->
vÆue
));

792 
unknown
;

796 
	`debug
("unknow¿vÆuê%x\n", 
	`À16_to_˝u
(
ªq
->
vÆue
));

797 
unknown
;

800 
USB_REQ_GET_DESCRIPTOR
 | ((
USB_DIR_IN
 | 
USB_RT_HUB
) << 8):

801 
	`À16_to_˝u
(
ªq
->
vÆue
) >> 8) {

802 
USB_DT_HUB
:

803 
	`debug
("USB_DT_HUB config\n");

804 
§˝å
 = &
des¸ùt‹
.
hub
;

805 
§˛í
 = 0x8;

808 
	`debug
("unknow¿vÆuê%x\n", 
	`À16_to_˝u
(
ªq
->
vÆue
));

809 
unknown
;

812 
USB_REQ_SET_ADDRESS
 | (
USB_RECIP_DEVICE
 << 8):

813 
	`debug
("USB_REQ_SET_ADDRESS\n");

814 
roŸdev
 = 
	`À16_to_˝u
(
ªq
->
vÆue
);

816 
Devi˚OutReque°
 | 
USB_REQ_SET_CONFIGURATION
:

817 
	`debug
("USB_REQ_SET_CONFIGURATION\n");

820 
USB_REQ_GET_STATUS
 | ((
USB_DIR_IN
 | 
USB_RT_HUB
) << 8):

821 
tmpbuf
[0] = 1;

822 
tmpbuf
[1] = 0;

823 
§˝å
 = 
tmpbuf
;

824 
§˛í
 = 2;

826 
USB_REQ_GET_STATUS
 | ((
USB_RT_PORT
 | 
USB_DIR_IN
) << 8):

828 
	`mem£t
(
tmpbuf
, 0, 4);

829 
ªg
 = 
	`ehci_ªadl
(
°©us_ªg
);

850 i‡(
ªg
 & 
EHCI_PS_PR
 && (
p‹åe£t
 & (1 << 
	`À16_to_˝u
(
ªq
->
ödex
)))){

851 
ªt
;

853 
ªg
 =Ñeg & ~(
EHCI_PS_PR
 | 
EHCI_PS_CLEAR
);

854 
	`ehci_wrôñ
(
°©us_ªg
, 
ªg
);

855 
ªt
 = 
	`h™dshake
(
°©us_ªg
, 
EHCI_PS_PR
, 0, 2 * 1000);

856 i‡(!
ªt
)

857 
tmpbuf
[0] |
USB_PORT_STAT_RESET
;

859 
	`¥ötf
("p‹t(%dËª£àîr‹\n", 
	`À16_to_˝u
(
ªq
->
ödex
) - 1);

864 
	`waô_ms
(300);

865 
ªg
 = 
	`ehci_ªadl
(
°©us_ªg
);

867 i‡(
ªg
 & 
EHCI_PS_CS
)

868 
tmpbuf
[0] |
USB_PORT_STAT_CONNECTION
;

869 i‡(
ªg
 & 
EHCI_PS_PE
)

870 
tmpbuf
[0] |
USB_PORT_STAT_ENABLE
;

871 i‡(
ªg
 & 
EHCI_PS_SUSP
)

872 
tmpbuf
[0] |
USB_PORT_STAT_SUSPEND
;

873 i‡(
ªg
 & 
EHCI_PS_OCA
)

874 
tmpbuf
[0] |
USB_PORT_STAT_OVERCURRENT
;

876 i‡(
ªg
 & 
EHCI_PS_PP
)

877 
tmpbuf
[1] |
USB_PORT_STAT_POWER
 >> 8;

879 i‡(
	`ehci_is_TDI
()) {

880 (
ªg
 >> 26) & 3) {

884 
tmpbuf
[1] |
USB_PORT_STAT_LOW_SPEED
 >> 8;

888 
tmpbuf
[1] |
USB_PORT_STAT_HIGH_SPEED
 >> 8;

892 
tmpbuf
[1] |
USB_PORT_STAT_HIGH_SPEED
 >> 8;

895 i‡(
ªg
 & 
EHCI_PS_CSC
)

896 
tmpbuf
[2] |
USB_PORT_STAT_C_CONNECTION
;

897 i‡(
ªg
 & 
EHCI_PS_PEC
)

898 
tmpbuf
[2] |
USB_PORT_STAT_C_ENABLE
;

899 i‡(
ªg
 & 
EHCI_PS_OCC
)

900 
tmpbuf
[2] |
USB_PORT_STAT_C_OVERCURRENT
;

901 i‡(
p‹åe£t
 & (1 << 
	`À16_to_˝u
(
ªq
->
ödex
)))

902 
tmpbuf
[2] |
USB_PORT_STAT_C_RESET
;

904 
§˝å
 = 
tmpbuf
;

905 
§˛í
 = 4;

908 
USB_REQ_SET_FEATURE
 | ((
USB_DIR_OUT
 | 
USB_RT_PORT
) << 8):

909 
ªg
 = 
	`ehci_ªadl
(
°©us_ªg
);

910 
ªg
 &~
EHCI_PS_CLEAR
;

911 
	`À16_to_˝u
(
ªq
->
vÆue
)) {

912 
USB_PORT_FEAT_ENABLE
:

913 
ªg
 |
EHCI_PS_PE
;

914 
	`ehci_wrôñ
(
°©us_ªg
, 
ªg
);

916 
USB_PORT_FEAT_POWER
:

917 i‡(
	`HCS_PPC
(
	`ehci_ªadl
(&
hc¸
->
¸_hc•¨ams
))) {

918 
ªg
 |
EHCI_PS_PP
;

919 
	`ehci_wrôñ
(
°©us_ªg
, 
ªg
);

922 
USB_PORT_FEAT_RESET
:

923 i‡((
ªg
 & (
EHCI_PS_PE
 | 
EHCI_PS_CS
)) == EHCI_PS_CS &&

924 !
	`ehci_is_TDI
() &&

925 
	`EHCI_PS_IS_LOWSPEED
(
ªg
)) {

927 
	`debug
("port %dÜow speed --> companion\n",

928 
ªq
->
ödex
 - 1);

929 
ªg
 |
EHCI_PS_PO
;

930 
	`ehci_wrôñ
(
°©us_ªg
, 
ªg
);

933 
ªg
 |
EHCI_PS_PR
;

934 
ªg
 &~
EHCI_PS_PE
;

936 
	`ehci_wrôñ
(
°©us_ªg
, 
ªg
);

943 
	`waô_ms
(50);

944 
p‹åe£t
 |1 << 
	`À16_to_˝u
(
ªq
->
ödex
);

948 
	`debug
("unknow¿„©uª %x\n", 
	`À16_to_˝u
(
ªq
->
vÆue
));

949 
unknown
;

952 
	`ehci_ªadl
(&
hc‹
->
‹_usbcmd
);

954 
USB_REQ_CLEAR_FEATURE
 | ((
USB_DIR_OUT
 | 
USB_RT_PORT
) << 8):

955 
ªg
 = 
	`ehci_ªadl
(
°©us_ªg
);

956 
	`À16_to_˝u
(
ªq
->
vÆue
)) {

957 
USB_PORT_FEAT_ENABLE
:

958 
ªg
 &~
EHCI_PS_PE
;

960 
USB_PORT_FEAT_C_ENABLE
:

961 
ªg
 = (ªg & ~
EHCI_PS_CLEAR
Ë| 
EHCI_PS_PE
;

963 
USB_PORT_FEAT_POWER
:

964 i‡(
	`HCS_PPC
(
	`ehci_ªadl
(&
hc¸
->
¸_hc•¨ams
)))

965 
ªg
 =Ñeg & ~(
EHCI_PS_CLEAR
 | 
EHCI_PS_PP
);

966 
USB_PORT_FEAT_C_CONNECTION
:

967 
ªg
 = (ªg & ~
EHCI_PS_CLEAR
Ë| 
EHCI_PS_CSC
;

969 
USB_PORT_FEAT_OVER_CURRENT
:

970 
ªg
 = (ªg & ~
EHCI_PS_CLEAR
Ë| 
EHCI_PS_OCC
;

972 
USB_PORT_FEAT_C_RESET
:

973 
p‹åe£t
 &~(1 << 
	`À16_to_˝u
(
ªq
->
ödex
));

976 
	`debug
("unknow¿„©uª %x\n", 
	`À16_to_˝u
(
ªq
->
vÆue
));

977 
unknown
;

979 
	`ehci_wrôñ
(
°©us_ªg
, 
ªg
);

981 
	`ehci_ªadl
(&
hc‹
->
‹_usbcmd
);

984 
	`debug
("UnknownÑequest\n");

985 
unknown
;

988 
	`waô_ms
(1);

989 
Àn
 = 
	`mö3
(
§˛í
, 
	`À16_to_˝u
(
ªq
->
Àngth
),Üength);

990 i‡(
§˝å
 !
NULL
 && 
Àn
 > 0)

991 
	`mem˝y
(
buf„r
, 
§˝å
, 
Àn
);

993 
	`debug
("Len is 0\n");

995 
dev
->
a˘_Àn
 = 
Àn
;

996 
dev
->
°©us
 = 0;

999 
unknown
:

1000 
	`debug
("requesttype=%x,Ñequest=%x, value=%x, index=%x,Üength=%x\n",

1001 
ªq
->
ªque°ty≥
,Ñeq->
ªque°
, 
	`À16_to_˝u
‘eq->
vÆue
),

1002 
	`À16_to_˝u
(
ªq
->
ödex
),Üe16_to_˝u‘eq->
Àngth
));

1004 
dev
->
a˘_Àn
 = 0;

1005 
dev
->
°©us
 = 
USB_ST_STALLED
;

1007 
	}
}

1009 
	$usb_lowÀvñ_°›
(
ödex
)

1011  
	`ehci_hcd_°›
();

1012 
	}
}

1014 
	$usb_lowÀvñ_öô
(
ödex
, 
usb_öô_ty≥
 
öô
, **
c⁄åﬁÀr
)

1016 
uöt32_t
 
ªg
;

1017 
uöt32_t
 
cmd
;

1019 i‡(
	`ehci_hcd_öô
() != 0)

1023 i‡(
	`ehci_ª£t
() != 0)

1026 #i‡
	`deföed
(
MT7628_ASIC_BOARD
)

1027 
	`mt7628_phy_öô
();

1030 #i‡
	`deföed
(
CONFIG_EHCI_HCD_INIT_AFTER_RESET
)

1031 i‡(
	`ehci_hcd_öô
() != 0)

1034 
qh_li°
 = 
	`KSEG1ADDR
(&
qh_li°_globÆ
);

1037 
	`mem£t
(
qh_li°
, 0, (
QH
));

1038 
qh_li°
->
qh_lök
 = 
	`EHCI_vút_to_bus
(
	`˝u_to_hc32
((
uöt32_t
)qh_li° | 
QH_LINK_TYPE_QH
));

1039 
qh_li°
->
qh_íd±1
 = 
	`˝u_to_hc32
((1 << 15Ë| (
USB_SPEED_HIGH
 << 12));

1040 
qh_li°
->
qh_cuπd
 = 
	`˝u_to_hc32
(
QT_NEXT_TERMINATE
);

1041 
qh_li°
->
qh_ovîœy
.
qt_√xt
 = 
	`˝u_to_hc32
(
QT_NEXT_TERMINATE
);

1042 
qh_li°
->
qh_ovîœy
.
qt_Æäext
 = 
	`˝u_to_hc32
(
QT_NEXT_TERMINATE
);

1043 
qh_li°
->
qh_ovîœy
.
qt_tokí
 = 
	`˝u_to_hc32
(0x40);

1046 
	`ehci_wrôñ
(&
hc‹
->
‹_asyn˛i°addr
, 
	`EHCI_vút_to_bus
((
uöt32_t
)
qh_li°
));

1048 
ªg
 = 
	`ehci_ªadl
(&
hc¸
->
¸_hc•¨ams
);

1049 
des¸ùt‹
.
hub
.
bNbrP‹ts
 = 
	`HCS_N_PORTS
(
ªg
);

1050 
	`¥ötf
("Regi°î %x NbrP‹t†%d\n", 
ªg
, 
des¸ùt‹
.
hub
.
bNbrP‹ts
);

1052 i‡(
	`HCS_INDICATOR
(
ªg
))

1053 
des¸ùt‹
.
hub
.
wHubCh¨a˘îi°ics
 |= 0x80;

1055 i‡(
	`HCS_PPC
(
ªg
))

1056 
des¸ùt‹
.
hub
.
wHubCh¨a˘îi°ics
 |= 0x01;

1059 
cmd
 = 
	`ehci_ªadl
(&
hc‹
->
‹_usbcmd
);

1064 
cmd
 &~(
CMD_LRESET
|
CMD_IAAD
|
CMD_PSE
|
CMD_ASE
|
CMD_RESET
);

1065 
cmd
 |
CMD_RUN
;

1066 
	`ehci_wrôñ
(&
hc‹
->
‹_usbcmd
, 
cmd
);

1069 
cmd
 = 
	`ehci_ªadl
(&
hc‹
->
‹_c⁄figÊag
);

1070 
cmd
 |
FLAG_CF
;

1071 
	`ehci_wrôñ
(&
hc‹
->
‹_c⁄figÊag
, 
cmd
);

1073 
cmd
 = 
	`ehci_ªadl
(&
hc‹
->
‹_usbcmd
);

1074 
	`waô_ms
(5);

1075 
ªg
 = 
	`HC_VERSION
(
	`ehci_ªadl
(&
hc¸
->
¸_ˇpba£
));

1076 
	`¥ötf
("USB EHCI %x.%02x\n", 
ªg
 >> 8,Ñeg & 0xff);

1078 
roŸdev
 = 0;

1081 
	}
}

1084 
	$submô_bulk_msg
(
usb_devi˚
 *
dev
, 
pùe
, *
buf„r
, 
Àngth
)

1086 i‡(
	`usb_pùëy≥
(
pùe
Ë!
PIPE_BULK
) {

1087 
	`debug
("n⁄-bulkÖùê—y≥=%lu)", 
	`usb_pùëy≥
(
pùe
));

1090  
	`ehci_submô_async
(
dev
, 
pùe
, 
buf„r
, 
Àngth
, 
NULL
);

1091 
	}
}

1094 
	$submô_c⁄åﬁ_msg
(
usb_devi˚
 *
dev
, 
pùe
, *
buf„r
,

1095 
Àngth
, 
devªque°
 *
£tup
)

1097 i‡(
	`usb_pùëy≥
(
pùe
Ë!
PIPE_CONTROL
) {

1098 
	`debug
("n⁄-c⁄åﬁÖùê—y≥=%lu)", 
	`usb_pùëy≥
(
pùe
));

1102 i‡(
	`usb_pùedevi˚
(
pùe
Ë=
roŸdev
) {

1103 i‡(
roŸdev
 == 0)

1104 
dev
->
•ìd
 = 
USB_SPEED_HIGH
;

1105  
	`ehci_submô_roŸ
(
dev
, 
pùe
, 
buf„r
, 
Àngth
, 
£tup
);

1107  
	`ehci_submô_async
(
dev
, 
pùe
, 
buf„r
, 
Àngth
, 
£tup
);

1108 
	}
}

1111 
	$submô_öt_msg
(
usb_devi˚
 *
dev
, 
pùe
, *
buf„r
,

1112 
Àngth
, 
öãrvÆ
)

1114 
	`debug
("dev=%p,Öùe=%lu, buf„r=%p,Üígth=%d, i¡îvÆ=%d", 
dev
, 
pùe
, 
buf„r
, 
Àngth
, 
öãrvÆ
);

1116 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/ehci-ra.c

20 
	~<comm⁄.h
>

21 
	~<usb.h
>

23 
	~<π_mm≠.h
>

25 
	~"ehci.h
"

26 
	~"ehci-c‹e.h
"

32 
	$Àave_powî_ßvög
()

34 
u32
 
vÆ
;

36 
vÆ
 = 
	`RALINK_REG
(
RT2880_RSTCTRL_REG
);

37 
vÆ
 = vÆ & ~(
RALINK_UHST_RST
 | 
RALINK_UDEV_RST
);

38 
	`RALINK_REG
(
RT2880_RSTCTRL_REG
Ë
vÆ
;

40 
vÆ
 = 
	`RALINK_REG
(
RT2880_CLKCFG1_REG
);

41 #i‡
	`deföed
(
RT5350_ASIC_BOARD
)

42 
vÆ
 = vÆ | (
RALINK_UPHY0_CLK_EN
) ;

44 
vÆ
 = vÆ | 
RALINK_UPHY0_CLK_EN
 | 
RALINK_UPHY1_CLK_EN
 ;

46 
	`RALINK_REG
(
RT2880_CLKCFG1_REG
Ë
vÆ
;

47 
	}
}

50 
	#USB0_HOST_MODE
 0x400

	)

52 
	$π_£t_ho°
()

54 
u32
 
vÆ
 = 
	`RALINK_REG
(
RT2880_SYSCFG1_REG
);

56 
vÆ
 |
USB0_HOST_MODE
;

57 
	`RALINK_REG
(
RT2880_SYSCFG1_REG
Ë
vÆ
;

58 
	}
}

64 
	$ehci_hcd_öô
()

66 #i‡
	`deföed
(
RT3352_ASIC_BOARD
Ë|| deföed(
RT3883_ASIC_BOARD
Ë|| deföed(
RT5350_ASIC_BOARD
Ë|| deföed(
MT7620_ASIC_BOARD
)|| deföed(
MT7628_ASIC_BOARD
)

67 
	`¥ötf
("*********ehci_hcd_init**********\n");

68 
	`Àave_powî_ßvög
();

69 
	`mdñay
(100);

71 
	`π_£t_ho°
();

72 
	`mdñay
(100);

74 
hc¸
 = (
ehci_hc¸
 *)(0xb01c0000);

75 
hc‹
 = (
ehci_hc‹
 *)((
uöt32_t
Ë
hc¸
 + 
	`HC_LENGTH
(
	`ehci_ªadl
(&hc¸->
¸_ˇpba£
)));

77 
	`¥ötf
("Medüãk/RÆök USB EHCI ho° inô hc¸ %xánd hc‹ %x hc_Àngth %d\n", (
uöt32_t
)
hc¸
, (uöt32_t)
hc‹
, (uöt32_t)
	`HC_LENGTH
(
	`ehci_ªadl
(&hc¸->
¸_ˇpba£
)));

82 
	}
}

88 
	$ehci_hcd_°›
()

91 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/ehci.h

22 #i‚de‡
USB_EHCI_H


23 
	#USB_EHCI_H


	)

25 #i‡!
deföed
(
CONFIG_SYS_USB_EHCI_MAX_ROOT_PORTS
)

26 
	#CONFIG_SYS_USB_EHCI_MAX_ROOT_PORTS
 3

	)

30 
	#Devi˚Reque°
 \

31 ((
USB_DIR_IN
 | 
USB_TYPE_STANDARD
 | 
USB_RECIP_DEVICE
Ë<< 8)

	)

33 
	#Devi˚OutReque°
 \

34 ((
USB_DIR_OUT
 | 
USB_TYPE_STANDARD
 | 
USB_RECIP_DEVICE
Ë<< 8)

	)

36 
	#I¡îÁ˚Reque°
 \

37 ((
USB_DIR_IN
 | 
USB_TYPE_STANDARD
 | 
USB_RECIP_INTERFACE
Ë<< 8)

	)

39 
	#EndpoötReque°
 \

40 ((
USB_DIR_IN
 | 
USB_TYPE_STANDARD
 | 
USB_RECIP_INTERFACE
Ë<< 8)

	)

42 
	#EndpoötOutReque°
 \

43 ((
USB_DIR_OUT
 | 
USB_TYPE_STANDARD
 | 
USB_RECIP_INTERFACE
Ë<< 8)

	)

48 
	sehci_hc¸
 {

49 
uöt32_t
 
	m¸_ˇpba£
;

50 
	#HC_LENGTH
(
p
Ë((’Ë>> 0Ë& 0x00ff)

	)

51 
	#HC_VERSION
(
p
Ë((’Ë>> 16Ë& 0xffff)

	)

52 
uöt32_t
 
	m¸_hc•¨ams
;

53 
	#HCS_PPC
(
p
Ë(’Ë& (1 << 4))

	)

54 
	#HCS_INDICATOR
(
p
Ë(’Ë& (1 << 16)Ë

	)

55 
	#HCS_N_PORTS
(
p
Ë((’Ë>> 0Ë& 0xf)

	)

56 
uöt32_t
 
	m¸_hc˝¨ams
;

57 
uöt8_t
 
	m¸_hc•_p‹åt
[8];

58 } 
__©åibuã__
 ((
∑cked
));

60 
	sehci_hc‹
 {

61 
uöt32_t
 
	m‹_usbcmd
;

62 
	#CMD_PARK
 (1 << 11Ë

	)

63 
	#CMD_PARK_CNT
(
c
Ë(((cË>> 8Ë& 3Ë

	)

64 
	#CMD_ASE
 (1 << 5Ë

	)

65 
	#CMD_LRESET
 (1 << 7Ë

	)

66 
	#CMD_IAAD
 (1 << 5Ë

	)

67 
	#CMD_PSE
 (1 << 4Ë

	)

68 
	#CMD_RESET
 (1 << 1Ë

	)

69 
	#CMD_RUN
 (1 << 0Ë

	)

70 
uöt32_t
 
	m‹_usb°s
;

71 
	#STD_ASS
 (1 << 15)

	)

72 
	#STS_HALT
 (1 << 12)

	)

73 
uöt32_t
 
	m‹_usböå
;

74 
uöt32_t
 
	m‹_‰ödex
;

75 
uöt32_t
 
	m‹_˘æds£gmít
;

76 
uöt32_t
 
	m‹_≥riodi˛i°ba£
;

77 
uöt32_t
 
	m‹_asyn˛i°addr
;

78 
uöt32_t
 
	m_ª£rved_
[9];

79 
uöt32_t
 
	m‹_c⁄figÊag
;

80 
	#FLAG_CF
 (1 << 0Ë

	)

81 
uöt32_t
 
	m‹_p‹tsc
[
CONFIG_SYS_USB_EHCI_MAX_ROOT_PORTS
];

82 
uöt32_t
 
	m‹_sy°u√
;

83 } 
__©åibuã__
 ((
∑cked
));

85 
	#USBMODE
 0x68

	)

86 
	#USBMODE_SDIS
 (1 << 3Ë

	)

87 
	#USBMODE_BE
 (1 << 2Ë

	)

88 
	#USBMODE_CM_HC
 (3 << 0Ë

	)

89 
	#USBMODE_CM_IDLE
 (0 << 0Ë

	)

92 
	susb_löux_öãrÁ˚_des¸ùt‹
 {

93 
	mbLígth
;

94 
	mbDes¸ùt‹Ty≥
;

95 
	mbI¡îÁ˚Numbî
;

96 
	mbA…î«ãSëtög
;

97 
	mbNumEndpoöts
;

98 
	mbI¡îÁ˚Cœss
;

99 
	mbI¡îÁ˚SubCœss
;

100 
	mbI¡îÁ˚PrŸocﬁ
;

101 
	miI¡îÁ˚
;

102 } 
__©åibuã__
 ((
∑cked
));

105 
	susb_löux_c⁄fig_des¸ùt‹
 {

106 
	mbLígth
;

107 
	mbDes¸ùt‹Ty≥
;

108 
	mwTŸÆLígth
;

109 
	mbNumI¡îÁ˚s
;

110 
	mbC⁄figuøti⁄VÆue
;

111 
	miC⁄figuøti⁄
;

112 
	mbmAâribuãs
;

113 
	mMaxPowî
;

114 } 
__©åibuã__
 ((
∑cked
));

116 #i‡
deföed
 
CONFIG_EHCI_DESC_BIG_ENDIAN


117 
	#ehci_ªadl
(
x
Ë(*((vﬁ©ûê
u32
 *)(x)))

	)

118 
	#ehci_wrôñ
(
a
, 
b
Ë(*((vﬁ©ûê
u32
 *)◊)Ë((vﬁ©ûêu32)b))

	)

120 
	#ehci_ªadl
(
x
Ë
	`˝u_to_À32
((*((vﬁ©ûê
u32
 *)(x))))

	)

121 
	#ehci_wrôñ
(
a
, 
b
Ë(*((vﬁ©ûê
u32
 *)(a)) = \

122 
	`˝u_to_À32
(((vﬁ©ûê
u32
)
b
)))

	)

125 #i‡
deföed
 
CONFIG_EHCI_MMIO_BIG_ENDIAN


126 
	#hc32_to_˝u
(
x
Ë
	`be32_to_˝u
((x))

	)

127 
	#˝u_to_hc32
(
x
Ë
	`˝u_to_be32
((x))

	)

129 
	#hc32_to_˝u
(
x
Ë
	`À32_to_˝u
((x))

	)

130 
	#˝u_to_hc32
(
x
Ë
	`˝u_to_À32
((x))

	)

133 
	#EHCI_PS_WKOC_E
 (1 << 22Ë

	)

134 
	#EHCI_PS_WKDSCNNT_E
 (1 << 21Ë

	)

135 
	#EHCI_PS_WKCNNT_E
 (1 << 20Ë

	)

136 
	#EHCI_PS_PO
 (1 << 13Ë

	)

137 
	#EHCI_PS_PP
 (1 << 12Ë

	)

138 
	#EHCI_PS_LS
 (3 << 10Ë

	)

139 
	#EHCI_PS_PR
 (1 << 8Ë

	)

140 
	#EHCI_PS_SUSP
 (1 << 7Ë

	)

141 
	#EHCI_PS_FPR
 (1 << 6Ë

	)

142 
	#EHCI_PS_OCC
 (1 << 5Ë

	)

143 
	#EHCI_PS_OCA
 (1 << 4Ë

	)

144 
	#EHCI_PS_PEC
 (1 << 3Ë

	)

145 
	#EHCI_PS_PE
 (1 << 2Ë

	)

146 
	#EHCI_PS_CSC
 (1 << 1Ë

	)

147 
	#EHCI_PS_CS
 (1 << 0Ë

	)

148 
	#EHCI_PS_CLEAR
 (
EHCI_PS_OCC
 | 
EHCI_PS_PEC
 | 
EHCI_PS_CSC
)

	)

150 
	#EHCI_PS_IS_LOWSPEED
(
x
Ë(((xË& 
EHCI_PS_LS
Ë=(1 << 10))

	)

163 
	sqTD
 {

164 
uöt32_t
 
	mqt_√xt
;

165 
	#QT_NEXT_TERMINATE
 1

	)

166 
uöt32_t
 
	mqt_Æäext
;

167 
uöt32_t
 
	mqt_tokí
;

168 
uöt32_t
 
	mqt_buf„r
[5];

172 
	sQH
 {

173 
uöt32_t
 
	mqh_lök
;

174 
	#QH_LINK_TERMINATE
 1

	)

175 
	#QH_LINK_TYPE_ITD
 0

	)

176 
	#QH_LINK_TYPE_QH
 2

	)

177 
	#QH_LINK_TYPE_SITD
 4

	)

178 
	#QH_LINK_TYPE_FSTN
 6

	)

179 
uöt32_t
 
	mqh_íd±1
;

180 
uöt32_t
 
	mqh_íd±2
;

181 
uöt32_t
 
	mqh_cuπd
;

182 
qTD
 
	mqh_ovîœy
;

187 
uöt8_t
 
	mfûl
[16];

191 
ehci_hcd_öô
();

192 
ehci_hcd_°›
();

194 
	#mdñay
(
n
Ë({
m£c
=“); m£c--Ë
	`udñay
(1000);})

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/i2c_drv.c

21 
	~<comm⁄.h
>

22 
	~<comm™d.h
>

23 
	~<π_mm≠.h
>

25 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_I2C
)

27 #i‡
deföed
 (
RT6855A_ASIC_BOARD
Ë|| deföed (
RT6855A_FPGA_BOARD
)

28 
	#BBU_I2C


	)

30 
	#RT2880_I2C_DEVADDR_STR
 "devaddr"

	)

31 
	#RT2880_I2C_DUMP_STR
 "dump"

	)

32 
	#RT2880_I2C_READ_STR
 "ªad"

	)

33 
	#RT2880_I2C_WRITE_STR
 "wrôe"

	)

35 
	#RT2880_I2C_DUMP
 2

	)

36 
	#RT2880_I2C_READ
 3

	)

37 
	#RT2880_I2C_DEVADDR
 4

	)

38 
	#RT2880_I2C_WRITE
 5

	)

44 
	#RT2880_REG
(
x
Ë(*((vﬁ©ûê
u32
 *)(x)))

	)

46 
	#RT2880_I2C_CONFIG_REG
 (
RALINK_I2C_BASE
+0x00)

	)

47 
	#RT2880_I2C_CLKDIV_REG
 (
RALINK_I2C_BASE
+0x04)

	)

48 
	#RT2880_I2C_DEVADDR_REG
 (
RALINK_I2C_BASE
+0x08)

	)

49 
	#RT2880_I2C_ADDR_REG
 (
RALINK_I2C_BASE
+0x0C)

	)

50 
	#RT2880_I2C_DATAOUT_REG
 (
RALINK_I2C_BASE
+0x10)

	)

51 
	#RT2880_I2C_DATAIN_REG
 (
RALINK_I2C_BASE
+0x14)

	)

52 
	#RT2880_I2C_STATUS_REG
 (
RALINK_I2C_BASE
+0x18)

	)

53 
	#RT2880_I2C_STARTXFR_REG
 (
RALINK_I2C_BASE
+0x1C)

	)

54 
	#RT2880_I2C_BYTECNT_REG
 (
RALINK_I2C_BASE
+0x20)

	)

55 
	#RT2880_I2C_SM0_IS_AUTOMODE
 (
RALINK_I2C_BASE
+0x28)

	)

56 
	#RT2880_I2C_SM0CTL0
 (
RALINK_I2C_BASE
+0x40)

	)

59 
	#I2C_CFG_ADDRLEN_8
 (7<<5Ë

	)

60 
	#I2C_CFG_DEVADLEN_7
 (6<<2Ë

	)

61 
	#I2C_CFG_ADDRDIS
 (1<<1Ë

	)

62 
	#I2C_CFG_DEVADDIS
 (1<<0Ë

	)

65 
	#IS_BUSY
 (
	`RT2880_REG
(
RT2880_I2C_STATUS_REG
Ë& 0x01)

	)

66 
	#IS_SDOEMPTY
 (
	`RT2880_REG
(
RT2880_I2C_STATUS_REG
Ë& 0x02)

	)

67 
	#IS_DATARDY
 (
	`RT2880_REG
(
RT2880_I2C_STATUS_REG
Ë& 0x04)

	)

73 
	#CLKDIV_VALUE
 333

	)

75 
	#i2c_busy_lo›
 (
CLKDIV_VALUE
*30)

	)

76 
	#max_ì_busy_lo›
 (
CLKDIV_VALUE
*25)

	)

85 #i‡
deföed
 (
MT7621_FPGA_BOARD
)

89 
	#CONFIG_EEPROM_ADDRESS_BYTES
 1

	)

92 #i‡(
CONFIG_EEPROM_ADDRESS_BYTES
 == 2)

93 
	#ADDRESS_BYTES
 2

	)

95 
	#ADDRESS_BYTES
 1

	)

103 
	#READ_BLOCK
 16

	)

108 
	#WRITE_BLOCK
 8

	)

117 
	#READ_CMD
 0x01

	)

118 
	#WRITE_CMD
 0x00

	)

121 
	#I2C_CFG_DEFAULT
 (
I2C_CFG_ADDRLEN_8
 | \

122 
I2C_CFG_DEVADLEN_7
 | \

123 
I2C_CFG_ADDRDIS
)

	)

135 
i2c_wrôe
(
u32
 
addªss
, 
u8
 *
d©a
, u32 
nbyãs
);

136 
i2c_ªad
(
u8
 *
d©a
, 
u32
 
nbyãs
);

138 
i2c_ma°î_öô
();

144 
u32
 
	gi2c_devaddr
 = 0x50;

157 
	$i2c_ma°î_öô
()

159 #i‚de‡
BBU_I2C


161 
u32
 
vÆ
 = 
	`RT2880_REG
(
RT2880_RSTCTRL_REG
);

162 
vÆ
 = vÆ | 
RALINK_I2C_RST
;

163 
	`RT2880_REG
(
RT2880_RSTCTRL_REG
Ë
vÆ
;

165 
vÆ
 = vÆ & ~(
RALINK_I2C_RST
);

166 
	`RT2880_REG
(
RT2880_RSTCTRL_REG
Ë
vÆ
;

167 
	`udñay
(500);

170 
	`RT2880_REG
(
RT2880_I2C_CONFIG_REG
Ë
I2C_CFG_DEFAULT
;

172 #i‡
	`deföed
 (
MT7621_ASIC_BOARD
Ë|| deföed (
MT7621_FPGA_BOARD
)

173 
vÆ
 = 1 << 31;

174 
vÆ
 |= 1 << 28;

175 
vÆ
 |
CLKDIV_VALUE
 << 16;

176 
vÆ
 |= 1 << 6;

177 
vÆ
 |= 1 << 1;

178 
	`RT2880_REG
(
RT2880_I2C_SM0CTL0
Ë
vÆ
;

180 
	`RT2880_REG
(
RT2880_I2C_SM0_IS_AUTOMODE
) = 1;

182 
	`RT2880_REG
(
RT2880_I2C_CLKDIV_REG
Ë
CLKDIV_VALUE
;

203 
	`RT2880_REG
(
RT2880_I2C_DEVADDR_REG
Ë
i2c_devaddr
;

210 
	`RT2880_REG
(
RT2880_I2C_ADDR_REG
) = 0;

211 
	}
}

224 
	$i2c_wrôe
(
u32
 
addªss
, 
u8
 *
d©a
, u32 
nbyãs
)

226 
i
, 
j
;

227 
u32
 
n
;

230 
n
 = 
nbyãs
 + 
ADDRESS_BYTES
;

231 
	`RT2880_REG
(
RT2880_I2C_BYTECNT_REG
Ë
n
-1;

232 i‡(
ADDRESS_BYTES
 == 2)

233 
	`RT2880_REG
(
RT2880_I2C_DATAOUT_REG
Ë(
addªss
 >> 8) & 0xFF;

235 
	`RT2880_REG
(
RT2880_I2C_DATAOUT_REG
Ë
addªss
 & 0xFF;

237 
	`RT2880_REG
(
RT2880_I2C_STARTXFR_REG
Ë
WRITE_CMD
;

238 
i
=0; i<
n
-1; i++) {

239 
j
 = 0;

241 i‡(
IS_SDOEMPTY
) {

242 i‡(
ADDRESS_BYTES
 == 2) {

243 i‡(
i
==0) {

244 
	`RT2880_REG
(
RT2880_I2C_DATAOUT_REG
Ë
addªss
 & 0xFF;

246 
	`RT2880_REG
(
RT2880_I2C_DATAOUT_REG
Ë
d©a
[
i
-1];

249 
	`RT2880_REG
(
RT2880_I2C_DATAOUT_REG
Ë
d©a
[
i
];

253 } ++
j
<
max_ì_busy_lo›
);

256 
i
 = 0;

257 
IS_BUSY
 && 
i
<
i2c_busy_lo›
){

258 
i
++;

260 
	}
}

271 
	$i2c_ªad
(
u8
 *
d©a
, 
u32
 
nbyãs
)

273 
i
, 
j
;

275 
	`RT2880_REG
(
RT2880_I2C_BYTECNT_REG
Ë
nbyãs
-1;

276 
	`RT2880_REG
(
RT2880_I2C_STARTXFR_REG
Ë
READ_CMD
;

277 
i
=0; i<
nbyãs
; i++) {

278 
j
 = 0;

280 i‡(
IS_DATARDY
) {

281 
d©a
[
i
] = 
	`RT2880_REG
(
RT2880_I2C_DATAIN_REG
);

284 } ++
j
<
max_ì_busy_lo›
);

287 
i
 = 0;

288 
IS_BUSY
 && 
i
<
i2c_busy_lo›
){

289 
i
++;

291 
	}
}

292 
ölöe
 
	$øndom_ªad_block
(
u32
 
addªss
, 
u8
 *
d©a
)

295 i‡(
ADDRESS_BYTES
 == 1) {

296 
∑ge
;

298 
∑ge
 = ((
addªss
 >> 8) & 0x7) << 1;

300 
	`RT2880_REG
(
RT2880_I2C_DEVADDR_REG
Ë(
i2c_devaddr
 | (
∑ge
 >> 1));

304 
	`i2c_wrôe
(
addªss
, 
d©a
, 0);

305 
	`i2c_ªad
(
d©a
, 
READ_BLOCK
);

306 
	}
}

308 
ölöe
 
u8
 
	$øndom_ªad_⁄e_byã
(
u32
 
addªss
)

310 
u8
 
d©a
;

313 i‡(
ADDRESS_BYTES
 == 1) {

314 
∑ge
;

316 
∑ge
 = ((
addªss
 >> 8) & 0x7) << 1;

318 
	`RT2880_REG
(
RT2880_I2C_DEVADDR_REG
Ë(
i2c_devaddr
 | (
∑ge
 >> 1));

322 
	`i2c_wrôe
(
addªss
, &
d©a
, 0);

323 
	`i2c_ªad
(&
d©a
, 1);

324  (
d©a
);

325 
	}
}

327 
	$i2c_ì¥om_ªad
(
u32
 
addªss
, 
u8
 *
d©a
, u32 
nbyãs
)

329 
i
;

330 
nblock
 = 
nbyãs
 / 
READ_BLOCK
;

331 
ªm
 = 
nbyãs
 % 
READ_BLOCK
;

333 
i
=0; i<
nblock
; i++) {

334 
	`øndom_ªad_block
(
addªss
+
i
*
READ_BLOCK
, &
d©a
[i*READ_BLOCK]);

337 i‡(
ªm
) {

338 
off£t
 = 
nblock
*
READ_BLOCK
;

339 
i
=0; i<
ªm
; i++) {

340 
d©a
[
off£t
+
i
] = 
	`øndom_ªad_⁄e_byã
(
addªss
+offset+i);

343 
	}
}

346 
	$i2c_ì¥om_ªad_⁄e
(
u32
 
addªss
, 
u8
 *
d©a
, u32 
nbyãs
)

348 
i
;

350 
i
=0; i<
nbyãs
; i++) {

351 
d©a
[
i
] = 
	`øndom_ªad_⁄e_byã
(
addªss
+i);

353 
	}
}

357 
ölöe
 
	$øndom_wrôe_block
(
u32
 
addªss
, 
u8
 *
d©a
)

360 i‡(
ADDRESS_BYTES
 == 1) {

361 
∑ge
;

363 
∑ge
 = ((
addªss
 >> 8) & 0x7) << 1;

365 
	`RT2880_REG
(
RT2880_I2C_DEVADDR_REG
Ë(
i2c_devaddr
 | (
∑ge
 >> 1));

369 
	`i2c_wrôe
(
addªss
, 
d©a
, 
WRITE_BLOCK
);

370 
	`udñay
(5000);

371 
	}
}

373 
ölöe
 
	$øndom_wrôe_⁄e_byã
(
u32
 
addªss
, 
u8
 *
d©a
)

376 i‡(
ADDRESS_BYTES
 == 1) {

377 
∑ge
;

379 
∑ge
 = ((
addªss
 >> 8) & 0x7) << 1;

381 
	`RT2880_REG
(
RT2880_I2C_DEVADDR_REG
Ë(
i2c_devaddr
 | (
∑ge
 >> 1));

384 
	`i2c_wrôe
(
addªss
, 
d©a
, 1);

385 
	`udñay
(5000);

386 
	}
}

388 
	$i2c_ì¥om_wrôe
(
u32
 
addªss
, 
u8
 *
d©a
, u32 
nbyãs
)

390 
i
;

391 
nblock
 = 
nbyãs
 / 
WRITE_BLOCK
;

392 
ªm
 = 
nbyãs
 % 
WRITE_BLOCK
;

394 
i
=0; i<
nblock
; i++) {

395 
	`øndom_wrôe_block
(
addªss
+
i
*
WRITE_BLOCK
, &
d©a
[i*WRITE_BLOCK]);

398 i‡(
ªm
) {

399 
off£t
 = 
nblock
*
WRITE_BLOCK
;

401 
i
=0; i<
ªm
; i++) {

402 
	`øndom_wrôe_⁄e_byã
(
addªss
+
off£t
+
i
, &
d©a
[offset+i]);

405 
	}
}

409 
	$i2c_ªad_c⁄fig
(*
d©a
, 
Àn
)

411 
	`i2c_ma°î_öô
();

412 
	`i2c_ì¥om_ªad
(0, 
d©a
, 
Àn
);

413 
	}
}

415 
	$i2c_ì¥om_dump
()

417 
u32
 
a
;

418 
u8
 
v
;

420 
	`i2c_ma°î_öô
();

421 
a
 = 0;á < 128;á++) {

422 i‡(
a
 % 16 == 0)

423 
	`¥ötf
("%4x : ", 
a
);

424 
v
 = 
	`øndom_ªad_⁄e_byã
(
a
);

425 
	`¥ötf
("%02x ", 
v
);

426 i‡(
a
 % 16 == 15)

427 
	`¥ötf
("\n");

429 
	}
}

431 
	$π2880_i2c_toﬁkô
(
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

433 
chk_m©ch
, 
size
;

434 
ul⁄g
 
addr
, 
vÆue
;

435 
u16
 
addªss
;

437 #i‚de‡
BBU_I2C


439 #i‡
	`deföed
 (
MT7621_FPGA_BOARD
Ë|| deföed (
MT7621_ASIC_BOARD
)

440 
	`RT2880_REG
(
RT2880_GPIOMODE_REG
) &= ~(1 << 2);

441 #ñi‡
	`deföed
 (
MT7628_FPGA_BOARD
Ë|| deföed (
MT7628_ASIC_BOARD
)

442 
	`RT2880_REG
(
RT2880_GPIOMODE_REG
) &= ~(1 << 16);

444 
	`RT2880_REG
(
RT2880_GPIOMODE_REG
) &= ~1;

448 
¨gc
) {

449 
RT2880_I2C_DUMP
:

450 
chk_m©ch
 = 
	`°rcmp
(
¨gv
[1], 
RT2880_I2C_DUMP_STR
);

451 i‡(
chk_m©ch
 != 0) {

452 
	`¥ötf
("Ußge:\n%s\n", 
cmdç
->
ußge
);

455 
	`i2c_ì¥om_dump
();

457 
RT2880_I2C_READ
:

458 
chk_m©ch
 = 
	`°rcmp
(
¨gv
[1], 
RT2880_I2C_READ_STR
);

459 i‡(
chk_m©ch
 != 0) {

460 
	`¥ötf
("Ußge:\n%s\n", 
cmdç
->
ußge
);

463 
addr
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

464 
addªss
 = 
addr
;

465 
	`i2c_ma°î_öô
();

466 
	`i2c_ì¥om_ªad
(
addr
, (
u8
*)&
vÆue
, 4);

467 
	`¥ötf
("0x%04x : 0x%04x\n", 
addªss
, 
vÆue
);

469 
RT2880_I2C_WRITE
:

470 
chk_m©ch
 = 
	`°rcmp
(
¨gv
[1], 
RT2880_I2C_WRITE_STR
);

471 i‡(
chk_m©ch
 != 0) {

472 
	`¥ötf
("Ußge:\n%s\n", 
cmdç
->
ußge
);

475 
size
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

476 
addr
 = 
	`sim∂e_°πoul
(
¨gv
[3], 
NULL
, 16);

477 
vÆue
 = 
	`sim∂e_°πoul
(
¨gv
[4], 
NULL
, 16);

478 
	`i2c_ma°î_öô
();

479 
addªss
 = 
addr
;

480 
	`i2c_ì¥om_wrôe
(
addªss
, (
u8
*)&
vÆue
, 
size
);

481 
	`¥ötf
("0x%08x: 0x%08x i¿%d byãs\n", 
addªss
, 
vÆue
, 
size
);

483 
RT2880_I2C_DEVADDR
:

484 
chk_m©ch
 = 
	`°rcmp
(
¨gv
[2], 
RT2880_I2C_DEVADDR_STR
);

485 i‡(
chk_m©ch
 != 0) {

486 
	`¥ötf
("Ußge:\n%s\n", 
cmdç
->
ußge
);

489 
i2c_devaddr
 = 
	`sim∂e_°πoul
(
¨gv
[3], 
NULL
, 16);

492 
	`¥ötf
("Ußge:\n%s\¿u£ \"hñ∞i2ccmd\"Åÿgë m‹êdëaû!\n", 
cmdç
->
ußge
);

495 
	}
}

497 
U_BOOT_CMD
(

498 
i2ccmd
, 5, 1, 
π2880_i2c_toﬁkô
,

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/mii_mgr.c

1 
	~<comm⁄.h
>

2 
	~<comm™d.h
>

3 
	~<π_mm≠.h
>

4 
	~<c⁄figs/π2880.h
>

7 
	#outw
(
addªss
, 
vÆue
Ë*((vﬁ©ûê
uöt32_t
 *)◊ddªss)Ë
	`˝u_to_À32
(vÆue)

	)

8 
	#öw
(
addªss
Ë
	`À32_to_˝u
(*(vﬁ©ûê
u32
 *)◊ddªss))

	)

10 #i‡
deföed
 (
RT3052_FPGA_BOARD
Ë|| deföed (
RT3052_ASIC_BOARD
) || \

11 
deföed
 (
RT3352_FPGA_BOARD
Ë|| deföed (
RT3352_ASIC_BOARD
) || \

12 
deföed
 (
RT5350_FPGA_BOARD
Ë|| deföed (
RT5350_ASIC_BOARD
) || \

13 
deföed
 (
MT7628_FPGA_BOARD
Ë|| 
	$deföed
 (
MT7628_ASIC_BOARD
)

14 
	#PHY_CONTROL_0
 0xC0

	)

15 
	#PHY_CONTROL_1
 0xC4

	)

16 
	#MDIO_PHY_CONTROL_0
 (
RALINK_ETH_SW_BASE
 + 
PHY_CONTROL_0
)

	)

17 
	#MDIO_PHY_CONTROL_1
 (
RALINK_ETH_SW_BASE
 + 
PHY_CONTROL_1
)

	)

19 
	#GPIO_MDIO_BIT
 (1<<7)

	)

20 
	#GPIO_PURPOSE_SELECT
 0x60

	)

21 
	#GPIO_PRUPOSE
 (
RALINK_SYSCTL_BASE
 + 
GPIO_PURPOSE_SELECT
)

	)

23 #ñi‡
	`deföed
 (
RT6855_FPGA_BOARD
Ë|| deföed (
RT6855_ASIC_BOARD
) || \

24 
	`deföed
 (
RT6855A_FPGA_BOARD
Ë|| 
	$deföed
 (
RT6855A_ASIC_BOARD
)

25 
	#PHY_CONTROL_0
 0x7004

	)

26 
	#PHY_CONTROL_1
 0x7000

	)

27 
	#MDIO_PHY_CONTROL_0
 (
RALINK_ETH_SW_BASE
 + 
PHY_CONTROL_0
)

	)

28 
	#MDIO_PHY_CONTROL_1
 (
RALINK_ETH_SW_BASE
 + 
PHY_CONTROL_1
)

	)

30 
	#GPIO_MDIO_BIT
 (1<<7)

	)

31 
	#GPIO_PURPOSE_SELECT
 0x60

	)

32 
	#GPIO_PRUPOSE
 (
RALINK_SYSCTL_BASE
 + 
GPIO_PURPOSE_SELECT
)

	)

34 #ñi‡
	`deföed
 (
MT7620_FPGA_BOARD
Ë|| deföed (
MT7620_ASIC_BOARD
)

35 
	#PHY_CONTROL_0
 0x7004

	)

36 
	#PHY_CONTROL_1
 0x7000

	)

37 
	#MDIO_PHY_CONTROL_0
 (
RALINK_ETH_SW_BASE
 + 
PHY_CONTROL_0
)

	)

38 
	#MDIO_PHY_CONTROL_1
 (
RALINK_ETH_SW_BASE
 + 
PHY_CONTROL_1
)

	)

40 
	#GPIO_MDIO_BIT
 (2<<7)

	)

41 
	#GPIO_PURPOSE_SELECT
 0x60

	)

42 
	#GPIO_PRUPOSE
 (
RALINK_SYSCTL_BASE
 + 
GPIO_PURPOSE_SELECT
)

	)

44 #ñi‡
	`deföed
 (
MT7621_FPGA_BOARD
Ë|| deföed (
MT7621_ASIC_BOARD
)

45 
	#PHY_CONTROL_0
 0x0004

	)

46 
	#PHY_CONTROL_1
 0x0000

	)

47 
	#MDIO_PHY_CONTROL_0
 (
RALINK_ETH_SW_BASE
 + 
PHY_CONTROL_0
)

	)

48 
	#MDIO_PHY_CONTROL_1
 (
RALINK_ETH_SW_BASE
 + 
PHY_CONTROL_1
)

	)

49 
	#íabÀ_mdio
(
x
)

	)

50 
	#GPIO_MDIO_BIT
 (1<<12)

	)

51 
	#GPIO_PURPOSE_SELECT
 0x60

	)

52 
	#GPIO_PRUPOSE
 (
RALINK_SYSCTL_BASE
 + 
GPIO_PURPOSE_SELECT
)

	)

55 
	#PHY_CONTROL_0
 0x00

	)

56 
	#PHY_CONTROL_1
 0x04

	)

57 
	#MDIO_PHY_CONTROL_0
 (
RALINK_FRAME_ENGINE_BASE
 + 
PHY_CONTROL_0
)

	)

58 
	#MDIO_PHY_CONTROL_1
 (
RALINK_FRAME_ENGINE_BASE
 + 
PHY_CONTROL_1
)

	)

59 
	#íabÀ_mdio
(
x
)

	)

62 #i‡
	`deföed
 (
RT3052_FPGA_BOARD
Ë|| deföed (
RT3052_ASIC_BOARD
) || \

63 
	`deföed
 (
RT3352_FPGA_BOARD
Ë|| deföed (
RT3352_ASIC_BOARD
) || \

64 
	`deföed
 (
RT5350_FPGA_BOARD
Ë|| deföed (
RT5350_ASIC_BOARD
) || \

65 
	`deföed
 (
RT6855_FPGA_BOARD
Ë|| deföed (
RT6855_ASIC_BOARD
) || \

66 
	`deföed
 (
MT7620_FPGA_BOARD
Ë|| deföed (
MT7620_ASIC_BOARD
) || \

67 
	`deföed
 (
MT7628_FPGA_BOARD
Ë|| 
	$deföed
 (
MT7628_ASIC_BOARD
)

68 
	$íabÀ_mdio
(
íabÀ
)

70 #i‡!
	`deföed
 (
P5_MAC_TO_PHY_MODE
Ë&& !deföed (
GE_RGMII_AN
Ë&& !deföed(
GE_MII_AN
Ë&& !deföed(
MT7628_FPGA_BOARD
Ë&& !deföed(
MT7628_ASIC_BOARD
)

71 
u32
 
d©a
 = 
	`öw
(
GPIO_PRUPOSE
);

72 if(
íabÀ
)

73 
d©a
 &~
GPIO_MDIO_BIT
;

75 
d©a
 |
GPIO_MDIO_BIT
;

76 
	`outw
(
GPIO_PRUPOSE
, 
d©a
);

78 
	}
}

81 #i‡
deföed
 (
RT6855A_FPGA_BOARD
Ë|| deföed (
RT6855A_ASIC_BOARD
)

82 
	#íabÀ_mdio
(
x
)

	)

85 #i‡
deföed
 (
RT6855_FPGA_BOARD
Ë|| deföed (
RT6855_ASIC_BOARD
) || \

86 
deföed
 (
RT6855A_FPGA_BOARD
Ë|| deföed (
RT6855A_ASIC_BOARD
) || \

87 
	$deföed
 (
MT7620_FPGA_BOARD
)

88 
u32
 
	$mii_mgr_ªad
(
u32
 
phy_addr
, u32 
phy_ªgi°î
, u32 *
ªad_d©a
)

90 
u32
 vﬁ©ûê
°©us
 = 0;

91 
u32
 vﬁ©ûê
d©a
 = 0;

92 
u32
 
rc
 = 0;

93 vﬁ©ûê
t_°¨t
 = 
	`gë_timî
(0);

96 
	`íabÀ_mdio
(1);

103 if(!–
	`öw
(
MDIO_PHY_CONTROL_0
) & (0x1 << 31)))

106 }if(
	`gë_timî
(
t_°¨t
Ë> (5 * 
CFG_HZ
)){

107 
	`íabÀ_mdio
(0);

108 
	`¥ötf
("\n MDIO Read operation is ongoing !!\n");

109  
rc
;

113 
d©a
 = (0x01 << 16Ë| (0x02 << 18Ë| (
phy_addr
 << 20Ë| (
phy_ªgi°î
 << 25);

114 
	`outw
(
MDIO_PHY_CONTROL_0
, 
d©a
);

115 
d©a
 |= (1<<31);

116 
	`outw
(
MDIO_PHY_CONTROL_0
, 
d©a
);

121 
t_°¨t
 = 
	`gë_timî
(0);

124 if(!–
	`öw
(
MDIO_PHY_CONTROL_0
) & (0x1 << 31)))

126 
°©us
 = 
	`öw
(
MDIO_PHY_CONTROL_0
);

127 *
ªad_d©a
 = (
u32
)(
°©us
 & 0x0000FFFF);

130 
	`íabÀ_mdio
(0);

133 if(
	`gë_timî
(
t_°¨t
Ë> (5 * 
CFG_HZ
))

135 
	`íabÀ_mdio
(0);

136 
	`¥ötf
("\n MDIO Read operation is ongoingánd Time Out!!\n");

140 
	}
}

143 
u32
 
	$mii_mgr_wrôe
(
u32
 
phy_addr
, u32 
phy_ªgi°î
, u32 
wrôe_d©a
)

145 vﬁ©ûê
t_°¨t
=
	`gë_timî
(0);

146 
u32
 vﬁ©ûê
d©a
;

148 
	`íabÀ_mdio
(1);

153 i‡(!–
	`öw
(
MDIO_PHY_CONTROL_0
) & (0x1 << 31)))

157 if(
	`gë_timî
(
t_°¨t
Ë> (5 * 
CFG_HZ
))

159 
	`íabÀ_mdio
(0);

160 
	`¥ötf
("\n MDIO Write operation is ongoing !!\n");

165 
d©a
 = (0x01 << 16Ë| (1<<18Ë| (
phy_addr
 << 20Ë| (
phy_ªgi°î
 << 25Ë| 
wrôe_d©a
;

166 
	`outw
(
MDIO_PHY_CONTROL_0
, 
d©a
);

167 
d©a
 |= (1<<31);

168 
	`outw
(
MDIO_PHY_CONTROL_0
, 
d©a
);

171 
t_°¨t
 = 
	`gë_timî
(0);

176 if(!–
	`öw
(
MDIO_PHY_CONTROL_0
) & (0x1 << 31)))

178 
	`íabÀ_mdio
(0);

181 if(
	`gë_timî
(
t_°¨t
Ë> (5 * 
CFG_HZ
))

183 
	`íabÀ_mdio
(0);

184 
	`¥ötf
("\n MDIO Write operation is ongoingánd Time Out!!\n");

188 
	}
}

189 #ñi‡
deföed
 (
MT7621_FPGA_BOARD
Ë|| deföed (
MT7621_ASIC_BOARD
Ë|| deföed (
MT7620_ASIC_BOARD
)

190 
u32
 
	$__mii_mgr_ªad
(
u32
 
phy_addr
, u32 
phy_ªgi°î
, u32 *
ªad_d©a
)

192 
u32
 vﬁ©ûê
°©us
 = 0;

193 
u32
 vﬁ©ûê
d©a
 = 0;

194 
u32
 
rc
 = 0;

195 vﬁ©ûê
t_°¨t
 = 
	`gë_timî
(0);

202 if(!–
	`öw
(
MDIO_PHY_CONTROL_0
) & (0x1 << 31)))

205 }if(
	`gë_timî
(
t_°¨t
Ë> (5 * 
CFG_HZ
)){

206 
	`¥ötf
("\n MDIO Read operation is ongoing !!\n");

207  
rc
;

211 
d©a
 = (0x01 << 16Ë| (0x02 << 18Ë| (
phy_addr
 << 20Ë| (
phy_ªgi°î
 << 25);

212 
	`outw
(
MDIO_PHY_CONTROL_0
, 
d©a
);

213 
d©a
 |= (1<<31);

214 
	`outw
(
MDIO_PHY_CONTROL_0
, 
d©a
);

219 
t_°¨t
 = 
	`gë_timî
(0);

222 if(!–
	`öw
(
MDIO_PHY_CONTROL_0
) & (0x1 << 31)))

224 
°©us
 = 
	`öw
(
MDIO_PHY_CONTROL_0
);

225 *
ªad_d©a
 = (
u32
)(
°©us
 & 0x0000FFFF);

230 if(
	`gë_timî
(
t_°¨t
Ë> (5 * 
CFG_HZ
))

232 
	`¥ötf
("\n MDIO Read operation is ongoingánd Time Out!!\n");

236 
	}
}

238 
u32
 
	$__mii_mgr_wrôe
(
u32
 
phy_addr
, u32 
phy_ªgi°î
, u32 
wrôe_d©a
)

240 vﬁ©ûê
t_°¨t
=
	`gë_timî
(0);

241 
u32
 vﬁ©ûê
d©a
;

246 i‡(!–
	`öw
(
MDIO_PHY_CONTROL_0
) & (0x1 << 31)))

250 if(
	`gë_timî
(
t_°¨t
Ë> (5 * 
CFG_HZ
))

252 
	`¥ötf
("\n MDIO Write operation is ongoing !!\n");

256 
	`udñay
(1);

258 
d©a
 = (0x01 << 16Ë| (1<<18Ë| (
phy_addr
 << 20Ë| (
phy_ªgi°î
 << 25Ë| 
wrôe_d©a
;

259 
	`outw
(
MDIO_PHY_CONTROL_0
, 
d©a
);

260 
d©a
 |= (1<<31);

261 
	`outw
(
MDIO_PHY_CONTROL_0
, 
d©a
);

264 
t_°¨t
 = 
	`gë_timî
(0);

269 if(!–
	`öw
(
MDIO_PHY_CONTROL_0
) & (0x1 << 31)))

273 if(
	`gë_timî
(
t_°¨t
Ë> (5 * 
CFG_HZ
))

275 
	`¥ötf
("\n MDIO Write operation is ongoingánd Time Out!!\n");

279 
	}
}

281 
u32
 
	$mii_mgr_ªad
(
u32
 
phy_addr
, u32 
phy_ªgi°î
, u32 *
ªad_d©a
)

283 
u32
 
low_w‹d
;

284 
u32
 
high_w‹d
;

286 if(
phy_addr
==31) {

288 if(
	`__mii_mgr_wrôe
(
phy_addr
, 0x1f, ((
phy_ªgi°î
 >> 6) & 0x3FF))) {

290 if(
	`__mii_mgr_ªad
(
phy_addr
, (
phy_ªgi°î
 >> 2Ë& 0xF, &
low_w‹d
)) {

292 if(
	`__mii_mgr_ªad
(
phy_addr
, (0x1 << 4), &
high_w‹d
)) {

293 *
ªad_d©a
 = (
high_w‹d
 << 16Ë| (
low_w‹d
 & 0xFFFF);

300 if(
	`__mii_mgr_ªad
(
phy_addr
, 
phy_ªgi°î
, 
ªad_d©a
)) {

307 
	}
}

309 
u32
 
	$mii_mgr_wrôe
(
u32
 
phy_addr
, u32 
phy_ªgi°î
, u32 
wrôe_d©a
)

312 if(
phy_addr
 == 31) {

314 if(
	`__mii_mgr_wrôe
(
phy_addr
, 0x1f, (
phy_ªgi°î
 >> 6) & 0x3FF)) {

316 if(
	`__mii_mgr_wrôe
(
phy_addr
, ((
phy_ªgi°î
 >> 2Ë& 0xF), 
wrôe_d©a
 & 0xFFFF)) {

318 if(
	`__mii_mgr_wrôe
(
phy_addr
, (0x1 << 4), 
wrôe_d©a
 >> 16)) {

324 if(
	`__mii_mgr_wrôe
(
phy_addr
, 
phy_ªgi°î
, 
wrôe_d©a
)) {

330 
	}
}

332 #ñi‡
deföed
 (
RT3883_ASIC_BOARD
Ë&& deföed (
MAC_TO_MT7530_MODE
)

335 
u32
 
	$__mii_mgr_ªad
(
u32
 
phy_addr
, u32 
phy_ªgi°î
, u32 *
ªad_d©a
)

337 
u32
 vﬁ©ûê
°©us
 = 0;

338 
u32
 vﬁ©ûê
d©a
 = 0;

339 
u32
 
rc
 = 0;

340 vﬁ©ûê
t_°¨t
 = 
	`gë_timî
(0);

343 
	`íabÀ_mdio
(1);

349 if(!–
	`öw
(
MDIO_PHY_CONTROL_0
) & (0x1 << 31)))

352 }if(
	`gë_timî
(
t_°¨t
Ë> (5 * 
CFG_HZ
)){

353 
	`íabÀ_mdio
(0);

354 
	`¥ötf
("\n MDIO Read operation is ongoing !!\n");

355  
rc
;

358 
d©a
 = (
phy_addr
 << 24Ë| (
phy_ªgi°î
 << 16);

359 
	`outw
(
MDIO_PHY_CONTROL_0
, 
d©a
);

360 
d©a
 |= (1<<31);

361 
	`outw
(
MDIO_PHY_CONTROL_0
, 
d©a
);

366 
t_°¨t
 = 
	`gë_timî
(0);

369 if(!–
	`öw
(
MDIO_PHY_CONTROL_0
) & (0x1 << 31)))

371 
°©us
 = 
	`öw
(
MDIO_PHY_CONTROL_0
);

372 *
ªad_d©a
 = (
u32
)(
°©us
 & 0x0000FFFF);

374 
	`íabÀ_mdio
(0);

377 if(
	`gë_timî
(
t_°¨t
Ë> (5 * 
CFG_HZ
))

379 
	`íabÀ_mdio
(0);

380 
	`¥ötf
("\n MDIO Read operation is ongoingánd Time Out!!\n");

384 
	}
}

387 
u32
 
	$__mii_mgr_wrôe
(
u32
 
phy_addr
, u32 
phy_ªgi°î
, u32 
wrôe_d©a
)

389 vﬁ©ûê
t_°¨t
=
	`gë_timî
(0);

390 
u32
 vﬁ©ûê
d©a
;

392 
	`íabÀ_mdio
(1);

397 i‡(!–
	`öw
(
MDIO_PHY_CONTROL_0
) & (0x1 << 31)))

401 if(
	`gë_timî
(
t_°¨t
Ë> (5 * 
CFG_HZ
))

403 
	`íabÀ_mdio
(0);

404 
	`¥ötf
("\n MDIO Write operation is ongoing !!\n");

408 
d©a
 = (1<<30Ë| (
phy_addr
 << 24Ë| (
phy_ªgi°î
 << 16Ë| 
wrôe_d©a
;

409 
	`outw
(
MDIO_PHY_CONTROL_0
, 
d©a
);

410 
d©a
 |= (1<<31);

411 
	`outw
(
MDIO_PHY_CONTROL_0
, 
d©a
);

414 
t_°¨t
 = 
	`gë_timî
(0);

419 if(!–
	`öw
(
MDIO_PHY_CONTROL_0
) & (0x1 << 31)))

421 
	`íabÀ_mdio
(0);

424 if(
	`gë_timî
(
t_°¨t
Ë> (5 * 
CFG_HZ
))

426 
	`íabÀ_mdio
(0);

427 
	`¥ötf
("\n MDIO Write operation is ongoingánd Time Out!!\n");

431 
	}
}

435 
u32
 
	$mii_mgr_ªad
(
u32
 
phy_addr
, u32 
phy_ªgi°î
, u32 *
ªad_d©a
)

437 
u32
 
low_w‹d
;

438 
u32
 
high_w‹d
;

440 if(
phy_addr
==31) {

442 if(
	`__mii_mgr_wrôe
(
phy_addr
, 0x1f, ((
phy_ªgi°î
 >> 6) & 0x3FF))) {

444 if(
	`__mii_mgr_ªad
(
phy_addr
, (
phy_ªgi°î
 >> 2Ë& 0xF, &
low_w‹d
)) {

446 if(
	`__mii_mgr_ªad
(
phy_addr
, (0x1 << 4), &
high_w‹d
)) {

447 *
ªad_d©a
 = (
high_w‹d
 << 16Ë| (
low_w‹d
 & 0xFFFF);

454 if(
	`__mii_mgr_ªad
(
phy_addr
, 
phy_ªgi°î
, 
ªad_d©a
)) {

461 
	}
}

463 
u32
 
	$mii_mgr_wrôe
(
u32
 
phy_addr
, u32 
phy_ªgi°î
, u32 
wrôe_d©a
)

466 if(
phy_addr
 == 31) {

468 if(
	`__mii_mgr_wrôe
(
phy_addr
, 0x1f, (
phy_ªgi°î
 >> 6) & 0x3FF)) {

470 if(
	`__mii_mgr_wrôe
(
phy_addr
, ((
phy_ªgi°î
 >> 2Ë& 0xF), 
wrôe_d©a
 & 0xFFFF)) {

472 if(
	`__mii_mgr_wrôe
(
phy_addr
, (0x1 << 4), 
wrôe_d©a
 >> 16)) {

478 if(
	`__mii_mgr_wrôe
(
phy_addr
, 
phy_ªgi°î
, 
wrôe_d©a
)) {

484 
	}
}

492 
u32
 
	$mii_mgr_ªad
(
u32
 
phy_addr
, u32 
phy_ªgi°î
, u32 *
ªad_d©a
)

494 
u32
 vﬁ©ûê
°©us
 = 0;

495 
u32
 vﬁ©ûê
d©a
 = 0;

496 
u32
 
rc
 = 0;

497 vﬁ©ûê
t_°¨t
 = 
	`gë_timî
(0);

500 
	`íabÀ_mdio
(1);

505 #i‡
	`deföed
 (
RT3052_FPGA_BOARD
Ë|| deföed (
RT3052_ASIC_BOARD
) || \

506 
	`deföed
 (
RT3352_FPGA_BOARD
Ë|| deföed (
RT3352_ASIC_BOARD
) || \

507 
	`deföed
 (
RT5350_FPGA_BOARD
Ë|| deföed (
RT5350_ASIC_BOARD
) || \

508 
	`deföed
 (
MT7628_FPGA_BOARD
Ë|| deföed (
MT7628_ASIC_BOARD
)

510 if(!–
	`öw
(
MDIO_PHY_CONTROL_1
) & (0x1 << 1)))

513 if(!–
	`öw
(
MDIO_PHY_CONTROL_0
) & (0x1 << 31)))

517 }if(
	`gë_timî
(
t_°¨t
Ë> (5 * 
CFG_HZ
)){

518 
	`íabÀ_mdio
(0);

519 
	`¥ötf
("\n MDIO Read operation is ongoing !!\n");

520  
rc
;

524 #i‡
	`deföed
 (
RT3052_FPGA_BOARD
Ë|| deföed (
RT3052_ASIC_BOARD
) || \

525 
	`deföed
 (
RT3352_FPGA_BOARD
Ë|| deföed (
RT3352_ASIC_BOARD
) || \

526 
	`deföed
 (
RT5350_FPGA_BOARD
Ë|| deföed (
RT5350_ASIC_BOARD
) || \

527 
	`deföed
 (
MT7628_FPGA_BOARD
Ë|| deföed (
MT7628_ASIC_BOARD
)

528 
	`outw
(
MDIO_PHY_CONTROL_0
 , (1<<14Ë| (
phy_ªgi°î
 << 8Ë| (
phy_addr
));

530 
d©a
 = (
phy_addr
 << 24Ë| (
phy_ªgi°î
 << 16);

531 
	`outw
(
MDIO_PHY_CONTROL_0
, 
d©a
);

532 
d©a
 |= (1<<31);

533 
	`outw
(
MDIO_PHY_CONTROL_0
, 
d©a
);

539 
t_°¨t
 = 
	`gë_timî
(0);

542 #i‡
	`deföed
 (
RT3052_FPGA_BOARD
Ë|| deföed (
RT3052_ASIC_BOARD
) || \

543 
	`deföed
 (
RT3352_FPGA_BOARD
Ë|| deföed (
RT3352_ASIC_BOARD
) || \

544 
	`deföed
 (
RT5350_FPGA_BOARD
Ë|| deföed (
RT5350_ASIC_BOARD
) || \

545 
	`deföed
 (
MT7628_FPGA_BOARD
Ë|| deföed (
MT7628_ASIC_BOARD
)

546 if–
	`öw
(
MDIO_PHY_CONTROL_1
) & (0x1 << 1))

548 
°©us
 = 
	`öw
(
MDIO_PHY_CONTROL_1
);

549 *
ªad_d©a
 = (
u32
)(
°©us
 >>16);

551 
	`íabÀ_mdio
(0);

555 if(!–
	`öw
(
MDIO_PHY_CONTROL_0
) & (0x1 << 31)))

557 
°©us
 = 
	`öw
(
MDIO_PHY_CONTROL_0
);

558 *
ªad_d©a
 = (
u32
)(
°©us
 & 0x0000FFFF);

560 
	`íabÀ_mdio
(0);

564 if(
	`gë_timî
(
t_°¨t
Ë> (5 * 
CFG_HZ
))

566 
	`íabÀ_mdio
(0);

567 
	`¥ötf
("\n MDIO Read operation is ongoingánd Time Out!!\n");

571 
	}
}

574 
u32
 
	$mii_mgr_wrôe
(
u32
 
phy_addr
, u32 
phy_ªgi°î
, u32 
wrôe_d©a
)

576 vﬁ©ûê
t_°¨t
=
	`gë_timî
(0);

577 
u32
 vﬁ©ûê
d©a
;

579 
	`íabÀ_mdio
(1);

584 #i‡
	`deföed
 (
RT3052_FPGA_BOARD
Ë|| deföed (
RT3052_ASIC_BOARD
) || \

585 
	`deföed
 (
RT3352_FPGA_BOARD
Ë|| deföed (
RT3352_ASIC_BOARD
) || \

586 
	`deföed
 (
RT5350_FPGA_BOARD
Ë|| deföed (
RT5350_ASIC_BOARD
) || \

587 
	`deföed
 (
RT6855_FPGA_BOARD
Ë|| deföed (
RT6855_ASIC_BOARD
) || \

588 
	`deföed
 (
MT7620_FPGA_BOARD
Ë|| deföed (
MT7620_ASIC_BOARD
) || \

589 
	`deföed
 (
MT7628_FPGA_BOARD
Ë|| deföed (
MT7628_ASIC_BOARD
)

590 if(!–
	`öw
(
MDIO_PHY_CONTROL_1
) & (0x1 << 0)))

592 i‡(!–
	`öw
(
MDIO_PHY_CONTROL_0
) & (0x1 << 31)))

597 if(
	`gë_timî
(
t_°¨t
Ë> (5 * 
CFG_HZ
))

599 
	`íabÀ_mdio
(0);

600 
	`¥ötf
("\n MDIO Write operation is ongoing !!\n");

605 #i‡
	`deföed
 (
RT3052_FPGA_BOARD
Ë|| deföed (
RT3052_ASIC_BOARD
) || \

606 
	`deföed
 (
RT3352_FPGA_BOARD
Ë|| deföed (
RT3352_ASIC_BOARD
) || \

607 
	`deföed
 (
RT5350_FPGA_BOARD
Ë|| deföed (
RT5350_ASIC_BOARD
) || \

608 
	`deföed
 (
MT7628_FPGA_BOARD
Ë|| deföed (
MT7628_ASIC_BOARD
)

609 
d©a
 = ((
wrôe_d©a
 & 0xFFFF)<<16);

610 
d©a
 |(
phy_ªgi°î
 << 8Ë| (
phy_addr
);

611 
d©a
 |= (1<<13);

612 
	`outw
(
MDIO_PHY_CONTROL_0
, 
d©a
);

614 
d©a
 = (1<<30Ë| (
phy_addr
 << 24Ë| (
phy_ªgi°î
 << 16Ë| 
wrôe_d©a
;

615 
	`outw
(
MDIO_PHY_CONTROL_0
, 
d©a
);

616 
d©a
 |= (1<<31);

617 
	`outw
(
MDIO_PHY_CONTROL_0
, 
d©a
);

621 
t_°¨t
 = 
	`gë_timî
(0);

626 #i‡
	`deföed
 (
RT3052_FPGA_BOARD
Ë|| deföed (
RT3052_ASIC_BOARD
) || \

627 
	`deföed
 (
RT3352_FPGA_BOARD
Ë|| deföed (
RT3352_ASIC_BOARD
) || \

628 
	`deföed
 (
RT5350_FPGA_BOARD
Ë|| deföed (
RT5350_ASIC_BOARD
) || \

629 
	`deföed
 (
MT7628_FPGA_BOARD
Ë|| deföed (
MT7628_ASIC_BOARD
)

630 if–
	`öw
(
MDIO_PHY_CONTROL_1
) & (0x1 << 0))

632 if(!–
	`öw
(
MDIO_PHY_CONTROL_0
) & (0x1 << 31)))

635 
	`íabÀ_mdio
(0);

638 if(
	`gë_timî
(
t_°¨t
Ë> (5 * 
CFG_HZ
))

640 
	`íabÀ_mdio
(0);

641 
	`¥ötf
("\n MDIO Write operation is ongoingánd Time Out!!\n");

645 
	}
}

652 #i‡
deföed
 (
RT3052_FPGA_BOARD
Ë|| deföed (
RT3052_ASIC_BOARD
) || \

653 
deföed
 (
RT3352_FPGA_BOARD
Ë|| deföed (
RT3352_ASIC_BOARD
) || \

654 
deföed
 (
RT5350_FPGA_BOARD
Ë|| deföed (
RT5350_ASIC_BOARD
) || \

655 
deföed
 (
MT7628_FPGA_BOARD
Ë|| 
	$deföed
 (
MT7628_ASIC_BOARD
)

656 
	$dump_phy_ªg
(
p‹t_no
, 
‰om
, 
to
, 
is_loˇl
)

658 
u32
 
i
=0;

659 
u32
 
ãmp
=0;

661 if(
is_loˇl
==0) {

662 
	`¥ötf
("Global Register\n");

663 
	`¥ötf
("===============");

664 
	`mii_mgr_wrôe
(0, 31, 0);

665 
i
=
‰om
;i<=
to
;i++) {

666 if(
i
%8==0) {

667 
	`¥ötf
("\n");

669 
	`mii_mgr_ªad
(
p‹t_no
,
i
, &
ãmp
);

670 
	`¥ötf
("%02d: %04X ",
i
, 
ãmp
);

673 
	`mii_mgr_wrôe
(0, 31, 0x8000);

674 
	`¥ötf
("\n\nLoˇ»Regi°î P‹à%d\n",
p‹t_no
);

675 
	`¥ötf
("===============");

676 
i
=
‰om
;i<=
to
;i++) {

677 if(
i
%8==0) {

678 
	`¥ötf
("\n");

680 
	`mii_mgr_ªad
(
p‹t_no
,
i
, &
ãmp
);

681 
	`¥ötf
("%02d: %04X ",
i
, 
ãmp
);

684 
	`¥ötf
("\n");

685 
	}
}

687 
	$dump_phy_ªg
(
p‹t_no
, 
‰om
, 
to
, 
is_loˇl
, 
∑ge_no
)

690 
u32
 
i
=0;

691 
u32
 
ãmp
=0;

692 
u32
 
r31
=0;

695 if(
is_loˇl
==0) {

697 
	`¥ötf
("\n\nGlobÆ Regi°î Pagê%d\n",
∑ge_no
);

698 
	`¥ötf
("===============");

699 
r31
 = 0 << 15;

700 
r31
 = 
∑ge_no
&0x7 << 12;

701 
	`mii_mgr_wrôe
(0, 31, 
r31
);

702 
i
=16;i<32;i++) {

703 if(
i
%8==0) {

704 
	`¥ötf
("\n");

706 
	`mii_mgr_ªad
(
p‹t_no
,
i
, &
ãmp
);

707 
	`¥ötf
("%02d: %04X ",
i
, 
ãmp
);

710 
	`¥ötf
("\n\nLoˇ»Regi°î P‹à%d Pagê%d\n",
p‹t_no
, 
∑ge_no
);

711 
	`¥ötf
("===============");

712 
r31
 = 1 << 15;

713 
r31
 = 
∑ge_no
&0x7 << 12;

714 
	`mii_mgr_wrôe
(0, 31, 
r31
);

715 
i
=16;i<32;i++) {

716 if(
i
%8==0) {

717 
	`¥ötf
("\n");

719 
	`mii_mgr_ªad
(
p‹t_no
,
i
, &
ãmp
);

720 
	`¥ötf
("%02d: %04X ",
i
, 
ãmp
);

723 
	`¥ötf
("\n");

724 
	}
}

728 #i‚de‡
ON_BOARD_NAND_FLASH_COMPONENT


729 
	#MDIO_DBG_CMD


	)

731 
	$π2880_mdio_ac˚ss
(
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

733 
u32
 
addr
;

734 
u32
 
phy_addr
;

735 
u32
 
vÆue
 = 0,
bô_off£t
,
ãmp
;

736 
u32
 
i
=0, 
j
=0;

738 if(!
	`memcmp
(
¨gv
[0],"mdio.anoff",("mdio.anoff")))

740 #i‡ 
	`deföed
 (
RT6855_FPGA_BOARD
Ë|| deföed (
RT6855_ASIC_BOARD
) || \

741 
	`deföed
 (
RT6855A_FPGA_BOARD
Ë|| deföed (
RT6855A_ASIC_BOARD
) || \

742 
	`deföed
 (
MT7620_FPGA_BOARD
Ë|| deföed (
MT7620_ASIC_BOARD
) || \

743 
	`deföed
 (
MT7621_FPGA_BOARD
Ë|| deföed (
MT7621_ASIC_BOARD
)

744 
vÆue
 = 
	`öw
(
MDIO_PHY_CONTROL_1
);

745 
vÆue
 &= ~(1 << 31);

746 
	`outw
(
MDIO_PHY_CONTROL_1
,
vÆue
);

747 
	`puts
("\n GMAC1 ForceÜink statusÉnable !! \n");

750 
vÆue
 = 
	`öw
(
MDIO_PHY_CONTROL_1
);

751 
vÆue
 |= (1<<15);

752 
	`outw
(
MDIO_PHY_CONTROL_1
,
vÆue
);

753 
	`puts
("\n GMAC1 ForceÜink statusÉnable !! \n");

756 if(!
	`memcmp
(
¨gv
[0],"mdio.anon",("mdio.anon")))

758 #i‡ 
	`deföed
 (
RT6855_FPGA_BOARD
Ë|| deföed (
RT6855_ASIC_BOARD
) || \

759 
	`deföed
 (
RT6855A_FPGA_BOARD
Ë|| deföed (
RT6855A_ASIC_BOARD
) || \

760 
	`deföed
 (
MT7620_FPGA_BOARD
Ë|| deföed (
MT7620_ASIC_BOARD
) || \

761 
	`deföed
 (
MT7621_FPGA_BOARD
Ë|| deföed (
MT7621_ASIC_BOARD
)

763 
vÆue
 = 
	`öw
(
MDIO_PHY_CONTROL_1
);

764 
vÆue
 |= (1<<31);

765 
	`outw
(
MDIO_PHY_CONTROL_1
,
vÆue
);

766 
	`puts
("\n GMAC1 ForceÜink status disable !! \n");

769 
vÆue
 = 
	`öw
(
MDIO_PHY_CONTROL_1
);

770 
vÆue
 &= ~(1 << 15);

771 
	`outw
(
MDIO_PHY_CONTROL_1
,
vÆue
);

772 
	`puts
("\n GMAC1 ForceÜink status disable !! \n");

775 if(!
	`memcmp
(
¨gv
[0],"mdio.r",("mdio.r")))

777 i‡(
¨gc
 != 3) {

778 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

781 
phy_addr
 = 
	`sim∂e_°πoul
(
¨gv
[1], 
NULL
, 10);

782 #i‡
	`deföed
 (
MT7621_FPGA_BOARD
Ë|| deföed (
MT7621_ASIC_BOARD
) || \

783 
	`deföed
 (
P5_RGMII_TO_MAC_MODE
Ë|| deföed (
MAC_TO_MT7530_MODE
)

784 if(
phy_addr
 == 31) {

785 
addr
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

787 
addr
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 10);

790 
addr
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 10);

792 
phy_addr
 &=0x1f;

794 if(
	`mii_mgr_ªad
(
phy_addr
, 
addr
, &
vÆue
))

795 
	`¥ötf
("\¿mdio.∏addr[0x%08X]=0x%08X\n",
addr
,
vÆue
);

797 
	`¥ötf
("\¿Ródáddr[0x%08X] i†Faû!!\n",
addr
);

800 if(!
	`memcmp
(
¨gv
[0],"mdio.w",("mdio.w")))

802 i‡(
¨gc
 != 4) {

803 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

806 
phy_addr
 = 
	`sim∂e_°πoul
(
¨gv
[1], 
NULL
, 10);

807 #i‡
	`deföed
 (
MT7621_FPGA_BOARD
Ë|| deföed (
MT7621_ASIC_BOARD
) || \

808 
	`deföed
 (
P5_RGMII_TO_MAC_MODE
Ë|| deföed (
MAC_TO_MT7530_MODE
)

809 if(
phy_addr
 == 31) {

810 
addr
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

812 
addr
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 10);

815 
addr
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 10);

817 
vÆue
 = 
	`sim∂e_°πoul
(
¨gv
[3], 
NULL
, 16);

818 
phy_addr
 &=0x1f;

820 if(
	`mii_mgr_wrôe
(
phy_addr
, 
addr
,
vÆue
)) {

821 
	`¥ötf
("\¿mdio.wáddr[0x%08X] vÆue[0x%08X]\n",
addr
,
vÆue
);

824 
	`¥ötf
("\¿Wrôe[0x%08X] i†Faû!!\n",
addr
);

827 if(!
	`memcmp
(
¨gv
[0],"mdio.wb",("mdio.wb")))

829 i‡(
¨gc
 != 4) {

830 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

833 
addr
 = 
	`sim∂e_°πoul
(
¨gv
[1], 
NULL
, 10);

834 
bô_off£t
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 10);

835 
vÆue
 = 
	`sim∂e_°πoul
(
¨gv
[3], 
NULL
, 10);

837 if(
	`mii_mgr_ªad
(31, 
addr
,&
ãmp
)) {

841 
	`¥ötf
("\n Rasd PHY fail while mdio.wb was called\n");

845 if(
vÆue
) {

846 
	`¥ötf
("\¿Së bô[%d]Åÿ'1' \n",
bô_off£t
);

847 
ãmp
 |(1<<
bô_off£t
);

850 
	`¥ötf
("\¿Së bô[%d]Åÿ'0' \n",
bô_off£t
);

851 
ãmp
 &~(1<<
bô_off£t
);

854 if(
	`mii_mgr_wrôe
(31, 
addr
,
ãmp
)) {

855 
	`¥ötf
("\¿mdio.wbáddr[0x%08X] vÆue[0x%08X]\n",
addr
,
ãmp
);

858 
	`¥ötf
("\¿Wrôe[0x%08X] i†Faû!!\n",
addr
);

861 if(!
	`memcmp
(
¨gv
[0],"mdio.d",("mdio.d")))

863 #i‡
	`deföed
 (
RT3052_FPGA_BOARD
Ë|| deföed (
RT3052_ASIC_BOARD
) || \

864 
	`deföed
 (
RT3352_FPGA_BOARD
Ë|| deföed (
RT3352_ASIC_BOARD
) || \

865 
	`deföed
 (
RT5350_FPGA_BOARD
Ë|| deföed (
RT5350_ASIC_BOARD
) || \

866 
	`deföed
 (
MT7628_FPGA_BOARD
Ë|| deföed (
MT7628_ASIC_BOARD
)

867 i‡(
¨gc
 == 2) {

868 
addr
 = 
	`sim∂e_°πoul
(
¨gv
[1], 
NULL
, 10);

869 
	`dump_phy_ªg
(0, 0, 31, 0);

870 
	`dump_phy_ªg
(
addr
, 0, 31, 1);

875 
	`dump_phy_ªg
(0, 0, 31, 0);

876 
i
=0;i<5;i++) {

877 
	`dump_phy_ªg
(
i
, 0, 31, 1);

880 #ñi‡
	`deföed
 (
MT7621_FPGA_BOARD
Ë|| deföed (
MT7621_ASIC_BOARD
)

881 i‡(
¨gc
 == 2) {

882 
addr
 = 
	`sim∂e_°πoul
(
¨gv
[1], 
NULL
, 10);

884 
i
=0;i<0x100;i+=4) {

885 if(
i
%16==0) {

886 
	`¥ötf
("\n%04X: ",0x4000 + 
addr
*0x100 + 
i
);

888 
	`mii_mgr_ªad
(31, 0x4000 + 
addr
*0x100 + 
i
, &
ãmp
);

889 
	`¥ötf
("%08X ", 
ãmp
);

891 
	`¥ötf
("\n");

893 
i
=0;i<7;i++) {

894 
j
=0;j<0x100;j+=4) {

895 if(
j
%16==0) {

896 
	`¥ötf
("\n%04X: ",0x4000 + 
i
*0x100 + 
j
);

898 
	`mii_mgr_ªad
(31, 0x4000 + 
i
*0x100 + 
j
, &
ãmp
);

899 
	`¥ötf
("%08X ", 
ãmp
);

901 
	`¥ötf
("\n");

909 
	`¥ötf
("SPEC defined Register\n");

910 
	`¥ötf
("===============");

911 
i
=0;i<=16;i++) {

912 if(
i
%8==0) {

913 
	`¥ötf
("\n");

915 
	`mii_mgr_ªad
(0,
i
, &
ãmp
);

916 
	`¥ötf
("%02d: %04X ",
i
, 
ãmp
);

919 i‡(
¨gc
 == 2) {

920 
addr
 = 
	`sim∂e_°πoul
(
¨gv
[1], 
NULL
, 10);

921 
	`dump_phy_ªg
(
addr
, 16, 31, 0, 
i
);

922 
	`dump_phy_ªg
(
addr
, 16, 31, 1, 0);

923 
	`dump_phy_ªg
(
addr
, 16, 31, 1, 1);

924 
	`dump_phy_ªg
(
addr
, 16, 31, 1, 2);

925 
	`dump_phy_ªg
(
addr
, 16, 31, 1, 3);

928 
i
=0;i<4;i++) {

929 
	`dump_phy_ªg
(0, 16, 31, 0, 
i
);

932 
i
=0;i<5;i++) {

933 
	`dump_phy_ªg
(
i
, 16, 31, 1, 0);

934 
	`dump_phy_ªg
(
i
, 16, 31, 1, 1);

935 
	`dump_phy_ªg
(
i
, 16, 31, 1, 2);

936 
	`dump_phy_ªg
(
i
, 16, 31, 1, 3);

942 
	}
}

944 
U_BOOT_CMD
(

945 
mdio
, 4, 1, 
π2880_mdio_ac˚ss
,

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/msdc/config.h

36 #i‚de‡
_CONFIG_H_


37 
	#_CONFIG_H_


	)

43 
	#MMC_DEBUG
 (0)

	)

44 
	#MSDC_DEBUG
 (0)

	)

45 
	#MSDC_HW_DEBUG
 (0Ë

	)

47 
	#MSDC_USE_SDXC_FPGA
 (0)

	)

48 
	#MSDC_USE_LEVEL_SHIFT
 (0)

	)

49 
	#MSDC_USE_REG_OPS_DUMP
 (0)

	)

50 
	#MSDC_USE_IRQ
 (0)

	)

51 
	#MSDC_USE_RD_TUNING
 (0Ë

	)

52 
	#MSDC_USE_WR_TUNING
 (0Ë

	)

53 
	#MSDC_USE_CM_TUNING
 (1Ë

	)

54 
	#MSDC_USE_CLKDIV_IN_DATCRC
 (0Ë

	)

56 #i‡
MSDC_DEBUG


57 
	#MSG_DEBUG


	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/msdc/mmc_core.c

38 
	~<comm⁄.h
>

39 
	~<löux/°rög.h
>

40 
	~"msdc.h
"

41 
	~"msg.h
"

42 
	~"mmc_c‹e.h
"

43 
	~"mmc_ã°.h
"

44 
	~"sdio.h
"

45 
	~"utûs.h
"

47 
	#NR_MMC
 (
MSDC_MAX_NUM
)

	)

48 
	#CMD_RETRIES
 (5)

	)

49 
	#CMD_TIMEOUT
 (100Ë

	)

50 
	#ARRAY_SIZE
(
x
Ë((xË/ ((x)[0]))

	)

52 
mmc_ho°
 
	gsd_ho°
[
NR_MMC
];

53 
mmc_ˇrd
 
	gsd_ˇrd
[
NR_MMC
];

55 c⁄° 
	gå™_exp
[] = {

60 c⁄° 
	gå™_m™t
[] = {

65 c⁄° 
	gmmc_å™_m™t
[] = {

70 c⁄° 
	gècc_exp
[] = {

74 c⁄° 
	gècc_m™t
[] = {

79 
u32
 
	$un°uff_bôs
(
u32
 *
ª•
, u32 
°¨t
, u32 
size
)

81 c⁄° 
u32
 
__mask
 = (1 << (
size
)) - 1;

82 c⁄° 
__off
 = 3 - ((
°¨t
) / 32);

83 c⁄° 
__sh·
 = (
°¨t
) & 31;

84 
u32
 
__ªs
;

86 
__ªs
 = 
ª•
[
__off
] >> 
__sh·
;

87 i‡((
size
Ë+ 
__sh·
 >= 32)

88 
__ªs
 |
ª•
[
__off
-1] << (32 - 
__sh·
);

89  
__ªs
 & 
__mask
;

90 
	}
}

92 
	#UNSTUFF_BITS
(
r
,
s
,
sz
Ë
	`un°uff_bôs
‘,s,sz)

	)

94 #ifde‡
MMC_PROFILING


95 
	$mmc_¥of_ˇrd_öô
(*
d©a
, 
ul⁄g
 
id
, ul⁄g 
cou¡s
)

97 
îr
 = ()
d©a
;

98 i‡(!
îr
) {

99 
	`¥ötf
("[SD%d] Init Card, %d counts, %d us\n",

100 
id
, 
cou¡s
, counts * 30 + counts * 16960 / 32768);

102 
	}
}

104 
	$mmc_¥of_ªad
(*
d©a
, 
ul⁄g
 
id
, ul⁄g 
cou¡s
)

106 
mmc_›_≥rf
 *
≥rf
 = (mmc_›_≥r‡*)
d©a
;

107 
mmc_›_ªp‹t
 *
Ωt
;

108 
u32
 
blksz
 = 
≥rf
->
ho°
->
blkÀn
;

109 
u32
 
blk˙t
 = (u32)
id
;

111 i‡(
blk˙t
 > 1)

112 
Ωt
 = &
≥rf
->
mu…i_blks_ªad
;

114 
Ωt
 = &
≥rf
->
sögÀ_blk_ªad
;

116 
Ωt
->
cou¡
++;

117 
Ωt
->
tŸÆ_size
 +
blk˙t
 * 
blksz
;

118 
Ωt
->
tŸÆ_time
 +
cou¡s
;

119 i‡((
cou¡s
 < 
Ωt
->
mö_time
) || (rpt->min_time == 0))

120 
Ωt
->
mö_time
 = 
cou¡s
;

121 i‡((
cou¡s
 > 
Ωt
->
max_time
) || (rpt->max_time == 0))

122 
Ωt
->
max_time
 = 
cou¡s
;

124 
	`¥ötf
("[SD%d] Read %d bytes, %d counts, %d us, %d KB/s, Avg: %d KB/s\n",

125 
≥rf
->
ho°
->
id
, 
blk˙t
 * 
blksz
, 
cou¡s
,

126 
cou¡s
 * 30 + counts * 16960 / 32768,

127 
blk˙t
 * 
blksz
 * 32 / (
cou¡s
 ? counts : 1),

128 ((
Ωt
->
tŸÆ_size
 / 1024Ë* 32768Ë/Ñ±->
tŸÆ_time
);

129 
	}
}

131 
	$mmc_¥of_wrôe
(*
d©a
, 
ul⁄g
 
id
, ul⁄g 
cou¡s
)

133 
mmc_›_≥rf
 *
≥rf
 = (mmc_›_≥r‡*)
d©a
;

134 
mmc_›_ªp‹t
 *
Ωt
;

135 
u32
 
blksz
 = 
≥rf
->
ho°
->
blkÀn
;

136 
u32
 
blk˙t
 = (u32)
id
;

138 i‡(
blk˙t
 > 1)

139 
Ωt
 = &
≥rf
->
mu…i_blks_wrôe
;

141 
Ωt
 = &
≥rf
->
sögÀ_blk_wrôe
;

143 
Ωt
->
cou¡
++;

144 
Ωt
->
tŸÆ_size
 +
blk˙t
 * 
blksz
;

145 
Ωt
->
tŸÆ_time
 +
cou¡s
;

146 i‡((
cou¡s
 < 
Ωt
->
mö_time
) || (rpt->min_time == 0))

147 
Ωt
->
mö_time
 = 
cou¡s
;

148 i‡((
cou¡s
 > 
Ωt
->
max_time
) || (rpt->max_time == 0))

149 
Ωt
->
max_time
 = 
cou¡s
;

151 
	`¥ötf
("[SD%d] Write %d bytes, %d counts, %d us, %d KB/s, Avg: %d KB/s\n",

152 
≥rf
->
ho°
->
id
, 
blk˙t
 * 
blksz
, 
cou¡s
,

153 
cou¡s
 * 30 + counts * 16960 / 32768,

154 
blk˙t
 * 
blksz
 * 32 / (
cou¡s
 ? counts : 1),

155 ((
Ωt
->
tŸÆ_size
 / 1024Ë* 32768Ë/Ñ±->
tŸÆ_time
);

156 
	}
}

159 
	$ci°∂_vîs_1
(
mmc_ˇrd
 *
ˇrd
, 
sdio_func
 *
func
,

160 c⁄° *
buf
, 
size
)

162 
i
, 
ƒ_°rögs
;

163 **
buf„r
, *
°rög
;

165 
buf
 += 2;

166 
size
 -= 2;

168 
ƒ_°rögs
 = 0;

169 
i
 = 0; i < 
size
; i++) {

170 i‡(
buf
[
i
] == 0xff)

172 i‡(
buf
[
i
] == 0)

173 
ƒ_°rögs
++;

176 i‡(
buf
[
i
-1] != '\0') {

177 
	`¥ötf
("SDIO: ignoring broken CISTPL_VERS_1\n");

181 
size
 = 
i
;

183 
buf„r
 = 
	`mÆloc
((*Ë* 
ƒ_°rögs
 + 
size
);

184 i‡(!
buf„r
)

187 
°rög
 = (*)(
buf„r
 + 
ƒ_°rögs
);

189 
i
 = 0; i < 
ƒ_°rögs
; i++) {

190 
buf„r
[
i
] = 
°rög
;

191 
	`°r˝y
(
°rög
, 
buf
);

192 
°rög
 +
	`°æí
(string) + 1;

193 
buf
 +
	`°æí
(buf) + 1;

196 i‡(
func
) {

197 
func
->
num_öfo
 = 
ƒ_°rögs
;

198 
func
->
öfo
 = (c⁄° **)
buf„r
;

200 
ˇrd
->
num_öfo
 = 
ƒ_°rögs
;

201 
ˇrd
->
öfo
 = (c⁄° **)
buf„r
;

205 
	}
}

207 
	$ci°∂_m™fid
(
mmc_ˇrd
 *
ˇrd
, 
sdio_func
 *
func
,

208 c⁄° *
buf
, 
size
)

210 
víd‹
, 
devi˚
;

213 
víd‹
 = 
buf
[0] | (buf[1] << 8);

216 
devi˚
 = 
buf
[2] | (buf[3] << 8);

218 i‡(
func
) {

219 
func
->
víd‹
 = vendor;

220 
func
->
devi˚
 = device;

222 
ˇrd
->
cis
.
víd‹
 = vendor;

223 
ˇrd
->
cis
.
devi˚
 = device;

227 
	}
}

229 c⁄° 
	g•ìd_vÆ
[16] =

231 c⁄° 
	g•ìd_unô
[8] =

234 
	$ci°∂_fun˚_comm⁄
(
mmc_ˇrd
 *
ˇrd
,

235 c⁄° *
buf
, 
size
)

237 i‡(
size
 < 0x04 || 
buf
[0] != 0)

238  
MMC_ERR_INVALID
;

241 
ˇrd
->
cis
.
blksize
 = 
buf
[1] | (buf[2] << 8);

244 
ˇrd
->
cis
.
max_då
 = 
•ìd_vÆ
[(
buf
[3] >> 3) & 15] *

245 
•ìd_unô
[
buf
[3] & 7];

248 
	}
}

250 
	$ci°∂_fun˚_func
(
sdio_func
 *
func
,

251 c⁄° *
buf
, 
size
)

253 
v¢
;

254 
mö_size
;

256 
v¢
 = 
func
->
ˇrd
->
cc¸
.
sdio_v¢
;

257 
mö_size
 = (
v¢
 =
SDIO_SDIO_REV_1_00
) ? 28 : 42;

259 i‡(
size
 < 
mö_size
 || 
buf
[0] != 1)

260  
MMC_ERR_INVALID
;

263 
func
->
max_blksize
 = 
buf
[12] | (buf[13] << 8);

266 i‡(
v¢
 > 
SDIO_SDIO_REV_1_00
)

267 
func
->
íabÀ_timeout
 = (
buf
[28] | (buf[29] << 8)) * 10;

269 
func
->
íabÀ_timeout
 = 10;

272 
	}
}

274 
	$ci°∂_fun˚
(
mmc_ˇrd
 *
ˇrd
, 
sdio_func
 *
func
,

275 c⁄° *
buf
, 
size
)

277 
ªt
;

285 i‡(
func
)

286 
ªt
 = 
	`ci°∂_fun˚_func
(
func
, 
buf
, 
size
);

288 
ªt
 = 
	`ci°∂_fun˚_comm⁄
(
ˇrd
, 
buf
, 
size
);

290 i‡(
ªt
) {

291 
	`¥ötf
("bad CISTPL_FUNCE sizê%uÅy≥ %u\n", 
size
, 
buf
[0]);

292  
ªt
;

296 
	}
}

298 (
	tçl_∑r£_t
)(
	tmmc_ˇrd
 *, 
	tsdio_func
 *,

301 
	scis_çl
 {

302 
code
;

303 
mö_size
;

304 
çl_∑r£_t
 *
∑r£
;

307 c⁄° 
cis_çl
 
cis_çl_li°
[] = {

308 { 0x15, 3, 
ci°∂_vîs_1
 },

309 { 0x20, 4, 
ci°∂_m™fid
 },

310 { 0x21, 2, 
NULL
 },

311 { 0x22, 0, 
ci°∂_fun˚
 },

312 
	}
};

314 #i‡
MMC_DEBUG


315 
	$mmc_dump_ˇrd_°©us
(
u32
 
ˇrd_°©us
)

317 
	`msdc_dump_ˇrd_°©us
(
ˇrd_°©us
);

318 
	}
}

320 
	$mmc_dump_o¸_ªg
(
u32
 
ª•
)

322 
	`msdc_dump_o¸_ªg
(
ª•
);

323 
	}
}

325 
	$mmc_dump_rˇ_ª•
(
u32
 
ª•
)

327 
	`msdc_dump_rˇ_ª•
(
ª•
);

328 
	}
}

330 
	$mmc_dump_tunög_blk
(
u8
 *
buf
)

332 
i
;

333 
i
 = 0; i < 16; i++) {

334 
	`¥ötf
("[TBLK%d] %x%x%x%x%x%x%x%x\n", 
i
,

335 (
buf
[(
i
<<2)] >> 4) & 0xF, buf[(i<<2)] & 0xF,

336 (
buf
[(
i
<<2)+1] >> 4) & 0xF, buf[(i<<2)+1] & 0xF,

337 (
buf
[(
i
<<2)+2] >> 4) & 0xF, buf[(i<<2)+2] & 0xF,

338 (
buf
[(
i
<<2)+3] >> 4) & 0xF, buf[(i<<2)+3] & 0xF);

340 
	}
}

342 
	$mmc_dump_csd
(
mmc_ˇrd
 *
ˇrd
)

344 
mmc_csd
 *
csd
 = &
ˇrd
->csd;

345 
u32
 *
ª•
 = 
ˇrd
->
øw_csd
;

346 
i
;

347 
csd_°ru˘
;

348 *
sd_csd_vî
[] = {"v1.0", "v2.0"};

349 *
mmc_csd_vî
[] = {"v1.0", "v1.1", "v1.2", "Ver. in EXT_CSD"};

350 *
mmc_cmd_˛s
[] = {"basic", "streamÑead", "blockÑead",

353 *
sd_cmd_˛s
[] = {"basic", "rsv.", "blockÑead",

357 i‡(
	`mmc_ˇrd_sd
(
ˇrd
)) {

358 
csd_°ru˘
 = 
	`UNSTUFF_BITS
(
ª•
, 126, 2);

359 
	`¥ötf
("[CSD] CSD %s\n", 
sd_csd_vî
[
csd_°ru˘
]);

360 
	`¥ötf
("[CSD] TACC_NS: %dÇs, TACC_CLKS: %d clks\n", 
csd
->
ècc_ns
, csd->
ècc_˛ks
);

361 i‡(
csd_°ru˘
 == 1) {

362 
	`¥ötf
("[CSD] Read/Write Blk Len = 512bytes\n");

364 
	`¥ötf
("[CSD] Read Blk Len = %d, Write Blk Len = %d\n",

365 1 << 
csd
->
ªad_blkbôs
, 1 << csd->
wrôe_blkbôs
);

367 
	`¥ötf
("[CSD] CMD Class:");

368 
i
 = 0; i < 12; i++) {

369 i‡((
csd
->
cmd˛ass
 >> 
i
) & 0x1)

370 
	`¥ötf
("'%s' ", 
sd_cmd_˛s
[
i
]);

372 
	`¥ötf
("\n");

374 
csd_°ru˘
 = 
	`UNSTUFF_BITS
(
ª•
, 126, 2);

375 
	`¥ötf
("[CSD] CSD %s\n", 
mmc_csd_vî
[
csd_°ru˘
]);

376 
	`¥ötf
("[CSD] MMCA S≥¯v%d\n", 
csd
->
mmˇ_v¢
);

377 
	`¥ötf
("[CSD] TACC_NS: %dÇs, TACC_CLKS: %d clks\n", 
csd
->
ècc_ns
, csd->
ècc_˛ks
);

378 
	`¥ötf
("[CSD] Read Blk Len = %d, Write Blk Len = %d\n",

379 1 << 
csd
->
ªad_blkbôs
, 1 << csd->
wrôe_blkbôs
);

380 
	`¥ötf
("[CSD] CMD Class:");

381 
i
 = 0; i < 12; i++) {

382 i‡((
csd
->
cmd˛ass
 >> 
i
) & 0x1)

383 
	`¥ötf
("'%s' ", 
mmc_cmd_˛s
[
i
]);

385 
	`¥ötf
("\n");

387 
	}
}

389 
	$mmc_dump_ext_csd
(
mmc_ˇrd
 *
ˇrd
)

391 
u8
 *
ext_csd
 = &
ˇrd
->
øw_ext_csd
[0];

392 
u32
 
tmp
;

393 *
ªv
[] = { "4.0", "4.1", "4.2", "4.3", "Obsolete", "4.41" };

395 
	`¥ötf
("===========================================================\n");

396 
	`¥ötf
("[EXT_CSD] EXT_CSDÑev. : v1.%d (MMCv%s)\n",

397 
ext_csd
[
EXT_CSD_REV
], 
ªv
[ext_csd[EXT_CSD_REV]]);

398 
	`¥ötf
("[EXT_CSD] CSD såu˘Ñev. : v1.%d\n", 
ext_csd
[
EXT_CSD_STRUCT
]);

399 
	`¥ötf
("[EXT_CSD] Suµ‹ãd comm™d së† : %xh\n", 
ext_csd
[
EXT_CSD_S_CMD_SET
]);

400 
	`¥ötf
("[EXT_CSD] HPI fótuª† : %xh\n", 
ext_csd
[
EXT_CSD_HPI_FEATURE
]);

401 
	`¥ötf
("[EXT_CSD] BG o≥øti⁄†suµ‹à : %xh\n", 
ext_csd
[
EXT_CSD_BKOPS_SUPP
]);

402 
	`¥ötf
("[EXT_CSD] BG o≥øti⁄†°©u† : %xh\n", 
ext_csd
[
EXT_CSD_BKOPS_STATUS
]);

403 
	`mem˝y
(&
tmp
, &
ext_csd
[
EXT_CSD_CORRECT_PRG_SECTS_NUM
], 4);

404 
	`¥ötf
("[EXT_CSD] C‹ª˘Örg. se˘‹† : %xh\n", 
tmp
);

405 
	`¥ötf
("[EXT_CSD] 1° inôÅimêa·îÖ¨t. : %d ms\n", 
ext_csd
[
EXT_CSD_INI_TIMEOUT_AP
] * 100);

406 
	`¥ötf
("[EXT_CSD] Mö. wrôê≥rf.(DDR,52MH,8b): %xh\n", 
ext_csd
[
EXT_CSD_MIN_PERF_DDR_W_8_52
]);

407 
	`¥ötf
("[EXT_CSD] Mö.ÑódÖîf. (DDR,52MH,8b): %xh\n", 
ext_csd
[
EXT_CSD_MIN_PERF_DDR_R_8_52
]);

408 
	`¥ötf
("[EXT_CSD] TRIMÅimeout: %d ms\n", 
ext_csd
[
EXT_CSD_TRIM_MULT
] & 0xFF * 300);

409 
	`¥ötf
("[EXT_CSD] Secuª fótuª suµ‹t: %xh\n", 
ext_csd
[
EXT_CSD_SEC_FEATURE_SUPPORT
]);

410 
	`¥ötf
("[EXT_CSD] SecureÉraseÅimeout : %d ms\n", 300 *

411 
ext_csd
[
EXT_CSD_ERASE_TIMEOUT_MULT
] *Éxt_csd[
EXT_CSD_SEC_ERASE_MULT
]);

412 
	`¥ötf
("[EXT_CSD] SecureÅrimÅimeout : %d ms\n", 300 *

413 
ext_csd
[
EXT_CSD_ERASE_TIMEOUT_MULT
] *Éxt_csd[
EXT_CSD_SEC_TRIM_MULT
]);

414 
	`¥ötf
("[EXT_CSD] Ac˚s†sizê : %d byãs\n", 
ext_csd
[
EXT_CSD_ACC_SIZE
] * 512);

415 
	`¥ötf
("[EXT_CSD] HCÉø£ unô sizê : %d kbyãs\n", 
ext_csd
[
EXT_CSD_HC_ERASE_GRP_SIZE
] * 512);

416 
	`¥ötf
("[EXT_CSD] HCÉø£Åimeouà : %d ms\n", 
ext_csd
[
EXT_CSD_ERASE_TIMEOUT_MULT
] * 300);

417 
	`¥ötf
("[EXT_CSD] HC writeÖrot grp size: %d kbytes\n", 512 *

418 
ext_csd
[
EXT_CSD_HC_ERASE_GRP_SIZE
] *Éxt_csd[
EXT_CSD_HC_WP_GPR_SIZE
]);

419 
	`¥ötf
("[EXT_CSD] HCÉø£ gΩ def. : %xh\n", 
ext_csd
[
EXT_CSD_ERASE_GRP_DEF
]);

420 
	`¥ötf
("[EXT_CSD] RñübÀ wrôê£˘ cou¡: %xh\n", 
ext_csd
[
EXT_CSD_REL_WR_SEC_C
]);

421 
	`¥ötf
("[EXT_CSD] SÀï cuºíà(VCCË: %xh\n", 
ext_csd
[
EXT_CSD_S_C_VCC
]);

422 
	`¥ötf
("[EXT_CSD] SÀï cuºíà(VCCQ): %xh\n", 
ext_csd
[
EXT_CSD_S_C_VCCQ
]);

423 
	`¥ötf
("[EXT_CSD] Sleep/awakeÅimeout : %dÇs\n",

424 100 * (2 << 
ext_csd
[
EXT_CSD_S_A_TIMEOUT
]));

425 
	`mem˝y
(&
tmp
, &
ext_csd
[
EXT_CSD_SEC_CNT
], 4);

426 
	`¥ötf
("[EXT_CSD] Se˘‹ cou¡ : %xh\n", 
tmp
);

427 
	`¥ötf
("[EXT_CSD] Mö. WR Pîf. (52MH,8b): %xh\n", 
ext_csd
[
EXT_CSD_MIN_PERF_W_8_52
]);

428 
	`¥ötf
("[EXT_CSD] Mö. Ród Pîf.(52MH,8b): %xh\n", 
ext_csd
[
EXT_CSD_MIN_PERF_R_8_52
]);

429 
	`¥ötf
("[EXT_CSD] Mö. WR Pîf. (26MH,8b,52MH,4b): %xh\n", 
ext_csd
[
EXT_CSD_MIN_PERF_W_8_26_4_25
]);

430 
	`¥ötf
("[EXT_CSD] Mö. Ród Pîf.(26MH,8b,52MH,4b): %xh\n", 
ext_csd
[
EXT_CSD_MIN_PERF_R_8_26_4_25
]);

431 
	`¥ötf
("[EXT_CSD] Mö. WR Pîf. (26MH,4b): %xh\n", 
ext_csd
[
EXT_CSD_MIN_PERF_W_4_26
]);

432 
	`¥ötf
("[EXT_CSD] Mö. Ród Pîf.(26MH,4b): %xh\n", 
ext_csd
[
EXT_CSD_MIN_PERF_R_4_26
]);

433 
	`¥ötf
("[EXT_CSD] Powî cœss: %x\n", 
ext_csd
[
EXT_CSD_PWR_CLASS
]);

434 
	`¥ötf
("[EXT_CSD] Powî cœss(DDR,52MH,3.6V): %xh\n", 
ext_csd
[
EXT_CSD_PWR_CL_DDR_52_360
]);

435 
	`¥ötf
("[EXT_CSD] Powî cœss(DDR,52MH,1.9V): %xh\n", 
ext_csd
[
EXT_CSD_PWR_CL_DDR_52_195
]);

436 
	`¥ötf
("[EXT_CSD] Powî cœss(26MH,3.6VË : %xh\n", 
ext_csd
[
EXT_CSD_PWR_CL_26_360
]);

437 
	`¥ötf
("[EXT_CSD] Powî cœss(52MH,3.6VË : %xh\n", 
ext_csd
[
EXT_CSD_PWR_CL_52_360
]);

438 
	`¥ötf
("[EXT_CSD] Powî cœss(26MH,1.9VË : %xh\n", 
ext_csd
[
EXT_CSD_PWR_CL_26_195
]);

439 
	`¥ötf
("[EXT_CSD] Powî cœss(52MH,1.9VË : %xh\n", 
ext_csd
[
EXT_CSD_PWR_CL_52_195
]);

440 
	`¥ötf
("[EXT_CSD] P¨t. swôchÅimög : %xh\n", 
ext_csd
[
EXT_CSD_PART_SWITCH_TIME
]);

441 
	`¥ötf
("[EXT_CSD] Out-of-INTR busyÅimög: %xh\n", 
ext_csd
[
EXT_CSD_OUT_OF_INTR_TIME
]);

442 
	`¥ötf
("[EXT_CSD] C¨dÅy≥ : %xh\n", 
ext_csd
[
EXT_CSD_CARD_TYPE
]);

443 
	`¥ötf
("[EXT_CSD] Comm™d së : %xh\n", 
ext_csd
[
EXT_CSD_CMD_SET
]);

444 
	`¥ötf
("[EXT_CSD] Comm™d sëÑev.: %xh\n", 
ext_csd
[
EXT_CSD_CMD_SET_REV
]);

445 
	`¥ötf
("[EXT_CSD] HSÅimög : %xh\n", 
ext_csd
[
EXT_CSD_HS_TIMING
]);

446 
	`¥ötf
("[EXT_CSD] Bu†width : %xh\n", 
ext_csd
[
EXT_CSD_BUS_WIDTH
]);

447 
	`¥ötf
("[EXT_CSD] Eø£ mem‹y c⁄ã¡ : %xh\n", 
ext_csd
[
EXT_CSD_ERASED_MEM_CONT
]);

448 
	`¥ötf
("[EXT_CSD] P¨tôi⁄ c⁄fig : %xh\n", 
ext_csd
[
EXT_CSD_PART_CFG
]);

449 
	`¥ötf
("[EXT_CSD] BoŸÖ¨tôi⁄ sizê : %d kbyãs\n", 
ext_csd
[
EXT_CSD_BOOT_SIZE_MULT
] * 128);

450 
	`¥ötf
("[EXT_CSD] BoŸ inf‹m©i⁄ : %xh\n", 
ext_csd
[
EXT_CSD_BOOT_INFO
]);

451 
	`¥ötf
("[EXT_CSD] BoŸ c⁄figÖrŸe˘i⁄: %xh\n", 
ext_csd
[
EXT_CSD_BOOT_CONFIG_PROT
]);

452 
	`¥ötf
("[EXT_CSD] BoŸ bu†width : %xh\n", 
ext_csd
[
EXT_CSD_BOOT_BUS_WIDTH
]);

453 
	`¥ötf
("[EXT_CSD] BoŸáª®wrôê¥Ÿ : %xh\n", 
ext_csd
[
EXT_CSD_BOOT_WP
]);

454 
	`¥ötf
("[EXT_CSD] U£∏¨ó wrôê¥Ÿ : %xh\n", 
ext_csd
[
EXT_CSD_USR_WP
]);

455 
	`¥ötf
("[EXT_CSD] FW c⁄figuøti⁄ : %xh\n", 
ext_csd
[
EXT_CSD_FW_CONFIG
]);

456 
	`¥ötf
("[EXT_CSD] RPMB sizê: %d kbyãs\n", 
ext_csd
[
EXT_CSD_RPMB_SIZE_MULT
] * 128);

457 
	`¥ötf
("[EXT_CSD] Wrôêªl. sëtög : %xh\n", 
ext_csd
[
EXT_CSD_WR_REL_SET
]);

458 
	`¥ötf
("[EXT_CSD] Wrôêªl.Ö¨amëî: %xh\n", 
ext_csd
[
EXT_CSD_WR_REL_PARAM
]);

459 
	`¥ötf
("[EXT_CSD] Sèπ background op†: %xh\n", 
ext_csd
[
EXT_CSD_BKOPS_START
]);

460 
	`¥ötf
("[EXT_CSD] E«bÀ background ops: %xh\n", 
ext_csd
[
EXT_CSD_BKOPS_EN
]);

461 
	`¥ötf
("[EXT_CSD] H/WÑe£àfun˘i⁄ : %xh\n", 
ext_csd
[
EXT_CSD_RST_N_FUNC
]);

462 
	`¥ötf
("[EXT_CSD] HPI m™agemíà : %xh\n", 
ext_csd
[
EXT_CSD_HPI_MGMT
]);

463 
	`mem˝y
(&
tmp
, &
ext_csd
[
EXT_CSD_MAX_ENH_SIZE_MULT
], 4);

464 
	`¥ötf
("[EXT_CSD] Max.Énhancedárea size : %xh (%d kbytes)\n",

465 
tmp
 & 0x00FFFFFF, (tmp & 0x00FFFFFF) * 512 *

466 
ext_csd
[
EXT_CSD_HC_WP_GPR_SIZE
] *Éxt_csd[
EXT_CSD_HC_ERASE_GRP_SIZE
]);

467 
	`¥ötf
("[EXT_CSD] P¨t. suµ‹à : %xh\n", 
ext_csd
[
EXT_CSD_PART_SUPPORT
]);

468 
	`¥ötf
("[EXT_CSD] P¨t.áâribuã: %xh\n", 
ext_csd
[
EXT_CSD_PART_ATTR
]);

469 
	`¥ötf
("[EXT_CSD] P¨t. sëtög : %xh\n", 
ext_csd
[
EXT_CSD_PART_SET_COMPL
]);

470 
	`¥ötf
("[EXT_CSD] GeneralÖurpose 1 size : %xh (%d kbytes)\n",

471 (
ext_csd
[
EXT_CSD_GP1_SIZE_MULT
 + 0] |

472 
ext_csd
[
EXT_CSD_GP1_SIZE_MULT
 + 1] << 8 |

473 
ext_csd
[
EXT_CSD_GP1_SIZE_MULT
 + 2] << 16),

474 (
ext_csd
[
EXT_CSD_GP1_SIZE_MULT
 + 0] |

475 
ext_csd
[
EXT_CSD_GP1_SIZE_MULT
 + 1] << 8 |

476 
ext_csd
[
EXT_CSD_GP1_SIZE_MULT
 + 2] << 16) * 512 *

477 
ext_csd
[
EXT_CSD_HC_WP_GPR_SIZE
] *

478 
ext_csd
[
EXT_CSD_HC_ERASE_GRP_SIZE
]);

479 
	`¥ötf
("[EXT_CSD] GeneralÖurpose 2 size : %xh (%d kbytes)\n",

480 (
ext_csd
[
EXT_CSD_GP2_SIZE_MULT
 + 0] |

481 
ext_csd
[
EXT_CSD_GP2_SIZE_MULT
 + 1] << 8 |

482 
ext_csd
[
EXT_CSD_GP2_SIZE_MULT
 + 2] << 16),

483 (
ext_csd
[
EXT_CSD_GP2_SIZE_MULT
 + 0] |

484 
ext_csd
[
EXT_CSD_GP2_SIZE_MULT
 + 1] << 8 |

485 
ext_csd
[
EXT_CSD_GP2_SIZE_MULT
 + 2] << 16) * 512 *

486 
ext_csd
[
EXT_CSD_HC_WP_GPR_SIZE
] *

487 
ext_csd
[
EXT_CSD_HC_ERASE_GRP_SIZE
]);

488 
	`¥ötf
("[EXT_CSD] GeneralÖurpose 3 size : %xh (%d kbytes)\n",

489 (
ext_csd
[
EXT_CSD_GP3_SIZE_MULT
 + 0] |

490 
ext_csd
[
EXT_CSD_GP3_SIZE_MULT
 + 1] << 8 |

491 
ext_csd
[
EXT_CSD_GP3_SIZE_MULT
 + 2] << 16),

492 (
ext_csd
[
EXT_CSD_GP3_SIZE_MULT
 + 0] |

493 
ext_csd
[
EXT_CSD_GP3_SIZE_MULT
 + 1] << 8 |

494 
ext_csd
[
EXT_CSD_GP3_SIZE_MULT
 + 2] << 16) * 512 *

495 
ext_csd
[
EXT_CSD_HC_WP_GPR_SIZE
] *

496 
ext_csd
[
EXT_CSD_HC_ERASE_GRP_SIZE
]);

497 
	`¥ötf
("[EXT_CSD] GeneralÖurpose 4 size : %xh (%d kbytes)\n",

498 (
ext_csd
[
EXT_CSD_GP4_SIZE_MULT
 + 0] |

499 
ext_csd
[
EXT_CSD_GP4_SIZE_MULT
 + 1] << 8 |

500 
ext_csd
[
EXT_CSD_GP4_SIZE_MULT
 + 2] << 16),

501 (
ext_csd
[
EXT_CSD_GP4_SIZE_MULT
 + 0] |

502 
ext_csd
[
EXT_CSD_GP4_SIZE_MULT
 + 1] << 8 |

503 
ext_csd
[
EXT_CSD_GP4_SIZE_MULT
 + 2] << 16) * 512 *

504 
ext_csd
[
EXT_CSD_HC_WP_GPR_SIZE
] *

505 
ext_csd
[
EXT_CSD_HC_ERASE_GRP_SIZE
]);

506 
	`¥ötf
("[EXT_CSD] Enh. userárea size : %xh (%d kbytes)\n",

507 (
ext_csd
[
EXT_CSD_ENH_SIZE_MULT
 + 0] |

508 
ext_csd
[
EXT_CSD_ENH_SIZE_MULT
 + 1] << 8 |

509 
ext_csd
[
EXT_CSD_ENH_SIZE_MULT
 + 2] << 16),

510 (
ext_csd
[
EXT_CSD_ENH_SIZE_MULT
 + 0] |

511 
ext_csd
[
EXT_CSD_ENH_SIZE_MULT
 + 1] << 8 |

512 
ext_csd
[
EXT_CSD_ENH_SIZE_MULT
 + 2] << 16) * 512 *

513 
ext_csd
[
EXT_CSD_HC_WP_GPR_SIZE
] *

514 
ext_csd
[
EXT_CSD_HC_ERASE_GRP_SIZE
]);

515 
	`¥ötf
("[EXT_CSD] Enh. userárea start: %xh\n",

516 (
ext_csd
[
EXT_CSD_ENH_START_ADDR
 + 0] |

517 
ext_csd
[
EXT_CSD_ENH_START_ADDR
 + 1] << 8 |

518 
ext_csd
[
EXT_CSD_ENH_START_ADDR
 + 2] << 16 |

519 
ext_csd
[
EXT_CSD_ENH_START_ADDR
 + 3]) << 24);

520 
	`¥ötf
("[EXT_CSD] Bad block mgmàmode: %xh\n", 
ext_csd
[
EXT_CSD_BADBLK_MGMT
]);

521 
	`¥ötf
("===========================================================\n");

522 
	}
}

525 
	$mmc_ˇrd_avaû
(
mmc_ho°
 *
ho°
)

527  
	`msdc_ˇrd_avaû
(
ho°
);

528 
	}
}

530 
	$mmc_ˇrd_¥Ÿe˘ed
(
mmc_ho°
 *
ho°
)

532  
	`msdc_ˇrd_¥Ÿe˘ed
(
ho°
);

533 
	}
}

535 
mmc_ho°
 *
	$mmc_gë_ho°
(
id
)

537  &
sd_ho°
[
id
];

538 
	}
}

540 
mmc_ˇrd
 *
	$mmc_gë_ˇrd
(
id
)

542  &
sd_ˇrd
[
id
];

543 
	}
}

545 
	$mmc_cmd
(
mmc_ho°
 *
ho°
, 
mmc_comm™d
 *
cmd
)

547 
îr
;

548 
ªåy
 = 
cmd
->
ªåõs
;

551 
îr
 = 
	`msdc_cmd
(
ho°
, 
cmd
);

552 i‡(
îr
 =
MMC_ERR_NONE
)

554 } 
ªåy
--);

556 
u32
 
vÆ
;

557 i‡(
îr
 =
MMC_ERR_TIMEOUT
) {

558 
	`¥ötf
("\n***** Dump Registers *****\n");

559 
	`¥ötf
("Off£t:\tVÆue\n", 
RALINK_MSDC_BASE
+0x0, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0x0));

560 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0x0, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0x0));

561 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0x4, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0x4));

562 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0x8, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0x8));

563 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0xc, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0xc));

564 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0x10, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0x10));

565 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0x14, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0x14));

566 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0x18, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0x18));

567 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0x1c, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0x1c));

568 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0x30, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0x30));

569 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0x34, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0x34));

570 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0x38, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0x38));

571 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0x3c, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0x3c));

572 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0x40, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0x40));

573 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0x44, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0x44));

574 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0x48, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0x48));

575 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0x4c, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0x4c));

576 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0x50, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0x50));

577 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0x58, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0x58));

578 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0x5c, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0x5c));

579 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0x60, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0x60));

580 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0x70, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0x70));

581 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0x74, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0x74));

582 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0x78, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0x78));

583 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0x7c, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0x7c));

584 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0x80, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0x80));

585 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0x90, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0x90));

586 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0x94, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0x94));

587 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0x98, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0x98));

588 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0x9c, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0x9c));

589 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0xa0, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0xa0));

590 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0xa4, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0xa4));

591 
	`¥ötf
("%x:\t%x\t“Ÿ deföed)\n", 
RALINK_MSDC_BASE
+0xa8, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0xa8));

592 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0xb0, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0xb0));

593 
	`¥ötf
("%x:\t%x\t“Ÿ deföed)\n", 
RALINK_MSDC_BASE
+0xb4, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0xb4));

594 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0xe0, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0xe0));

595 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0xe4, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0xe4));

596 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0xe8, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0xe8));

597 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0xec, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0xec));

598 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0xf0, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0xf0));

599 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0xf4, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0xf4));

600 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0xf8, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0xf8));

601 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0x100, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0x100));

602 
	`¥ötf
("%x:\t%x\n", 
RALINK_MSDC_BASE
+0x104, 
	`MSDC_READ32
(RALINK_MSDC_BASE+0x104));

603 
	`¥ötf
("\n***** Dump Registers *****\n");

607  
îr
;

608 
	}
}

610 
	$mmc_≠p_cmd
(
mmc_ho°
 *
ho°
, 
mmc_comm™d
 *
cmd
,

611 
u32
 
rˇ
, 
ªåõs
)

613 
îr
 = 
MMC_ERR_FAILED
;

614 
mmc_comm™d
 
≠pcmd
;

616 
≠pcmd
.
›code
 = 
MMC_CMD_APP_CMD
;

617 
≠pcmd
.
¨g
 = 
rˇ
 << 16;

618 
≠pcmd
.
r•typ
 = 
RESP_R1
;

619 
≠pcmd
.
ªåõs
 = 
CMD_RETRIES
;

620 
≠pcmd
.
timeout
 = 
CMD_TIMEOUT
;

623 
îr
 = 
	`mmc_cmd
(
ho°
, &
≠pcmd
);

625 i‡(
îr
 =
MMC_ERR_NONE
)

626 
îr
 = 
	`mmc_cmd
(
ho°
, 
cmd
);

627 i‡(
îr
 =
MMC_ERR_NONE
)

629 } 
ªåõs
--);

631  
îr
;

632 
	}
}

634 
u32
 
	$mmc_£À˘_vﬁège
(
mmc_ho°
 *
ho°
, 
u32
 
o¸
)

636 
bô
;

638 
o¸
 &
ho°
->
o¸_avaû
;

640 
bô
 = 
	`uffs
(
o¸
);

641 i‡(
bô
) {

642 
bô
 -= 1;

643 
o¸
 &3 << 
bô
;

645 
o¸
 = 0;

647  
o¸
;

648 
	}
}

650 
	$mmc_go_idÀ
(
mmc_ho°
 *
ho°
)

652 
mmc_comm™d
 
cmd
;

654 
cmd
.
›code
 = 
MMC_CMD_GO_IDLE_STATE
;

655 
cmd
.
r•typ
 = 
RESP_NONE
;

656 
cmd
.
¨g
 = 0;

657 
cmd
.
ªåõs
 = 
CMD_RETRIES
;

658 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

660  
	`mmc_cmd
(
ho°
, &
cmd
);

661 
	}
}

663 
	$mmc_go_úq_°©e
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
)

665 
mmc_comm™d
 
cmd
;

667 i‡(!(
ˇrd
->
csd
.
cmd˛ass
 & 
CCC_IO_MODE
)) {

668 
	`¥ötf
("[SD%d] C¨d d€¢'àsuµ‹àI/O modêf‹ IRQ sèã\n", 
ho°
->
id
);

669  
MMC_ERR_FAILED
;

672 
cmd
.
›code
 = 
MMC_CMD_GO_IRQ_STATE
;

673 
cmd
.
r•typ
 = 
RESP_R5
;

674 
cmd
.
¨g
 = 0;

675 
cmd
.
ªåõs
 = 
CMD_RETRIES
;

676 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

678  
	`mmc_cmd
(
ho°
, &
cmd
);

679 
	}
}

681 
	$mmc_go_öa˘ive
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
)

683 
mmc_comm™d
 
cmd
;

685 
cmd
.
›code
 = 
MMC_CMD_GO_INACTIVE_STATE
;

686 
cmd
.
r•typ
 = 
RESP_NONE
;

687 
cmd
.
¨g
 = 0;

688 
cmd
.
ªåõs
 = 
CMD_RETRIES
;

689 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

691  
	`mmc_cmd
(
ho°
, &
cmd
);

692 
	}
}

694 
	$mmc_go_¥e_idÀ
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
)

696 
mmc_comm™d
 
cmd
;

698 
cmd
.
›code
 = 
MMC_CMD_GO_IDLE_STATE
;

699 
cmd
.
r•typ
 = 
RESP_NONE
;

700 
cmd
.
¨g
 = 0xF0F0F0F0;

701 
cmd
.
ªåõs
 = 
CMD_RETRIES
;

702 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

704  
	`mmc_cmd
(
ho°
, &
cmd
);

705 
	}
}

707 
	$mmc_¶ìp_awake
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
, 
¶ìp
)

709 
mmc_comm™d
 
cmd
;

710 
u32
 
timeout
;

712 i‡(
ˇrd
->
øw_ext_csd
[
EXT_CSD_S_A_TIMEOUT
]) {

713 
timeout
 = ((1 << 
ˇrd
->
øw_ext_csd
[
EXT_CSD_S_A_TIMEOUT
]) * 100) / 1000000;

715 
timeout
 = 
CMD_TIMEOUT
;

718 
cmd
.
›code
 = 
MMC_CMD_SLEEP_AWAKE
;

719 
cmd
.
r•typ
 = 
RESP_R1B
;

720 
cmd
.
¨g
 = (
ˇrd
->
rˇ
 << 16Ë| (
¶ìp
 << 15);

721 
cmd
.
ªåõs
 = 
CMD_RETRIES
;

722 
cmd
.
timeout
 =Åimeout;

724  
	`mmc_cmd
(
ho°
, &
cmd
);

725 
	}
}

727 
	$mmc_£nd_°©us
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
, 
u32
 *
°©us
)

729 
îr
;

730 
mmc_comm™d
 
cmd
;

732 
cmd
.
›code
 = 
MMC_CMD_SEND_STATUS
;

733 
cmd
.
¨g
 = 
ˇrd
->
rˇ
 << 16;

734 
cmd
.
r•typ
 = 
RESP_R1
;

735 
cmd
.
ªåõs
 = 
CMD_RETRIES
;

736 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

738 
îr
 = 
	`mmc_cmd
(
ho°
, &
cmd
);

740 i‡(
îr
 =
MMC_ERR_NONE
) {

741 *
°©us
 = 
cmd
.
ª•
[0];

742 #i‡
MMC_DEBUG


743 
	`mmc_dump_ˇrd_°©us
(*
°©us
);

746  
îr
;

747 
	}
}

749 
	$mmc_£nd_io_›_c⁄d
(
mmc_ho°
 *
ho°
, 
u32
 
o¸
, u32 *
ro¸
)

751 
mmc_comm™d
 
cmd
;

752 
i
, 
îr
 = 0;

754 
	`BUG_ON
(!
ho°
);

756 
	`mem£t
(&
cmd
, 0, (
mmc_comm™d
));

758 
cmd
.
›code
 = 
SD_IO_SEND_OP_COND
;

759 
cmd
.
¨g
 = 
o¸
;

760 
cmd
.
r•typ
 = 
RESP_R4
;

761 
cmd
.
ªåõs
 = 
CMD_RETRIES
;

762 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

764 
i
 = 100; i; i--) {

765 
îr
 = 
	`mmc_cmd
(
ho°
, &
cmd
);

766 i‡(
îr
)

770 i‡(
o¸
 == 0)

773 i‡(
cmd
.
ª•
[0] & 
MMC_CARD_BUSY
)

776 
îr
 = 
MMC_ERR_TIMEOUT
;

778 
	`mdñay
(10);

781 i‡(
ro¸
)

782 *
ro¸
 = 
cmd
.
ª•
[0];

784  
îr
;

785 
	}
}

787 
	$mmc_£nd_if_c⁄d
(
mmc_ho°
 *
ho°
, 
u32
 
o¸
)

789 
mmc_comm™d
 
cmd
;

790 
îr
;

791 c⁄° 
u8
 
ã°_∑âîn
 = 0xAA;

792 
u8
 
ªsu…_∑âîn
;

800 
cmd
.
›code
 = 
SD_CMD_SEND_IF_COND
;

801 
cmd
.
¨g
 = ((
o¸
 & 0xFF8000Ë!0Ë<< 8 | 
ã°_∑âîn
;

802 
cmd
.
r•typ
 = 
RESP_R1
;

803 
cmd
.
ªåõs
 = 0;

804 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

806 
îr
 = 
	`mmc_cmd
(
ho°
, &
cmd
);

808 i‡(
îr
 !
MMC_ERR_NONE
)

809  
îr
;

811 
ªsu…_∑âîn
 = 
cmd
.
ª•
[0] & 0xFF;

813 i‡(
ªsu…_∑âîn
 !
ã°_∑âîn
)

814  
MMC_ERR_INVALID
;

816  
MMC_ERR_NONE
;

817 
	}
}

819 
	$mmc_£nd_›_c⁄d
(
mmc_ho°
 *
ho°
, 
u32
 
o¸
, u32 *
ro¸
)

821 
mmc_comm™d
 
cmd
;

822 
i
, 
îr
 = 0;

824 
cmd
.
›code
 = 
MMC_CMD_SEND_OP_COND
;

825 
cmd
.
¨g
 = 
o¸
;

826 
cmd
.
r•typ
 = 
RESP_R3
;

827 
cmd
.
ªåõs
 = 0;

828 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

830 
i
 = 100; i; i--) {

831 
îr
 = 
	`mmc_cmd
(
ho°
, &
cmd
);

832 i‡(
îr
)

836 i‡(
o¸
 == 0)

839 i‡(
cmd
.
ª•
[0] & 
MMC_CARD_BUSY
)

842 
îr
 = 
MMC_ERR_TIMEOUT
;

844 
	`mdñay
(10);

847 i‡(!
îr
 && 
ro¸
)

848 *
ro¸
 = 
cmd
.
ª•
[0];

850  
îr
;

851 
	}
}

853 
	$mmc_£nd_≠p_›_c⁄d
(
mmc_ho°
 *
ho°
, 
u32
 
o¸
, u32 *
ro¸
)

855 
mmc_comm™d
 
cmd
;

856 
i
, 
îr
 = 0;

858 
cmd
.
›code
 = 
SD_ACMD_SEND_OP_COND
;

859 
cmd
.
¨g
 = 
o¸
;

860 
cmd
.
r•typ
 = 
RESP_R3
;

861 
cmd
.
ªåõs
 = 
CMD_RETRIES
;

862 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

864 
i
 = 100; i; i--) {

865 
îr
 = 
	`mmc_≠p_cmd
(
ho°
, &
cmd
, 0, 
CMD_RETRIES
);

866 i‡(
îr
 !
MMC_ERR_NONE
)

869 i‡(
cmd
.
ª•
[0] & 
MMC_CARD_BUSY
 || 
o¸
 == 0)

872 
îr
 = 
MMC_ERR_TIMEOUT
;

874 
	`mdñay
(10);

877 i‡(
ro¸
)

878 *
ro¸
 = 
cmd
.
ª•
[0];

880  
îr
;

881 
	}
}

883 
	$mmc_Æl_£nd_cid
(
mmc_ho°
 *
ho°
, 
u32
 *
cid
)

885 
îr
;

886 
mmc_comm™d
 
cmd
;

889 
cmd
.
›code
 = 
MMC_CMD_ALL_SEND_CID
;

890 
cmd
.
¨g
 = 0;

891 
cmd
.
r•typ
 = 
RESP_R2
;

892 
cmd
.
ªåõs
 = 
CMD_RETRIES
;

893 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

895 
îr
 = 
	`mmc_cmd
(
ho°
, &
cmd
);

897 i‡(
îr
 !
MMC_ERR_NONE
)

898  
îr
;

900 
	`mem˝y
(
cid
, 
cmd
.
ª•
, (
u32
) * 4);

902  
MMC_ERR_NONE
;

903 
	}
}

905 
	$mmc_decode_cid
(
mmc_ˇrd
 *
ˇrd
)

907 
u32
 *
ª•
 = 
ˇrd
->
øw_cid
;

909 
	`mem£t
(&
ˇrd
->
cid
, 0, (
mmc_cid
));

911 i‡(
	`mmc_ˇrd_sd
(
ˇrd
)) {

916 
ˇrd
->
cid
.
m™fid
 = 
	`UNSTUFF_BITS
(
ª•
, 120, 8);

917 
ˇrd
->
cid
.
€mid
 = 
	`UNSTUFF_BITS
(
ª•
, 104, 16);

918 
ˇrd
->
cid
.
¥od_«me
[0] = 
	`UNSTUFF_BITS
(
ª•
, 96, 8);

919 
ˇrd
->
cid
.
¥od_«me
[1] = 
	`UNSTUFF_BITS
(
ª•
, 88, 8);

920 
ˇrd
->
cid
.
¥od_«me
[2] = 
	`UNSTUFF_BITS
(
ª•
, 80, 8);

921 
ˇrd
->
cid
.
¥od_«me
[3] = 
	`UNSTUFF_BITS
(
ª•
, 72, 8);

922 
ˇrd
->
cid
.
¥od_«me
[4] = 
	`UNSTUFF_BITS
(
ª•
, 64, 8);

923 
ˇrd
->
cid
.
hwªv
 = 
	`UNSTUFF_BITS
(
ª•
, 60, 4);

924 
ˇrd
->
cid
.
fwªv
 = 
	`UNSTUFF_BITS
(
ª•
, 56, 4);

925 
ˇrd
->
cid
.
£rül
 = 
	`UNSTUFF_BITS
(
ª•
, 24, 32);

926 
ˇrd
->
cid
.
yór
 = 
	`UNSTUFF_BITS
(
ª•
, 12, 8);

927 
ˇrd
->
cid
.
m⁄th
 = 
	`UNSTUFF_BITS
(
ª•
, 8, 4);

929 
ˇrd
->
cid
.
yór
 += 2000;

935 
ˇrd
->
csd
.
mmˇ_v¢
) {

938 
ˇrd
->
cid
.
m™fid
 = 
	`UNSTUFF_BITS
(
ª•
, 104, 24);

939 
ˇrd
->
cid
.
¥od_«me
[0] = 
	`UNSTUFF_BITS
(
ª•
, 96, 8);

940 
ˇrd
->
cid
.
¥od_«me
[1] = 
	`UNSTUFF_BITS
(
ª•
, 88, 8);

941 
ˇrd
->
cid
.
¥od_«me
[2] = 
	`UNSTUFF_BITS
(
ª•
, 80, 8);

942 
ˇrd
->
cid
.
¥od_«me
[3] = 
	`UNSTUFF_BITS
(
ª•
, 72, 8);

943 
ˇrd
->
cid
.
¥od_«me
[4] = 
	`UNSTUFF_BITS
(
ª•
, 64, 8);

944 
ˇrd
->
cid
.
¥od_«me
[5] = 
	`UNSTUFF_BITS
(
ª•
, 56, 8);

945 
ˇrd
->
cid
.
¥od_«me
[6] = 
	`UNSTUFF_BITS
(
ª•
, 48, 8);

946 
ˇrd
->
cid
.
hwªv
 = 
	`UNSTUFF_BITS
(
ª•
, 44, 4);

947 
ˇrd
->
cid
.
fwªv
 = 
	`UNSTUFF_BITS
(
ª•
, 40, 4);

948 
ˇrd
->
cid
.
£rül
 = 
	`UNSTUFF_BITS
(
ª•
, 16, 24);

949 
ˇrd
->
cid
.
m⁄th
 = 
	`UNSTUFF_BITS
(
ª•
, 12, 4);

950 
ˇrd
->
cid
.
yór
 = 
	`UNSTUFF_BITS
(
ª•
, 8, 4) + 1997;

956 
ˇrd
->
cid
.
m™fid
 = 
	`UNSTUFF_BITS
(
ª•
, 120, 8);

958 
ˇrd
->
cid
.
€mid
 = 
	`UNSTUFF_BITS
(
ª•
, 104, 16);

959 
ˇrd
->
cid
.
¥od_«me
[0] = 
	`UNSTUFF_BITS
(
ª•
, 96, 8);

960 
ˇrd
->
cid
.
¥od_«me
[1] = 
	`UNSTUFF_BITS
(
ª•
, 88, 8);

961 
ˇrd
->
cid
.
¥od_«me
[2] = 
	`UNSTUFF_BITS
(
ª•
, 80, 8);

962 
ˇrd
->
cid
.
¥od_«me
[3] = 
	`UNSTUFF_BITS
(
ª•
, 72, 8);

963 
ˇrd
->
cid
.
¥od_«me
[4] = 
	`UNSTUFF_BITS
(
ª•
, 64, 8);

964 
ˇrd
->
cid
.
¥od_«me
[5] = 
	`UNSTUFF_BITS
(
ª•
, 56, 8);

965 
ˇrd
->
cid
.
£rül
 = 
	`UNSTUFF_BITS
(
ª•
, 16, 32);

966 
ˇrd
->
cid
.
m⁄th
 = 
	`UNSTUFF_BITS
(
ª•
, 12, 4);

967 
ˇrd
->
cid
.
yór
 = 
	`UNSTUFF_BITS
(
ª•
, 8, 4) + 1997;

971 
	`¥ötf
("[SD%d] Unknown MMCA version %d\n",

972 
	`mmc_ˇrd_id
(
ˇrd
), c¨d->
csd
.
mmˇ_v¢
);

976 
	}
}

978 
	$mmc_decode_csd
(
mmc_ˇrd
 *
ˇrd
)

980 
mmc_csd
 *
csd
 = &
ˇrd
->csd;

981 
e
, 
m
, 
csd_°ru˘
;

982 
u32
 *
ª•
 = 
ˇrd
->
øw_csd
;

984 i‡(
	`mmc_ˇrd_sd
(
ˇrd
)) {

985 
csd_°ru˘
 = 
	`UNSTUFF_BITS
(
ª•
, 126, 2);

986 
csd
->
csd_°ru˘
 = csd_struct;

988 
csd_°ru˘
) {

990 
m
 = 
	`UNSTUFF_BITS
(
ª•
, 115, 4);

991 
e
 = 
	`UNSTUFF_BITS
(
ª•
, 112, 3);

992 
csd
->
ècc_ns
 = (
ècc_exp
[
e
] * 
ècc_m™t
[
m
] + 9) / 10;

993 
csd
->
ècc_˛ks
 = 
	`UNSTUFF_BITS
(
ª•
, 104, 8) * 100;

995 
m
 = 
	`UNSTUFF_BITS
(
ª•
, 99, 4);

996 
e
 = 
	`UNSTUFF_BITS
(
ª•
, 96, 3);

997 
csd
->
max_då
 = 
å™_exp
[
e
] * 
å™_m™t
[
m
];

998 
csd
->
cmd˛ass
 = 
	`UNSTUFF_BITS
(
ª•
, 84, 12);

1000 
e
 = 
	`UNSTUFF_BITS
(
ª•
, 47, 3);

1001 
m
 = 
	`UNSTUFF_BITS
(
ª•
, 62, 12);

1002 
csd
->
ˇ∑côy
 = (1 + 
m
Ë<< (
e
 + 2);

1004 
csd
->
ªad_blkbôs
 = 
	`UNSTUFF_BITS
(
ª•
, 80, 4);

1005 
csd
->
ªad_∑πül
 = 
	`UNSTUFF_BITS
(
ª•
, 79, 1);

1006 
csd
->
wrôe_mißlign
 = 
	`UNSTUFF_BITS
(
ª•
, 78, 1);

1007 
csd
->
ªad_mißlign
 = 
	`UNSTUFF_BITS
(
ª•
, 77, 1);

1008 
csd
->
r2w_Á˘‹
 = 
	`UNSTUFF_BITS
(
ª•
, 26, 3);

1009 
csd
->
wrôe_blkbôs
 = 
	`UNSTUFF_BITS
(
ª•
, 22, 4);

1010 
csd
->
wrôe_∑πül
 = 
	`UNSTUFF_BITS
(
ª•
, 21, 1);

1012 
csd
->
îa£_blk_í
 = 
	`UNSTUFF_BITS
(
ª•
, 46, 1);

1013 
csd
->
îa£_s˘sz
 = 
	`UNSTUFF_BITS
(
ª•
, 39, 7) + 1;

1014 
csd
->
wrôe_¥Ÿ_gΩsz
 = 
	`UNSTUFF_BITS
(
ª•
, 32, 7);

1015 
csd
->
wrôe_¥Ÿ_gΩ
 = 
	`UNSTUFF_BITS
(
ª•
, 31, 1);

1016 
csd
->
≥rm_wr_¥Ÿ
 = 
	`UNSTUFF_BITS
(
ª•
, 13, 1);

1017 
csd
->
tmp_wr_¥Ÿ
 = 
	`UNSTUFF_BITS
(
ª•
, 12, 1);

1018 
csd
->
c›y
 = 
	`UNSTUFF_BITS
(
ª•
, 14, 1);

1019 
csd
->
d§
 = 
	`UNSTUFF_BITS
(
ª•
, 76, 1);

1029 
	`mmc_ˇrd_£t_blockaddr
(
ˇrd
);

1031 
csd
->
ècc_ns
 = 0;

1032 
csd
->
ècc_˛ks
 = 0;

1034 
m
 = 
	`UNSTUFF_BITS
(
ª•
, 99, 4);

1035 
e
 = 
	`UNSTUFF_BITS
(
ª•
, 96, 3);

1036 
csd
->
max_då
 = 
å™_exp
[
e
] * 
å™_m™t
[
m
];

1037 
csd
->
cmd˛ass
 = 
	`UNSTUFF_BITS
(
ª•
, 84, 12);

1039 
m
 = 
	`UNSTUFF_BITS
(
ª•
, 48, 22);

1040 
csd
->
ˇ∑côy
 = (1 + 
m
) << 10;

1042 
csd
->
ªad_blkbôs
 = 9;

1043 
csd
->
ªad_∑πül
 = 0;

1044 
csd
->
wrôe_mißlign
 = 0;

1045 
csd
->
ªad_mißlign
 = 0;

1046 
csd
->
r2w_Á˘‹
 = 4;

1047 
csd
->
wrôe_blkbôs
 = 9;

1048 
csd
->
wrôe_∑πül
 = 0;

1050 
csd
->
îa£_blk_í
 = 
	`UNSTUFF_BITS
(
ª•
, 46, 1);

1051 
csd
->
îa£_s˘sz
 = 
	`UNSTUFF_BITS
(
ª•
, 39, 7) + 1;

1052 
csd
->
wrôe_¥Ÿ_gΩsz
 = 
	`UNSTUFF_BITS
(
ª•
, 32, 7);

1053 
csd
->
wrôe_¥Ÿ_gΩ
 = 
	`UNSTUFF_BITS
(
ª•
, 31, 1);

1054 
csd
->
≥rm_wr_¥Ÿ
 = 
	`UNSTUFF_BITS
(
ª•
, 13, 1);

1055 
csd
->
tmp_wr_¥Ÿ
 = 
	`UNSTUFF_BITS
(
ª•
, 12, 1);

1056 
csd
->
c›y
 = 
	`UNSTUFF_BITS
(
ª•
, 14, 1);

1057 
csd
->
d§
 = 
	`UNSTUFF_BITS
(
ª•
, 76, 1);

1061 
	`¥ötf
("[SD%d] Unknow¿CSD vî %d\n", 
	`mmc_ˇrd_id
(
ˇrd
), 
csd_°ru˘
);

1062  
MMC_ERR_INVALID
;

1069 
csd_°ru˘
 = 
	`UNSTUFF_BITS
(
ª•
, 126, 2);

1071 i‡(
csd_°ru˘
 !
CSD_STRUCT_VER_1_0
 && csd_°ru˘ !
CSD_STRUCT_VER_1_1


1072 && 
csd_°ru˘
 !
CSD_STRUCT_VER_1_2
 && csd_°ru˘ !
CSD_STRUCT_EXT_CSD
) {

1073 
	`¥ötf
("[SD%d] Unknow¿CSD vî %d\n", 
	`mmc_ˇrd_id
(
ˇrd
), 
csd_°ru˘
);

1074  
MMC_ERR_INVALID
;

1077 
csd
->
csd_°ru˘
 = csd_struct;

1078 
csd
->
mmˇ_v¢
 = 
	`UNSTUFF_BITS
(
ª•
, 122, 4);

1079 
m
 = 
	`UNSTUFF_BITS
(
ª•
, 115, 4);

1080 
e
 = 
	`UNSTUFF_BITS
(
ª•
, 112, 3);

1081 
csd
->
ècc_ns
 = (
ècc_exp
[
e
] * 
ècc_m™t
[
m
] + 9) / 10;

1082 
csd
->
ècc_˛ks
 = 
	`UNSTUFF_BITS
(
ª•
, 104, 8) * 100;

1084 
m
 = 
	`UNSTUFF_BITS
(
ª•
, 99, 4);

1085 
e
 = 
	`UNSTUFF_BITS
(
ª•
, 96, 3);

1086 
csd
->
max_då
 = 
å™_exp
[
e
] * 
mmc_å™_m™t
[
m
];

1087 
csd
->
cmd˛ass
 = 
	`UNSTUFF_BITS
(
ª•
, 84, 12);

1089 
e
 = 
	`UNSTUFF_BITS
(
ª•
, 47, 3);

1090 
m
 = 
	`UNSTUFF_BITS
(
ª•
, 62, 12);

1091 
csd
->
ˇ∑côy
 = (1 + 
m
Ë<< (
e
 + 2);

1093 
csd
->
ªad_blkbôs
 = 
	`UNSTUFF_BITS
(
ª•
, 80, 4);

1094 
csd
->
ªad_∑πül
 = 
	`UNSTUFF_BITS
(
ª•
, 79, 1);

1095 
csd
->
wrôe_mißlign
 = 
	`UNSTUFF_BITS
(
ª•
, 78, 1);

1096 
csd
->
ªad_mißlign
 = 
	`UNSTUFF_BITS
(
ª•
, 77, 1);

1097 
csd
->
r2w_Á˘‹
 = 
	`UNSTUFF_BITS
(
ª•
, 26, 3);

1098 
csd
->
wrôe_blkbôs
 = 
	`UNSTUFF_BITS
(
ª•
, 22, 4);

1099 
csd
->
wrôe_∑πül
 = 
	`UNSTUFF_BITS
(
ª•
, 21, 1);

1101 
csd
->
îa£_s˘sz
 = (
	`UNSTUFF_BITS
(
ª•
, 42, 5) + 1) * (UNSTUFF_BITS(resp, 37, 5) + 1);

1102 
csd
->
wrôe_¥Ÿ_gΩsz
 = 
	`UNSTUFF_BITS
(
ª•
, 32, 7);

1103 
csd
->
wrôe_¥Ÿ_gΩ
 = 
	`UNSTUFF_BITS
(
ª•
, 31, 1);

1104 
csd
->
≥rm_wr_¥Ÿ
 = 
	`UNSTUFF_BITS
(
ª•
, 13, 1);

1105 
csd
->
tmp_wr_¥Ÿ
 = 
	`UNSTUFF_BITS
(
ª•
, 12, 1);

1106 
csd
->
c›y
 = 
	`UNSTUFF_BITS
(
ª•
, 14, 1);

1107 
csd
->
d§
 = 
	`UNSTUFF_BITS
(
ª•
, 76, 1);

1110 #i‡
MMC_DEBUG


1111 
	`mmc_dump_csd
(
ˇrd
);

1115 
	}
}

1117 
	$mmc_decode_ext_csd
(
mmc_ˇrd
 *
ˇrd
)

1119 
u8
 *
ext_csd
 = &
ˇrd
->
øw_ext_csd
[0];

1121 
ˇrd
->
ext_csd
.
£˘‹s
 =

1122 
ext_csd
[
EXT_CSD_SEC_CNT
 + 0] << 0 |

1123 
ext_csd
[
EXT_CSD_SEC_CNT
 + 1] << 8 |

1124 
ext_csd
[
EXT_CSD_SEC_CNT
 + 2] << 16 |

1125 
ext_csd
[
EXT_CSD_SEC_CNT
 + 3] << 24;

1127 
ˇrd
->
ext_csd
.
ªv
 =Éxt_csd[
EXT_CSD_REV
];

1128 
ˇrd
->
ext_csd
.
hc_îa£_gΩ_sz
 =Éxt_csd[
EXT_CSD_HC_ERASE_GRP_SIZE
] * 512 * 1024;

1129 
ˇrd
->
ext_csd
.
hc_wp_gΩ_sz
 =Éxt_csd[
EXT_CSD_HC_WP_GPR_SIZE
] *Éxt_csd[
EXT_CSD_HC_ERASE_GRP_SIZE
] * 512 * 1024;

1130 
ˇrd
->
ext_csd
.
åim_tmo_ms
 =Éxt_csd[
EXT_CSD_TRIM_MULT
] * 300;

1131 
ˇrd
->
ext_csd
.
boŸ_öfo
 =Éxt_csd[
EXT_CSD_BOOT_INFO
];

1132 
ˇrd
->
ext_csd
.
boŸ_∑π_sz
 =Éxt_csd[
EXT_CSD_BOOT_SIZE_MULT
] * 128 * 1024;

1133 
ˇrd
->
ext_csd
.
ac˚ss_sz
 = (ext_csd[
EXT_CSD_ACC_SIZE
] & 0xf) * 512;

1134 
ˇrd
->
ext_csd
.
Ωmb_sz
 =Éxt_csd[
EXT_CSD_RPMB_SIZE_MULT
] * 128 * 1024;

1135 
ˇrd
->
ext_csd
.
îa£d_mem_c⁄t
 =Éxt_csd[
EXT_CSD_ERASED_MEM_CONT
];

1136 
ˇrd
->
ext_csd
.
∑π_í
 =Éxt_csd[
EXT_CSD_PART_SUPPORT
] & 
EXT_CSD_PART_SUPPORT_PART_EN
 ? 1 : 0;

1137 
ˇrd
->
ext_csd
.
íh_©å_í
 =Éxt_csd[
EXT_CSD_PART_SUPPORT
] & 
EXT_CSD_PART_SUPPORT_ENH_ATTR_EN
 ? 1 : 0;

1138 
ˇrd
->
ext_csd
.
íh_°¨t_addr
 =

1139 (
ext_csd
[
EXT_CSD_ENH_START_ADDR
 + 0] |

1140 
ext_csd
[
EXT_CSD_ENH_START_ADDR
 + 1] << 8 |

1141 
ext_csd
[
EXT_CSD_ENH_START_ADDR
 + 2] << 16 |

1142 
ext_csd
[
EXT_CSD_ENH_START_ADDR
 + 3] << 24);

1143 
ˇrd
->
ext_csd
.
íh_sz
 =

1144 (
ext_csd
[
EXT_CSD_ENH_SIZE_MULT
 + 0] |

1145 
ext_csd
[
EXT_CSD_ENH_SIZE_MULT
 + 1] << 8 |

1146 
ext_csd
[
EXT_CSD_ENH_SIZE_MULT
 + 2] << 16) * 512 * 1024 *

1147 
ext_csd
[
EXT_CSD_HC_WP_GPR_SIZE
] *Éxt_csd[
EXT_CSD_HC_ERASE_GRP_SIZE
];

1149 i‡(
ˇrd
->
ext_csd
.
£˘‹s
)

1150 
	`mmc_ˇrd_£t_blockaddr
(
ˇrd
);

1152 i‡((
ext_csd
[
EXT_CSD_CARD_TYPE
] & 
EXT_CSD_CARD_TYPE_DDR_52_1_2V
) ||

1153 (
ext_csd
[
EXT_CSD_CARD_TYPE
] & 
EXT_CSD_CARD_TYPE_DDR_52
)) {

1154 
ˇrd
->
ext_csd
.
ddr_suµ‹t
 = 1;

1155 
ˇrd
->
ext_csd
.
hs_max_då
 = 52000000;

1156 } i‡(
ext_csd
[
EXT_CSD_CARD_TYPE
] & 
EXT_CSD_CARD_TYPE_52
) {

1157 
ˇrd
->
ext_csd
.
hs_max_då
 = 52000000;

1158 } i‡((
ext_csd
[
EXT_CSD_CARD_TYPE
] & 
EXT_CSD_CARD_TYPE_26
)) {

1159 
ˇrd
->
ext_csd
.
hs_max_då
 = 26000000;

1162 
	`¥ötf
("[SD%d] MMCv4 buàHS unsuµ‹ãd\n", 
ˇrd
->
ho°
->
id
);

1165 #i‡
MMC_DEBUG


1166 
	`mmc_dump_ext_csd
(
ˇrd
);

1169 
	}
}

1171 
	$mmc_de£À˘_Æl_ˇrd
(
mmc_ho°
 *
ho°
)

1173 
îr
;

1174 
mmc_comm™d
 
cmd
;

1176 
cmd
.
›code
 = 
MMC_CMD_SELECT_CARD
;

1177 
cmd
.
¨g
 = 0;

1178 
cmd
.
r•typ
 = 
RESP_NONE
;

1179 
cmd
.
ªåõs
 = 
CMD_RETRIES
;

1180 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

1182 
îr
 = 
	`mmc_cmd
(
ho°
, &
cmd
);

1184  
îr
;

1185 
	}
}

1187 
	$mmc_£À˘_ˇrd
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
)

1189 
îr
;

1190 
mmc_comm™d
 
cmd
;

1192 
cmd
.
›code
 = 
MMC_CMD_SELECT_CARD
;

1193 
cmd
.
¨g
 = 
ˇrd
->
rˇ
 << 16;

1194 
cmd
.
r•typ
 = 
RESP_R1B
;

1195 
cmd
.
ªåõs
 = 
CMD_RETRIES
;

1196 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

1198 
îr
 = 
	`mmc_cmd
(
ho°
, &
cmd
);

1200  
îr
;

1201 
	}
}

1203 
	$mmc_£nd_ªœtive_addr
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
, *
rˇ
)

1205 
îr
;

1206 
mmc_comm™d
 
cmd
;

1208 
	`mem£t
(&
cmd
, 0, (
mmc_comm™d
));

1210 i‡(
	`mmc_ˇrd_mmc
(
ˇrd
)) {

1211 
cmd
.
›code
 = 
MMC_CMD_SET_RELATIVE_ADDR
;

1212 
cmd
.
¨g
 = *
rˇ
 << 16;

1213 
cmd
.
r•typ
 = 
RESP_R1
;

1214 
cmd
.
ªåõs
 = 
CMD_RETRIES
;

1215 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

1217 
cmd
.
›code
 = 
SD_CMD_SEND_RELATIVE_ADDR
;

1218 
cmd
.
¨g
 = 0;

1219 
cmd
.
r•typ
 = 
RESP_R6
;

1220 
cmd
.
ªåõs
 = 
CMD_RETRIES
;

1221 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

1223 
îr
 = 
	`mmc_cmd
(
ho°
, &
cmd
);

1224 i‡((
îr
 =
MMC_ERR_NONE
Ë&& !
	`mmc_ˇrd_mmc
(
ˇrd
))

1225 *
rˇ
 = 
cmd
.
ª•
[0] >> 16;

1227  
îr
;

1228 
	}
}

1230 
	$mmc_£nd_tunög_blk
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
, 
u32
 *
buf
)

1232 
îr
;

1233 
mmc_comm™d
 
cmd
;

1235 
cmd
.
›code
 = 
SD_CMD_SEND_TUNING_BLOCK
;

1236 
cmd
.
¨g
 = 0;

1237 
cmd
.
r•typ
 = 
RESP_R1
;

1238 
cmd
.
ªåõs
 = 
CMD_RETRIES
;

1239 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

1241 
	`msdc_£t_blknum
(
ho°
, 1);

1242 
	`msdc_£t_blkÀn
(
ho°
, 64);

1243 
	`msdc_£t_timeout
(
ho°
, 100000000, 0);

1244 
îr
 = 
	`mmc_cmd
(
ho°
, &
cmd
);

1245 i‡(
îr
 !
MMC_ERR_NONE
)

1246 
out
;

1248 
îr
 = 
	`msdc_pio_ªad
(
ho°
, 
buf
, 64);

1249 i‡(
îr
 !
MMC_ERR_NONE
)

1250 
out
;

1252 #i‡
MMC_DEBUG


1253 
	`mmc_dump_tunög_blk
((
u8
*)
buf
);

1256 
out
:

1257  
îr
;

1258 
	}
}

1260 
	$mmc_swôch
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
,

1261 
u8
 
£t
, u8 
ödex
, u8 
vÆue
)

1263 
îr
;

1264 
u32
 
°©us
;

1265 
mmc_comm™d
 
cmd
;

1267 
cmd
.
›code
 = 
MMC_CMD_SWITCH
;

1268 
cmd
.
¨g
 = (
MMC_SWITCH_MODE_WRITE_BYTE
 << 24) |

1269 (
ödex
 << 16Ë| (
vÆue
 << 8Ë| 
£t
;

1270 
cmd
.
r•typ
 = 
RESP_R1B
;

1271 
cmd
.
ªåõs
 = 
CMD_RETRIES
;

1272 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

1274 
îr
 = 
	`mmc_cmd
(
ho°
, &
cmd
);

1276 i‡(
îr
 !
MMC_ERR_NONE
)

1277  
îr
;

1280 
îr
 = 
	`mmc_£nd_°©us
(
ho°
, 
ˇrd
, &
°©us
);

1281 i‡(
îr
) {

1282 
	`¥ötf
("[SD%d] FaûÅÿ£nd sètu†%d\n", 
ho°
->
id
, 
îr
);

1285 i‡(
°©us
 & 
R1_SWITCH_ERROR
) {

1286 
	`¥ötf
("[SD%d] swôchÉº‹.árg(0x%x)\n", 
ho°
->
id
, 
cmd
.
¨g
);

1287  
MMC_ERR_FAILED
;

1289 } !(
°©us
 & 
R1_READY_FOR_DATA
Ë|| (
	`R1_CURRENT_STATE
(status) == 7));

1291  
îr
;

1292 
	}
}

1294 
	$mmc_sd_swôch
(
mmc_ho°
 *
ho°
,

1295 
mmc_ˇrd
 *
ˇrd
,

1296 
mode
, 
group
, 
u8
 
vÆue
, 
mmc_swôch_t
 *
ª•
)

1298 
îr
 = 
MMC_ERR_FAILED
;

1299 
mmc_comm™d
 
cmd
;

1300 
u32
 *
°s
 = (u32 *)
ª•
;

1301 
ªåõs
;

1303 
mode
 = !!mode;

1304 
vÆue
 &= 0xF;

1307 
cmd
.
›code
 = 
SD_CMD_SWITCH
;

1308 
cmd
.
¨g
 = 
mode
 << 31 | 0x00FFFFFF;

1309 
cmd
.
¨g
 &~(0xF << (
group
 * 4));

1310 
cmd
.
¨g
 |
vÆue
 << (
group
 * 4);

1311 
cmd
.
r•typ
 = 
RESP_R1
;

1312 
cmd
.
ªåõs
 = 
CMD_RETRIES
;

1313 
cmd
.
timeout
 = 100;

1315 
	`msdc_£t_blknum
(
ho°
, 1);

1316 
	`msdc_£t_blkÀn
(
ho°
, 64);

1317 
	`msdc_£t_timeout
(
ho°
, 100000000, 0);

1318 
îr
 = 
	`mmc_cmd
(
ho°
, &
cmd
);

1320 i‡(
îr
 !
MMC_ERR_NONE
)

1321 
out
;

1323 
ªåõs
 = 50000;

1326 
îr
 = 
	`msdc_pio_ªad
(
ho°
, 
°s
, 64);

1327 i‡(
îr
 !
MMC_ERR_NONE
)

1328 
out
;

1330 #i‡
MMC_DEBUG


1332 
i
;

1333 
u8
 *
byã
 = (u8*)&
°s
[0];

1339 
i
 = 0; i < 4; i++) {

1340 
	`MSG
(
RSP
, " [%d-%d] %xh %xh %xh %xh\n",

1341 ((3 - 
i
 + 1) << 7) - 1, (3 - i) << 7,

1342 
°s
[(
i
 << 2) + 0], sts[(i << 2) + 1],

1343 
°s
[(
i
 << 2) + 2], sts[(i << 2) + 3]);

1345 
i
 = 0; i < 8; i++) {

1346 
	`MSG
(
RSP
, " [%d-%d] %xh %xh %xh %xh %xh %xh %xh %xh\n",

1347 ((8 - 
i
) << 6) - 1, (8 - i - 1) << 6,

1348 
byã
[(
i
 << 3) + 0], byte[(i << 3) + 1],

1349 
byã
[(
i
 << 3) + 2], byte[(i << 3) + 3],

1350 
byã
[(
i
 << 3) + 4], byte[(i << 3) + 5],

1351 
byã
[(
i
 << 3) + 6], byte[(i << 3) + 7]);

1356 
out
:

1357  
îr
;

1358 
	}
}

1360 
	$mmc_˘æ_•ìd_˛ass
(
mmc_ho°
 *
ho°
, 
u32
 
scc
)

1362 
mmc_comm™d
 
cmd
;

1364 
cmd
.
›code
 = 
SD_CMD_SPEED_CLASS_CTRL
;

1365 
cmd
.
¨g
 = 
scc
 << 28;

1366 
cmd
.
r•typ
 = 
RESP_R1B
;

1367 
cmd
.
ªåõs
 = 
CMD_RETRIES
;

1368 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

1370  
	`mmc_cmd
(
ho°
, &
cmd
);

1371 
	}
}

1373 
	$mmc_swôch_vﬁt
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
)

1375 
îr
;

1376 
mmc_comm™d
 
cmd
;

1379 
cmd
.
›code
 = 
SD_CMD_VOL_SWITCH
;

1380 
cmd
.
¨g
 = 0;

1381 
cmd
.
r•typ
 = 
RESP_R1
;

1382 
cmd
.
ªåõs
 = 
CMD_RETRIES
;

1383 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

1385 
îr
 = 
	`mmc_cmd
(
ho°
, &
cmd
);

1387 i‡(
îr
 =
MMC_ERR_NONE
)

1388 
îr
 = 
	`msdc_swôch_vﬁt
(
ho°
, 
MMC_VDD_18_19
);

1390  
îr
;

1391 
	}
}

1393 
	$mmc_swôch_hs
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
)

1395 
îr
;

1396 
u8
 
°©us
[64];

1397 
vÆ
 = 
MMC_SWITCH_MODE_SDR25
;

1399 
îr
 = 
	`mmc_sd_swôch
(
ho°
, 
ˇrd
, 1, 0, 
vÆ
, (
mmc_swôch_t
*)&
°©us
[0]);

1401 i‡(
îr
 !
MMC_ERR_NONE
)

1402 
out
;

1404 i‡((
°©us
[16] & 0xF) != 1) {

1405 
	`¥ötf
("[SD%d] HS modênŸ suµ‹ãd!\n", 
ho°
->
id
);

1406 
îr
 = 
MMC_ERR_FAILED
;

1408 
	`¥ötf
("[SD%d] SwôchÅÿHS mode!\n", 
ho°
->
id
);

1409 
	`mmc_ˇrd_£t_high•ìd
(
ˇrd
);

1412 
out
:

1413  
îr
;

1414 
	}
}

1416 
	$mmc_swôch_uhs1
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
, 
mode
)

1418 
îr
;

1419 
u8
 
°©us
[64];

1420 
vÆ
;

1421 c⁄° *
smode
[] = { "SDR12", "SDR25", "SDR50", "SDR104", "DDR50" };

1423 
îr
 = 
	`mmc_sd_swôch
(
ho°
, 
ˇrd
, 1, 0, 
mode
, (
mmc_swôch_t
*)&
°©us
[0]);

1425 i‡(
îr
 !
MMC_ERR_NONE
)

1426 
out
;

1428 i‡((
°©us
[16] & 0xFË!
mode
) {

1429 
	`¥ötf
("[SD%d] UHS-1 %†modênŸ suµ‹ãd!\n", 
ho°
->
id
, 
smode
[
mode
]);

1430 
îr
 = 
MMC_ERR_FAILED
;

1432 
ˇrd
->
uhs_mode
 = 
mode
;

1433 
	`mmc_ˇrd_£t_uhs1
(
ˇrd
);

1434 
	`¥ötf
("[SD%d] SwôchÅÿUHS-1 %†mode!\n", 
ho°
->
id
, 
smode
[
mode
]);

1435 i‡(
mode
 =
MMC_SWITCH_MODE_DDR50
) {

1436 
	`mmc_ˇrd_£t_ddr
(
ˇrd
);

1440 
out
:

1441  
îr
;

1442 
	}
}

1444 
	$mmc_swôch_drv_ty≥
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
, 
vÆ
)

1446 
îr
;

1447 
u8
 
°©us
[64];

1448 c⁄° *
ty≥
[] = { "TYPE-B", "TYPE-A", "TYPE-C", "TYPE-D" };

1450 
îr
 = 
	`mmc_sd_swôch
(
ho°
, 
ˇrd
, 1, 2, 
vÆ
, (
mmc_swôch_t
*)&
°©us
[0]);

1452 i‡(
îr
 !
MMC_ERR_NONE
)

1453 
out
;

1455 i‡((
°©us
[15] & 0xFË!
vÆ
) {

1456 
	`¥ötf
("[SD%d] UHS-1 %†drvÇŸ suµ‹ãd!\n", 
ho°
->
id
, 
ty≥
[
vÆ
]);

1457 
îr
 = 
MMC_ERR_FAILED
;

1459 
	`¥ötf
("[SD%d] SwôchÅÿUHS-1 %†drv!\n", 
ho°
->
id
, 
ty≥
[
vÆ
]);

1462 
out
:

1463  
îr
;

1464 
	}
}

1466 
	$mmc_swôch_max_cur
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
, 
vÆ
)

1468 
îr
;

1469 
u8
 
°©us
[64];

1470 c⁄° *
cuº
[] = { "200mA", "400mA", "600mA", "800mA" };

1472 
îr
 = 
	`mmc_sd_swôch
(
ho°
, 
ˇrd
, 1, 3, 
vÆ
, (
mmc_swôch_t
*)&
°©us
[0]);

1474 i‡(
îr
 !
MMC_ERR_NONE
)

1475 
out
;

1477 i‡(((
°©us
[15] >> 4Ë& 0xFË!
vÆ
) {

1478 
	`¥ötf
("[SD%d] UHS-1 %†max. cuºíànŸ suµ‹ãd!\n", 
ho°
->
id
, 
cuº
[
vÆ
]);

1479 
îr
 = 
MMC_ERR_FAILED
;

1481 
	`¥ötf
("[SD%d] SwôchÅÿUHS-1 %†max. cuºít!\n", 
ho°
->
id
, 
cuº
[
vÆ
]);

1484 
out
:

1485  
îr
;

1486 
	}
}

1488 
	$mmc_ªad_csds
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
)

1490 
îr
;

1491 
mmc_comm™d
 
cmd
;

1493 
cmd
.
›code
 = 
MMC_CMD_SEND_CSD
;

1494 
cmd
.
¨g
 = 
ˇrd
->
rˇ
 << 16;

1495 
cmd
.
r•typ
 = 
RESP_R2
;

1496 
cmd
.
ªåõs
 = 
CMD_RETRIES
;

1497 
cmd
.
timeout
 = 
CMD_TIMEOUT
 * 100;

1499 
îr
 = 
	`mmc_cmd
(
ho°
, &
cmd
);

1500 i‡(
îr
 =
MMC_ERR_NONE
)

1501 
	`mem˝y
(&
ˇrd
->
øw_csd
, &
cmd
.
ª•
[0], (
u32
) * 4);

1502  
îr
;

1503 
	}
}

1505 
	$mmc_ªad_s¸s
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
)

1507 
îr
 = 
MMC_ERR_NONE
;

1508 
ªåõs
;

1509 
mmc_comm™d
 
cmd
;

1510 
sd_s¸
 *
s¸
 = &
ˇrd
->scr;

1511 
u32
 
ª•
[4];

1512 
u32
 
tmp
;

1514 
	`msdc_£t_blknum
(
ho°
, 1);

1515 
	`msdc_£t_blkÀn
(
ho°
, 8);

1516 
	`msdc_£t_timeout
(
ho°
, 100000000, 0);

1518 
cmd
.
›code
 = 
SD_ACMD_SEND_SCR
;

1519 
cmd
.
¨g
 = 0;

1520 
cmd
.
r•typ
 = 
RESP_R1
;

1521 
cmd
.
ªåõs
 = 
CMD_RETRIES
;

1522 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

1524 
	`mmc_≠p_cmd
(
ho°
, &
cmd
, 
ˇrd
->
rˇ
, 
CMD_RETRIES
);

1525 i‡((
îr
 !
MMC_ERR_NONE
Ë|| !(
cmd
.
ª•
[0] & 
R1_APP_CMD
))

1526  
MMC_ERR_FAILED
;

1528 
ªåõs
 = 50000;

1531 
îr
 = 
	`msdc_pio_ªad
(
ho°
, 
ˇrd
->
øw_s¸
, 8);

1532 i‡(
îr
 !
MMC_ERR_NONE
)

1533  
îr
;

1535 
	`MSG
(
INF
, "[SD%d] SCR: %x %x (øw)\n", 
ho°
->
id
, 
ˇrd
->
øw_s¸
[0], card->raw_scr[1]);

1537 
tmp
 = 
	`¡ohl
(
ˇrd
->
øw_s¸
[0]);

1538 
ˇrd
->
øw_s¸
[0] = 
	`¡ohl
(card->raw_scr[1]);

1539 
ˇrd
->
øw_s¸
[1] = 
tmp
;

1541 
	`MSG
(
INF
, "[SD%d] SCR: %x %x (¡ohl)\n", 
ho°
->
id
, 
ˇrd
->
øw_s¸
[0], card->raw_scr[1]);

1543 
ª•
[2] = 
ˇrd
->
øw_s¸
[1];

1544 
ª•
[3] = 
ˇrd
->
øw_s¸
[0];

1546 i‡(
	`UNSTUFF_BITS
(
ª•
, 60, 4) != 0) {

1547 
	`¥ötf
("[SD%d] Unknown SCR ver %d\n",

1548 
	`mmc_ˇrd_id
(
ˇrd
), 
	`UNSTUFF_BITS
(
ª•
, 60, 4));

1549  
MMC_ERR_INVALID
;

1552 
s¸
->
s¸_°ru˘
 = 
	`UNSTUFF_BITS
(
ª•
, 60, 4);

1553 
s¸
->
sda_v¢
 = 
	`UNSTUFF_BITS
(
ª•
, 56, 4);

1554 
s¸
->
d©a_bô_a·î_îa£
 = 
	`UNSTUFF_BITS
(
ª•
, 55, 1);

1555 
s¸
->
£curôy
 = 
	`UNSTUFF_BITS
(
ª•
, 52, 3);

1556 
s¸
->
bus_widths
 = 
	`UNSTUFF_BITS
(
ª•
, 48, 4);

1557 
s¸
->
sda_v¢3
 = 
	`UNSTUFF_BITS
(
ª•
, 47, 1);

1558 
s¸
->
ex_£curôy
 = 
	`UNSTUFF_BITS
(
ª•
, 43, 4);

1559 
s¸
->
cmd_suµ‹t
 = 
	`UNSTUFF_BITS
(
ª•
, 32, 2);

1560 
	`¥ötf
("[SD%d] SD_SPEC(%d) SD_SPEC3(%d) SD_BUS_WIDTH=%d\n",

1561 
	`mmc_ˇrd_id
(
ˇrd
), 
s¸
->
sda_v¢
, s¸->
sda_v¢3
, s¸->
bus_widths
);

1562 
	`¥ötf
("[SD%d] SD_SECU(%d) EX_SECU(%d), CMD_SUPP(%d): CMD23(%d), CMD20(%d)\n",

1563 
	`mmc_ˇrd_id
(
ˇrd
), 
s¸
->
£curôy
, s¸->
ex_£curôy
, s¸->
cmd_suµ‹t
,

1564 (
s¸
->
cmd_suµ‹t
 >> 1) & 0x1, scr->cmd_support & 0x1);

1565  
îr
;

1566 
	}
}

1569 
	$mmc_ªad_ext_csd
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
)

1571 
îr
;

1572 
u32
 *
±r
;

1573 
mmc_comm™d
 
cmd
;

1575 i‡(
ˇrd
->
csd
.
mmˇ_v¢
 < 
CSD_SPEC_VER_4
) {

1576 
	`¥ötf
("[SD%d] MMCA_VSN: %d. Skù EXT_CSD\n", 
ho°
->
id
, 
ˇrd
->
csd
.
mmˇ_v¢
);

1577  
MMC_ERR_NONE
;

1584 
	`mem£t
(&
ˇrd
->
øw_ext_csd
[0], 0, 512);

1585 
±r
 = (
u32
*)&
ˇrd
->
øw_ext_csd
[0];

1587 
cmd
.
›code
 = 
MMC_CMD_SEND_EXT_CSD
;

1588 
cmd
.
¨g
 = 0;

1589 
cmd
.
r•typ
 = 
RESP_R1
;

1590 
cmd
.
ªåõs
 = 
CMD_RETRIES
;

1591 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

1593 
	`msdc_£t_blknum
(
ho°
, 1);

1594 
	`msdc_£t_blkÀn
(
ho°
, 512);

1595 
	`msdc_£t_timeout
(
ho°
, 100000000, 0);

1596 
îr
 = 
	`mmc_cmd
(
ho°
, &
cmd
);

1597 i‡(
îr
 !
MMC_ERR_NONE
)

1598 
out
;

1600 
îr
 = 
	`msdc_pio_ªad
(
ho°
, 
±r
, 512);

1601 i‡(
îr
 !
MMC_ERR_NONE
)

1602 
out
;

1604 
	`mmc_decode_ext_csd
(
ˇrd
);

1606 
out
:

1607  
îr
;

1608 
	}
}

1611 
	$mmc_ªad_swôch
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
)

1613 
îr
;

1614 
u8
 
°©us
[64];

1616 
îr
 = 
	`mmc_sd_swôch
(
ho°
, 
ˇrd
, 0, 0, 1, (
mmc_swôch_t
*)&
°©us
[0]);

1617 i‡(
îr
 !
MMC_ERR_NONE
) {

1619 
îr
 = 
MMC_ERR_NONE
;

1620 
out
;

1624 i‡(
°©us
[13] & 0x01) {

1625 
	`¥ötf
("[SD%d] Suµ‹t: DeÁu…/SDR12\n", 
ho°
->
id
);

1626 
ˇrd
->
sw_ˇps
.
hs_max_då
 = 25000000;

1628 i‡(
°©us
[13] & 0x02) {

1629 
	`¥ötf
("[SD%d] Suµ‹t: HS/SDR25\n", 
ho°
->
id
);

1630 
ˇrd
->
sw_ˇps
.
hs_max_då
 = 50000000;

1632 i‡(
°©us
[13] & 0x10) {

1633 
	`¥ötf
("[SD%d] Suµ‹t: DDR50\n", 
ho°
->
id
);

1634 
ˇrd
->
sw_ˇps
.
hs_max_då
 = 50000000;

1635 
ˇrd
->
sw_ˇps
.
ddr
 = 1;

1637 i‡(
°©us
[13] & 0x04) {

1638 
	`¥ötf
("[SD%d] Suµ‹t: SDR50\n", 
ho°
->
id
);

1639 
ˇrd
->
sw_ˇps
.
hs_max_då
 = 100000000;

1641 i‡(
°©us
[13] & 0x08) {

1642 
	`¥ötf
("[SD%d] Suµ‹t: SDR104\n", 
ho°
->
id
);

1643 
ˇrd
->
sw_ˇps
.
hs_max_då
 = 208000000;

1645 i‡(
°©us
[9] & 0x01) {

1646 
	`¥ötf
("[SD%d] Suµ‹t: Ty≥-B Drv\n", 
ho°
->
id
);

1648 i‡(
°©us
[9] & 0x02) {

1649 
	`¥ötf
("[SD%d] Suµ‹t: Ty≥-A Drv\n", 
ho°
->
id
);

1651 i‡(
°©us
[9] & 0x04) {

1652 
	`¥ötf
("[SD%d] Suµ‹t: Ty≥-C Drv\n", 
ho°
->
id
);

1654 i‡(
°©us
[9] & 0x08) {

1655 
	`¥ötf
("[SD%d] Suµ‹t: Ty≥-D Drv\n", 
ho°
->
id
);

1657 i‡(
°©us
[7] & 0x01) {

1658 
	`¥ötf
("[SD%d] Suµ‹t: 200mA cuºíàlimô\n", 
ho°
->
id
);

1660 i‡(
°©us
[7] & 0x02) {

1661 
	`¥ötf
("[SD%d] Suµ‹t: 400mA cuºíàlimô\n", 
ho°
->
id
);

1663 i‡(
°©us
[7] & 0x04) {

1664 
	`¥ötf
("[SD%d] Suµ‹t: 600mA cuºíàlimô\n", 
ho°
->
id
);

1666 i‡(
°©us
[7] & 0x08) {

1667 
	`¥ötf
("[SD%d] Suµ‹t: 800mA cuºíàlimô\n", 
ho°
->
id
);

1670 
out
:

1671  
îr
;

1672 
	}
}

1674 
	$mmc_io_rw_dúe˘
(
mmc_ˇrd
 *
ˇrd
, 
wrôe
, 
‚
,

1675 
addr
, 
u8
 
ö
, u8* 
out
)

1677 
mmc_comm™d
 
cmd
;

1678 
îr
;

1680 
	`BUG_ON
(!
ˇrd
);

1681 
	`BUG_ON
(
‚
 > 7);

1683 
	`mem£t
(&
cmd
, 0, (
mmc_comm™d
));

1685 
cmd
.
›code
 = 
SD_IO_RW_DIRECT
;

1686 
cmd
.
¨g
 = 
wrôe
 ? 0x80000000 : 0x00000000;

1687 
cmd
.
¨g
 |
‚
 << 28;

1688 
cmd
.
¨g
 |(
wrôe
 && 
out
) ? 0x08000000 : 0x00000000;

1689 
cmd
.
¨g
 |
addr
 << 9;

1690 
cmd
.
¨g
 |
ö
;

1691 
cmd
.
r•typ
 = 
RESP_R5
;

1692 
cmd
.
ªåõs
 = 
CMD_RETRIES
;

1693 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

1695 
îr
 = 
	`mmc_cmd
(
ˇrd
->
ho°
, &
cmd
);

1697 i‡(
îr
)

1698  
îr
;

1700 i‡(
cmd
.
ª•
[0] & 
R5_ERROR
)

1701  
MMC_ERR_FAILED
;

1702 i‡(
cmd
.
ª•
[0] & 
R5_FUNCTION_NUMBER
)

1703  
MMC_ERR_INVALID
;

1704 i‡(
cmd
.
ª•
[0] & 
R5_OUT_OF_RANGE
)

1705  
MMC_ERR_INVALID
;

1707 i‡(
out
)

1708 *
out
 = 
cmd
.
ª•
[0] & 0xFF;

1710  
MMC_ERR_NONE
;

1711 
	}
}

1713 
	$mmc_io_rw_exãnded
(
mmc_ˇrd
 *
ˇrd
, 
wrôe
, 
‚
,

1714 
addr
, 
ö¸_addr
, 
u8
 *
buf
, 
blocks
, 
blksz
)

1716 
îr
;

1718 
	`BUG_ON
(!
ˇrd
);

1719 
	`BUG_ON
(
‚
 > 7);

1720 
	`BUG_ON
(
blocks
 =1 && 
blksz
 > 512);

1721 
	`WARN_ON
(
blocks
 == 0);

1722 
	`WARN_ON
(
blksz
 == 0);

1725 i‡(
addr
 & ~0x1FFFF)

1726  
MMC_ERR_INVALID
;

1728 
îr
 = 
	`msdc_i‹w
(
ˇrd
, 
wrôe
, 
‚
, 
addr
, 
ö¸_addr
, 
buf
, 
blocks
, 
blksz
);

1730  
îr
;

1731 
	}
}

1733 
	$mmc_sdio_max_byã_size
(
sdio_func
 *
func
)

1735 
mvÆ
 = 
	`mö
(
func
->
ˇrd
->
ho°
->
max_£g_size
,

1736 
func
->
ˇrd
->
ho°
->
max_blk_size
);

1737 
mvÆ
 = 
	`mö
(mvÆ, 
func
->
max_blksize
);

1738  
	`mö
(
mvÆ
, 512u);

1739 
	}
}

1742 
	$mmc_sdio_io_rw_ext_hñ≥r
(
sdio_func
 *
func
, 
wrôe
,

1743 
addr
, 
ö¸_addr
, 
u8
 *
buf
, 
size
)

1745 
ªmaödî
 = 
size
;

1746 
max_blocks
;

1747 
ªt
;

1750 i‡(
func
->
ˇrd
->
cc¸
.
mu…i_block
 && (
size
 > 
	`mmc_sdio_max_byã_size
(func))) {

1754 
max_blocks
 = 
	`mö
(
func
->
ˇrd
->
ho°
->
max_blk_cou¡
,

1755 
func
->
ˇrd
->
ho°
->
max_£g_size
 / func->
cur_blksize
);

1756 
max_blocks
 = 
	`mö
(max_blocks, 511u);

1758 
ªmaödî
 > 
func
->
cur_blksize
) {

1759 
blocks
;

1761 
blocks
 = 
ªmaödî
 / 
func
->
cur_blksize
;

1762 i‡(
blocks
 > 
max_blocks
)

1763 
blocks
 = 
max_blocks
;

1764 
size
 = 
blocks
 * 
func
->
cur_blksize
;

1766 
ªt
 = 
	`mmc_io_rw_exãnded
(
func
->
ˇrd
, 
wrôe
,

1767 
func
->
num
, 
addr
, 
ö¸_addr
, 
buf
,

1768 
blocks
, 
func
->
cur_blksize
);

1769 i‡(
ªt
)

1770  
ªt
;

1772 
ªmaödî
 -
size
;

1773 
buf
 +
size
;

1774 i‡(
ö¸_addr
)

1775 
addr
 +
size
;

1780 
ªmaödî
 > 0) {

1781 
size
 = 
	`mö
(
ªmaödî
, 
	`mmc_sdio_max_byã_size
(
func
));

1783 
ªt
 = 
	`mmc_io_rw_exãnded
(
func
->
ˇrd
, 
wrôe
, func->
num
, 
addr
,

1784 
ö¸_addr
, 
buf
, 1, 
size
);

1785 i‡(
ªt
)

1786  
ªt
;

1788 
ªmaödî
 -
size
;

1789 
buf
 +
size
;

1790 i‡(
ö¸_addr
)

1791 
addr
 +
size
;

1794 
	}
}

1796 
	$mmc_sdio_mem˝y_‰omio
(
sdio_func
 *
func
, *
d°
,

1797 
addr
, 
cou¡
)

1799  
	`mmc_sdio_io_rw_ext_hñ≥r
(
func
, 0, 
addr
, 1, 
d°
, 
cou¡
);

1800 
	}
}

1802 
	$mmc_sdio_mem˝y_toio
(
sdio_func
 *
func
, 
addr
,

1803 *
§c
, 
cou¡
)

1805  
	`mmc_sdio_io_rw_ext_hñ≥r
(
func
, 1, 
addr
, 1, 
§c
, 
cou¡
);

1806 
	}
}

1808 
	$mmc_sdio_ªadsb
(
sdio_func
 *
func
, *
d°
, 
addr
,

1809 
cou¡
)

1811  
	`mmc_sdio_io_rw_ext_hñ≥r
(
func
, 0, 
addr
, 0, 
d°
, 
cou¡
);

1812 
	}
}

1814 
	$mmc_sdio_wrôesb
(
sdio_func
 *
func
, 
addr
, *
§c
,

1815 
cou¡
)

1817  
	`mmc_sdio_io_rw_ext_hñ≥r
(
func
, 1, 
addr
, 0, 
§c
, 
cou¡
);

1818 
	}
}

1820 
u16
 
	$mmc_sdio_ªadw
(
sdio_func
 *
func
, 
addr
, *
îr_ªt
)

1822 
ªt
;

1823 
u16
 
tmp
;

1825 i‡(
îr_ªt
)

1826 *
îr_ªt
 = 0;

1828 
ªt
 = 
	`mmc_sdio_mem˝y_‰omio
(
func
, func->
tmpbuf
, 
addr
, 2);

1829 i‡(
ªt
) {

1830 i‡(
îr_ªt
)

1831 *
îr_ªt
 = 
ªt
;

1835 
	`mem˝y
(&
tmp
, 
func
->
tmpbuf
, (
u16
));

1837  
tmp
;

1838 
	}
}

1840 
	$mmc_sdio_wrôew
(
sdio_func
 *
func
, 
u16
 
b
, 
addr
, *
îr_ªt
)

1842 
ªt
;

1844 
	`mem˝y
(&
func
->
tmpbuf
[0], &
b
, (
u16
));

1846 
ªt
 = 
	`mmc_sdio_mem˝y_toio
(
func
, 
addr
, func->
tmpbuf
, 2);

1847 i‡(
îr_ªt
)

1848 *
îr_ªt
 = 
ªt
;

1849 
	}
}

1851 
u32
 
	$mmc_sdio_ªadl
(
sdio_func
 *
func
, 
addr
, *
îr_ªt
)

1853 
ªt
;

1854 
u32
 
tmp
;

1856 i‡(
îr_ªt
)

1857 *
îr_ªt
 = 0;

1859 
ªt
 = 
	`mmc_sdio_mem˝y_‰omio
(
func
, func->
tmpbuf
, 
addr
, 4);

1860 i‡(
ªt
) {

1861 i‡(
îr_ªt
)

1862 *
îr_ªt
 = 
ªt
;

1866 
	`mem˝y
(&
tmp
, 
func
->
tmpbuf
, (
u32
));

1868  
tmp
;

1869 
	}
}

1871 
	$mmc_sdio_wrôñ
(
sdio_func
 *
func
, 
u32
 
b
, 
addr
, *
îr_ªt
)

1873 
ªt
;

1875 
	`mem˝y
(&
func
->
tmpbuf
[0], &
b
, (
u32
));

1877 
ªt
 = 
	`mmc_sdio_mem˝y_toio
(
func
, 
addr
, func->
tmpbuf
, 4);

1878 i‡(
îr_ªt
)

1879 *
îr_ªt
 = 
ªt
;

1880 
	}
}

1882 
	$mmc_sdio_f0_ªadb
(
sdio_func
 *
func
, 
addr
,

1883 *
îr_ªt
)

1885 
ªt
;

1886 
vÆ
;

1888 
	`BUG_ON
(!
func
);

1890 i‡(
îr_ªt
)

1891 *
îr_ªt
 = 0;

1893 
ªt
 = 
	`mmc_io_rw_dúe˘
(
func
->
ˇrd
, 0, 0, 
addr
, 0, &
vÆ
);

1894 i‡(
ªt
) {

1895 i‡(
îr_ªt
)

1896 *
îr_ªt
 = 
ªt
;

1900  
vÆ
;

1901 
	}
}

1903 
	$mmc_sdio_f0_wrôeb
(
sdio_func
 *
func
, 
b
, 
addr
,

1904 *
îr_ªt
)

1906 
ªt
;

1908 
	`BUG_ON
(!
func
);

1910 i‡((
addr
 < 0xF0 ||ádd∏> 0xFFË&& (!
	`mmc_ˇrd_Ànõ¡_‚0
(
func
->
ˇrd
))) {

1911 i‡(
îr_ªt
)

1912 *
îr_ªt
 = 
MMC_ERR_INVALID
;

1916 
ªt
 = 
	`mmc_io_rw_dúe˘
(
func
->
ˇrd
, 1, 0, 
addr
, 
b
, 
NULL
);

1917 i‡(
îr_ªt
)

1918 *
îr_ªt
 = 
ªt
;

1919 
	}
}

1922 
	$mmc_sdio_íabÀ_func
(
sdio_func
 *
func
)

1924 
ªt
;

1925 
ªg
;

1926 
timeout
;

1928 
	`BUG_ON
(!
func
);

1929 
	`BUG_ON
(!
func
->
ˇrd
);

1931 
	`¥ötf
("SDIO: Enabling device ...\n");

1933 
ªt
 = 
	`mmc_io_rw_dúe˘
(
func
->
ˇrd
, 0, 0, 
SDIO_CCCR_IOEx
, 0, &
ªg
);

1934 i‡(
ªt
)

1935 
îr
;

1937 
ªg
 |1 << 
func
->
num
;

1939 
ªt
 = 
	`mmc_io_rw_dúe˘
(
func
->
ˇrd
, 1, 0, 
SDIO_CCCR_IOEx
, 
ªg
, 
NULL
);

1940 i‡(
ªt
)

1941 
îr
;

1944 
ªt
 = 
	`mmc_io_rw_dúe˘
(
func
->
ˇrd
, 0, 0, 
SDIO_CCCR_IORx
, 0, &
ªg
);

1945 i‡(
ªt
)

1946 
îr
;

1947 i‡(
ªg
 & (1 << 
func
->
num
))

1951 
	`¥ötf
("SDIO: Enabled device\n");

1955 
îr
:

1956 
	`¥ötf
("SDIO: FailedÅoÉnable device\n");

1957  
ªt
;

1958 
	}
}

1960 
	$mmc_sdio_£t_block_size
(
sdio_func
 *
func
, 
blksz
)

1962 
ªt
;

1964 i‡(
blksz
 > 
func
->
ˇrd
->
ho°
->
max_blk_size
)

1965  
MMC_ERR_INVALID
;

1967 i‡(
blksz
 == 0) {

1968 
blksz
 = 
	`mö
(
func
->
max_blksize
, func->
ˇrd
->
ho°
->
max_blk_size
);

1969 
blksz
 = 
	`mö
(blksz, 512u);

1972 
ªt
 = 
	`mmc_io_rw_dúe˘
(
func
->
ˇrd
, 1, 0,

1973 
	`SDIO_FBR_BASE
(
func
->
num
Ë+ 
SDIO_FBR_BLKSIZE
,

1974 
blksz
 & 0xff, 
NULL
);

1975 i‡(
ªt
)

1976  
ªt
;

1977 
ªt
 = 
	`mmc_io_rw_dúe˘
(
func
->
ˇrd
, 1, 0,

1978 
	`SDIO_FBR_BASE
(
func
->
num
Ë+ 
SDIO_FBR_BLKSIZE
 + 1,

1979 (
blksz
 >> 8Ë& 0xff, 
NULL
);

1980 i‡(
ªt
)

1981  
ªt
;

1982 
func
->
cur_blksize
 = 
blksz
;

1984 
	}
}

1986 
	$mmc_sdio_dißbÀ_func
(
sdio_func
 *
func
)

1988 
ªt
;

1989 
ªg
;

1991 
	`BUG_ON
(!
func
);

1992 
	`BUG_ON
(!
func
->
ˇrd
);

1994 
	`¥ötf
("SDIO: Disabling device...\n");

1996 
ªt
 = 
	`mmc_io_rw_dúe˘
(
func
->
ˇrd
, 0, 0, 
SDIO_CCCR_IOEx
, 0, &
ªg
);

1997 i‡(
ªt
)

1998 
îr
;

2000 
ªg
 &~(1 << 
func
->
num
);

2002 
ªt
 = 
	`mmc_io_rw_dúe˘
(
func
->
ˇrd
, 1, 0, 
SDIO_CCCR_IOEx
, 
ªg
, 
NULL
);

2003 i‡(
ªt
)

2004 
îr
;

2006 
	`¥ötf
("SDIO: Disabled device\n");

2010 
îr
:

2011 
	`¥ötf
("SDIO: FailedÅo disable device %s\n");

2012  
MMC_ERR_FAILED
;

2013 
	}
}

2015 
	$mmc_sdio_ªad_cis
(
mmc_ˇrd
 *
ˇrd
, 
sdio_func
 *
func
)

2017 
ªt
;

2018 
sdio_func_tu∂e
 *
this
, **
¥ev
;

2019 
i
, 
±r
 = 0;

2026 
i
 = 0; i < 3; i++) {

2027 
x
, 
‚
;

2029 i‡(
func
)

2030 
‚
 = 
func
->
num
;

2032 
‚
 = 0;

2034 
ªt
 = 
	`mmc_io_rw_dúe˘
(
ˇrd
, 0, 0,

2035 
	`SDIO_FBR_BASE
(
‚
Ë+ 
SDIO_FBR_CIS
 + 
i
, 0, &
x
);

2036 i‡(
ªt
)

2037  
ªt
;

2038 
±r
 |
x
 << (
i
 * 8);

2041 i‡(
func
)

2042 
¥ev
 = &
func
->
tu∂es
;

2044 
¥ev
 = &
ˇrd
->
tu∂es
;

2046 
	`BUG_ON
(*
¥ev
);

2049 
çl_code
, 
çl_lök
;

2051 
ªt
 = 
	`mmc_io_rw_dúe˘
(
ˇrd
, 0, 0, 
±r
++, 0, &
çl_code
);

2052 i‡(
ªt
)

2056 i‡(
çl_code
 == 0xff)

2059 
ªt
 = 
	`mmc_io_rw_dúe˘
(
ˇrd
, 0, 0, 
±r
++, 0, &
çl_lök
);

2060 i‡(
ªt
)

2063 
this
 = 
	`mÆloc
((*thisË+ 
çl_lök
);

2064 i‡(!
this
)

2065  -
__LINE__
;

2067 
i
 = 0; i < 
çl_lök
; i++) {

2068 
ªt
 = 
	`mmc_io_rw_dúe˘
(
ˇrd
, 0, 0,

2069 
±r
 + 
i
, 0, &
this
->
d©a
[i]);

2070 i‡(
ªt
)

2073 i‡(
ªt
) {

2074 
	`‰ì
(
this
);

2078 
i
 = 0; i < 
	`ARRAY_SIZE
(
cis_çl_li°
); i++)

2079 i‡(
cis_çl_li°
[
i
].
code
 =
çl_code
)

2082 i‡(
i
 >
	`ARRAY_SIZE
(
cis_çl_li°
)) {

2084 
this
->
√xt
 = 
NULL
;

2085 
this
->
code
 = 
çl_code
;

2086 
this
->
size
 = 
çl_lök
;

2087 *
¥ev
 = 
this
;

2088 
¥ev
 = &
this
->
√xt
;

2089 
	`¥ötf
("queuög CISÅu∂ê0x%02xÜígth %u\n", 
çl_code
, 
çl_lök
);

2091 c⁄° 
cis_çl
 *
çl
 = 
cis_çl_li°
 + 
i
;

2092 i‡(
çl_lök
 < 
çl
->
mö_size
) {

2093 
	`¥ötf
("bad CISÅuple 0x%02x (length = %u,Éxpected >= %u)\n",

2094 
çl_code
, 
çl_lök
, 
çl
->
mö_size
);

2095 
ªt
 = -
__LINE__
;

2096 } i‡(
çl
->
∑r£
) {

2097 
ªt
 = 
çl
->
	`∑r£
(
ˇrd
, 
func
, 
this
->
d©a
, 
çl_lök
);

2099 
	`‰ì
(
this
);

2102 
±r
 +
çl_lök
;

2103 } !
ªt
);

2109 i‡(
func
)

2110 *
¥ev
 = 
ˇrd
->
tu∂es
;

2112  
ªt
;

2113 
	}
}

2115 
	$mmc_sdio_ªad_comm⁄_cis
(
mmc_ˇrd
 *
ˇrd
)

2117  
	`mmc_sdio_ªad_cis
(
ˇrd
, 
NULL
);

2118 
	}
}

2120 
	$mmc_sdio_‰ì_comm⁄_cis
(
mmc_ˇrd
 *
ˇrd
)

2122 
sdio_func_tu∂e
 *
tu∂e
, *
vi˘im
;

2124 
tu∂e
 = 
ˇrd
->
tu∂es
;

2126 
tu∂e
) {

2127 
vi˘im
 = 
tu∂e
;

2128 
tu∂e
 =Åu∂e->
√xt
;

2129 
	`‰ì
(
vi˘im
);

2132 
ˇrd
->
tu∂es
 = 
NULL
;

2133 
	}
}

2135 
	$mmc_sdio_ªad_func_cis
(
sdio_func
 *
func
)

2137 
ªt
;

2139 
ªt
 = 
	`mmc_sdio_ªad_cis
(
func
->
ˇrd
, func);

2140 i‡(
ªt
)

2141  
ªt
;

2147 i‡(
func
->
víd‹
 == 0) {

2148 
func
->
víd‹
 = func->
ˇrd
->
cis
.vendor;

2149 
func
->
devi˚
 = func->
ˇrd
->
cis
.device;

2153 
	}
}

2155 
	$mmc_sdio_‰ì_func_cis
(
sdio_func
 *
func
)

2157 
sdio_func_tu∂e
 *
tu∂e
, *
vi˘im
;

2159 
tu∂e
 = 
func
->
tu∂es
;

2161 
tu∂e
 &&Åu∂ê!
func
->
ˇrd
->
tu∂es
) {

2162 
vi˘im
 = 
tu∂e
;

2163 
tu∂e
 =Åu∂e->
√xt
;

2164 
	`‰ì
(
vi˘im
);

2167 
func
->
tu∂es
 = 
NULL
;

2168 
	}
}

2171 
	$mmc_sdio_ªad_fbr
(
sdio_func
 *
func
)

2173 
ªt
;

2174 
d©a
;

2176 
ªt
 = 
	`mmc_io_rw_dúe˘
(
func
->
ˇrd
, 0, 0,

2177 
	`SDIO_FBR_BASE
(
func
->
num
Ë+ 
SDIO_FBR_STD_IF
, 0, &
d©a
);

2178 i‡(
ªt
)

2179 
out
;

2181 
d©a
 &= 0x0f;

2183 i‡(
d©a
 == 0x0f) {

2184 
ªt
 = 
	`mmc_io_rw_dúe˘
(
func
->
ˇrd
, 0, 0,

2185 
	`SDIO_FBR_BASE
(
func
->
num
Ë+ 
SDIO_FBR_STD_IF_EXT
, 0, &
d©a
);

2186 i‡(
ªt
)

2187 
out
;

2190 
func
->
˛ass
 = 
d©a
;

2192 
out
:

2193  
ªt
;

2194 
	}
}

2196 
	$mmc_sdio_öô_func
(
mmc_ˇrd
 *
ˇrd
, 
‚
)

2198 
ªt
;

2199 
sdio_func
 *
func
;

2201 
	`BUG_ON
(
‚
 > 
SDIO_MAX_FUNCS
);

2203 
func
 = 
	`mÆloc
((
sdio_func
));

2204 i‡(!
func
)

2207 
	`mem£t
(
func
, 0, (
sdio_func
));

2209 
func
->
ˇrd
 = card;

2210 
func
->
num
 = 
‚
;

2212 
ªt
 = 
	`mmc_sdio_ªad_fbr
(
func
);

2213 i‡(
ªt
)

2214 
Áû
;

2216 
ªt
 = 
	`mmc_sdio_ªad_func_cis
(
func
);

2217 i‡(
ªt
)

2218 
Áû
;

2220 
ˇrd
->
io_func
[
‚
 - 1] = 
func
;

2224 
Áû
:

2226  
ªt
;

2227 
	}
}

2229 
	$mmc_sdio_ªad_cc¸
(
mmc_ˇrd
 *
ˇrd
)

2231 
ªt
;

2232 
cc¸_v¢
;

2233 
d©a
;

2235 
	`mem£t
(&
ˇrd
->
cc¸
, 0, (
sdio_cc¸
));

2237 
ªt
 = 
	`mmc_io_rw_dúe˘
(
ˇrd
, 0, 0, 
SDIO_CCCR_CCCR
, 0, &
d©a
);

2238 i‡(
ªt
)

2239 
out
;

2241 
cc¸_v¢
 = 
d©a
 & 0x0f;

2243 i‡(
cc¸_v¢
 > 
SDIO_CCCR_REV_1_20
) {

2244 
	`¥ötf
("uƒecogni£d CCCR såu˘uª vîsi⁄ %d\n", 
cc¸_v¢
);

2245  
MMC_ERR_INVALID
;

2248 
ˇrd
->
cc¸
.
sdio_v¢
 = (
d©a
 & 0xf0) >> 4;

2250 
ªt
 = 
	`mmc_io_rw_dúe˘
(
ˇrd
, 0, 0, 
SDIO_CCCR_CAPS
, 0, &
d©a
);

2251 i‡(
ªt
)

2252 
out
;

2254 i‡(
d©a
 & 
SDIO_CCCR_CAP_SMB
)

2255 
ˇrd
->
cc¸
.
mu…i_block
 = 1;

2256 i‡(
d©a
 & 
SDIO_CCCR_CAP_LSC
)

2257 
ˇrd
->
cc¸
.
low_•ìd
 = 1;

2258 i‡(
d©a
 & 
SDIO_CCCR_CAP_4BLS
)

2259 
ˇrd
->
cc¸
.
wide_bus
 = 1;

2260 i‡(
d©a
 & 
SDIO_CCCR_CAP_S4MI
)

2261 
ˇrd
->
cc¸
.
öå_mu…i_block
 = 1;

2263 i‡(
cc¸_v¢
 >
SDIO_CCCR_REV_1_10
) {

2264 
ªt
 = 
	`mmc_io_rw_dúe˘
(
ˇrd
, 0, 0, 
SDIO_CCCR_POWER
, 0, &
d©a
);

2265 i‡(
ªt
)

2266 
out
;

2268 i‡(
d©a
 & 
SDIO_POWER_SMPC
)

2269 
ˇrd
->
cc¸
.
high_powî
 = 1;

2272 i‡(
cc¸_v¢
 >
SDIO_CCCR_REV_1_20
) {

2273 
ªt
 = 
	`mmc_io_rw_dúe˘
(
ˇrd
, 0, 0, 
SDIO_CCCR_SPEED
, 0, &
d©a
);

2274 i‡(
ªt
)

2275 
out
;

2277 i‡(
d©a
 & 
SDIO_SPEED_SHS
)

2278 
ˇrd
->
cc¸
.
high_•ìd
 = 1;

2281 
out
:

2282  
ªt
;

2283 
	}
}

2285 
	$mmc_sdio_¥oc_≥ndög_úqs
(
mmc_ˇrd
 *
ˇrd
)

2287 
id
 = 
ˇrd
->
ho°
->id;

2288 
i
, 
ªt
, 
cou¡
;

2289 
≥ndög
;

2291 
ªt
 = 
	`mmc_io_rw_dúe˘
(
ˇrd
, 0, 0, 
SDIO_CCCR_INTx
, 0, &
≥ndög
);

2292 i‡(
ªt
) {

2293 
	`¥ötf
("[SD%d]Éº‹ %dÑódög SDIO_CCCR_INTx\n", 
id
, 
ªt
);

2294  
ªt
;

2297 
cou¡
 = 0;

2298 
i
 = 1; i <= 7; i++) {

2299 i‡(
≥ndög
 & (1 << 
i
)) {

2300 
sdio_func
 *
func
 = 
ˇrd
->
io_func
[
i
 - 1];

2301 i‡(!
func
) {

2302 
	`¥ötf
("[SD%d]Öídög IRQ f‹Ç⁄-exi°™àfun˘i⁄\n", 
id
);

2303 
ªt
 = 
MMC_ERR_INVALID
;

2304 } i‡(
func
->
úq_h™dÀr
) {

2305 
func
->
	`úq_h™dÀr
(func);

2306 
cou¡
++;

2308 
	`¥ötf
("[SD%d]Öídög IRQ wôhÇÿh™dÀr\n", 
id
);

2309 
ªt
 = 
MMC_ERR_INVALID
;

2314 i‡(
cou¡
)

2315  
cou¡
;

2317  
ªt
;

2318 
	}
}

2320 
	$mmc_sdio_ˇrd_úq_gë
(
mmc_ˇrd
 *
ˇrd
)

2322 
mmc_ho°
 *
ho°
 = 
ˇrd
->host;

2324 
	`msdc_öå_sdio
(
ˇrd
->
ho°
, 1);

2327 
	}
}

2329 
	$mmc_sdio_ˇrd_úq_put
(
mmc_ˇrd
 *
ˇrd
)

2331 
mmc_ho°
 *
ho°
 = 
ˇrd
->host;

2333 
	`msdc_öå_sdio
(
ˇrd
->
ho°
, 0);

2336 
	}
}

2338 #i‡
MSDC_USE_IRQ


2339 
	$mmc_sdio_ªgi°î_úq
(
mmc_ˇrd
 *
ˇrd
, 
hw_úq_h™dÀr_t
 
h™dÀr
)

2341 
	`msdc_ªgi°î_hwúq
(
ˇrd
->
ho°
, 
h™dÀr
);

2344 
	}
}

2347 
	$mmc_sdio_˛aim_úq
(
sdio_func
 *
func
, 
sdio_úq_h™dÀr_t
 *
h™dÀr
)

2349 
ªt
;

2350 
ªg
;

2352 
	`BUG_ON
(!
func
);

2353 
	`BUG_ON
(!
func
->
ˇrd
);

2355 
	`¥ötf
("SDIO: Enabling IRQ...\n");

2357 i‡(
func
->
úq_h™dÀr
) {

2358 
	`¥ötf
("SDIO: IRQálready in use.\n");

2359  
MMC_ERR_FAILED
;

2362 
ªt
 = 
	`mmc_io_rw_dúe˘
(
func
->
ˇrd
, 0, 0, 
SDIO_CCCR_IENx
, 0, &
ªg
);

2363 i‡(
ªt
)

2364  
ªt
;

2366 
ªg
 |1 << 
func
->
num
;

2368 
ªg
 |= 1;

2370 
ªt
 = 
	`mmc_io_rw_dúe˘
(
func
->
ˇrd
, 1, 0, 
SDIO_CCCR_IENx
, 
ªg
, 
NULL
);

2371 i‡(
ªt
)

2372  
ªt
;

2374 
func
->
úq_h™dÀr
 = 
h™dÀr
;

2375 
ªt
 = 
	`mmc_sdio_ˇrd_úq_gë
(
func
->
ˇrd
);

2376 i‡(
ªt
)

2377 
func
->
úq_h™dÀr
 = 
NULL
;

2379  
ªt
;

2380 
	}
}

2382 
	$mmc_sdio_ªÀa£_úq
(
sdio_func
 *
func
)

2384 
ªt
;

2385 
ªg
;

2387 
	`BUG_ON
(!
func
);

2388 
	`BUG_ON
(!
func
->
ˇrd
);

2390 
	`¥ötf
("SDIO: Disabling IRQ...\n");

2392 i‡(
func
->
úq_h™dÀr
) {

2393 
func
->
úq_h™dÀr
 = 
NULL
;

2394 
	`mmc_sdio_ˇrd_úq_put
(
func
->
ˇrd
);

2396 
ªt
 = 
	`mmc_io_rw_dúe˘
(
func
->
ˇrd
, 0, 0, 
SDIO_CCCR_IENx
, 0, &
ªg
);

2397 i‡(
ªt
)

2398  
ªt
;

2400 
ªg
 &~(1 << 
func
->
num
);

2403 i‡(!(
ªg
 & 0xFE))

2404 
ªg
 = 0;

2406 
ªt
 = 
	`mmc_io_rw_dúe˘
(
func
->
ˇrd
, 1, 0, 
SDIO_CCCR_IENx
, 
ªg
, 
NULL
);

2407 i‡(
ªt
)

2408  
ªt
;

2411 
	}
}

2413 
	$mmc_sdio_íabÀ_úq_g≠
(
mmc_ˇrd
 *
ˇrd
, 
íabÀ
)

2415 
ªt
;

2416 
u8
 
˘æ
;

2418 i‡(!(
ˇrd
->
ho°
->
ˇps
 & 
MMC_CAP_4_BIT_DATA
))

2421 i‡(!
ˇrd
->
cc¸
.
öå_mu…i_block
)

2424 
ªt
 = 
	`mmc_io_rw_dúe˘
(
ˇrd
, 0, 0, 
SDIO_CCCR_CAPS
, 0, &
˘æ
);

2425 i‡(
ªt
)

2426  
ªt
;

2428 i‡(
íabÀ
) {

2429 
˘æ
 |
SDIO_CCCR_CAP_E4MI
;

2431 
˘æ
 &~
SDIO_CCCR_CAP_E4MI
;

2434 
ªt
 = 
	`mmc_io_rw_dúe˘
(
ˇrd
, 1, 0, 
SDIO_CCCR_CAPS
, 
˘æ
, 
NULL
);

2435 i‡(
ªt
)

2436  
ªt
;

2438 
	`msdc_öå_sdio_g≠
(
ˇrd
->
ho°
, 
íabÀ
);

2441 
	}
}

2443 
	$mmc_sdio_íabÀ_wide
(
mmc_ˇrd
 *
ˇrd
)

2445 
ªt
;

2446 
u8
 
˘æ
;

2448 i‡(!(
ˇrd
->
ho°
->
ˇps
 & 
MMC_CAP_4_BIT_DATA
))

2451 i‡(
ˇrd
->
cc¸
.
low_•ìd
 && !ˇrd->cc¸.
wide_bus
)

2454 
ªt
 = 
	`mmc_io_rw_dúe˘
(
ˇrd
, 0, 0, 
SDIO_CCCR_IF
, 0, &
˘æ
);

2455 i‡(
ªt
)

2456  
ªt
;

2458 
˘æ
 |
SDIO_BUS_WIDTH_4BIT
;

2460 
ªt
 = 
	`mmc_io_rw_dúe˘
(
ˇrd
, 1, 0, 
SDIO_CCCR_IF
, 
˘æ
, 
NULL
);

2461 i‡(
ªt
)

2462  
ªt
;

2464 
	`msdc_c⁄fig_bus
(
ˇrd
->
ho°
, 
HOST_BUS_WIDTH_4
);

2467 
	}
}

2472 
	$mmc_sdio_íabÀ_hs
(
mmc_ˇrd
 *
ˇrd
)

2474 
ªt
;

2475 
u8
 
•ìd
;

2477 i‡(!(
ˇrd
->
ho°
->
ˇps
 & 
MMC_CAP_SD_HIGHSPEED
))

2480 i‡(!
ˇrd
->
cc¸
.
high_•ìd
)

2483 
ªt
 = 
	`mmc_io_rw_dúe˘
(
ˇrd
, 0, 0, 
SDIO_CCCR_SPEED
, 0, &
•ìd
);

2484 i‡(
ªt
)

2485  
ªt
;

2487 
•ìd
 |
SDIO_SPEED_EHS
;

2489 
ªt
 = 
	`mmc_io_rw_dúe˘
(
ˇrd
, 1, 0, 
SDIO_CCCR_SPEED
, 
•ìd
, 
NULL
);

2490 i‡(
ªt
)

2491  
ªt
;

2493 
	`mmc_ˇrd_£t_high•ìd
(
ˇrd
);

2496 
	}
}

2513 
	$mmc_lock_u∆ock
(
mmc_ho°
 *
ho°
)

2515 
mmc_comm™d
 
cmd
;

2517 
cmd
.
›code
 = 
MMC_CMD_LOCK_UNLOCK
;

2518 
cmd
.
r•typ
 = 
RESP_R1
;

2519 
cmd
.
¨g
 = 0;

2520 
cmd
.
ªåõs
 = 3;

2521 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

2523  
	`mmc_cmd
(
ho°
, &
cmd
);

2524 
	}
}

2526 
	$mmc_£t_wrôe_¥Ÿ
(
mmc_ho°
 *
ho°
, 
u32
 
addr
)

2528 
mmc_comm™d
 
cmd
;

2530 
cmd
.
›code
 = 
MMC_CMD_SET_WRITE_PROT
;

2531 
cmd
.
r•typ
 = 
RESP_R1B
;

2532 
cmd
.
¨g
 = 
addr
;

2533 
cmd
.
ªåõs
 = 3;

2534 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

2536  
	`mmc_cmd
(
ho°
, &
cmd
);

2537 
	}
}

2539 
	$mmc_˛r_wrôe_¥Ÿ
(
mmc_ho°
 *
ho°
, 
u32
 
addr
)

2541 
mmc_comm™d
 
cmd
;

2543 
cmd
.
›code
 = 
MMC_CMD_CLR_WRITE_PROT
;

2544 
cmd
.
r•typ
 = 
RESP_R1B
;

2545 
cmd
.
¨g
 = 
addr
;

2546 
cmd
.
ªåõs
 = 3;

2547 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

2549  
	`mmc_cmd
(
ho°
, &
cmd
);

2550 
	}
}

2552 
	$mmc_îa£_°¨t
(
mmc_ˇrd
 *
ˇrd
, 
u32
 
addr
)

2554 
mmc_comm™d
 
cmd
;

2556 i‡(!(
ˇrd
->
csd
.
cmd˛ass
 & 
CCC_ERASE
)) {

2557 
	`¥ötf
("[SD%d] C¨d d€¢'àsuµ‹àEø£ comm™ds\n", 
ˇrd
->
ho°
->
id
);

2558  
MMC_ERR_INVALID
;

2561 i‡(
	`mmc_ˇrd_highˇps
(
ˇrd
))

2562 
addr
 /
MMC_BLOCK_SIZE
;

2564 i‡(
	`mmc_ˇrd_mmc
(
ˇrd
)) {

2565 
cmd
.
›code
 = 
MMC_CMD_ERASE_GROUP_START
;

2567 
cmd
.
›code
 = 
MMC_CMD_ERASE_WR_BLK_START
;

2570 
cmd
.
r•typ
 = 
RESP_R1
;

2571 
cmd
.
¨g
 = 
addr
;

2572 
cmd
.
ªåõs
 = 3;

2573 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

2575  
	`mmc_cmd
(
ˇrd
->
ho°
, &
cmd
);

2576 
	}
}

2578 
	$mmc_îa£_íd
(
mmc_ˇrd
 *
ˇrd
, 
u32
 
addr
)

2580 
mmc_comm™d
 
cmd
;

2582 i‡(!(
ˇrd
->
csd
.
cmd˛ass
 & 
CCC_ERASE
)) {

2583 
	`¥ötf
("[SD%d] Eø£ i¢'àsuµ‹ãd\n", 
ˇrd
->
ho°
->
id
);

2584  
MMC_ERR_INVALID
;

2587 i‡(
	`mmc_ˇrd_highˇps
(
ˇrd
))

2588 
addr
 /
MMC_BLOCK_SIZE
;

2590 i‡(
	`mmc_ˇrd_mmc
(
ˇrd
)) {

2591 
cmd
.
›code
 = 
MMC_CMD_ERASE_GROUP_END
;

2593 
cmd
.
›code
 = 
MMC_CMD_ERASE_WR_BLK_END
;

2596 
cmd
.
r•typ
 = 
RESP_R1
;

2597 
cmd
.
¨g
 = 
addr
;

2598 
cmd
.
ªåõs
 = 3;

2599 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

2601  
	`mmc_cmd
(
ˇrd
->
ho°
, &
cmd
);

2602 
	}
}

2604 
	$mmc_îa£
(
mmc_ˇrd
 *
ˇrd
, 
u32
 
¨g
)

2606 
îr
;

2607 
u32
 
°©us
;

2608 
mmc_comm™d
 
cmd
;

2610 i‡(!(
ˇrd
->
csd
.
cmd˛ass
 & 
CCC_ERASE
)) {

2611 
	`¥ötf
("[SD%d] Eø£ i¢'àsuµ‹ãd\n", 
ˇrd
->
ho°
->
id
);

2612  
MMC_ERR_INVALID
;

2615 i‡(
¨g
 & 
MMC_ERASE_SECURE_REQ
) {

2616 i‡(!(
ˇrd
->
øw_ext_csd
[
EXT_CSD_SEC_FEATURE_SUPPORT
] &

2617 
EXT_CSD_SEC_FEATURE_ER_EN
)) {

2618  
MMC_ERR_INVALID
;

2621 i‡((
¨g
 & 
MMC_ERASE_GC_REQ
Ë|| (¨g & 
MMC_ERASE_TRIM
)) {

2622 i‡(!(
ˇrd
->
øw_ext_csd
[
EXT_CSD_SEC_FEATURE_SUPPORT
] &

2623 
EXT_CSD_SEC_FEATURE_GB_CL_EN
)) {

2624  
MMC_ERR_INVALID
;

2628 
cmd
.
›code
 = 
MMC_CMD_ERASE
;

2629 
cmd
.
r•typ
 = 
RESP_R1B
;

2630 
cmd
.
¨g
 =árg;

2631 
cmd
.
ªåõs
 = 3;

2632 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

2634 
îr
 = 
	`mmc_cmd
(
ˇrd
->
ho°
, &
cmd
);

2636 i‡(!
îr
) {

2638 
îr
 = 
	`mmc_£nd_°©us
(
ˇrd
->
ho°
, c¨d, &
°©us
);

2639 i‡(
îr
) ;

2640 #i‡
MMC_DEBUG


2641 
	`mmc_dump_ˇrd_°©us
(
°©us
);

2643 i‡(
	`R1_STATUS
(
°©us
) != 0) ;

2644 } 
	`R1_CURRENT_STATE
(
°©us
) == 7);

2646  
îr
;

2647 
	}
}

2649 
	$mmc_tu√_timög
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
)

2651 
îr
 = 
MMC_ERR_NONE
;

2653 i‡(
	`mmc_ˇrd_sd
(
ˇrd
Ë&& 
	`mmc_ˇrd_uhs1
(ˇrdË&& !
	`mmc_ˇrd_ddr
(card)) {

2654 
îr
 = 
	`msdc_tu√_uhs1
(
ho°
, 
ˇrd
);

2657  
îr
;

2658 
	}
}

2660 
	$mmc_£t_˛ock
(
mmc_ho°
 *
ho°
, 
ddr
, 
hz
)

2662 i‡(
hz
 >
ho°
->
f_max
) {

2663 
hz
 = 
ho°
->
f_max
;

2664 } i‡(
hz
 < 
ho°
->
f_mö
) {

2665 
hz
 = 
ho°
->
f_mö
;

2667 
	`msdc_c⁄fig_˛ock
(
ho°
, 
ddr
 > 0 ? 1 : 0, 
hz
);

2668 
	}
}

2670 
	$mmc_£t_ˇrd_dëe˘
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
, 
c⁄√˘
)

2672 
îr
;

2673 
mmc_comm™d
 
cmd
;

2675 
cmd
.
›code
 = 
SD_ACMD_SET_CLR_CD
;

2676 
cmd
.
¨g
 = 
c⁄√˘
;

2677 
cmd
.
r•typ
 = 
RESP_R1
;

2678 
cmd
.
ªåõs
 = 
CMD_RETRIES
;

2679 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

2681 
îr
 = 
	`mmc_≠p_cmd
(
ho°
, &
cmd
, 
ˇrd
->
rˇ
, 
CMD_RETRIES
);

2682  
îr
;

2683 
	}
}

2685 
	$mmc_£t_blk_Àngth
(
mmc_ho°
 *
ho°
, 
u32
 
blkÀn
)

2687 
îr
;

2688 
mmc_comm™d
 
cmd
;

2691 
cmd
.
›code
 = 
MMC_CMD_SET_BLOCKLEN
;

2692 
cmd
.
r•typ
 = 
RESP_R1
;

2693 
cmd
.
¨g
 = 
blkÀn
;

2694 
cmd
.
ªåõs
 = 3;

2695 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

2696 
îr
 = 
	`mmc_cmd
(
ho°
, &
cmd
);

2698 i‡(
îr
 =
MMC_ERR_NONE
)

2699 
	`msdc_£t_blkÀn
(
ho°
, 
blkÀn
);

2701  
îr
;

2702 
	}
}

2704 
	$mmc_£t_blk_cou¡
(
mmc_ho°
 *
ho°
, 
u32
 
blk˙t
)

2706 
îr
;

2707 
mmc_comm™d
 
cmd
;

2710 
cmd
.
›code
 = 
MMC_CMD_SET_BLOCK_COUNT
;

2711 
cmd
.
r•typ
 = 
RESP_R1
;

2712 
cmd
.
¨g
 = 
blk˙t
;

2713 
cmd
.
ªåõs
 = 3;

2714 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

2715 
îr
 = 
	`mmc_cmd
(
ho°
, &
cmd
);

2717  
îr
;

2718 
	}
}

2720 
	$mmc_£t_bus_width
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
, 
width
)

2722 
îr
 = 
MMC_ERR_NONE
;

2723 
u32
 
¨g
;

2724 
mmc_comm™d
 
cmd
;

2726 i‡(
	`mmc_ˇrd_sd
(
ˇrd
)) {

2727 i‡(
width
 =
HOST_BUS_WIDTH_8
) {

2728 
	`WARN_ON
(
width
 =
HOST_BUS_WIDTH_8
);

2729 
width
 = 
HOST_BUS_WIDTH_4
;

2732 i‡((
width
 =
HOST_BUS_WIDTH_4
Ë&& (
ho°
->
ˇps
 & 
MMC_CAP_4_BIT_DATA
)) {

2733 
¨g
 = 
SD_BUS_WIDTH_4
;

2735 
¨g
 = 
SD_BUS_WIDTH_1
;

2736 
width
 = 
HOST_BUS_WIDTH_1
;

2739 
cmd
.
›code
 = 
SD_ACMD_SET_BUSWIDTH
;

2740 
cmd
.
¨g
 =árg;

2741 
cmd
.
r•typ
 = 
RESP_R1
;

2742 
cmd
.
ªåõs
 = 
CMD_RETRIES
;

2743 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

2745 
îr
 = 
	`mmc_≠p_cmd
(
ho°
, &
cmd
, 
ˇrd
->
rˇ
, 0);

2746 i‡(
îr
 !
MMC_ERR_NONE
)

2747 
out
;

2749 
	`msdc_c⁄fig_bus
(
ho°
, 
width
);

2750 } i‡(
	`mmc_ˇrd_mmc
(
ˇrd
)) {

2751 i‡(
ˇrd
->
csd
.
mmˇ_v¢
 < 
CSD_SPEC_VER_4
)

2752 
out
;

2754 i‡(
width
 =
HOST_BUS_WIDTH_8
) {

2755 i‡(
ho°
->
ˇps
 & 
MMC_CAP_8_BIT_DATA
) {

2756 
¨g
 = ((
ho°
->
ˇps
 & 
MMC_CAP_DDR
Ë&& 
ˇrd
->
ext_csd
.
ddr_suµ‹t
) ?

2757 
EXT_CSD_BUS_WIDTH_8_DDR
 : 
EXT_CSD_BUS_WIDTH_8
;

2759 
width
 = 
HOST_BUS_WIDTH_4
;

2762 i‡(
width
 =
HOST_BUS_WIDTH_4
) {

2763 i‡(
ho°
->
ˇps
 & 
MMC_CAP_4_BIT_DATA
) {

2764 
¨g
 = ((
ho°
->
ˇps
 & 
MMC_CAP_DDR
Ë&& 
ˇrd
->
ext_csd
.
ddr_suµ‹t
) ?

2765 
EXT_CSD_BUS_WIDTH_4_DDR
 : 
EXT_CSD_BUS_WIDTH_4
;

2767 
width
 = 
HOST_BUS_WIDTH_1
;

2770 i‡(
width
 =
HOST_BUS_WIDTH_1
)

2771 
¨g
 = 
EXT_CSD_BUS_WIDTH_1
;

2773 
îr
 = 
	`mmc_swôch
(
ho°
, 
ˇrd
, 
EXT_CSD_CMD_SET_NORMAL
, 
EXT_CSD_BUS_WIDTH
, 
¨g
);

2774 i‡(
îr
 !
MMC_ERR_NONE
) {

2775 
	`¥ötf
("[SD%d] SwôchÅÿbu†width(%dËÁûed\n", 
ho°
->
id
, 
¨g
);

2776 
out
;

2778 i‡(
¨g
 =
EXT_CSD_BUS_WIDTH_8_DDR
 ||árg =
EXT_CSD_BUS_WIDTH_4_DDR
) {

2779 
	`mmc_ˇrd_£t_ddr
(
ˇrd
);

2781 
ˇrd
->
°©e
 &~
MMC_STATE_DDR
;

2783 
	`mmc_£t_˛ock
(
ho°
, 
	`mmc_ˇrd_ddr
(
ˇrd
), ho°->
s˛k
);

2785 
	`msdc_c⁄fig_bus
(
ho°
, 
width
);

2787 
	`BUG_ON
(1);

2789 
out
:

2790  
îr
;

2791 
	}
}

2793 
	$mmc_£t_îa£_gΩ_def
(
mmc_ˇrd
 *
ˇrd
, 
íabÀ
)

2795 
îr
 = 
MMC_ERR_FAILED
;

2797 i‡(
	`mmc_ˇrd_sd
(
ˇrd
Ë|| !
	`mmc_ˇrd_highˇps
(card))

2798 
out
;

2800 i‡(
ˇrd
->
csd
.
mmˇ_v¢
 < 
CSD_SPEC_VER_4
)

2801 
out
;

2803 
îr
 = 
	`mmc_swôch
(
ˇrd
->
ho°
, c¨d, 
EXT_CSD_CMD_SET_NORMAL
,

2804 
EXT_CSD_ERASE_GRP_DEF
, 
EXT_CSD_ERASE_GRP_DEF_EN
 & 
íabÀ
);

2806 
out
:

2807  
îr
;

2808 
	}
}

2810 
	$mmc_£t_gp_size
(
mmc_ˇrd
 *
ˇrd
, 
u8
 
id
, 
u32
 
size
)

2812 
i
;

2813 
îr
 = 
MMC_ERR_FAILED
;

2814 
u8
 
gp
[] = { 
EXT_CSD_GP1_SIZE_MULT
, 
EXT_CSD_GP2_SIZE_MULT
,

2815 
EXT_CSD_GP3_SIZE_MULT
, 
EXT_CSD_GP4_SIZE_MULT
 };

2816 
u8
 
¨g
;

2817 
u8
 *
ext_csd
 = &
ˇrd
->
øw_ext_csd
[0];

2819 i‡(
	`mmc_ˇrd_sd
(
ˇrd
Ë|| !
	`mmc_ˇrd_highˇps
(card))

2820 
out
;

2822 i‡(
ˇrd
->
csd
.
mmˇ_v¢
 < 
CSD_SPEC_VER_4
)

2823 
out
;

2825 
id
--;

2826 
size
 /= 512 * 1024;

2827 
size
 /(
ext_csd
[
EXT_CSD_HC_WP_GPR_SIZE
] *Éxt_csd[
EXT_CSD_HC_ERASE_GRP_SIZE
]);

2830 
i
 = 0; i < 3; i++) {

2831 
¨g
 = (
u8
)(
size
 & 0xFF);

2832 
size
 = size >> 8;

2833 
îr
 = 
	`mmc_swôch
(
ˇrd
->
ho°
, c¨d, 
EXT_CSD_CMD_SET_NORMAL
,

2834 
gp
[
id
] + 
i
, 
¨g
);

2835 i‡(
îr
)

2836 
out
;

2839 
out
:

2840  
îr
;

2841 
	}
}

2843 
	$mmc_£t_íh_size
(
mmc_ˇrd
 *
ˇrd
, 
u32
 
size
)

2845 
i
;

2846 
îr
 = 
MMC_ERR_FAILED
;

2847 
u8
 
¨g
;

2848 
u8
 *
ext_csd
 = &
ˇrd
->
øw_ext_csd
[0];

2850 i‡(
	`mmc_ˇrd_sd
(
ˇrd
Ë|| !
	`mmc_ˇrd_highˇps
(card))

2851 
out
;

2853 i‡(
ˇrd
->
csd
.
mmˇ_v¢
 < 
CSD_SPEC_VER_4
)

2854 
out
;

2856 
size
 /= 512 * 1024;

2857 
size
 /(
ext_csd
[
EXT_CSD_HC_WP_GPR_SIZE
] *Éxt_csd[
EXT_CSD_HC_ERASE_GRP_SIZE
]);

2860 
i
 = 0; i < 3; i++) {

2861 
¨g
 = (
u8
)(
size
 & 0xFF);

2862 
size
 = size >> 8;

2863 
îr
 = 
	`mmc_swôch
(
ˇrd
->
ho°
, c¨d, 
EXT_CSD_CMD_SET_NORMAL
,

2864 
EXT_CSD_ENH_SIZE_MULT
 + 
i
, 
¨g
);

2865 i‡(
îr
)

2866 
out
;

2869 
out
:

2870  
îr
;

2871 
	}
}

2873 
	$mmc_£t_íh_°¨t_addr
(
mmc_ˇrd
 *
ˇrd
, 
u32
 
addr
)

2875 
i
;

2876 
îr
 = 
MMC_ERR_FAILED
;

2877 
u8
 
¨g
;

2879 i‡(
	`mmc_ˇrd_sd
(
ˇrd
))

2880 
out
;

2882 i‡(
ˇrd
->
csd
.
mmˇ_v¢
 < 
CSD_SPEC_VER_4
)

2883 
out
;

2885 i‡(
	`mmc_ˇrd_highˇps
(
ˇrd
))

2886 
addr
 =áddr / 512;

2889 
i
 = 0; i < 4; i++) {

2890 
¨g
 = (
u8
)(
addr
 & 0xFF);

2891 
addr
 =áddr >> 8;

2892 
îr
 = 
	`mmc_swôch
(
ˇrd
->
ho°
, c¨d, 
EXT_CSD_CMD_SET_NORMAL
,

2893 
EXT_CSD_ENH_START_ADDR
 + 
i
, 
¨g
);

2894 i‡(
îr
)

2895 
out
;

2898 
out
:

2899  
îr
;

2900 
	}
}

2902 
	$mmc_£t_boŸ_bus
(
mmc_ˇrd
 *
ˇrd
, 
u8
 
r°_bwidth
, u8 
mode
, u8 
bwidth
)

2904 
îr
 = 
MMC_ERR_FAILED
;

2905 
u8
 
¨g
;

2907 i‡(
	`mmc_ˇrd_sd
(
ˇrd
))

2908 
out
;

2910 i‡(
ˇrd
->
csd
.
mmˇ_v¢
 < 
CSD_SPEC_VER_4
)

2911 
out
;

2913 
¨g
 = 
mode
 | 
r°_bwidth
 | 
bwidth
;

2915 
îr
 = 
	`mmc_swôch
(
ˇrd
->
ho°
, c¨d, 
EXT_CSD_CMD_SET_NORMAL
,

2916 
EXT_CSD_BOOT_BUS_WIDTH
, 
¨g
);

2918 
out
:

2919  
îr
;

2920 
	}
}

2922 
	$mmc_£t_∑π_c⁄fig
(
mmc_ˇrd
 *
ˇrd
, 
u8
 
cfg
)

2924 
îr
 = 
MMC_ERR_FAILED
;

2926 i‡(
	`mmc_ˇrd_sd
(
ˇrd
))

2927 
out
;

2929 i‡(
ˇrd
->
csd
.
mmˇ_v¢
 < 
CSD_SPEC_VER_4
)

2930 
out
;

2932 
îr
 = 
	`mmc_swôch
(
ˇrd
->
ho°
, c¨d, 
EXT_CSD_CMD_SET_NORMAL
,

2933 
EXT_CSD_PART_CFG
, 
cfg
);

2935 
out
:

2936  
îr
;

2937 
	}
}

2939 
	$mmc_£t_∑π_©å
(
mmc_ˇrd
 *
ˇrd
, 
u8
 
©å
)

2941 
îr
 = 
MMC_ERR_FAILED
;

2943 i‡(
	`mmc_ˇrd_sd
(
ˇrd
))

2944 
out
;

2946 i‡(
ˇrd
->
csd
.
mmˇ_v¢
 < 
CSD_SPEC_VER_4
)

2947 
out
;

2949 i‡(!
ˇrd
->
ext_csd
.
íh_©å_í
) {

2950 
îr
 = 
MMC_ERR_INVALID
;

2951 
out
;

2954 
îr
 = 
	`mmc_swôch
(
ˇrd
->
ho°
, c¨d, 
EXT_CSD_CMD_SET_NORMAL
,

2955 
EXT_CSD_PART_ATTR
, 
©å
);

2957 
out
:

2958  
îr
;

2959 
	}
}

2961 
	$mmc_£t_∑π_com∂
(
mmc_ˇrd
 *
ˇrd
)

2963 
îr
 = 
MMC_ERR_FAILED
;

2965 i‡(
	`mmc_ˇrd_sd
(
ˇrd
))

2966 
out
;

2968 i‡(
ˇrd
->
csd
.
mmˇ_v¢
 < 
CSD_SPEC_VER_4
)

2969 
out
;

2971 
îr
 = 
	`mmc_swôch
(
ˇrd
->
ho°
, c¨d, 
EXT_CSD_CMD_SET_NORMAL
,

2972 
EXT_CSD_PART_SET_COMPL
, 
EXT_CSD_PART_SET_COMPL_BIT
);

2974 
out
:

2975  
îr
;

2976 
	}
}

2978 
	$mmc_£t_ª£t_func
(
mmc_ˇrd
 *
ˇrd
, 
u8
 
íabÀ
)

2980 
îr
 = 
MMC_ERR_FAILED
;

2981 
u8
 *
ext_csd
 = &
ˇrd
->
øw_ext_csd
[0];

2983 i‡(
	`mmc_ˇrd_sd
(
ˇrd
))

2984 
out
;

2986 i‡(
ˇrd
->
csd
.
mmˇ_v¢
 < 
CSD_SPEC_VER_4
)

2987 
out
;

2989 i‡(
ext_csd
[
EXT_CSD_RST_N_FUNC
] == 0) {

2990 
îr
 = 
	`mmc_swôch
(
ˇrd
->
ho°
, c¨d, 
EXT_CSD_CMD_SET_NORMAL
,

2991 
EXT_CSD_RST_N_FUNC
, 
íabÀ
);

2993 
out
:

2994  
îr
;

2995 
	}
}

2997 
	$mmc_boŸ_c⁄fig
(
mmc_ˇrd
 *
ˇrd
, 
u8
 
ackí
, u8 
í∑π
, u8 
buswidth
, u8 
busmode
)

2999 
îr
 = 
MMC_ERR_FAILED
;

3000 
u8
 
vÆ
;

3001 
u8
 
r°_bwidth
 = 0;

3002 
u8
 *
ext_csd
 = &
ˇrd
->
øw_ext_csd
[0];

3004 i‡(
	`mmc_ˇrd_sd
(
ˇrd
Ë|| c¨d->
csd
.
mmˇ_v¢
 < 
CSD_SPEC_VER_4
 ||

3005 !
ˇrd
->
ext_csd
.
boŸ_öfo
 || c¨d->ext_csd.
ªv
 < 3)

3006 
out
;

3008 i‡(
ˇrd
->
ext_csd
.
ªv
 > 3 && !ˇrd->ext_csd.
∑π_í
)

3009 
out
;

3012 
vÆ
 = 
ackí
 | 
í∑π
 | (
ext_csd
[
EXT_CSD_PART_CFG
] & 0x7);

3013 
îr
 = 
	`mmc_£t_∑π_c⁄fig
(
ˇrd
, 
vÆ
);

3014 i‡(
îr
 !
MMC_ERR_NONE
)

3015 
out
;

3018 
ext_csd
[
EXT_CSD_PART_CFG
] = 
vÆ
;

3021 
r°_bwidth
 = 
buswidth
 !
EXT_CSD_BOOT_BUS_WIDTH_1
 ? 1 : 0;

3023 
îr
 = 
	`mmc_£t_boŸ_bus
(
ˇrd
, 
r°_bwidth
, 
busmode
, 
buswidth
);

3025 
out
:

3027  
îr
;

3028 
	}
}

3030 
	$mmc_∑π_ªad
(
mmc_ˇrd
 *
ˇrd
, 
u8
 
∑πno
, 
blkƒ
, 
u32
 
blk˙t
, *
d°
)

3032 
îr
 = 
MMC_ERR_FAILED
;

3033 
u8
 
vÆ
;

3034 
u8
 *
ext_csd
 = &
ˇrd
->
øw_ext_csd
[0];

3035 
mmc_ho°
 *
ho°
 = 
ˇrd
->host;

3037 i‡(
	`mmc_ˇrd_sd
(
ˇrd
Ë|| c¨d->
csd
.
mmˇ_v¢
 < 
CSD_SPEC_VER_4
 ||

3038 !
ˇrd
->
ext_csd
.
boŸ_öfo
 || c¨d->ext_csd.
ªv
 < 3)

3039 
out
;

3041 i‡(
ˇrd
->
ext_csd
.
ªv
 > 3 && !ˇrd->ext_csd.
∑π_í
)

3042 
out
;

3045 
vÆ
 = (
ext_csd
[
EXT_CSD_PART_CFG
] & ~0x7Ë| (
∑πno
 & 0x7);

3046 
îr
 = 
	`mmc_£t_∑π_c⁄fig
(
ˇrd
, 
vÆ
);

3047 i‡(
îr
 !
MMC_ERR_NONE
)

3048 
out
;

3051 
îr
 = 
	`mmc_block_ªad
(
ho°
->
id
, 
blkƒ
, 
blk˙t
, 
d°
);

3053 
out
:

3055 
vÆ
 = (
ext_csd
[
EXT_CSD_PART_CFG
] & ~0x7Ë| 
EXT_CSD_PART_CFG_DEFT_PART
;

3056 
	`mmc_£t_∑π_c⁄fig
(
ˇrd
, 
vÆ
);

3058  
îr
;

3059 
	}
}

3061 
	$mmc_∑π_wrôe
(
mmc_ˇrd
 *
ˇrd
, 
u8
 
∑πno
, 
blkƒ
, 
u32
 
blk˙t
, *
§c
)

3063 
îr
 = 
MMC_ERR_FAILED
;

3064 
u8
 
vÆ
;

3065 
u8
 *
ext_csd
 = &
ˇrd
->
øw_ext_csd
[0];

3066 
mmc_ho°
 *
ho°
 = 
ˇrd
->host;

3068 i‡(
	`mmc_ˇrd_sd
(
ˇrd
Ë|| c¨d->
csd
.
mmˇ_v¢
 < 
CSD_SPEC_VER_4
 ||

3069 !
ˇrd
->
ext_csd
.
boŸ_öfo
 || c¨d->ext_csd.
ªv
 < 3)

3070 
out
;

3072 i‡(
ˇrd
->
ext_csd
.
ªv
 > 3 && !ˇrd->ext_csd.
∑π_í
)

3073 
out
;

3076 
vÆ
 = (
ext_csd
[
EXT_CSD_PART_CFG
] & ~0x7Ë| (
∑πno
 & 0x7);

3077 
îr
 = 
	`mmc_£t_∑π_c⁄fig
(
ˇrd
, 
vÆ
);

3078 i‡(
îr
 !
MMC_ERR_NONE
)

3079 
out
;

3082 
îr
 = 
	`mmc_block_wrôe
(
ho°
->
id
, 
blkƒ
, 
blk˙t
, 
§c
);

3084 
out
:

3086 
vÆ
 = (
ext_csd
[
EXT_CSD_PART_CFG
] & ~0x7Ë| 
EXT_CSD_PART_CFG_DEFT_PART
;

3087 
	`mmc_£t_∑π_c⁄fig
(
ˇrd
, 
vÆ
);

3089  
îr
;

3090 
	}
}

3092 
	$mmc_£t_boŸ_¥Ÿ
(
mmc_ˇrd
 *
ˇrd
, 
u8
 
¥Ÿ
)

3094 
îr
 = 
MMC_ERR_FAILED
;

3096 i‡(
	`mmc_ˇrd_sd
(
ˇrd
))

3097 
out
;

3099 
	`WARN_ON
(
ˇrd
->
csd
.
mmˇ_v¢
 < 
CSD_SPEC_VER_4
);

3100 i‡(
ˇrd
->
csd
.
mmˇ_v¢
 < 
CSD_SPEC_VER_4
)

3101 
out
;

3103 
îr
 = 
	`mmc_swôch
(
ˇrd
->
ho°
, c¨d, 
EXT_CSD_CMD_SET_NORMAL
,

3104 
EXT_CSD_BOOT_CONFIG_PROT
, 
¥Ÿ
);

3106 
out
:

3107  
îr
;

3108 
	}
}

3110 
	$mmc_£t_boŸ_wp
(
mmc_ˇrd
 *
ˇrd
, 
u8
 
wp
)

3112 
îr
 = 
MMC_ERR_FAILED
;

3114 i‡(
	`mmc_ˇrd_sd
(
ˇrd
))

3115 
out
;

3117 
	`WARN_ON
(
ˇrd
->
csd
.
mmˇ_v¢
 < 
CSD_SPEC_VER_4
);

3118 i‡(
ˇrd
->
csd
.
mmˇ_v¢
 < 
CSD_SPEC_VER_4
)

3119 
out
;

3121 
îr
 = 
	`mmc_swôch
(
ˇrd
->
ho°
, c¨d, 
EXT_CSD_CMD_SET_NORMAL
,

3122 
EXT_CSD_BOOT_WP
, 
wp
);

3124 
out
:

3125  
îr
;

3126 
	}
}

3128 
	$mmc_£t_u£r_wp
(
mmc_ˇrd
 *
ˇrd
, 
u8
 
wp
)

3130 
îr
 = 
MMC_ERR_FAILED
;

3132 i‡(
	`mmc_ˇrd_sd
(
ˇrd
))

3133 
out
;

3135 
	`WARN_ON
(
ˇrd
->
csd
.
mmˇ_v¢
 < 
CSD_SPEC_VER_4
);

3136 i‡(
ˇrd
->
csd
.
mmˇ_v¢
 < 
CSD_SPEC_VER_4
)

3137 
out
;

3139 
îr
 = 
	`mmc_swôch
(
ˇrd
->
ho°
, c¨d, 
EXT_CSD_CMD_SET_NORMAL
,

3140 
EXT_CSD_USR_WP
, 
wp
);

3142 
out
:

3143  
îr
;

3144 
	}
}

3146 
	$mmc_dev_bªad
(
mmc_ˇrd
 *
ˇrd
, 
blkƒ
, 
u32
 
blk˙t
, 
u8
 *
d°
)

3148 
mmc_ho°
 *
ho°
 = 
ˇrd
->host;

3149 
u32
 
blksz
 = 
ho°
->
blkÀn
;

3150 
tu√
 = 0;

3151 #i‡
MSDC_USE_RD_TUNING


3152 
ªåy
 = 1;

3154 
ªåy
 = 3;

3156 
îr
;

3157 
§c
;

3159 
§c
 = 
	`mmc_ˇrd_highˇps
(
ˇrd
Ë? 
blkƒ
 : blkƒ * 
blksz
;

3162 
	`mmc_¥of_°¨t
();

3163 i‡(!
tu√
) {

3164 
îr
 = 
ho°
->
	`blk_ªad
(ho°, (
uch¨
 *)
d°
, 
§c
, 
blk˙t
);

3166 #i‡
MSDC_USE_RD_TUNING


3167 
îr
 = 
	`msdc_tu√_bªad
(
ho°
, (
uch¨
 *)
d°
, 
§c
, 
blk˙t
);

3169 #i‡
MSDC_USE_CLKDIV_IN_DATCRC


3170 i‡(
îr
 && (
ho°
->
s˛k
 > (ho°->
f_max
 >> 4))) {

3171 
	`mmc_£t_˛ock
(
ho°
, 
	`mmc_ˇrd_ddr
(
ˇrd
), ho°->
s˛k
 >> 1);

3172 
îr
 = 
ho°
->
	`blk_ªad
(ho°, (
uch¨
 *)
d°
, 
§c
, 
blk˙t
);

3176 
	`mmc_¥of_°›
();

3177 i‡(
îr
 =
MMC_ERR_NONE
) {

3178 
	`mmc_¥of_upd©e
(
mmc_¥of_ªad
, 
blk˙t
, 
	`mmc_¥of_h™dÀ
(
ho°
->
id
));

3182 i‡(
îr
 =
MMC_ERR_BADCRC
)

3183 
tu√
 = 1;

3184 } 
ªåy
--);

3186  
îr
;

3187 
	}
}

3189 
	$mmc_dev_bwrôe
(
mmc_ˇrd
 *
ˇrd
, 
blkƒ
, 
u32
 
blk˙t
, 
u8
 *
§c
)

3191 
mmc_ho°
 *
ho°
 = 
ˇrd
->host;

3192 
u32
 
blksz
 = 
ho°
->
blkÀn
;

3193 
u32
 
°©us
;

3194 
tu√
 = 0;

3195 #i‡
MSDC_USE_WR_TUNING


3196 
ªåy
 = 1;

3198 
ªåy
 = 3;

3200 
îr
;

3201 
d°
;

3203 
d°
 = 
	`mmc_ˇrd_highˇps
(
ˇrd
Ë? 
blkƒ
 : blkƒ * 
blksz
;

3206 
	`mmc_¥of_°¨t
();

3207 i‡(!
tu√
) {

3208 
îr
 = 
ho°
->
	`blk_wrôe
(ho°, 
d°
, (
uch¨
 *)
§c
, 
blk˙t
);

3210 #i‡
MSDC_USE_WR_TUNING


3211 
îr
 = 
	`msdc_tu√_bwrôe
(
ho°
, 
d°
, (
uch¨
 *)
§c
, 
blk˙t
);

3213 #i‡
MSDC_USE_CLKDIV_IN_DATCRC


3214 i‡(
îr
 && (
ho°
->
s˛k
 > (ho°->
f_max
 >> 4))) {

3215 
	`mmc_£t_˛ock
(
ho°
, 
	`mmc_ˇrd_ddr
(
ˇrd
), ho°->
s˛k
 >> 1);

3216 
îr
 = 
ho°
->
	`blk_wrôe
(ho°, 
d°
, (
uch¨
 *)
§c
, 
blk˙t
);

3220 i‡(
îr
 =
MMC_ERR_NONE
) {

3222 
îr
 = 
	`mmc_£nd_°©us
(
ho°
, 
ˇrd
, &
°©us
);

3223 i‡(
îr
) {

3224 
	`¥ötf
("[SD%d] FaûÅÿ£nd sètu†%d\n", 
ho°
->
id
, 
îr
);

3227 } !(
°©us
 & 
R1_READY_FOR_DATA
) ||

3228 (
	`R1_CURRENT_STATE
(
°©us
) == 7));

3229 
	`mmc_¥of_°›
();

3230 
	`mmc_¥of_upd©e
(
mmc_¥of_wrôe
, 
blk˙t
, 
	`mmc_¥of_h™dÀ
(
ho°
->
id
));

3231 
	`MSG
(
OPS
, "[SD%d] Write %d bytes (DONE)\n",

3232 
ho°
->
id
, 
blk˙t
 * 
blksz
);

3236 i‡(
îr
 =
MMC_ERR_BADCRC
 ||Éº =
MMC_ERR_TIMEOUT
)

3237 
tu√
 = 1;

3238 } 
ªåy
--);

3240  
îr
;

3241 
	}
}

3243 
	$mmc_block_ªad
(
dev_num
, 
blkƒ
, 
u32
 
blk˙t
, *
d°
)

3245 
mmc_ho°
 *
ho°
 = 
	`mmc_gë_ho°
(
dev_num
);

3246 
mmc_ˇrd
 *
ˇrd
 = 
	`mmc_gë_ˇrd
(
dev_num
);

3247 
u32
 
blksz
 = 
ho°
->
blkÀn
;

3248 
u32
 
maxblks
 = 
ho°
->
max_phys_£gs
;

3249 
u32
 
x„r˙t
 = 
blk˙t
 / 
maxblks
;

3250 
u32
 
À·blks
 = 
blk˙t
 % 
maxblks
;

3251 
u32
 
i
, 
id
 = 
ho°
->id;

3252 
u8
 *
buf
 = (u8*)
d°
;

3253 
ªt
;

3255 i‡(!
blk˙t
)

3256  
MMC_ERR_NONE
;

3258 i‡(
blkƒ
 * 
blksz
 / 
MMC_BLOCK_SIZE
 > 
ˇrd
->
nblks
) {

3259 
	`¥ötf
("[SD%d] Out of blockÑange: blknr(%d) > sd_blknr(%d)\n",

3260 
ho°
->
id
, 
blkƒ
, 
ˇrd
->
nblks
);

3261  
MMC_ERR_INVALID
;

3264 
i
 = 
x„r˙t
; i > 0; i--) {

3265 
ªt
 = 
	`mmc_dev_bªad
(
ˇrd
, ()
blkƒ
, 
maxblks
, 
buf
);

3266 i‡(
ªt
)

3267  
ªt
;

3268 
blkƒ
 +
maxblks
;

3269 
buf
 +
maxblks
 * 
blksz
;

3271 i‡(
À·blks
)

3272 
ªt
 = 
	`mmc_dev_bªad
(
ˇrd
, ()
blkƒ
, 
À·blks
, 
buf
);

3274  
ªt
;

3275 
	}
}

3277 
	$mmc_block_wrôe
(
dev_num
, 
blkƒ
, 
u32
 
blk˙t
, *
§c
)

3279 
mmc_ho°
 *
ho°
 = 
	`mmc_gë_ho°
(
dev_num
);

3280 
mmc_ˇrd
 *
ˇrd
 = 
	`mmc_gë_ˇrd
(
dev_num
);

3281 
u32
 
blksz
 = 
ho°
->
blkÀn
;

3282 
u32
 
maxblks
 = 
ho°
->
max_phys_£gs
;

3283 
u32
 
x„r˙t
 = 
blk˙t
 / 
maxblks
;

3284 
u32
 
À·blks
 = 
blk˙t
 % 
maxblks
;

3285 
u32
 
i
, 
id
 = 
ho°
->id;

3286 
u8
 *
buf
 = (u8*)
§c
;

3287 
ªt
;

3289 i‡(!
blk˙t
)

3290  
MMC_ERR_NONE
;

3292 i‡(
blkƒ
 * 
blksz
 / 
MMC_BLOCK_SIZE
 > 
ˇrd
->
nblks
) {

3293 
	`¥ötf
("[SD%d] Out of blockÑange: blknr(%d) > sd_blknr(%d)\n",

3294 
ho°
->
id
, 
blkƒ
, 
ˇrd
->
nblks
);

3295  
MMC_ERR_INVALID
;

3298 
i
 = 
x„r˙t
; i > 0; i--) {

3299 
ªt
 = 
	`mmc_dev_bwrôe
(
ˇrd
, ()
blkƒ
, 
maxblks
, 
buf
);

3300 i‡(
ªt
)

3301  
ªt
;

3302 
blkƒ
 +
maxblks
;

3303 
buf
 +
maxblks
 * 
blksz
;

3305 i‡(
À·blks
)

3306 
ªt
 = 
	`mmc_dev_bwrôe
(
ˇrd
, ()
blkƒ
, 
À·blks
, 
buf
);

3308  
ªt
;

3309 
	}
}

3311 
	$mmc_boŸ_ª£t
(
mmc_ho°
 *
ho°
, 
ª£t
)

3313 
	`msdc_emmc_boŸ_ª£t
(
ho°
, 
ª£t
);

3314 
	}
}

3316 
	$mmc_boŸ_up
(
mmc_ho°
 *
ho°
, 
mode
, 
ackdis
, 
u32
 *
to
, u32 
size
)

3318 
îr
;

3320 
	`ERR_EXIT
(
	`msdc_emmc_boŸ_°¨t
(
ho°
, ho°->
s˛k
, 0, 
mode
, 
ackdis
), 
îr
, 
MMC_ERR_NONE
);

3321 
	`ERR_EXIT
(
	`msdc_emmc_boŸ_ªad
(
ho°
, 
size
, 
to
), 
îr
, 
MMC_ERR_NONE
);

3323 
exô
:

3324 
	`msdc_emmc_boŸ_°›
(
ho°
, 
mode
);

3326  
îr
;

3327 
	}
}

3329 
	$mmc_öô_mem_ˇrd
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
, 
u32
 
o¸
)

3331 
îr
, 
id
 = 
ho°
->id;

3332 
s18a
 = 0;

3338 i‡(
o¸
 & 0x7F) {

3339 
	`¥ötf
("card claimsÅo support voltages "

3341 
o¸
 &= ~0x7F;

3344 
o¸
 = 
ho°
->o¸ = 
	`mmc_£À˘_vﬁège
(host, ocr);

3349 i‡(!
ho°
->
o¸
) {

3350 
îr
 = 
MMC_ERR_FAILED
;

3351 
out
;

3354 
	`mmc_go_idÀ
(
ho°
);

3357 i‡(
	`mmc_ˇrd_sd
(
ˇrd
))

3358 
îr
 = 
	`mmc_£nd_if_c⁄d
(
ho°
, 
o¸
);

3361 
o¸
 |= (1 << 30);

3363 i‡(!
îr
) {

3365 i‡(
ho°
->
ˇps
 & 
MMC_CAP_SD_UHS1
)

3366 
o¸
 |= ((1 << 28) | (1 << 24));

3370 i‡(
	`mmc_ˇrd_sd
(
ˇrd
)) {

3371 
îr
 = 
	`mmc_£nd_≠p_›_c⁄d
(
ho°
, 
o¸
, &
ˇrd
->ocr);

3374 
îr
 = 
	`mmc_£nd_›_c⁄d
(
ho°
, 
o¸
, &
ˇrd
->ocr);

3377 i‡(
îr
 !
MMC_ERR_NONE
) {

3378 
	`¥ötf
("[SD%d] Faû i¿SEND_OP_COND cmd\n", 
id
);

3379 
out
;

3383 
ˇrd
->
°©e
 |((ˇrd->
o¸
 >> 30Ë& 0x1Ë? 
MMC_STATE_HIGHCAPS
 : 0;

3384 
s18a
 = (
ˇrd
->
o¸
 >> 24) & 0x1;

3387 i‡(
s18a
) {

3388 
îr
 = 
	`mmc_swôch_vﬁt
(
ho°
, 
ˇrd
);

3389 i‡(
îr
 !
MMC_ERR_NONE
) {

3390 
	`¥ötf
("[SD%d] Faû i¿SWITCH_VOLT cmd\n", 
id
);

3391 
out
;

3395 
îr
 = 
	`mmc_Æl_£nd_cid
(
ho°
, 
ˇrd
->
øw_cid
);

3397 i‡(
îr
 !
MMC_ERR_NONE
) {

3398 
	`¥ötf
("[SD%d] Faû i¿SEND_CID cmd\n", 
id
);

3399 
out
;

3401 
	`mmc_decode_cid
(
ˇrd
);

3403 i‡(
	`mmc_ˇrd_mmc
(
ˇrd
))

3404 
ˇrd
->
rˇ
 = 0x1;

3407 
îr
 = 
	`mmc_£nd_ªœtive_addr
(
ho°
, 
ˇrd
, &ˇrd->
rˇ
);

3408 i‡(
îr
 !
MMC_ERR_NONE
) {

3409 
	`¥ötf
("[SD%d] Faû i¿SEND_RCA cmd\n", 
id
);

3410 
out
;

3414 
îr
 = 
	`mmc_ªad_csds
(
ho°
, 
ˇrd
);

3415 i‡(
îr
 !
MMC_ERR_NONE
) {

3416 
	`¥ötf
("[SD%d] Faû i¿SEND_CSD cmd\n", 
id
);

3417 
out
;

3421 
îr
 = 
	`mmc_decode_csd
(
ˇrd
);

3422 i‡(
îr
 !
MMC_ERR_NONE
) {

3423 
	`¥ötf
("[SD%d] Faû i¿decodêcsd\n", 
id
);

3424 
out
;

3428 
îr
 = 
	`mmc_£À˘_ˇrd
(
ho°
, 
ˇrd
);

3429 i‡(
îr
 !
MMC_ERR_NONE
) {

3430 
	`¥ötf
("[SD%d] Faû i¿£À˘ c¨d cmd\n", 
id
);

3431 
out
;

3434 i‡(
	`mmc_ˇrd_sd
(
ˇrd
)) {

3436 
îr
 = 
	`mmc_ªad_s¸s
(
ho°
, 
ˇrd
);

3437 i‡(
îr
 !
MMC_ERR_NONE
) {

3438 
	`¥ötf
("[SD%d] Faû i¿SEND_SCR cmd\n", 
id
);

3439 
out
;

3442 i‡((
ˇrd
->
csd
.
cmd˛ass
 & 
CCC_SWITCH
) &&

3443 (
	`mmc_ªad_swôch
(
ho°
, 
ˇrd
Ë=
MMC_ERR_NONE
)) {

3445 i‡(
s18a
 && (
ho°
->
ˇps
 & 
MMC_CAP_SD_UHS1
)) {

3448 
‰eq
, 
uhs_mode
, 
drv_ty≥
, 
max_cuº
;

3449 
‰eq
 = 
	`mö
(
ho°
->
f_max
, 
ˇrd
->
sw_ˇps
.
hs_max_då
);

3451 i‡(
‰eq
 > 100000000) {

3452 
uhs_mode
 = 
MMC_SWITCH_MODE_SDR104
;

3453 } i‡(
‰eq
 <= 100000000 && freq > 50000000) {

3454 i‡(
ˇrd
->
sw_ˇps
.
ddr
 && 
ho°
->
ˇps
 & 
MMC_CAP_DDR
) {

3455 
uhs_mode
 = 
MMC_SWITCH_MODE_DDR50
;

3457 
uhs_mode
 = 
MMC_SWITCH_MODE_SDR50
;

3459 } i‡(
‰eq
 <= 50000000 && freq > 25000000) {

3460 
uhs_mode
 = 
MMC_SWITCH_MODE_SDR25
;

3462 
uhs_mode
 = 
MMC_SWITCH_MODE_SDR12
;

3464 
drv_ty≥
 = 
MMC_SWITCH_MODE_DRV_TYPE_B
;

3465 
max_cuº
 = 
MMC_SWITCH_MODE_CL_200MA
;

3467 i‡(
	`mmc_swôch_drv_ty≥
(
ho°
, 
ˇrd
, 
drv_ty≥
Ë=
MMC_ERR_NONE
 &&

3468 
	`mmc_swôch_max_cur
(
ho°
, 
ˇrd
, 
max_cuº
Ë=
MMC_ERR_NONE
 &&

3469 
	`mmc_swôch_uhs1
(
ho°
, 
ˇrd
, 
uhs_mode
Ë=
MMC_ERR_NONE
) {

3472 
	`mmc_swôch_drv_ty≥
(
ho°
, 
ˇrd
, 
MMC_SWITCH_MODE_DRV_TYPE_B
);

3473 
	`mmc_swôch_max_cur
(
ho°
, 
ˇrd
, 
MMC_SWITCH_MODE_CL_200MA
);

3476 i‡(
ho°
->
ˇps
 & 
MMC_CAP_SD_HIGHSPEED
) {

3477 
	`mmc_swôch_hs
(
ho°
, 
ˇrd
);

3484 
	`mmc_£t_bus_width
(
ho°
, 
ˇrd
, 
HOST_BUS_WIDTH_4
);

3487 
ˇrd
->
maxhz
 = ()-1;

3489 i‡(
	`mmc_ˇrd_high•ìd
(
ˇrd
Ë|| 
	`mmc_ˇrd_uhs1
(card)) {

3490 i‡(
ˇrd
->
maxhz
 > c¨d->
sw_ˇps
.
hs_max_då
)

3491 
ˇrd
->
maxhz
 = c¨d->
sw_ˇps
.
hs_max_då
;

3492 } i‡(
ˇrd
->
maxhz
 > c¨d->
csd
.
max_då
) {

3493 
ˇrd
->
maxhz
 = c¨d->
csd
.
max_då
;

3498 
îr
 = 
	`mmc_ªad_ext_csd
(
ho°
, 
ˇrd
);

3499 i‡(
îr
 !
MMC_ERR_NONE
) {

3500 
	`¥ötf
("[SD%d] Faû i¿SEND_EXT_CSD cmd\n", 
id
);

3501 
out
;

3505 i‡((
ˇrd
->
ext_csd
.
hs_max_då
 !0Ë&& (
ho°
->
ˇps
 & 
MMC_CAP_MMC_HIGHSPEED
)) {

3506 
îr
 = 
	`mmc_swôch
(
ho°
, 
ˇrd
, 
EXT_CSD_CMD_SET_NORMAL
, 
EXT_CSD_HS_TIMING
, 1);

3508 i‡(
îr
 =
MMC_ERR_NONE
) {

3509 
	`¥ötf
("[SD%d] SwôchÅÿHigh-S≥ed mode!\n", 
ho°
->
id
);

3510 
	`mmc_ˇrd_£t_high•ìd
(
ˇrd
);

3515 
	`mmc_£t_bus_width
(
ho°
, 
ˇrd
, 
HOST_BUS_WIDTH_8
);

3518 
ˇrd
->
maxhz
 = ()-1;

3520 i‡(
	`mmc_ˇrd_high•ìd
(
ˇrd
)) {

3521 i‡(
ˇrd
->
maxhz
 > c¨d->
ext_csd
.
hs_max_då
)

3522 
ˇrd
->
maxhz
 = c¨d->
ext_csd
.
hs_max_då
;

3523 } i‡(
ˇrd
->
maxhz
 > c¨d->
csd
.
max_då
) {

3524 
ˇrd
->
maxhz
 = c¨d->
csd
.
max_då
;

3529 i‡(!(
	`mmc_ˇrd_mmc
(
ˇrd
Ë&& 
	`mmc_ˇrd_ddr
(card))) {

3530 
îr
 = 
	`mmc_£t_blk_Àngth
(
ho°
, 
MMC_BLOCK_SIZE
);

3531 i‡(
îr
 !
MMC_ERR_NONE
) {

3532 
	`¥ötf
("[SD%d] Faû i¿£àblkÀ¿cmd\n", 
id
);

3533 
out
;

3538 i‡(
	`mmc_ˇrd_sd
(
ˇrd
))

3539 
	`mmc_£t_ˇrd_dëe˘
(
ho°
, 
ˇrd
, 0);

3541 i‡(!
	`mmc_ˇrd_sd
(
ˇrd
Ë&& 
	`mmc_ˇrd_blockaddr
(card)) {

3543 
ˇrd
->
blkÀn
 = 
MMC_BLOCK_SIZE
;

3544 
ˇrd
->
nblks
 = c¨d->
ext_csd
.
£˘‹s
;

3549 
ˇrd
->
blkÀn
 = 
MMC_BLOCK_SIZE
;

3550 
ˇrd
->
nblks
 = c¨d->
csd
.
ˇ∑côy
 << (ˇrd->csd.
ªad_blkbôs
 - 9);

3553 
	`¥ötf
("[SD%d] Size: %d MB, Max.Speed: %d kHz, blklen(%d),Çblks(%d),Ño(%d)\n",

3554 
id
, ((
ˇrd
->
nblks
 / 1024Ë* c¨d->
blkÀn
Ë/ 1024 , c¨d->
maxhz
 / 1000,

3555 
ˇrd
->
blkÀn
, c¨d->
nblks
, 
	`mmc_ˇrd_ªad⁄ly
(card));

3557 
ˇrd
->
ªady
 = 1;

3559 
	`¥ötf
("[SD%d] Inôülized\n", 
id
);

3561 
out
:

3562  
îr
;

3563 
	}
}

3565 
	$mmc_öô_sdio_ˇrd
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
, 
u32
 
o¸
)

3567 
îr
, 
i
, 
id
 = 
ho°
->id;

3573 i‡(
o¸
 & 0x7F) {

3574 
	`¥ötf
("card claimsÅo support voltages "

3576 
o¸
 &= ~0x7F;

3579 
o¸
 = 
ho°
->o¸ = 
	`mmc_£À˘_vﬁège
(host, ocr);

3582 i‡(!
ho°
->
o¸
) {

3583 
îr
 = 
MMC_ERR_FAILED
;

3584 
out
;

3587 
îr
 = 
	`mmc_£nd_io_›_c⁄d
(
ho°
, ho°->
o¸_avaû
, &
o¸
);

3588 i‡(
îr
)

3589 
out
;

3591 
ˇrd
->
ho°
 = host;

3592 
ˇrd
->
sdio_funcs
 = (
o¸
 & 0x70000000) >> 28;

3595 
îr
 = 
	`mmc_£nd_ªœtive_addr
(
ho°
, 
ˇrd
, &ˇrd->
rˇ
);

3596 i‡(
îr
 !
MMC_ERR_NONE
) {

3597 
	`¥ötf
("[SD%d] Faû i¿SEND_RCA cmd\n", 
id
);

3598 
out
;

3601 
îr
 = 
	`mmc_£À˘_ˇrd
(
ho°
, 
ˇrd
);

3602 i‡(
îr
 !
MMC_ERR_NONE
) {

3603 
	`¥ötf
("[SD%d] Faû i¿£À˘ c¨d\n", 
id
);

3604 
out
;

3608 
îr
 = 
	`mmc_sdio_ªad_cc¸
(
ˇrd
);

3609 i‡(
îr
 !
MMC_ERR_NONE
) {

3610 
	`¥ötf
("[SD%d] Faû i¿ªadögÅhêcomm⁄Ñegi°î\n", 
id
);

3611 
out
;

3615 
îr
 = 
	`mmc_sdio_ªad_comm⁄_cis
(
ˇrd
);

3616 i‡(
îr
 !
MMC_ERR_NONE
) {

3617 
	`¥ötf
("[SD%d] Faû i¿ªadögÅhêcomm⁄ CIS\n", 
id
);

3618 
out
;

3622 
îr
 = 
	`mmc_sdio_íabÀ_hs
(
ˇrd
);

3623 i‡(
îr
 !
MMC_ERR_NONE
) {

3624 
	`¥ötf
("[SD%d] Faû i¿íabÀ SDIO HS\n", 
id
);

3625 
out
;

3631 i‡(
	`mmc_ˇrd_high•ìd
(
ˇrd
)) {

3638 
	`mmc_£t_˛ock
(
ho°
, 
	`mmc_ˇrd_ddr
(
ˇrd
), 50000000);

3640 
	`mmc_£t_˛ock
(
ho°
, 
	`mmc_ˇrd_ddr
(
ˇrd
), c¨d->
cis
.
max_då
);

3644 
îr
 = 
	`mmc_sdio_íabÀ_wide
(
ˇrd
);

3647 
i
 = 0;ò< ()
ˇrd
->
sdio_funcs
;i++) {

3648 
îr
 = 
	`mmc_sdio_öô_func
(
ˇrd
, 
i
 + 1);

3649 i‡(
îr
)

3650 
out
;

3653 
	`mmc_ˇrd_£t_sdio
(
ˇrd
);

3654 
	`¥ötf
("[SD%d] SDIO Inôülized\n", 
ho°
->
id
);

3656 
out
:

3657  
îr
;

3658 
	}
}

3660 
	$mmc_öô_ˇrd
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
)

3662 
îr
, 
id
 = 
ho°
->id;

3663 
u32
 
o¸
;

3665 
	`mem£t
(
ˇrd
, 0, (
mmc_ˇrd
));

3666 
	`mmc_¥of_öô
(
id
, 
ho°
, 
ˇrd
);

3667 
	`mmc_¥of_°¨t
();

3669 i‡(!
	`msdc_ˇrd_avaû
(
ho°
)) {

3670 
îr
 = 
MMC_ERR_INVALID
;

3671 
out
;

3674 i‡(
	`msdc_ˇrd_¥Ÿe˘ed
(
ho°
))

3675 
	`mmc_ˇrd_£t_ªad⁄ly
(
ˇrd
);

3677 
	`mmc_ˇrd_£t_¥e£¡
(
ˇrd
);

3678 
	`mmc_ˇrd_£t_ho°
(
ˇrd
, 
ho°
);

3679 
	`mmc_ˇrd_£t_unknown
(
ˇrd
);

3681 
	`mmc_go_idÀ
(
ho°
);

3684 
	`mmc_£nd_if_c⁄d
(
ho°
, ho°->
o¸_avaû
);

3685 i‡(
	`mmc_£nd_io_›_c⁄d
(
ho°
, 0, &
o¸
Ë=
MMC_ERR_NONE
) {

3686 
	`mmc_ˇrd_£t_sdio
(
ˇrd
);

3687 
îr
 = 
	`mmc_öô_sdio_ˇrd
(
ho°
, 
ˇrd
, 
o¸
);

3688 i‡(
îr
 !
MMC_ERR_NONE
) {

3689 
	`¥ötf
("[SD%d] Faû i¿öô sdiÿˇrd\n", 
id
);

3690 
out
;

3693 i‡((
o¸
 & 0x08000000) == 0) {

3694 
out
;

3698 
îr
 = 
	`mmc_£nd_≠p_›_c⁄d
(
ho°
, 0, &
o¸
);

3699 i‡(
îr
 !
MMC_ERR_NONE
) {

3700 
îr
 = 
	`mmc_£nd_›_c⁄d
(
ho°
, 0, &
o¸
);

3701 i‡(
îr
 !
MMC_ERR_NONE
) {

3702 
	`¥ötf
("[SD%d] Faû i¿SEND_IF_COND cmd\n", 
id
);

3703 
out
;

3705 
	`mmc_ˇrd_£t_mmc
(
ˇrd
);

3707 
	`mmc_ˇrd_£t_sd
(
ˇrd
);

3710 
îr
 = 
	`mmc_öô_mem_ˇrd
(
ho°
, 
ˇrd
, 
o¸
);

3712 i‡(
îr
)

3713 
out
;

3716 
	`mmc_£t_˛ock
(
ho°
, 
	`mmc_ˇrd_ddr
(
ˇrd
), c¨d->
maxhz
);

3719 
	`mmc_tu√_timög
(
ho°
, 
ˇrd
);

3721 
out
:

3722 
	`mmc_¥of_°›
();

3723 
	`mmc_¥of_upd©e
(
mmc_¥of_ˇrd_öô
, (
ul⁄g
)
id
, (*)
îr
);

3724 i‡(
îr
) {

3725 
	`msdc_powî
(
ho°
, 
MMC_POWER_OFF
);

3726  
îr
;

3728 
ho°
->
ˇrd
 = card;

3730 
	}
}

3732 
	$mmc_öô_ho°
(
id
, 
mmc_ho°
 *
ho°
, 
˛k§c
, 
u8
 
mode
)

3734 
	`mem£t
(
ho°
, 0, (
mmc_ho°
));

3736  
	`msdc_öô
(
id
, 
ho°
, 
˛k§c
, 
mode
);

3737 
	}
}

3739 
	$mmc_h¨d_ª£t
()

3741 
	`msdc_h¨d_ª£t
();

3742 
	}
}

3744 
	$mmc_öô
(
id
)

3746 
îr
 = 
MMC_ERR_NONE
;

3747 
mmc_ho°
 *
ho°
;

3748 
mmc_ˇrd
 *
ˇrd
;

3750 
	`BUG_ON
(
id
 >
NR_MMC
);

3752 
ho°
 = &
sd_ho°
[
id
];

3753 
ˇrd
 = &
sd_ˇrd
[
id
];

3754 
îr
 = 
	`mmc_öô_ho°
(
id
, 
ho°
, -1, 
MSDC_MODE_PIO
);

3755 i‡(
îr
 =
MMC_ERR_NONE
)

3756 
îr
 = 
	`mmc_öô_ˇrd
(
ho°
, 
ˇrd
);

3758  
îr
;

3759 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/msdc/mmc_core.h

36 #i‚de‡
MMC_CORE_H


37 
	#MMC_CORE_H


	)

39 
	~<löux/ty≥s.h
>

41 #ifde‡
__˝lu•lus


45 
	#MMC_BLOCK_BITS
 (9)

	)

46 
	#MMC_BLOCK_SIZE
 (1 << 
MMC_BLOCK_BITS
)

	)

47 
	#MMC_MAX_BLOCK_SIZE
 (1 << 
MMC_BLOCK_BITS
)

	)

49 
	#SDIO_MAX_FUNCS
 (7)

	)

51 
	#SD_CMD_BIT
 (1 << 7)

	)

52 
	#SD_CMD_APP_BIT
 (1 << 8)

	)

53 
	#SD_CMD_AUTO_BIT
 (1 << 9)

	)

56 
	#MMC_CMD_GO_IDLE_STATE
 (0Ë

	)

57 
	#MMC_CMD_SEND_OP_COND
 (1Ë

	)

58 
	#MMC_CMD_ALL_SEND_CID
 (2Ë

	)

59 
	#MMC_CMD_SET_RELATIVE_ADDR
 (3Ë

	)

60 
	#MMC_CMD_SET_DSR
 (4Ë

	)

61 
	#MMC_CMD_SLEEP_AWAKE
 (5Ë

	)

62 
	#MMC_CMD_SWITCH
 (6Ë

	)

63 
	#MMC_CMD_SELECT_CARD
 (7Ë

	)

64 
	#MMC_CMD_SEND_EXT_CSD
 (8Ë

	)

65 
	#MMC_CMD_SEND_CSD
 (9Ë

	)

66 
	#MMC_CMD_SEND_CID
 (10Ë

	)

67 
	#MMC_CMD_READ_DAT_UNTIL_STOP
 (11Ë

	)

68 
	#MMC_CMD_STOP_TRANSMISSION
 (12Ë

	)

69 
	#MMC_CMD_SEND_STATUS
 (13Ë

	)

70 
	#MMC_CMD_BUSTEST_R
 (14Ë

	)

71 
	#MMC_CMD_GO_INACTIVE_STATE
 (15Ë

	)

72 
	#MMC_CMD_SET_BLOCKLEN
 (16Ë

	)

73 
	#MMC_CMD_READ_SINGLE_BLOCK
 (17Ë

	)

74 
	#MMC_CMD_READ_MULTIPLE_BLOCK
 (18Ë

	)

75 
	#MMC_CMD_BUSTEST_W
 (19Ë

	)

76 
	#MMC_CMD_WRITE_DAT_UNTIL_STOP
 (20Ë

	)

77 
	#MMC_CMD_SET_BLOCK_COUNT
 (23Ë

	)

78 
	#MMC_CMD_WRITE_BLOCK
 (24Ë

	)

79 
	#MMC_CMD_WRITE_MULTIPLE_BLOCK
 (25Ë

	)

80 
	#MMC_CMD_PROGRAM_CID
 (26Ë

	)

81 
	#MMC_CMD_PROGRAM_CSD
 (27Ë

	)

83 
	#MMC_CMD_SET_WRITE_PROT
 (28Ë

	)

84 
	#MMC_CMD_CLR_WRITE_PROT
 (29Ë

	)

85 
	#MMC_CMD_SEND_WRITE_PROT
 (30Ë

	)

86 
	#MMC_CMD_SEND_WRITE_PROT_TYPE
 (31Ë

	)

87 
	#MMC_CMD_ERASE_WR_BLK_START
 (32)

	)

88 
	#MMC_CMD_ERASE_WR_BLK_END
 (33)

	)

89 
	#MMC_CMD_ERASE_GROUP_START
 (35Ë

	)

90 
	#MMC_CMD_ERASE_GROUP_END
 (36Ë

	)

91 
	#MMC_CMD_ERASE
 (38Ë

	)

92 
	#MMC_CMD_FAST_IO
 (39Ë

	)

93 
	#MMC_CMD_GO_IRQ_STATE
 (40Ë

	)

94 
	#MMC_CMD_LOCK_UNLOCK
 (42Ë

	)

95 
	#MMC_CMD_APP_CMD
 (55Ë

	)

96 
	#MMC_CMD_GEN_CMD
 (56Ë

	)

99 
	#SD_CMD_SEND_RELATIVE_ADDR
 (3 | 
SD_CMD_BIT
)

	)

100 
	#SD_CMD_SWITCH
 (6 | 
SD_CMD_BIT
)

	)

101 
	#SD_CMD_SEND_IF_COND
 (8 | 
SD_CMD_BIT
)

	)

102 
	#SD_CMD_VOL_SWITCH
 (11 | 
SD_CMD_BIT
)

	)

103 
	#SD_CMD_SEND_TUNING_BLOCK
 (19 | 
SD_CMD_BIT
)

	)

104 
	#SD_CMD_SPEED_CLASS_CTRL
 (20 | 
SD_CMD_BIT
)

	)

106 
	#SD_ACMD_SET_BUSWIDTH
 (6 | 
SD_CMD_APP_BIT
)

	)

107 
	#SD_ACMD_SD_STATUS
 (13 | 
SD_CMD_APP_BIT
)

	)

108 
	#SD_ACMD_SEND_NR_WR_BLOCKS
 (22 | 
SD_CMD_APP_BIT
)

	)

109 
	#SD_ACMD_SET_WR_ERASE_CNT
 (23 | 
SD_CMD_APP_BIT
)

	)

110 
	#SD_ACMD_SEND_OP_COND
 (41 | 
SD_CMD_APP_BIT
)

	)

111 
	#SD_ACMD_SET_CLR_CD
 (42 | 
SD_CMD_APP_BIT
)

	)

112 
	#SD_ACMD_SEND_SCR
 (51 | 
SD_CMD_APP_BIT
)

	)

115 
	#SD_IO_SEND_OP_COND
 (5 | 
SD_CMD_BIT
Ë

	)

116 
	#SD_IO_RW_DIRECT
 (52 | 
SD_CMD_BIT
)

	)

117 
	#SD_IO_RW_EXTENDED
 (53 | 
SD_CMD_BIT
)

	)

120 
	#SD_ATOCMD_STOP_TRANSMISSION
 (12 | 
SD_CMD_AUTO_BIT
)

	)

121 
	#SD_ATOCMD_SET_BLOCK_COUNT
 (23 | 
SD_CMD_AUTO_BIT
)

	)

123 
	#MMC_VDD_145_150
 0x00000001

	)

124 
	#MMC_VDD_150_155
 0x00000002

	)

125 
	#MMC_VDD_155_160
 0x00000004

	)

126 
	#MMC_VDD_160_165
 0x00000008

	)

127 
	#MMC_VDD_165_170
 0x00000010

	)

128 
	#MMC_VDD_17_18
 0x00000020

	)

129 
	#MMC_VDD_18_19
 0x00000040

	)

130 
	#MMC_VDD_19_20
 0x00000080

	)

131 
	#MMC_VDD_20_21
 0x00000100

	)

132 
	#MMC_VDD_21_22
 0x00000200

	)

133 
	#MMC_VDD_22_23
 0x00000400

	)

134 
	#MMC_VDD_23_24
 0x00000800

	)

135 
	#MMC_VDD_24_25
 0x00001000

	)

136 
	#MMC_VDD_25_26
 0x00002000

	)

137 
	#MMC_VDD_26_27
 0x00004000

	)

138 
	#MMC_VDD_27_28
 0x00008000

	)

139 
	#MMC_VDD_28_29
 0x00010000

	)

140 
	#MMC_VDD_29_30
 0x00020000

	)

141 
	#MMC_VDD_30_31
 0x00040000

	)

142 
	#MMC_VDD_31_32
 0x00080000

	)

143 
	#MMC_VDD_32_33
 0x00100000

	)

144 
	#MMC_VDD_33_34
 0x00200000

	)

145 
	#MMC_VDD_34_35
 0x00400000

	)

146 
	#MMC_VDD_35_36
 0x00800000

	)

147 
	#MMC_CARD_BUSY
 0x80000000

	)

149 
	#MMC_ERR_NONE
 0

	)

150 
	#MMC_ERR_TIMEOUT
 1

	)

151 
	#MMC_ERR_BADCRC
 2

	)

152 
	#MMC_ERR_FIFO
 3

	)

153 
	#MMC_ERR_FAILED
 4

	)

154 
	#MMC_ERR_INVALID
 5

	)

156 
	#MMC_POWER_OFF
 0

	)

157 
	#MMC_POWER_UP
 1

	)

158 
	#MMC_POWER_ON
 2

	)

160 
	#MMC_BUS_WIDTH_1
 0

	)

161 
	#MMC_BUS_WIDTH_4
 2

	)

163 
	#SD_BUS_WIDTH_1
 0

	)

164 
	#SD_BUS_WIDTH_4
 2

	)

166 
	#MMC_STATE_PRESENT
 (1<<0Ë

	)

167 
	#MMC_STATE_READONLY
 (1<<1Ë

	)

168 
	#MMC_STATE_HIGHSPEED
 (1<<2Ë

	)

169 
	#MMC_STATE_BLOCKADDR
 (1<<3Ë

	)

170 
	#MMC_STATE_HIGHCAPS
 (1<<4)

	)

171 
	#MMC_STATE_UHS1
 (1<<5Ë

	)

172 
	#MMC_STATE_DDR
 (1<<6Ë

	)

174 
	#R1_OUT_OF_RANGE
 (1UL << 31Ë

	)

175 
	#R1_ADDRESS_ERROR
 (1 << 30Ë

	)

176 
	#R1_BLOCK_LEN_ERROR
 (1 << 29Ë

	)

177 
	#R1_ERASE_SEQ_ERROR
 (1 << 28Ë

	)

178 
	#R1_ERASE_PARAM
 (1 << 27Ë

	)

179 
	#R1_WP_VIOLATION
 (1 << 26Ë

	)

180 
	#R1_CARD_IS_LOCKED
 (1 << 25Ë

	)

181 
	#R1_LOCK_UNLOCK_FAILED
 (1 << 24Ë

	)

182 
	#R1_COM_CRC_ERROR
 (1 << 23Ë

	)

183 
	#R1_ILLEGAL_COMMAND
 (1 << 22Ë

	)

184 
	#R1_CARD_ECC_FAILED
 (1 << 21Ë

	)

185 
	#R1_CC_ERROR
 (1 << 20Ë

	)

186 
	#R1_ERROR
 (1 << 19Ë

	)

187 
	#R1_UNDERRUN
 (1 << 18Ë

	)

188 
	#R1_OVERRUN
 (1 << 17Ë

	)

189 
	#R1_CID_CSD_OVERWRITE
 (1 << 16Ë

	)

190 
	#R1_WP_ERASE_SKIP
 (1 << 15Ë

	)

191 
	#R1_CARD_ECC_DISABLED
 (1 << 14Ë

	)

192 
	#R1_ERASE_RESET
 (1 << 13Ë

	)

193 
	#R1_STATUS
(
x
Ë(x & 0xFFFFE000)

	)

194 
	#R1_CURRENT_STATE
(
x
Ë((x & 0x00001E00Ë>> 9Ë

	)

195 
	#R1_READY_FOR_DATA
 (1 << 8Ë

	)

196 
	#R1_SWITCH_ERROR
 (1 << 7Ë

	)

197 
	#R1_URGENT_BKOPS
 (1 << 6Ë

	)

198 
	#R1_APP_CMD
 (1 << 5Ë

	)

203 
	#CCC_BASIC
 (1<<0Ë

	)

205 
	#CCC_STREAM_READ
 (1<<1Ë

	)

207 
	#CCC_BLOCK_READ
 (1<<2Ë

	)

209 
	#CCC_STREAM_WRITE
 (1<<3Ë

	)

211 
	#CCC_BLOCK_WRITE
 (1<<4Ë

	)

213 
	#CCC_ERASE
 (1<<5Ë

	)

215 
	#CCC_WRITE_PROT
 (1<<6Ë

	)

217 
	#CCC_LOCK_CARD
 (1<<7Ë

	)

219 
	#CCC_APP_SPEC
 (1<<8Ë

	)

221 
	#CCC_IO_MODE
 (1<<9Ë

	)

223 
	#CCC_SWITCH
 (1<<10Ë

	)

232 
	#CSD_STRUCT_VER_1_0
 0

	)

233 
	#CSD_STRUCT_VER_1_1
 1

	)

234 
	#CSD_STRUCT_VER_1_2
 2

	)

235 
	#CSD_STRUCT_EXT_CSD
 3

	)

237 
	#CSD_SPEC_VER_0
 0

	)

238 
	#CSD_SPEC_VER_1
 1

	)

239 
	#CSD_SPEC_VER_2
 2

	)

240 
	#CSD_SPEC_VER_3
 3

	)

241 
	#CSD_SPEC_VER_4
 4

	)

247 
	#EXT_CSD_BADBLK_MGMT
 134

	)

248 
	#EXT_CSD_ENH_START_ADDR
 136

	)

249 
	#EXT_CSD_ENH_SIZE_MULT
 140

	)

250 
	#EXT_CSD_GP1_SIZE_MULT
 143

	)

251 
	#EXT_CSD_GP2_SIZE_MULT
 146

	)

252 
	#EXT_CSD_GP3_SIZE_MULT
 149

	)

253 
	#EXT_CSD_GP4_SIZE_MULT
 152

	)

254 
	#EXT_CSD_PART_SET_COMPL
 155

	)

255 
	#EXT_CSD_PART_ATTR
 156

	)

256 
	#EXT_CSD_MAX_ENH_SIZE_MULT
 157

	)

257 
	#EXT_CSD_PART_SUPPORT
 160

	)

258 
	#EXT_CSD_HPI_MGMT
 161

	)

259 
	#EXT_CSD_RST_N_FUNC
 162

	)

260 
	#EXT_CSD_BKOPS_EN
 163

	)

261 
	#EXT_CSD_BKOPS_START
 164

	)

262 
	#EXT_CSD_WR_REL_PARAM
 166

	)

263 
	#EXT_CSD_WR_REL_SET
 167

	)

264 
	#EXT_CSD_RPMB_SIZE_MULT
 168

	)

265 
	#EXT_CSD_FW_CONFIG
 169

	)

266 
	#EXT_CSD_USR_WP
 171

	)

267 
	#EXT_CSD_BOOT_WP
 173

	)

268 
	#EXT_CSD_ERASE_GRP_DEF
 175

	)

269 
	#EXT_CSD_BOOT_BUS_WIDTH
 177

	)

270 
	#EXT_CSD_BOOT_CONFIG_PROT
 178

	)

271 
	#EXT_CSD_PART_CFG
 179

	)

272 
	#EXT_CSD_ERASED_MEM_CONT
 181

	)

273 
	#EXT_CSD_BUS_WIDTH
 183

	)

274 
	#EXT_CSD_HS_TIMING
 185

	)

275 
	#EXT_CSD_PWR_CLASS
 187

	)

276 
	#EXT_CSD_CMD_SET_REV
 189

	)

277 
	#EXT_CSD_CMD_SET
 191

	)

278 
	#EXT_CSD_REV
 192

	)

279 
	#EXT_CSD_STRUCT
 194

	)

280 
	#EXT_CSD_CARD_TYPE
 196

	)

281 
	#EXT_CSD_OUT_OF_INTR_TIME
 198

	)

282 
	#EXT_CSD_PART_SWITCH_TIME
 199

	)

283 
	#EXT_CSD_PWR_CL_52_195
 200

	)

284 
	#EXT_CSD_PWR_CL_26_195
 201

	)

285 
	#EXT_CSD_PWR_CL_52_360
 202

	)

286 
	#EXT_CSD_PWR_CL_26_360
 203

	)

287 
	#EXT_CSD_MIN_PERF_R_4_26
 205

	)

288 
	#EXT_CSD_MIN_PERF_W_4_26
 206

	)

289 
	#EXT_CSD_MIN_PERF_R_8_26_4_25
 207

	)

290 
	#EXT_CSD_MIN_PERF_W_8_26_4_25
 208

	)

291 
	#EXT_CSD_MIN_PERF_R_8_52
 209

	)

292 
	#EXT_CSD_MIN_PERF_W_8_52
 210

	)

293 
	#EXT_CSD_SEC_CNT
 212

	)

294 
	#EXT_CSD_S_A_TIMEOUT
 217

	)

295 
	#EXT_CSD_S_C_VCCQ
 219

	)

296 
	#EXT_CSD_S_C_VCC
 220

	)

297 
	#EXT_CSD_HC_WP_GPR_SIZE
 221

	)

298 
	#EXT_CSD_REL_WR_SEC_C
 222

	)

299 
	#EXT_CSD_ERASE_TIMEOUT_MULT
 223

	)

300 
	#EXT_CSD_HC_ERASE_GRP_SIZE
 224

	)

301 
	#EXT_CSD_ACC_SIZE
 225

	)

302 
	#EXT_CSD_BOOT_SIZE_MULT
 226

	)

303 
	#EXT_CSD_BOOT_INFO
 228

	)

304 
	#EXT_CSD_SEC_TRIM_MULT
 229

	)

305 
	#EXT_CSD_SEC_ERASE_MULT
 230

	)

306 
	#EXT_CSD_SEC_FEATURE_SUPPORT
 231

	)

307 
	#EXT_CSD_TRIM_MULT
 232

	)

308 
	#EXT_CSD_MIN_PERF_DDR_R_8_52
 234

	)

309 
	#EXT_CSD_MIN_PERF_DDR_W_8_52
 235

	)

310 
	#EXT_CSD_PWR_CL_DDR_52_195
 238

	)

311 
	#EXT_CSD_PWR_CL_DDR_52_360
 239

	)

312 
	#EXT_CSD_INI_TIMEOUT_AP
 241

	)

313 
	#EXT_CSD_CORRECT_PRG_SECTS_NUM
 242

	)

314 
	#EXT_CSD_BKOPS_STATUS
 246

	)

315 
	#EXT_CSD_BKOPS_SUPP
 502

	)

316 
	#EXT_CSD_HPI_FEATURE
 503

	)

317 
	#EXT_CSD_S_CMD_SET
 504

	)

324 
	#EXT_CSD_SEC_FEATURE_ER_EN
 (1<<0)

	)

325 
	#EXT_CSD_SEC_FEATURE_BD_BLK_EN
 (1<<2)

	)

326 
	#EXT_CSD_SEC_FEATURE_GB_CL_EN
 (1<<4)

	)

329 
	#EXT_CSD_BOOT_INFO_ALT_BOOT
 (1<<0)

	)

330 
	#EXT_CSD_BOOT_INFO_DDR_BOOT
 (1<<1)

	)

331 
	#EXT_CSD_BOOT_INFO_HS_BOOT
 (1<<2)

	)

333 
	#EXT_CSD_CMD_SET_NORMAL
 (1<<0)

	)

334 
	#EXT_CSD_CMD_SET_SECURE
 (1<<1)

	)

335 
	#EXT_CSD_CMD_SET_CPSECURE
 (1<<2)

	)

337 
	#EXT_CSD_CARD_TYPE_26
 (1<<0Ë

	)

338 
	#EXT_CSD_CARD_TYPE_52
 (1<<1Ë

	)

339 
	#EXT_CSD_CARD_TYPE_DDR_52
 (1<<2Ë

	)

340 
	#EXT_CSD_CARD_TYPE_DDR_52_1_2V
 (1<<3Ë

	)

343 
	#EXT_CSD_BUS_WIDTH_1
 (0Ë

	)

344 
	#EXT_CSD_BUS_WIDTH_4
 (1Ë

	)

345 
	#EXT_CSD_BUS_WIDTH_8
 (2Ë

	)

346 
	#EXT_CSD_BUS_WIDTH_4_DDR
 (5Ë

	)

347 
	#EXT_CSD_BUS_WIDTH_8_DDR
 (6Ë

	)

350 
	#EXT_CSD_ERASED_MEM_CONT_0
 (0)

	)

351 
	#EXT_CSD_ERASED_MEM_CONT_1
 (1)

	)

354 
	#EXT_CSD_PART_CFG_DEFT_PART
 (0)

	)

355 
	#EXT_CSD_PART_CFG_BOOT_PART_1
 (1)

	)

356 
	#EXT_CSD_PART_CFG_BOOT_PART_2
 (2)

	)

357 
	#EXT_CSD_PART_CFG_RPMB_PART
 (3)

	)

358 
	#EXT_CSD_PART_CFG_GP_PART_1
 (4)

	)

359 
	#EXT_CSD_PART_CFG_GP_PART_2
 (5)

	)

360 
	#EXT_CSD_PART_CFG_GP_PART_3
 (6)

	)

361 
	#EXT_CSD_PART_CFG_GP_PART_4
 (7)

	)

362 
	#EXT_CSD_PART_CFG_EN_NO_BOOT
 (0 << 3)

	)

363 
	#EXT_CSD_PART_CFG_EN_BOOT_PART_1
 (1 << 3)

	)

364 
	#EXT_CSD_PART_CFG_EN_BOOT_PART_2
 (2 << 3)

	)

365 
	#EXT_CSD_PART_CFG_EN_USER_AREA
 (7 << 3)

	)

366 
	#EXT_CSD_PART_CFG_EN_NO_ACK
 (0 << 6)

	)

367 
	#EXT_CSD_PART_CFG_EN_ACK
 (1 << 6)

	)

370 
	#EXT_CSD_EN_PWR_BOOT_CFG_PROT
 (1)

	)

371 
	#EXT_CSD_EN_PERM_BOOT_CFG_PROT
 (1<<4Ë

	)

374 
	#EXT_CSD_BOOT_BUS_WIDTH_1
 (0)

	)

375 
	#EXT_CSD_BOOT_BUS_WIDTH_4
 (1)

	)

376 
	#EXT_CSD_BOOT_BUS_WIDTH_8
 (2)

	)

377 
	#EXT_CSD_BOOT_BUS_RESET
 (1 << 2)

	)

378 
	#EXT_CSD_BOOT_BUS_MODE_DEFT
 (0 << 3)

	)

379 
	#EXT_CSD_BOOT_BUS_MODE_HS
 (1 << 3)

	)

380 
	#EXT_CSD_BOOT_BUS_MODE_DDR
 (2 << 3)

	)

383 
	#EXT_CSD_ERASE_GRP_DEF_EN
 (1)

	)

386 
	#EXT_CSD_BOOT_WP_EN_PWR_WP
 (1)

	)

387 
	#EXT_CSD_BOOT_WP_EN_PERM_WP
 (1 << 2)

	)

388 
	#EXT_CSD_BOOT_WP_DIS_PERM_WP
 (1 << 4)

	)

389 
	#EXT_CSD_BOOT_WP_DIS_PWR_WP
 (1 << 6)

	)

392 
	#EXT_CSD_USR_WP_EN_PWR_WP
 (1)

	)

393 
	#EXT_CSD_USR_WP_EN_PERM_WP
 (1<<2)

	)

394 
	#EXT_CSD_USR_WP_DIS_PWR_WP
 (1<<3)

	)

395 
	#EXT_CSD_USR_WP_DIS_PERM_WP
 (1<<4)

	)

396 
	#EXT_CSD_USR_WP_DIS_CD_PERM_WP
 (1<<6)

	)

397 
	#EXT_CSD_USR_WP_DIS_PERM_PWD
 (1<<7)

	)

400 
	#EXT_CSD_RST_N_TEMP_DIS
 (0)

	)

401 
	#EXT_CSD_RST_N_PERM_EN
 (1Ë

	)

402 
	#EXT_CSD_RST_N_PERM_DIS
 (2Ë

	)

405 
	#EXT_CSD_PART_SUPPORT_PART_EN
 (1)

	)

406 
	#EXT_CSD_PART_SUPPORT_ENH_ATTR_EN
 (1<<1)

	)

409 
	#EXT_CSD_PART_ATTR_ENH_USR
 (1<<0)

	)

410 
	#EXT_CSD_PART_ATTR_ENH_1
 (1<<1)

	)

411 
	#EXT_CSD_PART_ATTR_ENH_2
 (1<<2)

	)

412 
	#EXT_CSD_PART_ATTR_ENH_3
 (1<<3)

	)

413 
	#EXT_CSD_PART_ATTR_ENH_4
 (1<<4)

	)

416 
	#EXT_CSD_PART_SET_COMPL_BIT
 (1<<0)

	)

422 
	#MMC_SWITCH_MODE_CMD_SET
 0x00

	)

423 
	#MMC_SWITCH_MODE_SET_BITS
 0x01

	)

424 
	#MMC_SWITCH_MODE_CLEAR_BITS
 0x02

	)

425 
	#MMC_SWITCH_MODE_WRITE_BYTE
 0x03

	)

427 
	#MMC_SWITCH_MODE_SDR12
 0

	)

428 
	#MMC_SWITCH_MODE_SDR25
 1

	)

429 
	#MMC_SWITCH_MODE_SDR50
 2

	)

430 
	#MMC_SWITCH_MODE_SDR104
 3

	)

431 
	#MMC_SWITCH_MODE_DDR50
 4

	)

433 
	#MMC_SWITCH_MODE_DRV_TYPE_B
 0

	)

434 
	#MMC_SWITCH_MODE_DRV_TYPE_A
 1

	)

435 
	#MMC_SWITCH_MODE_DRV_TYPE_C
 2

	)

436 
	#MMC_SWITCH_MODE_DRV_TYPE_D
 3

	)

438 
	#MMC_SWITCH_MODE_CL_200MA
 0

	)

439 
	#MMC_SWITCH_MODE_CL_400MA
 1

	)

440 
	#MMC_SWITCH_MODE_CL_600MA
 2

	)

441 
	#MMC_SWITCH_MODE_CL_800MA
 3

	)

446 
	#MMC_ERASE_SECURE_REQ
 (1 << 31)

	)

447 
	#MMC_ERASE_GC_REQ
 (1 << 15)

	)

448 
	#MMC_ERASE_TRIM
 (1 << 0)

	)

449 
	#MMC_ERASE_NORMAL
 (0)

	)

451 
	#HOST_BUS_WIDTH_1
 (1)

	)

452 
	#HOST_BUS_WIDTH_4
 (4)

	)

453 
	#HOST_BUS_WIDTH_8
 (8)

	)

455 
	#EMMC_BOOT_PULL_CMD_MODE
 (0)

	)

456 
	#EMMC_BOOT_RST_CMD_MODE
 (1)

	)

459 
EMMC_BOOT_PWR_RESET
,

460 
EMMC_BOOT_RST_N_SIG
,

461 
EMMC_BOOT_PRE_IDLE_CMD


465 
RESP_NONE
 = 0,

466 
RESP_R1
,

467 
RESP_R2
,

468 
RESP_R3
,

469 
RESP_R4
,

470 
RESP_R5
,

471 
RESP_R6
,

472 
RESP_R7
,

473 
RESP_R1B


476 
	smmc_cid
 {

477 
m™fid
;

478 
¥od_«me
[8];

479 
£rül
;

480 
€mid
;

481 
yór
;

482 
hwªv
;

483 
fwªv
;

484 
m⁄th
;

485 
cbx
;

488 
	smmc_csd
 {

489 
csd_°ru˘
;

490 
mmˇ_v¢
;

491 
cmd˛ass
;

492 
ècc_˛ks
;

493 
ècc_ns
;

494 
r2w_Á˘‹
;

495 
max_då
;

496 
ªad_blkbôs
;

497 
wrôe_blkbôs
;

498 
ˇ∑côy
;

499 
îa£_s˘sz
;

500 
wrôe_¥Ÿ_gΩsz
;

501 
ªad_∑πül
:1,

502 
ªad_mißlign
:1,

503 
wrôe_∑πül
:1,

504 
wrôe_mißlign
:1,

505 
wrôe_¥Ÿ_gΩ
:1,

506 
≥rm_wr_¥Ÿ
:1,

507 
tmp_wr_¥Ÿ
:1,

508 
îa£_blk_í
:1,

509 
c›y
:1,

510 
d§
:1;

513 
	smmc_øw_ext_csd
 {

515 
rsv1
[134];

516 
£c_bad_blk_mgmt
;

517 
rsv2
[1];

518 
íh_°¨t_addr
[4];

519 
íh_sz_mu…
[3];

520 
gp_sz_mu…
[12];

521 
∑π_£t_cm∂
;

522 
∑π_©å
;

523 
max_íh_sz_mu…
[3];

524 
∑π_suµ
;

525 
rsv3
[1];

526 
r°_n_func
;

527 
rsv4
[5];

528 
Ωmb_sz_mu…
;

529 
fw_cfg
;

530 
rsv5
[1];

531 
u£r_wp
;

532 
rsv6
[1];

533 
boŸ_wp
;

534 
rsv7
[1];

535 
îa£_gΩ_def
;

536 
rsv8
[1];

537 
boŸ_bus_width
;

538 
boŸ_cfg_¥Ÿ
;

539 
∑π_cfg
;

540 
rsv9
[1];

541 
îa£_mem_c⁄t
;

542 
rsv10
[1];

543 
bus_width
;

544 
rsv11
[1];

545 
hs_timög
;

546 
rsv12
[1];

547 
pwr_˛s
;

548 
rsv13
[1];

549 
cmd_£t_ªv
;

550 
rsv14
[1];

551 
cmd_£t
;

554 
ext_csd_ªv
;

555 
rsv15
[1];

556 
csd_°ru˘
;

557 
rsv16
[1];

558 
ˇrd_ty≥
;

559 
rsv17
[1];

560 
pwr_˛s_52_195
;

561 
pwr_˛s_26_195
;

562 
pwr_˛s_52_360
;

563 
pwr_˛s_26_360
;

564 
rsv18
[1];

565 
mö_≥rf_r_4_26
;

566 
mö_≥rf_w_4_26
;

567 
mö_≥rf_r_8_26_4_52
;

568 
mö_≥rf_w_8_26_4_52
;

569 
mö_≥rf_r_8_52
;

570 
mö_≥rf_w_8_52
;

571 
rsv19
[1];

572 
£c_˙t
[4];

573 
rsv20
[1];

574 
¶p_awake_tmo
;

575 
rsv21
[1];

576 
¶p_cuº_vccq
;

577 
¶p_cuº_vcc
;

578 
hc_wp_gΩ_sz
;

579 
ªl_wr_£c_˙t
;

580 
îa£_tmo_mu…
;

581 
hc_îa£_gΩ_sz
;

582 
acc_sz
;

583 
boŸ_sz_mu…
;

584 
rsv22
[1];

585 
boŸ_öfo
;

586 
£c_åim_mu…
;

587 
£c_îa£_mu…
;

588 
£c_suµ
;

589 
åim_mu…
;

590 
rsv23
[1];

591 
mö_≥rf_ddr_r_8_52
;

592 
mö_≥rf_ddr_w_8_52
;

593 
rsv24
[2];

594 
pwr_˛s_ddr_52_195
;

595 
pwr_˛s_ddr_52_360
;

596 
rsv25
[1];

597 
öi_tmo_≠
;

598 
rsv26
[262];

599 
suµ_cmd_£t
;

600 
rsv27
[7];

603 
	smmc_ext_csd
 {

604 
åim_tmo_ms
;

605 
hc_wp_gΩ_sz
;

606 
hc_îa£_gΩ_sz
;

607 
£˘‹s
;

608 
hs_max_då
;

609 
boŸ_∑π_sz
;

610 
Ωmb_sz
;

611 
ac˚ss_sz
;

612 
íh_sz
;

613 
íh_°¨t_addr
;

614 
ªv
;

615 
boŸ_öfo
;

616 
∑π_í
:1,

617 
íh_©å_í
:1,

618 
ddr_suµ‹t
:1;

619 
îa£d_mem_c⁄t
;

622 
	#SD_SCR_BUS_WIDTH_1
 (1<<0)

	)

623 
	#SD_SCR_BUS_WIDTH_4
 (1<<2)

	)

625 
	ssd_s¸
 {

626 
s¸_°ru˘
;

627 
sda_v¢
;

628 
d©a_bô_a·î_îa£
;

629 
£curôy
;

630 
bus_widths
;

631 
sda_v¢3
;

632 
ex_£curôy
;

633 
cmd_suµ‹t
;

636 
	#SD_DRV_TYPE_B
 (0)

	)

637 
	#SD_DRV_TYPE_A
 (1<<0)

	)

638 
	#SD_DRV_TYPE_C
 (1<<1)

	)

639 
	#SD_DRV_TYPE_D
 (1<<2)

	)

641 
	#SD_MAX_CUR_200MA
 (0)

	)

642 
	#SD_MAX_CUR_400MA
 (1<<0)

	)

643 
	#SD_MAX_CUR_600MA
 (1<<1)

	)

644 
	#SD_MAX_CUR_800MA
 (1<<2)

	)

646 
	ssd_swôch_ˇps
 {

647 
hs_max_då
;

648 
ddr
;

649 
drv_°ªngth
;

650 
max_cur
;

653 
	ssdio_cc¸
 {

654 
sdio_v¢
;

655 
sd_v¢
;

656 
mu…i_block
:1,

657 
low_•ìd
:1,

658 
wide_bus
:1,

659 
high_powî
:1,

660 
high_•ìd
:1,

661 
öå_mu…i_block
:1;

665 
	ssdio_func_tu∂e
 {

666 
sdio_func_tu∂e
 *
√xt
;

667 
code
;

668 
size
;

669 
d©a
[1];

672 
sdio_func
;

673 (
sdio_úq_h™dÀr_t
)(
	tsdio_func
 *);

674 (*
hw_úq_h™dÀr_t
)();

677 
	ssdio_func
 {

678 
mmc_ˇrd
 *
ˇrd
;

679 
sdio_úq_h™dÀr_t
 *
úq_h™dÀr
;

680 
num
;

682 
˛ass
;

683 
víd‹
;

684 
devi˚
;

686 
max_blksize
;

687 
cur_blksize
;

689 
íabÀ_timeout
;

691 
°©e
;

693 
u8
 
tmpbuf
[4];

695 
num_öfo
;

696 c⁄° **
öfo
;

698 
sdio_func_tu∂e
 *
tu∂es
;

701 
	ssdio_cis
 {

702 
víd‹
;

703 
devi˚
;

704 
blksize
;

705 
max_då
;

708 
	#MMC_CAP_4_BIT_DATA
 (1 << 0Ë

	)

709 
	#MMC_CAP_MULTIWRITE
 (1 << 1Ë

	)

710 
	#MMC_CAP_BYTEBLOCK
 (1 << 2Ë

	)

711 
	#MMC_CAP_MMC_HIGHSPEED
 (1 << 3Ë

	)

712 
	#MMC_CAP_SD_HIGHSPEED
 (1 << 4Ë

	)

713 
	#MMC_CAP_8_BIT_DATA
 (1 << 5Ë

	)

714 
	#MMC_CAP_SD_UHS1
 (1 << 6Ë

	)

715 
	#MMC_CAP_DDR
 (1 << 7Ë

	)

717 
	smmc_ho°


719 
mmc_ˇrd
 *
ˇrd
;

720 
u32
 
max_hw_£gs
;

721 
u32
 
max_phys_£gs
;

722 
u32
 
max_£g_size
;

723 
u32
 
max_blk_size
;

724 
u32
 
max_blk_cou¡
;

725 
u32
 
ba£
;

726 
u32
 
ˇps
;

727 
u32
 
f_mö
;

728 
u32
 
f_max
;

729 
u32
 
˛k
;

730 
u32
 
s˛k
;

731 
u32
 
blkÀn
;

732 
u32
 
blkbôs
;

733 
u32
 
o¸
;

734 
u32
 
o¸_avaû
;

735 
u32
 
timeout_ns
;

736 
u32
 
timeout_˛ks
;

737 
u8
 
˛k§c
;

738 
u8
 
id
;

739 
u8
 
boŸ_ty≥
;

740 
boﬁ
 
ˇrd_dëe˘_Êag
;

741 *
¥iv
;

742 (*
blk_ªad
)(
mmc_ho°
 *
ho°
, 
uch¨
 *
d°
, 
ul⁄g
 
§c
, ul⁄g 
nblks
);

743 (*
blk_wrôe
)(
mmc_ho°
 *
ho°
, 
ul⁄g
 
d°
, 
uch¨
 *
§c
, ul⁄g 
nblks
);

746 
	#MMC_TYPE_UNKNOWN
 (0Ë

	)

747 
	#MMC_TYPE_MMC
 (0x00000001Ë

	)

748 
	#MMC_TYPE_SD
 (0x00000002Ë

	)

749 
	#MMC_TYPE_SDIO
 (0x00000004Ë

	)

752 
	smmc_ˇrd
 {

753 
mmc_ho°
 *
ho°
;

754 
nblks
;

755 
blkÀn
;

756 
o¸
;

757 
maxhz
;

758 
uhs_mode
;

759 
rˇ
;

760 
ty≥
;

761 
sdio_funcs
;

762 
°©e
;

763 
ªady
;

764 
u32
 
øw_cid
[4];

765 
u32
 
øw_csd
[4];

766 
u32
 
øw_s¸
[2];

767 
u8
 
øw_ext_csd
[512];

768 
mmc_cid
 
cid
;

769 
mmc_csd
 
csd
;

770 
mmc_ext_csd
 
ext_csd
;

771 
sd_s¸
 
s¸
;

772 
sd_swôch_ˇps
 
sw_ˇps
;

773 
sdio_cc¸
 
cc¸
;

774 
sdio_cis
 
cis
;

775 
sdio_func
 *
io_func
[
SDIO_MAX_FUNCS
];

776 
sdio_func_tu∂e
 *
tu∂es
;

777 
num_öfo
;

778 c⁄° **
öfo
;

781 
	smmc_comm™d
 {

782 
u32
 
›code
;

783 
u32
 
¨g
;

784 
u32
 
r•typ
;

785 
u32
 
ª•
[4];

786 
u32
 
timeout
;

787 
u32
 
ªåõs
;

788 
u32
 
îr‹
;

791 
	#mmc_ˇrd_mmc
(
c
Ë((c)->
ty≥
 & 
MMC_TYPE_MMC
)

	)

792 
	#mmc_ˇrd_sd
(
c
Ë((c)->
ty≥
 & 
MMC_TYPE_SD
)

	)

793 
	#mmc_ˇrd_sdio
(
c
Ë((c)->
ty≥
 & 
MMC_TYPE_SDIO
)

	)

795 
	#mmc_ˇrd_£t_ho°
(
c
,
h
Ë((c)->
ho°
 = (h))

	)

796 
	#mmc_ˇrd_£t_unknown
(
c
Ë((c)->
ty≥
 = 
MMC_TYPE_UNKNOWN
)

	)

797 
	#mmc_ˇrd_£t_mmc
(
c
Ë((c)->
ty≥
 |
MMC_TYPE_MMC
)

	)

798 
	#mmc_ˇrd_£t_sd
(
c
Ë((c)->
ty≥
 |
MMC_TYPE_SD
)

	)

799 
	#mmc_ˇrd_£t_sdio
(
c
Ë((c)->
ty≥
 |
MMC_TYPE_SDIO
)

	)

801 
	#mmc_ˇrd_¥e£¡
(
c
Ë((c)->
°©e
 & 
MMC_STATE_PRESENT
)

	)

802 
	#mmc_ˇrd_ªad⁄ly
(
c
Ë((c)->
°©e
 & 
MMC_STATE_READONLY
)

	)

803 
	#mmc_ˇrd_high•ìd
(
c
Ë((c)->
°©e
 & 
MMC_STATE_HIGHSPEED
)

	)

804 
	#mmc_ˇrd_uhs1
(
c
Ë((c)->
°©e
 & 
MMC_STATE_UHS1
)

	)

805 
	#mmc_ˇrd_ddr
(
c
Ë((c)->
°©e
 & 
MMC_STATE_DDR
)

	)

806 
	#mmc_ˇrd_blockaddr
(
c
Ë((c)->
°©e
 & 
MMC_STATE_BLOCKADDR
)

	)

807 
	#mmc_ˇrd_highˇps
(
c
Ë((c)->
°©e
 & 
MMC_STATE_HIGHCAPS
)

	)

809 
	#mmc_ˇrd_£t_¥e£¡
(
c
Ë((c)->
°©e
 |
MMC_STATE_PRESENT
)

	)

810 
	#mmc_ˇrd_£t_ªad⁄ly
(
c
Ë((c)->
°©e
 |
MMC_STATE_READONLY
)

	)

811 
	#mmc_ˇrd_£t_high•ìd
(
c
Ë((c)->
°©e
 |
MMC_STATE_HIGHSPEED
)

	)

812 
	#mmc_ˇrd_£t_uhs1
(
c
Ë((c)->
°©e
 |
MMC_STATE_UHS1
)

	)

813 
	#mmc_ˇrd_£t_ddr
(
c
Ë((c)->
°©e
 |
MMC_STATE_DDR
)

	)

814 
	#mmc_ˇrd_£t_blockaddr
(
c
Ë((c)->
°©e
 |
MMC_STATE_BLOCKADDR
)

	)

816 
	#mmc_ˇrd_«me
(
c
Ë((c)->
cid
.
¥od_«me
)

	)

817 
	#mmc_ˇrd_id
(
c
Ë((c)->
ho°
->
id
)

	)

820 
u16
 
max_cuºít
;

821 
u16
 
gΩ6_öfo
;

822 
u16
 
gΩ5_öfo
;

823 
u16
 
gΩ4_öfo
;

824 
u16
 
gΩ3_öfo
;

825 
u16
 
gΩ2_öfo
;

826 
u16
 
gΩ1_öfo
;

827 
u8
 
gΩ6_ªsu…
:4;

828 
u8
 
gΩ5_ªsu…
:4;

829 
u8
 
gΩ4_ªsu…
:4;

830 
u8
 
gΩ3_ªsu…
:4;

831 
u8
 
gΩ2_ªsu…
:4;

832 
u8
 
gΩ1_ªsu…
:4;

833 
u8
 
vî
;

834 
u16
 
gΩ6_busy
;

835 
u16
 
gΩ5_busy
;

836 
u16
 
gΩ4_busy
;

837 
u16
 
gΩ3_busy
;

838 
u16
 
gΩ2_busy
;

839 
u16
 
gΩ1_busy
;

840 
u8
 
ªv
[34];

841 } 
	tmmc_swôch_t
;

843 
mmc_öô
(
id
);

844 
mmc_h¨d_ª£t
();

845 
mmc_ho°
 *
mmc_gë_ho°
(
id
);

846 
mmc_ˇrd
 *
mmc_gë_ˇrd
(
id
);

847 
mmc_öô_ho°
(
id
, 
mmc_ho°
 *
ho°
, 
˛k§c
, 
u8
 
mode
);

848 
mmc_öô_ˇrd
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
);

849 
mmc_£t_blk_Àngth
(
mmc_ho°
 *
ho°
, 
u32
 
blkÀn
);

850 
mmc_£t_bus_width
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
, 
width
);

851 
mmc_ˇrd_avaû
(
mmc_ho°
 *
ho°
);

852 
mmc_ˇrd_¥Ÿe˘ed
(
mmc_ho°
 *
ho°
);

853 
mmc_£t_˛ock
(
mmc_ho°
 *
ho°
, 
ddr
, 
u32
 
hz
);

854 
mmc_block_ªad
(
dev_num
, 
blkƒ
, 
u32
 
blk˙t
, *
d°
);

855 
mmc_block_wrôe
(
dev_num
, 
blkƒ
, 
u32
 
blk˙t
, *
§c
);

856 
mmc_de£À˘_Æl_ˇrd
(
mmc_ho°
 *
ho°
);

857 
mmc_£À˘_ˇrd
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
);

859 
mmc_ªad_ext_csd
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
);

860 
mmc_swôch
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
, 
u8
 
£t
, u8 
ödex
, u8 
vÆue
);

861 
mmc_ªad
(
ul⁄g
 
§c
, 
uch¨
 *
d°
, 
size
);

862 
mmc_wrôe
(
uch¨
 *
§c
, 
ul⁄g
 
d°
, 
size
);

864 
mmc_îa£_°¨t
(
mmc_ˇrd
 *
ˇrd
, 
u32
 
addr
);

865 
mmc_îa£_íd
(
mmc_ˇrd
 *
ˇrd
, 
u32
 
addr
);

866 
mmc_îa£
(
mmc_ˇrd
 *
ˇrd
, 
u32
 
¨g
);

868 
mmc_io_rw_dúe˘
(
mmc_ˇrd
 *
ˇrd
, 
wrôe
, 
‚
,

869 
addr
, 
u8
 
ö
, u8* 
out
);

870 
mmc_io_rw_exãnded
(
mmc_ˇrd
 *
ˇrd
, 
wrôe
, 
‚
,

871 
addr
, 
ö¸_addr
, 
u8
 *
buf
, 
blocks
, 
blksz
);

872 
mmc_sdio_¥oc_≥ndög_úqs
(
mmc_ˇrd
 *
ˇrd
);

873 
mmc_sdio_íabÀ_úq_g≠
(
mmc_ˇrd
 *
ˇrd
, 
íabÀ
);

876 #ifde‡
__˝lu•lus


	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/msdc/mmc_test.c

41 
	~<comm⁄.h
>

42 
	~"msdc.h
"

43 
	~"msg.h
"

44 
	~"mmc_c‹e.h
"

45 
	~"mmc_ã°.h
"

46 
	~"utûs.h
"

48 
	#MMC_BUF_ADDR
 (0x01000000)

	)

49 
	#BLK_SIZE
 (512)

	)

51 #i‡
deföed
(
MMC_TEST
)

53 
	#TC_MSG
 "[SD%d] <%s> TC%d: %s"

	)

55 
	#MMC_TST_CHK_RESULT
 (1)

	)

56 
	#MMC_TST_SBLK_RW
 (1)

	)

57 
	#MMC_TST_MBLK_RW
 (1)

	)

58 
	#MMC_TST_IMBLK_RW
 (1)

	)

59 
	#MMC_TST_COUNTS
 (1)

	)

61 
	#MMC_TST_BUF_ADDR
 (0x01000000)

	)

62 #ifde‡
MMC_PROFILING


63 
	#MMC_TST_SIZE
 (4 * 1024 * 1024Ë

	)

64 
	#MMC_TST_CHUNK_BLKS
 (128Ë

	)

66 
	#MMC_TST_SIZE
 (1 * 1024 * 1024Ë

	)

67 
	#MMC_TST_CHUNK_BLKS
 (16Ë

	)

69 
	#MMC_TST_START_ADDR
 (128 * 1024 * 1024Ë

	)

70 
	#MMC_TST_START_BLK
 (
MMC_TST_START_ADDR
 / 
MMC_BLOCK_SIZE
)

	)

71 
	#MMC_TST_BLK_NR
(
x
Ë(
MMC_TST_START_BLK
+(x)*(
MMC_TST_SIZE
/
MMC_BLOCK_SIZE
))

	)

73 
	#ARRAY_SIZE
(
x
Ë((xË/ ((x)[0]))

	)

75 
	g˛k‰eq
[] = { 50000000 };

76 
	gbuswidth
[] = { 
HOST_BUS_WIDTH_4
 };

78 #ifde‡
MMC_PROFILING


79 
mmc_›_≥rf
 
	gmmc_≥rf
[
MSDC_MAX_NUM
];

81 
mmc_›_≥rf
 *
	$mmc_¥of_h™dÀ
(
id
)

83  &
mmc_≥rf
[
id
];

84 
	}
}

86 
	$mmc_¥of_öô
(
id
, 
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
)

88 
	`mem£t
(&
mmc_≥rf
[
id
], 0, (
mmc_›_≥rf
));

89 
mmc_≥rf
[
id
].
ho°
 = host;

90 
mmc_≥rf
[
id
].
ˇrd
 = card;

91 
	`msdc_timî_öô
();

92 
	`msdc_timî_°›_˛ór
();

93 
	}
}

95 
	$mmc_¥of_°¨t
()

97 
	`msdc_timî_°›_˛ór
();

98 
	`msdc_timî_°¨t
();

99 
	}
}

101 
	$mmc_¥of_°›
()

103 
	`msdc_timî_°›
();

104 
	}
}

106 
	$mmc_¥of_cou¡
()

108  
	`msdc_timî_gë_cou¡
();

109 
	}
}

111 
	$mmc_¥of_upd©e
(
mmc_¥of_ˇŒback
 
cb
, 
ul⁄g
 
id
, *
d©a
)

113 
ul⁄g
 
cou¡s
 = (ul⁄g)
	`msdc_timî_gë_cou¡
();

114 i‡(
cb
) {

115 
	`cb
(
d©a
, 
id
, 
cou¡s
);

117 
	}
}

119 
	$mmc_¥of_ªp‹t
(
mmc_›_ªp‹t
 *
Ωt
)

121 
	`¥ötf
("\t\tCou¡ : %d\n", 
Ωt
->
cou¡
);

122 
	`¥ötf
("\t\tMax. Timê : %d cou¡s\n", 
Ωt
->
max_time
);

123 
	`¥ötf
("\t\tMö. Timê : %d cou¡s\n", 
Ωt
->
mö_time
);

124 
	`¥ötf
("\t\tTŸÆ Sizê: %d KB\n", 
Ωt
->
tŸÆ_size
 / 1024);

125 
	`¥ötf
("\t\tTŸÆ Timê: %d cou¡s\n", 
Ωt
->
tŸÆ_time
);

126 i‡(
Ωt
->
tŸÆ_time
) {

127 
	`¥ötf
("\t\tPerformance: %d KB/sec\n",

128 ((
Ωt
->
tŸÆ_size
 / 1024Ë* 32768Ë/Ñ±->
tŸÆ_time
);

130 
	}
}

132 
	$mmc_¥of_dump
(
dev_id
)

134 
mmc_ho°
 *
ho°
;

135 
mmc_ˇrd
 *
ˇrd
;

136 
mmc_›_≥rf
 *
≥rf
;

137 
u32
 
tŸÆ_ªad_size
, 
tŸÆ_wrôe_size
;

138 
u32
 
tŸÆ_ªad_time
, 
tŸÆ_wrôe_time
;

140 
≥rf
 = &
mmc_≥rf
[
dev_id
];

141 
ho°
 = 
mmc_≥rf
[
dev_id
].host;

142 
ˇrd
 = 
mmc_≥rf
[
dev_id
].card;

144 
tŸÆ_ªad_size
 = 
tŸÆ_wrôe_size
 = 0;

145 
tŸÆ_ªad_time
 = 
tŸÆ_wrôe_time
 = 0;

147 
	`¥ötf
("\tSD Ho° ID : %d\n", 
dev_id
);

148 
	`¥ötf
("\tOP Clock Fªq. : %d khz\n", 
ho°
->
˛k
 / 1000);

149 
	`¥ötf
("\tSD Clock Fªq. : %d khz\n", 
ho°
->
s˛k
 / 1000);

150 
	`¥ötf
("\tC¨d Ty≥ : %†ˇrd\n", (
ˇrd
->
ty≥
 =
MMC_TYPE_MMC
) ? "MMC" : "SD/SDHC/SDXC");

151 
	`¥ötf
("\tCard Mode : UHS1(%d) DDR(%d) HS(%d)\n",

152 
	`mmc_ˇrd_uhs1
(
ˇrd
Ë? 1 : 0, 
	`mmc_ˇrd_ddr
(card) ? 1 : 0,

153 
	`mmc_ˇrd_high•ìd
(
ˇrd
) ? 1 : 0);

154 
	`¥ötf
("\tC¨d Sizê : %d MB\n", (
ˇrd
->
nblks
 * c¨d->
blkÀn
) / 1024 / 1024);

155 
	`¥ötf
("\tC¨d Max. Fªq.: %d khz\n", 
ˇrd
->
maxhz
 / 1000);

157 i‡(
≥rf
->
mu…i_blks_ªad
.
cou¡
) {

158 
	`¥ötf
("\tMulti-Blks-Read:\n");

159 
	`mmc_¥of_ªp‹t
(&
≥rf
->
mu…i_blks_ªad
);

160 
tŸÆ_ªad_size
 +
≥rf
->
mu…i_blks_ªad
.
tŸÆ_size
;

161 
tŸÆ_ªad_time
 +
≥rf
->
mu…i_blks_ªad
.
tŸÆ_time
;

163 i‡(
≥rf
->
mu…i_blks_wrôe
.
cou¡
) {

164 
	`¥ötf
("\tMulti-Blks-Write:\n");

165 
	`mmc_¥of_ªp‹t
(&
≥rf
->
mu…i_blks_wrôe
);

166 
tŸÆ_wrôe_size
 +
≥rf
->
mu…i_blks_wrôe
.
tŸÆ_size
;

167 
tŸÆ_wrôe_time
 +
≥rf
->
mu…i_blks_wrôe
.
tŸÆ_time
;

169 i‡(
≥rf
->
sögÀ_blk_ªad
.
cou¡
) {

170 
	`¥ötf
("\tSingle-Blk-Read:\n");

171 
	`mmc_¥of_ªp‹t
(&
≥rf
->
sögÀ_blk_ªad
);

172 
tŸÆ_ªad_size
 +
≥rf
->
sögÀ_blk_ªad
.
tŸÆ_size
;

173 
tŸÆ_ªad_time
 +
≥rf
->
sögÀ_blk_ªad
.
tŸÆ_time
;

175 i‡(
≥rf
->
sögÀ_blk_wrôe
.
cou¡
) {

176 
	`¥ötf
("\tSingle-Blk-Write:\n");

177 
	`mmc_¥of_ªp‹t
(&
≥rf
->
sögÀ_blk_wrôe
);

178 
tŸÆ_wrôe_size
 +
≥rf
->
sögÀ_blk_wrôe
.
tŸÆ_size
;

179 
tŸÆ_wrôe_time
 +
≥rf
->
sögÀ_blk_wrôe
.
tŸÆ_time
;

181 i‡(
tŸÆ_ªad_time
) {

182 
	`¥ötf
("\tPerformance Read : %d KB/sec\n",

183 ((
tŸÆ_ªad_size
 / 1024Ë* 32768Ë/ 
tŸÆ_ªad_time
);

185 i‡(
tŸÆ_wrôe_time
) {

186 
	`¥ötf
("\tPerformance Write: %d KB/sec\n",

187 ((
tŸÆ_wrôe_size
 / 1024Ë* 32768Ë/ 
tŸÆ_wrôe_time
);

191 
	}
}

194 #ifde‡
MMC_ICE_DOWNLOAD


195 vﬁ©ûê
u32
 
	gmmc_dow∆ﬂd_addr
;

196 vﬁ©ûê
u32
 
	gmmc_dow∆ﬂd_size
;

197 vﬁ©ûê
u32
 
	gmmc_image_addr
;

199 
	$mmc_dow∆ﬂd
(
dev_id
, 
u32
 
imgaddr
, u32 
size
, u32 
addr
, 
boŸ¨ó
)

201 
ªt
;

202 
i
, 
j
, 
ªsu…
 = 0;

203 
u8
 
vÆ
;

204 
u8
 *
ext_csd
;

205 
uch¨
 *
buf
, *
chkbuf
;

206 
u32
 
chunks
, 
chunk_blks
 = 128, 
À·_blks
, 
blkƒ
;

207 
u32
 
tŸÆ_blks
;

208 
mmc_ˇrd
 *
ˇrd
;

210 i‡(!
size
)

213 i‡(
addr
 % 
MMC_BLOCK_SIZE
)

214  
MMC_ERR_FAILED
;

216 
ˇrd
 = 
	`mmc_gë_ˇrd
(
dev_id
);

217 
ext_csd
 = &
ˇrd
->
øw_ext_csd
[0];

219 i‡(
boŸ¨ó
 && !
	`mmc_ˇrd_sd
(
ˇrd
Ë&& c¨d->
ext_csd
.
∑π_í
) {

221 
vÆ
 = (
ext_csd
[
EXT_CSD_PART_CFG
] & ~0x7Ë| 
EXT_CSD_PART_CFG_BOOT_PART_1
;

222 i‡(
	`mmc_£t_∑π_c⁄fig
(
ˇrd
, 
vÆ
Ë!
MMC_ERR_NONE
) {

223 
ªsu…
 = -
__LINE__
;

224 
d⁄e
;

228 
blkƒ
 = 
addr
 / 
MMC_BLOCK_SIZE
;

229 
tŸÆ_blks
 = (
size
 + 
MMC_BLOCK_SIZE
 - 1) / MMC_BLOCK_SIZE;

232 
chunks
 = 
tŸÆ_blks
 / 
chunk_blks
;

233 
À·_blks
 = 
tŸÆ_blks
 % 
chunk_blks
;

234 
buf
 = (
uch¨
*)
imgaddr
;

235 
chkbuf
 = (
uch¨
*)
MMC_BUF_ADDR
;

237 
i
 = 0; i < 
chunks
; i++) {

238 
ªt
 = 
	`mmc_block_wrôe
(
dev_id
, 
blkƒ
 + 
i
 * 
chunk_blks
,

239 
chunk_blks
, (*)
buf
);

240 i‡(
ªt
 !
MMC_ERR_NONE
) {

241 
ªsu…
 = -
__LINE__
;

242 
d⁄e
;

244 
ªt
 = 
	`mmc_block_ªad
(
dev_id
, 
blkƒ
 + 
i
 * 
chunk_blks
,

245 
chunk_blks
, (*)
chkbuf
);

246 i‡(
ªt
 !
MMC_ERR_NONE
) {

247 
ªsu…
 = -
__LINE__
;

248 
d⁄e
;

251 
j
 = 0; j < 
chunk_blks
 * 
MMC_BLOCK_SIZE
; j++) {

252 i‡(
buf
[
j
] =
chkbuf
[j])

254 
ªsu…
 = -
__LINE__
;

255 
d⁄e
;

257 
	`¥ötf
("[SD%d] Write %3d blocks from 0x%.8x(RAM)Åo 0x%.8x(FLASH).\n",

258 
dev_id
, 
chunk_blks
, ()
buf
,

259 (
blkƒ
 + 
i
 * 
chunk_blks
Ë* 
MMC_BLOCK_SIZE
);

261 
buf
 +(
chunk_blks
 * 
MMC_BLOCK_SIZE
);

264 i‡(
À·_blks
) {

265 
ªt
 = 
	`mmc_block_wrôe
(
dev_id
, 
blkƒ
 + 
chunks
 * 
chunk_blks
,

266 
À·_blks
, (*)
buf
);

267 i‡(
ªt
 !
MMC_ERR_NONE
) {

268 
ªsu…
 = -
__LINE__
;

269 
d⁄e
;

271 
ªt
 = 
	`mmc_block_ªad
(
dev_id
, 
blkƒ
 + 
chunks
 * 
chunk_blks
,

272 
À·_blks
, (*)
chkbuf
);

273 i‡(
ªt
 !
MMC_ERR_NONE
) {

274 
ªsu…
 = -
__LINE__
;

275 
d⁄e
;

277 
j
 = 0; j < 
À·_blks
 * 
MMC_BLOCK_SIZE
; j++) {

278 i‡(
buf
[
j
] =
chkbuf
[j])

280 
	`¥ötf
("[SD%d] chkbuf[%d] = %xh (!%xhË\n", 
dev_id
,

281 
j
, 
chkbuf
[j], 
buf
[j]);

282 
ªsu…
 = -
__LINE__
;

283 
d⁄e
;

285 
	`¥ötf
("[SD%d] Write %3d blocks from 0x%.8x(RAM)Åo 0x%.8x(FLASH).\n",

286 
dev_id
, 
À·_blks
, ()
buf
,

287 (
blkƒ
 + 
chunks
 * 
chunk_blks
Ë* 
MMC_BLOCK_SIZE
);

290 
d⁄e
:

291 i‡(
boŸ¨ó
 && !
	`mmc_ˇrd_sd
(
ˇrd
Ë&& c¨d->
ext_csd
.
∑π_í
) {

293 
vÆ
 = (
ext_csd
[
EXT_CSD_PART_CFG
] & ~0x7Ë| 
EXT_CSD_PART_CFG_DEFT_PART
;

294 i‡(
	`mmc_£t_∑π_c⁄fig
(
ˇrd
, 
vÆ
Ë!
MMC_ERR_NONE
)

295 
ªsu…
 = -
__LINE__
;

298 i‡(!
ªsu…
) {

299 
	`¥ötf
("[SD%d] Download %d blocks (%d bytes)Åo 0x%.8x successfully\n",

300 
dev_id
, 
tŸÆ_blks
,ÅŸÆ_blk†* 
MMC_BLOCK_SIZE
, 
blkƒ
 * MMC_BLOCK_SIZE);

302 
	`¥ötf
("[SD%d] Download %d blocks (%d bytes)Åo 0x%.8x failed %d\n",

303 
dev_id
, 
tŸÆ_blks
,ÅŸÆ_blk†* 
MMC_BLOCK_SIZE
, 
blkƒ
 * MMC_BLOCK_SIZE, 
ªsu…
);

305  
ªsu…
;

306 
	}
}

308 
	$mmc_dow∆ﬂd_∑π
(
dev_id
, *
∑π_«me
, 
boŸ¨ó
)

310 
ªt
 = -1;

311 
mmc_ˇrd
 *
ˇrd
;

312 
mmc_ho°
 *
ho°
;

313 
∑π_t
 *
∑π
 = 
	`mt6573_∑π_gë_∑πôi⁄
(
∑π_«me
);

315 
mmc_dow∆ﬂd_addr
 = 0;

316 
mmc_dow∆ﬂd_size
 = 0;

317 
mmc_image_addr
 = 0;

319 
ho°
 = 
	`mmc_gë_ho°
(
dev_id
);

320 
ˇrd
 = 
	`mmc_gë_ˇrd
(
dev_id
);

322 i‡(
∑π
) {

323 
	`¥ötf
("[SD%d] Waôög f‹ '%s' imagêlﬂdög from ICE...\n", 
dev_id
, 
∑π_«me
);

324 !
mmc_dow∆ﬂd_size
);

325 
ªt
 = 
	`mmc_dow∆ﬂd
(
dev_id
, 
mmc_image_addr
, 
mmc_dow∆ﬂd_size
,

326 
∑π
->
°¨tblk
 * 
BLK_SIZE
, 
boŸ¨ó
);

327 i‡(
ªt
 != 0)

328 
d⁄e
;

329 i‡(
boŸ¨ó
) {

335 
ªt
 = 
	`mmc_boŸ_c⁄fig
(
ˇrd
, 
EXT_CSD_PART_CFG_EN_ACK
,

336 
EXT_CSD_PART_CFG_EN_BOOT_PART_1
, 
EXT_CSD_BOOT_BUS_WIDTH_1
,

337 
EXT_CSD_BOOT_BUS_MODE_DEFT
);

338 i‡(
ªt
 != 0)

339 
d⁄e
;

340 
ªt
 = 
	`mmc_ªad_ext_csd
(
ho°
, 
ˇrd
);

343 
d⁄e
:

344  
ªt
;

345 
	}
}

348 
	$mmc_ªadback_blks
(
dev_id
, 
addr
, 
blks
, 
boŸ¨ó
)

350 
i
, 
j
, 
ªsu…
 = 0;

351 
u8
 
vÆ
;

352 
u8
 *
ext_csd
;

353 
blkƒ
 = 
addr
 / 
MMC_BLOCK_SIZE
;

354 *
buf
 = (*)
MMC_BUF_ADDR
;

355 
mmc_ˇrd
 *
ˇrd
;

356 
mmc_ho°
 *
ho°
;

358 
ho°
 = 
	`mmc_gë_ho°
(
dev_id
);

359 
ˇrd
 = 
	`mmc_gë_ˇrd
(
dev_id
);

360 
ext_csd
 = &
ˇrd
->
øw_ext_csd
[0];

362 i‡(
boŸ¨ó
 && !
	`mmc_ˇrd_sd
(
ˇrd
)) {

364 
vÆ
 = (
ext_csd
[
EXT_CSD_PART_CFG
] & ~0x7Ë| 
EXT_CSD_PART_CFG_BOOT_PART_1
;

365 i‡(
	`mmc_£t_∑π_c⁄fig
(
ˇrd
, 
vÆ
Ë!
MMC_ERR_NONE
) {

366 
ªsu…
 = -
__LINE__
;

367 
d⁄e
;

369 i‡(
	`mmc_ªad_ext_csd
(
ho°
, 
ˇrd
Ë!
MMC_ERR_NONE
) {

370 
ªsu…
 = -
__LINE__
;

371 
d⁄e
;

375 
	`¥ötf
("[SD%d] Dum∞%d blk†‰om 0x%x (FLASH)\n", 
dev_id
, 
blks
,

376 
blkƒ
 * 
MMC_BLOCK_SIZE
);

377 
i
 = 0; i < 
blks
; i++) {

378 
	`mem£t
(
buf
, 0, 
MMC_BLOCK_SIZE
);

379 i‡(
MMC_ERR_NONE
 !
	`mmc_block_ªad
(
dev_id
, 
blkƒ
 + 
i
, 1, (*)
buf
)) {

380 
	`¥ötf
("\n[SD%d] Ród from %dth blockÉº‹\n", 
dev_id
, 
blkƒ
 + 
i
);

384 
j
 = 0; j < 
MMC_BLOCK_SIZE
; j++) {

385 i‡(
j
 % 16 == 0)

386 
	`¥ötf
("\n%xh: ", (
blkƒ
 + 
i
Ë* 
MMC_BLOCK_SIZE
 + 
j
);

387 
	`¥ötf
("%x ", 
buf
[
j
]);

389 
	`¥ötf
("\n");

390 
buf
 +
MMC_BLOCK_SIZE
;

392 
d⁄e
:

394 i‡(
boŸ¨ó
 && !
	`mmc_ˇrd_sd
(
ˇrd
)) {

396 
vÆ
 = (
ext_csd
[
EXT_CSD_PART_CFG
] & ~0x7Ë| 
EXT_CSD_PART_CFG_DEFT_PART
;

397 i‡(
	`mmc_£t_∑π_c⁄fig
(
ˇrd
, 
vÆ
Ë!
MMC_ERR_NONE
)

398 
ªsu…
 = -
__LINE__
;

399 i‡(
	`mmc_ªad_ext_csd
(
ho°
, 
ˇrd
Ë!
MMC_ERR_NONE
) {

400 
ªsu…
 = -
__LINE__
;

404  
ªsu…
;

405 
	}
}

408 
	$mmc_ªadback_∑π
(
dev_id
, *
∑π_«me
, 
boŸ¨ó
)

410 
ªt
 = -1;

411 
∑π_t
 *
∑π
 = 
	`mt6573_∑π_gë_∑πôi⁄
(
∑π_«me
);

413 i‡(
∑π
) {

414 
ªt
 = 
	`mmc_ªadback_blks
(
dev_id
, 
∑π
->
°¨tblk
 * 
BLK_SIZE
,

415 1, 
boŸ¨ó
);

417  
ªt
;

418 
	}
}

421 
	$mmc_îa£_blks
(
dev_id
, 
u32
 
addr
, u32 
size
, 
boŸ¨ó
)

423 
ªt
;

424 
i
, 
j
, 
ªsu…
 = 0;

425 
u8
 
vÆ
;

426 
u8
 *
ext_csd
;

427 
u32
 
blkƒ
;

428 
u32
 
tŸÆ_blks
;

429 
mmc_ˇrd
 *
ˇrd
;

431 i‡(!
size
)

434 i‡(
addr
 % 
MMC_BLOCK_SIZE
)

435  
MMC_ERR_FAILED
;

437 
ˇrd
 = 
	`mmc_gë_ˇrd
(
dev_id
);

438 
ext_csd
 = &
ˇrd
->
øw_ext_csd
[0];

440 i‡(
boŸ¨ó
 && !
	`mmc_ˇrd_sd
(
ˇrd
Ë&& c¨d->
ext_csd
.
∑π_í
) {

442 
vÆ
 = (
ext_csd
[
EXT_CSD_PART_CFG
] & ~0x7Ë| 
EXT_CSD_PART_CFG_BOOT_PART_1
;

443 i‡(
	`mmc_£t_∑π_c⁄fig
(
ˇrd
, 
vÆ
Ë!
MMC_ERR_NONE
) {

444 
ªsu…
 = -
__LINE__
;

445 
d⁄e
;

448 
blkƒ
 = 
addr
 / 
MMC_BLOCK_SIZE
;

449 
tŸÆ_blks
 = (
size
 + 
MMC_BLOCK_SIZE
 - 1) / MMC_BLOCK_SIZE;

451 i‡(
	`mmc_îa£_°¨t
(
ˇrd
, 
blkƒ
 * 
MMC_BLOCK_SIZE
Ë!
MMC_ERR_NONE
) {

452 
ªsu…
 = -
__LINE__
;

453 
d⁄e
;

455 i‡(
	`mmc_îa£_íd
(
ˇrd
, (
blkƒ
 + 
tŸÆ_blks
Ë* 
MMC_BLOCK_SIZE
Ë!
MMC_ERR_NONE
) {

456 
ªsu…
 = -
__LINE__
;

457 
d⁄e
;

459 i‡(
	`mmc_îa£
(
ˇrd
, 
MMC_ERASE_NORMAL
Ë!
MMC_ERR_NONE
) {

460 
ªsu…
 = -
__LINE__
;

461 
d⁄e
;

464 
d⁄e
:

465 i‡(
boŸ¨ó
 && !
	`mmc_ˇrd_sd
(
ˇrd
Ë&& c¨d->
ext_csd
.
∑π_í
) {

467 
vÆ
 = (
ext_csd
[
EXT_CSD_PART_CFG
] & ~0x7Ë| 
EXT_CSD_PART_CFG_DEFT_PART
;

468 i‡(
	`mmc_£t_∑π_c⁄fig
(
ˇrd
, 
vÆ
Ë!
MMC_ERR_NONE
)

469 
ªsu…
 = -
__LINE__
;

472 i‡(!
ªsu…
) {

473 
	`¥ötf
("[SD%d] Erase %d blocks (%d bytes) from 0x%x successfully\n",

474 
dev_id
, 
tŸÆ_blks
,ÅŸÆ_blk†* 
MMC_BLOCK_SIZE
, 
blkƒ
 * MMC_BLOCK_SIZE);

476 
	`¥ötf
("[SD%d] Erase %d blocks (%d bytes) from 0x%x failed %d\n",

477 
dev_id
, 
tŸÆ_blks
,ÅŸÆ_blk†* 
MMC_BLOCK_SIZE
, 
blkƒ
 * MMC_BLOCK_SIZE, 
ªsu…
);

479  
ªsu…
;

480 
	}
}

483 
	$mmc_îa£_∑π
(
dev_id
, *
∑π_«me
, 
boŸ¨ó
)

485 
ªt
 = -1;

486 
∑π_t
 *
∑π
 = 
	`mt6573_∑π_gë_∑πôi⁄
(
∑π_«me
);

488 i‡(
∑π
) {

492 
ªt
 = 
	`mmc_îa£_blks
(
dev_id
, 
∑π
->
°¨tblk
 * 
BLK_SIZE
,

493 
∑π
->
blknum
 * 
BLK_SIZE
, 
boŸ¨ó
);

495  
ªt
;

496 
	}
}

500 #ifde‡
MMC_BOOT_TEST


501 
	$mmc_boŸ_up_ã°
(
id
, 
ª£t
)

503 
îr
 = 
MMC_ERR_FAILED
;

504 
mmc_ho°
 *
ho°
;

506 
ho°
 = 
	`mmc_gë_ho°
(
id
);

507 
	`mmc_öô_ho°
(
ho°
, 
id
);

509 
	`msdc_emmc_boŸ_ª£t
(
ho°
, 
ª£t
);

511 
îr
 = 
	`msdc_emmc_boŸ_°¨t
(
ho°
, 25000000, 0, 
EMMC_BOOT_RST_CMD_MODE
, 0);

512 i‡(
îr
) {

513 
	`¥ötf
("[EMMC] BoŸ Eº‹: %d\n", 
îr
);

514 
d⁄e
;

516 
îr
 = 
	`msdc_emmc_boŸ_ªad
(
ho°
, 128 * 1024, 
MMC_BUF_ADDR
);

517 
	`msdc_emmc_boŸ_°›
(
ho°
, 
EMMC_BOOT_RST_CMD_MODE
);

518 
d⁄e
:

519 i‡(!
îr
) {

520 
i
, 
j
;

521 *
buf
 = (*)
MMC_BUF_ADDR
;

522 
i
 = 0; i < 16; i++) {

523 
j
 = 0; j < 
MMC_BLOCK_SIZE
; j++) {

524 i‡(
j
 % 16 == 0)

525 
	`¥ötf
("\n%.8xh: ", 
i
 * 
MMC_BLOCK_SIZE
 + 
j
);

526 
	`¥ötf
("%.2x ", 
buf
[
j
]);

528 
	`¥ötf
("\n");

529 
buf
 +
MMC_BLOCK_SIZE
;

532  
îr
;

533 
	}
}

535 
	$mmc_boŸ_íabÀ
(
id
, 
boŸ∑π
)

537 
îr
 = 
MMC_ERR_FAILED
;

538 
mmc_ho°
 *
ho°
;

539 
mmc_ˇrd
 *
ˇrd
;

541 
ho°
 = 
	`mmc_gë_ho°
(
id
);

542 
ˇrd
 = 
	`mmc_gë_ˇrd
(
id
);

544 
îr
 = 
	`mmc_boŸ_c⁄fig
(
ˇrd
, 
EXT_CSD_PART_CFG_EN_ACK
,

545 
boŸ∑π
, 
EXT_CSD_BOOT_BUS_WIDTH_1
, 
EXT_CSD_BOOT_BUS_MODE_DEFT
);

546 i‡(
îr
 != 0)

547 
d⁄e
;

548 
îr
 = 
	`mmc_ªad_ext_csd
(
ho°
, 
ˇrd
);

549 
d⁄e
:

550  
îr
;

551 
	}
}

554 
	$mmc_ã°_mem_ˇrd
(
mmc_ã°_c⁄fig
 *
cfg
)

556 
id
, 
cou¡
, 
f‹evî
;

557 
ªt
, 
chk_ªsu…
, 
tid
 = 0, 
ªsu…
 = 0;

558 
chunks
, 
chunk_blks
, 
À·_blks
, 
∑ss
 = 0, 
Áû
 = 0;

559 
tŸÆ_blks
;

560 
i
, 
j
;

561 
blksz
;

562 
˛khz
;

563 
°©us
;

564 
∑âîn
 = 0;

565 *
buf
;

566 
blkƒ
;

567 
mmc_ho°
 *
ho°
;

568 
mmc_ˇrd
 *
ˇrd
;

570 
id
 = 
cfg
->id;

571 
cou¡
 = 
cfg
->count;

572 
buf
 = 
cfg
->buf;

573 
blkƒ
 = 
cfg
->blknr;

574 
blksz
 = 
cfg
->blksz;

576 
chk_ªsu…
 = 
cfg
->chk_result;

577 
chunk_blks
 = 
cfg
->chunk_blks;

578 
tŸÆ_blks
 = (
cfg
->
tŸÆ_size
 + 
blksz
 - 1) / blksz;

579 
f‹evî
 = (
cou¡
 == -1) ? 1 : 0;

581 
ho°
 = 
	`mmc_gë_ho°
(
id
);

582 
ˇrd
 = 
	`mmc_gë_ˇrd
(
id
);

584 
f‹evî
 || 
cou¡
--) {

585 
	`¥ötf
("[TST] ==============================================\n");

586 
	`¥ötf
("[TST] BEGIN: %d/%d, No Stop(%d)\n",

587 (
cfg
->
cou¡
 != -1) ? cfg->count - count : 0,

588 (
cfg
->
cou¡
 !-1Ë? cfg->cou¡ : 0, 
f‹evî
);

589 
	`¥ötf
("[TST] ----------------------------------------------\n");

590 
	`¥ötf
("[TST] Modê : %d\n", 
cfg
->
mode
);

591 
	`¥ötf
("[TST] Clock : %d kHz\n", 
cfg
->
˛ock
 / 1000);

592 
	`¥ötf
("[TST] BusWidth: %d bôs\n", 
cfg
->
buswidth
);

593 
	`¥ötf
("[TST] Bur°Sz : %d byãs\n", 0x1 << 
cfg
->
bur°sz
);

594 
	`¥ötf
("[TST] BlkAdd∏: %xh\n", 
blkƒ
);

595 
	`¥ötf
("[TST] BlkSizê: %dbyãs\n", 
blksz
);

596 
	`¥ötf
("[TST] T°Blk†: %d\n", 
tŸÆ_blks
);

597 
	`¥ötf
("[TST] AutoCMD : 12(%d), 23(%d)\n",

598 (
cfg
->
autocmd
 & 
MSDC_AUTOCMD12
) ? 1 : 0,

599 (
cfg
->
autocmd
 & 
MSDC_AUTOCMD23
) ? 1 : 0);

600 
	`¥ötf
("[TST] ----------------------------------------------\n");

603 i‡(
	`mmc_öô_ho°
(
id
, 
ho°
, 
cfg
->
˛k§c
, cfg->
mode
) != 0) {

604 
ªsu…
 = -
__LINE__
;

605 
Áûuª
;

607 i‡(
	`mmc_öô_ˇrd
(
ho°
, 
ˇrd
) != 0) {

608 
ªsu…
 = -
__LINE__
;

609 
Áûuª
;

612 
	`msdc_£t_dma
(
ho°
, (
u8
)
cfg
->
bur°sz
, (
u32
)cfg->
Êags
);

613 
	`msdc_£t_autocmd
(
ho°
, 
cfg
->
autocmd
, 1);

617 i‡(
	`mmc_ˇrd_uhs1
(
ˇrd
)) {

618 i‡(
	`mmc_swôch_uhs1
(
ho°
, 
ˇrd
, 
cfg
->
uhsmode
) != 0) {

619 
ªsu…
 = -
__LINE__
;

620 
Áûuª
;

626 i‡(
cfg
->
˛ock
) {

627 
˛khz
 = 
ˇrd
->
maxhz
 < 
cfg
->
˛ock
 ? card->maxhz : cfg->clock;

628 
	`mmc_£t_˛ock
(
ho°
, 
	`mmc_ˇrd_ddr
(
ˇrd
), 
˛khz
);

630 i‡(
	`mmc_ˇrd_sd
(
ˇrd
Ë&& 
cfg
->
buswidth
 =
HOST_BUS_WIDTH_8
) {

631 
	`¥ötf
("[TST] SD card doesn't support 8-bit bus width (SKIP)\n");

632 
ªsu…
 = 
MMC_ERR_NONE
;

634 i‡(
	`mmc_£t_bus_width
(
ho°
, 
ˇrd
, 
cfg
->
buswidth
) != 0) {

635 
ªsu…
 = -
__LINE__
;

636 
Áûuª
;

640 i‡(!(
	`mmc_ˇrd_mmc
(
ˇrd
Ë&& 
	`mmc_ˇrd_ddr
(card))) {

641 i‡(
	`mmc_£t_blk_Àngth
(
ho°
, 
blksz
) != 0) {

642 
ªsu…
 = -
__LINE__
;

643 
Áûuª
;

647 i‡(
cfg
->
piobôs
) {

648 
	`¥ötf
("[TST] PIO bôs: %d\n", 
cfg
->
piobôs
);

649 
	`msdc_£t_pio_bôs
(
ho°
, 
cfg
->
piobôs
);

652 
tid
 = 
ªsu…
 = 0;

654 i‡(
	`mmc_îa£_°¨t
(
ˇrd
, 
blkƒ
 * 
blksz
Ë!
MMC_ERR_NONE
) {

655 
ªsu…
 = -
__LINE__
;

656 
Áûuª
;

658 i‡(
	`mmc_îa£_íd
(
ˇrd
, (
blkƒ
 + 
tŸÆ_blks
Ë* 
blksz
Ë!
MMC_ERR_NONE
) {

659 
ªsu…
 = -
__LINE__
;

660 
Áûuª
;

662 i‡(
	`mmc_îa£
(
ˇrd
, 
MMC_ERASE_NORMAL
Ë!
MMC_ERR_NONE
) {

663 
ªsu…
 = -
__LINE__
;

664 
Áûuª
;

666 
	`¥ötf
("[TST] 0x%x - 0x%x Eø£d\n", 
blkƒ
 * 
blksz
,

667 (
blkƒ
 + 
tŸÆ_blks
Ë* 
blksz
);

669 
	`mmc_£nd_°©us
(
ho°
, 
ˇrd
, &
°©us
);

671 i‡(
cfg
->
t°_sögÀ
) {

673 
i
 = 0; i < 
tŸÆ_blks
; i++) {

674 
∑âîn
 = (
i
 + 
cou¡
) % 256;

675 
	`mem£t
(
buf
, 
∑âîn
, 
blksz
);

676 
ªt
 = 
	`mmc_block_wrôe
(
id
, 
blkƒ
 + 
i
, 1, (*)
buf
);

677 i‡(
ªt
 !
MMC_ERR_NONE
) {

678 
	`¥ötf
("ã° sögÀ block wrôêÁûed (%d)\n", 
i
);

679 
ªsu…
 = -
__LINE__
;

680 
Áûuª
;

684 
	`¥ötf
(
TC_MSG
, 
ho°
->
id
, 
ªsu…
 =0 ? "PASS" : "FAIL", 
tid
++,

687 i‡(
ªsu…
)

691 
i
 = 0; i < 
tŸÆ_blks
 && !
ªsu…
; i++) {

692 
∑âîn
 = (
i
 + 
cou¡
) % 256;

694 
	`mem£t
(
buf
, 
∑âîn
 + 1, 
blksz
);

695 
ªt
 = 
	`mmc_block_ªad
(
id
, 
blkƒ
 + 
i
, 1, (*)
buf
);

696 i‡(
ªt
 !
MMC_ERR_NONE
) {

697 
ªsu…
 = -
__LINE__
;

698 
Áûuª
;

700 i‡(
chk_ªsu…
) {

701 
j
 = 0; j < 
blksz
; j++) {

702 i‡(
buf
[
j
] !
∑âîn
) {

703 
ªsu…
 = -
__LINE__
;

704 
Áûuª
;

709 
	`¥ötf
(
TC_MSG
, 
ho°
->
id
, 
ªsu…
 =0 ? "PASS" : "FAIL", 
tid
++,

712 i‡(
ªsu…
) {

713 
	`¥ötf
("[SD%d]\t\tread backÖattern(0x%.2x) failed\n",

714 
id
, 
∑âîn
);

715 
Áûuª
;

719 
	`mmc_£nd_°©us
(
ho°
, 
ˇrd
, &
°©us
);

721 i‡(
cfg
->
t°_mu…ùÀ
) {

723 
chunks
 = 
tŸÆ_blks
 / 
chunk_blks
;

724 
À·_blks
 = 
tŸÆ_blks
 % 
chunk_blks
;

725 
i
 = 0; i < 
chunks
; i++) {

726 
∑âîn
 = (
i
 + 
cou¡
) % 256;

727 
	`mem£t
(
buf
, 
∑âîn
, 
blksz
 * 
chunk_blks
);

728 
ªt
 = 
	`mmc_block_wrôe
(
id
, 
blkƒ
 + 
i
 * 
chunk_blks
,

729 
chunk_blks
, (*)
buf
);

730 i‡(
ªt
 !
MMC_ERR_NONE
) {

731 
ªsu…
 = -
__LINE__
;

732 
Áûuª
;

736 i‡(!
ªsu…
 && 
À·_blks
) {

737 
∑âîn
 = (
i
 + 
cou¡
) % 256;

738 
	`mem£t
(
buf
, 
∑âîn
, 
blksz
 * 
À·_blks
);

739 
ªt
 = 
	`mmc_block_wrôe
(
id
, 
blkƒ
 + 
chunks
 * 
chunk_blks
,

740 
À·_blks
, (*)
buf
);

741 i‡(
ªt
 !
MMC_ERR_NONE
) {

742 
ªsu…
 = -
__LINE__
;

743 
Áûuª
;

747 
	`¥ötf
(
TC_MSG
, 
ho°
->
id
, 
ªsu…
 =0 ? "PASS" : "FAIL", 
tid
++,

750 i‡(
ªsu…
)

751 
Áûuª
;

754 
i
 = 0; i < 
chunks
; i++) {

755 
∑âîn
 = (
i
 + 
cou¡
) % 256;

757 
	`mem£t
(
buf
, 
∑âîn
 + 1, 
blksz
);

758 
ªt
 = 
	`mmc_block_ªad
(
id
, 
blkƒ
 + 
i
 * 
chunk_blks
,

759 
chunk_blks
, (*)
buf
);

760 i‡(
ªt
 !
MMC_ERR_NONE
) {

761 
	`¥ötf
("[SD%d]\t\tread %d blks failed(ret = %d blks)\n",

762 
ho°
->
id
, 
chunk_blks
, 
ªt
);

763 
ªsu…
 = -
__LINE__
;

764 
Áûuª
;

766 i‡(
chk_ªsu…
) {

767 
j
 = 0; j < 
chunk_blks
 * 
blksz
; j++) {

768 i‡(
buf
[
j
] =
∑âîn
)

770 
ªsu…
 = -
__LINE__
;

771 
	`¥ötf
("[SD%d]\t\t%xh = %x (!= %x)\n",

772 
ho°
->
id
, 
blkƒ
 + 
i
 * 
chunk_blks
 + 
j
, 
buf
[j], 
∑âîn
);

773 
Áûuª
;

778 i‡(!
ªsu…
 && 
À·_blks
) {

779 
∑âîn
 = 
i
 % 256;

781 
	`mem£t
(
buf
, 
∑âîn
 + 1, 
blksz
);

782 
ªt
 = 
	`mmc_block_ªad
(
id
, 
blkƒ
 + 
chunks
 * 
chunk_blks
,

783 
À·_blks
, (*)
buf
);

784 i‡(
ªt
 !
MMC_ERR_NONE
) {

785 
	`¥ötf
("[SD%d]\t\tread %d blks failed(ret = %d blks)\n",

786 
ho°
->
id
, 
À·_blks
, 
ªt
);

787 
ªsu…
 = -
__LINE__
;

788 
Áûuª
;

790 i‡(
chk_ªsu…
) {

791 
j
 = 0; j < 
À·_blks
 * 
blksz
; j++) {

792 i‡(
buf
[
j
] =
∑âîn
)

794 
	`¥ötf
("[SD%d]\t\t%xh = %x (!= %x)\n",

795 
ho°
->
id
, 
blkƒ
 + 
chunks
 * 
chunk_blks
 + 
j
, 
buf
[j], 
∑âîn
);

796 
ªsu…
 = -
__LINE__
;

797 
Áûuª
;

802 
	`¥ötf
(
TC_MSG
, 
ho°
->
id
, 
ªsu…
 =0 ? "PASS" : "FAIL", 
tid
++,

805 i‡(
ªsu…
)

806 
Áûuª
;

809 
	`mmc_£nd_°©us
(
ho°
, 
ˇrd
, &
°©us
);

811 i‡(
cfg
->
t°_öãæóve
) {

813 
chunks
 = 
tŸÆ_blks
 / 
chunk_blks
;

814 
À·_blks
 = 
tŸÆ_blks
 % 
chunk_blks
;

815 
i
 = 0; i < 
chunks
; i++) {

816 
∑âîn
 = (
i
 + 
cou¡
) % 256;

817 
	`mem£t
(
buf
, 
∑âîn
, 
blksz
 * 
chunk_blks
);

818 
ªt
 = 
	`mmc_block_wrôe
(
id
, 
blkƒ
 + 
i
 * 
chunk_blks
,

819 
chunk_blks
, (*)
buf
);

820 i‡(
ªt
 !
MMC_ERR_NONE
) {

821 
ªsu…
 = -
__LINE__
;

822 
Áûuª
;

826 
	`mem£t
(
buf
, 
∑âîn
 + 1, 
blksz
 * 
chunk_blks
);

827 
ªt
 = 
	`mmc_block_ªad
(
id
, 
blkƒ
 + 
i
 * 
chunk_blks
,

828 
chunk_blks
, (*)
buf
);

829 i‡(
ªt
 !
MMC_ERR_NONE
) {

830 
ªsu…
 = -
__LINE__
;

831 
Áûuª
;

833 i‡(
chk_ªsu…
) {

834 
j
 = 0; j < 
chunk_blks
 * 
blksz
; j++) {

835 i‡(
buf
[
j
] =
∑âîn
)

837 
ªsu…
 = -
__LINE__
;

838 
Áûuª
;

843 i‡(!
ªsu…
 && 
À·_blks
) {

844 
∑âîn
 = (
i
 + 
cou¡
) % 256;

845 
	`mem£t
(
buf
, 
∑âîn
, 
blksz
 * 
À·_blks
);

846 
ªt
 = 
	`mmc_block_wrôe
(
id
, 
blkƒ
 + 
chunks
 * 
chunk_blks
,

847 
À·_blks
, (*)
buf
);

848 i‡(
ªt
 !
MMC_ERR_NONE
) {

849 
ªsu…
 = -
__LINE__
;

850 
Áûuª
;

854 
	`mem£t
(
buf
, 
∑âîn
 + 1, 
blksz
 * 
À·_blks
);

855 
ªt
 = 
	`mmc_block_ªad
(
id
, 
blkƒ
 + 
chunks
 * 
chunk_blks
,

856 
À·_blks
, (*)
buf
);

857 i‡(
ªt
 !
MMC_ERR_NONE
) {

858 
ªsu…
 = -
__LINE__
;

861 i‡(
chk_ªsu…
) {

862 
j
 = 0; j < 
À·_blks
 * 
blksz
; j++) {

863 i‡(
buf
[
j
] =
∑âîn
)

865 
ªsu…
 = -
__LINE__
;

866 
Áûuª
;

871 
	`¥ötf
(
TC_MSG
, 
ho°
->
id
, 
ªsu…
 =0 ? "PASS" : "FAIL", 
tid
++,

874 i‡(
ªsu…
)

875 
Áûuª
;

877 i‡(
cfg
->
desc
) {

878 
	`¥ötf
("[TST] ----------------------------------------------\n");

879 
	`¥ötf
("[TST] Rï‹à- %†\n", 
cfg
->
desc
);

880 
	`¥ötf
("[TST] ----------------------------------------------\n");

882 
	`mmc_¥of_dump
(
id
);

884 
Áûuª
:

885 i‡(
ªsu…
) {

886 
	`¥ötf
("[SD%d] mm¯ã° faûed (%d)\n", 
ho°
->
id
, 
ªsu…
);

887 
Áû
++;

889 
∑ss
++;

891 
	`¥ötf
("[TST] ----------------------------------------------\n");

892 
	`¥ötf
("[TST] Test Result: TOTAL(%d/%d), PASS(%d), FAIL(%d) \n",

893 
cfg
->
cou¡
 - cou¡, cfg->cou¡, 
∑ss
, 
Áû
);

894 
	`¥ötf
("[TST] ----------------------------------------------\n");

898  
ªsu…
;

899 
	}
}

901 
	$mmc_ã°
(
¨gc
, *
¨gv
[])

903 
i
, 
j
;

904 
ªsu…
 = -1;

905 
mmc_ã°_c⁄fig
 
cfg
;

907 #ifde‡
MMC_ICE_DOWNLOAD


908 
	`mmc_ªadback_∑π
(0, 
PART_UBOOT
, 0);

909 
	`mmc_îa£_∑π
(0, 
PART_UBOOT
, 0);

910 
	`mmc_ªadback_∑π
(0, 
PART_UBOOT
, 0);

911 
	`mmc_dow∆ﬂd_∑π
(0, 
PART_UBOOT
, 0);

912 
	`mmc_ªadback_∑π
(0, 
PART_UBOOT
, 0);

916 #ifde‡
MMC_BOOT_TEST


917 
	`¥ötf
("[EMMC] Boot up withÖowerÑeset (MMCv4.3ábove)\n");

918 
	`mmc_boŸ_up_ã°
(0, 
EMMC_BOOT_PWR_RESET
);

919 
	`mdñay
(100);

920 
i
 = 0; i < 20; i++) {

921 
	`¥ötf
("[EMMC] Boot up with RST_nÑeset (MMCv4.41ábove)\n");

922 
	`mmc_boŸ_up_ã°
(0, 
EMMC_BOOT_RST_N_SIG
);

923 
	`mdñay
(100);

925 
	`¥ötf
("[EMMC] Boot up with PRE_IDLE_CMDÑeset (MMCv4.41ábove)\n");

926 
	`mmc_boŸ_up_ã°
(0, 
EMMC_BOOT_PRE_IDLE_CMD
);

932 
	`mem£t
(&
cfg
, 0, (
mmc_ã°_c⁄fig
));

934 
cfg
.
id
 = 0;

935 
cfg
.
desc
 = "Memory Card Read/Write Test";

936 
cfg
.
cou¡
 = 
MMC_TST_COUNTS
;

937 
cfg
.
blksz
 = 
MMC_BLOCK_SIZE
;

938 
cfg
.
blkƒ
 = 
	`MMC_TST_BLK_NR
(0);

939 
cfg
.
tŸÆ_size
 = 
MMC_TST_SIZE
;

940 
cfg
.
chunk_blks
 = 
MMC_TST_CHUNK_BLKS
;

941 
cfg
.
buf
 = (*)
MMC_TST_BUF_ADDR
;

942 
cfg
.
chk_ªsu…
 = 
MMC_TST_CHK_RESULT
;

943 
cfg
.
t°_sögÀ
 = 
MMC_TST_SBLK_RW
;

944 
cfg
.
t°_mu…ùÀ
 = 
MMC_TST_MBLK_RW
;

945 
cfg
.
t°_öãæóve
 = 
MMC_TST_IMBLK_RW
;

947 
i
 = 0; i < 
	`ARRAY_SIZE
(
˛k‰eq
); i++) {

948 
j
 = 0; j < 
	`ARRAY_SIZE
(
buswidth
); j++) {

949 
cfg
.
˛ock
 = 
˛k‰eq
[
i
];

950 
cfg
.
buswidth
 = buswidth[
j
];

951 i‡(
	`mmc_ã°_mem_ˇrd
(&
cfg
) != 0)

952 
exô
;

955 
ªsu…
 = 0;

958 
exô
:

961  
ªsu…
;

962 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/msdc/mmc_test.h

36 #i‚de‡
MMC_TEST_H


37 
	#MMC_TEST_H


	)

40 
	#MMC_TEST


	)

42 #ifde‡
__˝lu•lus


46 
	smmc_ã°_c⁄fig
 {

47 *
desc
;

48 
id
;

49 
autocmd
;

50 
mode
;

51 
uhsmode
;

52 
bur°sz
;

53 
piobôs
;

54 
Êags
;

55 
cou¡
;

56 
˛k§c
;

57 
˛ock
;

58 
buswidth
;

59 
blkƒ
;

60 
tŸÆ_size
;

61 
blksz
;

62 
chunk_blks
;

63 *
buf
;

64 
chk_ªsu…
;

65 
t°_sögÀ
;

66 
t°_mu…ùÀ
;

67 
t°_öãæóve
;

70 
	smmc_›_ªp‹t
 {

71 
cou¡
;

72 
mö_time
;

73 
max_time
;

74 
tŸÆ_time
;

75 
tŸÆ_size
;

77 
	smmc_›_≥rf
 {

78 
mmc_ho°
 *
ho°
;

79 
mmc_ˇrd
 *
ˇrd
;

80 
mmc_›_ªp‹t
 
sögÀ_blk_ªad
;

81 
mmc_›_ªp‹t
 
sögÀ_blk_wrôe
;

82 
mmc_›_ªp‹t
 
mu…i_blks_ªad
;

83 
mmc_›_ªp‹t
 
mu…i_blks_wrôe
;

86 (*
mmc_¥of_ˇŒback
)(*
	td©a
, 
	tul⁄g
 
	tid
, ul⁄g 
	tcou¡s
);

88 #ifde‡
MMC_PROFILING


90 
mmc_›_≥rf
 *
mmc_¥of_h™dÀ
(
id
);

91 
mmc_¥of_öô
(
id
, 
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
);

92 
mmc_¥of_°¨t
();

93 
mmc_¥of_°›
();

94 
mmc_¥of_cou¡
();

95 
mmc_¥of_upd©e
(
mmc_¥of_ˇŒback
 
cb
, 
ul⁄g
 
id
, *
d©a
);

96 
mmc_¥of_ªp‹t
(
mmc_›_ªp‹t
 *
Ωt
);

97 
mmc_¥of_dump
(
dev_id
);

99 
mmc_›_≥rf
 *
mmc_¥of_h™dÀ
(
id
);

100 
mmc_¥of_öô
(
id
, 
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
);

101 
mmc_¥of_°¨t
();

102 
mmc_¥of_°›
();

103 
mmc_¥of_cou¡
();

104 
mmc_¥of_upd©e
(
mmc_¥of_ˇŒback
 
cb
, 
ul⁄g
 
id
, *
d©a
);

105 
mmc_¥of_ªp‹t
(
mmc_›_ªp‹t
 *
Ωt
);

106 
mmc_¥of_dump
(
dev_id
);

109 
	#mmc_¥of_h™dÀ
(
i
Ë
NULL


	)

110 
	#mmc_¥of_öô
(
i
,
h
,
c
Ëdo{}0)

	)

111 
	#mmc_¥of_cou¡
(Ë0

	)

112 
	#mmc_¥of_°¨t
(Ëdo{}0)

	)

113 
	#mmc_¥of_°›
(Ëdo{}0)

	)

114 
	#mmc_¥of_upd©e
(
c
,
i
,
d
Ëdo{}0)

	)

115 
	#mmc_¥of_ªp‹t
(
Ωt
Ëdo{}0)

	)

116 
	#mmc_¥of_dump
(
id
Ëdo{}0)

	)

119 #ifde‡
MMC_TEST


121 
mmc_ã°
(
¨gc
, *
¨gv
[]);

123 
mmc_ã°
(
¨gc
, *
¨gv
[]);

126 
	#mmc_ã°
(
c
,
v
Ë0

	)

129 #ifde‡
__˝lu•lus


	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/msdc/msdc.c

36 
	~<comm⁄.h
>

37 
	~"msdc.h
"

38 
	~"msdc_cu°.h
"

39 
	~"utûs.h
"

40 
	~"mmc_c‹e.h
"

41 
	~"mmc_ã°.h
"

42 
	~"sdio.h
"

43 
	~"msg.h
"

44 
	~<asm/addr•a˚.h
>

49 
	#CMD_RETRIES
 (5)

	)

50 
	#CMD_TIMEOUT
 (100Ë

	)

52 
	#GPO_BASE
 (0xc100c000Ë

	)

54 
	#PERI_MSDC_SRCSEL
 (0xc100000c)

	)

55 
	#MSDC1_IRQ_SEL
 (1 << 9)

	)

57 
	#DEFAULT_DEBOUNCE
 (8Ë

	)

58 
	#DEFAULT_DTOC
 (40Ë

	)

59 
	#DEFAULT_WDOD
 (0Ë

	)

60 
	#DEFAULT_BSYDLY
 (8Ë

	)

62 
	#MAX_GPD_POOL_SZ
 (512)

	)

63 
	#MAX_BD_POOL_SZ
 (1024)

	)

64 
	#MAX_SG_POOL_SZ
 (
MAX_BD_POOL_SZ
)

	)

65 
	#MAX_DMA_TRAN_SIZE
 (
MAX_SG_POOL_SZ
*
MAX_SG_BUF_SZ
)

	)

67 #ifde‡
MMC_PROFILING


68 
	#MAX_DMA_CNT
 (32768)

	)

69 
	#MAX_SG_BUF_SZ
 (
MAX_DMA_CNT
Ë

	)

70 
	#MAX_BD_PER_GPD
 (
MAX_BD_POOL_SZ
Ë

	)

72 
	#MAX_DMA_CNT
 (32768)

	)

73 
	#MAX_SG_BUF_SZ
 (4096)

	)

74 
	#MAX_BD_PER_GPD
 (
MAX_BD_POOL_SZ
/(
MAX_GPD_POOL_SZ
-1)Ë

	)

77 #i‡
MAX_SG_BUF_SZ
 > 
MAX_DMA_CNT


83 
u32
 
	moff£t
;

88 
	m©å
[32];

93 
	mª£t
[32];

94 } 
	tªg_desc_t
;

97 
	mpio_bôs
;

98 
	m°ªam_°›
;

99 
	mautocmd
;

100 
dma_c⁄fig
 
	mcfg
;

101 
sˇâîli°
 
	msg
[
MAX_SG_POOL_SZ
];

102 
	mÆloc_gpd
;

103 
	mÆloc_bd
;

104 
	mdsm∂
;

105 
	mrsm∂
;

106 
gpd_t
 *
	ma˘ive_hód
;

107 
gpd_t
 *
	ma˘ive_èû
;

108 
gpd_t
 *
	mgpd_poﬁ
;

109 
msdc_bd_t
 *
	mbd_poﬁ
;

110 } 
	tmsdc_¥iv_t
;

112 
	gmsdc_r•
[] = {

124 
ªg_desc_t
 
	gmsdc_ªg_desc
[] = {

125 {
OFFSET_MSDC_IOCON
 , {"aaaaaaxxxxxxxxxxaaaaaaaaaaxxxxxx"}, {"000000xxxxxxxxxx0000000000xxxxxx"}},

126 {
OFFSET_MSDC_PS
 , {"arxxxxxxxxxxaaaarrrrrrrrrxxxxxxr"}, {"01xxxxxxxxxx0000111100001xxxxxx1"}},

127 {
OFFSET_MSDC_INT
 , {"ccxccccccccrcccccxxxxxxxxxxxxxxx"}, {"00x00000000000000xxxxxxxxxxxxxxx"}},

128 {
OFFSET_MSDC_INTEN
 , {"aaxaaaaaaaaaaaaaaxxxxxxxxxxxxxxx"}, {"00x00000000000000xxxxxxxxxxxxxxx"}},

129 {
OFFSET_MSDC_FIFOCS
 , {"rrrrrrrrxxxxxxxxrrrrrrrrxxxxxxxa"}, {"00000000xxxxxxxx00000000xxxxxxx0"}},

130 {
OFFSET_SDC_CFG
 , {"aaxxxxxxxxxxxxxxaaxaaaxxaaaaaaaa"}, {"00xxxxxxxxxxxxxx00x010xx00000000"}},

131 {
OFFSET_SDC_CMD
 , {"aaaaaaaaaaxaaaaaaaaaaaaaaaaaaaax"}, {"0000000000x00000000000000000000x"}},

132 {
OFFSET_SDC_ARG
 , {"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"}, {"00000000000000000000000000000000"}},

133 {
OFFSET_SDC_STS
 , {"rrxxxxxxxxxxxxxxxxxxxxxxxxxxxxxr"}, {"00xxxxxxxxxxxxxxxxxxxxxxxxxxxxx0"}},

134 {
OFFSET_SDC_RESP0
 , {"rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr"}, {"00000000000000000000000000000000"}},

135 {
OFFSET_SDC_RESP1
 , {"rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr"}, {"00000000000000000000000000000000"}},

136 {
OFFSET_SDC_RESP2
 , {"rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr"}, {"00000000000000000000000000000000"}},

137 {
OFFSET_SDC_RESP3
 , {"rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr"}, {"00000000000000000000000000000000"}},

138 {
OFFSET_SDC_BLK_NUM
 , {"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"}, {"10000000000000000000000000000000"}},

139 {
OFFSET_SDC_CSTS
 , {"cccccccccccccccccccccccccccccccc"}, {"00000000000000000000000000000000"}},

140 {
OFFSET_SDC_CSTS_EN
 , {"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"}, {"00000000000000000000000000000000"}},

141 {
OFFSET_SDC_DCRC_STS
 , {"rrrrrrrrrrrrxxxxxxxxxxxxxxxxxxxx"}, {"000000000000xxxxxxxxxxxxxxxxxxxx"}},

142 {
OFFSET_EMMC_CFG0
 , {"wwaaxxxxxxxxaaaaxxxxxxxxxxxxxxxx"}, {"0000xxxxxxxx0000xxxxxxxxxxxxxxxx"}},

143 {
OFFSET_EMMC_CFG1
 , {"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"}, {"01000000000000000000010000000000"}},

144 {
OFFSET_EMMC_STS
 , {"ccccrcrxxxxxxxxxxxxxxxxxxxxxxxxx"}, {"0000001xxxxxxxxxxxxxxxxxxxxxxxxx"}},

145 {
OFFSET_EMMC_IOCON
 , {"axxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"}, {"0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"}},

146 {
OFFSET_SDC_ACMD_RESP
 , {"rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr"}, {"00000000000000000000000000000000"}},

147 {
OFFSET_SDC_ACMD19_TRG
, {"aaaaxxxxxxxxxxxxxxxxxxxxxxxxxxxx"}, {"0000xxxxxxxxxxxxxxxxxxxxxxxxxxxx"}},

148 {
OFFSET_SDC_ACMD19_STS
, {"rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr"}, {"00000000000000000000000000000000"}},

149 {
OFFSET_MSDC_DMA_SA
 , {"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"}, {"00000000000000000000000000000000"}},

150 {
OFFSET_MSDC_DMA_CA
 , {"rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr"}, {"00000000000000000000000000000000"}},

151 {
OFFSET_MSDC_DMA_CTRL
 , {"wwwxxxxxaxaxaaaxaaaaaaaaaaaaaaaa"}, {"000xxxxx0x0x011x0000000000000000"}},

152 {
OFFSET_MSDC_DMA_CFG
 , {"raxxrrxxxxxxxxxxxxxxxxxxxxxxxxxx"}, {"00xx00xxxxxxxxxxxxxxxxxxxxxxxxxx"}},

153 {
OFFSET_MSDC_DBG_SEL
 , {"aaaaaaaaaaaaaaaaxxxxxxxxxxxxxxxx"}, {"0000000000000000xxxxxxxxxxxxxxxx"}},

154 {
OFFSET_MSDC_DBG_OUT
 , {"rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr"}, {"00000000000000000000000000000000"}},

155 {
OFFSET_MSDC_PATCH_BIT0
 , {"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"}, {"11110010000000000011110000000010"}},

156 {
OFFSET_MSDC_PATCH_BIT1
 , {"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"}, {"10010000000000000000000000000000"}},

162 {
OFFSET_MSDC_HW_DBG
 , {"aaaaaaaaaaaaaaxxaaaaaaaaaaaaaaax"},{"00000000000000xx000000000000000x"}},

163 {
OFFSET_MSDC_VERSION
 , {"rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr"},{"10010100100100001000100000000100"}},

164 {
OFFSET_MSDC_ECO_VER
 , {"rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr"},{"00000000000000000000000000000000"}},

166 {
OFFSET_MSDC_CFG
 , {"aaaaaarraaaaaaaaaaxxxxxxxxxxxxxx"}, {"000110010000000000xxxxxxxxxxxxxx"}},

167 {
OFFSET_MSDC_TXDATA
 , {"wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww"}, {"00000000000000000000000000000000"}},

172 #i‡
MSDC_DEBUG


173 
msdc_ªgs
 *
	gmsdc_ªg
[
MSDC_MAX_NUM
];

176 
msdc_¥iv_t
 
	gmsdc_¥iv
[
MSDC_MAX_NUM
];

177 
gpd_t
 
	gmsdc_gpd_poﬁ
[
MSDC_MAX_NUM
][
MAX_GPD_POOL_SZ
];

178 
msdc_bd_t
 
	gmsdc_bd_poﬁ
[
MSDC_MAX_NUM
][
MAX_BD_POOL_SZ
];

179 
	gmsdc_tu√_dbg
[
MSDC_MAX_NUM
] = {0, 0, 0, 0};

181 #i‡
MSDC_USE_IRQ


182 (*
	túq_h™dÀr_t
)();

183 c⁄° 
u32
 
msdc_úq_löe
[
MSDC_MAX_NUM
] = {
MSDC0_IRQ_ID
, 
MSDC1_IRQ_ID
, 
MSDC2_IRQ_ID
, 
MSDC3_IRQ_ID
};

184 *
	gmsdc_úq_d©a
[
MSDC_MAX_NUM
];

185 vﬁ©ûê
u32
 
	gmsdc_úq_°s
[
MSDC_MAX_NUM
];

186 
hw_úq_h™dÀr_t
 
	gsdio_úq_h™dÀr
[
MSDC_MAX_NUM
];

188 
	#DECLARE_MSDC_IRQ_HANDLER
(
x
) \

189 
msdc_úq_h™dÀr_
##
	`x
() \

191 
	`msdc_úq_h™dÀr
(
msdc_úq_d©a
[(
x
)]); \

192 }

	)

194 
	#REGISTER_MSDC_IRQ_HANDLER
(
id
, 
hndl
, 
d©a
) \

196 
msdc_úq_d©a
[(
id
)] = (*)(
d©a
); \

197 
	`IRQSísôivôy
(
msdc_úq_löe
[(
id
)], 
LEVEL_SENSITIVE
); \

198 
	`IRQPﬁ¨ôy
(
msdc_úq_löe
[(
id
)], 
LOW_LEVEL_TRIGGER
); \

199 
	`IRQ_Regi°î_LISR
(
msdc_úq_löe
[(
id
)], 
hndl
, 
NULL
); \

200 
	`IRQUnmask
(
msdc_úq_löe
[(
id
)]); \

201 } 0)

	)

203 
	#UNREGISTER_MSDC_IRQ_HANDLER
(
id
) \

205 
	`IRQMask
(
msdc_úq_löe
[(
id
)]); \

206 
msdc_úq_d©a
[(
id
)] = 
NULL
; \

207 
	`IRQ_Regi°î_LISR
(
msdc_úq_löe
[(
id
)], 
IRQ_DeÁu…_LISR
, 
NULL
); \

208 } 0)

	)

210 
	$msdc_ªgi°î_hwúq
(
mmc_ho°
 *
ho°
, 
hw_úq_h™dÀr_t
 
h™dÀr
)

212 
sdio_úq_h™dÀr
[
ho°
->
id
] = 
h™dÀr
;

213 
	}
}

214 
msdc_powî
(
mmc_ho°
 *
ho°
, 
u8
 
mode
);

216 
	$msdc_úq_h™dÀr
(*
d©a
)

218 
mmc_ho°
 *
ho°
 = (mmc_ho°*)
d©a
;

219 
u32
 
id
 = 
ho°
->id;

220 
u32
 
ba£
 = 
ho°
->base;

221 
u32
 
öt°s
;

222 
msdc_öt_ªg
 *
öt_ªg
 = (msdc_öt_ªg*)&
öt°s
;

224 
	`BUG_ON
(
ba£
 == 0);

227 
	`DißbÀIRQ
();

228 if(
ho°
->
ˇrd_dëe˘_Êag
 == 0)

229 
	`msdc_powî
(
ho°
,
MMC_POWER_ON
);

230 
öt°s
 = 
	`MSDC_READ32
(
MSDC_INT
);

231 
msdc_úq_°s
[
id
] |
öt°s
;

233 i‡(
öt°s
 & 
MSDC_INT_CDSC
) {

235 if(
ho°
->
ˇrd_dëe˘_Êag
 == 0){

236 
	`MSDC_SET_FIELD
(
PERI_MSDC_SRCSEL
,
MSDC1_IRQ_SEL
,0);

237 
	`IRQSísôivôy
(
msdc_úq_löe
[(
ho°
->
id
)], 
LEVEL_SENSITIVE
);

238 
ho°
->
ˇrd_dëe˘_Êag
 = 1;

240 
	`¥ötf
("\n[SD%d] C¨d %s\n", 
id
, 
	`msdc_ˇrd_avaû
(
ho°
) ? "Inserted" : "Removed");

243 i‡(
öt°s
 & 
MSDC_INT_SDIOIRQ
) {

245 
	`MSG
(
INT
, "[SD%d] SDIO i¡îru± <===\n", 
id
);

250 i‡(
sdio_úq_h™dÀr
[
id
]) {

251 
sdio_úq_h™dÀr
[
id
]();

254 
msdc_úq_°s
[
id
] &~
MSDC_INT_SDIOIRQ
;

258 i‡(
öt°s
 & (
MSDC_INT_CMDRDY
|
MSDC_INT_CMDTMO
|
MSDC_INT_RSPCRCERR
)) {

262 i‡(
öt°s
 & (
MSDC_INT_ACMDRDY
|
MSDC_INT_ACMDTMO
|
MSDC_INT_ACMDCRCERR
)) {

266 i‡(
öt°s
 & 
MSDC_INT_ACMD19_DONE
) {

270 i‡(
öt°s
 & 
MSDC_INT_XFER_COMPL
) {

274 i‡(
öt°s
 & (
MSDC_INT_DATCRCERR
|
MSDC_INT_DATTMO
)) {

278 i‡(
öt°s
 & 
MSDC_INT_DXFER_DONE
) {

282 i‡(
öt°s
 & 
MSDC_INT_DMAQ_EMPTY
) {

286 i‡(
öt°s
 & 
MSDC_INT_CSTA
) {

290 i‡(
öt°s
 & 
MSDC_INT_MMCIRQ
) {

294 
	`MSG
(
INT
, "[SD%d] IRQ_EVT(0x%x): MMCIRQ(%d) CDSC(%d), ACRDY(%d), ACTMO(%d), ACCRE(%d) AC19DN(%d)\n",

295 
id
,

296 
öt°s
,

297 
öt_ªg
->
mmcúq
,

298 
öt_ªg
->
cdsc
,

299 
öt_ªg
->
©ocmdrdy
,

300 
öt_ªg
->
©ocmdtmo
,

301 
öt_ªg
->
©ocmd¸c
,

302 
öt_ªg
->
©ocmd19d⁄e
);

303 
	`MSG
(
INT
, "[SD%d] IRQ_EVT(0x%x): SDIO(%d) CMDRDY(%d), CMDTMO(%d), RSPCRC(%d), CSTA(%d)\n",

304 
id
,

305 
öt°s
,

306 
öt_ªg
->
sdioúq
,

307 
öt_ªg
->
cmdrdy
,

308 
öt_ªg
->
cmdtmo
,

309 
öt_ªg
->
r•¸c
,

310 
öt_ªg
->
c°a
);

311 
	`MSG
(
INT
, "[SD%d] IRQ_EVT(0x%x): XFCMP(%d) DXDONE(%d), DATTMO(%d), DATCRC(%d), DMAEMP(%d)\n",

312 
id
,

313 
öt°s
,

314 
öt_ªg
->
x„rcomp
,

315 
öt_ªg
->
dx„rd⁄e
,

316 
öt_ªg
->
d©tmo
,

317 
öt_ªg
->
d©¸c
,

318 
öt_ªg
->
dmaqem±y
);

320 
	`MSDC_WRITE32
(
MSDC_INT
, 
öt°s
);

323 
	`E«bÀIRQ
();

324 
	}
}

326 
DECLARE_MSDC_IRQ_HANDLER
(0);

327 
DECLARE_MSDC_IRQ_HANDLER
(1);

328 
DECLARE_MSDC_IRQ_HANDLER
(2);

329 
DECLARE_MSDC_IRQ_HANDLER
(3);

334 
	$msdc_dump_ˇrd_°©us
(
u32
 
ˇrd_°©us
)

336 #i‡
MSDC_DEBUG


337 *
°©e
[] = {

355 i‡(
ˇrd_°©us
 & 
R1_OUT_OF_RANGE
)

356 
	`¥ötf
("\t[CARD_STATUS] Out of Range\n");

357 i‡(
ˇrd_°©us
 & 
R1_ADDRESS_ERROR
)

358 
	`¥ötf
("\t[CARD_STATUS] Address Error\n");

359 i‡(
ˇrd_°©us
 & 
R1_BLOCK_LEN_ERROR
)

360 
	`¥ötf
("\t[CARD_STATUS] Block Len Error\n");

361 i‡(
ˇrd_°©us
 & 
R1_ERASE_SEQ_ERROR
)

362 
	`¥ötf
("\t[CARD_STATUS] Erase Seq Error\n");

363 i‡(
ˇrd_°©us
 & 
R1_ERASE_PARAM
)

364 
	`¥ötf
("\t[CARD_STATUS] Erase Param\n");

365 i‡(
ˇrd_°©us
 & 
R1_WP_VIOLATION
)

366 
	`¥ötf
("\t[CARD_STATUS] WP Violation\n");

367 i‡(
ˇrd_°©us
 & 
R1_CARD_IS_LOCKED
)

368 
	`¥ötf
("\t[CARD_STATUS] Card is Locked\n");

369 i‡(
ˇrd_°©us
 & 
R1_LOCK_UNLOCK_FAILED
)

370 
	`¥ötf
("\t[CARD_STATUS] Lock/Unlock Failed\n");

371 i‡(
ˇrd_°©us
 & 
R1_COM_CRC_ERROR
)

372 
	`¥ötf
("\t[CARD_STATUS] Command CRC Error\n");

373 i‡(
ˇrd_°©us
 & 
R1_ILLEGAL_COMMAND
)

374 
	`¥ötf
("\t[CARD_STATUS] Illegal Command\n");

375 i‡(
ˇrd_°©us
 & 
R1_CARD_ECC_FAILED
)

376 
	`¥ötf
("\t[CARD_STATUS] Card ECC Failed\n");

377 i‡(
ˇrd_°©us
 & 
R1_CC_ERROR
)

378 
	`¥ötf
("\t[CARD_STATUS] CC Error\n");

379 i‡(
ˇrd_°©us
 & 
R1_ERROR
)

380 
	`¥ötf
("\t[CARD_STATUS] Error\n");

381 i‡(
ˇrd_°©us
 & 
R1_UNDERRUN
)

382 
	`¥ötf
("\t[CARD_STATUS] Underrun\n");

383 i‡(
ˇrd_°©us
 & 
R1_OVERRUN
)

384 
	`¥ötf
("\t[CARD_STATUS] Overrun\n");

385 i‡(
ˇrd_°©us
 & 
R1_CID_CSD_OVERWRITE
)

386 
	`¥ötf
("\t[CARD_STATUS] CID/CSD Overwrite\n");

387 i‡(
ˇrd_°©us
 & 
R1_WP_ERASE_SKIP
)

388 
	`¥ötf
("\t[CARD_STATUS] WP Eraser Skip\n");

389 i‡(
ˇrd_°©us
 & 
R1_CARD_ECC_DISABLED
)

390 
	`¥ötf
("\t[CARD_STATUS] Card ECC Disabled\n");

391 i‡(
ˇrd_°©us
 & 
R1_ERASE_RESET
)

392 
	`¥ötf
("\t[CARD_STATUS] Erase Reset\n");

393 i‡(
ˇrd_°©us
 & 
R1_READY_FOR_DATA
)

394 
	`¥ötf
("\t[CARD_STATUS] Ready for Data\n");

395 i‡(
ˇrd_°©us
 & 
R1_SWITCH_ERROR
)

396 
	`¥ötf
("\t[CARD_STATUS] SwitchÉrror\n");

397 i‡(
ˇrd_°©us
 & 
R1_URGENT_BKOPS
)

398 
	`¥ötf
("\t[CARD_STATUS] Urgent background operations\n");

399 i‡(
ˇrd_°©us
 & 
R1_APP_CMD
)

400 
	`¥ötf
("\t[CARD_STATUS] App Command\n");

402 
	`¥ötf
("\t[CARD_STATUS] '%s' State\n",

403 
°©e
[
	`R1_CURRENT_STATE
(
ˇrd_°©us
)]);

405 
	}
}

407 
	$msdc_dump_o¸_ªg
(
u32
 
ª•
)

409 #i‡
MSDC_DEBUG


410 i‡(
ª•
 & (1 << 7))

411 
	`¥ötf
("\t[OCR] Low Voltage Range\n");

412 i‡(
ª•
 & (1 << 15))

413 
	`¥ötf
("\t[OCR] 2.7-2.8 volt\n");

414 i‡(
ª•
 & (1 << 16))

415 
	`¥ötf
("\t[OCR] 2.8-2.9 volt\n");

416 i‡(
ª•
 & (1 << 17))

417 
	`¥ötf
("\t[OCR] 2.9-3.0 volt\n");

418 i‡(
ª•
 & (1 << 18))

419 
	`¥ötf
("\t[OCR] 3.0-3.1 volt\n");

420 i‡(
ª•
 & (1 << 19))

421 
	`¥ötf
("\t[OCR] 3.1-3.2 volt\n");

422 i‡(
ª•
 & (1 << 20))

423 
	`¥ötf
("\t[OCR] 3.2-3.3 volt\n");

424 i‡(
ª•
 & (1 << 21))

425 
	`¥ötf
("\t[OCR] 3.3-3.4 volt\n");

426 i‡(
ª•
 & (1 << 22))

427 
	`¥ötf
("\t[OCR] 3.4-3.5 volt\n");

428 i‡(
ª•
 & (1 << 23))

429 
	`¥ötf
("\t[OCR] 3.5-3.6 volt\n");

430 i‡(
ª•
 & (1 << 24))

431 
	`¥ötf
("\t[OCR] SwitchingÅo 1.8V Accepted (S18A)\n");

432 i‡(
ª•
 & (1 << 30))

433 
	`¥ötf
("\t[OCR] Card Capacity Status (CCS)\n");

434 i‡(
ª•
 & (1UL << 31))

435 
	`¥ötf
("\t[OCR] Card Power Up Status (Idle)\n");

437 
	`¥ötf
("\t[OCR] Card Power Up Status (Busy)\n");

439 
	}
}

441 
	$msdc_dump_io_ª•
(
u32
 
ª•
)

443 #i‡
MSDC_DEBUG


444 
u32
 
Êags
 = (
ª•
 >> 8) & 0xFF;

445 *
°©e
[] = {"DIS", "CMD", "TRN", "RFU"};

447 i‡(
Êags
 & (1 << 7))

448 
	`¥ötf
("\t[IO] COM_CRC_ERR\n");

449 i‡(
Êags
 & (1 << 6))

450 
	`¥ötf
("\t[IO] Illgal command\n");

451 i‡(
Êags
 & (1 << 3))

452 
	`¥ötf
("\t[IO] Error\n");

453 i‡(
Êags
 & (1 << 2))

454 
	`¥ötf
("\t[IO] RFU\n");

455 i‡(
Êags
 & (1 << 1))

456 
	`¥ötf
("\t[IO] FunctionÇumberÉrror\n");

457 i‡(
Êags
 & (1 << 0))

458 
	`¥ötf
("\t[IO] Out ofÑange\n");

460 
	`¥ötf
("[IO] Sèã: %s, D©a:0x%x\n", 
°©e
[(
ª•
 >> 12) & 0x3],Ñesp & 0xFF);

462 
	}
}

464 
	$msdc_dump_rˇ_ª•
(
u32
 
ª•
)

466 #i‡
MSDC_DEBUG


467 
u32
 
ˇrd_°©us
 = (((
ª•
 >> 15) & 0x1) << 23) |

468 (((
ª•
 >> 14) & 0x1) << 22) |

469 (((
ª•
 >> 13) & 0x1) << 19) |

470 (
ª•
 & 0x1fff);

472 
	`¥ötf
("\t[RCA] 0x%x\n", 
ª•
 >> 16);

473 
	`msdc_dump_ˇrd_°©us
(
ˇrd_°©us
);

475 
	}
}

477 #i‡
MSDC_DEBUG


478 
	$msdc_dump_dma_desc
(
mmc_ho°
 *
ho°
)

480 
msdc_¥iv_t
 *
¥iv
 = (msdc_¥iv_t*)
ho°
->priv;

481 
i
;

482 
u32
 *
±r
;

484 i‡(
MSG_EVT_MASK
 & 
MSG_EVT_DMA
) {

485 
i
 = 0; i < 
¥iv
->
Æloc_gpd
; i++) {

486 
±r
 = (
u32
*)&
¥iv
->
gpd_poﬁ
[
i
];

487 
	`¥ötf
("[SD%d] GD[%d](0x%xh): %xh %xh %xh %xh %xh %xh %xh\n",

488 
ho°
->
id
, 
i
, (
u32
)
±r
, *ptr, *(ptr+1), *(ptr+2), *(ptr+3), *(ptr+4),

489 *(
±r
+5), *(ptr+6));

492 
i
 = 0; i < 
¥iv
->
Æloc_bd
; i++) {

493 
±r
 = (
u32
*)&
¥iv
->
bd_poﬁ
[
i
];

494 
	`¥ötf
("[SD%d] BD[%d](0x%xh): %xh %xh %xh %xh\n",

495 
ho°
->
id
, 
i
, (
u32
)
±r
, *ptr, *(ptr+1), *(ptr+2), *(ptr+3));

498 
	}
}

501 
	$msdc_dump_ªgi°î
(
mmc_ho°
 *
ho°
)

503 
u32
 
ba£
 = 
ho°
->base;

505 
	`¥ötf
("[SD%d] MSDC_CFG : %xh\n", 
ho°
->
id
, *(
u32
*)(
ba£
 + 0x0));

506 
	`¥ötf
("[SD%d] MSDC_INT : %xh\n", 
ho°
->
id
, *(
u32
*)(
ba£
 + 0xc));

507 
	`¥ötf
("[SD%d] MSDC_FIFOCS: %xh\n", 
ho°
->
id
, *(
u32
*)(
ba£
 + 0x14));

508 
	`¥ötf
("[SD%d] SDC_CFG : %xh\n", 
ho°
->
id
, *(
u32
*)(
ba£
 + 0x30));

509 
	`¥ötf
("[SD%d] SDC_STS : %xh\n", 
ho°
->
id
, *(
u32
*)(
ba£
 + 0x3c));

510 
	}
}

512 
	$msdc_ªg_ã°
(
id
)

515 
u32
 
baddr
[] = {
MSDC0_BASE
};

516 
u32
 
ba£
 = 
baddr
[
id
];

517 
u32
 
i
, 
j
, 
k
;

518 
v
;

521 
i
 = 0; i < 
	`ARRAY_SIZE
(
msdc_ªg_desc
); i++) {

522 
j
 = 0; j < 32; j++) {

523 i‡(('w' =(
msdc_ªg_desc
[
i
].
©å
[
j
])) ||

524 ('x' =(
msdc_ªg_desc
[
i
].
©å
[
j
])))

526 
v
 = (
	`MSDC_READ32
(
ba£
 + 
msdc_ªg_desc
[
i
].
off£t
Ë>> 
j
) & 0x1;

527 i‡(
v
 !(
msdc_ªg_desc
[
i
].
ª£t
[
j
] - '0')) {

528 
	`¥ötf
("[SD%d] Invalid Reset Value in 0x%x[%d]=%d != %d\n",

529 
id
, 
ba£
 + 
msdc_ªg_desc
[
i
].
off£t
, 
j
, 
v
,

530 
msdc_ªg_desc
[
i
].
ª£t
[
j
] - '0');

531  
MMC_ERR_FAILED
;

537 
i
 = 0; i < 
	`ARRAY_SIZE
(
msdc_ªg_desc
); i++) {

538 
j
 = 0; j < 32; j++) {

539 i‡('r' !(
msdc_ªg_desc
[
i
].
©å
[
j
]))

541 i‡(0 =(
msdc_ªg_desc
[
i
].
ª£t
[
j
] - '0'))

542 
	`MSDC_SET_BIT32
(
ba£
 + 
msdc_ªg_desc
[
i
].
off£t
, 0x1 << 
j
);

544 
	`MSDC_CLR_BIT32
(
ba£
 + 
msdc_ªg_desc
[
i
].
off£t
, 0x1 << 
j
);

546 
v
 = (
	`MSDC_READ32
(
ba£
 + 
msdc_ªg_desc
[
i
].
off£t
Ë>> 
j
) & 0x1;

547 i‡(
v
 !(
msdc_ªg_desc
[
i
].
ª£t
[
j
] - '0')) {

548 
	`¥ötf
("[SD%d] Read Only Reg Modified in 0x%x[%d]=%d != %d\n",

549 
id
, 
ba£
 + 
msdc_ªg_desc
[
i
].
off£t
, 
j
, 
v
,

550 
msdc_ªg_desc
[
i
].
ª£t
[
j
] - '0');

551  
MMC_ERR_FAILED
;

557 
i
 = 0; i < 
	`ARRAY_SIZE
(
msdc_ªg_desc
); i++) {

558 
j
 = 0; j < 32; j++) {

559 i‡('a' !(
msdc_ªg_desc
[
i
].
©å
[
j
]))

563 
	`MSDC_SET_BIT32
(
ba£
 + 
msdc_ªg_desc
[
i
].
off£t
, 0x1 << 
j
);

564 
v
 = (
	`MSDC_READ32
(
ba£
 + 
msdc_ªg_desc
[
i
].
off£t
Ë>> 
j
) & 0x1;

566 i‡(
v
 != 1) {

567 
	`¥ötf
("[SD%d] Write 1 Reg Failed in 0x%x[%d]=%d != %d\n",

568 
id
, 
ba£
 + 
msdc_ªg_desc
[
i
].
off£t
, 
j
, 
v
,

569 
msdc_ªg_desc
[
i
].
ª£t
[
j
] - '0');

570  
MMC_ERR_FAILED
;

574 i‡(((
u32
)
MSDC_CFG
 =(
ba£
 + 
msdc_ªg_desc
[
i
].
off£t
)) &&

575 (
j
 >= 8 && j < 18)) {

576 !(
	`MSDC_READ32
(
MSDC_CFG
Ë& 
MSDC_CFG_CKSTB
));

580 
k
 = 0; k < 32; k++) {

581 i‡(
k
 =
j
)

583 i‡(('w' =(
msdc_ªg_desc
[
i
].
©å
[
k
])) ||

584 ('x' =(
msdc_ªg_desc
[
i
].
©å
[
k
])))

586 
v
 = (
	`MSDC_READ32
(
ba£
 + 
msdc_ªg_desc
[
i
].
off£t
Ë>> 
k
) & 0x1;

587 i‡(
v
 !(
msdc_ªg_desc
[
i
].
ª£t
[
k
] - '0')) {

588 
	`¥ötf
("[SD%d] Affected by Write 1Åo 0x%x[%d]ánd [%d]=%d != %d\n",

589 
id
, 
ba£
 + 
msdc_ªg_desc
[
i
].
off£t
, 
j
, 
k
, 
v
,

590 
msdc_ªg_desc
[
i
].
ª£t
[
k
] - '0');

591  
MMC_ERR_FAILED
;

596 
	`MSDC_CLR_BIT32
(
ba£
 + 
msdc_ªg_desc
[
i
].
off£t
, 0x1 << 
j
);

597 
v
 = (
	`MSDC_READ32
(
ba£
 + 
msdc_ªg_desc
[
i
].
off£t
Ë>> 
j
) & 0x1;

599 i‡(
v
 != 0) {

600 
	`¥ötf
("[SD%d] Write 0 Reg Failed in 0x%x[%d]=%d != %d\n",

601 
id
, 
ba£
 + 
msdc_ªg_desc
[
i
].
off£t
, 
j
, 
v
,

602 
msdc_ªg_desc
[
i
].
ª£t
[
j
] - '0');

603  
MMC_ERR_FAILED
;

607 i‡(((
u32
)
MSDC_CFG
 =(
ba£
 + 
msdc_ªg_desc
[
i
].
off£t
)) &&

608 (
j
 >= 8 && j < 18)) {

609 !(
	`MSDC_READ32
(
MSDC_CFG
Ë& 
MSDC_CFG_CKSTB
));

613 
k
 = 0; k < 32; k++) {

614 i‡(
k
 =
j
)

616 i‡(('w' =(
msdc_ªg_desc
[
i
].
©å
[
k
])) ||

617 ('x' =(
msdc_ªg_desc
[
i
].
©å
[
k
])))

619 
v
 = (
	`MSDC_READ32
(
ba£
 + 
msdc_ªg_desc
[
i
].
off£t
Ë>> 
k
) & 0x1;

620 i‡(
v
 !(
msdc_ªg_desc
[
i
].
ª£t
[
k
] - '0')) {

621 
	`¥ötf
("[SD%d] Affected by Write 0Åo 0x%x[%d]ánd [%d]=%d != %d\n",

622 
id
, 
ba£
 + 
msdc_ªg_desc
[
i
].
off£t
, 
j
, 
k
, 
v
,

623 
msdc_ªg_desc
[
i
].
ª£t
[
k
] - '0');

624  
MMC_ERR_FAILED
;

629 i‡((
msdc_ªg_desc
[
i
].
ª£t
[
j
] - '0') == 1)

630 
	`MSDC_SET_BIT32
(
ba£
 + 
msdc_ªg_desc
[
i
].
off£t
, 0x1 << 
j
);

632 
	`MSDC_CLR_BIT32
(
ba£
 + 
msdc_ªg_desc
[
i
].
off£t
, 0x1 << 
j
);

635  
MMC_ERR_NONE
;

636 
	}
}

638 
	$msdc_Êush_membuf
(*
buf
, 
u32
 
Àn
)

641 
	}
}

643 
u8
 
	$msdc_ˇl_checksum
(
u8
 *
buf
, 
u32
 
Àn
)

645 
u32
 
i
, 
sum
 = 0;

646 
i
 = 0; i < 
Àn
; i++) {

647 
sum
 +
buf
[
i
];

649  0xFF - (
u8
)
sum
;

650 
	}
}

653 
gpd_t
 *
	$msdc_Æloc_gpd
(
mmc_ho°
 *
ho°
, 
num
)

655 
msdc_¥iv_t
 *
¥iv
 = (msdc_¥iv_t*)
ho°
->priv;

656 
gpd_t
 *
gpd
, *
±r
, *
¥ev
;

658 i‡(
¥iv
->
Æloc_gpd
 + 
num
 + 1 > 
MAX_GPD_POOL_SZ
 ||Çum == 0)

659  
NULL
;

661 
gpd
 = 
¥iv
->
gpd_poﬁ
 +Öriv->
Æloc_gpd
;

662 
¥iv
->
Æloc_gpd
 +(
num
 + 1);

664 
	`mem£t
(
gpd
, 0, (
gpd_t
Ë* (
num
 + 1));

666 
±r
 = 
gpd
 + 
num
 - 1;

667 
±r
->
√xt
 = (*)(
gpd
 + 
num
);

670 i‡(
±r
 !
gpd
) {

672 
¥ev
 = 
±r
 - 1;

673 
¥ev
->
√xt
 = 
±r
;

674 
±r
 = 
¥ev
;

675 } 
±r
 !
gpd
);

678  
gpd
;

679 
	}
}

682 
msdc_bd_t
 *
	$msdc_Æloc_bd
(
mmc_ho°
 *
ho°
, 
num
)

684 
msdc_¥iv_t
 *
¥iv
 = (msdc_¥iv_t*)
ho°
->priv;

685 
msdc_bd_t
 *
bd
, *
±r
, *
¥ev
;

687 i‡(
¥iv
->
Æloc_bd
 + 
num
 > 
MAX_BD_POOL_SZ
 ||Çum == 0)

688  
NULL
;

690 
bd
 = 
¥iv
->
bd_poﬁ
 +Öriv->
Æloc_bd
;

691 
¥iv
->
Æloc_bd
 +
num
;

693 
	`mem£t
(
bd
, 0, (
msdc_bd_t
Ë* 
num
);

695 
±r
 = 
bd
 + 
num
 - 1;

696 
±r
->
eﬁ
 = 1;

697 
±r
->
√xt
 = 0;

700 i‡(
±r
 !
bd
) {

702 
¥ev
 = 
±r
 - 1;

703 
¥ev
->
√xt
 = 
±r
;

704 
¥ev
->
eﬁ
 = 0;

705 
±r
 = 
¥ev
;

706 } 
±r
 !
bd
);

709  
bd
;

710 
	}
}

713 
	$msdc_queue_bd
(
mmc_ho°
 *
ho°
, 
gpd_t
 *
gpd
, 
msdc_bd_t
 *
bd
)

715 
msdc_¥iv_t
 *
¥iv
 = (msdc_¥iv_t*)
ho°
->priv;

717 
	`BUG_ON
(
gpd
->
±r
);

719 
gpd
->
hwo
 = 1;

720 
gpd
->
bdp
 = 1;

721 
gpd
->
±r
 = (*)
bd
;

723 i‡(
¥iv
->
cfg
.
Êags
 & 
DMA_FLAG_EN_CHKSUM
 == 0)

727 
bd
) {

728 
bd
->
chksum
 = 
	`msdc_ˇl_checksum
((
u8
*)bd, 16);

729 
bd
 = bd->
√xt
;

731 
	}
}

734 
	$msdc_queue_buf
(
mmc_ho°
 *
ho°
, 
gpd_t
 *
gpd
, 
u8
 *
buf
)

736 
	`BUG_ON
(
gpd
->
±r
);

738 
gpd
->
hwo
 = 1;

739 
gpd
->
bdp
 = 0;

740 
gpd
->
±r
 = (*)
buf
;

741 
	}
}

744 
	$msdc_add_gpd
(
mmc_ho°
 *
ho°
, 
gpd_t
 *
gpd
, 
num
)

746 
msdc_¥iv_t
 *
¥iv
 = (msdc_¥iv_t*)
ho°
->priv;

748 i‡(
num
 > 0) {

749 i‡(!
¥iv
->
a˘ive_hód
) {

750 
¥iv
->
a˘ive_hód
 = 
gpd
;

752 
¥iv
->
a˘ive_èû
->
√xt
 = 
gpd
;

754 
¥iv
->
a˘ive_èû
 = 
gpd
 + 
num
 - 1;

756 i‡(
¥iv
->
cfg
.
Êags
 & 
DMA_FLAG_EN_CHKSUM
 == 0)

760 
gpd
) {

761 
gpd
->
chksum
 = 
	`msdc_ˇl_checksum
((
u8
 *)gpd, 16);

762 
gpd
 = gpd->
√xt
;

765 
	}
}

767 
	$msdc_ª£t_gpd
(
mmc_ho°
 *
ho°
)

769 
msdc_¥iv_t
 *
¥iv
 = (msdc_¥iv_t*)
ho°
->priv;

771 
¥iv
->
Æloc_bd
 = 0;

772 
¥iv
->
Æloc_gpd
 = 0;

773 
¥iv
->
a˘ive_hód
 = 
NULL
;

774 
¥iv
->
a˘ive_èû
 = 
NULL
;

775 
	}
}

777 #i‡
MSDC_USE_LEVEL_SHIFT


778 
	#GPO_SDXC_SEL
 (0x1 << 0)

	)

779 
	#GPO_CARD_PWR
 (0x1 << 1)

	)

780 
	#GPO_LVL_PWR_18V
 (0x1 << 2)

	)

781 
	#GPO_LVL_PWR_33V
 (0x1 << 3)

	)

782 
u32
 
	ggpo_vÆ
 = 
GPO_SDXC_SEL
;

784 
	$msdc_˛r_gpo
(
u32
 
mask
)

786 
gpo_vÆ
 &~
mask
;

787 
	`MSDC_WRITE32
(
GPO_BASE
, 
gpo_vÆ
);

788 
	}
}

790 
	$msdc_£t_gpo
(
u32
 
bôs
)

792 
gpo_vÆ
 |
bôs
;

793 
	`MSDC_SET_BIT32
(
GPO_BASE
, 
gpo_vÆ
);

794 
	}
}

797 
	$msdc_£t_ho°_Àvñ_pwr
(
Àvñ
)

800 
	`msdc_˛r_gpo
((0x3<<2));

802 i‡(
Àvñ
)

803 
	`msdc_£t_gpo
(
GPO_LVL_PWR_18V
);

805 
	`msdc_£t_gpo
(
GPO_LVL_PWR_33V
);

806 
	}
}

808 
	$msdc_£t_ˇrd_pwr
(
⁄
)

810 i‡(
⁄
)

811 
	`msdc_£t_gpo
(
GPO_CARD_PWR
);

813 
	`msdc_˛r_gpo
(
GPO_CARD_PWR
);

814 
	`mdñay
(10);

815 
	}
}

817 
	$msdc_£t_ho°_Àvñ_pwr
(
Àvñ
)

819 
ªt
;

822 i‡(
Àvñ
) {

823 
ªt
 = 
	`pmic_c⁄fig_öãrÁ˚
(0xA7,0x2,0x7,4);

825 
ªt
 = 
	`pmic_c⁄fig_öãrÁ˚
(0xA7,0x7,0x7,4);

827 i‡(
ªt
 != 0) {

828 
	`¥ötf
("PMIC: Set MSDC Vol Level Fail\n");

830 
	`mdñay
(100);

832 
	}
}

833 
	$msdc_£t_ˇrd_pwr
(
⁄
)

835 
ªt
;

838 
ªt
 = 
	`pmic_c⁄fig_öãrÁ˚
(0xAB,0x7,0x7,4);

840 
	`mdñay
(50);

842 i‡(
ªt
 == 0) {

843 if(
⁄
) {

844 
ªt
 = 
	`pmic_c⁄fig_öãrÁ˚
(0xAB,0x1,0x1,0);

846 
ªt
 = 
	`pmic_c⁄fig_öãrÁ˚
(0xAB,0x0,0x1,0);

849 i‡(
ªt
 != 0) {

850 
	`¥ötf
("PMIC: Set MSDC Card Power Fail\n");

853 
	}
}

854 
	$msdc_£t_ho°_pwr
(
⁄
)

856 
ªt
;

859 
ªt
 = 
	`pmic_c⁄fig_öãrÁ˚
(0xA7,0x7,0x7,4);

861 i‡(
ªt
 == 0) {

862 if(
⁄
) {

863 
ªt
 = 
	`pmic_c⁄fig_öãrÁ˚
(0xA7,0x1,0x1,0);

865 
ªt
 = 
	`pmic_c⁄fig_öãrÁ˚
(0xA7,0x0,0x1,0);

869 i‡(
ªt
 != 0) {

870 
	`¥ötf
("PMIC: Set MSDC Host Power Fail\n");

873 
	`mdñay
(50);

875 
	}
}

878 
	$msdc_£t_sm∂
(
mmc_ho°
 *
ho°
, 
u8
 
dsm∂
, u8 
rsm∂
)

880 
u32
 
ba£
 = 
ho°
->base;

881 
msdc_¥iv_t
 *
¥iv
 = (msdc_¥iv_t*)
ho°
->priv;

884 
	`MSDC_SET_FIELD
(
MSDC_IOCON
, 
MSDC_IOCON_RSPL
, 
rsm∂
);

885 
	`MSDC_SET_FIELD
(
MSDC_IOCON
, 
MSDC_IOCON_DSPL
, 
dsm∂
);

888 !(
	`MSDC_READ32
(
MSDC_CFG
Ë& 
MSDC_CFG_CKSTB
));

890 
¥iv
->
rsm∂
 =Ñsmpl;

891 
¥iv
->
dsm∂
 = dsmpl;

892 
	}
}

894 
u32
 
	$msdc_ˇl_timeout
(
mmc_ho°
 *
ho°
, 
u32
 
ns
, u32 
˛ks
, u32 
˛kunô
)

896 
u32
 
timeout
, 
˛k_ns
;

898 
˛k_ns
 = 1000000000UL / 
ho°
->
s˛k
;

899 
timeout
 = 
ns
 / 
˛k_ns
 + 
˛ks
;

900 
timeout
 =Åimeouà/ 
˛kunô
;

901  
timeout
;

902 
	}
}

904 
	$msdc_£t_timeout
(
mmc_ho°
 *
ho°
, 
u32
 
ns
, u32 
˛ks
)

906 
u32
 
ba£
 = 
ho°
->base;

907 
u32
 
timeout
, 
˛k_ns
;

909 
˛k_ns
 = 1000000000UL / 
ho°
->
s˛k
;

910 
timeout
 = 
ns
 / 
˛k_ns
 + 
˛ks
;

911 
timeout
 =Åimeout >> 16;

912 
timeout
 =Åimeout > 1 ?Åimeout - 1 : 0;

913 
timeout
 =Åimeout > 255 ? 255 :Åimeout;

915 
	`MSDC_SET_FIELD
(
SDC_CFG
, 
SDC_CFG_DTOC
, 
timeout
);

917 
	`MSG
(
OPS
, "[SD%d] SetÑead dataÅimeout: %dns %dclks -> %d x 65536 cycles\n",

918 
ho°
->
id
, 
ns
, 
˛ks
, 
timeout
 + 1);

919 
	}
}

921 
	$msdc_£t_blkÀn
(
mmc_ho°
 *
ho°
, 
u32
 
blkÀn
)

923 
u32
 
ba£
 = 
ho°
->base;

924 
msdc_¥iv_t
 *
¥iv
 = (msdc_¥iv_t*)
ho°
->priv;

926 
ho°
->
blkÀn
 = blklen;

927 
¥iv
->
cfg
.
blkÀn
 = blklen;

928 
	`MSDC_CLR_FIFO
();

929 
	}
}

931 
	$msdc_£t_blknum
(
mmc_ho°
 *
ho°
, 
u32
 
blknum
)

933 
u32
 
ba£
 = 
ho°
->base;

935 
	`MSDC_WRITE32
(
SDC_BLK_NUM
, 
blknum
);

936 
	}
}

938 
	$msdc_£t_dmode
(
mmc_ho°
 *
ho°
, 
mode
)

940 
msdc_¥iv_t
 *
¥iv
 = (msdc_¥iv_t*)
ho°
->priv;

942 
¥iv
->
cfg
.
mode
 = mode;

944 i‡(
mode
 =
MSDC_MODE_PIO
) {

945 
ho°
->
blk_ªad
 = 
msdc_pio_bªad
;

946 
ho°
->
blk_wrôe
 = 
msdc_pio_bwrôe
;

947 } i‡(
mode
 =
MSDC_MODE_MMC_STREAM
) {

948 
ho°
->
blk_ªad
 = 
msdc_°ªam_bªad
;

949 
ho°
->
blk_wrôe
 = 
msdc_°ªam_bwrôe
;

951 
ho°
->
blk_ªad
 = 
msdc_dma_bªad
;

952 
ho°
->
blk_wrôe
 = 
msdc_dma_bwrôe
;

954 
	}
}

956 
	$msdc_£t_pio_bôs
(
mmc_ho°
 *
ho°
, 
bôs
)

958 
msdc_¥iv_t
 *
¥iv
 = (msdc_¥iv_t*)
ho°
->priv;

960 
¥iv
->
pio_bôs
 = 
bôs
;

961 
	}
}

963 
	$msdc_£t_dma
(
mmc_ho°
 *
ho°
, 
u8
 
bur°sz
, 
u32
 
Êags
)

965 
msdc_¥iv_t
 *
¥iv
 = (msdc_¥iv_t*)
ho°
->priv;

966 
dma_c⁄fig
 *
cfg
 = &
¥iv
->cfg;

968 
cfg
->
bur°sz
 = burstsz;

969 
cfg
->
Êags
 = flags;

970 
	}
}

972 
	$msdc_£t_autocmd
(
mmc_ho°
 *
ho°
, 
cmd
, 
⁄
)

974 
msdc_¥iv_t
 *
¥iv
 = (msdc_¥iv_t*)
ho°
->priv;

976 i‡(
⁄
) {

977 
¥iv
->
autocmd
 |
cmd
;

979 
¥iv
->
autocmd
 &~
cmd
;

981 
	}
}

983 
	$msdc_˛r_fifo
(
mmc_ho°
 *
ho°
)

985 
u32
 
ba£
 = 
ho°
->base;

986 
	`MSDC_CLR_FIFO
();

987 
	}
}

989 
	$msdc_ab‹t
(
mmc_ho°
 *
ho°
)

991 
u32
 
ba£
 = 
ho°
->base;

993 
	`¥ötf
("[SD%d] Abort: MSDC_FIFOCS=%xh MSDC_PS=%xh SDC_STS=%xh\n",

994 
ho°
->
id
, 
	`MSDC_READ32
(
MSDC_FIFOCS
), MSDC_READ32(
MSDC_PS
), MSDC_READ32(
SDC_STS
));

997 
	`MSDC_RESET
();

1000 
	`MSDC_CLR_FIFO
();

1003 i‡(
	`MSDC_TXFIFOCNT
(Ë!0 || 
	`MSDC_RXFIFOCNT
() != 0) {

1004 
	`¥ötf
("[SD%d] Abort: TXFIFO(%d), RXFIFO(%d) != 0\n",

1005 
ho°
->
id
, 
	`MSDC_TXFIFOCNT
(), 
	`MSDC_RXFIFOCNT
());

1009 
	`MSDC_WRITE32
(
MSDC_INT
, 
	`MSDC_READ32
(MSDC_INT));

1010 
	}
}

1012 
	$msdc_ab‹t_h™dÀr
(
mmc_ho°
 *
ho°
, 
ab‹t_ˇrd
)

1014 
u32
 
ba£
 = 
ho°
->base;

1015 
mmc_comm™d
 
°›
;

1017 
	`msdc_ab‹t
(
ho°
);

1019 i‡(
ab‹t_ˇrd
) {

1020 
°›
.
›code
 = 
MMC_CMD_STOP_TRANSMISSION
;

1021 
°›
.
r•typ
 = 
RESP_R1B
;

1022 
°›
.
¨g
 = 0;

1023 
°›
.
ªåõs
 = 
CMD_RETRIES
;

1024 
°›
.
timeout
 = 
CMD_TIMEOUT
;

1025 
	`msdc_£nd_cmd
(
ho°
, &
°›
);

1026 
	`msdc_waô_r•
(
ho°
, &
°›
);

1028 
	}
}

1030 
u32
 
	$msdc_öå_waô
(
mmc_ho°
 *
ho°
, 
u32
 
öås
)

1032 
u32
 
ba£
 = 
ho°
->base;

1033 
u32
 
°s
;

1036 
	`WARN_ON
((
	`MSDC_READ32
(
MSDC_INTEN
Ë& 
öås
) != intrs);

1038 #i‡
MSDC_USE_IRQ


1040 
	`DißbÀIRQ
();

1041 i‡(
msdc_úq_°s
[
ho°
->
id
] & 
öås
) {

1042 
°s
 = 
msdc_úq_°s
[
ho°
->
id
];

1043 
msdc_úq_°s
[
ho°
->
id
] &~
öås
;

1044 
	`E«bÀIRQ
();

1047 
	`E«bÀIRQ
();

1052 
u32
 
tmo
 = 3000;

1053 
	`WAIT_COND
(((
°s
 = 
	`MSDC_READ32
(
MSDC_INT
)Ë& 
öås
), 
tmo
,Åmo);

1055 i‡(
tmo
 == 0) {

1056 
	`¥ötf
("[SD%d] ECO WARNNING ==> Waô INTÅimeout\n", 
ho°
->
id
);

1057 
	`MSDC_RESET
();

1061 ((
°s
 = 
	`MSDC_READ32
(
MSDC_INT
)Ë& 
öås
) == 0);

1064 
	`MSG
(
INT
, "[SD%d] INT(0x%x)\n", 
ho°
->
id
, 
°s
);

1065 #i‡!
MSDC_USE_IRQ


1066 
	`MSDC_WRITE32
(
MSDC_INT
, (
°s
 & 
öås
));

1068 i‡(~
öås
 & 
°s
) {

1069 
	`MSG
(
WRN
, "[SD%d]<CHECKME> Unexpected INT(0x%x)\n",

1070 
ho°
->
id
, ~
öås
 & 
°s
);

1072  
°s
;

1073 
	}
}

1075 
	$msdc_öå_unmask
(
mmc_ho°
 *
ho°
, 
u32
 
bôs
)

1077 
u32
 
ba£
 = 
ho°
->base;

1078 
u32
 
vÆ
;

1080 
vÆ
 = 
	`MSDC_READ32
(
MSDC_INTEN
);

1081 
vÆ
 |
bôs
;

1082 
	`MSDC_WRITE32
(
MSDC_INTEN
, 
vÆ
);

1083 
	}
}

1085 
	$msdc_öå_mask
(
mmc_ho°
 *
ho°
, 
u32
 
bôs
)

1087 
u32
 
ba£
 = 
ho°
->base;

1088 
u32
 
vÆ
;

1090 
vÆ
 = 
	`MSDC_READ32
(
MSDC_INTEN
);

1091 
vÆ
 &~
bôs
;

1092 
	`MSDC_WRITE32
(
MSDC_INTEN
, 
vÆ
);

1093 
	}
}

1095 
	$msdc_öå_sdio
(
mmc_ho°
 *
ho°
, 
íabÀ
)

1097 
u32
 
ba£
 = 
ho°
->base;

1099 
	`MSG
(
INT
, "[SD%d] %†SDIO INT\n", 
ho°
->
id
, 
íabÀ
 ? "Enable" : "Disable");

1101 i‡(
íabÀ
) {

1102 
	`MSDC_SET_BIT32
(
SDC_CFG
, 
SDC_CFG_SDIOIDE
|
SDC_CFG_SDIOINTWKUP
);

1103 
	`msdc_öå_unmask
(
ho°
, 
MSDC_INT_SDIOIRQ
);

1105 
	`msdc_öå_mask
(
ho°
, 
MSDC_INT_SDIOIRQ
);

1106 
	`MSDC_CLR_BIT32
(
SDC_CFG
, 
SDC_CFG_SDIOIDE
|
SDC_CFG_SDIOINTWKUP
);

1108 
	}
}

1110 
	$msdc_öå_sdio_g≠
(
mmc_ho°
 *
ho°
, 
íabÀ
)

1112 
u32
 
ba£
 = 
ho°
->base;

1114 
	`MSG
(
INT
, "[SD%d] %†SDIO GAP\n", 
ho°
->
id
, 
íabÀ
 ? "Enable" : "Disable");

1116 i‡(
íabÀ
) {

1117 
	`MSDC_SET_BIT32
(
SDC_CFG
, 
SDC_CFG_INTATGAP
);

1119 
	`MSDC_CLR_BIT32
(
SDC_CFG
, 
SDC_CFG_INTATGAP
);

1121 
	}
}

1123 
	$msdc_£nd_cmd
(
mmc_ho°
 *
ho°
, 
mmc_comm™d
 *
cmd
)

1125 
msdc_¥iv_t
 *
¥iv
 = (msdc_¥iv_t*)
ho°
->priv;

1126 
u32
 
ba£
 = 
ho°
->base;

1127 
u32
 
›code
 = 
cmd
->opcode;

1128 
u32
 
r•typ
 = 
cmd
->rsptyp;

1129 
u32
 
øwcmd
;

1130 
u32
 
timeout
 = 
cmd
->timeout;

1131 
u32
 
îr‹
 = 
MMC_ERR_NONE
;

1137 
øwcmd
 = (
›code
 & ~(
SD_CMD_BIT
 | 
SD_CMD_APP_BIT
)) |

1138 
msdc_r•
[
r•typ
] << 7 | 
ho°
->
blkÀn
 << 16;

1140 i‡(
›code
 =
MMC_CMD_WRITE_MULTIPLE_BLOCK
) {

1141 
øwcmd
 |= ((2 << 11) | (1 << 13));

1142 i‡(
¥iv
->
autocmd
 & 
MSDC_AUTOCMD12
)

1143 
øwcmd
 |= (1 << 28);

1144 i‡(
¥iv
->
autocmd
 & 
MSDC_AUTOCMD23
)

1145 
øwcmd
 |= (2 << 28);

1146 } i‡(
›code
 =
MMC_CMD_WRITE_BLOCK
) {

1147 
øwcmd
 |= ((1 << 11) | (1 << 13));

1148 } i‡(
›code
 =
MMC_CMD_READ_MULTIPLE_BLOCK
) {

1149 
øwcmd
 |= (2 << 11);

1150 i‡(
¥iv
->
autocmd
 & 
MSDC_AUTOCMD12
)

1151 
øwcmd
 |= (1 << 28);

1152 i‡(
¥iv
->
autocmd
 & 
MSDC_AUTOCMD23
)

1153 
øwcmd
 |= (2 << 28);

1154 } i‡(
›code
 =
MMC_CMD_READ_SINGLE_BLOCK
 ||

1155 
›code
 =
SD_ACMD_SEND_SCR
 ||

1156 
›code
 =
SD_CMD_SWITCH
 ||

1157 
›code
 =
MMC_CMD_SEND_EXT_CSD
) {

1158 
øwcmd
 |= (1 << 11);

1159 } i‡(
›code
 =
SD_IO_RW_EXTENDED
) {

1160 i‡(
cmd
->
¨g
 & 0x80000000)

1161 
øwcmd
 |= (1 << 13);

1162 i‡((
cmd
->
¨g
 & 0x08000000) && ((cmd->arg & 0x1FF) > 1))

1163 
øwcmd
 |= (2 << 11);

1165 
øwcmd
 |= (1 << 11);

1166 } i‡(
›code
 =
MMC_CMD_STOP_TRANSMISSION
) {

1167 
øwcmd
 |= (1 << 14);

1168 
øwcmd
 &= ~(0x0FFF << 16);

1169 } i‡(
›code
 =
SD_IO_RW_DIRECT
) {

1170 i‡((
cmd
->
¨g
 & 0x80000000) && ((cmd->arg >> 9) & 0x1FFFF))

1171 
øwcmd
 |= (1 << 14);

1172 } i‡(
›code
 =
SD_CMD_VOL_SWITCH
) {

1173 
øwcmd
 |= (1 << 30);

1174 } i‡(
›code
 =
SD_CMD_SEND_TUNING_BLOCK
) {

1175 
øwcmd
 |= (1 << 11);

1176 i‡(
¥iv
->
autocmd
 & 
MSDC_AUTOCMD19
)

1177 
øwcmd
 |= (3 << 28);

1178 } i‡(
›code
 =
MMC_CMD_GO_IRQ_STATE
) {

1179 
øwcmd
 |= (1 << 15);

1180 } i‡(
›code
 =
MMC_CMD_WRITE_DAT_UNTIL_STOP
) {

1181 
øwcmd
 |= ((1<< 13) | (3 << 11));

1182 } i‡(
›code
 =
MMC_CMD_READ_DAT_UNTIL_STOP
) {

1183 
øwcmd
 |= (3 << 11);

1186 
	`MSG
(
CMD
, "[SD%d] CMD(%d): ARG(0x%x), RAW(0x%x), RSP(%d)\n",

1187 
ho°
->
id
, (
›code
 & ~(
SD_CMD_BIT
 | 
SD_CMD_APP_BIT
)), 
cmd
->
¨g
, 
øwcmd
, 
r•typ
);

1189 i‡(!
¥iv
->
°ªam_°›
) {

1191 i‡(
›code
 =
MMC_CMD_SEND_STATUS
) {

1192 i‡(
	`SDC_IS_CMD_BUSY
()) {

1193 
	`WAIT_COND
(!
	`SDC_IS_CMD_BUSY
(), 
cmd
->
timeout
,Åimeout);

1194 i‡(
timeout
 == 0) {

1195 
îr‹
 = 
MMC_ERR_TIMEOUT
;

1196 
	`¥ötf
("[SD%d] CMD(%d): SDC_IS_CMD_BUSYÅimeout\n",

1197 
ho°
->
id
, (
›code
 & ~(
SD_CMD_BIT
 | 
SD_CMD_APP_BIT
)));

1198 
íd
;

1202 i‡(
	`SDC_IS_BUSY
()) {

1203 
	`WAIT_COND
(!
	`SDC_IS_BUSY
(), 1000, 
timeout
);

1204 i‡(
timeout
 == 0) {

1205 
îr‹
 = 
MMC_ERR_TIMEOUT
;

1206 
	`¥ötf
("[SD%d] CMD(%d): SDC_IS_BUSYÅimeout\n",

1207 
ho°
->
id
, (
›code
 & ~(
SD_CMD_BIT
 | 
SD_CMD_APP_BIT
)));

1208 
íd
;

1214 
	`SDC_SEND_CMD
(
øwcmd
, 
cmd
->
¨g
);

1216 
íd
:

1217 
cmd
->
îr‹
 =Érror;

1219  
îr‹
;

1220 
	}
}

1222 
	$msdc_waô_r•
(
mmc_ho°
 *
ho°
, 
mmc_comm™d
 *
cmd
)

1224 
u32
 
ba£
 = 
ho°
->base;

1225 
u32
 
r•typ
 = 
cmd
->rsptyp;

1226 
u32
 
°©us
;

1227 
u32
 
›code
 = (
cmd
->›codê& ~(
SD_CMD_BIT
 | 
SD_CMD_APP_BIT
));

1228 
u32
 
îr‹
 = 
MMC_ERR_NONE
;

1229 
u32
 
wöts
 = 
MSDC_INT_CMDTMO
 | 
MSDC_INT_CMDRDY
 | 
MSDC_INT_RSPCRCERR
 |

1230 
MSDC_INT_ACMDRDY
 | 
MSDC_INT_ACMDCRCERR
 | 
MSDC_INT_ACMDTMO
 |

1231 
MSDC_INT_ACMD19_DONE
;

1233 i‡(
cmd
->
›code
 =
MMC_CMD_GO_IRQ_STATE
)

1234 
wöts
 |
MSDC_INT_MMCIRQ
;

1236 
°©us
 = 
	`msdc_öå_waô
(
ho°
, 
wöts
);

1238 i‡(
°©us
 == 0) {

1239 
îr‹
 = 
MMC_ERR_TIMEOUT
;

1240 
íd
;

1243 i‡((
°©us
 & 
MSDC_INT_CMDRDY
Ë|| (°©u†& 
MSDC_INT_ACMDRDY
) ||

1244 (
°©us
 & 
MSDC_INT_ACMD19_DONE
)) {

1245 
r•typ
) {

1246 
RESP_NONE
:

1247 
	`MSG
(
RSP
, "[SD%d] CMD(%d): RSP(%d)\n", 
ho°
->
id
, 
›code
, 
r•typ
);

1249 
RESP_R2
:

1251 
u32
 *
ª•
 = &
cmd
->resp[0];

1252 *
ª•
++ = 
	`MSDC_READ32
(
SDC_RESP3
);

1253 *
ª•
++ = 
	`MSDC_READ32
(
SDC_RESP2
);

1254 *
ª•
++ = 
	`MSDC_READ32
(
SDC_RESP1
);

1255 *
ª•
++ = 
	`MSDC_READ32
(
SDC_RESP0
);

1256 
	`MSG
(
RSP
, "[SD%d] CMD(%d): RSP(%d) = 0x%x 0x%x 0x%x 0x%x\n",

1257 
ho°
->
id
, 
›code
, 
cmd
->
r•typ
, cmd->
ª•
[0], cmd->resp[1], cmd->resp[2], cmd->resp[3]);

1261 i‡((
°©us
 & 
MSDC_INT_ACMDRDY
Ë|| (°©u†& 
MSDC_INT_ACMD19_DONE
))

1262 
cmd
->
ª•
[0] = 
	`MSDC_READ32
(
SDC_ACMD_RESP
);

1264 
cmd
->
ª•
[0] = 
	`MSDC_READ32
(
SDC_RESP0
);

1265 
	`MSG
(
RSP
, "[SD%d] CMD(%d): RSP(%dË0x%x AUTO(%d)\n", 
ho°
->
id
, 
›code
,

1266 
cmd
->
r•typ
, cmd->
ª•
[0],

1267 ((
°©us
 & 
MSDC_INT_ACMDRDY
Ë|| (°©u†& 
MSDC_INT_ACMD19_DONE
)) ? 1 : 0);

1270 } i‡((
°©us
 & 
MSDC_INT_RSPCRCERR
Ë|| (°©u†& 
MSDC_INT_ACMDCRCERR
)) {

1271 
îr‹
 = 
MMC_ERR_BADCRC
;

1272 
	`¥ötf
("[SD%d] CMD(%d): RSP(%d) ERR(BADCRC)\n",

1273 
ho°
->
id
, 
›code
, 
cmd
->
r•typ
);

1274 } i‡((
°©us
 & 
MSDC_INT_CMDTMO
Ë|| (°©u†& 
MSDC_INT_ACMDTMO
)) {

1275 
îr‹
 = 
MMC_ERR_TIMEOUT
;

1276 
	`MSG
(
RSP
, "[SD%d] CMD(%d): RSP(%d) ERR(CMDTO) AUTO(%d)\n",

1277 
ho°
->
id
, 
›code
, 
cmd
->
r•typ
, 
°©us
 & 
MSDC_INT_ACMDTMO
 ? 1: 0);

1279 
îr‹
 = 
MMC_ERR_INVALID
;

1280 
	`¥ötf
("[SD%d] CMD(%d): RSP(%d) ERR(INVALID), Status:%x\n",

1281 
ho°
->
id
, 
›code
, 
cmd
->
r•typ
, 
°©us
);

1284 
íd
:

1286 i‡(
r•typ
 =
RESP_R1B
) {

1287 (
	`MSDC_READ32
(
MSDC_PS
) & 0x10000) != 0x10000);

1290 #i‡
MSDC_DEBUG


1291 i‡((
îr‹
 =
MMC_ERR_NONE
Ë&& (
MSG_EVT_MASK
 & 
MSG_EVT_RSP
)){

1292 
cmd
->
r•typ
) {

1293 
RESP_R1
:

1294 
RESP_R1B
:

1295 
	`msdc_dump_ˇrd_°©us
(
cmd
->
ª•
[0]);

1297 
RESP_R3
:

1298 
	`msdc_dump_o¸_ªg
(
cmd
->
ª•
[0]);

1300 
RESP_R5
:

1301 
	`msdc_dump_io_ª•
(
cmd
->
ª•
[0]);

1303 
RESP_R6
:

1304 
	`msdc_dump_rˇ_ª•
(
cmd
->
ª•
[0]);

1310 
cmd
->
îr‹
 =Érror;

1312  
îr‹
;

1313 
	}
}

1316 
	$msdc_cmd
(
mmc_ho°
 *
ho°
, 
mmc_comm™d
 *
cmd
)

1318 
îr
;

1320 
îr
 = 
	`msdc_£nd_cmd
(
ho°
, 
cmd
);

1321 i‡(
îr
 !
MMC_ERR_NONE
)

1322  
îr
;

1324 
îr
 = 
	`msdc_waô_r•
(
ho°
, 
cmd
);

1326 i‡(
îr
 =
MMC_ERR_BADCRC
) {

1327 
u32
 
ba£
 = 
ho°
->base;

1328 
u32
 
tmp
 = 
	`MSDC_READ32
(
SDC_CMD
);

1331 i‡(
tmp
 & 0x1800) {

1332 
	`msdc_ab‹t_h™dÀr
(
ho°
, 1);

1334 
îr
 = 
	`msdc_tu√_cmdr•
(
ho°
, 
cmd
);

1336  
îr
;

1337 
	}
}

1339 
	$msdc_brk_cmd
(
mmc_ho°
 *
ho°
)

1341 
u32
 
ba£
 = 
ho°
->base;

1343 
	`SDC_SEND_CMD
(0x000000e8, 0);

1344 
	}
}

1346 
	$msdc_sg_öô
(
sˇâîli°
 *
sg
, *
buf
, 
u32
 
buÊí
)

1348 
i
 = 
MAX_SG_POOL_SZ
;

1349 *
±r
 = (*)
buf
;

1351 
	`BUG_ON
(
buÊí
 > 
MAX_SG_POOL_SZ
 * 
MAX_SG_BUF_SZ
);

1353 
i
 > 0) {

1354 i‡(
buÊí
 > 
MAX_SG_BUF_SZ
) {

1355 
sg
->
addr
 = (
u32
)
±r
;

1356 
sg
->
Àn
 = 
MAX_SG_BUF_SZ
;

1357 
buÊí
 -
MAX_SG_BUF_SZ
;

1358 
±r
 +
MAX_SG_BUF_SZ
;

1359 
sg
++; 
i
--;

1361 
sg
->
addr
 = (
u32
)
±r
;

1362 
sg
->
Àn
 = 
buÊí
;

1363 
i
--;

1368 
	`msdc_Êush_membuf
(
buf
, 
buÊí
);

1370  
MAX_SG_POOL_SZ
 - 
i
;

1371 
	}
}

1373 
	$msdc_dma_öô
(
mmc_ho°
 *
ho°
, 
dma_c⁄fig
 *
cfg
, *
buf
, 
u32
 
buÊí
)

1375 
u32
 
ba£
 = 
ho°
->base;

1377 
cfg
->
x„rsz
 = 
buÊí
;

1379 i‡(
cfg
->
mode
 =
MSDC_MODE_DMA_BASIC
) {

1380 
cfg
->
sgÀn
 = 1;

1381 
cfg
->
sg
[0].
addr
 = (
u32
)
buf
;

1382 
cfg
->
sg
[0].
Àn
 = 
buÊí
;

1383 
	`msdc_Êush_membuf
(
buf
, 
buÊí
);

1385 
cfg
->
sgÀn
 = 
	`msdc_sg_öô
(cfg->
sg
, 
buf
, 
buÊí
);

1388 
	`MSDC_CLR_FIFO
();

1389 
	`MSDC_DMA_ON
();

1390 
	}
}

1392 
	$msdc_dma_cmd
(
mmc_ho°
 *
ho°
, 
dma_c⁄fig
 *
cfg
, 
mmc_comm™d
 *
cmd
)

1394 
msdc_¥iv_t
 *
¥iv
 = (msdc_¥iv_t*)
ho°
->priv;

1395 
u32
 
›code
 = 
cmd
->opcode;

1396 
u32
 
r•typ
 = 
cmd
->rsptyp;

1397 
u32
 
øwcmd
;

1399 
øwcmd
 = (
›code
 & ~(
SD_CMD_BIT
 | 
SD_CMD_APP_BIT
)) |

1400 
r•typ
 << 7 | 
ho°
->
blkÀn
 << 16;

1402 i‡(
›code
 =
MMC_CMD_WRITE_MULTIPLE_BLOCK
) {

1403 
øwcmd
 |= ((2 << 11) | (1 << 13));

1404 i‡(
¥iv
->
autocmd
 & 
MSDC_AUTOCMD12
)

1405 
øwcmd
 |= (1 << 28);

1406 i‡(
¥iv
->
autocmd
 & 
MSDC_AUTOCMD23
)

1407 
øwcmd
 |= (2 << 28);

1408 } i‡(
›code
 =
MMC_CMD_WRITE_BLOCK
) {

1409 
øwcmd
 |= ((1 << 11) | (1 << 13));

1410 } i‡(
›code
 =
MMC_CMD_READ_MULTIPLE_BLOCK
) {

1411 
øwcmd
 |= (2 << 11);

1412 i‡(
¥iv
->
autocmd
 & 
MSDC_AUTOCMD12
)

1413 
øwcmd
 |= (1 << 28);

1414 i‡(
¥iv
->
autocmd
 & 
MSDC_AUTOCMD23
)

1415 
øwcmd
 |= (2 << 28);

1416 } i‡(
›code
 =
MMC_CMD_READ_SINGLE_BLOCK
) {

1417 
øwcmd
 |= (1 << 11);

1418 } i‡(
›code
 =
SD_IO_RW_EXTENDED
) {

1419 i‡(
cmd
->
¨g
 & 0x80000000)

1420 
øwcmd
 |= (1 << 13);

1421 i‡((
cmd
->
¨g
 & 0x08000000) && ((cmd->arg & 0x1FF) > 1))

1422 
øwcmd
 |= (2 << 11);

1424 
øwcmd
 |= (1 << 11);

1425 } i‡(
›code
 =
SD_IO_RW_DIRECT
) {

1426 i‡((
cmd
->
¨g
 & 0x80000000) && ((cmd->arg >> 9) & 0x1FFFF))

1427 
øwcmd
 |= (1 << 14);

1432 
	`MSG
(
DMA
, "[SD%d] DMA CMD(%d), AUTOCMD12(%d), AUTOCMD23(%d)\n",

1433 
ho°
->
id
, (
›code
 & ~(
SD_CMD_BIT
 | 
SD_CMD_APP_BIT
)),

1434 (
¥iv
->
autocmd
 & 
MSDC_AUTOCMD12
) ? 1 : 0,

1435 (
¥iv
->
autocmd
 & 
MSDC_AUTOCMD23
) ? 1 : 0);

1437 
cfg
->
cmd
 = 
øwcmd
;

1438 
cfg
->
¨g
 = 
cmd
->arg;

1441 
	}
}

1443 
	$msdc_dma_c⁄fig
(
mmc_ho°
 *
ho°
, 
dma_c⁄fig
 *
cfg
)

1445 
u32
 
ba£
 = 
ho°
->base;

1446 
u32
 
sgÀn
 = 
cfg
->sglen;

1447 
u32
 
i
, 
j
, 
num
, 
bdÀn
, 
¨g
, 
x„rsz
;

1448 
u8
 
blk∑d
, 
dw∑d
, 
chksum
;

1449 
sˇâîli°
 *
sg
 = 
cfg
->sg;

1450 
gpd_t
 *
gpd
;

1451 
msdc_bd_t
 *
bd
;

1453 
cfg
->
mode
) {

1454 
MSDC_MODE_DMA_BASIC
:

1455 
	`BUG_ON
(
cfg
->
x„rsz
 > 
MAX_DMA_CNT
);

1456 
	`BUG_ON
(
cfg
->
sgÀn
 != 1);

1457 
	`MSDC_WRITE32
(
MSDC_DMA_SA
, 
sg
->
addr
);

1458 
	`MSDC_SET_FIELD
(
MSDC_DMA_CTRL
, 
MSDC_DMA_CTRL_LASTBUF
, 1);

1459 #i‡
	`deföed
 (
MT7621_FPGA_BOARD
Ë|| deföed (
MT7621_ASIC_BOARD
Ë|| deföed (
MT7628_FPGA_BOARD
Ë|| deföed (
MT7628_ASIC_BOARD
)

1460 
	`MSDC_WRITE32
(
RALINK_MSDC_BASE
+0xa8, 
sg
->
Àn
);

1462 
	`MSDC_SET_FIELD
(
MSDC_DMA_CTRL
, 
MSDC_DMA_CTRL_XFERSZ
, 
sg
->
Àn
);

1464 
	`MSDC_SET_FIELD
(
MSDC_DMA_CTRL
, 
MSDC_DMA_CTRL_BRUSTSZ
, 
cfg
->
bur°sz
);

1465 
	`MSDC_SET_FIELD
(
MSDC_DMA_CTRL
, 
MSDC_DMA_CTRL_MODE
, 0);

1467 
MSDC_MODE_DMA_DESC
:

1468 
blk∑d
 = (
cfg
->
Êags
 & 
DMA_FLAG_PAD_BLOCK
) ? 1 : 0;

1469 
dw∑d
 = (
cfg
->
Êags
 & 
DMA_FLAG_PAD_DWORD
) ? 1 : 0;

1470 
chksum
 = (
cfg
->
Êags
 & 
DMA_FLAG_EN_CHKSUM
) ? 1 : 0;

1474 
num
 = (
sgÀn
 + 
MAX_BD_PER_GPD
 - 1) / MAX_BD_PER_GPD;

1475 
gpd
 = 
	`msdc_Æloc_gpd
(
ho°
, 
num
);

1476 
i
 = 0; i < 
num
; i++) {

1477 
gpd
[
i
].
öå
 = 0;

1478 i‡(
sgÀn
 > 
MAX_BD_PER_GPD
) {

1479 
bdÀn
 = 
MAX_BD_PER_GPD
;

1480 
sgÀn
 -
MAX_BD_PER_GPD
;

1482 
bdÀn
 = 
sgÀn
;

1483 
sgÀn
 = 0;

1485 
bd
 = 
	`msdc_Æloc_bd
(
ho°
, 
bdÀn
);

1486 
j
 = 0; j < 
bdÀn
; j++) {

1487 
	`MSDC_INIT_BD
(&
bd
[
j
], 
blk∑d
, 
dw∑d
, 
sg
->
addr
, sg->
Àn
);

1488 
sg
++;

1490 
	`msdc_queue_bd
(
ho°
, &
gpd
[
i
], 
bd
);

1491 
	`msdc_Êush_membuf
(
bd
, 
bdÀn
 * (
msdc_bd_t
));

1493 
	`msdc_add_gpd
(
ho°
, 
gpd
, 
num
);

1494 #i‡
MSDC_DEBUG


1495 
	`msdc_dump_dma_desc
(
ho°
);

1497 
	`msdc_Êush_membuf
(
gpd
, 
num
 * (
gpd_t
));

1498 
	`MSDC_WRITE32
(
MSDC_DMA_SA
, (
u32
)&
gpd
[0]);

1499 
	`MSDC_SET_FIELD
(
MSDC_DMA_CFG
, 
MSDC_DMA_CFG_DECSEN
, 
chksum
);

1500 
	`MSDC_SET_FIELD
(
MSDC_DMA_CTRL
, 
MSDC_DMA_CTRL_BRUSTSZ
, 
cfg
->
bur°sz
);

1501 
	`MSDC_SET_FIELD
(
MSDC_DMA_CTRL
, 
MSDC_DMA_CTRL_MODE
, 1);

1504 
	`BUG_ON
(
sgÀn
 > 
MAX_BD_POOL_SZ
);

1506 
gpd
 = 
	`msdc_Æloc_gpd
(
ho°
, 1);

1507 
gpd
->
öå
 = 0;

1509 
bd
 = 
	`msdc_Æloc_bd
(
ho°
, 
sgÀn
);

1510 
j
 = 0; j < 
sgÀn
; j++) {

1511 
	`MSDC_INIT_BD
(&
bd
[
j
], 
blk∑d
, 
dw∑d
, 
sg
->
addr
, sg->
Àn
);

1512 
sg
++;

1514 
	`msdc_queue_bd
(
ho°
, &
gpd
[0], 
bd
);

1515 
	`msdc_Êush_membuf
(
bd
, 
sgÀn
 * (
msdc_bd_t
));

1517 
	`msdc_add_gpd
(
ho°
, 
gpd
, 1);

1518 #i‡
MSDC_DEBUG


1519 
	`msdc_dump_dma_desc
(
ho°
);

1521 
	`msdc_Êush_membuf
(
gpd
, (1 + 1Ë* (
gpd_t
));

1522 
	`MSDC_WRITE32
(
MSDC_DMA_SA
, (
u32
)&
gpd
[0]);

1523 
	`MSDC_SET_FIELD
(
MSDC_DMA_CFG
, 
MSDC_DMA_CFG_DECSEN
, 
chksum
);

1524 
	`MSDC_SET_FIELD
(
MSDC_DMA_CTRL
, 
MSDC_DMA_CTRL_BRUSTSZ
, 
cfg
->
bur°sz
);

1525 
	`MSDC_SET_FIELD
(
MSDC_DMA_CTRL
, 
MSDC_DMA_CTRL_MODE
, 1);

1529 
MSDC_MODE_DMA_ENHANCED
:

1530 
¨g
 = 
cfg
->arg;

1531 
blk∑d
 = (
cfg
->
Êags
 & 
DMA_FLAG_PAD_BLOCK
) ? 1 : 0;

1532 
dw∑d
 = (
cfg
->
Êags
 & 
DMA_FLAG_PAD_DWORD
) ? 1 : 0;

1533 
chksum
 = (
cfg
->
Êags
 & 
DMA_FLAG_EN_CHKSUM
) ? 1 : 0;

1536 
num
 = (
sgÀn
 + 
MAX_BD_PER_GPD
 - 1) / MAX_BD_PER_GPD;

1537 
gpd
 = 
	`msdc_Æloc_gpd
(
ho°
, 
num
);

1538 
i
 = 0; i < 
num
; i++) {

1539 
x„rsz
 = 0;

1540 i‡(
sgÀn
 > 
MAX_BD_PER_GPD
) {

1541 
bdÀn
 = 
MAX_BD_PER_GPD
;

1542 
sgÀn
 -
MAX_BD_PER_GPD
;

1544 
bdÀn
 = 
sgÀn
;

1545 
sgÀn
 = 0;

1547 
bd
 = 
	`msdc_Æloc_bd
(
ho°
, 
bdÀn
);

1548 
j
 = 0; j < 
bdÀn
; j++) {

1549 
x„rsz
 +
sg
->
Àn
;

1550 
	`MSDC_INIT_BD
(&
bd
[
j
], 
blk∑d
, 
dw∑d
, 
sg
->
addr
, sg->
Àn
);

1551 
sg
++;

1560 
gpd
[
i
].
öå
 = (ò=
num
 - 1) ? 0 : 1;

1561 
gpd
[
i
].
cmd
 = 
cfg
->cmd;

1562 
gpd
[
i
].
blknum
 = 
x„rsz
 / 
cfg
->
blkÀn
;

1563 
gpd
[
i
].
¨g
 =árg;

1564 
gpd
[
i
].
exéí
 = 0xC;

1566 
¨g
 +
x„rsz
;

1568 
	`msdc_queue_bd
(
ho°
, &
gpd
[
i
], 
bd
);

1569 
	`msdc_Êush_membuf
(
bd
, 
bdÀn
 * (
msdc_bd_t
));

1571 
	`msdc_add_gpd
(
ho°
, 
gpd
, 
num
);

1572 #i‡
MSDC_DEBUG


1573 
	`msdc_dump_dma_desc
(
ho°
);

1575 
	`msdc_Êush_membuf
(
gpd
, (
num
 + 1Ë* (
gpd_t
));

1576 
	`MSDC_WRITE32
(
MSDC_DMA_SA
, (
u32
)&
gpd
[0]);

1577 
	`MSDC_SET_FIELD
(
MSDC_DMA_CFG
, 
MSDC_DMA_CFG_DECSEN
, 
chksum
);

1578 
	`MSDC_SET_FIELD
(
MSDC_DMA_CTRL
, 
MSDC_DMA_CTRL_BRUSTSZ
, 
cfg
->
bur°sz
);

1579 
	`MSDC_SET_FIELD
(
MSDC_DMA_CTRL
, 
MSDC_DMA_CTRL_MODE
, 1);

1584 
	`MSG
(
DMA
, "[SD%d] DMA_SA = 0x%x\n", 
ho°
->
id
, 
	`MSDC_READ32
(
MSDC_DMA_SA
));

1585 
	`MSG
(
DMA
, "[SD%d] DMA_CA = 0x%x\n", 
ho°
->
id
, 
	`MSDC_READ32
(
MSDC_DMA_CA
));

1586 
	`MSG
(
DMA
, "[SD%d] DMA_CTRL = 0x%x\n", 
ho°
->
id
, 
	`MSDC_READ32
(
MSDC_DMA_CTRL
));

1587 
	`MSG
(
DMA
, "[SD%d] DMA_CFG = 0x%x\n", 
ho°
->
id
, 
	`MSDC_READ32
(
MSDC_DMA_CFG
));

1590 
	}
}

1592 
	$msdc_dma_ªsume
(
mmc_ho°
 *
ho°
)

1594 
u32
 
ba£
 = 
ho°
->base;

1596 
	`MSDC_SET_FIELD
(
MSDC_DMA_CTRL
, 
MSDC_DMA_CTRL_RESUME
, 1);

1598 
	`MSG
(
DMA
, "[SD%d] DMAÑesume\n", 
ho°
->
id
);

1599 
	}
}

1601 
	$msdc_dma_°¨t
(
mmc_ho°
 *
ho°
)

1603 
u32
 
ba£
 = 
ho°
->base;

1605 
	`MSDC_SET_FIELD
(
MSDC_DMA_CTRL
, 
MSDC_DMA_CTRL_START
, 1);

1607 
	`MSG
(
DMA
, "[SD%d] DMA sèπ\n", 
ho°
->
id
);

1608 
	}
}

1610 
	$msdc_dma_°›
(
mmc_ho°
 *
ho°
)

1612 
u32
 
ba£
 = 
ho°
->base;

1614 
	`MSDC_SET_FIELD
(
MSDC_DMA_CTRL
, 
MSDC_DMA_CTRL_STOP
, 1);

1615 (
	`MSDC_READ32
(
MSDC_DMA_CFG
Ë& 
MSDC_DMA_CFG_STS
) != 0);

1616 
	`MSDC_DMA_OFF
();

1618 
	`MSG
(
DMA
, "[SD%d] DMA St›≥d\n", 
ho°
->
id
);

1620 
	`msdc_ª£t_gpd
(
ho°
);

1621 
	}
}

1623 
	$msdc_dma_waô_d⁄e
(
mmc_ho°
 *
ho°
, 
u32
 
timeout
)

1625 
u32
 
ba£
 = 
ho°
->base;

1626 
u32
 
tmo
 = 
timeout
;

1627 
msdc_¥iv_t
 *
¥iv
 = (msdc_¥iv_t*)
ho°
->priv;

1628 
dma_c⁄fig
 *
cfg
 = &
¥iv
->cfg;

1629 
u32
 
°©us
;

1630 
u32
 
îr‹
 = 
MMC_ERR_NONE
;

1631 
u32
 
wöts
 = 
MSDC_INT_XFER_COMPL
 | 
MSDC_INT_DATTMO
 | 
MSDC_INT_DATCRCERR
 |

1632 
MSDC_INT_DXFER_DONE
 | 
MSDC_INT_DMAQ_EMPTY
 |

1633 
MSDC_INT_ACMDRDY
 | 
MSDC_INT_ACMDTMO
 | 
MSDC_INT_ACMDCRCERR
 |

1634 
MSDC_INT_CMDRDY
 | 
MSDC_INT_CMDTMO
 | 
MSDC_INT_RSPCRCERR
;

1637 
	`MSG
(
DMA
, "[SD%d] DMA Cuº Addr: 0x%x, A˘ive: %d\n", 
ho°
->
id
,

1638 
	`MSDC_READ32
(
MSDC_DMA_CA
), MSDC_READ32(
MSDC_DMA_CFG
) & 0x1);

1640 
°©us
 = 
	`msdc_öå_waô
(
ho°
, 
wöts
);

1642 i‡(
°©us
 =0 || sètu†& 
MSDC_INT_DATTMO
) {

1643 
	`¥ötf
("[SD%d] DMA DATÅimeout(%xh)\n", 
ho°
->
id
, 
°©us
);

1644 
îr‹
 = 
MMC_ERR_TIMEOUT
;

1645 
íd
;

1646 } i‡(
°©us
 & 
MSDC_INT_DATCRCERR
) {

1647 
	`¥ötf
("[SD%d] DMA DAT CRCÉº‹(%xh)\n", 
ho°
->
id
, 
°©us
);

1648 
îr‹
 = 
MMC_ERR_BADCRC
;

1649 
íd
;

1650 } i‡(
°©us
 & 
MSDC_INT_CMDTMO
) {

1651 
	`¥ötf
("[SD%d] DMA CMDÅimeout(%xh)\n", 
ho°
->
id
, 
°©us
);

1652 
îr‹
 = 
MMC_ERR_TIMEOUT
;

1653 
íd
;

1654 } i‡(
°©us
 & 
MSDC_INT_RSPCRCERR
) {

1655 
	`¥ötf
("[SD%d] DMA CMD CRCÉº‹(%xh)\n", 
ho°
->
id
, 
°©us
);

1656 
îr‹
 = 
MMC_ERR_BADCRC
;

1657 
íd
;

1658 } i‡(
°©us
 & 
MSDC_INT_ACMDTMO
) {

1659 
	`¥ötf
("[SD%d] DMA ACMDÅimeout(%xh)\n", 
ho°
->
id
, 
°©us
);

1660 
îr‹
 = 
MMC_ERR_TIMEOUT
;

1661 
íd
;

1662 } i‡(
°©us
 & 
MSDC_INT_ACMDCRCERR
) {

1663 
	`¥ötf
("[SD%d] DMA ACMD CRCÉº‹(%xh)\n", 
ho°
->
id
, 
°©us
);

1664 
îr‹
 = 
MMC_ERR_BADCRC
;

1665 
íd
;

1668 i‡((
cfg
->
mode
 =
MSDC_MODE_DMA_ENHANCED
Ë&& (
°©us
 & 
MSDC_INT_CMDRDY
)) {

1669 
cfg
->
r•
 = 
	`MSDC_READ32
(
SDC_RESP0
);

1670 
	`MSG
(
DMA
, "[SD%d] DMA ENH CMD Rdy, Re•(%xh)\n", 
ho°
->
id
, 
cfg
->
r•
);

1671 #i‡
MSDC_DEBUG


1672 
	`msdc_dump_ˇrd_°©us
(
cfg
->
r•
);

1675 i‡(
°©us
 & 
MSDC_INT_ACMDRDY
) {

1676 
cfg
->
aut‹•
 = 
	`MSDC_READ32
(
SDC_ACMD_RESP
);

1677 
	`MSG
(
DMA
, "[SD%d] DMA AUTO CMD Rdy, Re•(%xh)\n", 
ho°
->
id
, 
cfg
->
aut‹•
);

1678 #i‡
MSDC_DEBUG


1679 
	`msdc_dump_ˇrd_°©us
(
cfg
->
aut‹•
);

1682 i‡(
cfg
->
mode
 =
MSDC_MODE_DMA_ENHANCED
) {

1689 i‡(
°©us
 & 
MSDC_INT_DXFER_DONE
)

1692 i‡(
°©us
 & 
MSDC_INT_XFER_COMPL
)

1699 
°©us
 = 
	`MSDC_READ32
(
MSDC_DMA_CFG
);

1700 i‡(
°©us
 & 
MSDC_DMA_CFG_GPDCSERR
) {

1701 
	`MSG
(
DMA
, "[SD%d] GPD checksumÉº‹\n", 
ho°
->
id
);

1702 
îr‹
 = 
MMC_ERR_BADCRC
;

1704 } i‡(
°©us
 & 
MSDC_DMA_CFG_BDCSERR
) {

1705 
	`MSG
(
DMA
, "[SD%d] BD checksumÉº‹\n", 
ho°
->
id
);

1706 
îr‹
 = 
MMC_ERR_BADCRC
;

1708 } i‡((
°©us
 & 
MSDC_DMA_CFG_STS
) == 0) {

1712 
íd
:

1713  
îr‹
;

1714 
	}
}

1716 
	$msdc_dma_i‹w
(
mmc_ˇrd
 *
ˇrd
, 
wrôe
, 
‚
,

1717 
addr
, 
ö¸_addr
, 
u8
 *
buf
, 
blocks
, 
blksz
)

1720 
îr
 = 
MMC_ERR_NONE
, 
dîr
 = MMC_ERR_NONE;

1721 
mmc_ho°
 *
ho°
 = 
ˇrd
->host;

1722 
mmc_comm™d
 
cmd
;

1723 
msdc_¥iv_t
 *
¥iv
 = (msdc_¥iv_t*)
ho°
->priv;

1724 
dma_c⁄fig
 *
cfg
 = &
¥iv
->cfg;

1725 
u32
 
nblks
 = (u32)
blocks
;

1727 
	`mem£t
(&
cmd
, 0, (
mmc_comm™d
));

1729 
cmd
.
›code
 = 
SD_IO_RW_EXTENDED
;

1730 
cmd
.
¨g
 = 
wrôe
 ? 0x80000000 : 0x00000000;

1731 
cmd
.
¨g
 |
‚
 << 28;

1732 
cmd
.
¨g
 |
ö¸_addr
 ? 0x04000000 : 0x00000000;

1733 
cmd
.
¨g
 |
addr
 << 9;

1734 i‡(
blocks
 =1 && 
blksz
 <= 512) {

1735 
cmd
.
¨g
 |(
blksz
 == 512) ? 0 : blksz;

1737 
cmd
.
¨g
 |0x08000000 | 
blocks
;

1739 
cmd
.
r•typ
 = 
RESP_R5
;

1740 
cmd
.
ªåõs
 = 
CMD_RETRIES
;

1741 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

1743 i‡(
cfg
->
mode
 =
MSDC_MODE_DMA_ENHANCED
) {

1749 
	`BUG_ON
((
blocks
 * 
blksz
 / 
MAX_SG_BUF_SZ
Ë> 
MAX_BD_PER_GPD
);

1750 
	`msdc_£t_blkÀn
(
ho°
, 
blksz
);

1751 
	`msdc_£t_timeout
(
ho°
, 100000000, 0);

1752 
	`msdc_dma_cmd
(
ho°
, 
cfg
, &
cmd
);

1753 
	`msdc_dma_öô
(
ho°
, 
cfg
, (*)
buf
, 
nblks
 * 
blksz
);

1754 
	`msdc_dma_c⁄fig
(
ho°
, 
cfg
);

1755 
	`msdc_dma_°¨t
(
ho°
);

1756 
îr
 = 
dîr
 = 
	`msdc_dma_waô_d⁄e
(
ho°
, 0xFFFFFFFF);

1757 
	`msdc_dma_°›
(
ho°
);

1760 i‡(!
îr
 && 
nblks
 > 1) {

1761 
mmc_comm™d
 
ab‹t
;

1762 
	`mem£t
(&
ab‹t
, 0, (
mmc_comm™d
));

1763 
ab‹t
.
›code
 = 
SD_IO_RW_DIRECT
;

1764 
ab‹t
.
¨g
 = 0x80000000;

1765 
ab‹t
.
¨g
 |= 0 << 28;

1766 
ab‹t
.
¨g
 |
SDIO_CCCR_ABORT
 << 9;

1767 
ab‹t
.
¨g
 |= 0;

1768 
ab‹t
.
r•typ
 = 
RESP_R1B
;

1769 
ab‹t
.
ªåõs
 = 
CMD_RETRIES
;

1770 
ab‹t
.
timeout
 = 
CMD_TIMEOUT
;

1772 
îr
 = 
	`msdc_cmd
(
ho°
, &
ab‹t
);

1776 
u32
 
À·_sz
, 
x„r_sz
;

1778 
	`msdc_£t_blkÀn
(
ho°
, 
blksz
);

1779 
	`msdc_£t_timeout
(
ho°
, 100000000, 0);

1781 
À·_sz
 = 
nblks
 * 
blksz
;

1783 i‡(
cfg
->
mode
 =
MSDC_MODE_DMA_BASIC
) {

1787 
	`BUG_ON
(
À·_sz
 > 
MAX_DMA_CNT
);

1788 
x„r_sz
 = 
À·_sz
 > 
MAX_DMA_CNT
 ? MAX_DMA_CNT :Üeft_sz;

1789 
nblks
 = 
x„r_sz
 / 
blksz
;

1791 
x„r_sz
 = 
À·_sz
;

1794 
À·_sz
) {

1796 
	`msdc_£t_blknum
(
ho°
, 
nblks
);

1797 
	`msdc_dma_öô
(
ho°
, 
cfg
, (*)
buf
, 
x„r_sz
);

1798 
	`msdc_dma_c⁄fig
(
ho°
, 
cfg
);

1800 
îr
 = 
	`msdc_cmd
(
ho°
, &
cmd
);

1802 i‡(
îr
 !
MMC_ERR_NONE
) {

1803 
	`msdc_ª£t_gpd
(
ho°
);

1804 
d⁄e
;

1807 
	`msdc_dma_°¨t
(
ho°
);

1808 
îr
 = 
dîr
 = 
	`msdc_dma_waô_d⁄e
(
ho°
, 0xFFFFFFFF);

1809 
	`msdc_dma_°›
(
ho°
);

1813 i‡(!
îr
 && 
nblks
 > 1) {

1814 
mmc_comm™d
 
ab‹t
;

1815 
	`mem£t
(&
ab‹t
, 0, (
mmc_comm™d
));

1816 
ab‹t
.
›code
 = 
SD_IO_RW_DIRECT
;

1817 
ab‹t
.
¨g
 = 0x80000000;

1818 
ab‹t
.
¨g
 |= 0 << 28;

1819 
ab‹t
.
¨g
 |
SDIO_CCCR_ABORT
 << 9;

1820 
ab‹t
.
¨g
 |= 0;

1821 
ab‹t
.
r•typ
 = 
RESP_R1B
;

1822 
ab‹t
.
ªåõs
 = 
CMD_RETRIES
;

1823 
ab‹t
.
timeout
 = 
CMD_TIMEOUT
;

1825 
îr
 = 
	`msdc_cmd
(
ho°
, &
ab‹t
);

1828 i‡(
îr
 !
MMC_ERR_NONE
)

1829 
d⁄e
;

1830 
buf
 +
x„r_sz
;

1831 
À·_sz
 -
x„r_sz
;

1832 i‡(
À·_sz
) {

1833 
x„r_sz
 = (x„r_sz > 
À·_sz
) ?Üeft_sz : xfer_sz;

1834 
nblks
 = (
x„r_sz
 > 
À·_sz
Ë?Çblk†:Üe·_sz / 
blksz
;

1839 
d⁄e
:

1840 i‡(
dîr
 !
MMC_ERR_NONE
) {

1841 
	`¥ötf
("[SD%d] <CMD%d> IO DMA d©®îr‹ (%d)\n", 
ho°
->
id
, 
cmd
.
›code
 & ~
SD_CMD_BIT
, 
dîr
);

1842 
	`msdc_ab‹t_h™dÀr
(
ho°
, 0);

1845  
îr
;

1846 
	}
}

1848 
	$msdc_dma_å™s„r
(
mmc_ho°
 *
ho°
, 
mmc_comm™d
 *
cmd
, 
uch¨
 *
buf
, 
ul⁄g
 
nblks
)

1850 
îr
 = 
MMC_ERR_NONE
, 
dîr
 = MMC_ERR_NONE;

1851 
mu…i
;

1852 
u32
 
blksz
 = 
ho°
->
blkÀn
;

1853 
msdc_¥iv_t
 *
¥iv
 = (msdc_¥iv_t*)
ho°
->priv;

1854 
dma_c⁄fig
 *
cfg
 = &
¥iv
->cfg;

1855 
mmc_comm™d
 
°›
;

1857 
	`BUG_ON
(
nblks
 * 
blksz
 > 
MAX_DMA_TRAN_SIZE
);

1859 
mu…i
 = 
nblks
 > 1 ? 1 : 0;

1861 i‡(
cfg
->
mode
 =
MSDC_MODE_DMA_ENHANCED
) {

1862 i‡(
mu…i
 && (
¥iv
->
autocmd
 == 0))

1863 
	`msdc_£t_autocmd
(
ho°
, 
MSDC_AUTOCMD12
, 1);

1864 
	`msdc_£t_blkÀn
(
ho°
, 
blksz
);

1865 
	`msdc_£t_timeout
(
ho°
, 100000000, 0);

1866 
	`msdc_dma_cmd
(
ho°
, 
cfg
, 
cmd
);

1867 
	`msdc_dma_öô
(
ho°
, 
cfg
, (*)
buf
, 
nblks
 * 
blksz
);

1868 
	`msdc_dma_c⁄fig
(
ho°
, 
cfg
);

1869 
	`msdc_dma_°¨t
(
ho°
);

1870 
îr
 = 
dîr
 = 
	`msdc_dma_waô_d⁄e
(
ho°
, 0xFFFFFFFF);

1871 
	`msdc_dma_°›
(
ho°
);

1872 i‡(
mu…i
 && (
¥iv
->
autocmd
 == 0))

1873 
	`msdc_£t_autocmd
(
ho°
, 
MSDC_AUTOCMD12
, 0);

1875 
u32
 
À·_sz
, 
x„r_sz
;

1877 
	`msdc_£t_blkÀn
(
ho°
, 
blksz
);

1878 
	`msdc_£t_timeout
(
ho°
, 100000000, 0);

1880 
À·_sz
 = 
nblks
 * 
blksz
;

1882 i‡(
cfg
->
mode
 =
MSDC_MODE_DMA_BASIC
) {

1883 
x„r_sz
 = 
À·_sz
 > 
MAX_DMA_CNT
 ? MAX_DMA_CNT :Üeft_sz;

1884 
nblks
 = 
x„r_sz
 / 
blksz
;

1886 
x„r_sz
 = 
À·_sz
;

1889 
À·_sz
) {

1891 
	`msdc_£t_blknum
(
ho°
, 
nblks
);

1892 
	`msdc_dma_öô
(
ho°
, 
cfg
, (*)
buf
, 
x„r_sz
);

1894 
îr
 = 
	`msdc_£nd_cmd
(
ho°
, 
cmd
);

1895 
	`msdc_dma_c⁄fig
(
ho°
, 
cfg
);

1896 
	`msdc_dma_°¨t
(
ho°
);

1898 i‡(
îr
 !
MMC_ERR_NONE
) {

1899 
	`msdc_dma_°›
(
ho°
);

1900 
	`msdc_ª£t_gpd
(
ho°
);

1901 
d⁄e
;

1904 
îr
 = 
	`msdc_waô_r•
(
ho°
, 
cmd
);

1906 i‡(
îr
 =
MMC_ERR_BADCRC
) {

1907 
u32
 
ba£
 = 
ho°
->base;

1908 
u32
 
tmp
 = 
	`MSDC_READ32
(
SDC_CMD
);

1911 i‡(
tmp
 & 0x1800) {

1912 
	`msdc_ab‹t_h™dÀr
(
ho°
, 1);

1914 
îr
 = 
	`msdc_tu√_cmdr•
(
ho°
, 
cmd
);

1917 
îr
 = 
dîr
 = 
	`msdc_dma_waô_d⁄e
(
ho°
, 0xFFFFFFFF);

1918 
	`msdc_dma_°›
(
ho°
);

1920 
	`msdc_£t_blknum
(
ho°
, 
nblks
);

1921 
	`msdc_dma_öô
(
ho°
, 
cfg
, (*)
buf
, 
x„r_sz
);

1922 
	`msdc_dma_c⁄fig
(
ho°
, 
cfg
);

1924 
îr
 = 
	`msdc_cmd
(
ho°
, 
cmd
);

1925 i‡(
îr
 !
MMC_ERR_NONE
) {

1926 
	`msdc_ª£t_gpd
(
ho°
);

1927 
d⁄e
;

1930 
	`msdc_dma_°¨t
(
ho°
);

1931 
îr
 = 
dîr
 = 
	`msdc_dma_waô_d⁄e
(
ho°
, 0xFFFFFFFF);

1932 
	`msdc_dma_°›
(
ho°
);

1935 i‡(
mu…i
 && (
¥iv
->
autocmd
 == 0)) {

1936 
°›
.
›code
 = 
MMC_CMD_STOP_TRANSMISSION
;

1937 
°›
.
r•typ
 = 
RESP_R1B
;

1938 
°›
.
¨g
 = 0;

1939 
°›
.
ªåõs
 = 
CMD_RETRIES
;

1940 
°›
.
timeout
 = 
CMD_TIMEOUT
;

1941 
îr
 = 
	`msdc_cmd
(
ho°
, &
°›
Ë!
MMC_ERR_NONE
 ? 
MMC_ERR_FAILED
 :Érr;

1943 i‡(
îr
 !
MMC_ERR_NONE
)

1944 
d⁄e
;

1945 
buf
 +
x„r_sz
;

1946 
À·_sz
 -
x„r_sz
;

1949 i‡(
À·_sz
) {

1950 
cmd
->
¨g
 +
nblks
;

1951 
x„r_sz
 = (x„r_sz > 
À·_sz
) ?Üeft_sz : xfer_sz;

1952 
nblks
 = (
À·_sz
 > 
x„r_sz
Ë?Çblk†:Üe·_sz / 
blksz
;

1956 
d⁄e
:

1957 i‡(
dîr
 !
MMC_ERR_NONE
) {

1958 
	`¥ötf
("[SD%d] <CMD%d> DMA d©®îr‹ (%d)\n", 
ho°
->
id
, 
cmd
->
›code
, 
dîr
);

1959 
	`msdc_ab‹t_h™dÀr
(
ho°
, 1);

1962  
îr
;

1963 
	}
}

1965 
	$msdc_dma_bªad
(
mmc_ho°
 *
ho°
, 
uch¨
 *
d°
, 
ul⁄g
 
§c
, ul⁄g 
nblks
)

1967 
mu…i
;

1968 
mmc_comm™d
 
cmd
;

1970 
	`BUG_ON
(
nblks
 > 
ho°
->
max_phys_£gs
);

1972 
	`MSG
(
OPS
, "[SD%d] Ród d©®%d blk†‰om 0x%x\n", 
ho°
->
id
, 
nblks
, 
§c
);

1974 
mu…i
 = 
nblks
 > 1 ? 1 : 0;

1977 
cmd
.
›code
 = 
mu…i
 ? 
MMC_CMD_READ_MULTIPLE_BLOCK
 : 
MMC_CMD_READ_SINGLE_BLOCK
;

1978 
cmd
.
r•typ
 = 
RESP_R1
;

1979 
cmd
.
¨g
 = 
§c
;

1980 
cmd
.
ªåõs
 = 0;

1981 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

1983  
	`msdc_dma_å™s„r
(
ho°
, &
cmd
, 
d°
, 
nblks
);

1984 
	}
}

1986 
	$msdc_dma_bwrôe
(
mmc_ho°
 *
ho°
, 
ul⁄g
 
d°
, 
uch¨
 *
§c
, ul⁄g 
nblks
)

1988 
mu…i
;

1989 
mmc_comm™d
 
cmd
;

1991 
	`BUG_ON
(
nblks
 > 
ho°
->
max_phys_£gs
);

1993 
	`MSG
(
OPS
, "[SD%d] Wrôêd©®%d blk†tÿ0x%x\n", 
ho°
->
id
, 
nblks
, 
d°
);

1995 
mu…i
 = 
nblks
 > 1 ? 1 : 0;

1998 
cmd
.
›code
 = 
mu…i
 ? 
MMC_CMD_WRITE_MULTIPLE_BLOCK
 : 
MMC_CMD_WRITE_BLOCK
;

1999 
cmd
.
r•typ
 = 
RESP_R1
;

2000 
cmd
.
¨g
 = 
d°
;

2001 
cmd
.
ªåõs
 = 0;

2002 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

2004  
	`msdc_dma_å™s„r
(
ho°
, &
cmd
, 
§c
, 
nblks
);

2005 
	}
}

2007 
	$msdc_pio_ªad_byã
(
mmc_ho°
 *
ho°
, 
u8
 *
±r
, 
u32
 
size
)

2009 
îr
 = 
MMC_ERR_NONE
;

2010 
u32
 
ba£
 = 
ho°
->base;

2011 
u32
 
öts
 = 
MSDC_INT_DATCRCERR
 | 
MSDC_INT_DATTMO
 | 
MSDC_INT_XFER_COMPL
;

2013 
u32
 
°©us
;

2014 
u32
 
tŸÆsz
 = 
size
;

2015 
u8
 
d⁄e
 = 0;

2018 #i‡
MSDC_USE_IRQ


2019 
	`DißbÀIRQ
();

2020 
°©us
 = 
msdc_úq_°s
[
ho°
->
id
];

2021 
msdc_úq_°s
[
ho°
->
id
] &~
öts
;

2022 
	`E«bÀIRQ
();

2024 
°©us
 = 
	`MSDC_READ32
(
MSDC_INT
);

2025 
	`MSDC_WRITE32
(
MSDC_INT
, 
°©us
);

2027 i‡(
°©us
 & ~
öts
) {

2028 
	`MSG
(
WRN
, "[SD%d]<CHECKME> Unexpected INT(0x%x)\n",

2029 
ho°
->
id
, 
°©us
);

2031 i‡(
°©us
 & 
MSDC_INT_DATCRCERR
) {

2032 
	`¥ötf
("[SD%d] DAT CRCÉrror (0x%x), Left DAT: %d/%d bytes\n",

2033 
ho°
->
id
, 
°©us
, 
size
, 
tŸÆsz
);

2034 
îr
 = 
MMC_ERR_BADCRC
;

2036 } i‡(
°©us
 & 
MSDC_INT_DATTMO
) {

2037 
	`¥ötf
("[SD%d] DAT TMOÉrror (0x%x), Left DAT: %d/%d bytes\n",

2038 
ho°
->
id
, 
°©us
, 
size
, 
tŸÆsz
);

2039 
îr
 = 
MMC_ERR_TIMEOUT
;

2041 } i‡(
°©us
 & 
MSDC_INT_XFER_COMPL
) {

2042 
d⁄e
 = 1;

2045 i‡(
size
 =0 && 
d⁄e
)

2049 i‡((
size
 >
MSDC_FIFO_THD
Ë&& (
	`MSDC_RXFIFOCNT
() >= MSDC_FIFO_THD)) {

2050 
À·
 = 
MSDC_FIFO_THD
;

2052 *
±r
++ = 
	`MSDC_FIFO_READ8
();

2053 } --
À·
);

2054 
size
 -
MSDC_FIFO_THD
;

2055 
	`MSG
(
FIO
, "[SD%d] Read %d bytes, RXFIFOCNT: %d, Left: %d/%d\n",

2056 
ho°
->
id
, 
MSDC_FIFO_THD
, 
	`MSDC_RXFIFOCNT
(), 
size
, 
tŸÆsz
);

2057 } i‡((
size
 < 
MSDC_FIFO_THD
Ë&& (
	`MSDC_RXFIFOCNT
() >= size)) {

2058 
size
) {

2059 *
±r
++ = 
	`MSDC_FIFO_READ8
();

2060 
size
--;

2062 
	`MSG
(
FIO
, "[SD%d] ReadÜeft bytes, RXFIFOCNT: %d, Left: %d/%d\n",

2063 
ho°
->
id
, 
	`MSDC_RXFIFOCNT
(), 
size
, 
tŸÆsz
);

2068  
îr
;

2069 
	}
}

2071 
	$msdc_pio_ªad_hw‹d
(
mmc_ho°
 *
ho°
, 
u16
 *
±r
, 
u32
 
size
)

2073 
îr
 = 
MMC_ERR_NONE
;

2074 
u32
 
ba£
 = 
ho°
->base;

2075 
u32
 
öts
 = 
MSDC_INT_DATCRCERR
 | 
MSDC_INT_DATTMO
 | 
MSDC_INT_XFER_COMPL
;

2077 
u32
 
°©us
;

2078 
u32
 
tŸÆsz
 = 
size
;

2079 
u8
 
d⁄e
 = 0;

2082 #i‡
MSDC_USE_IRQ


2083 
	`DißbÀIRQ
();

2084 
°©us
 = 
msdc_úq_°s
[
ho°
->
id
];

2085 
msdc_úq_°s
[
ho°
->
id
] &~
öts
;

2086 
	`E«bÀIRQ
();

2088 
°©us
 = 
	`MSDC_READ32
(
MSDC_INT
);

2089 
	`MSDC_WRITE32
(
MSDC_INT
, 
°©us
);

2091 i‡(
°©us
 & ~
öts
) {

2092 
	`MSG
(
WRN
, "[SD%d]<CHECKME> Unexpected INT(0x%x)\n",

2093 
ho°
->
id
, 
°©us
);

2095 i‡(
°©us
 & 
MSDC_INT_DATCRCERR
) {

2096 
	`¥ötf
("[SD%d] DAT CRCÉrror (0x%x), Left DAT: %d/%d bytes\n",

2097 
ho°
->
id
, 
°©us
, 
size
, 
tŸÆsz
);

2098 
îr
 = 
MMC_ERR_BADCRC
;

2100 } i‡(
°©us
 & 
MSDC_INT_DATTMO
) {

2101 
	`¥ötf
("[SD%d] DAT TMOÉrror (0x%x), Left DAT: %d/%d bytes\n",

2102 
ho°
->
id
, 
°©us
, 
size
, 
tŸÆsz
);

2103 
îr
 = 
MMC_ERR_TIMEOUT
;

2105 } i‡(
°©us
 & 
MSDC_INT_XFER_COMPL
) {

2106 
d⁄e
 = 1;

2109 i‡(
size
 =0 && 
d⁄e
)

2113 i‡((
size
 >
MSDC_FIFO_THD
Ë&& (
	`MSDC_RXFIFOCNT
() >= MSDC_FIFO_THD)) {

2114 
À·
 = 
MSDC_FIFO_THD
 >> 1;

2116 *
±r
++ = 
	`MSDC_FIFO_READ16
();

2117 } --
À·
);

2118 
size
 -
MSDC_FIFO_THD
;

2119 
	`MSG
(
FIO
, "[SD%d] Read %d bytes, RXFIFOCNT: %d, Left: %d/%d\n",

2120 
ho°
->
id
, 
MSDC_FIFO_THD
, 
	`MSDC_RXFIFOCNT
(), 
size
, 
tŸÆsz
);

2121 } i‡((
size
 < 
MSDC_FIFO_THD
Ë&& (
	`MSDC_RXFIFOCNT
() >= size)) {

2122 
size
) {

2123 i‡(
size
 > 2) {

2124 *
±r
++ = 
	`MSDC_FIFO_READ16
();

2125 
size
 -= 2;

2127 
u16
 
vÆ
 = 
	`MSDC_FIFO_READ16
();

2128 
	`mem˝y
(
±r
, &
vÆ
, 
size
);

2129 
size
 = 0;

2132 
	`MSG
(
FIO
, "[SD%d] ReadÜeft bytes, RXFIFOCNT: %d, Left: %d/%d\n",

2133 
ho°
->
id
, 
	`MSDC_RXFIFOCNT
(), 
size
, 
tŸÆsz
);

2137  
îr
;

2138 
	}
}

2140 
	$msdc_pio_ªad_w‹d
(
mmc_ho°
 *
ho°
, 
u32
 *
±r
, u32 
size
)

2142 
îr
 = 
MMC_ERR_NONE
;

2143 
u32
 
ba£
 = 
ho°
->base;

2144 
u32
 
öts
 = 
MSDC_INT_DATCRCERR
 | 
MSDC_INT_DATTMO
 | 
MSDC_INT_XFER_COMPL
;

2146 
u32
 
°©us
;

2147 
u32
 
tŸÆsz
 = 
size
;

2148 
u8
 
d⁄e
 = 0;

2151 #i‡
MSDC_USE_IRQ


2152 
	`DißbÀIRQ
();

2153 
°©us
 = 
msdc_úq_°s
[
ho°
->
id
];

2154 
msdc_úq_°s
[
ho°
->
id
] &~
öts
;

2155 
	`E«bÀIRQ
();

2157 
°©us
 = 
	`MSDC_READ32
(
MSDC_INT
);

2158 
	`MSDC_WRITE32
(
MSDC_INT
, 
°©us
);

2160 i‡(
°©us
 & ~
öts
) {

2161 
	`MSG
(
WRN
, "[SD%d]<CHECKME> Unexpected INT(0x%x)\n",

2162 
ho°
->
id
, 
°©us
);

2164 i‡(
°©us
 & 
MSDC_INT_DATCRCERR
) {

2165 
	`¥ötf
("[SD%d] DAT CRCÉrror (0x%x), Left:%d/%d bytes, RXFIFO:%d\n",

2166 
ho°
->
id
, 
°©us
, 
size
, 
tŸÆsz
, 
	`MSDC_RXFIFOCNT
());

2167 
îr
 = 
MMC_ERR_BADCRC
;

2169 } i‡(
°©us
 & 
MSDC_INT_DATTMO
) {

2170 
	`¥ötf
("[SD%d] DAT TMOÉrror (0x%x), Left: %d/%d bytes, RXFIFO:%d\n",

2171 
ho°
->
id
, 
°©us
, 
size
, 
tŸÆsz
, 
	`MSDC_RXFIFOCNT
());

2172 
îr
 = 
MMC_ERR_TIMEOUT
;

2174 } i‡(
°©us
 & 
MSDC_INT_XFER_COMPL
) {

2175 
d⁄e
 = 1;

2178 i‡(
size
 =0 && 
d⁄e
)

2182 i‡((
size
 >
MSDC_FIFO_THD
Ë&& (
	`MSDC_RXFIFOCNT
() >= MSDC_FIFO_THD)) {

2183 
À·
 = 
MSDC_FIFO_THD
 >> 2;

2185 *
±r
++ = 
	`MSDC_FIFO_READ32
();

2186 } --
À·
);

2187 
size
 -
MSDC_FIFO_THD
;

2188 
	`MSG
(
FIO
, "[SD%d] Read %d bytes, RXFIFOCNT: %d, Left: %d/%d\n",

2189 
ho°
->
id
, 
MSDC_FIFO_THD
, 
	`MSDC_RXFIFOCNT
(), 
size
, 
tŸÆsz
);

2190 } i‡((
size
 < 
MSDC_FIFO_THD
Ë&& 
	`MSDC_RXFIFOCNT
() >= size) {

2191 
size
) {

2192 i‡(
size
 > 3) {

2193 *
±r
++ = 
	`MSDC_FIFO_READ32
();

2194 
size
 -= 4;

2196 
u32
 
vÆ
 = 
	`MSDC_FIFO_READ32
();

2197 
	`mem˝y
(
±r
, &
vÆ
, 
size
);

2198 
size
 = 0;

2201 
	`MSG
(
FIO
, "[SD%d] ReadÜeft bytes, RXFIFOCNT: %d, Left: %d/%d\n",

2202 
ho°
->
id
, 
	`MSDC_RXFIFOCNT
(), 
size
, 
tŸÆsz
);

2206  
îr
;

2207 
	}
}

2209 
	$msdc_pio_ªad
(
mmc_ho°
 *
ho°
, 
u32
 *
±r
, u32 
size
)

2211 
îr
 = 
MMC_ERR_NONE
;

2212 
msdc_¥iv_t
 *
¥iv
 = 
ho°
->priv;

2214 
¥iv
->
pio_bôs
) {

2216 
îr
 = 
	`msdc_pio_ªad_w‹d
(
ho°
, (
u32
*)
±r
, 
size
);

2219 
îr
 = 
	`msdc_pio_ªad_hw‹d
(
ho°
, (
u16
*)
±r
, 
size
);

2222 
îr
 = 
	`msdc_pio_ªad_byã
(
ho°
, (
u8
*)
±r
, 
size
);

2226 i‡(
îr
 !
MMC_ERR_NONE
) {

2227 
	`msdc_ab‹t
(
ho°
);

2228 
	`¥ötf
("[SD%d] %d-bô PIO Ród Eº‹ (%d)\n", 
ho°
->
id
,

2229 
¥iv
->
pio_bôs
, 
îr
);

2232  
îr
;

2233 
	}
}

2235 
	$msdc_pio_wrôe_byã
(
mmc_ho°
 *
ho°
, 
u8
 *
±r
, 
u32
 
size
)

2237 
îr
 = 
MMC_ERR_NONE
;

2238 
u32
 
ba£
 = 
ho°
->base;

2239 
u32
 
öts
 = 
MSDC_INT_DATCRCERR
 | 
MSDC_INT_DATTMO
 | 
MSDC_INT_XFER_COMPL
;

2240 
u32
 
timeout
 = 250000;

2241 
u32
 
°©us
;

2242 
msdc_¥iv_t
 *
¥iv
 = (msdc_¥iv_t*)
ho°
->priv;

2243 
u8
 
°ªam
 = (
¥iv
->
cfg
.
mode
 =
MSDC_MODE_MMC_STREAM
) ? 1 : 0;

2246 #i‡
MSDC_USE_IRQ


2247 
	`DißbÀIRQ
();

2248 
°©us
 = 
msdc_úq_°s
[
ho°
->
id
];

2249 
msdc_úq_°s
[
ho°
->
id
] &~
öts
;

2250 
	`E«bÀIRQ
();

2252 
°©us
 = 
	`MSDC_READ32
(
MSDC_INT
);

2253 
	`MSDC_WRITE32
(
MSDC_INT
, 
°©us
);

2255 i‡(
°©us
 & ~
öts
) {

2256 
	`MSG
(
WRN
, "[SD%d]<CHECKME> Unexpected INT(0x%x)\n",

2257 
ho°
->
id
, 
°©us
);

2259 i‡(
°©us
 & 
MSDC_INT_DATCRCERR
) {

2260 
	`¥ötf
("[SD%d] DAT CRCÉrror (0x%x), Left DAT: %d bytes\n",

2261 
ho°
->
id
, 
°©us
, 
size
);

2262 
îr
 = 
MMC_ERR_BADCRC
;

2264 } i‡(
°©us
 & 
MSDC_INT_DATTMO
) {

2265 
	`¥ötf
("[SD%d] DAT TMOÉrror (0x%x), Left DAT: %d bytes\n",

2266 
ho°
->
id
, 
°©us
, 
size
);

2267 
îr
 = 
MMC_ERR_TIMEOUT
;

2269 } i‡(
°©us
 & 
MSDC_INT_XFER_COMPL
) {

2270 i‡(
size
 == 0) {

2271 
	`MSG
(
OPS
, "[SD%d]áŒ d©®ÊushedÅÿˇrd\n", 
ho°
->
id
);

2274 
	`MSG
(
WRN
, "[SD%d]<CHECKME> XFER_COMPL beforeáll data written\n",

2275 
ho°
->
id
);

2277 } i‡(
°ªam
) {

2278 i‡(
	`MSDC_READ32
(
SDC_STS
Ë& 
SDC_STS_SWR_COMPL
)

2280 
	`MSG
(
OPS
, "[SD%d] Waô f‹ såóm wrôêd©®Êush\n", 
ho°
->
id
);

2283 i‡(
size
 == 0)

2286 i‡(
size
 >
MSDC_FIFO_SZ
) {

2287 i‡(
	`MSDC_TXFIFOCNT
() == 0) {

2288 
À·
 = 
MSDC_FIFO_SZ
;

2290 
	`MSDC_FIFO_WRITE8
(*
±r
);Ötr++;

2291 } --
À·
);

2292 
size
 -
MSDC_FIFO_SZ
;

2294 } i‡(
size
 < 
MSDC_FIFO_SZ
 && 
	`MSDC_TXFIFOCNT
() == 0) {

2295 
size
 ) {

2296 
	`MSDC_FIFO_WRITE8
(*
±r
);Ötr++;

2297 
size
--;

2302  
îr
;

2303 
	}
}

2305 
	$msdc_pio_wrôe_hw‹d
(
mmc_ho°
 *
ho°
, 
u16
 *
±r
, 
u32
 
size
)

2307 
îr
 = 
MMC_ERR_NONE
;

2308 
u32
 
ba£
 = 
ho°
->base;

2309 
u32
 
öts
 = 
MSDC_INT_DATCRCERR
 | 
MSDC_INT_DATTMO
 | 
MSDC_INT_XFER_COMPL
;

2311 
u32
 
°©us
;

2312 
msdc_¥iv_t
 *
¥iv
 = (msdc_¥iv_t*)
ho°
->priv;

2313 
u8
 
°ªam
 = (
¥iv
->
cfg
.
mode
 =
MSDC_MODE_MMC_STREAM
) ? 1 : 0;

2316 #i‡
MSDC_USE_IRQ


2317 
	`DißbÀIRQ
();

2318 
°©us
 = 
msdc_úq_°s
[
ho°
->
id
];

2319 
msdc_úq_°s
[
ho°
->
id
] &~
öts
;

2320 
	`E«bÀIRQ
();

2322 
°©us
 = 
	`MSDC_READ32
(
MSDC_INT
);

2323 
	`MSDC_WRITE32
(
MSDC_INT
, 
°©us
);

2325 i‡(
°©us
 & ~
öts
) {

2326 
	`MSG
(
WRN
, "[SD%d]<CHECKME> Unexpected INT(0x%x)\n",

2327 
ho°
->
id
, 
°©us
);

2329 i‡(
°©us
 & 
MSDC_INT_DATCRCERR
) {

2330 
	`¥ötf
("[SD%d] DAT CRCÉrror (0x%x), Left DAT: %d bytes\n",

2331 
ho°
->
id
, 
°©us
, 
size
);

2332 
îr
 = 
MMC_ERR_BADCRC
;

2334 } i‡(
°©us
 & 
MSDC_INT_DATTMO
) {

2335 
	`¥ötf
("[SD%d] DAT TMOÉrror (0x%x), Left DAT: %d bytes, MSDC_FIFOCS=%xh\n",

2336 
ho°
->
id
, 
°©us
, 
size
, 
	`MSDC_READ32
(
MSDC_FIFOCS
));

2337 
îr
 = 
MMC_ERR_TIMEOUT
;

2339 } i‡(
°©us
 & 
MSDC_INT_XFER_COMPL
) {

2340 i‡(
size
 == 0) {

2341 
	`MSG
(
OPS
, "[SD%d]áŒ d©®ÊushedÅÿˇrd\n", 
ho°
->
id
);

2344 
	`MSG
(
WRN
, "[SD%d]<CHECKME> XFER_COMPL beforeáll data written\n",

2345 
ho°
->
id
);

2347 } i‡(
°ªam
) {

2348 i‡(
	`MSDC_READ32
(
SDC_STS
Ë& 
SDC_STS_SWR_COMPL
)

2350 
	`MSG
(
OPS
, "[SD%d] Waô f‹ såóm wrôêd©®Êush\n", 
ho°
->
id
);

2354 i‡(
size
 == 0)

2357 i‡(
size
 >
MSDC_FIFO_SZ
) {

2358 i‡(
	`MSDC_TXFIFOCNT
() == 0) {

2359 
À·
 = 
MSDC_FIFO_SZ
 >> 1;

2361 
	`MSDC_FIFO_WRITE16
(*
±r
);Ötr++;

2362 } --
À·
);

2363 
size
 -
MSDC_FIFO_SZ
;

2365 } i‡(
size
 < 
MSDC_FIFO_SZ
 && 
	`MSDC_TXFIFOCNT
() == 0) {

2366 
size
) {

2367 i‡(
size
 > 1) {

2368 
	`MSDC_FIFO_WRITE16
(*
±r
);Ötr++;

2369 
size
 -= 2;

2371 
u16
 
vÆ
 = 0;

2372 
	`mem˝y
(&
vÆ
, 
±r
, 
size
);

2373 
	`MSDC_FIFO_WRITE16
(
vÆ
);

2374 
size
 = 0;

2380  
îr
;

2381 
	}
}

2383 
	$msdc_pio_wrôe_w‹d
(
mmc_ho°
 *
ho°
, 
u32
 *
±r
, u32 
size
)

2385 
îr
 = 
MMC_ERR_NONE
;

2386 
u32
 
ba£
 = 
ho°
->base;

2387 
u32
 
öts
 = 
MSDC_INT_DATCRCERR
 | 
MSDC_INT_DATTMO
 | 
MSDC_INT_XFER_COMPL
;

2389 
u32
 
°©us
;

2390 
msdc_¥iv_t
 *
¥iv
 = (msdc_¥iv_t*)
ho°
->priv;

2391 
u8
 
°ªam
 = (
¥iv
->
cfg
.
mode
 =
MSDC_MODE_MMC_STREAM
) ? 1 : 0;

2394 #i‡
MSDC_USE_IRQ


2395 
	`DißbÀIRQ
();

2396 
°©us
 = 
msdc_úq_°s
[
ho°
->
id
];

2397 
msdc_úq_°s
[
ho°
->
id
] &~
öts
;

2398 
	`E«bÀIRQ
();

2400 
°©us
 = 
	`MSDC_READ32
(
MSDC_INT
);

2401 
	`MSDC_WRITE32
(
MSDC_INT
, 
°©us
);

2403 i‡(
°©us
 & ~
öts
) {

2404 
	`MSG
(
WRN
, "[SD%d]<CHECKME> Unexpected INT(0x%x)\n",

2405 
ho°
->
id
, 
°©us
);

2407 i‡(
°©us
 & 
MSDC_INT_DATCRCERR
) {

2408 
	`¥ötf
("[SD%d] DAT CRCÉrror (0x%x), Left DAT: %d bytes\n",

2409 
ho°
->
id
, 
°©us
, 
size
);

2410 
îr
 = 
MMC_ERR_BADCRC
;

2412 } i‡(
°©us
 & 
MSDC_INT_DATTMO
) {

2413 
	`¥ötf
("[SD%d] DAT TMOÉrror (0x%x), Left DAT: %d bytes\n",

2414 
ho°
->
id
, 
°©us
, 
size
);

2415 
îr
 = 
MMC_ERR_TIMEOUT
;

2417 } i‡(
°©us
 & 
MSDC_INT_XFER_COMPL
) {

2418 i‡(
size
 == 0) {

2419 
	`MSG
(
OPS
, "[SD%d]áŒ d©®ÊushedÅÿˇrd\n", 
ho°
->
id
);

2422 
	`MSG
(
WRN
, "[SD%d]<CHECKME> XFER_COMPL beforeáll data written\n",

2423 
ho°
->
id
);

2425 } i‡(
°ªam
) {

2426 i‡(
	`MSDC_READ32
(
SDC_STS
Ë& 
SDC_STS_SWR_COMPL
)

2428 
	`MSG
(
OPS
, "[SD%d] Waô f‹ såóm wrôêd©®Êush\n", 
ho°
->
id
);

2431 i‡(
size
 == 0)

2434 i‡(
size
 >
MSDC_FIFO_THD
) {

2435 i‡(
	`MSDC_TXFIFOCNT
() == 0) {

2436 
À·
 = 
MSDC_FIFO_THD
 >> 2;

2438 
	`MSDC_FIFO_WRITE32
(*
±r
);Ötr++;

2439 } --
À·
);

2440 
size
 -
MSDC_FIFO_THD
;

2442 } i‡(
size
 < 
MSDC_FIFO_THD
 && 
	`MSDC_TXFIFOCNT
() == 0) {

2443 
size
 ) {

2444 i‡(
size
 > 3) {

2445 
	`MSDC_FIFO_WRITE32
(*
±r
);Ötr++;

2446 
size
 -= 4;

2448 
u32
 
vÆ
 = 0;

2449 
	`mem˝y
(&
vÆ
, 
±r
, 
size
);

2450 
	`MSDC_FIFO_WRITE32
(
vÆ
);

2451 
size
 = 0;

2457  
îr
;

2458 
	}
}

2460 
	$msdc_pio_wrôe
(
mmc_ho°
 *
ho°
, 
u32
 *
±r
, u32 
size
)

2462 
îr
 = 
MMC_ERR_NONE
;

2463 
msdc_¥iv_t
 *
¥iv
 = 
ho°
->priv;

2465 
¥iv
->
pio_bôs
) {

2467 
îr
 = 
	`msdc_pio_wrôe_w‹d
(
ho°
, (
u32
*)
±r
, 
size
);

2470 
îr
 = 
	`msdc_pio_wrôe_hw‹d
(
ho°
, (
u16
*)
±r
, 
size
);

2473 
îr
 = 
	`msdc_pio_wrôe_byã
(
ho°
, (
u8
*)
±r
, 
size
);

2477 i‡(
îr
 !
MMC_ERR_NONE
) {

2478 
	`msdc_ab‹t
(
ho°
);

2479 
	`¥ötf
("[SD%d] %d-bô PIO WrôêEº‹ (%d)\n", 
ho°
->
id
,

2480 
¥iv
->
pio_bôs
, 
îr
);

2483  
îr
;

2484 
	}
}

2486 
	$msdc_pio_i‹w
(
mmc_ˇrd
 *
ˇrd
, 
wrôe
, 
‚
,

2487 
addr
, 
ö¸_addr
, 
u8
 *
buf
, 
blocks
, 
blksz
)

2489 
îr
;

2490 
mmc_ho°
 *
ho°
 = 
ˇrd
->host;

2491 
mmc_comm™d
 
cmd
;

2493 
	`mem£t
(&
cmd
, 0, (
mmc_comm™d
));

2495 
cmd
.
›code
 = 
SD_IO_RW_EXTENDED
;

2496 
cmd
.
¨g
 = 
wrôe
 ? 0x80000000 : 0x00000000;

2497 
cmd
.
¨g
 |
‚
 << 28;

2498 
cmd
.
¨g
 |
ö¸_addr
 ? 0x04000000 : 0x00000000;

2499 
cmd
.
¨g
 |
addr
 << 9;

2500 i‡(
blocks
 =1 && 
blksz
 <= 512) {

2501 
cmd
.
¨g
 |(
blksz
 == 512) ? 0 : blksz;

2503 
cmd
.
¨g
 |0x08000000 | 
blocks
;

2505 
cmd
.
r•typ
 = 
RESP_R5
;

2506 
cmd
.
ªåõs
 = 
CMD_RETRIES
;

2507 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

2509 
	`msdc_˛r_fifo
(
ho°
);

2510 
	`msdc_£t_blknum
(
ho°
, 
blocks
);

2511 
	`msdc_£t_blkÀn
(
ho°
, 
blksz
);

2512 
îr
 = 
	`msdc_cmd
(
ho°
, &
cmd
);

2514 i‡(
îr
)

2515  
îr
;

2517 i‡(
cmd
.
ª•
[0] & 
R5_ERROR
)

2518  
MMC_ERR_FAILED
;

2519 i‡(
cmd
.
ª•
[0] & 
R5_FUNCTION_NUMBER
)

2520  
MMC_ERR_INVALID
;

2521 i‡(
cmd
.
ª•
[0] & 
R5_OUT_OF_RANGE
)

2522  
MMC_ERR_INVALID
;

2524 i‡(
wrôe
) {

2525 
îr
 = 
	`msdc_pio_wrôe
(
ho°
, (
u32
*)
buf
, 
blocks
 * 
blksz
);

2527 
îr
 = 
	`msdc_pio_ªad
(
ho°
, (
u32
*)
buf
, 
blocks
 * 
blksz
);

2532 i‡(!
îr
 && 
blocks
 > 1) {

2533 
mmc_comm™d
 
ab‹t
;

2534 
	`mem£t
(&
ab‹t
, 0, (
mmc_comm™d
));

2535 
ab‹t
.
›code
 = 
SD_IO_RW_DIRECT
;

2536 
ab‹t
.
¨g
 = 0x80000000;

2537 
ab‹t
.
¨g
 |= 0 << 28;

2538 
ab‹t
.
¨g
 |
SDIO_CCCR_ABORT
 << 9;

2539 
ab‹t
.
¨g
 |= 0;

2540 
ab‹t
.
r•typ
 = 
RESP_R1B
;

2541 
ab‹t
.
ªåõs
 = 
CMD_RETRIES
;

2542 
ab‹t
.
timeout
 = 
CMD_TIMEOUT
;

2544 
îr
 = 
	`msdc_cmd
(
ho°
, &
ab‹t
);

2548  
îr
;

2549 
	}
}

2551 
	$msdc_pio_bªad
(
mmc_ho°
 *
ho°
, 
uch¨
 *
d°
, 
ul⁄g
 
§c
, ul⁄g 
nblks
)

2553 
msdc_¥iv_t
 *
¥iv
 = (msdc_¥iv_t*)
ho°
->priv;

2554 
u32
 
ba£
 = 
ho°
->base;

2555 
u32
 
blksz
 = 
ho°
->
blkÀn
;

2556 
îr
 = 
MMC_ERR_NONE
, 
dîr
 = MMC_ERR_NONE;

2557 
mu…i
;

2558 
mmc_comm™d
 
cmd
;

2559 
mmc_comm™d
 
°›
;

2560 
ul⁄g
 *
±r
 = (ul⁄g *)
d°
;

2562 
	`MSG
(
OPS
, "[SD%d] Ród d©®%d byã†‰om 0x%x\n", 
ho°
->
id
, 
nblks
 * 
blksz
, 
§c
);

2564 
mu…i
 = 
nblks
 > 1 ? 1 : 0;

2566 
	`MSDC_CLR_FIFO
();

2573 i‡(
	`mmc_ˇrd_ddr
(
ho°
->
ˇrd
)) {

2574 
	`MSDC_SET_FIELD
(
MSDC_IOCON
, 
MSDC_IOCON_DSPL
, 
MSDC_SMPL_RISING
);

2578 
	`msdc_£t_blknum
(
ho°
, 
nblks
);

2579 
	`msdc_£t_blkÀn
(
ho°
, 
blksz
);

2580 
	`msdc_£t_timeout
(
ho°
, 100000000, 0);

2583 
cmd
.
›code
 = 
mu…i
 ? 
MMC_CMD_READ_MULTIPLE_BLOCK
 : 
MMC_CMD_READ_SINGLE_BLOCK
;

2584 
cmd
.
r•typ
 = 
RESP_R1
;

2585 
cmd
.
¨g
 = 
§c
;

2586 
cmd
.
ªåõs
 = 0;

2587 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

2588 
îr
 = 
	`msdc_cmd
(
ho°
, &
cmd
);

2590 i‡(
îr
 !
MMC_ERR_NONE
)

2591 
d⁄e
;

2593 
îr
 = 
dîr
 = 
	`msdc_pio_ªad
(
ho°
, (
u32
*)
±r
, 
nblks
 * 
blksz
);

2595 i‡(
mu…i
 && (
¥iv
->
autocmd
 == 0)) {

2596 
°›
.
›code
 = 
MMC_CMD_STOP_TRANSMISSION
;

2597 
°›
.
r•typ
 = 
RESP_R1B
;

2598 
°›
.
¨g
 = 0;

2599 
°›
.
ªåõs
 = 
CMD_RETRIES
;

2600 
°›
.
timeout
 = 
CMD_TIMEOUT
;

2601 
îr
 = 
	`msdc_cmd
(
ho°
, &
°›
Ë!
MMC_ERR_NONE
 ? 
MMC_ERR_FAILED
 :Érr;

2604 
d⁄e
:

2605 i‡(
îr
 !
MMC_ERR_NONE
) {

2606 i‡(
dîr
 !
MMC_ERR_NONE
) {

2607 
	`¥ötf
("[SD%d] Ród d©®îr‹ (%d)\n", 
ho°
->
id
, 
dîr
);

2608 
	`msdc_ab‹t_h™dÀr
(
ho°
, 1);

2610 
	`¥ötf
("[SD%d] RódÉº‹ (%d)\n", 
ho°
->
id
, 
îr
);

2613  (
dîr
 =
MMC_ERR_NONE
Ë? 
îr
 : derr;

2614 
	}
}

2616 
	$msdc_pio_bwrôe
(
mmc_ho°
 *
ho°
, 
ul⁄g
 
d°
, 
uch¨
 *
§c
, ul⁄g 
nblks
)

2618 
msdc_¥iv_t
 *
¥iv
 = (msdc_¥iv_t*)
ho°
->priv;

2619 
u32
 
ba£
 = 
ho°
->base;

2620 
îr
 = 
MMC_ERR_NONE
, 
dîr
 = MMC_ERR_NONE;

2621 
mu…i
;

2622 
u32
 
blksz
 = 
ho°
->
blkÀn
;

2623 
mmc_comm™d
 
cmd
;

2624 
mmc_comm™d
 
°›
;

2625 
ul⁄g
 *
±r
 = (ul⁄g *)
§c
;

2627 
	`MSG
(
OPS
, "[SD%d] Wrôêd©®%d byã†tÿ0x%x\n", 
ho°
->
id
, 
nblks
 * 
blksz
, 
d°
);

2629 
mu…i
 = 
nblks
 > 1 ? 1 : 0;

2631 
	`MSDC_CLR_FIFO
();

2638 i‡(
	`mmc_ˇrd_ddr
(
ho°
->
ˇrd
)) {

2639 
	`MSDC_SET_FIELD
(
MSDC_IOCON
, 
MSDC_IOCON_DSPL
, 
MSDC_SMPL_FALLING
);

2643 
	`msdc_£t_blknum
(
ho°
, 
nblks
);

2644 
	`msdc_£t_blkÀn
(
ho°
, 
blksz
);

2649 
cmd
.
›code
 = 
mu…i
 ? 
MMC_CMD_WRITE_MULTIPLE_BLOCK
 : 
MMC_CMD_WRITE_BLOCK
;

2650 
cmd
.
r•typ
 = 
RESP_R1
;

2651 
cmd
.
¨g
 = 
d°
;

2652 
cmd
.
ªåõs
 = 0;

2653 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

2654 
îr
 = 
	`msdc_cmd
(
ho°
, &
cmd
);

2656 i‡(
îr
 !
MMC_ERR_NONE
)

2657 
d⁄e
;

2659 
îr
 = 
dîr
 = 
	`msdc_pio_wrôe
(
ho°
, (
u32
*)
±r
, 
nblks
 * 
blksz
);

2661 i‡(
mu…i
 && (
¥iv
->
autocmd
 == 0)) {

2662 
°›
.
›code
 = 
MMC_CMD_STOP_TRANSMISSION
;

2663 
°›
.
r•typ
 = 
RESP_R1B
;

2664 
°›
.
¨g
 = 0;

2665 
°›
.
ªåõs
 = 
CMD_RETRIES
;

2666 
°›
.
timeout
 = 
CMD_TIMEOUT
;

2667 
îr
 = 
	`msdc_cmd
(
ho°
, &
°›
Ë!
MMC_ERR_NONE
 ? 
MMC_ERR_FAILED
 :Érr;

2670 
d⁄e
:

2671 i‡(
îr
 !
MMC_ERR_NONE
) {

2672 i‡(
dîr
 !
MMC_ERR_NONE
) {

2673 
	`¥ötf
("[SD%d] Wrôêd©®îr‹ (%d)\n", 
ho°
->
id
, 
dîr
);

2674 
	`msdc_ab‹t_h™dÀr
(
ho°
, 1);

2676 
	`¥ötf
("[SD%d] Wrôêîr‹ (%d)\n", 
ho°
->
id
, 
îr
);

2679  (
dîr
 =
MMC_ERR_NONE
Ë? 
îr
 : derr;

2680 
	}
}

2682 
	$msdc_i‹w
(
mmc_ˇrd
 *
ˇrd
, 
wrôe
, 
‚
,

2683 
addr
, 
ö¸_addr
, 
u8
 *
buf
, 
blocks
, 
blksz
)

2685 
îr
;

2686 
mmc_ho°
 *
ho°
 = 
ˇrd
->host;

2687 
msdc_¥iv_t
 *
¥iv
 = (msdc_¥iv_t*)
ho°
->priv;

2689 
	`MSG
(
OPS
, "[SD%d] IO: wr(%d) fn(%xh)ádr(%xh), inc(%d), blks(%d), blksz(%d)\n",

2690 
ho°
->
id
, 
wrôe
, 
‚
, 
addr
, 
ö¸_addr
, 
blocks
, 
blksz
);

2693 i‡(
¥iv
->
cfg
.
mode
 =
MSDC_MODE_PIO
)

2694 
îr
 = 
	`msdc_pio_i‹w
(
ˇrd
, 
wrôe
, 
‚
, 
addr
, 
ö¸_addr
, 
buf
, 
blocks
, 
blksz
);

2696 
îr
 = 
	`msdc_dma_i‹w
(
ˇrd
, 
wrôe
, 
‚
, 
addr
, 
ö¸_addr
, 
buf
, 
blocks
, 
blksz
);

2698  
îr
;

2699 
	}
}

2701 
	$msdc_°ªam_bªad
(
mmc_ho°
 *
ho°
, 
uch¨
 *
d°
, 
ul⁄g
 
§c
, ul⁄g 
nblks
)

2703 
mmc_ˇrd
 *
ˇrd
 = 
ho°
->card;

2704 
msdc_¥iv_t
 *
¥iv
 = (msdc_¥iv_t*)
ho°
->priv;

2705 
u32
 
ba£
 = 
ho°
->base;

2706 
u32
 
blksz
 = 
ho°
->
blkÀn
;

2707 
îr
 = 
MMC_ERR_NONE
;

2708 
mmc_comm™d
 
cmd
;

2709 
ul⁄g
 *
±r
 = (ul⁄g *)
d°
;

2711 i‡(!(
ˇrd
->
csd
.
cmd˛ass
 & 
CCC_STREAM_READ
)) {

2712 
	`¥ötf
("[SD%d]<WARNING>: C¨d d€¢'àsuµ‹à°ªamÑód\n", 
ho°
->
id
);

2716 
	`MSG
(
OPS
, "[SD%d] SåómÑód d©®%d byã†‰om 0x%x\n", 
ho°
->
id
,

2717 
nblks
 * 
blksz
, 
§c
);

2719 
	`MSDC_CLR_FIFO
();

2721 
	`msdc_£t_blknum
(
ho°
, 1);

2722 
	`msdc_£t_blkÀn
(
ho°
, 
blksz
);

2723 
	`msdc_£t_timeout
(
ho°
, 100000000, 0);

2726 
cmd
.
›code
 = 
MMC_CMD_READ_DAT_UNTIL_STOP
;

2727 
cmd
.
r•typ
 = 
RESP_R1
;

2728 
cmd
.
¨g
 = 
§c
;

2729 
cmd
.
ªåõs
 = 0;

2730 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

2731 
îr
 = 
	`msdc_cmd
(
ho°
, &
cmd
);

2733 i‡(
îr
 !
MMC_ERR_NONE
)

2734 
d⁄e
;

2736 
îr
 = 
	`msdc_pio_ªad
(
ho°
, (
u32
*)
±r
, 
nblks
 * 
blksz
);

2737 i‡(
¥iv
->
autocmd
 == 0) {

2738 
cmd
.
›code
 = 
MMC_CMD_STOP_TRANSMISSION
;

2739 
cmd
.
r•typ
 = 
RESP_R1B
;

2740 
cmd
.
¨g
 = 0;

2741 
cmd
.
ªåõs
 = 
CMD_RETRIES
;

2742 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

2743 
¥iv
->
°ªam_°›
 = 1;

2744 
îr
 = 
	`msdc_cmd
(
ho°
, &
cmd
Ë!
MMC_ERR_NONE
 ? 
MMC_ERR_FAILED
 :Érr;

2745 
¥iv
->
°ªam_°›
 = 0;

2748 
d⁄e
:

2749 i‡(
îr
 !
MMC_ERR_NONE
) {

2750 
	`¥ötf
("[SD%d] SåómÑód d©®îr‹ %d\n", 
ho°
->
id
, 
îr
);

2753  
îr
;

2754 
	}
}

2756 
	$msdc_°ªam_bwrôe
(
mmc_ho°
 *
ho°
, 
ul⁄g
 
d°
, 
uch¨
 *
§c
, ul⁄g 
nblks
)

2758 
mmc_ˇrd
 *
ˇrd
 = 
ho°
->card;

2759 
msdc_¥iv_t
 *
¥iv
 = (msdc_¥iv_t*)
ho°
->priv;

2760 
u32
 
ba£
 = 
ho°
->base;

2761 
u32
 
blksz
 = 
ho°
->
blkÀn
;

2762 
îr
 = 
MMC_ERR_NONE
;

2763 
mmc_comm™d
 
cmd
;

2764 
ul⁄g
 *
±r
 = (ul⁄g *)
§c
;

2766 i‡(!(
ˇrd
->
csd
.
cmd˛ass
 & 
CCC_STREAM_WRITE
)) {

2767 
	`¥ötf
("[SD%d]<WARNING>: C¨d d€¢'àsuµ‹à°ªam wrôe\n", 
ho°
->
id
);

2771 
	`MSG
(
OPS
, "[SD%d] Såóm wrôêd©®%d byã†tÿ0x%x\n", 
ho°
->
id
,

2772 
nblks
 * 
blksz
, 
d°
);

2774 
	`MSDC_CLR_FIFO
();

2776 
	`msdc_£t_blknum
(
ho°
, 1);

2777 
	`msdc_£t_blkÀn
(
ho°
, 
blksz
);

2778 
	`msdc_£t_timeout
(
ho°
, 100000000, 0);

2781 
cmd
.
›code
 = 
MMC_CMD_WRITE_DAT_UNTIL_STOP
;

2782 
cmd
.
r•typ
 = 
RESP_R1
;

2783 
cmd
.
¨g
 = 
d°
;

2784 
cmd
.
ªåõs
 = 0;

2785 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

2786 
îr
 = 
	`msdc_cmd
(
ho°
, &
cmd
);

2788 i‡(
îr
 !
MMC_ERR_NONE
)

2789 
d⁄e
;

2791 
îr
 = 
	`msdc_pio_wrôe
(
ho°
, (
u32
*)
±r
, 
nblks
 * 
blksz
);

2792 i‡(
¥iv
->
autocmd
 == 0) {

2793 
cmd
.
›code
 = 
MMC_CMD_STOP_TRANSMISSION
;

2794 
cmd
.
r•typ
 = 
RESP_R1B
;

2795 
cmd
.
¨g
 = 0;

2796 
cmd
.
ªåõs
 = 
CMD_RETRIES
;

2797 
cmd
.
timeout
 = 
CMD_TIMEOUT
;

2798 
¥iv
->
°ªam_°›
 = 1;

2799 
îr
 = 
	`msdc_cmd
(
ho°
, &
cmd
Ë!
MMC_ERR_NONE
 ? 
MMC_ERR_FAILED
 :Érr;

2800 
¥iv
->
°ªam_°›
 = 0;

2803 
d⁄e
:

2804 i‡(
îr
 !
MMC_ERR_NONE
) {

2805 
	`¥ötf
("[SD%d] Såóm wrôêd©®îr‹ %d\n", 
ho°
->
id
, 
îr
);

2808  
îr
;

2809 
	}
}

2811 
	$msdc_c⁄fig_˛k§c
(
mmc_ho°
 *
ho°
, 
˛k_sour˚_t
 
˛k§c
)

2814 #i‡
	`deföed
 (
MT7620_FPGA_BOARD
Ë|| deföed (
MT7620_ASIC_BOARD
Ë|| deföed (
MT7628_FPGA_BOARD
Ë|| deföed (
MT7628_ASIC_BOARD
)

2815 
u32
 
˛ks
[] = {48000000};

2816 #ñi‡
	`deföed
 (
MT7621_FPGA_BOARD
Ë|| deföed (
MT7621_ASIC_BOARD
)

2817 
u32
 
˛ks
[] = {50000000};

2819 
u32
 
tmp
;

2820 
˛k_sour˚_t
 
tmp_˛k§c
 = 
˛k§c
;

2823 
	`MSDC_SET_BIT32
(0xc1000010, 1 << (15 + 
ho°
->
id
));

2828 
	`mdñay
(1);

2830 
tmp
 = 
	`MSDC_READ32
(
PERI_MSDC_SRCSEL
);

2832 
ho°
->
id
){

2833 0 : 
tmp_˛k§c
 =Åmp_clksrc << 0;

2834 
tmp
 &= ~0x3;

2836 1 : 
tmp_˛k§c
 =Åmp_clksrc << 3;

2837 
tmp
 &= ~(0x3 << 3);

2839 2 : 
tmp_˛k§c
 =Åmp_clksrc << 5;

2840 
tmp
 &= ~(0x3 << 5);

2842 3 : 
tmp_˛k§c
 =Åmp_clksrc << 7;

2843 
tmp
 &= ~(0x3 << 7);

2848 
tmp
 |
tmp_˛k§c
;

2849 
	`MSDC_WRITE32
(
PERI_MSDC_SRCSEL
, 
tmp
);

2852 
ho°
->
˛k§c
 = clksrc;

2853 
ho°
->
˛k
 = 
˛ks
[
˛k§c
];

2856 
	}
}

2858 
	$msdc_c⁄fig_˛ock
(
mmc_ho°
 *
ho°
, 
ddr
, 
u32
 
hz
)

2860 
msdc_¥iv_t
 *
¥iv
 = 
ho°
->priv;

2861 
u32
 
ba£
 = 
ho°
->base;

2862 
u32
 
mode
;

2863 
u32
 
div
;

2864 
u32
 
s˛k
;

2865 
u32
 
‹ig_˛k§c
 = 
ho°
->
˛k§c
;

2867 #i‡
	`deföed
 (
MT7621_FPGA_BOARD
Ë|| deföed (
MT7628_FPGA_BOARD
)

2868 
mode
 = 0x0;

2869 i‡(
hz
 >(
ho°
->
˛k
 >> 1)) {

2870 
div
 = 0;

2871 
s˛k
 = 
ho°
->
˛k
 >> 1;

2873 
div
 = (
ho°
->
˛k
 + ((
hz
 << 2) - 1)) / (hz << 2);

2874 
s˛k
 = (
ho°
->
˛k
 >> 2Ë/ 
div
;

2877 i‡(
ddr
) {

2878 
mode
 = 0x2;

2879 i‡(
hz
 >(
ho°
->
˛k
 >> 2)) {

2880 
div
 = 0;

2881 
s˛k
 = 
ho°
->
˛k
 >> 2;

2883 
div
 = (
ho°
->
˛k
 + ((
hz
 << 2) - 1)) / (hz << 2);

2884 
s˛k
 = (
ho°
->
˛k
 >> 2Ë/ 
div
;

2885 
div
 = (div >> 1);

2887 } i‡(
hz
 >
ho°
->
˛k
) {

2888 
mode
 = 0x1;

2889 
div
 = 0;

2890 
s˛k
 = 
ho°
->
˛k
;

2892 
mode
 = 0x0;

2893 i‡(
hz
 >(
ho°
->
˛k
 >> 1)) {

2894 
div
 = 0;

2895 
s˛k
 = 
ho°
->
˛k
 >> 1;

2897 
div
 = (
ho°
->
˛k
 + ((
hz
 << 2) - 1)) / (hz << 2);

2898 
s˛k
 = (
ho°
->
˛k
 >> 2Ë/ 
div
;

2902 
ho°
->
s˛k
 = sclk;

2904 i‡(
hz
 > 100000000 && 
	`mmc_ˇrd_uhs1
(
ho°
->
ˇrd
)) {

2905 
	`MSDC_SET_FIELD
(
MSDC_PAD_CTL0
, 
MSDC_PAD_CTL0_CLKDRVN
, 
msdc_ˇp
.
˛k_18v_drv
);

2906 
	`MSDC_SET_FIELD
(
MSDC_PAD_CTL0
, 
MSDC_PAD_CTL0_CLKDRVP
, 
msdc_ˇp
.
˛k_18v_drv
);

2907 
	`MSDC_SET_FIELD
(
MSDC_PAD_CTL1
, 
MSDC_PAD_CTL1_CMDDRVN
, 
msdc_ˇp
.
cmd_18v_drv
);

2908 
	`MSDC_SET_FIELD
(
MSDC_PAD_CTL1
, 
MSDC_PAD_CTL1_CMDDRVP
, 
msdc_ˇp
.
cmd_18v_drv
);

2909 
	`MSDC_SET_FIELD
(
MSDC_PAD_CTL2
, 
MSDC_PAD_CTL2_DATDRVN
, 
msdc_ˇp
.
d©_18v_drv
);

2910 
	`MSDC_SET_FIELD
(
MSDC_PAD_CTL2
, 
MSDC_PAD_CTL2_DATDRVP
, 
msdc_ˇp
.
d©_18v_drv
);

2912 i‡(
	`mmc_ˇrd_ddr
(
ho°
->
ˇrd
) == 0)

2913 
	`MSDC_SET_FIELD
(
MSDC_PATCH_BIT0
,
MSDC_CKGEN_MSDC_CK_SEL
, 1);

2916 
	`msdc_c⁄fig_˛k§c
(
ho°
, 
MSDC_CLKSRC_NONE
);

2919 
	`MSDC_SET_FIELD
(
MSDC_CFG
, 
MSDC_CFG_CKMOD
, 
mode
);

2920 
	`MSDC_SET_FIELD
(
MSDC_CFG
, 
MSDC_CFG_CKDIV
, 
div
);

2922 
	`msdc_c⁄fig_˛k§c
(
ho°
, 
‹ig_˛k§c
);

2925 !(
	`MSDC_READ32
(
MSDC_CFG
Ë& 
MSDC_CFG_CKSTB
));

2927 
	`¥ötf
("[SD%d] SET_CLK(%dkHz): SCLK(%dkHz) MODE(%d) DDR(%d) DIV(%d) DS(%d) RS(%d)\n",

2928 
ho°
->
id
, 
hz
/1000, 
s˛k
/1000, 
mode
, 
ddr
 > 0 ? 1 : 0, 
div
, 
¥iv
->
dsm∂
,Öriv->
rsm∂
);

2929 
	}
}

2931 
	$msdc_c⁄fig_bus
(
mmc_ho°
 *
ho°
, 
u32
 
width
)

2933 
u32
 
ba£
 = 
ho°
->base;

2934 
u32
 
vÆ
 = 
	`MSDC_READ32
(
SDC_CFG
);

2936 
vÆ
 &~
SDC_CFG_BUSWIDTH
;

2938 
width
) {

2940 
width
 = 
HOST_BUS_WIDTH_1
;

2941 
HOST_BUS_WIDTH_1
:

2942 
vÆ
 |(
MSDC_BUS_1BITS
 << 16);

2944 
HOST_BUS_WIDTH_4
:

2945 
vÆ
 |(
MSDC_BUS_4BITS
 << 16);

2947 
HOST_BUS_WIDTH_8
:

2948 
vÆ
 |(
MSDC_BUS_8BITS
 << 16);

2951 
	`MSDC_WRITE32
(
SDC_CFG
, 
vÆ
);

2953 
	`¥ötf
("[SD%d] Bu†Width: %d\n", 
ho°
->
id
, 
width
);

2954 
	}
}

2956 
	$msdc_c⁄fig_pö
(
mmc_ho°
 *
ho°
, 
mode
)

2958 
u32
 
ba£
 = 
ho°
->base;

2960 
	`MSG
(
CFG
, "[SD%d] Pins mode(%d),Çone(0), down(1), up(2), keep(3)\n",

2961 
ho°
->
id
, 
mode
);

2963 
mode
) {

2964 
MSDC_PIN_PULL_UP
:

2965 
	`MSDC_SET_FIELD
(
MSDC_PAD_CTL1
, 
MSDC_PAD_CTL1_CMDPU
, 1);

2966 
	`MSDC_SET_FIELD
(
MSDC_PAD_CTL1
, 
MSDC_PAD_CTL1_CMDPD
, 0);

2967 
	`MSDC_SET_FIELD
(
MSDC_PAD_CTL2
, 
MSDC_PAD_CTL2_DATPU
, 1);

2968 
	`MSDC_SET_FIELD
(
MSDC_PAD_CTL2
, 
MSDC_PAD_CTL2_DATPD
, 0);

2970 
MSDC_PIN_PULL_DOWN
:

2971 
	`MSDC_SET_FIELD
(
MSDC_PAD_CTL1
, 
MSDC_PAD_CTL1_CMDPU
, 0);

2972 
	`MSDC_SET_FIELD
(
MSDC_PAD_CTL1
, 
MSDC_PAD_CTL1_CMDPD
, 1);

2973 
	`MSDC_SET_FIELD
(
MSDC_PAD_CTL2
, 
MSDC_PAD_CTL2_DATPU
, 0);

2974 
	`MSDC_SET_FIELD
(
MSDC_PAD_CTL2
, 
MSDC_PAD_CTL2_DATPD
, 1);

2976 
MSDC_PIN_PULL_NONE
:

2978 
	`MSDC_SET_FIELD
(
MSDC_PAD_CTL1
, 
MSDC_PAD_CTL1_CMDPU
, 0);

2979 
	`MSDC_SET_FIELD
(
MSDC_PAD_CTL1
, 
MSDC_PAD_CTL1_CMDPD
, 0);

2980 
	`MSDC_SET_FIELD
(
MSDC_PAD_CTL2
, 
MSDC_PAD_CTL2_DATPU
, 0);

2981 
	`MSDC_SET_FIELD
(
MSDC_PAD_CTL2
, 
MSDC_PAD_CTL2_DATPD
, 0);

2984 
	}
}

2986 
	$msdc_swôch_vﬁt
(
mmc_ho°
 *
ho°
, 
vﬁt
)

2988 
u32
 
ba£
 = 
ho°
->base;

2989 
îr
 = 
MMC_ERR_FAILED
;

2990 
u32
 
timeout
 = 1000;

2991 
u32
 
°©us
;

2992 
u32
 
s˛k
 = 
ho°
->sclk;

2995 
	`WAIT_COND
(!
	`SDC_IS_BUSY
(), 
timeout
,Åimeout);

2996 i‡(
timeout
 == 0) {

2997 
îr
 = 
MMC_ERR_TIMEOUT
;

2998 
out
;

3002 i‡((
	`MSDC_READ32
(
MSDC_PS
) & ((1 << 24) | (0xF << 16))) == 0) {

3005 
	`msdc_c⁄fig_pö
(
ho°
, 
MSDC_PIN_PULL_NONE
);

3008 
	`msdc_£t_ho°_Àvñ_pwr
(1);

3011 
	`mdñay
(10);

3014 
	`msdc_c⁄fig_˛ock
(
ho°
, 0, 10000000);

3017 
	`msdc_c⁄fig_pö
(
ho°
, 
MSDC_PIN_PULL_UP
);

3018 
	`mdñay
(5);

3021 
	`MSDC_SET_BIT32
(
MSDC_CFG
, 
MSDC_CFG_BV18SDT
);

3024 
	`mdñay
(1);

3026 (
°©us
 = 
	`MSDC_READ32
(
MSDC_CFG
)Ë& 
MSDC_CFG_BV18SDT
);

3028 i‡(
°©us
 & 
MSDC_CFG_BV18PSS
)

3029 
îr
 = 
MMC_ERR_NONE
;

3032 
	`msdc_c⁄fig_˛ock
(
ho°
, 0, 
s˛k
);

3035 
out
:

3037  
îr
;

3038 
	}
}

3041 
	$msdc_˛ock
(
mmc_ho°
 *
ho°
, 
⁄
)

3044 if(
⁄
)

3045 
	`hwE«bÀClock
(
ho°
->
id
+
MT65XX_PDN_PERI_MSDC0
,"MSDC");

3047 
	`hwDißbÀClock
(
ho°
->
id
+
MT65XX_PDN_PERI_MSDC0
,"MSDC");

3048 
	`MSG
(
CFG
, "[SD%d] Tu∫ %†%†˛ock \n", 
ho°
->
id
, 
⁄
 ? "on" : "off", "host");

3050 
	}
}

3052 
	$msdc_ho°_powî
(
mmc_ho°
 *
ho°
, 
⁄
)

3054 
	`MSG
(
CFG
, "[SD%d] Tu∫ %†%†powî \n", 
ho°
->
id
, 
⁄
 ? "on" : "off", "host");

3056 i‡(
⁄
) {

3057 
	`msdc_c⁄fig_pö
(
ho°
, 
MSDC_PIN_PULL_UP
);

3058 
	`msdc_£t_ho°_pwr
(1);

3059 
	`msdc_˛ock
(
ho°
, 1);

3061 
	`msdc_˛ock
(
ho°
, 0);

3062 
	`msdc_£t_ho°_pwr
(0);

3063 
	`msdc_c⁄fig_pö
(
ho°
, 
MSDC_PIN_PULL_DOWN
);

3065 
	}
}

3067 
	$msdc_ˇrd_powî
(
mmc_ho°
 *
ho°
, 
⁄
)

3069 
	`MSG
(
CFG
, "[SD%d] Tu∫ %†%†powî \n", 
ho°
->
id
, 
⁄
 ? "on" : "off", "card");

3071 i‡(
⁄
) {

3072 
	`msdc_£t_ˇrd_pwr
(1);

3074 
	`msdc_£t_ˇrd_pwr
(0);

3076 
	}
}

3078 
	$msdc_powî
(
mmc_ho°
 *
ho°
, 
u8
 
mode
)

3080 i‡(
mode
 =
MMC_POWER_ON
 || modê=
MMC_POWER_UP
) {

3081 
	`msdc_ho°_powî
(
ho°
, 1);

3082 
	`msdc_ˇrd_powî
(
ho°
, 1);

3084 
	`msdc_ˇrd_powî
(
ho°
, 0);

3085 
	`msdc_ho°_powî
(
ho°
, 0);

3087 
	}
}

3088 #i‡
MSDC_USE_IRQ


3089 
	$msdc_ªmove_dëe˘ed
(
mmc_ho°
 *
ho°
)

3091 
	`msdc_c⁄fig_bus
(
ho°
,
HOST_BUS_WIDTH_1
);

3092 
	`msdc_c⁄fig_˛ock
(
ho°
,0,
MSDC_MIN_SCLK
);

3093 
	`MSDC_SET_FIELD
(
PERI_MSDC_SRCSEL
,
MSDC1_IRQ_SEL
,1);

3094 
	`IRQSísôivôy
(
msdc_úq_löe
[(
ho°
->
id
)], 
EDGE_SENSITIVE
);

3095 
	`msdc_powî
(
ho°
,
MMC_POWER_OFF
);

3096 
ho°
->
ˇrd_dëe˘_Êag
 = 0;

3097 
	}
}

3100 
	$msdc_tu√_debug
(
mmc_ho°
 *
ho°
, 
íabÀ
)

3102 
msdc_tu√_dbg
[
ho°
->
id
] = 
íabÀ
;

3103 
	}
}

3105 #i‡
MSDC_USE_CM_TUNING


3107 
	$msdc_tu√_cmdr•
(
mmc_ho°
 *
ho°
, 
mmc_comm™d
 *
cmd
)

3109 
u32
 
ba£
 = 
ho°
->base;

3110 
u32
 
rsm∂
, 
ºdly
, 
£l
 = 1;

3111 
u32
 
cur_rsm∂
, 
‹ig_rsm∂
, 
cur_ºdly
, 
‹ig_ºdly
;

3112 
u32
 
ck£l
, 
cur_ck£l
, 
‹ig_ck£l
;

3113 
u32
 
dl_ck£l
, 
cur_dl_ck£l
, 
‹ig_dl_ck£l
, 
œtch_£l˙t
;

3114 
u32
 
times
 = 0;

3115 
ªsu…
 = 
MMC_ERR_FAILED
;

3117 i‡(
	`mmc_ˇrd_uhs1
(
ho°
->
ˇrd
Ë&& ho°->
s˛k
 > 104000000)

3118 
£l
 = 2;

3120 
	`MSDC_GET_FIELD
(
MSDC_PATCH_BIT0
, 
MSDC_CKGEN_MSDC_CK_SEL
, 
‹ig_ck£l
);

3121 
	`MSDC_GET_FIELD
(
MSDC_PATCH_BIT0
, 
MSDC_INT_DAT_LATCH_CK_SEL
, 
‹ig_dl_ck£l
);

3122 
	`MSDC_GET_FIELD
(
MSDC_IOCON
, 
MSDC_IOCON_RSPL
, 
‹ig_rsm∂
);

3123 
	`MSDC_GET_FIELD
(
MSDC_PAD_TUNE
, 
MSDC_PAD_TUNE_CMDRRDLY
, 
‹ig_ºdly
);

3125 
ck£l
 = 0; ck£»< 
£l
; cksel) {

3126 
cur_ck£l
 = (
‹ig_ck£l
 + 
ck£l
) % 2;

3127 i‡(
	`mmc_ˇrd_uhs1
(
ho°
->
ˇrd
Ë&& ho°->
s˛k
 > 104000000)

3128 
cur_ck£l
 = 1;

3129 
	`MSDC_SET_FIELD
(
MSDC_PATCH_BIT0
,
MSDC_CKGEN_MSDC_CK_SEL
, 
cur_ck£l
);

3130 
œtch_£l˙t
 = (
cur_ck£l
) ? 8 : 1;

3131 
dl_ck£l
 = 0; dl_ck£»< 
œtch_£l˙t
; dl_cksel++) {

3132 
cur_dl_ck£l
 = (
‹ig_dl_ck£l
 + 
dl_ck£l
Ë% 
œtch_£l˙t
;

3133 
	`MSDC_SET_FIELD
(
MSDC_PATCH_BIT0
, 
MSDC_INT_DAT_LATCH_CK_SEL
, 
cur_dl_ck£l
);

3135 
rsm∂
 = 0;Ñsmpl < 2;Ñsmpl++) {

3136 
cur_rsm∂
 = (
‹ig_rsm∂
 + 
rsm∂
) % 2;

3137 
	`MSDC_SET_FIELD
(
MSDC_IOCON
, 
MSDC_IOCON_RSPL
, 
cur_rsm∂
);

3138 
ºdly
 = 0;Ñrdly < 32;Ñrdly++) {

3139 
cur_ºdly
 = (
‹ig_ºdly
 + 
ºdly
 + 1) % 32;

3140 
	`MSDC_SET_FIELD
(
MSDC_PAD_TUNE
, 
MSDC_PAD_TUNE_CMDRRDLY
, 
cur_ºdly
);

3141 
ªsu…
 = 
	`msdc_£nd_cmd
(
ho°
, 
cmd
);

3142 i‡(
ªsu…
 !
MMC_ERR_NONE
)

3144 
ªsu…
 = 
	`msdc_waô_r•
(
ho°
, 
cmd
);

3148 
	`¥ötf
("[SD%d] <TUNE_CMD_%d><%s> CMDRRDLY=%d, RSPL=%dh\n",

3149 
ho°
->
id
, 
times
, (
ªsu…
 =
MMC_ERR_NONE
) ?

3150 "PASS" : "FAIL", 
cur_ºdly
, 
cur_rsm∂
);

3151 
	`¥ötf
("[SD%d] <TUNE_CMD_%d><%s> CKGEN_MSDC_CK_SEL=%xh\n",

3152 
ho°
->
id
, 
times
, (
ªsu…
 =
MMC_ERR_NONE
) ?

3153 "PASS" : "FAIL", 
cur_ck£l
);

3154 
	`¥ötf
("[SD%d] <TUNE_CMD_%d><%s> INT_DAT_LATCH_CK_SEL=%xh\n",

3155 
ho°
->
id
, 
times
, (
ªsu…
 =
MMC_ERR_NONE
) ?

3156 "PASS" : "FAIL", 
cur_dl_ck£l
);

3158 i‡(
ªsu…
 =
MMC_ERR_NONE
)

3159 
d⁄e
;

3164 
d⁄e
:

3165  
ªsu…
;

3166 
	}
}

3168 
	$msdc_tu√_cmdr•
(
mmc_ho°
 *
ho°
, 
mmc_comm™d
 *
cmd
)

3170 
u32
 
ba£
 = 
ho°
->base;

3171 
u32
 
rsm∂
, 
ºdly
, 
£l
 = 0;

3172 
u32
 
cur_rsm∂
, 
‹ig_rsm∂
, 
cur_ºdly
, 
‹ig_ºdly
;

3173 
u32
 
ck£l
, 
cur_ck£l
, 
‹ig_ck£l
;

3174 
u32
 
dl_ck£l
, 
cur_dl_ck£l
, 
‹ig_dl_ck£l
, 
œtch_£l
;

3175 
u32
 
times
 = 0;

3176 
ªsu…
 = 
MMC_ERR_FAILED
;

3178 i‡(
	`mmc_ˇrd_uhs1
(
ho°
->
ˇrd
Ë&& ho°->
s˛k
 > 104000000)

3179 
£l
 = 1;

3181 
	`MSDC_GET_FIELD
(
MSDC_PATCH_BIT0
, 
MSDC_CKGEN_MSDC_CK_SEL
, 
‹ig_ck£l
);

3182 
	`MSDC_GET_FIELD
(
MSDC_PATCH_BIT0
, 
MSDC_INT_DAT_LATCH_CK_SEL
, 
‹ig_dl_ck£l
);

3183 
	`MSDC_GET_FIELD
(
MSDC_IOCON
, 
MSDC_IOCON_RSPL
, 
‹ig_rsm∂
);

3184 
	`MSDC_GET_FIELD
(
MSDC_PAD_TUNE
, 
MSDC_PAD_TUNE_CMDRRDLY
, 
‹ig_ºdly
);

3186 
ck£l
 = 0;

3188 
cur_ck£l
 = (
‹ig_ck£l
 + 
ck£l
) % 2;

3189 
œtch_£l
 = 
cur_ck£l
 ? 8 : 1;

3190 
dl_ck£l
 = 0;

3192 
ºdly
 = 0;

3194 
rsm∂
 = 0;Ñsmpl < 2;Ñsmpl++) {

3195 
cur_rsm∂
 = (
‹ig_rsm∂
 + 
rsm∂
) % 2;

3196 
	`MSDC_SET_FIELD
(
MSDC_IOCON
, 
MSDC_IOCON_RSPL
, 
cur_rsm∂
);

3197 i‡(!
msdc_tu√_dbg
[
ho°
->
id
]) {

3198 
ªsu…
 = 
	`msdc_£nd_cmd
(
ho°
, 
cmd
);

3199 i‡(
ªsu…
 !
MMC_ERR_NONE
)

3201 
ªsu…
 = 
	`msdc_waô_r•
(
ho°
, 
cmd
);

3203 
ªsu…
 = 
MMC_ERR_BADCRC
;

3207 
u32
 
t_ºdly
, 
t_rsm∂
, 
t_ck£l
, 
t_dl_ck£l
;

3209 
	`MSDC_GET_FIELD
(
MSDC_PATCH_BIT0
, 
MSDC_CKGEN_MSDC_CK_SEL
, 
t_ck£l
);

3210 
	`MSDC_GET_FIELD
(
MSDC_PATCH_BIT0
, 
MSDC_INT_DAT_LATCH_CK_SEL
, 
t_dl_ck£l
);

3211 
	`MSDC_GET_FIELD
(
MSDC_IOCON
, 
MSDC_IOCON_RSPL
, 
t_rsm∂
);

3212 
	`MSDC_GET_FIELD
(
MSDC_PAD_TUNE
, 
MSDC_PAD_TUNE_CMDRRDLY
, 
t_ºdly
);

3214 
times
++;

3215 
	`¥ötf
("[SD%d] <TUNE_CMD><%d><%s> CMDRRDLY=%d, RSPL=%dh\n",

3216 
ho°
->
id
, 
times
, (
ªsu…
 =
MMC_ERR_NONE
) ?

3217 "PASS" : "FAIL", 
t_ºdly
, 
t_rsm∂
);

3218 
	`¥ötf
("[SD%d] <TUNE_CMD><%d><%s> CKGEN_MSDC_CK_SEL=%xh\n",

3219 
ho°
->
id
, 
times
, (
ªsu…
 =
MMC_ERR_NONE
) ?

3220 "PASS" : "FAIL", 
t_ck£l
);

3221 
	`¥ötf
("[SD%d] <TUNE_CMD><%d><%s> INT_DAT_LATCH_CK_SEL=%xh\n",

3222 
ho°
->
id
, 
times
, (
ªsu…
 =
MMC_ERR_NONE
) ?

3223 "PASS" : "FAIL", 
t_dl_ck£l
);

3225 i‡(
ªsu…
 =
MMC_ERR_NONE
)

3226 
d⁄e
;

3228 
cur_ºdly
 = (
‹ig_ºdly
 + 
ºdly
 + 1) % 32;

3229 
	`MSDC_SET_FIELD
(
MSDC_PAD_TUNE
, 
MSDC_PAD_TUNE_CMDRRDLY
, 
cur_ºdly
);

3231 } ++
ºdly
 < 32);

3233 i‡(
œtch_£l
 =1 || 
dl_ck£l
 >=Üatch_sel)

3236 
cur_dl_ck£l
 = ++
‹ig_dl_ck£l
 % 
œtch_£l
;

3237 
	`MSDC_SET_FIELD
(
MSDC_PATCH_BIT0
, 
MSDC_INT_DAT_LATCH_CK_SEL
, 
cur_dl_ck£l
);

3238 
dl_ck£l
++;

3241 i‡(
£l
 =1 || 
ck£l
 >= sel)

3244 
	`MSDC_SET_FIELD
(
MSDC_PATCH_BIT0
, 
MSDC_CKGEN_MSDC_CK_SEL
, 
cur_ck£l
);

3245 
ck£l
++;

3248 
d⁄e
:

3249  
ªsu…
;

3250 
	}
}

3255 #i‡
MSDC_USE_RD_TUNING


3257 
	$msdc_tu√_bªad
(
mmc_ho°
 *
ho°
, 
uch¨
 *
d°
, 
ul⁄g
 
§c
, ul⁄g 
nblks
)

3259 
u32
 
ba£
 = 
ho°
->base;

3260 
u32
 
i
, 
d¸c
, 
ddr
, 
ck£l
, 
dl_ck£l
, 
rxdly
, 
£l
 = 1, 
‹ig_d¸c
;

3261 
u32
 
cur_rxdly0
, 
cur_rxdly1
;

3262 
u32
 
dsm∂
, 
cur_dsm∂
, 
‹ig_dsm∂
;

3263 
u32
 
cur_d©0
, 
cur_d©1
, 
cur_d©2
, 
cur_d©3
, 
cur_d©4
, 
cur_d©5
,

3264 
cur_d©6
, 
cur_d©7
, 
cur_ck£l
, 
cur_dl_ck£l
, 
œtch_£l˙t
;

3265 
u32
 
‹ig_d©0
, 
‹ig_d©1
, 
‹ig_d©2
, 
‹ig_d©3
, 
‹ig_d©4
, 
‹ig_d©5
,

3266 
‹ig_d©6
, 
‹ig_d©7
, 
‹ig_ck£l
, 
‹ig_dl_ck£l
;

3267 
u32
 
times
 = 0;

3268 
ªsu…
 = 
MMC_ERR_FAILED
;

3270 i‡(
	`mmc_ˇrd_uhs1
(
ho°
->
ˇrd
Ë&& ho°->
s˛k
 > 104000000)

3271 
£l
 = 2;

3273 
ddr
 = 
	`mmc_ˇrd_ddr
(
ho°
->
ˇrd
);

3275 
	`MSDC_GET_FIELD
(
MSDC_PATCH_BIT0
, 
MSDC_CKGEN_MSDC_CK_SEL
, 
‹ig_ck£l
);

3276 
	`MSDC_GET_FIELD
(
MSDC_PATCH_BIT0
, 
MSDC_INT_DAT_LATCH_CK_SEL
, 
‹ig_dl_ck£l
);

3277 
	`MSDC_GET_FIELD
(
MSDC_IOCON
, 
MSDC_IOCON_DSPL
, 
‹ig_dsm∂
);

3280 
	`MSDC_SET_FIELD
(
MSDC_IOCON
, 
MSDC_IOCON_DDLSEL
, 1);

3282 
ck£l
 = 0; ck£»< 
£l
; cksel++) {

3283 
cur_ck£l
 = (
‹ig_ck£l
 + 
ck£l
) % 2;

3284 
	`MSDC_SET_FIELD
(
MSDC_PATCH_BIT0
,
MSDC_CKGEN_MSDC_CK_SEL
, 
cur_ck£l
);

3285 
œtch_£l˙t
 = (
cur_ck£l
) ? 8 : 1;

3286 
dl_ck£l
 = 0; dl_ck£»< 
œtch_£l˙t
; dl_cksel++) {

3287 
cur_dl_ck£l
 = (
‹ig_dl_ck£l
 + 
dl_ck£l
Ë% 
œtch_£l˙t
;

3288 
	`MSDC_SET_FIELD
(
MSDC_PATCH_BIT0
, 
MSDC_INT_DAT_LATCH_CK_SEL
, 
cur_dl_ck£l
);

3290 
dsm∂
 = 0; dsmpl < 2; dsmpl++) {

3291 
cur_dsm∂
 = (
‹ig_dsm∂
 + 
dsm∂
) % 2;

3292 
	`MSDC_SET_FIELD
(
MSDC_IOCON
, 
MSDC_IOCON_DSPL
, 
cur_dsm∂
);

3294 
	`MSDC_GET_FIELD
(
SDC_DCRC_STS
, 
SDC_DCRC_STS_POS
|
SDC_DCRC_STS_NEG
, 
d¸c
);

3296 i‡(!
ddr
Ë
d¸c
 &~
SDC_DCRC_STS_NEG
;

3298 
	`WARN_ON
(
d¸c
 == 0);

3301 
rxdly
 = 0;Ñxdly < 32;Ñxdly++) {

3303 
ªsu…
 = 
ho°
->
	`blk_ªad
(ho°, 
d°
, 
§c
, 
nblks
);

3305 
	`MSDC_GET_FIELD
(
SDC_DCRC_STS
, 
SDC_DCRC_STS_POS
|
SDC_DCRC_STS_NEG
, 
d¸c
);

3307 i‡(!
ddr
Ë
d¸c
 &~
SDC_DCRC_STS_NEG
;

3310 
times
++;

3311 
	`¥ötf
("[SD%d] <TUNE_BREAD_%d><%s> DCRC=%xh\n",

3312 
ho°
->
id
, 
times
, (
ªsu…
 =
MMC_ERR_NONE
 && 
d¸c
 == 0) ?

3313 "PASS" : "FAIL", 
d¸c
);

3314 
	`¥ötf
("[SD%d] <TUNE_BREAD_%d><%s> DATRDDLY0=%xh, DATRDDLY1=%xh\n",

3315 
ho°
->
id
, 
times
, (
ªsu…
 =
MMC_ERR_NONE
 && 
d¸c
 == 0) ?

3316 "PASS" : "FAIL", 
	`MSDC_READ32
(
MSDC_DAT_RDDLY0
), MSDC_READ32(
MSDC_DAT_RDDLY1
));

3317 
	`¥ötf
("[SD%d] <TUNE_BREAD_%d><%s> CKGEN_MSDC_CK_SEL=%xh\n",

3318 
ho°
->
id
, 
times
, (
ªsu…
 =
MMC_ERR_NONE
 && 
d¸c
 == 0) ?

3319 "PASS" : "FAIL", 
cur_ck£l
);

3320 
	`¥ötf
("[SD%d] <TUNE_BREAD_%d><%s> INT_DAT_LATCH_CK_SEL=%xh, DSMPL=%xh\n",

3321 
ho°
->
id
, 
times
, (
ªsu…
 =
MMC_ERR_NONE
 && 
d¸c
 == 0) ?

3322 "PASS" : "FAIL", 
cur_dl_ck£l
, 
cur_dsm∂
);

3326 i‡(
ªsu…
 =
MMC_ERR_NONE
 && 
d¸c
 == 0) {

3327 
d⁄e
;

3329 
ªsu…
 = 
MMC_ERR_BADCRC
;

3332 
cur_rxdly0
 = 
	`MSDC_READ32
(
MSDC_DAT_RDDLY0
);

3333 
cur_rxdly1
 = 
	`MSDC_READ32
(
MSDC_DAT_RDDLY1
);

3336 
‹ig_d©0
 = (
cur_rxdly0
 >> 24) & 0x1F;

3337 
‹ig_d©1
 = (
cur_rxdly0
 >> 16) & 0x1F;

3338 
‹ig_d©2
 = (
cur_rxdly0
 >> 8) & 0x1F;

3339 
‹ig_d©3
 = (
cur_rxdly0
 >> 0) & 0x1F;

3340 
‹ig_d©4
 = (
cur_rxdly1
 >> 24) & 0x1F;

3341 
‹ig_d©5
 = (
cur_rxdly1
 >> 16) & 0x1F;

3342 
‹ig_d©6
 = (
cur_rxdly1
 >> 8) & 0x1F;

3343 
‹ig_d©7
 = (
cur_rxdly1
 >> 0) & 0x1F;

3345 
‹ig_d©0
 = (
cur_rxdly0
 >> 0) & 0x1F;

3346 
‹ig_d©1
 = (
cur_rxdly0
 >> 8) & 0x1F;

3347 
‹ig_d©2
 = (
cur_rxdly0
 >> 16) & 0x1F;

3348 
‹ig_d©3
 = (
cur_rxdly0
 >> 24) & 0x1F;

3349 
‹ig_d©4
 = (
cur_rxdly1
 >> 0) & 0x1F;

3350 
‹ig_d©5
 = (
cur_rxdly1
 >> 8) & 0x1F;

3351 
‹ig_d©6
 = (
cur_rxdly1
 >> 16) & 0x1F;

3352 
‹ig_d©7
 = (
cur_rxdly1
 >> 24) & 0x1F;

3354 i‡(
ddr
) {

3355 
cur_d©0
 = (
d¸c
 & (1 << 0Ë|| d¸¯& (1 << 8)Ë? ((
‹ig_d©0
 + 1) % 32) : orig_dat0;

3356 
cur_d©1
 = (
d¸c
 & (1 << 1Ë|| d¸¯& (1 << 9)Ë? ((
‹ig_d©1
 + 1) % 32) : orig_dat1;

3357 
cur_d©2
 = (
d¸c
 & (1 << 2Ë|| d¸¯& (1 << 10)Ë? ((
‹ig_d©2
 + 1) % 32) : orig_dat2;

3358 
cur_d©3
 = (
d¸c
 & (1 << 3Ë|| d¸¯& (1 << 11)Ë? ((
‹ig_d©3
 + 1) % 32) : orig_dat3;

3360 
cur_d©0
 = (
d¸c
 & (1 << 0)Ë? ((
‹ig_d©0
 + 1) % 32) : orig_dat0;

3361 
cur_d©1
 = (
d¸c
 & (1 << 1)Ë? ((
‹ig_d©1
 + 1) % 32) : orig_dat1;

3362 
cur_d©2
 = (
d¸c
 & (1 << 2)Ë? ((
‹ig_d©2
 + 1) % 32) : orig_dat2;

3363 
cur_d©3
 = (
d¸c
 & (1 << 3)Ë? ((
‹ig_d©3
 + 1) % 32) : orig_dat3;

3365 
cur_d©4
 = (
d¸c
 & (1 << 4)Ë? ((
‹ig_d©4
 + 1) % 32) : orig_dat4;

3366 
cur_d©5
 = (
d¸c
 & (1 << 5)Ë? ((
‹ig_d©5
 + 1) % 32) : orig_dat5;

3367 
cur_d©6
 = (
d¸c
 & (1 << 6)Ë? ((
‹ig_d©6
 + 1) % 32) : orig_dat6;

3368 
cur_d©7
 = (
d¸c
 & (1 << 7)Ë? ((
‹ig_d©7
 + 1) % 32) : orig_dat7;

3370 
cur_rxdly0
 = (
cur_d©0
 << 24Ë| (
cur_d©1
 << 16) |

3371 (
cur_d©2
 << 8Ë| (
cur_d©3
 << 0);

3372 
cur_rxdly1
 = (
cur_d©4
 << 24Ë| (
cur_d©5
 << 16) |

3373 (
cur_d©6
 << 8Ë| (
cur_d©7
 << 0);

3375 
	`MSDC_WRITE32
(
MSDC_DAT_RDDLY0
, 
cur_rxdly0
);

3376 
	`MSDC_WRITE32
(
MSDC_DAT_RDDLY1
, 
cur_rxdly1
);

3381 
d⁄e
:

3383  
ªsu…
;

3384 
	}
}

3386 
	$msdc_tu√_bªad
(
mmc_ho°
 *
ho°
, 
uch¨
 *
d°
, 
ul⁄g
 
§c
, ul⁄g 
nblks
)

3388 
u32
 
ba£
 = 
ho°
->base;

3389 
u32
 
i
, 
d¸c
, 
ddr
, 
ck£l
, 
dl_ck£l
, 
rxdly
, 
£l
 = 0, 
‹ig_d¸c
;

3390 
u32
 
cur_rxdly0
, 
cur_rxdly1
;

3391 
u32
 
dsm∂
, 
cur_dsm∂
, 
‹ig_dsm∂
;

3392 
u32
 
cur_d©0
, 
cur_d©1
, 
cur_d©2
, 
cur_d©3
, 
cur_d©4
, 
cur_d©5
,

3393 
cur_d©6
, 
cur_d©7
, 
cur_ck£l
, 
cur_dl_ck£l
, 
œtch_£l
;

3394 
u32
 
‹ig_d©0
, 
‹ig_d©1
, 
‹ig_d©2
, 
‹ig_d©3
, 
‹ig_d©4
, 
‹ig_d©5
,

3395 
‹ig_d©6
, 
‹ig_d©7
, 
‹ig_ck£l
, 
‹ig_dl_ck£l
;

3396 
u32
 
times
 = 0;

3397 
ªsu…
 = 
MMC_ERR_FAILED
;

3399 i‡(
	`mmc_ˇrd_uhs1
(
ho°
->
ˇrd
Ë&& ho°->
s˛k
 > 104000000)

3400 
£l
 = 1;

3402 
ddr
 = 
	`mmc_ˇrd_ddr
(
ho°
->
ˇrd
);

3404 
	`MSDC_GET_FIELD
(
MSDC_PATCH_BIT0
, 
MSDC_CKGEN_MSDC_CK_SEL
, 
‹ig_ck£l
);

3405 
	`MSDC_GET_FIELD
(
MSDC_PATCH_BIT0
, 
MSDC_INT_DAT_LATCH_CK_SEL
, 
‹ig_dl_ck£l
);

3406 
	`MSDC_GET_FIELD
(
MSDC_IOCON
, 
MSDC_IOCON_DSPL
, 
‹ig_dsm∂
);

3409 
	`MSDC_SET_FIELD
(
MSDC_IOCON
, 
MSDC_IOCON_DDLSEL
, 1);

3411 
ck£l
 = 0;

3413 
cur_ck£l
 = (
‹ig_ck£l
 + 
ck£l
) % 2;

3414 
œtch_£l
 = 
cur_ck£l
 ? 8 : 1;

3415 
dl_ck£l
 = 0;

3417 
rxdly
 = 0;

3419 
dsm∂
 = 0; dsmpl < 2; dsmpl++) {

3420 
cur_dsm∂
 = (
‹ig_dsm∂
 + 
dsm∂
) % 2;

3421 
	`MSDC_SET_FIELD
(
MSDC_IOCON
, 
MSDC_IOCON_DSPL
, 
cur_dsm∂
);

3423 i‡(!
msdc_tu√_dbg
[
ho°
->
id
]) {

3424 
ªsu…
 = 
ho°
->
	`blk_ªad
(ho°, 
d°
, 
§c
, 
nblks
);

3426 
	`MSDC_GET_FIELD
(
SDC_DCRC_STS
, 
SDC_DCRC_STS_POS
|
SDC_DCRC_STS_NEG
, 
d¸c
);

3428 
ªsu…
 = 
MMC_ERR_BADCRC
;

3429 
d¸c
 = 0xFFF;

3432 i‡(!
ddr
Ë
d¸c
 &~
SDC_DCRC_STS_NEG
;

3436 
u32
 
t_d•l
, 
t_ck£l
, 
t_dl_ck£l
;

3438 
	`MSDC_GET_FIELD
(
MSDC_IOCON
, 
MSDC_IOCON_DSPL
, 
t_d•l
);

3439 
	`MSDC_GET_FIELD
(
MSDC_PATCH_BIT0
, 
MSDC_CKGEN_MSDC_CK_SEL
, 
t_ck£l
);

3440 
	`MSDC_GET_FIELD
(
MSDC_PATCH_BIT0
, 
MSDC_INT_DAT_LATCH_CK_SEL
, 
t_dl_ck£l
);

3442 
times
++;

3443 
	`¥ötf
("[SD%d] <TUNE_BREAD_%d><%s> DCRC=%xh\n",

3444 
ho°
->
id
, 
times
, (
ªsu…
 =
MMC_ERR_NONE
 && 
d¸c
 == 0) ?

3445 "PASS" : "FAIL", 
d¸c
);

3446 
	`¥ötf
("[SD%d] <TUNE_BREAD_%d><%s> DATRDDLY0=%xh, DATRDDLY1=%xh\n",

3447 
ho°
->
id
, 
times
, (
ªsu…
 =
MMC_ERR_NONE
 && 
d¸c
 == 0) ?

3448 "PASS" : "FAIL", 
	`MSDC_READ32
(
MSDC_DAT_RDDLY0
), MSDC_READ32(
MSDC_DAT_RDDLY1
));

3449 
	`¥ötf
("[SD%d] <TUNE_BREAD_%d><%s> CKGEN_MSDC_CK_SEL=%xh\n",

3450 
ho°
->
id
, 
times
, (
ªsu…
 =
MMC_ERR_NONE
 && 
d¸c
 == 0) ?

3451 "PASS" : "FAIL", 
t_ck£l
);

3452 
	`¥ötf
("[SD%d] <TUNE_BREAD_%d><%s> INT_DAT_LATCH_CK_SEL=%xh, DSMPL=%xh\n",

3453 
ho°
->
id
, 
times
, (
ªsu…
 =
MMC_ERR_NONE
 && 
d¸c
 == 0) ?

3454 "PASS" : "FAIL", 
t_dl_ck£l
, 
t_d•l
);

3458 i‡(
ªsu…
 =
MMC_ERR_NONE
 && 
d¸c
 == 0) {

3459 
d⁄e
;

3461 
ªsu…
 = 
MMC_ERR_BADCRC
;

3464 
cur_rxdly0
 = 
	`MSDC_READ32
(
MSDC_DAT_RDDLY0
);

3465 
cur_rxdly1
 = 
	`MSDC_READ32
(
MSDC_DAT_RDDLY1
);

3468 
‹ig_d©0
 = (
cur_rxdly0
 >> 24) & 0x1F;

3469 
‹ig_d©1
 = (
cur_rxdly0
 >> 16) & 0x1F;

3470 
‹ig_d©2
 = (
cur_rxdly0
 >> 8) & 0x1F;

3471 
‹ig_d©3
 = (
cur_rxdly0
 >> 0) & 0x1F;

3472 
‹ig_d©4
 = (
cur_rxdly1
 >> 24) & 0x1F;

3473 
‹ig_d©5
 = (
cur_rxdly1
 >> 16) & 0x1F;

3474 
‹ig_d©6
 = (
cur_rxdly1
 >> 8) & 0x1F;

3475 
‹ig_d©7
 = (
cur_rxdly1
 >> 0) & 0x1F;

3477 
‹ig_d©0
 = (
cur_rxdly0
 >> 0) & 0x1F;

3478 
‹ig_d©1
 = (
cur_rxdly0
 >> 8) & 0x1F;

3479 
‹ig_d©2
 = (
cur_rxdly0
 >> 16) & 0x1F;

3480 
‹ig_d©3
 = (
cur_rxdly0
 >> 24) & 0x1F;

3481 
‹ig_d©4
 = (
cur_rxdly1
 >> 0) & 0x1F;

3482 
‹ig_d©5
 = (
cur_rxdly1
 >> 8) & 0x1F;

3483 
‹ig_d©6
 = (
cur_rxdly1
 >> 16) & 0x1F;

3484 
‹ig_d©7
 = (
cur_rxdly1
 >> 24) & 0x1F;

3486 i‡(
ddr
) {

3487 
cur_d©0
 = (
d¸c
 & (1 << 0Ë|| d¸¯& (1 << 8)Ë? ((
‹ig_d©0
 + 1) % 32) : orig_dat0;

3488 
cur_d©1
 = (
d¸c
 & (1 << 1Ë|| d¸¯& (1 << 9)Ë? ((
‹ig_d©1
 + 1) % 32) : orig_dat1;

3489 
cur_d©2
 = (
d¸c
 & (1 << 2Ë|| d¸¯& (1 << 10)Ë? ((
‹ig_d©2
 + 1) % 32) : orig_dat2;

3490 
cur_d©3
 = (
d¸c
 & (1 << 3Ë|| d¸¯& (1 << 11)Ë? ((
‹ig_d©3
 + 1) % 32) : orig_dat3;

3492 
cur_d©0
 = (
d¸c
 & (1 << 0)Ë? ((
‹ig_d©0
 + 1) % 32) : orig_dat0;

3493 
cur_d©1
 = (
d¸c
 & (1 << 1)Ë? ((
‹ig_d©1
 + 1) % 32) : orig_dat1;

3494 
cur_d©2
 = (
d¸c
 & (1 << 2)Ë? ((
‹ig_d©2
 + 1) % 32) : orig_dat2;

3495 
cur_d©3
 = (
d¸c
 & (1 << 3)Ë? ((
‹ig_d©3
 + 1) % 32) : orig_dat3;

3497 
cur_d©4
 = (
d¸c
 & (1 << 4)Ë? ((
‹ig_d©4
 + 1) % 32) : orig_dat4;

3498 
cur_d©5
 = (
d¸c
 & (1 << 5)Ë? ((
‹ig_d©5
 + 1) % 32) : orig_dat5;

3499 
cur_d©6
 = (
d¸c
 & (1 << 6)Ë? ((
‹ig_d©6
 + 1) % 32) : orig_dat6;

3500 
cur_d©7
 = (
d¸c
 & (1 << 7)Ë? ((
‹ig_d©7
 + 1) % 32) : orig_dat7;

3502 
cur_rxdly0
 = (
cur_d©0
 << 24Ë| (
cur_d©1
 << 16) |

3503 (
cur_d©2
 << 8Ë| (
cur_d©3
 << 0);

3504 
cur_rxdly1
 = (
cur_d©4
 << 24Ë| (
cur_d©5
 << 16) |

3505 (
cur_d©6
 << 8Ë| (
cur_d©7
 << 0);

3507 
	`MSDC_WRITE32
(
MSDC_DAT_RDDLY0
, 
cur_rxdly0
);

3508 
	`MSDC_WRITE32
(
MSDC_DAT_RDDLY1
, 
cur_rxdly1
);

3509 } ++
rxdly
 < 32);

3512 i‡(
œtch_£l
 =1 || 
dl_ck£l
 >=Üatch_sel)

3515 
cur_dl_ck£l
 = ++
‹ig_dl_ck£l
 % 
œtch_£l
;

3516 
	`MSDC_SET_FIELD
(
MSDC_PATCH_BIT0
, 
MSDC_INT_DAT_LATCH_CK_SEL
, 
cur_dl_ck£l
);

3517 
dl_ck£l
++;

3520 i‡(
£l
 =1 || 
ck£l
 >= sel)

3523 
	`MSDC_SET_FIELD
(
MSDC_PATCH_BIT0
, 
MSDC_CKGEN_MSDC_CK_SEL
, 
cur_ck£l
);

3524 
ck£l
++;

3527 
d⁄e
:

3529  
ªsu…
;

3530 
	}
}

3534 #i‡
MSDC_USE_WR_TUNING


3536 
	$msdc_tu√_bwrôe
(
mmc_ho°
 *
ho°
, 
ul⁄g
 
d°
, 
uch¨
 *
§c
, ul⁄g 
nblks
)

3538 
u32
 
ba£
 = 
ho°
->base;

3539 
u32
 
ck£l
, 
cur_ck£l
, 
‹ig_ck£l
;

3540 
u32
 
wºdly
, 
cur_wºdly
, 
‹ig_wºdly
;

3541 
u32
 
dsm∂
, 
cur_dsm∂
, 
‹ig_dsm∂
;

3542 
u32
 
dl_ck£l
, 
cur_dl_ck£l
, 
‹ig_dl_ck£l
;

3543 
u32
 
rxdly
, 
cur_rxdly0
;

3544 
u32
 
‹ig_d©0
, 
‹ig_d©1
, 
‹ig_d©2
, 
‹ig_d©3
;

3545 
u32
 
cur_d©0
, 
cur_d©1
, 
cur_d©2
, 
cur_d©3
;

3546 
u32
 
cur_ddrdly
, 
‹ig_ddrdly
, 
ddrdly
;

3547 
u32
 
œtch_£l
, 
£l
 = 1, 
ddrckdly
 = 1;

3548 
u32
 
°©us
;

3549 
ªsu…
 = 
MMC_ERR_FAILED
;

3551 i‡(
	`mmc_ˇrd_uhs1
(
ho°
->
ˇrd
Ë&& ho°->
s˛k
 > 104000000)

3552 
£l
 = 2;

3554 i‡(
	`mmc_ˇrd_ddr
(
ho°
->
ˇrd
))

3555 
ddrckdly
 = 2;

3557 
	`MSDC_GET_FIELD
(
MSDC_PAD_TUNE
, 
MSDC_PAD_TUNE_DATWRDLY
, 
‹ig_wºdly
);

3558 
	`MSDC_GET_FIELD
(
MSDC_IOCON
, 
MSDC_IOCON_DSPL
, 
‹ig_dsm∂
);

3559 
	`MSDC_GET_FIELD
(
MSDC_IOCON
, 
MSDC_IOCON_DDR50CKD
, 
‹ig_ddrdly
);

3560 
	`MSDC_GET_FIELD
(
MSDC_PATCH_BIT0
, 
MSDC_CKGEN_MSDC_CK_SEL
, 
‹ig_ck£l
);

3561 
	`MSDC_GET_FIELD
(
MSDC_PATCH_BIT0
, 
MSDC_INT_DAT_LATCH_CK_SEL
, 
‹ig_dl_ck£l
);

3564 
	`MSDC_SET_FIELD
(
MSDC_IOCON
, 
MSDC_IOCON_DDLSEL
, 1);

3566 
ddrdly
 = 0; ddrdly < 
ddrckdly
; ddrdly++) {

3567 
cur_ddrdly
 = (
‹ig_ddrdly
 + 
ddrdly
) % 2;

3568 
	`MSDC_SET_FIELD
(
MSDC_IOCON
, 
MSDC_IOCON_DDR50CKD
, 
cur_ddrdly
);

3570 
ck£l
 = 0; ck£»< 
£l
; cksel++) {

3571 
cur_ck£l
 = (
‹ig_ck£l
 + 
ck£l
) % 2;

3572 
	`MSDC_SET_FIELD
(
MSDC_PATCH_BIT0
, 
MSDC_CKGEN_MSDC_CK_SEL
, 
cur_ck£l
);

3573 
œtch_£l
 = 
cur_ck£l
 ? 8 : 1;

3575 
dl_ck£l
 = 0; dl_ck£»< 
œtch_£l
; dl_cksel++) {

3576 
cur_dl_ck£l
 = (
‹ig_dl_ck£l
 + 
dl_ck£l
Ë% 
œtch_£l
;

3577 
	`MSDC_SET_FIELD
(
MSDC_PATCH_BIT0
, 
MSDC_INT_DAT_LATCH_CK_SEL
, 
cur_dl_ck£l
);

3579 
cur_rxdly0
 = 
	`MSDC_READ32
(
MSDC_DAT_RDDLY0
);

3582 
‹ig_d©0
 = (
cur_rxdly0
 >> 24) & 0x1F;

3583 
‹ig_d©1
 = (
cur_rxdly0
 >> 16) & 0x1F;

3584 
‹ig_d©2
 = (
cur_rxdly0
 >> 8) & 0x1F;

3585 
‹ig_d©3
 = (
cur_rxdly0
 >> 0) & 0x1F;

3587 
‹ig_d©0
 = (
cur_rxdly0
 >> 0) & 0x1F;

3588 
‹ig_d©1
 = (
cur_rxdly0
 >> 8) & 0x1F;

3589 
‹ig_d©2
 = (
cur_rxdly0
 >> 16) & 0x1F;

3590 
‹ig_d©3
 = (
cur_rxdly0
 >> 24) & 0x1F;

3594 
rxdly
 = 0;Ñxdly < 32;Ñxdly++) {

3595 
cur_d©0
 = (
‹ig_d©0
 + 
rxdly
) % 32;

3596 
cur_d©1
 = 
‹ig_d©1
;

3597 
cur_d©2
 = 
‹ig_d©2
;

3598 
cur_d©3
 = 
‹ig_d©3
;

3600 
cur_rxdly0
 = (
cur_d©0
 << 24Ë| (
cur_d©1
 << 16) |

3601 (
cur_d©2
 << 8Ë| (
cur_d©3
 << 0);

3603 
	`MSDC_WRITE32
(
MSDC_DAT_RDDLY0
, 
cur_rxdly0
);

3605 
wºdly
 = 0; wrrdly < 32; wrrdly++) {

3606 
cur_wºdly
 = (
‹ig_wºdly
 + 
wºdly
) % 32;

3607 
	`MSDC_SET_FIELD
(
MSDC_PAD_TUNE
, 
MSDC_PAD_TUNE_DATWRDLY
, 
cur_wºdly
);

3609 
dsm∂
 = 0; dsmpl < 2; dsmpl++) {

3610 
cur_dsm∂
 = (
‹ig_dsm∂
 + 
dsm∂
) % 2;

3611 
	`MSDC_SET_FIELD
(
MSDC_IOCON
, 
MSDC_IOCON_DSPL
, 
cur_dsm∂
);

3613 
ªsu…
 = 
ho°
->
	`blk_wrôe
(ho°, 
d°
, 
§c
, 
nblks
);

3615 
	`¥ötf
("[SD%d] <TUNE_BWRITE><%s> DSPL=%d, DATWRDLY=%d\n",

3616 
ho°
->
id
, 
ªsu…
 =
MMC_ERR_NONE
 ? "PASS" : "FAIL",

3617 
cur_dsm∂
, 
cur_wºdly
);

3618 
	`¥ötf
("[SD%d] <TUNE_BWRITE><%s> DDR50CKD=%xh\n",

3619 
ho°
->
id
, (
ªsu…
 =
MMC_ERR_NONE
) ? "PASS" : "FAIL",

3620 
cur_ddrdly
);

3621 
	`¥ötf
("[SD%d] <TUNE_BWRITE><%s> CKGEN_MSDC_CK_SEL=%xh\n",

3622 
ho°
->
id
, (
ªsu…
 =
MMC_ERR_NONE
) ? "PASS" : "FAIL",

3623 
cur_ck£l
);

3624 
	`¥ötf
("[SD%d] <TUNE_BWRITE><%s> INT_DAT_LATCH_CK_SEL=%xh\n",

3625 
ho°
->
id
, (
ªsu…
 =
MMC_ERR_NONE
) ? "PASS" : "FAIL",

3626 
cur_dl_ck£l
);

3627 
	`¥ötf
("[SD%d] <TUNE_BWRITE><%s> MSDC_DAT_RDDLY0=%xh\n",

3628 
ho°
->
id
, (
ªsu…
 =
MMC_ERR_NONE
) ? "PASS" : "FAIL",

3629 
cur_rxdly0
);

3631 i‡(
ªsu…
 =
MMC_ERR_NONE
) {

3632 
d⁄e
;

3641 
d⁄e
:

3643  
ªsu…
;

3644 
	}
}

3646 
	$msdc_tu√_bwrôe
(
mmc_ho°
 *
ho°
, 
ul⁄g
 
d°
, 
uch¨
 *
§c
, ul⁄g 
nblks
)

3648 
u32
 
ba£
 = 
ho°
->base;

3649 
u32
 
ck£l
, 
cur_ck£l
, 
‹ig_ck£l
;

3650 
u32
 
wºdly
, 
cur_wºdly
, 
‹ig_wºdly
;

3651 
u32
 
dsm∂
, 
cur_dsm∂
, 
‹ig_dsm∂
;

3652 
u32
 
dl_ck£l
, 
cur_dl_ck£l
, 
‹ig_dl_ck£l
;

3653 
u32
 
rxdly
, 
cur_rxdly0
;

3654 
u32
 
‹ig_d©0
, 
‹ig_d©1
, 
‹ig_d©2
, 
‹ig_d©3
;

3655 
u32
 
cur_d©0
, 
cur_d©1
, 
cur_d©2
, 
cur_d©3
;

3656 
u32
 
cur_ddrdly
, 
‹ig_ddrdly
, 
ddrdly
;

3657 
u32
 
œtch_£l
, 
£l
 = 0, 
ddrckdly
 = 0;

3658 
u32
 
times
 = 0;

3659 
u32
 
°©us
;

3660 
ªsu…
 = 
MMC_ERR_FAILED
;

3662 i‡(
	`mmc_ˇrd_uhs1
(
ho°
->
ˇrd
Ë&& ho°->
s˛k
 > 104000000)

3663 
£l
 = 1;

3665 i‡(
	`mmc_ˇrd_ddr
(
ho°
->
ˇrd
))

3666 
ddrckdly
 = 1;

3668 
	`MSDC_GET_FIELD
(
MSDC_PAD_TUNE
, 
MSDC_PAD_TUNE_DATWRDLY
, 
‹ig_wºdly
);

3669 
	`MSDC_GET_FIELD
(
MSDC_IOCON
, 
MSDC_IOCON_DSPL
, 
‹ig_dsm∂
);

3670 
	`MSDC_GET_FIELD
(
MSDC_IOCON
, 
MSDC_IOCON_DDR50CKD
, 
‹ig_ddrdly
);

3671 
	`MSDC_GET_FIELD
(
MSDC_PATCH_BIT0
, 
MSDC_CKGEN_MSDC_CK_SEL
, 
‹ig_ck£l
);

3672 
	`MSDC_GET_FIELD
(
MSDC_PATCH_BIT0
, 
MSDC_INT_DAT_LATCH_CK_SEL
, 
‹ig_dl_ck£l
);

3675 
	`MSDC_SET_FIELD
(
MSDC_IOCON
, 
MSDC_IOCON_DDLSEL
, 1);

3677 
cur_rxdly0
 = 
	`MSDC_READ32
(
MSDC_DAT_RDDLY0
);

3680 
‹ig_d©0
 = (
cur_rxdly0
 >> 24) & 0x1F;

3681 
‹ig_d©1
 = (
cur_rxdly0
 >> 16) & 0x1F;

3682 
‹ig_d©2
 = (
cur_rxdly0
 >> 8) & 0x1F;

3683 
‹ig_d©3
 = (
cur_rxdly0
 >> 0) & 0x1F;

3685 
‹ig_d©0
 = (
cur_rxdly0
 >> 0) & 0x1F;

3686 
‹ig_d©1
 = (
cur_rxdly0
 >> 8) & 0x1F;

3687 
‹ig_d©2
 = (
cur_rxdly0
 >> 16) & 0x1F;

3688 
‹ig_d©3
 = (
cur_rxdly0
 >> 24) & 0x1F;

3691 
ddrdly
 = 0;

3693 
ck£l
 = 0;

3695 
cur_ck£l
 = (
‹ig_ck£l
 + 
ck£l
) % 2;

3696 
œtch_£l
 = 
cur_ck£l
 ? 8 : 1;

3697 
dl_ck£l
 = 0;

3699 
rxdly
 = 0;

3701 
wºdly
 = 0;

3703 
dsm∂
 = 0; dsmpl < 2; dsmpl++) {

3704 
cur_dsm∂
 = (
‹ig_dsm∂
 + 
dsm∂
) % 2;

3705 
	`MSDC_SET_FIELD
(
MSDC_IOCON
, 
MSDC_IOCON_DSPL
, 
cur_dsm∂
);

3707 i‡(!
msdc_tu√_dbg
[
ho°
->
id
]) {

3708 
ªsu…
 = 
ho°
->
	`blk_wrôe
(ho°, 
d°
, 
§c
, 
nblks
);

3710 
ªsu…
 = 
MMC_ERR_BADCRC
;

3715 
u32
 
t_d•l
, 
t_wºdly
, 
t_ddrdly
, 
t_ck£l
, 
t_dl_ck£l
;

3717 
	`MSDC_GET_FIELD
(
MSDC_PAD_TUNE
, 
MSDC_PAD_TUNE_DATWRDLY
, 
t_wºdly
);

3718 
	`MSDC_GET_FIELD
(
MSDC_IOCON
, 
MSDC_IOCON_DSPL
, 
t_d•l
);

3719 
	`MSDC_GET_FIELD
(
MSDC_IOCON
, 
MSDC_IOCON_DDR50CKD
, 
t_ddrdly
);

3720 
	`MSDC_GET_FIELD
(
MSDC_PATCH_BIT0
, 
MSDC_CKGEN_MSDC_CK_SEL
, 
t_ck£l
);

3721 
	`MSDC_GET_FIELD
(
MSDC_PATCH_BIT0
, 
MSDC_INT_DAT_LATCH_CK_SEL
, 
t_dl_ck£l
);

3723 
times
++;

3725 
	`¥ötf
("[SD%d] <TUNE_BWRITE_%d><%s> DSPL=%d, DATWRDLY=%d\n",

3726 
ho°
->
id
, 
times
, 
ªsu…
 =
MMC_ERR_NONE
 ? "PASS" : "FAIL",

3727 
t_d•l
, 
t_wºdly
);

3728 
	`¥ötf
("[SD%d] <TUNE_BWRITE_%d><%s> DDR50CKD=%xh\n",

3729 
ho°
->
id
, 
times
, (
ªsu…
 =
MMC_ERR_NONE
) ? "PASS" : "FAIL",

3730 
t_ddrdly
);

3731 
	`¥ötf
("[SD%d] <TUNE_BWRITE_%d><%s> CKGEN_MSDC_CK_SEL=%xh\n",

3732 
ho°
->
id
, 
times
, (
ªsu…
 =
MMC_ERR_NONE
) ? "PASS" : "FAIL",

3733 
t_ck£l
);

3734 
	`¥ötf
("[SD%d] <TUNE_BWRITE_%d><%s> INT_DAT_LATCH_CK_SEL=%xh\n",

3735 
ho°
->
id
, 
times
, (
ªsu…
 =
MMC_ERR_NONE
) ? "PASS" : "FAIL",

3736 
t_dl_ck£l
);

3737 
	`¥ötf
("[SD%d] <TUNE_BWRITE_%d><%s> MSDC_DAT_RDDLY0=%xh\n",

3738 
ho°
->
id
, 
times
, (
ªsu…
 =
MMC_ERR_NONE
) ? "PASS" : "FAIL",

3739 
	`MSDC_READ32
(
MSDC_DAT_RDDLY0
));

3741 i‡(
ªsu…
 =
MMC_ERR_NONE
) {

3742 
d⁄e
;

3745 
cur_wºdly
 = ++
‹ig_wºdly
 % 32;

3746 
	`MSDC_SET_FIELD
(
MSDC_PAD_TUNE
, 
MSDC_PAD_TUNE_DATWRDLY
, 
cur_wºdly
);

3747 } ++
wºdly
 < 32);

3749 
cur_d©0
 = ++
‹ig_d©0
 % 32;

3750 
cur_d©1
 = 
‹ig_d©1
;

3751 
cur_d©2
 = 
‹ig_d©2
;

3752 
cur_d©3
 = 
‹ig_d©3
;

3754 
cur_rxdly0
 = (
cur_d©0
 << 24Ë| (
cur_d©1
 << 16) |

3755 (
cur_d©2
 << 8Ë| (
cur_d©3
 << 0);

3757 
	`MSDC_WRITE32
(
MSDC_DAT_RDDLY0
, 
cur_rxdly0
);

3758 } ++
rxdly
 < 32);

3761 i‡(
œtch_£l
 =1 || 
dl_ck£l
 >=Üatch_sel)

3764 
cur_dl_ck£l
 = ++
‹ig_dl_ck£l
 % 
œtch_£l
;

3765 
	`MSDC_SET_FIELD
(
MSDC_PATCH_BIT0
, 
MSDC_INT_DAT_LATCH_CK_SEL
, 
cur_dl_ck£l
);

3766 
dl_ck£l
++;

3770 i‡(
£l
 =1 || 
ck£l
 >= sel)

3773 
	`MSDC_SET_FIELD
(
MSDC_PATCH_BIT0
, 
MSDC_CKGEN_MSDC_CK_SEL
, 
cur_ck£l
);

3774 
ck£l
++;

3778 i‡(
ddrckdly
 =0 || 
ddrdly
 >= ddrckdly)

3781 
cur_ddrdly
 = ++
‹ig_ddrdly
 % 2;

3782 
	`MSDC_SET_FIELD
(
MSDC_IOCON
, 
MSDC_IOCON_DDR50CKD
, 
cur_ddrdly
);

3783 
ddrdly
++;

3786 
d⁄e
:

3788  
ªsu…
;

3789 
	}
}

3794 
	$msdc_tu√_uhs1
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
)

3796 
u32
 
ba£
 = 
ho°
->base;

3797 
u32
 
°©us
;

3798 
i
;

3799 
îr
 = 
MMC_ERR_FAILED
;

3800 
mmc_comm™d
 
cmd
;

3802 
cmd
.
›code
 = 
SD_CMD_SEND_TUNING_BLOCK
;

3803 
cmd
.
¨g
 = 0;

3804 
cmd
.
r•typ
 = 
RESP_R1
;

3805 
cmd
.
ªåõs
 = 
CMD_RETRIES
;

3806 
cmd
.
timeout
 = 0xFFFFFFFF;

3808 
	`msdc_£t_timeout
(
ho°
, 100000000, 0);

3809 
	`msdc_£t_autocmd
(
ho°
, 
MSDC_AUTOCMD19
, 1);

3811 
i
 = 0; i < 13; i++) {

3815 
	`MSDC_SET_FIELD
(
SDC_ACMD19_TRG
, 
SDC_ACMD19_TRG_TUNESEL
, 
i
);

3821 
îr
 = 
	`msdc_cmd
(
ho°
, &
cmd
);

3822 i‡(
îr
 !
MMC_ERR_NONE
)

3823 
out
;

3826 
°©us
 = 
	`MSDC_READ32
(
SDC_ACMD19_STS
);

3828 i‡(!
°©us
) {

3829 
	`¥ötf
("[SD%d] ACMD19_TRG(%d), STS(0x%xËFaûed\n", 
ho°
->
id
, 
i
,

3830 
°©us
);

3831 
îr
 = 
MMC_ERR_FAILED
;

3832 
out
;

3835 
îr
 = 
MMC_ERR_NONE
;

3837 
out
:

3838 
	`msdc_£t_autocmd
(
ho°
, 
MSDC_AUTOCMD19
, 0);

3839  
îr
;

3840 
	}
}

3842 
	$msdc_ˇrd_dëe˘
(
mmc_ho°
 *
ho°
, 
⁄
)

3844 
u32
 
ba£
 = 
ho°
->base;

3846 i‡((
msdc_ˇp
.
Êags
 & 
MSDC_CD_PIN_EN
) == 0) {

3847 
	`MSDC_CARD_DETECTION_OFF
();

3851 i‡(
⁄
) {

3852 
	`MSDC_SET_FIELD
(
MSDC_PS
, 
MSDC_PS_CDDEBOUNCE
, 
DEFAULT_DEBOUNCE
);

3853 
	`MSDC_CARD_DETECTION_ON
();

3855 
	`MSDC_CARD_DETECTION_OFF
();

3856 
	`MSDC_SET_FIELD
(
MSDC_PS
, 
MSDC_PS_CDDEBOUNCE
, 0);

3858 
	}
}

3860 
	$msdc_ˇrd_avaû
(
mmc_ho°
 *
ho°
)

3862 
u32
 
ba£
 = 
ho°
->base;

3863 
°s
, 
avaû
 = 0;

3865 i‡((
msdc_ˇp
.
Êags
 & 
MSDC_REMOVABLE
) == 0)

3868 i‡(
msdc_ˇp
.
Êags
 & 
MSDC_CD_PIN_EN
) {

3869 
	`MSDC_GET_FIELD
(
MSDC_PS
, 
MSDC_PS_CDSTS
, 
°s
);

3870 
avaû
 = 
°s
 == 0 ? 1 : 0;

3873  
avaû
;

3874 
	}
}

3876 
	$msdc_ˇrd_¥Ÿe˘ed
(
mmc_ho°
 *
ho°
)

3878 
u32
 
ba£
 = 
ho°
->base;

3879 
¥Ÿ
;

3881 i‡(
msdc_ˇp
.
Êags
 & 
MSDC_WP_PIN_EN
) {

3882 
	`MSDC_GET_FIELD
(
MSDC_PS
, 
MSDC_PS_WP
, 
¥Ÿ
);

3884 
¥Ÿ
 = 0;

3887  
¥Ÿ
;

3888 
	}
}

3890 
	$msdc_h¨d_ª£t
()

3892 
	`msdc_£t_ˇrd_pwr
(0);

3893 
	`msdc_£t_ˇrd_pwr
(1);

3894 
	}
}

3896 
	$msdc_so·_ª£t
(
mmc_ho°
 *
ho°
)

3898 
u32
 
ba£
 = 
ho°
->base;

3899 
u32
 
tmo
 = 0x0000ffff;

3901 
	`MSDC_RESET
();

3902 
	`MSDC_SET_FIELD
(
MSDC_DMA_CTRL
, 
MSDC_DMA_CTRL_STOP
, 1);

3903 
	`WAIT_COND
((
	`MSDC_READ32
(
MSDC_DMA_CFG
Ë& 
MSDC_DMA_CFG_STS
Ë=0, 0xFFFF, 
tmo
);

3905 i‡(
tmo
 == 0) {

3906 
	`MSG
(
DMA
, "[SD%d] MSDC_DMA_CFG_STS !öa˘ive\n", 
ho°
->
id
);

3908 
	`MSDC_CLR_FIFO
();

3909 
	}
}

3911 
	$msdc_emmc_boŸ_°¨t
(
mmc_ho°
 *
ho°
, 
u32
 
hz
, 
ddr
, 
mode
, 
ackdis
)

3913 
îr
 = 
MMC_ERR_NONE
;

3914 
u32
 
°s
;

3915 
u32
 
ba£
 = 
ho°
->base;

3916 
u32
 
tmo
 = 0xFFFFFFFF;

3917 
u32
 
acktmo
, 
d©tmo
;

3920 
	`MSDC_RESET
();

3921 
	`MSDC_CLR_FIFO
();

3922 
	`msdc_£t_blkÀn
(
ho°
, 512);

3923 
	`msdc_c⁄fig_bus
(
ho°
, 
HOST_BUS_WIDTH_1
);

3924 
	`msdc_c⁄fig_˛ock
(
ho°
, 
ddr
, 
hz
);

3927 
	`MSDC_SET_BIT32
(
MSDC_CFG
, 
MSDC_CFG_CKPDN
);

3928 
	`mdñay
(2);

3929 
	`MSDC_CLR_BIT32
(
MSDC_CFG
, 
MSDC_CFG_CKPDN
);

3932 
	`WAIT_COND
(
	`SDC_IS_BUSY
(Ë=0, 
tmo
,Åmo);

3934 
acktmo
 = 
	`msdc_ˇl_timeout
(
ho°
, 50 * 1000 * 1000, 0, 256);

3935 
d©tmo
 = 
	`msdc_ˇl_timeout
(
ho°
, 1000 * 1000 * 1000, 0, 256);

3937 
acktmo
 =ácktmo > 0xFFF ? 0xFFF :ácktmo;

3938 
d©tmo
 = dattmo > 0xFFFFF ? 0xFFFFF : dattmo;

3940 
	`¥ötf
("[SD%d] EMMC BOOT ACKÅimeout: %d m†(˛k˙t: %d)\n", 
ho°
->
id
,

3941 (
acktmo
 * 256Ë/ (
ho°
->
s˛k
 / 1000),ácktmo);

3942 
	`¥ötf
("[SD%d] EMMC BOOT DATÅimeout: %d m†(˛k˙t: %d)\n", 
ho°
->
id
,

3943 (
d©tmo
 * 256Ë/ (
ho°
->
s˛k
 / 1000), dattmo);

3945 
	`MSDC_SET_BIT32
(
EMMC_CFG0
, 
EMMC_CFG0_BOOTSUPP
);

3946 
	`MSDC_SET_FIELD
(
EMMC_CFG0
, 
EMMC_CFG0_BOOTACKDIS
, 
ackdis
);

3947 
	`MSDC_SET_FIELD
(
EMMC_CFG0
, 
EMMC_CFG0_BOOTMODE
, 
mode
);

3948 
	`MSDC_SET_FIELD
(
EMMC_CFG1
, 
EMMC_CFG1_BOOTACKTMC
, 
acktmo
);

3949 
	`MSDC_SET_FIELD
(
EMMC_CFG1
, 
EMMC_CFG1_BOOTDATTMC
, 
d©tmo
);

3951 i‡(
mode
 =
EMMC_BOOT_RST_CMD_MODE
) {

3952 
	`MSDC_WRITE32
(
SDC_ARG
, 0xFFFFFFFA);

3954 
	`MSDC_WRITE32
(
SDC_ARG
, 0);

3956 
	`MSDC_WRITE32
(
SDC_CMD
, 0x02001000);

3957 
	`MSDC_SET_BIT32
(
EMMC_CFG0
, 
EMMC_CFG0_BOOTSTART
);

3959 
	`WAIT_COND
((
	`MSDC_READ32
(
EMMC_STS
Ë& 
EMMC_STS_BOOTUPSTATE
) ==

3960 
EMMC_STS_BOOTUPSTATE
, 
tmo
,Åmo);

3962 i‡(!
ackdis
) {

3964 
°s
 = 
	`MSDC_READ32
(
EMMC_STS
);

3965 i‡(
°s
 == 0)

3967 
	`MSDC_WRITE32
(
EMMC_STS
, 
°s
);

3968 i‡(
°s
 & 
EMMC_STS_BOOTACKRCV
) {

3969 
	`¥ötf
("[SD%d] EMMC_STS(%x): boŸáckÑe˚ived\n", 
ho°
->
id
, 
°s
);

3971 } i‡(
°s
 & 
EMMC_STS_BOOTACKERR
) {

3972 
	`¥ötf
("[SD%d] EMMC_STS(%x): boŸ u∞ackÉº‹\n", 
ho°
->
id
, 
°s
);

3973 
îr
 = 
MMC_ERR_BADCRC
;

3974 
out
;

3975 } i‡(
°s
 & 
EMMC_STS_BOOTACKTMO
) {

3976 
	`¥ötf
("[SD%d] EMMC_STS(%x): boŸ u∞ackÅimeout\n", 
ho°
->
id
, 
°s
);

3977 
îr
 = 
MMC_ERR_TIMEOUT
;

3978 
out
;

3979 } i‡(
°s
 & 
EMMC_STS_BOOTUPSTATE
) {

3980 
	`¥ötf
("[SD%d] EMMC_STS(%x): boŸ u∞modê°©e\n", 
ho°
->
id
, 
°s
);

3982 
	`¥ötf
("[SD%d] EMMC_STS(%x): boŸ u∞u√x≥˘ed\n", 
ho°
->
id
, 
°s
);

3989 
°s
 = 
	`MSDC_READ32
(
EMMC_STS
);

3990 i‡(
°s
 == 0)

3992 i‡(
°s
 & 
EMMC_STS_BOOTDATRCV
) {

3993 
	`¥ötf
("[SD%d] EMMC_STS(%x): boŸ d©Ñe˚ived\n", 
ho°
->
id
, 
°s
);

3996 i‡(
°s
 & 
EMMC_STS_BOOTCRCERR
) {

3997 
îr
 = 
MMC_ERR_BADCRC
;

3998 
out
;

3999 } i‡(
°s
 & 
EMMC_STS_BOOTDATTMO
) {

4000 
îr
 = 
MMC_ERR_TIMEOUT
;

4001 
out
;

4004 
out
:

4005  
îr
;

4006 
	}
}

4008 
	$msdc_emmc_boŸ_°›
(
mmc_ho°
 *
ho°
, 
mode
)

4010 
u32
 
ba£
 = 
ho°
->base;

4011 
u32
 
tmo
 = 0xFFFFFFFF;

4014 
	`MSDC_WRITE32
(
SDC_ARG
, 0x00000000);

4015 
	`MSDC_WRITE32
(
SDC_CMD
, 0x00001000);

4017 
	`MSDC_SET_FIELD
(
EMMC_CFG0
, 
EMMC_CFG0_BOOTWDLY
, 2);

4018 
	`MSDC_SET_BIT32
(
EMMC_CFG0
, 
EMMC_CFG0_BOOTSTOP
);

4019 
	`WAIT_COND
((
	`MSDC_READ32
(
EMMC_STS
Ë& 
EMMC_STS_BOOTUPSTATE
Ë=0, 
tmo
,Åmo);

4022 
	`MSDC_CLR_BIT32
(
EMMC_CFG0
, 
EMMC_CFG0_BOOTSUPP
);

4025 
	`MSDC_WRITE32
(
EMMC_STS
, 
	`MSDC_READ32
(EMMC_STS));

4026 
	}
}

4028 
	$msdc_emmc_boŸ_ªad
(
mmc_ho°
 *
ho°
, 
u32
 
size
, u32 *
to
)

4030 
îr
 = 
MMC_ERR_NONE
;

4031 
u32
 
°s
;

4032 
u32
 
tŸÆsz
 = 
size
;

4033 
u32
 
ba£
 = 
ho°
->base;

4035 
size
) {

4036 
°s
 = 
	`MSDC_READ32
(
EMMC_STS
);

4037 i‡(
°s
 & 
EMMC_STS_BOOTCRCERR
) {

4038 
îr
 = 
MMC_ERR_BADCRC
;

4039 
out
;

4040 } i‡(
°s
 & 
EMMC_STS_BOOTDATTMO
) {

4041 
îr
 = 
MMC_ERR_TIMEOUT
;

4042 
out
;

4045 i‡((
size
 >
MSDC_FIFO_THD
Ë&& (
	`MSDC_RXFIFOCNT
() >= MSDC_FIFO_THD)) {

4046 
À·
 = 
MSDC_FIFO_THD
 >> 2;

4048 *
to
++ = 
	`MSDC_FIFO_READ32
();

4049 } --
À·
);

4050 
size
 -
MSDC_FIFO_THD
;

4051 
	`MSG
(
FIO
, "[SD%d] Read %d bytes, RXFIFOCNT: %d, Left: %d/%d\n",

4052 
ho°
->
id
, 
MSDC_FIFO_THD
, 
	`MSDC_RXFIFOCNT
(), 
size
, 
tŸÆsz
);

4053 } i‡((
size
 < 
MSDC_FIFO_THD
Ë&& 
	`MSDC_RXFIFOCNT
() >= size) {

4054 
size
) {

4055 i‡(
size
 > 3) {

4056 *
to
++ = 
	`MSDC_FIFO_READ32
();

4057 
size
 -= 4;

4059 
u32
 
vÆ
 = 
	`MSDC_FIFO_READ32
();

4060 
	`mem˝y
(
to
, &
vÆ
, 
size
);

4061 
size
 = 0;

4064 
	`MSG
(
FIO
, "[SD%d] ReadÜeft bytes, RXFIFOCNT: %d, Left: %d/%d\n",

4065 
ho°
->
id
, 
	`MSDC_RXFIFOCNT
(), 
size
, 
tŸÆsz
);

4069 
out
:

4070 i‡(
îr
) {

4071 
	`¥ötf
("[SD%d] EMMC_BOOT:Ñead boot code fail(%d), FIFOCNT=%d\n",

4072 
ho°
->
id
, 
îr
, 
	`MSDC_RXFIFOCNT
());

4074  
îr
;

4075 
	}
}

4077 
	$msdc_emmc_boŸ_ª£t
(
mmc_ho°
 *
ho°
, 
ª£t
)

4079 
u32
 
ba£
 = 
ho°
->base;

4081 
ª£t
) {

4082 
EMMC_BOOT_PWR_RESET
:

4083 
	`msdc_h¨d_ª£t
();

4085 
EMMC_BOOT_RST_N_SIG
:

4086 i‡(
msdc_ˇp
.
Êags
 & 
MSDC_RST_PIN_EN
) {

4088 
	`MSDC_SET_BIT32
(
EMMC_IOCON
, 
EMMC_IOCON_BOOTRST
);

4091 
	`mdñay
(1);

4094 
	`MSDC_CLR_BIT32
(
EMMC_IOCON
, 
EMMC_IOCON_BOOTRST
);

4095 
	`MSDC_SET_BIT32
(
MSDC_CFG
, 
MSDC_CFG_CKPDN
);

4098 
	`mdñay
(1);

4099 
	`MSDC_CLR_BIT32
(
MSDC_CFG
, 
MSDC_CFG_CKPDN
);

4102 
EMMC_BOOT_PRE_IDLE_CMD
:

4104 
	`SDC_SEND_CMD
(0x0, 0xF0F0F0F0);

4107 
	}
}

4109 
	$msdc_öô
(
id
, 
mmc_ho°
 *
ho°
, 
˛k§c
, 
mode
)

4112 
u32
 
baddr
[] = {
MSDC0_BASE
};

4113 
u32
 
ba£
 = 
baddr
[
id
];

4114 
gpd_t
 *
gpd
;

4115 
msdc_bd_t
 *
bd
;

4116 
msdc_¥iv_t
 *
¥iv
;

4117 
dma_c⁄fig
 *
cfg
;

4118 #i‡
MSDC_USE_IRQ


4119 
úq_h™dÀr_t
 
i§
[] = {

4120 
msdc_úq_h™dÀr_0
,

4121 
msdc_úq_h™dÀr_1
,

4122 
msdc_úq_h™dÀr_2
,

4123 
msdc_úq_h™dÀr_3


4127 
˛k§c
 = (˛k§¯=-1Ë? 
msdc_ˇp
.
˛k_§c
 : clksrc;

4129 #i‡
MSDC_USE_SDXC_FPGA


4132 
sdxc_swôch
 = 0;

4133 i‡(
sdxc_swôch
 == 0) {

4134 
	`MSDC_WRITE32
(
GPO_BASE
, 0x1);

4135 
sdxc_swôch
 = 1;

4140 
gpd
 = &
msdc_gpd_poﬁ
[
id
][0];

4141 
bd
 = &
msdc_bd_poﬁ
[
id
][0];

4142 
¥iv
 = &
msdc_¥iv
[
id
];

4143 
cfg
 = &
¥iv
->cfg;

4145 #i‡
MSDC_DEBUG


4146 
msdc_ªg
[
id
] = (
msdc_ªgs
*)
ba£
;

4149 
	`mem£t
(
gpd
, 0, (
gpd_t
Ë* 
MAX_GPD_POOL_SZ
);

4150 
	`mem£t
(
bd
, 0, (
msdc_bd_t
Ë* 
MAX_BD_POOL_SZ
);

4151 
	`mem£t
(
¥iv
, 0, (
msdc_¥iv_t
));

4153 
ho°
->
id
 = id;

4154 
ho°
->
ba£
 = base;

4155 
ho°
->
f_max
 = 
MSDC_MAX_SCLK
;

4156 
ho°
->
f_mö
 = 
MSDC_MIN_SCLK
;

4157 
ho°
->
blkbôs

MMC_BLOCK_BITS
;

4158 
ho°
->
blkÀn
 = 0;

4159 
ho°
->
¥iv
 = (*)priv;

4161 
ho°
->
ˇps
 = 
MMC_CAP_MULTIWRITE
;

4163 i‡(
msdc_ˇp
.
Êags
 & 
MSDC_HIGHSPEED
)

4164 
ho°
->
ˇps
 |(
MMC_CAP_MMC_HIGHSPEED
 | 
MMC_CAP_SD_HIGHSPEED
);

4165 i‡(
msdc_ˇp
.
Êags
 & 
MSDC_UHS1
)

4166 
ho°
->
ˇps
 |
MMC_CAP_SD_UHS1
;

4167 i‡(
msdc_ˇp
.
Êags
 & 
MSDC_DDR
)

4168 
ho°
->
ˇps
 |
MMC_CAP_DDR
;

4169 i‡(
msdc_ˇp
.
d©a_pös
 == 4)

4170 
ho°
->
ˇps
 |
MMC_CAP_4_BIT_DATA
;

4171 i‡(
msdc_ˇp
.
d©a_pös
 == 8)

4172 
ho°
->
ˇps
 |
MMC_CAP_8_BIT_DATA
;

4174 
ho°
->
o¸_avaû
 = 
MMC_VDD_33_34
;

4178 
ho°
->
max_hw_£gs
 = 
MAX_DMA_TRAN_SIZE
/512;

4179 
ho°
->
max_phys_£gs
 = 
MAX_DMA_TRAN_SIZE
/512;

4180 
ho°
->
max_£g_size
 = 
MAX_DMA_TRAN_SIZE
;

4181 
ho°
->
max_blk_size
 = 2048;

4182 
ho°
->
max_blk_cou¡
 = 65535;

4183 
ho°
->
ˇrd_dëe˘_Êag
 = 1;

4185 
¥iv
->
Æloc_bd
 = 0;

4186 
¥iv
->
Æloc_gpd
 = 0;

4187 
¥iv
->
bd_poﬁ
 = (
msdc_bd_t
 *Ë
	`PHYSADDR
(
bd
);

4188 
¥iv
->
gpd_poﬁ
 = (
gpd_t
 *Ë
	`PHYSADDR
(
gpd
);

4189 
¥iv
->
a˘ive_hód
 = 
NULL
;

4190 
¥iv
->
a˘ive_èû
 = 
NULL
;

4191 
¥iv
->
dsm∂
 = 
msdc_ˇp
.
d©a_edge
;

4192 
¥iv
->
rsm∂
 = 
msdc_ˇp
.
cmd_edge
;

4194 
cfg
->
sg
 = &
¥iv
->sg[0];

4195 
cfg
->
bur°sz
 = 
MSDC_BRUST_64B
;

4196 
cfg
->
Êags
 = 
DMA_FLAG_NONE
;

4197 
cfg
->
mode
 = mode;

4199 #i‡
MSDC_USE_IRQ


4200 
msdc_úq_°s
[
id
] = 0;

4201 
sdio_úq_h™dÀr
[
id
] = 
NULL
;

4202 
	`REGISTER_MSDC_IRQ_HANDLER
(
id
, 
i§
[id], 
ho°
);

4206 
	`MSDC_SET_FIELD
(
MSDC_CFG
, 
MSDC_CFG_MODE
, 
MSDC_SDMMC
);

4207 
	`MSDC_RESET
();

4208 
	`MSDC_CLR_FIFO
();

4209 
	`MSDC_CLR_INT
();

4212 
	`MSDC_WRITE32
(
MSDC_PAD_CTL0
, 0x0090000);

4213 
	`MSDC_WRITE32
(
MSDC_PAD_CTL1
, 0x00A0000);

4214 
	`MSDC_WRITE32
(
MSDC_PAD_CTL2
, 0x00A0000);

4216 
	`MSDC_WRITE32
(
MSDC_PAD_TUNE
, 0x84101010);

4218 
	`MSDC_WRITE32
(
MSDC_DAT_RDDLY0
, 0x10101010);

4219 
	`MSDC_WRITE32
(
MSDC_DAT_RDDLY1
, 0x00000000);

4220 
	`MSDC_WRITE32
(
MSDC_IOCON
, 0x00000000);

4222 
	`MSDC_WRITE32
(
MSDC_PATCH_BIT0
, 0x003C000F);

4224 
	`MSDC_WRITE32
(
MSDC_PATCH_BIT1
, 0x00000011);

4228 
	`MSDC_SET_BIT32
(
MSDC_CFG
, 
MSDC_CFG_PIO
);

4231 
	`MSDC_SET_BIT32
(
SDC_CFG
, 
SDC_CFG_SDIO
);

4234 
	`MSDC_SET_BIT32
(
SDC_CFG
, 
SDC_CFG_INSWKUP
);

4237 
	`MSDC_SET_BIT32
(
MSDC_PAD_CTL0
, 
MSDC_PAD_CTL0_CLKSMT
);

4238 
	`MSDC_SET_BIT32
(
MSDC_PAD_CTL1
, 
MSDC_PAD_CTL1_CMDSMT
);

4239 
	`MSDC_SET_BIT32
(
MSDC_PAD_CTL2
, 
MSDC_PAD_CTL2_DATSMT
);

4242 
	`MSDC_SET_FIELD
(
MSDC_PAD_CTL0
, 
MSDC_PAD_CTL0_CLKDRVN
, 
msdc_ˇp
.
˛k_drv
);

4243 
	`MSDC_SET_FIELD
(
MSDC_PAD_CTL0
, 
MSDC_PAD_CTL0_CLKDRVP
, 
msdc_ˇp
.
˛k_drv
);

4244 
	`MSDC_SET_FIELD
(
MSDC_PAD_CTL1
, 
MSDC_PAD_CTL1_CMDDRVN
, 
msdc_ˇp
.
cmd_drv
);

4245 
	`MSDC_SET_FIELD
(
MSDC_PAD_CTL1
, 
MSDC_PAD_CTL1_CMDDRVP
, 
msdc_ˇp
.
cmd_drv
);

4246 
	`MSDC_SET_FIELD
(
MSDC_PAD_CTL2
, 
MSDC_PAD_CTL2_DATDRVN
, 
msdc_ˇp
.
d©_drv
);

4247 
	`MSDC_SET_FIELD
(
MSDC_PAD_CTL2
, 
MSDC_PAD_CTL2_DATDRVP
, 
msdc_ˇp
.
d©_drv
);

4250 
	`MSDC_SET_FIELD
(
MSDC_IOCON
, 
MSDC_IOCON_RSPL
, 
¥iv
->
rsm∂
);

4251 
	`MSDC_SET_FIELD
(
MSDC_IOCON
, 
MSDC_IOCON_DSPL
, 
¥iv
->
dsm∂
);

4254 
	`MSDC_SET_FIELD
(
MSDC_PATCH_BIT0
, 1 << 30, 1);

4257 #i‡
MSDC_HW_DEBUG


4258 
	`MSDC_SET_FIELD
(0xc0005c50, 0x7 << 9, 6);

4259 
	`MSDC_SET_FIELD
(0xc0005c60, 0x7 << 9, 6);

4260 
	`MSDC_SET_FIELD
(0xc0005c60, 0x7 << 12, 6);

4261 
	`MSDC_SET_FIELD
(0xc0005c70, 0x7 << 6, 6);

4262 
	`MSDC_SET_FIELD
(0xc0005c70, 0x7 << 9, 6);

4263 
	`MSDC_SET_FIELD
(0xc0005c70, 0x7 << 12, 6);

4264 
	`MSDC_SET_FIELD
(0xc0005c80, 0x7 << 9, 6);

4265 
	`MSDC_SET_FIELD
(0xc0005c90, 0x7 << 3, 6);

4266 
	`MSDC_WRITE32
(0xc00018b0, 0x2005);

4267 
	`MSDC_WRITE32
(
MSDC_HW_DBG
, 0x3A3A3A3A);

4268 
	`MSDC_CLR_BIT32
(
MSDC_PATCH_BIT0
, 1 << 2);

4271 
	`msdc_c⁄fig_˛k§c
(
ho°
, 
˛k§c
);

4272 
	`msdc_c⁄fig_bus
(
ho°
, 
HOST_BUS_WIDTH_1
);

4273 
	`msdc_c⁄fig_˛ock
(
ho°
, 0, 
MSDC_MIN_SCLK
);

4275 
	`msdc_öå_unmask
(
ho°
, 0x0001FF7B);

4276 
	`msdc_£t_dmode
(
ho°
, 
mode
);

4277 
	`msdc_£t_pio_bôs
(
ho°
, 32);

4278 
	`msdc_£t_timeout
(
ho°
, 100000000, 0);

4279 
	`msdc_ˇrd_dëe˘
(
ho°
, 1);

4282 
	}
}

4284 
	$msdc_deöô
(
mmc_ho°
 *
ho°
)

4286 
u32
 
ba£
 = 
ho°
->base;

4288 
	`msdc_ˇrd_dëe˘
(
ho°
, 0);

4289 
	`msdc_öå_mask
(
ho°
, 0x0001FFFB);

4290 #i‡
MSDC_USE_IRQ


4291 
	`UNREGISTER_MSDC_IRQ_HANDLER
(
ho°
->
id
);

4293 
	`MSDC_RESET
();

4294 
	`MSDC_CLR_FIFO
();

4295 
	`MSDC_CLR_INT
();

4296 
	`msdc_powî
(
ho°
, 
MMC_POWER_OFF
);

4299 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/msdc/msdc.h

36 #i‚de‡
_MSDC_H_


37 
	#_MSDC_H_


	)

39 
	~"c⁄fig.h
"

40 
	~"msg.h
"

41 
	~"mmc_c‹e.h
"

42 
	~"mmc_ã°.h
"

43 
	~<löux/ty≥s.h
>

44 
	~"utûs.h
"

45 
	~<π_mm≠.h
>

50 
	#REG_ADDR
(
x
Ë((vﬁ©ûê
uöt32
*)(
ba£
 + 
OFFSET_
##x))

	)

52 
	#MSDC0_BASE
 
RALINK_MSDC_BASE


	)

56 
	#MSDC_FIFO_SZ
 (128)

	)

57 
	#MSDC_FIFO_THD
 (64)

	)

58 
	#MSDC_MAX_NUM
 (4)

	)

60 
	#MSDC_MS
 (0)

	)

61 
	#MSDC_SDMMC
 (1)

	)

63 
	#MSDC_MODE_UNKNOWN
 (0)

	)

64 
	#MSDC_MODE_PIO
 (1)

	)

65 
	#MSDC_MODE_DMA_BASIC
 (2)

	)

66 
	#MSDC_MODE_DMA_DESC
 (3)

	)

67 
	#MSDC_MODE_DMA_ENHANCED
 (4)

	)

68 
	#MSDC_MODE_MMC_STREAM
 (5)

	)

70 
	#MSDC_BUS_1BITS
 (0)

	)

71 
	#MSDC_BUS_4BITS
 (1)

	)

72 
	#MSDC_BUS_8BITS
 (2)

	)

74 
	#MSDC_BRUST_8B
 (3)

	)

75 
	#MSDC_BRUST_16B
 (4)

	)

76 
	#MSDC_BRUST_32B
 (5)

	)

77 
	#MSDC_BRUST_64B
 (6)

	)

79 
	#MSDC_PIN_PULL_NONE
 (0)

	)

80 
	#MSDC_PIN_PULL_DOWN
 (1)

	)

81 
	#MSDC_PIN_PULL_UP
 (2)

	)

82 
	#MSDC_PIN_KEEP
 (3)

	)

87 #i‡
deföed
 (
MT7620_FPGA_BOARD
Ë|| deföed (
MT7620_ASIC_BOARD
Ë|| deföed (
MT7628_FPGA_BOARD
Ë|| deföed (
MT7628_ASIC_BOARD
)

88 
	#MSDC_MAX_SCLK
 (48000000)

91 #ñi‡
	`deföed
 (
MT7621_FPGA_BOARD
Ë|| deföed (
MT7621_ASIC_BOARD
)

	)

92 
	#MSDC_MAX_SCLK
 (50000000)

94 
	#MSDC_MIN_SCLK
 (260000)

	)

96 
	#MSDC_AUTOCMD12
 (0x0001)

	)

97 
	#MSDC_AUTOCMD23
 (0x0002)

	)

98 
	#MSDC_AUTOCMD19
 (0x0003)

	)

103 
	#OFFSET_MSDC_CFG
 (0x0)

	)

104 
	#OFFSET_MSDC_IOCON
 (0x04)

	)

105 
	#OFFSET_MSDC_PS
 (0x08)

	)

106 
	#OFFSET_MSDC_INT
 (0x0c)

	)

107 
	#OFFSET_MSDC_INTEN
 (0x10)

	)

108 
	#OFFSET_MSDC_FIFOCS
 (0x14)

	)

109 
	#OFFSET_MSDC_TXDATA
 (0x18)

	)

110 
	#OFFSET_MSDC_RXDATA
 (0x1c)

	)

111 
	#OFFSET_SDC_CFG
 (0x30)

	)

112 
	#OFFSET_SDC_CMD
 (0x34)

	)

113 
	#OFFSET_SDC_ARG
 (0x38)

	)

114 
	#OFFSET_SDC_STS
 (0x3c)

	)

115 
	#OFFSET_SDC_RESP0
 (0x40)

	)

116 
	#OFFSET_SDC_RESP1
 (0x44)

	)

117 
	#OFFSET_SDC_RESP2
 (0x48)

	)

118 
	#OFFSET_SDC_RESP3
 (0x4c)

	)

119 
	#OFFSET_SDC_BLK_NUM
 (0x50)

	)

120 
	#OFFSET_SDC_CSTS
 (0x58)

	)

121 
	#OFFSET_SDC_CSTS_EN
 (0x5c)

	)

122 
	#OFFSET_SDC_DCRC_STS
 (0x60)

	)

123 
	#OFFSET_EMMC_CFG0
 (0x70)

	)

124 
	#OFFSET_EMMC_CFG1
 (0x74)

	)

125 
	#OFFSET_EMMC_STS
 (0x78)

	)

126 
	#OFFSET_EMMC_IOCON
 (0x7c)

	)

127 
	#OFFSET_SDC_ACMD_RESP
 (0x80)

	)

128 
	#OFFSET_SDC_ACMD19_TRG
 (0x84)

	)

129 
	#OFFSET_SDC_ACMD19_STS
 (0x88)

	)

130 
	#OFFSET_MSDC_DMA_SA
 (0x90)

	)

131 
	#OFFSET_MSDC_DMA_CA
 (0x94)

	)

132 
	#OFFSET_MSDC_DMA_CTRL
 (0x98)

	)

133 
	#OFFSET_MSDC_DMA_CFG
 (0x9c)

	)

134 
	#OFFSET_MSDC_DBG_SEL
 (0xa0)

	)

135 
	#OFFSET_MSDC_DBG_OUT
 (0xa4)

	)

136 
	#OFFSET_MSDC_PATCH_BIT0
 (0xb0)

	)

137 
	#OFFSET_MSDC_PATCH_BIT1
 (0xb4)

	)

138 
	#OFFSET_MSDC_PAD_CTL0
 (0xe0)

	)

139 
	#OFFSET_MSDC_PAD_CTL1
 (0xe4)

	)

140 
	#OFFSET_MSDC_PAD_CTL2
 (0xe8)

	)

141 
	#OFFSET_MSDC_PAD_TUNE
 (0xec)

	)

142 
	#OFFSET_MSDC_DAT_RDDLY0
 (0xf0)

	)

143 
	#OFFSET_MSDC_DAT_RDDLY1
 (0xf4)

	)

144 
	#OFFSET_MSDC_HW_DBG
 (0xf8)

	)

145 
	#OFFSET_MSDC_VERSION
 (0x100)

	)

146 
	#OFFSET_MSDC_ECO_VER
 (0x104)

	)

152 
	#MSDC_CFG
 
	`REG_ADDR
(
MSDC_CFG
)

	)

153 
	#MSDC_IOCON
 
	`REG_ADDR
(
MSDC_IOCON
)

	)

154 
	#MSDC_PS
 
	`REG_ADDR
(
MSDC_PS
)

	)

155 
	#MSDC_INT
 
	`REG_ADDR
(
MSDC_INT
)

	)

156 
	#MSDC_INTEN
 
	`REG_ADDR
(
MSDC_INTEN
)

	)

157 
	#MSDC_FIFOCS
 
	`REG_ADDR
(
MSDC_FIFOCS
)

	)

158 
	#MSDC_TXDATA
 
	`REG_ADDR
(
MSDC_TXDATA
)

	)

159 
	#MSDC_RXDATA
 
	`REG_ADDR
(
MSDC_RXDATA
)

	)

162 
	#SDC_CFG
 
	`REG_ADDR
(
SDC_CFG
)

	)

163 
	#SDC_CMD
 
	`REG_ADDR
(
SDC_CMD
)

	)

164 
	#SDC_ARG
 
	`REG_ADDR
(
SDC_ARG
)

	)

165 
	#SDC_STS
 
	`REG_ADDR
(
SDC_STS
)

	)

166 
	#SDC_RESP0
 
	`REG_ADDR
(
SDC_RESP0
)

	)

167 
	#SDC_RESP1
 
	`REG_ADDR
(
SDC_RESP1
)

	)

168 
	#SDC_RESP2
 
	`REG_ADDR
(
SDC_RESP2
)

	)

169 
	#SDC_RESP3
 
	`REG_ADDR
(
SDC_RESP3
)

	)

170 
	#SDC_BLK_NUM
 
	`REG_ADDR
(
SDC_BLK_NUM
)

	)

171 
	#SDC_CSTS
 
	`REG_ADDR
(
SDC_CSTS
)

	)

172 
	#SDC_CSTS_EN
 
	`REG_ADDR
(
SDC_CSTS_EN
)

	)

173 
	#SDC_DCRC_STS
 
	`REG_ADDR
(
SDC_DCRC_STS
)

	)

176 
	#EMMC_CFG0
 
	`REG_ADDR
(
EMMC_CFG0
)

	)

177 
	#EMMC_CFG1
 
	`REG_ADDR
(
EMMC_CFG1
)

	)

178 
	#EMMC_STS
 
	`REG_ADDR
(
EMMC_STS
)

	)

179 
	#EMMC_IOCON
 
	`REG_ADDR
(
EMMC_IOCON
)

	)

182 
	#SDC_ACMD_RESP
 
	`REG_ADDR
(
SDC_ACMD_RESP
)

	)

183 
	#SDC_ACMD19_TRG
 
	`REG_ADDR
(
SDC_ACMD19_TRG
)

	)

184 
	#SDC_ACMD19_STS
 
	`REG_ADDR
(
SDC_ACMD19_STS
)

	)

187 
	#MSDC_DMA_SA
 
	`REG_ADDR
(
MSDC_DMA_SA
)

	)

188 
	#MSDC_DMA_CA
 
	`REG_ADDR
(
MSDC_DMA_CA
)

	)

189 
	#MSDC_DMA_CTRL
 
	`REG_ADDR
(
MSDC_DMA_CTRL
)

	)

190 
	#MSDC_DMA_CFG
 
	`REG_ADDR
(
MSDC_DMA_CFG
)

	)

193 
	#MSDC_PAD_CTL0
 
	`REG_ADDR
(
MSDC_PAD_CTL0
)

	)

194 
	#MSDC_PAD_CTL1
 
	`REG_ADDR
(
MSDC_PAD_CTL1
)

	)

195 
	#MSDC_PAD_CTL2
 
	`REG_ADDR
(
MSDC_PAD_CTL2
)

	)

198 
	#MSDC_DAT_RDDLY0
 
	`REG_ADDR
(
MSDC_DAT_RDDLY0
)

	)

199 
	#MSDC_DAT_RDDLY1
 
	`REG_ADDR
(
MSDC_DAT_RDDLY1
)

	)

202 
	#MSDC_DBG_SEL
 
	`REG_ADDR
(
MSDC_DBG_SEL
)

	)

203 
	#MSDC_DBG_OUT
 
	`REG_ADDR
(
MSDC_DBG_OUT
)

	)

206 
	#MSDC_PATCH_BIT0
 
	`REG_ADDR
(
MSDC_PATCH_BIT0
)

	)

207 
	#MSDC_PATCH_BIT1
 
	`REG_ADDR
(
MSDC_PATCH_BIT1
)

	)

208 
	#MSDC_PAD_TUNE
 
	`REG_ADDR
(
MSDC_PAD_TUNE
)

	)

209 
	#MSDC_HW_DBG
 
	`REG_ADDR
(
MSDC_HW_DBG
)

	)

210 
	#MSDC_VERSION
 
	`REG_ADDR
(
MSDC_VERSION
)

	)

211 
	#MSDC_ECO_VER
 
	`REG_ADDR
(
MSDC_ECO_VER
)

	)

217 
	#MSDC_CFG_MODE
 (0x1 << 0Ë

	)

218 
	#MSDC_CFG_CKPDN
 (0x1 << 1Ë

	)

219 
	#MSDC_CFG_RST
 (0x1 << 2Ë

	)

220 
	#MSDC_CFG_PIO
 (0x1 << 3Ë

	)

221 
	#MSDC_CFG_CKDRVEN
 (0x1 << 4Ë

	)

222 
	#MSDC_CFG_BV18SDT
 (0x1 << 5Ë

	)

223 
	#MSDC_CFG_BV18PSS
 (0x1 << 6Ë

	)

224 
	#MSDC_CFG_CKSTB
 (0x1 << 7Ë

	)

225 
	#MSDC_CFG_CKDIV
 (0xf‡<< 8Ë

	)

226 
	#MSDC_CFG_CKMOD
 (0x3 << 16Ë

	)

229 
	#MSDC_IOCON_SDR104CKS
 (0x1 << 0Ë

	)

230 
	#MSDC_IOCON_RSPL
 (0x1 << 1Ë

	)

231 
	#MSDC_IOCON_DSPL
 (0x1 << 2Ë

	)

232 
	#MSDC_IOCON_DDLSEL
 (0x1 << 3Ë

	)

233 
	#MSDC_IOCON_DDR50CKD
 (0x1 << 4Ë

	)

234 
	#MSDC_IOCON_DSPLSEL
 (0x1 << 5Ë

	)

235 
	#MSDC_IOCON_D0SPL
 (0x1 << 16Ë

	)

236 
	#MSDC_IOCON_D1SPL
 (0x1 << 17Ë

	)

237 
	#MSDC_IOCON_D2SPL
 (0x1 << 18Ë

	)

238 
	#MSDC_IOCON_D3SPL
 (0x1 << 19Ë

	)

239 
	#MSDC_IOCON_D4SPL
 (0x1 << 20Ë

	)

240 
	#MSDC_IOCON_D5SPL
 (0x1 << 21Ë

	)

241 
	#MSDC_IOCON_D6SPL
 (0x1 << 22Ë

	)

242 
	#MSDC_IOCON_D7SPL
 (0x1 << 23Ë

	)

243 
	#MSDC_IOCON_RISCSZ
 (0x3 << 24Ë

	)

246 
	#MSDC_PS_CDEN
 (0x1 << 0Ë

	)

247 
	#MSDC_PS_CDSTS
 (0x1 << 1Ë

	)

248 
	#MSDC_PS_CDDEBOUNCE
 (0x‡<< 12Ë

	)

249 
	#MSDC_PS_DAT
 (0xf‡<< 16Ë

	)

250 
	#MSDC_PS_CMD
 (0x1 << 24Ë

	)

251 
	#MSDC_PS_WP
 (0x1UL<< 31Ë

	)

254 
	#MSDC_INT_MMCIRQ
 (0x1 << 0Ë

	)

255 
	#MSDC_INT_CDSC
 (0x1 << 1Ë

	)

256 
	#MSDC_INT_ACMDRDY
 (0x1 << 3Ë

	)

257 
	#MSDC_INT_ACMDTMO
 (0x1 << 4Ë

	)

258 
	#MSDC_INT_ACMDCRCERR
 (0x1 << 5Ë

	)

259 
	#MSDC_INT_DMAQ_EMPTY
 (0x1 << 6Ë

	)

260 
	#MSDC_INT_SDIOIRQ
 (0x1 << 7Ë

	)

261 
	#MSDC_INT_CMDRDY
 (0x1 << 8Ë

	)

262 
	#MSDC_INT_CMDTMO
 (0x1 << 9Ë

	)

263 
	#MSDC_INT_RSPCRCERR
 (0x1 << 10Ë

	)

264 
	#MSDC_INT_CSTA
 (0x1 << 11Ë

	)

265 
	#MSDC_INT_XFER_COMPL
 (0x1 << 12Ë

	)

266 
	#MSDC_INT_DXFER_DONE
 (0x1 << 13Ë

	)

267 
	#MSDC_INT_DATTMO
 (0x1 << 14Ë

	)

268 
	#MSDC_INT_DATCRCERR
 (0x1 << 15Ë

	)

269 
	#MSDC_INT_ACMD19_DONE
 (0x1 << 16Ë

	)

272 
	#MSDC_INTEN_MMCIRQ
 (0x1 << 0Ë

	)

273 
	#MSDC_INTEN_CDSC
 (0x1 << 1Ë

	)

274 
	#MSDC_INTEN_ACMDRDY
 (0x1 << 3Ë

	)

275 
	#MSDC_INTEN_ACMDTMO
 (0x1 << 4Ë

	)

276 
	#MSDC_INTEN_ACMDCRCERR
 (0x1 << 5Ë

	)

277 
	#MSDC_INTEN_DMAQ_EMPTY
 (0x1 << 6Ë

	)

278 
	#MSDC_INTEN_SDIOIRQ
 (0x1 << 7Ë

	)

279 
	#MSDC_INTEN_CMDRDY
 (0x1 << 8Ë

	)

280 
	#MSDC_INTEN_CMDTMO
 (0x1 << 9Ë

	)

281 
	#MSDC_INTEN_RSPCRCERR
 (0x1 << 10Ë

	)

282 
	#MSDC_INTEN_CSTA
 (0x1 << 11Ë

	)

283 
	#MSDC_INTEN_XFER_COMPL
 (0x1 << 12Ë

	)

284 
	#MSDC_INTEN_DXFER_DONE
 (0x1 << 13Ë

	)

285 
	#MSDC_INTEN_DATTMO
 (0x1 << 14Ë

	)

286 
	#MSDC_INTEN_DATCRCERR
 (0x1 << 15Ë

	)

287 
	#MSDC_INTEN_ACMD19_DONE
 (0x1 << 16Ë

	)

290 
	#MSDC_FIFOCS_RXCNT
 (0xf‡<< 0Ë

	)

291 
	#MSDC_FIFOCS_TXCNT
 (0xf‡<< 16Ë

	)

292 
	#MSDC_FIFOCS_CLR
 (0x1UL<< 31Ë

	)

295 
	#SDC_CFG_SDIOINTWKUP
 (0x1 << 0Ë

	)

296 
	#SDC_CFG_INSWKUP
 (0x1 << 1Ë

	)

297 
	#SDC_CFG_BUSWIDTH
 (0x3 << 16Ë

	)

298 
	#SDC_CFG_SDIO
 (0x1 << 19Ë

	)

299 
	#SDC_CFG_SDIOIDE
 (0x1 << 20Ë

	)

300 
	#SDC_CFG_INTATGAP
 (0x1 << 21Ë

	)

301 
	#SDC_CFG_DTOC
 (0xffUL << 24Ë

	)

304 
	#SDC_CMD_OPC
 (0x3‡<< 0Ë

	)

305 
	#SDC_CMD_BRK
 (0x1 << 6Ë

	)

306 
	#SDC_CMD_RSPTYP
 (0x7 << 7Ë

	)

307 
	#SDC_CMD_DTYP
 (0x3 << 11Ë

	)

308 
	#SDC_CMD_DTYP
 (0x3 << 11Ë

	)

309 
	#SDC_CMD_RW
 (0x1 << 13Ë

	)

310 
	#SDC_CMD_STOP
 (0x1 << 14Ë

	)

311 
	#SDC_CMD_GOIRQ
 (0x1 << 15Ë

	)

312 
	#SDC_CMD_BLKLEN
 (0xfff<< 16Ë

	)

313 
	#SDC_CMD_AUTOCMD
 (0x3 << 28Ë

	)

314 
	#SDC_CMD_VOLSWTH
 (0x1 << 30Ë

	)

317 
	#SDC_STS_SDCBUSY
 (0x1 << 0Ë

	)

318 
	#SDC_STS_CMDBUSY
 (0x1 << 1Ë

	)

319 
	#SDC_STS_SWR_COMPL
 (0x1UL<< 31Ë

	)

322 
	#SDC_DCRC_STS_NEG
 (0x‡<< 8Ë

	)

323 
	#SDC_DCRC_STS_POS
 (0xf‡<< 0Ë

	)

326 
	#EMMC_CFG0_BOOTSTART
 (0x1 << 0Ë

	)

327 
	#EMMC_CFG0_BOOTSTOP
 (0x1 << 1Ë

	)

328 
	#EMMC_CFG0_BOOTMODE
 (0x1 << 2Ë

	)

329 
	#EMMC_CFG0_BOOTACKDIS
 (0x1 << 3Ë

	)

330 
	#EMMC_CFG0_BOOTWDLY
 (0x7 << 12Ë

	)

331 
	#EMMC_CFG0_BOOTSUPP
 (0x1 << 15Ë

	)

334 
	#EMMC_CFG1_BOOTDATTMC
 (0xffff‡<< 0Ë

	)

335 
	#EMMC_CFG1_BOOTACKTMC
 (0xfffUL << 20Ë

	)

338 
	#EMMC_STS_BOOTCRCERR
 (0x1 << 0Ë

	)

339 
	#EMMC_STS_BOOTACKERR
 (0x1 << 1Ë

	)

340 
	#EMMC_STS_BOOTDATTMO
 (0x1 << 2Ë

	)

341 
	#EMMC_STS_BOOTACKTMO
 (0x1 << 3Ë

	)

342 
	#EMMC_STS_BOOTUPSTATE
 (0x1 << 4Ë

	)

343 
	#EMMC_STS_BOOTACKRCV
 (0x1 << 5Ë

	)

344 
	#EMMC_STS_BOOTDATRCV
 (0x1 << 6Ë

	)

347 
	#EMMC_IOCON_BOOTRST
 (0x1 << 0Ë

	)

350 
	#SDC_ACMD19_TRG_TUNESEL
 (0x‡<< 0Ë

	)

353 
	#MSDC_DMA_CTRL_START
 (0x1 << 0Ë

	)

354 
	#MSDC_DMA_CTRL_STOP
 (0x1 << 1Ë

	)

355 
	#MSDC_DMA_CTRL_RESUME
 (0x1 << 2Ë

	)

356 
	#MSDC_DMA_CTRL_MODE
 (0x1 << 8Ë

	)

357 
	#MSDC_DMA_CTRL_LASTBUF
 (0x1 << 10Ë

	)

358 
	#MSDC_DMA_CTRL_BRUSTSZ
 (0x7 << 12Ë

	)

359 
	#MSDC_DMA_CTRL_XFERSZ
 (0xffffUL << 16)

	)

362 
	#MSDC_DMA_CFG_STS
 (0x1 << 0Ë

	)

363 
	#MSDC_DMA_CFG_DECSEN
 (0x1 << 1Ë

	)

364 
	#MSDC_DMA_CFG_BDCSERR
 (0x1 << 4Ë

	)

365 
	#MSDC_DMA_CFG_GPDCSERR
 (0x1 << 5Ë

	)

368 
	#MSDC_PAD_CTL0_CLKDRVN
 (0x7 << 0Ë

	)

369 
	#MSDC_PAD_CTL0_CLKDRVP
 (0x7 << 4Ë

	)

370 
	#MSDC_PAD_CTL0_CLKSR
 (0x1 << 8Ë

	)

371 
	#MSDC_PAD_CTL0_CLKPD
 (0x1 << 16Ë

	)

372 
	#MSDC_PAD_CTL0_CLKPU
 (0x1 << 17Ë

	)

373 
	#MSDC_PAD_CTL0_CLKSMT
 (0x1 << 18Ë

	)

374 
	#MSDC_PAD_CTL0_CLKIES
 (0x1 << 19Ë

	)

375 
	#MSDC_PAD_CTL0_CLKTDSEL
 (0x‡<< 20Ë

	)

376 
	#MSDC_PAD_CTL0_CLKRDSEL
 (0xffUL<< 24Ë

	)

379 
	#MSDC_PAD_CTL1_CMDDRVN
 (0x7 << 0Ë

	)

380 
	#MSDC_PAD_CTL1_CMDDRVP
 (0x7 << 4Ë

	)

381 
	#MSDC_PAD_CTL1_CMDSR
 (0x1 << 8Ë

	)

382 
	#MSDC_PAD_CTL1_CMDPD
 (0x1 << 16Ë

	)

383 
	#MSDC_PAD_CTL1_CMDPU
 (0x1 << 17Ë

	)

384 
	#MSDC_PAD_CTL1_CMDSMT
 (0x1 << 18Ë

	)

385 
	#MSDC_PAD_CTL1_CMDIES
 (0x1 << 19Ë

	)

386 
	#MSDC_PAD_CTL1_CMDTDSEL
 (0x‡<< 20Ë

	)

387 
	#MSDC_PAD_CTL1_CMDRDSEL
 (0xffUL<< 24Ë

	)

390 
	#MSDC_PAD_CTL2_DATDRVN
 (0x7 << 0Ë

	)

391 
	#MSDC_PAD_CTL2_DATDRVP
 (0x7 << 4Ë

	)

392 
	#MSDC_PAD_CTL2_DATSR
 (0x1 << 8Ë

	)

393 
	#MSDC_PAD_CTL2_DATPD
 (0x1 << 16Ë

	)

394 
	#MSDC_PAD_CTL2_DATPU
 (0x1 << 17Ë

	)

395 
	#MSDC_PAD_CTL2_DATIES
 (0x1 << 19Ë

	)

396 
	#MSDC_PAD_CTL2_DATSMT
 (0x1 << 18Ë

	)

397 
	#MSDC_PAD_CTL2_DATTDSEL
 (0x‡<< 20Ë

	)

398 
	#MSDC_PAD_CTL2_DATRDSEL
 (0xffUL<< 24Ë

	)

401 
	#MSDC_PAD_TUNE_DATWRDLY
 (0x1F << 0Ë

	)

402 
	#MSDC_PAD_TUNE_DATRRDLY
 (0x1F << 8Ë

	)

403 
	#MSDC_PAD_TUNE_CMDRDLY
 (0x1F << 16Ë

	)

404 
	#MSDC_PAD_TUNE_CMDRRDLY
 (0x1F << 22Ë

	)

405 
	#MSDC_PAD_TUNE_CLKTXDLY
 (0x1FUL << 27Ë

	)

408 
	#MSDC_DAT_RDDLY0_D0
 (0x1F << 0Ë

	)

409 
	#MSDC_DAT_RDDLY0_D1
 (0x1F << 8Ë

	)

410 
	#MSDC_DAT_RDDLY0_D2
 (0x1F << 16Ë

	)

411 
	#MSDC_DAT_RDDLY0_D3
 (0x1FUL<< 24Ë

	)

412 
	#MSDC_DAT_RDDLY0_D0_E2
 (0x1FUL<< 24Ë

	)

414 
	#MSDC_DAT_RDDLY1_D4
 (0x1F << 0Ë

	)

415 
	#MSDC_DAT_RDDLY1_D5
 (0x1F << 8Ë

	)

416 
	#MSDC_DAT_RDDLY1_D6
 (0x1F << 16Ë

	)

417 
	#MSDC_DAT_RDDLY1_D7
 (0x1FUL << 24Ë

	)

420 
	#MSDC_CKGEN_MSDC_DLY_SEL
 (0x1F<<10)

	)

421 
	#MSDC_INT_DAT_LATCH_CK_SEL
 (0x7<<7)

	)

422 
	#MSDC_CKGEN_MSDC_CK_SEL
 (0x1<<6)

	)

423 
	#CKGEN_RX_SDClKO_SEL
 (0x1)

	)

427 
	#CMD_RSP_TA_CNTR
 (0x7)

	)

428 
	#WRDAT_CRCS_TA_CNTR
 (0x7 << 3)

	)

430 
	#CMD_RSP_TA_CNTR
 (0x7 << 3)

	)

431 
	#WRDAT_CRCS_TA_CNTR
 (0x7)

	)

438 
uöt32
 
	mhwo
:1;

439 
uöt32
 
	mbdp
:1;

440 
uöt32
 
	mrsv0
:6;

441 
uöt32
 
	mchksum
:8;

442 
uöt32
 
	möå
:1;

443 
uöt32
 
	mrsv1
:15;

444 *
	m√xt
;

445 *
	m±r
;

446 
uöt32
 
	mbuÊí
:16;

447 
uöt32
 
	mexéí
:8;

448 
uöt32
 
	mrsv2
:8;

449 
uöt32
 
	m¨g
;

450 
uöt32
 
	mblknum
;

451 
uöt32
 
	mcmd
;

452 } 
	tgpd_t
;

455 
uöt32
 
	meﬁ
:1;

456 
uöt32
 
	mrsv0
:7;

457 
uöt32
 
	mchksum
:8;

458 
uöt32
 
	mrsv1
:1;

459 
uöt32
 
	mblk∑d
:1;

460 
uöt32
 
	mdw∑d
:1;

461 
uöt32
 
	mrsv2
:13;

462 *
	m√xt
;

463 *
	m±r
;

464 
uöt32
 
	mbuÊí
:16;

465 
uöt32
 
	mrsv3
:16;

466 } 
	tmsdc_bd_t
;

473 
uöt32
 
	mmsdc
:1;

474 
uöt32
 
	mckpwn
:1;

475 
uöt32
 
	mr°
:1;

476 
uöt32
 
	mpio
:1;

477 
uöt32
 
	mckdrví
:1;

478 
uöt32
 
	m°¨t18v
:1;

479 
uöt32
 
	m∑ss18v
:1;

480 
uöt32
 
	mck°b
:1;

481 
uöt32
 
	mckdiv
:8;

482 
uöt32
 
	mckmod
:2;

483 
uöt32
 
	m∑d
:14;

484 } 
	tmsdc_cfg_ªg
;

486 
uöt32
 
	msdr104ck£l
:1;

487 
uöt32
 
	mrsm∂
:1;

488 
uöt32
 
	mdsm∂
:1;

489 
uöt32
 
	mddly£l
:1;

490 
uöt32
 
	mddr50ckd
:1;

491 
uöt32
 
	md•l£l
:1;

492 
uöt32
 
	m∑d1
:10;

493 
uöt32
 
	md0•l
:1;

494 
uöt32
 
	md1•l
:1;

495 
uöt32
 
	md2•l
:1;

496 
uöt32
 
	md3•l
:1;

497 
uöt32
 
	md4•l
:1;

498 
uöt32
 
	md5•l
:1;

499 
uöt32
 
	md6•l
:1;

500 
uöt32
 
	md7•l
:1;

501 
uöt32
 
	mriscsz
:1;

502 
uöt32
 
	m∑d2
:7;

503 } 
	tmsdc_ioc⁄_ªg
;

505 
uöt32
 
	mcdí
:1;

506 
uöt32
 
	mcd°s
:1;

507 
uöt32
 
	m∑d1
:10;

508 
uöt32
 
	mcddeboun˚
:4;

509 
uöt32
 
	md©
:8;

510 
uöt32
 
	mcmd
:1;

511 
uöt32
 
	m∑d2
:6;

512 
uöt32
 
	mwp
:1;

513 } 
	tmsdc_ps_ªg
;

515 
uöt32
 
	mmmcúq
:1;

516 
uöt32
 
	mcdsc
:1;

517 
uöt32
 
	m∑d1
:1;

518 
uöt32
 
	m©ocmdrdy
:1;

519 
uöt32
 
	m©ocmdtmo
:1;

520 
uöt32
 
	m©ocmd¸c
:1;

521 
uöt32
 
	mdmaqem±y
:1;

522 
uöt32
 
	msdioúq
:1;

523 
uöt32
 
	mcmdrdy
:1;

524 
uöt32
 
	mcmdtmo
:1;

525 
uöt32
 
	mr•¸c
:1;

526 
uöt32
 
	mc°a
:1;

527 
uöt32
 
	mx„rcomp
:1;

528 
uöt32
 
	mdx„rd⁄e
:1;

529 
uöt32
 
	md©tmo
:1;

530 
uöt32
 
	md©¸c
:1;

531 
uöt32
 
	m©ocmd19d⁄e
:1;

532 
uöt32
 
	m∑d2
:15;

533 } 
	tmsdc_öt_ªg
;

535 
uöt32
 
	mmmcúq
:1;

536 
uöt32
 
	mcdsc
:1;

537 
uöt32
 
	m∑d1
:1;

538 
uöt32
 
	m©ocmdrdy
:1;

539 
uöt32
 
	m©ocmdtmo
:1;

540 
uöt32
 
	m©ocmd¸c
:1;

541 
uöt32
 
	mdmaqem±y
:1;

542 
uöt32
 
	msdioúq
:1;

543 
uöt32
 
	mcmdrdy
:1;

544 
uöt32
 
	mcmdtmo
:1;

545 
uöt32
 
	mr•¸c
:1;

546 
uöt32
 
	mc°a
:1;

547 
uöt32
 
	mx„rcomp
:1;

548 
uöt32
 
	mdx„rd⁄e
:1;

549 
uöt32
 
	md©tmo
:1;

550 
uöt32
 
	md©¸c
:1;

551 
uöt32
 
	m©ocmd19d⁄e
:1;

552 
uöt32
 
	m∑d2
:15;

553 } 
	tmsdc_öãn_ªg
;

555 
uöt32
 
	mrx˙t
:8;

556 
uöt32
 
	m∑d1
:8;

557 
uöt32
 
	mtx˙t
:8;

558 
uöt32
 
	m∑d2
:7;

559 
uöt32
 
	m˛r
:1;

560 } 
	tmsdc_fifocs_ªg
;

562 
uöt32
 
	mvÆ
;

563 } 
	tmsdc_txd©_ªg
;

565 
uöt32
 
	mvÆ
;

566 } 
	tmsdc_rxd©_ªg
;

568 
uöt32
 
	msdiowkup
:1;

569 
uöt32
 
	möswkup
:1;

570 
uöt32
 
	m∑d1
:14;

571 
uöt32
 
	mbuswidth
:2;

572 
uöt32
 
	m∑d2
:1;

573 
uöt32
 
	msdio
:1;

574 
uöt32
 
	msdioide
:1;

575 
uöt32
 
	mötblkg≠
:1;

576 
uöt32
 
	m∑d4
:2;

577 
uöt32
 
	mdtoc
:8;

578 } 
	tsdc_cfg_ªg
;

580 
uöt32
 
	mcmd
:6;

581 
uöt32
 
	mbrk
:1;

582 
uöt32
 
	mr•typ
:3;

583 
uöt32
 
	m∑d1
:1;

584 
uöt32
 
	mdty≥
:2;

585 
uöt32
 
	mrw
:1;

586 
uöt32
 
	m°›
:1;

587 
uöt32
 
	mgoúq
:1;

588 
uöt32
 
	mblkÀn
:12;

589 
uöt32
 
	m©ocmd
:2;

590 
uöt32
 
	mvﬁswth
:1;

591 
uöt32
 
	m∑d2
:1;

592 } 
	tsdc_cmd_ªg
;

594 
uöt32
 
	m¨g
;

595 } 
	tsdc_¨g_ªg
;

597 
uöt32
 
	msdcbusy
:1;

598 
uöt32
 
	mcmdbusy
:1;

599 
uöt32
 
	m∑d
:29;

600 
uöt32
 
	mswrcm∂
:1;

601 } 
	tsdc_°s_ªg
;

603 
uöt32
 
	mvÆ
;

604 } 
	tsdc_ª•0_ªg
;

606 
uöt32
 
	mvÆ
;

607 } 
	tsdc_ª•1_ªg
;

609 
uöt32
 
	mvÆ
;

610 } 
	tsdc_ª•2_ªg
;

612 
uöt32
 
	mvÆ
;

613 } 
	tsdc_ª•3_ªg
;

615 
uöt32
 
	mnum
;

616 } 
	tsdc_blknum_ªg
;

618 
uöt32
 
	m°s
;

619 } 
	tsdc_c°s_ªg
;

621 
uöt32
 
	m°s
;

622 } 
	tsdc_c°£n_ªg
;

624 
uöt32
 
	md©¸c°s
:8;

625 
uöt32
 
	mddr¸c°s
:4;

626 
uöt32
 
	m∑d
:20;

627 } 
	tsdc_d©¸c°s_ªg
;

629 
uöt32
 
	mboŸ°¨t
:1;

630 
uöt32
 
	mboŸ°›
:1;

631 
uöt32
 
	mboŸmode
:1;

632 
uöt32
 
	m∑d1
:9;

633 
uöt32
 
	mboŸwaidly
:3;

634 
uöt32
 
	mboŸsuµ
:1;

635 
uöt32
 
	m∑d2
:16;

636 } 
	temmc_cfg0_ªg
;

638 
uöt32
 
	mboŸ¸˘mc
:16;

639 
uöt32
 
	m∑d
:4;

640 
uöt32
 
	mboŸacktmc
:12;

641 } 
	temmc_cfg1_ªg
;

643 
uöt32
 
	mboŸ¸˚º
:1;

644 
uöt32
 
	mboŸackîr
:1;

645 
uöt32
 
	mboŸd©tmo
:1;

646 
uöt32
 
	mboŸacktmo
:1;

647 
uöt32
 
	mboŸup°©e
:1;

648 
uöt32
 
	mboŸackrcv
:1;

649 
uöt32
 
	mboŸd©rcv
:1;

650 
uöt32
 
	m∑d
:25;

651 } 
	temmc_°s_ªg
;

653 
uöt32
 
	mboŸr°
:1;

654 
uöt32
 
	m∑d
:31;

655 } 
	temmc_ioc⁄_ªg
;

657 
uöt32
 
	mvÆ
;

658 } 
	tmsdc_acmd_ª•_ªg
;

660 
uöt32
 
	mtu√£l
:4;

661 
uöt32
 
	m∑d
:28;

662 } 
	tmsdc_acmd19_åg_ªg
;

664 
uöt32
 
	mvÆ
;

665 } 
	tmsdc_acmd19_°s_ªg
;

667 
uöt32
 
	maddr
;

668 } 
	tmsdc_dma_ß_ªg
;

670 
uöt32
 
	maddr
;

671 } 
	tmsdc_dma_ˇ_ªg
;

673 
uöt32
 
	m°¨t
:1;

674 
uöt32
 
	m°›
:1;

675 
uöt32
 
	mªsume
:1;

676 
uöt32
 
	m∑d1
:5;

677 
uöt32
 
	mmode
:1;

678 
uöt32
 
	m∑d2
:1;

679 
uöt32
 
	mœ°buf
:1;

680 
uöt32
 
	m∑d3
:1;

681 
uöt32
 
	mbru°sz
:3;

682 
uöt32
 
	m∑d4
:1;

683 
uöt32
 
	mx„rsz
:16;

684 } 
	tmsdc_dma_˘æ_ªg
;

686 
uöt32
 
	m°©us
:1;

687 
uöt32
 
	mdec£n
:1;

688 
uöt32
 
	m∑d1
:2;

689 
uöt32
 
	mbdc£n
:1;

690 
uöt32
 
	mgpdc£n
:1;

691 
uöt32
 
	m∑d2
:26;

692 } 
	tmsdc_dma_cfg_ªg
;

694 
uöt32
 
	m£l
:16;

695 
uöt32
 
	m∑d2
:16;

696 } 
	tmsdc_dbg_£l_ªg
;

698 
uöt32
 
	mvÆ
;

699 } 
	tmsdc_dbg_out_ªg
;

701 
uöt32
 
	m˛kdrvn
:3;

702 
uöt32
 
	mrsv0
:1;

703 
uöt32
 
	m˛kdrvp
:3;

704 
uöt32
 
	mrsv1
:1;

705 
uöt32
 
	m˛k§
:1;

706 
uöt32
 
	mrsv2
:7;

707 
uöt32
 
	m˛kpd
:1;

708 
uöt32
 
	m˛kpu
:1;

709 
uöt32
 
	m˛ksmt
:1;

710 
uöt32
 
	m˛kõs
:1;

711 
uöt32
 
	m˛ktd£l
:4;

712 
uöt32
 
	m˛krd£l
:8;

713 } 
	tmsdc_∑d_˘l0_ªg
;

715 
uöt32
 
	mcmddrvn
:3;

716 
uöt32
 
	mrsv0
:1;

717 
uöt32
 
	mcmddrvp
:3;

718 
uöt32
 
	mrsv1
:1;

719 
uöt32
 
	mcmd§
:1;

720 
uöt32
 
	mrsv2
:7;

721 
uöt32
 
	mcmdpd
:1;

722 
uöt32
 
	mcmdpu
:1;

723 
uöt32
 
	mcmdsmt
:1;

724 
uöt32
 
	mcmdõs
:1;

725 
uöt32
 
	mcmdtd£l
:4;

726 
uöt32
 
	mcmdrd£l
:8;

727 } 
	tmsdc_∑d_˘l1_ªg
;

729 
uöt32
 
	md©drvn
:3;

730 
uöt32
 
	mrsv0
:1;

731 
uöt32
 
	md©drvp
:3;

732 
uöt32
 
	mrsv1
:1;

733 
uöt32
 
	md©§
:1;

734 
uöt32
 
	mrsv2
:7;

735 
uöt32
 
	md©pd
:1;

736 
uöt32
 
	md©pu
:1;

737 
uöt32
 
	md©smt
:1;

738 
uöt32
 
	md©õs
:1;

739 
uöt32
 
	md©td£l
:4;

740 
uöt32
 
	md©rd£l
:8;

741 } 
	tmsdc_∑d_˘l2_ªg
;

743 
uöt32
 
	md©wrdly
:5;

744 
uöt32
 
	m∑d1
:3;

745 
uöt32
 
	md©rddly
:5;

746 
uöt32
 
	m∑d2
:3;

747 
uöt32
 
	mcmdrxdly
:5;

748 
uöt32
 
	m∑d3
:1;

749 
uöt32
 
	mcmdr•rxdly
:5;

750 
uöt32
 
	m˛ktxdly
:5;

751 } 
	tmsdc_∑d_tu√_ªg
;

753 
uöt32
 
	md©0
:5;

754 
uöt32
 
	mrsv0
:3;

755 
uöt32
 
	md©1
:5;

756 
uöt32
 
	mrsv1
:3;

757 
uöt32
 
	md©2
:5;

758 
uöt32
 
	mrsv2
:3;

759 
uöt32
 
	md©3
:5;

760 
uöt32
 
	mrsv3
:3;

761 } 
	tmsdc_d©_rddly0
;

763 
uöt32
 
	md©4
:5;

764 
uöt32
 
	mrsv4
:3;

765 
uöt32
 
	md©5
:5;

766 
uöt32
 
	mrsv5
:3;

767 
uöt32
 
	md©6
:5;

768 
uöt32
 
	mrsv6
:3;

769 
uöt32
 
	md©7
:5;

770 
uöt32
 
	mrsv7
:3;

771 } 
	tmsdc_d©_rddly1
;

773 
uöt32
 
	mdbg0£l
:8;

774 
uöt32
 
	mdbg1£l
:6;

775 
uöt32
 
	m∑d1
:2;

776 
uöt32
 
	mdbg2£l
:6;

777 
uöt32
 
	m∑d2
:2;

778 
uöt32
 
	mdbg3£l
:6;

779 
uöt32
 
	m∑d3
:2;

780 } 
	tmsdc_hw_dbg_ªg
;

782 
uöt32
 
	mvÆ
;

783 } 
	tmsdc_vîsi⁄_ªg
;

785 
uöt32
 
	mvÆ
;

786 } 
	tmsdc_eco_vî_ªg
;

788 
	smsdc_ªgs
 {

789 
msdc_cfg_ªg
 
	mmsdc_cfg
;

790 
msdc_ioc⁄_ªg
 
	mmsdc_ioc⁄
;

791 
msdc_ps_ªg
 
	mmsdc_ps
;

792 
msdc_öt_ªg
 
	mmsdc_öt
;

793 
msdc_öãn_ªg
 
	mmsdc_öãn
;

794 
msdc_fifocs_ªg
 
	mmsdc_fifocs
;

795 
msdc_txd©_ªg
 
	mmsdc_txd©
;

796 
msdc_rxd©_ªg
 
	mmsdc_rxd©
;

797 
uöt32
 
	mrsv1
[4];

798 
sdc_cfg_ªg
 
	msdc_cfg
;

799 
sdc_cmd_ªg
 
	msdc_cmd
;

800 
sdc_¨g_ªg
 
	msdc_¨g
;

801 
sdc_°s_ªg
 
	msdc_°s
;

802 
sdc_ª•0_ªg
 
	msdc_ª•0
;

803 
sdc_ª•1_ªg
 
	msdc_ª•1
;

804 
sdc_ª•2_ªg
 
	msdc_ª•2
;

805 
sdc_ª•3_ªg
 
	msdc_ª•3
;

806 
sdc_blknum_ªg
 
	msdc_blknum
;

807 
uöt32
 
	mrsv2
[1];

808 
sdc_c°s_ªg
 
	msdc_c°s
;

809 
sdc_c°£n_ªg
 
	msdc_c°£n
;

810 
sdc_d©¸c°s_ªg
 
	msdc_d¸c°a
;

811 
uöt32
 
	mrsv3
[3];

812 
emmc_cfg0_ªg
 
	memmc_cfg0
;

813 
emmc_cfg1_ªg
 
	memmc_cfg1
;

814 
emmc_°s_ªg
 
	memmc_°s
;

815 
emmc_ioc⁄_ªg
 
	memmc_ioc⁄
;

816 
msdc_acmd_ª•_ªg
 
	macmd_ª•
;

817 
msdc_acmd19_åg_ªg
 
	macmd19_åg
;

818 
msdc_acmd19_°s_ªg
 
	macmd19_°s
;

819 
uöt32
 
	mrsv4
[1];

820 
msdc_dma_ß_ªg
 
	mdma_ß
;

821 
msdc_dma_ˇ_ªg
 
	mdma_ˇ
;

822 
msdc_dma_˘æ_ªg
 
	mdma_˘æ
;

823 
msdc_dma_cfg_ªg
 
	mdma_cfg
;

824 
msdc_dbg_£l_ªg
 
	mdbg_£l
;

825 
msdc_dbg_out_ªg
 
	mdbg_out
;

826 
uöt32
 
	mrsv5
[2];

827 
uöt32
 
	m∑tch0
;

828 
uöt32
 
	m∑tch1
;

829 
uöt32
 
	mrsv6
[10];

830 
msdc_∑d_˘l0_ªg
 
	m∑d_˘l0
;

831 
msdc_∑d_˘l1_ªg
 
	m∑d_˘l1
;

832 
msdc_∑d_˘l2_ªg
 
	m∑d_˘l2
;

833 
msdc_∑d_tu√_ªg
 
	m∑d_tu√
;

834 
msdc_d©_rddly0
 
	md©_rddly0
;

835 
msdc_d©_rddly1
 
	md©_rddly1
;

836 
msdc_hw_dbg_ªg
 
	mhw_dbg
;

837 
uöt32
 
	mrsv7
[1];

838 
msdc_vîsi⁄_ªg
 
	mvîsi⁄
;

839 
msdc_eco_vî_ªg
 
	meco_vî
;

842 
	ssˇâîli°
 {

843 
u32
 
	maddr
;

844 
u32
 
	mÀn
;

847 
	ssˇâîli°_ex
 {

848 
u32
 
	mcmd
;

849 
u32
 
	m¨g
;

850 
u32
 
	msgÀn
;

851 
sˇâîli°
 *
	msg
;

854 
	#DMA_FLAG_NONE
 (0x00000000)

	)

855 
	#DMA_FLAG_EN_CHKSUM
 (0x00000001)

	)

856 
	#DMA_FLAG_PAD_BLOCK
 (0x00000002)

	)

857 
	#DMA_FLAG_PAD_DWORD
 (0x00000004)

	)

859 
	sdma_c⁄fig
 {

860 
u32
 
	mÊags
;

861 
u32
 
	mx„rsz
;

862 
u32
 
	msgÀn
;

863 
u32
 
	mblkÀn
;

864 
sˇâîli°
 *
	msg
;

865 
sˇâîli°_ex
 *
	mesg
;

866 
u8
 
	mmode
;

867 
u8
 
	mbur°sz
;

868 
u8
 
	möå
;

869 
u8
 
	m∑ddög
;

870 
u32
 
	mcmd
;

871 
u32
 
	m¨g
;

872 
u32
 
	mr•
;

873 
u32
 
	maut‹•
;

876 #i‡
MSDC_USE_REG_OPS_DUMP


877 
	$ªg32_wrôe
(vﬁ©ûê
uöt32
 *
addr
, uöt32 
d©a
)

879 *
addr
 = (
uöt32
)
d©a
;

880 
	`¥ötf
("[WR32] %x = %x\n", 
addr
, 
d©a
);

881 
	}
}

883 
uöt32
 
	$ªg32_ªad
(vﬁ©ûê
uöt32
 *
addr
)

885 
uöt32
 
d©a
 = *(vﬁ©ûêuöt32*)(
addr
);

886 
	`¥ötf
("[RD32] %x = %x\n", 
addr
, 
d©a
);

887  
d©a
;

888 
	}
}

890 
	$ªg16_wrôe
(vﬁ©ûê
uöt32
 *
addr
, 
uöt16
 
d©a
)

892 *(vﬁ©ûê
uöt16
*)(
addr
Ë
d©a
;

893 
	`¥ötf
("[WR16] %x = %x\n", 
addr
, 
d©a
);

894 
	}
}

896 
uöt16
 
	$ªg16_ªad
(vﬁ©ûê
uöt32
 *
addr
)

898 
uöt16
 
d©a
 = *(vﬁ©ûêuöt16*)
addr
;

899 
	`¥ötf
("[RD16] %x = %x\n", 
addr
, 
d©a
);

900  
d©a
;

901 
	}
}

903 
	$ªg8_wrôe
(vﬁ©ûê
uöt32
 *
addr
, 
uöt8
 
d©a
)

905 *(vﬁ©ûê
uöt8
*)(
addr
Ë
d©a
;

906 
	`¥ötf
("[WR8] %x = %x\n", 
addr
, 
d©a
);

907 
	}
}

909 
uöt8
 
	$ªg8_ªad
(vﬁ©ûê
uöt32
 *
addr
)

911 
uöt8
 
d©a
 = *(vﬁ©ûêuöt8*)
addr
;

912 
	`¥ötf
("[RD8] %x = %x\n", 
addr
, 
d©a
);

913  
d©a
;

914 
	}
}

916 
	#MSDC_WRITE32
(
addr
,
d©a
Ë
	`ªg32_wrôe
((vﬁ©ûê
uöt32
*Ôddr, d©a)

	)

917 
	#MSDC_READ32
(
addr
Ë
	`ªg32_ªad
((vﬁ©ûê
uöt32
*Ôddr)

	)

918 
	#MSDC_WRITE16
(
addr
,
d©a
Ë
	`ªg16_wrôe
((vﬁ©ûê
uöt32
*Ôddr, d©a)

	)

919 
	#MSDC_READ16
(
addr
Ë
	`ªg16_ªad
((vﬁ©ûê
uöt32
*Ôddr)

	)

920 
	#MSDC_WRITE8
(
addr
, 
d©a
Ë
	`ªg8_wrôe
((vﬁ©ûê
uöt32
*Ôddr, d©a)

	)

921 
	#MSDC_READ8
(
addr
Ë
	`ªg8_ªad
((vﬁ©ûê
uöt32
*Ôddr)

	)

922 
	#MSDC_SET_BIT32
(
addr
,
mask
) \

924 (*(vﬁ©ûê
uöt32
*)(
addr
Ë|(
mask
)); \

925 
	`¥ötf
("[SET32] %x |%x\n", 
addr
, 
mask
); \

926 }0)

	)

927 
	#MSDC_CLR_BIT32
(
addr
,
mask
) \

929 (*(vﬁ©ûê
uöt32
*)(
addr
Ë&~(
mask
)); \

930 
	`¥ötf
("[CLR32] %x &~%x\n", 
addr
, 
mask
); \

931 }0)

	)

932 
	#MSDC_SET_BIT16
(
addr
,
mask
) \

934 (*(vﬁ©ûê
uöt16
*)(
addr
Ë|(
mask
)); \

935 
	`¥ötf
("[SET16] %x |%x\n", 
addr
, 
mask
); \

936 }0)

	)

937 
	#MSDC_CLR_BIT16
(
addr
,
mask
) \

939 (*(vﬁ©ûê
uöt16
*)(
addr
Ë&~(
mask
)); \

940 
	`¥ötf
("[CLR16] %x &~%x\n", 
addr
, 
mask
); \

941 }0)

	)

943 
	#MSDC_WRITE32
(
addr
,
d©a
Ë(*(vﬁ©ûê
uöt32
*)◊ddrË(uöt32)(d©a))

	)

944 
	#MSDC_READ32
(
addr
Ë(*(vﬁ©ûê
uöt32
*)◊ddr))

	)

945 
	#MSDC_WRITE16
(
addr
,
d©a
Ë(*(vﬁ©ûê
uöt16
*)◊ddrË(uöt16)(d©a))

	)

946 
	#MSDC_READ16
(
addr
Ë(*(vﬁ©ûê
uöt16
*)◊ddr))

	)

947 
	#MSDC_WRITE8
(
addr
, 
d©a
Ë(*(vﬁ©ûê
uöt8
*)◊ddrË(uöt8)(d©a))

	)

948 
	#MSDC_READ8
(
addr
Ë(*(vﬁ©ûê
uöt8
*)◊ddr))

	)

949 
	#MSDC_SET_BIT32
(
addr
,
mask
Ë(*(vﬁ©ûê
uöt32
*)◊ddrË|(mask))

	)

950 
	#MSDC_CLR_BIT32
(
addr
,
mask
Ë(*(vﬁ©ûê
uöt32
*)◊ddrË&~(mask))

	)

951 
	#MSDC_SET_BIT16
(
addr
,
mask
Ë(*(vﬁ©ûê
uöt16
*)◊ddrË|(mask))

	)

952 
	#MSDC_CLR_BIT16
(
addr
,
mask
Ë(*(vﬁ©ûê
uöt16
*)◊ddrË&~(mask))

	)

955 
	#MSDC_SET_FIELD
(
ªg
,
fõld
,
vÆ
) \

957 vﬁ©ûê
uöt32
 
tv
 = 
	`MSDC_READ32
(
ªg
); \

958 
tv
 &~(
fõld
); \

959 
tv
 |((
vÆ
Ë<< (
	`uffs
(
fõld
) - 1)); \

960 
	`MSDC_WRITE32
(
ªg
,
tv
); \

961 } 0)

	)

963 
	#MSDC_GET_FIELD
(
ªg
,
fõld
,
vÆ
) \

965 vﬁ©ûê
uöt32
 
tv
 = 
	`MSDC_READ32
(
ªg
); \

966 
vÆ
 = ((
tv
 & (
fõld
)Ë>> (
	`uffs
(field) - 1)); \

967 } 0)

	)

969 
	#MSDC_RETRY
(
ex¥
,
ªåy
,
˙t
) \

971 
uöt32
 
t
 = 
˙t
; \

972 
uöt32
 
r
 = 
ªåy
; \

973 
uöt32
 
c
 = 
˙t
; \

974 
r
) { \

975 i‡(!(
ex¥
)) ; \

976 i‡(
c
-- == 0) { \

977 
r
--; 
	`udñay
(200); 
c
 = 
t
; \

980 
	`BUG_ON
(
r
 == 0); \

981 } 0)

	)

983 
	#MSDC_RESET
() \

985 
	`MSDC_SET_BIT32
(
MSDC_CFG
, 
MSDC_CFG_RST
); \

986 
	`MSDC_RETRY
(
	`MSDC_READ32
(
MSDC_CFG
Ë& 
MSDC_CFG_RST
, 5, 1000); \

987 } 0)

	)

989 
	#MSDC_CLR_INT
() \

991 vﬁ©ûê
uöt32
 
vÆ
 = 
	`MSDC_READ32
(
MSDC_INT
); \

992 
	`MSDC_WRITE32
(
MSDC_INT
, 
vÆ
); \

993 i‡(
	`MSDC_READ32
(
MSDC_INT
)) { \

994 
	`MSG
(
ERR
, "[ASSERT] MSDC_INT is NOT clear\n"); \

996 } 0)

	)

998 
	#MSDC_CLR_FIFO
() \

1000 
	`MSDC_SET_BIT32
(
MSDC_FIFOCS
, 
MSDC_FIFOCS_CLR
); \

1001 
	`MSDC_RETRY
(
	`MSDC_READ32
(
MSDC_FIFOCS
Ë& 
MSDC_FIFOCS_CLR
, 5, 1000); \

1002 } 0)

	)

1004 
	#MSDC_FIFO_WRITE32
(
vÆ
Ë
	`MSDC_WRITE32
(
MSDC_TXDATA
, vÆ)

	)

1005 
	#MSDC_FIFO_READ32
(Ë
	`MSDC_READ32
(
MSDC_RXDATA
)

	)

1006 
	#MSDC_FIFO_WRITE16
(
vÆ
Ë
	`MSDC_WRITE16
(
MSDC_TXDATA
, vÆ)

	)

1007 
	#MSDC_FIFO_READ16
(Ë
	`MSDC_READ16
(
MSDC_RXDATA
)

	)

1008 
	#MSDC_FIFO_WRITE8
(
vÆ
Ë
	`MSDC_WRITE8
(
MSDC_TXDATA
, vÆ)

	)

1009 
	#MSDC_FIFO_READ8
(Ë
	`MSDC_READ8
(
MSDC_RXDATA
)

	)

1011 
	#MSDC_FIFO_WRITE
(
vÆ
Ë
	`MSDC_FIFO_WRITE32
(vÆ)

	)

1012 
	#MSDC_FIFO_READ
(Ë
	`MSDC_FIFO_READ32
()

	)

1014 
	#MSDC_TXFIFOCNT
() \

1015 ((
	`MSDC_READ32
(
MSDC_FIFOCS
Ë& 
MSDC_FIFOCS_TXCNT
Ë>> 16)

	)

1016 
	#MSDC_RXFIFOCNT
() \

1017 ((
	`MSDC_READ32
(
MSDC_FIFOCS
Ë& 
MSDC_FIFOCS_RXCNT
Ë>> 0)

	)

1019 
	#MSDC_CARD_DETECTION_ON
(Ë
	`MSDC_SET_BIT32
(
MSDC_PS
, 
MSDC_PS_CDEN
)

	)

1020 
	#MSDC_CARD_DETECTION_OFF
(Ë
	`MSDC_CLR_BIT32
(
MSDC_PS
, 
MSDC_PS_CDEN
)

	)

1022 
	#MSDC_DMA_ON
(Ë
	`MSDC_CLR_BIT32
(
MSDC_CFG
, 
MSDC_CFG_PIO
)

	)

1023 
	#MSDC_DMA_OFF
(Ë
	`MSDC_SET_BIT32
(
MSDC_CFG
, 
MSDC_CFG_PIO
)

	)

1025 
	#SDC_IS_BUSY
(Ë(
	`MSDC_READ32
(
SDC_STS
Ë& 
SDC_STS_SDCBUSY
)

	)

1026 
	#SDC_IS_CMD_BUSY
(Ë(
	`MSDC_READ32
(
SDC_STS
Ë& 
SDC_STS_CMDBUSY
)

	)

1028 
	#SDC_SEND_CMD
(
cmd
,
¨g
) \

1030 
	`MSDC_WRITE32
(
SDC_ARG
, (
¨g
)); \

1031 
	`MSDC_WRITE32
(
SDC_CMD
, (
cmd
)); \

1032 } 0)

	)

1034 
	#MSDC_INIT_GPD_EX
(
gpd
,
exéí
,
cmd
,
¨g
,
blknum
) \

1036 ((
gpd_t
*)
gpd
)->
exéí
 =Éxtlen; \

1037 ((
gpd_t
*)
gpd
)->
cmd
 = cmd; \

1038 ((
gpd_t
*)
gpd
)->
¨g
 =árg; \

1039 ((
gpd_t
*)
gpd
)->
blknum
 = blknum; \

1040 }0)

	)

1042 
	#MSDC_INIT_BD
(
bd
, 
blk∑d
, 
dw∑d
, 
d±r
, 
dÀn
) \

1044 
	`BUG_ON
(
dÀn
 > 0xFFFFUL); \

1045 ((
msdc_bd_t
*)
bd
)->
blk∑d
 = blkpad; \

1046 ((
msdc_bd_t
*)
bd
)->
dw∑d
 = dwpad; \

1047 ((
msdc_bd_t
*)
bd
)->
±r
 = (*)
d±r
; \

1048 ((
msdc_bd_t
*)
bd
)->
buÊí
 = 
dÀn
; \

1049 }0)

	)

1051 #ifde‡
MMC_PROFILING


1052 
ölöe
 
	$msdc_timî_öô
()

1055 
	`MSDC_WRITE32
(
GPT_BASE
 + 0x30, 0x0);

1056 
	`MSDC_WRITE32
(
GPT_BASE
 + 0x30, 0x2);

1058 
	`MSDC_WRITE32
(
GPT_BASE
 + 0x38, 0);

1059 
	`MSDC_WRITE32
(
GPT_BASE
 + 0x3C, 32768);

1062 
	`MSDC_WRITE32
(
GPT_BASE
 + 0x34, 0x30);

1063 
	`MSDC_WRITE32
(
GPT_BASE
 + 0x30, 0x32);

1064 
	}
}

1065 
ölöe
 
	$msdc_timî_°¨t
()

1067 *(vﬁ©ûê*)(
GPT_BASE
 + 0x30) |= (1 << 0);

1068 
	}
}

1069 
ölöe
 
	$msdc_timî_°›
()

1071 *(vﬁ©ûê*)(
GPT_BASE
 + 0x30) &= ~(1 << 0);

1072 
	}
}

1073 
ölöe
 
	$msdc_timî_°›_˛ór
()

1075 *(vﬁ©ûê*)(
GPT_BASE
 + 0x30) &= ~(1 << 0);

1076 *(vﬁ©ûê*)(
GPT_BASE
 + 0x30) |= (1 << 1);

1077 
	}
}

1078 
ölöe
 
	$msdc_timî_gë_cou¡
()

1080  
	`MSDC_READ32
(
GPT_BASE
 + 0x38);

1081 
	}
}

1083 
	#msdc_timî_öô
(Ëdo{}0)

	)

1084 
	#msdc_timî_°¨t
(Ëdo{}0)

	)

1085 
	#msdc_timî_°›
(Ëdo{}0)

	)

1086 
	#msdc_timî_°›_˛ór
(Ëdo{}0)

	)

1087 
	#msdc_timî_gë_cou¡
(Ë0

	)

1090 
msdc_ªg_ã°
(
id
);

1091 
msdc_öô
(
id
, 
mmc_ho°
 *
ho°
, 
˛k§c
, 
mode
);

1092 
msdc_pio_bªad
(
mmc_ho°
 *
ho°
, 
uch¨
 *
d°
, 
ul⁄g
 
§c
, ul⁄g 
nblks
);

1093 
msdc_pio_bwrôe
(
mmc_ho°
 *
ho°
, 
ul⁄g
 
d°
, 
uch¨
 *
§c
, ul⁄g 
nblks
);

1094 
msdc_dma_bªad
(
mmc_ho°
 *
ho°
, 
uch¨
 *
d°
, 
ul⁄g
 
§c
, ul⁄g 
nblks
);

1095 
msdc_dma_bwrôe
(
mmc_ho°
 *
ho°
, 
ul⁄g
 
d°
, 
uch¨
 *
§c
, ul⁄g 
nblks
);

1096 
msdc_°ªam_bªad
(
mmc_ho°
 *
ho°
, 
uch¨
 *
d°
, 
ul⁄g
 
§c
, ul⁄g 
nblks
);

1097 
msdc_°ªam_bwrôe
(
mmc_ho°
 *
ho°
, 
ul⁄g
 
d°
, 
uch¨
 *
§c
, ul⁄g 
nblks
);

1098 
msdc_tu√_bwrôe
(
mmc_ho°
 *
ho°
, 
ul⁄g
 
d°
, 
uch¨
 *
§c
, ul⁄g 
nblks
);

1099 
msdc_tu√_bªad
(
mmc_ho°
 *
ho°
, 
uch¨
 *
d°
, 
ul⁄g
 
§c
, ul⁄g 
nblks
);

1100 
msdc_tu√_cmdr•
(
mmc_ho°
 *
ho°
, 
mmc_comm™d
 *
cmd
);

1101 
msdc_öå_sdio
(
mmc_ho°
 *
ho°
, 
íabÀ
);

1102 
msdc_öå_sdio_g≠
(
mmc_ho°
 * 
ho°
, 
íabÀ
);

1103 
msdc_c⁄fig_˛ock
(
mmc_ho°
 *
ho°
, 
ddr
, 
u32
 
hz
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/msdc/msdc_cust.c

36 
	~"msdc_cu°.h
"

38 
msdc_cu°
 
	gmsdc_ˇp
 = {

39 
MSDC_CLKSRC_48MHZ
,

40 
MSDC_SMPL_FALLING
,

42 
MSDC_SMPL_FALLING
,

50 #i‡
deföed
 (
EMMC_8BIT
)

58 
MSDC_HIGHSPEED
|
MSDC_WP_PIN_EN
|
MSDC_SYS_SUSPEND
|
MSDC_REMOVABLE
|
MSDC_CD_PIN_EN
,

61 
MSDC_CD_PIN_EN
|
MSDC_WP_PIN_EN
|
MSDC_SDIO_IRQ
|
MSDC_REMOVABLE
|

62 
MSDC_HIGHSPEED
|
MSDC_UHS1
|
MSDC_DDR
,

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/msdc/msdc_cust.h

36 #i‚de‡
_MSDC_CUST_H_


37 
	#_MSDC_CUST_H_


	)

39 
	~"c⁄fig.h
"

41 
	#MSDC_CD_PIN_EN
 (1 << 0Ë

	)

42 
	#MSDC_WP_PIN_EN
 (1 << 1Ë

	)

43 
	#MSDC_RST_PIN_EN
 (1 << 2Ë

	)

44 
	#MSDC_SDIO_IRQ
 (1 << 3Ë

	)

45 
	#MSDC_EXT_SDIO_IRQ
 (1 << 4Ë

	)

46 
	#MSDC_REMOVABLE
 (1 << 5Ë

	)

47 
	#MSDC_SYS_SUSPEND
 (1 << 6Ë

	)

48 
	#MSDC_HIGHSPEED
 (1 << 7Ë

	)

49 
	#MSDC_UHS1
 (1 << 8Ë

	)

50 
	#MSDC_DDR
 (1 << 9Ë

	)

52 
	#MSDC_SMPL_RISING
 (0)

	)

53 
	#MSDC_SMPL_FALLING
 (1)

	)

57 
	mMSDC_CLKSRC_48MHZ
 = 0,

58 
	mMSDC_CLKSRC_NONE
 = 1

59 } 
	t˛k_sour˚_t
;

61 
	smsdc_cu°
 {

62 
	m˛k_§c
;

63 
	mcmd_edge
;

64 
	md©a_edge
;

65 
	m˛k_drv
;

66 
	mcmd_drv
;

67 
	md©_drv
;

68 
	m˛k_18v_drv
;

69 
	mcmd_18v_drv
;

70 
	md©_18v_drv
;

71 
	md©a_pös
;

72 
	md©a_off£t
;

73 
	mÊags
;

76 
msdc_cu°
 
	gmsdc_ˇp
;

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/msdc/msg.h

36 #i‚de‡
_MSG_H_


37 
	#_MSG_H_


	)

39 
	~"c⁄fig.h
"

42 
	#MSG_EVT_NONE
 0x00000000

	)

43 
	#MSG_EVT_DMA
 0x00000001

	)

44 
	#MSG_EVT_CMD
 0x00000002

	)

45 
	#MSG_EVT_RSP
 0x00000004

	)

46 
	#MSG_EVT_INT
 0x00000008

	)

47 
	#MSG_EVT_CFG
 0x00000010

	)

48 
	#MSG_EVT_FUC
 0x00000020

	)

49 
	#MSG_EVT_OPS
 0x00000040

	)

50 
	#MSG_EVT_FIO
 0x00000080

	)

51 
	#MSG_EVT_INF
 0x01000000

	)

52 
	#MSG_EVT_WRN
 0x02000000

	)

53 
	#MSG_EVT_ERR
 0x04000000

	)

55 
	#MSG_EVT_ALL
 0xffffffff

	)

61 
	#MSG_EVT_MASK
 (
MSG_EVT_ALL
)

	)

63 #unde‡
MSG


65 #ifde‡
MSG_DEBUG


66 
	#MSG
(
evt
, 
fmt
, 
¨gs
...) \

68 i‡((
MSG_EVT_
##
evt
Ë& 
MSG_EVT_MASK
) { \

69 
	`¥ötf
(
fmt
, ##
¨gs
); \

71 } 0)

	)

73 
	#MSG_FUNC
(
f
Ë
	`MSG
(
FUC
, "<FUNC>: %s\n", 
__FUNCTION__
)

	)

75 
	#MSG
(
evt
, 
fmt
, 
¨gs
...)

	)

76 
	#MSG_FUNC
(
f
)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/msdc/sdio.h

1 #i‚de‡
_SDIO_H_


2 
	#_SDIO_H_


	)

4 
	~<löux/ty≥s.h
>

6 
	#SD_CMD_BIT
 (1 << 7)

	)

7 
	#SD_CMD_APP_BIT
 (1 << 8)

	)

8 
	#SD_CMD_AUTO_BIT
 (1 << 9)

	)

12 
	#SD_IO_SEND_OP_COND
 (5 | 
SD_CMD_BIT
Ë

	)

13 
	#SD_IO_RW_DIRECT
 (52 | 
SD_CMD_BIT
Ë

	)

14 
	#SD_IO_RW_EXTENDED
 (53 | 
SD_CMD_BIT
Ë

	)

52 
	#R5_COM_CRC_ERROR
 (1 << 15Ë

	)

53 
	#R5_ILLEGAL_COMMAND
 (1 << 14Ë

	)

54 
	#R5_ERROR
 (1 << 11Ë

	)

55 
	#R5_FUNCTION_NUMBER
 (1 << 9Ë

	)

56 
	#R5_OUT_OF_RANGE
 (1 << 8Ë

	)

57 
	#R5_STATUS
(
x
Ë(x & 0xCB00)

	)

58 
	#R5_IO_CURRENT_STATE
(
x
Ë((x & 0x3000Ë>> 12Ë

	)

64 
	#SDIO_CCCR_CCCR
 0x00

	)

66 
	#SDIO_CCCR_REV_1_00
 0

	)

67 
	#SDIO_CCCR_REV_1_10
 1

	)

68 
	#SDIO_CCCR_REV_1_20
 2

	)

70 
	#SDIO_SDIO_REV_1_00
 0

	)

71 
	#SDIO_SDIO_REV_1_10
 1

	)

72 
	#SDIO_SDIO_REV_1_20
 2

	)

73 
	#SDIO_SDIO_REV_2_00
 3

	)

75 
	#SDIO_CCCR_SD
 0x01

	)

77 
	#SDIO_SD_REV_1_01
 0

	)

78 
	#SDIO_SD_REV_1_10
 1

	)

79 
	#SDIO_SD_REV_2_00
 2

	)

81 
	#SDIO_CCCR_IOEx
 0x02

	)

82 
	#SDIO_CCCR_IORx
 0x03

	)

84 
	#SDIO_CCCR_IENx
 0x04

	)

85 
	#SDIO_CCCR_INTx
 0x05

	)

87 
	#SDIO_CCCR_ABORT
 0x06

	)

89 
	#SDIO_CCCR_IF
 0x07

	)

91 
	#SDIO_BUS_WIDTH_1BIT
 0x00

	)

92 
	#SDIO_BUS_WIDTH_4BIT
 0x02

	)

94 
	#SDIO_BUS_CD_DISABLE
 0x80

	)

96 
	#SDIO_CCCR_CAPS
 0x08

	)

98 
	#SDIO_CCCR_CAP_SDC
 0x01

	)

99 
	#SDIO_CCCR_CAP_SMB
 0x02

	)

100 
	#SDIO_CCCR_CAP_SRW
 0x04

	)

101 
	#SDIO_CCCR_CAP_SBS
 0x08

	)

102 
	#SDIO_CCCR_CAP_S4MI
 0x10

	)

103 
	#SDIO_CCCR_CAP_E4MI
 0x20

	)

104 
	#SDIO_CCCR_CAP_LSC
 0x40

	)

105 
	#SDIO_CCCR_CAP_4BLS
 0x80

	)

107 
	#SDIO_CCCR_CIS
 0x09

	)

110 
	#SDIO_CCCR_SUSPEND
 0x0c

	)

111 
	#SDIO_CCCR_SELx
 0x0d

	)

112 
	#SDIO_CCCR_EXECx
 0x0e

	)

113 
	#SDIO_CCCR_READYx
 0x0f

	)

115 
	#SDIO_CCCR_BLKSIZE
 0x10

	)

117 
	#SDIO_CCCR_POWER
 0x12

	)

119 
	#SDIO_POWER_SMPC
 0x01

	)

120 
	#SDIO_POWER_EMPC
 0x02

	)

122 
	#SDIO_CCCR_SPEED
 0x13

	)

124 
	#SDIO_SPEED_SHS
 0x01

	)

125 
	#SDIO_SPEED_EHS
 0x02

	)

131 
	#SDIO_FBR_BASE
(
f
Ë((fË* 0x100Ë

	)

133 
	#SDIO_FBR_STD_IF
 0x00

	)

135 
	#SDIO_FBR_SUPPORTS_CSA
 0x40

	)

136 
	#SDIO_FBR_ENABLE_CSA
 0x80

	)

138 
	#SDIO_FBR_STD_IF_EXT
 0x01

	)

140 
	#SDIO_FBR_POWER
 0x02

	)

142 
	#SDIO_FBR_POWER_SPS
 0x01

	)

143 
	#SDIO_FBR_POWER_EPS
 0x02

	)

145 
	#SDIO_FBR_CIS
 0x09

	)

148 
	#SDIO_FBR_CSA
 0x0C

	)

150 
	#SDIO_FBR_CSA_DATA
 0x0F

	)

152 
	#SDIO_FBR_BLKSIZE
 0x10

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/msdc/ts_msdc.c

38 
	~<comm⁄.h
>

39 
	~<comm™d.h
>

45 
	~"utûs.h
"

46 
	~"mmc_c‹e.h
"

47 
	~"mmc_ã°.h
"

48 
	~"msdc.h
"

49 
	~"msdc_cu°.h
"

50 
	~<asm/addr•a˚.h
>

52 
	#TEST_HOST_ID
 (0)

	)

56 #i‡
deföed
(
MSDC_INTSRAM
)

57 
	#MMC_TST_SIZE
 (2 * 1024Ë

	)

58 
	#MMC_TST_CHUNK_BLKS
 (1Ë

	)

60 #ifde‡
MMC_PROFILING


61 
	#MMC_TST_SIZE
 (4* 1024 * 1024Ë

	)

62 
	#MMC_TST_CHUNK_BLKS
 (128Ë

	)

64 
	#MMC_TST_SIZE
 (128 * 1024Ë

	)

65 
	#MMC_TST_CHUNK_BLKS
 (64Ë

	)

69 
	#MMC_TST_START_ADDR
 (128 * 1024 * 1024Ë

	)

70 
	#MMC_TST_START_BLK
 (
MMC_TST_START_ADDR
 / 
MMC_BLOCK_SIZE
)

	)

71 
	#MMC_TST_BLK_NR
(
x
Ë(
MMC_TST_START_BLK
+(x)*(
MMC_TST_SIZE
/
MMC_BLOCK_SIZE
))

	)

77 
TS_MSDC_Swôch
();

79 
SDMMC_RegTe°
();

80 
SDMMC_AutoTe°
();

81 
SDMMC_C¨dInôTe°
();

82 
SDMMC_C¨dEø£Te°
();

83 
SDMMC_C¨dSåómTe°
();

84 
SDMMC_C¨dPIOTe°
();

85 
SDMMC_C¨dBasicDMATe°
();

86 
SDMMC_C¨dDescDMATe°
();

87 
SDMMC_C¨dEnh™˚dDMATe°
();

88 
SDMMC_BlockLíTe°
();

89 
SDMMC_DDRModeTe°
();

90 
SDMMC_AutoCmd12Te°
();

91 
SDMMC_AutoCmd19Te°
();

92 
SDMMC_AutoCmd23Te°
();

93 
SDMMC_C¨dDëe˘Te°
();

94 
SDMMC_MMCIRQTe°
();

95 
SDMMC_EmmcBoŸTe°
();

96 
SDMMC_SåessTe°
();

97 
SDMMC_Su•ídResume
();

98 
SDMMC_TunögCmdTe°
();

99 
SDMMC_TunögWrôeTe°
();

100 
SDMMC_TunögRódTe°
();

101 
SDIO_I¡îru±Te°
();

102 
EMMC_BoŸModeC⁄fig
();

103 
SD30_SDR104Te°
();

108 
	gg_MSDC_id
 = 
TEST_HOST_ID
;

111 
	g˛k‰eq
[] = { 
MSDC_MAX_SCLK
 };

112 
	gbuswidth
[] = {

113 #i‡
deföed
 (
EMMC_8BIT
)

114 
HOST_BUS_WIDTH_8
,

116 
HOST_BUS_WIDTH_4
,

117 
HOST_BUS_WIDTH_1
};

118 
	gbur°sz
[] = { 
MSDC_BRUST_64B
, 
MSDC_BRUST_32B
, 
MSDC_BRUST_16B
, 
MSDC_BRUST_8B
 };

119 #i‡
deföed
(
MSDC_INTSRAM
)

120 
__©åibuã__
 ((
unu£d
, 
__£˘i⁄__
 ("INTERNAL_SRAM"))Ë
	gbuf
[
MMC_TST_SIZE
 * 2];

123 
	gbuf
[
MMC_TST_SIZE
 * 2];

125 
	#MMC_TST_BUF_ADDR
 &
buf
[0]

	)

151 
CTP_STATUS_T
 
	$ts_msdc_Inô
(**
µvInôSåu˘
)

153 
CTP_TEST_SUITE_T
 
sTe°Suôe
;

154 
msdc_vî
;

156 
sTe°Suôe
.
pzComm™d
 = "MSDC";

157 
sTe°Suôe
.
pzDes¸ùti⁄
 = "TS_MSDC";

158 
sTe°Suôe
.
psTe°Ca£
 = 
g_asTS_MSDC_Te°Ca£s
;

159 
sTe°Suôe
.
pfUßgeFunc
 = 
TS_MSDC_ShowUßge
;

161 
	`CTP_Regi°îTe°Suôe
(&
sTe°Suôe
);

163 *
µvInôSåu˘
 = (*)"TC_MSDC Init";

165  
CTP_SUCCESS
;

166 
	}
}

187 
CTP_STATUS_T
 
	$TS_MSDC_ShowUßge
(
UINT32
 
u4Te°Ca£Id
)

189 
u4Te°Ca£Id
)

192 
	`¥ötf
("MSDC CMD1 [/A] [/B]");

193 
	`¥ötf
(" /A Parameter Aánd its behave\r\n");

194 
	`¥ötf
(" /B Parameter Bánd its behave\r\n");

197 
	`¥ötf
("MSDC CMD2 [/A] [/B]");

198 
	`¥ötf
(" /X Parameter Xánd its behave\r\n");

199 
	`¥ötf
(" /Y Parameter Yánd its behave\r\n");

202 
	`¥ötf
("MSDC CMDX [/E] [/H]");

203 
	`¥ötf
(" /E Parameter Eánd its behave\r\n");

204 
	`¥ötf
(" /H Parameter Hánd its behave\r\n");

208  
CTP_SUCCESS
;

209 
	}
}

211 
CTP_STATUS_T
 
	$TS_MSDC_Swôch
(
CTP_INPUT_DATA_T
 *
psI≈ut
, 
CTP_OUTPUT_DATA_T
 *
psOuçut
)

213 
psOuçut
->
eTy≥
 = 
CTP_OUTPUT_RESULT
;

214 
psOuçut
->
eResu…
 = 
CTP_RESULT_PASS
;

216 
	`CTP_AskU£rDecisi⁄
(0, -1, &
g_MSDC_id
, "Please input MSDC host idÅo beÅested (0~3) : ");

218  
CTP_SUCCESS
;

219 
	}
}

241 
	$SDMMC_RegTe°
()

243 
id
 = 
g_MSDC_id
;

244 
buf
[512];

246 i‡(
	`msdc_ªg_ã°
(
id
) == 0) {

247 
	`¥ötf
("Register TestÖass!\n");

249 
	}
}

271 
CTP_STATUS_T
 
	$SDMMC_AutoTe°
(
CTP_INPUT_DATA_T
 *
psI≈ut
, 
CTP_OUTPUT_DATA_T
 *
psOuçut
)

273 
id
 = 
g_MSDC_id
;

275 i‡(
psOuçut
 =
NULL
)

276  
CTP_FAIL
;

280 
psOuçut
->
eTy≥
 = 
CTP_OUTPUT_RESULT
;

281 
psOuçut
->
eResu…
 = 
CTP_RESULT_PASS
;

282 
out
:

284  
CTP_SUCCESS
;

285 
	}
}

307 
	$SDMMC_BlockLíTe°
()

309 
îr
 = 0, 
ªt
;

310 
id
 = 
g_MSDC_id
;

311 
i
, 
j
, 
m
, 
k
, 
f
, 
w
;

312 
tŸÆ_blks
;

313 
mmc_ho°
 *
ho°
;

314 
mmc_ˇrd
 *
ˇrd
;

315 *
buf
 = (*)
MMC_TST_BUF_ADDR
;

320 
mode
[] = {
MSDC_MODE_PIO
};

321 
∑âîn
 = 0;

322 
addr
 = 0;

323 
blkƒ
;

326 
u32
 
blkÀn
[] = {1, 2, 3, 4, 15, 16, 17, 18, 31, 32, 33, 63, 64, 65,

340 
u32
 
blkÀn
[] = {511};

343 
u8
 
ªsu…
;

344 
u8
 
ªp‹t
[
	`ARRAY_SIZE
(
blkÀn
)][4];

345 
u32
 
blksz
, 
˛khz
;

346 
u32
 
°©us
;

347 
u32
 
blknum
 = 10;

348 
u32
 
tŸÆ_sz
;

351 
m
 = 0; m < 
	`ARRAY_SIZE
(
mode
); m++) {

352 
f
 = 0; f < 
	`ARRAY_SIZE
(
˛k‰eq
); f++) {

353 
w
 = 0; w < 
	`ARRAY_SIZE
(
buswidth
); w++) {

355 i‡(0 !
	`mmc_öô
(
id
))

356 
exô
;

358 
ho°
 = 
	`mmc_gë_ho°
(
id
);

359 
ˇrd
 = 
	`mmc_gë_ˇrd
(
id
);

361 i‡(
ˇrd
->
csd
.
wrôe_∑πül
 || c¨d->csd.
ªad_∑πül
) {

362 
	`¥ötf
("[SD%d] P¨tül_wrôe:%d, P¨tül_ªad:%d\n", 
id
,

363 
ˇrd
->
csd
.
wrôe_∑πül
, c¨d->csd.
ªad_∑πül
);

365 
	`¥ötf
("[SD%d] D€¢'àsuµ‹à∑πül_wrôê™dÖ¨tül_ªad\n", 
id
);

369 
˛khz
 = 
ˇrd
->
maxhz
 < 
˛k‰eq
[
f
] ? card->maxhz : clkfreq[f];

370 
	`mmc_£t_˛ock
(
ho°
, 
	`mmc_ˇrd_ddr
(
ˇrd
), 
˛khz
);

373 i‡(
	`mmc_£t_bus_width
(
ho°
, 
ˇrd
, 
buswidth
[
w
]) != 0) {

374 
îr
 = -
__LINE__
;

375 
exô
;

379 
	`msdc_£t_dmode
(
ho°
, 
mode
[
m
]);

381 
	`mem£t
(
ªp‹t
, 0, 4 * 
	`ARRAY_SIZE
(
blkÀn
));

383 
i
 = 0; i < 
	`ARRAY_SIZE
(
blkÀn
); i++) {

384 
	`¥ötf
("[SD%d] %d byã†Block SizêTe°\n", 
id
, 
blkÀn
[
i
]);

386 
∑âîn
 = 0xAA;

387 
îr
 = 0;

388 
blksz
 = 
ˇrd
->
csd
.
wrôe_∑πül
 ? 
blkÀn
[
i
] : 512;

389 
	`ERR_EXIT
(
	`mmc_£t_blk_Àngth
(
ho°
, 
blksz
), 
îr
, 
MMC_ERR_NONE
);

390 
tŸÆ_sz
 = 
blksz
 * 
blknum
;

391 
tŸÆ_blks
 = (
tŸÆ_sz
 + 
blksz
 - 1) / blksz;

392 
blkƒ
 = 
addr
 / 
blksz
;

395 
j
 = 0; j < 
tŸÆ_blks
; j++) {

396 
	`mem£t
(
buf
, 
∑âîn
, 
blksz
);

397 
ªt
 = 
	`mmc_block_wrôe
(
id
, 
blkƒ
 + 
j
, 1, (*)
buf
);

398 i‡(
ªt
 != 1) {

399 
îr
 = -
__LINE__
;

403 i‡(
îr
 == 0)

404 
ªp‹t
[
i
][0] = 1;

410 
	`ERR_EXIT
(
	`mmc_£nd_°©us
(
ho°
, 
ˇrd
, &
°©us
), 
îr
, 
MMC_ERR_NONE
);

411 } 
	`R1_CURRENT_STATE
(
°©us
) == 7);

413 
îr
 = 0;

414 
blksz
 = 
ˇrd
->
csd
.
ªad_∑πül
 ? 
blkÀn
[
i
] : 512;

415 
	`ERR_EXIT
(
	`mmc_£t_blk_Àngth
(
ho°
, 
blksz
), 
îr
, 
MMC_ERR_NONE
);

416 
tŸÆ_sz
 = 
blksz
 * 
blknum
;

417 
tŸÆ_blks
 = (
tŸÆ_sz
 + 
blksz
 - 1) / blksz;

418 
blkƒ
 = 
addr
 / 
blksz
;

421 
j
 = 0; j < 
tŸÆ_blks
; j++) {

422 
	`mem£t
(
buf
, 0, 
blksz
);

423 
ªt
 = 
	`mmc_block_ªad
(
id
, 
blkƒ
 + 
j
, 1, (*)
buf
);

424 i‡(
ªt
 != 1) {

425 
îr
 = -
__LINE__
;

428 
k
 = 0; k < 
blksz
; k++) {

429 i‡(
buf
[
k
] !
∑âîn
) {

430 
îr
 = -
__LINE__
;

435 i‡(
îr
 == 0)

436 
ªp‹t
[
i
][1] = 1;

438 
îr
 = 0;

439 
blksz
 = 
ˇrd
->
csd
.
wrôe_∑πül
 ? 
blkÀn
[
i
] : 512;

440 
	`ERR_EXIT
(
	`mmc_£t_blk_Àngth
(
ho°
, 
blksz
), 
îr
, 
MMC_ERR_NONE
);

441 
tŸÆ_sz
 = 
blksz
 * 
blknum
;

442 
tŸÆ_blks
 = (
tŸÆ_sz
 + 
blksz
 - 1) / blksz;

443 
blkƒ
 = 
addr
 / 
blksz
;

444 
	`mem£t
(
buf
, 0xCD, 
tŸÆ_sz
);

447 
ªt
 = 
	`mmc_block_wrôe
(
id
, 
blkƒ
, 
tŸÆ_blks
, (*)
buf
);

448 i‡(
ªt
 !()
tŸÆ_blks
) {

449 
îr
 = -
__LINE__
;

451 i‡(
îr
 == 0)

452 
ªp‹t
[
i
][2] = 1;

458 
	`ERR_EXIT
(
	`mmc_£nd_°©us
(
ho°
, 
ˇrd
, &
°©us
), 
îr
, 
MMC_ERR_NONE
);

459 } 
	`R1_CURRENT_STATE
(
°©us
) == 7);

461 
îr
 = 0;

462 
blksz
 = 
ˇrd
->
csd
.
ªad_∑πül
 ? 
blkÀn
[
i
] : 512;

463 
	`ERR_EXIT
(
	`mmc_£t_blk_Àngth
(
ho°
, 
blksz
), 
îr
, 
MMC_ERR_NONE
);

464 
tŸÆ_sz
 = 
blksz
 * 
blknum
;

465 
tŸÆ_blks
 = (
tŸÆ_sz
 + 
blksz
 - 1) / blksz;

466 
blkƒ
 = 
addr
 / 
blksz
;

467 
	`mem£t
(
buf
, 0, 
tŸÆ_sz
);

470 
ªt
 = 
	`mmc_block_ªad
(
id
, 
blkƒ
, 
tŸÆ_blks
, (*)
buf
);

471 i‡(
ªt
 !()
tŸÆ_blks
) {

472 
îr
 = -
__LINE__
;

474 i‡(
îr
 == 0) {

475 
j
 = 0; j < 
tŸÆ_sz
; j++) {

476 i‡(
buf
[
j
] == 0xCD)

478 
îr
 = -
__LINE__
;

482 i‡(
îr
 == 0)

483 
ªp‹t
[
i
][3] = 1;

485 
	`ERR_EXIT
(
	`mmc_£nd_°©us
(
ho°
, 
ˇrd
, &
°©us
), 
îr
, 
MMC_ERR_NONE
);

487 
i
 = 0; i < 
	`ARRAY_SIZE
(
blkÀn
); i++) {

488 
	`¥ötf
("[SD%d] SW=%d, SR=%d, MW=%d, MR=%d, Blksz=%d\n",

489 
id
, 
ªp‹t
[
i
][0],Ñeport[i][1],Ñeport[i][2],

490 
ªp‹t
[
i
][3], 
blkÀn
[i]);

495 
	`¥ötf
("Block Length TestÖass!\n");

496 
exô
:

497 i‡(
îr
) {

498 
	`¥ötf
("[SD%d]Éº‹ = %d\n", 
id
, 
îr
);

500 
	}
}

521 
	$SDMMC_C¨dInôTe°
()

523 
i
;

524 
id
 = 
g_MSDC_id
;

526 
i
 = 0; i < 5; i++) {

527 i‡(0 !
	`mmc_öô
(
id
)) {

528 
	`¥ötf
("Card Init Test fail!\n");

529 
exô
;

532 
	`¥ötf
("Card Init TestÖass!\n");

533 
exô
:

535 
	}
}

556 
	$SDMMC_C¨dEø£Te°
()

558 
i
;

559 
îr
;

560 
id
 = 
g_MSDC_id
;

561 
mmc_ho°
 *
ho°
;

562 
mmc_ˇrd
 *
ˇrd
;

563 
u32
 
°©us
;

564 
u32
 
addr
[] = { 
	`MMC_TST_BLK_NR
(10Ë* 
MMC_BLOCK_SIZE
,

565 
	`MMC_TST_BLK_NR
(20Ë* 
MMC_BLOCK_SIZE
 };

566 
u32
 
off£t
 = 32768;

568 i‡(0 !
	`mmc_öô
(
id
))

569 
exô
;

571 
ho°
 = 
	`mmc_gë_ho°
(
id
);

572 
ˇrd
 = 
	`mmc_gë_ˇrd
(
id
);

574 
i
 = 0; i < 
	`ARRAY_SIZE
(
addr
); i++) {

575 
	`¥ötf
("[MSDC%d] Eø£ Addr: 0x%x - 0x%x\n", 
id
, 
addr
[
i
],áddr[i] + 
off£t
);

576 
îr
 = 
	`mmc_îa£_°¨t
(
ˇrd
, 
addr
[
i
]);

577 i‡(
îr
Ë
exô
;

578 
îr
 = 
	`mmc_îa£_íd
(
ˇrd
, 
addr
[
i
] + 
off£t
);

579 i‡(
îr
Ë
exô
;

580 
	`¥ötf
("[MSDC%d] Eøsög....\n", 
id
);

581 
îr
 = 
	`mmc_îa£
(
ˇrd
, 
MMC_ERASE_NORMAL
);

582 i‡(
îr
Ë
exô
;

584 
îr
 = 
	`mmc_£nd_°©us
(
ho°
, 
ˇrd
, &
°©us
);

585 i‡(
îr
Ë
exô
;

586 i‡(
	`R1_STATUS
(
°©us
Ë!0Ë
exô
;

587 } 
	`R1_CURRENT_STATE
(
°©us
) == 7);

588 
	`¥ötf
("[MSDC%d] Eøsög....D⁄e\n\n", 
id
);

591 
	`¥ötf
("Card Erase TestÖass!\n");

592 
exô
:

594 
	}
}

615 
	$SDMMC_C¨dDëe˘Te°
()

617 
id
 = 
g_MSDC_id
;

618 
t°˙t
, 
˙t
, 
avaû
, 
ex≥˘_avaû
, 
¥Ÿ
;

619 
mmc_ho°
 *
ho°
;

620 
mmc_ˇrd
 *
ˇrd
;

621 #i‡
MSDC_USE_IRQ


622 
u32
 
°©us
;

623 
u32
 
wöts
 = 
MSDC_INT_CDSC
;

626 
ex≥˘_avaû
 = 1;

627 
t°˙t
 = 
˙t
 = 5;

628 
ho°
 = 
	`mmc_gë_ho°
(
id
);

629 
ˇrd
 = 
	`mmc_gë_ˇrd
(
id
);

630 
	`mmc_öô_ho°
(
id
, 
ho°
, -1, 
MSDC_MODE_PIO
);

631 #i‡
MSDC_USE_IRQ


633 
°©us
 = 
	`msdc_öå_waô
(
ho°
,
wöts
);

634 if(
°©us
 & 
MSDC_INT_CDSC
){

635 
	`¥ötf
("[MSDC%d] C¨d in£πed o∏ªmovêöãºu± come.\n", 
ho°
->
id
);

636 
avaû
 = 
	`mmc_ˇrd_avaû
(
ho°
);

637 i‡(
avaû
) {

638 
¥Ÿ
 = 
	`mmc_ˇrd_¥Ÿe˘ed
(
ho°
);

639 i‡(
	`mmc_öô_ˇrd
(
ho°
, 
ˇrd
) == 0) {

640 
	`¥ötf
("[MSDC%d] Card inserted(WP=%d). PleaseÑemove it...[%d/%d]\n",

641 
id
, 
¥Ÿ
, 
t°˙t
 - 
˙t
 + 1,Åstcnt);

642 
˙t
--;

643 
ex≥˘_avaû
 = 0;

647 } i‡(!
avaû
) {

648 
¥Ÿ
 = 
	`mmc_ˇrd_¥Ÿe˘ed
(
ho°
);

649 
	`¥ötf
("[MSDC%d] CardÑemoved (WP=%d). Please insert it...[%d/%d]\n",

650 
id
, 
¥Ÿ
, 
t°˙t
 - 
˙t
 + 1,Åstcnt);

651 
ex≥˘_avaû
 = 1;

653 
	`msdc_ªmove_dëe˘ed
(
ho°
);

656 }
˙t
 > 0);

659 
avaû
 = 
	`mmc_ˇrd_avaû
(
ho°
);

660 i‡(
avaû
 && 
ex≥˘_avaû
 ==ávail) {

661 
¥Ÿ
 = 
	`mmc_ˇrd_¥Ÿe˘ed
(
ho°
);

662 i‡(
	`mmc_öô_ˇrd
(
ho°
, 
ˇrd
) == 0) {

663 
	`¥ötf
("[MSDC%d] Card inserted(WP=%d). PleaseÑemove it...[%d/%d]\n",

664 
id
, 
¥Ÿ
, 
t°˙t
 - 
˙t
 + 1,Åstcnt);

665 
˙t
--;

666 
ex≥˘_avaû
 = 0;

670 } i‡(!
avaû
 && 
ex≥˘_avaû
 ==ávail) {

671 
¥Ÿ
 = 
	`mmc_ˇrd_¥Ÿe˘ed
(
ho°
);

672 
	`¥ötf
("[MSDC%d] CardÑemoved (WP=%d). Please insert it...[%d/%d]\n",

673 
id
, 
¥Ÿ
, 
t°˙t
 - 
˙t
 + 1,Åstcnt);

674 
ex≥˘_avaû
 = 1;

676 
	`mmc_öô_ho°
(
id
, 
ho°
, -1, 
MSDC_MODE_PIO
);

678 } 
˙t
 > 0);

681 i‡(
˙t
 == 0)

682 
	`¥ötf
("Card Detect TestÖass!\n");

683 
íd
:

685 
	}
}

707 
CTP_STATUS_T
 
	$SDMMC_C¨dSåómTe°
(
CTP_INPUT_DATA_T
 *
psI≈ut
, 
CTP_OUTPUT_DATA_T
 *
psOuçut
)

709 
i
;

710 
id
 = 
g_MSDC_id
;

711 
mmc_ã°_c⁄fig
 
cfg
;

712 
mmc_ho°
 *
ho°
;

713 
mmc_ˇrd
 *
ˇrd
;

715 
psOuçut
->
eTy≥
 = 
CTP_OUTPUT_RESULT
;

716 
psOuçut
->
eResu…
 = 
CTP_RESULT_FAIL
;

718 
	`mem£t
(&
cfg
, 0, (
mmc_ã°_c⁄fig
));

720 
cfg
.
id
 = id;

721 
cfg
.
desc
 = " MMC Stream R/W Test (only 1-bit)";

722 
cfg
.
mode
 = 
MSDC_MODE_MMC_STREAM
;

723 
cfg
.
uhsmode
 = 
MMC_SWITCH_MODE_SDR12
;

724 
cfg
.
bur°sz
 = 
MSDC_BRUST_64B
;

725 
cfg
.
Êags
 = 0;

726 
cfg
.
cou¡
 = 1;

727 
cfg
.
˛k§c
 = -1;

728 
cfg
.
blksz
 = 
MMC_BLOCK_SIZE
;

729 
cfg
.
blkƒ
 = 
	`MMC_TST_BLK_NR
(0);

730 
cfg
.
tŸÆ_size
 = 
MMC_TST_SIZE
;

731 
cfg
.
chunk_blks
 = 
MMC_TST_CHUNK_BLKS
;

732 
cfg
.
buf
 = (*)
MMC_TST_BUF_ADDR
;

733 
cfg
.
chk_ªsu…
 = 1;

734 #i‚de‡
MMC_PROFILING


735 
cfg
.
t°_sögÀ
 = 1;

736 
cfg
.
t°_öãæóve
 = 1;

738 
cfg
.
t°_mu…ùÀ
 = 1;

744 
i
 = 0; i < 1; i++) {

745 
cfg
.
˛ock
 = 
MSDC_MIN_SCLK
;

746 
cfg
.
buswidth
 = 
HOST_BUS_WIDTH_1
;

747 i‡(
	`mmc_ã°_mem_ˇrd
(&
cfg
) != 0)

748 
exô
;

751 
psOuçut
->
eResu…
 = 
CTP_RESULT_PASS
;

752 
exô
:

753  
CTP_SUCCESS
;

754 
	}
}

776 
	$SDMMC_C¨dPIOTe°
()

778 
i
, 
j
, 
k
;

779 
id
 = 
g_MSDC_id
;

780 #ifde‡
MMC_PROFILING


781 
piobôs
[] = {32};

783 
piobôs
[] = {32, 16, 8};

785 
mmc_ã°_c⁄fig
 
cfg
;

786 
mmc_ho°
 *
ho°
;

787 
mmc_ˇrd
 *
ˇrd
;

789 
	`mem£t
(&
cfg
, 0, (
mmc_ã°_c⁄fig
));

791 
cfg
.
id
 = id;

792 
cfg
.
desc
 = " PIO R/W Test";

793 
cfg
.
mode
 = 
MSDC_MODE_PIO
;

794 
cfg
.
uhsmode
 = 
MMC_SWITCH_MODE_SDR25
;

795 
cfg
.
bur°sz
 = 
MSDC_BRUST_64B
;

796 
cfg
.
Êags
 = 0;

797 
cfg
.
cou¡
 = 1;

798 
cfg
.
˛k§c
 = -1;

799 
cfg
.
blksz
 = 
MMC_BLOCK_SIZE
;

800 
cfg
.
blkƒ
 = 
	`MMC_TST_BLK_NR
(0);

801 
cfg
.
tŸÆ_size
 = 
MMC_TST_SIZE
;

802 
cfg
.
chunk_blks
 = 
MMC_TST_CHUNK_BLKS
;

803 
cfg
.
buf
 = (*)
MMC_TST_BUF_ADDR
;

804 
cfg
.
chk_ªsu…
 = 1;

805 #i‚de‡
MMC_PROFILING


806 
cfg
.
t°_sögÀ
 = 1;

807 
cfg
.
t°_öãæóve
 = 1;

809 
cfg
.
t°_mu…ùÀ
 = 1;

812 
i
 = 0; i < 
	`ARRAY_SIZE
(
˛k‰eq
); i++) {

813 
j
 = 0; j < 
	`ARRAY_SIZE
(
buswidth
); j++) {

814 
k
 = 0; k < 
	`ARRAY_SIZE
(
piobôs
); k++) {

815 
cfg
.
˛ock
 = 
˛k‰eq
[
i
];

816 
cfg
.
buswidth
 = buswidth[
j
];

817 
cfg
.
piobôs
 =Öiobôs[
k
];

818 i‡(
	`mmc_ã°_mem_ˇrd
(&
cfg
) != 0)

819 
exô
;

824 
	`¥ötf
("PIO TestÖass!\n");

825 
exô
:

827 
	}
}

848 
	$SDMMC_C¨dBasicDMATe°
()

850 
i
, 
j
, 
k
;

851 
id
 = 
g_MSDC_id
;

852 
mmc_ã°_c⁄fig
 
cfg
;

853 
mmc_ho°
 *
ho°
;

854 
mmc_ˇrd
 *
ˇrd
;

855 
	`mem£t
(&
cfg
, 0, (
mmc_ã°_c⁄fig
));

857 
cfg
.
id
 = id;

858 
cfg
.
desc
 = " Basic DMA R/W Test";

859 
cfg
.
mode
 = 
MSDC_MODE_DMA_BASIC
;

860 
cfg
.
uhsmode
 = 
MMC_SWITCH_MODE_SDR12
;

861 
cfg
.
bur°sz
 = 
MSDC_BRUST_64B
;

862 
cfg
.
Êags
 = 0;

863 
cfg
.
cou¡
 = 1;

864 
cfg
.
˛k§c
 = -1;

865 
cfg
.
blksz
 = 
MMC_BLOCK_SIZE
;

866 
cfg
.
blkƒ
 = 
	`MMC_TST_BLK_NR
(0);

867 
cfg
.
tŸÆ_size
 = 
MMC_TST_SIZE
;

868 
cfg
.
chunk_blks
 = 
MMC_TST_CHUNK_BLKS
;

869 
cfg
.
buf
 = (*Ë
	`PHYSADDR
(
MMC_TST_BUF_ADDR
);

870 
cfg
.
chk_ªsu…
 = 1;

871 #i‚de‡
MMC_PROFILING


872 
cfg
.
t°_sögÀ
 = 1;

873 
cfg
.
t°_öãæóve
 = 1;

875 
cfg
.
t°_mu…ùÀ
 = 1;

877 
i
 = 0; i < 
	`ARRAY_SIZE
(
˛k‰eq
); i++) {

878 
j
 = 0; j < 
	`ARRAY_SIZE
(
buswidth
); j++) {

879 
k
 = 0; k < 
	`ARRAY_SIZE
(
bur°sz
); k++) {

880 
cfg
.
˛ock
 = 
˛k‰eq
[
i
];

881 
cfg
.
buswidth
 = buswidth[
j
];

882 
cfg
.
bur°sz
 = bur°sz[
k
];

883 i‡(
	`mmc_ã°_mem_ˇrd
(&
cfg
) != 0)

884 
exô
;

889 
	`¥ötf
("Basic DMA TestÖass!\n");

890 
exô
:

892 
	}
}

913 
	$SDMMC_C¨dDescDMATe°
()

915 
i
, 
j
, 
k
;

916 
id
 = 
g_MSDC_id
;

917 
mmc_ã°_c⁄fig
 
cfg
;

918 
mmc_ho°
 *
ho°
;

919 
mmc_ˇrd
 *
ˇrd
;

921 #i‡
	`deföed
(
MSDC_INTSRAM
)

922 
iVÆ
 = *((volatile *)0xC1000200);

923 *((vﬁ©ûê*)0xC1000200Ë
iVÆ
 | (1 << 28) | (1 << 23);

927 
	`mem£t
(&
cfg
, 0, (
mmc_ã°_c⁄fig
));

929 
cfg
.
id
 = id;

930 
cfg
.
desc
 = " Desc. DMA R/W Test";

931 
cfg
.
mode
 = 
MSDC_MODE_DMA_DESC
;

932 
cfg
.
uhsmode
 = 
MMC_SWITCH_MODE_SDR12
;

933 
cfg
.
bur°sz
 = 
MSDC_BRUST_64B
;

934 
cfg
.
Êags
 = 
DMA_FLAG_EN_CHKSUM
;

935 
cfg
.
cou¡
 = 1;

936 
cfg
.
˛k§c
 = -1;

937 
cfg
.
blksz
 = 
MMC_BLOCK_SIZE
;

938 
cfg
.
blkƒ
 = 
	`MMC_TST_BLK_NR
(0);

939 
cfg
.
tŸÆ_size
 = 
MMC_TST_SIZE
;

940 
cfg
.
chunk_blks
 = 
MMC_TST_CHUNK_BLKS
;

941 
cfg
.
buf
 = (*Ë
	`PHYSADDR
(
MMC_TST_BUF_ADDR
);

942 
cfg
.
chk_ªsu…
 = 1;

943 #i‚de‡
MMC_PROFILING


944 
cfg
.
t°_sögÀ
 = 1;

945 
cfg
.
t°_öãæóve
 = 1;

947 
cfg
.
t°_mu…ùÀ
 = 1;

949 
i
 = 0; i < 
	`ARRAY_SIZE
(
˛k‰eq
); i++) {

950 
j
 = 0; j < 
	`ARRAY_SIZE
(
buswidth
); j++) {

951 
k
 = 0; k < 
	`ARRAY_SIZE
(
bur°sz
); k++) {

952 
cfg
.
˛ock
 = 
˛k‰eq
[
i
];

953 
cfg
.
buswidth
 = buswidth[
j
];

954 
cfg
.
bur°sz
 = bur°sz[
k
];

955 i‡(
	`mmc_ã°_mem_ˇrd
(&
cfg
) != 0)

956 
exô
;

962 
cfg
.
˛ock
 = 
˛k‰eq
[0];

963 
cfg
.
bur°sz
 = 
MSDC_BRUST_64B
;

964 
cfg
.
buswidth
 = 
HOST_BUS_WIDTH_4
;

965 
cfg
.
Êags
 = 0;

967 i‡(
	`mmc_ã°_mem_ˇrd
(&
cfg
) != 0)

968 
exô
;

970 
	`¥ötf
("Desc. DMA TestÖass!\n");

971 
exô
:

973 
	}
}

994 
	$SDMMC_C¨dEnh™˚dDMATe°
()

996 
i
, 
j
, 
k
;

997 
id
 = 
g_MSDC_id
;

998 
mmc_ã°_c⁄fig
 
cfg
;

999 
mmc_ho°
 *
ho°
;

1000 
mmc_ˇrd
 *
ˇrd
;

1002 
	`mem£t
(&
cfg
, 0, (
mmc_ã°_c⁄fig
));

1004 
cfg
.
id
 = id;

1005 
cfg
.
desc
 = " Enhanced DMA R/W Test";

1006 
cfg
.
mode
 = 
MSDC_MODE_DMA_ENHANCED
;

1007 
cfg
.
uhsmode
 = 
MMC_SWITCH_MODE_SDR12
;

1008 
cfg
.
bur°sz
 = 
MSDC_BRUST_64B
;

1009 
cfg
.
Êags
 = 
DMA_FLAG_EN_CHKSUM
;

1010 
cfg
.
cou¡
 = 1;

1011 
cfg
.
˛k§c
 = -1;

1012 
cfg
.
blksz
 = 
MMC_BLOCK_SIZE
;

1013 
cfg
.
blkƒ
 = 
	`MMC_TST_BLK_NR
(0);

1014 
cfg
.
tŸÆ_size
 = 
MMC_TST_SIZE
;

1015 
cfg
.
chunk_blks
 = 
MMC_TST_CHUNK_BLKS
;

1016 
cfg
.
buf
 = (*Ë
	`PHYSADDR
(
MMC_TST_BUF_ADDR
);

1017 
cfg
.
chk_ªsu…
 = 1;

1018 #i‚de‡
MMC_PROFILING


1019 
cfg
.
t°_sögÀ
 = 1;

1020 
cfg
.
t°_öãæóve
 = 1;

1022 
cfg
.
t°_mu…ùÀ
 = 1;

1024 
i
 = 0; i < 
	`ARRAY_SIZE
(
˛k‰eq
); i++) {

1025 
j
 = 0; j < 
	`ARRAY_SIZE
(
buswidth
); j++) {

1026 
k
 = 0; k < 
	`ARRAY_SIZE
(
bur°sz
); k++) {

1027 
cfg
.
˛ock
 = 
˛k‰eq
[
i
];

1028 
cfg
.
buswidth
 = buswidth[
j
];

1029 
cfg
.
bur°sz
 = bur°sz[
k
];

1030 i‡(
	`mmc_ã°_mem_ˇrd
(&
cfg
) != 0)

1031 
exô
;

1037 
cfg
.
˛ock
 = 
˛k‰eq
[0];

1038 
cfg
.
bur°sz
 = 
MSDC_BRUST_64B
;

1039 
cfg
.
buswidth
 = 
HOST_BUS_WIDTH_4
;

1040 
cfg
.
Êags
 = 0;

1042 i‡(
	`mmc_ã°_mem_ˇrd
(&
cfg
) != 0)

1043 
exô
;

1045 
	`¥ötf
("Enhance DMA TestÖass!\n");

1046 
exô
:

1048 
	}
}

1050 
	$SDMMC_AutoCmd12Te°
()

1052 
i
, 
j
, 
k
;

1053 
id
 = 
g_MSDC_id
;

1054 
mmc_ã°_c⁄fig
 
cfg
;

1055 
mmc_ho°
 *
ho°
;

1056 
mmc_ˇrd
 *
ˇrd
;

1057 
mode
[] = {
MSDC_MODE_DMA_BASIC
, 
MSDC_MODE_DMA_DESC
,

1058 
MSDC_MODE_DMA_ENHANCED
};

1060 
	`mem£t
(&
cfg
, 0, (
mmc_ã°_c⁄fig
));

1062 
cfg
.
id
 = id;

1063 
cfg
.
desc
 = " Auto CMD12 Test";

1064 
cfg
.
uhsmode
 = 
MMC_SWITCH_MODE_SDR12
;

1065 
cfg
.
bur°sz
 = 
MSDC_BRUST_64B
;

1066 
cfg
.
autocmd
 = 
MSDC_AUTOCMD12
;

1067 
cfg
.
Êags
 = 0;

1068 
cfg
.
cou¡
 = 1;

1069 
cfg
.
˛k§c
 = -1;

1070 
cfg
.
blksz
 = 
MMC_BLOCK_SIZE
;

1071 
cfg
.
blkƒ
 = 
	`MMC_TST_BLK_NR
(0);

1072 
cfg
.
tŸÆ_size
 = 
MMC_TST_SIZE
;

1073 
cfg
.
chunk_blks
 = 
MMC_TST_CHUNK_BLKS
;

1074 
cfg
.
buf
 = (*Ë
	`PHYSADDR
(
MMC_TST_BUF_ADDR
);

1075 
cfg
.
chk_ªsu…
 = 1;

1076 #i‚de‡
MMC_PROFILING


1077 
cfg
.
t°_sögÀ
 = 1;

1078 
cfg
.
t°_öãæóve
 = 1;

1080 
cfg
.
t°_mu…ùÀ
 = 1;

1082 
i
 = 0; i < 
	`ARRAY_SIZE
(
mode
); i++) {

1083 
j
 = 0; j < 
	`ARRAY_SIZE
(
˛k‰eq
); j++) {

1084 
k
 = 0; k < 
	`ARRAY_SIZE
(
buswidth
); k++) {

1085 
cfg
.
mode
 = mode[
i
];

1086 
cfg
.
˛ock
 = 
˛k‰eq
[
j
];

1087 
cfg
.
buswidth
 = buswidth[
k
];

1088 i‡(
	`mmc_ã°_mem_ˇrd
(&
cfg
) != 0)

1089 
exô
;

1094 
	`¥ötf
("Auto Command 12 TestÖass!\n");

1095 
exô
:

1097 
	}
}

1100 
CTP_STATUS_T
 
	$SDMMC_AutoCmd19Te°
(
CTP_INPUT_DATA_T
 *
psI≈ut
, 
CTP_OUTPUT_DATA_T
 *
psOuçut
)

1102 
i
;

1103 
îr
, 
avaû
;

1104 
id
 = 
g_MSDC_id
;

1105 
mmc_ho°
 *
ho°
;

1106 
mmc_ˇrd
 *
ˇrd
;

1107 *
buf
 = (*)
MMC_TST_BUF_ADDR
;

1109 
psOuçut
->
eTy≥
 = 
CTP_OUTPUT_RESULT
;

1110 
psOuçut
->
eResu…
 = 
CTP_RESULT_FAIL
;

1112 
i
 = 0; i < 3; i++) {

1113 i‡(0 !
	`mmc_öô
(
id
))

1114 
exô
;

1116 
ho°
 = 
	`mmc_gë_ho°
(
id
);

1117 
ˇrd
 = 
	`mmc_gë_ˇrd
(
id
);

1120 
	`ERR_EXIT
(
	`mmc_tu√_timög
(
ho°
, 
ˇrd
), 
îr
, 
MMC_ERR_NONE
);

1121 
	`¥ötf
("[SD%d] [PASS]Åe°áutocmd 19 d⁄e\n", 
id
);

1124 
	`¥ötf
("[SD%d]ÖÀa£Ölug-ouàˇrd...\n", 
id
);

1126 
avaû
 = 
	`mmc_ˇrd_avaû
(
ho°
);

1127 } 
avaû
);

1129 
	`ERR_EXIT
(
	`mmc_tu√_timög
(
ho°
, 
ˇrd
), 
îr
, 
MMC_ERR_FAILED
);

1130 
	`¥ötf
("[SD%d] [PASS]Åe°áutocmd 19 faûed\n", 
id
);

1132 
	`¥ötf
("[SD%d]ÖÀa£Ölug-ö c¨d...\n", 
id
);

1134 
avaû
 = 
	`mmc_ˇrd_avaû
(
ho°
);

1135 } !
avaû
);

1138 
psOuçut
->
eResu…
 = 
CTP_RESULT_PASS
;

1139 
exô
:

1140  
CTP_SUCCESS
;

1141 
	}
}

1143 
CTP_STATUS_T
 
	$SDMMC_AutoCmd23Te°
(
CTP_INPUT_DATA_T
 *
psI≈ut
, 
CTP_OUTPUT_DATA_T
 *
psOuçut
)

1145 
i
, 
j
, 
k
;

1146 
id
 = 
g_MSDC_id
;

1147 
mmc_ã°_c⁄fig
 
cfg
;

1148 
mmc_ho°
 *
ho°
;

1149 
mmc_ˇrd
 *
ˇrd
;

1150 
mode
[] = {
MSDC_MODE_DMA_BASIC
, 
MSDC_MODE_DMA_DESC
,

1151 
MSDC_MODE_DMA_ENHANCED
};

1153 
psOuçut
->
eTy≥
 = 
CTP_OUTPUT_RESULT
;

1154 
psOuçut
->
eResu…
 = 
CTP_RESULT_FAIL
;

1156 i‡(0 !
	`mmc_öô
(
id
))

1157 
exô
;

1159 
ho°
 = 
	`mmc_gë_ho°
(
id
);

1160 
ˇrd
 = 
	`mmc_gë_ˇrd
(
id
);

1163 i‡(
	`mmc_ˇrd_sd
(
ˇrd
Ë&& (((ˇrd->
s¸
.
cmd_suµ‹t
 >> 1) & 0x1) == 0)) {

1164 
	`¥ötf
("[SD%d] C¨d d€¢'àsuµ‹àCMD23\n", 
id
);

1165 
exô
;

1168 
	`mem£t
(&
cfg
, 0, (
mmc_ã°_c⁄fig
));

1170 
cfg
.
id
 = id;

1171 
cfg
.
desc
 = " Auto CMD23 Test";

1172 
cfg
.
uhsmode
 = 
MMC_SWITCH_MODE_SDR12
;

1173 
cfg
.
bur°sz
 = 
MSDC_BRUST_64B
;

1174 
cfg
.
autocmd
 = 
MSDC_AUTOCMD23
;

1175 
cfg
.
Êags
 = 0;

1176 
cfg
.
cou¡
 = 1;

1177 
cfg
.
˛k§c
 = -1;

1178 
cfg
.
blksz
 = 
MMC_BLOCK_SIZE
;

1179 
cfg
.
blkƒ
 = 
	`MMC_TST_BLK_NR
(0);

1180 
cfg
.
tŸÆ_size
 = 
MMC_TST_SIZE
;

1181 
cfg
.
chunk_blks
 = 
MMC_TST_CHUNK_BLKS
;

1182 
cfg
.
buf
 = (*)
MMC_TST_BUF_ADDR
;

1183 
cfg
.
chk_ªsu…
 = 1;

1184 #i‚de‡
MMC_PROFILING


1185 
cfg
.
t°_sögÀ
 = 1;

1186 
cfg
.
t°_öãæóve
 = 1;

1188 
cfg
.
t°_mu…ùÀ
 = 1;

1190 
i
 = 0; i < 
	`ARRAY_SIZE
(
mode
); i++) {

1191 
j
 = 0; j < 
	`ARRAY_SIZE
(
˛k‰eq
); j++) {

1192 
k
 = 0; k < 
	`ARRAY_SIZE
(
buswidth
); k++) {

1193 
cfg
.
mode
 = mode[
i
];

1194 
cfg
.
˛ock
 = 
˛k‰eq
[
j
];

1195 
cfg
.
buswidth
 = buswidth[
k
];

1196 i‡(
	`mmc_ã°_mem_ˇrd
(&
cfg
) != 0)

1197 
exô
;

1201 
psOuçut
->
eResu…
 = 
CTP_RESULT_PASS
;

1202 
exô
:

1203  
CTP_SUCCESS
;

1204 
	}
}

1206 
CTP_STATUS_T
 
	$SDMMC_DDRModeTe°
(
CTP_INPUT_DATA_T
 *
psI≈ut
, 
CTP_OUTPUT_DATA_T
 *
psOuçut
)

1208 
i
, 
j
, 
cou¡
 = 3;

1209 
id
 = 
g_MSDC_id
;

1210 
mmc_ho°
 *
ho°
;

1211 
mmc_ˇrd
 *
ˇrd
;

1212 *
buf
 = (*)
MMC_TST_BUF_ADDR
;

1214 i‡(
psOuçut
 =
NULL
)

1215  
CTP_FAIL
;

1217 
psOuçut
->
eTy≥
 = 
CTP_OUTPUT_RESULT
;

1218 
psOuçut
->
eResu…
 = 
CTP_RESULT_FAIL
;

1220 i‡(
	`mmc_öô
(
id
) != 0)

1221 
exô
;

1223 
ho°
 = 
	`mmc_gë_ho°
(
id
);

1224 
ˇrd
 = 
	`mmc_gë_ˇrd
(
id
);

1226 i‡(
ho°
->
ˇps
 & 
MMC_CAP_DDR
 == 0) {

1227 
	`¥ötf
("[SD%d] Ho° d€¢'àsuµ‹àDDR mode\n", 
id
);

1228 
exô
;

1230 i‡((
	`mmc_ˇrd_mmc
(
ˇrd
Ë&& !ˇrd->
ext_csd
.
ddr_suµ‹t
) ||

1231 (
	`mmc_ˇrd_sd
(
ˇrd
Ë&& !ˇrd->
sw_ˇps
.
ddr
)) {

1232 
	`¥ötf
("[SD%d] C¨d d€¢'àsuµ‹àDDR mode\n", 
id
);

1233 
exô
;

1236 i‡(
	`mmc_ˇrd_sd
(
ˇrd
Ë&& 
	`mmc_ˇrd_uhs1
(card)) {

1238 i‡(
	`mmc_swôch_uhs1
(
ho°
, 
ˇrd
, 
MMC_SWITCH_MODE_DDR50
Ë!
MMC_ERR_NONE
)

1239 
exô
;

1242 
i
 = 0; i < 
	`ARRAY_SIZE
(
˛k‰eq
); i++) {

1243 
	`mmc_£t_˛ock
(
ho°
, 
	`mmc_ˇrd_ddr
(
ˇrd
), 
˛k‰eq
[
i
]);

1246 
j
 = 0; j < 512; j+=4) {

1247 
buf
[
j
+0] = 0xa5;

1248 
buf
[
j
+1] = 0x5a;

1249 
buf
[
j
+2] = 0xa5;

1250 
buf
[
j
+3] = 0x5a;

1252 i‡(
	`mmc_block_wrôe
(
id
, 0, 1, (*)
buf
) != 1)

1253 
exô
;

1254 
	`¥ötf
("[SD%d] DDR SögÀ WrôêD⁄e\n", 
id
, 
cou¡
);

1256 
	`mem£t
(
buf
, 0, 512);

1257 i‡(
	`mmc_ªadback_blks
(
id
, 0, 1, 0) != 0)

1258 
exô
;

1259 
	`¥ötf
("[SD%d] DDR SögÀ Ród D⁄e\n\n", 
id
, 
cou¡
);

1262 
j
 = 0; j < 1024; j+=4) {

1263 
buf
[
j
+0] = 0xa5;

1264 
buf
[
j
+1] = 0x5a;

1265 
buf
[
j
+2] = 0xa5;

1266 
buf
[
j
+3] = 0x5a;

1268 i‡(
	`mmc_block_wrôe
(
id
, 0, 2, (*)
buf
) != 2)

1269 
exô
;

1270 
	`¥ötf
("[SD%d] DDR Mu…ùÀ WrôêD⁄e\n", 
id
, 
cou¡
);

1272 
	`mem£t
(
buf
, 0, 1024);

1273 i‡(
	`mmc_ªadback_blks
(
id
, 0, 2, 0) != 0)

1274 
exô
;

1275 
	`¥ötf
("[SD%d] DDR Mu…ùÀ Ród D⁄e\n\n", 
id
, 
cou¡
);

1278 
psOuçut
->
eResu…
 = 
CTP_RESULT_PASS
;

1279 
exô
:

1280  
CTP_SUCCESS
;

1282 
	}
}

1284 
CTP_STATUS_T
 
	$SDMMC_MMCIRQTe°
(
CTP_INPUT_DATA_T
 *
psI≈ut
, 
CTP_OUTPUT_DATA_T
 *
psOuçut
)

1286 
i
, 
îr
;

1287 
id
 = 
g_MSDC_id
;

1288 
u32
 
°©us
, 
ﬁds˛k
;

1289 
mmc_ho°
 *
ho°
;

1290 
mmc_ˇrd
 *
ˇrd
;

1291 
mmc_comm™d
 
cmd
;

1293 
psOuçut
->
eTy≥
 = 
CTP_OUTPUT_RESULT
;

1294 
psOuçut
->
eResu…
 = 
CTP_RESULT_FAIL
;

1296 i‡(
	`mmc_öô
(
id
) != 0)

1297 
exô
;

1299 
ho°
 = 
	`mmc_gë_ho°
(
id
);

1300 
ˇrd
 = 
	`mmc_gë_ˇrd
(
id
);

1302 i‡(
	`mmc_ˇrd_sd
(
ˇrd
))

1303 
exô
;

1305 i‡((
ˇrd
->
csd
.
cmd˛ass
 & 
CCC_IO_MODE
) == 0) {

1306 
	`¥ötf
("[SD%d] WARNING: C¨d d€¢'àsuµ‹àI/O modêf‹ IRQ sèã\n", 
id
);

1309 
cmd
.
›code
 = 
MMC_CMD_GO_IRQ_STATE
;

1310 
cmd
.
r•typ
 = 
RESP_R5
;

1311 
cmd
.
¨g
 = 0;

1312 
cmd
.
ªåõs
 = 3;

1313 
cmd
.
timeout
 = 100;

1316 
	`ERR_EXIT
(
	`mmc_de£À˘_Æl_ˇrd
(
ho°
), 
îr
, 
MMC_ERR_NONE
);

1318 
i
 = 0; i < 1; i++) {

1320 
	`ERR_EXIT
(
	`mmc_£nd_°©us
(
ho°
, 
ˇrd
, &
°©us
), 
îr
, 
MMC_ERR_NONE
);

1321 i‡(
	`R1_CURRENT_STATE
(
°©us
) != 3) {

1322 
	`¥ötf
("[SD%d] C¨d sèã (%dËi¢'à°™dby sèã\n", 
id
,

1323 
	`R1_CURRENT_STATE
(
°©us
));

1324 
exô
;

1332 
ﬁds˛k
 = 
ho°
->
s˛k
;

1333 
	`mmc_£t_˛ock
(
ho°
, 
	`mmc_ˇrd_ddr
(
ˇrd
), 100000);

1335 
	`ERR_EXIT
(
	`msdc_£nd_cmd
(
ho°
, &
cmd
), 
îr
, 
MMC_ERR_NONE
);

1336 
	`ERR_EXIT
(
	`msdc_waô_r•
(
ho°
, &
cmd
), 
îr
, 
MMC_ERR_TIMEOUT
);

1337 
	`mdñay
(250);

1338 
	`¥ötf
("[SD%d] Waô 250ms...\n", 
id
);

1340 
	`msdc_brk_cmd
(
ho°
);

1341 
	`ERR_EXIT
(
	`msdc_waô_r•
(
ho°
, &
cmd
), 
îr
, 
MMC_ERR_NONE
);

1344 
	`mmc_£t_˛ock
(
ho°
, 
	`mmc_ˇrd_ddr
(
ˇrd
), 
ﬁds˛k
);

1346 
	`ERR_EXIT
(
	`mmc_£nd_°©us
(
ho°
, 
ˇrd
, &
°©us
), 
îr
, 
MMC_ERR_NONE
);

1351 
psOuçut
->
eResu…
 = 
CTP_RESULT_PASS
;

1353 
exô
:

1354  
CTP_SUCCESS
;

1355 
	}
}

1357 
CTP_STATUS_T
 
	$SDMMC_EmmcBoŸTe°
(
CTP_INPUT_DATA_T
 *
psI≈ut
, 
CTP_OUTPUT_DATA_T
 *
psOuçut
)

1359 
i
, 
j
, 
k
, 
l
, 
f
, 
m
;

1360 
ªt
;

1361 
id
 = 
g_MSDC_id
;

1362 
mmc_ho°
 *
ho°
;

1363 
mmc_ˇrd
 *
ˇrd
;

1364 
ackdis
;

1365 #i‡
MSDC_USE_SDXC_FPGA


1369 
ª£t
[] = { 
EMMC_BOOT_PRE_IDLE_CMD
 };

1371 
ª£t
[] = { 
EMMC_BOOT_PWR_RESET
, 
EMMC_BOOT_PRE_IDLE_CMD
, 
EMMC_BOOT_RST_N_SIG
 };

1373 
mode
[] = { 
EMMC_BOOT_PULL_CMD_MODE
, 
EMMC_BOOT_RST_CMD_MODE
 };

1374 
u8
 
ack
[] = { 
EXT_CSD_PART_CFG_EN_NO_ACK
, 
EXT_CSD_PART_CFG_EN_ACK
 };

1375 
u8
 *
rbuf
, *
wbuf
;

1376 
u8
 
í∑π
 = 
EXT_CSD_PART_CFG_EN_BOOT_PART_1
;

1377 
u8
 
∑πno
 = 
EXT_CSD_PART_CFG_BOOT_PART_1
;

1378 
u8
 
buswidth
 = 
EXT_CSD_BOOT_BUS_WIDTH_1
;

1379 
u8
 
busmode
[] = {
EXT_CSD_BOOT_BUS_MODE_DEFT
, 
EXT_CSD_BOOT_BUS_MODE_HS
};

1380 
u32
 
maxhz
, 
hz
;

1382 i‡(
psOuçut
 =
NULL
)

1383  
CTP_FAIL
;

1385 
psOuçut
->
eTy≥
 = 
CTP_OUTPUT_RESULT
;

1386 
psOuçut
->
eResu…
 = 
CTP_RESULT_FAIL
;

1388 
i
 = 0; i < 
	`ARRAY_SIZE
(
ack
); i++) {

1389 
m
 = 0; m < 
	`ARRAY_SIZE
(
busmode
); m++) {

1391 i‡(
	`mmc_öô
(
id
) != 0)

1392 
exô
;

1394 
ho°
 = 
	`mmc_gë_ho°
(
id
);

1395 
ˇrd
 = 
	`mmc_gë_ˇrd
(
id
);

1397 i‡(
	`mmc_ˇrd_sd
(
ˇrd
))

1398 
exô
;

1400 
maxhz
 = 
ˇrd
->maxhz;

1402 i‡(
busmode
[
m
] =
EXT_CSD_BOOT_BUS_MODE_DDR
) {

1403 
	`¥ötf
("[SD%d] EMMC BoŸ: DDR modêunsuµ‹ãd by MSDC IP\n", 
id
);

1404  
CTP_FAIL
;

1405 } i‡(
busmode
[
m
] =
EXT_CSD_BOOT_BUS_MODE_HS
) {

1406 
maxhz
 = maxhz >= 52000000 ? 52000000 : maxhz;

1408 
maxhz
 = maxhz >= 26000000 ? 26000000 : maxhz;

1411 
wbuf
 = (
u8
 *)
MMC_TST_BUF_ADDR
;

1412 
rbuf
 = (
u8
 *)
MMC_TST_BUF_ADDR
 + 
MMC_TST_SIZE
;

1414 
j
 = 0; j < 
MMC_TST_SIZE
; j++)

1415 
wbuf
[
j
] = 
i
 + j % 256;

1417 
	`mem£t
(
rbuf
, 0, 
MMC_TST_SIZE
);

1420 
	`ERR_EXIT
(
	`mmc_£t_bus_width
(
ho°
, 
ˇrd
, 
HOST_BUS_WIDTH_1
), 
ªt
,

1421 
MMC_ERR_NONE
);

1424 
	`ERR_EXIT
(
	`mmc_ªad_ext_csd
(
ho°
, 
ˇrd
), 
ªt
, 
MMC_ERR_NONE
);

1425 
	`ERR_EXIT
(
	`mmc_£t_îa£_gΩ_def
(
ˇrd
, 1), 
ªt
, 
MMC_ERR_NONE
);

1426 
	`ERR_EXIT
(
	`mmc_ªad_ext_csd
(
ho°
, 
ˇrd
), 
ªt
, 
MMC_ERR_NONE
);

1429 
	`ERR_EXIT
(
	`mmc_∑π_wrôe
(
ˇrd
, 
∑πno
, 0, 
MMC_TST_SIZE
 / 512, 
wbuf
), 
ªt
,

1430 
MMC_ERR_NONE
);

1433 
	`ERR_EXIT
(
	`mmc_∑π_ªad
(
ˇrd
, 
∑πno
, 0, 
MMC_TST_SIZE
 / 512, 
rbuf
), 
ªt
,

1434 
MMC_ERR_NONE
);

1437 
j
 = 0; j < 
MMC_TST_SIZE
; j++) {

1438 i‡(
wbuf
[
j
] !
rbuf
[j]) {

1439 
	`¥ötf
("[SD%d] EMMC BoŸ: wrôêd©®tÿ∑πôi⁄ faûed\n", 
id
);

1440 
exô
;

1443 
	`¥ötf
("[SD%d] EMMC BoŸ: wrôêtÿ∑πôi⁄ d⁄e\n", 
id
);

1449 
	`ERR_EXIT
(
	`mmc_boŸ_c⁄fig
(
ˇrd
, 
ack
[
i
], 
í∑π
, 
buswidth
, 
busmode
[
m
]), 
ªt
,

1450 
MMC_ERR_NONE
);

1451 
	`ERR_EXIT
(
	`mmc_ªad_ext_csd
(
ho°
, 
ˇrd
), 
ªt
, 
MMC_ERR_NONE
);

1453 
ackdis
 = (
ack
[
i
] =
EXT_CSD_PART_CFG_EN_NO_ACK
) ? 1 : 0;

1455 
k
 = 0; k < 
	`ARRAY_SIZE
(
ª£t
); k++) {

1456 
l
 = 0;Ü < 
	`ARRAY_SIZE
(
mode
);Ü++) {

1457 
f
 = 0; f < 
	`ARRAY_SIZE
(
˛k‰eq
); f++) {

1458 
	`¥ötf
("[SD%d] EMMC Boot: Reset(%d), Mode(%d) ACK(%d)\n",

1459 
id
, 
ª£t
[
k
], 
mode
[
l
], !
ackdis
);

1462 
	`¥ötf
("[SD%d] EMMC BoŸ:Ñód boŸ d©®(⁄˚ mode)\n", 
id
);

1463 
	`mem£t
(
rbuf
, 0, 
MMC_TST_SIZE
);

1466 
hz
 = 
˛k‰eq
[
f
] >
maxhz
 ? maxhz : hz;

1469 
	`mmc_öô_ho°
(
id
, 
ho°
, -1, 
MSDC_MODE_PIO
);

1470 
	`mmc_£t_˛ock
(
ho°
, 0, 
hz
);

1471 
	`mmc_boŸ_ª£t
(
ho°
, 
ˇrd
, 
ª£t
[
k
]);

1472 
	`ERR_EXIT
(
	`mmc_boŸ_up
(
ho°
, 
mode
[
k
], 
ackdis
, 
rbuf
, 
MMC_TST_SIZE
), 
ªt
,

1473 
MMC_ERR_NONE
);

1474 
j
 = 0; j < 
MMC_TST_SIZE
; j++) {

1475 i‡(
wbuf
[
j
] !
rbuf
[j]) {

1476 
	`¥ötf
("[SD%d] EMMC BoŸ: inc‹ª˘ d©a\n", 
id
);

1477 
exô
;

1480 
	`¥ötf
("[SD%d] EMMC BoŸ:Ñód boŸ d©®(⁄˚ modeË- PASS\n", 
id
);

1483 
	`¥ötf
("[SD%d] EMMC BoŸ:Ñód boŸ d©®—runk†mode)\n", 
id
);

1484 
	`mem£t
(
rbuf
, 0, 
MMC_TST_SIZE
);

1485 
	`mmc_öô_ho°
(
id
, 
ho°
, -1, 
MSDC_MODE_PIO
);

1486 
	`mmc_£t_˛ock
(
ho°
, 0, 
hz
);

1487 
	`mmc_boŸ_ª£t
(
ho°
, 
ˇrd
, 
ª£t
[
k
]);

1488 
	`ERR_EXIT
(
	`msdc_emmc_boŸ_°¨t
(
ho°
, 
hz
, 0, 
mode
, 
ackdis
), 
ªt
, 
MMC_ERR_NONE
);

1489 
j
 = 0; j < 
MMC_TST_SIZE
 / 512; j++) {

1490 
	`ERR_EXIT
(
	`msdc_emmc_boŸ_ªad
(
ho°
, 512, 
rbuf
 + 
j
 * 512),

1491 
ªt
, 
MMC_ERR_NONE
);

1493 
	`msdc_emmc_boŸ_°›
(
ho°
);

1494 
j
 = 0; j < 
MMC_TST_SIZE
; j++) {

1495 i‡(
wbuf
[
j
] !
rbuf
[j]) {

1496 
	`¥ötf
("[SD%d] EMMC BoŸ: inc‹ª˘ d©a\n", 
id
);

1497 
exô
;

1500 
	`¥ötf
("[SD%d] EMMC BoŸ:Ñód boŸ d©®—runk†modeË- PASS\n", 
id
);

1507 
psOuçut
->
eResu…
 = 
CTP_RESULT_PASS
;

1508 
exô
:

1509 
	`msdc_emmc_boŸ_°›
(
ho°
);

1511  
CTP_SUCCESS
;

1512 
	}
}

1534 
	$SDMMC_SåessTe°
(
num
)

1536 
i
;

1537 
mmc_ho°
 *
ho°
;

1538 
mmc_ˇrd
 *
ˇrd
;

1539 
mmc_comm™d
 
cmd
;

1541 i‡(
num
 < 1)

1542 
num
 = 1;

1543 
i
 = 0; i < 
num
; i++) {

1544 
	`¥ötf
("[SDMMC]Åhê%dÅime†Såes†ã° \n", 
i
);

1545 
	`SDMMC_C¨dInôTe°
();

1546 
	`SDMMC_C¨dEø£Te°
();

1547 
	`SDMMC_C¨dPIOTe°
();

1548 
	`SDMMC_C¨dBasicDMATe°
();

1549 
	`SDMMC_C¨dDescDMATe°
();

1550 
	`SDMMC_C¨dEnh™˚dDMATe°
();

1551 
	`SDMMC_AutoCmd12Te°
();

1554 
	`¥ötf
("[SDMMC] %d Såes†ã° d⁄e\n", 
num
);

1555 
	}
}

1576 
CTP_STATUS_T
 
	$SDMMC_Su•ídResume
(
CTP_INPUT_DATA_T
 *
psI≈ut
, 
CTP_OUTPUT_DATA_T
 *
psOuçut
)

1578 
CTP_STATUS_T
 
ªt
 = 
CTP_SUCCESS
;

1580 
psOuçut
->
eTy≥
 = 
CTP_OUTPUT_RESULT
;

1581 
psOuçut
->
eResu…
 = 
CTP_RESULT_FAIL
;

1585  
ªt
;

1586 
	}
}

1606 
CTP_STATUS_T
 
	$SDMMC_TunögCmdTe°
(
CTP_INPUT_DATA_T
 *
psI≈ut
, 
CTP_OUTPUT_DATA_T
 *
psOuçut
)

1608 
id
 = 
g_MSDC_id
;

1609 
mmc_ho°
 *
ho°
;

1611 
psOuçut
->
eTy≥
 = 
CTP_OUTPUT_RESULT
;

1612 
psOuçut
->
eResu…
 = 
CTP_RESULT_FAIL
;

1614 i‡(0 !
	`mmc_öô
(
id
))

1615 
exô
;

1617 
ho°
 = 
	`mmc_gë_ho°
(
id
);

1620 
	`msdc_tu√_debug
(
ho°
, 1);

1621 
	`msdc_tu√_cmdr•
(
ho°
, 
NULL
);

1622 
	`msdc_tu√_debug
(
ho°
, 0);

1624 
psOuçut
->
eResu…
 = 
CTP_RESULT_PASS
;

1625 
exô
:

1626  
CTP_SUCCESS
;

1627 
	}
}

1647 
CTP_STATUS_T
 
	$SDMMC_TunögWrôeTe°
(
CTP_INPUT_DATA_T
 *
psI≈ut
, 
CTP_OUTPUT_DATA_T
 *
psOuçut
)

1649 
id
 = 
g_MSDC_id
;

1650 
mmc_ho°
 *
ho°
;

1652 
psOuçut
->
eTy≥
 = 
CTP_OUTPUT_RESULT
;

1653 
psOuçut
->
eResu…
 = 
CTP_RESULT_FAIL
;

1655 i‡(0 !
	`mmc_öô
(
id
))

1656 
exô
;

1658 
ho°
 = 
	`mmc_gë_ho°
(
id
);

1661 
	`msdc_tu√_debug
(
ho°
, 1);

1662 
	`msdc_tu√_bwrôe
(
ho°
, 0, 
NULL
, 0);

1663 
	`msdc_tu√_debug
(
ho°
, 0);

1665 
psOuçut
->
eResu…
 = 
CTP_RESULT_PASS
;

1666 
exô
:

1667  
CTP_SUCCESS
;

1668 
	}
}

1689 
CTP_STATUS_T
 
	$SDMMC_TunögRódTe°
(
CTP_INPUT_DATA_T
 *
psI≈ut
, 
CTP_OUTPUT_DATA_T
 *
psOuçut
)

1691 
id
 = 
g_MSDC_id
;

1692 
mmc_ho°
 *
ho°
;

1694 
psOuçut
->
eTy≥
 = 
CTP_OUTPUT_RESULT
;

1695 
psOuçut
->
eResu…
 = 
CTP_RESULT_FAIL
;

1697 i‡(0 !
	`mmc_öô
(
id
))

1698 
exô
;

1700 
ho°
 = 
	`mmc_gë_ho°
(
id
);

1703 
	`msdc_tu√_debug
(
ho°
, 1);

1704 
	`msdc_tu√_bªad
(
ho°
, 0, 
NULL
, 0);

1705 
	`msdc_tu√_debug
(
ho°
, 0);

1707 
psOuçut
->
eResu…
 = 
CTP_RESULT_PASS
;

1708 
exô
:

1709  
CTP_SUCCESS
;

1710 
	}
}

1730 
	#RAM_SIZE_ADDRESS
 (0x1FF00000-4)

	)

1731 
	#RAM_ADDRESS
 0x1FF00000

	)

1732 *
	gWIFI_RAM_CODE
;

1733 
	gøm_size
;

1735 
wœn_sdio_ã°
(
sdio_func
 *
func
, 
tcou¡
);

1737 
CTP_STATUS_T
 
	$SDIO_I¡îru±Te°
(
CTP_INPUT_DATA_T
 *
psI≈ut
, 
CTP_OUTPUT_DATA_T
 *
psOuçut
)

1739 
id
 = 
g_MSDC_id
;

1740 
i
;

1741 
d©a_pös
 = 
msdc_ˇp
.data_pins;

1742 
CTP_STATUS_T
 
ªt
 = 
CTP_SUCCESS
;

1743 
mmc_ho°
 *
ho°
;

1744 
mmc_ˇrd
 *
ˇrd
;

1745 
mode
[] = {
MSDC_MODE_PIO
, 
MSDC_MODE_DMA_BASIC
, 
MSDC_MODE_DMA_DESC
,

1746 
MSDC_MODE_DMA_ENHANCED
};

1747 
psOuçut
->
eTy≥
 = 
CTP_OUTPUT_RESULT
;

1748 
psOuçut
->
eResu…
 = 
CTP_RESULT_FAIL
;

1750 
øm_size
 = *((*)
RAM_SIZE_ADDRESS
);

1751 
WIFI_RAM_CODE
 = (* )
	`mÆloc
(
øm_size
/4*4+4);

1752 
	`mem˝y
(
WIFI_RAM_CODE
, 
RAM_ADDRESS
, 
øm_size
);

1753 
	`¥ötf
("RAM_CODE Addªss: 0x%x imagêsizê%d\r\n", 
WIFI_RAM_CODE
, 
øm_size
);

1756 
msdc_ˇp
.
d©a_pös
 = 4;

1758 #i‡
MSDC_USE_IRQ


1759 
i
 = 0; i < 
	`ARRAY_SIZE
(
mode
); i++) {

1760 i‡(
	`mmc_öô
(
id
) != 0)

1761 
exô
;

1763 
ho°
 = 
	`mmc_gë_ho°
(
id
);

1764 
ˇrd
 = 
	`mmc_gë_ˇrd
(
id
);

1766 
	`msdc_£t_dmode
(
ho°
, 
mode
[
i
]);

1767 i‡(
	`wœn_sdio_ã°
(
ˇrd
->
io_func
[0], 3) != 0)

1768 
exô
;

1770 
	`¥ötf
("[SDIO][PASS] SDIO interrupt gapÅest in 4-bit mode. DMODE=%d\n",

1771 
mode
[
i
]);

1773 
	`CTP_WaôU¡ûKeyPªss
("[SDIO] PÀa£Ñe£àSDIO devi˚ÖowîándÖªs†™y keyÅÿc⁄töue...\n", 
NULL
);

1778 
msdc_ˇp
.
d©a_pös
 = 1;

1780 
i
 = 0; i < 
	`ARRAY_SIZE
(
mode
); i++) {

1781 i‡(
	`mmc_öô
(
id
) != 0)

1782 
exô
;

1784 
ho°
 = 
	`mmc_gë_ho°
(
id
);

1785 
ˇrd
 = 
	`mmc_gë_ˇrd
(
id
);

1787 
	`msdc_£t_dmode
(
ho°
, 
mode
[
i
]);

1788 i‡(
	`wœn_sdio_ã°
(
ˇrd
->
io_func
[0], 3) != 0)

1789 
exô
;

1791 
	`¥ötf
("[SDIO][PASS] SDIO interruptÅest in 1-bit mode(DAT[0]). DMODE=%d\n",

1792 
mode
[
i
]);

1794 
	`CTP_WaôU¡ûKeyPªss
("[SDIO] PÀa£Ñe£àSDIO devi˚ÖowîándÖªs†™y keyÅÿc⁄töue...\n", 
NULL
);

1797 
psOuçut
->
eResu…
 = 
CTP_RESULT_PASS
;

1800 
	`¥ötf
("[SDIO] UnableÅoÅest inÇon-interrupt mode!!!\n");

1801 
ªt
 = 
CTP_FAIL
;

1804 
exô
:

1806 
msdc_ˇp
.
d©a_pös
 = data_pins;

1808  
ªt
;

1809 
	}
}

1829 
CTP_STATUS_T
 
	$EMMC_BoŸModeC⁄fig
(
CTP_INPUT_DATA_T
 *
psI≈ut
, 
CTP_OUTPUT_DATA_T
 *
psOuçut
)

1831 
id
 = 
g_MSDC_id
;

1832 
CTP_STATUS_T
 
ªt
 = 
CTP_SUCCESS
;

1833 
mmc_ho°
 *
ho°
;

1834 
mmc_ˇrd
 *
ˇrd
;

1835 
u8
 
í∑π
 = 
EXT_CSD_PART_CFG_EN_BOOT_PART_1
;

1836 
u8
 
ackí
 = 
EXT_CSD_PART_CFG_EN_ACK
;

1838 
psOuçut
->
eTy≥
 = 
CTP_OUTPUT_RESULT
;

1839 
psOuçut
->
eResu…
 = 
CTP_RESULT_FAIL
;

1841 i‡(
	`mmc_öô
(
id
Ë!
MMC_ERR_NONE
)

1842 
exô
;

1844 
ho°
 = 
	`mmc_gë_ho°
(
id
);

1845 
ˇrd
 = 
	`mmc_gë_ˇrd
(
id
);

1847 i‡(
	`mmc_boŸ_c⁄fig
(
ˇrd
, 
ackí
, 
í∑π
, 
EXT_CSD_BOOT_BUS_WIDTH_1
,

1848 
EXT_CSD_BOOT_BUS_MODE_DEFT
Ë=
MMC_ERR_NONE
) {

1849 ()
	`mmc_ªad_ext_csd
(
ho°
, 
ˇrd
);

1850 
psOuçut
->
eResu…
 = 
CTP_RESULT_PASS
;

1856 
exô
:

1857  
ªt
;

1858 
	}
}

1863 
	$ølök_msdc_comm™d
(
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

1865 #i‡
	`deföed
 (
MT7620_FPGA_BOARD
Ë|| deföed (
MT7620_ASIC_BOARD
)

1866 
	`MSDC_CLR_BIT32
(
RALINK_SYSCTL_BASE
+0x60, 0x1 << 19);

1867 
	`MSDC_SET_BIT32
(
RALINK_SYSCTL_BASE
+0x60, 0x1 << 18);

1868 #ñi‡
	`deföed
 (
MT7621_FPGA_BOARD
Ë|| deföed (
MT7621_ASIC_BOARD
)

1869 
	`MSDC_CLR_BIT32
(
RALINK_SYSCTL_BASE
+0x60, 0x1 << 19);

1870 
	`MSDC_CLR_BIT32
(
RALINK_SYSCTL_BASE
+0x60, 0x1 << 18);

1871 #ñi‡
	`deföed
 (
MT7628_FPGA_BOARD
Ë|| deföed (
MT7628_ASIC_BOARD
)

1872 
	`MSDC_SET_BIT32
(0xb000003c, 0x1e << 16);

1873 
	`MSDC_CLR_BIT32
(
RALINK_SYSCTL_BASE
+0x60, 0x3 << 10);

1874 #i‡
	`deföed
 (
EMMC_8BIT
)

1875 
	`MSDC_SET_BIT32
(
RALINK_SYSCTL_BASE
+0x60, 0x3 << 30);

1876 
	`MSDC_SET_BIT32
(
RALINK_SYSCTL_BASE
+0x60, 0x3 << 28);

1877 
	`MSDC_SET_BIT32
(
RALINK_SYSCTL_BASE
+0x60, 0x3 << 26);

1881 i‡(!
	`°∫cmp
(
¨gv
[1], "register", 9)) {

1882 
	`SDMMC_RegTe°
();

1883 } i‡(!
	`°∫cmp
(
¨gv
[1], "card", 5)) {

1884 i‡(!
	`°∫cmp
(
¨gv
[2], "init", 5)) {

1885 
	`SDMMC_C¨dInôTe°
();

1886 } i‡(!
	`°∫cmp
(
¨gv
[2], "erase", 6)) {

1887 
	`SDMMC_C¨dEø£Te°
();

1888 } i‡(!
	`°∫cmp
(
¨gv
[2], "detect", 7)) {

1889 
	`SDMMC_C¨dDëe˘Te°
();

1891 
Áû
;

1892 } i‡(!
	`°∫cmp
(
¨gv
[1], "pio", 4)) {

1893 
	`SDMMC_C¨dPIOTe°
();

1894 } i‡(!
	`°∫cmp
(
¨gv
[1], "dma", 4)) {

1895 i‡(!
	`°∫cmp
(
¨gv
[2], "basic", 6)) {

1896 
	`SDMMC_C¨dBasicDMATe°
();

1897 } i‡(!
	`°∫cmp
(
¨gv
[2], "desc", 5)) {

1898 
	`SDMMC_C¨dDescDMATe°
();

1899 } i‡(!
	`°∫cmp
(
¨gv
[2], "enhance", 8)) {

1900 
	`SDMMC_C¨dEnh™˚dDMATe°
();

1902 
Áû
;

1903 } i‡(!
	`°∫cmp
(
¨gv
[1], "cmd12", 6)) {

1904 
	`SDMMC_AutoCmd12Te°
();

1905 } i‡(!
	`°∫cmp
(
¨gv
[1], "blklen", 7)) {

1906 
	`SDMMC_BlockLíTe°
();

1907 } i‡(!
	`°∫cmp
(
¨gv
[1], "stress", 7)) {

1908 
	`SDMMC_SåessTe°
(
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 10));

1910 } i‡(!
	`°∫cmp
(
¨gv
[1], "switch", 7)) {

1911 
	`TS_MSDC_Swôch
();

1912 } i‡(!
	`°∫cmp
(
¨gv
[1], "auto", 5)) {

1913 
	`SDMMC_AutoTe°
();

1914 } i‡(!
	`°∫cmp
(
¨gv
[1], "mmc", 4)) {

1915 i‡(!
	`°∫cmp
(
¨gc
[2], "stream", 7)) {

1916 
	`SDMMC_C¨dSåómTe°
();

1917 } i‡(!
	`°∫cmp
(
¨gv
[2], "irq",4)){

1918 
	`SDMMC_MMCIRQTe°
();

1920 
Áû
;

1921 } i‡(!
	`°∫cmp
(
¨gv
[1], "cmd19", 6)) {

1922 
	`SDMMC_AutoCmd19Te°
();

1923 } i‡(!
	`°∫cmp
(
¨gv
[1], "cmd23", 6)) {

1924 
	`SDMMC_AutoCmd23Te°
();

1925 } i‡(!
	`°∫cmp
(
¨gv
[1], "ddrmode", 8)) {

1926 
	`SDMMC_DDRModeTe°
();

1927 } i‡(!
	`°∫cmp
(
¨gv
[1], "emmc", 5)) {

1928 i‡(!
	`°∫cmp
(
¨gv
[2], "boot", 5)) {

1929 
	`SDMMC_EmmcBoŸTe°
();

1930 } i‡(!
	`°∫cmp
(
¨gv
[2], "bootcfg", 8)) {

1931 
	`EMMC_BoŸModeC⁄fig
();

1933 
Áû
;

1934 } i‡(!
	`°∫cmp
(
¨gv
[1], "tune", 5)) {

1935 i‡(!
	`°∫cmp
(
¨gv
[2], "cmd", 4)) {

1936 
	`SDMMC_TunögCmdTe°
();

1937 } i‡(!
	`°∫cmp
(
¨gv
[2], "write", 6)) {

1938 
	`SDMMC_TunögWrôeTe°
();

1939 } i‡(!
	`°∫cmp
(
¨gv
[2], "read", 5)) {

1940 
	`SDMMC_TunögRódTe°
();

1942 
Áû
;

1943 } i‡(!
	`°∫cmp
(
¨gv
[1], "sdio", 5)) {

1944 
	`SDIO_I¡îru±Te°
();

1945 } i‡(!
	`°∫cmp
(
¨gv
[1], "uhs", 4)) {

1946 
	`SD30_SDR104Te°
();

1949 
Áû
;

1952 
Áû
:

1953 
	`¥ötf
("Ußge:\n%s\¿u£ \"hñ∞msdc\" f‹ dëaû!\n", 
cmdç
->
ußge
);

1955 
	}
}

1957 
U_BOOT_CMD
(

1958 
msdc
, 3, 1, 
ølök_msdc_comm™d
,

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/msdc/utils.h

1 #i‚de‡
_UTILS_H_


2 
	#_UTILS_H_


	)

4 
	~<mÆloc.h
>

5 
	~<löux/ty≥s.h
>

6 
	~"msg.h
"

8 
	#BUG_ON
(
x
) \

10 i‡(
x
) { \

11 
	`¥ötf
("[BUG] %†LINE:%d FILE:%s\n", #x, 
__LINE__
, 
__FILE__
); \

14 }0)

	)

15 
	#WARN_ON
(
x
) \

17 i‡(
x
) { \

18 
	`MSG
(
WRN
, "[WARN] %†LINE:%d FILE:%s\n", #x, 
__LINE__
, 
__FILE__
); \

20 }0)

	)

22 
	#ERR_EXIT
(
ex¥
, 
ªt
, 
ex≥˘ed_ªt
) \

24 (
ªt
Ë(
ex¥
);\

25 i‡((
ªt
Ë!(
ex≥˘ed_ªt
)) { \

26 
	`¥ötf
("[ERR] LINE:%d: %†!%d (%d)\n", 
__LINE__
, #ex¥, 
ex≥˘ed_ªt
, 
ªt
); \

27 
exô
; \

29 } 0)

	)

31 
	#ARRAY_SIZE
(
x
Ë((xË/ ((x)[0]))

	)

39 
uöt32
 
	$uffs
(
uöt32
 
x
)

41 
r
 = 1;

43 i‡(!
x
)

45 i‡(!(
x
 & 0xffff)) {

46 
x
 >>= 16;

47 
r
 += 16;

49 i‡(!(
x
 & 0xff)) {

50 
x
 >>= 8;

51 
r
 += 8;

53 i‡(!(
x
 & 0xf)) {

54 
x
 >>= 4;

55 
r
 += 4;

57 i‡(!(
x
 & 3)) {

58 
x
 >>= 2;

59 
r
 += 2;

61 i‡(!(
x
 & 1)) {

62 
x
 >>= 1;

63 
r
 += 1;

65  
r
;

66 
	}
}

70 #i‚de‡
mö


71 
	#mö
(
x
, 
y
Ë(x < y ? x : y)

	)

73 #i‚de‡
max


74 
	#max
(
x
, 
y
Ë(x > y ? x : y)

	)

78 
	#udñay
(
us
) \

80 vﬁ©ûê
cou¡
 = 
us
 * 5000; \

81 
cou¡
--); \

82 }0)

	)

84 
	#mdñay
(
ms
) \

86 
i
; \

87 
i
 = 0; i < 
ms
; i++) \

88 
	`udñay
(1000); \

89 }0)

	)

91 
	#udñay
(
us
Ëdo{
	`GPT_Dñay_us
(us);}0)

	)

92 
	#mdñay
(
ms
Ëdo{
	`GPT_Dñay_ms
(ms);}0)

	)

95 
	#WAIT_COND
(
c⁄d
,
tmo
,
À·
) \

97 vﬁ©ûê
u32
 
t
 = 
tmo
; \

99 i‡((
c⁄d
Ë|| (
t
 == 0)) ; \

100 i‡(
t
 > 0Ë{ 
	`mdñay
(1);Å--; } \

102 
À·
 = 
t
; \

103 
	`WARN_ON
(
À·
 == 0); \

104 }0)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/nand/bmt.c

1 
	~"bmt.h
"

5 
	msig«tuª
[3];

6 
u8
 
	mvîsi⁄
;

7 
u8
 
	mbad_cou¡
;

8 
u8
 
	mm≠≥d_cou¡
;

9 
u8
 
	mchecksum
;

10 
u8
 
	mª£vîd
[13];

11 } 
	tphys_bmt_hódî
;

15 
phys_bmt_hódî
 
	mhódî
;

16 
bmt_íåy
 
	mèbÀ
[
MAX_BMT_SIZE
];

17 } 
	tphys_bmt_°ru˘
;

21 
	msig«tuª
[3];

22 } 
	tbmt_oob_d©a
;

24 
	gMAIN_SIGNATURE
[] = "BMT";

25 
	gOOB_SIGNATURE
[] = "bmt";

26 
	#SIGNATURE_SIZE
 (3)

	)

28 
	#MAX_DAT_SIZE
 0x1000

	)

29 
	#MAX_OOB_SIZE
 0x80

	)

31 
mtd_öfo
 *
	gmtd_bmt
;

32 
«nd_chù
 *
	g«nd_chù_bmt
;

33 
	#BLOCK_SIZE_BMT
 (1 << 
«nd_chù_bmt
->
phys_îa£_shi·
)

	)

34 
	#PAGE_SIZE_BMT
 (1 << 
«nd_chù_bmt
->
∑ge_shi·
)

	)

36 
	#OFFSET
(
block
Ë((blockË* 
BLOCK_SIZE_BMT
)

	)

37 
	#PAGE_ADDR
(
block
Ë((blockË* 
BLOCK_SIZE_BMT
 / 
PAGE_SIZE_BMT
)

	)

46 
u32
 
	gtŸÆ_block_cou¡
;

47 
u32
 
	gsy°em_block_cou¡
;

48 
	gbmt_block_cou¡
;

50 
	g∑ge_≥r_block
;

52 
u32
 
	gbmt_block_ödex
;

53 
bmt_°ru˘
 
	gbmt
;

55 
u8
 
	gd©_buf
[
MAX_DAT_SIZE
];

56 
u8
 
	goob_buf
[
MAX_OOB_SIZE
];

57 
boﬁ
 
	gpoﬁ_îa£d
;

66 
	$«nd_ªad_∑ge_bmt
(
u32
 
∑ge
, 
u8
 * 
d©
, u8 * 
oob
)

68  
	`mtk_«nd_exec_ªad_∑ge
(
mtd_bmt
, 
∑ge
, 
PAGE_SIZE_BMT
, 
d©
, 
oob
);

69 
	}
}

71 
boﬁ
 
	$«nd_block_bad_bmt
(
u32
 
off£t
)

73  
	`mtk_«nd_block_bad_hw
(
mtd_bmt
, 
off£t
);

74 
	}
}

76 
boﬁ
 
	$«nd_îa£_bmt
(
u32
 
off£t
)

78 
°©us
;

79 i‡(
off£t
 < 0x20000)

81 
	`MSG
(
INIT
, "îa£ off£t: 0x%x\n", 
off£t
);

84 
°©us
 = 
	`mtk_«nd_îa£_hw
(
mtd_bmt
, 
off£t
 / 
PAGE_SIZE_BMT
);

85 i‡(
°©us
 & 
NAND_STATUS_FAIL
)

86  
Ál£
;

88  
åue
;

89 
	}
}

91 
	$m¨k_block_bad_bmt
(
u32
 
off£t
)

93  
	`mtk_«nd_block_m¨kbad_hw
(
mtd_bmt
, 
off£t
);

94 
	}
}

96 
boﬁ
 
	$«nd_wrôe_∑ge_bmt
(
u32
 
∑ge
, 
u8
 * 
d©
, u8 * 
oob
)

98 i‡(
	`mtk_«nd_exec_wrôe_∑ge
(
mtd_bmt
, 
∑ge
, 
PAGE_SIZE_BMT
, 
d©
, 
oob
))

99  
Ál£
;

101  
åue
;

102 
	}
}

109 
	$dump_bmt_öfo
(
bmt_°ru˘
 * 
bmt
)

111 
i
;

113 
	`MSG
(
INIT
, "BMT v%d.ÅŸÆ %d m≠pög:\n", 
bmt
->
vîsi⁄
, bmt->
m≠≥d_cou¡
);

114 
i
 = 0; i < 
bmt
->
m≠≥d_cou¡
; i++)

116 
	`MSG
(
INIT
, "\t0x%x -> 0x%x\n", 
bmt
->
èbÀ
[
i
].
bad_ödex
, bmt->èbÀ[i].
m≠≥d_ödex
);

118 
	}
}

120 
boﬁ
 
	$m©ch_bmt_sig«tuª
(
u8
 * 
d©
, u8 * 
oob
)

123 i‡(
	`memcmp
(
d©
 + 
MAIN_SIGNATURE_OFFSET
, 
MAIN_SIGNATURE
, 
SIGNATURE_SIZE
))

125  
Ál£
;

128 i‡(
	`memcmp
(
oob
 + 
OOB_SIGNATURE_OFFSET
, 
OOB_SIGNATURE
, 
SIGNATURE_SIZE
))

130 
	`MSG
(
INIT
, "main signature match, oob signature doesn't match, but ignore\n");

132  
åue
;

133 
	}
}

135 
u8
 
	$ˇl_bmt_checksum
(
phys_bmt_°ru˘
 * 
phys_èbÀ
, 
bmt_size
)

137 
i
;

138 
u8
 
checksum
 = 0;

139 
u8
 *
d©
 = (u8 *Ë
phys_èbÀ
;

141 
checksum
 +
phys_èbÀ
->
hódî
.
vîsi⁄
;

142 
checksum
 +
phys_èbÀ
->
hódî
.
m≠≥d_cou¡
;

144 
d©
 +(
phys_bmt_hódî
);

145 
i
 = 0; i < 
bmt_size
 * (
bmt_íåy
); i++)

147 
checksum
 +
d©
[
i
];

150  
checksum
;

151 
	}
}

154 
	$is_block_m≠≥d
(
ödex
)

156 
i
;

157 
i
 = 0; i < 
bmt
.
m≠≥d_cou¡
; i++)

159 i‡(
ödex
 =
bmt
.
èbÀ
[
i
].
m≠≥d_ödex
)

160  
i
;

163 
	}
}

165 
boﬁ
 
	$is_∑ge_u£d
(
u8
 * 
d©
, u8 * 
oob
)

167  ((
oob
[
OOB_INDEX_OFFSET
] != 0xFF) || (oob[OOB_INDEX_OFFSET + 1] != 0xFF));

168 
	}
}

170 
boﬁ
 
	$vÆid_bmt_d©a
(
phys_bmt_°ru˘
 * 
phys_èbÀ
)

172 
i
;

173 
u8
 
checksum
 = 
	`ˇl_bmt_checksum
(
phys_èbÀ
, 
bmt_block_cou¡
);

176 i‡(
phys_èbÀ
->
hódî
.
checksum
 != checksum)

178 
	`MSG
(
INIT
, "BMT D©®checksumÉº‹: %x %x\n", 
phys_èbÀ
->
hódî
.
checksum
, checksum);

179  
Ál£
;

182 
	`MSG
(
INIT
, "BMT Checksum is: 0x%x\n", 
phys_èbÀ
->
hódî
.
checksum
);

185 
i
 = 0; i < 
phys_èbÀ
->
hódî
.
m≠≥d_cou¡
; i++)

187 i‡(
phys_èbÀ
->
èbÀ
[
i
].
bad_ödex
 >
tŸÆ_block_cou¡
 ||Öhys_èbÀ->èbÀ[i].
m≠≥d_ödex
 >tŸÆ_block_cou¡ ||Öhys_èbÀ->èbÀ[i].m≠≥d_ödex < 
sy°em_block_cou¡
)

189 
	`MSG
(
INIT
, "ödexÉº‹: bad_ödex: %d, m≠≥d_ödex: %d\n", 
phys_èbÀ
->
èbÀ
[
i
].
bad_ödex
,Öhys_èbÀ->èbÀ[i].
m≠≥d_ödex
);

190  
Ál£
;

195 
	`MSG
(
INIT
, "VÆid BMT, vîsi⁄ v%d\n", 
phys_èbÀ
->
hódî
.
vîsi⁄
);

196  
åue
;

197 
	}
}

199 
	$fûl_«nd_bmt_buf„r
(
bmt_°ru˘
 * 
bmt
, 
u8
 * 
d©
, u8 * 
oob
)

201 
phys_bmt_°ru˘
 
phys_bmt
;

203 
	`dump_bmt_öfo
(
bmt
);

206 
	`mem£t
(&
phys_bmt
, 0xFF, (phys_bmt));

208 
	`mem˝y
(
phys_bmt
.
hódî
.
sig«tuª
, 
MAIN_SIGNATURE
, 
SIGNATURE_SIZE
);

209 
phys_bmt
.
hódî
.
vîsi⁄
 = 
BMT_VERSION
;

211 
phys_bmt
.
hódî
.
m≠≥d_cou¡
 = 
bmt
->mapped_count;

212 
	`mem˝y
(
phys_bmt
.
èbÀ
, 
bmt
->èbÀ, (
bmt_íåy
Ë* 
bmt_block_cou¡
);

214 
phys_bmt
.
hódî
.
checksum
 = 
	`ˇl_bmt_checksum
(&phys_bmt, 
bmt_block_cou¡
);

216 
	`mem˝y
(
d©
 + 
MAIN_SIGNATURE_OFFSET
, &
phys_bmt
, (phys_bmt));

217 
	`mem˝y
(
oob
 + 
OOB_SIGNATURE_OFFSET
, 
OOB_SIGNATURE
, 
SIGNATURE_SIZE
);

218 
	}
}

221 
	$lﬂd_bmt_d©a
(
°¨t
, 
poﬁ_size
)

223 
bmt_ödex
 = 
°¨t
 + 
poﬁ_size
 - 1;

224 
phys_bmt_°ru˘
 
phys_èbÀ
;

225 
i
;

227 
	`MSG
(
INIT
, "[%s]: begöÅÿ£¨ch BMT from block 0x%x\n", 
__FUNCTION__
, 
bmt_ödex
);

229 
bmt_ödex
 = 
°¨t
 + 
poﬁ_size
 - 1; bmt_index >= start; bmt_index--)

231 i‡(
	`«nd_block_bad_bmt
(
	`OFFSET
(
bmt_ödex
)))

233 
	`MSG
(
INIT
, "Skù bad block: %d\n", 
bmt_ödex
);

237 i‡(!
	`«nd_ªad_∑ge_bmt
(
	`PAGE_ADDR
(
bmt_ödex
), 
d©_buf
, 
oob_buf
))

239 
	`MSG
(
INIT
, "Eº‹ found whíÑód block %d\n", 
bmt_ödex
);

243 i‡(!
	`m©ch_bmt_sig«tuª
(
d©_buf
, 
oob_buf
))

248 
	`MSG
(
INIT
, "M©ch bmàsig«tuª @ block: 0x%x\n", 
bmt_ödex
);

250 
	`mem˝y
(&
phys_èbÀ
, 
d©_buf
 + 
MAIN_SIGNATURE_OFFSET
, (phys_table));

252 i‡(!
	`vÆid_bmt_d©a
(&
phys_èbÀ
))

254 
	`MSG
(
INIT
, "BMT d©®i†nŸ c‹ª˘ %d\n", 
bmt_ödex
);

258 
bmt
.
m≠≥d_cou¡
 = 
phys_èbÀ
.
hódî
.mapped_count;

259 
bmt
.
vîsi⁄
 = 
phys_èbÀ
.
hódî
.version;

261 
	`mem˝y
(
bmt
.
èbÀ
, 
phys_èbÀ
.èbÀ, bmt.
m≠≥d_cou¡
 * (
bmt_íåy
));

263 
	`MSG
(
INIT
, "bmàfoundáàblock: %d, m≠≥d block: %d\n", 
bmt_ödex
, 
bmt
.
m≠≥d_cou¡
);

265 
i
 = 0; i < 
bmt
.
m≠≥d_cou¡
; i++)

267 i‡(!
	`«nd_block_bad_bmt
(
	`OFFSET
(
bmt
.
èbÀ
[
i
].
bad_ödex
)))

269 
	`MSG
(
INIT
, "block 0x%x i†nŸ m¨k bad, should bêpowîÜo°Üa°Åime\n", 
bmt
.
èbÀ
[
i
].
bad_ödex
);

270 
	`m¨k_block_bad_bmt
(
	`OFFSET
(
bmt
.
èbÀ
[
i
].
bad_ödex
));

274  
bmt_ödex
;

278 
	`MSG
(
INIT
, "bmt blockÇot found!\n");

280 
	}
}

288 
	$föd_avaûabÀ_block
(
boﬁ
 
°¨t_‰om_íd
)

290 
i
;

291 
block
 = 
sy°em_block_cou¡
;

292 
dúe˘i⁄
;

294 
	`MSG
(
INIT
, "TryÅÿföd_avaûabÀ_block,Öoﬁ_îa£: %d\n", 
poﬁ_îa£d
);

297 i‡(!
poﬁ_îa£d
)

299 
	`MSG
(
INIT
, "Eraseáll un-mapped blocks inÖool\n");

300 
i
 = 0; i < 
bmt_block_cou¡
; i++)

302 i‡(
block
 =
bmt_block_ödex
)

304 
	`MSG
(
INIT
, "Skù bmàblock 0x%x\n", 
block
);

308 i‡(
	`«nd_block_bad_bmt
(
	`OFFSET
(
block
 + 
i
)))

310 
	`MSG
(
INIT
, "Skù bad block 0x%x\n", 
block
 + 
i
);

318 i‡(
	`is_block_m≠≥d
(
block
 + 
i
) >= 0)

320 
	`MSG
(
INIT
, "Skù m≠≥d block 0x%x\n", 
block
 + 
i
);

324 i‡(!
	`«nd_îa£_bmt
(
	`OFFSET
(
block
 + 
i
)))

326 
	`MSG
(
INIT
, "Eø£ block 0x%x faûed\n", 
block
 + 
i
);

327 
	`m¨k_block_bad_bmt
(
	`OFFSET
(
block
 + 
i
));

331 
poﬁ_îa£d
 = 1;

334 i‡(
°¨t_‰om_íd
)

336 
block
 = 
tŸÆ_block_cou¡
 - 1;

337 
dúe˘i⁄
 = -1;

340 
block
 = 
sy°em_block_cou¡
;

341 
dúe˘i⁄
 = 1;

344 
i
 = 0; i < 
bmt_block_cou¡
; i++, 
block
 +
dúe˘i⁄
)

346 i‡(
block
 =
bmt_block_ödex
)

348 
	`MSG
(
INIT
, "Skù bmàblock 0x%x\n", 
block
);

352 i‡(
	`«nd_block_bad_bmt
(
	`OFFSET
(
block
)))

354 
	`MSG
(
INIT
, "Skù bad block 0x%x\n", 
block
);

358 i‡(
	`is_block_m≠≥d
(
block
) >= 0)

360 
	`MSG
(
INIT
, "Skù m≠≥d block 0x%x\n", 
block
);

364 
	`MSG
(
INIT
, "Föd block 0x%xávaûabÀ\n", 
block
);

365  
block
;

369 
	}
}

371 
	$gë_bad_ödex_‰om_oob
(
u8
 * 
oob_buf
)

373 
ödex
;

374 
	`mem˝y
(&
ödex
, 
oob_buf
 + 
OOB_INDEX_OFFSET
, 
OOB_INDEX_SIZE
);

376  
ödex
;

377 
	}
}

379 
	$£t_bad_ödex_to_oob
(
u8
 * 
oob
, 
u16
 
ödex
)

381 
	`mem˝y
(
oob
 + 
OOB_INDEX_OFFSET
, &
ödex
, (index));

382 
	}
}

384 
	$migøã_‰om_bad
(
off£t
, 
u8
 * 
wrôe_d©
, u8 * 
wrôe_oob
)

386 
∑ge
;

387 
îr‹_block
 = 
off£t
 / 
BLOCK_SIZE_BMT
;

388 
îr‹_∑ge
 = (
off£t
 / 
PAGE_SIZE_BMT
Ë% 
∑ge_≥r_block
;

389 
to_ödex
;

391 
	`mem˝y
(
oob_buf
, 
wrôe_oob
, 
MAX_OOB_SIZE
);

393 
to_ödex
 = 
	`föd_avaûabÀ_block
(
Ál£
);

395 i‡(!
to_ödex
)

397 
	`MSG
(
INIT
, "Cannot findánávailable block for BMT\n");

402 
	`MSG
(
INIT
, "Wrôêîr‹Öage: 0x%x\n", 
îr‹_∑ge
);

403 i‡(!
wrôe_d©
)

405 
	`«nd_ªad_∑ge_bmt
(
	`PAGE_ADDR
(
îr‹_block
Ë+ 
îr‹_∑ge
, 
d©_buf
, 
NULL
);

406 
wrôe_d©
 = 
d©_buf
;

410 i‡(
îr‹_block
 < 
sy°em_block_cou¡
)

411 
	`£t_bad_ödex_to_oob
(
oob_buf
, 
îr‹_block
);

413 i‡(!
	`«nd_wrôe_∑ge_bmt
(
	`PAGE_ADDR
(
to_ödex
Ë+ 
îr‹_∑ge
, 
wrôe_d©
, 
oob_buf
))

415 
	`MSG
(
INIT
, "Wrôêtÿ∑gê0x%x faû\n", 
	`PAGE_ADDR
(
to_ödex
Ë+ 
îr‹_∑ge
);

416 
	`m¨k_block_bad_bmt
(
to_ödex
);

417  
	`migøã_‰om_bad
(
off£t
, 
wrôe_d©
, 
wrôe_oob
);

421 
∑ge
 = 0;Öagê< 
∑ge_≥r_block
;Öage++)

423 i‡(
∑ge
 !
îr‹_∑ge
)

425 
	`«nd_ªad_∑ge_bmt
(
	`PAGE_ADDR
(
îr‹_block
Ë+ 
∑ge
, 
d©_buf
, 
oob_buf
);

426 i‡(
	`is_∑ge_u£d
(
d©_buf
, 
oob_buf
))

428 i‡(
îr‹_block
 < 
sy°em_block_cou¡
)

430 
	`£t_bad_ödex_to_oob
(
oob_buf
, 
îr‹_block
);

432 
	`MSG
(
INIT
, "\tmigøãÖagê0x%xÅÿ∑gê0x%x\n", 
	`PAGE_ADDR
(
îr‹_block
Ë+ 
∑ge
, PAGE_ADDR(
to_ödex
) +Öage);

433 i‡(!
	`«nd_wrôe_∑ge_bmt
(
	`PAGE_ADDR
(
to_ödex
Ë+ 
∑ge
, 
d©_buf
, 
oob_buf
))

435 
	`MSG
(
INIT
, "Wrôêtÿ∑gê0x%x faû\n", 
	`PAGE_ADDR
(
to_ödex
Ë+ 
∑ge
);

436 
	`m¨k_block_bad_bmt
(
to_ödex
);

437  
	`migøã_‰om_bad
(
off£t
, 
wrôe_d©
, 
wrôe_oob
);

443 
	`MSG
(
INIT
, "Migøã from 0x%xÅÿ0x%x d⁄e!\n", 
îr‹_block
, 
to_ödex
);

445  
to_ödex
;

446 
	}
}

448 
boﬁ
 
	$wrôe_bmt_to_Êash
(
u8
 * 
d©
, u8 * 
oob
)

450 
boﬁ
 
√ed_îa£
 = 
åue
;

451 
	`MSG
(
INIT
, "TryÅo write BMT\n");

453 i‡(
bmt_block_ödex
 == 0)

456 
√ed_îa£
 = 
Ál£
;

457 i‡(!(
bmt_block_ödex
 = 
	`föd_avaûabÀ_block
(
åue
)))

459 
	`MSG
(
INIT
, "Cannot findánávailable block for BMT\n");

460  
Ál£
;

464 
	`MSG
(
INIT
, "Föd BMT block: 0x%x\n", 
bmt_block_ödex
);

467 i‡(
√ed_îa£
)

469 i‡(!
	`«nd_îa£_bmt
(
	`OFFSET
(
bmt_block_ödex
)))

471 
	`MSG
(
INIT
, "BMT blockÉø£ faû, m¨k bad: 0x%x\n", 
bmt_block_ödex
);

472 
	`m¨k_block_bad_bmt
(
	`OFFSET
(
bmt_block_ödex
));

475 
bmt_block_ödex
 = 0;

476  
	`wrôe_bmt_to_Êash
(
d©
, 
oob
);

480 i‡(!
	`«nd_wrôe_∑ge_bmt
(
	`PAGE_ADDR
(
bmt_block_ödex
), 
d©
, 
oob
))

482 
	`MSG
(
INIT
, "Write BMT data fail,ÇeedÅo writeágain\n");

483 
	`m¨k_block_bad_bmt
(
	`OFFSET
(
bmt_block_ödex
));

486 
bmt_block_ödex
 = 0;

487  
	`wrôe_bmt_to_Êash
(
d©
, 
oob
);

490 
	`MSG
(
INIT
, "WrôêBMT d©®tÿblock 0x%x suc˚ss\n", 
bmt_block_ödex
);

491  
åue
;

492 
	}
}

500 
bmt_°ru˘
 *
	$ªc⁄°ru˘_bmt
(
bmt_°ru˘
 * 
bmt
)

502 
i
;

503 
ödex
 = 
sy°em_block_cou¡
;

504 
bad_ödex
;

505 
m≠≥d
;

508 
bmt
->
vîsi⁄
 = 
BMT_VERSION
;

509 
bmt
->
bad_cou¡
 = 0;

510 
bmt
->
m≠≥d_cou¡
 = 0;

512 
	`mem£t
(
bmt
->
èbÀ
, 0, 
bmt_block_cou¡
 * (
bmt_íåy
));

514 
i
 = 0; i < 
bmt_block_cou¡
; i++, 
ödex
++)

516 i‡(
	`«nd_block_bad_bmt
(
	`OFFSET
(
ödex
)))

518 
	`MSG
(
INIT
, "Skù bad block: 0x%x\n", 
ödex
);

523 
	`MSG
(
INIT
, "ªadÖage: 0x%x\n", 
	`PAGE_ADDR
(
ödex
));

524 
	`«nd_ªad_∑ge_bmt
(
	`PAGE_ADDR
(
ödex
), 
d©_buf
, 
oob_buf
);

531 i‡((
bad_ödex
 = 
	`gë_bad_ödex_‰om_oob
(
oob_buf
)Ë>
sy°em_block_cou¡
)

533 
	`MSG
(
INIT
, "gë bad index: 0x%x\n", 
bad_ödex
);

534 i‡(
bad_ödex
 != 0xFFFF)

535 
	`MSG
(
INIT
, "InvÆid bad index found i¿block 0x%x, bad index 0x%x\n", 
ödex
, 
bad_ödex
);

539 
	`MSG
(
INIT
, "Block 0x%x i†m≠≥dÅÿbad block: 0x%x\n", 
ödex
, 
bad_ödex
);

541 i‡(!
	`«nd_block_bad_bmt
(
	`OFFSET
(
bad_ödex
)))

543 
	`MSG
(
INIT
, "\tbuàblock 0x%x i†nŸ m¨kedá†bad, invÆid m≠pög\n", 
bad_ödex
);

547 i‡((
m≠≥d
 = 
	`is_block_m≠≥d
(
bad_ödex
)) >= 0)

549 
	`MSG
(
INIT
, "bad block 0x%x i†m≠≥dÅÿ0x%x, should bêˇu£d byÖowîÜo°,Ñïœ˚ wôh o√\n", 
bmt
->
èbÀ
[
m≠≥d
].
bad_ödex
, bmt->èbÀ[m≠≥d].
m≠≥d_ödex
);

550 
bmt
->
èbÀ
[
m≠≥d
].
m≠≥d_ödex
 = 
ödex
;

554 
bmt
->
èbÀ
[bmt->
m≠≥d_cou¡
].
bad_ödex
 = bad_index;

555 
bmt
->
èbÀ
[bmt->
m≠≥d_cou¡
].
m≠≥d_ödex
 = 
ödex
;

556 
bmt
->
m≠≥d_cou¡
++;

559 
	`MSG
(
INIT
, "Add m≠pög: 0x%x -> 0x%xÅÿBMT\n", 
bad_ödex
, 
ödex
);

563 
	`MSG
(
INIT
, "Sˇ¿ª∂a˚Öoﬁ d⁄e, m≠≥d block: %d\n", 
bmt
->
m≠≥d_cou¡
);

567 
	`mem£t
(
oob_buf
, 0xFF, (oob_buf));

568 
	`fûl_«nd_bmt_buf„r
(
bmt
, 
d©_buf
, 
oob_buf
);

571 i‡(!
	`wrôe_bmt_to_Êash
(
d©_buf
, 
oob_buf
))

573 
	`MSG
(
INIT
, "TRAGEDY: cannot findáÖlaceÅo write BMT!!!!\n");

576  
bmt
;

577 
	}
}

591 
bmt_°ru˘
 *
	$öô_bmt
(
«nd_chù
 * 
chù
, 
size
)

593 
mtk_«nd_ho°
 *
ho°
;

595 i‡(
size
 > 0 && sizê< 
MAX_BMT_SIZE
)

597 
	`MSG
(
INIT
, "Inô bmàèbÀ, size: %d\n", 
size
);

598 
bmt_block_cou¡
 = 
size
;

601 
	`MSG
(
INIT
, "InvÆid bmàèbÀ size: %d\n", 
size
);

602  
NULL
;

604 
«nd_chù_bmt
 = 
chù
;

605 
sy°em_block_cou¡
 = 
chù
->
chùsize
 >> chù->
phys_îa£_shi·
;

606 
tŸÆ_block_cou¡
 = 
bmt_block_cou¡
 + 
sy°em_block_cou¡
;

607 
∑ge_≥r_block
 = 
BLOCK_SIZE_BMT
 / 
PAGE_SIZE_BMT
;

608 
ho°
 = (
mtk_«nd_ho°
 *)
chù
->
¥iv
;

609 
mtd_bmt
 = &
ho°
->
mtd
;

611 
	`MSG
(
INIT
, "mtd_bmt: %p,Ç™d_chù_bmt: %p\n", 
mtd_bmt
, 
«nd_chù_bmt
);

612 
	`MSG
(
INIT
, "bmàcou¡: %d, sy°em cou¡: %d\n", 
bmt_block_cou¡
, 
sy°em_block_cou¡
);

615 
poﬁ_îa£d
 = 0;

616 
	`mem£t
(
bmt
.
èbÀ
, 0, 
size
 * (
bmt_íåy
));

617 i‡((
bmt_block_ödex
 = 
	`lﬂd_bmt_d©a
(
sy°em_block_cou¡
, 
size
)))

619 
	`MSG
(
INIT
, "Lﬂd bmàd©®suc˚s†@ block 0x%x\n", 
bmt_block_ödex
);

620 
	`dump_bmt_öfo
(&
bmt
);

621  &
bmt
;

624 
	`MSG
(
INIT
, "Load bmt data fail,ÇeedÑe-construct!\n");

626 i‡(
	`ªc⁄°ru˘_bmt
(&
bmt
))

627  &
bmt
;

630  
NULL
;

632 
	}
}

648 
boﬁ
 
	$upd©e_bmt
(
u32
 
off£t
, 
upd©e_ªas⁄_t
 
ªas⁄
, 
u8
 * 
d©
, u8 * 
oob
)

650 
m≠_ödex
;

651 
‹ig_bad_block
 = -1;

653 
i
;

654 
bad_ödex
 = 
off£t
 / 
BLOCK_SIZE_BMT
;

656 #i‚de‡
MTK_NAND_BMT


657  
Ál£
;

659 i‡(
ªas⁄
 =
UPDATE_WRITE_FAIL
)

661 
	`MSG
(
INIT
, "Write fail,ÇeedÅo migrate\n");

662 i‡(!(
m≠_ödex
 = 
	`migøã_‰om_bad
(
off£t
, 
d©
, 
oob
)))

664 
	`MSG
(
INIT
, "migrate fail\n");

665  
Ál£
;

669 i‡(!(
m≠_ödex
 = 
	`föd_avaûabÀ_block
(
Ál£
)))

671 
	`MSG
(
INIT
, "Cannot find block inÖool\n");

672  
Ál£
;

677 i‡(
bad_ödex
 >
sy°em_block_cou¡
)

679 
i
 = 0; i < 
bmt_block_cou¡
; i++)

681 i‡(
bmt
.
èbÀ
[
i
].
m≠≥d_ödex
 =
bad_ödex
)

683 
‹ig_bad_block
 = 
bmt
.
èbÀ
[
i
].
bad_ödex
;

688 
	`MSG
(
INIT
, "M≠≥d block become†bad, orig bad block i†0x%x\n", 
‹ig_bad_block
);

690 
bmt
.
èbÀ
[
i
].
m≠≥d_ödex
 = 
m≠_ödex
;

693 
bmt
.
èbÀ
[bmt.
m≠≥d_cou¡
].
m≠≥d_ödex
 = 
m≠_ödex
;

694 
bmt
.
èbÀ
[bmt.
m≠≥d_cou¡
].
bad_ödex
 = bad_index;

695 
bmt
.
m≠≥d_cou¡
++;

698 
	`mem£t
(
oob_buf
, 0xFF, (oob_buf));

699 
	`fûl_«nd_bmt_buf„r
(&
bmt
, 
d©_buf
, 
oob_buf
);

700 i‡(!
	`wrôe_bmt_to_Êash
(
d©_buf
, 
oob_buf
))

701  
Ál£
;

703 
	`m¨k_block_bad_bmt
(
off£t
);

705  
åue
;

706 
	}
}

721 
u16
 
	$gë_m≠pög_block_ödex
(
ödex
)

723 
i
;

724 #i‚de‡
MTK_NAND_BMT


725  
ödex
;

727 i‡(
ödex
 > 
sy°em_block_cou¡
)

729  
ödex
;

732 
i
 = 0; i < 
bmt
.
m≠≥d_cou¡
; i++)

734 i‡(
bmt
.
èbÀ
[
i
].
bad_ödex
 =
ödex
)

736  
bmt
.
èbÀ
[
i
].
m≠≥d_ödex
;

740  
ödex
;

741 
	}
}

742 #ifde‡
__KERNEL_NAND__


743 
EXPORT_SYMBOL_GPL
(
öô_bmt
);

744 
EXPORT_SYMBOL_GPL
(
upd©e_bmt
);

745 
EXPORT_SYMBOL_GPL
(
gë_m≠pög_block_ödex
);

747 
MODULE_LICENSE
("GPL");

748 
MODULE_AUTHOR
("MediaTek");

749 
MODULE_DESCRIPTION
("Bad Block mapping management for MediaTek NAND Flash Driver");

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/nand/bmt.h

1 #i‚de‡
__BMT_H__


2 
	#__BMT_H__


	)

4 
	~"«nd_def.h
"

6 #i‡
deföed
(
__PRELOADER_NAND__
)

8 
	~"«nd.h
"

10 #ñi‡
deföed
(
__UBOOT_NAND__
)

12 
	~<löux/mtd/«nd.h
>

13 
	~"mtk_«nd.h
"

15 #ñi‡
deföed
(
__KERNEL_NAND__
)

17 
	~<löux/mtd/mtd.h
>

18 
	~<löux/mtd/«nd.h
>

19 
	~"mtk_«nd.h
"

24 
	#MAX_BMT_SIZE
 (0x80)

	)

25 
	#BMT_VERSION
 (1)

26 

	)

27 
	#MAIN_SIGNATURE_OFFSET
 (0)

	)

28 
	#OOB_SIGNATURE_OFFSET
 (1)

	)

29 
	#OOB_INDEX_OFFSET
 (29)

	)

30 
	#OOB_INDEX_SIZE
 (2)

	)

31 
	#FAKE_INDEX
 (0xAAAA)

	)

33 
	s_bmt_íåy_


35 
u16
 
	mbad_ödex
;

36 
u16
 
	mm≠≥d_ödex
;

37 } 
	tbmt_íåy
;

41 
	mUPDATE_ERASE_FAIL
,

42 
	mUPDATE_WRITE_FAIL
,

43 
	mUPDATE_UNMAPPED_BLOCK
,

44 
	mUPDATE_REASON_COUNT
,

45 } 
	tupd©e_ªas⁄_t
;

49 
bmt_íåy
 
	mèbÀ
[
MAX_BMT_SIZE
];

50 
u8
 
	mvîsi⁄
;

51 
u8
 
	mm≠≥d_cou¡
;

52 
u8
 
	mbad_cou¡
;

53 } 
	tbmt_°ru˘
;

60 
boﬁ
 
mtk_«nd_exec_ªad_∑ge
(
mtd_öfo
 *
mtd
, 
u32
 
row
, u32 
∑ge_size
, 
u8
 * 
d©
, u8 * 
oob
);

61 
mtk_«nd_block_bad_hw
(
mtd_öfo
 *
mtd
, 
loff_t
 
ofs
);

62 
mtk_«nd_îa£_hw
(
mtd_öfo
 *
mtd
, 
∑ge
);

63 
mtk_«nd_block_m¨kbad_hw
(
mtd_öfo
 *
mtd
, 
loff_t
 
ofs
);

64 
mtk_«nd_exec_wrôe_∑ge
(
mtd_öfo
 *
mtd
, 
u32
 
row
, u32 
∑ge_size
, 
u8
 * 
d©
, u8 * 
oob
);

72 
£t_bad_ödex_to_oob
(
u8
 * 
oob
, 
u16
 
ödex
);

75 
bmt_°ru˘
 *
öô_bmt
(
«nd_chù
 *
«nd
, 
size
);

76 
boﬁ
 
upd©e_bmt
(
u32
 
off£t
, 
upd©e_ªas⁄_t
 
ªas⁄
, 
u8
 * 
d©
, u8 * 
oob
);

77 
gë_m≠pög_block_ödex
(
ödex
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/nand/mt6575_typedefs.h

1 #i‚de‡
_MT6575_TYPEDEFS_H


2 
	#_MT6575_TYPEDEFS_H


	)

4 #i‡
deföed
 (
__KERNEL_NAND__
)

5 
	~<löux/bug.h
>

7 
	#åue
 1

	)

8 
	#Ál£
 0

	)

9 
	#boﬁ
 
u8


	)

16 vﬁ©ûê*
	tP_kÆ_uöt8
;

17 vﬁ©ûê*
	tP_kÆ_uöt16
;

18 vﬁ©ûê*
	tP_kÆ_uöt32
;

20 
	tLONG
;

21 
	tUBYTE
;

22 
	tSHORT
;

24 sig√d 
	tkÆ_öt8
;

25 sig√d 
	tkÆ_öt16
;

26 sig√d 
	tkÆ_öt32
;

27 
	tkÆ_öt64
;

28 
	tkÆ_uöt8
;

29 
	tkÆ_uöt16
;

30 
	tkÆ_uöt32
;

31 
	tkÆ_uöt64
;

32 
	tkÆ_ch¨
;

34 *
	tUINT32P
;

35 vﬁ©ûê*
	tUINT16P
;

36 vﬁ©ûê*
	tUINT8P
;

37 *
	tU8P
;

39 vﬁ©ûê*
	tP_U8
;

40 vﬁ©ûêsig√d *
	tP_S8
;

41 vﬁ©ûê*
	tP_U16
;

42 vﬁ©ûêsig√d *
	tP_S16
;

43 vﬁ©ûê*
	tP_U32
;

44 vﬁ©ûêsig√d *
	tP_S32
;

45 *
	tP_U64
;

46 sig√d *
	tP_S64
;

48 
	tU8
;

49 sig√d 
	tS8
;

50 
	tU16
;

51 sig√d 
	tS16
;

52 
	tU32
;

53 sig√d 
	tS32
;

54 
	tU64
;

55 sig√d 
	tS64
;

58 
	tUINT8
;

59 
	tUINT16
;

60 
	tUINT32
;

61 
	tUSHORT
;

62 sig√d 
	tINT8
;

63 sig√d 
	tINT16
;

64 sig√d 
	tINT32
;

65 
	tDWORD
;

66 
	tVOID
;

67 
	tBYTE
;

68 
	tFLOAT
;

70 *
	tLPCSTR
;

71 *
	tLPWSTR
;

78 
	#IMPORT
 
EXTERN


	)

79 #i‚de‡
__˝lu•lus


80 
	#EXTERN
 

	)

82 
	#EXTERN
 "C"

	)

84 
	#LOCAL
 

	)

85 
	#GLOBAL


	)

86 
	#EXPORT
 
GLOBAL


	)

88 
	#EQ
 ==

	)

89 
	#NEQ
 !=

	)

90 
	#AND
 &&

	)

91 
	#OR
 ||

	)

92 
	#XOR
(
A
,
B
Ë((!(AË
	`AND
 (B)Ë
	`OR
 ((AË
AND
 !(B)))

	)

94 #i‚de‡
FALSE


95 
	#FALSE
 (0)

	)

98 #i‚de‡
TRUE


99 
	#TRUE
 (1)

	)

102 #i‚de‡
NULL


103 
	#NULL
 (0)

	)

107 íum {
RX
, 
TX
, 
NONE
};

109 #i‚de‡
BOOL


110 
	tBOOL
;

114 
	mKAL_FALSE
 = 0,

115 
	mKAL_TRUE
 = 1,

116 } 
	tkÆ_boﬁ
;

123 
	#AS_INT32
(
x
Ë(*(
INT32
 *)((*)x))

	)

124 
	#AS_INT16
(
x
Ë(*(
INT16
 *)((*)x))

	)

125 
	#AS_INT8
(
x
Ë(*(
INT8
 *)((*)x))

	)

127 
	#AS_UINT32
(
x
Ë(*(
UINT32
 *)((*)x))

	)

128 
	#AS_UINT16
(
x
Ë(*(
UINT16
 *)((*)x))

	)

129 
	#AS_UINT8
(
x
Ë(*(
UINT8
 *)((*)x))

	)

136 
	#READ_REGISTER_UINT32
(
ªg
) \

137 (*(vﬁ©ûê
UINT32
 * c⁄°)(
ªg
))

	)

139 
	#WRITE_REGISTER_UINT32
(
ªg
, 
vÆ
) \

140 (*(vﬁ©ûê
UINT32
 * c⁄°)(
ªg
)Ë(
vÆ
)

	)

142 
	#READ_REGISTER_UINT16
(
ªg
) \

143 (*(vﬁ©ûê
UINT16
 * c⁄°)(
ªg
))

	)

145 
	#WRITE_REGISTER_UINT16
(
ªg
, 
vÆ
) \

146 (*(vﬁ©ûê
UINT16
 * c⁄°)(
ªg
)Ë(
vÆ
)

	)

148 
	#READ_REGISTER_UINT8
(
ªg
) \

149 (*(vﬁ©ûê
UINT8
 * c⁄°)(
ªg
))

	)

151 
	#WRITE_REGISTER_UINT8
(
ªg
, 
vÆ
) \

152 (*(vﬁ©ûê
UINT8
 * c⁄°)(
ªg
)Ë(
vÆ
)

	)

154 
	#INREG8
(
x
Ë
	`READ_REGISTER_UINT8
((
UINT8
*)((*)(x)))

	)

155 
	#OUTREG8
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT8
((
UINT8
*)((*)(x)), (UINT8)(y))

	)

156 
	#SETREG8
(
x
, 
y
Ë
	`OUTREG8
(x, 
	`INREG8
(x)|(y))

	)

157 
	#CLRREG8
(
x
, 
y
Ë
	`OUTREG8
(x, 
	`INREG8
(x)&~(y))

	)

158 
	#MASKREG8
(
x
, 
y
, 
z
Ë
	`OUTREG8
(x, (
	`INREG8
(x)&~(y))|(z))

	)

160 
	#INREG16
(
x
Ë
	`READ_REGISTER_UINT16
((
UINT16
*)((*)(x)))

	)

161 
	#OUTREG16
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT16
((
UINT16
*)((*)(x)),(UINT16)(y))

	)

162 
	#SETREG16
(
x
, 
y
Ë
	`OUTREG16
(x, 
	`INREG16
(x)|(y))

	)

163 
	#CLRREG16
(
x
, 
y
Ë
	`OUTREG16
(x, 
	`INREG16
(x)&~(y))

	)

164 
	#MASKREG16
(
x
, 
y
, 
z
Ë
	`OUTREG16
(x, (
	`INREG16
(x)&~(y))|(z))

	)

166 
	#INREG32
(
x
Ë
	`READ_REGISTER_UINT32
((
UINT32
*)((*)(x)))

	)

167 
	#OUTREG32
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT32
((
UINT32
*)((*)(x)), (UINT32)(y))

	)

168 
	#SETREG32
(
x
, 
y
Ë
	`OUTREG32
(x, 
	`INREG32
(x)|(y))

	)

169 
	#CLRREG32
(
x
, 
y
Ë
	`OUTREG32
(x, 
	`INREG32
(x)&~(y))

	)

170 
	#MASKREG32
(
x
, 
y
, 
z
Ë
	`OUTREG32
(x, (
	`INREG32
(x)&~(y))|(z))

	)

173 
	#DRV_Reg8
(
addr
Ë
	`INREG8
◊ddr)

	)

174 
	#DRV_WrôeReg8
(
addr
, 
d©a
Ë
	`OUTREG8
◊ddr, d©a)

	)

175 
	#DRV_SëReg8
(
addr
, 
d©a
Ë
	`SETREG8
◊ddr, d©a)

	)

176 
	#DRV_CÃReg8
(
addr
, 
d©a
Ë
	`CLRREG8
◊ddr, d©a)

	)

178 
	#DRV_Reg16
(
addr
Ë
	`INREG16
◊ddr)

	)

179 
	#DRV_WrôeReg16
(
addr
, 
d©a
Ë
	`OUTREG16
◊ddr, d©a)

	)

180 
	#DRV_SëReg16
(
addr
, 
d©a
Ë
	`SETREG16
◊ddr, d©a)

	)

181 
	#DRV_CÃReg16
(
addr
, 
d©a
Ë
	`CLRREG16
◊ddr, d©a)

	)

183 
	#DRV_Reg32
(
addr
Ë
	`INREG32
◊ddr)

	)

184 
	#DRV_WrôeReg32
(
addr
, 
d©a
Ë
	`OUTREG32
◊ddr, d©a)

	)

185 
	#DRV_SëReg32
(
addr
, 
d©a
Ë
	`SETREG32
◊ddr, d©a)

	)

186 
	#DRV_CÃReg32
(
addr
, 
d©a
Ë
	`CLRREG32
◊ddr, d©a)

	)

189 
	#DRV_Reg
(
addr
Ë
	`DRV_Reg16
◊ddr)

	)

190 
	#DRV_WrôeReg
(
addr
, 
d©a
Ë
	`DRV_WrôeReg16
◊ddr, d©a)

	)

191 
	#DRV_SëReg
(
addr
, 
d©a
Ë
	`DRV_SëReg16
◊ddr, d©a)

	)

192 
	#DRV_CÃReg
(
addr
, 
d©a
Ë
	`DRV_CÃReg16
◊ddr, d©a)

	)

199 
	#_MASK_OFFSET_1
(
x
, 
n
Ë((xË& 0x1Ë? (nË:

	)

200 
	#_MASK_OFFSET_2
(
x
, 
n
Ë
	`_MASK_OFFSET_1
((x), (n)Ë_MASK_OFFSET_1((xË>> 1, (nË+ 1)

	)

201 
	#_MASK_OFFSET_4
(
x
, 
n
Ë
	`_MASK_OFFSET_2
((x), (n)Ë_MASK_OFFSET_2((xË>> 2, (nË+ 2)

	)

202 
	#_MASK_OFFSET_8
(
x
, 
n
Ë
	`_MASK_OFFSET_4
((x), (n)Ë_MASK_OFFSET_4((xË>> 4, (nË+ 4)

	)

203 
	#_MASK_OFFSET_16
(
x
, 
n
Ë
	`_MASK_OFFSET_8
((x), (n)Ë_MASK_OFFSET_8((xË>> 8, (nË+ 8)

	)

204 
	#_MASK_OFFSET_32
(
x
, 
n
Ë
	`_MASK_OFFSET_16
((x), (n)Ë_MASK_OFFSET_16((xË>> 16, (nË+ 16)

	)

206 
	#MASK_OFFSET_ERROR
 (0xFFFFFFFF)

	)

208 
	#MASK_OFFSET
(
x
Ë(
	`_MASK_OFFSET_32
(x, 0Ë
MASK_OFFSET_ERROR
)

	)

215 #i‚de‡
ASSERT


216 
	#ASSERT
(
ex¥
Ë
	`BUG_ON
(!”x¥))

	)

219 #i‚de‡
NOT_IMPLEMENTED


220 
	#NOT_IMPLEMENTED
(Ë
	`BUG_ON
(1)

	)

223 
	#STATIC_ASSERT
(
¥ed
Ë
	`STATIC_ASSERT_X
’ªd, 
__LINE__
)

	)

224 
	#STATIC_ASSERT_X
(
¥ed
, 
löe
Ë
	`STATIC_ASSERT_XX
’ªd,Üöe)

	)

225 
	#STATIC_ASSERT_XX
(
¥ed
, 
löe
) \

226 
as£πi⁄_Áûed_©_
##
löe
[(
¥ed
Ë? 1 : -1]

	)

232 
	#NOT_REFERENCED
(
x
Ë{ (xË(x); }

	)

239 
	#MAXIMUM
(
A
,
B
Ë(((A)>(B))?(A):(B))

	)

240 
	#MINIMUM
(
A
,
B
Ë(((A)<(B))?(A):(B))

	)

242 
	#ARY_SIZE
(
x
Ë(((x)Ë/ ((x[0])))

	)

243 
	#DVT_DELAYMACRO
(
u4Num
) \

245 
UINT32
 
u4Cou¡
 = 0 ; \

246 
u4Cou¡
 = 0; u4Cou¡ < 
u4Num
; u4Count++ ); \

248 

	)

249 
	#A68351B
 0

	)

250 
	#B68351B
 1

	)

251 
	#B68351D
 2

	)

252 
	#B68351E
 3

	)

253 
	#UNKNOWN_IC_VERSION
 0xFF

	)

256 
	smtk_«nd_ho°_hw
 {

257 
nfi_bus_width
;

258 
nfi_ac˚ss_timög
;

259 
nfi_cs_num
;

260 
«nd_£c_size
;

261 
«nd_£c_shi·
;

262 
«nd_ecc_size
;

263 
«nd_ecc_byãs
;

264 
«nd_ecc_mode
;

266 
mtk_«nd_ho°_hw
 
mt7621_«nd_hw
;

267 
CFG_BLOCKSIZE
;

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/nand/mtk_nand.c

1 
	~"«nd_def.h
"

2 #i‡
deföed
(
__KERNEL_NAND__
)

3 
	~<löux/¶ab.h
>

4 
	~<löux/öô.h
>

5 
	~<löux/moduÀ.h
>

6 
	~<löux/dñay.h
>

7 
	~<löux/î∫o.h
>

8 
	~<löux/sched.h
>

9 
	~<löux/ty≥s.h
>

10 
	~<löux/waô.h
>

11 
	~<löux/•ölock.h
>

12 
	~<löux/öãºu±.h
>

13 
	~<löux/mtd/mtd.h
>

14 
	~<löux/mtd/«nd.h
>

15 
	~<löux/mtd/∑πôi⁄s.h
>

16 
	~<löux/mtd/«nd_ecc.h
>

17 
	~<löux/dma-m≠pög.h
>

18 
	~<löux/jiffõs.h
>

19 
	~<löux/∂©f‹m_devi˚.h
>

20 
	~<löux/¥oc_fs.h
>

21 
	~<löux/time.h
>

22 
	~<löux/mm.h
>

23 
	~<asm/io.h
>

24 
	~<asm/ˇcheÊush.h
>

25 
	~<asm/uac˚ss.h
>

26 
	~<löux/miscdevi˚.h
>

27 
	~<asm/mach-ølök/π_mm≠.h
>

28 
	~<asm/mach-ølök/surfbﬂrdöt.h
>

31 
	~"mtk_«nd.h
"

32 
	~"«nd_devi˚_li°.h
"

35 
	~<mach/dma.h
>

36 
	~<mach/mt_devs.h
>

37 
	~<mach/mt_ªg_ba£.h
>

38 
	~<mach/mt_ty≥defs.h
>

39 
	~<mach/mt_˛ock_m™agî.h
>

40 
	~<mach/mtk_«nd.h
>

41 
	~<mach/bmt.h
>

42 
	~<mach/mt_úq.h
>

44 #ñi‡
deföed
(
__UBOOT_NAND__
)

45 
	~<löux/î∫o.h
>

46 
	~<löux/mtd/mtd.h
>

47 
	~<löux/mtd/«nd.h
>

48 
	~<π_mm≠.h
>

49 
	~"mtk_«nd.h
"

50 
	~"mt6575_ty≥defs.h
"

51 
	~"«nd_devi˚_li°.h
"

52 #ñi‡
deföed
(
__BOOT_NAND__
)

53 
	~<asm/sy°em.h
>

54 
	~<asm/bô›s.h
>

55 
	~<löux/bô›s.h
>

56 
	~<löux/î∫o.h
>

57 
	~<löux/mtd/mtd.h
>

58 
	~<löux/mtd/«nd.h
>

59 
	~<π_mm≠.h
>

60 
	~"mtk_«nd.h
"

61 
	~"mt6575_ty≥defs.h
"

62 
	~"«nd_devi˚_li°.h
"

63 
	~<image.h
>

68 
	~"bmt.h
"

69 #i‡
deföed
(
__KERNEL_NAND__
)

70 
	~"∑πôi⁄.h
"

74 #ifde‡
PMT


75 
	~"∑πôi⁄_deföe.h
"

81 #i‡
deföed
(
__UBOOT_NAND__
)

82 
	~<comm⁄.h
>

83 
	~<comm™d.h
>

84 
«nd_buf„rs
 
	gchù_buf„rs
;

85 
	gCFG_BLOCKSIZE
;

92 
show_°ack
(
èsk_°ru˘
 *
tsk
, *
•
);

93 
mt_úq_£t_£ns
(
úq
, 
£ns
);

94 
mt_úq_£t_pﬁ¨ôy
(
úq
,
pﬁ¨ôy
);

96 
mtk_«nd_ho°
 
	gmtk_«nd_ho°
;

97 
mtk_«nd_ho°_hw
 
	gmt7621_«nd_hw
 = {

98 .
nfi_bus_width
 = 8,

99 .
	gnfi_ac˚ss_timög
 = 
NFI_DEFAULT_ACCESS_TIMING
,

100 .
	gnfi_cs_num
 = 
NFI_CS_NUM
,

101 .
	g«nd_£c_size
 = 512,

102 .
	g«nd_£c_shi·
 = 9,

103 .
	g«nd_ecc_size
 = 2048,

104 .
	g«nd_ecc_byãs
 = 32,

105 #i‡
deföed
 (
ECC_ENABLE
)

106 .
	g«nd_ecc_mode
 = 
NAND_ECC_HW


108 .
«nd_ecc_mode
 = 
NAND_ECC_NONE


113 #i‚de‡
NAND_OTP_SUPPORT


114 
	#NAND_OTP_SUPPORT
 0

	)

117 #i‡
NAND_OTP_SUPPORT


119 
	#SAMSUNG_OTP_SUPPORT
 1

	)

120 
	#OTP_MAGIC_NUM
 0x4E3AF28B

	)

121 
	#SAMSUNG_OTP_PAGE_NUM
 6

	)

123 c⁄° 
	gSamsung_OTP_Page
[
SAMSUNG_OTP_PAGE_NUM
] = { 0x15, 0x16, 0x17, 0x18, 0x19, 0x1b };

125 
mtk_Ÿp_c⁄fig
 
	gg_mtk_Ÿp_fuc
;

126 
•ölock_t
 
	gg_OTPLock
;

128 
	#OTP_MAGIC
 'k'

	)

131 
	#OTP_GET_LENGTH
 
	`_IOW
(
OTP_MAGIC
, 1, )

	)

132 
	#OTP_READ
 
	`_IOW
(
OTP_MAGIC
, 2, )

	)

133 
	#OTP_WRITE
 
	`_IOW
(
OTP_MAGIC
, 3, )

	)

135 
	#FS_OTP_READ
 0

	)

136 
	#FS_OTP_WRITE
 1

	)

139 
	#OTP_SUCCESS
 0

	)

140 
	#OTP_ERROR_OVERSCOPE
 -1

	)

141 
	#OTP_ERROR_TIMEOUT
 -2

	)

142 
	#OTP_ERROR_BUSY
 -3

	)

143 
	#OTP_ERROR_NOMEM
 -4

	)

144 
	#OTP_ERROR_RESET
 -5

	)

146 
	smtk_Ÿp_c⁄fig


148 
u32
(*
OTPRód
Ë(u32 
	mPageAddr
, *
	mBuf„rPå
, *
	mS∑ªPå
);

149 
u32
(*
OTPWrôe
Ë(u32 
	mPageAddr
, *
	mBuf„rPå
, *
	mS∑ªPå
);

150 
u32
(*
OTPQuîyLígth
Ë(u32 * 
	mLígth
);

153 
	sŸp_˘l


155 
	mQLígth
;

156 
	mOff£t
;

157 
	mLígth
;

158 *
	mBuf„rPå
;

159 
	m°©us
;

165 #ifde‡
NAND_PFM


166 
su£c⁄ds_t
 
	gg_PFM_R
 = 0;

167 
su£c⁄ds_t
 
	gg_PFM_W
 = 0;

168 
su£c⁄ds_t
 
	gg_PFM_E
 = 0;

169 
u32
 
	gg_PFM_RNum
 = 0;

170 
u32
 
	gg_PFM_RD
 = 0;

171 
u32
 
	gg_PFM_WD
 = 0;

172 
timevÆ
 
	gg_now
;

174 
	#PFM_BEGIN
(
time
) \

175 
	`do_gëtimeofday
(&
g_now
); \

176 (
time
Ë
g_now
;

	)

178 
	#PFM_END_R
(
time
, 
n
) \

179 
	`do_gëtimeofday
(&
g_now
); \

180 
g_PFM_R
 +(
g_now
.
tv_£c
 * 1000000 + g_now.
tv_u£c
Ë- (
time
.tv_sec * 1000000 +Åime.tv_usec); \

181 
g_PFM_RNum
 += 1; \

182 
g_PFM_RD
 +
n
; \

183 
	`MSG
(
PERFORMANCE
, "%†- Ród PFM: %lu, d©a: %d, RódOOB: %d (%d, %d)\n", 
MODULE_NAME
 , 
g_PFM_R
, 
g_PFM_RD
, 
g_kCMD
.
puªRódOOB
, g_kCMD.
puªRódOOBNum
, 
g_PFM_RNum
);

	)

185 
	#PFM_END_W
(
time
, 
n
) \

186 
	`do_gëtimeofday
(&
g_now
); \

187 
g_PFM_W
 +(
g_now
.
tv_£c
 * 1000000 + g_now.
tv_u£c
Ë- (
time
.tv_sec * 1000000 +Åime.tv_usec); \

188 
g_PFM_WD
 +
n
; \

189 
	`MSG
(
PERFORMANCE
, "%†- WrôêPFM: %lu, d©a: %d\n", 
MODULE_NAME
, 
g_PFM_W
, 
g_PFM_WD
);

	)

191 
	#PFM_END_E
(
time
) \

192 
	`do_gëtimeofday
(&
g_now
); \

193 
g_PFM_E
 +(
g_now
.
tv_£c
 * 1000000 + g_now.
tv_u£c
Ë- (
time
.tv_sec * 1000000 +Åime.tv_usec); \

194 
	`MSG
(
PERFORMANCE
, "%†- Eø£ PFM: %lu\n", 
MODULE_NAME
, 
g_PFM_E
);

	)

196 
	#PFM_BEGIN
(
time
)

	)

197 
	#PFM_END_R
(
time
, 
n
)

	)

198 
	#PFM_END_W
(
time
, 
n
)

	)

199 
	#PFM_END_E
(
time
)

	)

204 
	#NFI_ISSUE_COMMAND
(
cmd
, 
cﬁ_addr
, 
row_addr
, 
cﬁ_num
, 
row_num
) \

206 
	`DRV_WrôeReg
(
NFI_CMD_REG16
,
cmd
);\

207 
	`DRV_Reg32
(
NFI_STA_REG32
Ë& 
STA_CMD_STATE
);\

208 
	`DRV_WrôeReg32
(
NFI_COLADDR_REG32
, 
cﬁ_addr
);\

209 
	`DRV_WrôeReg32
(
NFI_ROWADDR_REG32
, 
row_addr
);\

210 
	`DRV_WrôeReg
(
NFI_ADDRNOB_REG16
, 
cﬁ_num
 | (
row_num
<<
ADDR_ROW_NOB_SHIFT
));\

211 
	`DRV_Reg32
(
NFI_STA_REG32
Ë& 
STA_ADDR_STATE
);\

212 }0);

	)

215 #i‡
deföed
 (
__INTERNAL_USE_AHB_MODE__
)

216 
com∂ëi⁄
 
	gg_comp_AHB_D⁄e
;

218 
NAND_CMD
 
	gg_kCMD
;

219 
u32
 
	gg_u4ChùVî
;

220 
boﬁ
 
	gg_bInôD⁄e
;

221 
	gg_i4I¡îru±
;

222 
boﬁ
 
	gg_bcmd°©us
;

223 
u32
 
	gg_vÆue
 = 0;

224 
	gg_∑ge_size
;

226 #i‡
ECC_ENABLE


227 
BOOL
 
	gg_bHwEcc
 = 
åue
;

229 
BOOL
 
	gg_bHwEcc
 = 
Ál£
;

233 
u8
 *
	gloˇl_buf„r_16_Æign
;

234 
u8
 
	gloˇl_buf„r
[4096 + 512];

236 
«nd_ªÀa£_devi˚
(
mtd_öfo
 *
mtd
);

237 
«nd_gë_devi˚
(
«nd_chù
 *
chù
, 
mtd_öfo
 *
mtd
, 
√w_°©e
);

239 
bmt_°ru˘
 *
	gg_bmt
;

240 
mtk_«nd_ho°
 *
	gho°
;

241 
u8
 
	gg_ru¬ög_dma
 = 0;

242 #ifde‡
DUMP_NATIVE_BACKTRACE


243 
u32
 
	gg_dump_cou¡
 = 0;

245 #i‡
deföed
 (
__KERNEL_NAND__
)

246 
mtd_∑πôi⁄
 
g_∑sSètic_P¨tôi⁄
[];

247 
	g∑π_num
 = 
NUM_PARTITIONS
;

249 #ifde‡
PMT


250 
∑π_öô_pmt
(
mtd_öfo
 *
mtd
, 
u8
 * 
buf
);

251 
mtd_∑πôi⁄
 
g_exi°_P¨tôi⁄
[];

253 
	gm™u_id
;

254 
	gdev_id
;

256 
u8
 
	gloˇl_oob_buf
[
NAND_MAX_OOBSIZE
];

258 #ifde‡
_MTK_NAND_DUMMY_DRIVER_


259 
	gdummy_drivî_debug
;

262 
u32
 
	g«nd_ecc_bô
 = 4;

263 
u8
 
	g«nd_ecc_off£t
 = 8;

264 
u8
 
	g«nd_badblock_off£t
 = 0;

266 #i‡
deföed
(
__BOOT_NAND__
)||deföed(
__UBOOT_NAND__
)

267 
	#mö
(
X
, 
Y
) \

268 ({ 
	`ty≥of
 (
X
Ë
__x
 = (X), 
__y
 = (
Y
); \

269 (
__x
 < 
__y
Ë? __x : __y; })

	)

271 
u32
 
	$__swab32__
(
u32
 
x
)

273 
u32
 
__x
;

274 
__x
 = ((
u32
)(\

275 (((
u32
)(
x
) & (u32)0x000000ffUL) << 24) | \

276 (((
u32
)(
x
) & (u32)0x0000ff00UL) << 8) | \

277 (((
u32
)(
x
) & (u32)0x00ff0000UL) >> 8) | \

278 (((
u32
)(
x
) & (u32)0xff000000UL) >> 24) ));

279  
__x
;

280 
	}
}

281 
	$NFI_SET_REG32
(
u32
 
ªg
, u32 
vÆue
)

283 
u32
 
g_vÆue
 = (
	`DRV_Reg32
(
ªg
Ë| (
vÆue
));

284 
	`DRV_WrôeReg32
(
ªg
, 
g_vÆue
);

285 
	}
}

287 
	$NFI_SET_REG16
(
u32
 
ªg
, 
u16
 
vÆue
)

289 
u16
 
g_vÆue
 = (
	`DRV_Reg16
(
ªg
Ë| (
vÆue
));

290 
	`DRV_WrôeReg16
(
ªg
, 
g_vÆue
);

291 
	}
}

293 
	$NFI_CLN_REG32
(
u32
 
ªg
, u32 
vÆue
)

295 
u32
 
g_vÆue
 = (
	`DRV_Reg32
(
ªg
Ë& (~(
vÆue
)));

296 
	`DRV_WrôeReg32
(
ªg
, 
g_vÆue
);

297 
	}
}

299 
	$NFI_CLN_REG16
(
u32
 
ªg
, 
u16
 
vÆue
)

301 
u16
 
g_vÆue
 = (
	`DRV_Reg16
(
ªg
Ë& (~(
vÆue
)));

302 
	`DRV_WrôeReg16
(
ªg
, 
g_vÆue
);

303 
	}
}

306 
	$«nd_íabÀ_˛ock
()

309 
	}
}

311 
	$«nd_dißbÀ_˛ock
()

314 
	}
}

316 
«nd_ec˛ayout
 
	g«nd_oob_16
 = {

317 .
eccbyãs
 = 8,

318 .
	gec˝os
 = {8, 9, 10, 11, 12, 13, 14, 15},

319 .
	goob‰ì
 = {{1, 6}, {0, 0}}

322 
«nd_ec˛ayout
 
	g«nd_oob_64
 = {

323 .
eccbyãs
 = 32,

324 .
	gec˝os
 = {32, 33, 34, 35, 36, 37, 38, 39,

328 .
	goob‰ì
 = {{1, 7}, {9, 7}, {17, 7}, {25, 6}, {0, 0}}

331 
«nd_ec˛ayout
 
	g«nd_oob_128
 = {

332 .
eccbyãs
 = 64,

333 .
	gec˝os
 = {

342 .
	goob‰ì
 = {{1, 7}, {9, 7}, {17, 7}, {25, 7}, {33, 7}, {41, 7}, {49, 7}, {57, 6}}

345 
Êashdev_öfo
 
	gdevöfo
;

347 
	$dump_nfi
()

349 #i‡
__DEBUG_NAND


350 
	`¥ötk
("\n==========================NFI DUMP==================================\n");

351 
	`¥ötk
(
KERN_INFO
 "NFI_ACCCON(%08X): 0x%x\n", 
NFI_ACCCON_REG32
, 
	`DRV_Reg32
(NFI_ACCCON_REG32));

352 
	`¥ötk
(
KERN_INFO
 "NFI_PAGEFMT(%08X): 0x%x\n", 
NFI_PAGEFMT_REG16
, 
	`DRV_Reg16
(NFI_PAGEFMT_REG16));

353 
	`¥ötk
(
KERN_INFO
 "NFI_CNFG(%08X): 0x%x\n", 
NFI_CNFG_REG16
, 
	`DRV_Reg16
(NFI_CNFG_REG16));

354 
	`¥ötk
(
KERN_INFO
 "NFI_CON(%08X): 0x%x\n", 
NFI_CON_REG16
, 
	`DRV_Reg16
(NFI_CON_REG16));

355 
	`¥ötk
(
KERN_INFO
 "NFI_STRDATA(%08X): 0x%x\n", 
NFI_STRDATA_REG16
, 
	`DRV_Reg16
(NFI_STRDATA_REG16));

356 
	`¥ötk
(
KERN_INFO
 "NFI_ADDRCNTR(%08X): 0x%x\n", 
NFI_ADDRCNTR_REG16
, 
	`DRV_Reg16
(NFI_ADDRCNTR_REG16));

357 
	`¥ötk
(
KERN_INFO
 "NFI_FIFOSTA(%08X): 0x%x\n", 
NFI_FIFOSTA_REG16
, 
	`DRV_Reg16
(NFI_FIFOSTA_REG16));

358 
	`¥ötk
(
KERN_INFO
 "NFI_INTR_EN(%08X): 0x%x\n", 
NFI_INTR_EN_REG16
, 
	`DRV_Reg16
(NFI_INTR_EN_REG16));

360 
	`¥ötk
(
KERN_INFO
 "NFI_CMD(%08X): 0x%x\n", 
NFI_CMD_REG16
, 
	`DRV_Reg16
(NFI_CMD_REG16));

361 
	`¥ötk
(
KERN_INFO
 "NFI_ADDRNOB(%08X): 0x%x\n", 
NFI_ADDRNOB_REG16
, 
	`DRV_Reg16
(NFI_ADDRNOB_REG16));

362 
	`¥ötk
(
KERN_INFO
 "NFI_FDM_0L(%08X): 0x%x\n", 
NFI_FDM0L_REG32
, 
	`DRV_Reg32
(NFI_FDM0L_REG32));

363 
	`¥ötk
(
KERN_INFO
 "NFI_STA(%08X): 0x%x\n", 
NFI_STA_REG32
, 
	`DRV_Reg32
(NFI_STA_REG32));

364 
	`¥ötk
(
KERN_INFO
 "NFI_FDM_0M(%08X): 0x%x\n", 
NFI_FDM0M_REG32
, 
	`DRV_Reg32
(NFI_FDM0M_REG32));

365 
	`¥ötk
(
KERN_INFO
 "NFI_IOCON(%08X): 0x%x\n", 
NFI_IOCON_REG16
, 
	`DRV_Reg16
(NFI_IOCON_REG16));

366 
	`¥ötk
(
KERN_INFO
 "NFI_BYTELEN(%08X): 0x%x\n", 
NFI_BYTELEN_REG16
, 
	`DRV_Reg16
(NFI_BYTELEN_REG16));

367 
	`¥ötk
(
KERN_INFO
 "NFI_COLADDR(%08X): 0x%x\n", 
NFI_COLADDR_REG32
, 
	`DRV_Reg32
(NFI_COLADDR_REG32));

368 
	`¥ötk
(
KERN_INFO
 "NFI_ROWADDR(%08X): 0x%x\n", 
NFI_ROWADDR_REG32
, 
	`DRV_Reg32
(NFI_ROWADDR_REG32));

369 
	`¥ötk
(
KERN_INFO
 "ECC_ENCCNFG(%08X): 0x%x\n", 
ECC_ENCCNFG_REG32
, 
	`DRV_Reg32
(ECC_ENCCNFG_REG32));

370 
	`¥ötk
(
KERN_INFO
 "ECC_ENCCON(%08X): 0x%x\n", 
ECC_ENCCON_REG16
, 
	`DRV_Reg16
(ECC_ENCCON_REG16));

371 
	`¥ötk
(
KERN_INFO
 "ECC_DECCNFG(%08X): 0x%x\n", 
ECC_DECCNFG_REG32
, 
	`DRV_Reg32
(ECC_DECCNFG_REG32));

372 
	`¥ötk
(
KERN_INFO
 "ECC_DECCON(%08X): 0x%x\n", 
ECC_DECCON_REG16
, 
	`DRV_Reg16
(ECC_DECCON_REG16));

373 
	`¥ötk
(
KERN_INFO
 "NFI_CSEL(%08X): 0x%x\n", 
NFI_CSEL_REG16
, 
	`DRV_Reg16
(NFI_CSEL_REG16));

376 
	`¥ötk
("==========================================================================\n");

378 
	}
}

380 
	$dump_ecc
()

382 #i‡
__DEBUG_NAND


383 
	`¥ötk
("\n==========================NFIECC DUMP==================================\n");

384 
	`¥ötk
(
KERN_INFO
 "ECC_ENCCON_REG16(%08X): 0x%x\n", 
ECC_ENCCON_REG16
, 
	`DRV_Reg16
(ECC_ENCCON_REG16));

385 
	`¥ötk
(
KERN_INFO
 "ECC_ENCCNFG_REG32(%08X): 0x%x\n", 
ECC_ENCCNFG_REG32
, 
	`DRV_Reg32
(ECC_ENCCNFG_REG32));

386 
	`¥ötk
(
KERN_INFO
 "ECC_ENCDIADDR_REG32(%08X): 0x%x\n", 
ECC_ENCDIADDR_REG32
, 
	`DRV_Reg32
(ECC_ENCDIADDR_REG32));

387 
	`¥ötk
(
KERN_INFO
 "ECC_ENCIDLE_REG16(%08X): 0x%x\n", 
ECC_ENCIDLE_REG16
, 
	`DRV_Reg16
(ECC_ENCIDLE_REG16));

388 
	`¥ötk
(
KERN_INFO
 "ECC_ENCPAR0_REG32(%08X): 0x%x\n", 
ECC_ENCPAR0_REG32
, 
	`DRV_Reg32
(ECC_ENCPAR0_REG32));

389 
	`¥ötk
(
KERN_INFO
 "ECC_ENCPAR1_REG32(%08X): 0x%x\n", 
ECC_ENCPAR1_REG32
, 
	`DRV_Reg32
(ECC_ENCPAR1_REG32));

390 
	`¥ötk
(
KERN_INFO
 "ECC_ENCPAR2_REG32(%08X): 0x%x\n", 
ECC_ENCPAR2_REG32
, 
	`DRV_Reg32
(ECC_ENCPAR2_REG32));

391 
	`¥ötk
(
KERN_INFO
 "ECC_ENCPAR3_REG32(%08X): 0x%x\n", 
ECC_ENCPAR3_REG32
, 
	`DRV_Reg32
(ECC_ENCPAR3_REG32));

392 
	`¥ötk
(
KERN_INFO
 "ECC_ENCPAR4_REG32(%08X): 0x%x\n", 
ECC_ENCPAR4_REG32
, 
	`DRV_Reg32
(ECC_ENCPAR4_REG32));

393 
	`¥ötk
(
KERN_INFO
 "ECC_ENCSTA_REG32(%08X): 0x%x\n", 
ECC_ENCSTA_REG32
, 
	`DRV_Reg32
(ECC_ENCSTA_REG32));

394 
	`¥ötk
(
KERN_INFO
 "ECC_ENCIRQEN_REG16(%08X): 0x%x\n", 
ECC_ENCIRQEN_REG16
, 
	`DRV_Reg16
(ECC_ENCIRQEN_REG16));

395 
	`¥ötk
(
KERN_INFO
 "ECC_ENCIRQSTA_REG16(%08X): 0x%x\n", 
ECC_ENCIRQSTA_REG16
, 
	`DRV_Reg16
(ECC_ENCIRQSTA_REG16));

396 
	`¥ötk
(
KERN_INFO
 "ECC_DECCON_REG16(%08X): 0x%x\n", 
ECC_DECCON_REG16
, 
	`DRV_Reg16
(ECC_DECCON_REG16));

397 
	`¥ötk
(
KERN_INFO
 "ECC_DECCNFG_REG32(%08X): 0x%x\n", 
ECC_DECCNFG_REG32
, 
	`DRV_Reg32
(ECC_DECCNFG_REG32));

398 
	`¥ötk
(
KERN_INFO
 "ECC_DECDIADDR_REG32(%08X): 0x%x\n", 
ECC_DECDIADDR_REG32
, 
	`DRV_Reg32
(ECC_DECDIADDR_REG32));

399 
	`¥ötk
(
KERN_INFO
 "ECC_DECIDLE_REG16(%08X): 0x%x\n", 
ECC_DECIDLE_REG16
, 
	`DRV_Reg16
(ECC_DECIDLE_REG16));

400 
	`¥ötk
(
KERN_INFO
 "ECC_DECFER_REG16(%08X): 0x%x\n", 
ECC_DECFER_REG16
, 
	`DRV_Reg16
(ECC_DECFER_REG16));

401 
	`¥ötk
(
KERN_INFO
 "ECC_DECENUM_REG32(%08X): 0x%x\n", 
ECC_DECENUM_REG32
, 
	`DRV_Reg32
(ECC_DECENUM_REG32));

402 
	`¥ötk
(
KERN_INFO
 "ECC_DECDONE_REG16(%08X): 0x%x\n", 
ECC_DECDONE_REG16
, 
	`DRV_Reg16
(ECC_DECDONE_REG16));

403 
	`¥ötk
(
KERN_INFO
 "ECC_DECEL0_REG32(%08X): 0x%x\n", 
ECC_DECEL0_REG32
, 
	`DRV_Reg32
(ECC_DECEL0_REG32));

404 
	`¥ötk
(
KERN_INFO
 "ECC_DECEL1_REG32(%08X): 0x%x\n", 
ECC_DECEL1_REG32
, 
	`DRV_Reg32
(ECC_DECEL1_REG32));

405 
	`¥ötk
(
KERN_INFO
 "ECC_DECEL2_REG32(%08X): 0x%x\n", 
ECC_DECEL2_REG32
, 
	`DRV_Reg32
(ECC_DECEL2_REG32));

406 
	`¥ötk
(
KERN_INFO
 "ECC_DECEL3_REG32(%08X): 0x%x\n", 
ECC_DECEL3_REG32
, 
	`DRV_Reg32
(ECC_DECEL3_REG32));

407 
	`¥ötk
(
KERN_INFO
 "ECC_DECEL4_REG32(%08X): 0x%x\n", 
ECC_DECEL2_REG32
, 
	`DRV_Reg32
(
ECC_DECEL4_REG32
));

408 
	`¥ötk
(
KERN_INFO
 "ECC_DECEL5_REG32(%08X): 0x%x\n", 
ECC_DECEL3_REG32
, 
	`DRV_Reg32
(
ECC_DECEL5_REG32
));

409 
	`¥ötk
(
KERN_INFO
 "ECC_DECIRQEN_REG16(%08X): 0x%x\n", 
ECC_DECIRQEN_REG16
, 
	`DRV_Reg16
(ECC_DECIRQEN_REG16));

410 
	`¥ötk
(
KERN_INFO
 "ECC_DECIRQSTA_REG16(%08X): 0x%x\n", 
ECC_DECIRQSTA_REG16
, 
	`DRV_Reg16
(ECC_DECIRQSTA_REG16));

411 
	`¥ötk
(
KERN_INFO
 "ECC_FDMADDR_REG32(%08X): 0x%x\n", 
ECC_FDMADDR_REG32
, 
	`DRV_Reg32
(ECC_FDMADDR_REG32));

412 
	`¥ötk
(
KERN_INFO
 "ECC_DECFSM_REG32(%08X): 0x%x\n", 
ECC_DECFSM_REG32
, 
	`DRV_Reg32
(ECC_DECFSM_REG32));

413 
	`¥ötk
(
KERN_INFO
 "ECC_SYNSTA_REG32(%08X): 0x%x\n", 
ECC_SYNSTA_REG32
, 
	`DRV_Reg32
(ECC_SYNSTA_REG32));

414 
	`¥ötk
(
KERN_INFO
 "ECC_DECNFIDI_REG32(%08X): 0x%x\n", 
ECC_DECNFIDI_REG32
, 
	`DRV_Reg32
(ECC_DECNFIDI_REG32));

415 
	`¥ötk
(
KERN_INFO
 "ECC_SYN0_REG32(%08X): 0x%x\n", 
ECC_SYN0_REG32
, 
	`DRV_Reg32
(ECC_SYN0_REG32));

419 
	`¥ötk
("==========================================================================\n");

421 
	}
}

423 
u8
 
	$NFI_DMA_°©us
()

425  
g_ru¬ög_dma
;

426 
	}
}

428 
u32
 
	$NFI_DMA_addªss
()

430  
	`DRV_Reg32
(
NFI_STRADDR_REG32
);

431 
	}
}

433 
EXPORT_SYMBOL
(
NFI_DMA_°©us
);

434 
EXPORT_SYMBOL
(
NFI_DMA_addªss
);

437 #i‡
deföed
 (
__KERNEL_NAND__
)

438 
u32
 
	$«nd_vút_to_phys_add
(
u32
 
va
)

440 
u32
 
∑geOff£t
 = (
va
 & (
PAGE_SIZE
 - 1));

441 
pgd_t
 *
pgd
;

442 
pmd_t
 *
pmd
;

443 
±e_t
 *
±e
;

444 
u32
 
∑
;

446 i‡(
	`vút_addr_vÆid
(
va
))

448  
	`__vút_to_phys
(
va
);

451 i‡(
NULL
 =
cuºít
)

453 
	`¥ötk
(
KERN_ERR
 "[nand_virt_to_phys_add] ERROR ,current is NULL! \n");

457 i‡(
NULL
 =
cuºít
->
mm
)

459 
	`¥ötk
(
KERN_ERR
 "[«nd_vút_to_phys_add] ERROR cuºít->mm i†NULL!Ågid=0x%x,Çame=%†\n", 
cuºít
->
tgid
, cuºít->
comm
);

463 
pgd
 = 
	`pgd_off£t
(
cuºít
->
mm
, 
va
);

464 i‡(
	`pgd_n⁄e
(*
pgd
Ë|| 
	`pgd_bad
(*pgd))

466 
	`¥ötk
(
KERN_ERR
 "[«nd_vút_to_phys_add] ERROR, va=0x%x,Ögd invÆid! \n", 
va
);

470 
pmd
 = 
	`pmd_off£t
((
pud_t
 *)
pgd
, 
va
);

471 i‡(
	`pmd_n⁄e
(*
pmd
Ë|| 
	`pmd_bad
(*pmd))

473 
	`¥ötk
(
KERN_ERR
 "[«nd_vút_to_phys_add] ERROR, va=0x%x,Ömd invÆid! \n", 
va
);

477 
±e
 = 
	`±e_off£t_m≠
(
pmd
, 
va
);

478 i‡(
	`±e_¥e£¡
(*
±e
))

480 
∑
 = (
	`±e_vÆ
(*
±e
Ë& (
PAGE_MASK
)Ë| 
∑geOff£t
;

481  
∑
;

484 
	`¥ötk
(
KERN_ERR
 "[«nd_vút_to_phys_add] ERROR va=0x%x,Öã invÆid! \n", 
va
);

486 
	}
}

488 
EXPORT_SYMBOL
(
«nd_vút_to_phys_add
);

490 
u32
 
	$«nd_vút_to_phys_add
(
u32
 
va
)

492  ((
u32
)
va
&0x7fffffff);

493 
	}
}

496 
boﬁ
 
	$gë_devi˚_öfo
(
u16
 
id
, 
u32
 
ext_id
, 
Êashdev_öfo
 * 
pdevöfo
)

498 
u32
 
ödex
;

499 
ödex
 = 0; 
gí_FœshTabÀ
[ödex].
id
 != 0; index++)

501 i‡(
id
 =
gí_FœshTabÀ
[
ödex
].id && 
ext_id
 == gen_FlashTable[index].ext_id)

503 
pdevöfo
->
id
 = 
gí_FœshTabÀ
[
ödex
].id;

504 
pdevöfo
->
ext_id
 = 
gí_FœshTabÀ
[
ödex
].ext_id;

505 
pdevöfo
->
blocksize
 = 
gí_FœshTabÀ
[
ödex
].blocksize;

506 
pdevöfo
->
addr_cy˛e
 = 
gí_FœshTabÀ
[
ödex
].addr_cycle;

507 
pdevöfo
->
iowidth
 = 
gí_FœshTabÀ
[
ödex
].iowidth;

508 
pdevöfo
->
timmög£âög
 = 
gí_FœshTabÀ
[
ödex
].timmingsetting;

509 
pdevöfo
->
adv™˚dmode
 = 
gí_FœshTabÀ
[
ödex
].advancedmode;

510 
pdevöfo
->
∑gesize
 = 
gí_FœshTabÀ
[
ödex
].pagesize;

511 
pdevöfo
->
•¨esize
 = 
gí_FœshTabÀ
[
ödex
].sparesize;

512 
pdevöfo
->
tŸÆsize
 = 
gí_FœshTabÀ
[
ödex
].totalsize;

513 
	`mem˝y
(
pdevöfo
->
devcõ«me
, 
gí_FœshTabÀ
[
ödex
].devciename, (pdevinfo->devciename));

514 
	`¥ötk
(
KERN_INFO
 "Devi˚ found i¿MTKÅabÀ, ID: %x, EXT_ID: %x\n", 
id
, 
ext_id
);

516 
föd
;

520 
föd
:

521 i‡(0 =
pdevöfo
->
id
)

523 
	`¥ötk
(
KERN_INFO
 "Devi˚ÇŸ found, ID: %x\n", 
id
);

524  
Ál£
;

527  
åue
;

529 
	}
}

531 #ifde‡
DUMP_NATIVE_BACKTRACE


532 
	#NFI_NATIVE_LOG_SD
 "/sdˇrd/NFI_«tive_log_%s-%02d-%02d-%02d_%02d-%02d-%02d.log"

	)

533 
	#NFI_NATIVE_LOG_DATA
 "/d©a/NFI_«tive_log_%s-%02d-%02d-%02d_%02d-%02d-%02d.log"

	)

534 
	$nfi_Êush_log
(*
s
)

536 
mm_£gmít_t
 
ﬁd_fs
;

537 
πc_time
 
tm
;

538 
timevÆ
 
tv
 = { 0 };

539 
fûe
 *
fûp
 = 
NULL
;

540 
«me
[256];

541 
ª
 = 0;

542 
d©a_wrôe
 = 0;

544 
	`do_gëtimeofday
(&
tv
);

545 
	`πc_time_to_tm
(
tv
.
tv_£c
, &
tm
);

546 
	`mem£t
(
«me
, 0, (name));

547 
	`•rötf
(
«me
, 
NFI_NATIVE_LOG_DATA
, 
s
, 
tm
.
tm_yór
 + 1900,Åm.
tm_m⁄
 + 1,Åm.
tm_mday
,Åm.
tm_hour
,Åm.
tm_mö
,Åm.
tm_£c
);

549 
ﬁd_fs
 = 
	`gë_fs
();

550 
	`£t_fs
(
KERNEL_DS
);

551 
fûp
 = 
	`fûp_›í
(
«me
, 
O_WRONLY
 | 
O_CREAT
, 0777);

552 i‡(
	`IS_ERR
(
fûp
))

554 
	`¥ötk
("[NFI_Êush_log]îr‹ cª©êfûêö %s, IS_ERR:%ld, PTR_ERR:%ld\n", 
«me
, 
	`IS_ERR
(
fûp
), 
	`PTR_ERR
(filp));

555 
	`mem£t
(
«me
, 0, (name));

556 
	`•rötf
(
«me
, 
NFI_NATIVE_LOG_SD
, 
s
, 
tm
.
tm_yór
 + 1900,Åm.
tm_m⁄
 + 1,Åm.
tm_mday
,Åm.
tm_hour
,Åm.
tm_mö
,Åm.
tm_£c
);

557 
fûp
 = 
	`fûp_›í
(
«me
, 
O_WRONLY
 | 
O_CREAT
, 0777);

558 i‡(
	`IS_ERR
(
fûp
))

560 
	`¥ötk
("[NFI_Êush_log]îr‹ cª©êfûêö %s, IS_ERR:%ld, PTR_ERR:%ld\n", 
«me
, 
	`IS_ERR
(
fûp
), 
	`PTR_ERR
(filp));

561 
	`£t_fs
(
ﬁd_fs
);

565 
	`¥ötk
("[NFI_Êush_log]log fûe:%s\n", 
«me
);

566 
	`£t_fs
(
ﬁd_fs
);

568 i‡(!(
fûp
->
f_›
Ë|| !(fûp->f_›->
wrôe
))

570 
	`¥ötk
("[NFI_flush_log] No operation\n");

571 
ª
 = -1;

572 
ClOSE_FILE
;

575 
	`DumpN©iveInfo
();

576 
ﬁd_fs
 = 
	`gë_fs
();

577 
	`£t_fs
(
KERNEL_DS
);

578 
d©a_wrôe
 = 
	`vfs_wrôe
(
fûp
, (
__u£r
 *)
N©iveInfo
, 
	`°æí
(N©iveInfo), &fûp->
f_pos
);

579 i‡(!
d©a_wrôe
)

581 
	`¥ötk
("[nfi_flush_log] write fail\n");

582 
ª
 = -1;

584 
	`£t_fs
(
ﬁd_fs
);

586 
ClOSE_FILE
:

587 i‡(
fûp
)

589 
	`fûp_˛o£
(
fûp
, 
cuºít
->
fûes
);

590 
fûp
 = 
NULL
;

592  
ª
;

593 
	}
}

595 #i‡
deföed
 (
__INTERNAL_USE_AHB_MODE__
Ë&& deföed (
__KERNEL_NAND__
)

614 
úqªtu∫_t
 
	$mtk_«nd_úq_h™dÀr
(
úqno
, *
dev_id
)

616 
u16
 
u16I¡Sètus
 = 
	`DRV_Reg16
(
NFI_INTR_REG16
);

617 ()
úqno
;

619 i‡(
u16I¡Sètus
 & (
u16
Ë
INTR_AHB_DONE_EN
)

621 
	`com∂ëe
(&
g_comp_AHB_D⁄e
);

623  
IRQ_HANDLED
;

624 
	}
}

642 
	$ECC_C⁄fig
(
mtk_«nd_ho°_hw
 *
hw
,
u32
 
ecc_bô
)

644 
u32
 
u4ENCODESize
;

645 
u32
 
u4DECODESize
;

646 
u32
 
ecc_bô_cfg
 = 
ECC_CNFG_ECC4
;

648 
ecc_bô
){

650 
ecc_bô_cfg
 = 
ECC_CNFG_ECC4
;

653 
ecc_bô_cfg
 = 
ECC_CNFG_ECC8
;

656 
ecc_bô_cfg
 = 
ECC_CNFG_ECC10
;

659 
ecc_bô_cfg
 = 
ECC_CNFG_ECC12
;

665 
	`DRV_WrôeReg16
(
ECC_DECCON_REG16
, 
DEC_DE
);

669 !
	`DRV_Reg16
(
ECC_DECIDLE_REG16
));

671 
	`DRV_WrôeReg16
(
ECC_ENCCON_REG16
, 
ENC_DE
);

675 !
	`DRV_Reg16
(
ECC_ENCIDLE_REG16
));

678 
	`DRV_WrôeReg32
(
ECC_FDMADDR_REG32
, 
NFI_FDM0L_REG32
);

681 
u4ENCODESize
 = (
hw
->
«nd_£c_size
 + 8) << 3;

683 
u4DECODESize
 = ((
hw
->
«nd_£c_size
 + 8Ë<< 3Ë+ 
ecc_bô
 * 13;

686 
	`DRV_WrôeReg32
(
ECC_DECCNFG_REG32
, 
ecc_bô_cfg
 | 
DEC_CNFG_NFI
 | 
DEC_CNFG_EMPTY_EN
 | (
u4DECODESize
 << 
DEC_CNFG_CODE_SHIFT
));

688 
	`DRV_WrôeReg32
(
ECC_ENCCNFG_REG32
, 
ecc_bô_cfg
 | 
ENC_CNFG_NFI
 | (
u4ENCODESize
 << 
ENC_CNFG_MSG_SHIFT
));

689 #i‚de‡
MANUAL_CORRECT


690 
	`NFI_SET_REG32
(
ECC_DECCNFG_REG32
, 
DEC_CNFG_CORRECT
);

692 
	`NFI_SET_REG32
(
ECC_DECCNFG_REG32
, 
DEC_CNFG_EL
);

694 
	}
}

712 
	$ECC_Decode_Sèπ
()

715 !(
	`DRV_Reg16
(
ECC_DECIDLE_REG16
Ë& 
DEC_IDLE
)) ;

716 
	`DRV_WrôeReg16
(
ECC_DECCON_REG16
, 
DEC_EN
);

717 
	}
}

735 
	$ECC_Decode_End
()

738 !(
	`DRV_Reg16
(
ECC_DECIDLE_REG16
Ë& 
DEC_IDLE
)) ;

739 
	`DRV_WrôeReg16
(
ECC_DECCON_REG16
, 
DEC_DE
);

740 
	}
}

758 
	$ECC_Encode_Sèπ
()

761 !(
	`DRV_Reg16
(
ECC_ENCIDLE_REG16
Ë& 
ENC_IDLE
)) ;

762 
	`mb
();

763 
	`DRV_WrôeReg16
(
ECC_ENCCON_REG16
, 
ENC_EN
);

764 
	}
}

782 
	$ECC_Encode_End
()

785 !(
	`DRV_Reg16
(
ECC_ENCIDLE_REG16
Ë& 
ENC_IDLE
)) ;

786 
	`mb
();

787 
	`DRV_WrôeReg16
(
ECC_ENCCON_REG16
, 
ENC_DE
);

788 
	}
}

809 
boﬁ
 
	$mtk_«nd_check_bch_îr‹
(
mtd_öfo
 *
mtd
, 
u8
 * 
pD©aBuf
, 
u32
 
u4SecIndex
, u32 
u4PageAddr
)

811 
boﬁ
 
bRë
 = 
åue
;

812 
u16
 
u2Se˘‹D⁄eMask
 = 1 << 
u4SecIndex
;

813 
u32
 
u4Eº‹NumDebug
, 
i
, 
u4EºNum
;

814 
u32
 
timeout
 = 0xFFFF;

815 
u32
 
c‹ª˘_cou¡
 = 0;

817 #ifde‡
MANUAL_CORRECT


818 
u32
 
au4EºBôLoc
[6];

819 
u32
 
u4EºByãLoc
, 
u4BôOff£t
;

820 
u32
 
u4EºBôLoc1th
, 
u4EºBôLoc2nd
;

824 0 =(
u2Se˘‹D⁄eMask
 & 
	`DRV_Reg16
(
ECC_DECDONE_REG16
)))

826 
timeout
--;

827 i‡(0 =
timeout
)

829  
Ál£
;

832 #i‚de‡
MANUAL_CORRECT


833 
u4Eº‹NumDebug
 = 
	`DRV_Reg32
(
ECC_DECENUM_REG32
);

834 i‡(0 !(
u4Eº‹NumDebug
 & 0xFFFF))

836 
i
 = 0; i <
u4SecIndex
; ++i)

838 
u4EºNum
 = 
	`DRV_Reg32
(
ECC_DECENUM_REG32
Ë>> (
i
 << 2);

839 
u4EºNum
 &= 0xF;

840 
c‹ª˘_cou¡
 +
u4EºNum
;

842 i‡(0xF =
u4EºNum
)

844 
mtd
->
ecc_°©s
.
Áûed
++;

845 
bRë
 = 
Ál£
;

846 
	`¥ötk
(
KERN_ERR
 "UnC‹ª˘abÀáàPageAddr=%d, Se˘‹=%d\n", 
u4PageAddr
, 
i
);

849 i‡(
u4EºNum
)

851 
	`¥ötk
(
KERN_ERR
 " I¿kî√»C‹ª˘ %dáàPageAddr=%d, Se˘‹=%d\n", 
u4EºNum
, 
u4PageAddr
, 
i
);

855 i‡((
c‹ª˘_cou¡
 > 2Ë&& 
bRë
)

857 
mtd
->
ecc_°©s
.
c‹ª˘ed
++;

860 
	`¥ötk
(
KERN_INFO
 "LessÅhan 2 bitÉrror, ignore\n");

865 
	`mem£t
(
au4EºBôLoc
, 0x0, (au4ErrBitLoc));

866 
u4Eº‹NumDebug
 = 
	`DRV_Reg32
(
ECC_DECENUM_REG32
);

867 
u4EºNum
 = 
	`DRV_Reg32
(
ECC_DECENUM_REG32
Ë>> (
u4SecIndex
 << 2);

868 
u4EºNum
 &= 0xF;

870 i‡(
u4EºNum
)

872 i‡(0xF =
u4EºNum
)

874 
mtd
->
ecc_°©s
.
Áûed
++;

875 
bRë
 = 
Ál£
;

879 
i
 = 0; i < ((
u4EºNum
 + 1) >> 1); ++i)

881 
au4EºBôLoc
[
i
] = 
	`DRV_Reg32
(
ECC_DECEL0_REG32
 + i);

882 
u4EºBôLoc1th
 = 
au4EºBôLoc
[
i
] & 0x1FFF;

884 i‡(
u4EºBôLoc1th
 < 0x1000)

886 
u4EºByãLoc
 = 
u4EºBôLoc1th
 / 8;

887 
u4BôOff£t
 = 
u4EºBôLoc1th
 % 8;

888 
pD©aBuf
[
u4EºByãLoc
] =ÖD©aBuf[u4EºByãLoc] ^ (1 << 
u4BôOff£t
);

889 
mtd
->
ecc_°©s
.
c‹ª˘ed
++;

892 
mtd
->
ecc_°©s
.
Áûed
++;

895 
u4EºBôLoc2nd
 = (
au4EºBôLoc
[
i
] >> 16) & 0x1FFF;

896 i‡(0 !
u4EºBôLoc2nd
)

898 i‡(
u4EºBôLoc2nd
 < 0x1000)

900 
u4EºByãLoc
 = 
u4EºBôLoc2nd
 / 8;

901 
u4BôOff£t
 = 
u4EºBôLoc2nd
 % 8;

902 
pD©aBuf
[
u4EºByãLoc
] =ÖD©aBuf[u4EºByãLoc] ^ (1 << 
u4BôOff£t
);

903 
mtd
->
ecc_°©s
.
c‹ª˘ed
++;

906 
mtd
->
ecc_°©s
.
Áûed
++;

912 i‡(0 =(
	`DRV_Reg16
(
ECC_DECFER_REG16
Ë& (1 << 
u4SecIndex
)))

914 
bRë
 = 
Ál£
;

918  
bRë
;

919 
	}
}

937 
boﬁ
 
	$mtk_«nd_RFIFOVÆidSize
(
u16
 
u2Size
)

939 
u32
 
timeout
 = 0xFFFF;

940 
	`FIFO_RD_REMAIN
(
	`DRV_Reg16
(
NFI_FIFOSTA_REG16
)Ë< 
u2Size
)

942 
timeout
--;

943 i‡(0 =
timeout
)

945  
Ál£
;

948  
åue
;

949 
	}
}

967 
boﬁ
 
	$mtk_«nd_WFIFOVÆidSize
(
u16
 
u2Size
)

969 
u32
 
timeout
 = 0xFFFF;

970 
	`FIFO_WR_REMAIN
(
	`DRV_Reg16
(
NFI_FIFOSTA_REG16
)Ë> 
u2Size
)

972 
timeout
--;

973 i‡(0 =
timeout
)

975  
Ál£
;

978  
åue
;

979 
	}
}

997 
boﬁ
 
	$mtk_«nd_°©us_ªady
(
u32
 
u4Sètus
)

999 
u32
 
timeout
 = 0xFFFF;

1000 (
	`DRV_Reg32
(
NFI_STA_REG32
Ë& 
u4Sètus
) != 0)

1002 
timeout
--;

1003 i‡(0 =
timeout
)

1005  
Ál£
;

1008  
åue
;

1009 
	}
}

1027 
boﬁ
 
	$mtk_«nd_ª£t
()

1030 
timeout
 = 0xFFFF;

1031 i‡(
	`DRV_Reg16
(
NFI_MASTERSTA_REG16
))

1033 
	`mb
();

1034 
	`DRV_WrôeReg16
(
NFI_CON_REG16
, 
CON_FIFO_FLUSH
 | 
CON_NFI_RST
);

1035 
	`DRV_Reg16
(
NFI_MASTERSTA_REG16
))

1037 
timeout
--;

1038 i‡(!
timeout
)

1040 
	`MSG
(
INIT
, "Wait for NFI_MASTERSTAÅimeout\n");

1045 
	`mb
();

1046 
	`DRV_WrôeReg16
(
NFI_CON_REG16
, 
CON_FIFO_FLUSH
 | 
CON_NFI_RST
);

1048  
	`mtk_«nd_°©us_ªady
(
STA_NFI_FSM_MASK
 | 
STA_NAND_BUSY
Ë&& 
	`mtk_«nd_RFIFOVÆidSize
(0Ë&& 
	`mtk_«nd_WFIFOVÆidSize
(0);

1049 
	}
}

1067 
	$mtk_«nd_£t_mode
(
u16
 
u2OpMode
)

1069 
u16
 
u2Mode
 = 
	`DRV_Reg16
(
NFI_CNFG_REG16
);

1070 
u2Mode
 &~
CNFG_OP_MODE_MASK
;

1071 
u2Mode
 |
u2OpMode
;

1072 
	`DRV_WrôeReg16
(
NFI_CNFG_REG16
, 
u2Mode
);

1073 
	}
}

1091 
	$mtk_«nd_£t_autof‹m©
(
boﬁ
 
bE«bÀ
)

1093 i‡(
bE«bÀ
)

1095 
	`NFI_SET_REG16
(
NFI_CNFG_REG16
, 
CNFG_AUTO_FMT_EN
);

1098 
	`NFI_CLN_REG16
(
NFI_CNFG_REG16
, 
CNFG_AUTO_FMT_EN
);

1100 
	}
}

1118 
	$mtk_«nd_c⁄figuª_fdm
(
u16
 
u2FDMSize
)

1120 
	`NFI_CLN_REG16
(
NFI_PAGEFMT_REG16
, 
PAGEFMT_FDM_MASK
 | 
PAGEFMT_FDM_ECC_MASK
);

1121 
	`NFI_SET_REG16
(
NFI_PAGEFMT_REG16
, 
u2FDMSize
 << 
PAGEFMT_FDM_SHIFT
);

1122 
	`NFI_SET_REG16
(
NFI_PAGEFMT_REG16
, 
u2FDMSize
 << 
PAGEFMT_FDM_ECC_SHIFT
);

1123 
	}
}

1141 
	$mtk_«nd_c⁄figuª_lock
()

1143 
u32
 
u4WrôeCﬁNOB
 = 2;

1144 
u32
 
u4WrôeRowNOB
 = 3;

1145 
u32
 
u4Eø£CﬁNOB
 = 0;

1146 
u32
 
u4Eø£RowNOB
 = 3;

1147 
	`DRV_WrôeReg16
(
NFI_LOCKANOB_REG16
,

1148 (
u4WrôeCﬁNOB
 << 
PROG_CADD_NOB_SHIFT
Ë| (
u4WrôeRowNOB
 << 
PROG_RADD_NOB_SHIFT
Ë| (
u4Eø£CﬁNOB
 << 
ERASE_CADD_NOB_SHIFT
Ë| (
u4Eø£RowNOB
 << 
ERASE_RADD_NOB_SHIFT
));

1150 i‡(
CHIPVER_ECO_1
 =
g_u4ChùVî
)

1152 
i
;

1153 
i
 = 0; i < 16; ++i)

1155 
	`DRV_WrôeReg32
(
NFI_LOCK00ADD_REG32
 + (
i
 << 1), 0xFFFFFFFF);

1156 
	`DRV_WrôeReg32
(
NFI_LOCK00FMT_REG32
 + (
i
 << 1), 0xFFFFFFFF);

1159 
	`DRV_WrôeReg32
(
NFI_LOCKCON_REG32
, 0xFFFFFFFF);

1160 
	`DRV_WrôeReg16
(
NFI_LOCK_REG16
, 
NFI_LOCK_ON
);

1162 
	}
}

1164 
boﬁ
 
	$mtk_«nd_pio_ªady
()

1166 
cou¡
 = 0;

1167 !(
	`DRV_Reg16
(
NFI_PIO_DIRDY_REG16
) & 1))

1169 
cou¡
++;

1170 i‡(
cou¡
 > 0xffff)

1172 
	`¥ötk
("PIO_DIRDYÅimeout\n");

1173  
Ál£
;

1177  
åue
;

1178 
	}
}

1196 
boﬁ
 
	$mtk_«nd_£t_comm™d
(
u16
 
comm™d
)

1199 
	`mb
();

1200 
	`DRV_WrôeReg16
(
NFI_CMD_REG16
, 
comm™d
);

1201  
	`mtk_«nd_°©us_ªady
(
STA_CMD_STATE
);

1202 
	}
}

1220 
boﬁ
 
	$mtk_«nd_£t_addªss
(
u32
 
u4CﬁAddr
, u32 
u4RowAddr
, 
u16
 
u2CﬁNOB
, u16 
u2RowNOB
)

1223 
	`mb
();

1224 
	`DRV_WrôeReg32
(
NFI_COLADDR_REG32
, 
u4CﬁAddr
);

1225 
	`DRV_WrôeReg32
(
NFI_ROWADDR_REG32
, 
u4RowAddr
);

1226 
	`DRV_WrôeReg16
(
NFI_ADDRNOB_REG16
, 
u2CﬁNOB
 | (
u2RowNOB
 << 
ADDR_ROW_NOB_SHIFT
));

1227  
	`mtk_«nd_°©us_ªady
(
STA_ADDR_STATE
);

1228 
	}
}

1246 
boﬁ
 
	$mtk_«nd_check_RW_cou¡
(
u16
 
u2WrôeSize
)

1248 
u32
 
timeout
 = 0xFFFF;

1249 
u16
 
u2SecNum
 = 
u2WrôeSize
 >> 9;

1251 
	`ADDRCNTR_CNTR
(
	`DRV_Reg16
(
NFI_ADDRCNTR_REG16
)Ë< 
u2SecNum
)

1253 
timeout
--;

1254 i‡(0 =
timeout
)

1256 
	`¥ötk
(
KERN_INFO
 "[%s]Åimeout\n", 
__FUNCTION__
);

1257  
Ál£
;

1260  
åue
;

1261 
	}
}

1272 
	$mtk_«nd_waô
(
mtd_öfo
 *
mtd
, 
«nd_chù
 *
chù
)

1274 
timeo
 = 0;

1275 
my_jiffõs
 = 0;

1276 
°©us
, 
°©e
 = 
chù
->state;

1278 i‡(
°©e
 =
FL_ERASING
)

1280 
timeo
 = 400;

1283 
timeo
 = 20;

1288 i‡(
°©e
 =
FL_ERASING
)

1289 
	`udñay
(100);

1291 
	`udñay
(5);

1293 i‡((
°©e
 =
FL_ERASING
Ë&& (
chù
->
›ti⁄s
 & 
NAND_IS_AND
))

1294 
chù
->
	`cmdfunc
(
mtd
, 
NAND_CMD_STATUS_MULTI
, -1, -1);

1296 
chù
->
	`cmdfunc
(
mtd
, 
NAND_CMD_STATUS
, -1, -1);

1298 
	`time_bef‹e
(
jiffõs
, 
timeo
)) {

1299 i‡(
chù
->
dev_ªady
) {

1300 i‡(
chù
->
	`dev_ªady
(
mtd
))

1303 i‡(
chù
->
	`ªad_byã
(
mtd
Ë& 
NAND_STATUS_READY
)

1306 
	`c⁄d_ªsched
();

1308 
	`Àd_åiggî_evít
(
«nd_Àd_åiggî
, 
LED_OFF
);

1311 
my_jiffõs
 <
timeo
)

1313 i‡(
chù
->
dev_ªady
) {

1314 i‡(
chù
->
	`dev_ªady
(
mtd
))

1317 
°©us
 = 
chù
->
	`ªad_byã
(
mtd
);

1318 i‡(
°©us
 & 
NAND_STATUS_READY
)

1321 
	`udñay
(5000);

1322 
my_jiffõs
 += 5;

1324 
°©us
 = 
chù
->
	`ªad_byã
(
mtd
);

1325  
°©us
;

1326 
	}
}

1343 
boﬁ
 
	$mtk_«nd_ªady_f‹_ªad
(
«nd_chù
 *
«nd
, 
u32
 
u4RowAddr
, u32 
u4CﬁAddr
, 
boﬁ
 
fuŒ
, 
u8
 * 
buf
)

1346 
boﬁ
 
bRë
 = 
Ál£
;

1347 
u16
 
£c_num
 = 1 << (
«nd
->
∑ge_shi·
 - 9);

1348 
u32
 
cﬁ_addr
 = 
u4CﬁAddr
;

1349 
u32
 
cﬁnob
 = 2, 
rownob
 = 
devöfo
.
addr_cy˛e
 - 2;

1350 #i‡
	`deföed
 (
__INTERNAL_USE_AHB_MODE__
)

1351 
u32
 
phys
 = 0;

1353 i‡(
«nd
->
›ti⁄s
 & 
NAND_BUSWIDTH_16
)

1354 
cﬁ_addr
 /= 2;

1356 i‡(!
	`mtk_«nd_ª£t
())

1358 
˛ónup
;

1360 i‡(
g_bHwEcc
)

1363 
	`NFI_SET_REG16
(
NFI_CNFG_REG16
, 
CNFG_HW_ECC_EN
);

1366 
	`NFI_CLN_REG16
(
NFI_CNFG_REG16
, 
CNFG_HW_ECC_EN
);

1369 
	`mtk_«nd_£t_mode
(
CNFG_OP_READ
);

1370 
	`NFI_SET_REG16
(
NFI_CNFG_REG16
, 
CNFG_READ_EN
);

1371 
	`DRV_WrôeReg16
(
NFI_CON_REG16
, 
£c_num
 << 
CON_NFI_SEC_SHIFT
);

1373 i‡(
fuŒ
)

1375 #i‡
__INTERNAL_USE_AHB_MODE__


1376 
	`NFI_SET_REG16
(
NFI_CNFG_REG16
, 
CNFG_AHB
);

1377 
phys
 = 
	`«nd_vút_to_phys_add
((
u32
Ë
buf
);

1378 i‡(!
phys
)

1380 
	`¥ötk
(
KERN_ERR
 "[mt6577_«nd_ªady_f‹_ªad]c⁄vîàvúàadd∏(%xËtÿphy†add (%x)Áû!!!", (
u32
Ë
buf
, 
phys
);

1381  
Ál£
;

1384 
	`DRV_WrôeReg32
(
NFI_STRADDR_REG32
, 
phys
);

1387 
	`NFI_CLN_REG16
(
NFI_CNFG_REG16
, 
CNFG_AHB
);

1390 i‡(
g_bHwEcc
)

1392 
	`NFI_SET_REG16
(
NFI_CNFG_REG16
, 
CNFG_HW_ECC_EN
);

1395 
	`NFI_CLN_REG16
(
NFI_CNFG_REG16
, 
CNFG_HW_ECC_EN
);

1400 
	`NFI_CLN_REG16
(
NFI_CNFG_REG16
, 
CNFG_HW_ECC_EN
);

1401 
	`NFI_CLN_REG16
(
NFI_CNFG_REG16
, 
CNFG_AHB
);

1404 
	`mtk_«nd_£t_autof‹m©
(
fuŒ
);

1405 i‡(
fuŒ
)

1407 i‡(
g_bHwEcc
)

1409 
	`ECC_Decode_Sèπ
();

1412 i‡(!
	`mtk_«nd_£t_comm™d
(
NAND_CMD_READ0
))

1414 
˛ónup
;

1416 i‡(!
	`mtk_«nd_£t_addªss
(
cﬁ_addr
, 
u4RowAddr
, 
cﬁnob
, 
rownob
))

1418 
˛ónup
;

1421 i‡(!
	`mtk_«nd_£t_comm™d
(
NAND_CMD_READSTART
))

1423 
˛ónup
;

1426 i‡(!
	`mtk_«nd_°©us_ªady
(
STA_NAND_BUSY
))

1428 
˛ónup
;

1431 
bRë
 = 
åue
;

1433 
˛ónup
:

1434  
bRë
;

1435 
	}
}

1453 
boﬁ
 
	$mtk_«nd_ªady_f‹_wrôe
(
«nd_chù
 *
«nd
, 
u32
 
u4RowAddr
, u32 
cﬁ_addr
, 
boﬁ
 
fuŒ
, 
u8
 * 
buf
)

1455 
boﬁ
 
bRë
 = 
Ál£
;

1456 
u32
 
£c_num
 = 1 << (
«nd
->
∑ge_shi·
 - 9);

1457 
u32
 
cﬁnob
 = 2, 
rownob
 = 
devöfo
.
addr_cy˛e
 - 2;

1458 #i‡
	`deföed
 (
__INTERNAL_USE_AHB_MODE__
)

1459 
u32
 
phys
 = 0;

1462 i‡(
«nd
->
›ti⁄s
 & 
NAND_BUSWIDTH_16
)

1463 
cﬁ_addr
 /= 2;

1466 i‡(!
	`mtk_«nd_ª£t
())

1468  
Ál£
;

1471 
	`mtk_«nd_£t_mode
(
CNFG_OP_PRGM
);

1473 
	`NFI_CLN_REG16
(
NFI_CNFG_REG16
, 
CNFG_READ_EN
);

1475 
	`DRV_WrôeReg16
(
NFI_CON_REG16
, 
£c_num
 << 
CON_NFI_SEC_SHIFT
);

1477 i‡(
fuŒ
)

1479 #i‡
	`deföed
 (
__INTERNAL_USE_AHB_MODE__
)

1480 
	`NFI_SET_REG16
(
NFI_CNFG_REG16
, 
CNFG_AHB
);

1481 
phys
 = 
	`«nd_vút_to_phys_add
((
u32
Ë
buf
);

1483 i‡(!
phys
)

1485 
	`¥ötk
(
KERN_ERR
 "[mt6575_«nd_ªady_f‹_wrôe]c⁄vîàvúàadd∏(%xËtÿphy†add faû!!!", (
u32
Ë
buf
);

1486  
Ál£
;

1489 
	`DRV_WrôeReg32
(
NFI_STRADDR_REG32
, 
phys
);

1492 i‡((
T_phys
 > 0x700000 && T_phy†< 0x800000Ë|| (
phys
 > 0x700000 &&Öhys < 0x800000))

1495 
	`¥ötk
("[NFI_WRITE]ERROR: F‹biddí AHBáddªs†wr⁄gÖhy†addªs†=0x%x ,Ñighàphy†addªss=0x%x, vúàáddªss0x%x (cou¡ = %d)\n", 
T_phys
, 
phys
, (
u32
Ë
buf
, 
g_dump_cou¡
++);

1496 
	`show_°ack
(
NULL
, NULL);

1498 
	`BUG_ON
(1);

1502 
	`NFI_CLN_REG16
(
NFI_CNFG_REG16
, 
CNFG_AHB
);

1504 i‡(
g_bHwEcc
)

1506 
	`NFI_SET_REG16
(
NFI_CNFG_REG16
, 
CNFG_HW_ECC_EN
);

1509 
	`NFI_CLN_REG16
(
NFI_CNFG_REG16
, 
CNFG_HW_ECC_EN
);

1513 
	`NFI_CLN_REG16
(
NFI_CNFG_REG16
, 
CNFG_HW_ECC_EN
);

1514 
	`NFI_CLN_REG16
(
NFI_CNFG_REG16
, 
CNFG_AHB
);

1517 
	`mtk_«nd_£t_autof‹m©
(
fuŒ
);

1519 i‡(
fuŒ
)

1521 i‡(
g_bHwEcc
)

1523 
	`ECC_Encode_Sèπ
();

1527 i‡(!
	`mtk_«nd_£t_comm™d
(
NAND_CMD_SEQIN
))

1529 
˛ónup
;

1532 i‡(!
	`mtk_«nd_£t_addªss
(
cﬁ_addr
, 
u4RowAddr
, 
cﬁnob
, 
rownob
))

1534 
˛ónup
;

1537 i‡(!
	`mtk_«nd_°©us_ªady
(
STA_NAND_BUSY
))

1539 
˛ónup
;

1542 
bRë
 = 
åue
;

1543 
˛ónup
:

1545  
bRë
;

1546 
	}
}

1548 
boﬁ
 
	$mtk_«nd_check_de˚cc_d⁄e
(
u32
 
u4SecNum
)

1550 
u32
 
timeout
, 
dec_mask
;

1551 
timeout
 = 0xffff;

1552 
dec_mask
 = (1 << 
u4SecNum
) - 1;

1553 (
dec_mask
 !
	`DRV_Reg
(
ECC_DECDONE_REG16
)Ë&& 
timeout
 > 0)

1554 
timeout
--;

1555 i‡(
timeout
 == 0)

1557 
	`MSG
(
VERIFY
, "ECC_DECDONE:Åimeout\n");

1558  
Ál£
;

1560  
åue
;

1561 
	}
}

1562 #i‡
deföed
 (
__INTERNAL_USE_AHB_MODE__
)

1579 
boﬁ
 
	$mtk_«nd_dma_ªad_d©a
(
mtd_öfo
 *
mtd
, 
u8
 * 
buf
, 
u32
 
Àngth
)

1581 
öãºu±_í
 = 
g_i4I¡îru±
;

1582 
timeout
 = 0xffff;

1583 #i‡
	`deföed
 (
__KERNEL_NAND__
)

1584 
sˇâîli°
 
sg
;

1585 
dma_d©a_dúe˘i⁄
 
dú
 = 
DMA_FROM_DEVICE
;

1587 
	`sg_öô_⁄e
(&
sg
, 
buf
, 
Àngth
);

1588 
	`dma_m≠_sg
(&(
mtd
->
dev
), &
sg
, 1, 
dú
);

1590 
	`NFI_CLN_REG16
(
NFI_CNFG_REG16
, 
CNFG_BYTE_RW
);

1593 i‡(()
buf
 % 16)

1595 
	`¥ötk
(
KERN_INFO
 "Un-16-alignedáddress\n");

1596 
	`NFI_CLN_REG16
(
NFI_CNFG_REG16
, 
CNFG_DMA_BURST_EN
);

1599 
	`NFI_SET_REG16
(
NFI_CNFG_REG16
, 
CNFG_DMA_BURST_EN
);

1602 
	`DRV_Reg16
(
NFI_INTR_REG16
);

1603 
	`DRV_WrôeReg16
(
NFI_INTR_EN_REG16
, 
INTR_AHB_DONE_EN
);

1605 i‡(
öãºu±_í
)

1607 
	`öô_com∂ëi⁄
(&
g_comp_AHB_D⁄e
);

1610 
	`mb
();

1611 
	`NFI_SET_REG16
(
NFI_CON_REG16
, 
CON_NFI_BRD
);

1612 
g_ru¬ög_dma
 = 1;

1613 #i‡
	`deföed
 (
__KERNEL_NAND__
)

1614 i‡(
öãºu±_í
)

1616 i‡(!
	`waô_f‹_com∂ëi⁄_timeout
(&
g_comp_AHB_D⁄e
, 2))

1618 
	`MSG
(
READ
, "waô f‹ com∂ëi⁄Åimeouàh≠≥√d @ [%s]: %d\n", 
__FUNCTION__
, 
__LINE__
);

1619 
	`dump_nfi
();

1620 
g_ru¬ög_dma
 = 0;

1621  
Ál£
;

1623 
g_ru¬ög_dma
 = 0;

1624 (
Àngth
 >> 9Ë> ((
	`DRV_Reg16
(
NFI_BYTELEN_REG16
) & 0xf000) >> 12))

1626 
timeout
--;

1627 i‡(0 =
timeout
)

1629 
	`¥ötk
(
KERN_ERR
 "[%s]Öﬁ»BYTELENÉº‹\n", 
__FUNCTION__
);

1630 
g_ru¬ög_dma
 = 0;

1631  
Ál£
;

1638 !
	`DRV_Reg16
(
NFI_INTR_REG16
))

1640 
timeout
--;

1641 i‡(0 =
timeout
)

1643 
	`¥ötk
(
KERN_ERR
 "[%s]Öﬁ»nfi_öåÉº‹\n", 
__FUNCTION__
);

1644 
	`dump_nfi
();

1645 
g_ru¬ög_dma
 = 0;

1646  
Ál£
;

1649 
g_ru¬ög_dma
 = 0;

1650 (
Àngth
 >> 9Ë> ((
	`DRV_Reg16
(
NFI_BYTELEN_REG16
) & 0xf000) >> 12))

1652 
timeout
--;

1653 i‡(0 =
timeout
)

1655 
	`¥ötk
(
KERN_ERR
 "[%s]Öﬁ»BYTELENÉº‹\n", 
__FUNCTION__
);

1656 
	`dump_nfi
();

1657 
g_ru¬ög_dma
 = 0;

1658  
Ál£
;

1662 #i‡
	`deföed
 (
__KERNEL_NAND__
)

1663 
	`dma_ˇche_sync
(&(
mtd
->
dev
), 
	`sg_vút
(&
sg
), 
Àngth
, 
dú
);

1664 
	`dma_unm≠_sg
(&(
mtd
->
dev
), &
sg
, 1, 
dú
);

1666  
åue
;

1667 
	}
}

1669 
boﬁ
 
	$mtk_«nd_mcu_ªad_d©a
(
u8
 * 
buf
, 
u32
 
Àngth
)

1671 
timeout
 = 0xffff;

1672 
u32
 
i
;

1673 
u32
 *
buf32
 = (u32 *Ë
buf
;

1674 #ifde‡
TESTTIME


1675 
time1
, 
time2
;

1676 
time1
 = 
	`sched_˛ock
();

1678 i‡((
u32
Ë
buf
 % 4 || 
Àngth
 % 4)

1679 
	`NFI_SET_REG16
(
NFI_CNFG_REG16
, 
CNFG_BYTE_RW
);

1681 
	`NFI_CLN_REG16
(
NFI_CNFG_REG16
, 
CNFG_BYTE_RW
);

1684 
	`mb
();

1685 
	`NFI_SET_REG16
(
NFI_CON_REG16
, 
CON_NFI_BRD
);

1687 i‡((
u32
Ë
buf
 % 4 || 
Àngth
 % 4)

1689 
i
 = 0; (ò< (
Àngth
)Ë&& (
timeout
 > 0);)

1692 i‡(
	`DRV_Reg16
(
NFI_PIO_DIRDY_REG16
) & 1)

1694 *
buf
++ = (
u8
Ë
	`DRV_Reg32
(
NFI_DATAR_REG32
);

1695 
i
++;

1698 
timeout
--;

1700 
	`udñay
(1);

1701 i‡(0 =
timeout
)

1703 
	`¥ötk
(
KERN_ERR
 "[%s]Åimeout\n", 
__FUNCTION__
);

1704 
	`dump_nfi
();

1705  
Ál£
;

1711 
i
 = 0; (ò< (
Àngth
 >> 2)Ë&& (
timeout
 > 0);)

1714 i‡(
	`DRV_Reg16
(
NFI_PIO_DIRDY_REG16
) & 1)

1716 *
buf32
++ = 
	`DRV_Reg32
(
NFI_DATAR_REG32
);

1717 
i
++;

1720 
timeout
--;

1722 
	`udñay
(1);

1723 i‡(0 =
timeout
)

1725 
	`¥ötk
(
KERN_ERR
 "[%s]Åimeout\n", 
__FUNCTION__
);

1726 
	`dump_nfi
();

1727  
Ál£
;

1731 #ifde‡
TESTTIME


1732 
time2
 = 
	`sched_˛ock
(Ë- 
time1
;

1733 i‡(!
ªadd©©ime
)

1735 
ªadd©©ime
 = (
time2
);

1738  
åue
;

1739 
	}
}

1741 
boﬁ
 
	$mtk_«nd_ªad_∑ge_d©a
(
mtd_öfo
 *
mtd
, 
u8
 * 
pD©aBuf
, 
u32
 
u4Size
)

1743 #i‡
	`deföed
 (
__INTERNAL_USE_AHB_MODE__
)

1744  
	`mtk_«nd_dma_ªad_d©a
(
mtd
, 
pD©aBuf
, 
u4Size
);

1746  
	`mtk_«nd_mcu_ªad_d©a
(
pD©aBuf
, 
u4Size
);

1748 
	}
}

1749 #i‡
deföed
 (
__INTERNAL_USE_AHB_MODE__
)

1766 
boﬁ
 
	$mtk_«nd_dma_wrôe_d©a
(
mtd_öfo
 *
mtd
, 
u8
 * 
pD©aBuf
, 
u32
 
u4Size
)

1768 
i4I¡îru±
 = 0;

1769 
u32
 
timeout
 = 0xFFFF;

1770 #i‡
	`deföed
 (
__KERNEL_NAND__
)

1771 
sˇâîli°
 
sg
;

1772 
dma_d©a_dúe˘i⁄
 
dú
 = 
DMA_TO_DEVICE
;

1774 
	`sg_öô_⁄e
(&
sg
, 
pD©aBuf
, 
u4Size
);

1775 
	`dma_m≠_sg
(&(
mtd
->
dev
), &
sg
, 1, 
dú
);

1777 
	`NFI_CLN_REG16
(
NFI_CNFG_REG16
, 
CNFG_BYTE_RW
);

1778 
	`DRV_Reg16
(
NFI_INTR_REG16
);

1779 
	`DRV_WrôeReg16
(
NFI_INTR_EN_REG16
, 0);

1782 i‡(()
pD©aBuf
 % 16)

1784 
	`¥ötk
(
KERN_INFO
 "Un-16-alignedáddress\n");

1785 
	`NFI_CLN_REG16
(
NFI_CNFG_REG16
, 
CNFG_DMA_BURST_EN
);

1788 
	`NFI_SET_REG16
(
NFI_CNFG_REG16
, 
CNFG_DMA_BURST_EN
);

1791 i‡(
i4I¡îru±
)

1793 #i‡
	`deföed
 (
__KERNEL_NAND__
)

1794 
	`öô_com∂ëi⁄
(&
g_comp_AHB_D⁄e
);

1796 
	`DRV_Reg16
(
NFI_INTR_REG16
);

1797 
	`DRV_WrôeReg16
(
NFI_INTR_EN_REG16
, 
INTR_AHB_DONE_EN
);

1800 
	`mb
();

1801 
	`NFI_SET_REG16
(
NFI_CON_REG16
, 
CON_NFI_BWR
);

1802 
g_ru¬ög_dma
 = 3;

1803 #i‡
	`deföed
 (
__KERNEL_NAND__
)

1804 i‡(
i4I¡îru±
)

1806 i‡(!
	`waô_f‹_com∂ëi⁄_timeout
(&
g_comp_AHB_D⁄e
, 2))

1808 
	`MSG
(
READ
, "waô f‹ com∂ëi⁄Åimeouàh≠≥√d @ [%s]: %d\n", 
__FUNCTION__
, 
__LINE__
);

1809 
	`dump_nfi
();

1810 
g_ru¬ög_dma
 = 0;

1811  
Ál£
;

1813 
g_ru¬ög_dma
 = 0;

1819 (
u4Size
 >> 9Ë> ((
	`DRV_Reg16
(
NFI_BYTELEN_REG16
) & 0xf000) >> 12))

1821 
timeout
--;

1822 i‡(0 =
timeout
)

1824 
	`¥ötk
(
KERN_ERR
 "[%s]Öﬁ»BYTELENÉº‹\n", 
__FUNCTION__
);

1825 
g_ru¬ög_dma
 = 0;

1826  
Ál£
;

1829 
g_ru¬ög_dma
 = 0;

1831 #i‡
	`deföed
 (
__KERNEL_NAND__
)

1832 
	`dma_unm≠_sg
(&(
mtd
->
dev
), &
sg
, 1, 
dú
);

1834  
åue
;

1835 
	}
}

1837 
boﬁ
 
	$mtk_«nd_mcu_wrôe_d©a
(
mtd_öfo
 *
mtd
, c⁄° 
u8
 * 
buf
, 
u32
 
Àngth
)

1839 
u32
 
timeout
 = 0xFFFF;

1840 
u32
 
i
;

1841 
u32
 *
pBuf32
;

1842 
	`NFI_CLN_REG16
(
NFI_CNFG_REG16
, 
CNFG_BYTE_RW
);

1843 
	`mb
();

1844 
	`NFI_SET_REG16
(
NFI_CON_REG16
, 
CON_NFI_BWR
);

1845 
pBuf32
 = (
u32
 *Ë
buf
;

1847 i‡((
u32
Ë
buf
 % 4 || 
Àngth
 % 4)

1848 
	`NFI_SET_REG16
(
NFI_CNFG_REG16
, 
CNFG_BYTE_RW
);

1850 
	`NFI_CLN_REG16
(
NFI_CNFG_REG16
, 
CNFG_BYTE_RW
);

1852 i‡((
u32
Ë
buf
 % 4 || 
Àngth
 % 4)

1854 
i
 = 0; (ò< (
Àngth
)Ë&& (
timeout
 > 0);)

1856 i‡(
	`DRV_Reg16
(
NFI_PIO_DIRDY_REG16
) & 1)

1858 
	`DRV_WrôeReg32
(
NFI_DATAW_REG32
, *
buf
++);

1859 
i
++;

1862 
timeout
--;

1864 i‡(0 =
timeout
)

1866 
	`¥ötk
(
KERN_ERR
 "[%s]Åimeout\n", 
__FUNCTION__
);

1867 
	`dump_nfi
();

1868  
Ál£
;

1873 
i
 = 0; (ò< (
Àngth
 >> 2)Ë&& (
timeout
 > 0);)

1876 i‡(
	`DRV_Reg16
(
NFI_PIO_DIRDY_REG16
) & 1)

1878 
	`DRV_WrôeReg32
(
NFI_DATAW_REG32
, *
pBuf32
++);

1879 
i
++;

1882 
timeout
--;

1884 i‡(0 =
timeout
)

1886 
	`¥ötk
(
KERN_ERR
 "[%s]Åimeout\n", 
__FUNCTION__
);

1887 
	`dump_nfi
();

1888  
Ál£
;

1893  
åue
;

1894 
	}
}

1896 
boﬁ
 
	$mtk_«nd_wrôe_∑ge_d©a
(
mtd_öfo
 *
mtd
, 
u8
 * 
buf
, 
u32
 
size
)

1898 #i‡
	`deföed
 (
__INTERNAL_USE_AHB_MODE__
)

1899  
	`mtk_«nd_dma_wrôe_d©a
(
mtd
, 
buf
, 
size
);

1901  
	`mtk_«nd_mcu_wrôe_d©a
(
mtd
, 
buf
, 
size
);

1903 
	}
}

1921 
	$mtk_«nd_ªad_fdm_d©a
(
u8
 * 
pD©aBuf
, 
u32
 
u4SecNum
)

1923 
u32
 
i
;

1924 
u32
 *
pBuf32
 = (u32 *Ë
pD©aBuf
;

1926 i‡(
pBuf32
)

1928 
i
 = 0; i < 
u4SecNum
; ++i)

1930 *
pBuf32
++ = 
	`DRV_Reg32
(
NFI_FDM0L_REG32
 + (
i
 << 1));

1931 *
pBuf32
++ = 
	`DRV_Reg32
(
NFI_FDM0M_REG32
 + (
i
 << 1));

1936 
	}
}

1954 
u8
 
	gfdm_buf
[64];

1955 
	$mtk_«nd_wrôe_fdm_d©a
(
«nd_chù
 *
chù
, 
u8
 * 
pD©aBuf
, 
u32
 
u4SecNum
)

1957 
u32
 
i
, 
j
;

1958 
u8
 
checksum
 = 0;

1959 
boﬁ
 
em±y
 = 
åue
;

1960 
«nd_oob‰ì
 *
‰ì_íåy
;

1961 
u32
 *
pBuf32
;

1963 
	`mem˝y
(
fdm_buf
, 
pD©aBuf
, 
u4SecNum
 * 8);

1965 
‰ì_íåy
 = 
chù
->
ecc
.
œyout
->
oob‰ì
;

1966 
i
 = 0; i < 
MTD_MAX_OOBFREE_ENTRIES
 && 
‰ì_íåy
[i].
Àngth
; i++)

1968 
j
 = 0; j < 
‰ì_íåy
[
i
].
Àngth
; j++)

1970 i‡(
pD©aBuf
[
‰ì_íåy
[
i
].
off£t
 + 
j
] != 0xFF)

1971 
em±y
 = 
Ál£
;

1972 
checksum
 ^
pD©aBuf
[
‰ì_íåy
[
i
].
off£t
 + 
j
];

1976 i‡(!
em±y
)

1978 
fdm_buf
[
‰ì_íåy
[
i
 - 1].
off£t
 + fªe_íåy[ò- 1].
Àngth
] = 
checksum
;

1981 
pBuf32
 = (
u32
 *Ë
fdm_buf
;

1982 
i
 = 0; i < 
u4SecNum
; ++i)

1984 
	`DRV_WrôeReg32
(
NFI_FDM0L_REG32
 + (
i
 << 1), *
pBuf32
++);

1985 
	`DRV_WrôeReg32
(
NFI_FDM0M_REG32
 + (
i
 << 1), *
pBuf32
++);

1989 
	}
}

2007 
	$mtk_«nd_°›_ªad
()

2009 
	`NFI_CLN_REG16
(
NFI_CON_REG16
, 
CON_NFI_BRD
);

2010 
	`mtk_«nd_ª£t
();

2011 i‡(
g_bHwEcc
)

2013 
	`ECC_Decode_End
();

2015 
	`DRV_WrôeReg16
(
NFI_INTR_EN_REG16
, 0);

2016 
	}
}

2034 
	$mtk_«nd_°›_wrôe
()

2036 
	`NFI_CLN_REG16
(
NFI_CON_REG16
, 
CON_NFI_BWR
);

2037 i‡(
g_bHwEcc
)

2039 
	`ECC_Encode_End
();

2041 
	`DRV_WrôeReg16
(
NFI_INTR_EN_REG16
, 0);

2042 
	}
}

2061 
boﬁ
 
	$mtk_«nd_exec_ªad_∑ge
(
mtd_öfo
 *
mtd
, 
u32
 
u4RowAddr
, u32 
u4PageSize
, 
u8
 * 
pPageBuf
, u8 * 
pFDMBuf
)

2063 
u8
 *
buf
;

2064 
boﬁ
 
bRë
 = 
åue
;

2065 
«nd_chù
 *
«nd
 = 
mtd
->
¥iv
;

2066 
u32
 
u4SecNum
 = 
u4PageSize
 >> 9;

2067 #ifde‡
NAND_PFM


2068 
timevÆ
 
pfm_time_ªad
;

2070 
PageFmt_Reg
 = 0;

2071 
NAND_ECC_Enc_Reg
 = 0;

2072 
NAND_ECC_Dec_Reg
 = 0;

2073 
	`PFM_BEGIN
(
pfm_time_ªad
);

2075 i‡(((
u32
Ë
pPageBuf
 % 16Ë&& 
loˇl_buf„r_16_Æign
)

2077 
buf
 = 
loˇl_buf„r_16_Æign
;

2079 
buf
 = 
pPageBuf
;

2082 i‡(
	`mtk_«nd_ªady_f‹_ªad
(
«nd
, 
u4RowAddr
, 0, 
åue
, 
buf
))

2084 
j
;

2085 #i‡(
MANUAL_CORRECT
 && 
ECC_ENABLE
)

2086 
j
 = 0 ; j < 
u4SecNum
; j++)

2088 i‡(!
	`mtk_«nd_ªad_∑ge_d©a
(
mtd
, 
buf
+
j
*512, 512))

2090 
bRë
 = 
Ál£
;

2092 if(
g_bHwEcc
){

2093 if(!
	`mtk_«nd_check_de˚cc_d⁄e
(
j
+1)){

2094 
bRë
 = 
Ál£
;

2097 if(
g_bHwEcc
){

2098 i‡(!
	`mtk_«nd_check_bch_îr‹
(
mtd
, 
buf
+
j
*512, j, 
u4RowAddr
))

2100 
bRë
 = 
Ál£
;

2105 i‡(!
	`mtk_«nd_°©us_ªady
(
STA_NAND_BUSY
))

2107 
bRë
 = 
Ál£
;

2110 
	`mtk_«nd_ªad_fdm_d©a
(
pFDMBuf
, 
u4SecNum
);

2112 i‡(!
	`mtk_«nd_ªad_∑ge_d©a
(
mtd
, 
buf
, 
u4PageSize
))

2114 
bRë
 = 
Ál£
;

2117 i‡(!
	`mtk_«nd_°©us_ªady
(
STA_NAND_BUSY
))

2119 
bRë
 = 
Ál£
;

2121 i‡(
g_bHwEcc
)

2123 i‡(!
	`mtk_«nd_check_de˚cc_d⁄e
(
u4SecNum
))

2125 
bRë
 = 
Ál£
;

2128 
	`mtk_«nd_ªad_fdm_d©a
(
pFDMBuf
, 
u4SecNum
);

2129 i‡(
g_bHwEcc
)

2131 i‡(!
	`mtk_«nd_check_bch_îr‹
(
mtd
, 
buf
, 
u4SecNum
 - 1, 
u4RowAddr
))

2133 
bRë
 = 
Ál£
;

2137 
	`mtk_«nd_°›_ªad
();

2140 i‡(
buf
 =
loˇl_buf„r_16_Æign
)

2141 
	`mem˝y
(
pPageBuf
, 
buf
, 
u4PageSize
);

2143 
	`PFM_END_R
(
pfm_time_ªad
, 
u4PageSize
 + 32);

2144  
bRë
;

2145 
	}
}

2164 
	$mtk_«nd_exec_wrôe_∑ge
(
mtd_öfo
 *
mtd
, 
u32
 
u4RowAddr
, u32 
u4PageSize
, 
u8
 * 
pPageBuf
, u8 * 
pFDMBuf
)

2166 
«nd_chù
 *
chù
 = 
mtd
->
¥iv
;

2167 
u32
 
u4SecNum
 = 
u4PageSize
 >> 9;

2168 
u8
 *
buf
;

2169 
u8
 
°©us
;

2171 
	`MSG
(
WRITE
, "mtk_«nd_exec_wrôe_∑ge,Öage: 0x%x\n", 
u4RowAddr
);

2173 #ifde‡
_MTK_NAND_DUMMY_DRIVER_


2174 i‡(
dummy_drivî_debug
)

2176 
time
 = 
	`sched_˛ock
();

2177 i‡(!((
time
 * 123 + 59) % 32768))

2179 
	`¥ötk
(
KERN_INFO
 "[NAND_DUMMY_DRIVER] Simuœã wrôêîr‹áà∑ge: 0x%x\n", 
u4RowAddr
);

2180  -
EIO
;

2185 #ifde‡
NAND_PFM


2186 
timevÆ
 
pfm_time_wrôe
;

2188 
	`PFM_BEGIN
(
pfm_time_wrôe
);

2189 i‡(((
u32
Ë
pPageBuf
 % 16Ë&& 
loˇl_buf„r_16_Æign
)

2191 
	`¥ötk
(
KERN_INFO
 "D©®buf„∏nŸ 16 byã†Æig√d: %p\n", 
pPageBuf
);

2192 
	`mem˝y
(
loˇl_buf„r_16_Æign
, 
pPageBuf
, 
mtd
->
wrôesize
);

2193 
buf
 = 
loˇl_buf„r_16_Æign
;

2195 
buf
 = 
pPageBuf
;

2197 i‡(
	`mtk_«nd_ªady_f‹_wrôe
(
chù
, 
u4RowAddr
, 0, 
åue
, 
buf
))

2199 
	`mtk_«nd_wrôe_fdm_d©a
(
chù
, 
pFDMBuf
, 
u4SecNum
);

2200 ()
	`mtk_«nd_wrôe_∑ge_d©a
(
mtd
, 
buf
, 
u4PageSize
);

2201 ()
	`mtk_«nd_check_RW_cou¡
(
u4PageSize
);

2202 
	`mtk_«nd_°›_wrôe
();

2203 ()
	`mtk_«nd_£t_comm™d
(
NAND_CMD_PAGEPROG
);

2204 
	`DRV_Reg32
(
NFI_STA_REG32
Ë& 
STA_NAND_BUSY
) ;

2206 
	`PFM_END_W
(
pfm_time_wrôe
, 
u4PageSize
 + 32);

2208 
°©us
 = 
chù
->
	`waôfunc
(
mtd
, chip);

2209 i‡(
°©us
 & 
NAND_STATUS_FAIL
)

2210  -
EIO
;

2213 
	}
}

2220 
	$mtk_«nd_wrôe_∑ge
(
mtd_öfo
 *
mtd
, 
«nd_chù
 *
chù
, c⁄° 
u8
 * 
buf
, 
∑ge
, 
ˇched
, 
øw
)

2222 
∑ge_≥r_block
 = 1 << (
chù
->
phys_îa£_shi·
 - chù->
∑ge_shi·
);

2223 
block
 = 
∑ge
 / 
∑ge_≥r_block
;

2224 
u16
 
∑ge_ö_block
 = 
∑ge
 % 
∑ge_≥r_block
;

2225 
m≠≥d_block
 = 
block
;

2228 
m≠≥d_block
 = 
	`gë_m≠pög_block_ödex
(
block
);

2230 i‡(
m≠≥d_block
 !
block
)

2232 
	`£t_bad_ödex_to_oob
(
chù
->
oob_poi
, 
block
);

2235 
	`£t_bad_ödex_to_oob
(
chù
->
oob_poi
, 
FAKE_INDEX
);

2240 i‡(
	`mtk_«nd_exec_wrôe_∑ge
(
mtd
, 
∑ge_ö_block
 + 
m≠≥d_block
 * 
∑ge_≥r_block
, mtd->
wrôesize
, (
u8
 *)
buf
, 
chù
->
oob_poi
))

2242 
	`MSG
(
INIT
, "wrôêÁûáàblock: 0x%x,Öage: 0x%x\n", 
m≠≥d_block
, 
∑ge_ö_block
);

2244 i‡(
	`upd©e_bmt
((
∑ge_ö_block
 + 
m≠≥d_block
 * 
∑ge_≥r_block
Ë<< 
chù
->
∑ge_shi·
, 
UPDATE_WRITE_FAIL
, (
u8
 *Ë
buf
, chù->
oob_poi
))

2246 
	`MSG
(
INIT
, "Update BMT success\n");

2250 
	`MSG
(
INIT
, "Update BMT fail\n");

2251  -
EIO
;

2254 
	`MSG
(
INIT
, "Skù bad block f‹ wrôe: 0x%x\n", 
m≠≥d_block
);

2255 
m≠≥d_block
 += 1;

2262 
	}
}

2311 
	$mtk_«nd_comm™d_bp
(
mtd_öfo
 *
mtd
, 
comm™d
, 
cﬁumn
, 
∑ge_addr
)

2313 
«nd_chù
 *
«nd
 = 
mtd
->
¥iv
;

2314 #ifde‡
NAND_PFM


2315 
timevÆ
 
pfm_time_îa£
;

2317 
comm™d
)

2319 
NAND_CMD_SEQIN
:

2320 
	`mem£t
(
g_kCMD
.
au1OOB
, 0xFF, (g_kCMD.au1OOB));

2321 
g_kCMD
.
pD©aBuf
 = 
NULL
;

2323 
g_kCMD
.
u4RowAddr
 = 
∑ge_addr
;

2324 
g_kCMD
.
u4CﬁAddr
 = 
cﬁumn
;

2327 
NAND_CMD_PAGEPROG
:

2328 i‡(
g_kCMD
.
pD©aBuf
 || (0xFF !g_kCMD.
au1OOB
[
«nd_badblock_off£t
]))

2330 
u8
 *
pD©aBuf
 = 
g_kCMD
.pD©aBu‡? g_kCMD.pD©aBu‡: 
«nd
->
buf„rs
->
d©abuf
;

2331 
	`mtk_«nd_exec_wrôe_∑ge
(
mtd
, 
g_kCMD
.
u4RowAddr
, mtd->
wrôesize
, 
pD©aBuf
, g_kCMD.
au1OOB
);

2332 
g_kCMD
.
u4RowAddr
 = (
u32
) - 1;

2333 
g_kCMD
.
u4OOBRowAddr
 = (
u32
) - 1;

2337 
NAND_CMD_READOOB
:

2338 
g_kCMD
.
u4RowAddr
 = 
∑ge_addr
;

2339 
g_kCMD
.
u4CﬁAddr
 = 
cﬁumn
 + 
mtd
->
wrôesize
;

2340 #ifde‡
NAND_PFM


2341 
g_kCMD
.
puªRódOOB
 = 1;

2342 
g_kCMD
.
puªRódOOBNum
 += 1;

2346 
NAND_CMD_READ0
:

2347 
g_kCMD
.
u4RowAddr
 = 
∑ge_addr
;

2348 
g_kCMD
.
u4CﬁAddr
 = 
cﬁumn
;

2349 #ifde‡
NAND_PFM


2350 
g_kCMD
.
puªRódOOB
 = 0;

2354 
NAND_CMD_ERASE1
:

2355 
«nd
->
°©e
=
FL_ERASING
;

2356 
	`PFM_BEGIN
(
pfm_time_îa£
);

2357 ()
	`mtk_«nd_ª£t
();

2358 
	`mtk_«nd_£t_mode
(
CNFG_OP_ERASE
);

2359 ()
	`mtk_«nd_£t_comm™d
(
NAND_CMD_ERASE1
);

2360 ()
	`mtk_«nd_£t_addªss
(0, 
∑ge_addr
, 0, 
devöfo
.
addr_cy˛e
 - 2);

2363 
NAND_CMD_ERASE2
:

2364 ()
	`mtk_«nd_£t_comm™d
(
NAND_CMD_ERASE2
);

2365 
	`DRV_Reg32
(
NFI_STA_REG32
Ë& 
STA_NAND_BUSY
) ;

2366 
	`PFM_END_E
(
pfm_time_îa£
);

2369 
NAND_CMD_STATUS
:

2370 ()
	`mtk_«nd_ª£t
();

2371 
	`NFI_CLN_REG16
(
NFI_CNFG_REG16
, 
CNFG_BYTE_RW
);

2372 
	`mtk_«nd_£t_mode
(
CNFG_OP_SRD
);

2373 
	`mtk_«nd_£t_mode
(
CNFG_READ_EN
);

2374 
	`NFI_CLN_REG16
(
NFI_CNFG_REG16
, 
CNFG_AHB
);

2375 
	`NFI_CLN_REG16
(
NFI_CNFG_REG16
, 
CNFG_HW_ECC_EN
);

2376 ()
	`mtk_«nd_£t_comm™d
(
NAND_CMD_STATUS
);

2377 
	`NFI_CLN_REG16
(
NFI_CON_REG16
, 
CON_NFI_NOB_MASK
);

2378 
	`mb
();

2379 
	`DRV_WrôeReg16
(
NFI_CON_REG16
, 
CON_NFI_SRD
 | (1 << 
CON_NFI_NOB_SHIFT
));

2380 
g_bcmd°©us
 = 
åue
;

2383 
NAND_CMD_RESET
:

2384 ()
	`mtk_«nd_ª£t
();

2385 
	`DRV_WrôeReg16
(
NFI_INTR_EN_REG16
, 
INTR_RST_DONE_EN
);

2386 ()
	`mtk_«nd_£t_comm™d
(
NAND_CMD_RESET
);

2387 
	`DRV_WrôeReg16
(
NFI_BASE
+0x44, 0xF1);

2388 !(
	`DRV_Reg16
(
NFI_INTR_REG16
)&
INTR_RST_DONE_EN
));

2391 
NAND_CMD_READID
:

2400 
	`mtk_«nd_ª£t
();

2402 
	`NFI_CLN_REG16
(
NFI_CNFG_REG16
, 
CNFG_HW_ECC_EN
);

2403 
	`NFI_CLN_REG16
(
NFI_CNFG_REG16
, 
CNFG_AHB
);

2408 
	`NFI_SET_REG16
(
NFI_CNFG_REG16
, 
CNFG_READ_EN
 | 
CNFG_BYTE_RW
);

2409 ()
	`mtk_«nd_ª£t
();

2410 
	`mb
();

2411 
	`mtk_«nd_£t_mode
(
CNFG_OP_SRD
);

2412 ()
	`mtk_«nd_£t_comm™d
(
NAND_CMD_READID
);

2413 ()
	`mtk_«nd_£t_addªss
(0, 0, 1, 0);

2414 
	`DRV_WrôeReg16
(
NFI_CON_REG16
, 
CON_NFI_SRD
);

2415 
	`DRV_Reg32
(
NFI_STA_REG32
Ë& 
STA_DATAR_STATE
) ;

2419 
	`BUG
();

2422 
	}
}

2440 
	$mtk_«nd_£À˘_chù
(
mtd_öfo
 *
mtd
, 
chù
)

2442 i‡((
chù
 =-1Ë&& (
Ál£
 =
g_bInôD⁄e
))

2444 
«nd_chù
 *
«nd
 = 
mtd
->
¥iv
;

2446 
mtk_«nd_ho°
 *
ho°
 = 
«nd
->
¥iv
;

2447 
mtk_«nd_ho°_hw
 *
hw
 = 
ho°
->hw;

2448 
u32
 
•¨e_≥r_£˘‹
 = 
mtd
->
oobsize
/–mtd->
wrôesize
/512);

2449 
u32
 
ecc_bô
 = 4;

2450 
u32
 
•¨e_bô
 = 
PAGEFMT_SPARE_16
;

2452 if(
•¨e_≥r_£˘‹
>=28){

2453 
•¨e_bô
 = 
PAGEFMT_SPARE_28
;

2454 
ecc_bô
 = 12;

2455 
•¨e_≥r_£˘‹
 = 28;

2456 }if(
•¨e_≥r_£˘‹
>=27){

2457 
•¨e_bô
 = 
PAGEFMT_SPARE_27
;

2458 
ecc_bô
 = 8;

2459 
•¨e_≥r_£˘‹
 = 27;

2460 }if(
•¨e_≥r_£˘‹
>=26){

2461 
•¨e_bô
 = 
PAGEFMT_SPARE_26
;

2462 
ecc_bô
 = 8;

2463 
•¨e_≥r_£˘‹
 = 26;

2464 }if(
•¨e_≥r_£˘‹
>=16){

2465 
•¨e_bô
 = 
PAGEFMT_SPARE_16
;

2466 
ecc_bô
 = 4;

2467 
•¨e_≥r_£˘‹
 = 16;

2469 
	`MSG
(
INIT
, "[NAND]: NFIÇŸ suµ‹àoobsize: %x\n", 
•¨e_≥r_£˘‹
);

2470 
	`ASSERT
(0);

2472 
mtd
->
oobsize
 = 
•¨e_≥r_£˘‹
*(mtd->
wrôesize
/512);

2473 
	`¥ötf
("[NAND]£À˘Éc¯bô:%d, s∑ªsizê:%d s∑ª_≥r_£˘‹=%d\n",
ecc_bô
,
mtd
->
oobsize
,
•¨e_≥r_£˘‹
);

2475 i‡(4096 =
mtd
->
wrôesize
)

2477 
	`NFI_SET_REG16
(
NFI_PAGEFMT_REG16
, (
•¨e_bô
 << 
PAGEFMT_SPARE_SHIFT
Ë| 
PAGEFMT_4K
);

2478 
«nd
->
cmdfunc
 = 
mtk_«nd_comm™d_bp
;

2479 } i‡(2048 =
mtd
->
wrôesize
)

2481 
	`NFI_SET_REG16
(
NFI_PAGEFMT_REG16
, (
•¨e_bô
 << 
PAGEFMT_SPARE_SHIFT
Ë| 
PAGEFMT_2K
);

2482 
«nd
->
cmdfunc
 = 
mtk_«nd_comm™d_bp
;

2487 
	`ECC_C⁄fig
(
hw
,
ecc_bô
);

2488 
g_bInôD⁄e
 = 
åue
;

2490 
chù
)

2498 
	`DRV_WrôeReg16
(
NFI_CSEL_REG16
, 
chù
);

2502 
	}
}

2520 
uöt8_t
 
	$mtk_«nd_ªad_byã
(
mtd_öfo
 *
mtd
)

2525 
u32
 
timeout
 = 
TIMEOUT_4
;

2526 
uöt8_t
 
ªtvÆ
 = 0;

2527 
	`WAIT_NFI_PIO_READY
(
timeout
);

2529 
ªtvÆ
 = 
	`DRV_Reg8
(
NFI_DATAR_REG32
);

2530 
	`MSG
(
INIT
, "mtk_«nd_ªad_byã (0x%x)\n", 
ªtvÆ
);

2532 i‡(
g_bcmd°©us
)

2534 
	`NFI_SET_REG16
(
NFI_CNFG_REG16
, 
CNFG_AHB
);

2535 
	`NFI_SET_REG16
(
NFI_CNFG_REG16
, 
CNFG_HW_ECC_EN
);

2536 
g_bcmd°©us
 = 
Ál£
;

2539  
ªtvÆ
;

2541 
uöt8_t
 
ªtvÆ
 = 0;

2543 i‡(!
	`mtk_«nd_pio_ªady
())

2545 
	`¥ötk
("pioÑeadyÅimeout\n");

2546 
ªtvÆ
 = 
Ál£
;

2549 i‡(
g_bcmd°©us
)

2551 
ªtvÆ
 = 
	`DRV_Reg8
(
NFI_DATAR_REG32
);

2552 
	`NFI_CLN_REG16
(
NFI_CON_REG16
, 
CON_NFI_NOB_MASK
);

2553 
	`mtk_«nd_ª£t
();

2554 #i‡
	`deföed
 (
__INTERNAL_USE_AHB_MODE__
)

2555 
	`NFI_SET_REG16
(
NFI_CNFG_REG16
, 
CNFG_AHB
);

2557 i‡(
g_bHwEcc
)

2559 
	`NFI_SET_REG16
(
NFI_CNFG_REG16
, 
CNFG_HW_ECC_EN
);

2562 
	`NFI_CLN_REG16
(
NFI_CNFG_REG16
, 
CNFG_HW_ECC_EN
);

2564 
g_bcmd°©us
 = 
Ál£
;

2566 
ªtvÆ
 = 
	`DRV_Reg8
(
NFI_DATAR_REG32
);

2568  
ªtvÆ
;

2569 
	}
}

2587 
	$mtk_«nd_ªad_buf
(
mtd_öfo
 *
mtd
, 
uöt8_t
 * 
buf
, 
Àn
)

2589 
«nd_chù
 *
«nd
 = («nd_chù *)
mtd
->
¥iv
;

2590 
NAND_CMD
 *
pkCMD
 = &
g_kCMD
;

2591 
u32
 
u4CﬁAddr
 = 
pkCMD
->u4ColAddr;

2592 
u32
 
u4PageSize
 = 
mtd
->
wrôesize
;

2594 i‡(
u4CﬁAddr
 < 
u4PageSize
)

2596 i‡((
u4CﬁAddr
 =0Ë&& (
Àn
 >
u4PageSize
))

2598 
	`mtk_«nd_exec_ªad_∑ge
(
mtd
, 
pkCMD
->
u4RowAddr
, 
u4PageSize
, 
buf
,ÖkCMD->
au1OOB
);

2599 i‡(
Àn
 > 
u4PageSize
)

2601 
u32
 
u4Size
 = 
	`mö
(
Àn
 - 
u4PageSize
, (
pkCMD
->
au1OOB
));

2602 
	`mem˝y
(
buf
 + 
u4PageSize
, 
pkCMD
->
au1OOB
, 
u4Size
);

2606 
	`mtk_«nd_exec_ªad_∑ge
(
mtd
, 
pkCMD
->
u4RowAddr
, 
u4PageSize
, 
«nd
->
buf„rs
->
d©abuf
,ÖkCMD->
au1OOB
);

2607 
	`mem˝y
(
buf
, 
«nd
->
buf„rs
->
d©abuf
 + 
u4CﬁAddr
, 
Àn
);

2609 
pkCMD
->
u4OOBRowAddr
 =ÖkCMD->
u4RowAddr
;

2612 
u32
 
u4Off£t
 = 
u4CﬁAddr
 - 
u4PageSize
;

2613 
u32
 
u4Size
 = 
	`mö
(
Àn
 - 
u4Off£t
, (
pkCMD
->
au1OOB
));

2614 i‡(
pkCMD
->
u4OOBRowAddr
 !pkCMD->
u4RowAddr
)

2616 
	`mtk_«nd_exec_ªad_∑ge
(
mtd
, 
pkCMD
->
u4RowAddr
, 
u4PageSize
, 
«nd
->
buf„rs
->
d©abuf
,ÖkCMD->
au1OOB
);

2617 
pkCMD
->
u4OOBRowAddr
 =ÖkCMD->
u4RowAddr
;

2619 
	`mem˝y
(
buf
, 
pkCMD
->
au1OOB
 + 
u4Off£t
, 
u4Size
);

2621 
pkCMD
->
u4CﬁAddr
 +
Àn
;

2622 
	}
}

2640 
	$mtk_«nd_wrôe_buf
(
mtd_öfo
 *
mtd
, c⁄° 
uöt8_t
 * 
buf
, 
Àn
)

2642 
NAND_CMD
 *
pkCMD
 = &
g_kCMD
;

2643 
u32
 
u4CﬁAddr
 = 
pkCMD
->u4ColAddr;

2644 
u32
 
u4PageSize
 = 
mtd
->
wrôesize
;

2645 
i4Size
, 
i
;

2647 i‡(
u4CﬁAddr
 >
u4PageSize
)

2649 
u32
 
u4Off£t
 = 
u4CﬁAddr
 - 
u4PageSize
;

2650 
u8
 *
pOOB
 = 
pkCMD
->
au1OOB
 + 
u4Off£t
;

2651 
i4Size
 = 
	`mö
(
Àn
, ()((
pkCMD
->
au1OOB
Ë- 
u4Off£t
));

2653 
i
 = 0; i < 
i4Size
; i++)

2655 
pOOB
[
i
] &
buf
[i];

2659 
pkCMD
->
pD©aBuf
 = (
u8
 *Ë
buf
;

2662 
pkCMD
->
u4CﬁAddr
 +
Àn
;

2663 
	}
}

2681 
	$mtk_«nd_wrôe_∑ge_hwecc
(
mtd_öfo
 *
mtd
, 
«nd_chù
 *
chù
, c⁄° 
uöt8_t
 * 
buf
)

2683 
	`mtk_«nd_wrôe_buf
(
mtd
, 
buf
, mtd->
wrôesize
);

2684 
	`mtk_«nd_wrôe_buf
(
mtd
, 
chù
->
oob_poi
, mtd->
oobsize
);

2685 
	}
}

2703 
	$mtk_«nd_ªad_∑ge_hwecc
(
mtd_öfo
 *
mtd
, 
«nd_chù
 *
chù
, 
uöt8_t
 * 
buf
, 
∑ge
)

2706 
	`mtk_«nd_ªad_buf
(
mtd
, 
buf
, mtd->
wrôesize
);

2707 
	`mtk_«nd_ªad_buf
(
mtd
, 
chù
->
oob_poi
, mtd->
oobsize
);

2709 
NAND_CMD
 *
pkCMD
 = &
g_kCMD
;

2710 
u32
 
u4CﬁAddr
 = 
pkCMD
->u4ColAddr;

2711 
u32
 
u4PageSize
 = 
mtd
->
wrôesize
;

2713 i‡(
u4CﬁAddr
 == 0)

2715 
	`mtk_«nd_exec_ªad_∑ge
(
mtd
, 
pkCMD
->
u4RowAddr
, 
u4PageSize
, 
buf
, 
chù
->
oob_poi
);

2716 
pkCMD
->
u4CﬁAddr
 +
u4PageSize
 + 
mtd
->
oobsize
;

2720 
	}
}

2727 
	$mtk_«nd_ªad_∑ge
(
mtd_öfo
 *
mtd
, 
«nd_chù
 *
chù
, 
u8
 * 
buf
, 
∑ge
)

2729 
∑ge_≥r_block
 = 1 << (
chù
->
phys_îa£_shi·
 - chù->
∑ge_shi·
);

2730 
block
 = 
∑ge
 / 
∑ge_≥r_block
;

2731 
u16
 
∑ge_ö_block
 = 
∑ge
 % 
∑ge_≥r_block
;

2732 
m≠≥d_block
 = 
block
;

2735 
m≠≥d_block
 = 
	`gë_m≠pög_block_ödex
(
block
);

2736 i‡(
	`mtk_«nd_exec_ªad_∑ge
(
mtd
, 
∑ge_ö_block
 + 
m≠≥d_block
 * 
∑ge_≥r_block
,

2737 
mtd
->
wrôesize
, 
buf
, 
chù
->
oob_poi
))

2744 i‡(
	`mtk_«nd_exec_ªad_∑ge
(
mtd
, 
∑ge_ö_block
 + 
m≠≥d_block
 * 
∑ge_≥r_block
,

2745 
mtd
->
wrôesize
, 
buf
, 
chù
->
oob_poi
))

2747 i‡(
chù
->
oob_poi
[
«nd_badblock_off£t
]==0xFF)

2750 
	`MSG
(
INIT
, "Skù bad block f‹Ñód: 0x%x\n", 
m≠≥d_block
);

2751 
m≠≥d_block
 +=1;

2755 
	}
}

2762 
	$mtk_«nd_îa£_hw
(
mtd_öfo
 *
mtd
, 
∑ge
)

2764 
«nd_chù
 *
chù
 = («nd_chù *)
mtd
->
¥iv
;

2766 #ifde‡
_MTK_NAND_DUMMY_DRIVER_


2767 i‡(
dummy_drivî_debug
)

2769 
time
 = 
	`sched_˛ock
();

2770 i‡(!((
time
 * 123 + 59) % 1024))

2772 
	`¥ötk
(
KERN_INFO
 "[NAND_DUMMY_DRIVER] SimuœãÉø£Éº‹áà∑ge: 0x%x\n", 
∑ge
);

2773  
NAND_STATUS_FAIL
;

2778 
chù
->
	`îa£_cmd
(
mtd
, 
∑ge
);

2780  
chù
->
	`waôfunc
(
mtd
, chip);

2781 
	}
}

2783 
	$mtk_«nd_îa£
(
mtd_öfo
 *
mtd
, 
∑ge
)

2786 
«nd_chù
 *
chù
 = 
mtd
->
¥iv
;

2787 
∑ge_≥r_block
 = 1 << (
chù
->
phys_îa£_shi·
 - chù->
∑ge_shi·
);

2788 
∑ge_ö_block
 = 
∑ge
 % 
∑ge_≥r_block
;

2789 
block
 = 
∑ge
 / 
∑ge_≥r_block
;

2790 
m≠≥d_block
 = 
block
;

2793 
m≠≥d_block
 = 
	`gë_m≠pög_block_ödex
(
block
);

2797 
°©us
 = 
	`mtk_«nd_îa£_hw
(
mtd
, 
∑ge_ö_block
 + 
∑ge_≥r_block
 * 
m≠≥d_block
);

2799 i‡(
°©us
 & 
NAND_STATUS_FAIL
)

2802 i‡(
	`upd©e_bmt
–(
∑ge_ö_block
 + 
m≠≥d_block
 * 
∑ge_≥r_block
Ë<< 
chù
->
∑ge_shi·
,

2803 
UPDATE_ERASE_FAIL
, 
NULL
, NULL))

2805 
	`MSG
(
INIT
, "Eø£ faûáàblock: 0x%x, upd©êBMT suc˚ss\n", 
m≠≥d_block
);

2809 
	`MSG
(
INIT
, "Eø£ faûáàblock: 0x%x, upd©êBMT faû\n", 
m≠≥d_block
);

2810  
NAND_STATUS_FAIL
;

2813 
	`MSG
(
INIT
, "Skù bad block f‹Éø£: 0x%x\n", 
m≠≥d_block
);

2814 
m≠≥d_block
 +=1;

2822 
	}
}

2842 
	$mtk_«nd_ªad_mu…i_∑ge_ˇche
(
mtd_öfo
 *
mtd
, 
«nd_chù
 *
chù
, 
∑ge
, 
mtd_oob_›s
 *
›s
)

2844 
ªs
 = -
EIO
;

2845 
Àn
 = 
›s
->len;

2846 
mtd_ecc_°©s
 
°©
 = 
mtd
->
ecc_°©s
;

2847 
uöt8_t
 *
buf
 = 
›s
->
d©buf
;

2849 i‡(!
	`mtk_«nd_ªady_f‹_ªad
(
chù
, 
∑ge
, 0, 
åue
, 
buf
))

2850  -
EIO
;

2852 
Àn
 > 0)

2854 
	`mtk_«nd_£t_mode
(
CNFG_OP_CUST
);

2855 
	`DRV_WrôeReg16
(
NFI_CON_REG16
, 8 << 
CON_NFI_SEC_SHIFT
);

2857 i‡(
Àn
 > 
mtd
->
wrôesize
)

2859 i‡(!
	`mtk_«nd_£t_comm™d
(0x31))

2860 
ªt
;

2863 i‡(!
	`mtk_«nd_£t_comm™d
(0x3f))

2864 
ªt
;

2867 
	`mtk_«nd_°©us_ªady
(
STA_NAND_BUSY
);

2869 #i‡
	`deföed
 (
__INTERNAL_USE_AHB_MODE__
)

2871 i‡(!
	`mtk_«nd_ªad_∑ge_d©a
(
mtd
, 
buf
, mtd->
wrôesize
))

2872 
ªt
;

2874 i‡(!
	`mtk_«nd_mcu_ªad_d©a
(
buf
, 
mtd
->
wrôesize
))

2875 
ªt
;

2879 
	`mtk_«nd_check_bch_îr‹
(
mtd
, 
buf
, 3, 
∑ge
);

2880 
	`ECC_Decode_End
();

2882 
∑ge
++;

2883 
Àn
 -
mtd
->
wrôesize
;

2884 
buf
 +
mtd
->
wrôesize
;

2885 
›s
->
ªéí
 +
mtd
->
wrôesize
;

2887 i‡(
Àn
 > 0)

2889 
	`ECC_Decode_Sèπ
();

2890 
	`mtk_«nd_ª£t
();

2895 
ªs
 = 0;

2897 
ªt
:

2898 
	`mtk_«nd_°›_ªad
();

2900 i‡(
ªs
)

2901  
ªs
;

2903 i‡(
mtd
->
ecc_°©s
.
Áûed
 > 
°©
.failed)

2905 
	`¥ötk
(
KERN_INFO
 "ecc fail happened\n");

2906  -
EBADMSG
;

2909  
mtd
->
ecc_°©s
.
c‹ª˘ed
 - 
°©
.c‹ª˘ed ? -
EUCLEAN
 : 0;

2910 
	}
}

2932 
	$mtk_«nd_ªad_oob_øw
(
mtd_öfo
 *
mtd
, 
uöt8_t
 * 
buf
, 
∑ge_addr
, 
Àn
)

2934 
«nd_chù
 *
chù
 = («nd_chù *)
mtd
->
¥iv
;

2935 
u32
 
cﬁ_addr
 = 0;

2936 
u32
 
£˘‹
 = 0;

2937 
ªs
 = 0;

2938 
u32
 
cﬁnob
 = 2, 
øwnob
 = 
devöfo
.
addr_cy˛e
 - 2;

2939 
øndomªad
 = 0;

2940 
ªad_Àn
 = 0;

2941 
£c_num
 = 1<<(
chù
->
∑ge_shi·
-9);

2942 
•¨e_≥r_£˘‹
 = 
mtd
->
oobsize
/
£c_num
;

2944 i‡(
Àn
 > 
NAND_MAX_OOBSIZE
 ||Üí % 
OOB_AVAI_PER_SECTOR
 || !
buf
)

2946 
	`¥ötk
(
KERN_WARNING
 "[%s] invÆidÖ¨amëî,Üí: %d, buf: %p\n", 
__FUNCTION__
, 
Àn
, 
buf
);

2947  -
EINVAL
;

2949 i‡(
Àn
 > 
•¨e_≥r_£˘‹
)

2951 
øndomªad
 = 1;

2953 i‡(!
øndomªad
 || !(
devöfo
.
adv™˚dmode
 & 
RAMDOM_READ
))

2955 
Àn
 > 0)

2957 
i
;

2958 
ªad_Àn
 = 
	`mö
(
Àn
, 
•¨e_≥r_£˘‹
);

2959 
cﬁ_addr
 = 
NAND_SECTOR_SIZE
 + 
£˘‹
 * (NAND_SECTOR_SIZE + 
•¨e_≥r_£˘‹
);

2960 i‡(!
	`mtk_«nd_ªady_f‹_ªad
(
chù
, 
∑ge_addr
, 
cﬁ_addr
, 
Ál£
, 
NULL
))

2962 
	`¥ötk
(
KERN_WARNING
 "mtk_nand_ready_for_readÑeturn failed\n");

2963 
ªs
 = -
EIO
;

2964 
îr‹
;

2967 i‡(!
	`mtk_«nd_mcu_ªad_d©a
(
buf
 + 
•¨e_≥r_£˘‹
 * 
£˘‹
, 
ªad_Àn
))

2969 
	`¥ötk
(
KERN_WARNING
 "mtk_nand_mcu_read_dataÑeturn failed\n");

2970 
ªs
 = -
EIO
;

2971 
îr‹
;

2973 ()
	`mtk_«nd_check_RW_cou¡
(
ªad_Àn
);

2974 
	`mtk_«nd_°›_ªad
();

2980 
£˘‹
++;

2981 
Àn
 -
ªad_Àn
;

2986 
cﬁ_addr
 = 
NAND_SECTOR_SIZE
;

2987 i‡(
chù
->
›ti⁄s
 & 
NAND_BUSWIDTH_16
)

2989 
cﬁ_addr
 /= 2;

2992 i‡(!
	`mtk_«nd_ª£t
())

2994 
îr‹
;

2997 
	`mtk_«nd_£t_mode
(0x6000);

2998 
	`NFI_SET_REG16
(
NFI_CNFG_REG16
, 
CNFG_READ_EN
);

2999 
	`DRV_WrôeReg16
(
NFI_CON_REG16
, 4 << 
CON_NFI_SEC_SHIFT
);

3001 
	`NFI_CLN_REG16
(
NFI_CNFG_REG16
, 
CNFG_AHB
);

3002 
	`NFI_CLN_REG16
(
NFI_CNFG_REG16
, 
CNFG_HW_ECC_EN
);

3004 
	`mtk_«nd_£t_autof‹m©
(
Ál£
);

3006 i‡(!
	`mtk_«nd_£t_comm™d
(
NAND_CMD_READ0
))

3008 
îr‹
;

3011 i‡(!
	`mtk_«nd_£t_addªss
(
cﬁ_addr
, 
∑ge_addr
, 
cﬁnob
, 
øwnob
))

3013 
îr‹
;

3016 i‡(!
	`mtk_«nd_£t_comm™d
(
NAND_CMD_READSTART
))

3018 
îr‹
;

3020 i‡(!
	`mtk_«nd_°©us_ªady
(
STA_NAND_BUSY
))

3022 
îr‹
;

3025 
ªad_Àn
 = 
	`mö
(
Àn
, 
•¨e_≥r_£˘‹
);

3026 i‡(!
	`mtk_«nd_mcu_ªad_d©a
(
buf
 + 
•¨e_≥r_£˘‹
 * 
£˘‹
, 
ªad_Àn
))

3028 
	`¥ötk
(
KERN_WARNING
 "mtk_nand_mcu_read_dataÑeturn failed first 16\n");

3029 
ªs
 = -
EIO
;

3030 
îr‹
;

3032 
£˘‹
++;

3033 
Àn
 -
ªad_Àn
;

3034 
	`mtk_«nd_°›_ªad
();

3035 
Àn
 > 0)

3037 
ªad_Àn
 = 
	`mö
(
Àn
, 
•¨e_≥r_£˘‹
);

3038 i‡(!
	`mtk_«nd_£t_comm™d
(0x05))

3040 
îr‹
;

3043 
cﬁ_addr
 = 
NAND_SECTOR_SIZE
 + 
£˘‹
 * (NAND_SECTOR_SIZE + 
•¨e_≥r_£˘‹
);

3044 i‡(
chù
->
›ti⁄s
 & 
NAND_BUSWIDTH_16
)

3046 
cﬁ_addr
 /= 2;

3048 
	`DRV_WrôeReg32
(
NFI_COLADDR_REG32
, 
cﬁ_addr
);

3049 
	`DRV_WrôeReg16
(
NFI_ADDRNOB_REG16
, 2);

3050 
	`DRV_WrôeReg16
(
NFI_CON_REG16
, 4 << 
CON_NFI_SEC_SHIFT
);

3052 i‡(!
	`mtk_«nd_°©us_ªady
(
STA_ADDR_STATE
))

3054 
îr‹
;

3057 i‡(!
	`mtk_«nd_£t_comm™d
(0xE0))

3059 
îr‹
;

3061 i‡(!
	`mtk_«nd_°©us_ªady
(
STA_NAND_BUSY
))

3063 
îr‹
;

3065 i‡(!
	`mtk_«nd_mcu_ªad_d©a
(
buf
 + 
•¨e_≥r_£˘‹
 * 
£˘‹
, 
ªad_Àn
))

3067 
	`¥ötk
(
KERN_WARNING
 "mtk_nand_mcu_read_dataÑeturn failed first 16\n");

3068 
ªs
 = -
EIO
;

3069 
îr‹
;

3071 
	`mtk_«nd_°›_ªad
();

3072 
£˘‹
++;

3073 
Àn
 -
ªad_Àn
;

3078 
îr‹
:

3079 
	`NFI_CLN_REG16
(
NFI_CON_REG16
, 
CON_NFI_BRD
);

3080  
ªs
;

3081 
	}
}

3082 #i‡!
deföed
 (
__BOOT_NAND__
)

3083 
	$mtk_«nd_wrôe_oob_øw
(
mtd_öfo
 *
mtd
, c⁄° 
uöt8_t
 * 
buf
, 
∑ge_addr
, 
Àn
)

3085 
«nd_chù
 *
chù
 = 
mtd
->
¥iv
;

3086 
u32
 
cﬁ_addr
 = 0;

3087 
u32
 
£˘‹
 = 0;

3088 
wrôe_Àn
 = 0;

3089 
°©us
;

3090 
£c_num
 = 1<<(
chù
->
∑ge_shi·
-9);

3091 
•¨e_≥r_£˘‹
 = 
mtd
->
oobsize
/
£c_num
;

3093 i‡(
Àn
 > 
NAND_MAX_OOBSIZE
 ||Üí % 
OOB_AVAI_PER_SECTOR
 || !
buf
)

3095 
	`¥ötk
(
KERN_WARNING
 "[%s] invÆidÖ¨amëî,Üí: %d, buf: %p\n", 
__FUNCTION__
, 
Àn
, 
buf
);

3096  -
EINVAL
;

3099 
Àn
 > 0)

3101 
wrôe_Àn
 = 
	`mö
(
Àn
, 
•¨e_≥r_£˘‹
);

3102 
cﬁ_addr
 = 
£˘‹
 * (
NAND_SECTOR_SIZE
 + 
•¨e_≥r_£˘‹
) + NAND_SECTOR_SIZE;

3103 i‡(!
	`mtk_«nd_ªady_f‹_wrôe
(
chù
, 
∑ge_addr
, 
cﬁ_addr
, 
Ál£
, 
NULL
))

3105  -
EIO
;

3108 i‡(!
	`mtk_«nd_mcu_wrôe_d©a
(
mtd
, 
buf
 + 
£˘‹
 * 
•¨e_≥r_£˘‹
, 
wrôe_Àn
))

3110  -
EIO
;

3113 ()
	`mtk_«nd_check_RW_cou¡
(
wrôe_Àn
);

3114 
	`NFI_CLN_REG16
(
NFI_CON_REG16
, 
CON_NFI_BWR
);

3115 ()
	`mtk_«nd_£t_comm™d
(
NAND_CMD_PAGEPROG
);

3117 
	`DRV_Reg32
(
NFI_STA_REG32
Ë& 
STA_NAND_BUSY
) ;

3119 
°©us
 = 
chù
->
	`waôfunc
(
mtd
, chip);

3120 i‡(
°©us
 & 
NAND_STATUS_FAIL
)

3122 
	`¥ötk
(
KERN_INFO
 "°©us: %d\n", 
°©us
);

3123  -
EIO
;

3126 
Àn
 -
wrôe_Àn
;

3127 
£˘‹
++;

3131 
	}
}

3133 
	$mtk_«nd_wrôe_oob_hw
(
mtd_öfo
 *
mtd
, 
«nd_chù
 *
chù
, 
∑ge
)

3135 
i
, 
ôî
;

3137 
£c_num
 = 1<<(
chù
->
∑ge_shi·
-9);

3138 
•¨e_≥r_£˘‹
 = 
mtd
->
oobsize
/
£c_num
;

3140 
	`mem˝y
(
loˇl_oob_buf
, 
chù
->
oob_poi
, 
mtd
->
oobsize
);

3143 
i
 = 0; i < 
chù
->
ecc
.
œyout
->
eccbyãs
; i++)

3145 
ôî
 = (
i
 / (
•¨e_≥r_£˘‹
-
OOB_AVAI_PER_SECTOR
)) * spare_per_sector + OOB_AVAI_PER_SECTOR + i % (spare_per_sector-OOB_AVAI_PER_SECTOR);

3146 
loˇl_oob_buf
[
ôî
] = 
chù
->
oob_poi
[chù->
ecc
.
œyout
->
ec˝os
[
i
]];

3150 
i
 = 0; i < 
£c_num
; i++)

3152 
	`mem˝y
(&
loˇl_oob_buf
[
i
 * 
•¨e_≥r_£˘‹
], &
chù
->
oob_poi
[ò* 
OOB_AVAI_PER_SECTOR
], OOB_AVAI_PER_SECTOR);

3155  
	`mtk_«nd_wrôe_oob_øw
(
mtd
, 
loˇl_oob_buf
, 
∑ge
, mtd->
oobsize
);

3156 
	}
}

3158 
	$mtk_«nd_wrôe_oob
(
mtd_öfo
 *
mtd
, 
«nd_chù
 *
chù
, 
∑ge
)

3160 
∑ge_≥r_block
 = 1 << (
chù
->
phys_îa£_shi·
 - chù->
∑ge_shi·
);

3161 
block
 = 
∑ge
 / 
∑ge_≥r_block
;

3162 
u16
 
∑ge_ö_block
 = 
∑ge
 % 
∑ge_≥r_block
;

3163 
m≠≥d_block
 = 
block
;

3166 
m≠≥d_block
 = 
	`gë_m≠pög_block_ödex
(
block
);

3168 i‡(
m≠≥d_block
 !
block
)

3170 
	`£t_bad_ödex_to_oob
(
chù
->
oob_poi
, 
block
);

3173 
	`£t_bad_ödex_to_oob
(
chù
->
oob_poi
, 
FAKE_INDEX
);

3178 i‡(
	`mtk_«nd_wrôe_oob_hw
(
mtd
, 
chù
, 
∑ge_ö_block
 + 
m≠≥d_block
 * 
∑ge_≥r_block
 ))

3180 
	`MSG
(
INIT
, "wrôêoob faûáàblock: 0x%x,Öage: 0x%x\n", 
m≠≥d_block
, 
∑ge_ö_block
);

3182 i‡(
	`upd©e_bmt
((
∑ge_ö_block
 + 
m≠≥d_block
 * 
∑ge_≥r_block
Ë<< 
chù
->
∑ge_shi·
,

3183 
UPDATE_WRITE_FAIL
, 
NULL
, 
chù
->
oob_poi
))

3185 
	`MSG
(
INIT
, "Update BMT success\n");

3189 
	`MSG
(
INIT
, "Update BMT fail\n");

3190  -
EIO
;

3193 
m≠≥d_block
 += 1;

3201 
	}
}

3203 
	$mtk_«nd_block_m¨kbad_hw
(
mtd_öfo
 *
mtd
, 
loff_t
 
off£t
)

3205 
«nd_chù
 *
chù
 = 
mtd
->
¥iv
;

3206 
block
 = ()
off£t
 >> 
chù
->
phys_îa£_shi·
;

3207 
∑ge
 = 
block
 * (1 << (
chù
->
phys_îa£_shi·
 - chù->
∑ge_shi·
));

3208 
ªt
;

3210 
u8
 
buf
[8];

3211 
	`mem£t
(
buf
, 0xFF, 8);

3212 
buf
[0] = 0;

3214 
ªt
 = 
	`mtk_«nd_wrôe_oob_øw
(
mtd
, 
buf
, 
∑ge
, 8);

3215  
ªt
;

3216 
	}
}

3218 
	$mtk_«nd_block_m¨kbad
(
mtd_öfo
 *
mtd
, 
loff_t
 
off£t
)

3220 
«nd_chù
 *
chù
 = 
mtd
->
¥iv
;

3221 
block
 = ()
off£t
 >> 
chù
->
phys_îa£_shi·
;

3222 
ªt
;

3223 
m≠≥d_block
 = 
block
;

3225 
	`«nd_gë_devi˚
(
chù
, 
mtd
, 
FL_WRITING
);

3228 
m≠≥d_block
 = 
	`gë_m≠pög_block_ödex
(
block
);

3229 
ªt
 = 
	`mtk_«nd_block_m¨kbad_hw
(
mtd
, 
m≠≥d_block
 << 
chù
->
phys_îa£_shi·
);

3233 
ªt
 = 
	`mtk_«nd_block_m¨kbad_hw
(
mtd
, 
m≠≥d_block
 << 
chù
->
phys_îa£_shi·
);

3234 i‡(!
ªt
)

3237 
m≠≥d_block
 +=1;

3240 
	`«nd_ªÀa£_devi˚
(
mtd
);

3242  
ªt
;

3243 
	}
}

3246 
	$mtk_«nd_ªad_oob_hw
(
mtd_öfo
 *
mtd
, 
«nd_chù
 *
chù
, 
∑ge
)

3248 
i
;

3249 
u8
 
ôî
 = 0;

3251 
£c_num
 = 1<<(
chù
->
∑ge_shi·
-9);

3252 
•¨e_≥r_£˘‹
 = 
mtd
->
oobsize
/
£c_num
;

3253 #ifde‡
TESTTIME


3254 
time1
, 
time2
;

3256 
time1
 = 
	`sched_˛ock
();

3259 i‡(
	`mtk_«nd_ªad_oob_øw
(
mtd
, 
chù
->
oob_poi
, 
∑ge
, mtd->
oobsize
))

3261 
	`¥ötk
(
KERN_ERR
 "[%s]mtk_«nd_ªad_oob_øwÑëu∫ faûed\n", 
__FUNCTION__
);

3262  -
EIO
;

3264 #ifde‡
TESTTIME


3265 
time2
 = 
	`sched_˛ock
(Ë- 
time1
;

3266 i‡(!
ªadoobÊag
)

3268 
ªadoobÊag
 = 1;

3269 
	`¥ötk
(
KERN_ERR
 "[%s]Åimêi†%Œu", 
__FUNCTION__
, 
time2
);

3279 
	`mem˝y
(
loˇl_oob_buf
, 
chù
->
oob_poi
, 
mtd
->
oobsize
);

3281 
i
 = 0; i < 
chù
->
ecc
.
œyout
->
eccbyãs
; i++)

3283 
ôî
 = (
i
 / (
•¨e_≥r_£˘‹
-
OOB_AVAI_PER_SECTOR
)) * spare_per_sector + OOB_AVAI_PER_SECTOR + i % (spare_per_sector-OOB_AVAI_PER_SECTOR);

3284 
chù
->
oob_poi
[chù->
ecc
.
œyout
->
ec˝os
[
i
]] = 
loˇl_oob_buf
[
ôî
];

3288 
i
 = 0; i < 
£c_num
; i++)

3290 
	`mem˝y
(&
chù
->
oob_poi
[
i
 * 
OOB_AVAI_PER_SECTOR
], &
loˇl_oob_buf
[ò* 
•¨e_≥r_£˘‹
], OOB_AVAI_PER_SECTOR);

3294 
	}
}

3296 
	$mtk_«nd_ªad_oob
(
mtd_öfo
 *
mtd
, 
«nd_chù
 *
chù
, 
∑ge
, 
¢dcmd
)

3298 
∑ge_≥r_block
 = 1 << (
chù
->
phys_îa£_shi·
 - chù->
∑ge_shi·
);

3299 
block
 = 
∑ge
 / 
∑ge_≥r_block
;

3300 
u16
 
∑ge_ö_block
 = 
∑ge
 % 
∑ge_≥r_block
;

3301 
m≠≥d_block
 = 
block
;

3304 
m≠≥d_block
 = 
	`gë_m≠pög_block_ödex
(
block
);

3305 
	`mtk_«nd_ªad_oob_hw
(
mtd
, 
chù
, 
∑ge_ö_block
 + 
m≠≥d_block
 * 
∑ge_≥r_block
);

3309 i‡(
	`mtk_«nd_ªad_oob_hw
(
mtd
, 
chù
, 
∑ge_ö_block
 + 
m≠≥d_block
 * 
∑ge_≥r_block
)==0)

3311 i‡(
chù
->
oob_poi
[
«nd_badblock_off£t
]==0xFF)

3314 
m≠≥d_block
 +=1;

3318 
	}
}

3320 
	$mtk_«nd_block_bad_hw
(
mtd_öfo
 *
mtd
, 
loff_t
 
ofs
)

3322 
«nd_chù
 *
chù
 = («nd_chù *)
mtd
->
¥iv
;

3323 
∑ge_addr
 = ()(
ofs
 >> 
chù
->
∑ge_shi·
);

3324 
∑ge_≥r_block
 = 1 << (
chù
->
phys_îa£_shi·
 - chù->
∑ge_shi·
);

3326 
oob_buf
[8];

3327 
∑ge_addr
 &~(
∑ge_≥r_block
 - 1);

3329 i‡(
	`mtk_«nd_ªad_oob_øw
(
mtd
, 
oob_buf
, 
∑ge_addr
, (oob_buf)))

3331 
	`¥ötk
(
KERN_WARNING
 "mtk_nand_read_oob_rawÑeturnÉrror\n");

3335 i‡(
oob_buf
[0] != 0xff)

3337 
	`¥ötk
(
KERN_WARNING
 "Bad block dëe˘edáà0x%x, oob_buf[0] i†0x%x\n", 
∑ge_addr
, 
oob_buf
[0]);

3343 
	}
}

3345 
	$mtk_«nd_block_bad
(
mtd_öfo
 *
mtd
, 
loff_t
 
ofs
, 
gëchù
)

3347 
chùƒ
 = 0;

3349 
«nd_chù
 *
chù
 = («nd_chù *)
mtd
->
¥iv
;

3350 
block
 = ()
ofs
 >> 
chù
->
phys_îa£_shi·
;

3351 
m≠≥d_block
 = 
block
;

3353 
ªt
;

3355 i‡(
gëchù
)

3357 
chùƒ
 = ()(
ofs
 >> 
chù
->
chù_shi·
);

3358 
	`«nd_gë_devi˚
(
chù
, 
mtd
, 
FL_READING
);

3360 
chù
->
	`£À˘_chù
(
mtd
, 
chùƒ
);

3364 
m≠≥d_block
 = 
	`gë_m≠pög_block_ödex
(
block
);

3369 
ªt
 = 
	`mtk_«nd_block_bad_hw
(
mtd
, 
m≠≥d_block
 << 
chù
->
phys_îa£_shi·
);

3371 i‡(
ªt
)

3373 
	`MSG
(
INIT
, "Unm≠≥d bad block: 0x%x\n", 
m≠≥d_block
);

3374 i‡(
	`upd©e_bmt
(
m≠≥d_block
 << 
chù
->
phys_îa£_shi·
, 
UPDATE_UNMAPPED_BLOCK
, 
NULL
, NULL))

3376 
	`MSG
(
INIT
, "Update BMT success\n");

3377 
ªt
 = 0;

3380 
	`MSG
(
INIT
, "Update BMT fail\n");

3381 
ªt
 = 1;

3386 i‡(
ªt
)

3387 
m≠≥d_block
 += 1;

3393 i‡(
gëchù
)

3395 
	`«nd_ªÀa£_devi˚
(
mtd
);

3398  
ªt
;

3399 
	}
}

3417 #ifde‡
CONFIG_MTD_NAND_VERIFY_WRITE


3419 
	ggacBuf
[4096 + 288];

3421 
	$mtk_«nd_vîify_buf
(
mtd_öfo
 *
mtd
, c⁄° 
uöt8_t
 * 
buf
, 
Àn
)

3424 
«nd_chù
 *
chù
 = («nd_chù *)
mtd
->
¥iv
;

3425 
NAND_CMD
 *
pkCMD
 = &
g_kCMD
;

3426 
u32
 
u4PageSize
 = 
mtd
->
wrôesize
;

3427 
u32
 *
pSrc
, *
pD°
;

3428 
i
;

3430 
	`mtk_«nd_exec_ªad_∑ge
(
mtd
, 
pkCMD
->
u4RowAddr
, 
u4PageSize
, 
gacBuf
, gacBuf + u4PageSize);

3432 
pSrc
 = (
u32
 *Ë
buf
;

3433 
pD°
 = (
u32
 *Ë
gacBuf
;

3434 
Àn
 =Üí / (
u32
);

3435 
i
 = 0; i < 
Àn
; ++i)

3437 i‡(*
pSrc
 !*
pD°
)

3439 
	`MSG
(
VERIFY
, "mtk_«nd_vîify_bu‡∑gêÁûáà∑gê%d\n", 
pkCMD
->
u4RowAddr
);

3442 
pSrc
++;

3443 
pD°
++;

3446 
pSrc
 = (
u32
 *Ë
chù
->
oob_poi
;

3447 
pD°
 = (
u32
 *Ë(
gacBuf
 + 
u4PageSize
);

3449 i‡((
pSrc
[0] !
pD°
[0]) || (pSrc[1] !=ÖDst[1]) || (pSrc[2] !=ÖDst[2]) || (pSrc[3] !=ÖDst[3]) || (pSrc[4] !=ÖDst[4]) || (pSrc[5] !=ÖDst[5]))

3453 
	`MSG
(
VERIFY
, "mtk_«nd_vîify_bu‡oob faûáà∑gê%d\n", 
pkCMD
->
u4RowAddr
);

3454 
	`MSG
(
VERIFY
, "0x%x 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\n", 
pSrc
[0],ÖSrc[1],ÖSrc[2],ÖSrc[3],ÖSrc[4],ÖSrc[5],ÖSrc[6],ÖSrc[7]);

3455 
	`MSG
(
VERIFY
, "0x%x 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\n", 
pD°
[0],ÖDst[1],ÖDst[2],ÖDst[3],ÖDst[4],ÖDst[5],ÖDst[6],ÖDst[7]);

3474 
	}
}

3493 
	$mtk_«nd_öô_hw
(
mtk_«nd_ho°
 *
ho°
)

3495 
mtk_«nd_ho°_hw
 *
hw
 = 
ho°
->hw;

3496 
u32
 
d©a
;

3498 
d©a
 = 
	`DRV_Reg32
(
RALINK_SYSCTL_BASE
+0x60);

3499 
d©a
 &= ~((0x3<<18)|(0x3<<16));

3500 
d©a
 |= ((0x2<<18) |(0x2<<16));

3501 
	`DRV_WrôeReg32
(
RALINK_SYSCTL_BASE
+0x60, 
d©a
);

3503 
	`MSG
(
INIT
, "Enable NFI Clock\n");

3504 
	`«nd_íabÀ_˛ock
();

3506 
g_bInôD⁄e
 = 
Ál£
;

3507 
g_kCMD
.
u4OOBRowAddr
 = (
u32
) - 1;

3510 
	`DRV_WrôeReg32
(
NFI_ACCCON_REG32
, 
hw
->
nfi_ac˚ss_timög
);

3511 
	`DRV_WrôeReg16
(
NFI_CNFG_REG16
, 0);

3512 
	`DRV_WrôeReg16
(
NFI_PAGEFMT_REG16
, 0);

3515 ()
	`mtk_«nd_ª£t
();

3518 i‡(
hw
->
«nd_ecc_mode
 =
NAND_ECC_HW
)

3520 
	`MSG
(
INIT
, "%†: U£ HW ECC\n", 
MODULE_NAME
);

3521 i‡(
g_bHwEcc
)

3523 
	`NFI_SET_REG32
(
NFI_CNFG_REG16
, 
CNFG_HW_ECC_EN
);

3525 
	`ECC_C⁄fig
(
ho°
->
hw
,4);

3526 
	`mtk_«nd_c⁄figuª_fdm
(8);

3527 
	`mtk_«nd_c⁄figuª_lock
();

3529 #i‡
	`deföed
 (
__INTERNAL_USE_AHB_MODE__
)

3531 
	`DRV_Reg16
(
NFI_INTR_REG16
);

3534 
	`DRV_WrôeReg16
(
NFI_INTR_EN_REG16
, 0);

3537 
	`NFI_SET_REG16
(
NFI_IOCON_REG16
, 0x47);

3539 
	}
}

3542 
	$mtk_«nd_dev_ªady
(
mtd_öfo
 *
mtd
)

3544  !(
	`DRV_Reg32
(
NFI_STA_REG32
Ë& 
STA_NAND_BUSY
);

3545 
	}
}

3563 
	$mtk_«nd_¥oc_ªad
(*
∑ge
, **
°¨t
, 
off_t
 
off
, 
cou¡
, *
eof
, *
d©a
)

3565 
Àn
;

3566 i‡(
off
 > 0)

3571 
Àn
 = 
	`•rötf
(
∑ge
, "ID: 0x%x,ÅŸÆ size: %dMiB\n", 
devöfo
.
id
, devöfo.
tŸÆsize
);

3572 
Àn
 +
	`•rötf
(
∑ge
 +Üí, "Cuºíàw‹kög i¿%†mode\n", 
g_i4I¡îru±
 ? "interrupt" : "polling");

3574  
Àn
;

3575 
	}
}

3593 
	$mtk_«nd_¥oc_wrôe
(
fûe
 *fûe, c⁄° *
buf„r
, 
cou¡
, *
d©a
)

3595 
mtd_öfo
 *
mtd
 = &
ho°
->mtd;

3596 
buf
[16];

3597 
Àn
 = 
cou¡
, 
n
;

3599 i‡(
Àn
 >(
buf
))

3601 
Àn
 = (
buf
) - 1;

3604 i‡(
	`c›y_‰om_u£r
(
buf
, 
buf„r
, 
Àn
))

3606  -
EFAULT
;

3609 
buf
[
Àn
] = '\0';

3610 i‡(
buf
[0] == 'I')

3613 
n
 = 
	`sim∂e_°πﬁ
(
buf
 + 1, 
NULL
, 10);

3615 i‡((
n
 > 0 && !
g_i4I¡îru±
) || (n == 0 && g_i4Interrupt))

3617 
	`«nd_gë_devi˚
((
«nd_chù
 *)
mtd
->
¥iv
, mtd, 
FL_READING
);

3619 
g_i4I¡îru±
 = 
n
;

3621 #i‡
	`deföed
 (
__INTERNAL_USE_AHB_MODE__
Ë&& deföed (
__KERNEL_NAND__
)

3622 i‡(
g_i4I¡îru±
)

3624 
	`DRV_Reg16
(
NFI_INTR_REG16
);

3625 
	`íabÀ_úq
(
SURFBOARDINT_NAND
);

3628 
	`dißbÀ_úq
(
SURFBOARDINT_NAND
);

3630 
	`«nd_ªÀa£_devi˚
(
mtd
);

3634 i‡(
buf
[0] == 'D')

3636 #ifde‡
_MTK_NAND_DUMMY_DRIVER_


3637 
	`¥ötk
(
KERN_INFO
 "Enable dummy driver\n");

3638 
dummy_drivî_debug
 = 1;

3641 #ifde‡
NAND_PFM


3642 i‡(
buf
[0] == 'P')

3645 
g_PFM_R
 = 0;

3646 
g_PFM_W
 = 0;

3647 
g_PFM_E
 = 0;

3648 
g_PFM_RD
 = 0;

3649 
g_PFM_WD
 = 0;

3650 
g_kCMD
.
puªRódOOBNum
 = 0;

3654  
Àn
;

3655 
	}
}

3658 #ifde‡
FACT_BBT


3660 
	#MAX_BBT_SIZE
 4096

	)

3661 
	#FACT_BBT_BLOCK_NUM
 32

3662 
	#FACT_BBT_OOB_SIGNATURE
 1

	)

3663 
	#FACT_BBT_SIGNATURE_LEN
 7

	)

3664 
	#FACT_BBT_BLOCK_COPY
 4

	)

3665 c⁄° 
u8
 
	goob_sig«tuª
[] = "mtknand";

3666 
u8
 
	gÁ˘_bbt
[
MAX_BBT_SIZE
];

3667 
u32
 
	gbbt_size
;

3669 
	$is_Á˘_bad
(
∑ge
)

3671 
mtd_öfo
 *
mtd
;

3672 
«nd_chù
 *
chù
;

3673 
block
;

3675 
mtd
 = &
ho°
->mtd;

3676 
chù
 = &
ho°
->
«nd_chù
;

3677 
block
 = 
∑ge
 >> (
chù
->
phys_îa£_shi·
 - chù->
∑ge_shi·
);

3678  
Á˘_bbt
[
block
 >> 2] & (0x3 << ((block * 2) & 6));

3679 
	}
}

3681 
	$ªad_Á˘_bbt
(
∑ge
)

3683 
mtd_öfo
 *
mtd
;

3684 
«nd_chù
 *
chù
;

3686 
mtd
 = &
ho°
->mtd;

3687 
chù
 = &
ho°
->
«nd_chù
;

3690 i‡(
	`mtk_«nd_ªad_oob_hw
(
mtd
, 
chù
, 
∑ge
)==0)

3692 i‡(
chù
->
oob_poi
[
«nd_badblock_off£t
] != 0xFF)

3694 
	`¥ötf
("Bad Block o¿Pagê%x\n", 
∑ge
);

3698 i‡(
	`memcmp
(&
chù
->
oob_poi
[
FACT_BBT_OOB_SIGNATURE
], 
oob_sig«tuª
, 
FACT_BBT_SIGNATURE_LEN
) != 0)

3704 i‡(
	`mtk_«nd_exec_ªad_∑ge
(
mtd
, 
∑ge
, mtd->
wrôesize
, 
chù
->
buf„rs
->
d©abuf
, chù->
oob_poi
))

3706 
	`¥ötf
("Signature matchedánd dataÑead!\n");

3707 
	`mem˝y
(
Á˘_bbt
, 
chù
->
buf„rs
->
d©abuf
, (
bbt_size
 <
mtd
->
wrôesize
)? bbt_size:mtd->writesize);

3708 i‡(
bbt_size
 > 
mtd
->
wrôesize
)

3709 
	`¥ötf
("Warning: factory BBT is moreÅhanáÖage\n");

3715 
	}
}

3717 
	$wrôe_Á˘_bbt
(
u32
 
∑ge
)

3719 
mtd_öfo
 *
mtd
;

3720 
«nd_chù
 *
chù
;

3721 
ªt
;

3723 
mtd
 = &
ho°
->mtd;

3724 
chù
 = &
ho°
->
«nd_chù
;

3727 
	`mem£t
(
chù
->
buf„rs
->
d©abuf
, 0xff, 
mtd
->
wrôesize
 + mtd->
oobsize
);

3728 
	`mem˝y
(
chù
->
oob_poi
 + 
FACT_BBT_OOB_SIGNATURE
, 
oob_sig«tuª
, 
FACT_BBT_SIGNATURE_LEN
);

3729 
	`mem˝y
(
chù
->
buf„rs
->
d©abuf
, 
Á˘_bbt
, 
bbt_size
);

3730 
ªt
 = 
	`mtk_«nd_exec_wrôe_∑ge
(
mtd
, 
∑ge
, mtd->
wrôesize
, 
chù
->
buf„rs
->
d©abuf
, chù->
oob_poi
);

3731 i‡(
ªt
)

3735 
	}
}

3737 
	$lﬂd_Á˘_bbt
()

3739 
mtd_öfo
 *
mtd
;

3740 
«nd_chù
 *
chù
;

3741 
i
, 
j
, 
c›y
;

3742 
∑ge
;

3743 
u32
 
tŸÆ_block
;

3744 
Á˘_bad_pos
;

3746 
mtd
 = &
ho°
->mtd;

3747 
chù
 = &
ho°
->
«nd_chù
;

3748 
tŸÆ_block
 = 1 << (
chù
->
chù_shi·
 - chù->
phys_îa£_shi·
);

3749 
bbt_size
 = 
tŸÆ_block
 >> 2;

3751 
i
 = 
tŸÆ_block
 - 1; i >—ŸÆ_block - 
FACT_BBT_BLOCK_NUM
); i--)

3753 i‡(
	`ªad_Á˘_bbt
(
i
 << (
chù
->
phys_îa£_shi·
 - chù->
∑ge_shi·
)) == 0)

3755 
	`¥ötf
("lﬂd_Á˘_bbàsuc˚s†%d\n", 
i
);

3761 
	`mem£t
(
Á˘_bbt
, 0x00, 
bbt_size
);

3764 
Á˘_bad_pos
 = 
mtd
->
wrôesize
 - (mtd->
oobsize
 - (mtd->oobsize/( mtd->writesize/512))) ;

3767 
i
 = 0; i < 
tŸÆ_block
; i++)

3771 
∑ge
 = 
i
 << (
chù
->
phys_îa£_shi·
 - chù->
∑ge_shi·
);Öage <= ((i << (chip->phys_erase_shift - chip->page_shift)) + 1) ;Öage++)

3773 i‡(
	`mtk_«nd_ªad_oob_hw
(
mtd
, 
chù
, 
∑ge
)==0)

3775 
j
 = 0; j < 
chù
->
ecc
.
œyout
->
eccbyãs
; j++)

3777 i‡(
chù
->
oob_poi
[chù->
ecc
.
œyout
->
ec˝os
[
j
]] == 0xff)

3784 i‡(
j
 =
chù
->
ecc
.
œyout
->
eccbyãs
)

3786 
	`mtk_«nd_exec_ªad_∑ge
(
mtd
, 
∑ge
, mtd->
wrôesize
, 
chù
->
buf„rs
->
d©abuf
, chù->
oob_poi
);

3787 i‡(
chù
->
buf„rs
->
d©abuf
[
Á˘_bad_pos
] != 0xff)

3790 
Á˘_bbt
[
i
 >> 2] |= 0x3 << ((i*2) & 6);

3791 
	`¥ötf
("dëe˘ bad blockáà0x%x (%d)\n", (Ë
i
, ()(
∑ge
 & 0x1)+1);

3800 
i
 = 0; i < 
bbt_size
; i++)

3802 
	`¥ötf
("%02x ", 
Á˘_bbt
[
i
]);

3803 i‡((
i
 & 0x1f) == 0x1f)

3804 
	`¥ötf
("\n");

3808 
c›y
 = 0;

3809 
i
 = 
tŸÆ_block
 - 1; i >—ŸÆ_block - 
FACT_BBT_BLOCK_NUM
); i--)

3811 i‡(
Á˘_bbt
[
i
 >> 2] & (0x3 << ((i * 2) & 6)))

3813 
	`¥ötf
("Skù block 0x%x\n", 
i
);

3818 i‡(
	`mtk_«nd_îa£_hw
(
mtd
, 
i
 << (
chù
->
phys_îa£_shi·
 - chù->
∑ge_shi·
)Ë& 
NAND_STATUS_FAIL
)

3822 i‡(
	`wrôe_Á˘_bbt
(
i
 << (
chù
->
phys_îa£_shi·
 - chù->
∑ge_shi·
)) == 0)

3823 
c›y
++;

3825 i‡(
c›y
 >
FACT_BBT_BLOCK_COPY
)

3829 i‡(
c›y
)

3831 
	`¥ötf
("wrôêÁ˘‹y BBT * %d\n", 
c›y
);

3836 
	}
}

3855 #i‡
deföed
 (
__KERNEL_NAND__
)

3856 
	$mtk_«nd_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

3858 
	`sögÀ_îa£_cmd
(
mtd_öfo
 *
mtd
, 
∑ge
);

3859 
	$mtk_«nd_¥obe
()

3863 
mtk_«nd_ho°_hw
 *
hw
;

3864 
mtd_öfo
 *
mtd
;

3865 
«nd_chù
 *nand_chip;

3866 #i‡
	`deföed
(
MTK_NAND_IOMEM
)

3867 
ªsour˚
 *
ªs
 = 
pdev
->resource;

3869 
îr
 = 0;

3870 
id
;

3871 
u32
 
ext_id
;

3872 
u8
 
ext_id1
, 
ext_id2
, 
ext_id3
;

3873 
i
;

3876 
u32
 
d©a
;

3877 
d©a
 = 
	`DRV_Reg32
(
RALINK_SYSCTL_BASE
+0x60);

3878 
d©a
 &= ~((0x3<<18)|(0x3<<16));

3879 
d©a
 |= ((0x2<<18) |(0x2<<16));

3880 
	`DRV_WrôeReg32
(
RALINK_SYSCTL_BASE
+0x60, 
d©a
);

3882 #i‡
	`deföed
 (
__KERNEL_NAND__
)

3883 
hw
 = (
mtk_«nd_ho°_hw
 *)
pdev
->
dev
.
∂©f‹m_d©a
;

3885 
hw
 = (
mtk_«nd_ho°_hw
 *)&
mt7621_«nd_hw
;

3887 
	`BUG_ON
(!
hw
);

3888 #i‡
	`deföed
(
MTK_NAND_IOMEM
)

3889 i‡(
pdev
->
num_ªsour˚s
 !4 || 
ªs
[0].
Êags
 !
IORESOURCE_MEM
 ||Ñes[1].Êag†!IORESOURCE_MEM ||Ñes[2].Êag†!
IORESOURCE_IRQ
 ||Ñes[3].flags != IORESOURCE_IRQ)

3891 
	`MSG
(
INIT
, "%s: invÆidÑesour˚Åy≥\n", 
__FUNCTION__
);

3892  -
ENODEV
;

3896 i‡(!
	`ªque°_mem_ªgi⁄
(
ªs
[0].
°¨t
,Ñes[0].
íd
 -Ñes[0].°¨à+ 1, 
pdev
->
«me
))

3898  -
EBUSY
;

3900 i‡(!
	`ªque°_mem_ªgi⁄
(
ªs
[1].
°¨t
,Ñes[1].
íd
 -Ñes[1].°¨à+ 1, 
pdev
->
«me
))

3902  -
EBUSY
;

3906 #i‡
	`deföed
 (
__KERNEL_NAND__
)

3907 
ho°
 = 
	`kzÆloc
((
mtk_«nd_ho°
), 
GFP_KERNEL
);

3909 
ho°
 = &
mtk_«nd_ho°
;

3910 
	`mem£t
(
ho°
, 0 ,(
mtk_«nd_ho°
));

3912 i‡(!
ho°
)

3914 
	`MSG
(
INIT
, "mtk_nand: failedÅoállocate device structure.\n");

3915  -
ENOMEM
;

3918 #i‡
	`deföed
 (
__BOOT_NAND__
)

3919 
loˇl_buf„r_16_Æign
 = 
NULL
;

3922 
loˇl_buf„r_16_Æign
 = 
loˇl_buf„r
 + 16 - ((
u32
)Üocal_buffer % 16);

3923 
	`¥ötk
(
KERN_INFO
 "AŒoˇã 16 byãálig√d buf„r: %p\n", 
loˇl_buf„r_16_Æign
);

3925 
ho°
->
hw
 = hw;

3928 
«nd_chù
 = &
ho°
->nand_chip;

3929 
«nd_chù
->
¥iv
 = 
ho°
;

3931 
mtd
 = &
ho°
->mtd;

3932 
mtd
->
¥iv
 = 
«nd_chù
;

3933 #i‡
	`deföed
 (
__KERNEL_NAND__
)

3934 
mtd
->
ow√r
 = 
THIS_MODULE
;

3936 
mtd
->
«me
 = "MT7621-NAND";

3938 #i‡
	`deföed
 (
ECC_ENABLE
)

3939 
hw
->
«nd_ecc_mode
 = 
NAND_ECC_HW
;

3941 
hw
->
«nd_ecc_mode
 = 
NAND_ECC_NONE
;

3945 
«nd_chù
->
IO_ADDR_R
 = (
__iomem
 *)
NFI_DATAR_REG32
;

3946 
«nd_chù
->
IO_ADDR_W
 = (
__iomem
 *)
NFI_DATAW_REG32
;

3947 
«nd_chù
->
chù_dñay
 = 20;

3948 
«nd_chù
->
ecc
.
mode
 = 
hw
->
«nd_ecc_mode
;

3950 
«nd_chù
->
ªad_byã
 = 
mtk_«nd_ªad_byã
;

3951 
«nd_chù
->
ªad_buf
 = 
mtk_«nd_ªad_buf
;

3952 
«nd_chù
->
wrôe_buf
 = 
mtk_«nd_wrôe_buf
;

3953 #ifde‡
CONFIG_MTD_NAND_VERIFY_WRITE


3954 
«nd_chù
->
vîify_buf
 = 
mtk_«nd_vîify_buf
;

3956 
«nd_chù
->
£À˘_chù
 = 
mtk_«nd_£À˘_chù
;

3957 
«nd_chù
->
dev_ªady
 = 
mtk_«nd_dev_ªady
;

3958 
«nd_chù
->
cmdfunc
 = 
mtk_«nd_comm™d_bp
;

3959 
«nd_chù
->
ecc
.
ªad_∑ge
 = 
mtk_«nd_ªad_∑ge_hwecc
;

3960 
«nd_chù
->
ecc
.
wrôe_∑ge
 = 
mtk_«nd_wrôe_∑ge_hwecc
;

3962 
«nd_chù
->
ecc
.
œyout
 = &
«nd_oob_64
;

3963 
«nd_chù
->
ecc
.
size
 = 
hw
->
«nd_ecc_size
;

3964 
«nd_chù
->
ecc
.
byãs
 = 
hw
->
«nd_ecc_byãs
;

3966 
«nd_chù
->
›ti⁄s
 = 
NAND_SKIP_BBTSCAN
;

3969 #i‡!
	`deföed
 (
__BOOT_NAND__
)

3970 
«nd_chù
->
wrôe_∑ge
 = 
mtk_«nd_wrôe_∑ge
;

3971 
«nd_chù
->
ecc
.
wrôe_oob
 = 
mtk_«nd_wrôe_oob
;

3972 
«nd_chù
->
block_m¨kbad
 = 
mtk_«nd_block_m¨kbad
;

3973 
«nd_chù
->
îa£
 = 
mtk_«nd_îa£
;

3975 
«nd_chù
->
ªad_∑ge
 = 
mtk_«nd_ªad_∑ge
;

3976 
«nd_chù
->
ecc
.
ªad_oob
 = 
mtk_«nd_ªad_oob
;

3977 
«nd_chù
->
block_bad
 = 
mtk_«nd_block_bad
;

3980 #i‡
	`deföed
(
__UBOOT_NAND__
Ë|| deföed (
__BOOT_NAND__
)

3981 
«nd_chù
->
waôfunc
 = 
mtk_«nd_waô
;

3982 
«nd_chù
->
buf„rs
 = &
chù_buf„rs
;

3983 
«nd_chù
->
›ti⁄s
 |
NAND_OWN_BUFFERS
;

3985 
	`mtk_«nd_öô_hw
(
ho°
);

3987 
«nd_chù
->
	`£À˘_chù
(
mtd
, 
NFI_DEFAULT_CS
);

3994 
«nd_chù
->
	`cmdfunc
(
mtd
, 
NAND_CMD_RESET
, -1, -1);

3996 
	`mem£t
(&
devöfo
, 0 , (
Êashdev_öfo
));

4000 
«nd_chù
->
	`cmdfunc
(
mtd
, 
NAND_CMD_READID
, 0x00, -1);

4003 
m™u_id
 = 
«nd_chù
->
	`ªad_byã
(
mtd
);

4004 
dev_id
 = 
«nd_chù
->
	`ªad_byã
(
mtd
);

4006 
ext_id1
 = 
«nd_chù
->
	`ªad_byã
(
mtd
);

4007 
ext_id2
 = 
«nd_chù
->
	`ªad_byã
(
mtd
);

4008 
ext_id3
 = 
«nd_chù
->
	`ªad_byã
(
mtd
);

4009 
ext_id
 = 
ext_id1
 << 16 | 
ext_id2
 << 8 | 
ext_id3
;

4010 
id
 = 
dev_id
 | (
m™u_id
 << 8);

4011 
	`¥ötk
("NAND ID [%02X %02X %02X %02X %02X]\n",
m™u_id
, 
dev_id
,
ext_id1
,\

4012 
ext_id2
,
ext_id3
,
ext_id
);

4014 i‡(!
	`gë_devi˚_öfo
(
id
, 
ext_id
, &
devöfo
))

4017 
u32
 
chù_mode
 = 
	`RALINK_REG
(
RALINK_SYSCTL_BASE
+0x010)&0x0F;

4019 
	`MSG
(
INIT
, "Not SupportÅhis Device! \r\n");

4021 
	`mem£t
(&
devöfo
, 0 , (
Êashdev_öfo
));

4023 
	`MSG
(
INIT
, "chù_mode=%08X\n",
chù_mode
);

4026 
devöfo
.
addr_cy˛e
 = 5;

4027 
devöfo
.
iowidth
 = 8;

4029 
chù_mode
)

4032 
devöfo
.
∑gesize
 = 2048;

4033 
devöfo
.
•¨esize
 = 128;

4034 
devöfo
.
tŸÆsize
 = 128;

4035 
devöfo
.
blocksize
 = 128;

4038 
devöfo
.
∑gesize
 = 4096;

4039 
devöfo
.
•¨esize
 = 128;

4040 
devöfo
.
tŸÆsize
 = 1024;

4041 
devöfo
.
blocksize
 = 256;

4044 
devöfo
.
∑gesize
 = 4096;

4045 
devöfo
.
•¨esize
 = 224;

4046 
devöfo
.
tŸÆsize
 = 2048;

4047 
devöfo
.
blocksize
 = 512;

4051 
devöfo
.
∑gesize
 = 2048;

4052 
devöfo
.
•¨esize
 = 64;

4053 
devöfo
.
tŸÆsize
 = 128;

4054 
devöfo
.
blocksize
 = 128;

4058 
devöfo
.
timmög£âög
 = 
NFI_DEFAULT_ACCESS_TIMING
;

4059 
devöfo
.
devcõ«me
[0] = 'U';

4060 
devöfo
.
adv™˚dmode
 = 0;

4062 
mtd
->
wrôesize
 = 
devöfo
.
∑gesize
;

4063 
mtd
->
îa£size
 = (
devöfo
.
blocksize
<<10);

4064 
mtd
->
oobsize
 = 
devöfo
.
•¨esize
;

4066 
«nd_chù
->
chùsize
 = (
devöfo
.
tŸÆsize
<<20);

4067 
«nd_chù
->
∑ge_shi·
 = 
	`ffs
(
mtd
->
wrôesize
) - 1;

4068 
«nd_chù
->
∑gemask
 = («nd_chù->
chùsize
 >>Ç™d_chù->
∑ge_shi·
) - 1;

4069 
«nd_chù
->
phys_îa£_shi·
 = 
	`ffs
(
mtd
->
îa£size
) - 1;

4070 
«nd_chù
->
chù_shi·
 = 
	`ffs
“™d_chù->
chùsize
) - 1;

4071 
«nd_chù
->
oob_poi
 =Ç™d_chù->
buf„rs
->
d©abuf
 + 
mtd
->
wrôesize
;

4072 
«nd_chù
->
badblockpos
 = 0;

4073 
«nd_chù
->
îa£_cmd
 = 
sögÀ_îa£_cmd
;

4077 i‡(
devöfo
.
∑gesize
 == 4096)

4079 
«nd_chù
->
ecc
.
œyout
 = &
«nd_oob_128
;

4080 } i‡(
devöfo
.
∑gesize
 == 2048)

4082 
«nd_chù
->
ecc
.
œyout
 = &
«nd_oob_64
;

4083 } i‡(
devöfo
.
∑gesize
 == 512)

4085 
«nd_chù
->
ecc
.
œyout
 = &
«nd_oob_16
;

4089 
«nd_chù
->
ecc
.
œyout
->
eccbyãs
 = 
devöfo
.
•¨esize
-
OOB_AVAI_PER_SECTOR
*(devöfo.
∑gesize
/
NAND_SECTOR_SIZE
);

4090 
i
=0;i<
«nd_chù
->
ecc
.
œyout
->
eccbyãs
;i++){

4091 
«nd_chù
->
ecc
.
œyout
->
ec˝os
[
i
]=
OOB_AVAI_PER_SECTOR
*(
devöfo
.
∑gesize
/
NAND_SECTOR_SIZE
)+i;

4097 
	`MSG
(
INIT
, "Suµ‹àthi†Devi˚ i¿MTKÅabÀ! %x \r\n", 
id
);

4098 
hw
->
nfi_bus_width
 = 
devöfo
.
iowidth
;

4099 
	`DRV_WrôeReg32
(
NFI_ACCCON_REG32
, 
devöfo
.
timmög£âög
);

4102 i‡(
hw
->
nfi_bus_width
 == 16)

4104 
	`MSG
(
INIT
, "%†: SëÅhê16-bô I/O sëtögs!\n", 
MODULE_NAME
);

4105 
«nd_chù
->
›ti⁄s
 |
NAND_BUSWIDTH_16
;

4107 #i‡
	`deföed
 (
__INTERNAL_USE_AHB_MODE__
Ë&& deföed (
__KERNEL_NAND__
)

4112 
îr
 = 
	`ªque°_úq
(
SURFBOARDINT_NAND
, 
mtk_«nd_úq_h™dÀr
, 
IRQF_DISABLED
,

4113 "MT7621-NAND", 
NULL
);

4115 i‡(0 !
îr
)

4117 
	`MSG
(
INIT
, "%†: Reque° IRQ faû:Éº = %d\n", 
MODULE_NAME
, 
îr
);

4118 
out
;

4121 i‡(
g_i4I¡îru±
)

4122 
	`íabÀ_úq
(
SURFBOARDINT_NAND
);

4124 
	`dißbÀ_úq
(
SURFBOARDINT_NAND
);

4127 i‡(
devöfo
.
adv™˚dmode
 & 
CACHE_READ
)

4129 
«nd_chù
->
ecc
.
ªad_mu…i_∑ge_ˇche
 = 
NULL
;

4133 
«nd_chù
->
ecc
.
ªad_mu…i_∑ge_ˇche
 = 
NULL
;

4136 
mtd
->
oobsize
 = 
devöfo
.
•¨esize
;

4137 
hw
->
nfi_cs_num
 = 1;

4140 #i‡!
	`deföed
 (
__KERNEL_NAND__
)

4141 
	`«nd_sˇn_èû
(
mtd
);

4143 i‡(
	`«nd_sˇn
(
mtd
, 
hw
->
nfi_cs_num
))

4145 
	`MSG
(
INIT
, "%†:Ç™d_sˇ¿Áû.\n", 
MODULE_NAME
);

4146 
îr
 = -
ENXIO
;

4147 
out
;

4151 
g_∑ge_size
 = 
mtd
->
wrôesize
;

4152 #i‡
	`deföed
 (
__KERNEL_NAND__
)

4153 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
ho°
);

4155 i‡(
hw
->
nfi_bus_width
 == 16)

4157 
	`NFI_SET_REG16
(
NFI_PAGEFMT_REG16
, 
PAGEFMT_DBYTE_EN
);

4160 
«nd_chù
->
	`£À˘_chù
(
mtd
, 0);

4161 #i‡
	`deföed
(
MTK_NAND_BMT
)

4162 
«nd_chù
->
chùsize
 -(
BMT_POOL_SIZE
Ë<<Ç™d_chù->
phys_îa£_shi·
;

4164 #i‡
	`deföed
(
FACT_BBT
)

4165 
«nd_chù
->
chùsize
 -(
FACT_BBT_BLOCK_COPY
Ë<<Ç™d_chù->
phys_îa£_shi·
;

4168 
mtd
->
size
 = 
«nd_chù
->
chùsize
;

4170 #ifde‡
PMT


4171 
«nd_chù
->
chùsize
 -(
PMT_POOL_SIZE
Ë<<Ç™d_chù->
phys_îa£_shi·
;

4172 
mtd
->
size
 = 
«nd_chù
->
chùsize
;

4173 
	`∑π_öô_pmt
(
mtd
, (
u8
 *Ë& 
g_exi°_P¨tôi⁄
[0]);

4174 #i‡
	`deföed
 (
__KERNEL_NAND__
)

4175 
îr
 = 
	`add_mtd_∑πôi⁄s
(
mtd
, 
g_exi°_P¨tôi⁄
, 
∑π_num
);

4179 #i‡
	`deföed
 (
__KERNEL_NAND__
)

4181 
îr
 = 
	`add_mtd_∑πôi⁄s
(
mtd
, 
g_∑sSètic_P¨tôi⁄
, 
∑π_num
);

4186 #ifde‡
_MTK_NAND_DUMMY_DRIVER_


4187 
dummy_drivî_debug
 = 0;

4189 #i‡
	`deföed
 (
__UBOOT_NAND__
)

4190 
CFG_BLOCKSIZE
 = 
mtd
->
îa£size
;

4193 #ifde‡
FACT_BBT


4195 i‡(
	`lﬂd_Á˘_bbt
() == 0)

4196 
	`¥ötf
("load fact bbt success\n");

4198 
	`¥ötf
("load fact bbt fail\n");

4201 #i‡
	`deföed
(
MTK_NAND_BMT
)

4202 i‡(!
g_bmt
)

4204 i‡(!(
g_bmt
 = 
	`öô_bmt
(
«nd_chù
, 
BMT_POOL_SIZE
)))

4206 
	`MSG
(
INIT
, "Error: init bmt failed\n");

4212 i‡(!
îr
)

4214 
	`MSG
(
INIT
, "[mtk_nand]Örobe successfully!\n");

4215 
	`MSG
(
INIT
, "mtd->wrôesize=%d mtd->oobsize=%d, mtd->îa£size=%d devöfo.iowidth=%d\n",
mtd
->
wrôesize
,mtd->
oobsize
, mtd->
îa£size
,
devöfo
.
iowidth
);

4216 
	`«nd_dißbÀ_˛ock
();

4217  
îr
;

4221 
out
:

4222 
	`MSG
(
INIT
, "[NFI] mtk_«nd_¥obêÁû,Éº = %d!\n", 
îr
);

4223 #i‡
	`deföed
 (
__KERNEL_NAND__
)

4224 
	`«nd_ªÀa£
(
mtd
);

4225 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
NULL
);

4226 
	`k‰ì
(
ho°
);

4228 
	`«nd_dißbÀ_˛ock
();

4229  
îr
;

4230 
	}
}

4231 #i‡
deföed
 (
__KERNEL_NAND__
)

4248 
	$mtk_«nd_su•íd
(
∂©f‹m_devi˚
 *
pdev
, 
pm_mesßge_t
 
°©e
)

4250 i‡(
	`DRV_Reg32
(
NFI_STA_REG32
Ë& 
STA_NAND_BUSY
)

4252 
	`MSG
(
POWERCTL
, "[NFI] Busy, Suspend Fail !\n");

4256 
	`MSG
(
POWERCTL
, "[NFI] Suspend !\n");

4258 
	}
}

4276 
	$mtk_«nd_ªsume
(
∂©f‹m_devi˚
 *
pdev
)

4278 
	`MSG
(
POWERCTL
, "[NFI] Resume !\n");

4280 
	}
}

4299 
__devexô
 
	$mtk_«nd_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

4301 
mtk_«nd_ho°
 *
ho°
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

4302 
mtd_öfo
 *
mtd
 = &
ho°
->mtd;

4304 
	`«nd_ªÀa£
(
mtd
);

4306 
	`k‰ì
(
ho°
);

4308 
	`«nd_dißbÀ_˛ock
();

4311 
	}
}

4316 #i‡(
NAND_OTP_SUPPORT
 && 
SAMSUNG_OTP_SUPPORT
)

4317 
	$ßmsung_OTPQuîyLígth
(*
QLígth
)

4319 *
QLígth
 = 
SAMSUNG_OTP_PAGE_NUM
 * 
g_∑ge_size
;

4321 
	}
}

4323 
	$ßmsung_OTPRód
(
PageAddr
, *
Buf„rPå
, *
S∑ªPå
)

4325 
mtd_öfo
 *
mtd
 = &
ho°
->mtd;

4326 
rowaddr
, 
cﬁaddr
;

4327 
u4Size
 = 
g_∑ge_size
;

4328 
timeout
 = 0xFFFF;

4329 
bRë
;

4330 
£c_num
 = 
mtd
->
wrôesize
 >> 9;

4332 i‡(
PageAddr
 >
SAMSUNG_OTP_PAGE_NUM
)

4334  
OTP_ERROR_OVERSCOPE
;

4338 
cﬁaddr
 = 0x00000000;

4339 
rowaddr
 = 
Samsung_OTP_Page
[
PageAddr
];

4341 
	`MSG
(
OTP
, "[%s]:(COLADDRË[0x%08x]/(ROWADDR)[0x%08x]\n", 
__func__
, 
cﬁaddr
, 
rowaddr
);

4345 
	`«nd_gë_devi˚
((
«nd_chù
 *)
mtd
->
¥iv
, mtd, 
FL_READING
);

4346 
	`mtk_«nd_ª£t
();

4347 ()
	`mtk_«nd_£t_comm™d
(0x30);

4348 
	`mtk_«nd_ª£t
();

4349 ()
	`mtk_«nd_£t_comm™d
(0x65);

4351 
	`MSG
(
OTP
, "[%s]: SèπÅÿªad d©®‰om OTPáªa\n", 
__func__
);

4353 i‡(!
	`mtk_«nd_ª£t
())

4355 
bRë
 = 
OTP_ERROR_RESET
;

4356 
˛ónup
;

4359 
	`mtk_«nd_£t_mode
(
CNFG_OP_READ
);

4360 
	`NFI_SET_REG16
(
NFI_CNFG_REG16
, 
CNFG_READ_EN
);

4361 
	`DRV_WrôeReg16
(
NFI_CON_REG16
, 
£c_num
 << 
CON_NFI_SEC_SHIFT
);

4363 
	`DRV_WrôeReg32
(
NFI_STRADDR_REG32
, 
	`__vút_to_phys
(
Buf„rPå
));

4364 
	`NFI_SET_REG16
(
NFI_CNFG_REG16
, 
CNFG_AHB
);

4366 i‡(
g_bHwEcc
)

4368 
	`NFI_SET_REG16
(
NFI_CNFG_REG16
, 
CNFG_HW_ECC_EN
);

4371 
	`NFI_CLN_REG16
(
NFI_CNFG_REG16
, 
CNFG_HW_ECC_EN
);

4373 
	`mtk_«nd_£t_autof‹m©
(
åue
);

4374 i‡(
g_bHwEcc
)

4376 
	`ECC_Decode_Sèπ
();

4378 i‡(!
	`mtk_«nd_£t_comm™d
(
NAND_CMD_READ0
))

4380 
bRë
 = 
OTP_ERROR_BUSY
;

4381 
˛ónup
;

4384 i‡(!
	`mtk_«nd_£t_addªss
(
cﬁaddr
, 
rowaddr
, 2, 3))

4386 
bRë
 = 
OTP_ERROR_BUSY
;

4387 
˛ónup
;

4390 i‡(!
	`mtk_«nd_£t_comm™d
(
NAND_CMD_READSTART
))

4392 
bRë
 = 
OTP_ERROR_BUSY
;

4393 
˛ónup
;

4396 i‡(!
	`mtk_«nd_°©us_ªady
(
STA_NAND_BUSY
))

4398 
bRë
 = 
OTP_ERROR_BUSY
;

4399 
˛ónup
;

4402 i‡(!
	`mtk_«nd_ªad_∑ge_d©a
(
mtd
, 
Buf„rPå
, 
u4Size
))

4404 
bRë
 = 
OTP_ERROR_BUSY
;

4405 
˛ónup
;

4408 i‡(!
	`mtk_«nd_°©us_ªady
(
STA_NAND_BUSY
))

4410 
bRë
 = 
OTP_ERROR_BUSY
;

4411 
˛ónup
;

4414 
	`mtk_«nd_ªad_fdm_d©a
(
S∑ªPå
, 
£c_num
);

4416 
	`mtk_«nd_°›_ªad
();

4418 
	`MSG
(
OTP
, "[%s]: EndÅÿªad d©®‰om OTPáªa\n", 
__func__
);

4420 
bRë
 = 
OTP_SUCCESS
;

4422 
˛ónup
:

4424 
	`mtk_«nd_ª£t
();

4425 ()
	`mtk_«nd_£t_comm™d
(0xFF);

4426 
	`«nd_ªÀa£_devi˚
(
mtd
);

4427  
bRë
;

4428 
	}
}

4430 
	$ßmsung_OTPWrôe
(
PageAddr
, *
Buf„rPå
, *
S∑ªPå
)

4432 
mtd_öfo
 *
mtd
 = &
ho°
->mtd;

4433 
rowaddr
, 
cﬁaddr
;

4434 
u4Size
 = 
g_∑ge_size
;

4435 
timeout
 = 0xFFFF;

4436 
bRë
;

4437 
£c_num
 = 
mtd
->
wrôesize
 >> 9;

4439 i‡(
PageAddr
 >
SAMSUNG_OTP_PAGE_NUM
)

4441  
OTP_ERROR_OVERSCOPE
;

4445 
cﬁaddr
 = 0x00000000;

4446 
rowaddr
 = 
Samsung_OTP_Page
[
PageAddr
];

4448 
	`MSG
(
OTP
, "[%s]:(COLADDRË[0x%08x]/(ROWADDR)[0x%08x]\n", 
__func__
, 
cﬁaddr
, 
rowaddr
);

4449 
	`«nd_gë_devi˚
((
«nd_chù
 *)
mtd
->
¥iv
, mtd, 
FL_READING
);

4450 
	`mtk_«nd_ª£t
();

4451 ()
	`mtk_«nd_£t_comm™d
(0x30);

4452 
	`mtk_«nd_ª£t
();

4453 ()
	`mtk_«nd_£t_comm™d
(0x65);

4455 
	`MSG
(
OTP
, "[%s]: SèπÅÿwrôêd©®tÿOTPáªa\n", 
__func__
);

4457 i‡(!
	`mtk_«nd_ª£t
())

4459 
bRë
 = 
OTP_ERROR_RESET
;

4460 
˛ónup
;

4463 
	`mtk_«nd_£t_mode
(
CNFG_OP_PRGM
);

4465 
	`NFI_CLN_REG16
(
NFI_CNFG_REG16
, 
CNFG_READ_EN
);

4467 
	`DRV_WrôeReg16
(
NFI_CON_REG16
, 
£c_num
 << 
CON_NFI_SEC_SHIFT
);

4469 
	`DRV_WrôeReg32
(
NFI_STRADDR_REG32
, 
	`__vút_to_phys
(
Buf„rPå
));

4470 
	`NFI_SET_REG16
(
NFI_CNFG_REG16
, 
CNFG_AHB
);

4472 i‡(
g_bHwEcc
)

4474 
	`NFI_SET_REG16
(
NFI_CNFG_REG16
, 
CNFG_HW_ECC_EN
);

4477 
	`NFI_CLN_REG16
(
NFI_CNFG_REG16
, 
CNFG_HW_ECC_EN
);

4479 
	`mtk_«nd_£t_autof‹m©
(
åue
);

4481 
	`ECC_Encode_Sèπ
();

4483 i‡(!
	`mtk_«nd_£t_comm™d
(
NAND_CMD_SEQIN
))

4485 
bRë
 = 
OTP_ERROR_BUSY
;

4486 
˛ónup
;

4489 i‡(!
	`mtk_«nd_£t_addªss
(
cﬁaddr
, 
rowaddr
, 2, 3))

4491 
bRë
 = 
OTP_ERROR_BUSY
;

4492 
˛ónup
;

4495 i‡(!
	`mtk_«nd_°©us_ªady
(
STA_NAND_BUSY
))

4497 
bRë
 = 
OTP_ERROR_BUSY
;

4498 
˛ónup
;

4501 
	`mtk_«nd_wrôe_fdm_d©a
((
«nd_chù
 *)
mtd
->
¥iv
, 
Buf„rPå
, 
£c_num
);

4502 ()
	`mtk_«nd_wrôe_∑ge_d©a
(
mtd
, 
Buf„rPå
, 
u4Size
);

4503 i‡(!
	`mtk_«nd_check_RW_cou¡
(
u4Size
))

4505 
	`MSG
(
OTP
, "[%s]: Check RW cou¡Åimeouà!\n", 
__func__
);

4506 
bRë
 = 
OTP_ERROR_TIMEOUT
;

4507 
˛ónup
;

4510 
	`mtk_«nd_°›_wrôe
();

4511 ()
	`mtk_«nd_£t_comm™d
(
NAND_CMD_PAGEPROG
);

4512 
	`DRV_Reg32
(
NFI_STA_REG32
Ë& 
STA_NAND_BUSY
) ;

4514 
bRë
 = 
OTP_SUCCESS
;

4516 
	`MSG
(
OTP
, "[%s]: EndÅÿwrôêd©®tÿOTPáªa\n", 
__func__
);

4518 
˛ónup
:

4519 
	`mtk_«nd_ª£t
();

4520 ()
	`mtk_«nd_£t_comm™d
(0xFF);

4521 
	`«nd_ªÀa£_devi˚
(
mtd
);

4522  
bRë
;

4523 
	}
}

4525 
	$mt_Ÿp_›í
(
öode
 *öode, 
fûe
 *
fûp
)

4527 
	`MSG
(
OTP
, "[%s]:(MAJOR)%d:(MINOR)%d\n", 
__func__
, 
	`MAJOR
(
öode
->
i_rdev
), 
	`MINOR
(inode->i_rdev));

4528 
fûp
->
¥iv©e_d©a
 = (*)
OTP_MAGIC_NUM
;

4530 
	}
}

4532 
	$mt_Ÿp_ªÀa£
(
öode
 *öode, 
fûe
 *
fûp
)

4534 
	`MSG
(
OTP
, "[%s]:(MAJOR)%d:(MINOR)%d\n", 
__func__
, 
	`MAJOR
(
öode
->
i_rdev
), 
	`MINOR
(inode->i_rdev));

4536 
	}
}

4538 
	$mt_Ÿp_ac˚ss
(
ac˚ss_ty≥
, 
off£t
, *
buff_±r
, 
Àngth
, *
°©us
)

4540 
i
 = 0, 
ªt
 = 0;

4541 *
BufAddr
 = (*)
buff_±r
;

4542 
PageAddr
, 
Ac˚ssLígth
 = 0;

4543 
Sètus
 = 0;

4545 *
p_D_Buff
 = 
NULL
;

4546 
S_Buff
[64];

4548 i‡(!(
p_D_Buff
 = 
	`kmÆloc
(
g_∑ge_size
, 
GFP_KERNEL
)))

4550 
ªt
 = -
ENOMEM
;

4551 *
°©us
 = 
OTP_ERROR_NOMEM
;

4552 
exô
;

4555 
	`MSG
(
OTP
, "[%s]: %†(0x%xËÀngth:(%d byãsË!\n", 
__func__
, 
ac˚ss_ty≥
 ? "WRITE" : "READ", 
off£t
, 
Àngth
);

4559 
PageAddr
 = 
off£t
 / 
g_∑ge_size
;

4560 i‡(
FS_OTP_READ
 =
ac˚ss_ty≥
)

4562 
	`mem£t
(
p_D_Buff
, 0xff, 
g_∑ge_size
);

4563 
	`mem£t
(
S_Buff
, 0xff, (() * 64));

4565 
	`MSG
(
OTP
, "[%s]: Ród Ac˚s†o‡∑gê(%d)\n", 
__func__
, 
PageAddr
);

4567 
Sètus
 = 
g_mtk_Ÿp_fuc
.
	`OTPRód
(
PageAddr
, 
p_D_Buff
, &
S_Buff
);

4568 *
°©us
 = 
Sètus
;

4570 i‡(
OTP_SUCCESS
 !
Sètus
)

4572 
	`MSG
(
OTP
, "[%s]: Ród sètu†(%d)\n", 
__func__
, 
Sètus
);

4576 
Ac˚ssLígth
 = 
g_∑ge_size
 - (
off£t
 % g_page_size);

4578 i‡(
Àngth
 >
Ac˚ssLígth
)

4580 
	`mem˝y
(
BufAddr
, (
p_D_Buff
 + (
off£t
 % 
g_∑ge_size
)), 
Ac˚ssLígth
);

4584 
	`mem˝y
(
BufAddr
, (
p_D_Buff
 + (
off£t
 % 
g_∑ge_size
)), 
Àngth
);

4586 } i‡(
FS_OTP_WRITE
 =
ac˚ss_ty≥
)

4588 
Ac˚ssLígth
 = 
g_∑ge_size
 - (
off£t
 % g_page_size);

4589 
	`mem£t
(
p_D_Buff
, 0xff, 
g_∑ge_size
);

4590 
	`mem£t
(
S_Buff
, 0xff, (() * 64));

4592 i‡(
Àngth
 >
Ac˚ssLígth
)

4594 
	`mem˝y
((
p_D_Buff
 + (
off£t
 % 
g_∑ge_size
)), 
BufAddr
, 
Ac˚ssLígth
);

4598 
	`mem˝y
((
p_D_Buff
 + (
off£t
 % 
g_∑ge_size
)), 
BufAddr
, 
Àngth
);

4601 
Sètus
 = 
g_mtk_Ÿp_fuc
.
	`OTPWrôe
(
PageAddr
, 
p_D_Buff
, &
S_Buff
);

4602 *
°©us
 = 
Sètus
;

4604 i‡(
OTP_SUCCESS
 !
Sètus
)

4606 
	`MSG
(
OTP
, "[%s]: Wrôê°©u†(%d)\n", 
__func__
, 
Sètus
);

4611 
	`MSG
(
OTP
, "[%s]: Eº‹,ÇŸÉôhîÑódÇ‹ wrôê›î©i⁄†!\n", 
__func__
);

4615 
off£t
 +
Ac˚ssLígth
;

4616 
BufAddr
 +
Ac˚ssLígth
;

4617 i‡(
Àngth
 <
Ac˚ssLígth
)

4619 
Àngth
 = 0;

4623 
Àngth
 -
Ac˚ssLígth
;

4624 
	`MSG
(
OTP
, "[%s]: Remaöög %†(%dË!\n", 
__func__
, 
ac˚ss_ty≥
 ? "WRITE" : "READ", 
Àngth
);

4627 
îr‹
:

4628 
	`k‰ì
(
p_D_Buff
);

4629 
exô
:

4630  
ªt
;

4631 
	}
}

4633 
	$mt_Ÿp_io˘l
(
fûe
 *fûe, 
cmd
, 
¨g
)

4635 
ªt
 = 0, 
i
 = 0;

4636 *
pbuf
 = 
NULL
;

4638 
__u£r
 *
u¨g
 = (__u£∏*)
¨g
;

4639 
Ÿp_˘l
 
Ÿp˘l
;

4642 
	`•ö_lock
(&
g_OTPLock
);

4644 i‡(
	`c›y_‰om_u£r
(&
Ÿp˘l
, 
u¨g
, (
Ÿp_˘l
)))

4646 
ªt
 = -
EFAULT
;

4647 
exô
;

4650 i‡(
Ál£
 =
g_bInôD⁄e
)

4652 
	`MSG
(
OTP
, "ERROR: NAND Flash Not initialized !!\n");

4653 
ªt
 = -
EFAULT
;

4654 
exô
;

4657 i‡(!(
pbuf
 = 
	`kmÆloc
((Ë* 
Ÿp˘l
.
Lígth
, 
GFP_KERNEL
)))

4659 
ªt
 = -
ENOMEM
;

4660 
exô
;

4663 
cmd
)

4665 
OTP_GET_LENGTH
:

4666 
	`MSG
(
OTP
, "OTP IOCTL: OTP_GET_LENGTH\n");

4667 
g_mtk_Ÿp_fuc
.
	`OTPQuîyLígth
(&
Ÿp˘l
.
QLígth
);

4668 
Ÿp˘l
.
°©us
 = 
OTP_SUCCESS
;

4669 
	`MSG
(
OTP
, "OTP IOCTL: ThêLígth i†%d\n", 
Ÿp˘l
.
QLígth
);

4671 
OTP_READ
:

4672 
	`MSG
(
OTP
, "OTP IOCTL: OTP_READ Off£t(0x%x), Lígth(0x%xË\n", 
Ÿp˘l
.
Off£t
, oç˘l.
Lígth
);

4673 
	`mem£t
(
pbuf
, 0xff, (Ë* 
Ÿp˘l
.
Lígth
);

4675 
	`mt_Ÿp_ac˚ss
(
FS_OTP_READ
, 
Ÿp˘l
.
Off£t
, 
pbuf
, oç˘l.
Lígth
, &Ÿp˘l.
°©us
);

4677 i‡(
	`c›y_to_u£r
(
Ÿp˘l
.
Buf„rPå
, 
pbuf
, ((Ë* oç˘l.
Lígth
)))

4679 
	`MSG
(
OTP
, "OTP IOCTL: CopyÅo user buffer Error !\n");

4680 
îr‹
;

4683 
OTP_WRITE
:

4684 
	`MSG
(
OTP
, "OTP IOCTL: OTP_WRITE Off£t(0x%x), Lígth(0x%xË\n", 
Ÿp˘l
.
Off£t
, oç˘l.
Lígth
);

4685 i‡(
	`c›y_‰om_u£r
(
pbuf
, 
Ÿp˘l
.
Buf„rPå
, ((Ë* oç˘l.
Lígth
)))

4687 
	`MSG
(
OTP
, "OTP IOCTL: Copy from user buffer Error !\n");

4688 
îr‹
;

4690 
	`mt_Ÿp_ac˚ss
(
FS_OTP_WRITE
, 
Ÿp˘l
.
Off£t
, 
pbuf
, oç˘l.
Lígth
, &Ÿp˘l.
°©us
);

4693 
ªt
 = -
EINVAL
;

4696 
ªt
 = 
	`c›y_to_u£r
(
u¨g
, &
Ÿp˘l
, (
Ÿp_˘l
));

4698 
îr‹
:

4699 
	`k‰ì
(
pbuf
);

4700 
exô
:

4701 
	`•ö_u∆ock
(&
g_OTPLock
);

4702  
ªt
;

4703 
	}
}

4705 
fûe_›î©i⁄s
 
	g«nd_Ÿp_f›s
 = {

4706 .
ow√r
 = 
THIS_MODULE
,

4707 .
	gu∆ocked_io˘l
 = 
mt_Ÿp_io˘l
,

4708 .
	g›í
 = 
mt_Ÿp_›í
,

4709 .
	gªÀa£
 = 
mt_Ÿp_ªÀa£
,

4712 
miscdevi˚
 
	g«nd_Ÿp_dev
 = {

4713 .
mö‹
 = 
MISC_DYNAMIC_MINOR
,

4714 .
	g«me
 = "otp",

4715 .
	gf›s
 = &
«nd_Ÿp_f›s
,

4719 #i‡
deföed
 (
__KERNEL_NAND__
)

4723 
∂©f‹m_drivî
 
	gmtk_«nd_drivî
 = {

4724 .
¥obe
 = 
mtk_«nd_¥obe
,

4725 .
	gªmove
 = 
mtk_«nd_ªmove
,

4726 .
	gsu•íd
 = 
mtk_«nd_su•íd
,

4727 .
	gªsume
 = 
mtk_«nd_ªsume
,

4728 .
	gdrivî
 = {

4729 .
«me
 = "MT7621-NAND",

4730 .
	gow√r
 = 
THIS_MODULE
,

4750 
__öô
 
	$mtk_«nd_öô
()

4752 
¥oc_dú_íåy
 *
íåy
;

4753 #i‡
	`deföed
 (
__INTERNAL_USE_AHB_MODE__
)

4754 
g_i4I¡îru±
 = 1;

4756 
g_i4I¡îru±
 = 0;

4759 #i‡
NAND_OTP_SUPPORT


4760 
îr
 = 0;

4761 
	`MSG
(
OTP
, "OTP:Ñegister NAND OTP device ...\n");

4762 
îr
 = 
	`misc_ªgi°î
(&
«nd_Ÿp_dev
);

4763 i‡(
	`u∆ikñy
(
îr
))

4765 
	`MSG
(
OTP
, "OTP: failedÅoÑegister NAND OTP device!\n");

4766  
îr
;

4768 
	`•ö_lock_öô
(&
g_OTPLock
);

4771 #i‡(
NAND_OTP_SUPPORT
 && 
SAMSUNG_OTP_SUPPORT
)

4772 
g_mtk_Ÿp_fuc
.
OTPQuîyLígth
 = 
ßmsung_OTPQuîyLígth
;

4773 
g_mtk_Ÿp_fuc
.
OTPRód
 = 
ßmsung_OTPRód
;

4774 
g_mtk_Ÿp_fuc
.
OTPWrôe
 = 
ßmsung_OTPWrôe
;

4777 
íåy
 = 
	`¸óã_¥oc_íåy
(
PROCNAME
, 0666, 
NULL
);

4778 i‡(
íåy
 =
NULL
)

4780 
	`MSG
(
INIT
, "MediaTek Nand : unableÅo create /procÉntry\n");

4781  -
ENOMEM
;

4783 
íåy
->
ªad_¥oc
 = 
mtk_«nd_¥oc_ªad
;

4784 
íåy
->
wrôe_¥oc
 = 
mtk_«nd_¥oc_wrôe
;

4786 
	`¥ötk
("MedüTek N™d drivî inô, vîsi⁄ %s\n", 
VERSION
);

4788  
	`∂©f‹m_drivî_ªgi°î
(&
mtk_«nd_drivî
);

4789 
	}
}

4807 
__exô
 
	$mtk_«nd_exô
()

4809 
	`MSG
(
INIT
, "MedüTek N™d drivîÉxô, vîsi⁄ %s\n", 
VERSION
);

4810 #i‡
NAND_OTP_SUPPORT


4811 
	`misc_dîegi°î
(&
«nd_Ÿp_dev
);

4814 #ifde‡
SAMSUNG_OTP_SUPPORT


4815 
g_mtk_Ÿp_fuc
.
OTPQuîyLígth
 = 
NULL
;

4816 
g_mtk_Ÿp_fuc
.
OTPRód
 = 
NULL
;

4817 
g_mtk_Ÿp_fuc
.
OTPWrôe
 = 
NULL
;

4820 
	`∂©f‹m_drivî_uƒegi°î
(&
mtk_«nd_drivî
);

4821 
	`ªmove_¥oc_íåy
(
PROCNAME
, 
NULL
);

4822 
	}
}

4824 
moduÀ_öô
(
mtk_«nd_öô
);

4825 
moduÀ_exô
(
mtk_«nd_exô
);

4826 
MODULE_LICENSE
("GPL");

4829 #i‡
deföed
(
__UBOOT_NAND__
Ë|| deföed (
__BOOT_NAND__
)

4830 
	$ø«nd_ªad
(*
buf
, 
‰om
, 
d©Æí
)

4832 
∑ge
, 
i
 = 0;

4833 
size_t
 
ªéí
 = 0;

4834 
loff_t
 
addr
 = 
‰om
;

4835 * 
buf„rs
, *
buf„rs_‹ig
;

4836 
mtd_öfo
 *
mtd
;

4837 
«nd_chù
 *nand_chip;

4839 i‡(
buf
 == 0)

4842 
mtd
 = &
ho°
->mtd;

4843 
«nd_chù
 = &
ho°
->nand_chip;

4845 
buf„rs_‹ig
 = (
u8
 *)
	`mÆloc
(
mtd
->
wrôesize
 + mtd->
oobsize
 + 32);

4848 i‡(
buf„rs_‹ig
 =
NULL
)

4851 
buf„rs
 = (((
u32
)
buf„rs_‹ig
 + 15)/16)*16;

4854 
d©Æí
) {

4855 
Àn
;

4856 
ªt
;

4857 
offs
;

4858 
∑ge
 = ()(
addr
 >> 
«nd_chù
->
∑ge_shi·
);

4859 #ifde‡
FACT_BBT


4860 i‡(
	`is_Á˘_bad
(
∑ge
)) {

4861 
	`¥ötf
("%s: skùÑódögá fa˘ bad block %x ->", 
__func__
, ()
addr
);

4862 
addr
 +
mtd
->
îa£size
;

4863 
	`¥ötf
(" %x\n", ()
addr
);

4867 #ifde‡
CONFIG_BADBLOCK_CHECK


4868 
ªt
 = 
	`mtk_«nd_block_bad_hw
(
mtd
, 
addr
);

4870 i‡(
ªt
) {

4871 
	`¥ötf
("%s: skùÑódögá bad block %x ->", 
__func__
, ()
addr
);

4872 
addr
 +
mtd
->
îa£size
;

4873 
	`¥ötf
(" %x\n", ()
addr
);

4878 i‡((
d©Æí
 > 
mtd
->
wrôesize
Ë&& ((
∑ge
 & 0x1f) == 0))

4879 
	`¥ötf
(".");

4883 
	`mtk_«nd_comm™d_bp
(
mtd
, 
NAND_CMD_READ0
, 0, 
∑ge
);

4886 
ªt
 = 
	`mtk_«nd_ªad_∑ge
(
mtd
, (
«nd_chù
 *)&
ho°
->«nd_chù, 
buf„rs
, 
∑ge
);

4888 i‡(
ªt
)

4890 
addr
 +
mtd
->
îa£size
;

4891 
	`¥ötf
("jum∞tÿ%x\n", ()
addr
);

4895 
offs
 = 
addr
 & (
mtd
->
wrôesize
-1);

4896 
Àn
 = 
	`mö
(
d©Æí
, 
mtd
->
wrôesize
 - 
offs
);

4898 i‡(
buf
 && 
Àn
 > 0) {

4899 
	`mem˝y
(
buf
, 
buf„rs
 + 
offs
, 
Àn
);

4901 
buf
 +
Àn
;

4902 
d©Æí
 -
Àn
;

4903 
ªéí
 +
Àn
;

4908 
addr
 = (
∑ge
+1Ë<< (
«nd_chù
->
∑ge_shi·
);

4910 i‡(
d©Æí
 > (
mtd
->
wrôesize
 + mtd->
oobsize
))

4911 
	`¥ötf
("\n");

4912 #i‡!
	`deföed
 (
__BOOT_NAND__
)

4913 
	`‰ì
(
buf„rs_‹ig
);

4915  
ªéí
;

4916 
	}
}

4918 #i‡
deföed
(
__UBOOT_NAND__
)

4919 
	$ø«nd_îa£
(
offs
, 
u32
 
Àn
)

4921 
∑ge
, 
°©us
;

4922 
ªt
 = 0;

4923 
ªsu…
;

4924 
mtd_öfo
 *
mtd
;

4925 
«nd_chù
 *nand_chip;

4926 
lowÀvñ_îa£
 = 0;

4928 
	`ø_dbg
("%s: sèπ:%x,Üí:%x \n", 
__func__
, 
offs
, 
Àn
);

4930 
mtd
 = &
ho°
->mtd;

4931 
«nd_chù
 = &
ho°
->nand_chip;

4933 
Àn
 = 
	`max
÷í, 
mtd
->
îa£size
);

4935 
	#BLOCK_ALIGNED
(
a
Ë(◊Ë& (
mtd
->
îa£size
 - 1))

	)

4937 i‡(
	`BLOCK_ALIGNED
(
offs
Ë|| BLOCK_ALIGNED(
Àn
)) {

4938 
	`ø_dbg
("%s:Éø£ blockÇŸálig√d,áddr:%xÜí:%x %x\n", 
__func__
, 
offs
, 
Àn
, 
mtd
->
îa£size
);

4942 
Àn
) {

4943 
∑ge
 = ()(
offs
 >> 
«nd_chù
->
∑ge_shi·
);

4944 #ifde‡
FACT_BBT


4945 i‡(
	`is_Á˘_bad
(
∑ge
)) {

4946 
	`¥ötf
("%s:áâem±Åÿîa£á fa˘ bad blockáà0x%08x\n", 
__func__
, 
offs
);

4947 
ªt
 ++;

4948 
offs
 +
mtd
->
îa£size
;

4953 #ifde‡
CONFIG_BADBLOCK_CHECK


4955 
ªsu…
 = 
	`mtk_«nd_block_bad_hw
(
mtd
, 
offs
);

4956 i‡(
ªsu…
) {

4957 
	`¥ötf
("%s:áâem±Åÿîa£á bad blockáà0x%08x\n", 
__func__
, 
offs
);

4958 
ªt
++;

4959 
offs
 +
mtd
->
îa£size
;

4964 
°©us
 = 
	`mtk_«nd_îa£
(
mtd
, 
∑ge
);

4967 i‡(
°©us
 & 
NAND_STATUS_FAIL
) {

4968 
	`¥ötf
("%s: faûedÉø£,Öagê0x%08x sètus=%08X\n", 
__func__
, 
∑ge
, 
°©us
);

4970 
ªt
 = -1;

4972 
	`¥ötf
(".");

4974 
Àn
 -
mtd
->
îa£size
;

4975 
offs
 +
mtd
->
îa£size
;

4978  
ªt
;

4979 
	}
}

4981 
	$ø«nd_wrôe
(*
buf
, 
to
, 
d©Æí
)

4983 
∑ge
, 
i
 = 0;

4984 
size_t
 
ªéí
 = 0;

4985 
addr
 = 
to
;

4986 * 
buf„rs
, *
buf„rs_‹ig
;

4987 
mtd_öfo
 *
mtd
;

4988 
«nd_chù
 *nand_chip;

4990 
mtd
 = &
ho°
->mtd;

4991 
«nd_chù
 = &
ho°
->nand_chip;

4993 i‡(
buf
 == 0)

4994 
d©Æí
 = 0;

4996 
buf„rs_‹ig
 = (
u8
 *)
	`mÆloc
(
mtd
->
wrôesize
 + mtd->
oobsize
 + 32);

4997 
	`mem£t
(
buf„rs_‹ig
, 0x0ff, 
mtd
->
wrôesize
 + mtd->
oobsize
 + 32);

4998 i‡(
buf„rs_‹ig
 =
NULL
)

5001 
buf„rs
 = (((
u32
)
buf„rs_‹ig
 + 15)/16)*16;

5003 
d©Æí
) {

5004 
Àn
;

5005 
ªt
;

5006 
offs
;

5008 
∑ge
 = ()(
addr
 >> 
«nd_chù
->
∑ge_shi·
);

5009 #ifde‡
FACT_BBT


5010 i‡(
	`is_Á˘_bad
(
∑ge
)) {

5011 
addr
 +
mtd
->
îa£size
;

5015 
	`mem£t
(
buf„rs_‹ig
, 0x0ff, 
mtd
->
wrôesize
 + mtd->
oobsize
 + 32);

5018 
offs
 = 
addr
 & (
mtd
->
wrôesize
-1);

5021 
Àn
 = 
	`mö
(
d©Æí
, 
mtd
->
wrôesize
 - 
offs
);

5023 i‡(
buf
 && 
Àn
 > 0) {

5024 
	`mem˝y
(
buf„rs
 + 
offs
, 
buf
, 
Àn
);

5026 
buf
 +
Àn
;

5027 
d©Æí
 -
Àn
;

5028 
ªéí
 +
Àn
;

5030 
ªt
 = 
	`mtk_«nd_wrôe_∑ge
(
mtd
, 
«nd_chù
, 
buf„rs
, 
∑ge
, 0, 0);

5032 i‡(
ªt
) {

5033 
	`‰ì
(
buf„rs_‹ig
);

5037 #ifde‡
CONFIG_BADBLOCK_CHECK


5038 
	`mtk_«nd_comm™d_bp
(
mtd
, 
NAND_CMD_READ0
, 0, 
∑ge
);

5040 
ªt
 = 
	`mtk_«nd_vîify_buf
(
mtd
, 
buf„rs
, 
Àn
);

5041 i‡(
ªt
) {

5042 
	`mtk_«nd_block_m¨kbad
(
mtd
, 
addr
);

5043 
	`‰ì
(
buf„rs_‹ig
);

5048 
addr
 = (
∑ge
+1Ë<< (
«nd_chù
->
∑ge_shi·
);

5050 
	`‰ì
(
buf„rs_‹ig
);

5051  
ªéí
;

5052 
	}
}

5054 
	$ø«nd_îa£_wrôe
(*
buf
, 
offs
, 
cou¡
)

5056 
blocksize
;

5057 
blockmask
;

5058 
rc
;

5059 
mtd_öfo
 *
mtd
;

5060 
«nd_chù
 *nand_chip;

5062 
mtd
 = &
ho°
->mtd;

5063 
«nd_chù
 = &
ho°
->nand_chip;

5064 
blocksize
 = 
mtd
->
îa£size
;

5065 
blockmask
 = 
blocksize
 - 1;

5067 i‡((
uöt64_t
)
cou¡
 > (
«nd_chù
->
chùsize
 - (uöt64_t)(
CFG_BOOTLOADER_SIZE
 + 
CFG_CONFIG_SIZE
 + 
CFG_FACTORY_SIZE
))) {

5068 
	`¥ötf
("Ab‹t: imagêsizêœrgîÅh™ %Œd!\n\n", 
«nd_chù
->
chùsize
 -

5069 (
uöt64_t
)(
CFG_BOOTLOADER_SIZE
 + 
CFG_CONFIG_SIZE
 + 
CFG_FACTORY_SIZE
));

5073 
cou¡
 > 0) {

5074 
	#BLOCK_ALIGNED
(
a
Ë(◊Ë& (
blocksize
 - 1))

	)

5075 
i
;

5076 i‡(
	`BLOCK_ALIGNED
(
offs
Ë|| (
cou¡
 < 
blocksize
))

5078 *
block
;

5079 
põ˚
, 
blockaddr
;

5080 
põ˚_size
;

5081 *
block_‹ig
;

5083 
block_‹ig
 = 
	`mÆloc
(
blocksize
+64);

5084 i‡(!
block_‹ig
) {

5085 
	`¥ötf
("%s: mÆlo¯block faûed,blocksize=%d\n", 
__func__
,
blocksize
);

5089 
block
 = (((
u32
)
block_‹ig
+15)/16)*16;

5090 
blockaddr
 = 
offs
 & ~
blockmask
;

5091 
åy_√xt_0
:

5092 i‡(
	`ø«nd_ªad
(
block
, 
blockaddr
, 
blocksize
) != blocksize) {

5093 
	`¥ötf
("%s :Ñanand_read failed\n");

5094 
	`‰ì
(
block_‹ig
);

5098 
põ˚
 = 
offs
 & 
blockmask
;

5099 
põ˚_size
 = 
	`mö
(
cou¡
, 
blocksize
 - 
põ˚
);

5100 
	`mem˝y
(
block
 + 
põ˚
, 
buf
, 
põ˚_size
);

5102 
rc
 = 
	`ø«nd_îa£
(
blockaddr
, 
blocksize
);

5103 
	`ø_dbg
("(%d)offs=%dÖõ˚=%dÖõ˚_size=%dÑc=%d\n",
__LINE__
,
offs
,
põ˚
,
põ˚_size
,
rc
);

5105 #ifde‡
CONFIG_BADBLOCK_CHECK


5106 i‡(
rc
 >= 1) {

5107 
	`¥ötf
("bad block: %x,ÅryÇext: ", 
blockaddr
);

5108 
blockaddr
 +(
rc
 * 
blocksize
);

5109 
	`¥ötf
("%x\n", 
blockaddr
);

5110 
åy_√xt_0
;

5114 i‡(
rc
 != 0) {

5115 
	`‰ì
(
block_‹ig
);

5119 i‡(
	`ø«nd_wrôe
(
block
, 
blockaddr
, 
blocksize
) != blocksize) {

5120 
	`‰ì
(
block_‹ig
);

5124 
	`‰ì
(
block_‹ig
);

5126 
buf
 +
põ˚_size
;

5127 
offs
 +
põ˚_size
;

5128 
cou¡
 -
põ˚_size
;

5131 
Æig√d_size
 = 
blocksize
;

5133 
åy_√xt_1
:

5134 
rc
 = 
	`ø«nd_îa£
(
offs
, 
Æig√d_size
);

5135 #ifde‡
CONFIG_BADBLOCK_CHECK


5136 i‡(
rc
 >= 1) {

5137 
	`¥ötf
("bad block: %x,ÅryÇext: ", 
offs
);

5138 
offs
 +(
rc
 * 
blocksize
);

5139 
	`¥ötf
("%x\n", 
offs
);

5140 
åy_√xt_1
;

5144 i‡(
rc
 != 0)

5148 i‡(
	`ø«nd_wrôe
(
buf
, 
offs
, 
Æig√d_size
) !=áligned_size)

5154 
	`¥ötf
(".");

5156 
buf
 +
Æig√d_size
;

5157 
offs
 +
Æig√d_size
;

5158 
cou¡
 -
Æig√d_size
;

5162 
	`¥ötf
("Done!\n");

5164 
	}
}

5166 
	#NAND_FLASH_DBG_CMD


	)

5167 #ifde‡
NAND_FLASH_DBG_CMD


5168 
	$ølök_«nd_comm™d
(
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

5170 
addr
;

5171 
Àn
, 
i
;

5172 
u8
 *
p
 = 
NULL
;

5173 
mtd_öfo
 *
mtd
;

5174 
«nd_chù
 *nand_chip;

5175 
cﬁumn
, 
∑ge_addr
;

5177 
mtd
 = &
ho°
->mtd;

5178 
«nd_chù
 = &
ho°
->nand_chip;

5180 i‡(!
	`°∫cmp
(
¨gv
[1], "id", 3)) {

5181 
u8
 
id
[4];

5183 
	`mtk_«nd_comm™d_bp
(
mtd
, 
NAND_CMD_READID
, 0x00, -1);

5186 
id
[0] = 
	`mtk_«nd_ªad_byã
(
mtd
);

5187 
id
[1] = 
	`mtk_«nd_ªad_byã
(
mtd
);

5188 
id
[2] = 
	`mtk_«nd_ªad_byã
(
mtd
);

5189 
id
[3] = 
	`mtk_«nd_ªad_byã
(
mtd
);

5190 
	`mtk_«nd_ªad_byã
(
mtd
);

5191 
	`¥ötf
("Êash id: %x %x %x %x\n", 
id
[0], id[1], id[2], id[3]);

5193 i‡(!
	`°∫cmp
(
¨gv
[1], "read", 5)) {

5194 
addr
 = ()
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

5196 
	`¥ötf
("∑gemask=%08X, chùize=%08X\n",
«nd_chù
->
∑gemask
,«nd_chù->
chùsize
);

5197 
	`¥ötf
("(%dËchù->∑ge_shi·=%d\n",
__LINE__
,
«nd_chù
->
∑ge_shi·
);

5200 
Àn
 = ()
	`sim∂e_°πoul
(
¨gv
[3], 
NULL
, 16);

5201 
p
 = (
u8
 *)
	`mÆloc
(
Àn
);

5202 i‡(!
p
) {

5203 
	`¥ötf
("mallocÉrror\n");

5206 
Àn
 = 
	`ø«nd_ªad
(
p
, 
addr
,Üen);

5207 
	`¥ötf
("ªadÜí: %d\n", 
Àn
);

5208 
i
 = 0; i < 
Àn
; i++) {

5209 
	`¥ötf
("%02x ", 
p
[
i
]);

5211 
	`¥ötf
("\n");

5212 
	`‰ì
(
p
);

5214 i‡(!
	`°∫cmp
(
¨gv
[1], "page", 5)) {

5215 
j
;

5216 
u8
* 
p2
;

5217 
∑ge_addr
 = ()
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

5218 
cﬁumn
 = 0;

5219 
p
 = (
u8
 *)
	`mÆloc
(
mtd
->
wrôesize
);

5220 
Àn
 = 
	`ø«nd_ªad
(
p
, 
∑ge_addr
<<
«nd_chù
->
∑ge_shi·
, 
mtd
->
wrôesize
);

5221 
	`¥ötf
("∑gê0x%x:\n", 
∑ge_addr
);

5222 
p2
 = 
p
;

5223 
j
 = 0; j < 
mtd
->
wrôesize
/512; j++)

5225 
i
 = 0; i < 512; i++)

5226 
	`¥ötf
("%02x%c", 
p2
[
i
], (i%32 == 31)? '\n':' ');

5227 
p2
+=512;

5228 
	`¥ötf
("\n");

5230 
	`¥ötf
("oob:\n");

5231 
	`mtk_«nd_ªad_oob
(
mtd
,
«nd_chù
, 
∑ge_addr
, 0);

5232 
i
 = 0; i < 
mtd
->
oobsize
; i++)

5233 
	`¥ötf
("%02x%c", 
«nd_chù
->
oob_poi
[
i
], (i%32 == 31)? '\n':' ');

5235 
	`‰ì
(
p
);

5236 
	`¥ötf
("\n");

5239 i‡(!
	`°∫cmp
(
¨gv
[1], "erase", 6)) {

5240 
addr
 = ()
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

5241 
Àn
 = ()
	`sim∂e_°πoul
(
¨gv
[3], 
NULL
, 16);

5242 
	`¥ötf
("îa£áddr=%08X,Üí=%d\n",
addr
,
Àn
);

5243 i‡(
	`ø«nd_îa£
(
addr
, 
Àn
) ==-1)

5244 
	`¥ötf
("erase failed\n");

5246 
	`¥ötf
("erase finish\n");

5248 i‡(!
	`°∫cmp
(
¨gv
[1], "write", 6)) {

5249 
addr
, 
l
;

5250 
u8
 *
p‹ig
 = 
NULL
;

5251 
u8
 
t
[3] = {0};

5252 
u8
 
oob_poi
[288];

5254 
addr
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

5255 
∑ge_addr
 = 
addr
>>
«nd_chù
->
∑ge_shi·
;

5256 
l
 = 
	`°æí
(
¨gv
[3]) / 2;

5258 
p‹ig
 = 
	`mÆloc
(
mtd
->
wrôesize
+32);

5259 i‡(!
p‹ig
) {

5260 
	`¥ötf
("mallocÉrror\n");

5263 
p
 = (((
u32
)
p‹ig
+31)/32)*32;

5264 
i
 = 0; i < 
l
; i++) {

5265 
t
[0] = 
¨gv
[3][2*
i
];

5266 
t
[1] = 
¨gv
[3][2*
i
+1];

5267 *(
p
 + 
i
Ë
	`sim∂e_°πoul
(
t
, 
NULL
, 16);

5269 #i‚de‡
ECC_ENABLE


5270 
	`mtk_«nd_ªad_oob
(
mtd
,
«nd_chù
, 
∑ge_addr
, 0);

5271 
	`mem˝y
(
oob_poi
, 
«nd_chù
->oob_poi, 
mtd
->
oobsize
);

5272 
	`¥ötf
("oob [∑gê%x]:\n",
∑ge_addr
);

5273 
i
 = 0; i < 
mtd
->
oobsize
; i++)

5274 
	`¥ötf
("%02x%c", 
«nd_chù
->
oob_poi
[
i
], (i%32 == 31)? '\n':' ');

5276 
	`¥ötf
("wrôêoff†0x%x,Üí 0x%x\n", 
addr
, 
l
);

5277 i‡(
	`ø«nd_îa£_wrôe
(
p
, 
addr
, 
l
) ==-1)

5278 
	`¥ötf
("write failed\n");

5280 
	`¥ötf
("write succeed\n");

5281 #i‚de‡
ECC_ENABLE


5282 
	`mem˝y
(
«nd_chù
->
oob_poi
,oob_poi, 
mtd
->
oobsize
);

5283 
	`mtk_«nd_wrôe_oob
(
mtd
, 
«nd_chù
, 
∑ge_addr
);

5285 
	`‰ì
(
p‹ig
);

5287 i‡(!
	`°∫cmp
(
¨gv
[1], "oob", 4)) {

5288 
£c_num
 = 1<<(
«nd_chù
->
∑ge_shi·
-9);

5289 
•¨e_≥r_£˘‹
 = 
mtd
->
oobsize
/
£c_num
;

5291 
∑ge_addr
 = ()
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

5292 
addr
 = ()(
∑ge_addr
 << 
«nd_chù
->
∑ge_shi·
);

5293 
	`¥ötf
("oobÖagê%x (add∏%x):\n", 
∑ge_addr
, 
addr
);

5294 
	`mtk_«nd_ªad_oob
(
mtd
,
«nd_chù
, 
∑ge_addr
, 0);

5296 
i
 = 0; i < 
mtd
->
oobsize
; i++)

5297 
	`¥ötf
("%02x%c", 
«nd_chù
->
oob_poi
[
i
], (i%
•¨e_≥r_£˘‹
 == spare_per_sector-1)? '\n':' ');

5298 
	`¥ötf
("\n");

5300 i‡(!
	`°∫cmp
(
¨gv
[1], "woob", 5)) {

5301 
u8
 
oob_poi
[288];

5302 
u8
 
t
[3] = {0};

5303 
u32
 
off£t
,
l
;

5304 
∑ge_addr
 = ()
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

5305 
addr
 = ()(
∑ge_addr
 << 
«nd_chù
->
∑ge_shi·
);

5306 
l
 = 
	`°æí
(
¨gv
[4]) / 2;

5308 
	`mtk_«nd_ªad_oob
(
mtd
, 
«nd_chù
, 
∑ge_addr
, 0);

5309 
	`mem˝y
(
oob_poi
, 
«nd_chù
->oob_poi, 
mtd
->
oobsize
);

5310 
off£t
 = ()
	`sim∂e_°πoul
(
¨gv
[3], 
NULL
, 16);

5311 
p
 = 
oob_poi
 + 
off£t
;

5312 
i
 = 0; i < 
l
; i++) {

5313 
t
[0] = 
¨gv
[4][2*
i
];

5314 
t
[1] = 
¨gv
[4][2*
i
+1];

5315 *(
p
 + 
i
Ë
	`sim∂e_°πoul
(
t
, 
NULL
, 16);

5318 
	`mem˝y
(
«nd_chù
->
oob_poi
,oob_poi, 
mtd
->
oobsize
);

5319 
	`¥ötf
("oobÖagê%x (add∏%x):\n", 
∑ge_addr
, 
addr
);

5320 
i
 = 0; i < 
mtd
->
oobsize
; i++)

5321 
	`¥ötf
("%02x%c", 
«nd_chù
->
oob_poi
[
i
], (i%32 == 31)? '\n':' ');

5322 
	`mtk_«nd_wrôe_oob
(
mtd
, 
«nd_chù
, 
∑ge_addr
);

5324 i‡(!
	`°∫cmp
(
¨gv
[1], "dump", 5)) {

5325 
	`dump_nfi
();

5326 
	`dump_ecc
();

5328 i‡(!
	`°∫cmp
(
¨gv
[1], "init", 5)) {

5329 
	`mtk_«nd_¥obe
();

5332 
	`¥ötf
("Ußge:\n%s\¿u£ \"hñ∞«nd\" f‹ dëaû!\n", 
cmdç
->
ußge
);

5334 
	}
}

5336 
U_BOOT_CMD
(

5337 
«nd
, 5, 1, 
ølök_«nd_comm™d
,

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/nand/mtk_nand.h

1 #i‚de‡
__MTK_NAND_H


2 
	#__MTK_NAND_H


	)

8 
	#NFI_CNFG_REG16
 ((vﬁ©ûê
P_U16
)(
NFI_BASE
+0x0000))

	)

9 
	#NFI_PAGEFMT_REG16
 ((vﬁ©ûê
P_U16
)(
NFI_BASE
+0x0004))

	)

10 
	#NFI_CON_REG16
 ((vﬁ©ûê
P_U16
)(
NFI_BASE
+0x0008))

	)

11 
	#NFI_ACCCON_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x000C))

	)

12 
	#NFI_INTR_EN_REG16
 ((vﬁ©ûê
P_U16
)(
NFI_BASE
+0x0010))

	)

13 
	#NFI_INTR_REG16
 ((vﬁ©ûê
P_U16
)(
NFI_BASE
+0x0014))

	)

15 
	#NFI_CMD_REG16
 ((vﬁ©ûê
P_U16
)(
NFI_BASE
+0x0020))

	)

17 
	#NFI_ADDRNOB_REG16
 ((vﬁ©ûê
P_U16
)(
NFI_BASE
+0x0030))

	)

18 
	#NFI_COLADDR_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0034))

	)

19 
	#NFI_ROWADDR_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0038))

	)

21 
	#NFI_STRDATA_REG16
 ((vﬁ©ûê
P_U16
)(
NFI_BASE
+0x0040))

	)

23 
	#NFI_DATAW_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0050))

	)

24 
	#NFI_DATAR_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0054))

	)

25 
	#NFI_PIO_DIRDY_REG16
 ((vﬁ©ûê
P_U16
)(
NFI_BASE
+0x0058))

	)

27 
	#NFI_STA_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0060))

	)

28 
	#NFI_FIFOSTA_REG16
 ((vﬁ©ûê
P_U16
)(
NFI_BASE
+0x0064))

	)

29 
	#NFI_LOCKSTA_REG16
 ((vﬁ©ûê
P_U16
)(
NFI_BASE
+0x0068))

	)

31 
	#NFI_ADDRCNTR_REG16
 ((vﬁ©ûê
P_U16
)(
NFI_BASE
+0x0070))

	)

33 
	#NFI_STRADDR_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0080))

	)

34 
	#NFI_BYTELEN_REG16
 ((vﬁ©ûê
P_U16
)(
NFI_BASE
+0x0084))

	)

36 
	#NFI_CSEL_REG16
 ((vﬁ©ûê
P_U16
)(
NFI_BASE
+0x0090))

	)

37 
	#NFI_IOCON_REG16
 ((vﬁ©ûê
P_U16
)(
NFI_BASE
+0x0094))

	)

39 
	#NFI_FDM0L_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x00A0))

	)

40 
	#NFI_FDM0M_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x00A4))

	)

42 
	#NFI_LOCK_REG16
 ((vﬁ©ûê
P_U16
)(
NFI_BASE
+0x0100))

	)

43 
	#NFI_LOCKCON_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0104))

	)

44 
	#NFI_LOCKANOB_REG16
 ((vﬁ©ûê
P_U16
)(
NFI_BASE
+0x0108))

	)

45 
	#NFI_LOCK00ADD_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0110))

	)

46 
	#NFI_LOCK00FMT_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0114))

	)

47 
	#NFI_LOCK01ADD_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0118))

	)

48 
	#NFI_LOCK01FMT_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x011C))

	)

49 
	#NFI_LOCK02ADD_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0120))

	)

50 
	#NFI_LOCK02FMT_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0124))

	)

51 
	#NFI_LOCK03ADD_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0128))

	)

52 
	#NFI_LOCK03FMT_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x012C))

	)

53 
	#NFI_LOCK04ADD_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0130))

	)

54 
	#NFI_LOCK04FMT_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0134))

	)

55 
	#NFI_LOCK05ADD_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0138))

	)

56 
	#NFI_LOCK05FMT_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x013C))

	)

57 
	#NFI_LOCK06ADD_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0140))

	)

58 
	#NFI_LOCK06FMT_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0144))

	)

59 
	#NFI_LOCK07ADD_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0148))

	)

60 
	#NFI_LOCK07FMT_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x014C))

	)

61 
	#NFI_LOCK08ADD_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0150))

	)

62 
	#NFI_LOCK08FMT_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0154))

	)

63 
	#NFI_LOCK09ADD_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0158))

	)

64 
	#NFI_LOCK09FMT_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x015C))

	)

65 
	#NFI_LOCK10ADD_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0160))

	)

66 
	#NFI_LOCK10FMT_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0164))

	)

67 
	#NFI_LOCK11ADD_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0168))

	)

68 
	#NFI_LOCK11FMT_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x016C))

	)

69 
	#NFI_LOCK12ADD_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0170))

	)

70 
	#NFI_LOCK12FMT_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0174))

	)

71 
	#NFI_LOCK13ADD_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0178))

	)

72 
	#NFI_LOCK13FMT_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x017C))

	)

73 
	#NFI_LOCK14ADD_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0180))

	)

74 
	#NFI_LOCK14FMT_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0184))

	)

75 
	#NFI_LOCK15ADD_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0188))

	)

76 
	#NFI_LOCK15FMT_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x018C))

	)

78 
	#NFI_FIFODATA0_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0190))

	)

79 
	#NFI_FIFODATA1_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0194))

	)

80 
	#NFI_FIFODATA2_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x0198))

	)

81 
	#NFI_FIFODATA3_REG32
 ((vﬁ©ûê
P_U32
)(
NFI_BASE
+0x019C))

	)

82 
	#NFI_MASTERSTA_REG16
 ((vﬁ©ûê
P_U16
)(
NFI_BASE
+0x0210))

	)

90 
	#CNFG_AHB
 (0x0001)

	)

91 
	#CNFG_READ_EN
 (0x0002)

	)

92 
	#CNFG_DMA_BURST_EN
 (0x0004)

	)

93 
	#CNFG_BYTE_RW
 (0x0040)

	)

94 
	#CNFG_HW_ECC_EN
 (0x0100)

	)

95 
	#CNFG_AUTO_FMT_EN
 (0x0200)

	)

96 
	#CNFG_OP_IDLE
 (0x0000)

	)

97 
	#CNFG_OP_READ
 (0x1000)

	)

98 
	#CNFG_OP_SRD
 (0x2000)

	)

99 
	#CNFG_OP_PRGM
 (0x3000)

	)

100 
	#CNFG_OP_ERASE
 (0x4000)

	)

101 
	#CNFG_OP_RESET
 (0x5000)

	)

102 
	#CNFG_OP_CUST
 (0x6000)

	)

103 
	#CNFG_OP_MODE_MASK
 (0x7000)

	)

104 
	#CNFG_OP_MODE_SHIFT
 (12)

	)

107 
	#PAGEFMT_512
 (0x0000)

	)

108 
	#PAGEFMT_2K
 (0x0001)

	)

109 
	#PAGEFMT_4K
 (0x0002)

	)

111 
	#PAGEFMT_PAGE_MASK
 (0x0003)

	)

113 
	#PAGEFMT_DBYTE_EN
 (0x0008)

	)

115 
	#PAGEFMT_SPARE_16
 (0x0000)

	)

116 
	#PAGEFMT_SPARE_26
 (0x0001)

	)

117 
	#PAGEFMT_SPARE_27
 (0x0002)

	)

118 
	#PAGEFMT_SPARE_28
 (0x0003)

	)

119 
	#PAGEFMT_SPARE_MASK
 (0x0030)

	)

120 
	#PAGEFMT_SPARE_SHIFT
 (4)

	)

122 
	#PAGEFMT_FDM_MASK
 (0x0F00)

	)

123 
	#PAGEFMT_FDM_SHIFT
 (8)

	)

125 
	#PAGEFMT_FDM_ECC_MASK
 (0xF000)

	)

126 
	#PAGEFMT_FDM_ECC_SHIFT
 (12)

	)

129 
	#CON_FIFO_FLUSH
 (0x0001)

	)

130 
	#CON_NFI_RST
 (0x0002)

	)

131 
	#CON_NFI_SRD
 (0x0010)

	)

133 
	#CON_NFI_NOB_MASK
 (0x0060)

	)

134 
	#CON_NFI_NOB_SHIFT
 (5)

	)

136 
	#CON_NFI_BRD
 (0x0100)

	)

137 
	#CON_NFI_BWR
 (0x0200)

	)

139 
	#CON_NFI_SEC_MASK
 (0xF000)

	)

140 
	#CON_NFI_SEC_SHIFT
 (12)

	)

143 
	#ACCCON_SETTING
 ()

	)

146 
	#INTR_RD_DONE_EN
 (0x0001)

	)

147 
	#INTR_WR_DONE_EN
 (0x0002)

	)

148 
	#INTR_RST_DONE_EN
 (0x0004)

	)

149 
	#INTR_ERASE_DONE_EN
 (0x0008)

	)

150 
	#INTR_BSY_RTN_EN
 (0x0010)

	)

151 
	#INTR_ACC_LOCK_EN
 (0x0020)

	)

152 
	#INTR_AHB_DONE_EN
 (0x0040)

	)

153 
	#INTR_ALL_INTR_DE
 (0x0000)

	)

154 
	#INTR_ALL_INTR_EN
 (0x007F)

	)

157 
	#INTR_RD_DONE
 (0x0001)

	)

158 
	#INTR_WR_DONE
 (0x0002)

	)

159 
	#INTR_RST_DONE
 (0x0004)

	)

160 
	#INTR_ERASE_DONE
 (0x0008)

	)

161 
	#INTR_BSY_RTN
 (0x0010)

	)

162 
	#INTR_ACC_LOCK
 (0x0020)

	)

163 
	#INTR_AHB_DONE
 (0x0040)

	)

166 
	#ADDR_COL_NOB_MASK
 (0x0003)

	)

167 
	#ADDR_COL_NOB_SHIFT
 (0)

	)

168 
	#ADDR_ROW_NOB_MASK
 (0x0030)

	)

169 
	#ADDR_ROW_NOB_SHIFT
 (4)

	)

172 
	#STA_READ_EMPTY
 (0x00001000)

	)

173 
	#STA_ACC_LOCK
 (0x00000010)

	)

174 
	#STA_CMD_STATE
 (0x00000001)

	)

175 
	#STA_ADDR_STATE
 (0x00000002)

	)

176 
	#STA_DATAR_STATE
 (0x00000004)

	)

177 
	#STA_DATAW_STATE
 (0x00000008)

	)

179 
	#STA_NAND_FSM_MASK
 (0x1F000000)

	)

180 
	#STA_NAND_BUSY
 (0x00000100)

	)

181 
	#STA_NAND_BUSY_RETURN
 (0x00000200)

	)

182 
	#STA_NFI_FSM_MASK
 (0x000F0000)

	)

183 
	#STA_NFI_OP_MASK
 (0x0000000F)

	)

186 
	#FIFO_RD_EMPTY
 (0x0040)

	)

187 
	#FIFO_RD_FULL
 (0x0080)

	)

188 
	#FIFO_WR_FULL
 (0x8000)

	)

189 
	#FIFO_WR_EMPTY
 (0x4000)

	)

190 
	#FIFO_RD_REMAIN
(
x
Ë(0x1F&(x))

	)

191 
	#FIFO_WR_REMAIN
(
x
Ë((0x1F00&(x))>>8)

	)

194 
	#ADDRCNTR_CNTR
(
x
Ë((0xF000&(x))>>12)

	)

195 
	#ADDRCNTR_OFFSET
(
x
Ë(0x03FF&(x))

	)

198 
	#NFI_LOCK_ON
 (0x0001)

	)

201 
	#PROG_RADD_NOB_MASK
 (0x7000)

	)

202 
	#PROG_RADD_NOB_SHIFT
 (12)

	)

203 
	#PROG_CADD_NOB_MASK
 (0x0300)

	)

204 
	#PROG_CADD_NOB_SHIFT
 (8)

	)

205 
	#ERASE_RADD_NOB_MASK
 (0x0070)

	)

206 
	#ERASE_RADD_NOB_SHIFT
 (4)

	)

207 
	#ERASE_CADD_NOB_MASK
 (0x0007)

	)

208 
	#ERASE_CADD_NOB_SHIFT
 (0)

	)

214 
	#ECC_ENCCON_REG16
 ((vﬁ©ûê
P_U16
)(
NFIECC_BASE
+0x0000))

	)

215 
	#ECC_ENCCNFG_REG32
 ((vﬁ©ûê
P_U32
)(
NFIECC_BASE
+0x0004))

	)

216 
	#ECC_ENCDIADDR_REG32
 ((vﬁ©ûê
P_U32
)(
NFIECC_BASE
+0x0008))

	)

217 
	#ECC_ENCIDLE_REG16
 ((vﬁ©ûê
P_U16
)(
NFIECC_BASE
+0x000C))

	)

218 
	#ECC_ENCPAR0_REG32
 ((vﬁ©ûê
P_U32
)(
NFIECC_BASE
+0x0010))

	)

219 
	#ECC_ENCPAR1_REG32
 ((vﬁ©ûê
P_U32
)(
NFIECC_BASE
+0x0014))

	)

220 
	#ECC_ENCPAR2_REG32
 ((vﬁ©ûê
P_U32
)(
NFIECC_BASE
+0x0018))

	)

221 
	#ECC_ENCPAR3_REG32
 ((vﬁ©ûê
P_U32
)(
NFIECC_BASE
+0x001C))

	)

222 
	#ECC_ENCPAR4_REG32
 ((vﬁ©ûê
P_U32
)(
NFIECC_BASE
+0x0020))

	)

223 
	#ECC_ENCSTA_REG32
 ((vﬁ©ûê
P_U32
)(
NFIECC_BASE
+0x0024))

	)

224 
	#ECC_ENCIRQEN_REG16
 ((vﬁ©ûê
P_U16
)(
NFIECC_BASE
+0x0028))

	)

225 
	#ECC_ENCIRQSTA_REG16
 ((vﬁ©ûê
P_U16
)(
NFIECC_BASE
+0x002C))

	)

227 
	#ECC_DECCON_REG16
 ((vﬁ©ûê
P_U16
)(
NFIECC_BASE
+0x0100))

	)

228 
	#ECC_DECCNFG_REG32
 ((vﬁ©ûê
P_U32
)(
NFIECC_BASE
+0x0104))

	)

229 
	#ECC_DECDIADDR_REG32
 ((vﬁ©ûê
P_U32
)(
NFIECC_BASE
+0x0108))

	)

230 
	#ECC_DECIDLE_REG16
 ((vﬁ©ûê
P_U16
)(
NFIECC_BASE
+0x010C))

	)

231 
	#ECC_DECFER_REG16
 ((vﬁ©ûê
P_U16
)(
NFIECC_BASE
+0x0110))

	)

232 
	#ECC_DECENUM_REG32
 ((vﬁ©ûê
P_U32
)(
NFIECC_BASE
+0x0114))

	)

233 
	#ECC_DECDONE_REG16
 ((vﬁ©ûê
P_U16
)(
NFIECC_BASE
+0x0118))

	)

234 
	#ECC_DECEL0_REG32
 ((vﬁ©ûê
P_U32
)(
NFIECC_BASE
+0x011C))

	)

235 
	#ECC_DECEL1_REG32
 ((vﬁ©ûê
P_U32
)(
NFIECC_BASE
+0x0120))

	)

236 
	#ECC_DECEL2_REG32
 ((vﬁ©ûê
P_U32
)(
NFIECC_BASE
+0x0124))

	)

237 
	#ECC_DECEL3_REG32
 ((vﬁ©ûê
P_U32
)(
NFIECC_BASE
+0x0128))

	)

238 
	#ECC_DECEL4_REG32
 ((vﬁ©ûê
P_U32
)(
NFIECC_BASE
+0x012C))

	)

239 
	#ECC_DECEL5_REG32
 ((vﬁ©ûê
P_U32
)(
NFIECC_BASE
+0x0130))

	)

240 
	#ECC_DECIRQEN_REG16
 ((vﬁ©ûê
P_U16
)(
NFIECC_BASE
+0x0134))

	)

241 
	#ECC_DECIRQSTA_REG16
 ((vﬁ©ûê
P_U16
)(
NFIECC_BASE
+0x0138))

	)

242 
	#ECC_FDMADDR_REG32
 ((vﬁ©ûê
P_U32
)(
NFIECC_BASE
+0x013C))

	)

243 
	#ECC_DECFSM_REG32
 ((vﬁ©ûê
P_U32
)(
NFIECC_BASE
+0x0140))

	)

244 
	#ECC_SYNSTA_REG32
 ((vﬁ©ûê
P_U32
)(
NFIECC_BASE
+0x0144))

	)

245 
	#ECC_DECNFIDI_REG32
 ((vﬁ©ûê
P_U32
)(
NFIECC_BASE
+0x0148))

	)

246 
	#ECC_SYN0_REG32
 ((vﬁ©ûê
P_U32
)(
NFIECC_BASE
+0x014C))

	)

252 
	#ENC_EN
 (0x0001)

	)

253 
	#ENC_DE
 (0x0000)

	)

256 
	#ECC_CNFG_ECC4
 (0x0000)

	)

257 
	#ECC_CNFG_ECC6
 (0x0001)

	)

258 
	#ECC_CNFG_ECC8
 (0x0002)

	)

259 
	#ECC_CNFG_ECC10
 (0x0003)

	)

260 
	#ECC_CNFG_ECC12
 (0x0004)

	)

261 
	#ECC_CNFG_ECC_MASK
 (0x00000007)

	)

263 
	#ENC_CNFG_NFI
 (0x0010)

	)

264 
	#ENC_CNFG_MODE_MASK
 (0x0010)

	)

266 
	#ENC_CNFG_META6
 (0x10300000)

	)

267 
	#ENC_CNFG_META8
 (0x10400000)

	)

269 
	#ENC_CNFG_MSG_MASK
 (0x1FFF0000)

	)

270 
	#ENC_CNFG_MSG_SHIFT
 (0x10)

	)

273 
	#ENC_IDLE
 (0x0001)

	)

276 
	#STA_FSM
 (0x001F)

	)

277 
	#STA_COUNT_PS
 (0xFF10)

	)

278 
	#STA_COUNT_MS
 (0x3FFF0000)

	)

281 
	#ENC_IRQEN
 (0x0001)

	)

284 
	#ENC_IRQSTA
 (0x0001)

	)

287 
	#DEC_EN
 (0x0001)

	)

288 
	#DEC_DE
 (0x0000)

	)

291 
	#DEC_CNFG_ECC4
 (0x0000)

	)

294 
	#DEC_CNFG_NFI
 (0x0010)

	)

298 
	#DEC_CNFG_FER
 (0x01000)

	)

299 
	#DEC_CNFG_EL
 (0x02000)

	)

300 
	#DEC_CNFG_CORRECT
 (0x03000)

	)

301 
	#DEC_CNFG_TYPE_MASK
 (0x03000)

	)

303 
	#DEC_CNFG_EMPTY_EN
 (0x80000000)

	)

305 
	#DEC_CNFG_CODE_MASK
 (0x1FFF0000)

	)

306 
	#DEC_CNFG_CODE_SHIFT
 (0x10)

	)

309 
	#DEC_IDLE
 (0x0001)

	)

312 
	#DEC_FER0
 (0x0001)

	)

313 
	#DEC_FER1
 (0x0002)

	)

314 
	#DEC_FER2
 (0x0004)

	)

315 
	#DEC_FER3
 (0x0008)

	)

316 
	#DEC_FER4
 (0x0010)

	)

317 
	#DEC_FER5
 (0x0020)

	)

318 
	#DEC_FER6
 (0x0040)

	)

319 
	#DEC_FER7
 (0x0080)

	)

322 
	#ERR_NUM0
 (0x0000000F)

	)

323 
	#ERR_NUM1
 (0x000000F0)

	)

324 
	#ERR_NUM2
 (0x00000F00)

	)

325 
	#ERR_NUM3
 (0x0000F000)

	)

326 
	#ERR_NUM4
 (0x000F0000)

	)

327 
	#ERR_NUM5
 (0x00F00000)

	)

328 
	#ERR_NUM6
 (0x0F000000)

	)

329 
	#ERR_NUM7
 (0xF0000000)

	)

332 
	#DEC_DONE0
 (0x0001)

	)

333 
	#DEC_DONE1
 (0x0002)

	)

334 
	#DEC_DONE2
 (0x0004)

	)

335 
	#DEC_DONE3
 (0x0008)

	)

336 
	#DEC_DONE4
 (0x0010)

	)

337 
	#DEC_DONE5
 (0x0020)

	)

338 
	#DEC_DONE6
 (0x0040)

	)

339 
	#DEC_DONE7
 (0x0080)

	)

342 
	#DEC_IRQEN
 (0x0001)

	)

345 
	#DEC_IRQSTA
 (0x0001)

	)

347 
	#CHIPVER_ECO_1
 (0x8a00)

	)

348 
	#CHIPVER_ECO_2
 (0x8a01)

	)

355 
	smtk_«nd_ho°


357 
«nd_chù
 
	m«nd_chù
;

358 
mtd_öfo
 
	mmtd
;

359 
mtk_«nd_ho°_hw
 *
	mhw
;

362 
	sNAND_CMD


364 
u32
 
	mu4CﬁAddr
;

365 
u32
 
	mu4RowAddr
;

366 
u32
 
	mu4OOBRowAddr
;

367 
u8
 
	mau1OOB
[288];

368 
u8
* 
	mpD©aBuf
;

369 #ifde‡
NAND_PFM


370 
u32
 
	mpuªRódOOB
;

371 
u32
 
	mpuªRódOOBNum
;

385 
	#__DEBUG_NAND
 1

	)

388 
	#DBG_EVT_NONE
 0x00000000

	)

389 
	#DBG_EVT_INIT
 0x00000001

	)

390 
	#DBG_EVT_VERIFY
 0x00000002

	)

391 
	#DBG_EVT_PERFORMANCE
 0x00000004

	)

392 
	#DBG_EVT_READ
 0x00000008

	)

393 
	#DBG_EVT_WRITE
 0x00000010

	)

394 
	#DBG_EVT_ERASE
 0x00000020

	)

395 
	#DBG_EVT_BADBLOCK
 0x00000040

	)

396 
	#DBG_EVT_POWERCTL
 0x00000080

	)

398 
	#DBG_EVT_ALL
 0xffffffff

	)

400 
	#DBG_EVT_MASK
 (
DBG_EVT_INIT
)

	)

402 #i‡
__DEBUG_NAND


403 
	#MSG
(
evt
, 
fmt
, 
¨gs
...) \

405 i‡((
DBG_EVT_
##
evt
Ë& 
DBG_EVT_MASK
) { \

406 
	`¥ötk
(
fmt
, ##
¨gs
); \

408 } 0)

	)

410 
	#MSG_FUNC_ENTRY
(
f
Ë
	`MSG
(
FUC
, "<FUN_ENT>: %s\n", 
__FUNCTION__
)

	)

412 
	#MSG
(
evt
, 
fmt
, 
¨gs
...Ëdo{}0)

	)

413 
	#MSG_FUNC_ENTRY
(
f
Ëdo{}0)

	)

416 
	#RAMDOM_READ
 1<<0

	)

417 
	#CACHE_READ
 1<<1

	)

421 
u16
 
	mid
;

422 
u32
 
	mext_id
;

423 
u8
 
	maddr_cy˛e
;

424 
u8
 
	miowidth
;

425 
u16
 
	mtŸÆsize
;

426 
u16
 
	mblocksize
;

427 
u16
 
	m∑gesize
;

428 
u16
 
	m•¨esize
;

429 
u32
 
	mtimmög£âög
;

430 
	mdevcõ«me
[14];

431 
u32
 
	madv™˚dmode
;

432 }
	tÊashdev_öfo
,*
	tpÊashdev_öfo
;

436 
	smtk_«nd_ho°_hw
 {

437 
	mnfi_bus_width
;

438 
	mnfi_ac˚ss_timög
;

439 
	mnfi_cs_num
;

440 
	m«nd_£c_size
;

441 
	m«nd_£c_shi·
;

442 
	m«nd_ecc_size
;

443 
	m«nd_ecc_byãs
;

444 
	m«nd_ecc_mode
;

446 
mtk_«nd_ho°_hw
 
mt7621_«nd_hw
;

447 
u32
 
CFG_BLOCKSIZE
;

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/nand/nand_base.c

34 
	~"«nd_def.h
"

35 
	~<löux/î∫o.h
>

36 
	~<löux/îr.h
>

37 
	~<löux/ty≥s.h
>

38 
	~<löux/mtd/mtd.h
>

39 
	~<löux/mtd/«nd.h
>

40 
	~<löux/mtd/«nd_ecc.h
>

41 
	~<löux/bô›s.h
>

42 
	~<asm/io.h
>

43 #i‡
deföed
(
__UBOOT_NAND__
)

44 
	~<comm⁄.h
>

45 
	~<comm™d.h
>

50 
	#KERN_INFO


	)

51 
	#KERN_WARNING


	)

52 
	#KERN_ERR


	)

53 
	#KERN_CRIT


	)

56 
«nd_ec˛ayout
 
	g«nd_oob_8
 = {

57 .
eccbyãs
 = 3,

58 .
	gec˝os
 = {0, 1, 2},

59 .
	goob‰ì
 = {

60 {.
off£t
 = 3,

61 .
	gÀngth
 = 2},

62 {.
	goff£t
 = 6,

63 .
	gÀngth
 = 2}}

66 
«nd_ec˛ayout
 
	g«nd_oob_16
 = {

67 .
eccbyãs
 = 6,

68 .
	gec˝os
 = {0, 1, 2, 3, 6, 7},

69 .
	goob‰ì
 = {

70 {.
off£t
 = 8,

71 . 
	gÀngth
 = 8}}

74 
«nd_ec˛ayout
 
	g«nd_oob_64
 = {

75 .
eccbyãs
 = 24,

76 .
	gec˝os
 = {

80 .
	goob‰ì
 = {

81 {.
off£t
 = 2,

82 .
	gÀngth
 = 38}}

92 
	$sögÀ_îa£_cmd
(
mtd_öfo
 *
mtd
, 
∑ge
)

94 
«nd_chù
 *
chù
 = 
mtd
->
¥iv
;

96 
chù
->
	`cmdfunc
(
mtd
, 
NAND_CMD_ERASE1
, -1, 
∑ge
);

97 
chù
->
	`cmdfunc
(
mtd
, 
NAND_CMD_ERASE2
, -1, -1);

98 
	}
}

108 
	$mu…i_îa£_cmd
(
mtd_öfo
 *
mtd
, 
∑ge
)

110 
«nd_chù
 *
chù
 = 
mtd
->
¥iv
;

112 
chù
->
	`cmdfunc
(
mtd
, 
NAND_CMD_ERASE1
, -1, 
∑ge
++);

113 
chù
->
	`cmdfunc
(
mtd
, 
NAND_CMD_ERASE1
, -1, 
∑ge
++);

114 
chù
->
	`cmdfunc
(
mtd
, 
NAND_CMD_ERASE1
, -1, 
∑ge
++);

115 
chù
->
	`cmdfunc
(
mtd
, 
NAND_CMD_ERASE1
, -1, 
∑ge
);

116 
chù
->
	`cmdfunc
(
mtd
, 
NAND_CMD_ERASE2
, -1, -1);

117 
	}
}

121 
«nd_Êash_dev
 *
	$«nd_gë_Êash_ty≥
(
mtd_öfo
 *
mtd
,

122 
«nd_chù
 *
chù
,

123 
busw
, *
maf_id
)

125 
«nd_Êash_dev
 *
ty≥
 = 
NULL
;

126 
i
, 
dev_id
, 
maf_idx
;

129 
chù
->
	`£À˘_chù
(
mtd
, 0);

132 
chù
->
	`cmdfunc
(
mtd
, 
NAND_CMD_READID
, 0x00, -1);

135 *
maf_id
 = 
chù
->
	`ªad_byã
(
mtd
);

136 
dev_id
 = 
chù
->
	`ªad_byã
(
mtd
);

139 
i
 = 0; 
«nd_Êash_ids
[i].
«me
 !
NULL
; i++) {

140 i‡(
dev_id
 =
«nd_Êash_ids
[
i
].
id
) {

141 
ty≥
 = &
«nd_Êash_ids
[
i
];

146 i‡(!
ty≥
)

147  
	`ERR_PTR
(-
ENODEV
);

149 i‡(!
mtd
->
«me
)

150 
mtd
->
«me
 = 
ty≥
->name;

152 
chù
->
chùsize
 = 
ty≥
->chipsize << 20;

155 i‡(!
ty≥
->
∑gesize
) {

156 
extid
;

159 
chù
->
˚Œöfo
 = chù->
	`ªad_byã
(
mtd
);

161 
extid
 = 
chù
->
	`ªad_byã
(
mtd
);

164 
extid
 >>= 2;

167 
extid
 >>= 2;

170 
extid
 >>= 2;

172 
busw
 = 0;

182 
busw
 = 0;

187 
maf_idx
 = 0; 
«nd_m™uf_ids
[maf_idx].
id
 != 0x0; maf_idx++) {

188 i‡(
«nd_m™uf_ids
[
maf_idx
].
id
 =*
maf_id
)

196 i‡(
busw
 !(
chù
->
›ti⁄s
 & 
NAND_BUSWIDTH_16
)) {

197 
	`¥ötk
(
KERN_INFO
 "NAND device(BUS16): Manufacturer ID:"

198 " 0x%02x, Chù ID: 0x%02x (%†%s)\n", *
maf_id
,

199 
dev_id
, 
«nd_m™uf_ids
[
maf_idx
].
«me
, 
mtd
->name);

200 
	`¥ötk
(
KERN_WARNING
 "NAND bus width %d instead %d bit\n",

201 (
chù
->
›ti⁄s
 & 
NAND_BUSWIDTH_16
) ? 16 : 8,

202 
busw
 ? 16 : 8);

203  
	`ERR_PTR
(-
EINVAL
);

207 
chù
->
∑ge_shi·
 = 
	`ffs
(
mtd
->
wrôesize
) - 1;

209 
chù
->
∑gemask
 = (chù->
chùsize
 >> chù->
∑ge_shi·
) - 1;

211 
chù
->
bbt_îa£_shi·
 = chù->
phys_îa£_shi·
 =

212 
	`ffs
(
mtd
->
îa£size
) - 1;

213 
chù
->
chù_shi·
 = 
	`ffs
(chù->
chùsize
) - 1;

216 
chù
->
badblockpos
 = 
mtd
->
wrôesize
 > 512 ?

217 
NAND_LARGE_BADBLOCK_POS
 : 
NAND_SMALL_BADBLOCK_POS
;

220 
chù
->
›ti⁄s
 &~
NAND_CHIPOPTIONS_MSK
;

221 
chù
->
›ti⁄s
 |
ty≥
->›ti⁄†& 
NAND_CHIPOPTIONS_MSK
;

226 
chù
->
›ti⁄s
 |
NAND_NO_AUTOINCR
;

231 i‡(*
maf_id
 !
NAND_MFR_SAMSUNG
 && !
ty≥
->
∑gesize
)

232 
chù
->
›ti⁄s
 &~
NAND_SAMSUNG_LP_OPTIONS
;

235 i‡(
chù
->
›ti⁄s
 & 
NAND_4PAGE_ARRAY
)

236 
chù
->
îa£_cmd
 = 
mu…i_îa£_cmd
;

238 
chù
->
îa£_cmd
 = 
sögÀ_îa£_cmd
;

244 
	`¥ötk
(
KERN_INFO
 "NAND device: Manufacturer ID:"

245 " 0x%02x, Chù ID: 0x%02x (%†%s)\n", *
maf_id
, 
dev_id
,

246 
«nd_m™uf_ids
[
maf_idx
].
«me
, 
ty≥
->name);

248  
ty≥
;

249 
	}
}

261 
	$«nd_sˇn_idít
(
mtd_öfo
 *
mtd
, 
maxchùs
)

263 
i
, 
busw
, 
«nd_maf_id
;

264 
«nd_chù
 *
chù
 = 
mtd
->
¥iv
;

265 
«nd_Êash_dev
 *
ty≥
;

268 
busw
 = 
chù
->
›ti⁄s
 & 
NAND_BUSWIDTH_16
;

273 
ty≥
 = 
	`«nd_gë_Êash_ty≥
(
mtd
, 
chù
, 
busw
, &
«nd_maf_id
);

275 i‡(
	`IS_ERR
(
ty≥
)) {

276 
	`¥ötk
(
KERN_WARNING
 "No NAND device found!!!\n");

277 
chù
->
	`£À˘_chù
(
mtd
, -1);

278  
	`PTR_ERR
(
ty≥
);

282 
i
 = 1; i < 
maxchùs
; i++) {

283 
chù
->
	`£À˘_chù
(
mtd
, 
i
);

285 
chù
->
	`cmdfunc
(
mtd
, 
NAND_CMD_READID
, 0x00, -1);

287 i‡(
«nd_maf_id
 !
chù
->
	`ªad_byã
(
mtd
) ||

288 
ty≥
->
id
 !
chù
->
	`ªad_byã
(
mtd
))

291 i‡(
i
 > 1)

292 
	`¥ötk
(
KERN_INFO
 "%d NAND chù†dëe˘ed\n", 
i
);

295 
chù
->
numchùs
 = 
i
;

296 
mtd
->
size
 = 
i
 * 
chù
->
chùsize
;

299 
	}
}

311 
	$«nd_sˇn_èû
(
mtd_öfo
 *
mtd
)

313 
i
;

314 
«nd_chù
 *
chù
 = 
mtd
->
¥iv
;

316 i‡(!(
chù
->
›ti⁄s
 & 
NAND_OWN_BUFFERS
))

317 
chù
->
buf„rs
 = 
	`mÆloc
((*chip->buffers));

319 i‡(!
chù
->
buf„rs
)

320  -
ENOMEM
;

324 
chù
->
oob_poi
 = chù->
buf„rs
->
d©abuf
 + 
mtd
->
wrôesize
;

330 i‡(!
chù
->
ecc
.
œyout
) {

331 
mtd
->
oobsize
) {

333 
chù
->
ecc
.
œyout
 = &
«nd_oob_8
;

336 
chù
->
ecc
.
œyout
 = &
«nd_oob_16
;

339 
chù
->
ecc
.
œyout
 = &
«nd_oob_64
;

342 
	`¥ötk
(
KERN_WARNING
 "No oob scheme defined for "

343 "oobsizê%d\n", 
mtd
->
oobsize
);

344 
	`BUG
();

350 i‡(!
chù
->
wrôe_∑ge
)

351 
chù
->
wrôe_∑ge
 = 
«nd_wrôe_∑ge
;

357 i‡(!
chù
->
ecc
.
ªad_∑ge_øw
)

358 
chù
->
ecc
.
ªad_∑ge_øw
 = 
«nd_ªad_∑ge_øw
;

359 i‡(!
chù
->
ecc
.
wrôe_∑ge_øw
)

360 
chù
->
ecc
.
wrôe_∑ge_øw
 = 
«nd_wrôe_∑ge_øw
;

362 
chù
->
ecc
.
mode
) {

363 
NAND_ECC_HW
:

365 i‡(!
chù
->
ecc
.
ªad_∑ge
)

366 
chù
->
ecc
.
ªad_∑ge
 = 
«nd_ªad_∑ge_hwecc
;

367 i‡(!
chù
->
ecc
.
wrôe_∑ge
)

368 
chù
->
ecc
.
wrôe_∑ge
 = 
«nd_wrôe_∑ge_hwecc
;

369 i‡(!
chù
->
ecc
.
ªad_oob
)

370 
chù
->
ecc
.
ªad_oob
 = 
«nd_ªad_oob_°d
;

371 i‡(!
chù
->
ecc
.
wrôe_oob
)

372 
chù
->
ecc
.
wrôe_oob
 = 
«nd_wrôe_oob_°d
;

374 
NAND_ECC_HW_SYNDROME
:

375 i‡(!
chù
->
ecc
.
ˇlcuœã
 || !chù->ecc.
c‹ª˘
 ||

376 !
chù
->
ecc
.
hw˘l
) {

377 
	`¥ötk
(
KERN_WARNING
 "No ECC functions supplied, "

379 
	`BUG
();

382 i‡(!
chù
->
ecc
.
ªad_∑ge
)

383 
chù
->
ecc
.
ªad_∑ge
 = 
«nd_ªad_∑ge_syndrome
;

384 i‡(!
chù
->
ecc
.
wrôe_∑ge
)

385 
chù
->
ecc
.
wrôe_∑ge
 = 
«nd_wrôe_∑ge_syndrome
;

386 i‡(!
chù
->
ecc
.
ªad_oob
)

387 
chù
->
ecc
.
ªad_oob
 = 
«nd_ªad_oob_syndrome
;

388 i‡(!
chù
->
ecc
.
wrôe_oob
)

389 
chù
->
ecc
.
wrôe_oob
 = 
«nd_wrôe_oob_syndrome
;

391 i‡(
mtd
->
wrôesize
 >
chù
->
ecc
.
size
)

393 
	`¥ötk
(
KERN_WARNING
 "%d byte HW ECCÇotÖossible on "

395 
chù
->
ecc
.
size
, 
mtd
->
wrôesize
);

396 
chù
->
ecc
.
mode
 = 
NAND_ECC_SOFT
;

398 
NAND_ECC_SOFT
:

399 
chù
->
ecc
.
ˇlcuœã
 = 
«nd_ˇlcuœã_ecc
;

400 
chù
->
ecc
.
c‹ª˘
 = 
«nd_c‹ª˘_d©a
;

401 
chù
->
ecc
.
ªad_∑ge
 = 
«nd_ªad_∑ge_swecc
;

402 
chù
->
ecc
.
wrôe_∑ge
 = 
«nd_wrôe_∑ge_swecc
;

403 
chù
->
ecc
.
ªad_oob
 = 
«nd_ªad_oob_°d
;

404 
chù
->
ecc
.
wrôe_oob
 = 
«nd_wrôe_oob_°d
;

405 
chù
->
ecc
.
size
 = 256;

406 
chù
->
ecc
.
byãs
 = 3;

409 
NAND_ECC_NONE
:

410 
	`¥ötk
(
KERN_WARNING
 "NAND_ECC_NONE selected by board driver. "

412 
chù
->
ecc
.
ªad_∑ge
 = 
«nd_ªad_∑ge_øw
;

413 
chù
->
ecc
.
wrôe_∑ge
 = 
«nd_wrôe_∑ge_øw
;

414 
chù
->
ecc
.
ªad_oob
 = 
«nd_ªad_oob_°d
;

415 
chù
->
ecc
.
wrôe_oob
 = 
«nd_wrôe_oob_°d
;

416 
chù
->
ecc
.
size
 = 
mtd
->
wrôesize
;

417 
chù
->
ecc
.
byãs
 = 0;

421 
	`¥ötk
(
KERN_WARNING
 "Invalid NAND_ECC_MODE %d\n",

422 
chù
->
ecc
.
mode
);

423 
	`BUG
();

430 
chù
->
ecc
.
œyout
->
oobavaû
 = 0;

431 
i
 = 0; 
chù
->
ecc
.
œyout
->
oob‰ì
[i].
Àngth
; i++)

432 
chù
->
ecc
.
œyout
->
oobavaû
 +=

433 
chù
->
ecc
.
œyout
->
oob‰ì
[
i
].
Àngth
;

434 
mtd
->
oobavaû
 = 
chù
->
ecc
.
œyout
->oobavail;

443 
chù
->
ecc
.
°ïs
 = 
mtd
->
wrôesize
 / chù->ecc.
size
;

444 if(
chù
->
ecc
.
°ïs
 * chù->ecc.
size
 !
mtd
->
wrôesize
) {

445 
	`¥ötk
(
KERN_WARNING
 "InvalidÉccÖarameters\n");

446 
	`BUG
();

448 
chù
->
ecc
.
tŸÆ
 = chù->ecc.
°ïs
 * chù->ecc.
byãs
;

454 i‡(!(
chù
->
›ti⁄s
 & 
NAND_NO_SUBPAGE_WRITE
) &&

455 !(
chù
->
˚Œöfo
 & 
NAND_CI_CELLTYPE_MSK
)) {

456 
chù
->
ecc
.
°ïs
) {

458 
mtd
->
sub∑ge_s·
 = 1;

462 
mtd
->
sub∑ge_s·
 = 2;

466 
chù
->
sub∑gesize
 = 
mtd
->
wrôesize
 >> mtd->
sub∑ge_s·
;

469 
chù
->
°©e
 = 
FL_READY
;

470 
	`¥ötf
("select_chip\n");

472 
chù
->
	`£À˘_chù
(
mtd
, -1);

475 
chù
->
∑gebuf
 = -1;

478 
mtd
->
ty≥
 = 
MTD_NANDFLASH
;

479 
mtd
->
Êags
 = 
MTD_CAP_NANDFLASH
;

481 
mtd
->
poöt
 = 
NULL
;

482 
mtd
->
u≈oöt
 = 
NULL
;

488 
mtd
->
lock
 = 
NULL
;

489 
mtd
->
u∆ock
 = 
NULL
;

496 
mtd
->
ec˛ayout
 = 
chù
->
ecc
.
œyout
;

499 i‡(
chù
->
›ti⁄s
 & 
NAND_SKIP_BBTSCAN
)

505  
chù
->
	`sˇn_bbt
(
mtd
);

506 
	}
}

521 
	$«nd_sˇn
(
mtd_öfo
 *
mtd
, 
maxchùs
)

523 
ªt
;

531 
ªt
 = 
	`«nd_sˇn_idít
(
mtd
, 
maxchùs
);

532 i‡(!
ªt
)

533 
ªt
 = 
	`«nd_sˇn_èû
(
mtd
);

534  
ªt
;

535 
	}
}

543 
	$«nd_ªÀa£_devi˚
(
mtd_öfo
 *
mtd
)

545 
«nd_chù
 *
chù
 = 
mtd
->
¥iv
;

548 
chù
->
	`£À˘_chù
(
mtd
, -1);

552 
chù
->
c⁄åﬁÀr
->
a˘ive
 = 
NULL
;

553 
chù
->
°©e
 = 
FL_READY
;

555 
	}
}

566 
	$«nd_gë_devi˚
(
«nd_chù
 *
chù
, 
mtd_öfo
 *
mtd
, 
√w_°©e
)

569 i‡(!
chù
->
c⁄åﬁÀr
->
a˘ive
)

570 
chù
->
c⁄åﬁÀr
->
a˘ive
 = chip;

572 i‡(
chù
->
c⁄åﬁÀr
->
a˘ive
 =chù && chù->
°©e
 =
FL_READY
) {

573 
chù
->
°©e
 = 
√w_°©e
;

576 i‡(
√w_°©e
 =
FL_PM_SUSPENDED
) {

577 i‡(
chù
->
c⁄åﬁÀr
->
a˘ive
->
°©e
 =
FL_PM_SUSPENDED
) {

578 
chù
->
°©e
 = 
FL_PM_SUSPENDED
;

583 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/nand/nand_def.h

1 #i‚de‡
__NAND_DEF_H__


2 
	#__NAND_DEF_H__


	)

4 
	#VERSION
 "v2.1 Fix AHB vút2phy†îr‹"

	)

5 
	#MODULE_NAME
 "# MTK NAND #"

	)

6 
	#PROCNAME
 "drivî/«nd"

	)

8 #unde‡
TESTTIME


9 
	#__UBOOT_NAND__
 1

	)

14 
	#CONFIG_BADBLOCK_CHECK
 1

	)

15 #ifde‡
CONFIG_BADBLOCK_CHECK


18 
	#FACT_BBT
 1

	)

19 
	#ECC_ENABLE
 1

	)

20 
	#MANUAL_CORRECT
 1

	)

23 #i‚de‡
NAND_OTP_SUPPORT


24 
	#NAND_OTP_SUPPORT
 0

	)

35 #i‡
deföed
 (
__KERNEL_NAND__
)

36 
	#NFI_SET_REG32
(
ªg
, 
vÆue
) \

38 
g_vÆue
 = (
	`DRV_Reg32
(
ªg
Ë| (
vÆue
));\

39 
	`DRV_WrôeReg32
(
ªg
, 
g_vÆue
); \

40 } 0)

	)

42 
	#NFI_SET_REG16
(
ªg
, 
vÆue
) \

44 
g_vÆue
 = (
	`DRV_Reg16
(
ªg
Ë| (
vÆue
));\

45 
	`DRV_WrôeReg16
(
ªg
, 
g_vÆue
); \

46 } 0)

	)

48 
	#NFI_CLN_REG32
(
ªg
, 
vÆue
) \

50 
g_vÆue
 = (
	`DRV_Reg32
(
ªg
Ë& (~(
vÆue
)));\

51 
	`DRV_WrôeReg32
(
ªg
, 
g_vÆue
); \

52 } 0)

	)

54 
	#NFI_CLN_REG16
(
ªg
, 
vÆue
) \

56 
g_vÆue
 = (
	`DRV_Reg16
(
ªg
Ë& (~(
vÆue
)));\

57 
	`DRV_WrôeReg16
(
ªg
, 
g_vÆue
); \

58 } 0)

	)

61 
	#NFI_WAIT_STATE_DONE
(
°©e
Ëdo{;}
	`__øw_ªadl
(
NFI_STA_REG32
Ë& sèã)

	)

62 
	#NFI_WAIT_TO_READY
(Ëdo{;}!(
	`__øw_ªadl
(
NFI_STA_REG32
Ë& 
STA_BUSY2READY
))

	)

65 
	#NAND_SECTOR_SIZE
 (512)

	)

66 
	#OOB_PER_SECTOR
 (16)

	)

67 
	#OOB_AVAI_PER_SECTOR
 (8)

	)

69 #i‚de‡
PART_SIZE_BMTPOOL


70 
	#BMT_POOL_SIZE
 (8)

	)

72 
	#BMT_POOL_SIZE
 (
PART_SIZE_BMTPOOL
)

	)

75 
	#PMT_POOL_SIZE
 (2)

	)

77 
	#TIMEOUT_1
 0x1fff

	)

78 
	#TIMEOUT_2
 0x8ff

	)

79 
	#TIMEOUT_3
 0xffff

	)

80 
	#TIMEOUT_4
 0xffff

81 

	)

84 #i‡!
deföed
 (
__KERNEL_NAND__
)

85 
	#KERN_INFO


	)

86 
	#KERN_WARNING


	)

87 
	#KERN_ERR


	)

88 
	#PAGE_SIZE
 (4096)

	)

90 
	#AddSt‹ageTø˚


91 
	#STORAGE_LOGGER_MSG_NAND
 0

	)

92 
	#NFI_BASE
 
RALINK_NAND_CTRL_BASE


	)

93 
	#NFIECC_BASE
 
RALINK_NANDECC_CTRL_BASE


	)

95 #i‡(
__INTERNAL_USE_AHB_MODE__
)

96 
	#MT65xx_POLARITY_LOW
 0

	)

97 
	#MT65XX_PDN_PERI_NFI
 0

	)

98 
	#MT65xx_EDGE_SENSITIVE
 0

	)

99 
	#MT6575_NFI_IRQ_ID
 (58)

	)

102 #i‡
deföed
 (
__KERNEL_NAND__
)

104 
	#CONFIG_MTD_NAND_VERIFY_WRITE
 (1)

	)

105 
	#¥ötk
 
¥ötf


	)

106 
	#ø_dbg
 
¥ötf


	)

107 
	#BUG
()

108 
	#BUG_ON
(
x
)

109 
	#NUM_PARTITIONS
 1

	)

112 
	#NFI_DEFAULT_ACCESS_TIMING
 (0x30C77fff)

113 

	)

115 
	#NFI_CS_NUM
 (1)

	)

116 
	#NFI_DEFAULT_CS
 (0)

	)

118 
	~"mt6575_ty≥defs.h
"

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/nand/nand_device_list.h

1 #i‚de‡
__NAND_DEVICE_LIST_H__


2 
	#__NAND_DEVICE_LIST_H__


	)

4 c⁄° 
Êashdev_öfo
 
	ggí_FœshTabÀ
[]={

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/nand/nand_ids.c

14 
	~<löux/mtd/«nd.h
>

26 
«nd_Êash_dev
 
	g«nd_Êash_ids
[] = {

40 {"NAND 8MiB 1,8V 16-bô", 0x49, 512, 8, 0x2000, 
NAND_BUSWIDTH_16
},

41 {"NAND 8MiB 3,3V 16-bô", 0x59, 512, 8, 0x2000, 
NAND_BUSWIDTH_16
},

45 {"NAND 16MiB 1,8V 16-bô", 0x43, 512, 16, 0x4000, 
NAND_BUSWIDTH_16
},

46 {"NAND 16MiB 3,3V 16-bô", 0x53, 512, 16, 0x4000, 
NAND_BUSWIDTH_16
},

50 {"NAND 32MiB 1,8V 16-bô", 0x45, 512, 32, 0x4000, 
NAND_BUSWIDTH_16
},

51 {"NAND 32MiB 3,3V 16-bô", 0x55, 512, 32, 0x4000, 
NAND_BUSWIDTH_16
},

55 {"NAND 64MiB 1,8V 16-bô", 0x46, 512, 64, 0x4000, 
NAND_BUSWIDTH_16
},

56 {"NAND 64MiB 3,3V 16-bô", 0x56, 512, 64, 0x4000, 
NAND_BUSWIDTH_16
},

61 {"NAND 128MiB 1,8V 16-bô", 0x72, 512, 128, 0x4000, 
NAND_BUSWIDTH_16
},

62 {"NAND 128MiB 1,8V 16-bô", 0x49, 512, 128, 0x4000, 
NAND_BUSWIDTH_16
},

63 {"NAND 128MiB 3,3V 16-bô", 0x74, 512, 128, 0x4000, 
NAND_BUSWIDTH_16
},

64 {"NAND 128MiB 3,3V 16-bô", 0x59, 512, 128, 0x4000, 
NAND_BUSWIDTH_16
},

72 
	#LP_OPTIONS
 (
NAND_SAMSUNG_LP_OPTIONS
 | 
NAND_NO_READRDY
 | 
NAND_NO_AUTOINCR
)

	)

73 
	#LP_OPTIONS16
 (
LP_OPTIONS
 | 
NAND_BUSWIDTH_16
)

	)

76 {"NAND 64MiB 1,8V 8-bô", 0xA2, 0, 64, 0, 
LP_OPTIONS
},

77 {"NAND 64MiB 3,3V 8-bô", 0xF2, 0, 64, 0, 
LP_OPTIONS
},

78 {"NAND 64MiB 1,8V 16-bô", 0xB2, 0, 64, 0, 
LP_OPTIONS16
},

79 {"NAND 64MiB 3,3V 16-bô", 0xC2, 0, 64, 0, 
LP_OPTIONS16
},

82 {"NAND 128MiB 1,8V 8-bô", 0xA1, 0, 128, 0, 
LP_OPTIONS
},

83 {"NAND 128MiB 3,3V 8-bô", 0xF1, 0, 128, 0, 
LP_OPTIONS
},

84 {"NAND 128MiB 1,8V 16-bô", 0xB1, 0, 128, 0, 
LP_OPTIONS16
},

85 {"NAND 128MiB 3,3V 16-bô", 0xC1, 0, 128, 0, 
LP_OPTIONS16
},

88 {"NAND 256MiB 1,8V 8-bô", 0xAA, 0, 256, 0, 
LP_OPTIONS
},

89 {"NAND 256MiB 3,3V 8-bô", 0xDA, 0, 256, 0, 
LP_OPTIONS
},

90 {"NAND 256MiB 1,8V 16-bô", 0xBA, 0, 256, 0, 
LP_OPTIONS16
},

91 {"NAND 256MiB 3,3V 16-bô", 0xCA, 0, 256, 0, 
LP_OPTIONS16
},

94 {"NAND 512MiB 1,8V 8-bô", 0xAC, 0, 512, 0, 
LP_OPTIONS
},

95 {"NAND 512MiB 3,3V 8-bô", 0xDC, 0, 512, 0, 
LP_OPTIONS
},

96 {"NAND 512MiB 1,8V 16-bô", 0xBC, 0, 512, 0, 
LP_OPTIONS16
},

97 {"NAND 512MiB 3,3V 16-bô", 0xCC, 0, 512, 0, 
LP_OPTIONS16
},

100 {"NAND 1GiB 1,8V 8-bô", 0xA3, 0, 1024, 0, 
LP_OPTIONS
},

101 {"NAND 1GiB 3,3V 8-bô", 0xD3, 0, 1024, 0, 
LP_OPTIONS
},

102 {"NAND 1GiB 1,8V 16-bô", 0xB3, 0, 1024, 0, 
LP_OPTIONS16
},

103 {"NAND 1GiB 3,3V 16-bô", 0xC3, 0, 1024, 0, 
LP_OPTIONS16
},

106 {"NAND 2GiB 1,8V 8-bô", 0xA5, 0, 2048, 0, 
LP_OPTIONS
},

107 {"NAND 2GiB 3,3V 8-bô", 0xD5, 0, 2048, 0, 
LP_OPTIONS
},

108 {"NAND 2GiB 1,8V 16-bô", 0xB5, 0, 2048, 0, 
LP_OPTIONS16
},

109 {"NAND 2GiB 3,3V 16-bô", 0xC5, 0, 2048, 0, 
LP_OPTIONS16
},

122 
NAND_IS_AND
 | 
NAND_NO_AUTOINCR
 |
NAND_NO_READRDY
 | 
NAND_4PAGE_ARRAY
 |

123 
BBT_AUTO_REFRESH


127 {
NULL
,}

133 
«nd_m™uÁ˘uªrs
 
	g«nd_m™uf_ids
[] = {

134 {
NAND_MFR_TOSHIBA
, "Toshiba"},

135 {
NAND_MFR_SAMSUNG
, "Samsung"},

136 {
NAND_MFR_FUJITSU
, "Fujitsu"},

137 {
NAND_MFR_NATIONAL
, "National"},

138 {
NAND_MFR_RENESAS
, "Renesas"},

139 {
NAND_MFR_STMICRO
, "ST Micro"},

140 {
NAND_MFR_HYNIX
, "Hynix"},

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/nand_flash.c

1 
	~<comm⁄.h
>

2 
	~<comm™d.h
>

3 
	~<mÆloc.h
>

4 
	~<c⁄figs/π2880.h
>

5 
	~"ølök_«nd.h
"

10 #ifde‡
MTK_NAND_BMT


11 
	#__UBOOT_NAND__


	)

12 
	~"bmt.h
"

15 
	#BMT_APPLY_START_OFFSET
 (
is_«nd_∑ge_2048
? (2*
CFG_BLOCKSIZE
):(3*CFG_BLOCKSIZE))

	)

16 
	#BMT_POOL_SIZE
 80

	)

17 
bmt_°ru˘
 *
	gg_bmt
;

21 
	#ø_öl
(
addr
Ë(*(vﬁ©ûê
u32
 *)◊ddr))

	)

22 
	#ø_oué
(
addr
, 
vÆue
Ë(*(vﬁ©ûê
u32
 *)◊ddrË(vÆue))

	)

23 
	#ø_™d
(
addr
, 
vÆue
Ë
	`ø_oué
◊ddr, (
	`ø_öl
◊ddrË& (vÆue)))

	)

24 
	#ø_‹
(
addr
, 
vÆue
Ë
	`ø_oué
◊ddr, (
	`ø_öl
◊ddrË| (vÆue)))

	)

26 
	#ø_dbg
(
¨gs
...)

	)

29 
	#READ_STATUS_RETRY
 1000

	)

30 
	#CLEAR_INT_STATUS
(Ë
	`ø_oué
(
NFC_INT_ST
, 
	`ø_öl
(NFC_INT_ST))

	)

31 
	#NFC_TRANS_DONE
(Ë(
	`ø_öl
(
NFC_INT_ST
Ë& 
INT_ST_ND_DONE
)

	)

32 
	#BLOCK_ALIGNED
(
a
Ë(◊Ë& (
CFG_BLOCKSIZE
 - 1))

	)

34 
	g«nd_addæí
 = 3;

35 
	gis_«nd_∑ge_2048
 = 0;

37 c⁄° 
	g«nd_size_m≠
[2][3] = {{25, 30, 30}, {20, 27, 30}};

39 
nfc_waô_ªady
(
¢ooze_ms
);

41 #ifde‡
MTK_NAND_BMT


42 
ø«nd_îa£_bmt
(
offs
, 
Àn
);

43 
ø«nd_wrôe_bmt
(*
buf
, 
to
, 
d©Æí
);

44 
ø«nd_ªad_bmt
(*
buf
, 
‰om
, 
d©Æí
);

45 
ø«nd_îa£_wrôe_bmt
(*
buf
, 
offs
, 
cou¡
);

50 
	$nfc_chù_ª£t
()

52 
°©us
;

57 
	`ø_oué
(
NFC_CMD1
, 0x0);

58 
	`ø_oué
(
NFC_CMD2
, 0xff);

59 
	`ø_oué
(
NFC_ADDR
, 0x0);

60 
	`ø_oué
(
NFC_CONF
, 0x0411);

62 
°©us
 = 
	`nfc_waô_ªady
(5);

63 i‡(
°©us
 & 
NAND_STATUS_FAIL
) {

64 
	`¥ötf
("%s: faû\n", 
__func__
);

68 
	}
}

73 
	$nfc_Æl_ª£t
()

75 
ªåy
;

78 
	`ø_oué
(
NFC_CTRL
, 
	`ø_öl
(NFC_CTRL) | 0x02);

79 
	`ø_oué
(
NFC_CTRL
, 
	`ø_öl
(NFC_CTRL) & ~0x02);

81 
	`CLEAR_INT_STATUS
();

83 
ªåy
 = 
READ_STATUS_RETRY
;

84 (
	`ø_öl
(
NFC_INT_ST
Ë& 0x02Ë!0x02 && 
ªåy
--);

85 i‡(
ªåy
 <= 0) {

86 
	`¥ötf
("%s: cÀ™ buf„∏Áû\n", 
__func__
);

90 
ªåy
 = 
READ_STATUS_RETRY
;

91 (
	`ø_öl
(
NFC_STATUS
Ë& 0x1Ë!0x0 && 
ªåy
--) {

92 
	`udñay
(1);

94 i‡(
ªåy
 <= 0) {

95 
	`¥ötf
("%s: controller is still busy?\n");

99  
	`nfc_chù_ª£t
();

100 
	}
}

107 
	$nfc_ªad_°©us
(*
°©us
)

109 
cmd1
, 
c⁄f
;

110 
öt_°
, 
nfc_°
;

111 
ªåy
;

113 
cmd1
 = 0x70;

114 
c⁄f
 = 0x000101 | (1 << 20);

117 
	`CLEAR_INT_STATUS
();

119 
	`ø_oué
(
NFC_CMD1
, 
cmd1
);

120 
	`ø_oué
(
NFC_CONF
, 
c⁄f
);

129 
ªåy
 = 
READ_STATUS_RETRY
;

131 
nfc_°
 = 
	`ø_öl
(
NFC_STATUS
);

132 
öt_°
 = 
	`ø_öl
(
NFC_INT_ST
);

134 
	`udñay
(1);

135 } !(
öt_°
 & 
INT_ST_RX_BUF_RDY
Ë&& 
ªåy
--);

137 i‡(!(
öt_°
 & 
INT_ST_RX_BUF_RDY
)) {

138 
	`¥ötf
("%s: NFC fail, int_st(%x),Ñetry:%x.Çfc:%x,ÑesetÇfcánd flash.\n",

139 
__func__
, 
öt_°
, 
ªåy
, 
nfc_°
);

140 
	`nfc_Æl_ª£t
();

141 *
°©us
 = 
NAND_STATUS_FAIL
;

145 *
°©us
 = ()(
	`À32_to_˝u
(
	`ø_öl
(
NFC_DATA
)) & 0x0ff);

147 
	}
}

153 
	$nfc_check_wp
()

156 #i‡!
deföed
 
CONFIG_NOT_SUPPORT_WP


157  !!(
	`ø_öl
(
NFC_CTRL
) & 0x01);

159 
ªsu…
 = 0;

160 
ªt
;

162 
ªt
 = 
	`nfc_ªad_°©us
(&
ªsu…
);

165  !(
ªsu…
 & 
NAND_STATUS_WP
);

167 
	}
}

169 #i‡!
deföed
 
CONFIG_NOT_SUPPORT_RB


174 
	$nfc_devi˚_ªady
()

177  !!(
	`ø_öl
(
NFC_STATUS
) & 0x04);

178 
	}
}

182 
	$⁄e_bô_c‹ª˘i⁄
(*
ecc1
, *
ecc2
, *
byãs
, *
bôs
)

184 *
p
, 
nibbÀ
, 
¸umb
;

185 
i
, 
x‹
, 
õcc1
 = 0, 
õcc2
 = 0;

187 
	`¥ötf
("c‹ª˘i⁄ : %x %x %x\n", 
ecc1
[0],Écc1[1],Écc1[2]);

188 
	`¥ötf
("c‹ª˘i⁄ : %x %x %x\n", 
ecc2
[0],Écc2[1],Écc2[2]);

190 
p
 = (*)
ecc1
;

191 
i
 = 0; i < 
CONFIG_ECC_BYTES
; i++)

193 
nibbÀ
 = *(
p
+
i
) & 0xf;

194 i‡((
nibbÀ
 != 0x0) && (nibble != 0xf) && (nibble != 0x3) && (nibble != 0xc) &&

195 (
nibbÀ
 != 0x5) && (nibble != 0xa) && (nibble != 0x6) && (nibble != 0x9))

197 
nibbÀ
 = ((*(
p
+
i
)) >> 4) & 0xf;

198 i‡((
nibbÀ
 != 0x0) && (nibble != 0xf) && (nibble != 0x3) && (nibble != 0xc) &&

199 (
nibbÀ
 != 0x5) && (nibble != 0xa) && (nibble != 0x6) && (nibble != 0x9))

203 
p
 = (*)
ecc2
;

204 
i
 = 0; i < 
CONFIG_ECC_BYTES
; i++)

206 
nibbÀ
 = *(
p
+
i
) & 0xf;

207 i‡((
nibbÀ
 != 0x0) && (nibble != 0xf) && (nibble != 0x3) && (nibble != 0xc) &&

208 (
nibbÀ
 != 0x5) && (nibble != 0xa) && (nibble != 0x6) && (nibble != 0x9))

210 
nibbÀ
 = ((*(
p
+
i
)) >> 4) & 0xf;

211 i‡((
nibbÀ
 != 0x0) && (nibble != 0xf) && (nibble != 0x3) && (nibble != 0xc) &&

212 (
nibbÀ
 != 0x5) && (nibble != 0xa) && (nibble != 0x6) && (nibble != 0x9))

216 
	`mem˝y
(&
õcc1
, 
ecc1
, 3);

217 
	`mem˝y
(&
õcc2
, 
ecc2
, 3);

219 
x‹
 = 
õcc1
 ^ 
õcc2
;

220 
	`¥ötf
("x‹ = %x (%x %x)\n", 
x‹
, 
õcc1
, 
õcc2
);

222 *
byãs
 = 0;

223 
i
 = 0; i < 9; i++)

225 
¸umb
 = (
x‹
 >> (2*
i
)) & 0x3;

226 i‡((
¸umb
 == 0x0) || (crumb == 0x3))

228 i‡(
¸umb
 == 0x2)

229 *
byãs
 +(1 << 
i
);

232 *
bôs
 = 0;

233 
i
 = 0; i < 3; i++)

235 
¸umb
 = (
x‹
 >> (18 + 2*
i
)) & 0x3;

236 i‡((
¸umb
 == 0x0) || (crumb == 0x3))

238 i‡(
¸umb
 == 0x2)

239 *
bôs
 +(1 << 
i
);

243 
	}
}

246 
	$ø«nd_öô
()

248 
ªg
, 
chù_mode
;

249 #i‡
	`deföed
 (
RT6855_FPGA_BOARD
Ë|| deföed (
RT6855_ASIC_BOARD
)

251 
	`ø_™d
(
RALINK_SYSCTL_BASE
+0x60, ~(0x7<<11));

252 
	`ø_‹
(
RALINK_SYSCTL_BASE
+0x60, (0x4<<11));

256 
	`ø_™d
(
NFC_CONF1
, ~1);

257 #i‡
	`deföed
 (
RT6855A_ASIC_BOARD
Ë|| deföed (
RT6855A_FPGA_BOARD
)

258 
ªg
 = 
	`ø_öl
(
RALINK_SYSCTL_BASE
+0x8c);

259 
chù_mode
 = ((
ªg
>>28) & 0x3)|(((reg>>22) & 0x3)<<2);

261 #i‡
	`deföed
 (
MT7620_ASIC_BOARD
Ë|| deföed (
MT7620_FPGA_BOARD
)

263 
	`ø_™d
(
RALINK_SYSCTL_BASE
+0x60, ~(0x3<<18));

264 
ªg
 = 
	`ø_öl
(
RALINK_SYSCTL_BASE
+0x10);

265 
chù_mode
 = 
ªg
 & 0xF;

267 if((
chù_mode
==1)||(chip_mode==11)) {

268 
	`¥ötf
("!!!Ç™dÖagêsizê2048,ádd∏Àn=%d\n", ((
chù_mode
!=11) ? 4 : 5));

269 
	`ø_‹
(
NFC_CONF1
, 1);

270 
is_«nd_∑ge_2048
 = 1;

271 
«nd_addæí
 = ((
chù_mode
!=11) ? 4 : 5);

274 
	`¥ötf
("!!!Ç™dÖagêsizê512,ádd∏Àn=%d\n", (
chù_mode
!=10) ? 3 : 4);

275 
	`ø_™d
(
NFC_CONF1
, ~1);

276 
is_«nd_∑ge_2048
 = 0;

277 
«nd_addæí
 = ((
chù_mode
!=10) ? 3 : 4);

281 
	`ø_™d
(
NFC_CONF1
, 0xfff000ff);

282 
	`ø_‹
(
NFC_CONF1
, ((
CONFIG_ECC_OFFSET
 + 2) << 16) +

283 ((
CONFIG_ECC_OFFSET
 + 1) << 12) +

284 (
CONFIG_ECC_OFFSET
 << 8));

288 
	`ø_oué
(
RALINK_PIO_BASE
+0x24, 
	`ø_öl
(RALINK_PIO_BASE+0x24) & ~0x01);

291 
	`ø_‹
(
NFC_CTRL
, 0x01);

293 i‡(
	`nfc_Æl_ª£t
() != 0)

296 #i‡
	`deföed
(
MTK_NAND_BMT
)

297 i‡(!
g_bmt
)

299 i‡–!(
g_bmt
 = 
	`öô_bmt
(
BMT_POOL_SIZE
)) )

301 
	`¥ötf
("Error: init bmt failed\n");

308  
CFG_CHIPSIZE
;

309 
	}
}

316 
	$_ø_«nd_puŒ_d©a
(*
buf
, 
Àn
)

318 #ifde‡
RW_DATA_BY_BYTE


319 *
p
 = 
buf
;

321 
__u32
 *
p
 = (__u32 *)
buf
;

323 
ªåy
, 
öt_°
;

324 
ªt_d©a
;

325 
ªt_size
;

327 
ªåy
 = 
READ_STATUS_RETRY
;

328 
Àn
 > 0) {

329 
öt_°
 = 
	`ø_öl
(
NFC_INT_ST
);

330 i‡(
öt_°
 & 
INT_ST_RX_BUF_RDY
) {

331 
ªt_d©a
 = 
	`ø_öl
(
NFC_DATA
);

332 
	`ø_oué
(
NFC_INT_ST
, 
INT_ST_RX_BUF_RDY
);

333 #ifde‡
RW_DATA_BY_BYTE


334 
ªt_size
 = ();

335 
ªt_size
 = 
	`mö
‘ë_size, 
Àn
);

336 
Àn
 -
ªt_size
;

337 
ªt_size
-- > 0) {

339 *
p
++ = 
ªt_d©a
 & 0x0ff;

340 
ªt_d©a
 >>= 8;

343 
ªt_size
 = 
	`mö
(
Àn
, 4);

344 
Àn
 -
ªt_size
;

345 i‡(
ªt_size
 == 4)

346 *
p
++ = 
ªt_d©a
;

348 
__u8
 *
q
 = (__u8 *)
p
;

349 
ªt_size
-- > 0) {

350 *
q
++ = 
ªt_d©a
 & 0x0ff;

351 
ªt_d©a
 >>= 8;

353 
p
 = (
__u32
 *)
q
;

356 
ªåy
 = 
READ_STATUS_RETRY
;

358 i‡(
öt_°
 & 
INT_ST_ND_DONE
) {

362 
	`udñay
(1);

363 i‡(
ªåy
-- < 0)

368 #ifde‡
RW_DATA_BY_BYTE


369  ()(
p
 - 
buf
);

371  (()
p
 - ()
buf
);

373 
	}
}

379 
	$_ø_«nd_push_d©a
(*
buf
, 
Àn
)

381 #ifde‡
RW_DATA_BY_BYTE


382 *
p
 = 
buf
;

384 
__u32
 *
p
 = (__u32 *)
buf
;

386 
ªåy
, 
öt_°
;

387 
tx_d©a
 = 0;

388 
tx_size
, 
ôî
 = 0;

390 
ªåy
 = 
READ_STATUS_RETRY
;

391 
Àn
 > 0) {

392 
öt_°
 = 
	`ø_öl
(
NFC_INT_ST
);

393 i‡(
öt_°
 & 
INT_ST_TX_BUF_RDY
) {

394 #ifde‡
RW_DATA_BY_BYTE


395 
tx_size
 = 
	`mö
(
Àn
, ()());

396 
ôî
 = 0; iã∏< 
tx_size
; iter++) {

397 
tx_d©a
 |(*
p
++ << (8*
ôî
));

400 
tx_size
 = 
	`mö
(
Àn
, 4);

401 i‡(
tx_size
 == 4)

402 
tx_d©a
 = (*
p
++);

404 
__u8
 *
q
 = (__u8 *)
p
;

405 
ôî
 = 0; iã∏< 
tx_size
; iter++)

406 
tx_d©a
 |(*
q
++ << (8*
ôî
));

407 
p
 = (
__u32
 *)
q
;

410 
	`ø_oué
(
NFC_INT_ST
, 
INT_ST_TX_BUF_RDY
);

411 
	`ø_oué
(
NFC_DATA
, 
tx_d©a
);

412 
Àn
 -
tx_size
;

413 
ªåy
 = 
READ_STATUS_RETRY
;

415 i‡(
öt_°
 & 
INT_ST_ND_DONE
) {

419 
	`udñay
(1);

420 i‡(
ªåy
-- < 0)

425 #ifde‡
RW_DATA_BY_BYTE


426  ()(
p
 - 
buf
);

428  (()
p
 - ()
buf
);

430 
	}
}

437 
	$nfc_waô_ªady
(
¢ooze_ms
)

439 
ªåy
;

440 
°©us
;

442 
	`udñay
(1000 * 
¢ooze_ms
);

445 i‡(
¢ooze_ms
 == 0)

446 
¢ooze_ms
 = 1;

447 
ªåy
 = 
¢ooze_ms
 * 1000;

449 !
	`NFC_TRANS_DONE
(Ë&& 
ªåy
--) {

450 
	`udñay
(1);

452 i‡(!
	`NFC_TRANS_DONE
()) {

453 
	`¥ötf
("%s:Çÿå™ß˘i⁄ d⁄e\n", 
__func__
);

454  
NAND_STATUS_FAIL
;

457 #i‡!
	`deföed
 (
CONFIG_NOT_SUPPORT_RB
)

458 !(
°©us
 = 
	`nfc_devi˚_ªady
()Ë&& 
ªåy
--) {

459 
	`udñay
(1);

461 i‡(
°©us
 == 0) {

462 
	`¥ötf
("%s:Çÿdevi˚Ñódy.\n", 
__func__
);

463  
NAND_STATUS_FAIL
;

466 
	`nfc_ªad_°©us
(&
°©us
);

467  
°©us
;

469 
ªåy
--) {

470 
	`nfc_ªad_°©us
(&
°©us
);

471 i‡(
°©us
 & 
NAND_STATUS_READY
)

473 
	`udñay
(1);

475 i‡(
ªåy
 < 0) {

476 
	`¥ötf
("%s:Çÿdevi˚Ñódy, sètus(%x).\n", 
__func__
, 
°©us
);

477  
NAND_STATUS_FAIL
;

479  
°©us
;

481 
	}
}

487 
	$nfc_îa£_block
(
row_addr
)

489 
cmd1
, 
cmd2
, 
bus_addr
, 
c⁄f
;

490 
°©us
;

492 
cmd1
 = 0x60;

493 
cmd2
 = 0xd0;

494 
bus_addr
 = 
row_addr
;

495 
c⁄f
 = 0x00511 | ((
CFG_ROW_ADDR_CYCLE
)<<16);

497 
	`ø_dbg
("%s: cmd1: %lx, cmd2:%lx bus_addr: %lx, conf: %lx \n",

498 
__func__
, 
cmd1
, 
cmd2
, 
bus_addr
, 
c⁄f
);

501 
	`CLEAR_INT_STATUS
();

503 
	`ø_oué
(
NFC_CMD1
, 
cmd1
);

504 
	`ø_oué
(
NFC_CMD2
, 
cmd2
);

505 
	`ø_oué
(
NFC_ADDR
, 
bus_addr
);

506 
	`ø_oué
(
NFC_CONF
, 
c⁄f
);

508 
°©us
 = 
	`nfc_waô_ªady
(3);

509 i‡(
°©us
 & 
NAND_STATUS_FAIL
) {

510 
	`¥ötf
("%s: faû\n", 
__func__
);

516 
	}
}

518 
ölöe
 
	$nfc_ªad_øw_d©a
(
cmd1
, 
cmd2
, 
bus_addr
, 
bus_addr2
, 
c⁄f
, *
buf
, 
Àn
)

520 
ªt
;

522 
	`ø_dbg
("%s: cmd1 %x, cmd2 %x,ádd∏%x %x, c⁄‡%x,Üí %x\n", 
__func__
,

523 
cmd1
, 
cmd2
, 
bus_addr2
, 
bus_addr
, 
c⁄f
, 
Àn
);

524 
	`CLEAR_INT_STATUS
();

525 
	`ø_oué
(
NFC_CMD1
, 
cmd1
);

526 
	`ø_oué
(
NFC_CMD2
, 
cmd2
);

527 
	`ø_oué
(
NFC_ADDR
, 
bus_addr
);

528 #i‡
	`deföed
 (
RT6855_FPGA_BOARD
Ë|| deföed (
RT6855_ASIC_BOARD
) || \

529 
	`deföed
 (
RT6855A_FPGA_BOARD
Ë|| deföed (
RT6855A_ASIC_BOARD
) || \

530 
	`deföed
 (
MT7620_FPGA_BOARD
Ë|| deföed (
MT7620_ASIC_BOARD
)

531 
	`ø_oué
(
NFC_ADDR2
, 
bus_addr2
);

533 
	`ø_oué
(
NFC_CONF
, 
c⁄f
);

535 
ªt
 = 
	`_ø_«nd_puŒ_d©a
(
buf
, 
Àn
);

536 i‡(
ªt
 !
Àn
) {

537 
	`ø_dbg
("%s:Ñë:%x (%xË\n", 
__func__
, 
ªt
, 
Àn
);

538  
NAND_STATUS_FAIL
;

541 
ªt
 = 
	`nfc_waô_ªady
(3);

543 
	`ø_oué
(
NFC_CTRL
, 
	`ø_öl
(NFC_CTRL) | 0x02);

544 
	`ø_oué
(
NFC_CTRL
, 
	`ø_öl
(NFC_CTRL) & ~0x02);

546 i‡(
ªt
 & 
NAND_STATUS_FAIL
) {

547 
	`¥ötf
("%s: faû\n", 
__func__
);

548  
NAND_STATUS_FAIL
;

552 
	}
}

554 
ölöe
 
	$nfc_wrôe_øw_d©a
(
cmd1
, 
cmd3
, 
bus_addr
, 
bus_addr2
, 
c⁄f
, *
buf
, 
Àn
)

556 
ªt
;

558 
	`ø_dbg
("%s: cmd1 %x, cmd3 %x,ádd∏%x %x, c⁄‡%x,Üí %x\n", 
__func__
,

559 
cmd1
, 
cmd3
, 
bus_addr2
, 
bus_addr
, 
c⁄f
, 
Àn
);

560 
	`CLEAR_INT_STATUS
();

561 
	`ø_oué
(
NFC_CMD1
, 
cmd1
);

562 
	`ø_oué
(
NFC_CMD3
, 
cmd3
);

563 
	`ø_oué
(
NFC_ADDR
, 
bus_addr
);

564 #i‡
	`deföed
 (
RT6855_FPGA_BOARD
Ë|| deföed (
RT6855_ASIC_BOARD
) || \

565 
	`deföed
 (
RT6855A_FPGA_BOARD
Ë|| deföed (
RT6855A_ASIC_BOARD
) || \

566 
	`deföed
 (
MT7620_FPGA_BOARD
Ë|| deföed (
MT7620_ASIC_BOARD
)

567 
	`ø_oué
(
NFC_ADDR2
, 
bus_addr2
);

569 
	`ø_oué
(
NFC_CONF
, 
c⁄f
);

571 
ªt
 = 
	`_ø_«nd_push_d©a
(
buf
, 
Àn
);

572 i‡(
ªt
 !
Àn
) {

573 
	`ø_dbg
("%s:Ñë:%x (%xË\n", 
__func__
, 
ªt
, 
Àn
);

574  
NAND_STATUS_FAIL
;

577 
ªt
 = 
	`nfc_waô_ªady
(1);

579 
	`ø_oué
(
NFC_CTRL
, 
	`ø_öl
(NFC_CTRL) | 0x02);

580 
	`ø_oué
(
NFC_CTRL
, 
	`ø_öl
(NFC_CTRL) & ~0x02);

582 i‡(
ªt
 & 
NAND_STATUS_FAIL
) {

583 
	`¥ötf
("%s: faû\n", 
__func__
);

584  
NAND_STATUS_FAIL
;

588 
	}
}

594 
	$nfc_ªad_oob
(
∑ge
, 
offs
, *
buf
, 
Àn
)

596 
cmd1
 = 0, 
cmd2
 = 0, 
c⁄f
 = 0;

597 
bus_addr
 = 0, 
bus_addr2
 = 0;

598 
°©us
;

601 
∑ges_≥rblock
 = 1<<(
ø
->
îa£_shi·
 -Ña->
∑ge_shi·
);

602 #i‡
	`deföed
 (
WORKAROUND_RX_BUF_OV
)

603 
	`BUG_ON
 (
Àn
 > 60);

605 
	`BUG_ON
 (
offs
 >> 
ø
->
oob_shi·
);

606 
	`BUG_ON
 (()(((
offs
 + 
Àn
Ë>> 
ø
->
oob_shi·
Ë+ 
∑ge
) >

607 ((
∑ge
 + 
∑ges_≥rblock
) & ~(pages_perblock-1)));

610 
bus_addr
 = (
∑ge
 << (
CFG_COLUMN_ADDR_CYCLE
*8)Ë| (
offs
 & ((1<<CFG_COLUMN_ADDR_CYCLE*8) - 1));

612 i‡(
is_«nd_∑ge_2048
) {

613 
bus_addr
 +
CFG_PAGESIZE
;

614 
bus_addr2
 = 
∑ge
 >> (
CFG_COLUMN_ADDR_CYCLE
*8);

615 
cmd1
 = 0x0;

616 
cmd2
 = 0x30;

617 
c⁄f
 = 0x000511| ((
CFG_ADDR_CYCLE
)<<16Ë| (
Àn
 << 20);

620 
cmd1
 = 0x50;

621 
c⁄f
 = 0x000141| ((
CFG_ADDR_CYCLE
)<<16Ë| (
Àn
 << 20);

623 
c⁄f
 |= (1<<3);

625 
	`ø_dbg
("%s: cmd1:%x, bus_addr:%x, c⁄f:%x,Üí:%x\n", 
__func__
, 
cmd1
, 
bus_addr
, 
c⁄f
, 
Àn
);

627 
°©us
 = 
	`nfc_ªad_øw_d©a
(
cmd1
, 
cmd2
, 
bus_addr
, 
bus_addr2
, 
c⁄f
, 
buf
, 
Àn
);

628 i‡(
°©us
 & 
NAND_STATUS_FAIL
) {

629 
	`¥ötf
("%s: faû \n", 
__func__
);

634 
	}
}

640 
	$nfc_wrôe_oob
(
∑ge
, 
offs
, *
buf
, 
Àn
)

642 
cmd1
 = 0, 
cmd3
=0, 
c⁄f
 = 0;

643 
bus_addr
 = 0, 
bus_addr2
 = 0;

644 
°©us
;

647 
∑ges_≥rblock
 = 1<<(
ø
->
îa£_shi·
 -Ña->
∑ge_shi·
);

649 
	`BUG_ON
 (
offs
 >> 
ø
->
oob_shi·
);

650 
	`BUG_ON
 (()(((
offs
 + 
Àn
Ë>> 
ø
->
oob_shi·
Ë+ 
∑ge
) >

651 ((
∑ge
 + 
∑ges_≥rblock
) & ~(pages_perblock-1)));

654 
bus_addr
 = (
∑ge
 << (
CFG_COLUMN_ADDR_CYCLE
*8)Ë| (
offs
 & ((1<<CFG_COLUMN_ADDR_CYCLE*8) - 1));

656 i‡(
is_«nd_∑ge_2048
) {

657 
cmd1
 = 0x80;

658 
cmd3
 = 0x10;

659 
bus_addr
 +
CFG_PAGESIZE
;

660 
bus_addr2
 = 
∑ge
 >> (
CFG_COLUMN_ADDR_CYCLE
*8);

661 
c⁄f
 = 0x001123 | ((
CFG_ADDR_CYCLE
)<<16Ë| ((
Àn
) << 20);

664 
cmd1
 = 0x08050;

665 
cmd3
 = 0x10;

666 
c⁄f
 = 0x001223 | ((
CFG_ADDR_CYCLE
)<<16Ë| ((
Àn
) << 20);

670 
	`ø_dbg
("%s: cmd1: %x, cmd3: %x bus_addr: %x, conf: %x,Üen:%x\n",

671 
__func__
, 
cmd1
, 
cmd3
, 
bus_addr
, 
c⁄f
, 
Àn
);

673 
°©us
 = 
	`nfc_wrôe_øw_d©a
(
cmd1
, 
cmd3
, 
bus_addr
, 
bus_addr2
, 
c⁄f
, 
buf
, 
Àn
);

674 i‡(
°©us
 & 
NAND_STATUS_FAIL
) {

675 
	`¥ötf
("%s: faû \n", 
__func__
);

680 
	}
}

682 
	$nfc_ecc_vîify
(*
buf
, 
∑ge
, 
mode
)

684 
ªt
, 
i
;

685 *
p
, *
e
;

686 
ecc
;

690 i‡(
mode
 =
FL_WRITING
) {

691 
Àn
 = 
CFG_PAGESIZE
 + 
CFG_PAGE_OOBSIZE
;

692 
c⁄f
 = 0x000141| ((
CFG_ADDR_CYCLE
)<<16Ë| (
Àn
 << 20);

693 
rbbuf
[
CFG_PAGESIZE
+
CFG_PAGE_OOBSIZE
];

694 
c⁄f
 |= (1<<3);

696 
p
 = 
rbbuf
;

697 
ªt
 = 
	`nfc_ªad_∑ge
(
p
, 
∑ge
);

698 i‡(
ªt
 == 0)

699 
ecc_check
;

702 
	`¥ötf
("%s:Ñód back faû,Åryágaö \n",
__func__
);

703 
ªt
 = 
	`nfc_ªad_∑ge
(
p
, 
∑ge
);

704 i‡(
ªt
 != 0) {

705 
	`¥ötf
("\t%s:Ñód back faûágü¿\n",
__func__
);

706 
bad_block
;

709 i‡(
mode
 =
FL_READING
) {

710 
p
 = 
buf
;

715 
ecc_check
:

716 
p
 +
CFG_PAGESIZE
;

717 i‡(!
is_«nd_∑ge_2048
) {

718 
ecc
 = 
	`ø_öl
(
NFC_ECC
);

719 i‡(
ecc
 == 0)

721 
e
 = (*)&
ecc
;

722 
i
=0; i<
CONFIG_ECC_BYTES
; i++) {

723 
ec˝os
 = 
CONFIG_ECC_OFFSET
 + 
i
;

724 i‡(*(
p
 + 
ec˝os
) != ()0xff)

726 i‡(
i
 =
CONFIG_ECC_BYTES
 - 1) {

727 
	`¥ötf
("skùÉc¯0xf‡©Öagê%x hwecc=%X\n", 
∑ge
,
ecc
);

733 
i
=0; i<
CONFIG_ECC_BYTES
; i++) {

734 
ec˝os
 = 
CONFIG_ECC_OFFSET
 + 
i
;

735 i‡(*(
p
 + 
ec˝os
Ë!*(
e
 + 
i
)) {

736 
	`¥ötf
("%s mode:%s, invalidÉcc,Öage: %xÑead:%x %x %x,Écc:%x \n",

737 
__func__
, (
mode
 =
FL_READING
)?"ªad":"wrôe", 
∑ge
,

738 *(
p
+ 
CONFIG_ECC_OFFSET
), *’+ CONFIG_ECC_OFFSET+1), *’+ CONFIG_ECC_OFFSET +2), 
ecc
);

743 #i‡
	`deföed
 (
RT6855_FPGA_BOARD
Ë|| deföed (
RT6855_ASIC_BOARD
) || \

744 
	`deföed
 (
RT6855A_FPGA_BOARD
Ë|| deföed (
RT6855A_ASIC_BOARD
) || \

745 
	`deföed
 (
MT7620_FPGA_BOARD
Ë|| deföed (
MT7620_ASIC_BOARD
)

747 
ecc2
, 
ecc3
, 
ecc4
, 
qsz
;

748 *
e2
, *
e3
, *
e4
;

749 
c‹ª˘i⁄_Êag
 = 0;

750 
ecc
 = 
	`ø_öl
(
NFC_ECC_P1
);

751 
ecc2
 = 
	`ø_öl
(
NFC_ECC_P2
);

752 
ecc3
 = 
	`ø_öl
(
NFC_ECC_P3
);

753 
ecc4
 = 
	`ø_öl
(
NFC_ECC_P4
);

754 
e
 = (*)&
ecc
;

755 
e2
 = (*)&
ecc2
;

756 
e3
 = (*)&
ecc3
;

757 
e4
 = (*)&
ecc4
;

758 
qsz
 = 
CFG_PAGE_OOBSIZE
 / 4;

759 i‡(
ecc
 =0 && 
ecc2
 =0 && 
ecc3
 =0 && 
ecc4
 == 0)

761 
i
=0; i<
CONFIG_ECC_BYTES
; i++) {

762 
ec˝os
 = 
CONFIG_ECC_OFFSET
 + 
i
;

763 i‡(*(
p
 + 
ec˝os
) != ()0xff)

765 i‡(*(
p
 + 
ec˝os
 + 
qsz
) != ()0xff)

767 i‡(*(
p
 + 
ec˝os
 + 
qsz
*2) != ()0xff)

769 i‡(*(
p
 + 
ec˝os
 + 
qsz
*3) != ()0xff)

771 i‡(
i
 =
CONFIG_ECC_BYTES
 - 1) {

772 
	`¥ötf
("skùÉc¯0xf‡©Öagê%x\n", 
∑ge
);

776 
i
=0; i<
CONFIG_ECC_BYTES
; i++) {

777 
ec˝os
 = 
CONFIG_ECC_OFFSET
 + 
i
;

778 i‡(*(
p
 + 
ec˝os
Ë!*(
e
 + 
i
)) {

779 
	`¥ötf
("%s mode:%s, invalidÉcc,Öage: %xÑead:%x %x %x,Écc:%x \n",

780 
__func__
, (
mode
 =
FL_READING
)?"ªad":"wrôe", 
∑ge
,

781 *(
p
+ 
CONFIG_ECC_OFFSET
), *’+ CONFIG_ECC_OFFSET+1), *’+ CONFIG_ECC_OFFSET +2), 
ecc
);

782 
c‹ª˘i⁄_Êag
 |= 0x1;

784 i‡(*(
p
 + 
ec˝os
 + 
qsz
Ë!*(
e2
 + 
i
)) {

785 
	`¥ötf
("%s mode:%s, invalidÉcc2,Öage: %xÑead:%x %x %x,Écc2:%x \n",

786 
__func__
, (
mode
 =
FL_READING
)?"ªad":"wrôe", 
∑ge
,

787 *(
p
+
CONFIG_ECC_OFFSET
+
qsz
), *’+ CONFIG_ECC_OFFSET+1+qsz), *’+ CONFIG_ECC_OFFSET+2+qsz), 
ecc2
);

788 
c‹ª˘i⁄_Êag
 |= 0x2;

790 i‡(*(
p
 + 
ec˝os
 + 
qsz
*2Ë!*(
e3
 + 
i
)) {

791 
	`¥ötf
("%s mode:%s, invalidÉcc3,Öage: %xÑead:%x %x %x,Écc3:%x \n",

792 
__func__
, (
mode
 =
FL_READING
)?"ªad":"wrôe", 
∑ge
,

793 *(
p
+
CONFIG_ECC_OFFSET
+
qsz
*2), *’+ CONFIG_ECC_OFFSET+1+qsz*2), *’+ CONFIG_ECC_OFFSET+2+qsz*2), 
ecc3
);

794 
c‹ª˘i⁄_Êag
 |= 0x4;

796 i‡(*(
p
 + 
ec˝os
 + 
qsz
*3Ë!*(
e4
 + 
i
)) {

797 
	`¥ötf
("%s mode:%s, invalidÉcc4,Öage: %xÑead:%x %x %x,Écc4:%x \n",

798 
__func__
, (
mode
 =
FL_READING
)?"ªad":"wrôe", 
∑ge
,

799 *(
p
+
CONFIG_ECC_OFFSET
+
qsz
*3), *’+ CONFIG_ECC_OFFSET+1+qsz*3), *’+ CONFIG_ECC_OFFSET+2+qsz*3), 
ecc4
);

800 
c‹ª˘i⁄_Êag
 |= 0x8;

804 i‡(
c‹ª˘i⁄_Êag
)

806 
	`¥ötf
("tryingÅo do correction!\n");

807 i‡(
c‹ª˘i⁄_Êag
 & 0x1)

809 
byãs
, 
bôs
;

810 *
pBuf
 = 
p
 - 
CFG_PAGESIZE
;

812 i‡(
	`⁄e_bô_c‹ª˘i⁄
(
p
 + 
CONFIG_ECC_OFFSET
, 
e
, &
byãs
, &
bôs
) == 0)

814 
pBuf
[
byãs
] =ÖBuf[byãs] ^ (1 << 
bôs
);

815 
	`¥ötf
("1. c‹ª˘ byã %d, bô %d!\n", 
byãs
, 
bôs
);

819 
	`¥ötf
("failedÅo correct!\n");

824 i‡(
c‹ª˘i⁄_Êag
 & 0x2)

826 
byãs
, 
bôs
;

827 *
pBuf
 = (
p
 - 
CFG_PAGESIZE
) + CFG_PAGESIZE/4;

829 i‡(
	`⁄e_bô_c‹ª˘i⁄
((
p
 + 
CONFIG_ECC_OFFSET
 + 
qsz
), 
e2
, &
byãs
, &
bôs
) == 0)

831 
pBuf
[
byãs
] =ÖBuf[byãs] ^ (1 << 
bôs
);

832 
	`¥ötf
("2. c‹ª˘ byã %d, bô %d!\n", 
byãs
, 
bôs
);

836 
	`¥ötf
("failedÅo correct!\n");

840 i‡(
c‹ª˘i⁄_Êag
 & 0x4)

842 
byãs
, 
bôs
;

843 *
pBuf
 = (
p
 - 
CFG_PAGESIZE
) + CFG_PAGESIZE/2;

845 i‡(
	`⁄e_bô_c‹ª˘i⁄
((
p
 + 
CONFIG_ECC_OFFSET
 + 
qsz
 * 2), 
e3
, &
byãs
, &
bôs
) == 0)

847 
pBuf
[
byãs
] =ÖBuf[byãs] ^ (1 << 
bôs
);

848 
	`¥ötf
("3. c‹ª˘ byã %d, bô %d!\n", 
byãs
, 
bôs
);

852 
	`¥ötf
("failedÅo correct!\n");

856 i‡(
c‹ª˘i⁄_Êag
 & 0x8)

858 
byãs
, 
bôs
;

859 *
pBuf
 = (
p
 - 
CFG_PAGESIZE
) + CFG_PAGESIZE*3/4;

861 i‡(
	`⁄e_bô_c‹ª˘i⁄
((
p
 + 
CONFIG_ECC_OFFSET
 + 
qsz
 * 3), 
e4
, &
byãs
, &
bôs
) == 0)

863 
pBuf
[
byãs
] =ÖBuf[byãs] ^ (1 << 
bôs
);

864 
	`¥ötf
("4. c‹ª˘ byã %d, bô %d!\n", 
byãs
, 
bôs
);

868 
	`¥ötf
("failedÅo correct!\n");

879 
bad_block
:

881 
	}
}

887 
	$nfc_ªad_∑ge
(*
buf
, 
∑ge
)

889 
cmd1
 = 0, 
cmd2
 = 0, 
c⁄f
 = 0;

890 
bus_addr
 = 0, 
bus_addr2
 = 0;

891 
size
, 
offs
;

892 
°©us
 = 0;

894 
∑ge
 =Öagê& (
CFG_CHIPSIZE
 - 1);

895 
size
 = 
CFG_PAGESIZE
 + 
CFG_PAGE_OOBSIZE
;

896 
offs
 = 0;

898 
size
 > 0) {

899 
Àn
;

900 #i‡
	`deföed
 (
WORKAROUND_RX_BUF_OV
)

901 
Àn
 = 
	`mö
(60, 
size
);

903 
Àn
 = 
size
;

905 
bus_addr
 = (
∑ge
 << (
CFG_COLUMN_ADDR_CYCLE
*8)Ë| (
offs
 & ((1<<CFG_COLUMN_ADDR_CYCLE*8)-1));

906 i‡(
is_«nd_∑ge_2048
) {

907 
bus_addr2
 = 
∑ge
 >> (
CFG_COLUMN_ADDR_CYCLE
*8);

908 
cmd1
 = 0x0;

909 
cmd2
 = 0x30;

910 
c⁄f
 = 0x000511| ((
CFG_ADDR_CYCLE
)<<16Ë| (
Àn
 << 20);

913 i‡(
offs
 & ~(
CFG_PAGESIZE
-1))

914 
cmd1
 = 0x50;

915 i‡(
offs
 & ~((1<<
CFG_COLUMN_ADDR_CYCLE
*8)-1))

916 
cmd1
 = 0x01;

918 
cmd1
 = 0;

920 
c⁄f
 = 0x000141| ((
CFG_ADDR_CYCLE
)<<16Ë| (
Àn
 << 20);

922 #i‡!
	`deföed
 (
WORKAROUND_RX_BUF_OV
)

923 
c⁄f
 |= (1<<3);

926 
°©us
 = 
	`nfc_ªad_øw_d©a
(
cmd1
, 
cmd2
, 
bus_addr
, 
bus_addr2
, 
c⁄f
, 
buf
+
offs
, 
Àn
);

927 i‡(
°©us
 & 
NAND_STATUS_FAIL
) {

928 
	`¥ötf
("%s: faû \n", 
__func__
);

932 
offs
 +
Àn
;

933 
size
 -
Àn
;

937 
°©us
 = 
	`nfc_ecc_vîify
(
buf
, 
∑ge
, 
FL_READING
);

938 i‡(
°©us
 != 0) {

939 
	`¥ötf
("%s: faû, buf:%x,Öage:%x, \n", 
__func__
, 
buf
, 
∑ge
);

944 
	}
}

950 
	$nfc_wrôe_∑ge
(*
buf
, 
∑ge
)

952 
cmd1
 = 0, 
cmd3
, 
c⁄f
 = 0;

953 
bus_addr
 = 0, 
bus_addr2
 = 0;

954 
size
;

955 
°©us
;

958 
∑ge
 =Öagê& (
CFG_CHIPSIZE
-1);

959 
size
 = 
CFG_PAGESIZE
 + 
CFG_PAGE_OOBSIZE
;

960 
bus_addr
 = (
∑ge
 << (
CFG_COLUMN_ADDR_CYCLE
*8));

962 i‡(
is_«nd_∑ge_2048
) {

963 
bus_addr2
 = 
∑ge
 >> (
CFG_COLUMN_ADDR_CYCLE
*8);

964 
cmd1
 = 0x80;

965 
cmd3
 = 0x10;

966 
c⁄f
 = 0x001123| ((
CFG_ADDR_CYCLE
)<<16Ë| (
size
 << 20);

969 
cmd1
 = 0x8000;

970 
cmd3
 = 0x10;

971 
c⁄f
 = 0x001223| ((
CFG_ADDR_CYCLE
)<<16Ë| (
size
 << 20);

973 
c⁄f
 |= (1<<3);

975 #ifde‡
MTK_NAND_BMT_DEBUG


976 i‡((
bus_addr
 == 0xe8130000) || (bus_addr == 0xe9910000) || (bus_addr == 0xe9f20000) || (bus_addr == 0xec450000))

978 
	`¥ötf
("hmm... cª©ê®bad block %x\n", 
bus_addr
);

979 *(
buf
+
CFG_PAGESIZE
+
CONFIG_BAD_BLOCK_POS
) = 0x11;

983 i‡(
bus_addr
 == 0x0)

985 
	`¥ötf
("hmm... cª©ê®bad block %x\n", 
bus_addr
);

986 *(
buf
+2048+5) = 0x11;

990 
°©us
 = 
	`nfc_wrôe_øw_d©a
(
cmd1
, 
cmd3
, 
bus_addr
, 
bus_addr2
, 
c⁄f
, 
buf
, 
size
);

991 i‡(
°©us
 & 
NAND_STATUS_FAIL
) {

992 
	`¥ötf
("%s: faû\n", 
__func__
);

996 
°©us
 = 
	`nfc_ecc_vîify
(
buf
, 
∑ge
, 
FL_WRITING
);

997 i‡(
°©us
 != 0) {

998 
	`¥ötf
("%s:Écc_vîify faû:Ñë:%x \n", 
__func__
, 
°©us
);

999 *(
buf
+
CFG_PAGESIZE
+
CONFIG_BAD_BLOCK_POS
) = 0x33;

1000 
∑ge
 -∑gê% (
CFG_BLOCKSIZE
/
CFG_PAGESIZE
);

1001 
	`¥ötf
("¸óãá bad blockáà∑gê%x\n", 
∑ge
);

1002 
°©us
 = 
	`nfc_wrôe_oob
(
∑ge
, 
CONFIG_BAD_BLOCK_POS
, 
buf
+
CFG_PAGESIZE
+CONFIG_BAD_BLOCK_POS, 1);

1003 i‡(
°©us
 == 0)

1004 
	`¥ötf
("bad blockácknowledged,Ölease writeágain\n");

1006 
	`¥ötf
("failedÅo createá bad block\n");

1011 
	}
}

1013 #i‡
deföed
(
CONFIG_BADBLOCK_CHECK
Ë|| deföed(
MTK_NAND_BMT
)

1014 
	$ø«nd_block_isbad
(
loff_t
 
offs
)

1016 
èg
;

1017 
∑ge
, 
ªt
;

1019 
∑ge
 = 
offs
 >> 
CONFIG_PAGE_SIZE_BIT
;

1020 
ªt
 = 
	`nfc_ªad_oob
(
∑ge
, 
CONFIG_BAD_BLOCK_POS
, (*)&
èg
, 1);

1021 i‡(
ªt
 =0 && (
èg
 & 0xff) == 0xff)

1024 
	}
}

1027 
	$ø«nd_îa£
(
offs
, 
Àn
)

1029 
∑ge
, 
°©us
;

1030 
blocksize
 = 
CFG_BLOCKSIZE
;

1031 
ªt
 = 0;

1033 #ifde‡
MTK_NAND_BMT


1034 i‡(
offs
 >
BMT_APPLY_START_OFFSET
)

1035  
	`ø«nd_îa£_bmt
(
offs
, 
Àn
);

1039 
	`ø_dbg
("%s: sèπ:%x,Üí:%x \n", 
__func__
, 
offs
, 
Àn
);

1042 i‡(
	`BLOCK_ALIGNED
(
offs
Ë|| BLOCK_ALIGNED(
Àn
)) {

1043 
	`ø_dbg
("%s:Éø£ blockÇŸálig√d,áddr:%xÜí:%x %x\n", 
__func__
, 
offs
, 
Àn
, 
CFG_BLOCKSIZE
);

1047 
Àn
) {

1048 
∑ge
 = ()(
offs
 >> 
CONFIG_PAGE_SIZE_BIT
);

1051 i‡(
	`nfc_check_wp
()) {

1052 
	`¥ötf
("%s:Ç™d i†wrôê¥Ÿe˘ed\n", 
__func__
);

1056 #ifde‡
CONFIG_BADBLOCK_CHECK


1058 i‡(
	`ø«nd_block_isbad
(
offs
)) {

1059 
	`¥ötf
("%s:áâem±Åÿîa£á bad blockáà0x%08x\n", 
__func__
, 
offs
);

1060 
ªt
++;

1061 
offs
 +
blocksize
;

1066 
°©us
 = 
	`nfc_îa£_block
(
∑ge
);

1069 i‡(
°©us
) {

1070 
	`¥ötf
("%s: faûedÉø£,Öagê0x%08x\n", 
__func__
, 
∑ge
);

1075 
Àn
 -
blocksize
;

1076 
offs
 +
blocksize
;

1079  
ªt
;

1080 
	}
}

1082 
	$ø«nd_wrôe
(*
buf
, 
to
, 
d©Æí
)

1084 
∑ge
, 
i
 = 0;

1085 
size_t
 
ªéí
 = 0;

1086 
∑gemask
 = (
CFG_PAGESIZE
 -1);

1087 
loff_t
 
addr
 = 
to
;

1088 
buf„rs
[
CFG_PAGESIZE
 + 
CFG_PAGE_OOBSIZE
];

1090 #ifde‡
MTK_NAND_BMT


1091 i‡(
to
 >
BMT_APPLY_START_OFFSET
)

1092  
	`ø«nd_wrôe_bmt
(
buf
, 
to
, 
d©Æí
);

1097 
›s
->
ªéí
 = 0;

1098 
›s
->
oobªéí
 = 0;

1101 
ø
->
buf„rs_∑ge
 = -1;

1104 i‡(
buf
 == 0)

1105 
d©Æí
 = 0;

1109 i‡(
d©Æí
 =0 && 
oobÀn
) {

1110 
Àn
 = ((
oobÀn
 + 
›s
->
ooboffs
Ë+ (
ø
->
oob
->
oobavaû
 - 1)Ë/Ña->oob->oobavaû * 
oobsize
;

1113 
∑ge
 = ()((
to
 & ((1<<
ø
->
chù_shi·
)-1)Ë>>Ña->
∑ge_shi·
);

1114 
	`mem£t
(
ø
->
buf„rs
, 0x0ff, 
CFG_PAGESIZE
);

1116 i‡(
›s
->
mode
 =
MTD_OOB_AUTO
) {

1117 
	`nfc_ªad_oob
(
ø
, 
∑ge
, 0,Ña->
buf„rs
, 
Àn
, 
FLAG_USE_GDMA
 );

1120 
	`«nd_wrôe_oob_buf
(
ø
,Ña->
buf„rs
, 
oob
, 
oobÀn
, 
›s
->
mode
, ops->
ooboffs
);

1122 
	`nfc_wrôe_oob
(
ø
, 
∑ge
, 0,Ña->
buf„rs
, 
Àn
, 
FLAG_USE_GDMA
);

1124 
›s
->
oobªéí
 = 
oobÀn
;

1125 
oobÀn
 = 0;

1129 i‡(
d©Æí
 && 
oobÀn
 == 0) {

1135 
d©Æí
) {

1136 
Àn
;

1137 
ªt
;

1138 
offs
;

1140 
∑ge
 = ()((
addr
 & (
CFG_CHIPSIZE
-1)Ë>> 
CONFIG_PAGE_SIZE_BIT
);

1142 
	`ø_dbg
("%s (%d):áddr:%x,Ög:%x, data:%p, datalen:%x\n",

1143 
__func__
, 
i
++, ()
addr
, 
∑ge
, 
buf
, 
d©Æí
);

1146 i‡(
	`nfc_check_wp
()) {

1147 
	`¥ötf
("%s:Ç™d i†wrôê¥Ÿe˘ed\n", 
__func__
);

1151 
	`mem£t
(
buf„rs
, 0x0ff, (buffers));

1155 i‡(
›s
->
mode
 =
MTD_OOB_AUTO
) {

1156 
	`nfc_ªad_oob
(
ø
, 
∑ge
, 0,Ña->
buf„rs
 + 
CFG_PAGESIZE
, 
oobsize
, 
FLAG_NONE
);

1158 i‡(
oob
 && 
oobÀn
 > 0) {

1159 
Àn
 = 
	`«nd_wrôe_oob_buf
(
ø
,Ña->
buf„rs
 + 
CFG_PAGESIZE
, 
oob
, 
oobÀn
, 
›s
->
mode
, ops->
ooboffs
);

1160 i‡(
Àn
 < 0)

1161  -
EINVAL
;

1163 
oob
 +
Àn
;

1164 
›s
->
oobªéí
 +
Àn
;

1165 
oobÀn
 -
Àn
;

1170 
offs
 = 
addr
 & 
∑gemask
;

1171 
Àn
 = 
	`mö
(
d©Æí
, 
CFG_PAGESIZE
 - 
offs
);

1172 i‡(
buf
 && 
Àn
 > 0) {

1173 
	`mem˝y
(
buf„rs
 + 
offs
, 
buf
, 
Àn
);

1175 
buf
 +
Àn
;

1176 
d©Æí
 -
Àn
;

1177 
ªéí
 +
Àn
;

1180 
ªt
 = 
	`nfc_wrôe_∑ge
(
buf„rs
, 
∑ge
);

1181 i‡(
ªt
) {

1186 
addr
 = (
∑ge
+1Ë<< 
CONFIG_PAGE_SIZE_BIT
;

1188  
ªéí
;

1189 
	}
}

1191 
	$ø«nd_ªad
(*
buf
, 
‰om
, 
d©Æí
)

1193 
∑ge
, 
i
 = 0;

1194 
size_t
 
ªéí
 = 0;

1195 
∑gemask
 = (
CFG_PAGESIZE
 -1);

1196 
loff_t
 
addr
 = 
‰om
;

1197 
buf„rs
[
CFG_PAGESIZE
 + 
CFG_PAGE_OOBSIZE
];

1199 #ifde‡
MTK_NAND_BMT


1200 i‡(
‰om
 >
BMT_APPLY_START_OFFSET
)

1201  
	`ø«nd_ªad_bmt
(
buf
, 
‰om
, 
d©Æí
);

1204 i‡(
buf
 == 0)

1208 
d©Æí
) {

1209 
Àn
;

1210 
ªt
;

1211 
offs
;

1213 
	`ø_dbg
("%s (%d):áddr:%x, datalen:%x\n",

1214 
__func__
, 
i
++, ()
addr
, 
d©Æí
);

1216 
∑ge
 = ()((
addr
 & (
CFG_CHIPSIZE
-1)Ë>> 
CONFIG_PAGE_SIZE_BIT
);

1218 #ifde‡
CONFIG_BADBLOCK_CHECK


1220 i‡(!
is_«nd_∑ge_2048
 && 
	`ø«nd_block_isbad
(
addr
)) {

1221 
	`¥ötf
("%s: skùÑódögá bad block %x ->", 
__func__
, ()
addr
);

1222 
addr
 +(1 << (
CONFIG_PAGE_SIZE_BIT
 + 
CONFIG_NUMPAGE_PER_BLOCK_BIT
));;

1223 
	`¥ötf
(" %x\n", ()
addr
);

1228 i‡(
d©Æí
 > (
CFG_PAGESIZE
+
CFG_PAGE_OOBSIZE
Ë&& (
∑ge
 & 0x1f) == 0)

1229 
	`¥ötf
(".");

1230 
ªt
 = 
	`nfc_ªad_∑ge
(
buf„rs
, 
∑ge
);

1232 i‡(
ªt
) {

1233 
	`¥ötf
("readágain:\n");

1234 
ªt
 = 
	`nfc_ªad_∑ge
(
buf„rs
, 
∑ge
);

1236 i‡(
ªt
) {

1237 
	`¥ötf
("readágain fail \n");

1239 
	`«nd_bbt_£t
(
ø
, 
addr
 >> (
CONFIG_PAGE_SIZE_BIT
 + 
CONFIG_NUMPAGE_PER_BLOCK_BIT
), 
BBT_TAG_BAD
);

1240 i‡((
ªt
 !-
EUCLEAN
Ë&& (ªà!-
EBADMSG
)) {

1241  
ªt
;

1249 
	`¥ötf
("Ñeadágian susccess \n");

1252 #ifde‡
CONFIG_BADBLOCK_CHECK


1254 i‡(
is_«nd_∑ge_2048
) {

1255 i‡(
buf„rs
[
CFG_PAGESIZE
+
CONFIG_BAD_BLOCK_POS
] != ()0xff) {

1256 
	`¥ötf
("%s: skùÑódögá bad block %x ->", 
__func__
, ()
addr
);

1257 
addr
 +(1 << (
CONFIG_PAGE_SIZE_BIT
 + 
CONFIG_NUMPAGE_PER_BLOCK_BIT
));;

1258 
	`¥ötf
(" %x\n", ()
addr
);

1266 i‡(
oob
 && 
oobÀn
 > 0) {

1267 
Àn
 = 
	`«nd_ªad_oob_buf
(
ø
, 
oob
, 
oobÀn
, 
›s
->
mode
, ops->
ooboffs
);

1268 i‡(
Àn
 < 0) {

1269 
	`¥ötf
("«nd_ªad_oob_buf: faûÑëu∫ %x \n", 
Àn
);

1270  -
EINVAL
;

1273 
oob
 +
Àn
;

1274 
›s
->
oobªéí
 +
Àn
;

1275 
oobÀn
 -
Àn
;

1280 
offs
 = 
addr
 & 
∑gemask
;

1281 
Àn
 = 
	`mö
(
d©Æí
, 
CFG_PAGESIZE
 - 
offs
);

1282 i‡(
buf
 && 
Àn
 > 0) {

1283 
	`mem˝y
(
buf
, 
buf„rs
 + 
offs
, 
Àn
);

1285 
buf
 +
Àn
;

1286 
d©Æí
 -
Àn
;

1287 
ªéí
 +
Àn
;

1288 i‡(
ªt
)

1294 
addr
 = (
∑ge
+1Ë<< 
CONFIG_PAGE_SIZE_BIT
;

1296 i‡(
d©Æí
 > (
CFG_PAGESIZE
+
CFG_PAGE_OOBSIZE
))

1297 
	`¥ötf
("\n");

1298  
ªéí
;

1299 
	}
}

1301 
	$ø«nd_îa£_wrôe
(*
buf
, 
offs
, 
cou¡
)

1303 
blocksize
 = 
CFG_BLOCKSIZE
;

1304 
blockmask
 = 
blocksize
 - 1;

1305 
rc
;

1306 #ifde‡
RALINK_NAND_UPGRADE_CHECK


1307 
i
 = 0;

1308 *
ãmp
;

1311 #ifde‡
MTK_NAND_BMT


1312 i‡(
offs
 >
BMT_APPLY_START_OFFSET
)

1313  
	`ø«nd_îa£_wrôe_bmt
(
buf
, 
offs
, 
cou¡
);

1316 
	`¥ötf
("%s: offs:%x, cou¡:%x\n", 
__func__
, 
offs
, 
cou¡
);

1318 i‡(
cou¡
 > (
CFG_CHIPSIZE
 - (
CFG_BOOTLOADER_SIZE
 + 
CFG_CONFIG_SIZE
 + 
CFG_FACTORY_SIZE
))) {

1319 
	`¥ötf
("Ab‹t: imagêsizêœrgîÅh™ %d!\n\n", 
CFG_CHIPSIZE
 -

1320 (
CFG_BOOTLOADER_SIZE
 + 
CFG_CONFIG_SIZE
 + 
CFG_FACTORY_SIZE
));

1321 
	`udñay
(10*1000*1000);

1325 
cou¡
 > 0) {

1326 
	#BLOCK_ALIGNE
(
a
Ë((◊Ë& 
blockmask
))

	)

1327 #ifde‡
CONFIG_BADBLOCK_CHECK


1328 i‡(
	`BLOCK_ALIGNE
(
offs
)) {

1329 
	`¥ötf
("%s: off†%x i†nŸálig√d\n", 
__func__
, 
offs
);

1332 i‡(
cou¡
 < 
blocksize
)

1334 i‡(
	`BLOCK_ALIGNE
(
offs
Ë|| (
cou¡
 < 
blocksize
))

1337 *
block
;

1338 
põ˚
, 
blockaddr
;

1339 
põ˚_size
;

1341 
block
 = 
	`mÆloc
(
blocksize
);

1342 i‡(!
block
) {

1343 
	`¥ötf
("%s: mÆlo¯block faûed\n", 
__func__
);

1347 
blockaddr
 = 
offs
 & ~
blockmask
;

1348 i‡(
	`ø«nd_ªad
(
block
, 
blockaddr
, 
blocksize
) != blocksize) {

1349 
	`‰ì
(
block
);

1353 
põ˚
 = 
offs
 & 
blockmask
;

1354 
põ˚_size
 = 
	`mö
(
cou¡
, 
blocksize
 - 
põ˚
);

1355 
	`mem˝y
(
block
 + 
põ˚
, 
buf
, 
põ˚_size
);

1357 
åy_√xt_0
:

1358 
rc
 = 
	`ø«nd_îa£
(
blockaddr
, 
blocksize
);

1359 #ifde‡
CONFIG_BADBLOCK_CHECK


1360 i‡(
rc
 >= 1) {

1361 
	`¥ötf
("bad block: %x,ÅryÇext: ", 
blockaddr
);

1362 
blockaddr
 +(
rc
 * 
blocksize
);

1363 
	`¥ötf
("%x\n", 
blockaddr
);

1368 i‡(
rc
 != 0) {

1369 
	`‰ì
(
block
);

1372 #ifde‡
CONFIG_BADBLOCK_CHECK


1373 i‡(
	`ø«nd_wrôe
(
block
, 
blockaddr
, 
blocksize
) != blocksize) {

1374 
	`¥ötf
("bad block: %x,ÅryÇext: ", 
blockaddr
);

1375 
blockaddr
 +
blocksize
;

1376 
	`¥ötf
("%x\n", 
blockaddr
);

1377 
åy_√xt_0
;

1380 i‡(
	`ø«nd_wrôe
(
block
, 
blockaddr
, 
blocksize
) != blocksize) {

1381 
	`‰ì
(
block
);

1385 #ifde‡
RALINK_NAND_UPGRADE_CHECK


1386 
ãmp
 = 
	`mÆloc
(
blocksize
);

1387 i‡(!
ãmp
) {

1388 
	`¥ötf
("%s: mÆlo¯ãm∞Áûed\n", 
__func__
);

1392 i‡(
	`ø«nd_ªad
(
ãmp
, 
blockaddr
, 
blocksize
) != blocksize) {

1393 
	`‰ì
(
block
);

1394 
	`‰ì
(
ãmp
);

1398 if(
	`memcmp
(
block
, 
ãmp
, 
blocksize
) == 0)

1404 
	`¥ötf
("block write incorrect!\n\r");

1405 
	`‰ì
(
block
);

1406 
	`‰ì
(
ãmp
);

1409 
	`‰ì
(
ãmp
);

1411 
	`‰ì
(
block
);

1413 
buf
 +
põ˚_size
;

1414 
offs
 +
põ˚_size
;

1415 
cou¡
 -
põ˚_size
;

1418 
Æig√d_size
 = 
blocksize
;

1420 
åy_√xt_1
:

1421 
rc
 = 
	`ø«nd_îa£
(
offs
, 
Æig√d_size
);

1422 #ifde‡
CONFIG_BADBLOCK_CHECK


1423 i‡(
rc
 >= 1) {

1424 
	`¥ötf
("bad block: %x,ÅryÇext: ", 
offs
);

1425 
offs
 +(
rc
 * 
blocksize
);

1426 
	`¥ötf
("%x\n", 
offs
);

1431 i‡(
rc
 != 0)

1435 #ifde‡
CONFIG_BADBLOCK_CHECK


1436 i‡(
	`ø«nd_wrôe
(
buf
, 
offs
, 
Æig√d_size
) !=áligned_size)

1438 
	`¥ötf
("bad block: %x,ÅryÇext: ", 
offs
);

1439 
offs
 +
blocksize
;

1440 
	`¥ötf
("%x\n", 
offs
);

1441 
åy_√xt_1
;

1444 i‡(
	`ø«nd_wrôe
(
buf
, 
offs
, 
Æig√d_size
) !=áligned_size)

1449 #ifde‡
RALINK_NAND_UPGRADE_CHECK


1450 
ãmp
 = 
	`mÆloc
(
blocksize
);

1451 i‡(!
ãmp
) {

1452 
	`¥ötf
("%s: mÆlo¯ãm∞Áûed\n", 
__func__
);

1456  
i
=0; i< (
Æig√d_size
/
blocksize
); i++)

1458 i‡(
	`ø«nd_ªad
(
ãmp
, 
offs
+(
i
*
blocksize
), blocksize) != blocksize)

1460 
	`‰ì
(
ãmp
);

1463 if(
	`memcmp
(
buf
+(
i
*
blocksize
), 
ãmp
, blocksize) == 0)

1469 
	`¥ötf
("blocksizêwrôêöc‹ª˘ block#=%d!\n\r",
i
);

1470 
	`‰ì
(
ãmp
);

1474 
	`‰ì
(
ãmp
);

1477 
	`¥ötf
(".");

1479 
buf
 +
Æig√d_size
;

1480 
offs
 +
Æig√d_size
;

1481 
cou¡
 -
Æig√d_size
;

1484 
	`¥ötf
("Done!\n");

1486 
	}
}

1489 #ifde‡
MTK_NAND_BMT_DEBUG


1490 
	$ø«nd_îa£_øw
(
offs
, 
Àn
)

1492 
∑ge
, 
°©us
;

1493 
blocksize
 = 
CFG_BLOCKSIZE
;

1494 
ªt
 = 0;

1496 
	`ø_dbg
("%s: sèπ:%x,Üí:%x \n", 
__func__
, 
offs
, 
Àn
);

1499 i‡(
	`BLOCK_ALIGNED
(
offs
Ë|| BLOCK_ALIGNED(
Àn
)) {

1500 
	`ø_dbg
("%s:Éø£ blockÇŸálig√d,áddr:%xÜí:%x %x\n", 
__func__
, 
offs
, 
Àn
, 
CFG_BLOCKSIZE
);

1504 
Àn
) {

1505 
∑ge
 = ()(
offs
 >> 
CONFIG_PAGE_SIZE_BIT
);

1508 i‡(
	`nfc_check_wp
()) {

1509 
	`¥ötf
("%s:Ç™d i†wrôê¥Ÿe˘ed\n", 
__func__
);

1513 
°©us
 = 
	`nfc_îa£_block
(
∑ge
);

1516 i‡(
°©us
) {

1517 
	`¥ötf
("%s: faûedÉø£,Öagê0x%08x\n", 
__func__
, 
∑ge
);

1522 
Àn
 -
blocksize
;

1523 
offs
 +
blocksize
;

1526  
ªt
;

1527 
	}
}

1530 #ifde‡
MTK_NAND_BMT


1531 
	$ø«nd_îa£_bmt
(
offs
, 
Àn
)

1533 
∑ge
, 
°©us
;

1534 
blocksize
 = 
CFG_BLOCKSIZE
;

1535 
ªt
 = 0;

1536 
block
;

1537 
u16
 
∑ge_ö_block
;

1538 
m≠≥d_block
;

1539 
u8
 
oob
[16];

1541 i‡(
offs
 < 
BMT_APPLY_START_OFFSET
)

1543  
	`ø«nd_îa£
(
offs
, 
Àn
);

1546 
	`ø_dbg
("%s: sèπ:%x,Üí:%x \n", 
__func__
, 
offs
, 
Àn
);

1548 i‡(
	`BLOCK_ALIGNED
(
offs
Ë|| BLOCK_ALIGNED(
Àn
)) {

1549 
	`ø_dbg
("%s:Éø£ blockÇŸálig√d,áddr:%xÜí:%x %x\n", 
__func__
, 
offs
, 
Àn
, 
CFG_BLOCKSIZE
);

1553 
Àn
) {

1554 
∑ge
 = ()(
offs
 >> 
CONFIG_PAGE_SIZE_BIT
);

1556 
block
 = 
∑ge
 >> 
CONFIG_NUMPAGE_PER_BLOCK_BIT
;

1557 
∑ge_ö_block
 = 
∑ge
 & ((1 << 
CONFIG_NUMPAGE_PER_BLOCK_BIT
) - 1);

1558 
m≠≥d_block
 = 
	`gë_m≠pög_block_ödex
(
block
);

1560 i‡(
m≠≥d_block
 !
block
)

1562 
∑ge
 = 
∑ge_ö_block
 + (
m≠≥d_block
 << 
CONFIG_NUMPAGE_PER_BLOCK_BIT
);

1566 i‡(
	`nfc_check_wp
()) {

1567 
	`¥ötf
("%s:Ç™d i†wrôê¥Ÿe˘ed\n", 
__func__
);

1572 
	`nfc_ªad_oob
(
∑ge
, 0, 
oob
, 16);

1573 
oob
[
CONFIG_ECC_OFFSET
] = 0xff;

1574 
oob
[
CONFIG_ECC_OFFSET
+1] = 0xff;

1575 
oob
[
CONFIG_ECC_OFFSET
+2] = 0xff;

1577 i‡(
oob
[
CONFIG_BAD_BLOCK_POS
] != 0xff)

1579 i‡(
	`upd©e_bmt
(
∑ge
 << 
CONFIG_PAGE_SIZE_BIT
, 
UPDATE_ERASE_FAIL
, 
NULL
, NULL))

1581 
	`¥ötf
("%s: found bad blockáà∑gê0x%08x, upd©e_bmt\n", 
__func__
, 
∑ge
);

1585 
	`¥ötf
("%s: upd©êbmàÁûed \n", 
__func__
);

1588 
oob
[
CONFIG_BAD_BLOCK_POS
] = 0xff;

1589 
∑ge
 = ()(
offs
 >> 
CONFIG_PAGE_SIZE_BIT
);

1590 
°©us
 = 
	`upd©e_bmt_∑ge
(&
∑ge
, 
oob
);

1594 
°©us
 = 
	`nfc_îa£_block
(
∑ge
);

1597 
	`nfc_wrôe_oob
(
∑ge
, 0, 
oob
, 16);

1600 i‡(
°©us
) {

1601 i‡(
	`upd©e_bmt
(
∑ge
 << 
CONFIG_PAGE_SIZE_BIT
, 
UPDATE_ERASE_FAIL
, 
NULL
, NULL))

1603 
	`¥ötf
("%s: faûedÉø£,Öagê0x%08x, upd©e_bmt\n", 
__func__
, 
∑ge
);

1610 
Àn
 -
blocksize
;

1611 
offs
 +
blocksize
;

1614  
ªt
;

1615 
	}
}

1617 
	$ø«nd_wrôe_bmt
(*
buf
, 
to
, 
d©Æí
)

1619 
∑ge
, 
i
 = 0;

1620 
size_t
 
ªéí
 = 0;

1621 
∑gemask
 = (
CFG_PAGESIZE
 -1);

1622 
loff_t
 
addr
 = 
to
;

1623 
buf„rs
[
CFG_PAGESIZE
 + 
CFG_PAGE_OOBSIZE
];

1624 
block
, 
√w∑ge
;

1625 
u16
 
∑ge_ö_block
;

1626 
m≠≥d_block
;

1629 i‡(
to
 < 
BMT_APPLY_START_OFFSET
)

1631  
	`ø«nd_wrôe
(
buf
, 
to
, 
d©Æí
);

1634 i‡(
buf
 == 0)

1635 
d©Æí
 = 0;

1638 
d©Æí
) {

1639 
Àn
;

1640 
ªt
;

1641 
offs
;

1643 
∑ge
 = ()((
addr
 & (
CFG_CHIPSIZE
-1)Ë>> 
CONFIG_PAGE_SIZE_BIT
);

1645 
	`ø_dbg
("%s (%d):áddr:%x,Ög:%x, data:%p, datalen:%x\n",

1646 
__func__
, 
i
++, ()
addr
, 
∑ge
, 
buf
, 
d©Æí
);

1649 i‡(
	`nfc_check_wp
()) {

1650 
	`¥ötf
("%s:Ç™d i†wrôê¥Ÿe˘ed\n", 
__func__
);

1654 
	`mem£t
(
buf„rs
, 0x0ff, (buffers));

1656 
block
 = 
∑ge
 >> 
CONFIG_NUMPAGE_PER_BLOCK_BIT
;

1657 
∑ge_ö_block
 = 
∑ge
 & ((1 << 
CONFIG_NUMPAGE_PER_BLOCK_BIT
) - 1);

1658 
m≠≥d_block
 = 
	`gë_m≠pög_block_ödex
(
block
);

1660 i‡(
m≠≥d_block
 !
block
)

1662 
√w∑ge
 = 
∑ge_ö_block
 + (
m≠≥d_block
 << 
CONFIG_NUMPAGE_PER_BLOCK_BIT
);

1665 
√w∑ge
 = 
∑ge
;

1668 
offs
 = 
addr
 & 
∑gemask
;

1669 
Àn
 = 
	`mö
(
d©Æí
, 
CFG_PAGESIZE
 - 
offs
);

1670 i‡(
buf
 && 
Àn
 > 0) {

1671 
	`mem˝y
(
buf„rs
 + 
offs
, 
buf
, 
Àn
);

1673 
buf
 +
Àn
;

1674 
d©Æí
 -
Àn
;

1675 
ªéí
 +
Àn
;

1679 
ªt
 = 
	`nfc_wrôe_∑ge
(
buf„rs
, 
√w∑ge
);

1680 i‡(
ªt
) {

1681 i‡(
	`upd©e_bmt
((
√w∑ge
 << 
CONFIG_PAGE_SIZE_BIT
), 
UPDATE_WRITE_FAIL
, 
buf„rs
, buf„r†+ 
CFG_PAGESIZE
))

1695 
addr
 = (
∑ge
+1Ë<< 
CONFIG_PAGE_SIZE_BIT
;

1697  
ªéí
;

1698 
	}
}

1700 
	$ø«nd_ªad_bmt
(*
buf
, 
‰om
, 
d©Æí
)

1702 
∑ge
, 
i
 = 0;

1703 
size_t
 
ªéí
 = 0;

1704 
∑gemask
 = (
CFG_PAGESIZE
 -1);

1705 
loff_t
 
addr
 = 
‰om
;

1706 
buf„rs
[
CFG_PAGESIZE
 + 
CFG_PAGE_OOBSIZE
];

1707 
block
, 
√w∑ge
;

1708 
u16
 
∑ge_ö_block
;

1709 
m≠≥d_block
;

1711 i‡(
‰om
 < 
BMT_APPLY_START_OFFSET
)

1712  
	`ø«nd_ªad
(
buf
, 
‰om
, 
d©Æí
);

1714 i‡(
buf
 == 0)

1717 
d©Æí
) {

1718 
Àn
;

1719 
ªt
;

1720 
offs
;

1722 
	`ø_dbg
("%s (%d):áddr:%x, datalen:%x\n",

1723 
__func__
, 
i
++, ()
addr
, 
d©Æí
);

1725 
∑ge
 = ()((
addr
 & (
CFG_CHIPSIZE
-1)Ë>> 
CONFIG_PAGE_SIZE_BIT
);

1727 
block
 = 
∑ge
 >> 
CONFIG_NUMPAGE_PER_BLOCK_BIT
;

1728 
∑ge_ö_block
 = 
∑ge
 & ((1 << 
CONFIG_NUMPAGE_PER_BLOCK_BIT
) - 1);

1729 
m≠≥d_block
 = 
	`gë_m≠pög_block_ödex
(
block
);

1731 i‡(
m≠≥d_block
 !
block
)

1733 
√w∑ge
 = 
∑ge_ö_block
 + (
m≠≥d_block
 << 
CONFIG_NUMPAGE_PER_BLOCK_BIT
);

1736 
√w∑ge
 = 
∑ge
;

1738 i‡(
d©Æí
 > (
CFG_PAGESIZE
+
CFG_PAGE_OOBSIZE
Ë&& (
∑ge
 & 0x1f) == 0)

1739 
	`¥ötf
(".");

1740 
ªt
 = 
	`nfc_ªad_∑ge
(
buf„rs
, 
√w∑ge
);

1742 i‡(
ªt
) {

1743 
	`¥ötf
("readágain:\n");

1744 
ªt
 = 
	`nfc_ªad_∑ge
(
buf„rs
, 
√w∑ge
);

1745 i‡(
ªt
) {

1746 
	`¥ötf
("readágain fail \n");

1749 
	`¥ötf
("Ñeadágian susccess \n");

1754 
offs
 = 
addr
 & 
∑gemask
;

1755 
Àn
 = 
	`mö
(
d©Æí
, 
CFG_PAGESIZE
 - 
offs
);

1756 i‡(
buf
 && 
Àn
 > 0) {

1757 
	`mem˝y
(
buf
, 
buf„rs
 + 
offs
, 
Àn
);

1759 
buf
 +
Àn
;

1760 
d©Æí
 -
Àn
;

1761 
ªéí
 +
Àn
;

1762 i‡(
ªt
)

1767 
addr
 = (
∑ge
+1Ë<< 
CONFIG_PAGE_SIZE_BIT
;

1769 i‡(
d©Æí
 > (
CFG_PAGESIZE
+
CFG_PAGE_OOBSIZE
))

1770 
	`¥ötf
("\n");

1771  
ªéí
;

1772 
	}
}

1775 
	$ø«nd_îa£_wrôe_bmt
(*
buf
, 
offs
, 
cou¡
)

1777 
blocksize
 = 
CFG_BLOCKSIZE
;

1778 
blockmask
 = 
blocksize
 - 1;

1779 
rc
;

1780 #ifde‡
RALINK_NAND_UPGRADE_CHECK


1781 
i
 = 0;

1782 *
ãmp
;

1785 i‡(
offs
 < 
BMT_APPLY_START_OFFSET
)

1786  
	`ø«nd_îa£_wrôe
(
buf
, 
offs
, 
cou¡
);

1788 
	`¥ötf
("%s: offs:%x, cou¡:%x\n", 
__func__
, 
offs
, 
cou¡
);

1790 i‡(
cou¡
 > (
CFG_CHIPSIZE
 - (
CFG_BOOTLOADER_SIZE
 + 
CFG_CONFIG_SIZE
 + 
CFG_FACTORY_SIZE
))) {

1791 
	`¥ötf
("Ab‹t: imagêsizêœrgîÅh™ %d!\n\n", 
CFG_CHIPSIZE
 -

1792 (
CFG_BOOTLOADER_SIZE
 + 
CFG_CONFIG_SIZE
 + 
CFG_FACTORY_SIZE
));

1793 
	`udñay
(10*1000*1000);

1797 
cou¡
 > 0) {

1798 
	#BLOCK_ALIGNE
(
a
Ë((◊Ë& 
blockmask
))

	)

1801 i‡(
	`BLOCK_ALIGNE
(
offs
)) {

1802 
	`¥ötf
("%s: off†%x i†nŸálig√d\n", 
__func__
, 
offs
);

1805 i‡(
cou¡
 < 
blocksize
)

1807 i‡(
	`BLOCK_ALIGNE
(
offs
Ë|| (
cou¡
 < 
blocksize
))

1810 *
block
;

1811 
põ˚
, 
blockaddr
;

1812 
põ˚_size
;

1814 
block
 = 
	`mÆloc
(
blocksize
);

1815 i‡(!
block
) {

1816 
	`¥ötf
("%s: mÆlo¯block faûed\n", 
__func__
);

1820 
blockaddr
 = 
offs
 & ~
blockmask
;

1821 i‡(
	`ø«nd_ªad_bmt
(
block
, 
blockaddr
, 
blocksize
) != blocksize) {

1822 
	`‰ì
(
block
);

1826 
põ˚
 = 
offs
 & 
blockmask
;

1827 
põ˚_size
 = 
	`mö
(
cou¡
, 
blocksize
 - 
põ˚
);

1828 
	`mem˝y
(
block
 + 
põ˚
, 
buf
, 
põ˚_size
);

1830 
rc
 = 
	`ø«nd_îa£_bmt
(
blockaddr
, 
blocksize
);

1831 i‡(
rc
 != 0) {

1832 
	`‰ì
(
block
);

1835 i‡(
	`ø«nd_wrôe_bmt
(
block
, 
blockaddr
, 
blocksize
) != blocksize) {

1836 
	`‰ì
(
block
);

1839 #ifde‡
RALINK_NAND_UPGRADE_CHECK


1840 
ãmp
 = 
	`mÆloc
(
blocksize
);

1841 i‡(!
ãmp
) {

1842 
	`¥ötf
("%s: mÆlo¯ãm∞Áûed\n", 
__func__
);

1846 i‡(
	`ø«nd_ªad_bmt
(
ãmp
, 
blockaddr
, 
blocksize
) != blocksize) {

1847 
	`‰ì
(
block
);

1848 
	`‰ì
(
ãmp
);

1852 if(
	`memcmp
(
block
, 
ãmp
, 
blocksize
) == 0)

1858 
	`¥ötf
("block write incorrect!\n\r");

1859 
	`‰ì
(
block
);

1860 
	`‰ì
(
ãmp
);

1863 
	`‰ì
(
ãmp
);

1865 
	`‰ì
(
block
);

1867 
buf
 +
põ˚_size
;

1868 
offs
 +
põ˚_size
;

1869 
cou¡
 -
põ˚_size
;

1872 
Æig√d_size
 = 
blocksize
;

1874 
rc
 = 
	`ø«nd_îa£_bmt
(
offs
, 
Æig√d_size
);

1875 i‡(
rc
 != 0)

1879 i‡(
	`ø«nd_wrôe_bmt
(
buf
, 
offs
, 
Æig√d_size
) !=áligned_size)

1883 #ifde‡
RALINK_NAND_UPGRADE_CHECK


1884 
ãmp
 = 
	`mÆloc
(
blocksize
);

1885 i‡(!
ãmp
) {

1886 
	`¥ötf
("%s: mÆlo¯ãm∞Áûed\n", 
__func__
);

1890  
i
=0; i< (
Æig√d_size
/
blocksize
); i++)

1892 i‡(
	`ø«nd_ªad_bmt
(
ãmp
, 
offs
+(
i
*
blocksize
), blocksize) != blocksize)

1894 
	`‰ì
(
ãmp
);

1897 if(
	`memcmp
(
buf
+(
i
*
blocksize
), 
ãmp
, blocksize) == 0)

1903 
	`¥ötf
("blocksizêwrôêöc‹ª˘ block#=%d!\n\r",
i
);

1904 
	`‰ì
(
ãmp
);

1908 
	`‰ì
(
ãmp
);

1911 
	`¥ötf
(".");

1913 
buf
 +
Æig√d_size
;

1914 
offs
 +
Æig√d_size
;

1915 
cou¡
 -
Æig√d_size
;

1918 
	`¥ötf
("Done!\n");

1920 
	}
}

1925 
	#NAND_FLASH_DBG_CMD


	)

1926 #ifde‡
NAND_FLASH_DBG_CMD


1927 
	$ølök_«nd_comm™d
(
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

1929 
addr
;

1930 
Àn
, 
i
;

1931 
u8
 *
p
 = 
NULL
;

1933 i‡(!
	`°∫cmp
(
¨gv
[1], "id", 3)) {

1934 
u8
 
id
[4];

1935 
i
 = 
	`nfc_ªad_øw_d©a
(0x90, 0, 0, 0, 0x410141, 
id
, 4);

1936 
	`¥ötf
("Êash id: %x %x %x %x\n", 
id
[0], id[1], id[2], id[3]);

1938 i‡(!
	`°∫cmp
(
¨gv
[1], "read", 5)) {

1939 
addr
 = ()
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

1940 
Àn
 = ()
	`sim∂e_°πoul
(
¨gv
[3], 
NULL
, 16);

1941 
p
 = (
u8
 *)
	`mÆloc
(
Àn
);

1942 i‡(!
p
) {

1943 
	`¥ötf
("mallocÉrror\n");

1946 #ifde‡
MTK_NAND_BMT


1947 
Àn
 = 
	`ø«nd_ªad_bmt
(
p
, 
addr
,Üen);

1949 
Àn
 = 
	`ø«nd_ªad
(
p
, 
addr
,Üen);

1951 
	`¥ötf
("ªadÜí: %d\n", 
Àn
);

1952 
i
 = 0; i < 
Àn
; i++) {

1953 
	`¥ötf
("%02x ", 
p
[
i
]);

1955 
	`¥ötf
("\n");

1956 
	`‰ì
(
p
);

1958 i‡(!
	`°∫cmp
(
¨gv
[1], "page", 5)) {

1959 
addr
 = ()
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

1960 
p
 = (
u8
 *)
	`mÆloc
(
CFG_PAGESIZE
+
CFG_PAGE_OOBSIZE
);

1961 
	`nfc_ªad_∑ge
(
p
, 
addr
);

1962 
	`¥ötf
("∑gê0x%x:\n", 
addr
);

1963 
i
 = 0; i < 
CFG_PAGESIZE
; i++)

1964 
	`¥ötf
("%02x%c", 
p
[
i
], (i%32 == 31)? '\n':' ');

1965 
	`¥ötf
("oob:\n");

1966 ; 
i
 < 
CFG_PAGESIZE
+
CFG_PAGE_OOBSIZE
; i++)

1967 
	`¥ötf
("%02x%c", 
p
[
i
], (i%32 == 31)? '\n':' ');

1968 
	`‰ì
(
p
);

1969 
	`¥ötf
("\n");

1971 i‡(!
	`°∫cmp
(
¨gv
[1], "erase", 6)) {

1972 
addr
 = ()
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

1973 
Àn
 = ()
	`sim∂e_°πoul
(
¨gv
[3], 
NULL
, 16);

1974 #ifde‡
MTK_NAND_BMT


1975 i‡(
	`ø«nd_îa£_bmt
(
addr
, 
Àn
) != 0)

1977 i‡(
	`ø«nd_îa£
(
addr
, 
Àn
) != 0)

1979 
	`¥ötf
("erase failed\n");

1981 
	`¥ötf
("erase succeed\n");

1983 i‡(!
	`°∫cmp
(
¨gv
[1], "write", 6)) {

1984 
o
, 
l
;

1985 
u8
 
t
[3] = {0};

1987 
o
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

1988 
l
 = 
	`°æí
(
¨gv
[3]) / 2;

1989 
p
 = (
u8
 *)
	`mÆloc
(
l
);

1990 i‡(!
p
) {

1991 
	`¥ötf
("mallocÉrror\n");

1994 
i
 = 0; i < 
l
; i++) {

1995 
t
[0] = 
¨gv
[3][2*
i
];

1996 
t
[1] = 
¨gv
[3][2*
i
+1];

1997 *(
p
 + 
i
Ë
	`sim∂e_°πoul
(
t
, 
NULL
, 16);

1999 
	`¥ötf
("wrôêoff†0x%x,Üí 0x%x\n", 
o
, 
l
);

2000 #ifde‡
MTK_NAND_BMT


2001 
	`ø«nd_wrôe_bmt
(
p
, 
o
, 
l
);

2003 
	`ø«nd_wrôe
(
p
, 
o
, 
l
);

2005 
	`‰ì
(
p
);

2007 i‡(!
	`°∫cmp
(
¨gv
[1], "oob", 4)) {

2008 
addr
 = ()
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

2009 
p
 = (
u8
 *)
	`mÆloc
(
CFG_PAGE_OOBSIZE
);

2010 
	`nfc_ªad_oob
(
addr
, 0, 
p
, 
CFG_PAGE_OOBSIZE
);

2011 
	`¥ötf
("oobÖagê%x (add∏%x):\n", 
addr
, (add∏<< 
CONFIG_PAGE_SIZE_BIT
));

2012 
i
 = 0; i < 
CFG_PAGE_OOBSIZE
; i++)

2013 
	`¥ötf
("%02x%c", 
p
[
i
], (i%32 == 31)? '\n':' ');

2014 
	`‰ì
(
p
);

2016 i‡(!
	`°∫cmp
(
¨gv
[1], "init", 5)) {

2017 
	`ø«nd_öô
();

2019 #ifde‡
MTK_NAND_BMT


2020 i‡(!
	`°∫cmp
(
¨gv
[1], "bmt", 4)) {

2021 
	`dump_bmt
();

2024 i‡(!
	`°∫cmp
(
¨gv
[1], "erawr", 6)) {

2025 
o
, 
l
;

2026 
u8
 
t
[3] = {0};

2028 
o
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

2029 
l
 = 
	`°æí
(
¨gv
[3]) / 2;

2030 
p
 = (
u8
 *)
	`mÆloc
(
l
);

2031 i‡(!
p
) {

2032 
	`¥ötf
("mallocÉrror\n");

2035 
i
 = 0; i < 
l
; i++) {

2036 
t
[0] = 
¨gv
[3][2*
i
];

2037 
t
[1] = 
¨gv
[3][2*
i
+1];

2038 *(
p
 + 
i
Ë
	`sim∂e_°πoul
(
t
, 
NULL
, 16);

2040 
	`¥ötf
("wrôêoff†0x%x,Üí 0x%x\n", 
o
, 
l
);

2041 
	`ø«nd_îa£_wrôe_bmt
(
p
, 
o
, 
l
);

2042 
	`‰ì
(
p
);

2045 #ifde‡
MTK_NAND_BMT_DEBUG


2047 i‡(!
	`°∫cmp
(
¨gv
[1], "rawe", 5)) {

2048 
addr
 = ()
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

2049 
Àn
 = ()
	`sim∂e_°πoul
(
¨gv
[3], 
NULL
, 16);

2050 i‡(
	`ø«nd_îa£_øw
(
addr
, 
Àn
) != 0)

2051 
	`¥ötf
("erase failed\n");

2053 
	`¥ötf
("erase succeed\n");

2055 i‡(!
	`°∫cmp
(
¨gv
[1], "markb", 6)) {

2056 
u8
 
bad
 = 0x33;

2057 
addr
 = ()
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

2058 
	`¥ötf
("m¨kÖagê0x%x bad\n", 
addr
);

2059 
	`nfc_wrôe_oob
(
addr
, 
CONFIG_BAD_BLOCK_POS
, &
bad
, 1);

2060 
	`¥ötf
("\n");

2064 
	`¥ötf
("Ußge:\n%s\¿u£ \"hñ∞«nd\" f‹ dëaû!\n", 
cmdç
->
ußge
);

2066 
	}
}

2068 
U_BOOT_CMD
(

2069 
«nd
, 4, 1, 
ølök_«nd_comm™d
,

2077 #ifde‡
MTK_NAND_BMT


2079 #ifde‡
MTK_NAND_BMT_DEBUG


	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/ohci-hcd.c

48 
	~<comm⁄.h
>

49 
	~<asm/byã‹dî.h
>

50 
	~<asm/addr•a˚.h
>

51 
	~<asm/io.h
>

53 
	~<π_mm≠.h
>

55 
	#mdñay
(
n
Ë({
m£c
=“); m£c--Ë
	`udñay
(1000);})

	)

57 
	#DD
 
	`¥ötf
("### %†%d\n", 
__FUNCTION__
, 
__LINE__
);

	)

60 
	#DA
 {
	`¥ötf
("@@@ %†%d\n", 
__FUNCTION__
, 
__LINE__
); 
	`mdñay
(2000);}

	)

64 #i‡
deföed
(
CONFIG_PCI_OHCI
)

65 
	~<pci.h
>

66 #i‡!
deföed
(
CONFIG_PCI_OHCI_DEVNO
)

67 
	#CONFIG_PCI_OHCI_DEVNO
 0

	)

71 
	~<mÆloc.h
>

72 
	~<usb.h
>

74 
	~"ohci.h
"

76 #ifde‡
CONFIG_AT91RM9200


77 
	~<asm/¨ch/h¨dw¨e.h
>

80 #i‡
deföed
(
CONFIG_ARM920T
) || \

81 
deföed
(
CONFIG_S3C2400
) || \

82 
deföed
(
CONFIG_S3C2410
) || \

83 
deföed
(
CONFIG_S3C6400
) || \

84 
deföed
(
CONFIG_440EP
) || \

85 
deföed
(
CONFIG_PCI_OHCI
) || \

86 
deföed
(
CONFIG_MPC5200
) || \

87 
	$deföed
(
CONFIG_SYS_OHCI_USE_NPS
)

88 
	#OHCI_USE_NPS


	)

91 #unde‡
OHCI_VERBOSE_DEBUG


92 #unde‡
DEBUG


93 #unde‡
SHOW_INFO


94 #unde‡
OHCI_FILL_TRACE


105 
	#OHCI_CONTROL_INIT
 (
OHCI_CTRL_CBSR
 & 0x3)

	)

111 #ifde‡
CONFIG_SYS_OHCI_SWAP_REG_ACCESS


112 
	#ªadl
(
a
Ë
	`__sw≠_32
(*((vﬁ©ûê
u32
 *)◊)))

	)

113 
	#wrôñ
(
a
, 
b
Ë(*((vﬁ©ûê
u32
 *)(b)Ë
	`__sw≠_32
((vﬁ©ûêu32Ô))

	)

115 
	#ªadl
(
a
Ë(*((vﬁ©ûê
u32
 *)◊)))

	)

116 
	#wrôñ
(
a
, 
b
Ë(*((vﬁ©ûê
u32
 *)(b)Ë((vﬁ©ûêu32Ô))

	)

119 
	#mö_t
(
ty≥
, 
x
, 
y
) \

120 ({ 
ty≥
 
__x
 = (
x
);Åy≥ 
__y
 = (
y
); __x < __y ? __x: __y; 
	}
})

	)

122 #ifde‡
CONFIG_PCI_OHCI


123 
pci_devi˚_id
 
	gohci_pci_ids
[] = {

132 #ifde‡
CONFIG_PCI_EHCI_DEVNO


133 
pci_devi˚_id
 
	gehci_pci_ids
[] = {

140 #ifde‡
DEBUG


141 
	#dbg
(
f‹m©
, 
¨g
...Ë
	`¥ötf
("DEBUG: " f‹m© "\n", ##árg)

	)

143 
	#dbg
(
f‹m©
, 
¨g
...Ëdÿ{} 0)

	)

145 
	#îr
(
f‹m©
, 
¨g
...Ë
	`¥ötf
("ERROR: " f‹m© "\n", ##árg)

	)

146 #ifde‡
SHOW_INFO


147 
	#öfo
(
f‹m©
, 
¨g
...Ë
	`¥ötf
("INFO: " f‹m© "\n", ##árg)

	)

149 
	#öfo
(
f‹m©
, 
¨g
...Ëdÿ{} 0)

	)

152 #ifde‡
CONFIG_SYS_OHCI_BE_CONTROLLER


153 
	#m16_sw≠
(
x
Ë
	`˝u_to_be16
(x)

	)

154 
	#m32_sw≠
(
x
Ë
	`˝u_to_be32
(x)

	)

156 
	#m16_sw≠
(
x
Ë
	`˝u_to_À16
(x)

	)

157 
	#m32_sw≠
(
x
Ë
	`˝u_to_À32
(x)

	)

160 
	#OHCI_vút_to_bus
(
x
Ë
	`vút_to_bus
((vﬁ©ûê*)(x))

	)

163 
ohci_t
 
	ggohci
;

165 
ohci_hcˇ
 
	gghcˇ
[1];

167 
ohci_hcˇ
 *
	gphcˇ
;

169 
ohci_devi˚
 
	gohci_dev
;

170 
ohci_devi˚
 *
	gohci_dev_dma
;

172 
usb_devi˚
 *
	gdevg⁄e
;

174 
ölöe
 
u32
 
	$roŸhub_a
(
ohci
 *
hc
)

175 {  
	`ªadl
(&
hc
->
ªgs
->
roŸhub
.
a
); 
	}
}

176 
ölöe
 
u32
 
	$roŸhub_b
(
ohci
 *
hc
)

177 {  
	`ªadl
(&
hc
->
ªgs
->
roŸhub
.
b
); 
	}
}

178 
ölöe
 
u32
 
	$roŸhub_°©us
(
ohci
 *
hc
)

179 {  
	`ªadl
(&
hc
->
ªgs
->
roŸhub
.
°©us
); 
	}
}

180 
ölöe
 
u32
 
	$roŸhub_p‹t°©us
(
ohci
 *
hc
, 
i
)

181 {  
	`ªadl
(&
hc
->
ªgs
->
roŸhub
.
p‹t°©us
[
i
]); 
	}
}

184 
hc_öãºu±
();

185 
td_submô_job
(
usb_devi˚
 *
dev
, 
pùe
,

186 *
buf„r
, 
å™s„r_Àn
,

187 
devªque°
 *
£tup
, 
urb_¥iv_t
 *
urb
,

188 
öãrvÆ
);

191 
__u8
 
	gunu£_°r
[] = "abcdefghijklmnopqrstuvwxyz";

198 
	$urb_‰ì_¥iv
(
urb_¥iv_t
 *
urb
)

200 
i
,
j
;

201 
œ°
;

202 
td
 *td;

204 
œ°
 = 
urb
->
Àngth
 - 1;

205 i‡(
œ°
 >= 0) {

206 
i
 = 0; i <
œ°
; i++) {

207 
td
 = 
urb
->td[
i
];

208 i‡(
td
) {

209 
max
 = 3;

210 if(
urb
->
a˘uÆ_Àngth
 < 
max
)

211 
max
 = 
urb
->
a˘uÆ_Àngth
;

212 if(
	`usb_pùec⁄åﬁ
(
urb
->
pùe
Ë&& 
i
 == 1 ){

218 
	`mem˝y
(
urb
->
å™s„r_buf„r
, 
td
->
d©a_c›y_dma
, urb->
a˘uÆ_Àngth
);

219 }if(
	`usb_pùebulk
(
urb
->
pùe
Ë&& 
	`usb_pùeö
(urb->pipe)){

223 
	`mem˝y
(
urb
->
å™s„r_buf„r
, 
td
->
d©a_c›y_dma
, urb->
a˘uÆ_Àngth
);

228 
td
->
usb_dev
 = 
NULL
;

229 
urb
->
td
[
i
] = 
NULL
;

231 if(
td
->
d©a_c›y
)

232 
	`‰ì
(
td
->
d©a_c›y
);

236 
	`‰ì
(
urb
);

237 
	}
}

241 #ifde‡
DEBUG


242 
sohci_gë_cuºít_‰ame_numbî
(
usb_devi˚
 *
dev
);

247 
	$pkt_¥öt
(
urb_¥iv_t
 *
purb
, 
usb_devi˚
 *
dev
,

248 
pùe
, *
buf„r
, 
å™s„r_Àn
,

249 
devªque°
 *
£tup
, *
°r
, 
smÆl
)

251 
	`dbg
("%s URB:[%4x] dev:%2lu,ep:%2lu-%c,type:%s,len:%d/%d stat:%#lx",

252 
°r
,

253 
	`sohci_gë_cuºít_‰ame_numbî
(
dev
),

254 
	`usb_pùedevi˚
(
pùe
),

255 
	`usb_pùìndpoöt
(
pùe
),

256 
	`usb_pùeout
(
pùe
)? 'O': 'I',

257 
	`usb_pùëy≥
(
pùe
) < 2 ? \

258 (
	`usb_pùeöt
(
pùe
)? "INTR": "ISOC"): \

259 (
	`usb_pùec⁄åﬁ
(
pùe
)? "CTRL": "BULK"),

260 (
purb
 ?Öurb->
a˘uÆ_Àngth
 : 0),

261 
å™s„r_Àn
, 
dev
->
°©us
);

262 #ifdef 
OHCI_VERBOSE_DEBUG


263 i‡(!
smÆl
) {

264 
i
, 
Àn
;

266 i‡(
	`usb_pùec⁄åﬁ
(
pùe
)) {

267 
	`¥ötf
(
__FILE__
 ": cmd(8):");

268 
i
 = 0; i < 8 ; i++)

269 
	`¥ötf
(" %02x", ((
__u8
 *Ë
£tup
Ë[
i
]);

270 
	`¥ötf
("\n");

272 i‡(
å™s„r_Àn
 > 0 && 
buf„r
) {

273 
	`¥ötf
(
__FILE__
 ": data(%d/%d):",

274 (
purb
 ?Öurb->
a˘uÆ_Àngth
 : 0),

275 
å™s„r_Àn
);

276 
Àn
 = 
	`usb_pùeout
(
pùe
)? 
å™s„r_Àn
:

277 (
purb
 ?Öurb->
a˘uÆ_Àngth
 : 0);

278 
i
 = 0; i < 16 && i < 
Àn
; i++)

279 
	`¥ötf
(" %02x", ((
__u8
 *Ë
buf„r
Ë[
i
]);

280 
	`¥ötf
("%s\n", 
i
 < 
Àn
? "...": "");

284 
	}
}

288 
	$ï_¥öt_öt_eds
(
ohci_t
 *
ohci
, *
°r
)

290 
i
, 
j
;

291 
__u32
 *
ed_p
;

292 
i
 = 0; i < 32; i++) {

293 
j
 = 5;

294 
ed_p
 = &(
ohci
->
hcˇ
->
öt_èbÀ
 [
i
]);

295 i‡(*
ed_p
 == 0)

297 
	`¥ötf
(
__FILE__
 ": %†bønch i¡ %2d(%2x):", 
°r
, 
i
, i);

298 *
ed_p
 !0 && 
j
--) {

299 
ed_t
 *
ed
 = (ed_à*)
	`m32_sw≠
(
ed_p
);

300 
	`¥ötf
("Éd: %4x;", 
ed
->
hwINFO
);

301 
ed_p
 = &
ed
->
hwNextED
;

303 
	`¥ötf
("\n");

305 
	}
}

307 
	$ohci_dump_öå_mask
(*
œbñ
, 
__u32
 
mask
)

309 
	`dbg
("%s: 0x%08x%s%s%s%s%s%s%s%s%s",

310 
œbñ
,

311 
mask
,

312 (
mask
 & 
OHCI_INTR_MIE
) ? " MIE" : "",

313 (
mask
 & 
OHCI_INTR_OC
) ? " OC" : "",

314 (
mask
 & 
OHCI_INTR_RHSC
) ? " RHSC" : "",

315 (
mask
 & 
OHCI_INTR_FNO
) ? " FNO" : "",

316 (
mask
 & 
OHCI_INTR_UE
) ? " UE" : "",

317 (
mask
 & 
OHCI_INTR_RD
) ? " RD" : "",

318 (
mask
 & 
OHCI_INTR_SF
) ? " SF" : "",

319 (
mask
 & 
OHCI_INTR_WDH
) ? " WDH" : "",

320 (
mask
 & 
OHCI_INTR_SO
) ? " SO" : ""

322 
	}
}

324 
	$maybe_¥öt_eds
(*
œbñ
, 
__u32
 
vÆue
)

326 
ed_t
 *
edp
 = (ed_à*)
vÆue
;

327 
	`dbg
("%†%08x", 
œbñ
, 
vÆue
);

329 i‡(
vÆue
) {

330 
	`dbg
("%08x", 
edp
->
hwINFO
);

331 
	`dbg
("%08x", 
edp
->
hwTaûP
);

332 
	`dbg
("%08x", 
edp
->
hwHódP
);

333 
	`dbg
("%08x", 
edp
->
hwNextED_DMA
);

334 
	`dbg
("%08x", 
edp
->
hwNextED
);

336 
	}
}

338 *
	$hcfs2°rög
(
°©e
)

340 
°©e
) {

341 
OHCI_USB_RESET
:  "reset";

342 
OHCI_USB_RESUME
:  "resume";

343 
OHCI_USB_OPER
:  "operational";

344 
OHCI_USB_SUSPEND
:  "suspend";

347 
	}
}

350 
	$ohci_dump_°©us
(
ohci_t
 *
c⁄åﬁÀr
)

352 
ohci_ªgs
 *
ªgs
 = 
c⁄åﬁÀr
->regs;

353 
__u32
 
ãmp
;

355 
ãmp
 = 
	`ªadl
(&
ªgs
->
ªvisi⁄
) & 0xff;

356 i‡(
ãmp
 != 0x10)

357 
	`dbg
("•e¯%d.%d", (
ãmp
 >> 4), (temp & 0x0f));

359 
ãmp
 = 
	`ªadl
(&
ªgs
->
c⁄åﬁ
);

360 
	`dbg
("c⁄åﬁ: 0x%08x%s%s%†HCFS=%s%s%s%s%†CBSR=%d", 
ãmp
,

361 (
ãmp
 & 
OHCI_CTRL_RWE
) ? " RWE" : "",

362 (
ãmp
 & 
OHCI_CTRL_RWC
) ? " RWC" : "",

363 (
ãmp
 & 
OHCI_CTRL_IR
) ? " IR" : "",

364 
	`hcfs2°rög
(
ãmp
 & 
OHCI_CTRL_HCFS
),

365 (
ãmp
 & 
OHCI_CTRL_BLE
) ? " BLE" : "",

366 (
ãmp
 & 
OHCI_CTRL_CLE
) ? " CLE" : "",

367 (
ãmp
 & 
OHCI_CTRL_IE
) ? " IE" : "",

368 (
ãmp
 & 
OHCI_CTRL_PLE
) ? " PLE" : "",

369 
ãmp
 & 
OHCI_CTRL_CBSR


372 
ãmp
 = 
	`ªadl
(&
ªgs
->
cmd°©us
);

373 
	`dbg
("cmd°©us: 0x%08x SOC=%d%s%s%s%s", 
ãmp
,

374 (
ãmp
 & 
OHCI_SOC
) >> 16,

375 (
ãmp
 & 
OHCI_OCR
) ? " OCR" : "",

376 (
ãmp
 & 
OHCI_BLF
) ? " BLF" : "",

377 (
ãmp
 & 
OHCI_CLF
) ? " CLF" : "",

378 (
ãmp
 & 
OHCI_HCR
) ? " HCR" : ""

381 
	`ohci_dump_öå_mask
("öå°©us", 
	`ªadl
(&
ªgs
->
öå°©us
));

382 
	`ohci_dump_öå_mask
("öåíabÀ", 
	`ªadl
(&
ªgs
->
öåíabÀ
));

384 
	`maybe_¥öt_eds
("ed_≥riodcuºít", 
	`ªadl
(&
ªgs
->
ed_≥riodcuºít
));

386 
	`maybe_¥öt_eds
("ed_c⁄åﬁhód", 
	`ªadl
(&
ªgs
->
ed_c⁄åﬁhód
));

387 
	`maybe_¥öt_eds
("ed_c⁄åﬁcuºít", 
	`ªadl
(&
ªgs
->
ed_c⁄åﬁcuºít
));

389 
	`maybe_¥öt_eds
("ed_bulkhód", 
	`ªadl
(&
ªgs
->
ed_bulkhód
));

390 
	`maybe_¥öt_eds
("ed_bulkcuºít", 
	`ªadl
(&
ªgs
->
ed_bulkcuºít
));

392 
	`maybe_¥öt_eds
("d⁄ehód", 
	`ªadl
(&
ªgs
->
d⁄ehód
));

393 
	}
}

395 
	$ohci_dump_roŸhub
(
ohci_t
 *
c⁄åﬁÀr
, 
vîbo£
)

397 
__u32
 
ãmp
, 
ndp
, 
i
;

399 
ãmp
 = 
	`roŸhub_a
(
c⁄åﬁÀr
);

400 
ndp
 = (
ãmp
 & 
RH_A_NDP
);

401 #ifde‡
CONFIG_AT91C_PQFP_UHPBUG


402 
ndp
 = (ndp == 2) ? 1:0;

404 i‡(
vîbo£
) {

405 
	`dbg
("roŸhub.a: %08x POTPGT=%d%s%s%s%s%†NDP=%d", 
ãmp
,

406 ((
ãmp
 & 
RH_A_POTPGT
) >> 24) & 0xff,

407 (
ãmp
 & 
RH_A_NOCP
) ? " NOCP" : "",

408 (
ãmp
 & 
RH_A_OCPM
) ? " OCPM" : "",

409 (
ãmp
 & 
RH_A_DT
) ? " DT" : "",

410 (
ãmp
 & 
RH_A_NPS
) ? " NPS" : "",

411 (
ãmp
 & 
RH_A_PSM
) ? " PSM" : "",

412 
ndp


414 
ãmp
 = 
	`roŸhub_b
(
c⁄åﬁÀr
);

415 
	`dbg
("roothub.b: %08x PPCM=%04x DR=%04x",

416 
ãmp
,

417 (
ãmp
 & 
RH_B_PPCM
) >> 16,

418 (
ãmp
 & 
RH_B_DR
)

420 
ãmp
 = 
	`roŸhub_°©us
(
c⁄åﬁÀr
);

421 
	`dbg
("roothub.status: %08x%s%s%s%s%s%s",

422 
ãmp
,

423 (
ãmp
 & 
RH_HS_CRWE
) ? " CRWE" : "",

424 (
ãmp
 & 
RH_HS_OCIC
) ? " OCIC" : "",

425 (
ãmp
 & 
RH_HS_LPSC
) ? " LPSC" : "",

426 (
ãmp
 & 
RH_HS_DRWE
) ? " DRWE" : "",

427 (
ãmp
 & 
RH_HS_OCI
) ? " OCI" : "",

428 (
ãmp
 & 
RH_HS_LPS
) ? " LPS" : ""

432 
i
 = 0; i < 
ndp
; i++) {

433 
ãmp
 = 
	`roŸhub_p‹t°©us
(
c⁄åﬁÀr
, 
i
);

434 
	`dbg
("roothub.portstatus [%d] = 0x%08x%s%s%s%s%s%s%s%s%s%s%s%s",

435 
i
,

436 
ãmp
,

437 (
ãmp
 & 
RH_PS_PRSC
) ? " PRSC" : "",

438 (
ãmp
 & 
RH_PS_OCIC
) ? " OCIC" : "",

439 (
ãmp
 & 
RH_PS_PSSC
) ? " PSSC" : "",

440 (
ãmp
 & 
RH_PS_PESC
) ? " PESC" : "",

441 (
ãmp
 & 
RH_PS_CSC
) ? " CSC" : "",

443 (
ãmp
 & 
RH_PS_LSDA
) ? " LSDA" : "",

444 (
ãmp
 & 
RH_PS_PPS
) ? " PPS" : "",

445 (
ãmp
 & 
RH_PS_PRS
) ? " PRS" : "",

446 (
ãmp
 & 
RH_PS_POCI
) ? " POCI" : "",

447 (
ãmp
 & 
RH_PS_PSS
) ? " PSS" : "",

449 (
ãmp
 & 
RH_PS_PES
) ? " PES" : "",

450 (
ãmp
 & 
RH_PS_CCS
) ? " CCS" : ""

453 
	}
}

455 
	$ohci_dump
(
ohci_t
 *
c⁄åﬁÀr
, 
vîbo£
)

457 
	`dbg
("OHCI c⁄åﬁÀ∏usb-%†°©e", 
c⁄åﬁÀr
->
¶Ÿ_«me
);

460 
	`ohci_dump_°©us
(
c⁄åﬁÀr
);

461 i‡(
vîbo£
)

462 
	`ï_¥öt_öt_eds
(
c⁄åﬁÀr
, "hcca");

463 
	`dbg
("hcˇ fømê#%04x", 
c⁄åﬁÀr
->
hcˇ
->
‰ame_no
);

464 
	`ohci_dump_roŸhub
(
c⁄åﬁÀr
, 1);

465 
	}
}

474 
	$sohci_submô_job
(
urb_¥iv_t
 *
urb
, 
devªque°
 *
£tup
)

476 
ohci_t
 *
ohci
;

477 
ed_t
 *
ed
;

478 
urb_¥iv_t
 *
purb_¥iv
 = 
urb
;

479 
i
, 
size
 = 0;

480 
usb_devi˚
 *
dev
 = 
urb
->dev;

481 
pùe
 = 
urb
->pipe;

482 *
buf„r
 = 
urb
->
å™s„r_buf„r
;

483 
å™s„r_Àn
 = 
urb
->
å™s„r_buf„r_Àngth
;

484 
öãrvÆ
 = 
urb
->interval;

486 
ohci
 = &
gohci
;

490 i‡(
ohci
->
dißbÀd
) {

491 
	`îr
("sohci_submit_job: EPIPE");

497 
urb
->
föished
 = 0;

500 
ed
 = 
	`ï_add_ed
(
dev
, 
pùe
, 
öãrvÆ
, 1);

501 i‡(!
ed
) {

502 
	`îr
("sohci_submit_job: ENOMEM");

507 
	`usb_pùëy≥
(
pùe
)) {

508 
PIPE_BULK
:

509 
size
 = (
å™s„r_Àn
 - 1) / 4096 + 1;

511 
PIPE_CONTROL
:

512 
size
 = (
å™s„r_Àn
 == 0)? 2:

513 (
å™s„r_Àn
 - 1) / 4096 + 3;

515 
PIPE_INTERRUPT
:

516 
size
 = 1;

520 
ed
->
purb
 = 
urb
;

522 i‡(
size
 >(
N_URB_TD
 - 1)) {

523 
	`îr
("√ed %d TDs, o∆y havê%d", 
size
, 
N_URB_TD
);

526 
purb_¥iv
->
pùe
 =Öipe;

529 
purb_¥iv
->
Àngth
 = 
size
;

530 
purb_¥iv
->
ed
 =Éd;

531 
purb_¥iv
->
a˘uÆ_Àngth
 = 0;

535 
i
 = 0; i < 
size
; i++) {

536 
purb_¥iv
->
td
[
i
] = 
	`td_Æloc
(
dev
);

537 i‡(!
purb_¥iv
->
td
[
i
]) {

538 
purb_¥iv
->
Àngth
 = 
i
;

539 
	`urb_‰ì_¥iv
(
purb_¥iv
);

540 
	`îr
("sohci_submit_job: ENOMEM");

545 i‡(
ed
->
°©e
 =
ED_NEW
 || (ed->°©ê& 
ED_DEL
)) {

546 
	`urb_‰ì_¥iv
(
purb_¥iv
);

547 
	`îr
("sohci_submit_job: EINVAL");

552 i‡(
ed
->
°©e
 !
ED_OPER
)

553 
	`ï_lök
(
ohci
, 
ed
);

556 
	`td_submô_job
(
dev
, 
pùe
, 
buf„r
, 
å™s„r_Àn
,

557 
£tup
, 
purb_¥iv
, 
öãrvÆ
);

560 
	}
}

562 
ölöe
 
	$sohci_ªtu∫_job
(
ohci
 *
hc
, 
urb_¥iv_t
 *
urb
)

564 
ohci_ªgs
 *
ªgs
 = 
hc
->regs;

565 
	`usb_pùëy≥
(
urb
->
pùe
)) {

566 
PIPE_INTERRUPT
:

568 i‡(
urb
->
dev
->
úq_h™dÀ
 &&

569 (
urb
->
dev
->
úq_a˘_Àn
 = urb->
a˘uÆ_Àngth
)) {

570 
	`wrôñ
(
OHCI_INTR_WDH
, &
ªgs
->
öåíabÀ
);

571 
	`ªadl
(&
ªgs
->
öåíabÀ
);

572 
urb
->
dev
->
	`úq_h™dÀ
(urb->dev);

573 
	`wrôñ
(
OHCI_INTR_WDH
, &
ªgs
->
öådißbÀ
);

574 
	`ªadl
(&
ªgs
->
öådißbÀ
);

576 
urb
->
a˘uÆ_Àngth
 = 0;

577 
	`td_submô_job
(

578 
urb
->
dev
,

579 
urb
->
pùe
,

580 
urb
->
å™s„r_buf„r
,

581 
urb
->
å™s„r_buf„r_Àngth
,

582 
NULL
,

583 
urb
,

584 
urb
->
öãrvÆ
);

586 
PIPE_CONTROL
:

587 
PIPE_BULK
:

593 
	}
}

597 #ifde‡
DEBUG


600 
	$sohci_gë_cuºít_‰ame_numbî
(
usb_devi˚
 *
usb_dev
)

602 
ohci_t
 *
ohci
 = &
gohci
;

604  
	`m16_sw≠
(
ohci
->
hcˇ
->
‰ame_no
);

605 
	}
}

617 
	$ï_öt_bÆœn˚
(
ohci_t
 *
ohci
, 
öãrvÆ
, 
lﬂd
)

619 
i
, 
bønch
 = 0;

624 
i
 = 0; i < 32; i++)

625 i‡(
ohci
->
ohci_öt_lﬂd
 [
bønch
] > ohci->ohci_öt_lﬂd [
i
])

626 
bønch
 = 
i
;

628 
bønch
 = bønch % 
öãrvÆ
;

629 
i
 = 
bønch
; i < 32; i +
öãrvÆ
)

630 
ohci
->
ohci_öt_lﬂd
 [
i
] +
lﬂd
;

632  
bønch
;

633 
	}
}

639 
	$ï_2_n_öãrvÆ
(
öãr
)

641 
i
;

642 
i
 = 0; ((
öãr
 >> i) > 1) && (i < 5); i++);

643  1 << 
i
;

644 
	}
}

651 
	$ï_ªv
(
num_bôs
, 
w‹d
)

653 
i
, 
wout
 = 0;

655 
i
 = 0; i < 
num_bôs
; i++)

656 
wout
 |(((
w‹d
 >> 
i
Ë& 1Ë<< (
num_bôs
 - i - 1));

657  
wout
;

658 
	}
}

666 
	$ï_lök
(
ohci_t
 *
ohci
, 
ed_t
 *
edi
)

668 vﬁ©ûê
ed_t
 *
ed
 = 
edi
;

669 
öt_bønch
;

670 
i
;

671 
öãr
;

672 
öãrvÆ
;

673 
lﬂd
;

674 
__u32
 *
ed_p
;

676 
ed
->
°©e
 = 
ED_OPER
;

677 
ed
->
öt_öãrvÆ
 = 0;

679 
ed
->
ty≥
) {

680 
PIPE_CONTROL
:

681 
ed
->
NextED
 = 0x0;

682 
ed
->
hwNextED_DMA
 = 
	`OHCI_vút_to_bus
”d->
NextED
);

683 i‡(
ohci
->
ed_c⁄åﬁèû
 =
NULL
){

684 
	`wrôñ
(
	`OHCI_vút_to_bus
(
ed
), &
ohci
->
ªgs
->
ed_c⁄åﬁhód
);

686 
ohci
->
ed_c⁄åﬁèû
->
NextED
 = 
	`m32_sw≠
(()
ed
);

687 
ohci
->
ed_c⁄åﬁèû
->
hwNextED_DMA
 = 
	`OHCI_vút_to_bus
(ohci->ed_c⁄åﬁèû->
NextED
);

690 
ed
->
ed_¥ev
 = 
ohci
->
ed_c⁄åﬁèû
;

691 i‡(!
ohci
->
ed_c⁄åﬁèû
 && !ohci->
ed_rm_li°
[0] &&

692 !
ohci
->
ed_rm_li°
[1] && !ohci->
¶ìpög
) {

693 
ohci
->
hc_c⁄åﬁ
 |
OHCI_CTRL_CLE
;

694 
	`wrôñ
(
ohci
->
hc_c⁄åﬁ
, &ohci->
ªgs
->
c⁄åﬁ
);

696 
ohci
->
ed_c⁄åﬁèû
 = 
edi
;

699 
PIPE_BULK
:

700 
ed
->
NextED
 = 0x0;

701 
ed
->
hwNextED_DMA
 = 
	`OHCI_vút_to_bus
”d->
NextED
);

702 i‡(
ohci
->
ed_bulkèû
 =
NULL
){

703 
	`wrôñ
(
	`OHCI_vút_to_bus
(
ed
), &
ohci
->
ªgs
->
ed_bulkhód
);

705 
ohci
->
ed_bulkèû
->
NextED
 = 
	`m32_sw≠
(()
ed
);

706 
ohci
->
ed_bulkèû
->
hwNextED_DMA
 = 
	`OHCI_vút_to_bus
(ohci->ed_bulkèû->
NextED
);

709 
ed
->
ed_¥ev
 = 
ohci
->
ed_bulkèû
;

710 i‡(!
ohci
->
ed_bulkèû
 && !ohci->
ed_rm_li°
[0] &&

711 !
ohci
->
ed_rm_li°
[1] && !ohci->
¶ìpög
) {

712 
ohci
->
hc_c⁄åﬁ
 |
OHCI_CTRL_BLE
;

713 
	`wrôñ
(
ohci
->
hc_c⁄åﬁ
, &ohci->
ªgs
->
c⁄åﬁ
);

715 
ohci
->
ed_bulkèû
 = 
edi
;

718 
PIPE_INTERRUPT
:

719 
lﬂd
 = 
ed
->
öt_lﬂd
;

720 
öãrvÆ
 = 
	`ï_2_n_öãrvÆ
(
ed
->
öt_≥riod
);

721 
ed
->
öt_öãrvÆ
 = 
öãrvÆ
;

722 
öt_bønch
 = 
	`ï_öt_bÆœn˚
(
ohci
, 
öãrvÆ
, 
lﬂd
);

723 
ed
->
öt_bønch
 = int_branch;

725 
i
 = 0; i < 
	`ï_ªv
(6, 
öãrvÆ
); i +
öãr
) {

726 
öãr
 = 1;

727 
ed_p
 = &(
ohci
->
hcˇ
->
öt_èbÀ
[\

728 
	`ï_ªv
(5, 
i
Ë+ 
öt_bønch
]);

729 (*
ed_p
 != 0) &&

730 (((
ed_t
 *)
ed_p
)->
öt_öãrvÆ
 >
öãrvÆ
);

731 
ed_p
 = &(((
ed_t
 *Îd_p)->
NextED
))

732 
öãr
 = 
	`ï_ªv
(6,

733 ((
ed_t
 *)
ed_p
)->
öt_öãrvÆ
);

734 
ed
->
hwNextED_DMA
 = 
	`OHCI_vút_to_bus
(*
ed_p
);

735 *
ed_p
 = 
	`m32_sw≠
(()
ed
);

740 
	}
}

745 
	$≥riodic_u∆ök
(
ohci
 *ohci, vﬁ©ûê
ed
 *ed,

746 
ödex
, 
≥riod
)

748 ; 
ödex
 < 
NUM_INTS
; index +
≥riod
) {

749 
__u32
 *
ed_p
 = &
ohci
->
hcˇ
->
öt_èbÀ
 [
ödex
];

752 *
ed_p
 != 0) {

753 i‡(((
ed
 *)

754 
	`m32_sw≠
(()
ed_p
)Ë=
ed
) {

755 *
ed_p
 = 
ed
->
NextED
;

758 
ed_p
 = &(((
ed
 *)

759 
	`m32_sw≠
(()
ed_p
))->
NextED
);

762 
	}
}

768 
	$ï_u∆ök
(
ohci_t
 *
ohci
, 
ed_t
 *
edi
)

770 vﬁ©ûê
ed_t
 *
ed
 = 
edi
;

771 
i
;

773 
ed
->
hwINFO
 |
	`m32_sw≠
(
OHCI_ED_SKIP
);

775 
ed
->
ty≥
) {

776 
PIPE_CONTROL
:

777 i‡(
ed
->
ed_¥ev
 =
NULL
) {

778 i‡(!
ed
->
NextED
) {

779 
ohci
->
hc_c⁄åﬁ
 &~
OHCI_CTRL_CLE
;

780 
	`wrôñ
(
ohci
->
hc_c⁄åﬁ
, &ohci->
ªgs
->
c⁄åﬁ
);

782 
	`wrôñ
(
	`m32_sw≠
(*((
__u32
 *)&
ed
->
hwNextED_DMA
)), &
ohci
->
ªgs
->
ed_c⁄åﬁhód
);

785 
ed
->
ed_¥ev
->
hwNextED_DMA
=Éd->hwNextED_DMA;

788 i‡(
ohci
->
ed_c⁄åﬁèû
 =
ed
) {

789 
ohci
->
ed_c⁄åﬁèû
 = 
ed
->
ed_¥ev
;

791 ((
ed_t
 *)
	`m32_sw≠
–*((
__u32
 *)&
ed
->
NextED
)))->
ed_¥ev
 =Éd->ed_prev;

796 
PIPE_BULK
:

797 i‡(
ed
->
ed_¥ev
 =
NULL
) {

798 i‡(!
ed
->
NextED
) {

799 
ohci
->
hc_c⁄åﬁ
 &~
OHCI_CTRL_BLE
;

800 
	`wrôñ
(
ohci
->
hc_c⁄åﬁ
, &ohci->
ªgs
->
c⁄åﬁ
);

802 
	`wrôñ
(
	`m32_sw≠
(*((
__u32
 *)&
ed
->
hwNextED_DMA
)), &
ohci
->
ªgs
->
ed_bulkhód
);

804 
ed
->
ed_¥ev
->
hwNextED_DMA
 =Éd->hwNextED_DMA;

807 i‡(
ohci
->
ed_bulkèû
 =
ed
) {

808 
ohci
->
ed_bulkèû
 = 
ed
->
ed_¥ev
;

810 ((
ed_t
 *)
	`m32_sw≠
–*((
__u32
 *)&
ed
->
NextED
)))->
ed_¥ev
 =Éd->ed_prev;

814 
PIPE_INTERRUPT
:

815 
	`≥riodic_u∆ök
(
ohci
, 
ed
, 0, 1);

816 
i
 = 
ed
->
öt_bønch
; i < 32; i +ed->
öt_öãrvÆ
)

817 
ohci
->
ohci_öt_lﬂd
[
i
] -
ed
->
öt_lﬂd
;

820 
ed
->
°©e
 = 
ED_UNLINK
;

822 
	}
}

834 
ed_t
 *
	$ï_add_ed
(
usb_devi˚
 *
usb_dev
, 
pùe
,

835 
öãrvÆ
, 
lﬂd
)

837 
td_t
 *
td
;

838 
ed_t
 *
ed_ªt
;

839 vﬁ©ûê
ed_t
 *
ed
;

842 
ed
 = 
ed_ªt
 = &
ohci_dev_dma
->ed[(
	`usb_pùìndpoöt
(
pùe
Ë<< 1Ë|(
	`usb_pùec⁄åﬁ
’ùe)? 0: 
	`usb_pùeout
(pipe))];

844 i‡((
ed
->
°©e
 & 
ED_DEL
Ë|| (ed->°©ê& 
ED_URB_DEL
)) {

845 
	`îr
("ep_add_ed:Öending delete");

847  
NULL
;

850 i‡(
ed
->
°©e
 =
ED_NEW
) {

852 
td
 = 
	`td_Æloc
(
usb_dev
);

853 
ed
->
TaûP
 = 
	`m32_sw≠
(()
td
);

854 
ed
->
hwTaûP_DMA
 = 
	`OHCI_vút_to_bus
”d->
TaûP
);

855 
ed
->
HódP
 =Éd->
TaûP
;

856 
ed
->
hwHódP_DMA
 =Éd->
hwTaûP_DMA
;

857 
ed
->
°©e
 = 
ED_UNLINK
;

858 
ed
->
ty≥
 = 
	`usb_pùëy≥
(
pùe
);

860 
ohci_dev_dma
->
ed_˙t
++;

863 
ed
->
hwINFO
 = 
	`m32_sw≠
(
	`usb_pùedevi˚
(
pùe
)

864 | 
	`usb_pùìndpoöt
(
pùe
) << 7

865 | (
	`usb_pùeisoc
(
pùe
)? 0x8000: 0)

866 | (
	`usb_pùec⁄åﬁ
(
pùe
)? 0: \

867 (
	`usb_pùeout
(
pùe
)? 0x800: 0x1000))

868 | 
	`usb_pùe¶ow
(
pùe
) << 13

869 | 
	`usb_max∑ckë
(
usb_dev
, 
pùe
) << 16);

871 i‡(
ed
->
ty≥
 =
PIPE_INTERRUPT
 &&Éd->
°©e
 =
ED_UNLINK
) {

872 
ed
->
öt_≥riod
 = 
öãrvÆ
;

873 
ed
->
öt_lﬂd
 = 
lﬂd
;

876  
ed_ªt
;

877 
	}
}

885 
	$td_fûl
(
ohci_t
 *
ohci
, 
öfo
,

886 *
d©a
, 
Àn
,

887 
usb_devi˚
 *
dev
, 
ödex
, 
urb_¥iv_t
 *
urb_¥iv
)

889 vﬁ©ûê
td_t
 *
td
, *
td_±
;

890 #ifde‡
OHCI_FILL_TRACE


891 
i
;

894 i‡(
ödex
 > 
urb_¥iv
->
Àngth
) {

895 
	`îr
("index >Üength");

899 
td_±
 = 
urb_¥iv
->
td
 [
ödex
];

900 
td_±
->
NextTD
 = 0x0;

901 
td_±
->
hwNextTD_DMA
 = 
	`OHCI_vút_to_bus
—d_±->
NextTD
);

904 
td
 = 
urb_¥iv
->td [
ödex
] = (
td_t
 *)(
	`m32_sw≠
(urb_¥iv->
ed
->
TaûP
) & ~0xf);

906 
td
->
ed
 = 
urb_¥iv
->ed;

907 
td
->
√xt_dl_td
 = 
NULL
;

908 
td
->
ödex
 = index;

909 
td
->
d©a
 = (
__u32
)data;

910 #ifde‡
OHCI_FILL_TRACE


911 i‡(
	`usb_pùebulk
(
urb_¥iv
->
pùe
Ë&& 
	`usb_pùeout
(urb_priv->pipe)) {

912 
i
 = 0; i < 
Àn
; i++)

913 
	`¥ötf
("td->d©a[%d] %#2x ", 
i
, ((*)
td
->
d©a
)[i]);

914 
	`¥ötf
("\n");

917 i‡(!
Àn
)

918 
d©a
 = 0;

920 
td
->
hwINFO
 = 
	`m32_sw≠
(
öfo
);

923 if(
d©a
){

924 
td
->
d©a_c›y
 = 
	`mÆloc
((
u8
Ë* 
Àn
);

925 if(!
td
->
d©a_c›y
){

926 
	`¥ötf
("OOM"); 1);

928 
td
->
d©a_c›y_dma
 = 
	`KSEG1ADDR
—d->
d©a_c›y
);

930 if–
Àn
 &&

931 ((
öfo
 & 
TD_DP_OUT
) ||

932 ((
öfo
 & 0x00180000) == 0x0))){

933 
	`mem˝y
(
td
->
d©a_c›y_dma
, 
d©a
, 
Àn
);

936 
td
->
CBP
 = 
	`m32_sw≠
((Èd->
d©a_c›y_dma
);

937 
td
->
hwCBP_DMA
 = 
	`OHCI_vút_to_bus
—d->
CBP
);

938 
td
->
BE
 = 
	`m32_sw≠
(()—d->
d©a_c›y_dma
 + 
Àn
 - 1));

939 
td
->
hwBE_DMA
 = 
	`OHCI_vút_to_bus
—d->
BE
);

941 
td
->
CBP
 = 0;

942 
td
->
hwCBP_DMA
 = 
	`OHCI_vút_to_bus
—d->
CBP
);

943 
td
->
BE
 = 0;

944 
td
->
hwBE_DMA
 = 
	`OHCI_vút_to_bus
—d->
BE
);

947 
td
->
hwCBP
 = 
	`OHCI_vút_to_bus
(
	`m32_sw≠
(()
d©a
));

948 i‡(
d©a
)

949 
td
->
hwBE
 = 
	`OHCI_vút_to_bus
(
	`m32_sw≠
(()(
d©a
 + 
Àn
 - 1)));

951 
td
->
hwBE
 = 
	`OHCI_vút_to_bus
(0x0);

954 
td
->
NextTD
 = 
	`m32_sw≠
(()
td_±
);

955 
td
->
hwNextTD_DMA
 = 
	`OHCI_vút_to_bus
—d->
NextTD
);

958 
td
->
ed
->
TaûP
 =Åd->
NextTD
;

959 
td
->
ed
->
hwTaûP_DMA
 = 
	`OHCI_vút_to_bus
—d->ed->
TaûP
);

960 
	}
}

966 
	$td_submô_job
(
usb_devi˚
 *
dev
, 
pùe
,

967 *
buf„r
, 
å™s„r_Àn
,

968 
devªque°
 *
£tup
, 
urb_¥iv_t
 *
urb
,

969 
öãrvÆ
)

971 
ohci_t
 *
ohci
 = &
gohci
;

972 
d©a_Àn
 = 
å™s„r_Àn
;

973 *
d©a
;

974 
˙t
 = 0;

975 
__u32
 
öfo
 = 0;

976 
toggÀ
 = 0;

980 i‡(
	`usb_gëtoggÀ
(
dev
, 
	`usb_pùìndpoöt
(
pùe
), 
	`usb_pùeout
(pipe))) {

981 
toggÀ
 = 
TD_T_TOGGLE
;

983 
toggÀ
 = 
TD_T_DATA0
;

984 
	`usb_£âoggÀ
(
dev
, 
	`usb_pùìndpoöt
(
pùe
), 
	`usb_pùeout
(pipe), 1);

986 
urb
->
td_˙t
 = 0;

987 i‡(
d©a_Àn
)

988 
d©a
 = 
buf„r
;

990 
d©a
 = 0;

992 
	`usb_pùëy≥
(
pùe
)) {

993 
PIPE_BULK
:

998 
öfo
 = 
	`usb_pùeout
(
pùe
Ë? 
TD_CC
 | 
TD_DP_OUT
 : TD_CC | 
TD_DP_IN
 ;

999 
d©a_Àn
 > 4096) {

1000 
	`td_fûl
(
ohci
, 
öfo
 | (
˙t
? 
TD_T_TOGGLE
:
toggÀ
), 
d©a
, 4096, 
dev
, c¡, 
urb
);

1001 
d©a
 +4096; 
d©a_Àn
 -4096; 
˙t
++;

1003 
öfo
 = 
	`usb_pùeout
(
pùe
)? 
TD_CC
 | 
TD_DP_OUT
 : TD_CC | 
TD_R
 | 
TD_DP_IN
 ;

1004 
	`td_fûl
(
ohci
, 
öfo
 | (
˙t
? 
TD_T_TOGGLE
:
toggÀ
), 
d©a
, 
d©a_Àn
, 
dev
, c¡, 
urb
);

1005 
˙t
++;

1010 i‡(!
ohci
->
¶ìpög
) {

1012 
	`wrôñ
(
OHCI_BLF
, &
ohci
->
ªgs
->
cmd°©us
);

1016 
PIPE_CONTROL
:

1018 
öfo
 = 
TD_CC
 | 
TD_DP_SETUP
 | 
TD_T_DATA0
;

1019 
	`td_fûl
(
ohci
, 
öfo
, 
£tup
, 8, 
dev
, 
˙t
++, 
urb
);

1022 i‡(
d©a_Àn
 > 0) {

1023 
öfo
 = 
	`usb_pùeout
(
pùe
)?

1024 
TD_CC
 | 
TD_R
 | 
TD_DP_OUT
 | 
TD_T_DATA1
 :

1025 
TD_CC
 | 
TD_R
 | 
TD_DP_IN
 | 
TD_T_DATA1
;

1027 
	`td_fûl
(
ohci
, 
öfo
, 
d©a
, 
d©a_Àn
, 
dev
, 
˙t
++, 
urb
);

1031 
öfo
 = 
	`usb_pùeout
(
pùe
)?

1032 
TD_CC
 | 
TD_DP_IN
 | 
TD_T_DATA1
:

1033 
TD_CC
 | 
TD_DP_OUT
 | 
TD_T_DATA1
;

1034 
	`td_fûl
(
ohci
, 
öfo
, 
d©a
, 0, 
dev
, 
˙t
++, 
urb
);

1036 i‡(!
ohci
->
¶ìpög
) {

1038 
	`wrôñ
(
OHCI_CLF
, &
ohci
->
ªgs
->
cmd°©us
);

1042 
PIPE_INTERRUPT
:

1043 
öfo
 = 
	`usb_pùeout
(
urb
->
pùe
)?

1044 
TD_CC
 | 
TD_DP_OUT
 | 
toggÀ
:

1045 
TD_CC
 | 
TD_R
 | 
TD_DP_IN
 | 
toggÀ
;

1046 
	`td_fûl
(
ohci
, 
öfo
, 
d©a
, 
d©a_Àn
, 
dev
, 
˙t
++, 
urb
);

1049 i‡(
urb
->
Àngth
 !
˙t
)

1050 
	`dbg
("TD LENGTH %d !CNT %d", 
urb
->
Àngth
, 
˙t
);

1051 
	}
}

1059 
	$dl_å™s„r_Àngth
(
td_t
 *
td
)

1061 
__u32
 
tdINFO
, 
tdBE
, 
tdCBP
;

1062 
urb_¥iv_t
 *
lurb_¥iv
 = 
td
->
ed
->
purb
;

1064 
tdINFO
 = 
	`m32_sw≠
(
td
->
hwINFO
);

1065 
tdBE
 = 
	`m32_sw≠
(
td
->
hwBE_DMA
);

1066 
tdCBP
 = 
	`m32_sw≠
(
td
->
hwCBP_DMA
);

1068 i‡(!(
	`usb_pùec⁄åﬁ
(
lurb_¥iv
->
pùe
Ë&& ((
td
->
ödex
 =0Ë|| (td->ödex =lurb_¥iv->
Àngth
 - 1)))) {

1069 i‡(
tdBE
 != 0) {

1070 i‡(
tdCBP
 == 0)

1071 
lurb_¥iv
->
a˘uÆ_Àngth
 +
tdBE
 - (
__u32
)
	`OHCI_vút_to_bus
(
td
->
d©a_c›y_dma
) + 1;

1073 
lurb_¥iv
->
a˘uÆ_Àngth
 +
tdCBP
 - (
__u32
)
	`OHCI_vút_to_bus
(
td
->
d©a_c›y_dma
);

1076 
	}
}

1079 
	$check_°©us
(
td_t
 *
td_li°
)

1081 
urb_¥iv_t
 *
lurb_¥iv
 = 
td_li°
->
ed
->
purb
;

1082 
urb_Àn
 = 
lurb_¥iv
->
Àngth
;

1083 
__u32
 *
phwHódP
 = &
td_li°
->
ed
->
hwHódP_DMA
;

1084 
cc
;

1086 
cc
 = 
	`TD_CC_GET
(
	`m32_sw≠
(
td_li°
->
hwINFO
));

1087 i‡(
cc
) {

1088 
	`îr
(" USB-îr‹: %†(%x)", 
cc_to_°rög
[
cc
], cc);

1089 
	`¥ötf
("WARNING!!!\n");Örintf("WARNING!!!\n");Örintf("WARNING!!!\n");Örintf("WARNING!!!\n");

1090 
	`¥ötf
("WARNING!!!\n");Örintf("WARNING!!!\n");Örintf("WARNING!!!\n");Örintf("WARNING!!!\n");

1091 
	`¥ötf
("WARNING!!!\n");Örintf("WARNING!!!\n");Örintf("WARNING!!!\n");Örintf("WARNING!!!\n");

1092 i‡(*
phwHódP
 & 
	`m32_sw≠
(0x1)) {

1093 i‡(
lurb_¥iv
 && ((
td_li°
->
ödex
 + 1Ë< 
urb_Àn
)) {

1095 *
phwHódP
 = 
	`OHCI_vút_to_bus
((
lurb_¥iv
->
td
[
urb_Àn
 - 1]->
hwNextTD_DMA
 & 
	`m32_sw≠
(0xfffffff0)) | (*phwHeadP & m32_swap(0x2)));

1096 
lurb_¥iv
->
td_˙t
 +
urb_Àn
 - 
td_li°
->
ödex
 - 1;

1098 *
phwHódP
 &
	`OHCI_vút_to_bus
(
	`m32_sw≠
(0xfffffff2));

1101 #ifde‡
CONFIG_MPC5200


1102 
td_li°
->
hwNextTD
 = 
	`OHCI_vút_to_bus
(0x0);

1105 
	}
}

1109 
td_t
 *
	$dl_ªvî£_d⁄e_li°
(
ohci_t
 *
ohci
)

1111 
__u32
 
td_li°_hc
;

1112 
td_t
 *
td_ªv
 = 
NULL
;

1113 
td_t
 *
td_li°
 = 
NULL
;

1114 
ohci_hcˇ
 *
hcˇ_n⁄ˇche
 = 
	`KSEG1ADDR
(
ohci
->
hcˇ
);

1116 
td_li°_hc
 = 
	`m32_sw≠
(
hcˇ_n⁄ˇche
->
d⁄e_hód
) & 0xfffffff0;

1118 
ohci
->
hcˇ
->
d⁄e_hód
 = 0;

1119 
hcˇ_n⁄ˇche
->
d⁄e_hód
 = 0;

1120 
td_li°_hc
) {

1121 
td_li°
 = (
td_t
 *)
td_li°_hc
;

1122 
	`check_°©us
(
td_li°
);

1123 
td_li°
->
√xt_dl_td
 = 
td_ªv
;

1124 
td_ªv
 = 
td_li°
;

1125 
td_li°_hc
 = 
	`m32_sw≠
(
td_li°
->
hwNextTD_DMA
) & 0xfffffff0;

1127  
td_li°
;

1128 
	}
}

1133 
	$föish_urb
(
ohci_t
 *
ohci
, 
urb_¥iv_t
 *
urb
, 
°©us
)

1135 i‡((
°©us
 & (
ED_OPER
 | 
ED_UNLINK
)Ë&& (
urb
->
°©e
 !
URB_DEL
))

1136 
urb
->
föished
 = 
	`sohci_ªtu∫_job
(
ohci
, urb);

1138 
	`dbg
("föish_urb: så™ge.., ED sèã %x, \n", 
°©us
);

1139 
	}
}

1147 
	$èkeback_td
(
ohci_t
 *
ohci
, 
td_t
 *
td_li°
)

1149 
ed_t
 *
ed
;

1150 
cc
;

1151 
°©
 = 0;

1153 
urb_¥iv_t
 *
lurb_¥iv
;

1154 
__u32
 
tdINFO
, 
edHódP
, 
edTaûP
;

1156 
tdINFO
 = 
	`m32_sw≠
(
td_li°
->
hwINFO
);

1158 
ed
 = 
td_li°
->ed;

1159 
lurb_¥iv
 = 
ed
->
purb
;

1163 
ed
->
HódP
 = (
__u32
)
	`KSEG1ADDR
(
	`phys_to_vút
”d->
hwHódP_DMA
)) & 0xfffffff0;

1165 
	`dl_å™s„r_Àngth
(
td_li°
);

1167 
lurb_¥iv
->
td_˙t
++;

1170 
cc
 = 
	`TD_CC_GET
(
tdINFO
);

1171 i‡(
cc
) {

1172 
	`îr
("USB-îr‹: %†(%x)", 
cc_to_°rög
[
cc
], cc);

1173 
°©
 = 
cc_to_îr‹
[
cc
];

1178 i‡(
lurb_¥iv
->
td_˙t
 =lurb_¥iv->
Àngth
)

1179 
	`föish_urb
(
ohci
, 
lurb_¥iv
, 
ed
->
°©e
);

1183 i‡(
ed
->
°©e
 !
ED_NEW
 && (!
	`usb_pùeöt
(
lurb_¥iv
->
pùe
))) {

1184 
edHódP
 = 
	`m32_sw≠
(
ed
->
HódP
) & 0xfffffff0;

1185 
edTaûP
 = 
	`m32_sw≠
(
ed
->
TaûP
);

1188 i‡((
edHódP
 =
edTaûP
Ë&& (
ed
->
°©e
 =
ED_OPER
)){

1189 
	`ï_u∆ök
(
ohci
, 
ed
);

1194  
°©
;

1195 
	}
}

1197 
	$dl_d⁄e_li°
(
ohci_t
 *
ohci
)

1199 
°©
 = 0;

1200 
td_t
 *
td_li°
 = 
	`dl_ªvî£_d⁄e_li°
(
ohci
);

1202 
td_li°
) {

1203 
td_t
 *
td_√xt
 = 
td_li°
->
√xt_dl_td
;

1204 
°©
 = 
	`èkeback_td
(
ohci
, 
	`KSEG1ADDR
(
	`phys_to_vút
(
td_li°
)));

1205 
td_li°
 = 
td_√xt
;

1207  
°©
;

1208 
	}
}

1215 
__u8
 
	groŸ_hub_dev_des
[] =

1238 
__u8
 
	groŸ_hub_c⁄fig_des
[] =

1272 
	groŸ_hub_°r_ödex0
[] =

1280 
	groŸ_hub_°r_ödex1
[] =

1316 
	#OK
(
x
Ë
Àn
 = (x); 

	)

1317 #ifde‡
DEBUG


1318 
	#WR_RH_STAT
(
x
Ë{
	`öfo
("WR:°©u†%#8x", (x)); 
	`wrôñ
((x), \

1319 &
gohci
.
ªgs
->
roŸhub
.
°©us
); }

	)

1320 
	#WR_RH_PORTSTAT
(
x
Ë{
	`öfo
("WR:p‹t°©us[%d] %#8x", 
wIndex
-1, \

1321 (
x
)); 
	`wrôñ
((x), &
gohci
.
ªgs
->
roŸhub
.
p‹t°©us
[
wIndex
-1]); }

	)

1323 
	#WR_RH_STAT
(
x
Ë
	`wrôñ
((x), &
gohci
.
ªgs
->
roŸhub
.
°©us
)

	)

1324 
	#WR_RH_PORTSTAT
(
x
Ë
	`wrôñ
((x), \

1325 &
gohci
.
ªgs
->
roŸhub
.
p‹t°©us
[
wIndex
-1])

	)

1327 
	#RD_RH_STAT
 
	`roŸhub_°©us
(&
gohci
)

	)

1328 
	#RD_RH_PORTSTAT
 
	`roŸhub_p‹t°©us
(&
gohci
, 
wIndex
-1)

	)

1332 
	$rh_check_p‹t_°©us
(
ohci_t
 *
c⁄åﬁÀr
)

1334 
__u32
 
ãmp
, 
ndp
, 
i
;

1335 
ªs
;

1337 
ªs
 = -1;

1338 
ãmp
 = 
	`roŸhub_a
(
c⁄åﬁÀr
);

1339 
ndp
 = (
ãmp
 & 
RH_A_NDP
);

1340 #ifde‡
CONFIG_AT91C_PQFP_UHPBUG


1341 
ndp
 = (ndp == 2) ? 1:0;

1343 
i
 = 0; i < 
ndp
; i++) {

1344 
ãmp
 = 
	`roŸhub_p‹t°©us
(
c⁄åﬁÀr
, 
i
);

1346 i‡(((
ãmp
 & (
RH_PS_PESC
 | 
RH_PS_CSC
)) ==

1347 (
RH_PS_PESC
 | 
RH_PS_CSC
)) &&

1348 ((
ãmp
 & 
RH_PS_CCS
) == 0)) {

1349 
ªs
 = 
i
;

1353  
ªs
;

1354 
	}
}

1356 
	$ohci_submô_rh_msg
(
usb_devi˚
 *
dev
, 
pùe
,

1357 *
buf„r
, 
å™s„r_Àn
, 
devªque°
 *
cmd
)

1359 *
d©a
 = 
buf„r
;

1360 
Àni
 = 
å™s„r_Àn
;

1361 
Àn
 = 0;

1362 
°©
 = 0;

1363 
__u32
 
d©ab
[4];

1364 
__u8
 *
d©a_buf
 = (__u8 *)
d©ab
;

1365 
__u16
 
bmRTy≥_bReq
;

1366 
__u16
 
wVÆue
;

1367 
__u16
 
wIndex
;

1368 
__u16
 
wLígth
;

1370 #ifde‡
DEBUG


1371 
	`pkt_¥öt
(
NULL
, 
dev
, 
pùe
, 
buf„r
, 
å™s„r_Àn
,

1372 
cmd
, "SUB‘h)", 
	`usb_pùeö
(
pùe
));

1374 
	`waô_ms
(1);

1376 i‡(
	`usb_pùeöt
(
pùe
)) {

1377 
	`öfo
("Root-Hub submit IRQ: NOT implemented");

1380 
bmRTy≥_bReq
 = 
cmd
->
ªque°ty≥
 | (cmd->
ªque°
 << 8);

1381 
wVÆue
 = 
	`À16_to_˝u
(
cmd
->
vÆue
);

1382 
wIndex
 = 
	`À16_to_˝u
(
cmd
->
ödex
);

1383 
wLígth
 = 
	`À16_to_˝u
(
cmd
->
Àngth
);

1385 
	`öfo
("Root-Hub:ádr: %2x cmd(%1x): %08x %04x %04x %04x\n",

1386 
dev
->
devnum
, 8, 
bmRTy≥_bReq
, 
wVÆue
, 
wIndex
, 
wLígth
);

1388 
bmRTy≥_bReq
) {

1397 
RH_GET_STATUS
:

1398 
	`¥ötf
("## RH_GET_STATUS\n");

1399 *(
__u16
 *Ë
d©a_buf
 = 
	`˝u_to_À16
(1);

1400 
	`OK
(2);

1401 
RH_GET_STATUS
 | 
RH_INTERFACE
:

1402 
	`¥ötf
("## RH_GET_STATUS | RH_INTERFACE\n");

1403 *(
__u16
 *Ë
d©a_buf
 = 
	`˝u_to_À16
(0);

1404 
	`OK
(2);

1405 
RH_GET_STATUS
 | 
RH_ENDPOINT
:

1406 
	`¥ötf
("## RH_GET_STATUS | RH_ENDPOINT\n");

1407 *(
__u16
 *Ë
d©a_buf
 = 
	`˝u_to_À16
(0);

1408 
	`OK
(2);

1409 
RH_GET_STATUS
 | 
RH_CLASS
:

1410 
	`¥ötf
("## RH_GET_STATUS | RH_CLASS\n");

1411 *(
__u32
 *Ë
d©a_buf
 = 
	`˝u_to_À32
(
RD_RH_STAT
 & ~(
RH_HS_CRWE
 | 
RH_HS_DRWE
));

1412 
	`OK
(4);

1413 
RH_GET_STATUS
 | 
RH_OTHER
 | 
RH_CLASS
:

1414 
	`¥ötf
("## RH_GET_STATUS | RH_OTHER | RH_CLASS\n");

1415 *(
__u32
 *Ë
d©a_buf
 = 
	`˝u_to_À32
(
RD_RH_PORTSTAT
);

1416 
	`OK
(4);

1418 
RH_CLEAR_FEATURE
 | 
RH_ENDPOINT
:

1419 
	`¥ötf
("## RH_CLEAR_FEATURE | RH_ENDPOINT\n");

1420 
wVÆue
) {

1421 (
RH_ENDPOINT_STALL
):

1422 
	`OK
(0);

1426 
RH_CLEAR_FEATURE
 | 
RH_CLASS
:

1427 
	`¥ötf
("## RH_CLEAR_FEATURE | RH_CLASS\n");

1428 
wVÆue
) {

1429 
RH_C_HUB_LOCAL_POWER
:

1430 
	`¥ötf
("## RH_C_HUB_LOCAL_POWER\n");

1431 
	`OK
(0);

1432 (
RH_C_HUB_OVER_CURRENT
):

1433 
	`¥ötf
("## RH_C_HUB_OVER_CURRENT\n");

1434 
	`WR_RH_STAT
(
RH_HS_OCIC
);

1435 
	`OK
(0);

1439 
RH_CLEAR_FEATURE
 | 
RH_OTHER
 | 
RH_CLASS
:

1440 
	`¥ötf
("## RH_CLEAR_FEATURE | RH_OTHER | RH_CLASS :%d\n", 
wVÆue
);

1441 
wVÆue
) {

1442 (
RH_PORT_ENABLE
): 
	`WR_RH_PORTSTAT
(
RH_PS_CCS
); 
	`OK
(0);

1443 (
RH_PORT_SUSPEND
): 
	`WR_RH_PORTSTAT
(
RH_PS_POCI
); 
	`OK
(0);

1444 (
RH_PORT_POWER
): 
	`WR_RH_PORTSTAT
(
RH_PS_LSDA
); 
	`OK
(0);

1445 (
RH_C_PORT_CONNECTION
): 
	`WR_RH_PORTSTAT
(
RH_PS_CSC
); 
	`OK
(0);

1446 (
RH_C_PORT_ENABLE
): 
	`WR_RH_PORTSTAT
(
RH_PS_PESC
); 
	`OK
(0);

1447 (
RH_C_PORT_SUSPEND
): 
	`WR_RH_PORTSTAT
(
RH_PS_PSSC
); 
	`OK
(0);

1448 (
RH_C_PORT_OVER_CURRENT
):
	`WR_RH_PORTSTAT
(
RH_PS_OCIC
); 
	`OK
(0);

1449 (
RH_C_PORT_RESET
): 
	`WR_RH_PORTSTAT
(
RH_PS_PRSC
); 
	`OK
(0);

1453 
RH_SET_FEATURE
 | 
RH_OTHER
 | 
RH_CLASS
:

1454 
	`¥ötf
("## RH_SET_FEATURE | RH_OTHER | RH_CLASS: %d\n", 
wVÆue
);

1455 
wVÆue
) {

1456 (
RH_PORT_SUSPEND
):

1457 
	`WR_RH_PORTSTAT
(
RH_PS_PSS
); 
	`OK
(0);

1458 (
RH_PORT_RESET
):

1459 i‡(
RD_RH_PORTSTAT
 & 
RH_PS_CCS
)

1460 
	`WR_RH_PORTSTAT
(
RH_PS_PRS
);

1461 
	`OK
(0);

1462 (
RH_PORT_POWER
):

1463 
	`WR_RH_PORTSTAT
(
RH_PS_PPS
);

1464 
	`waô_ms
(100);

1465 
	`OK
(0);

1466 (
RH_PORT_ENABLE
):

1467 i‡(
RD_RH_PORTSTAT
 & 
RH_PS_CCS
)

1468 
	`WR_RH_PORTSTAT
(
RH_PS_PES
);

1469 
	`OK
(0);

1473 
RH_SET_ADDRESS
:

1474 
	`¥ötf
("## RH_SET_ADDRESS\n");

1475 
gohci
.
rh
.
devnum
 = 
wVÆue
;

1476 
	`OK
(0);

1478 
RH_GET_DESCRIPTOR
:

1479 
	`¥ötf
("## RH_GET_DESCRIPTOR\n");

1480 (
wVÆue
 & 0xff00) >> 8) {

1482 
Àn
 = 
	`mö_t
(,

1483 
Àni
,

1484 
	`mö_t
(,

1485 (
roŸ_hub_dev_des
),

1486 
wLígth
));

1487 
d©a_buf
 = 
roŸ_hub_dev_des
; 
	`OK
(
Àn
);

1489 
Àn
 = 
	`mö_t
(,

1490 
Àni
,

1491 
	`mö_t
(,

1492 (
roŸ_hub_c⁄fig_des
),

1493 
wLígth
));

1494 
d©a_buf
 = 
roŸ_hub_c⁄fig_des
; 
	`OK
(
Àn
);

1496 i‡(
wVÆue
 == 0x0300) {

1497 
Àn
 = 
	`mö_t
(,

1498 
Àni
,

1499 
	`mö_t
(,

1500 (
roŸ_hub_°r_ödex0
),

1501 
wLígth
));

1502 
d©a_buf
 = 
roŸ_hub_°r_ödex0
;

1503 
	`OK
(
Àn
);

1505 i‡(
wVÆue
 == 0x0301) {

1506 
Àn
 = 
	`mö_t
(,

1507 
Àni
,

1508 
	`mö_t
(,

1509 (
roŸ_hub_°r_ödex1
),

1510 
wLígth
));

1511 
d©a_buf
 = 
roŸ_hub_°r_ödex1
;

1512 
	`OK
(
Àn
);

1515 
°©
 = 
USB_ST_STALLED
;

1519 
RH_GET_DESCRIPTOR
 | 
RH_CLASS
:

1521 
__u32
 
ãmp
 = 
	`roŸhub_a
(&
gohci
);

1523 
	`¥ötf
("## RH_GET_DESCRIPTOR | RH_CLASS\n");

1525 
d©a_buf
 [0] = 9;

1526 
d©a_buf
 [1] = 0x29;

1527 
d©a_buf
 [2] = 
ãmp
 & 
RH_A_NDP
;

1528 #ifde‡
CONFIG_AT91C_PQFP_UHPBUG


1529 
d©a_buf
 [2] = (data_buf [2] == 2) ? 1:0;

1531 
d©a_buf
 [3] = 0;

1532 i‡(
ãmp
 & 
RH_A_PSM
)

1533 
d©a_buf
 [3] |= 0x1;

1534 i‡(
ãmp
 & 
RH_A_NOCP
)

1535 
d©a_buf
 [3] |= 0x10;

1536 i‡(
ãmp
 & 
RH_A_OCPM
)

1537 
d©a_buf
 [3] |= 0x8;

1540 
d©ab
 [1] = 0;

1541 
d©a_buf
 [5] = (
ãmp
 & 
RH_A_POTPGT
) >> 24;

1542 
ãmp
 = 
	`roŸhub_b
(&
gohci
);

1543 
d©a_buf
 [7] = 
ãmp
 & 
RH_B_DR
;

1544 i‡(
d©a_buf
 [2] < 7) {

1545 
d©a_buf
 [8] = 0xff;

1547 
d©a_buf
 [0] += 2;

1548 
d©a_buf
 [8] = (
ãmp
 & 
RH_B_DR
) >> 8;

1549 
d©a_buf
 [10] = data_buf [9] = 0xff;

1552 
Àn
 = 
	`mö_t
(, 
Àni
,

1553 
	`mö_t
(, 
d©a_buf
 [0], 
wLígth
));

1554 
	`OK
(
Àn
);

1557 
RH_GET_CONFIGURATION
:

1558 
	`¥ötf
("## RH_GET_CONFIGURATION\n");

1559 *(
__u8
 *Ë
d©a_buf
 = 0x01; 
	`OK
(1);

1561 
RH_SET_CONFIGURATION
:

1562 
	`¥ötf
("## RH_SET_CONFIGURATION\n");

1563 
	`WR_RH_STAT
(0x10000); 
	`OK
(0);

1566 
	`dbg
("unsupportedÑoot hub command");

1567 
°©
 = 
USB_ST_STALLED
;

1570 #ifdef 
DEBUG


1571 
	`ohci_dump_roŸhub
(&
gohci
, 1);

1573 
	`waô_ms
(1);

1576 
Àn
 = 
	`mö_t
(,Üí, 
Àni
);

1577 i‡(
d©a
 !
d©a_buf
)

1578 
	`mem˝y
(
d©a
, 
d©a_buf
, 
Àn
);

1579 
dev
->
a˘_Àn
 = 
Àn
;

1580 
dev
->
°©us
 = 
°©
;

1582 #ifde‡
DEBUG


1583 
	`pkt_¥öt
(
NULL
, 
dev
, 
pùe
, 
buf„r
,

1584 
å™s„r_Àn
, 
cmd
, "RET(rh)", 0 );

1586 
	`waô_ms
(1);

1589  
°©
;

1590 
	}
}

1596 
	$submô_comm⁄_msg
(
usb_devi˚
 *
dev
, 
pùe
, *
buf„r
,

1597 
å™s„r_Àn
, 
devªque°
 *
£tup
, 
öãrvÆ
)

1599 
°©
 = 0;

1600 
maxsize
 = 
	`usb_max∑ckë
(
dev
, 
pùe
);

1601 
timeout
;

1602 
urb_¥iv_t
 *
urb
;

1604 
urb
 = 
	`mÆloc
((
urb_¥iv_t
));

1605 
	`mem£t
(
urb
, 0, (
urb_¥iv_t
));

1607 
urb
->
dev
 = dev;

1608 
urb
->
pùe
 =Öipe;

1609 
urb
->
å™s„r_buf„r
 = 
buf„r
;

1610 
urb
->
å™s„r_buf„r_Àngth
 = 
å™s„r_Àn
;

1611 
urb
->
öãrvÆ
 = interval;

1612 
urb
->
a˘uÆ_Àngth
 = 0;

1615 i‡(
devg⁄e
 =
dev
) {

1616 
dev
->
°©us
 = 
USB_ST_CRC_ERR
;

1620 #ifde‡
DEBUG


1621 
urb
->
a˘uÆ_Àngth
 = 0;

1622 
	`pkt_¥öt
(
urb
, 
dev
, 
pùe
, 
buf„r
, 
å™s„r_Àn
,

1623 
£tup
, "SUB", 
	`usb_pùeö
(
pùe
));

1625 
	`waô_ms
(1);

1627 i‡(!
maxsize
) {

1628 
	`îr
("submit_common_message:Öipesize forÖipe %lx is zero",

1629 
pùe
);

1633 i‡(
	`sohci_submô_job
(
urb
, 
£tup
) < 0) {

1634 
	`îr
("sohci_submit_job failed");

1639 
	`waô_ms
(10);

1644 
	#BULK_TO
 5000

	)

1645 i‡(
	`usb_pùebulk
(
pùe
))

1646 
timeout
 = 
BULK_TO
;

1648 
timeout
 = 100;

1651 
	`mdñay
(2);

1656 
°©
 = 
	`hc_öãºu±
();

1657 i‡(
°©
 < 0) {

1658 
°©
 = 
USB_ST_CRC_ERR
;

1671 i‡((
°©
 >0Ë&& (°© !0xffË&& (
urb
->
föished
)) {

1676 i‡(--
timeout
) {

1677 
	`waô_ms
(1);

1678 i‡(!
urb
->
föished
)

1679 
	`dbg
("*");

1682 
	`îr
("CTL:TIMEOUT ");

1683 
	`dbg
("submô_comm⁄_msg: TO sètu†%x\n", 
°©
);

1684 
urb
->
föished
 = 1;

1685 
°©
 = 
USB_ST_CRC_ERR
;

1689 
dev
->
°©us
 = 
°©
;

1690 
dev
->
a˘_Àn
 = 
å™s„r_Àn
;

1692 #ifde‡
DEBUG


1693 
	`pkt_¥öt
(
urb
, 
dev
, 
pùe
, 
buf„r
, 
å™s„r_Àn
,

1694 
£tup
, "RET(˘Ã)", 
	`usb_pùeö
(
pùe
));

1696 
	`waô_ms
(1);

1699 i‡(!
	`usb_pùeöt
(
pùe
))

1700 
	`urb_‰ì_¥iv
(
urb
);

1703 
	}
}

1706 
	$submô_bulk_msg
(
usb_devi˚
 *
dev
, 
pùe
, *
buf„r
,

1707 
å™s„r_Àn
)

1709 
	`öfo
("submit_bulk_msg");

1710  
	`submô_comm⁄_msg
(
dev
, 
pùe
, 
buf„r
, 
å™s„r_Àn
, 
NULL
, 0);

1711 
	}
}

1713 
	$submô_c⁄åﬁ_msg
(
usb_devi˚
 *
dev
, 
pùe
, *
buf„r
,

1714 
å™s„r_Àn
, 
devªque°
 *
£tup
)

1716 
maxsize
 = 
	`usb_max∑ckë
(
dev
, 
pùe
);

1718 
	`öfo
("submit_control_msg");

1719 #ifde‡
DEBUG


1720 
	`pkt_¥öt
(
NULL
, 
dev
, 
pùe
, 
buf„r
, 
å™s„r_Àn
,

1721 
£tup
, "SUB", 
	`usb_pùeö
(
pùe
));

1723 
	`waô_ms
(1);

1725 i‡(!
maxsize
) {

1726 
	`îr
("submit_control_message:Öipesize forÖipe %lx is zero",

1727 
pùe
);

1730 i‡(((
pùe
 >> 8Ë& 0x7fË=
gohci
.
rh
.
devnum
) {

1731 
gohci
.
rh
.
dev
 = dev;

1733  
	`ohci_submô_rh_msg
(
dev
, 
pùe
, 
buf„r
, 
å™s„r_Àn
,

1734 
£tup
);

1737  
	`submô_comm⁄_msg
(
dev
, 
pùe
, 
buf„r
, 
å™s„r_Àn
, 
£tup
, 0);

1738 
	}
}

1740 
	$submô_öt_msg
(
usb_devi˚
 *
dev
, 
pùe
, *
buf„r
,

1741 
å™s„r_Àn
, 
öãrvÆ
)

1743 
	`öfo
("submit_int_msg");

1744  
	`submô_comm⁄_msg
(
dev
, 
pùe
, 
buf„r
, 
å™s„r_Àn
, 
NULL
,

1745 
öãrvÆ
);

1746 
	}
}

1754 
	$hc_ª£t
(
ohci_t
 *
ohci
)

1756 #ifde‡
CONFIG_PCI_EHCI_DEVNO


1757 
pci_dev_t
 
pdev
;

1759 
timeout
 = 30;

1760 
smm_timeout
 = 50;

1762 
	`dbg
("%s\n", 
__FUNCTION__
);

1764 #ifde‡
CONFIG_PCI_EHCI_DEVNO


1769 
pdev
 = 
	`pci_föd_devi˚s
(
ehci_pci_ids
, 
CONFIG_PCI_EHCI_DEVNO
);

1770 i‡(
pdev
 != -1) {

1771 
u32
 
ba£
;

1772 
timeout
 = 1000;

1774 
	`pci_ªad_c⁄fig_dw‹d
(
pdev
, 
PCI_BASE_ADDRESS_0
, &
ba£
);

1775 
	`wrôñ
(
	`ªadl
(
ba£
 + 
EHCI_USBCMD_OFF
Ë| 
EHCI_USBCMD_HCRESET
,

1776 
ba£
 + 
EHCI_USBCMD_OFF
);

1778 
	`ªadl
(
ba£
 + 
EHCI_USBCMD_OFF
Ë& 
EHCI_USBCMD_HCRESET
) {

1779 i‡(
timeout
-- <= 0) {

1780 
	`¥ötf
("USB RootHubÑesetÅimed out!");

1783 
	`udñay
(1);

1786 
	`¥ötf
("NÿEHCI fun¯© %d index!\n", 
CONFIG_PCI_EHCI_DEVNO
);

1788 i‡(
	`ªadl
(&
ohci
->
ªgs
->
c⁄åﬁ
Ë& 
OHCI_CTRL_IR
) {

1790 
	`wrôñ
(
OHCI_OCR
, &
ohci
->
ªgs
->
cmd°©us
);

1791 
	`öfo
("USB HC TakeOver from SMM");

1792 
	`ªadl
(&
ohci
->
ªgs
->
c⁄åﬁ
Ë& 
OHCI_CTRL_IR
) {

1793 
	`waô_ms
(10);

1794 i‡(--
smm_timeout
 == 0) {

1795 
	`îr
("USB HC TakeOver failed!");

1802 
	`wrôñ
(
OHCI_INTR_MIE
, &
ohci
->
ªgs
->
öådißbÀ
);

1804 
	`dbg
("USB HCÑeset_hc usb-%s: ctrl = 0x%X ;\n",

1805 
ohci
->
¶Ÿ_«me
,

1806 
	`ªadl
(&
ohci
->
ªgs
->
c⁄åﬁ
));

1809 
ohci
->
hc_c⁄åﬁ
 = 0;

1810 
	`wrôñ
(
ohci
->
hc_c⁄åﬁ
, &ohci->
ªgs
->
c⁄åﬁ
);

1813 
	`wrôñ
(
OHCI_HCR
, &
ohci
->
ªgs
->
cmd°©us
);

1814 (
	`ªadl
(&
ohci
->
ªgs
->
cmd°©us
Ë& 
OHCI_HCR
) != 0) {

1815 i‡(--
timeout
 == 0) {

1816 
	`îr
("USB HCÑesetÅimed out!");

1819 
	`udñay
(1);

1822 
	}
}

1830 
	$hc_°¨t
(
ohci_t
 *
ohci
)

1832 
__u32
 
mask
;

1833 
fmöãrvÆ
;

1835 
ohci
->
dißbÀd
 = 1;

1840 
	`wrôñ
(
	`OHCI_vút_to_bus
(0x0UL), &
ohci
->
ªgs
->
ed_c⁄åﬁhód
);

1841 
	`wrôñ
(
	`OHCI_vút_to_bus
(0x0UL), &
ohci
->
ªgs
->
ed_bulkhód
);

1843 
	`wrôñ
(
	`OHCI_vút_to_bus
(
ohci
->
hcˇ
), &ohci->
ªgs
->hcca);

1845 
fmöãrvÆ
 = 0x2edf;

1846 
	`wrôñ
((
fmöãrvÆ
 * 9Ë/ 10, &
ohci
->
ªgs
->
≥riodic°¨t
);

1847 
fmöãrvÆ
 |= ((((fminterval - 210) * 6) / 7) << 16);

1848 
	`wrôñ
(
fmöãrvÆ
, &
ohci
->
ªgs
->fminterval);

1849 
	`wrôñ
(0x628, &
ohci
->
ªgs
->
l°hªsh
);

1852 
ohci
->
hc_c⁄åﬁ
 = 
OHCI_CONTROL_INIT
 | 
OHCI_USB_OPER
;

1853 
ohci
->
dißbÀd
 = 0;

1854 
	`wrôñ
(
ohci
->
hc_c⁄åﬁ
, &ohci->
ªgs
->
c⁄åﬁ
);

1857 
mask
 = (
OHCI_INTR_SO
 | 
OHCI_INTR_WDH
 | 
OHCI_INTR_SF
 | 
OHCI_INTR_RD
 |

1858 
OHCI_INTR_UE
 | 
OHCI_INTR_FNO
 | 
OHCI_INTR_RHSC
 |

1859 
OHCI_INTR_OC
 | 
OHCI_INTR_MIE
);

1860 
	`wrôñ
(
mask
, &
ohci
->
ªgs
->
öådißbÀ
);

1862 
mask
 &~
OHCI_INTR_MIE
;

1863 
	`wrôñ
(
mask
, &
ohci
->
ªgs
->
öå°©us
);

1865 
mask
 = 
OHCI_INTR_RHSC
 | 
OHCI_INTR_UE
 | 
OHCI_INTR_WDH
 | 
OHCI_INTR_SO
;

1866 
	`wrôñ
(
mask
, &
ohci
->
ªgs
->
öåíabÀ
);

1868 #ifdef 
OHCI_USE_NPS


1870 
	`wrôñ
((
	`roŸhub_a
(
ohci
Ë| 
RH_A_NPS
Ë& ~
RH_A_PSM
,

1871 &
ohci
->
ªgs
->
roŸhub
.
a
);

1872 
	`wrôñ
(
RH_HS_LPSC
, &
ohci
->
ªgs
->
roŸhub
.
°©us
);

1876 
	`mdñay
((
	`roŸhub_a
(
ohci
) >> 23) & 0x1fe);

1879 
ohci
->
rh
.
devnum
 = 0;

1882 
	}
}

1887 
	$usb_evít_pﬁl
()

1889 
	`hc_öãºu±
();

1890 
	}
}

1894 
	$hc_öãºu±
()

1896 
ohci_t
 *
ohci
 = &
gohci
;

1897 
ohci_ªgs
 *
ªgs
 = 
ohci
->regs;

1898 
öts
;

1899 
°©
 = -1;

1901 i‡((
ohci
->
hcˇ
->
d⁄e_hód
 != 0) &&

1902 !(
	`m32_sw≠
(
ohci
->
hcˇ
->
d⁄e_hód
) & 0x01)) {

1904 
öts
 = 
OHCI_INTR_WDH
;

1906 
öts
 = 
	`ªadl
(&
ªgs
->
öå°©us
);

1908 i‡(
öts
 =~(
u32
)0) {

1910 
ohci
->
dißbÀd
++;

1911 
	`îr
("%†devi˚Ñemoved!", 
ohci
->
¶Ÿ_«me
);

1914 
öts
 &
	`ªadl
(&
ªgs
->
öåíabÀ
);

1915 i‡(
öts
 == 0) {

1917 
	`dbg
("hc_interrupt:Ñeturning..\n");

1926 i‡(
öts
 & 
OHCI_INTR_RHSC
){

1930 i‡(
öts
 & 
OHCI_INTR_UE
) {

1932 
ohci
->
dißbÀd
++;

1933 
	`îr
("OHCI Unrecoverable Error, controller usb-%s disabled",

1934 
ohci
->
¶Ÿ_«me
);

1937 #ifdef 
DEBUG


1938 
	`ohci_dump
(
ohci
, 1);

1940 
	`waô_ms
(1);

1946 
	`hc_ª£t
(
ohci
);

1950 i‡(
öts
 & 
OHCI_INTR_WDH
) {

1952 
	`waô_ms
(1);

1953 
	`wrôñ
(
OHCI_INTR_WDH
, &
ªgs
->
öådißbÀ
);

1954 ()
	`ªadl
(&
ªgs
->
öådißbÀ
);

1955 
°©
 = 
	`dl_d⁄e_li°
(&
gohci
);

1956 
	`wrôñ
(
OHCI_INTR_WDH
, &
ªgs
->
öåíabÀ
);

1957 ()
	`ªadl
(&
ªgs
->
öådißbÀ
);

1960 i‡(
öts
 & 
OHCI_INTR_SO
) {

1962 
	`dbg
("USB Schedule overrun\n");

1963 
	`wrôñ
(
OHCI_INTR_SO
, &
ªgs
->
öåíabÀ
);

1964 
°©
 = -1;

1968 i‡(
öts
 & 
OHCI_INTR_SF
) {

1970 
‰ame
 = 
	`m16_sw≠
(
ohci
->
hcˇ
->
‰ame_no
) & 1;

1971 
	`waô_ms
(1);

1972 
	`wrôñ
(
OHCI_INTR_SF
, &
ªgs
->
öådißbÀ
);

1973 i‡(
ohci
->
ed_rm_li°
[
‰ame
] !
NULL
)

1974 
	`wrôñ
(
OHCI_INTR_SF
, &
ªgs
->
öåíabÀ
);

1975 
°©
 = 0xff;

1978 
	`wrôñ
(
öts
, &
ªgs
->
öå°©us
);

1979  
°©
;

1980 
	}
}

1988 
	$hc_ªÀa£_ohci
(
ohci_t
 *
ohci
)

1990 
	`dbg
("USB HCÑñó£ ohcòusb-%s", 
ohci
->
¶Ÿ_«me
);

1992 i‡(!
ohci
->
dißbÀd
)

1993 
	`hc_ª£t
(
ohci
);

1994 
	}
}

1997 
	#USB0_HOST_MODE
 0x400

	)

1999 
	$π_usb_£t_ho°
()

2001 
u32
 
vÆ
 = 
	`RALINK_REG
(
RT2880_SYSCFG1_REG
);

2003 
vÆ
 |
USB0_HOST_MODE
;

2004 
	`RALINK_REG
(
RT2880_SYSCFG1_REG
Ë
vÆ
;

2005 
	}
}

2007 
	$π_usb_Àave_powî_ßvög
()

2009 
u32
 
vÆ
;

2011 
vÆ
 = 
	`RALINK_REG
(
RT2880_RSTCTRL_REG
);

2012 
vÆ
 = vÆ & ~(
RALINK_UHST_RST
 | 
RALINK_UDEV_RST
);

2013 
	`RALINK_REG
(
RT2880_RSTCTRL_REG
Ë
vÆ
;

2015 
vÆ
 = 
	`RALINK_REG
(
RT2880_CLKCFG1_REG
);

2016 #i‡
	`deföed
(
RT5350_ASIC_BOARD
)

2017 
vÆ
 = vÆ | (
RALINK_UPHY0_CLK_EN
) ;

2019 
vÆ
 = vÆ | 
RALINK_UPHY0_CLK_EN
 | 
RALINK_UPHY1_CLK_EN
 ;

2021 
	`RALINK_REG
(
RT2880_CLKCFG1_REG
Ë
vÆ
;

2022 
	}
}

2027 
	gohci_öôed
 = 0;

2029 
	$usb_lowÀvñ_öô
(
ödex
, 
usb_öô_ty≥
 
öô
, **
c⁄åﬁÀr
)

2031 #ifde‡
CONFIG_PCI_OHCI


2032 
pci_dev_t
 
pdev
;

2035 #ifde‡
CONFIG_SYS_USB_OHCI_CPU_INIT


2037 i‡(
	`usb_˝u_öô
())

2041 #ifde‡
CONFIG_SYS_USB_OHCI_BOARD_INIT


2043 i‡(
	`usb_bﬂrd_öô
())

2047 
	`π_usb_Àave_powî_ßvög
();

2048 
	`mdñay
(100);

2050 
	`π_usb_£t_ho°
();

2051 
	`mdñay
(100);

2053 
	`mem£t
(&
gohci
, 0, (
ohci_t
));

2056 i‡((
__u32
)&
ghcˇ
[0] & 0xff) {

2057 
	`îr
("HCCAÇotáligned!!");

2060 
phcˇ
 = &
ghcˇ
[0];

2061 
	`öfo
("Æig√d ghcˇ %p", 
phcˇ
);

2063 
ohci_dev_dma
 = (
ohci_devi˚
 *)
	`KSEG1ADDR
((
ul⁄g
)&
ohci_dev
);

2065 
	`mem£t
(
ohci_dev_dma
, 0, (
ohci_devi˚
));

2067 i‡((
__u32
)&
ohci_dev_dma
->
ed
[0] & 0x7) {

2068 
	`îr
("EDsÇotáligned!!");

2071 
	`mem£t
(
gtd
, 0, (
td_t
Ë* (
NUM_TD
 + 1));

2072 i‡((
__u32
)
gtd
 & 0x7) {

2073 
	`îr
("TDsÇotáligned!!");

2076 
±d_dma
 = (
td_t
 *)
	`KSEG1ADDR
((
ul⁄g
)
gtd
);

2077 
gohci
.
hcˇ
 = 
phcˇ
;

2078 
	`mem£t
(
phcˇ
, 0, (
ohci_hcˇ
));

2080 
gohci
.
dißbÀd
 = 1;

2081 
gohci
.
¶ìpög
 = 0;

2082 
gohci
.
úq
 = -1;

2083 #ifde‡
CONFIG_PCI_OHCI


2084 
pdev
 = 
	`pci_föd_devi˚s
(
ohci_pci_ids
, 
CONFIG_PCI_OHCI_DEVNO
);

2086 i‡(
pdev
 != -1) {

2087 
u16
 
vid
, 
did
;

2088 
u32
 
ba£
;

2089 
	`pci_ªad_c⁄fig_w‹d
(
pdev
, 
PCI_VENDOR_ID
, &
vid
);

2090 
	`pci_ªad_c⁄fig_w‹d
(
pdev
, 
PCI_DEVICE_ID
, &
did
);

2091 
	`¥ötf
("OHCIÖci controller (%04x, %04x) found @(%d:%d:%d)\n",

2092 
vid
, 
did
, (
pdev
 >> 16) & 0xff,

2093 (
pdev
 >> 11) & 0x1f, (pdev >> 8) & 0x7);

2094 
	`pci_ªad_c⁄fig_dw‹d
(
pdev
, 
PCI_BASE_ADDRESS_0
, &
ba£
);

2095 
	`¥ötf
("OHCIÑeg†addªs†0x%08x\n", 
ba£
);

2096 
gohci
.
ªgs
 = (
ohci_ªgs
 *)
ba£
;

2100 
gohci
.
ªgs
 = (
ohci_ªgs
 *)
CONFIG_SYS_USB_OHCI_REGS_BASE
;

2103 
gohci
.
Êags
 = 0;

2104 
gohci
.
¶Ÿ_«me
 = 
CONFIG_SYS_USB_OHCI_SLOT_NAME
;

2106 i‡(
	`hc_ª£t
 (&
gohci
) < 0) {

2107 
	`hc_ªÀa£_ohci
 (&
gohci
);

2108 
	`îr
 ("ˇn'àª£àusb-%s", 
gohci
.
¶Ÿ_«me
);

2109 #ifde‡
CONFIG_SYS_USB_OHCI_BOARD_INIT


2111 
	`usb_bﬂrd_öô_Áû
();

2114 #ifde‡
CONFIG_SYS_USB_OHCI_CPU_INIT


2116 
	`usb_˝u_öô_Áû
();

2121 i‡(
	`hc_°¨t
(&
gohci
) < 0) {

2122 
	`îr
("ˇn'à°¨àusb-%s", 
gohci
.
¶Ÿ_«me
);

2123 
	`hc_ªÀa£_ohci
(&
gohci
);

2125 #ifde‡
CONFIG_SYS_USB_OHCI_BOARD_INIT


2127 
	`usb_bﬂrd_°›
();

2130 #ifde‡
CONFIG_SYS_USB_OHCI_CPU_INIT


2132 
	`usb_˝u_°›
();

2137 #ifdef 
DEBUG


2138 
	`ohci_dump
(&
gohci
, 1);

2140 
	`waô_ms
(1);

2142 
ohci_öôed
 = 1;

2144 
	}
}

2146 
	$usb_lowÀvñ_°›
(
ödex
)

2150 i‡(!
ohci_öôed
)

2154 
	`hc_ª£t
(&
gohci
);

2156 #ifde‡
CONFIG_SYS_USB_OHCI_BOARD_INIT


2158 i‡(
	`usb_bﬂrd_°›
())

2162 #ifde‡
CONFIG_SYS_USB_OHCI_CPU_INIT


2164 i‡(
	`usb_˝u_°›
())

2169 
ohci_öôed
 = 0;

2171 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/ohci.h

11 
usb_bﬂrd_öô
();

12 
usb_bﬂrd_°›
();

13 
usb_bﬂrd_öô_Áû
();

15 
usb_˝u_öô
();

16 
usb_˝u_°›
();

17 
usb_˝u_öô_Áû
();

20 
	gcc_to_îr‹
[16] = {

24  
USB_ST_CRC_ERR
,

25  
USB_ST_BIT_ERR
,

26  
USB_ST_CRC_ERR
,

27  
USB_ST_STALLED
,

29  
USB_ST_BIT_ERR
,

30  
USB_ST_BIT_ERR
,

31  
USB_ST_BUF_ERR
,

32  
USB_ST_BUF_ERR
,

35  
USB_ST_BUF_ERR
,

36  
USB_ST_BUF_ERR
,

41 c⁄° *
	gcc_to_°rög
[16] = {

78 
	#ED_NEW
 0x00

	)

79 
	#ED_UNLINK
 0x01

	)

80 
	#ED_OPER
 0x02

	)

81 
	#ED_DEL
 0x04

	)

82 
	#ED_URB_DEL
 0x08

	)

85 
	sed
 {

86 
__u32
 
	mhwINFO
;

87 
__u32
 
	mhwTaûP_DMA
;

88 
__u32
 
	mhwHódP_DMA
;

89 
__u32
 
	mhwNextED_DMA
;

90 
__u32
 
	mTaûP
;

91 
__u32
 
	mHódP
;

92 
__u32
 
	mNextED
;

94 
ed
 *
	med_¥ev
;

95 
__u8
 
	möt_≥riod
;

96 
__u8
 
	möt_bønch
;

97 
__u8
 
	möt_lﬂd
;

98 
__u8
 
	möt_öãrvÆ
;

99 
__u8
 
	m°©e
;

100 
__u8
 
	mty≥
;

101 
__u16
 
	mœ°_iso
;

102 
ed
 *
	med_rm_li°
;

104 
usb_devi˚
 *
	musb_dev
;

105 *
	mpurb
;

106 
__u32
 
	munu£d
[2];

107 } 
__©åibuã__
((
Æig√d
(16)));

108 
ed
 
	ted_t
;

112 
	#TD_CC
 0xf0000000

	)

113 
	#TD_CC_GET
(
td_p
Ë(—d_∞>>28Ë& 0x0f)

	)

114 
	#TD_CC_SET
(
td_p
, 
cc
Ë—d_pË(—d_pË& 0x0fffffffË| (((ccË& 0x0fË<< 28)

	)

115 
	#TD_EC
 0x0C000000

	)

116 
	#TD_T
 0x03000000

	)

117 
	#TD_T_DATA0
 0x02000000

	)

118 
	#TD_T_DATA1
 0x03000000

	)

119 
	#TD_T_TOGGLE
 0x00000000

	)

120 
	#TD_R
 0x00040000

	)

121 
	#TD_DI
 0x00E00000

	)

122 
	#TD_DI_SET
(
X
Ë(((XË& 0x07)<< 21)

	)

123 
	#TD_DP
 0x00180000

	)

124 
	#TD_DP_SETUP
 0x00000000

	)

125 
	#TD_DP_IN
 0x00100000

	)

126 
	#TD_DP_OUT
 0x00080000

	)

128 
	#TD_ISO
 0x00010000

	)

129 
	#TD_DEL
 0x00020000

	)

132 
	#TD_CC_NOERROR
 0x00

	)

133 
	#TD_CC_CRC
 0x01

	)

134 
	#TD_CC_BITSTUFFING
 0x02

	)

135 
	#TD_CC_DATATOGGLEM
 0x03

	)

136 
	#TD_CC_STALL
 0x04

	)

137 
	#TD_DEVNOTRESP
 0x05

	)

138 
	#TD_PIDCHECKFAIL
 0x06

	)

139 
	#TD_UNEXPECTEDPID
 0x07

	)

140 
	#TD_DATAOVERRUN
 0x08

	)

141 
	#TD_DATAUNDERRUN
 0x09

	)

142 
	#TD_BUFFEROVERRUN
 0x0C

	)

143 
	#TD_BUFFERUNDERRUN
 0x0D

	)

144 
	#TD_NOTACCESSED
 0x0F

	)

147 
	#MAXPSW
 1

	)

149 
	std
 {

150 
__u32
 
	mhwINFO
;

151 
__u32
 
	mhwCBP_DMA
;

152 
__u32
 
	mhwNextTD_DMA
;

153 
__u32
 
	mhwBE_DMA
;

154 
__u32
 
	mCBP
;

155 
__u32
 
	mNextTD
;

156 
__u32
 
	mBE
;

159 
__u16
 
	mhwPSW
[
MAXPSW
];

161 
__u8
 
	munu£d
;

162 
__u8
 
	mödex
;

163 
ed
 *
	med
;

164 
td
 *
	m√xt_dl_td
;

165 
usb_devi˚
 *
	musb_dev
;

166 
	må™s„r_Àn
;

167 
__u32
 
	md©a
;

168 *
	md©a_c›y
;

169 *
	md©a_c›y_dma
;

171 
__u32
 
	munu£d2
[2];

172 } 
__©åibuã__
((
Æig√d
(32)));

173 
td
 
	ttd_t
;

175 
	#OHCI_ED_SKIP
 (1 << 14)

	)

183 
	#NUM_INTS
 32

	)

184 
	sohci_hcˇ
 {

185 
__u32
 
	möt_èbÀ
[
NUM_INTS
];

186 #i‡
deföed
(
CONFIG_MPC5200
)

187 
__u16
 
	m∑d1
;

188 
__u16
 
	m‰ame_no
;

190 
__u16
 
	m‰ame_no
;

191 
__u16
 
	m∑d1
;

193 
__u32
 
	md⁄e_hód
;

194 
u8
 
	mª£rved_f‹_hc
[116];

195 } 
__©åibuã__
((
Æig√d
(256)));

201 #i‚de‡
CONFIG_SYS_USB_OHCI_MAX_ROOT_PORTS


210 
	sohci_ªgs
 {

212 
__u32
 
	mªvisi⁄
;

213 
__u32
 
	mc⁄åﬁ
;

214 
__u32
 
	mcmd°©us
;

215 
__u32
 
	möå°©us
;

216 
__u32
 
	möåíabÀ
;

217 
__u32
 
	möådißbÀ
;

219 
__u32
 
	mhcˇ
;

220 
__u32
 
	med_≥riodcuºít
;

221 
__u32
 
	med_c⁄åﬁhód
;

222 
__u32
 
	med_c⁄åﬁcuºít
;

223 
__u32
 
	med_bulkhód
;

224 
__u32
 
	med_bulkcuºít
;

225 
__u32
 
	md⁄ehód
;

227 
__u32
 
	mfmöãrvÆ
;

228 
__u32
 
	mfmªmaöög
;

229 
__u32
 
	mfmnumbî
;

230 
__u32
 
	m≥riodic°¨t
;

231 
__u32
 
	ml°hªsh
;

233 
	sohci_roŸhub_ªgs
 {

234 
__u32
 
	ma
;

235 
__u32
 
	mb
;

236 
__u32
 
	m°©us
;

237 
__u32
 
	mp‹t°©us
[
CONFIG_SYS_USB_OHCI_MAX_ROOT_PORTS
];

238 } 
	mroŸhub
;

239 } 
__©åibuã__
((
Æig√d
(32)));

242 
	#EHCI_USBCMD_OFF
 0x20

	)

243 
	#EHCI_USBCMD_HCRESET
 (1 << 1)

	)

250 
	#OHCI_CTRL_CBSR
 (3 << 0Ë

	)

251 
	#OHCI_CTRL_PLE
 (1 << 2Ë

	)

252 
	#OHCI_CTRL_IE
 (1 << 3Ë

	)

253 
	#OHCI_CTRL_CLE
 (1 << 4Ë

	)

254 
	#OHCI_CTRL_BLE
 (1 << 5Ë

	)

255 
	#OHCI_CTRL_HCFS
 (3 << 6Ë

	)

256 
	#OHCI_CTRL_IR
 (1 << 8Ë

	)

257 
	#OHCI_CTRL_RWC
 (1 << 9Ë

	)

258 
	#OHCI_CTRL_RWE
 (1 << 10Ë

	)

261 
	#OHCI_USB_RESET
 (0 << 6)

	)

262 
	#OHCI_USB_RESUME
 (1 << 6)

	)

263 
	#OHCI_USB_OPER
 (2 << 6)

	)

264 
	#OHCI_USB_SUSPEND
 (3 << 6)

	)

269 
	#OHCI_HCR
 (1 << 0Ë

	)

270 
	#OHCI_CLF
 (1 << 1Ë

	)

271 
	#OHCI_BLF
 (1 << 2Ë

	)

272 
	#OHCI_OCR
 (1 << 3Ë

	)

273 
	#OHCI_SOC
 (3 << 16Ë

	)

281 
	#OHCI_INTR_SO
 (1 << 0Ë

	)

282 
	#OHCI_INTR_WDH
 (1 << 1Ë

	)

283 
	#OHCI_INTR_SF
 (1 << 2Ë

	)

284 
	#OHCI_INTR_RD
 (1 << 3Ë

	)

285 
	#OHCI_INTR_UE
 (1 << 4Ë

	)

286 
	#OHCI_INTR_FNO
 (1 << 5Ë

	)

287 
	#OHCI_INTR_RHSC
 (1 << 6Ë

	)

288 
	#OHCI_INTR_OC
 (1 << 30Ë

	)

289 
	#OHCI_INTR_MIE
 (1 << 31Ë

	)

293 
	svút_roŸ_hub
 {

294 
	mdevnum
;

295 *
	mdev
;

296 *
	möt_addr
;

297 
	m£nd
;

298 
	möãrvÆ
;

304 
	#RH_INTERFACE
 0x01

	)

305 
	#RH_ENDPOINT
 0x02

	)

306 
	#RH_OTHER
 0x03

	)

308 
	#RH_CLASS
 0x20

	)

309 
	#RH_VENDOR
 0x40

	)

312 
	#RH_GET_STATUS
 0x0080

	)

313 
	#RH_CLEAR_FEATURE
 0x0100

	)

314 
	#RH_SET_FEATURE
 0x0300

	)

315 
	#RH_SET_ADDRESS
 0x0500

	)

316 
	#RH_GET_DESCRIPTOR
 0x0680

	)

317 
	#RH_SET_DESCRIPTOR
 0x0700

	)

318 
	#RH_GET_CONFIGURATION
 0x0880

	)

319 
	#RH_SET_CONFIGURATION
 0x0900

	)

320 
	#RH_GET_STATE
 0x0280

	)

321 
	#RH_GET_INTERFACE
 0x0A80

	)

322 
	#RH_SET_INTERFACE
 0x0B00

	)

323 
	#RH_SYNC_FRAME
 0x0C80

	)

325 
	#RH_SET_EP
 0x2000

	)

329 
	#RH_PORT_CONNECTION
 0x00

	)

330 
	#RH_PORT_ENABLE
 0x01

	)

331 
	#RH_PORT_SUSPEND
 0x02

	)

332 
	#RH_PORT_OVER_CURRENT
 0x03

	)

333 
	#RH_PORT_RESET
 0x04

	)

334 
	#RH_PORT_POWER
 0x08

	)

335 
	#RH_PORT_LOW_SPEED
 0x09

	)

337 
	#RH_C_PORT_CONNECTION
 0x10

	)

338 
	#RH_C_PORT_ENABLE
 0x11

	)

339 
	#RH_C_PORT_SUSPEND
 0x12

	)

340 
	#RH_C_PORT_OVER_CURRENT
 0x13

	)

341 
	#RH_C_PORT_RESET
 0x14

	)

344 
	#RH_C_HUB_LOCAL_POWER
 0x00

	)

345 
	#RH_C_HUB_OVER_CURRENT
 0x01

	)

347 
	#RH_DEVICE_REMOTE_WAKEUP
 0x00

	)

348 
	#RH_ENDPOINT_STALL
 0x01

	)

350 
	#RH_ACK
 0x01

	)

351 
	#RH_REQ_ERR
 -1

	)

352 
	#RH_NACK
 0x00

	)

358 
	#RH_PS_CCS
 0x00000001

	)

359 
	#RH_PS_PES
 0x00000002

	)

360 
	#RH_PS_PSS
 0x00000004

	)

361 
	#RH_PS_POCI
 0x00000008

	)

362 
	#RH_PS_PRS
 0x00000010

	)

363 
	#RH_PS_PPS
 0x00000100

	)

364 
	#RH_PS_LSDA
 0x00000200

	)

365 
	#RH_PS_CSC
 0x00010000

	)

366 
	#RH_PS_PESC
 0x00020000

	)

367 
	#RH_PS_PSSC
 0x00040000

	)

368 
	#RH_PS_OCIC
 0x00080000

	)

369 
	#RH_PS_PRSC
 0x00100000

	)

372 
	#RH_HS_LPS
 0x00000001

	)

373 
	#RH_HS_OCI
 0x00000002

	)

374 
	#RH_HS_DRWE
 0x00008000

	)

375 
	#RH_HS_LPSC
 0x00010000

	)

376 
	#RH_HS_OCIC
 0x00020000

	)

377 
	#RH_HS_CRWE
 0x80000000

	)

380 
	#RH_B_DR
 0x0000fff‡

	)

381 
	#RH_B_PPCM
 0xffff0000

	)

384 
	#RH_A_NDP
 (0xf‡<< 0Ë

	)

385 
	#RH_A_PSM
 (1 << 8Ë

	)

386 
	#RH_A_NPS
 (1 << 9Ë

	)

387 
	#RH_A_DT
 (1 << 10Ë

	)

388 
	#RH_A_OCPM
 (1 << 11Ë

	)

389 
	#RH_A_NOCP
 (1 << 12Ë

	)

390 
	#RH_A_POTPGT
 (0xf‡<< 24Ë

	)

393 
	#N_URB_TD
 48

	)

396 
ed_t
 *
	med
;

397 
__u16
 
	mÀngth
;

398 
__u16
 
	mtd_˙t
;

399 
usb_devi˚
 *
	mdev
;

400 
	m°©e
;

401 
	mpùe
;

402 *
	må™s„r_buf„r
;

403 
	må™s„r_buf„r_Àngth
;

404 
	möãrvÆ
;

405 
	ma˘uÆ_Àngth
;

406 
	mföished
;

407 
td_t
 *
	mtd
[
N_URB_TD
];

408 } 
	turb_¥iv_t
;

409 
	#URB_DEL
 1

	)

419 
	sohci
 {

420 
ohci_hcˇ
 *
	mhcˇ
;

423 
	múq
;

424 
	mdißbÀd
;

425 
	m¶ìpög
;

426 
	mÊags
;

428 
ohci_ªgs
 *
	mªgs
;

430 
	mohci_öt_lﬂd
[32];

431 
ed_t
 *
	med_rm_li°
[2];

432 
ed_t
 *
	med_bulkèû
;

433 
ed_t
 *
	med_c⁄åﬁèû
;

434 
	möå°©us
;

435 
__u32
 
	mhc_c⁄åﬁ
;

436 
usb_devi˚
 *
	mdev
[32];

437 
vút_roŸ_hub
 
	mrh
;

439 c⁄° *
	m¶Ÿ_«me
;

440 } 
	tohci_t
;

442 
	#NUM_EDS
 8

	)

444 
	sohci_devi˚
 {

445 
ed_t
 
	med
[
NUM_EDS
];

446 
	med_˙t
;

451 
ï_lök
(
ohci_t
 * 
ohci
, 
ed_t
 * 
ed
);

452 
ï_u∆ök
(
ohci_t
 * 
ohci
, 
ed_t
 * 
ed
);

453 
ed_t
 * 
ï_add_ed
(
usb_devi˚
 * 
usb_dev
, 
pùe
,

454 
öãrvÆ
, 
lﬂd
);

459 
	#NUM_TD
 64

	)

462 
td_t
 
	ggtd
[
NUM_TD
+1];

464 
td_t
 *
	g±d_dma
;

467 
ölöe
 
td
 *

468 
	$td_Æloc
 (
usb_devi˚
 *
usb_dev
)

470 
i
;

471 
td
 *td;

473 
td
 = 
NULL
;

474 
i
 = 0; i < 
NUM_TD
; i++)

476 i‡(
±d_dma
[
i
].
usb_dev
 =
NULL
)

478 
td
 = &
±d_dma
[
i
];

479 
td
->
usb_dev
 = usb_dev;

484  
td
;

485 
	}
}

487 
ölöe
 

488 
	$ed_‰ì
 (
ed
 *ed)

490 
ed
->
usb_dev
 = 
NULL
;

491 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/phy_val.c

1 
	~"phy_vÆ.h
"

3 
	~<comm⁄.h
>

4 
	~<comm™d.h
>

6 
mii_mgr_ªad
(
u32
 
phy_addr
, u32 
phy_ªgi°î
, u32 *
ªad_d©a
);

7 
mii_mgr_wrôe
(
u32
 
phy_addr
, u32 
phy_ªgi°î
, u32 
wrôe_d©a
);

10 
	mlch_sig_dëe˘
;

11 
	mlch_rx_lökpul£
;

12 
	mlch_lökup_100
;

13 
	mlch_lökup_10
;

14 
	mlch_lökup_mdi
;

15 
	mlch_lökup_mdix
;

16 
	mlch_des¸_lock
;

17 
	mmdix_°©us
;

18 
	mtx_amp_ßve
;

19 
	mföÆ_du∂ex
;

20 
	mföÆ_•ìd
;

21 
	mföÆ_lök
;

22 } 
	tt˝hy_l0r28_ªg_t
;

25 
	mÕ_ìe_10g
;

26 
	mÕ_ìe_1000
;

27 
	mÕ_ìe_100
;

28 } 
	tt˝hy_l3r18_ªg_t
;

30 
t˝hy_l0r28_ªg_t
 
	gmr28
;

31 
t˝hy_l3r18_ªg_t
 
	gmæ3_18
;

35 
	$tcPhyRódReg
(
p‹t_num
, 
ªg_num
)

37 
vÆ
, 
vÆ_r31
;

38 
phyAddr
 = 
p‹t_num
;

40 i‡(
ªg_num
<16 ||Ñeg_num==31){

41 
	`mii_mgr_ªad
(
phyAddr
, 
ªg_num
, &
vÆ
);

44 
	`mii_mgr_ªad
(
phyAddr
, 31, &
vÆ_r31
);

46 i‡(
vÆ_r31
 != 0x8000) {

47 
	`mii_mgr_wrôe
(
phyAddr
, 31, 0x8000);

50 
	`mii_mgr_ªad
(
phyAddr
, 
ªg_num
, &
vÆ
);

52 i‡(
vÆ_r31
 != 0x8000) {

53 
	`mii_mgr_wrôe
(
phyAddr
, 31, 
vÆ_r31
);

57  (
vÆ
);

58 
	}
}

62 
	$tcPhyRódLReg
(
p‹t_num
,
∑ge_num
,
ªg_num
){

63 
vÆ
, 
vÆ_r31
;

64 
phyAddr
 = 
p‹t_num
;

65 
∑geAddr
 = (
∑ge_num
<<12)+0x8000;

67 
	`mii_mgr_ªad
(
phyAddr
, 31, &
vÆ_r31
);

69 i‡(
vÆ_r31
 !
∑geAddr
) {

70 
	`mii_mgr_wrôe
(
phyAddr
, 31, 
∑geAddr
);

72 
	`mii_mgr_ªad
(
phyAddr
, 
ªg_num
, &
vÆ
);

74 i‡(
vÆ_r31
 !
∑geAddr
) {

75 
	`mii_mgr_wrôe
(
phyAddr
, 31, 
vÆ_r31
);

77 i‡(
∑ge_num
==3) {

78 
ªg_num
){

80 
mæ3_18
.
Õ_ìe_10g
 = (
vÆ
>>3)&0x0001;

81 
mæ3_18
.
Õ_ìe_1000
 = (
vÆ
>>2)&0x0001;

82 
mæ3_18
.
Õ_ìe_100
 = (
vÆ
>>1)&0x0001;

88  
vÆ
;

89 
	}
}

93 
	$tcPhyWrôeLReg
(
p‹t_num
,
∑ge_num
,
ªg_num
,
ªg_d©a
){

94 
vÆ_r31
;

95 
phyAddr
 = 
p‹t_num
;

96 
∑geAddr
 = (
∑ge_num
<<12)+0x8000;

98 
	`mii_mgr_ªad
(
phyAddr
, 31, &
vÆ_r31
);

100 i‡(
vÆ_r31
 !
∑geAddr
) {

101 
	`mii_mgr_wrôe
(
phyAddr
, 31, 
∑geAddr
);

103 
	`mii_mgr_wrôe
(
phyAddr
, 
ªg_num
, 
ªg_d©a
);

105 i‡(
vÆ_r31
 !
∑geAddr
) {

106 
	`mii_mgr_wrôe
(
phyAddr
, 31, 
vÆ_r31
);

108 
	}
}

112 
	$tcPhyRódGReg
(
p‹t_num
,
∑ge_num
,
ªg_num
){

113 
vÆ
, 
vÆ_r31
;

114 
phyAddr
 = 
p‹t_num
;

115 
∑geAddr
 = (
∑ge_num
<<12);

117 
	`mii_mgr_ªad
(
phyAddr
, 31, &
vÆ_r31
);

119 i‡(
vÆ_r31
 !
∑geAddr
) {

120 
	`mii_mgr_wrôe
(
phyAddr
, 31, 
∑geAddr
);

122 
	`mii_mgr_ªad
(
phyAddr
, 
ªg_num
, &
vÆ
);

124 i‡(
vÆ_r31
 !
∑geAddr
) {

125 
	`mii_mgr_wrôe
(
phyAddr
, 31, 
vÆ_r31
);

128  
vÆ
;

129 
	}
}

133 
	$tcPhyWrôeGReg
(
p‹t_num
,
∑ge_num
,
ªg_num
,
ªg_d©a
){

134 
vÆ_r31
;

135 
phyAddr
 = 
p‹t_num
;

136 
∑geAddr
 = (
∑ge_num
<<12);

138 
	`mii_mgr_ªad
(
phyAddr
, 31, &
vÆ_r31
);

140 i‡(
vÆ_r31
 !
∑geAddr
) {

141 
	`mii_mgr_wrôe
(
phyAddr
, 31, 
∑geAddr
);

143 
	`mii_mgr_wrôe
(
phyAddr
, 
ªg_num
, 
ªg_d©a
);

145 i‡(
vÆ_r31
 !
∑geAddr
) {

146 
	`mii_mgr_wrôe
(
phyAddr
, 31, 
vÆ_r31
);

148 
	}
}

151 
	$tc2105mlRódEºOvîSum
(
p‹t_num
)

153 
îr_ovî_sum
,
îr_ovî_˙t1
,
îr_ovî_˙t2
;

155 
îr_ovî_˙t1
 = (
	`tcPhyRódReg
(
p‹t_num
,25) & 0x0000007ff);

156 
	`udñay
(300000);

157 
îr_ovî_˙t2
 = (
	`tcPhyRódReg
(
p‹t_num
,25) & 0x0000007ff);

158 
îr_ovî_sum
 = 
îr_ovî_˙t2
 - 
îr_ovî_˙t1
;

159 if–
îr_ovî_sum
 < 0 ){

160 
îr_ovî_sum
 += 2048;

163  
îr_ovî_sum
;

164 
	}
}

167 
	$tc2105mlRódSƒSum
(
p‹t_num
, 
˙t
)

169 
¢r_sum
 = 0;

170 
j
;

172 
j
=0;j<
˙t
;j++) {

173 
¢r_sum
 +
	`tc2105mlRódProbe
(
p‹t_num
,
ProbeSƒ
);

175  
¢r_sum
;

177 
	}
}

180 
	$tc2105mlRódAdcSum
(
p‹t_num
)

182 
˙t
=1000;

183 
AdcSign_sum
 = 0;

184 
j
;

185 
vÆ_g3r20
, 
vÆ_g3r20_√wvÆ
, 
vÆ_l0r30
, 
vÆ_l1r22
;

187 
vÆ_g3r20
=
	`tcPhyRódGReg
(
p‹t_num
,3,20);

188 
vÆ_g3r20_√wvÆ
 = (
vÆ_g3r20
) & 0x7fff;

189 
	`tcPhyWrôeGReg
(
p‹t_num
,3,20,
vÆ_g3r20_√wvÆ
);

191 
vÆ_l0r30
=
	`tcPhyRódLReg
(
p‹t_num
,0,30);

192 
	`tcPhyWrôeLReg
(
p‹t_num
,0,30,0x1510);

194 
vÆ_l1r22
=
	`tcPhyRódLReg
(
p‹t_num
,1,22);

195 
	`tcPhyWrôeLReg
(
p‹t_num
,1,22,0x000c);

197 
j
=0;j<
˙t
;j++){

198 
AdcSign_sum
 +
	`tc2105mlRódProbe
(
p‹t_num
,
ProbeAdcSign
);

201 
AdcSign_sum
 = (AdcSign_sum>>6);

203 
	`tcPhyWrôeGReg
(
p‹t_num
,3,20,
vÆ_g3r20
);

204 
	`tcPhyWrôeLReg
(
p‹t_num
,0,30,
vÆ_l0r30
);

205 
	`tcPhyWrôeLReg
(
p‹t_num
,1,22,
vÆ_l1r22
);

207  
AdcSign_sum
;

208 
	}
}

211 
	$tc2105mlRódProbe
(
p‹t_num
, 
mode
)

213 
vÆ
, 
vÆ_r31
, 
vÆ_g0r28
;

214 
rvÆ
, 
wvÆ
;

215 
phyaddr
 = 
p‹t_num
;

217 
	`mii_mgr_ªad
(
phyaddr
, 31, &
vÆ_r31
);

218 
	`mii_mgr_wrôe
–
phyaddr
, 31, 0x0000 );

219 
	`mii_mgr_ªad
(
phyaddr
, 28, &
vÆ_g0r28
);

222 
mode
){

223 
ProbeZfgaö
:

224 
wvÆ
 = 0x0b04 + 
p‹t_num
;

225 
	`mii_mgr_wrôe
–
phyaddr
, 28, 
wvÆ
 );

226 
	`mii_mgr_ªad
(
phyaddr
, 27, &
vÆ
);

227 
rvÆ
 = (
vÆ
)&0x3f ;

229 
ProbeAgccode
:

230 
wvÆ
 = 0x2e04 + 
p‹t_num
;

231 
	`mii_mgr_wrôe
–
phyaddr
, 28, 
wvÆ
 );

232 
	`mii_mgr_ªad
(
phyaddr
, 27, &
vÆ
);

233 
rvÆ
 = (
vÆ
>>1)&0x1f ;

235 
ProbeBoo°í
:

236 
wvÆ
 = 0x2e04 + 
p‹t_num
;

237 
	`mii_mgr_wrôe
–
phyaddr
, 28, 
wvÆ
 );

238 
	`mii_mgr_ªad
(
phyaddr
, 27, &
vÆ
);

239 
rvÆ
 = (
vÆ
>>6)&0x01 ;

242 
ProbeSƒ
:

243 
wvÆ
 = 0x0904 + 
p‹t_num
;

244 
	`mii_mgr_wrôe
–
phyaddr
, 28, 
wvÆ
 );

245 
	`mii_mgr_ªad
(
phyaddr
, 27, &
vÆ
);

246 
rvÆ
 = (
vÆ
)&0xff ;

248 
ProbeAdcSign
:

249 
wvÆ
 = 0x4104 + 
p‹t_num
;

250 
	`mii_mgr_wrôe
–
phyaddr
, 28, 
wvÆ
 );

251 
	`mii_mgr_ªad
(
phyaddr
, 27, &
vÆ
);

252 
rvÆ
 = (
vÆ
)&0x7f ;

253 i‡(
rvÆ
>64){

254 
rvÆ
 -= 128;

258 
	`¥ötf
("\r\¡˝hyÉº‹: RódProbê%d.\r\n",
mode
);

259 
rvÆ
 = 0;

263 
	`mii_mgr_wrôe
–
phyaddr
, 31, 0x0000 );

264 
	`mii_mgr_wrôe
–
phyaddr
, 28, 
vÆ_g0r28
);

265 
	`mii_mgr_wrôe
–
phyaddr
, 31, 
vÆ_r31
);

266  
rvÆ
;

268 
	}
}

271 
	$tc2105mlDi•Probe100
(
p‹t_num
)

274 c⁄° 
tc2105mlRódSƒC¡
 = 1000;

276 
	`¥ötf
("t˝hy[%d]:",
p‹t_num
);

277 
	`¥ötf
(" boo°í=%ld", 
	`tc2105mlRódProbe
(
p‹t_num
,
ProbeBoo°í
));

278 
	`¥ötf
("ágccode=%ld", 
	`tc2105mlRódProbe
(
p‹t_num
,
ProbeAgccode
));

279 
	`¥ötf
(" zfgaö=%ld", 
	`tc2105mlRódProbe
(
p‹t_num
,
ProbeZfgaö
));

280 
	`¥ötf
(" ch_idx=%ld", (
	`tcPhyRódReg
(
p‹t_num
,29)&0x003f));

281 
	`¥ötf
(" sƒ=%ld", 
	`tc2105mlRódProbe
(
p‹t_num
,
ProbeSƒ
));

283 
	`¥ötf
("Éº_ovî_sum=%ld", 
	`tc2105mlRódEºOvîSum
(
p‹t_num
));

285 
	`¥ötf
(" sƒ_sum(x1000)=%d",
	`tc2105mlRódSƒSum
(
p‹t_num
,
tc2105mlRódSƒC¡
));

286 
	`¥ötf
("ádc_avg=%ld/1000", 
	`tc2105mlRódAdcSum
(
p‹t_num
));

287 
	`¥ötf
(" \r\n");

289 
	}
}

291 
	$phy_chk
(
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

293 
vÆ
;

294 
mr02
,
mr03
;

295 
mr_™í
, 
mr_d∂x
, 
mr_•ìd
;

296 
mr_™_ˇ∑bÀ
;

297 
mr_Õ_™_ˇ∑bÀ
;

298 
mr_Õ_™í
;

300 
Ã_lökup
, 
Ã_•ìd
, 
Ã_d∂x
, 
Ã_mdix
;

301 
p‹t_num
;

303 i‡(
¨gc
 < 2) {

304 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

308 
p‹t_num

	`sim∂e_°πﬁ
(
¨gv
[1], 
NULL
, 10);

309 
	`¥ötf
("p‹t_num = %d\n", 
p‹t_num
);

312 
vÆ
 = 
	`tcPhyRódReg
(
p‹t_num
, 2);

313 
mr02
 = 
vÆ
&(0xffff);

314 
vÆ
 = 
	`tcPhyRódReg
(
p‹t_num
, 3);

315 
mr03
 = 
vÆ
&(0xffff);

316 
	`¥ötf
(" TcPhy ID: %lx %lx\r\n",
mr02
,
mr03
);

318 i‡(
mr02
 != 0x03a2)

322 
vÆ
 = 
	`tcPhyRódReg
(
p‹t_num
, 0);

323 
mr_™í
 = (
vÆ
>>12)&0x01;

324 
mr_d∂x
 = (
vÆ
>>8)&0x01;

325 
mr_•ìd
 = (
vÆ
>>13)&0x01;

327 
vÆ
 = 
	`tcPhyRódReg
(
p‹t_num
, 4);

328 
mr_™_ˇ∑bÀ
 = (
vÆ
>>5)&0x0F;

330 
vÆ
 = 
	`tcPhyRódReg
(
p‹t_num
, 5);

331 
mr_Õ_™_ˇ∑bÀ
 = (
vÆ
>>5)&0x0F;

333 
vÆ
 = 
	`tcPhyRódReg
(
p‹t_num
, 6);

334 
mr_Õ_™í
 = (
vÆ
)&0x01;

336 
vÆ
 = 
	`tcPhyRódReg
(
p‹t_num
, 28);

337 
Ã_lökup
 = (
vÆ
)&0x01;

338 
Ã_•ìd
 = (
vÆ
>>1)&0x01;

339 
Ã_d∂x
 = (
vÆ
>>2)&0x01;

340 
Ã_mdix
 = (
vÆ
>>5)&0x01;

342 
mr28
.
lch_sig_dëe˘
 = (
vÆ
>>15)&0x0001;

343 
mr28
.
lch_rx_lökpul£
(
vÆ
>>14)&0x0001;

344 
mr28
.
lch_lökup_100
 = (
vÆ
>>13)&0x0001;

345 
mr28
.
lch_lökup_10
 = (
vÆ
>>12)&0x0001;

346 
mr28
.
lch_lökup_mdi
 = (
vÆ
>>11)&0x0001;

347 
mr28
.
lch_lökup_mdix
 = (
vÆ
>>10)&0x0001;

348 
mr28
.
lch_des¸_lock
 = (
vÆ
>>9)&0x0001;

349 
mr28
.
mdix_°©us
 = (
vÆ
>>5)&0x0001;

350 
mr28
.
tx_amp_ßve
 = (
vÆ
>>3)&0x0003;

351 
mr28
.
föÆ_du∂ex
 = (
vÆ
>>2)&0x0001;

352 
mr28
.
föÆ_•ìd
 = (
vÆ
>>1)&0x0001;

353 
mr28
.
föÆ_lök
 = (
vÆ
)&0x0001;

355 
	`¥ötf
(" TcPhy mode:");

356 if(
mr_™í
) {

357 
	`¥ötf
(" AN-(");

358 
	`¥ötf
(" %s,",((
mr_™_ˇ∑bÀ
>>3)&0x01)?"100F":"");

359 
	`¥ötf
(" %s,",((
mr_™_ˇ∑bÀ
>>2)&0x01)?"100H":"");

360 
	`¥ötf
(" %s,",((
mr_™_ˇ∑bÀ
>>1)&0x01)?"10F":"");

361 
	`¥ötf
(" %s)\r\n",((
mr_™_ˇ∑bÀ
>>0)&0x01)?"10H":"");

364 
	`¥ötf
(" Force-%d%s\r\n",

365 (
mr_•ìd
?100:10),(
mr_d∂x
?"F":"H"));

368 if(!
Ã_lökup
) {

369 
	`¥ötf
(" *** Link is down!\r\n");

370 
	`¥ötf
("Åcphy[%ld]:ádc_avg=%ld/1000\r\n",

371 
p‹t_num
, 
	`tc2105mlRódAdcSum
(port_num));

375 i‡(
mr28
.
lch_sig_dëe˘
 || mr28.
lch_rx_lökpul£


376 || 
mr28
.
lch_lökup_100
 || mr28.
lch_lökup_10
)

378 
	`¥ötf
("Å˝hy[%ld]: ",
p‹t_num
);

379 i‡(
mr28
.
lch_sig_dëe˘
)

380 
	`¥ötf
("SigDet ");

381 i‡(
mr28
.
lch_rx_lökpul£
)

382 
	`¥ötf
("RxLkp ");

383 i‡(
mr28
.
lch_lökup_100
)

384 
	`¥ötf
("Up100 ");

385 i‡(
mr28
.
lch_lökup_10
)

386 
	`¥ötf
("Up10 ");

387 i‡(
mr28
.
lch_lökup_mdi
)

388 
	`¥ötf
("UpMdi ");

389 i‡(
mr28
.
lch_lökup_mdix
)

390 
	`¥ötf
("UpMdix ");

391 
	`¥ötf
("\r\n");

395 
	`¥ötf
(" TCphy isÜink-upát %d%s.\r\n",

396 (
Ã_•ìd
?100:10),(
Ã_d∂x
?"F":"H"));

398 if(
mr_Õ_™í
) {

399 
	`¥ötf
(" Link-partner supports AN-(");

400 
	`¥ötf
(" %s,",((
mr_Õ_™_ˇ∑bÀ
>>3)&0x01)?"100F":"");

401 
	`¥ötf
(" %s,",((
mr_Õ_™_ˇ∑bÀ
>>2)&0x01)?"100H":"");

402 
	`¥ötf
(" %s,",((
mr_Õ_™_ˇ∑bÀ
>>1)&0x01)?"10F":"");

403 
	`¥ötf
(" %s)\r\n",((
mr_Õ_™_ˇ∑bÀ
>>0)&0x01)?"10H":"");

406 
	`¥ötf
(" Link-partner operates in Force mode.\r\n");

409 
	`¥ötf
(" %s,",(
Ã_mdix
?"mdix":"mdi"));

410 
	`¥ötf
("Åx_amp_ßve=%d\r\n",(
mr28
.
tx_amp_ßve
));

411 
	`¥ötf
("\r\n");

413 if(
Ã_•ìd
) {

414 
	`tc2105mlDi•Probe100
(
p‹t_num
);

416 
	`¥ötf
("\r\n");

421 
	}
}

424 
U_BOOT_CMD
(

425 
phyvÆ
, 2, 1, 
phy_chk
,

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/phy_val.h

1 #i‚de‡
USB_PHY_VAL_H


2 
	#USB_PHY_VAL_H


	)

4 
	s_Õ0r28


6 
	mföÆ_lök
:1;

7 
	mföÆ_•ìd
:1;

8 
	mföÆ_du∂ex
:1;

9 
	mtx_amp_ßve
:2;

10 
	mmdix_°©us
:1;

11 
	mmr_aut⁄eg_com∂ëe
:1;

12 
	mª£rved
:1;

13 
	mpﬁ¨ôy_√g_pcs
:1;

14 
	mlch_des¸_lock
:1;

15 
	mlch_lökup_mdix
:1;

16 
	mlch_lökup_mdi
:1;

17 
	mlch_lökup_10
:1;

18 
	mlch_lökup_100
:1;

19 
	mlch_rx_lökpul£
:1;

20 
	mlch_sig_dëe˘
:1;

23 
	#ProbeZfgaö
 0

	)

24 
	#ProbeAgccode
 1

	)

25 
	#ProbeBoo°í
 2

	)

26 
	#ProbeSƒ
 3

	)

27 
	#ProbeDcoff
 4

	)

28 
	#ProbeAdcoff
 5

	)

29 
	#ProbeAdcSign
 6

	)

31 
tcPhyRódReg
(
p‹t_num
,
ªg_num
);

32 
tcPhyRódLReg
(
p‹t_num
,
∑ge_num
,
ªg_num
);

33 
tcPhyWrôeLReg
(
p‹t_num
,
∑ge_num
,
ªg_num
,
ªg_d©a
);

34 
tcPhyRódGReg
(
p‹t_num
,
∑ge_num
,
ªg_num
);

35 
tcPhyWrôeGReg
(
p‹t_num
,
∑ge_num
,
ªg_num
,
ªg_d©a
);

36 
tc2105mlRódAdcSum
(
p‹t_num
);

37 
tc2105mlRódProbe
(
p‹t_num
, 
mode
);

38 
tc2105mlDi•Probe100
(
p‹t_num
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/ralink_nand.h

1 #i‚de‡
__RALINK_NAND_H__


2 
	#__RALINK_NAND_H__


	)

4 
	~<löux/mtd/«nd.h
>

5 
	~<π_mm≠.h
>

7 
	#CONFIG_NOT_SUPPORT_WP


9 
	#CONFIG_BADBLOCK_CHECK


	)

11 
is_«nd_∑ge_2048
;

12 
«nd_addæí
;

13 c⁄° 
«nd_size_m≠
[2][3];

15 
	#CONFIG_CHIP_SIZE_BIT
 (
«nd_size_m≠
[
is_«nd_∑ge_2048
][
«nd_addæí
-3])

16 
	#CONFIG_PAGE_SIZE_BIT
 (
is_«nd_∑ge_2048
? 11 : 9)

17 
	#CONFIG_NUMPAGE_PER_BLOCK_BIT
 (
is_«nd_∑ge_2048
? 6 : 5)

18 
	#CONFIG_OOBSIZE_PER_PAGE_BIT
 (
is_«nd_∑ge_2048
? 6 : 4)

19 
	#CONFIG_BAD_BLOCK_POS
 (
is_«nd_∑ge_2048
? 0 : 4)

20 
	#CONFIG_ECC_BYTES
 3

21 
	#CONFIG_ECC_OFFSET
 (
is_«nd_∑ge_2048
? 6 : 5)

22 

	)

23 
	#CFG_COLUMN_ADDR_CYCLE
 (
is_«nd_∑ge_2048
? 2 : 1)

	)

24 
	#CFG_ROW_ADDR_CYCLE
 (
«nd_addæí
 - 
CFG_COLUMN_ADDR_CYCLE
)

	)

25 
	#CFG_ADDR_CYCLE
 (
CFG_COLUMN_ADDR_CYCLE
 + 
CFG_ROW_ADDR_CYCLE
)

	)

27 
	#CFG_CHIPSIZE
 (1 << ((
CONFIG_CHIP_SIZE_BIT
>=32)? 31 : CONFIG_CHIP_SIZE_BIT))

	)

28 
	#CFG_PAGESIZE
 (1 << 
CONFIG_PAGE_SIZE_BIT
)

	)

29 
	#CFG_BLOCKSIZE
 (
CFG_PAGESIZE
 << 
CONFIG_NUMPAGE_PER_BLOCK_BIT
)

	)

30 
	#CFG_NUMPAGE
 (1 << (
CONFIG_CHIP_SIZE_BIT
 - 
CONFIG_PAGE_SIZE_BIT
))

	)

31 
	#CFG_NUMBLOCK
 (
CFG_NUMPAGE
 >> 
CONFIG_NUMPAGE_PER_BLOCK_BIT
)

	)

32 
	#CFG_BLOCK_OOBSIZE
 (1 << (
CONFIG_OOBSIZE_PER_PAGE_BIT
 + 
CONFIG_NUMPAGE_PER_BLOCK_BIT
))

	)

33 
	#CFG_PAGE_OOBSIZE
 (1 << 
CONFIG_OOBSIZE_PER_PAGE_BIT
)

	)

35 
	#NAND_BLOCK_ALIGN
(
addr
Ë(◊ddrË& (
CFG_BLOCKSIZE
-1))

	)

36 
	#NAND_PAGE_ALIGN
(
addr
Ë(◊ddrË& (
CFG_PAGESIZE
-1))

	)

39 
	#NFC_BASE
 
RALINK_NAND_CTRL_BASE


	)

40 
	#NFC_CTRL
 (
NFC_BASE
 + 0x0)

	)

41 
	#NFC_CONF
 (
NFC_BASE
 + 0x4)

	)

42 
	#NFC_CMD1
 (
NFC_BASE
 + 0x8)

	)

43 
	#NFC_CMD2
 (
NFC_BASE
 + 0xc)

	)

44 
	#NFC_CMD3
 (
NFC_BASE
 + 0x10)

	)

45 
	#NFC_ADDR
 (
NFC_BASE
 + 0x14)

	)

46 
	#NFC_DATA
 (
NFC_BASE
 + 0x18)

	)

47 #i‡
deföed
 (
RT6855_FPGA_BOARD
Ë|| deföed (
RT6855_ASIC_BOARD
) || \

48 
deföed
 (
RT6855A_FPGA_BOARD
Ë|| deföed (
RT6855A_ASIC_BOARD
) || \

49 
deföed
 (
MT7620_FPGA_BOARD
Ë|| 
	$deföed
 (
MT7620_ASIC_BOARD
)

50 
	#NFC_ECC
 (
NFC_BASE
 + 0x30)

	)

52 
	#NFC_ECC
 (
NFC_BASE
 + 0x1c)

	)

54 
	#NFC_STATUS
 (
NFC_BASE
 + 0x20)

	)

55 
	#NFC_INT_EN
 (
NFC_BASE
 + 0x24)

	)

56 
	#NFC_INT_ST
 (
NFC_BASE
 + 0x28)

	)

57 #i‡
	`deföed
 (
RT6855_FPGA_BOARD
Ë|| deföed (
RT6855_ASIC_BOARD
) || \

58 
	`deföed
 (
RT6855A_FPGA_BOARD
Ë|| deföed (
RT6855A_ASIC_BOARD
) || \

59 
	`deföed
 (
MT7620_FPGA_BOARD
Ë|| 
	$deföed
 (
MT7620_ASIC_BOARD
)

60 
	#NFC_CONF1
 (
NFC_BASE
 + 0x2c)

	)

61 
	#NFC_ECC_P1
 (
NFC_BASE
 + 0x30)

	)

62 
	#NFC_ECC_P2
 (
NFC_BASE
 + 0x34)

	)

63 
	#NFC_ECC_P3
 (
NFC_BASE
 + 0x38)

	)

64 
	#NFC_ECC_P4
 (
NFC_BASE
 + 0x3c)

	)

65 
	#NFC_ECC_ERR1
 (
NFC_BASE
 + 0x40)

	)

66 
	#NFC_ECC_ERR2
 (
NFC_BASE
 + 0x44)

	)

67 
	#NFC_ECC_ERR3
 (
NFC_BASE
 + 0x48)

	)

68 
	#NFC_ECC_ERR4
 (
NFC_BASE
 + 0x4c)

	)

69 
	#NFC_ADDR2
 (
NFC_BASE
 + 0x50)

	)

72 
	e_öt_°©
 {

73 
INT_ST_ND_DONE
 = 1<<0,

74 
INT_ST_TX_BUF_RDY
 = 1<<1,

75 
INT_ST_RX_BUF_RDY
 = 1<<2,

76 
INT_ST_ECC_ERR
 = 1<<3,

77 
INT_ST_TX_TRAS_ERR
 = 1<<4,

78 
INT_ST_RX_TRAS_ERR
 = 1<<5,

79 
INT_ST_TX_KICK_ERR
 = 1<<6,

80 
INT_ST_RX_KICK_ERR
 = 1<<7

88 
	#NAND_CMD_READ0
 0

	)

89 
	#NAND_CMD_READ1
 1

	)

90 
	#NAND_CMD_RNDOUT
 5

	)

91 
	#NAND_CMD_PAGEPROG
 0x10

	)

92 
	#NAND_CMD_READOOB
 0x50

	)

93 
	#NAND_CMD_ERASE1
 0x60

	)

94 
	#NAND_CMD_STATUS
 0x70

	)

95 
	#NAND_CMD_STATUS_MULTI
 0x71

	)

96 
	#NAND_CMD_SEQIN
 0x80

	)

97 
	#NAND_CMD_RNDIN
 0x85

	)

98 
	#NAND_CMD_READID
 0x90

	)

99 
	#NAND_CMD_ERASE2
 0xd0

	)

100 
	#NAND_CMD_RESET
 0xff

	)

103 
	#NAND_CMD_READSTART
 0x30

	)

104 
	#NAND_CMD_RNDOUTSTART
 0xE0

	)

105 
	#NAND_CMD_CACHEDPROG
 0x15

	)

114 
	#NAND_CMD_DEPLETE1
 0x100

	)

115 
	#NAND_CMD_DEPLETE2
 0x38

	)

116 
	#NAND_CMD_STATUS_MULTI
 0x71

	)

117 
	#NAND_CMD_STATUS_ERROR
 0x72

	)

119 
	#NAND_CMD_STATUS_ERROR0
 0x73

	)

120 
	#NAND_CMD_STATUS_ERROR1
 0x74

	)

121 
	#NAND_CMD_STATUS_ERROR2
 0x75

	)

122 
	#NAND_CMD_STATUS_ERROR3
 0x76

	)

123 
	#NAND_CMD_STATUS_RESET
 0x7f

	)

124 
	#NAND_CMD_STATUS_CLEAR
 0xff

	)

126 
	#NAND_CMD_NONE
 -1

	)

129 
	#NAND_STATUS_FAIL
 0x01

	)

130 
	#NAND_STATUS_FAIL_N1
 0x02

	)

131 
	#NAND_STATUS_TRUE_READY
 0x20

	)

132 
	#NAND_STATUS_READY
 0x40

	)

133 
	#NAND_STATUS_WP
 0x80

	)

137 
	e_ø_Êags
 {

138 
FLAG_NONE
 = 0,

139 
FLAG_ECC_EN
 = (1<<0),

140 
FLAG_USE_GDMA
 = (1<<1),

141 
FLAG_VERIFY
 = (1<<2),

142 } 
	tRA_FLAGS
;

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/ralink_spi.h

1 
	~<π_mm≠.h
>

3 #i‡
deföed
 (
RT2880_FPGA_BOARD
Ë|| deföed (
RT2880_ASIC_BOARD
)

4 
	#RSTCTRL_SPI_RESET
 (1<<11)

	)

6 
	#RSTCTRL_SPI_RESET
 (1<<18)

	)

9 #i‡
deföed
(
RALINK_VITESSE_SWITCH_CONNECT_SPI_CS1
)

10 
	#RT2880_SPI_CS1_OFFSET
 0x40

	)

12 
	#RT2880_SPI_CS1_OFFSET
 0

	)

15 
	#RT2880_SPI_REG_BASE
 (
RALINK_SYSCTL_BASE
 + 0x0B00)

	)

16 
	#RT2880_SPISTAT_REG
 (
RT2880_SPI_REG_BASE
+ 
RT2880_SPI_CS1_OFFSET
+ 0x00)

	)

17 
	#RT2880_SPICFG_REG
 (
RT2880_SPI_REG_BASE
+ 
RT2880_SPI_CS1_OFFSET
+ 0x10)

	)

18 
	#RT2880_SPICTL_REG
 (
RT2880_SPI_REG_BASE
+ 
RT2880_SPI_CS1_OFFSET
+ 0x14)

	)

19 
	#RT2880_SPIDATA_REG
 (
RT2880_SPI_REG_BASE
+ 
RT2880_SPI_CS1_OFFSET
+ 0x20)

	)

21 
	#RT2880_SPIUSER_REG
 (
RT2880_SPI_REG_BASE
+0x2C)

	)

22 
	#RT2880_SPIADDR_REG
 (
RT2880_SPI_REG_BASE
+0x24)

	)

23 
	#RT2880_SPIMODE_REG
 (
RT2880_SPI_REG_BASE
+0x3c)

	)

24 
	#RT2880_SPIBS_REG
 (
RT2880_SPI_REG_BASE
+0x28)

	)

25 
	#RT2880_SPITXFIFO_REG
 (
RT2880_SPI_REG_BASE
+0x30)

	)

26 
	#RT2880_SPIRXFIFO_REG
 (
RT2880_SPI_REG_BASE
+0x34)

	)

27 
	#RT2880_SPIFIFOSTAT_REG
 (
RT2880_SPI_REG_BASE
+0x38)

	)

29 
	#RT2880_SPI0_STAT_REG
 (
RT2880_SPI_REG_BASE
+ 0x00)

	)

30 
	#RT2880_SPI0_CFG_REG
 (
RT2880_SPI_REG_BASE
+ 0x10)

	)

31 
	#RT2880_SPI0_CTL_REG
 (
RT2880_SPI_REG_BASE
+ 0x14)

	)

32 
	#RT2880_SPI0_DATA_REG
 (
RT2880_SPI_REG_BASE
+ 0x20)

	)

34 
	#RT2880_SPI1_STAT_REG
 (
RT2880_SPI_REG_BASE
+ 0x40)

	)

35 
	#RT2880_SPI1_CFG_REG
 (
RT2880_SPI_REG_BASE
+ 0x50)

	)

36 
	#RT2880_SPI1_CTL_REG
 (
RT2880_SPI_REG_BASE
+ 0x54)

	)

37 
	#RT2880_SPI1_DATA_REG
 (
RT2880_SPI_REG_BASE
+ 0x60)

	)

39 
	#RT2880_SPI_DMA
 (
RT2880_SPI_REG_BASE
+ 0x80)

	)

40 
	#RT2880_SPI_ARB_REG
 (
RT2880_SPI_REG_BASE
+ 0xf0)

	)

43 
	#SPICFG_LSBFIRST
 (0<<8)

	)

44 
	#SPICFG_MSBFIRST
 (1<<8)

	)

46 
	#SPICFG_RXCLKEDGE_FALLING
 (1<<5Ë

	)

47 
	#SPICFG_TXCLKEDGE_FALLING
 (1<<4Ë

	)

49 
	#SPICFG_SPICLK_DIV2
 (0<<0Ë

	)

50 
	#SPICFG_SPICLK_DIV4
 (1<<0Ë

	)

51 
	#SPICFG_SPICLK_DIV8
 (2<<0Ë

	)

52 
	#SPICFG_SPICLK_DIV16
 (3<<0Ë

	)

53 
	#SPICFG_SPICLK_DIV32
 (4<<0Ë

	)

54 
	#SPICFG_SPICLK_DIV64
 (5<<0Ë

	)

55 
	#SPICFG_SPICLK_DIV128
 (6<<0Ë

	)

57 
	#SPICFG_SPICLKPOL
 (1<<6Ë

	)

59 
	#SPICFG_ADDRMODE
 (1 << 12)

	)

60 
	#SPICFG_RXENVDIS
 (1<<11)

	)

61 
	#SPICFG_RXCAP
 (1<<10)

	)

62 
	#SPICFG_SPIENMODE
 (1<<9)

	)

65 
	#SPICTL_HIZSDO
 (1<<3)

	)

66 
	#SPICTL_STARTWR
 (1<<2)

	)

67 
	#SPICTL_STARTRD
 (1<<1)

	)

68 
	#SPICTL_SPIENA_LOW
 (0<<0Ë

	)

69 
	#SPICTL_SPIENA_HIGH
 (1<<0)

	)

72 
	#SPICTL_START
 (1<<4)

	)

73 
	#SPIFIFO_TX_FULL
 (1 << 17)

	)

74 
	#SPIFIFO_RX_EMPTY
 (1 << 18)

	)

75 
	#SPIINT_SPIDONE
 (1<<0)

	)

76 
	#SPIINT_ILLSPI
 (1<<1)

	)

77 
	#SPIINT_RX_EMPTY_RD
 (1<<2)

	)

78 
	#SPIINT_TX_FULL_WR
 (1<<3)

	)

79 
	#SPIINT_DMA_EMPTY_RD
 (1<<4)

	)

80 
	#SPIINT_DMA_FULL_WR
 (1<<5)

	)

82 
	#SPIUSR_SINGLE
 0x1

	)

83 
	#SPIUSR_DUAL
 0x2

	)

84 
	#SPIUSR_QUAD
 0x4

	)

85 
	#SPIUSR_NO_DATA
 0x0

	)

86 
	#SPIUSR_READ_DATA
 0x1

	)

87 
	#SPIUSR_WRITE_DATA
 0x2

	)

88 
	#SPIUSR_NO_DUMMY
 0x0

	)

89 
	#SPIUSR_ONE_DUMMY
 0x1

	)

90 
	#SPIUSR_TWO_DUMMY
 0x2

	)

91 
	#SPIUSR_THREE_DUMMY
 0x3

	)

92 
	#SPIUSR_NO_MODE
 0x0

	)

93 
	#SPIUSR_ONE_MODE
 0x1

	)

94 
	#SPIUSR_NO_ADDR
 0x0

	)

95 
	#SPIUSR_ONE_BYTE_ADDR
 0x1

	)

96 
	#SPIUSR_TWO_BYTE_ADDR
 0x2

	)

97 
	#SPIUSR_THREE_BYTE_ADDR
 0x3

	)

98 
	#SPIUSR_FOUR_BYTE_ADDR
 0x4

	)

99 
	#SPIUSR_NO_INSTRU
 0x0

	)

100 
	#SPIUSR_ONE_INSTRU
 0x1

	)

103 
	#SPIARB_ARB_EN
 (1<<31)

	)

105 #ifde‡
RALINK_SPI_CS0_HIGH_ACTIVE


106 
	#SPIARB_SPI0_ACTIVE_MODE
 1

	)

108 
	#SPIARB_SPI0_ACTIVE_MODE
 0

	)

111 #ifde‡
RALINK_SPI_CS1_HIGH_ACTIVE


112 
	#SPIARB_SPI1_ACTIVE_MODE
 1

	)

114 
	#SPIARB_SPI1_ACTIVE_MODE
 0

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/rt2880_eth.c

1 
	~<comm⁄.h
>

2 
	~<comm™d.h
>

4 #i‡
deföed
 (
CONFIG_COMMANDS
Ë&& deföed(
CONFIG_RT2880_ETH
)

6 
	~<mÆloc.h
>

7 
	~<√t.h
>

8 
	~<asm/addr•a˚.h
>

9 
	~<π_mm≠.h
>

11 #unde‡
DEBUG


12 
	#BIT
(
x
Ë((1 << x))

	)

16 
	#GDM_UFRC_P_CPU
 ((
u32
)(~(0x7 << 12)))

	)

17 
	#GDM_UFRC_P_GDMA1
 (1 << 12)

	)

18 
	#GDM_UFRC_P_GDMA2
 (2 << 12)

	)

19 
	#GDM_UFRC_P_DROP
 (7 << 12)

	)

21 
	#GDM_BFRC_P_CPU
 ((
u32
)(~(0x7 << 8)))

	)

22 
	#GDM_BFRC_P_GDMA1
 (1 << 8)

	)

23 
	#GDM_BFRC_P_GDMA2
 (2 << 8)

	)

24 
	#GDM_BFRC_P_PPE
 (6 << 8)

	)

25 
	#GDM_BFRC_P_DROP
 (7 << 8)

	)

27 
	#GDM_MFRC_P_CPU
 ((
u32
)(~(0x7 << 4)))

	)

28 
	#GDM_MFRC_P_GDMA1
 (1 << 4)

	)

29 
	#GDM_MFRC_P_GDMA2
 (2 << 4)

	)

30 
	#GDM_MFRC_P_PPE
 (6 << 4)

	)

31 
	#GDM_MFRC_P_DROP
 (7 << 4)

	)

33 
	#GDM_OFRC_P_CPU
 ((
u32
)(~(0x7)))

	)

34 
	#GDM_OFRC_P_GDMA1
 1

	)

35 
	#GDM_OFRC_P_GDMA2
 2

	)

36 
	#GDM_OFRC_P_PPE
 6

	)

37 
	#GDM_OFRC_P_DROP
 7

	)

39 
	#RST_DRX_IDX0
 
	`BIT
(16)

	)

40 
	#RST_DTX_IDX0
 
	`BIT
(0)

	)

42 
	#TX_WB_DDONE
 
	`BIT
(6)

	)

43 
	#RX_DMA_BUSY
 
	`BIT
(3)

	)

44 
	#TX_DMA_BUSY
 
	`BIT
(1)

	)

45 
	#RX_DMA_EN
 
	`BIT
(2)

	)

46 
	#TX_DMA_EN
 
	`BIT
(0)

	)

48 
	#GP1_FRC_EN
 
	`BIT
(15)

	)

49 
	#GP1_FC_TX
 
	`BIT
(11)

	)

50 
	#GP1_FC_RX
 
	`BIT
(10)

	)

51 
	#GP1_LNK_DWN
 
	`BIT
(9)

	)

52 
	#GP1_AN_OK
 
	`BIT
(8)

	)

57 
	#CNT_PPE_AF
 
	`BIT
(31)

	)

58 
	#CNT_GDM1_AF
 
	`BIT
(29)

	)

59 
	#PSE_P1_FC
 
	`BIT
(22)

	)

60 
	#PSE_P0_FC
 
	`BIT
(21)

	)

61 
	#PSE_FQ_EMPTY
 
	`BIT
(20)

	)

62 
	#GE1_STA_CHG
 
	`BIT
(18)

	)

63 
	#TX_COHERENT
 
	`BIT
(17)

	)

64 
	#RX_COHERENT
 
	`BIT
(16)

	)

66 
	#TX_DONE_INT1
 
	`BIT
(9)

	)

67 
	#TX_DONE_INT0
 
	`BIT
(8)

	)

68 
	#RX_DONE_INT0
 
	`BIT
(2)

	)

69 
	#TX_DLY_INT
 
	`BIT
(1)

	)

70 
	#RX_DLY_INT
 
	`BIT
(0)

	)

75 #i‡
deföed
 (
RT5350_ASIC_BOARD
Ë|| deföed (
RT5350_FPGA_BOARD
Ë|| deföed (
MT7628_ASIC_BOARD
Ë|| deföed (
MT7628_FPGA_BOARD
)

77 
	#PDMA_RELATED
 0x0800

	)

79 
	#TX_BASE_PTR0
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x000)

	)

80 
	#TX_MAX_CNT0
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x004)

	)

81 
	#TX_CTX_IDX0
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x008)

	)

82 
	#TX_DTX_IDX0
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x00C)

	)

84 
	#TX_BASE_PTR1
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x010)

	)

85 
	#TX_MAX_CNT1
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x014)

	)

86 
	#TX_CTX_IDX1
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x018)

	)

87 
	#TX_DTX_IDX1
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x01C)

	)

89 
	#TX_BASE_PTR2
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x020)

	)

90 
	#TX_MAX_CNT2
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x024)

	)

91 
	#TX_CTX_IDX2
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x028)

	)

92 
	#TX_DTX_IDX2
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x02C)

	)

94 
	#TX_BASE_PTR3
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x030)

	)

95 
	#TX_MAX_CNT3
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x034)

	)

96 
	#TX_CTX_IDX3
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x038)

	)

97 
	#TX_DTX_IDX3
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x03C)

	)

99 
	#RX_BASE_PTR0
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x100)

	)

100 
	#RX_MAX_CNT0
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x104)

	)

101 
	#RX_CALC_IDX0
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x108)

	)

102 
	#RX_DRX_IDX0
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x10C)

	)

104 
	#RX_BASE_PTR1
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x110)

	)

105 
	#RX_MAX_CNT1
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x114)

	)

106 
	#RX_CALC_IDX1
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x118)

	)

107 
	#RX_DRX_IDX1
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x11C)

	)

109 
	#PDMA_INFO
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x200)

	)

110 
	#PDMA_GLO_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x204)

	)

111 
	#PDMA_RST_IDX
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x208)

	)

112 
	#PDMA_RST_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RST_IDX
)

	)

113 
	#DLY_INT_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x20C)

	)

114 
	#FREEQ_THRES
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x210)

	)

115 
	#INT_STATUS
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x220)

	)

116 
	#FE_INT_STATUS
 (
INT_STATUS
)

	)

117 
	#INT_MASK
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x228)

	)

118 
	#FE_INT_ENABLE
 (
INT_MASK
)

	)

119 
	#PDMA_WRR
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x280)

	)

120 
	#PDMA_SCH_CFG
 (
PDMA_WRR
)

	)

122 
	#SDM_RELATED
 0x0C00

	)

123 
	#SDM_CON
 (
RALINK_FRAME_ENGINE_BASE
 + 
SDM_RELATED
+0x00)

124 
	#SDM_RRING
 (
RALINK_FRAME_ENGINE_BASE
 + 
SDM_RELATED
+0x04)

125 
	#SDM_TRING
 (
RALINK_FRAME_ENGINE_BASE
 + 
SDM_RELATED
+0x08)

126 
	#SDM_MAC_ADRL
 (
RALINK_FRAME_ENGINE_BASE
 + 
SDM_RELATED
+0x0C)

127 
	#SDM_MAC_ADRH
 (
RALINK_FRAME_ENGINE_BASE
 + 
SDM_RELATED
+0x10)

128 
	#SDM_TPCNT
 (
RALINK_FRAME_ENGINE_BASE
 + 
SDM_RELATED
+0x100)

129 
	#SDM_TBCNT
 (
RALINK_FRAME_ENGINE_BASE
 + 
SDM_RELATED
+0x104)

130 
	#SDM_RPCNT
 (
RALINK_FRAME_ENGINE_BASE
 + 
SDM_RELATED
+0x108)

131 
	#SDM_RBCNT
 (
RALINK_FRAME_ENGINE_BASE
 + 
SDM_RELATED
+0x10C)

132 
	#SDM_CS_ERR
 (
RALINK_FRAME_ENGINE_BASE
 + 
SDM_RELATED
+0x110)

133 

	)

134 #ñi‡
deföed
 (
RT6855_ASIC_BOARD
Ë|| deföed (
RT6855_FPGA_BOARD
) || \

135 
deföed
 (
RT6855A_FPGA_BOARD
Ë|| deföed (
RT6855A_ASIC_BOARD
) || \

136 
deföed
 (
MT7620_ASIC_BOARD
Ë|| deföed (
MT7620_FPGA_BOARD
) || \

137 
deföed
 (
MT7621_ASIC_BOARD
Ë|| 
	$deföed
 (
MT7621_FPGA_BOARD
)

139 
	#PDMA_RELATED
 0x0800

	)

141 
	#TX_BASE_PTR0
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x000)

	)

142 
	#TX_MAX_CNT0
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x004)

	)

143 
	#TX_CTX_IDX0
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x008)

	)

144 
	#TX_DTX_IDX0
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x00C)

	)

146 
	#TX_BASE_PTR1
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x010)

	)

147 
	#TX_MAX_CNT1
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x014)

	)

148 
	#TX_CTX_IDX1
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x018)

	)

149 
	#TX_DTX_IDX1
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x01C)

	)

151 
	#TX_BASE_PTR2
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x020)

	)

152 
	#TX_MAX_CNT2
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x024)

	)

153 
	#TX_CTX_IDX2
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x028)

	)

154 
	#TX_DTX_IDX2
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x02C)

	)

156 
	#TX_BASE_PTR3
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x030)

	)

157 
	#TX_MAX_CNT3
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x034)

	)

158 
	#TX_CTX_IDX3
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x038)

	)

159 
	#TX_DTX_IDX3
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x03C)

	)

161 
	#RX_BASE_PTR0
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x100)

	)

162 
	#RX_MAX_CNT0
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x104)

	)

163 
	#RX_CALC_IDX0
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x108)

	)

164 
	#RX_DRX_IDX0
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x10C)

	)

166 
	#RX_BASE_PTR1
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x110)

	)

167 
	#RX_MAX_CNT1
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x114)

	)

168 
	#RX_CALC_IDX1
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x118)

	)

169 
	#RX_DRX_IDX1
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x11C)

	)

171 
	#PDMA_INFO
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x200)

	)

172 
	#PDMA_GLO_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x204)

	)

173 
	#PDMA_RST_IDX
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x208)

	)

174 
	#PDMA_RST_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RST_IDX
)

	)

175 
	#DLY_INT_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x20C)

	)

176 
	#FREEQ_THRES
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x210)

	)

177 
	#INT_STATUS
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x220Ë

	)

178 
	#INT_MASK
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x228Ë

	)

179 
	#PDMA_WRR
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
+0x280)

	)

180 
	#PDMA_SCH_CFG
 (
PDMA_WRR
)

	)

184 
	#MDIO_ACCESS
 
RALINK_FRAME_ENGINE_BASE
 + 0x00

	)

185 
	#MDIO_CFG
 
RALINK_FRAME_ENGINE_BASE
 + 0x04

	)

186 
	#FE_DMA_GLO_CFG
 
RALINK_FRAME_ENGINE_BASE
 + 0x08

	)

187 
	#FE_RST_GLO
 
RALINK_FRAME_ENGINE_BASE
 + 0x0C

	)

188 
	#FE_INT_STATUS
 
RALINK_FRAME_ENGINE_BASE
 + 0x10

	)

189 
	#FE_INT_ENABLE
 
RALINK_FRAME_ENGINE_BASE
 + 0x14

	)

190 
	#FC_DROP_STA
 
RALINK_FRAME_ENGINE_BASE
 + 0x18

	)

191 
	#FOE_TS_T
 
RALINK_FRAME_ENGINE_BASE
 + 0x1C

	)

193 #i‡
	`deföed
 (
MT7620_ASIC_BOARD
Ë|| deföed (
MT7620_FPGA_BOARD
)

194 
	#GDMA1_RELATED
 0x0600

	)

195 
	#GDMA1_FWD_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
GDMA1_RELATED
 + 0x00)

	)

196 
	#GDMA1_SHRP_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
GDMA1_RELATED
 + 0x04)

	)

197 
	#GDMA1_MAC_ADRL
 (
RALINK_FRAME_ENGINE_BASE
 + 
GDMA1_RELATED
 + 0x08)

	)

198 
	#GDMA1_MAC_ADRH
 (
RALINK_FRAME_ENGINE_BASE
 + 
GDMA1_RELATED
 + 0x0C)

	)

199 #ñi‡
	`deföed
 (
MT7621_ASIC_BOARD
Ë|| deföed (
MT7621_FPGA_BOARD
)

201 
	#PAD_RGMII2_MDIO_CFG
 
RALINK_SYSCTL_BASE
 + 0x58

	)

203 
	#GDMA1_RELATED
 0x0500

	)

204 
	#GDMA1_FWD_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
GDMA1_RELATED
 + 0x00)

	)

205 
	#GDMA1_SHRP_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
GDMA1_RELATED
 + 0x04)

	)

206 
	#GDMA1_MAC_ADRL
 (
RALINK_FRAME_ENGINE_BASE
 + 
GDMA1_RELATED
 + 0x08)

	)

207 
	#GDMA1_MAC_ADRH
 (
RALINK_FRAME_ENGINE_BASE
 + 
GDMA1_RELATED
 + 0x0C)

	)

208 
	#GDMA2_RELATED
 0x1500

	)

209 
	#GDMA2_FWD_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
GDMA2_RELATED
 + 0x00)

	)

210 
	#GDMA2_SHRP_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
GDMA2_RELATED
 + 0x04)

	)

211 
	#GDMA2_MAC_ADRL
 (
RALINK_FRAME_ENGINE_BASE
 + 
GDMA2_RELATED
 + 0x08)

	)

212 
	#GDMA2_MAC_ADRH
 (
RALINK_FRAME_ENGINE_BASE
 + 
GDMA2_RELATED
 + 0x0C)

	)

215 
	#GDMA1_RELATED
 0x0020

	)

216 
	#GDMA1_FWD_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
GDMA1_RELATED
 + 0x00)

	)

217 
	#GDMA1_SCH_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
GDMA1_RELATED
 + 0x04)

	)

218 
	#GDMA1_SHRP_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
GDMA1_RELATED
 + 0x08)

	)

219 
	#GDMA1_MAC_ADRL
 (
RALINK_FRAME_ENGINE_BASE
 + 
GDMA1_RELATED
 + 0x0C)

	)

220 
	#GDMA1_MAC_ADRH
 (
RALINK_FRAME_ENGINE_BASE
 + 
GDMA1_RELATED
 + 0x10)

	)

223 
	#PSE_RELATED
 0x0040

	)

224 
	#PSE_FQFC_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
PSE_RELATED
 + 0x00)

	)

225 
	#CDMA_FC_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
PSE_RELATED
 + 0x04)

	)

226 
	#GDMA1_FC_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
PSE_RELATED
 + 0x08)

	)

227 
	#GDMA2_FC_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
PSE_RELATED
 + 0x0C)

	)

228 
	#CDMA_OQ_STA
 (
RALINK_FRAME_ENGINE_BASE
 + 
PSE_RELATED
 + 0x10)

	)

229 
	#GDMA1_OQ_STA
 (
RALINK_FRAME_ENGINE_BASE
 + 
PSE_RELATED
 + 0x14)

	)

230 
	#GDMA2_OQ_STA
 (
RALINK_FRAME_ENGINE_BASE
 + 
PSE_RELATED
 + 0x18)

	)

231 
	#PSE_IQ_STA
 (
RALINK_FRAME_ENGINE_BASE
 + 
PSE_RELATED
 + 0x1C)

	)

233 
	#CDMA_RELATED
 0x0080

	)

234 
	#CDMA_CSG_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
CDMA_RELATED
 + 0x00)

	)

235 
	#CDMA_SCH_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
CDMA_RELATED
 + 0x04)

	)

239 
	#MDIO_ACCESS
 
RALINK_FRAME_ENGINE_BASE
 + 0x00

	)

240 #ifde‡
RT3883_USE_GE2


241 
	#MDIO_CFG
 
RALINK_FRAME_ENGINE_BASE
 + 0x18

	)

243 
	#MDIO_CFG
 
RALINK_FRAME_ENGINE_BASE
 + 0x04

	)

245 
	#FE_DMA_GLO_CFG
 
RALINK_FRAME_ENGINE_BASE
 + 0x08

	)

246 
	#FE_RST_GLO
 
RALINK_FRAME_ENGINE_BASE
 + 0x0C

	)

247 
	#FE_INT_STATUS
 
RALINK_FRAME_ENGINE_BASE
 + 0x10

	)

248 
	#FE_INT_ENABLE
 
RALINK_FRAME_ENGINE_BASE
 + 0x14

	)

249 
	#FC_DROP_STA
 
RALINK_FRAME_ENGINE_BASE
 + 0x18

	)

250 
	#FOE_TS_T
 
RALINK_FRAME_ENGINE_BASE
 + 0x1C

	)

252 
	#GDMA1_RELATED
 0x0020

	)

253 
	#GDMA1_FWD_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
GDMA1_RELATED
 + 0x00)

	)

254 
	#GDMA1_SCH_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
GDMA1_RELATED
 + 0x04)

	)

255 
	#GDMA1_SHRP_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
GDMA1_RELATED
 + 0x08)

	)

256 
	#GDMA1_MAC_ADRL
 (
RALINK_FRAME_ENGINE_BASE
 + 
GDMA1_RELATED
 + 0x0C)

	)

257 
	#GDMA1_MAC_ADRH
 (
RALINK_FRAME_ENGINE_BASE
 + 
GDMA1_RELATED
 + 0x10)

	)

259 
	#GDMA2_RELATED
 0x0060

	)

260 
	#GDMA2_FWD_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
GDMA2_RELATED
 + 0x00)

	)

261 
	#GDMA2_SCH_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
GDMA2_RELATED
 + 0x04)

	)

262 
	#GDMA2_SHRP_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
GDMA2_RELATED
 + 0x08)

	)

263 
	#GDMA2_MAC_ADRL
 (
RALINK_FRAME_ENGINE_BASE
 + 
GDMA2_RELATED
 + 0x0C)

	)

264 
	#GDMA2_MAC_ADRH
 (
RALINK_FRAME_ENGINE_BASE
 + 
GDMA2_RELATED
 + 0x10)

	)

266 
	#PSE_RELATED
 0x0040

	)

267 
	#PSE_FQFC_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
PSE_RELATED
 + 0x00)

	)

268 
	#CDMA_FC_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
PSE_RELATED
 + 0x04)

	)

269 
	#GDMA1_FC_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
PSE_RELATED
 + 0x08)

	)

270 
	#GDMA2_FC_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
PSE_RELATED
 + 0x0C)

	)

271 
	#CDMA_OQ_STA
 (
RALINK_FRAME_ENGINE_BASE
 + 
PSE_RELATED
 + 0x10)

	)

272 
	#GDMA1_OQ_STA
 (
RALINK_FRAME_ENGINE_BASE
 + 
PSE_RELATED
 + 0x14)

	)

273 
	#GDMA2_OQ_STA
 (
RALINK_FRAME_ENGINE_BASE
 + 
PSE_RELATED
 + 0x18)

	)

274 
	#PSE_IQ_STA
 (
RALINK_FRAME_ENGINE_BASE
 + 
PSE_RELATED
 + 0x1C)

	)

276 
	#CDMA_RELATED
 0x0080

	)

277 
	#CDMA_CSG_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
CDMA_RELATED
 + 0x00)

	)

278 
	#CDMA_SCH_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
CDMA_RELATED
 + 0x04)

	)

280 
	#PDMA_RELATED
 0x0100

	)

281 
	#PDMA_GLO_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
 + 0x00)

	)

282 
	#PDMA_RST_IDX
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
 + 0x04)

	)

283 
	#PDMA_SCH_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
 + 0x08)

	)

284 
	#DELAY_INT_CFG
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
 + 0x0C)

	)

285 
	#TX_BASE_PTR0
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
 + 0x10)

	)

286 
	#TX_MAX_CNT0
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
 + 0x14)

	)

287 
	#TX_CTX_IDX0
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
 + 0x18)

	)

288 
	#TX_DTX_IDX0
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
 + 0x1C)

	)

289 
	#TX_BASE_PTR1
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
 + 0x20)

	)

290 
	#TX_MAX_CNT1
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
 + 0x24)

	)

291 
	#TX_CTX_IDX1
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
 + 0x28)

	)

292 
	#TX_DTX_IDX1
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
 + 0x2C)

	)

293 
	#RX_BASE_PTR0
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
 + 0x30)

	)

294 
	#RX_MAX_CNT0
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
 + 0x34)

	)

295 
	#RX_CALC_IDX0
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
 + 0x38)

	)

296 
	#RX_DRX_IDX0
 (
RALINK_FRAME_ENGINE_BASE
 + 
PDMA_RELATED
 + 0x3C)

	)

301 
	#INTERNAL_LOOPBACK_ENABLE
 1

	)

302 
	#INTERNAL_LOOPBACK_DISABLE
 0

	)

306 
	#TOUT_LOOP
 1000

	)

307 
	#ENABLE
 1

	)

308 
	#DISABLE
 0

	)

310 
VALID_BUFFER_STRUCT
 
π2880_‰ì_buf_li°
;

311 
VALID_BUFFER_STRUCT
 
π2880_busög_buf_li°
;

312 
BUFFER_ELEM
 
π2880_‰ì_buf
[
PKTBUFSRX
];

319 
_PDMA_RXD_INFO1_
 
	tPDMA_RXD_INFO1_T
;

321 
	s_PDMA_RXD_INFO1_


323 
PDP0
;

326 
_PDMA_RXD_INFO2_
 
	tPDMA_RXD_INFO2_T
;

328 
	s_PDMA_RXD_INFO2_


330 
PLEN1
 : 14;

331 
LS1
 : 1;

332 
UN_USED
 : 1;

333 
PLEN0
 : 14;

334 
LS0
 : 1;

335 
DDONE_bô
 : 1;

338 
_PDMA_RXD_INFO3_
 
	tPDMA_RXD_INFO3_T
;

340 
	s_PDMA_RXD_INFO3_


342 
PDP1
;

345 
_PDMA_RXD_INFO4_
 
	tPDMA_RXD_INFO4_T
;

347 
	s_PDMA_RXD_INFO4_


349 #i‡
	`deföed
 (
PDMA_NEW
)

350 
FOE_E¡ry
 : 14;

351 
CRSN
 : 5;

352 
SP
 : 3;

353 
L4F
 : 1;

354 
L4VLD
 : 1;

355 
TACK
 : 1;

356 
IP4F
 : 1;

357 
IP4
 : 1;

358 
IP6
 : 1;

359 
UN_USE1
 : 4;

361 
FOE_E¡ry
 : 14;

362 
FVLD
 : 1;

363 
UN_USE1
 : 1;

364 
AI
 : 8;

365 
SP
 : 3;

366 
AIS
 : 1;

367 
L4F
 : 1;

368 
IPF
 : 1;

369 
L4FVLD_bô
 : 1;

370 
IPFVLD_bô
 : 1;

374 
	sPDMA_rxdesc
 {

375 
PDMA_RXD_INFO1_T
 
rxd_öfo1
;

376 
PDMA_RXD_INFO2_T
 
rxd_öfo2
;

377 
PDMA_RXD_INFO3_T
 
rxd_öfo3
;

378 
PDMA_RXD_INFO4_T
 
rxd_öfo4
;

384 
_PDMA_TXD_INFO1_
 
	tPDMA_TXD_INFO1_T
;

386 
	s_PDMA_TXD_INFO1_


388 
SDP0
;

391 
_PDMA_TXD_INFO2_
 
	tPDMA_TXD_INFO2_T
;

393 
	s_PDMA_TXD_INFO2_


395 
SDL1
 : 14;

396 
LS1_bô
 : 1;

397 
BURST_bô
 : 1;

398 
SDL0
 : 14;

399 
LS0_bô
 : 1;

400 
DDONE_bô
 : 1;

403 
_PDMA_TXD_INFO3_
 
	tPDMA_TXD_INFO3_T
;

405 
	s_PDMA_TXD_INFO3_


407 
SDP1
;

410 
_PDMA_TXD_INFO4_
 
	tPDMA_TXD_INFO4_T
;

412 
	s_PDMA_TXD_INFO4_


414 #i‡
	`deföed
 (
MT7620_ASIC_BOARD
Ë|| deföed (
MT7620_FPGA_BOARD
)

415 
VPRI_VIDX
 : 8;

416 
SIDX
 : 4;

417 
INSP
 : 1;

418 
RESV
 : 2;

419 
UDF
 : 5;

420 
FP_BMAP
 : 8;

421 
TSO
 : 1;

422 
TUI_CO
 : 3;

423 #ñi‡
	`deföed
 (
MT7621_ASIC_BOARD
Ë|| deföed (
MT7621_FPGA_BOARD
)

424 
VLAN_TAG
 :16;

425 
INS
 : 1;

426 
RESV
 : 2;

427 
UDF
 : 6;

428 
FPORT
 : 3;

429 
TSO
 : 1;

430 
TUI_CO
 : 3;

432 
VIDX
 : 4;

433 
VPRI
 : 3;

434 
INSV
 : 1;

435 
SIDX
 : 4;

436 
INSP
 : 1;

437 
UN_USE3
 : 3;

438 
QN
 : 3;

439 
UN_USE2
 : 5;

440 
PN
 : 3;

441 
UN_USE1
 : 2;

442 
TUI_CO
 : 3;

446 
	sPDMA_txdesc
 {

447 
PDMA_TXD_INFO1_T
 
txd_öfo1
;

448 
PDMA_TXD_INFO2_T
 
txd_öfo2
;

449 
PDMA_TXD_INFO3_T
 
txd_öfo3
;

450 
PDMA_TXD_INFO4_T
 
txd_öfo4
;

454 
PDMA_txdesc
 
tx_rög0_ˇche
[
NUM_TX_DESC
] 
	`__©åibuã__
 ((
	`Æig√d
(32)));

455 
PDMA_rxdesc
 
rx_rög_ˇche
[
NUM_RX_DESC
] 
	`__©åibuã__
 ((
	`Æig√d
(32)));

457 
rx_dma_ow√r_idx0
;

458 
rx_w™ts_Æloc_idx0
;

459 
tx_˝u_ow√r_idx0
;

460 vﬁ©ûê
PDMA_rxdesc
 *
rx_rög
;

461 vﬁ©ûê
PDMA_txdesc
 *
tx_rög0
;

463 
rxRögSize
;

464 
txRögSize
;

466 
	`π2880_ëh_öô
(
ëh_devi˚
* 
dev
, 
bd_t
* 
bis
);

467 
	`π2880_ëh_£nd
(
ëh_devi˚
* 
dev
, vﬁ©ûê*
∑ckë
, 
Àngth
);

468 
	`π2880_ëh_ªcv
(
ëh_devi˚
* 
dev
);

469 
	`π2880_ëh_hÆt
(
ëh_devi˚
* 
dev
);

471 #ifde‡
RALINK_MDIO_ACCESS_FUN


472 #ifde‡
RALINK_EPHY_INIT


473 
	`mii_mgr_ªad
(
u32
 
phy_addr
, u32 
phy_ªgi°î
, u32 *
ªad_d©a
);

474 
	`mii_mgr_wrôe
(
u32
 
phy_addr
, u32 
phy_ªgi°î
, u32 
wrôe_d©a
);

476 
	#mii_mgr_ªad
(
x
,
y
,
z
Ëdo{
	}

	`}whûe
(0)

	)

477 
	#mii_mgr_wrôe
(
x
,
y
,
z
Ëdo{}0)

	)

480 
	#mii_mgr_ªad
(
x
,
y
,
z
Ëdo{}0)

	)

481 
	#mii_mgr_wrôe
(
x
,
y
,
z
Ëdo{}0)

	)

485 
π2880_ëh_£tup
(
ëh_devi˚
* 
dev
);

486 
	gπ2880_ëh_öôd
;

487 
	gc⁄sﬁe_buf„r
[
CFG_CBSIZE
];

490 
	#phys_to_bus
(
a
Ë◊ & 0x1FFFFFFF)

	)

492 
	#PCI_WAIT_INPUT_CHAR
(
ch
Ë(ch = 
	`gëc
())=0)

	)

494 
ëh_devi˚
* 
	gπ2880_pdev
;

496 vﬁ©ûê
uch¨
 *
	gPKT_HEADER_Buf
;

497 vﬁ©ûê
uch¨
 
	gPKT_HEADER_Buf_Poﬁ
[(
PKTBUFSRX
 * 
PKTSIZE_ALIGN
Ë+ 
PKTALIGN
];

498 vﬁ©ûê
uch¨
 *
NëTxPackë
;

499 vﬁ©ûê
uch¨
 *
PktBuf
;

500 vﬁ©ûê
uch¨
 
Pkt_Buf_Poﬁ
[];

503 
	#PIODIR_R
 (
RALINK_PIO_BASE
 + 0X24)

	)

504 
	#PIODATA_R
 (
RALINK_PIO_BASE
 + 0X20)

	)

505 
	#PIODIR3924_R
 (
RALINK_PIO_BASE
 + 0x4c)

	)

506 
	#PIODATA3924_R
 (
RALINK_PIO_BASE
 + 0x48)

	)

509 
	#FREEBUF_OFFSET
(
CURR
Ë(()(((0x0FFFFFFF & (
u32
)CURRË- (u32Ë(0x0FFFFFFF & (u32Ë
π2880_‰ì_buf
[0].
pbuf
)Ë/ 1536))

	)

511 
	$START_ETH
(
ëh_devi˚
 *
dev
 ) {

512 
s32
 
omr
;

513 
omr
=
	`RALINK_REG
(
PDMA_GLO_CFG
);

514 
	`udñay
(100);

515 
omr
 |
TX_WB_DDONE
 | 
RX_DMA_EN
 | 
TX_DMA_EN
 ;

517 
	`RALINK_REG
(
PDMA_GLO_CFG
)=
omr
;

518 
	`udñay
(500);

519 
	}
}

522 
	$STOP_ETH
(
ëh_devi˚
 *
dev
)

524 
s32
 
omr
;

525 
omr
=
	`RALINK_REG
(
PDMA_GLO_CFG
);

526 
	`udñay
(100);

527 
omr
 &~(
TX_WB_DDONE
 | 
RX_DMA_EN
 | 
TX_DMA_EN
) ;

528 
	`RALINK_REG
(
PDMA_GLO_CFG
)=
omr
;

529 
	`udñay
(500);

530 
	}
}

533 
BUFFER_ELEM
 *
	$π2880_‰ì_buf_íåy_dequeue
(
VALID_BUFFER_STRUCT
 *
hdr
)

535 
zîo
 = 0;

537 
BUFFER_ELEM
 *
node
;

540 i‡(!
hdr
) {

541  (
NULL
);

545 i‡(
hdr
->
hód
) {

547 
node
 = 
hdr
->
hód
;

550 
hdr
->
hód
 = 
node
->
√xt
;

554 i‡(!(
hdr
->
hód
)) {

555 
hdr
->
èû
 = (
BUFFER_ELEM
 *)
zîo
;

558 
node
->
√xt
 = (
BUFFER_ELEM
 *)
zîo
;

565 
node
 = 
NULL
;

566  (
node
);

574  (
node
);

575 
	}
}

577 
BUFFER_ELEM
 *
	$π2880_‰ì_buf_íåy_íqueue
(
VALID_BUFFER_STRUCT
 *
hdr
, 
BUFFER_ELEM
 *
ôem
)

579 
zîo
 =0;

581 i‡(!
hdr
) {

582  (
NULL
);

585 i‡(
ôem
 !
NULL
)

591 
ôem
->
√xt
 = (
BUFFER_ELEM
 *)
zîo
;

595 i‡(
hdr
->
hód
) {

597 
hdr
->
èû
->
√xt
 = 
ôem
;

600 
hdr
->
èû
 = 
ôem
;

605 
hdr
->
hód
 = 
ôem
;

606 
hdr
->
èû
 = 
ôem
;

614 
	`¥ötf
("\n shnat_flow_table_free_entry_enqueue is called,item== NULL \n");

617 (
ôem
);

619 
	}
}

622 
	$π2880_ëh_öôülize
(
bd_t
 *
bis
)

624 
ëh_devi˚
* 
dev
;

625 
i
;

626 
u32
 
ªgVÆue
;

628 i‡(!(
dev
 = (
ëh_devi˚
 *Ë
	`mÆloc
 ( *dev))) {

629 
	`¥ötf
("FailedÅoállocate memory\n");

633 
	`mem£t
(
dev
, 0, (*dev));

635 
	`•rötf
(
dev
->
«me
, "Eth0 (10/100-M)");

637 
dev
->
ioba£
 = 
RALINK_FRAME_ENGINE_BASE
;

638 
dev
->
öô
 = 
π2880_ëh_öô
;

639 
dev
->
hÆt
 = 
π2880_ëh_hÆt
;

640 
dev
->
£nd
 = 
π2880_ëh_£nd
;

641 
dev
->
ªcv
 = 
π2880_ëh_ªcv
;

643 
	`ëh_ªgi°î
(
dev
);

644 
π2880_pdev
 = 
dev
;

646 
π2880_ëh_öôd
 =0;

647 
PktBuf
 = 
Pkt_Buf_Poﬁ
;

648 
PKT_HEADER_Buf
 = 
PKT_HEADER_Buf_Poﬁ
;

649 
NëTxPackë
 = 
NULL
;

650 
rx_rög
 = (
PDMA_rxdesc
 *)
	`KSEG1ADDR
((
ul⁄g
)&
rx_rög_ˇche
[0]);

651 
tx_rög0
 = (
PDMA_txdesc
 *)
	`KSEG1ADDR
((
ul⁄g
)&
tx_rög0_ˇche
[0]);

653 
π2880_‰ì_buf_li°
.
hód
 = 
NULL
;

654 
π2880_‰ì_buf_li°
.
èû
 = 
NULL
;

656 
π2880_busög_buf_li°
.
hód
 = 
NULL
;

657 
π2880_busög_buf_li°
.
èû
 = 
NULL
;

664 
π2880_‰ì_buf
[0].
pbuf
 = (*)(&
PktBuf
[0] + (
PKTALIGN
 - 1));

665 
π2880_‰ì_buf
[0].
pbuf
 -(
ul⁄g
Ït2880_‰ì_buf[0].pbu‡% 
PKTALIGN
;

666 
π2880_‰ì_buf
[0].
√xt
 = 
NULL
;

668 
	`π2880_‰ì_buf_íåy_íqueue
(&
π2880_‰ì_buf_li°
,&
π2880_‰ì_buf
[0]);

670 #ifde‡
DEBUG


671 
	`¥ötf
("\¿π2880_‰ì_buf[0].pbu‡0x%08X \n",
π2880_‰ì_buf
[0].
pbuf
);

673 
i
 = 1; i < 
PKTBUFSRX
; i++) {

674 
π2880_‰ì_buf
[
i
].
pbuf
 =Ñt2880_‰ì_buf[0].pbu‡+ (i)*
PKTSIZE_ALIGN
;

675 
π2880_‰ì_buf
[
i
].
√xt
 = 
NULL
;

676 #ifde‡
DEBUG


677 
	`¥ötf
("\¿π2880_‰ì_buf[%d].pbu‡0x%08X\n",
i
,
π2880_‰ì_buf
[i].
pbuf
);

679 
	`π2880_‰ì_buf_íåy_íqueue
(&
π2880_‰ì_buf_li°
,&
π2880_‰ì_buf
[
i
]);

682 
i
 = 0; i < 
PKTBUFSRX
; i++)

684 
π2880_‰ì_buf
[
i
].
tx_idx
 = 
NUM_TX_DESC
;

685 #ifde‡
DEBUG


686 
	`¥ötf
("\¿π2880_‰ì_buf[%d] = 0x%08X,π2880_‰ì_buf[%d].√xt=0x%08X \n",
i
,&
π2880_‰ì_buf
[i],i,π2880_‰ì_buf[i].
√xt
);

692 
mùs_bus_„q
;

693 
ªgVÆue
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)(
RALINK_FRAME_ENGINE_BASE
 + 0x0008));

694 
ªgVÆue
 |((
mùs_bus_„q
/1000000) << 8);

695 *((vﬁ©ûê
u_l⁄g
 *)(
RALINK_FRAME_ENGINE_BASE
 + 0x0008)Ë
	`˝u_to_À32
(
ªgVÆue
);

698 
	}
}

701 
	$π2880_ëh_öô
(
ëh_devi˚
* 
dev
, 
bd_t
* 
bis
)

703 if(
π2880_ëh_öôd
 == 0)

705 
	`π2880_ëh_£tup
(
dev
);

709 
	`START_ETH
(
dev
);

712 
π2880_ëh_öôd
 = 1;

714 
	}
}

717 #i‡
deföed
 (
RT6855A_ASIC_BOARD
Ë|| (
RT6855A_FPGA_BOARD
) ||\

718 
deföed
 (
MT7620_ASIC_BOARD
Ë|| 
	$deföed
 (
MT7620_FPGA_BOARD
)

719 
	$IsSwôchVœnTabÀBusy
()

721 
j
 = 0;

722 
vÆue
 = 0;

724 
j
 = 0; j < 20; j++) {

725 
vÆue
 = 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x90);

726 i‡((
vÆue
 & 0x80000000) == 0 ){

729 
	`udñay
(1000);

731 i‡(
j
 == 20)

732 
	`¥ötf
("set vlanÅimeout.\n");

733 
	}
}

734 #ñi‡
deföed
 (
MT7621_ASIC_BOARD
Ë|| deföed (
MT7621_FPGA_BOARD
)

735 
	$IsSwôchVœnTabÀBusy
()

737 
j
 = 0;

738 
vÆue
 = 0;

740 
j
 = 0; j < 20; j++) {

741 
	`mii_mgr_ªad
(31, 0x90, &
vÆue
);

742 i‡((
vÆue
 & 0x80000000) == 0 ){

745 
	`udñay
(70000);

747 i‡(
j
 == 20)

748 
	`¥ötf
("£àvœ¿timeouàvÆue=0x%x.\n", 
vÆue
);

749 
	}
}

755 
	$LANWANP¨tôi⁄
()

757 #ifde‡
MAC_TO_100SW_MODE


758 
sw_id
 = 0;

759 
	`mii_mgr_ªad
(29, 31, &
sw_id
);

760 #ifde‡
RALINK_DEMO_BOARD_PVLAN


761 i‡(
sw_id
 == 0x175c) {

763 
	`mii_mgr_wrôe
(29, 23, 0);

766 
	`mii_mgr_wrôe
(29, 19, 0x809c);

767 
	`mii_mgr_wrôe
(29, 20, 0x9a96);

768 
	`mii_mgr_wrôe
(29, 21, 0x8e00);

769 
	`mii_mgr_wrôe
(29, 22, 0x8420);

772 
	`mii_mgr_wrôe
(20, 13, 0x21);

773 
	`mii_mgr_wrôe
(22, 14, 0x2002);

774 
	`mii_mgr_wrôe
(22, 15, 0x1001);

775 
	`mii_mgr_wrôe
(22, 16, 0x1001);

776 
	`mii_mgr_wrôe
(22, 17, 0x1001);

777 
	`mii_mgr_wrôe
(22, 18, 0x1001);

778 
	`mii_mgr_wrôe
(22, 19, 0x1001);

779 
	`mii_mgr_wrôe
(23, 0, 0x3e21);

780 
	`mii_mgr_wrôe
(23, 1, 0x3e3e);

781 
	`mii_mgr_wrôe
(23, 2, 0x3e3e);

782 
	`mii_mgr_wrôe
(23, 16, 0x3f3f);

783 
	`mii_mgr_wrôe
(23, 17, 0x3f3f);

784 
	`mii_mgr_wrôe
(23, 18, 0x3f3f);

787 #ifde‡
RALINK_EV_BOARD_PVLAN


788 i‡(
sw_id
 == 0x175c) {

790 
	`mii_mgr_wrôe
(29, 23, 0);

793 
	`mii_mgr_wrôe
(29, 19, 0x8e8d);

794 
	`mii_mgr_wrôe
(29, 20, 0x8b87);

795 
	`mii_mgr_wrôe
(29, 21, 0x8000);

796 
	`mii_mgr_wrôe
(29, 22, 0x8420);

799 
	`mii_mgr_wrôe
(20, 13, 0x21);

800 
	`mii_mgr_wrôe
(22, 14, 0x1001);

801 
	`mii_mgr_wrôe
(22, 15, 0x1001);

802 
	`mii_mgr_wrôe
(22, 16, 0x1001);

803 
	`mii_mgr_wrôe
(22, 17, 0x1001);

804 
	`mii_mgr_wrôe
(22, 18, 0x2002);

805 
	`mii_mgr_wrôe
(22, 19, 0x1001);

806 
	`mii_mgr_wrôe
(23, 0, 0x2f2f);

807 
	`mii_mgr_wrôe
(23, 1, 0x2f2f);

808 
	`mii_mgr_wrôe
(23, 2, 0x2f30);

809 
	`mii_mgr_wrôe
(23, 16, 0x3f3f);

810 
	`mii_mgr_wrôe
(23, 17, 0x3f3f);

811 
	`mii_mgr_wrôe
(23, 18, 0x3f3f);

816 #i‡
	`deföed
 (
RT3052_ASIC_BOARD
Ë|| deföed (
RT3052_FPGA_BOARD
) || \

817 
	`deföed
 (
RT3352_ASIC_BOARD
Ë|| deföed (
RT3352_FPGA_BOARD
) || \

818 
	`deföed
 (
RT5350_ASIC_BOARD
Ë|| deföed (
RT5350_FPGA_BOARD
) || \

819 
	`deföed
 (
MT7628_ASIC_BOARD
Ë|| deföed (
MT7628_FPGA_BOARD
)

820 #ifde‡
RALINK_DEMO_BOARD_PVLAN


822 *((vﬁ©ûê
u32
 *)(
RALINK_ETH_SW_BASE
 + 0x40)) = 0x1002;

823 *((vﬁ©ûê
u32
 *)(
RALINK_ETH_SW_BASE
 + 0x44)) = 0x1001;

824 *((vﬁ©ûê
u32
 *)(
RALINK_ETH_SW_BASE
 + 0x48)) = 0x1001;

825 *((vﬁ©ûê
u32
 *)(
RALINK_ETH_SW_BASE
 + 0x70)) = 0xffff417e;

827 #ifde‡
RALINK_EV_BOARD_PVLAN


829 *((vﬁ©ûê
u32
 *)(
RALINK_ETH_SW_BASE
 + 0x40)) = 0x1001;

830 *((vﬁ©ûê
u32
 *)(
RALINK_ETH_SW_BASE
 + 0x44)) = 0x1001;

831 *((vﬁ©ûê
u32
 *)(
RALINK_ETH_SW_BASE
 + 0x48)) = 0x1002;

832 *((vﬁ©ûê
u32
 *)(
RALINK_ETH_SW_BASE
 + 0x70)) = 0xffff506f;

836 #i‡
	`deföed
 (
RT6855A_ASIC_BOARD
Ë|| (
RT6855A_FPGA_BOARD
) ||\

837 (
	`deföed
 (
MT7620_ASIC_BOARD
Ë&& !deföed(
P5_RGMII_TO_MAC_MODE
)Ë|| deföed (
MT7620_FPGA_BOARD
)

839 #ifde‡
RALINK_DEMO_BOARD_PVLAN


842 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x2004) = 0xff0003;

843 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x2104) = 0xff0003;

844 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x2204) = 0xff0003;

845 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x2304) = 0xff0003;

846 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x2404) = 0xff0003;

847 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x2504) = 0xff0003;

850 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x2014) = 0x10002;

851 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x2114) = 0x10001;

852 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x2214) = 0x10001;

853 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x2314) = 0x10001;

854 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x2414) = 0x10001;

855 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x2514) = 0x10001;

858 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x94) = 0x40fe0001;

859 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x90) = 0x80001000;

860 
	`IsSwôchVœnTabÀBusy
();

862 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x94) = 0x40c10001;

863 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x90) = 0x80001001;

864 
	`IsSwôchVœnTabÀBusy
();

866 #ifde‡
RALINK_EV_BOARD_PVLAN


869 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x2004) = 0xff0003;

870 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x2104) = 0xff0003;

871 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x2204) = 0xff0003;

872 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x2304) = 0xff0003;

873 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x2404) = 0xff0003;

874 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x2504) = 0xff0003;

877 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x2014) = 0x10001;

878 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x2114) = 0x10001;

879 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x2214) = 0x10001;

880 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x2314) = 0x10001;

881 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x2414) = 0x10002;

882 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x2514) = 0x10001;

885 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x94) = 0x40ef0001;

886 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x90) = 0x80001000;

887 
	`IsSwôchVœnTabÀBusy
();

889 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x94) = 0x40d00001;

890 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x90) = 0x80001001;

891 
	`IsSwôchVœnTabÀBusy
();

894 #ñi‡
	`deföed
 (
MT7621_ASIC_BOARD
Ë|| deföed (
MT7621_FPGA_BOARD
) ||\

895 (
	`deföed
(
MT7620_ASIC_BOARD
Ë&& deföed(
P5_RGMII_TO_MAC_MODE
))

897 #ifde‡
RALINK_DEMO_BOARD_PVLAN


898 
	`¥ötf
("set LAN/WAN WLLLL\n");

901 
	`mii_mgr_wrôe
(31, 0x2004, 0xff0003);

902 
	`mii_mgr_wrôe
(31, 0x2104, 0xff0003);

903 
	`mii_mgr_wrôe
(31, 0x2204, 0xff0003);

904 
	`mii_mgr_wrôe
(31, 0x2304, 0xff0003);

905 
	`mii_mgr_wrôe
(31, 0x2404, 0xff0003);

910 
	`mii_mgr_wrôe
(31, 0x2014, 0x10002);

911 
	`mii_mgr_wrôe
(31, 0x2114, 0x10001);

912 
	`mii_mgr_wrôe
(31, 0x2214, 0x10001);

913 
	`mii_mgr_wrôe
(31, 0x2314, 0x10001);

914 
	`mii_mgr_wrôe
(31, 0x2414, 0x10001);

919 
	`IsSwôchVœnTabÀBusy
();

920 
	`mii_mgr_wrôe
(31, 0x94, 0x407e0001);

921 
	`mii_mgr_wrôe
(31, 0x90, 0x80001001);

922 
	`IsSwôchVœnTabÀBusy
();

924 
	`mii_mgr_wrôe
(31, 0x94, 0x40610001);

925 
	`mii_mgr_wrôe
(31, 0x90, 0x80001002);

926 
	`IsSwôchVœnTabÀBusy
();

928 #ifde‡
RALINK_EV_BOARD_PVLAN


929 
	`¥ötf
("set LAN/WAN LLLLW\n");

932 
	`mii_mgr_wrôe
(31, 0x2004, 0xff0003);

933 
	`mii_mgr_wrôe
(31, 0x2104, 0xff0003);

934 
	`mii_mgr_wrôe
(31, 0x2204, 0xff0003);

935 
	`mii_mgr_wrôe
(31, 0x2304, 0xff0003);

936 
	`mii_mgr_wrôe
(31, 0x2404, 0xff0003);

937 
	`mii_mgr_wrôe
(31, 0x2504, 0xff0003);

938 
	`mii_mgr_wrôe
(31, 0x2604, 0xff0003);

941 
	`mii_mgr_wrôe
(31, 0x2014, 0x10001);

942 
	`mii_mgr_wrôe
(31, 0x2114, 0x10001);

943 
	`mii_mgr_wrôe
(31, 0x2214, 0x10001);

944 
	`mii_mgr_wrôe
(31, 0x2314, 0x10001);

945 
	`mii_mgr_wrôe
(31, 0x2414, 0x10002);

946 
	`mii_mgr_wrôe
(31, 0x2514, 0x10001);

947 
	`mii_mgr_wrôe
(31, 0x2614, 0x10001);

951 
	`IsSwôchVœnTabÀBusy
();

953 
	`mii_mgr_wrôe
(31, 0x94, 0x404f0001);

954 
	`mii_mgr_wrôe
(31, 0x90, 0x80001001);

955 
	`IsSwôchVœnTabÀBusy
();

958 
	`mii_mgr_wrôe
(31, 0x94, 0x40500001);

959 
	`mii_mgr_wrôe
(31, 0x90, 0x80001002);

960 
	`IsSwôchVœnTabÀBusy
();

963 
	}
}

965 #i‡
deföed
 (
P5_RGMII_TO_MAC_MODE
Ë|| deföed (
MAC_TO_VITESSE_MODE
Ë|| deföed (
MAC_TO_MT7530_MODE
)

966 
	$Re£tSWusögGPIOx
()

968 #ifde‡
GPIOx_RESET_MODE


969 
u32
 
vÆue
;

971 #i‡
	`deföed
 (
RT2880_FPGA_BOARD
Ë|| deföed (
RT2880_ASIC_BOARD
)

973 
	`¥ötf
("\n GPIOÖin 10ÑesetÅo switch\n");

976 
vÆue
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)
RT2880_GPIOMODE_REG
);

977 
vÆue
 |= (1 << 1);

978 *(vﬁ©ûê
u_l⁄g
 *)(
RT2880_GPIOMODE_REG
Ë
	`˝u_to_À32
(
vÆue
);

981 
vÆue
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)
PIODIR_R
);

982 
vÆue
 |= (1 << 10);

983 *(vﬁ©ûê
u_l⁄g
 *)(
PIODIR_R
Ë
	`˝u_to_À32
(
vÆue
);

986 
vÆue
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)
PIODATA_R
);

987 
vÆue
 &= ~(1 << 10);

988 *(vﬁ©ûê
u_l⁄g
 *)(
PIODATA_R
Ë
	`˝u_to_À32
(
vÆue
);

990 
	`udñay
(50000);

992 
vÆue
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)
PIODATA_R
);

993 
vÆue
 |= (1 << 10);

994 *(vﬁ©ûê
u_l⁄g
 *)(
PIODATA_R
Ë
	`˝u_to_À32
(
vÆue
);

996 #ñi‡
	`deföed
 (
RT2883_FPGA_BOARD
Ë|| deföed (
RT2883_ASIC_BOARD
)

997 
	`¥ötf
("\n GPIOÖin 12ÑesetÅo switch\n");

1000 
vÆue
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)
RT2880_GPIOMODE_REG
);

1001 
vÆue
 |= (7 << 2);

1002 
vÆue
 &= ~(1 << 1);

1003 *(vﬁ©ûê
u_l⁄g
 *)(
RT2880_GPIOMODE_REG
Ë
	`˝u_to_À32
(
vÆue
);

1006 
vÆue
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)
PIODIR_R
);

1007 
vÆue
 |= (1 << 12);

1008 
vÆue
 &= ~(1 << 7);

1009 *(vﬁ©ûê
u_l⁄g
 *)(
PIODIR_R
Ë
	`˝u_to_À32
(
vÆue
);

1012 
vÆue
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)
PIODATA_R
);

1013 
vÆue
 &= ~(1 << 12);

1014 *(vﬁ©ûê
u_l⁄g
 *)(
PIODATA_R
Ë
	`˝u_to_À32
(
vÆue
);

1016 
	`udñay
(50000);

1018 
vÆue
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)
PIODATA_R
);

1019 
vÆue
 |= (1 << 12);

1020 *(vﬁ©ûê
u_l⁄g
 *)(
PIODATA_R
Ë
	`˝u_to_À32
(
vÆue
);

1022 #ñi‡
	`deföed
 (
RT3052_ASIC_BOARD
Ë|| deföed (
RT3052_FPGA_BOARD
)

1023 
	`¥ötf
("\n GPIOÖin 36ÑesetÅo switch\n");

1026 
vÆue
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)
RT2880_GPIOMODE_REG
);

1027 
vÆue
 |= (7 << 2);

1028 
vÆue
 &= ~(1 << 1);

1029 *(vﬁ©ûê
u_l⁄g
 *)(
RT2880_GPIOMODE_REG
Ë
	`˝u_to_À32
(
vÆue
);

1032 
vÆue
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)0xb000064c);

1033 
vÆue
 |= (1 << 12);

1034 *(vﬁ©ûê
u_l⁄g
 *)(0xb000064cË
	`˝u_to_À32
(
vÆue
);

1037 
vÆue
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)0xb0000648);

1038 
vÆue
 &= ~(1 << 12);

1039 *(vﬁ©ûê
u_l⁄g
 *)(0xb0000648Ë
	`˝u_to_À32
(
vÆue
);

1041 
	`udñay
(50000);

1043 
vÆue
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)0xb0000648);

1044 
vÆue
 |= (1 << 12);

1045 *(vﬁ©ûê
u_l⁄g
 *)(0xb0000648Ë
	`˝u_to_À32
(
vÆue
);

1047 #ñi‡
	`deföed
 (
RT3352_ASIC_BOARD
Ë|| deföed (
RT3352_FPGA_BOARD
)

1048 
	`¥ötf
("\n Please FIXME... \n");

1050 #ñi‡
	`deföed
 (
RT3883_ASIC_BOARD
)

1051 
	`¥ötf
("\n GPIOÖin 24ÑesetÅo switch\n");

1054 
vÆue
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)
PIODIR3924_R
);

1055 
vÆue
 |= 1;

1056 *(vﬁ©ûê
u_l⁄g
 *)(
PIODIR3924_R
Ë
	`˝u_to_À32
(
vÆue
);

1059 
vÆue
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)
PIODATA3924_R
);

1060 
vÆue
 &= ~1;

1061 *(vﬁ©ûê
u_l⁄g
 *)(
PIODATA3924_R
Ë
	`˝u_to_À32
(
vÆue
);

1063 
	`udñay
(50000);

1065 
vÆue
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)
PIODATA3924_R
);

1066 
vÆue
 |= 1;

1067 *(vﬁ©ûê
u_l⁄g
 *)(
PIODATA3924_R
Ë
	`˝u_to_À32
(
vÆue
);

1068 #ñi‡
	`deföed
 (
RT6855A_ASIC_BOARD
Ë|| deföed (
RT6855A_FPGA_BOARD
)

1070 #ñi‡
	`deföed
 (
MT7620_ASIC_BOARD
Ë|| deföed (
MT7620_FPGA_BOARD
)

1071 
	`¥ötf
("\n GPIOÖin 10ÑesetÅo switch\n");

1074 
vÆue
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)
RT2880_GPIOMODE_REG
);

1075 
vÆue
 |= (1 << 1);

1076 *(vﬁ©ûê
u_l⁄g
 *)(
RT2880_GPIOMODE_REG
Ë
	`˝u_to_À32
(
vÆue
);

1079 
vÆue
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)
PIODIR_R
);

1080 
vÆue
 |= (1 << 10);

1081 *(vﬁ©ûê
u_l⁄g
 *)(
PIODIR_R
Ë
	`˝u_to_À32
(
vÆue
);

1084 
vÆue
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)
PIODATA_R
);

1085 
vÆue
 &= ~(1 << 10);

1086 *(vﬁ©ûê
u_l⁄g
 *)(
PIODATA_R
Ë
	`˝u_to_À32
(
vÆue
);

1088 
	`udñay
(10000);

1090 
vÆue
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)
PIODATA_R
);

1091 
vÆue
 |= (1 << 10);

1092 *(vﬁ©ûê
u_l⁄g
 *)(
PIODATA_R
Ë
	`˝u_to_À32
(
vÆue
);

1094 #ñi‡
	`deföed
 (
MT7621_ASIC_BOARD
Ë|| deföed (
MT7621_FPGA_BOARD
)

1100 
	}
}

1103 #i‡
deföed
 (
MAC_TO_GIGAPHY_MODE
Ë|| deföed (
P5_MAC_TO_PHY_MODE
)

1104 
	#EV_ICPLUS_PHY_ID0
 0x0243

	)

1105 
	#EV_ICPLUS_PHY_ID1
 0x0D90

	)

1106 
	$isICPlusGigaPHY
(
ge
)

1108 
u32
 
phy_id0
,
phy_id1
;

1109 
u32
 
phy_addr
 = 0;

1111 if(
ge
 == 1)

1112 
phy_addr
 = 
MAC_TO_GIGAPHY_MODE_ADDR
;

1113 #i‡
	`deföed
 (
P4_MAC_TO_PHY_MODE
)

1115 
phy_addr
 = 
MAC_TO_GIGAPHY_MODE_ADDR2
;

1117 if–! 
	`mii_mgr_ªad
(
phy_addr
, 2, &
phy_id0
)){

1118 
	`¥ötf
("\n Read PhyID 0 is Fail!!\n");

1119 
phy_id0
 =0;

1122 if–! 
	`mii_mgr_ªad
(
phy_addr
, 3, &
phy_id1
)){

1123 
	`¥ötf
("\n Read PhyID 1 is Fail!!\n");

1124 
phy_id1
 = 0;

1127 if((
phy_id0
 =
EV_ICPLUS_PHY_ID0
Ë&& ((
phy_id1
 & 0xfff0)=
EV_ICPLUS_PHY_ID1
))

1131 
	}
}

1132 
	#EV_MARVELL_PHY_ID0
 0x0141

	)

1133 
	#EV_MARVELL_PHY_ID1
 0x0CC2

	)

1134 
	$isM¨vñlGigaPHY
(
ge
)

1136 
u32
 
phy_id0
,
phy_id1
;

1137 
u32
 
phy_addr
 = 0;

1139 if(
ge
 == 1)

1140 
phy_addr
 = 
MAC_TO_GIGAPHY_MODE_ADDR
;

1141 #i‡
	`deföed
 (
P4_MAC_TO_PHY_MODE
)

1143 
phy_addr
 = 
MAC_TO_GIGAPHY_MODE_ADDR2
;

1145 if–! 
	`mii_mgr_ªad
(
phy_addr
, 2, &
phy_id0
)){

1146 
	`¥ötf
("\n Read PhyID 0 is Fail!!\n");

1147 
phy_id0
 =0;

1150 if–! 
	`mii_mgr_ªad
(
phy_addr
, 3, &
phy_id1
)){

1151 
	`¥ötf
("\n Read PhyID 1 is Fail!!\n");

1152 
phy_id1
 = 0;

1155 if((
phy_id0
 =
EV_MARVELL_PHY_ID0
Ë&& (
phy_id1
 =
EV_MARVELL_PHY_ID1
))

1159 
	}
}

1161 
	#EV_VTSS_PHY_ID0
 0x0007

	)

1162 
	#EV_VTSS_PHY_ID1
 0x0421

	)

1163 
	$isVtssGigaPHY
(
ge
)

1165 
u32
 
phy_id0
,
phy_id1
;

1166 
u32
 
phy_addr
 = 0;

1168 if(
ge
 == 1)

1169 
phy_addr
 = 
MAC_TO_GIGAPHY_MODE_ADDR
;

1170 #i‡
	`deföed
 (
P4_MAC_TO_PHY_MODE
)

1172 
phy_addr
 = 
MAC_TO_GIGAPHY_MODE_ADDR2
;

1174 if–! 
	`mii_mgr_ªad
(
phy_addr
, 2, &
phy_id0
)){

1175 
	`¥ötf
("\n Read PhyID 0 is Fail!!\n");

1176 
phy_id0
 =0;

1179 if–! 
	`mii_mgr_ªad
(
phy_addr
, 3, &
phy_id1
)){

1180 
	`¥ötf
("\n Read PhyID 1 is Fail!!\n");

1181 
phy_id1
 = 0;

1184 if((
phy_id0
 =
EV_VTSS_PHY_ID0
Ë&& (
phy_id1
 =
EV_VTSS_PHY_ID1
))

1188 
	}
}

1192 #i‡
deföed
 (
MAC_TO_GIGAPHY_MODE
Ë|| deföed (
P5_MAC_TO_PHY_MODE
Ë|| deföed (
MAC_TO_100PHY_MODE
)

1194 #i‡
deföed
 (
RT6855_ASIC_BOARD
Ë|| deföed (
RT6855_FPGA_BOARD
) || \

1195 
deföed
 (
RT6855A_ASIC_BOARD
Ë|| 
	$deföed
 (
RT6855A_FPGA_BOARD
)

1197 
	$íabÀ_auto_√gŸüã
()

1199 
u32
 
ªgVÆue
;

1200 
u32
 
addr
 = 
MAC_TO_GIGAPHY_MODE_ADDR
;

1202 
ªgVÆue
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)(
RALINK_ETH_SW_BASE
+0x7000));

1203 
ªgVÆue
 |= (1<<31);

1204 
ªgVÆue
 &= ~(0x1f);

1205 
ªgVÆue
 &= ~(0x1f<<8);

1206 
ªgVÆue
 |(
addr
 << 0);

1207 
ªgVÆue
 |(
addr
 << 8);

1209 *(vﬁ©ûê
u_l⁄g
 *)(
RALINK_ETH_SW_BASE
+0x7000Ë
	`˝u_to_À32
(
ªgVÆue
);

1210 
	}
}

1212 #ñi‡
deföed
 (
MT7620_ASIC_BOARD
Ë|| deföed (
MT7620_FPGA_BOARD
) || \

1213 
deföed
 (
MT7621_ASIC_BOARD
Ë|| 
	$deföed
 (
MT7621_FPGA_BOARD
)

1215 
	$íabÀ_auto_√gŸüã
()

1217 
u32
 
ªgVÆue
;

1218 
u32
 
addr
 = 
MAC_TO_GIGAPHY_MODE_ADDR
;

1220 #i‡
	`deföed
 (
MT7621_FPGA_BOARD
Ë|| deföed (
MT7621_ASIC_BOARD
)

1222 
ªgVÆue
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)(
RALINK_SYSCTL_BASE
 + 0x60));

1223 
ªgVÆue
 &= ~(0x3 << 12);

1224 *(vﬁ©ûê
u_l⁄g
 *)(
RALINK_SYSCTL_BASE
 + 0x60Ë
ªgVÆue
;

1227 #i‡
	`deföed
 (
MT7621_ASIC_BOARD
Ë|| deföed (
MT7621_FPGA_BOARD
)

1228 
ªgVÆue
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)(
RALINK_ETH_SW_BASE
+0x0000));

1230 
ªgVÆue
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)(
RALINK_ETH_SW_BASE
+0x7000));

1232 
ªgVÆue
 |= (1<<31);

1233 
ªgVÆue
 &= ~(0x1f);

1234 
ªgVÆue
 &= ~(0x1f<<8);

1235 #i‡
	`deföed
 (
MT7620_ASIC_BOARD
Ë|| deföed (
MT7620_FPGA_BOARD
)

1236 
ªgVÆue
 |((
addr
-1) << 0);

1237 
ªgVÆue
 |(
addr
 << 8);

1238 #ñi‡
	`deföed
 (
MT7621_ASIC_BOARD
Ë|| deföed (
MT7621_FPGA_BOARD
)

1239 #ifdef 
MT7621_USE_GE1


1240 
ªgVÆue
 |(
addr
 << 0);

1241 
ªgVÆue
 |((
addr
+1) << 8);

1243 
ªgVÆue
 |((
addr
-1)&0x1f << 0);

1244 
ªgVÆue
 |(
addr
 << 8);

1247 
ªgVÆue
 |(
addr
 << 0);

1248 
ªgVÆue
 |(
addr
 << 8);

1251 #i‡
	`deföed
 (
MT7621_ASIC_BOARD
Ë|| deföed (
MT7621_FPGA_BOARD
)

1252 *(vﬁ©ûê
u_l⁄g
 *)(
RALINK_ETH_SW_BASE
+0x0000Ë
	`˝u_to_À32
(
ªgVÆue
);

1254 *(vﬁ©ûê
u_l⁄g
 *)(
RALINK_ETH_SW_BASE
+0x7000Ë
	`˝u_to_À32
(
ªgVÆue
);

1257 #i‡
	`deföed
 (
P4_MAC_TO_PHY_MODE
)

1258 *(vﬁ©ûê
u_l⁄g
 *)(
RALINK_ETH_SW_BASE
+0x3400) &= ~(0x1 << 15);

1260 #i‡
	`deföed
 (
P5_MAC_TO_PHY_MODE
)

1261 *(vﬁ©ûê
u_l⁄g
*)(
RALINK_ETH_SW_BASE
+0x3500) &= ~(0x1 << 15);

1264 
	}
}

1266 #ñi‡
deföed
 (
RT2880_ASIC_BOARD
Ë|| deföed (
RT2880_FPGA_BOARD
) || \

1267 
deföed
 (
RT3883_ASIC_BOARD
Ë|| deföed (
RT3883_FPGA_BOARD
) || \

1268 
deföed
 (
RT3052_ASIC_BOARD
Ë|| deföed (
RT3052_FPGA_BOARD
) || \

1269 
deföed
 (
RT3352_ASIC_BOARD
Ë|| 
	$deföed
 (
RT3352_FPGA_BOARD
)

1270 
	$íabÀ_auto_√gŸüã
()

1272 
u32
 
ªgVÆue
;

1273 
u32
 
addr
 = 
MAC_TO_GIGAPHY_MODE_ADDR
;

1275 #i‡
	`deföed
 (
RT3052_ASIC_BOARD
Ë|| deföed (
RT3052_FPGA_BOARD
) || \

1276 
	`deföed
 (
RT3352_ASIC_BOARD
Ë|| deföed (
RT3352_FPGA_BOARD
)

1277 
ªgVÆue
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)(
RALINK_ETH_SW_BASE
+0x00C8));

1279 
ªgVÆue
 = 
	`RALINK_REG
(
MDIO_CFG
);

1282 
ªgVÆue
 &= 0xe0ff7fff;

1284 
ªgVÆue
 |= 0x20000000;

1285 
ªgVÆue
 |(
addr
 << 24);

1287 #i‡
	`deföed
 (
RT3052_ASIC_BOARD
Ë|| deföed (
RT3052_FPGA_BOARD
) || \

1288 
	`deföed
 (
RT3352_ASIC_BOARD
Ë|| deföed (
RT3352_FPGA_BOARD
)

1289 *(vﬁ©ûê
u_l⁄g
 *)(
RALINK_ETH_SW_BASE
+0x00C8Ë
	`˝u_to_À32
(
ªgVÆue
);

1291 
	`RALINK_REG
(
MDIO_CFG
Ë
	`˝u_to_À32
(
ªgVÆue
);

1294 
	}
}

1300 
	$isDMABusy
(
ëh_devi˚
* 
dev
)

1302 
u32
 
ªg
;

1304 
ªg
 = 
	`RALINK_REG
(
PDMA_GLO_CFG
);

1306 if((
ªg
 & 
RX_DMA_BUSY
)){

1310 if((
ªg
 & 
TX_DMA_BUSY
)){

1311 
	`¥ötf
("\n TX_DMA_BUSY !!! ");

1315 
	}
}

1317 #i‡
deföed
 (
RT6855A_ASIC_BOARD
Ë|| deföed (
RT6855A_FPGA_BOARD
)

1318 
	$π6855A_gsw_öô
()

1320 
u32
 
i
 = 0;

1321 
u32
 
phy_vÆ
=0;

1322 
u32
 
ªv
=0;

1323 #i‡
	`deföed
 (
RT6855A_FPGA_BOARD
)

1324 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x3000) = 0x5e353;

1325 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x3100) = 0x5e353;

1328 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x3200) = 0x8000;

1329 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x3300) = 0x8000;

1330 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x3400) = 0x8000;

1331 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x3500) = 0x8000;

1335 
i
=6; i<8; i++) {

1336 
	`mii_mgr_wrôe
(
i
, 4, 0x07e1);

1338 
	`mii_mgr_wrôe
(
i
, 0, 0xB100);

1339 
	`mii_mgr_ªad
(
i
, 9, &
phy_vÆ
);

1340 
phy_vÆ
 &= ~(3<<8);

1341 
	`mii_mgr_wrôe
(
i
, 9, 
phy_vÆ
);

1343 #ñi‡
	`deföed
 (
RT6855A_ASIC_BOARD
)

1345 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x3600) = 0x5e33b;

1346 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x0010) = 0xffffffe0;

1347 
	`RALINK_REG
(
RALINK_FRAME_ENGINE_BASE
+0x1ec) = 0x0fffffff;

1348 
	`RALINK_REG
(
RALINK_FRAME_ENGINE_BASE
+0x1f0) = 0x0fffffff;

1349 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x30f0) &= ~(3 << 4);

1357 
	`mii_mgr_ªad
(0, 31, &
ªv
);

1358 
ªv
 &= (0x0f);

1360 
	`mii_mgr_wrôe
(1, 31, 0x4000);

1362 
	`mii_mgr_wrôe
(1, 16, 0xd4cc);

1363 
	`mii_mgr_wrôe
(1, 17, 0x7444);

1364 
	`mii_mgr_wrôe
(1, 19, 0x0112);

1365 
	`mii_mgr_wrôe
(1, 21, 0x7160);

1366 
	`mii_mgr_wrôe
(1, 22, 0x10cf);

1367 
	`mii_mgr_wrôe
(1, 26, 0x0777);

1369 if(
ªv
 == 0){

1370 
	`mii_mgr_wrôe
(1, 25, 0x0102);

1371 
	`mii_mgr_wrôe
(1, 29, 0x8641);

1374 
	`mii_mgr_wrôe
(1, 25, 0x0212);

1375 
	`mii_mgr_wrôe
(1, 29, 0x4640);

1378 
	`mii_mgr_wrôe
(1, 31, 0x2000);

1379 
	`mii_mgr_wrôe
(1, 21, 0x0655);

1380 
	`mii_mgr_wrôe
(1, 22, 0x0fd3);

1381 
	`mii_mgr_wrôe
(1, 23, 0x003d);

1382 
	`mii_mgr_wrôe
(1, 24, 0x096e);

1383 
	`mii_mgr_wrôe
(1, 25, 0x0fed);

1384 
	`mii_mgr_wrôe
(1, 26, 0x0fc4);

1386 
	`mii_mgr_wrôe
(1, 31, 0x1000);

1387 
	`mii_mgr_wrôe
(1, 17, 0xe7f8);

1389 
	`mii_mgr_wrôe
(1, 31, 0xa000);

1391 
	`mii_mgr_wrôe
(0, 16, 0x0e0e);

1392 
	`mii_mgr_wrôe
(1, 16, 0x0c0c);

1393 
	`mii_mgr_wrôe
(2, 16, 0x0f0f);

1394 
	`mii_mgr_wrôe
(3, 16, 0x1010);

1395 
	`mii_mgr_wrôe
(4, 16, 0x0909);

1397 
	`mii_mgr_wrôe
(0, 17, 0x0000);

1398 
	`mii_mgr_wrôe
(1, 17, 0x0000);

1399 
	`mii_mgr_wrôe
(2, 17, 0x0000);

1400 
	`mii_mgr_wrôe
(3, 17, 0x0000);

1401 
	`mii_mgr_wrôe
(4, 17, 0x0000);

1404 
i
=0; i<5; i++) {

1405 
	`mii_mgr_ªad
(
i
, 0, &
phy_vÆ
);

1406 
phy_vÆ
 |= 1<<9;

1407 
	`mii_mgr_wrôe
(
i
, 0, 
phy_vÆ
);

1411 #i‡
	`deföed
 (
RT6855A_ASIC_BOARD
)

1412 #i‡
	`deföed
 (
P5_RGMII_TO_MAC_MODE
)

1413 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x3500) = 0x5e33b;

1414 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x7014) = 0x1f0c000c;

1415 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x250c) = 0x000fff10;

1416 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x260c) = 0x000fff10;

1417 #ñi‡
	`deföed
 (
P5_MII_TO_MAC_MODE
)

1418 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x3500) = 0x5e337;

1419 #ñi‡
	`deföed
 (
P5_MAC_TO_PHY_MODE
)

1420 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x7014) = 0xc;

1421 
	`íabÀ_auto_√gŸüã
();

1422 i‡(
	`isICPlusGigaPHY
(1)) {

1423 
	`¥ötf
("ICPLUS Phy1\n");

1424 
	`mii_mgr_ªad
(
MAC_TO_GIGAPHY_MODE_ADDR
, 4, &
phy_vÆ
);

1425 
phy_vÆ
 |= 1<<10;

1426 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR
, 4, 
phy_vÆ
);

1428 
	`mii_mgr_ªad
(
MAC_TO_GIGAPHY_MODE_ADDR
, 0, &
phy_vÆ
);

1429 
phy_vÆ
 |= 1<<9;

1430 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR
, 0, 
phy_vÆ
);

1432 i‡(
	`isM¨vñlGigaPHY
(1)) {

1433 
	`¥ötf
("MARVELL Phy1\n");

1434 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR
, 20, 0x0ce0);

1435 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR
, 0, 0x9140);

1437 i‡(
	`isVtssGigaPHY
(1)) {

1438 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR
, 31, 0x0001);

1439 
	`mii_mgr_ªad
(
MAC_TO_GIGAPHY_MODE_ADDR
, 28, &
phy_vÆ
);

1440 
	`¥ötf
("GE1 Vôes£ PhyÑeg28 %x --> ",
phy_vÆ
);

1441 
phy_vÆ
 |= (0x3<<12);

1442 
phy_vÆ
 &= ~(0x3<<14);

1443 
	`¥ötf
("%x (wôhouàª£àPHY)\n", 
phy_vÆ
);

1444 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR
, 28, 
phy_vÆ
);

1445 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR
, 31, 0);

1447 #ñi‡
	`deföed
 (
P5_RMII_TO_MAC_MODE
)

1448 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x3500) = 0x5e337;

1450 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x3500) = 0x8000;

1453 
	}
}

1458 #i‡
deföed
 (
RT6855_ASIC_BOARD
Ë|| deföed (
RT6855_FPGA_BOARD
) || \

1459 
deföed
 (
MT7620_ASIC_BOARD
Ë|| 
	$deföed
 (
MT7620_FPGA_BOARD
)

1460 
	$π_gsw_öô
()

1462 
u32
 
i
 = 0;

1463 
u32
 
phy_vÆ
 = 0;

1464 
u32
 
ªv
 = 0;

1465 
u32
 
is_BGA
 = 0;

1466 #i‡
	`deföed
 (
P5_RGMII_TO_MAC_MODE
)

1467 
u32
 
ªgVÆue
;

1469 #i‡
	`deföed
 (
RT6855_FPGA_BOARD
Ë|| deföed (
MT7620_FPGA_BOARD
)

1471 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x3000) = 0x5e333;

1472 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x3100) = 0x5e333;

1473 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x3200) = 0x5e333;

1474 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x3300) = 0x5e333;

1475 #i‡
	`deföed
 (
MT7620_FPGA_BOARD
)

1476 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x3400) = 0x5e337;

1478 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x3400) = 0x5e333;

1480 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x3500) = 0x5e337;

1483 #i‡
	`deföed
 (
MT7620_FPGA_BOARD
)

1484 
i
=0;i<4;i++){

1486 
i
=0;i<5;i++){

1488 
	`mii_mgr_wrôe
(
i
, 4, 0x0461);

1489 
	`mii_mgr_wrôe
(
i
, 0, 0xB100);

1493 #i‡
	`deföed
 (
MT7620_ASIC_BOARD
)

1494 
is_BGA
 = (
	`RALINK_REG
(
RALINK_SYSCTL_BASE
 + 0xc) >> 16) & 0x1;

1503 
	`mii_mgr_wrôe
(1, 31, 0x4000);

1504 
	`mii_mgr_wrôe
(1, 17, 0x7444);

1505 if(
is_BGA
){

1506 
	`mii_mgr_wrôe
(1, 19, 0x0114);

1508 
	`mii_mgr_wrôe
(1, 19, 0x0117);

1510 
	`mii_mgr_wrôe
(1, 22, 0x10cf);

1511 
	`mii_mgr_wrôe
(1, 25, 0x6212);

1512 
	`mii_mgr_wrôe
(1, 26, 0x0777);

1513 
	`mii_mgr_wrôe
(1, 29, 0x4000);

1514 
	`mii_mgr_wrôe
(1, 28, 0xc077);

1515 
	`mii_mgr_wrôe
(1, 24, 0x0000);

1517 
	`mii_mgr_wrôe
(1, 31, 0x3000);

1518 
	`mii_mgr_wrôe
(1, 17, 0x4838);

1520 
	`mii_mgr_wrôe
(1, 31, 0x2000);

1522 if(
is_BGA
){

1523 
	`mii_mgr_wrôe
(1, 21, 0x0515);

1524 
	`mii_mgr_wrôe
(1, 22, 0x0053);

1525 
	`mii_mgr_wrôe
(1, 23, 0x00bf);

1526 
	`mii_mgr_wrôe
(1, 24, 0x0aaf);

1527 
	`mii_mgr_wrôe
(1, 25, 0x0fad);

1528 
	`mii_mgr_wrôe
(1, 26, 0x0fc1);

1530 
	`mii_mgr_wrôe
(1, 21, 0x0517);

1531 
	`mii_mgr_wrôe
(1, 22, 0x0fd2);

1532 
	`mii_mgr_wrôe
(1, 23, 0x00bf);

1533 
	`mii_mgr_wrôe
(1, 24, 0x0aab);

1534 
	`mii_mgr_wrôe
(1, 25, 0x00ae);

1535 
	`mii_mgr_wrôe
(1, 26, 0x0fff);

1537 
	`mii_mgr_wrôe
(1, 31, 0x1000);

1538 
	`mii_mgr_wrôe
(1, 17, 0xe7f8);

1540 
	`mii_mgr_wrôe
(1, 31, 0x8000);

1541 
	`mii_mgr_wrôe
(0, 30, 0xa000);

1542 
	`mii_mgr_wrôe
(1, 30, 0xa000);

1543 
	`mii_mgr_wrôe
(2, 30, 0xa000);

1544 
	`mii_mgr_wrôe
(3, 30, 0xa000);

1545 #i‡
	`deföed
(
P4_MAC_TO_NONE_MODE
)

1546 
	`mii_mgr_wrôe
(4, 30, 0xa000);

1549 
	`mii_mgr_wrôe
(0, 4, 0x05e1);

1550 
	`mii_mgr_wrôe
(1, 4, 0x05e1);

1551 
	`mii_mgr_wrôe
(2, 4, 0x05e1);

1552 
	`mii_mgr_wrôe
(3, 4, 0x05e1);

1553 #i‡
	`deföed
(
P4_MAC_TO_NONE_MODE
)

1554 
	`mii_mgr_wrôe
(4, 4, 0x05e1);

1557 
	`mii_mgr_wrôe
(1, 31, 0xa000);

1558 
	`mii_mgr_wrôe
(0, 16, 0x1111);

1559 
	`mii_mgr_wrôe
(1, 16, 0x1010);

1560 
	`mii_mgr_wrôe
(2, 16, 0x1515);

1561 
	`mii_mgr_wrôe
(3, 16, 0x0f0f);

1562 #i‡
	`deföed
(
P4_MAC_TO_NONE_MODE
)

1563 
	`mii_mgr_wrôe
(4, 16, 0x1313);

1567 
	`mii_mgr_wrôe
(1, 31, 0xb000);

1568 
	`mii_mgr_wrôe
(0, 17, 0x0);

1569 
	`mii_mgr_wrôe
(1, 17, 0x0);

1570 
	`mii_mgr_wrôe
(2, 17, 0x0);

1571 
	`mii_mgr_wrôe
(3, 17, 0x0);

1572 #i‡
	`deföed
(
P4_MAC_TO_NONE_MODE
)

1573 
	`mii_mgr_wrôe
(4, 17, 0x0);

1577 #i‡
	`deföed
(
P4_MAC_TO_NONE_MODE
)

1578 
i
=0; i<5; i++) {

1580 
i
=0; i<4; i++) {

1582 
	`mii_mgr_ªad
(
i
, 0, &
phy_vÆ
);

1583 
phy_vÆ
 |= 1<<9;

1584 
	`mii_mgr_wrôe
(
i
, 0, 
phy_vÆ
);

1589 #i‡
	`deföed
 (
PDMA_NEW
)

1590 
	`RALINK_REG
(
RT2880_SYSCFG1_REG
) |= (0x1 << 8);

1593 #i‡
	`deföed
 (
MT7620_FPGA_BOARD
Ë|| deföed (
MT7620_ASIC_BOARD
)

1594 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x3600) = 0x5e33b;

1595 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x0010) = 0x7f7f7fe0;

1596 #i‡
	`deföed
 (
P5_RGMII_TO_MAC_MODE
)

1599 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x3500) = 0x5e33b;

1600 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x7014) = 0x1f0c000c;

1601 
	`RALINK_REG
(0xb0000060) &= ~(1 << 9);

1602 
	`RALINK_REG
(
RT2880_SYSCFG1_REG
) &= ~(0x3<<12);

1605 
	`Re£tSWusögGPIOx
();

1606 
	`udñay
(125000);

1608 
i
=0;i<=4;i++)

1611 
	`mii_mgr_ªad
(
i
, 0x0 ,&
ªgVÆue
);

1612 
ªgVÆue
 |= (0x1<<11);

1613 
	`mii_mgr_wrôe
(
i
, 0x0, 
ªgVÆue
);

1616 
	`mii_mgr_wrôe
(31, 0x3500, 0x8000);

1617 
	`mii_mgr_wrôe
(31, 0x3600, 0x8000);

1621 
	`mii_mgr_wrôe
(31, 0x7000, 0x3);

1622 
	`¥ötf
("#Reset_MT7530\n");

1623 
	`udñay
(100);

1625 
i
=0;i<=4;i++)

1628 
	`mii_mgr_ªad
(
i
, 0x0 ,&
ªgVÆue
);

1629 
ªgVÆue
 &= ~(0x1<<11);

1630 
	`mii_mgr_wrôe
(
i
, 0x0, 
ªgVÆue
);

1632 
	`mii_mgr_wrôe
(31, 0x3600, 0x5e33b);

1633 
	`mii_mgr_wrôe
(31, 0x7804, 0x1117ccf);

1634 #ñi‡
	`deföed
 (
P5_MII_TO_MAC_MODE
)

1635 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x3500) = 0x5e337;

1636 
	`RALINK_REG
(0xb0000060) &= ~(1 << 9);

1637 
	`RALINK_REG
(
RT2880_SYSCFG1_REG
) &= ~(0x3 << 12);

1638 
	`RALINK_REG
(
RT2880_SYSCFG1_REG
) |= (0x1 << 12);

1639 #ñi‡
	`deföed
 (
P5_MAC_TO_PHY_MODE
)

1640 
	`RALINK_REG
(0xb0000060) &= ~(1 << 9);

1641 
	`RALINK_REG
(0xb0000060) &= ~(3 << 7);

1642 
	`RALINK_REG
(
RT2880_SYSCFG1_REG
) &= ~(0x3 << 12);

1643 
	`íabÀ_auto_√gŸüã
();

1644 i‡(
	`isICPlusGigaPHY
(1)) {

1645 
	`¥ötf
("ICPLUS Phy1\n");

1646 
	`mii_mgr_ªad
(
MAC_TO_GIGAPHY_MODE_ADDR
, 4, &
phy_vÆ
);

1647 
phy_vÆ
 |= 1<<10;

1648 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR
, 4, 
phy_vÆ
);

1650 
	`mii_mgr_ªad
(
MAC_TO_GIGAPHY_MODE_ADDR
, 0, &
phy_vÆ
);

1651 
phy_vÆ
 |= 1<<9;

1652 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR
, 0, 
phy_vÆ
);

1654 i‡(
	`isM¨vñlGigaPHY
(1)) {

1655 
	`¥ötf
("MARVELL Phy1\n");

1656 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR
, 20, 0x0ce0);

1657 #i‡
	`deföed
 (
MT7620_FPGA_BOARD
)

1658 
	`mii_mgr_ªad
(
MAC_TO_GIGAPHY_MODE_ADDR
, 9, &
phy_vÆ
);

1659 
phy_vÆ
 &= ~(3<<8);

1660 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR
, 9, 
phy_vÆ
);

1662 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR
, 0, 0x9140);

1664 i‡(
	`isVtssGigaPHY
(1)) {

1665 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR
, 31, 0x0001);

1666 
	`mii_mgr_ªad
(
MAC_TO_GIGAPHY_MODE_ADDR
, 28, &
phy_vÆ
);

1667 
	`¥ötf
("GE1 Vôes£ PhyÑeg28 %x --> ",
phy_vÆ
);

1668 
phy_vÆ
 |= (0x3<<12);

1669 
phy_vÆ
 &= ~(0x3<<14);

1670 
	`¥ötf
("%x (wôhouàª£àPHY)\n", 
phy_vÆ
);

1671 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR
, 28, 
phy_vÆ
);

1672 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR
, 31, 0);

1674 #ñi‡
	`deföed
 (
P5_RMII_TO_MAC_MODE
)

1675 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x3500) = 0x5e337;

1676 
	`RALINK_REG
(0xb0000060) &= ~(1 << 9);

1677 
	`RALINK_REG
(
RT2880_SYSCFG1_REG
) &= ~(0x3 << 12);

1678 
	`RALINK_REG
(
RT2880_SYSCFG1_REG
) |= (0x2 << 12);

1680 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x3500) = 0x8000;

1685 #i‡
	`deföed
 (
P4_RGMII_TO_MAC_MODE
)

1686 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x3400) = 0x5e33b;

1687 
	`RALINK_REG
(0xb0000060) &= ~(1 << 10);

1688 
	`RALINK_REG
(
RT2880_SYSCFG1_REG
) &= ~(0x3<<14);

1689 #ñi‡
	`deföed
 (
P4_MII_TO_MAC_MODE
)

1690 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x3400) = 0x5e337;

1691 
	`RALINK_REG
(0xb0000060) &= ~(1 << 10);

1692 
	`RALINK_REG
(
RT2880_SYSCFG1_REG
) &= ~(0x3 << 14);

1693 
	`RALINK_REG
(
RT2880_SYSCFG1_REG
) |= (0x1 << 14);

1694 #ñi‡
	`deföed
 (
P4_MAC_TO_PHY_MODE
)

1695 
	`RALINK_REG
(0xb0000060) &= ~(1 << 10);

1696 
	`RALINK_REG
(0xb0000060) &= ~(3 << 7);

1697 
	`RALINK_REG
(
RT2880_SYSCFG1_REG
) &= ~(0x3<<14);

1698 #i‡
	`deföed
 (
MT7620_FPGA_BOARD
)

1699 
	`mii_mgr_wrôe
(4, 4, 0x05e1);

1700 
	`mii_mgr_wrôe
(4, 0, 0xB100);

1702 
	`íabÀ_auto_√gŸüã
();

1703 i‡(
	`isICPlusGigaPHY
(2)) {

1704 
	`¥ötf
("ICPLUS Phy2\n");

1705 
	`mii_mgr_ªad
(
MAC_TO_GIGAPHY_MODE_ADDR2
, 4, &
phy_vÆ
);

1706 
phy_vÆ
 |= 1<<10;

1707 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR2
, 4, 
phy_vÆ
);

1709 
	`mii_mgr_ªad
(
MAC_TO_GIGAPHY_MODE_ADDR2
, 0, &
phy_vÆ
);

1710 
phy_vÆ
 |= 1<<9;

1711 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR2
, 0, 
phy_vÆ
);

1713 i‡(
	`isM¨vñlGigaPHY
(2)) {

1714 
	`¥ötf
("MARVELL Phy2\n");

1715 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR2
, 20, 0x0ce0);

1716 #i‡
	`deföed
 (
MT7620_FPGA_BOARD
)

1717 
	`mii_mgr_ªad
(
MAC_TO_GIGAPHY_MODE_ADDR2
, 9, &
phy_vÆ
);

1718 
phy_vÆ
 &= ~(3<<8);

1719 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR2
, 9, 
phy_vÆ
);

1721 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR2
, 0, 0x9140);

1723 i‡(
	`isVtssGigaPHY
(2)) {

1724 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR2
, 31, 0x0001);

1725 
	`mii_mgr_ªad
(
MAC_TO_GIGAPHY_MODE_ADDR2
, 28, &
phy_vÆ
);

1726 
	`¥ötf
("GE1 Vôes£ PhyÑeg28 %x --> ",
phy_vÆ
);

1727 
phy_vÆ
 |= (0x3<<12);

1728 
phy_vÆ
 &= ~(0x3<<14);

1729 
	`¥ötf
("%x (wôhouàª£àPHY)\n", 
phy_vÆ
);

1730 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR2
, 28, 
phy_vÆ
);

1731 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR2
, 31, 0);

1733 #ñi‡
	`deföed
 (
P4_RMII_TO_MAC_MODE
)

1734 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x3400) = 0x5e337;

1735 
	`RALINK_REG
(0xb0000060) &= ~(1 << 10);

1736 
	`RALINK_REG
(
RT2880_SYSCFG1_REG
) &= ~(0x3 << 14);

1737 
	`RALINK_REG
(
RT2880_SYSCFG1_REG
) |= (0x2 << 14);

1741 
	}
}

1744 #i‡
deföed
 (
RT6855A_FPGA_BOARD
)

1745 
	$π6855A_ëh_gpio_ª£t
()

1747 
u8
 
ëhî_gpio
 = 12;

1750 
	`ø_‹
(
RALINK_PIO_BASE
, 1<<(
ëhî_gpio
<<1));

1751 
	`ø_‹
(
RALINK_PIO_BASE
+0x14, 1<<
ëhî_gpio
);

1753 
	`ø_™d
(
RALINK_PIO_BASE
+0x4, ~(1<<
ëhî_gpio
));

1754 
	`udñay
(100000);

1756 
	`ø_‹
(
RALINK_PIO_BASE
+0x4, 1<<
ëhî_gpio
);

1758 
	`udñay
(600000);

1759 
	}
}

1763 #i‡
deföed
 (
MT7628_ASIC_BOARD
)

1764 
	$mt7628_ïhy_öô
()

1766 
i
;

1767 
u32
 
phy_vÆ
;

1768 
	`mii_mgr_wrôe
(0, 31, 0x2000);

1769 
	`mii_mgr_wrôe
(0, 26, 0x0000);

1771 
i
=0; i<5; i++){

1772 
	`mii_mgr_wrôe
(
i
, 31, 0x8000);

1773 
	`mii_mgr_wrôe
(
i
, 0, 0x3100);

1776 
	`mii_mgr_ªad
(
i
, 26, &
phy_vÆ
);

1777 
phy_vÆ
 |= (1 << 5);

1778 
	`mii_mgr_wrôe
(
i
, 26, 
phy_vÆ
);

1780 
	`mii_mgr_wrôe
(
i
, 30, 0xa000);

1781 
	`mii_mgr_wrôe
(
i
, 31, 0xa000);

1782 
	`mii_mgr_wrôe
(
i
, 16, 0x0606);

1783 
	`mii_mgr_wrôe
(
i
, 23, 0x0f0e);

1784 
	`mii_mgr_wrôe
(
i
, 24, 0x1610);

1785 
	`mii_mgr_wrôe
(
i
, 30, 0x1f15);

1786 
	`mii_mgr_wrôe
(
i
, 28, 0x6111);

1788 
	`mii_mgr_ªad
(
i
, 4, &
phy_vÆ
);

1789 
phy_vÆ
 |= (1 << 10);

1790 
	`mii_mgr_wrôe
(
i
, 4, 
phy_vÆ
);

1791 
	`mii_mgr_wrôe
(
i
, 31, 0x2000);

1792 
	`mii_mgr_wrôe
(
i
, 26, 0x0000);

1798 
	`mii_mgr_wrôe
(0, 31, 0x5000);

1799 
	`mii_mgr_wrôe
(0, 19, 0x004a);

1800 
	`mii_mgr_wrôe
(0, 20, 0x015a);

1801 
	`mii_mgr_wrôe
(0, 21, 0x00ee);

1802 
	`mii_mgr_wrôe
(0, 22, 0x0033);

1803 
	`mii_mgr_wrôe
(0, 23, 0x020a);

1804 
	`mii_mgr_wrôe
(0, 24, 0x0000);

1805 
	`mii_mgr_wrôe
(0, 25, 0x024a);

1806 
	`mii_mgr_wrôe
(0, 26, 0x035a);

1807 
	`mii_mgr_wrôe
(0, 27, 0x02ee);

1808 
	`mii_mgr_wrôe
(0, 28, 0x0233);

1809 
	`mii_mgr_wrôe
(0, 29, 0x000a);

1810 
	`mii_mgr_wrôe
(0, 30, 0x0000);

1812 
	`mii_mgr_wrôe
(0, 31, 0x4000);

1813 
	`mii_mgr_wrôe
(0, 29, 0x000d);

1814 
	`mii_mgr_wrôe
(0, 30, 0x0500);

1817 
	}
}

1822 #i‡
deföed
 (
RT3052_ASIC_BOARD
Ë|| deföed (
RT3052_FPGA_BOARD
) || \

1823 
deföed
 (
RT3352_ASIC_BOARD
Ë|| deföed (
RT3352_FPGA_BOARD
) || \

1824 
deföed
 (
RT5350_ASIC_BOARD
Ë|| deföed (
RT5350_FPGA_BOARD
) || \

1825 
deföed
 (
MT7628_ASIC_BOARD
Ë|| 
	$deföed
 (
MT7628_FPGA_BOARD
)

1826 
	$π305x_esw_öô
()

1828 
u32
 
i
;

1829 
u32
 
phy_vÆ
=0, 
phy_vÆ2
=0;

1835 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x0008) = 0xC8A07850;

1836 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x00E4) = 0x00000000;

1837 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x0014) = 0x00405555;

1838 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x0090) = 0x00007f7f;

1839 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x0098) = 0x00007f7f;

1840 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x00CC) = 0x0002500c;

1841 #i‚de‡
CONFIG_UNH_TEST


1842 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x009C) = 0x0008a301;

1850 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x009C) = 0x6008a241;

1852 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x008C) = 0x02404040;

1854 #i‡
	`deföed
 (
RT3052_ASIC_BOARD
Ë|| deföed (
RT3352_ASIC_BOARD
Ë|| deföed (
RT5350_ASIC_BOARD
Ë|| deföed (
MT7628_ASIC_BOARD
)

1855 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x00C8) = 0x3f502b28;

1856 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x0084) = 0x00000000;

1857 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x0110) = 0x7d000000;

1858 #ñi‡
	`deföed
 (
RT3052_FPGA_BOARD
Ë|| deföed (
RT3352_FPGA_BOARD
Ë|| deföed (
RT5350_FPGA_BOARD
Ë|| deföed (
MT7628_FPGA_BOARD
)

1860 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x00C8) = 0x00f03ff9;

1861 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x0084) = 0xffdf1f00;

1862 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x0110) = 0x0d000000;

1866 
i
=0;i<5;i++){

1867 
	`mii_mgr_wrôe
(
i
, 4, 0x0461);

1868 
	`mii_mgr_wrôe
(
i
, 0, 0xB100);

1870 #ifde‡
MT7628_FPGA_V6


1871 
	`mii_mgr_wrôe
(30, 4, 0x0461);

1873 
	`mii_mgr_ªad
(30, 9, &
phy_vÆ
);

1874 
phy_vÆ
 &= ~(3<<8);

1875 
	`mii_mgr_wrôe
(30, 9, 
phy_vÆ
);

1878 
	`mii_mgr_wrôe
(30, 0, 0xB100);

1879 
	`¥ötf
("MARVELL Phy1\n");

1880 
	`mii_mgr_wrôe
(30, 20, 0x0ce0);

1881 
	`mii_mgr_wrôe
(30, 0, 0x9140);

1885 #i‡
	`deföed
 (
P5_RGMII_TO_MAC_MODE
)

1886 
	`RALINK_REG
(0xb0000060) &= ~(1 << 9);

1887 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x00C8) &= ~(1<<29);

1888 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x00C8) |= 0x3fff;

1889 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x00C8) &= ~(0xf<<20);

1890 #ñi‡
	`deföed
 (
P5_MII_TO_MAC_MODE
)

1891 
	`RALINK_REG
(0xb0000060) &= ~(1 << 9);

1892 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x00C8) &= ~(1<<29);

1893 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x00C8) &= ~(0x3fff);

1894 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x00C8) |= 0x3ffd;

1895 #i‡
	`deföed
 (
RT3352_ASIC_BOARD
)

1896 
	`RALINK_REG
(
RT2880_SYSCFG1_REG
) &= ~(0x3 << 12);

1897 
	`RALINK_REG
(
RT2880_SYSCFG1_REG
) |= (0x1 << 12);

1899 #ñi‡
	`deföed
 (
P5_MAC_TO_PHY_MODE
)

1900 
	`RALINK_REG
(0xb0000060) &= ~(1 << 9);

1901 
	`RALINK_REG
(0xb0000060) &= ~(1 << 7);

1902 #i‡
	`deföed
 (
RT3052_ASIC_BOARD
Ë|| deföed(
RT3352_ASIC_BOARD
)

1903 
	`íabÀ_auto_√gŸüã
();

1905 i‡(
	`isICPlusGigaPHY
(1)) {

1906 
	`¥ötf
("\n ICPLUS Phy\n");

1907 
	`mii_mgr_ªad
(
MAC_TO_GIGAPHY_MODE_ADDR
, 4, &
phy_vÆ
);

1908 
phy_vÆ
 |= 1<<10;

1909 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR
, 4, 
phy_vÆ
);

1911 
	`mii_mgr_ªad
(
MAC_TO_GIGAPHY_MODE_ADDR
, 0, &
phy_vÆ
);

1912 
phy_vÆ
 |= 1<<9;

1913 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR
, 0, 
phy_vÆ
);

1915 i‡(
	`isM¨vñlGigaPHY
(1)) {

1916 
	`¥ötf
("\n MARVELL Phy\n");

1917 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR
, 20, 0x0ce0);

1918 #i‡
	`deföed
 (
RT3052_FPGA_BOARD
Ë|| deföed(
RT3352_FPGA_BOARD
)

1919 
	`mii_mgr_ªad
(
MAC_TO_GIGAPHY_MODE_ADDR
, 9, &
phy_vÆ
);

1920 
phy_vÆ
 &= ~(3<<8);

1921 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR
, 9, 
phy_vÆ
);

1923 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR
, 0, 0x9140);

1925 i‡(
	`isVtssGigaPHY
(1)) {

1926 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR
, 31, 0x0001);

1927 
	`mii_mgr_ªad
(
MAC_TO_GIGAPHY_MODE_ADDR
, 28, &
phy_vÆ
);

1928 
	`¥ötf
("GE1 Vôes£ PhyÑeg28 %x --> ",
phy_vÆ
);

1929 
phy_vÆ
 |= (0x3<<12);

1930 
phy_vÆ
 &= ~(0x3<<14);

1931 
	`¥ötf
("%x (wôhouàª£àPHY)\n", 
phy_vÆ
);

1932 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR
, 28, 
phy_vÆ
);

1933 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR
, 31, 0);

1935 #ñi‡
	`deföed
 (
P5_RMII_TO_MAC_MODE
)

1937 
	`RALINK_REG
(0xb0000060) &= ~(1 << 9);

1938 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x00C8) &= ~(1<<29);

1939 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x00C8) &= ~(0x3fff);

1940 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x00C8) |= 0x3ffd;

1941 #i‡
	`deföed
 (
RT3352_ASIC_BOARD
)

1942 
	`RALINK_REG
(
RT2880_SYSCFG1_REG
) &= ~(0x3 << 12);

1943 
	`RALINK_REG
(
RT2880_SYSCFG1_REG
) |= (0x2 << 12);

1947 #i‡
	`deföed
 (
RT3052_ASIC_BOARD
)

1948 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x00C8) &= ~(1 << 29);

1949 
	`RALINK_REG
(0xb0000060) |= (1 << 7);

1950 
	`RALINK_REG
(0xb0000060) |= (1 << 9);

1951 
	`RALINK_REG
(0xb0000674) = 0xFFF;

1952 
	`RALINK_REG
(0xb000067C) = 0x0;

1953 #ñi‡
	`deföed
 (
RT3352_ASIC_BOARD
)

1954 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x00C8) &= ~(1 << 29);

1955 
	`RALINK_REG
(0xb0000060) |= (1 << 7);

1956 
	`RALINK_REG
(0xb0000624) = 0xC0000000;

1957 
	`RALINK_REG
(0xb000062C) = 0xC0000000;

1959 
	`RALINK_REG
(0xb0000060) |= (1 << 9);

1960 
	`RALINK_REG
(0xb000064C) = 0xFFF;

1961 
	`RALINK_REG
(0xb0000654) = 0xFFF;

1966 
	#RSTCTRL_EPHY_RST
 (1<<24)

	)

1967 
	#MT7628_EPHY_EN
 (0x1f<<16)

	)

1968 
	#MT7628_P0_EPHY_AIO_EN
 (1<<16)

	)

1970 #i‡
	`deföed
 (
RT3052_ASIC_BOARD
Ë|| deföed (
RT3352_ASIC_BOARD
Ë|| deföed (
RT5350_ASIC_BOARD
Ë|| deföed (
MT7628_ASIC_BOARD
)

1971 #i‡
	`deföed
 (
RT3052_ASIC_BOARD
)

1973 
	`rw_rf_ªg
(0, 0, &
phy_vÆ
);

1974 
phy_vÆ
 =Öhy_val >> 4;

1976 if(
phy_vÆ
 > 0x5) {

1978 
	`rw_rf_ªg
(0, 26, &
phy_vÆ
);

1979 
phy_vÆ2
 = (
phy_vÆ
 | (0x3 << 5));

1980 
	`rw_rf_ªg
(1, 26, &
phy_vÆ2
);

1983 
i
 = 
	`RALINK_REG
(
RT2880_RSTCTRL_REG
);

1984 
i
 = i | 
RSTCTRL_EPHY_RST
;

1985 
	`RALINK_REG
(
RT2880_RSTCTRL_REG
)
i
;

1986 
i
 = i & ~(
RSTCTRL_EPHY_RST
);

1987 
	`RALINK_REG
(
RT2880_RSTCTRL_REG
)
i
;

1989 
	`rw_rf_ªg
(1, 26, &
phy_vÆ
);

1992 
	`mii_mgr_wrôe
(0, 31, 0x8000);

1993 
i
=0;i<5;i++){

1994 
	`mii_mgr_wrôe
(
i
, 26, 0x1600);

1995 
	`mii_mgr_wrôe
(
i
, 29, 0x7058);

1996 
	`mii_mgr_wrôe
(
i
, 30, 0x0018);

2000 
	`mii_mgr_wrôe
(0, 31, 0x0);

2001 
	`mii_mgr_wrôe
(0, 1, 0x4a40);

2002 
	`mii_mgr_wrôe
(0, 2, 0x6254);

2003 
	`mii_mgr_wrôe
(0, 3, 0xa17f);

2005 #i‡
	`deföed
 (
ENABLE_LDPS
)

2006 
	`mii_mgr_wrôe
(0, 12, 0x7eaa);

2007 
	`mii_mgr_wrôe
(0, 22, 0x252f);

2009 
	`mii_mgr_wrôe
(0, 12, 0x0);

2010 
	`mii_mgr_wrôe
(0, 22, 0x052f);

2012 
	`mii_mgr_wrôe
(0, 14, 0x65);

2013 
	`mii_mgr_wrôe
(0, 16, 0x0684);

2014 
	`mii_mgr_wrôe
(0, 17, 0x0fe0);

2015 
	`mii_mgr_wrôe
(0, 18, 0x40ba);

2016 
	`mii_mgr_wrôe
(0, 27, 0x2fce);

2017 
	`mii_mgr_wrôe
(0, 28, 0xc410);

2018 
	`mii_mgr_wrôe
(0, 29, 0x598b);

2019 
	`mii_mgr_wrôe
(0, 31, 0x8000);

2022 
i
=0;i<5;i++){

2024 
	`mii_mgr_ªad
(
i
, 26, &
phy_vÆ
);

2025 
phy_vÆ
 |= 0x0001;

2026 
	`mii_mgr_wrôe
(
i
, 26, 
phy_vÆ
);

2031 
	`mii_mgr_wrôe
(0, 31, 0x8000);

2032 
i
=0;i<5;i++){

2033 
	`mii_mgr_wrôe
(
i
, 26, 0x1600);

2034 
	`mii_mgr_wrôe
(
i
, 29, 0x7058);

2035 
	`mii_mgr_wrôe
(
i
, 30, 0x0018);

2039 
	`mii_mgr_wrôe
(0, 31, 0x0);

2040 
	`mii_mgr_wrôe
(0, 1, 0x4a40);

2041 
	`mii_mgr_wrôe
(0, 2, 0x6254);

2042 
	`mii_mgr_wrôe
(0, 3, 0xa17f);

2043 
	`mii_mgr_wrôe
(0, 14, 0x65);

2044 
	`mii_mgr_wrôe
(0, 16, 0x0684);

2045 
	`mii_mgr_wrôe
(0, 17, 0x0fe0);

2046 
	`mii_mgr_wrôe
(0, 18, 0x40ba);

2047 
	`mii_mgr_wrôe
(0, 22, 0x052f);

2048 
	`mii_mgr_wrôe
(0, 27, 0x2fce);

2049 
	`mii_mgr_wrôe
(0, 28, 0xc410);

2050 
	`mii_mgr_wrôe
(0, 29, 0x598b);

2051 
	`mii_mgr_wrôe
(0, 31, 0x8000);

2053 
i
=0;i<5;i++){

2055 
	`mii_mgr_ªad
(
i
, 26, &
phy_vÆ
);

2056 
phy_vÆ
 |= 0x0001;

2057 
	`mii_mgr_wrôe
(
i
, 26, 
phy_vÆ
);

2061 #ñi‡
	`deföed
 (
RT3352_ASIC_BOARD
)

2064 
i
 = 
	`RALINK_REG
(
RT2880_RSTCTRL_REG
);

2065 
i
 = i | 
RSTCTRL_EPHY_RST
;

2066 
	`RALINK_REG
(
RT2880_RSTCTRL_REG
Ë
i
;

2067 
i
 = i & ~(
RSTCTRL_EPHY_RST
);

2068 
	`RALINK_REG
(
RT2880_RSTCTRL_REG
Ë
i
;

2071 
	`mii_mgr_wrôe
(0, 31, 0x8000);

2072 
i
=0;i<5;i++){

2073 
	`mii_mgr_wrôe
(
i
, 26, 0x1600);

2074 
	`mii_mgr_wrôe
(
i
, 29, 0x7016);

2075 
	`mii_mgr_wrôe
(
i
, 30, 0x0038);

2079 
	`mii_mgr_wrôe
(0, 31, 0x0);

2080 
	`mii_mgr_wrôe
(0, 1, 0x4a40);

2081 
	`mii_mgr_wrôe
(0, 2, 0x6254);

2082 
	`mii_mgr_wrôe
(0, 3, 0xa17f);

2083 
	`mii_mgr_wrôe
(0, 12, 0x7eaa);

2084 
	`mii_mgr_wrôe
(0, 14, 0x65);

2085 
	`mii_mgr_wrôe
(0, 16, 0x0684);

2086 
	`mii_mgr_wrôe
(0, 17, 0x0fe0);

2087 
	`mii_mgr_wrôe
(0, 18, 0x40ba);

2088 
	`mii_mgr_wrôe
(0, 22, 0x253f);

2089 
	`mii_mgr_wrôe
(0, 27, 0x2fda);

2090 
	`mii_mgr_wrôe
(0, 28, 0xc410);

2091 
	`mii_mgr_wrôe
(0, 29, 0x598b);

2092 
	`mii_mgr_wrôe
(0, 31, 0x8000);

2094 
i
=0;i<5;i++){

2096 
	`mii_mgr_ªad
(
i
, 26, &
phy_vÆ
);

2097 
phy_vÆ
 |= 0x0001;

2098 
	`mii_mgr_wrôe
(
i
, 26, 
phy_vÆ
);

2100 #ñi‡
	`deföed
 (
RT5350_ASIC_BOARD
)

2103 
i
 = 
	`RALINK_REG
(
RT2880_RSTCTRL_REG
);

2104 
i
 = i | 
RSTCTRL_EPHY_RST
;

2105 
	`RALINK_REG
(
RT2880_RSTCTRL_REG
Ë
i
;

2106 
i
 = i & ~(
RSTCTRL_EPHY_RST
);

2107 
	`RALINK_REG
(
RT2880_RSTCTRL_REG
Ë
i
;

2110 
	`mii_mgr_wrôe
(0, 31, 0x8000);

2111 
i
=0;i<5;i++){

2112 
	`mii_mgr_wrôe
(
i
, 26, 0x1600);

2113 
	`mii_mgr_wrôe
(
i
, 29, 0x7015);

2114 
	`mii_mgr_wrôe
(
i
, 30, 0x0038);

2118 
	`mii_mgr_wrôe
(0, 31, 0x0);

2119 
	`mii_mgr_wrôe
(0, 1, 0x4a40);

2120 
	`mii_mgr_wrôe
(0, 2, 0x6254);

2121 
	`mii_mgr_wrôe
(0, 3, 0xa17f);

2122 
	`mii_mgr_wrôe
(0, 12, 0x7eaa);

2123 
	`mii_mgr_wrôe
(0, 14, 0x65);

2124 
	`mii_mgr_wrôe
(0, 16, 0x0684);

2125 
	`mii_mgr_wrôe
(0, 17, 0x0fe0);

2126 
	`mii_mgr_wrôe
(0, 18, 0x40ba);

2127 
	`mii_mgr_wrôe
(0, 22, 0x253f);

2128 
	`mii_mgr_wrôe
(0, 27, 0x2fda);

2129 
	`mii_mgr_wrôe
(0, 28, 0xc410);

2130 
	`mii_mgr_wrôe
(0, 29, 0x598b);

2131 
	`mii_mgr_wrôe
(0, 31, 0x8000);

2133 
i
=0;i<5;i++){

2135 
	`mii_mgr_ªad
(
i
, 26, &
phy_vÆ
);

2136 
phy_vÆ
 |= 0x0001;

2137 
	`mii_mgr_wrôe
(
i
, 26, 
phy_vÆ
);

2139 #ñi‡
	`deföed
 (
MT7628_ASIC_BOARD
)

2141 
i
 = 
	`RALINK_REG
(
RT2880_AGPIOCFG_REG
);

2142 #i‡
	`deföed
 (
CONFIG_ETH_ONE_PORT_ONLY
)

2143 
i
 |
MT7628_EPHY_EN
;

2144 
i
 = i & ~(
MT7628_P0_EPHY_AIO_EN
);

2146 
i
 = i & ~(
MT7628_EPHY_EN
);

2148 
	`RALINK_REG
(
RT2880_AGPIOCFG_REG
Ë
i
;

2150 
	`¥ötf
("RESET MT7628 PHY!!!!!!");

2152 
i
 = 
	`RALINK_REG
(
RT2880_RSTCTRL_REG
);

2153 
i
 = i | 
RSTCTRL_EPHY_RST
;

2154 
	`RALINK_REG
(
RT2880_RSTCTRL_REG
Ë
i
;

2155 
i
 = i & ~(
RSTCTRL_EPHY_RST
);

2156 
	`RALINK_REG
(
RT2880_RSTCTRL_REG
Ë
i
;

2157 
i
 = 
	`RALINK_REG
(
RALINK_SYSCTL_BASE
 + 0x64);

2158 #i‡
	`deföed
 (
CONFIG_ETH_ONE_PORT_ONLY
)

2159 
i
 &= 0xf003f003;

2160 
i
 |= 0x05540554;

2161 
	`RALINK_REG
(
RALINK_SYSCTL_BASE
 + 0x64Ë
i
;

2163 
i
 &= 0xf003f003;

2164 
	`RALINK_REG
(
RALINK_SYSCTL_BASE
 + 0x64Ë
i
;

2167 
	`udñay
(5000);

2168 
	`mt7628_ïhy_öô
();

2175 
	}
}

2179 #i‡
deföed
 (
RT3883_ASIC_BOARD
Ë&& deföed (
MAC_TO_MT7530_MODE
)

2180 
	$π3883_gsw_öô
()

2182 
	`¥ötf
("\n MT7530 Giga Switch support \n");

2184 
	`RALINK_REG
(
MDIO_CFG
)=
	`˝u_to_À32
((
u32
)(0x1F01DC01));

2186 
	`Re£tSWusögGPIOx
();

2187 
	`udñay
(125000);

2189 
	`mii_mgr_wrôe
(31, 0x3500, 0x5e33b);

2190 
	`mii_mgr_wrôe
(31, 0x7804, 0x1017d8f);

2191 
	}
}

2193 #i‡
deföed
 (
MT7621_ASIC_BOARD
Ë|| deföed (
MT7621_FPGA_BOARD
)

2195 #i‡
deföed
 (
MT7621_USE_GE2
Ë&& deföed (
GE_RGMII_FORCE_1000
)

2196 
	$£tup_exã∫Æ_gsw
()

2198 
u32
 
i
;

2199 
u32
 
ªgVÆue
;

2202 
ªgVÆue
 = 
	`RALINK_REG
(
PAD_RGMII2_MDIO_CFG
);

2203 
ªgVÆue
 &= ~(0x3<<4);

2204 
	`RALINK_REG
(
PAD_RGMII2_MDIO_CFG
Ë
ªgVÆue
;

2207 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x100) = 0x000008000;

2208 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x200) = 0x2005e33b;

2209 
	`RALINK_REG
(
GDMA1_FWD_CFG
) = 0x20717777;

2210 
	`RALINK_REG
(
GDMA2_FWD_CFG
) = 0x20710000;

2212 
	}
}

2214 
	$£tup_öã∫Æ_gsw
()

2216 
u32
 
i
;

2217 
u32
 
ªgVÆue
;

2220 
ªgVÆue
 = 
	`RALINK_REG
(
RT2880_RSTCTRL_REG
);

2221 
ªgVÆue
 =ÑegValue | (1<<2);

2222 
	`RALINK_REG
(
RT2880_RSTCTRL_REG
Ë
ªgVÆue
;

2223 
	`udñay
(1000);

2224 
ªgVÆue
 =ÑegValue & ~(1<<2);

2225 
	`RALINK_REG
(
RT2880_RSTCTRL_REG
Ë
ªgVÆue
;

2226 
	`udñay
(50);

2231 
ªgVÆue
 = 
	`RALINK_REG
(
PAD_RGMII2_MDIO_CFG
);

2232 
ªgVÆue
 &= ~(0x3<<4);

2233 
	`RALINK_REG
(
PAD_RGMII2_MDIO_CFG
Ë
ªgVÆue
;

2236 
i
=0;i<=4;i++)

2239 
	`mii_mgr_ªad
(
i
, 0x0 ,&
ªgVÆue
);

2240 
ªgVÆue
 |= (0x1<<11);

2241 
	`mii_mgr_wrôe
(
i
, 0x0, 
ªgVÆue
);

2244 
	`mii_mgr_wrôe
(31, 0x3500, 0x8000);

2245 
	`mii_mgr_wrôe
(31, 0x3600, 0x8000);

2247 
	`mii_mgr_wrôe
(31, 0x7000, 0x3);

2248 
	`¥ötf
("#Reset_MT7530\n");

2249 
	`udñay
(5);

2252 #ifde‡
MT7621_USE_GE1


2253 #i‡
	`deföed
 (
MT7621_ASIC_BOARD
)

2254 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x100) = 0x2005e33b;

2255 
	`mii_mgr_wrôe
(31, 0x3600, 0x5e30b);

2256 
	`mii_mgr_wrôe
(31, 0x3500, 0x8000);

2259 #ñi‡
	`deföed
 (
MT7621_FPGA_BOARD
)

2260 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x100) = 0x2005e337;

2261 
	`mii_mgr_wrôe
(31, 0x3600, 0x5e337);

2263 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x200) = 0x00008000;

2265 
	`RALINK_REG
(
GDMA1_FWD_CFG
) = 0x20710000;

2266 
	`RALINK_REG
(
GDMA2_FWD_CFG
) = 0x20717777;

2269 
ªgVÆue
 = 0x117ccf;

2270 
	`mii_mgr_wrôe
(31, 0x7804 ,
ªgVÆue
);

2273 #ñi‡
deföed
 
MT7621_USE_GE2


2274 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x100) = 0x000008000;

2275 
	`mii_mgr_wrôe
(31, 0x3500, 0x56300);

2276 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x200) = 0x20056300;

2280 
	`mii_mgr_ªad
(31, 0x7804 ,&
ªgVÆue
);

2281 #i‡
deföed
 
GE_RGMII_INTERNAL_P0_AN


2282 
ªgVÆue
 &= ~((1<<13)|(1<<6));

2283 
ªgVÆue
 |= ((1<<7)|(1<<16)|(1<<20));

2284 #ñi‡
deföed
 
GE_RGMII_INTERNAL_P4_AN


2285 
ªgVÆue
 &= ~((1<<13)|(1<<6)|(1<20));

2286 
ªgVÆue
 |= ((1<<7)|(1<<16));

2288 
	`mii_mgr_wrôe
(31, 0x7804 ,
ªgVÆue
);

2290 
	`íabÀ_auto_√gŸüã
();

2292 
	`RALINK_REG
(
GDMA1_FWD_CFG
) = 0x20717777;

2293 
	`RALINK_REG
(
GDMA2_FWD_CFG
) = 0x20710000;

2296 
ªgVÆue
 = 
	`RALINK_REG
(
RALINK_SYSCTL_BASE
 + 0x10);

2297 
ªgVÆue
 = (regValue >> 6) & 0x7;

2298 if(
ªgVÆue
 >= 6) {

2300 } if(
ªgVÆue
 >= 3) {

2301 
	`mii_mgr_wrôe
(0, 13, 0x1f);

2302 
	`mii_mgr_wrôe
(0, 14, 0x410);

2303 
	`mii_mgr_wrôe
(0, 13, 0x401f);

2304 
	`mii_mgr_wrôe
(0, 14, 0x0);

2306 
	`mii_mgr_wrôe
(0, 13, 0x1f);

2307 
	`mii_mgr_wrôe
(0, 14, 0x40d);

2308 
	`mii_mgr_wrôe
(0, 13, 0x401f);

2309 
	`mii_mgr_wrôe
(0, 14, 0x2020);

2311 
	`mii_mgr_wrôe
(0, 13, 0x1f);

2312 
	`mii_mgr_wrôe
(0, 14, 0x40e);

2313 
	`mii_mgr_wrôe
(0, 13, 0x401f);

2314 
	`mii_mgr_wrôe
(0, 14, 0x119);

2316 
	`mii_mgr_wrôe
(0, 13, 0x1f);

2317 
	`mii_mgr_wrôe
(0, 14, 0x40d);

2318 
	`mii_mgr_wrôe
(0, 13, 0x401f);

2319 
	`mii_mgr_wrôe
(0, 14, 0x2820);

2321 
	`udñay
(20);

2323 
	`mii_mgr_wrôe
(0, 13, 0x1f);

2324 
	`mii_mgr_wrôe
(0, 14, 0x410);

2325 
	`mii_mgr_wrôe
(0, 13, 0x401f);

2326 
	`mii_mgr_wrôe
(0, 14, 0x1);

2333 
	`mii_mgr_wrôe
(31, 0x7a54, 0x44);

2334 
	`mii_mgr_wrôe
(31, 0x7a5c, 0x44);

2335 
	`mii_mgr_wrôe
(31, 0x7a64, 0x44);

2336 
	`mii_mgr_wrôe
(31, 0x7a6c, 0x44);

2337 
	`mii_mgr_wrôe
(31, 0x7a74, 0x44);

2338 
	`mii_mgr_wrôe
(31, 0x7a7c, 0x44);

2341 
i
=0;i<=4;i++)

2343 
	`mii_mgr_wrôe
(
i
, 13, 0x7);

2344 
	`mii_mgr_wrôe
(
i
, 14, 0x3C);

2345 
	`mii_mgr_wrôe
(
i
, 13, 0x4007);

2346 
	`mii_mgr_wrôe
(
i
, 14, 0x0);

2350 
i
=0;i<=4;i++)

2352 
	`mii_mgr_wrôe
(
i
, 13, 0x1f);

2353 
	`mii_mgr_wrôe
(
i
, 14, 0x027b);

2354 
	`mii_mgr_wrôe
(
i
, 13, 0x401f);

2355 
	`mii_mgr_wrôe
(
i
, 14, 0x1177);

2358 
i
=0;i<=4;i++)

2361 
	`mii_mgr_ªad
(
i
, 0x0 ,&
ªgVÆue
);

2362 
ªgVÆue
 &= ~(0x1<<11);

2363 
	`mii_mgr_wrôe
(
i
, 0x0, 
ªgVÆue
);

2366 #ifde‡
MT7621_USE_GE2


2367 
	`mii_mgr_wrôe
(31, 0x7b00, 0x102);

2368 
	`mii_mgr_wrôe
(31, 0x7b04, 0x14);

2371 
i
=0;i<=4;i++) {

2372 
	`mii_mgr_ªad
(
i
, 4, &
ªgVÆue
);

2373 
ªgVÆue
 &= ~(3<<7);

2374 
	`mii_mgr_wrôe
(
i
, 4, 
ªgVÆue
);

2381 
	`mii_mgr_ªad
(
i
, 0, &
ªgVÆue
);

2382 
ªgVÆue
 |= (1 << 9);

2383 
	`mii_mgr_wrôe
(
i
, 0, 
ªgVÆue
);

2386 
	`mii_mgr_ªad
(31, 0x7808 ,&
ªgVÆue
);

2387 
ªgVÆue
 |= (3<<16);

2388 
	`mii_mgr_wrôe
(31, 0x7808 ,
ªgVÆue
);

2389 
	}
}

2396 
	$π2880_ëh_£tup
(
ëh_devi˚
* 
dev
)

2398 
u32
 
i
;

2399 
u32
 
ªgVÆue
;

2400 
u16
 
wTmp
;

2401 
uch¨
 *
ãmp
;

2403 
	`¥ötf
("\n Waitting for RX_DMA_BUSY status Start... ");

2405 if(!
	`isDMABusy
(
dev
))

2407 
	`¥ötf
("done\n\n");

2411 #i‡
	`deföed
 (
MAC_TO_GIGAPHY_MODE
)

2412 
	`íabÀ_auto_√gŸüã
();

2413 i‡(
	`isM¨vñlGigaPHY
(1)) {

2414 #i‡
	`deföed
 (
RT3883_FPGA_BOARD
)

2415 
	`¥ötf
("\n Reset MARVELLÖhy\n");

2416 
	`mii_mgr_ªad
(
MAC_TO_GIGAPHY_MODE_ADDR
, 9, &
ªgVÆue
);

2417 
ªgVÆue
 &= ~(3<<8);

2418 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR
, 9, 
ªgVÆue
);

2420 
	`mii_mgr_ªad
(
MAC_TO_GIGAPHY_MODE_ADDR
, 20, &
ªgVÆue
);

2421 
ªgVÆue
 |= 1<<7;

2422 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR
, 20, 
ªgVÆue
);

2424 
	`mii_mgr_ªad
(
MAC_TO_GIGAPHY_MODE_ADDR
, 0, &
ªgVÆue
);

2425 
ªgVÆue
 |= 1<<15;

2426 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR
, 0, 
ªgVÆue
);

2427 #ñi‡
	`deföed
 (
MT7621_FPGA_BOARD
)

2428 
	`mii_mgr_ªad
(
MAC_TO_GIGAPHY_MODE_ADDR
, 9, &
ªgVÆue
);

2429 
ªgVÆue
 &= ~(3<<8);

2430 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR
, 9, 
ªgVÆue
);

2432 
	`mii_mgr_ªad
(
MAC_TO_GIGAPHY_MODE_ADDR
, 0, &
ªgVÆue
);

2433 
ªgVÆue
 |= 1<<9;

2434 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR
, 0, 
ªgVÆue
);

2437 i‡(
	`isVtssGigaPHY
(1)) {

2438 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR
, 31, 1);

2439 
	`mii_mgr_ªad
(
MAC_TO_GIGAPHY_MODE_ADDR
, 28, &
ªgVÆue
);

2440 
	`¥ötf
("GE1 Vôes£ PhyÑeg28 %x --> ",
ªgVÆue
);

2441 
ªgVÆue
 |= (0x3<<12);

2442 
ªgVÆue
 &= ~(0x3<<14);

2443 
	`¥ötf
("%x (wôhouàª£àPHY)\n", 
ªgVÆue
);

2444 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR
, 28, 
ªgVÆue
);

2445 
	`mii_mgr_wrôe
(
MAC_TO_GIGAPHY_MODE_ADDR
, 31, 0);

2453 #i‡
	`deföed
 (
MT7621_FPGA_BOARD
Ë|| deföed (
MT7621_ASIC_BOARD
)

2454 #ifde‡
MT7621_USE_GE1


2455 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x100) = 0x20056300;

2456 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x200) = 0x00008000;

2457 
	`RALINK_REG
(
RT2880_SYSCFG1_REG
) &= ~(0x3 << 12);

2458 
	`RALINK_REG
(0xbe000060) &= ~(1 << 14);

2460 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x200) = 0x20056300;

2461 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x100) = 0x00008000;

2462 
	`RALINK_REG
(
RT2880_SYSCFG1_REG
) &= ~(0x3 << 14);

2463 
	`RALINK_REG
(0xbe000060) &= ~(1 << 15);

2468 #ñi‡
	`deföed
 (
RT3052_ASIC_BOARD
Ë|| deföed (
RT3052_FPGA_BOARD
) || \

2469 
	`deföed
 (
RT3352_ASIC_BOARD
Ë|| deföed (
RT3352_FPGA_BOARD
) || \

2470 
	`deföed
 (
RT5350_ASIC_BOARD
Ë|| deföed (
RT5350_FPGA_BOARD
) || \

2471 
	`deföed
 (
RT6855_ASIC_BOARD
Ë|| deföed (
RT6855_FPGA_BOARD
) || \

2472 
	`deföed
 (
RT6855A_ASIC_BOARD
Ë|| deföed (
RT6855A_FPGA_BOARD
) || \

2473 
	`deföed
 (
MT7620_ASIC_BOARD
Ë|| deföed (
MT7620_FPGA_BOARD
) || \

2474 
	`deföed
 (
MT7628_ASIC_BOARD
Ë|| deföed (
MT7628_FPGA_BOARD
)

2476 #ifde‡
P5_RGMII_TO_MAC_MODE


2478 
	`¥ötf
("\n Vitesse giga Mac support \n");

2479 
	`Re£tSWusögGPIOx
();

2480 
	`udñay
(125000);

2481 
	`vtss_öô
();

2486 #ñi‡
	`deföed
 (
MAC_TO_MT7530_MODE
)

2487 #i‡
	`deföed
 (
MT7621_FPGA_BOARD
Ë|| deföed (
NT7621_ASIC_BOARD
)

2489 
	`RALINK_REG
(0xbe000060) &= ~(1 << 12);

2490 
	`RALINK_REG
(0xbe000060) &= ~(1 << 14);

2491 
	`RALINK_REG
(0xbe000060) &= ~(1 << 15);

2494 #ñi‡
	`deföed
 (
MAC_TO_VITESSE_MODE
)

2495 
	`¥ötf
("\n Vitesse giga Mac support \n");

2496 
	`RALINK_REG
(
MDIO_CFG
)=
	`˝u_to_À32
((
u32
)(0x1F01DC01));

2497 
	`Re£tSWusögGPIOx
();

2498 
	`udñay
(125000);

2499 
	`vtss_öô
();

2502 #ñi‡
	`deföed
 (
MAC_TO_100SW_MODE
Ë|| deföed (
MAC_TO_100PHY_MODE
)

2504 #i‡
	`deföed
 (
RT3883_FPGA_BOARD
Ë|| deföed (
RT3883_ASIC_BOARD
)

2506 
ªgVÆue
 = 
	`RALINK_REG
(
RT2880_SYSCFG1_REG
);

2507 
ªgVÆue
 &= ~(0xF << 12);

2510 #i‡
	`deföed
 (
RT3883_USE_GE2
)

2511 #i‡
	`deföed
 (
GE_MII_FORCE_100
Ë|| deföed (
GE_MII_AN
)

2512 
ªgVÆue
 |= (0x1 << 14);

2513 #ñi‡
	`deföed
 (
GE_RVMII_FORCE_100
)

2514 
ªgVÆue
 |= (0x2 << 14);

2518 #i‡
	`deföed
 (
GE_MII_FORCE_100
Ë|| deföed (
GE_MII_AN
)

2519 
ªgVÆue
 |= (0x1 << 12);

2520 #ñi‡
	`deföed
 (
GE_RVMII_FORCE_100
)

2521 
ªgVÆue
 |= (0x2 << 12);

2526 
	`RALINK_REG
(
RT2880_SYSCFG1_REG
)=
ªgVÆue
;

2528 #ñi‡
	`deföed
 (
MT7621_FPGA_BOARD
Ë|| deföed (
MT7621_ASIC_BOARD
)

2529 #ifde‡
MT7621_USE_GE1


2530 #i‡
	`deföed
 (
GE_MII_FORCE_100
Ë|| deföed (
GE_RVMII_FORCE_100
)

2531 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x100) = 0x2005e337;

2532 
	`RALINK_REG
(
RT2880_SYSCFG1_REG
) &= ~(0x3 << 12);

2533 
	`RALINK_REG
(
RT2880_SYSCFG1_REG
) |= (0x1 << 12);

2534 #ñi‡
	`deföed
 (
GE_MII_AN
)

2535 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x100) = 0x20056300;

2536 
	`RALINK_REG
(
RT2880_SYSCFG1_REG
) &= ~(0x3 << 12);

2537 
	`RALINK_REG
(
RT2880_SYSCFG1_REG
) |= (0x1 << 12);

2538 
	`íabÀ_auto_√gŸüã
();

2541 #i‡
	`deföed
 (
GE_MII_FORCE_100
Ë|| deföed (
GE_RVMII_FORCE_100
)

2542 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x200) = 0x2005e337;

2543 
	`RALINK_REG
(
RT2880_SYSCFG1_REG
) &= ~(0x3 << 14);

2544 
	`RALINK_REG
(
RT2880_SYSCFG1_REG
) |= (0x1 << 14);

2545 #ñi‡
	`deföed
 (
GE_MII_AN
)

2546 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0x200) = 0x20056300;

2547 
	`RALINK_REG
(
RT2880_SYSCFG1_REG
) &= ~(0x3 << 14);

2548 
	`RALINK_REG
(
RT2880_SYSCFG1_REG
) |= (0x1 << 14);

2549 
	`íabÀ_auto_√gŸüã
();

2556 
	`RALINK_REG
(
MDIO_CFG
)=
	`˝u_to_À32
((
u32
)(0x1F01BC01));

2559 
	`mii_mgr_wrôe
(29, 22, 0x8420);

2564 #i‡
	`deföed
 (
RT3883_USE_GE2
Ë|| deföed (
MT7621_USE_GE2
)

2565 
wTmp
 = (
u16
)
dev
->
íëaddr
[0];

2566 
ªgVÆue
 = (
wTmp
 << 8Ë| 
dev
->
íëaddr
[1];

2567 
	`RALINK_REG
(
GDMA2_MAC_ADRH
)=
ªgVÆue
;

2569 
wTmp
 = (
u16
)
dev
->
íëaddr
[2];

2570 
ªgVÆue
 = (
wTmp
 << 8Ë| 
dev
->
íëaddr
[3];

2571 
ªgVÆue
 =ÑegValue << 16;

2572 
wTmp
 = (
u16
)
dev
->
íëaddr
[4];

2573 
ªgVÆue
 |(
wTmp
<<8Ë| 
dev
->
íëaddr
[5];

2574 
	`RALINK_REG
(
GDMA2_MAC_ADRL
)=
ªgVÆue
;

2576 
ªgVÆue
 = 
	`RALINK_REG
(
GDMA2_FWD_CFG
);

2578 
ªgVÆue
 =ÑegVÆuê& 
GDM_UFRC_P_CPU
;

2580 
ªgVÆue
 =ÑegVÆuê& 
GDM_BFRC_P_CPU
;

2582 
ªgVÆue
 =ÑegVÆuê& 
GDM_MFRC_P_CPU
;

2584 
ªgVÆue
 =ÑegVÆuê& 
GDM_OFRC_P_CPU
;

2586 
	`RALINK_REG
(
GDMA2_FWD_CFG
)=
ªgVÆue
;

2587 
	`udñay
(500);

2588 
ªgVÆue
 = 
	`RALINK_REG
(
GDMA2_FWD_CFG
);

2591 
wTmp
 = (
u16
)
dev
->
íëaddr
[0];

2592 
ªgVÆue
 = (
wTmp
 << 8Ë| 
dev
->
íëaddr
[1];

2594 #i‡
	`deföed
 (
RT5350_ASIC_BOARD
Ë|| deföed (
RT5350_FPGA_BOARD
Ë|| deföed (
MT7628_ASIC_BOARD
Ë|| deföed (
MT7628_FPGA_BOARD
)

2595 
	`RALINK_REG
(
SDM_MAC_ADRH
)=
ªgVÆue
;

2598 
	`RALINK_REG
(
GDMA1_MAC_ADRH
)=
ªgVÆue
;

2602 
wTmp
 = (
u16
)
dev
->
íëaddr
[2];

2603 
ªgVÆue
 = (
wTmp
 << 8Ë| 
dev
->
íëaddr
[3];

2604 
ªgVÆue
 =ÑegValue << 16;

2605 
wTmp
 = (
u16
)
dev
->
íëaddr
[4];

2606 
ªgVÆue
 |(
wTmp
<<8Ë| 
dev
->
íëaddr
[5];

2607 #i‡
	`deföed
 (
RT5350_ASIC_BOARD
Ë|| deföed (
RT5350_FPGA_BOARD
Ë|| deföed (
MT7628_ASIC_BOARD
Ë|| deföed (
MT7628_FPGA_BOARD
)

2608 
	`RALINK_REG
(
SDM_MAC_ADRL
)=
ªgVÆue
;

2611 
	`RALINK_REG
(
GDMA1_MAC_ADRL
)=
ªgVÆue
;

2619 #i‡! 
	`deföed
 (
RT5350_ASIC_BOARD
Ë&& ! deföed (
RT5350_FPGA_BOARD
Ë&& !deföed (
MT7628_ASIC_BOARD
Ë&& !deföed (
MT7628_FPGA_BOARD
)

2620 
ªgVÆue
 = 
	`RALINK_REG
(
GDMA1_FWD_CFG
);

2623 #i‡(
	`deföed
 (
MT7620_FPGA_BOARD
Ë|| deföed (
MT7620_ASIC_BOARD
))

2625 
ªgVÆue
 =ÑegValue & ~(0x7);

2628 
ªgVÆue
 =ÑegVÆuê& 
GDM_UFRC_P_CPU
;

2630 
ªgVÆue
 =ÑegVÆuê& 
GDM_BFRC_P_CPU
;

2632 
ªgVÆue
 =ÑegVÆuê& 
GDM_MFRC_P_CPU
;

2634 
ªgVÆue
 =ÑegVÆuê& 
GDM_OFRC_P_CPU
;

2637 
	`RALINK_REG
(
GDMA1_FWD_CFG
)=
ªgVÆue
;

2638 
	`udñay
(500);

2639 
ªgVÆue
 = 
	`RALINK_REG
(
GDMA1_FWD_CFG
);

2642 
ªgVÆue
 = 0x80504000;

2643 
	`RALINK_REG
(
PSE_FQFC_CFG
)=
ªgVÆue
;

2648 
i
 = 0; i < 
NUM_RX_DESC
; i++) {

2649 
ãmp
 = 
	`mem£t
((*)&
rx_rög
[
i
],0,16);

2650 
rx_rög
[
i
].
rxd_öfo2
.
DDONE_bô
 = 0;

2653 
BUFFER_ELEM
 *
buf
;

2654 
buf
 = 
	`π2880_‰ì_buf_íåy_dequeue
(&
π2880_‰ì_buf_li°
);

2655 
NëRxPackës
[
i
] = 
buf
->
pbuf
;

2656 #i‡
	`deföed
 (
RX_SCATTER_GATTER_DMA
)

2657 
rx_rög
[
i
].
rxd_öfo2
.
LS0
= 0;

2658 
rx_rög
[
i
].
rxd_öfo2
.
PLEN0

PKTSIZE_ALIGN
;

2660 
rx_rög
[
i
].
rxd_öfo2
.
LS0
= 1;

2662 
rx_rög
[
i
].
rxd_öfo1
.
PDP0
 = 
	`˝u_to_À32
(
	`phys_to_bus
((
u32
Ë
NëRxPackës
[i]));

2666 
i
=0; i < 
NUM_TX_DESC
; i++) {

2667 
ãmp
 = 
	`mem£t
((*)&
tx_rög0
[
i
],0,16);

2668 
tx_rög0
[
i
].
txd_öfo2
.
LS0_bô
 = 1;

2669 
tx_rög0
[
i
].
txd_öfo2
.
DDONE_bô
 = 1;

2677 #i‡
	`deföed
 (
RT3883_USE_GE2
)

2678 
tx_rög0
[
i
].
txd_öfo4
.
PN
 = 2;

2679 #ñi‡
	`deföed
 (
MT7621_USE_GE2
)

2680 
tx_rög0
[
i
].
txd_öfo4
.
FPORT
=2;

2681 #ñi‡
	`deföed
 (
MT7621_USE_GE1
)

2682 
tx_rög0
[
i
].
txd_öfo4
.
FPORT
=1;

2683 #ñi‡
	`deföed
 (
MT7620_ASIC_BOARD
Ë|| deföed (
MT7620_FPGA_BOARD
)

2684 
tx_rög0
[
i
].
txd_öfo4
.
FP_BMAP
=0x0;

2686 
tx_rög0
[
i
].
txd_öfo4
.
PN
 = 1;

2690 
rxRögSize
 = 
NUM_RX_DESC
;

2691 
txRögSize
 = 
NUM_TX_DESC
;

2693 
rx_dma_ow√r_idx0
 = 0;

2694 
rx_w™ts_Æloc_idx0
 = (
NUM_RX_DESC
 - 1);

2695 
tx_˝u_ow√r_idx0
 = 0;

2697 
ªgVÆue
=
	`RALINK_REG
(
PDMA_GLO_CFG
);

2698 
	`udñay
(100);

2701 
ªgVÆue
 &= 0x0000FFFF;

2703 
	`RALINK_REG
(
PDMA_GLO_CFG
)=
ªgVÆue
;

2704 
	`udñay
(500);

2705 
ªgVÆue
=
	`RALINK_REG
(
PDMA_GLO_CFG
);

2709 
	`RALINK_REG
(
RX_BASE_PTR0
)=
	`phys_to_bus
((
u32
Ë&
rx_rög
[0]);

2712 
	`RALINK_REG
(
TX_BASE_PTR0
)=
	`phys_to_bus
((
u32
Ë&
tx_rög0
[0]);

2716 
	`RALINK_REG
(
RX_MAX_CNT0
)=
	`˝u_to_À32
((
u32
Ë
NUM_RX_DESC
);

2717 
	`RALINK_REG
(
TX_MAX_CNT0
)=
	`˝u_to_À32
((
u32
Ë
NUM_TX_DESC
);

2719 
	`RALINK_REG
(
TX_CTX_IDX0
)=
	`˝u_to_À32
((
u32
Ë
tx_˝u_ow√r_idx0
);

2720 
	`RALINK_REG
(
PDMA_RST_IDX
)=
	`˝u_to_À32
((
u32
)
RST_DTX_IDX0
);

2722 
	`RALINK_REG
(
RX_CALC_IDX0
)=
	`˝u_to_À32
((
u32
Ë(
NUM_RX_DESC
 - 1));

2723 
	`RALINK_REG
(
PDMA_RST_IDX
)=
	`˝u_to_À32
((
u32
)
RST_DRX_IDX0
);

2725 
	`udñay
(500);

2726 
	`START_ETH
(
dev
);

2729 
	}
}

2732 
	$π2880_ëh_£nd
(
ëh_devi˚
* 
dev
, vﬁ©ûê*
∑ckë
, 
Àngth
)

2734 
°©us
 = -1;

2735 
i
;

2736 
ªåy_cou¡
 = 0, 
ãmp
;

2737 #i‡
	`deföed
 (
RT3052_FPGA_BOARD
Ë|| deföed (
RT3052_ASIC_BOARD
) || \

2738 
	`deföed
 (
RT3352_ASIC_BOARD
Ë|| deföed (
RT3352_FPGA_BOARD
) || \

2739 
	`deföed
 (
RT5350_ASIC_BOARD
Ë|| deföed (
RT5350_FPGA_BOARD
) || \

2740 
	`deföed
 (
RT3883_ASIC_BOARD
Ë|| deföed (
RT3883_FPGA_BOARD
) || \

2741 
	`deföed
 (
MT7628_ASIC_BOARD
Ë|| deföed (
MT7628_FPGA_BOARD
)

2742 *
p
=(*)
∑ckë
;

2745 
Rëry
:

2746 i‡(
ªåy_cou¡
 > 10) {

2747  (
°©us
);

2750 i‡(
Àngth
 <= 0) {

2751 
	`¥ötf
("%s: badÖackë size: %d\n", 
dev
->
«me
, 
Àngth
);

2752  (
°©us
);

2755 #i‡
	`deföed
 (
RT3052_FPGA_BOARD
Ë|| deföed (
RT3052_ASIC_BOARD
) || \

2756 
	`deföed
 (
RT3352_ASIC_BOARD
Ë|| deföed (
RT3352_FPGA_BOARD
) || \

2757 
	`deföed
 (
RT5350_ASIC_BOARD
Ë|| deföed (
RT5350_FPGA_BOARD
) || \

2758 
	`deföed
 (
RT3883_ASIC_BOARD
Ë|| deföed (
RT3883_FPGA_BOARD
) || \

2759 
	`deföed
 (
MT7628_ASIC_BOARD
Ë|| deföed (
MT7628_FPGA_BOARD
)

2760 
	#PADDING_LENGTH
 60

	)

2761 i‡(
Àngth
 < 
PADDING_LENGTH
) {

2763 
i
=0;i<
PADDING_LENGTH
-
Àngth
;i++) {

2764 
p
[
Àngth
+
i
]=0;

2766 
Àngth
 = 
PADDING_LENGTH
;

2770 
i
 = 0; 
tx_rög0
[
tx_˝u_ow√r_idx0
].
txd_öfo2
.
DDONE_bô
 == 0 ; i++)

2773 i‡(
i
 >
TOUT_LOOP
) {

2775 
D⁄e
;

2780 
ãmp
 = 
	`RALINK_REG
(
TX_DTX_IDX0
);

2782 if(
ãmp
 =(
tx_˝u_ow√r_idx0
+1Ë% 
NUM_TX_DESC
) {

2783 
	`puts
(" @ ");

2784 
D⁄e
;

2787 
tx_rög0
[
tx_˝u_ow√r_idx0
].
txd_öfo1
.
SDP0
 = 
	`˝u_to_À32
(
	`phys_to_bus
((
u32
Ë
∑ckë
));

2788 
tx_rög0
[
tx_˝u_ow√r_idx0
].
txd_öfo2
.
SDL0
 = 
Àngth
;

2791 
	`¥ötf
("==========TX==========(CTX=%d)\n",
tx_˝u_ow√r_idx0
);

2792 
	`¥ötf
("tx_rög0[tx_˝u_ow√r_idx0].txd_öfo1 =%x\n",
tx_rög0
[
tx_˝u_ow√r_idx0
].
txd_öfo1
);

2793 
	`¥ötf
("tx_rög0[tx_˝u_ow√r_idx0].txd_öfo2 =%x\n",
tx_rög0
[
tx_˝u_ow√r_idx0
].
txd_öfo2
);

2794 
	`¥ötf
("tx_rög0[tx_˝u_ow√r_idx0].txd_öfo3 =%x\n",
tx_rög0
[
tx_˝u_ow√r_idx0
].
txd_öfo3
);

2795 
	`¥ötf
("tx_rög0[tx_˝u_ow√r_idx0].txd_öfo4 =%x\n",
tx_rög0
[
tx_˝u_ow√r_idx0
].
txd_öfo4
);

2798 
tx_rög0
[
tx_˝u_ow√r_idx0
].
txd_öfo2
.
DDONE_bô
 = 0;

2799 
°©us
 = 
Àngth
;

2801 
tx_˝u_ow√r_idx0
 = (tx_˝u_ow√r_idx0+1Ë% 
NUM_TX_DESC
;

2802 
	`RALINK_REG
(
TX_CTX_IDX0
)=
	`˝u_to_À32
((
u32
Ë
tx_˝u_ow√r_idx0
);

2804  
°©us
;

2805 
D⁄e
:

2806 
	`udñay
(500);

2807 
ªåy_cou¡
++;

2808 
Rëry
;

2809 
	}
}

2812 
	$π2880_ëh_ªcv
(
ëh_devi˚
* 
dev
)

2814 
Àngth
 = 0,
hdr_Àn
=0,
bb
=0;

2815 
öãr_lo›back_˙t
 =0;

2816 
u32
 *
rxd_öfo
;

2817 #i‡!
	`deföed
 (
RT3883_FPGA_BOARD
Ë&& !deföed (
RT3883_ASIC_BOARD
)

2818 
u8
 
ãmp_mac
[6];

2822 
rxd_öfo
 = (
u32
 *)
	`KSEG1ADDR
(&
rx_rög
[
rx_dma_ow√r_idx0
].
rxd_öfo2
);

2824 i‡–(*
rxd_öfo
 & 
	`BIT
(31)) == 0 )

2826 
hdr_Àn
 =0;

2830 
	`udñay
(1);

2831 
Àngth
 = 
rx_rög
[
rx_dma_ow√r_idx0
].
rxd_öfo2
.
PLEN0
;

2833 if(
Àngth
 == 0)

2835 
	`¥ötf
("\n Warring!! Packet Length hasÉrror !!,InÇormal mode !\n");

2838 #i‡
	`deföed
 (
PDMA_NEW
)

2839 if(
rx_rög
[
rx_dma_ow√r_idx0
].
rxd_öfo4
.
SP
 == 6)

2841 if(
rx_rög
[
rx_dma_ow√r_idx0
].
rxd_öfo4
.
SP
 == 0)

2844 
	`¥ötf
("\¿N‹mÆ Mode,PackëÑe˚ived from CPUÖ‹t,∂í=%d \n",
Àngth
);

2846 
öãr_lo›back_˙t
++;

2847 
Àngth
 = 
öãr_lo›back_˙t
;

2850 
	`NëRe˚ive
((*)
	`KSEG1ADDR
(
NëRxPackës
[
rx_dma_ow√r_idx0
]), 
Àngth
 );

2853 #i‡ 
	`deföed
 (
RX_SCATTER_GATTER_DMA
)

2854 
rx_rög
[
rx_dma_ow√r_idx0
].
rxd_öfo2
.
DDONE_bô
 = 0;

2855 
rx_rög
[
rx_dma_ow√r_idx0
].
rxd_öfo2
.
LS0
= 0;

2856 
rx_rög
[
rx_dma_ow√r_idx0
].
rxd_öfo2
.
PLEN0

PKTSIZE_ALIGN
;

2858 
rxd_öfo
 = (
u32
 *)&
rx_rög
[
rx_dma_ow√r_idx0
].
rxd_öfo4
;

2859 *
rxd_öfo
 = 0;

2861 
rxd_öfo
 = (
u32
 *)&
rx_rög
[
rx_dma_ow√r_idx0
].
rxd_öfo2
;

2862 *
rxd_öfo
 = 0;

2863 
rx_rög
[
rx_dma_ow√r_idx0
].
rxd_öfo2
.
LS0
= 1;

2867 
	`¥ötf
("=====RX=======(CALC=%d LEN=%d)\n",
rx_dma_ow√r_idx0
, 
Àngth
);

2868 
	`¥ötf
("rx_rög[rx_dma_ow√r_idx0].rxd_öfo1 =%x\n",
rx_rög
[
rx_dma_ow√r_idx0
].
rxd_öfo1
);

2869 
	`¥ötf
("rx_rög[rx_dma_ow√r_idx0].rxd_öfo2 =%x\n",
rx_rög
[
rx_dma_ow√r_idx0
].
rxd_öfo2
);

2870 
	`¥ötf
("rx_rög[rx_dma_ow√r_idx0].rxd_öfo3 =%x\n",
rx_rög
[
rx_dma_ow√r_idx0
].
rxd_öfo3
);

2871 
	`¥ötf
("rx_rög[rx_dma_ow√r_idx0].rxd_öfo4 =%x\n",
rx_rög
[
rx_dma_ow√r_idx0
].
rxd_öfo4
);

2874 
	`RALINK_REG
(
RX_BASE_PTR0
)=
	`phys_to_bus
((
u32
Ë&
rx_rög
[0]);

2878 
	`RALINK_REG
(
RX_CALC_IDX0
)=
	`˝u_to_À32
((
u32
Ë
rx_dma_ow√r_idx0
);

2882 
rx_dma_ow√r_idx0
 = (rx_dma_ow√r_idx0 + 1Ë% 
NUM_RX_DESC
;

2889  
Àngth
;

2890 
	}
}

2892 
	$π2880_ëh_hÆt
(
ëh_devi˚
* 
dev
)

2894 
	`STOP_ETH
(
dev
);

2898 
	}
}

2901 
	$¥öt_∑ckë
–
u8
 * 
buf
, 
Àngth
 )

2904 
i
;

2905 
ªmaödî
;

2906 
löes
;

2909 
	`¥ötf
("Packë o‡Àngth %d \n", 
Àngth
 );

2912 
löes
 = 
Àngth
 / 16;

2913 
ªmaödî
 = 
Àngth
 % 16;

2915  
i
 = 0; i < 
löes
 ; i ++ ) {

2916 
cur
;

2918  
cur
 = 0; cur < 8; cur ++ ) {

2919 
u8
 
a
, 
b
;

2921 
a
 = *(
buf
 ++ );

2922 
b
 = *(
buf
 ++ );

2923 
	`¥ötf
("%02X %02X ", 
a
, 
b
 );

2925 
	`¥ötf
("\n");

2927  
i
 = 0; i < 
ªmaödî
/2 ; i++ ) {

2928 
u8
 
a
, 
b
;

2930 
a
 = *(
buf
 ++ );

2931 
b
 = *(
buf
 ++ );

2932 
	`¥ötf
("%02X %02X ", 
a
, 
b
 );

2934 
	`¥ötf
("\n");

2936 
	}
}

2939 #ifde‡
RT2880_U_BOOT_CMD_OPEN


2940 #i‡
deföed
 (
RT3883_FPGA_BOARD
Ë|| deföed (
RT3883_ASIC_BOARD
)

2941 
	$π3883_öô_gdma
(
mode
)

2943 
u32
 
ªg
;

2944 
u16
 
tmp
;

2946 i‡(
mode
 == 0) {

2947 
ªg
 = 
	`RALINK_REG
(
GDMA1_FWD_CFG
);

2948 
ªg
 &(
GDM_UFRC_P_CPU
 & 
GDM_BFRC_P_CPU
 & 
GDM_MFRC_P_CPU
 & 
GDM_OFRC_P_CPU
);

2949 
	`RALINK_REG
(
GDMA1_FWD_CFG
)=
	`˝u_to_À32
((
u32
)
ªg
);

2951 
ªg
 = 
	`RALINK_REG
(
GDMA2_FWD_CFG
);

2952 
ªg
 &(
GDM_UFRC_P_CPU
 & 
GDM_BFRC_P_CPU
 & 
GDM_MFRC_P_CPU
 & 
GDM_OFRC_P_CPU
);

2953 
	`RALINK_REG
(
GDMA2_FWD_CFG
)=
	`˝u_to_À32
((
u32
)
ªg
);

2956 i‡(
mode
 == 1) {

2957 
ªg
 = 
	`RALINK_REG
(
GDMA1_FWD_CFG
);

2958 
ªg
 &(
GDM_UFRC_P_CPU
 & 
GDM_BFRC_P_CPU
 & 
GDM_MFRC_P_CPU
 & 
GDM_OFRC_P_CPU
);

2959 
ªg
 |(
GDM_UFRC_P_GDMA2
 | 
GDM_BFRC_P_GDMA2
 | 
GDM_MFRC_P_GDMA2
 | 
GDM_OFRC_P_GDMA2
);

2960 
	`RALINK_REG
(
GDMA1_FWD_CFG
)=
	`˝u_to_À32
((
u32
)
ªg
);

2962 
ªg
 = 
	`RALINK_REG
(
GDMA2_FWD_CFG
);

2963 
ªg
 &(
GDM_UFRC_P_CPU
 & 
GDM_BFRC_P_CPU
 & 
GDM_MFRC_P_CPU
 & 
GDM_OFRC_P_CPU
);

2964 
ªg
 |(
GDM_UFRC_P_GDMA1
 | 
GDM_BFRC_P_GDMA1
 | 
GDM_MFRC_P_GDMA1
 | 
GDM_OFRC_P_GDMA1
);

2965 
	`RALINK_REG
(
GDMA2_FWD_CFG
)=
	`˝u_to_À32
((
u32
)
ªg
);

2969 
tmp
 = (
u16
)
π2880_pdev
->
íëaddr
[0];

2970 
ªg
 = (
tmp
 << 8Ë| 
π2880_pdev
->
íëaddr
[1];

2971 
	`RALINK_REG
(
GDMA1_MAC_ADRH
)=
ªg
;

2973 
tmp
 = (
u16
)
π2880_pdev
->
íëaddr
[2];

2974 
ªg
 = (
tmp
 << 8Ë| 
π2880_pdev
->
íëaddr
[3];

2975 
ªg
 =Ñeg << 16;

2976 
tmp
 = (
u16
)
π2880_pdev
->
íëaddr
[4];

2978 
ªg
 |(
tmp
<<8) | 1;

2979 
	`RALINK_REG
(
GDMA1_MAC_ADRL
)=
ªg
;

2981 
tmp
 = (
u16
)
π2880_pdev
->
íëaddr
[0];

2982 
ªg
 = (
tmp
 << 8Ë| 
π2880_pdev
->
íëaddr
[1];

2983 
	`RALINK_REG
(
GDMA2_MAC_ADRH
)=
ªg
;

2985 
tmp
 = (
u16
)
π2880_pdev
->
íëaddr
[2];

2986 
ªg
 = (
tmp
 << 8Ë| 
π2880_pdev
->
íëaddr
[3];

2987 
ªg
 =Ñeg << 16;

2988 
tmp
 = (
u16
)
π2880_pdev
->
íëaddr
[4];

2990 
ªg
 |(
tmp
<<8) | 2;

2991 
	`RALINK_REG
(
GDMA2_MAC_ADRL
)=
ªg
;

2994 
ªg
 = 
	`RALINK_REG
(
MDIO_CFG
);

2995 
ªg
 |= 0x20000000;

2996 
	`RALINK_REG
(
MDIO_CFG
)=
ªg
;

2998 
	#MDIO_CFG2
 
RALINK_FRAME_ENGINE_BASE
 + 0x18

	)

2999 
ªg
 = 
	`RALINK_REG
(
MDIO_CFG2
);

3000 
ªg
 |= 0x20000000;

3001 
	`RALINK_REG
(
MDIO_CFG2
)=
ªg
;

3002 
	}
}

3004 
	$π3883_ª£t_phy
()

3007 
	`mii_mgr_wrôe
(31, 20, 0x0ce0);

3008 #ifde‡
RT3883_FPGA_BOARD


3009 
	`mii_mgr_wrôe
(31, 9, 0);

3011 
	`mii_mgr_wrôe
(31, 0, 0x9140);

3012 
	`mii_mgr_wrôe
(30, 20, 0x0ce0);

3013 #ifde‡
RT3883_FPGA_BOARD


3014 
	`mii_mgr_wrôe
(30, 9, 0);

3016 
	`mii_mgr_wrôe
(30, 0, 0x9140);

3017 
	}
}

3019 
	$do_π3883_p£lo›back
(
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

3021 
	`¥ötf
("RT3883 PSEÜoopback mode!\n");

3022 
	`π3883_öô_gdma
(1);

3023 
	`π3883_ª£t_phy
();

3025 
	}
}

3027 
U_BOOT_CMD
(

3028 
p£lo›
, 1, 1, 
do_π3883_p£lo›back
,

3036 
	gîa£_£q
[] = "\b \b";

3037 
	gèb_£q
[] = " ";

3039 * 
	$dñëe_ch¨
 (*
buf„r
, *
p
, *
cﬁp
, *
≈
, 
∂í
)

3041 *
s
;

3043 i‡(*
≈
 == 0) {

3044  (
p
);

3047 i‡(*(--
p
) == '\t') {

3048 *
cﬁp
 > 
∂í
) {

3049 
	`puts
 (
îa£_£q
);

3050 (*
cﬁp
)--;

3052 
s
=
buf„r
; s<
p
; ++s) {

3053 i‡(*
s
 == '\t') {

3054 
	`puts
 (
èb_£q
+((*
cﬁp
) & 07));

3055 *
cﬁp
 += 8 - ((*colp) & 07);

3057 ++(*
cﬁp
);

3058 
	`putc
 (*
s
);

3062 
	`puts
 (
îa£_£q
);

3063 (*
cﬁp
)--;

3065 (*
≈
)--;

3066  (
p
);

3067 
	}
}

3077 
	$ªadlöe
 (c⁄° *c⁄° 
¥om±
, 
show_buf
)

3079 *
p
 = 
c⁄sﬁe_buf„r
;

3080 
n
 = 0;

3081 
∂í
 = 0;

3082 
cﬁ
;

3083 
c
;

3086 i‡(
¥om±
) {

3087 
∂í
 = 
	`°æí
 (
¥om±
);

3088 
	`puts
 (
¥om±
);

3090 i‡(
show_buf
) {

3091 
	`puts
 (
p
);

3092 
n
 = 
	`°æí
(
p
);

3093 
cﬁ
 = 
∂í
 + 
	`°æí
(
p
);

3094 
p
 +
	`°æí
(p);

3097 
cﬁ
 = 
∂í
;

3100 #ifde‡
CONFIG_BOOT_RETRY_TIME


3101 !
	`t°c
()) {

3102 i‡(
ªåy_time
 >0 && 
	`gë_ticks
(Ë> 
ídtime
)

3108 #ifde‡
CONFIG_SHOW_ACTIVITY


3109 !
	`t°c
()) {

3110 
	`show_a˘ivôy
(
¨g
);

3111 
	`show_a˘ivôy
(0);

3114 
c
 = 
	`gëc
();

3119 
c
) {

3122 *
p
 = '\0';

3123 
	`puts
 ("\r\n");

3124 #ifde‡
CONFIG_CMD_HISTORY


3125 i‡(
hi°‹y_cou¡î
 < 
HISTORY_SIZE
) history_counter++;

3126 
hi°‹y_œ°_idx
++;

3127 
hi°‹y_œ°_idx
 %
HISTORY_SIZE
;

3128 
hi°‹y_cur_idx
 = 
hi°‹y_œ°_idx
;

3129 
	`°r˝y
(&
c⁄sﬁe_hi°‹y
[
hi°‹y_œ°_idx
][0], 
c⁄sﬁe_buf„r
);

3131  (
p
 - 
c⁄sﬁe_buf„r
);

3137 
c⁄sﬁe_buf„r
[0] = '\0';

3141 
cﬁ
 > 
∂í
) {

3142 
	`puts
 (
îa£_£q
);

3143 --
cﬁ
;

3145 
p
 = 
c⁄sﬁe_buf„r
;

3146 
n
 = 0;

3150 
p
=
	`dñëe_ch¨
(
c⁄sﬁe_buf„r
,Ö, &
cﬁ
, &
n
, 
∂í
);

3151 (
n
 > 0Ë&& (*
p
 != ' ')) {

3152 
p
=
	`dñëe_ch¨
(
c⁄sﬁe_buf„r
,Ö, &
cﬁ
, &
n
, 
∂í
);

3158 
p
=
	`dñëe_ch¨
(
c⁄sﬁe_buf„r
,Ö, &
cﬁ
, &
n
, 
∂í
);

3161 #ifde‡
CONFIG_CMD_HISTORY


3163 
hi°‹y_íabÀ
 = 1;

3166 i‡(
hi°‹y_íabÀ
 == 0)

3167 
n‹mÆ_c⁄d
;

3171 i‡(
hi°‹y_íabÀ
 == 0)

3172 
n‹mÆ_c⁄d
;

3174 i‡(
hi°‹y_œ°_idx
 == -1)

3177 i‡(
c
 == 0x41) {

3178 i‡(
hi°‹y_cur_idx
 > 0)

3179 
hi°‹y_cur_idx
--;

3181 
hi°‹y_cur_idx
 = 
hi°‹y_cou¡î
-1;

3183 i‡(
hi°‹y_cur_idx
 < 
hi°‹y_cou¡î
-1)

3184 
hi°‹y_cur_idx
++;

3186 
hi°‹y_cur_idx
 = 0;

3189 
cﬁ
 > 
∂í
) {

3190 
	`puts
 (
îa£_£q
);

3191 --
cﬁ
;

3193 
	`°r˝y
(
c⁄sﬁe_buf„r
, &
c⁄sﬁe_hi°‹y
[
hi°‹y_cur_idx
][0]);

3194 
	`puts
(
c⁄sﬁe_buf„r
);

3195 
n
 = 
	`°æí
(
c⁄sﬁe_buf„r
);

3196 
p
 = 
c⁄sﬁe_buf„r
+
n
;

3197 
cﬁ
 = 
n
+
∂í
;

3198 
hi°‹y_íabÀ
 = 0;

3200 
n‹mÆ_c⁄d
:

3206 #ifde‡
CONFIG_CMD_HISTORY


3207 
hi°‹y_íabÀ
 = 0;

3209 i‡(
n
 < 
CFG_CBSIZE
-2) {

3210 i‡(
c
 == '\t') {

3211 #ifde‡
CONFIG_AUTO_COMPLETE


3213 *
p
 = '\0';

3214 i‡(
	`cmd_auto_com∂ëe
(
¥om±
, 
c⁄sﬁe_buf„r
, &
n
, &
cﬁ
)) {

3215 
p
 = 
c⁄sﬁe_buf„r
 + 
n
;

3219 
	`puts
 (
èb_£q
+(
cﬁ
&07));

3220 
cﬁ
 += 8 - (col&07);

3222 ++
cﬁ
;

3223 
	`putc
 (
c
);

3225 *
p
++ = 
c
;

3226 ++
n
;

3228 
	`putc
 ('\a');

3232 
	}
}

3234 
	$öput_vÆue
(
u8
 *
°r
)

3236 i‡(
°r
)

3237 
	`°r˝y
(
c⁄sﬁe_buf„r
, 
°r
);

3239 
c⁄sﬁe_buf„r
[0] = '\0';

3242 i‡(
	`ªadlöe
 ("==:", 1) > 0)

3244 
	`°r˝y
 (
°r
, 
c⁄sﬁe_buf„r
);

3250 
	}
}

3252 #ifde‡
RALINK_SWITCH_DEBUG_FUN


3253 
	#RALINK_VLAN_ID_BASE
 (
RALINK_ETH_SW_BASE
 + 0x50)

	)

3254 
	#RALINK_VLAN_MEMB_BASE
 (
RALINK_ETH_SW_BASE
 + 0x70)

	)

3256 
	#RALINK_TABLE_SEARCH
 (
RALINK_ETH_SW_BASE
 + 0x24)

	)

3257 
	#RALINK_TABLE_STATUS0
 (
RALINK_ETH_SW_BASE
 + 0x28)

	)

3258 
	#RALINK_TABLE_STATUS1
 (
RALINK_ETH_SW_BASE
 + 0x2c)

	)

3259 
	#RALINK_TABLE_STATUS2
 (
RALINK_ETH_SW_BASE
 + 0x30)

	)

3260 
	#RALINK_WT_MAC_AD0
 (
RALINK_ETH_SW_BASE
 + 0x34)

	)

3261 
	#RALINK_WT_MAC_AD1
 (
RALINK_ETH_SW_BASE
 + 0x38)

	)

3262 
	#RALINK_WT_MAC_AD2
 (
RALINK_ETH_SW_BASE
 + 0x3C)

	)

3263 
	#RALINK_WT_MAC_AD2
 (
RALINK_ETH_SW_BASE
 + 0x3C)

	)

3265 
	$èbÀ_dump
()

3267 
i
, 
j
, 
vÆue
, 
mac
;

3268 
vid
[16];

3270 
i
 = 0; i < 8; i++) {

3271 
vÆue
 = 
	`RALINK_REG
(
RALINK_VLAN_ID_BASE
 + 4*
i
);

3272 
vid
[2 * 
i
] = 
vÆue
 & 0xfff;

3273 
vid
[2 * 
i
 + 1] = (
vÆue
 & 0xfff000) >> 12;

3276 
	`RALINK_REG
(
RALINK_TABLE_SEARCH
) = 0x1;

3277 
	`¥ötf
("hashÖort(0:6) vidx vidáge mac-address filt\n");

3278 
i
 = 0; i < 0x400; i++) {

3280 
vÆue
 = 
	`RALINK_REG
(
RALINK_TABLE_STATUS0
);

3281 i‡(
vÆue
 & 0x1) {

3282 i‡((
vÆue
 & 0x70) == 0) {

3283 
	`¥ötf
("foundán unusedÉntry (age = 3'b000),Ölease check!\n");

3286 
	`¥ötf
("%03x: ", (
vÆue
 >> 22) & 0x3ff);

3287 
j
 = (
vÆue
 >> 12) & 0x7f;

3288 
	`¥ötf
("%c", (
j
 & 0x01)? '1':'-');

3289 
	`¥ötf
("%c", (
j
 & 0x02)? '1':'-');

3290 
	`¥ötf
("%c", (
j
 & 0x04)? '1':'-');

3291 
	`¥ötf
("%c", (
j
 & 0x08)? '1':'-');

3292 
	`¥ötf
("%¯", (
j
 & 0x10)? '1':'-');

3293 
	`¥ötf
("%c", (
j
 & 0x20)? '1':'-');

3294 
	`¥ötf
("%c", (
j
 & 0x40)? '1':'-');

3295 
	`¥ötf
(" %2d", (
vÆue
 >> 7) & 0xf);

3296 
	`¥ötf
(" %4d", 
vid
[(
vÆue
 >> 7) & 0xf]);

3297 
	`¥ötf
(" %1d", (
vÆue
 >> 4) & 0x7);

3298 
mac
 = 
	`RALINK_REG
(
RALINK_TABLE_STATUS2
);

3299 
	`¥ötf
(" %08x", 
mac
);

3300 
mac
 = 
	`RALINK_REG
(
RALINK_TABLE_STATUS1
);

3301 
	`¥ötf
("%04x", (
mac
 & 0xffff));

3302 
	`¥ötf
(" %c\n", (
vÆue
 & 0x8)? 'y':'-');

3303 i‡(
vÆue
 & 0x2) {

3304 
	`¥ötf
("íd o‡èbÀ %d\n", 
i
);

3309 i‡(
vÆue
 & 0x2) {

3310 
	`¥ötf
("foundÅhêœ°É¡ry %d (nŸÑódy)\n", 
i
);

3313 
	`udñay
(5000);

3315 
	`RALINK_REG
(
RALINK_TABLE_SEARCH
) = 0x2;

3317 
	}
}

3319 
	$èbÀ_add
(
¨gc
, *
¨gv
[])

3321 
i
, 
j
, 
vÆue
, 
is_fûãr
;

3322 
tmp°r
[9];

3324 
is_fûãr
 = (
¨gv
[1][0] == 'f')? 1 : 0;

3325 i‡(!
¨gv
[2] || 
	`°æí
(argv[2]) != 12) {

3326 
	`¥ötf
("MACáddress formatÉrror, should be ofÜength 12\n");

3329 
	`°∫˝y
(
tmp°r
, 
¨gv
[2], 8);

3330 
tmp°r
[8] = '\0';

3331 
vÆue
 = 
	`sim∂e_°πoul
(
tmp°r
, 
NULL
, 16);

3332 
	`RALINK_REG
(
RALINK_WT_MAC_AD2
Ë
vÆue
;

3334 
	`°∫˝y
(
tmp°r
, 
¨gv
[2]+8, 4);

3335 
tmp°r
[4] = '\0';

3336 
vÆue
 = 
	`sim∂e_°πoul
(
tmp°r
, 
NULL
, 16);

3337 
	`RALINK_REG
(
RALINK_WT_MAC_AD1
Ë
vÆue
;

3339 i‡(!
¨gv
[3] || 
	`°æí
(argv[3]) != 7) {

3340 i‡(
is_fûãr
)

3341 
¨gv
[3] = "1111111";

3343 
	`¥ötf
("portmap formatÉrror, should be ofÜength 7\n");

3347 
j
 = 0;

3348 
i
 = 0; i < 7; i++) {

3349 i‡(
¨gv
[3][
i
] != '0' &&árgv[3][i] != '1') {

3350 
	`¥ötf
("portmap formatÉrror, should be of combination of 0 or 1\n");

3353 
j
 +(
¨gv
[3][
i
] - '0') * (1 << i);

3355 
vÆue
 = 
j
 << 12;

3357 i‡(
¨gc
 > 4) {

3358 
j
 = 
	`sim∂e_°πoul
(
¨gv
[4], 
NULL
, 0);

3359 i‡(
j
 < 0 || 15 < j) {

3360 
	`¥ötf
("wrong member indexÑange, should be within 0~15\n");

3363 
vÆue
 +(
j
 << 7);

3366 i‡(
¨gc
 > 5) {

3367 
j
 = 
	`sim∂e_°πoul
(
¨gv
[5], 
NULL
, 0);

3368 i‡(
j
 < 1 || 7 < j) {

3369 
	`¥ötf
("wrongágeÑange, should be within 1~7\n");

3372 
vÆue
 +(
j
 << 4);

3375 
vÆue
 += (7 << 4);

3377 i‡(
is_fûãr
)

3378 
vÆue
 |= (1 << 3);

3380 
vÆue
 += 1;

3381 
	`RALINK_REG
(
RALINK_WT_MAC_AD0
Ë
vÆue
;

3383 
i
 = 0; i < 20; i++) {

3384 
vÆue
 = 
	`RALINK_REG
(
RALINK_WT_MAC_AD0
);

3385 i‡(
vÆue
 & 0x2) {

3386 
	`¥ötf
("done.\n");

3389 
	`udñay
(1000);

3391 i‡(
i
 == 20)

3392 
	`¥ötf
("timeout.\n");

3393 
	}
}

3395 
	$èbÀ_dñ
(
¨gc
, *
¨gv
[])

3397 
i
, 
j
, 
vÆue
;

3398 
tmp°r
[9];

3400 i‡(!
¨gv
[2] || 
	`°æí
(argv[2]) != 12) {

3401 
	`¥ötf
("MACáddress formatÉrror, should be ofÜength 12\n");

3404 
	`°∫˝y
(
tmp°r
, 
¨gv
[2], 8);

3405 
tmp°r
[8] = '\0';

3406 
vÆue
 = 
	`sim∂e_°πoul
(
tmp°r
, 
NULL
, 16);

3407 
	`RALINK_REG
(
RALINK_WT_MAC_AD2
Ë
vÆue
;

3409 
	`°∫˝y
(
tmp°r
, 
¨gv
[2]+8, 4);

3410 
tmp°r
[4] = '\0';

3411 
vÆue
 = 
	`sim∂e_°πoul
(
tmp°r
, 
NULL
, 16);

3412 
	`RALINK_REG
(
RALINK_WT_MAC_AD1
Ë
vÆue
;

3414 
vÆue
 = 0;

3415 i‡(
¨gc
 > 3) {

3416 
j
 = 
	`sim∂e_°πoul
(
¨gv
[3], 
NULL
, 0);

3417 i‡(
j
 < 0 || 15 < j) {

3418 
	`¥ötf
("wrong member indexÑange, should be within 0~15\n");

3421 
vÆue
 +(
j
 << 7);

3424 
vÆue
 += 1;

3425 
	`RALINK_REG
(
RALINK_WT_MAC_AD0
Ë
vÆue
;

3427 
i
 = 0; i < 20; i++) {

3428 
vÆue
 = 
	`RALINK_REG
(
RALINK_WT_MAC_AD0
);

3429 i‡(
vÆue
 & 0x2) {

3430 i‡(
¨gv
[1] !
NULL
)

3431 
	`¥ötf
("done.\n");

3434 
	`udñay
(1000);

3436 i‡(
i
 == 20)

3437 
	`¥ötf
("timeout.\n");

3438 
	}
}

3440 
	$èbÀ_˛ór
()

3442 
i
, 
vÆue
, 
mac
;

3443 
v
[2][13];

3444 *
¨gv
[4];

3446 
	`mem£t
(
¨gv
, 0, (
v
));

3447 
	`mem£t
(
¨gv
, 0, (argv));

3449 
	`RALINK_REG
(
RALINK_TABLE_SEARCH
) = 0x1;

3450 
i
 = 0; i < 0x400; i++) {

3452 
vÆue
 = 
	`RALINK_REG
(
RALINK_TABLE_STATUS0
);

3453 i‡(
vÆue
 & 0x1) {

3454 i‡((
vÆue
 & 0x70) == 0) {

3457 
	`•rötf
(
v
[1], "%d", (
vÆue
 >> 7) & 0xf);

3458 
mac
 = 
	`RALINK_REG
(
RALINK_TABLE_STATUS2
);

3459 
	`•rötf
(
v
[0], "%08x", 
mac
);

3460 
mac
 = 
	`RALINK_REG
(
RALINK_TABLE_STATUS1
);

3461 
	`•rötf
(
v
[0]+8, "%04x", (
mac
 & 0xffff));

3462 
¨gv
[2] = 
v
[0];

3463 
¨gv
[3] = 
v
[1];

3464 
	`èbÀ_dñ
(4, 
¨gv
);

3465 i‡(
vÆue
 & 0x2) {

3470 i‡(
vÆue
 & 0x2) {

3473 
	`udñay
(5000);

3475 
	`RALINK_REG
(
RALINK_TABLE_SEARCH
) = 0x2;

3477 
	}
}

3479 
	$vœn_dump
()

3481 
i
, 
vid
, 
vÆue
;

3483 
	`¥ötf
("idx vidÖortmap\n");

3484 
i
 = 0; i < 8; i++) {

3485 
vid
 = 
	`RALINK_REG
(
RALINK_VLAN_ID_BASE
 + 4*
i
);

3486 
vÆue
 = 
	`RALINK_REG
(
RALINK_VLAN_MEMB_BASE
 + 4*(
i
/2));

3487 
	`¥ötf
(" %2d %4d ", 2*
i
, 
vid
 & 0xfff);

3488 i‡(
i
%2 == 0) {

3489 
	`¥ötf
("%c", (
vÆue
 & 0x00000001)? '1':'-');

3490 
	`¥ötf
("%c", (
vÆue
 & 0x00000002)? '1':'-');

3491 
	`¥ötf
("%c", (
vÆue
 & 0x00000004)? '1':'-');

3492 
	`¥ötf
("%c", (
vÆue
 & 0x00000008)? '1':'-');

3493 
	`¥ötf
("%c", (
vÆue
 & 0x00000010)? '1':'-');

3494 
	`¥ötf
("%c", (
vÆue
 & 0x00000020)? '1':'-');

3495 
	`¥ötf
("%c\n", (
vÆue
 & 0x00000040)? '1':'-');

3498 
	`¥ötf
("%c", (
vÆue
 & 0x00010000)? '1':'-');

3499 
	`¥ötf
("%c", (
vÆue
 & 0x00020000)? '1':'-');

3500 
	`¥ötf
("%c", (
vÆue
 & 0x00040000)? '1':'-');

3501 
	`¥ötf
("%c", (
vÆue
 & 0x00080000)? '1':'-');

3502 
	`¥ötf
("%c", (
vÆue
 & 0x00100000)? '1':'-');

3503 
	`¥ötf
("%c", (
vÆue
 & 0x00200000)? '1':'-');

3504 
	`¥ötf
("%c\n", (
vÆue
 & 0x00400000)? '1':'-');

3506 
	`¥ötf
(" %2d %4d ", 2*
i
+1, ((
vid
 & 0xfff000) >> 12));

3507 i‡(
i
%2 == 0) {

3508 
	`¥ötf
("%c", (
vÆue
 & 0x00000100)? '1':'-');

3509 
	`¥ötf
("%c", (
vÆue
 & 0x00000200)? '1':'-');

3510 
	`¥ötf
("%c", (
vÆue
 & 0x00000400)? '1':'-');

3511 
	`¥ötf
("%c", (
vÆue
 & 0x00000800)? '1':'-');

3512 
	`¥ötf
("%c", (
vÆue
 & 0x00001000)? '1':'-');

3513 
	`¥ötf
("%c", (
vÆue
 & 0x00002000)? '1':'-');

3514 
	`¥ötf
("%c\n", (
vÆue
 & 0x00004000)? '1':'-');

3517 
	`¥ötf
("%c", (
vÆue
 & 0x01000000)? '1':'-');

3518 
	`¥ötf
("%c", (
vÆue
 & 0x02000000)? '1':'-');

3519 
	`¥ötf
("%c", (
vÆue
 & 0x04000000)? '1':'-');

3520 
	`¥ötf
("%c", (
vÆue
 & 0x08000000)? '1':'-');

3521 
	`¥ötf
("%c", (
vÆue
 & 0x10000000)? '1':'-');

3522 
	`¥ötf
("%c", (
vÆue
 & 0x20000000)? '1':'-');

3523 
	`¥ötf
("%c\n", (
vÆue
 & 0x40000000)? '1':'-');

3526 
	}
}

3528 
	$vœn_£t
(
¨gc
, *
¨gv
[])

3530 
i
, 
j
, 
vÆue
;

3531 
idx
, 
vid
;

3533 i‡(
¨gc
 != 6) {

3534 
	`¥ötf
("insufficientárguments!\n");

3537 
idx
 = 
	`sim∂e_°πoul
(
¨gv
[3], 
NULL
, 0);

3538 i‡(
idx
 < 0 || 15 < idx) {

3539 
	`¥ötf
("wrong member indexÑange, should be within 0~15\n");

3542 
vid
 = 
	`sim∂e_°πoul
(
¨gv
[4], 
NULL
, 0);

3543 i‡(
vid
 < 0 || 0xfff < vid) {

3544 
	`¥ötf
("wrong vlan idÑange, should be within 0~4095\n");

3547 i‡(
	`°æí
(
¨gv
[5]) != 7) {

3548 
	`¥ötf
("portmap formatÉrror, should be ofÜength 7\n");

3551 
j
 = 0;

3552 
i
 = 0; i < 7; i++) {

3553 i‡(
¨gv
[5][
i
] != '0' &&árgv[5][i] != '1') {

3554 
	`¥ötf
("portmap formatÉrror, should be of combination of 0 or 1\n");

3557 
j
 +(
¨gv
[5][
i
] - '0') * (1 << i);

3561 
vÆue
 = 
	`RALINK_REG
(
RALINK_VLAN_ID_BASE
 + 4*(
idx
/2));

3562 i‡(
idx
 % 2 == 0) {

3563 
vÆue
 &= 0xfff000;

3564 
vÆue
 |
vid
;

3567 
vÆue
 &= 0xfff;

3568 
vÆue
 |(
vid
 << 12);

3570 
	`RALINK_REG
(
RALINK_VLAN_ID_BASE
 + 4*(
idx
/2)Ë
vÆue
;

3573 
vÆue
 = 
	`RALINK_REG
(
RALINK_VLAN_MEMB_BASE
 + 4*(
idx
/4));

3574 i‡(
idx
 % 4 == 0) {

3575 
vÆue
 &= 0xffffff00;

3576 
vÆue
 |
j
;

3578 i‡(
idx
 % 4 == 1) {

3579 
vÆue
 &= 0xffff00ff;

3580 
vÆue
 |(
j
 << 8);

3582 i‡(
idx
 % 4 == 2) {

3583 
vÆue
 &= 0xff00ffff;

3584 
vÆue
 |(
j
 << 16);

3587 
vÆue
 &= 0x00ffffff;

3588 
vÆue
 |(
j
 << 24);

3590 
	`RALINK_REG
(
RALINK_VLAN_MEMB_BASE
 + 4*(
idx
/4)Ë
vÆue
;

3591 
	}
}

3593 
	$π3052_swôch_comm™d
(
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

3595 i‡(
¨gc
 < 2) {

3596 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

3599 i‡(
¨gc
 == 2) {

3600 i‡(!
	`°∫cmp
(
¨gv
[1], "dump", 5))

3601 
	`èbÀ_dump
();

3602 i‡(!
	`°∫cmp
(
¨gv
[1], "clear", 6)) {

3603 
	`èbÀ_˛ór
();

3604 
	`¥ötf
("done.\n");

3607 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

3611 i‡(!
	`°∫cmp
(
¨gv
[1], "add", 4))

3612 
	`èbÀ_add
(
¨gc
, 
¨gv
);

3613 i‡(!
	`°∫cmp
(
¨gv
[1], "filt", 5))

3614 
	`èbÀ_add
(
¨gc
, 
¨gv
);

3615 i‡(!
	`°∫cmp
(
¨gv
[1], "del", 4))

3616 
	`èbÀ_dñ
(
¨gc
, 
¨gv
);

3617 i‡(!
	`°∫cmp
(
¨gv
[1], "vlan", 5)) {

3618 i‡(
¨gc
 < 3)

3619 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

3620 i‡(!
	`°∫cmp
(
¨gv
[2], "dump", 5))

3621 
	`vœn_dump
();

3622 i‡(!
	`°∫cmp
(
¨gv
[2], "set", 4))

3623 
	`vœn_£t
(
¨gc
, 
¨gv
);

3625 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

3628 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

3632 
	}
}

3634 
U_BOOT_CMD
(

3635 , 6, 1, 
π3052_swôch_comm™d
,

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/spi_drv.c

21 
	~<comm⁄.h
>

22 
	~<comm™d.h
>

23 
	~<π_mm≠.h
>

24 
	~<c⁄figs/π2880.h
>

25 
	~"ølök_•i.h
"

26 
	~"vtss.h
"

28 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_SPI
)

29 
	#DBG


	)

31 
	#RT2880_SPI_DUMP_STR
 "dump"

	)

32 
	#RT2880_SPI_READ_STR
 "ªad"

	)

33 
	#RT2880_SPI_WRITE_STR
 "wrôe"

	)

35 
	#RT2880_SPI_DUMP
 2

	)

36 
	#RT2880_SPI_READ
 3

	)

37 
	#RT2880_SPI_WRITE
 5

	)

38 
	#RT2880_SPI_RD_VTSS
 7

	)

39 
	#RT2880_SPI_WR_VTSS
 9

	)

45 
	#RT2880_REG
(
x
Ë(*((vﬁ©ûê
u32
 *)(x)))

	)

47 
	#IS_BUSY
 (
	`RT2880_REG
(
RT2880_SPISTAT_REG
Ë& 0x01)

	)

49 
	#•i_busy_lo›
 3000

	)

50 
	#max_ì_busy_lo›
 500

	)

59 
	#WREN_CMD
 0x06

	)

60 
	#WRDI_CMD
 0x04

	)

61 
	#RDSR_CMD
 0x05

	)

62 
	#WRSR_CMD
 0x01

	)

63 
	#READ_CMD
 0x03

	)

64 
	#WRITE_CMD
 0x02

	)

67 
	#RDY
 0

	)

68 
	#WEN
 1

	)

69 
	#BP0
 2

	)

70 
	#BP1
 3

	)

71 
	#WPEN
 7

	)

74 
	#ENABLE
 1

	)

75 
	#DISABLE
 0

	)

87 
ölöe
 
•i_chù_£À˘
(
u8
 
íabÀ
);

88 
•i_wrôe
(
u8
 
d©a
);

89 
u8
 
•i_ªad
();

91 
•i_ma°î_öô
();

92 
u8
 
•i_ì¥om_ªad
(
u16
 
addªss
, u16 
nbyãs
, u8 *
de°
);

93 
u8
 
•i_ì¥om_wrôe
(
u16
 
addªss
, u16 
nbyãs
, u8 *
§c
);

95 
π2880_•i_toﬁkô
(
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[]);

114 
ölöe
 
	$•i_chù_£À˘
(
u8
 
íabÀ
)

116 
i
;

118 
i
=0; i<
•i_busy_lo›
; i++) {

119 i‡(!
IS_BUSY
) {

121 i‡(
íabÀ
) {

122 
	`RT2880_REG
(
RT2880_SPICTL_REG
Ë
SPICTL_SPIENA_LOW
;

124 
	`RT2880_REG
(
RT2880_SPICTL_REG
Ë
SPICTL_SPIENA_HIGH
;

130 #ifde‡
DBG


131 i‡(
i
 =
•i_busy_lo›
) {

132 
	`¥ötf
("warning : spi_transfer (spi_chip_select) busy !\n");

135 
	}
}

146 
	$•i_ma°î_öô
()

149 
u32
 
vÆ
 = 
	`RT2880_REG
(
RT2880_RSTCTRL_REG
);

150 
vÆ
 |
RSTCTRL_SPI_RESET
;

151 
	`RT2880_REG
(
RT2880_RSTCTRL_REG
Ë
vÆ
;

153 
vÆ
 = vÆ & ~(
RSTCTRL_SPI_RESET
);

154 
	`RT2880_REG
(
RT2880_RSTCTRL_REG
Ë
vÆ
;

155 
	`udñay
(500);

157 #i‡
	`deföed
(
RALINK_VITESSE_SWITCH_CONNECT_SPI_CS1
)

159 
	`RT2880_REG
(
RT2880_SPI_ARB_REG
Ë
SPIARB_ARB_EN
 | (
SPIARB_SPI1_ACTIVE_MODE
 <<1Ë| 
SPIARB_SPI0_ACTIVE_MODE
;

160 
	`RT2880_REG
(
RT2880_SPI0_CTL_REG
Ë(~
SPIARB_SPI0_ACTIVE_MODE
)&0x1;

161 
	`RT2880_REG
(
RT2880_SPI1_CTL_REG
Ë(~
SPIARB_SPI1_ACTIVE_MODE
)&0x1;

163 
	`RT2880_REG
(
RT2880_SPICFG_REG
Ë
SPICFG_MSBFIRST
 |

164 
SPICFG_RXCLKEDGE_FALLING
 |

165 
SPICFG_TXCLKEDGE_FALLING
 |

166 
SPICFG_SPICLK_DIV8
;

167 
	`•i_chù_£À˘
(
DISABLE
);

169 #ifde‡
DBG


172 i‡(
IS_BUSY
Ë
	`¥ötf
("spi_master_init: is busy\n");

174 
	}
}

187 
	$•i_wrôe
(
u8
 
d©a
)

189 
i
;

191 
i
=0; i<
•i_busy_lo›
; i++) {

192 i‡(!
IS_BUSY
) {

193 
	`RT2880_REG
(
RT2880_SPIDATA_REG
Ë
d©a
;

195 
	`RT2880_REG
(
RT2880_SPICTL_REG
Ë
SPICTL_HIZSDO
 | 
SPICTL_STARTWR
 |

196 
SPICTL_SPIENA_LOW
;

201 #ifde‡
DBG


202 i‡(
i
 =
•i_busy_lo›
) {

203 
	`¥ötf
("w¨nög : spi_å™s„∏(wrôê%02xËbusy !\n", 
d©a
);

206 
	}
}

209 
	$•i_wrôe32
(
u32
 
d©a
)

211 
u8
 
d0
, 
d1
, 
d2
, 
d3
;

213 
d0
 = (
u8
)((
d©a
 >> 24) & 0xff);

214 
d1
 = (
u8
)((
d©a
 >> 16) & 0xff);

215 
d2
 = (
u8
)((
d©a
 >> 8) & 0xff);

216 
d3
 = (
u8
)(
d©a
 & 0xff);

218 
	`•i_wrôe
(
d0
);

219 
	`•i_wrôe
(
d1
);

220 
	`•i_wrôe
(
d2
);

221 
	`•i_wrôe
(
d3
);

222 
	}
}

233 
u8
 
	$•i_ªad
()

235 
i
;

241 
i
=0; i<
•i_busy_lo›
; i++) {

242 i‡(!
IS_BUSY
) {

243 
	`RT2880_REG
(
RT2880_SPIDATA_REG
) = 0;

245 
	`RT2880_REG
(
RT2880_SPICTL_REG
Ë
SPICTL_HIZSDO
 | 
SPICTL_STARTRD
 |

246 
SPICTL_SPIENA_LOW
;

255 
i
=0; i<
•i_busy_lo›
; i++) {

256 i‡(!
IS_BUSY
) {

261 #ifde‡
DBG


262 i‡(
i
 =
•i_busy_lo›
) {

263 
	`¥ötf
("warning : spi_transfer busy !\n");

267  ((
u8
)
	`RT2880_REG
(
RT2880_SPIDATA_REG
));

268 
	}
}

271 
u32
 
	$•i_ªad32
()

273 
u8
 
d0
, 
d1
, 
d2
, 
d3
;

274 
u32
 
ªt
;

276 
d0
 = 
	`•i_ªad
();

277 
d1
 = 
	`•i_ªad
();

278 
d2
 = 
	`•i_ªad
();

279 
d3
 = 
	`•i_ªad
();

280 
ªt
 = (
d0
 << 24Ë| (
d1
 << 16Ë| (
d2
 << 8Ë| 
d3
;

282  
ªt
;

283 
	}
}

294 
	$ì¥om_gë_°©us_ªg
(
u8
 *
°©us
)

296 
	`•i_chù_£À˘
(
ENABLE
);

297 
	`•i_wrôe
(
RDSR_CMD
);

298 *
°©us
 = 
	`•i_ªad
();

299 
	`•i_chù_£À˘
(
DISABLE
);

300 
	}
}

315 
u8
 
	$•i_ì¥om_ªad
(
u16
 
addªss
, u16 
nbyãs
, 
u8
 *
de°
)

317 
u8
 
°©us
;

318 
u16
 
˙t
 = 0;

319 
i
 = 0;

322 
i
++;

323 
	`ì¥om_gë_°©us_ªg
(&
°©us
);

325 (
°©us
 & (1<<
RDY
)Ë&& (
i
 < 
max_ì_busy_lo›
));

327 i‡(
i
 =
max_ì_busy_lo›
)

328  (
°©us
);

331 i‡(!(
°©us
 & (1<<
RDY
))) {

332 
	`•i_chù_£À˘
(
ENABLE
);

334 
	`•i_wrôe
(
READ_CMD
);

335 
	`•i_wrôe
((
u8
)(
addªss
 >> 8));

336 
	`•i_wrôe
((
u8
)(
addªss
 & 0x00FF));

338 
˙t
 < 
nbyãs
) {

339 *(
de°
++Ë
	`•i_ªad
();

340 
˙t
++;

342 
°©us
 = 0;

344 
	`•i_chù_£À˘
(
DISABLE
);

346  (
°©us
);

347 
	}
}

358 
	$ì¥om_wrôe_íabÀ
()

360 
u8
 
°©us
;

361 
i
 = 0;

364 
i
++;

365 
	`ì¥om_gë_°©us_ªg
(&
°©us
);

367 (
°©us
 & (1<<
RDY
)Ë&& (
i
 < 
max_ì_busy_lo›
));

369 i‡(
i
 =
max_ì_busy_lo›
)

373 i‡(!(
°©us
 & (1<<
RDY
)))

375 
	`•i_chù_£À˘
(
ENABLE
);

377 
	`•i_wrôe
(
WREN_CMD
);

379 
	`•i_chù_£À˘
(
DISABLE
);

383 
	`ì¥om_gë_°©us_ªg
(&
°©us
);

384 } (
°©us
 & (1<<
RDY
)Ë|| !(°©u†& (1<<
WEN
)));

388 
	}
}

404 
u8
 
	$•i_ì¥om_wrôe
(
u16
 
addªss
, u16 
nbyãs
, 
u8
 *
§c
)

406 
u8
 
°©us
;

407 
u16
 
˙t
 = 0;

408 
i
 = 0;

411 
i
++;

412 
	`ì¥om_gë_°©us_ªg
(&
°©us
);

414 (
°©us
 & (1<<
RDY
)Ë&& (
i
 < 
max_ì_busy_lo›
));

416 i‡(
i
 =
max_ì_busy_lo›
)

417 
d⁄e
;

421 i‡(!(
°©us
 & (1<<
RDY
))) {

423 
	`ì¥om_wrôe_íabÀ
();

425 
	`•i_chù_£À˘
(
ENABLE
);

426 
	`•i_wrôe
(
WRITE_CMD
);

427 
	`•i_wrôe
((
u8
)(
addªss
 >> 8));

428 
	`•i_wrôe
((
u8
)(
addªss
 & 0x00FF));

430 
˙t
 < 
nbyãs
) {

431 
	`•i_wrôe
(
§c
[
˙t
]);

432 
˙t
++;

434 
°©us
 = 0;

436 
	`•i_chù_£À˘
(
DISABLE
);

439 
i
 = 0;

441 
i
++;

442 
	`ì¥om_gë_°©us_ªg
(&
°©us
);

444 (
°©us
 & (1<<
RDY
)Ë&& (
i
 < 
max_ì_busy_lo›
));

446 
d⁄e
:

447  (
°©us
);

448 
	}
}

450 
	$•i_ì¥om_dump
()

452 
	`¥ötf
("spi_eeprom_dump()... called!\n");

453 
	}
}

455 
	$•i_ì¥om_cmd
(
cmd_tbl_t
 *
cmdç
, 
¨gc
, *
¨gv
[])

457 
chk_m©ch
, 
size
;

458 
ul⁄g
 
addr
, 
vÆue
;

459 
u16
 
addªss
;

462 
¨gc
) {

463 
RT2880_SPI_DUMP
:

464 
chk_m©ch
 = 
	`°rcmp
(
¨gv
[1], 
RT2880_SPI_DUMP_STR
);

465 i‡–
chk_m©ch
 != 0) {

466 
	`¥ötf
("Ußge:\n%s\n", 
cmdç
->
ußge
);

469 
	`•i_ì¥om_dump
();

471 
RT2880_SPI_READ
:

472 
chk_m©ch
 = 
	`°rcmp
(
¨gv
[1], 
RT2880_SPI_READ_STR
);

473 i‡–
chk_m©ch
 != 0) {

474 
	`¥ötf
("Ußge:\n%s\n", 
cmdç
->
ußge
);

477 
addr
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

478 
addªss
 = 
addr
;

479 
	`•i_ma°î_öô
();

480 
	`•i_ì¥om_ªad
(
addr
, 4, (
u8
*)&
vÆue
);

481 
	`¥ötf
("0x%04x : 0x%04x\n", 
addªss
, 
vÆue
);

483 
RT2880_SPI_WRITE
:

484 
chk_m©ch
 = 
	`°rcmp
(
¨gv
[1], 
RT2880_SPI_WRITE_STR
);

485 i‡–
chk_m©ch
 != 0) {

486 
	`¥ötf
("Ußge:\n%s\n", 
cmdç
->
ußge
);

489 
size
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

490 
addr
 = 
	`sim∂e_°πoul
(
¨gv
[3], 
NULL
, 16);

491 
vÆue
 = 
	`sim∂e_°πoul
(
¨gv
[4], 
NULL
, 16);

492 
	`•i_ma°î_öô
();

493 
addªss
 = 
addr
;

494 
	`•i_ì¥om_wrôe
(
addªss
, 
size
, (
u8
*)&
vÆue
);

495 
	`¥ötf
("0x%08x: 0x%08x i¿%d byãs\n", 
addªss
, 
vÆue
, 
size
);

498 
	`¥ötf
("Ußge:\n%s\¿u£ \"hñ∞•icmd\"Åÿgë m‹êdëaû!\n", 
cmdç
->
ußge
);

500 
	}
}

503 
	$•i_vtss_ªad
(
u8
 
blk
, u8 
subblk
, u8 
addr
, 
u32
 *
vÆue
)

505 
u8
 
cmd
;

507 
	`•i_ma°î_öô
();

508 
cmd
 = (
u8
)((
blk
 << 5Ë| 
subblk
);

509 
	`•i_wrôe
(
cmd
);

510 
	`•i_wrôe
(
addr
);

511 
	`•i_ªad
();

512 
	`•i_ªad
();

513 *
vÆue
 = 
	`•i_ªad32
();

515 
	`udñay
(100);

516 
	}
}

519 
	$•i_vtss_wrôe
(
u8
 
blk
, u8 
subblk
, u8 
addr
, 
u32
 
vÆue
)

521 
u8
 
cmd
;

523 
	`•i_ma°î_öô
();

524 
cmd
 = (
u8
)((
blk
 << 5Ë| 
subblk
 | 0x10);

525 
	`•i_wrôe
(
cmd
);

526 
	`•i_wrôe
(
addr
);

527 
	`•i_wrôe32
(
vÆue
);

529 
	`udñay
(10);

530 
	}
}

532 
	$vtss_öô
()

534 
i
, 
Àn
, 
tmp
;

540 
	`•i_vtss_wrôe
(7, 0, 0x10, (1<<7) | (1<<3) | (1<<2) | (0<<0));

541 
	`•i_vtss_ªad
(7, 0, 0x10, &
tmp
);

542 i‡(
tmp
 & ((1<<7) | (1<<3) | (1<<2) | (0<<0)))

544 
	`udñay
(1000);

548 
	`•i_vtss_wrôe
(7, 0, 0x11, 0);

550 
Àn
 = (
lut⁄u_novœn
);

551 
i
 = 0; i < 
Àn
; i++) {

553 
	`•i_vtss_wrôe
(7, 0, 0x12, 
lut⁄u_novœn
[
i
]);

557 
	`•i_vtss_wrôe
(7, 0, 0x14, (1<<0));

558 
	`udñay
(125000);

561 
	`•i_vtss_wrôe
(7, 0, 0x10, (1<<8) | (1<<3) | (1<<1) | (1<<0));

562 
	`¥ötf
(" Vôes£ u∂ﬂdög bö¨y code†(%d byãsËd⁄e.\n", 
Àn
);

563 #i‡
	`deföed
(
RALINK_VITESSE_SWITCH_CONNECT_SPI_CS1
)

565 
	`RT2880_REG
(
RT2880_SPI_ARB_REG
Ë
SPIARB_ARB_EN
 | (
SPIARB_SPI1_ACTIVE_MODE
 <<1Ë| 
SPIARB_SPI0_ACTIVE_MODE
;

566 
	`RT2880_REG
(
RT2880_SPI0_CTL_REG
Ë(~
SPIARB_SPI0_ACTIVE_MODE
)&0x1;

567 
	`RT2880_REG
(
RT2880_SPI1_CTL_REG
Ë(~
SPIARB_SPI1_ACTIVE_MODE
)&0x1;

568 #ifde‡
CFG_ENV_IS_IN_SPI


569 
	`•ic_öô
();

572 
	}
}

574 
	$•i_vtss_cmd
(
cmd_tbl_t
 *
cmdç
, 
¨gc
, *
¨gv
[])

576 
u8
 
blk
, 
subblk
, 
cmd
, 
addr
;

577 
u32
 
vÆue
;

580 i‡(
¨gc
 < 5)

581 
	`¥ötf
("Ußge:\n%s\¿u£ \"hñ∞•icmd\" f‹ dëaû!\n", 
cmdç
->
ußge
);

583 
blk
 = (
u8
)
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

584 
subblk
 = (
u8
)
	`sim∂e_°πoul
(
¨gv
[3], 
NULL
, 16);

585 
addr
 = (
u8
)
	`sim∂e_°πoul
(
¨gv
[4], 
NULL
, 16);

588 i‡(
blk
 =0 || blk > 7 || 
subblk
 > 7)

589 
	`¥ötf
("Ußge:\n%s\¿u£ \"hñ∞•icmd\" f‹ dëaû!\n", 
cmdç
->
ußge
);

591 
cmd
 = (
u8
)((
blk
 << 5Ë| 
subblk
);

593 i‡(!
	`°∫cmp
(
¨gv
[1], "read", 5)) {

594 
	`•i_ma°î_öô
();

595 
	`•i_wrôe
(
cmd
);

596 
	`•i_wrôe
(
addr
);

597 
	`•i_ªad
();

598 
	`•i_ªad
();

599 
vÆue
 = 
	`•i_ªad32
();

600 
	`¥ötf
("ªad %d:%d:%x = 0x%x\n", 
blk
, 
subblk
, 
addr
, 
vÆue
);

602 i‡(!
	`°∫cmp
(
¨gv
[1], "write", 6)) {

603 
cmd
 |= 0x10;

604 
vÆue
 = (
u32
)
	`sim∂e_°πoul
(
¨gv
[5], 
NULL
, 16);

605 
	`•i_ma°î_öô
();

606 
	`•i_wrôe
(
cmd
);

607 
	`•i_wrôe
(
addr
);

608 
	`•i_wrôe32
(
vÆue
);

609 
	`¥ötf
("wrôê%d:%d:%x = 0x%x\n", 
blk
, 
subblk
, 
addr
, 
vÆue
);

612 
	`¥ötf
("Ußge:\n%s\¿u£ \"hñ∞•icmd\" f‹ dëaû!\n", 
cmdç
->
ußge
);

613 
	}
}

615 
	$π2880_•i_toﬁkô
(
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

617 i‡(!
	`°∫cmp
(
¨gv
[1], "eeprom", 7)) {

618 
	`•i_ì¥om_cmd
(
cmdç
, 
¨gc
 - 1, 
¨gv
 + 1);

620 i‡(!
	`°∫cmp
(
¨gv
[1], "vtss", 5)) {

621 
	`•i_vtss_cmd
(
cmdç
, 
¨gc
 - 1, 
¨gv
 + 1);

624 
	`¥ötf
("Ußge:\n%s\¿u£ \"hñ∞•icmd\" f‹ dëaû!\n", 
cmdç
->
ußge
);

626 
	}
}

628 
U_BOOT_CMD
(

629 
•icmd
, 7, 1, 
π2880_•i_toﬁkô
,

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/spi_flash.c

1 
	~<comm⁄.h
>

2 
	~<comm™d.h
>

3 
	~<π_mm≠.h
>

4 
	~<c⁄figs/π2880.h
>

5 
	~<mÆloc.h
>

6 
	~"ølök_•i.h
"

9 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_SPI
)

15 
	#FLASH_PAGESIZE
 256

	)

19 #i‚de‡
NO_4B_ADDRESS_SUPPORT


20 
	#ADDRESS_4B_MODE


	)

25 
	#OPCODE_WREN
 6

	)

26 
	#OPCODE_WRDI
 4

	)

27 
	#OPCODE_RDSR
 5

	)

28 
	#OPCODE_WRSR
 1

	)

29 
	#OPCODE_READ
 3

	)

30 
	#OPCODE_PP
 2

	)

31 
	#OPCODE_SE
 0xD8

	)

32 
	#OPCODE_RES
 0xAB

	)

33 
	#OPCODE_RDID
 0x9F

	)

35 
	#OPCODE_FAST_READ
 0x0B

	)

36 
	#OPCODE_DOR
 0x3B

	)

37 
	#OPCODE_QOR
 0x6B

	)

38 
	#OPCODE_DIOR
 0xBB

	)

39 
	#OPCODE_QIOR
 0xEB

	)

40 
	#OPCODE_READ_ID
 0x90

	)

42 
	#OPCODE_P4E
 0x20

	)

43 
	#OPCODE_P8E
 0x40

	)

44 
	#OPCODE_BE
 0x60

	)

45 
	#OPCODE_BE1
 0xC7

	)

46 
	#OPCODE_QPP
 0x32

	)

48 
	#OPCODE_CLSR
 0x30

	)

49 
	#OPCODE_RCR
 0x35

	)

51 
	#OPCODE_BRRD
 0x16

	)

52 
	#OPCODE_BRWR
 0x17

	)

56 
	#SR_WIP
 1

	)

57 
	#SR_WEL
 2

	)

58 
	#SR_BP0
 4

	)

59 
	#SR_BP1
 8

	)

60 
	#SR_BP2
 0x10

	)

61 
	#SR_EPE
 0x20

	)

62 
	#SR_SRWD
 0x80

	)

64 
	#ø_öl
(
addr
Ë(*(vﬁ©ûê
u32
 *)◊ddr))

	)

65 
	#ø_oué
(
addr
, 
vÆue
Ë(*(vﬁ©ûê
u32
 *)◊ddrË(vÆue))

	)

66 
	#ø_™d
(
addr
, 
vÆue
Ë
	`ø_oué
◊ddr, (
	`ø_öl
◊ddrË& (vÆue)))

	)

67 
	#ø_‹
(
addr
, 
vÆue
Ë
	`ø_oué
◊ddr, (
	`ø_öl
◊ddrË| (vÆue)))

	)

68 
	#RT2880_REG
(
x
Ë(*((vﬁ©ûê
u32
 *)(x)))

	)

71 
	#ø_dbg
(
¨gs
...Ëdÿ{ i‡(1Ë
	`¥ötf
◊rgs); } 0)

	)

73 
	#SPI_FIFO_SIZE
 16

	)

75 #i‡
deföed
 (
MT7620_ASIC_BOARD
Ë|| deföed (
MT7620_FPGA_BOARD
)

76 
	#COMMAND_MODE


85 

	)

88 #i‡
deföed
(
RD_MODE_QOR
Ë|| deföed(
RD_MODE_QIOR
)

89 
	#RD_MODE_QUAD


	)

92 
ø•i_waô_ªady
(
¶ìp_ms
);

93 
	g•i_waô_n£c
 = 0;

96 
	$gpio0_low
()

105 
	`ø_oué
(
RALINK_PIO_BASE
+0x20, 0);

106 
	}
}

108 
	$gpio0_high
()

110 
	`ø_oué
(
RALINK_PIO_BASE
+0x20, 1);

111 
	}
}

114 
	$•ic_busy_waô
()

117 i‡((
	`ø_öl
(
RT2880_SPI0_STAT_REG
) & 0x01) == 0)

119 } 
•i_waô_n£c
 >> 1);

121 
	`¥ötf
("%s: faû \n", 
__func__
);

123 
	}
}

125 
	#SPIC_READ_BYTES
 (1<<0)

	)

126 
	#SPIC_WRITE_BYTES
 (1<<1)

	)

127 
	#SPIC_USER_MODE
 (1<<2)

	)

128 
	#SPIC_4B_ADDR
 (1<<3)

	)

140 
	$•ic_å™s„r
(c⁄° 
u8
 *
cmd
, 
n_cmd
, u8 *
buf
, 
n_buf
, 
Êag
)

142 
ªtvÆ
 = -1;

151 
	`ø_™d
(
RT2880_SPI0_CTL_REG
, ~(
SPICTL_SPIENA_HIGH
));

154 
ªtvÆ
 = 0;ÑëvÆ < 
n_cmd
;Ñetval++) {

155 
	`ø_oué
(
RT2880_SPI0_DATA_REG
, 
cmd
[
ªtvÆ
]);

156 
	`ø_‹
(
RT2880_SPI0_CTL_REG
, 
SPICTL_STARTWR
);

157 i‡(
	`•ic_busy_waô
()) {

158 
ªtvÆ
 = -1;

159 
íd_å™s
;

164 i‡(
Êag
 & 
SPIC_READ_BYTES
) {

165 
ªtvÆ
 = 0;ÑëvÆ < 
n_buf
;Ñetval++) {

166 
	`ø_‹
(
RT2880_SPI0_CTL_REG
, 
SPICTL_STARTRD
);

167 #i‚de‡
READ_BY_PAGE


168 i‡(
n_cmd
 !1 && (
ªtvÆ
 & 0xffff) == 0) {

169 
	`¥ötf
(".");

172 i‡(
	`•ic_busy_waô
()) {

173 
	`¥ötf
("\n");

174 
íd_å™s
;

176 
buf
[
ªtvÆ
] = (
u8
Ë
	`ø_öl
(
RT2880_SPI0_DATA_REG
);

180 i‡(
Êag
 & 
SPIC_WRITE_BYTES
) {

181 
ªtvÆ
 = 0;ÑëvÆ < 
n_buf
;Ñetval++) {

182 
	`ø_oué
(
RT2880_SPI0_DATA_REG
, 
buf
[
ªtvÆ
]);

183 
	`ø_‹
(
RT2880_SPI0_CTL_REG
, 
SPICTL_STARTWR
);

184 i‡(
	`•ic_busy_waô
()) {

185 
íd_å™s
;

190 
íd_å™s
:

192 
	`ø_‹
 (
RT2880_SPI0_CTL_REG
, (
SPICTL_SPIENA_HIGH
));

194  
ªtvÆ
;

195 
	}
}

197 
	$•ic_ªad
(c⁄° 
u8
 *
cmd
, 
size_t
 
n_cmd
, u8 *
rxbuf
, size_à
n_rx
)

199  
	`•ic_å™s„r
(
cmd
, 
n_cmd
, 
rxbuf
, 
n_rx
, 
SPIC_READ_BYTES
);

200 
	}
}

202 
	$•ic_wrôe
(c⁄° 
u8
 *
cmd
, 
size_t
 
n_cmd
, c⁄° u8 *
txbuf
, size_à
n_tx
)

204  
	`•ic_å™s„r
(
cmd
, 
n_cmd
, (
u8
 *)
txbuf
, 
n_tx
, 
SPIC_WRITE_BYTES
);

205 
	}
}

207 
mùs_bus_„q
;

208 
	$•ic_öô
()

211 
	`ø_™d
(
RT2880_GPIOMODE_REG
, ~(1 << 1));

212 #i‡
	`deföed
 (
RT6855_ASIC_BOARD
Ë|| deföed (
RT6855_FPGA_BOARD
)

213 
	`ø_‹
(
RT2880_GPIOMODE_REG
, (1 << 11));

214 #ñi‡
	`deföed
 (
MT7620_ASIC_BOARD
Ë|| deföed (
MT7620_FPGA_BOARD
)

216 
	`ø_™d
(
RT2880_GPIOMODE_REG
, ~(1 << 11));

219 
	`ø_‹
(
RT2880_RSTCTRL_REG
, 
RSTCTRL_SPI_RESET
);

220 
	`udñay
(1);

221 
	`ø_™d
(
RT2880_RSTCTRL_REG
, ~
RSTCTRL_SPI_RESET
);

223 #i‡
	`deföed
(
RALINK_VITESSE_SWITCH_CONNECT_SPI_CS1
)

225 
	`RT2880_REG
(
RT2880_SPI_ARB_REG
Ë
SPIARB_ARB_EN
 | (
SPIARB_SPI1_ACTIVE_MODE
 <<1Ë| 
SPIARB_SPI0_ACTIVE_MODE
;

226 
	`RT2880_REG
(
RT2880_SPI0_CTL_REG
Ë(~
SPIARB_SPI0_ACTIVE_MODE
)&0x1;

227 
	`RT2880_REG
(
RT2880_SPI1_CTL_REG
Ë(~
SPIARB_SPI1_ACTIVE_MODE
)&0x1;

231 #ifde‡
ADDR_4B


232 
	`ø_oué
(
RT2880_SPI0_CFG_REG
, 
SPICFG_MSBFIRST
 | 
SPICFG_TXCLKEDGE_FALLING
 | 
SPICFG_SPICLK_DIV8
 | 
SPICFG_SPICLKPOL
 | 
SPICFG_ADDRMODE
);

234 
	`ø_oué
(
RT2880_SPI0_CFG_REG
, 
SPICFG_MSBFIRST
 | 
SPICFG_TXCLKEDGE_FALLING
 | 
SPICFG_SPICLK_DIV8
 | 
SPICFG_SPICLKPOL
);

238 
	`ø_oué
(
RT2880_SPI0_CTL_REG
, 
SPICTL_HIZSDO
 | 
SPICTL_SPIENA_HIGH
);

240 
•i_waô_n£c
 = (8 * 1000 / ((
mùs_bus_„q
 / 1000 / 1000 / 
SPICFG_SPICLK_DIV8
) )) >> 1 ;

242 
	`¥ötf
("•i_waô_n£c: %x \n", 
•i_waô_n£c
);

244 
	}
}

248 
	schù_öfo
 {

249 *
	m«me
;

250 
u8
 
	mid
;

251 
u32
 
	mjedec_id
;

252 
	m£˘‹_size
;

253 
	mn_£˘‹s
;

254 
	maddr4b
;

256 
chù_öfo
 *
	g•i_chù_öfo
 = 
NULL
;

258 
chù_öfo
 
	gchùs_d©a
 [] = {

268 #i‚de‡
NO_4B_ADDRESS_SUPPORT


291 #i‚de‡
NO_4B_ADDRESS_SUPPORT


297 #i‚de‡
NO_4B_ADDRESS_SUPPORT


307 #ifde‡
COMMAND_MODE


308 
	$ø•i_cmd
(c⁄° 
u8
 
cmd
, c⁄° 
u32
 
addr
, c⁄° u8 
mode
, u8 *
buf
, c⁄° 
size_t
 
n_buf
, c⁄° u32 
u£r
, c⁄° 
Êag
)

310 
u32
 
ªg
, 
cou¡
;

311 
ªtvÆ
 = 0;

315 
	`ø_‹
(
RT2880_SPICFG_REG
, (
SPICFG_SPIENMODE
 | 
SPICFG_RXENVDIS
));

316 
	`ø_oué
(
RT2880_SPIDATA_REG
, 
cmd
);

317 
	`ø_oué
(
RT2880_SPIMODE_REG
, (
mode
 << 24));

318 #ifde‡
ADDR_4B


319 
	`ø_oué
(
RT2880_SPIADDR_REG
, 
addr
);

321 i‡(
Êag
 & 
SPIC_4B_ADDR
)

323 
	`ø_oué
(
RT2880_SPIADDR_REG
, 
addr
);

327 
	`ø_oué
(
RT2880_SPIADDR_REG
, (
addr
 << 8));

330 
	`ø_oué
(
RT2880_SPIBS_REG
, 
n_buf
);

331 i‡(
Êag
 & 
SPIC_USER_MODE
)

333 
	`ø_oué
(
RT2880_SPIUSER_REG
, 
u£r
);

336 
	`ø_oué
(
RT2880_SPIUSER_REG
, 0);

339 
	`ø_oué
(
RT2880_SPICTL_REG
, 
SPICTL_START
);

342 i‡(
Êag
 & 
SPIC_READ_BYTES
)

345 i‡(
buf
 == 0)

347 
	`¥ötf
("NULLÖointer\n");

351 
ªtvÆ
 = 0;ÑëvÆ < 
n_buf
;)

354 
ªg
 = (
u32
Ë(
	`ø_öl
(
RT2880_SPIFIFOSTAT_REG
) & 0xff);

355 } 
ªg
 == 0);

357 
cou¡
 = 
ªg
; count > 0; count--)

359 
buf
[
ªtvÆ
++] = (
u8
Ë
	`ø_öl
(
RT2880_SPIRXFIFO_REG
);

366 i‡(
Êag
 & 
SPIC_WRITE_BYTES
)

368 i‡(
buf
 == 0)

370 
	`¥ötf
("NULLÖointer\n");

374 
cou¡
 = 
	`mö
(
SPI_FIFO_SIZE
, 
n_buf
);

375 
ªtvÆ
 = 0;ÑëvÆ < 
n_buf
;)

377 
cou¡
--)

379 
	`ø_oué
(
RT2880_SPITXFIFO_REG
, 
buf
[
ªtvÆ
++]);

383 
ªg
 = (
u32
Ë((
	`ø_öl
(
RT2880_SPIFIFOSTAT_REG
 ) & 0xff00) >> 8);

384 } 
ªg
 >
SPI_FIFO_SIZE
);

386 
cou¡
 = 
SPI_FIFO_SIZE
 - 
ªg
;

387 i‡((
ªtvÆ
 + 
cou¡
Ë> 
n_buf
)

388 
cou¡
 = 
n_buf
 - 
ªtvÆ
;

392 i‡(
	`•ic_busy_waô
())

394 
ªtvÆ
 = -1;

397 
	`ø_‹
 (
RT2880_SPI0_CTL_REG
, (
SPICTL_SPIENA_HIGH
));

398 
	`ø_™d
(
RT2880_SPICFG_REG
, ~(
SPICFG_SPIENMODE
 | 
SPICFG_RXENVDIS
));

400  
ªtvÆ
;

401 
	}
}

404 #i‡
deföed
 (
RD_MODE_QUAD
)

405 
	$ø•i_£t_quad
()

407 
ªtvÆ
 = 0;

411 i‡(
•i_chù_öfo
->
id
 == 0x1f)

413 
u8
 
§
;

414 
ªtvÆ
 = 
	`ø•i_cmd
(0x3f, 0, 0, &
§
, 1, 0, 
SPIC_READ_BYTES
);

415 i‡(
ªtvÆ
 == -1)

416 
îr_íd
;

417 i‡((
§
 & (1 << 7)) == 0)

419 
§
 |= (1 << 7);

420 
	`ø•i_wrôe_íabÀ
();

421 
ªtvÆ
 = 
	`ø•i_cmd
(0x3e, 0, 0, &
§
, 1, 0, 
SPIC_WRITE_BYTES
);

424 i‡(
•i_chù_öfo
->
id
 == 0xc2)

426 
u8
 
§
;

427 
ªtvÆ
 = 
	`ø•i_cmd
(
OPCODE_RDSR
, 0, 0, &
§
, 1, 0, 
SPIC_READ_BYTES
);

428 i‡(
ªtvÆ
 == -1)

429 
îr_íd
;

430 i‡((
§
 & (1 << 6)) == 0)

432 
§
 |= (1 << 6);

433 
	`ø•i_wrôe_íabÀ
();

434 
ªtvÆ
 = 
	`ø•i_cmd
(
OPCODE_WRSR
, 0, 0, &
§
, 1, 0, 
SPIC_WRITE_BYTES
);

437 i‡((
•i_chù_öfo
->
id
 == 0x01) || (spi_chip_info->id == 0xef))

439 
u8
 
§
[2];

440 
ªtvÆ
 = 
	`ø•i_cmd
(
OPCODE_RDSR
, 0, 0, 
§
, 1, 0, 
SPIC_READ_BYTES
);

441 i‡(
ªtvÆ
 == -1)

442 
îr_íd
;

443 
ªtvÆ
 = 
	`ø•i_cmd
(0x35, 0, 0, &
§
[1], 1, 0, 
SPIC_READ_BYTES
);

444 i‡(
ªtvÆ
 == -1)

445 
îr_íd
;

446 i‡((
§
[1] & (1 << 1)) == 0)

448 
§
[1] |= (1 << 1);

450 
ªtvÆ
 = 
	`ø•i_cmd
(
OPCODE_WRSR
, 0, 0, 
§
, 2, 0, 
SPIC_WRITE_BYTES
);

454 
îr_íd
:

455 i‡(
ªtvÆ
 == -1)

456 
	`¥ötf
("raspi_set_quadÉrror\n");

458  
ªtvÆ
;

459 
	}
}

465 
	$ø•i_ªad_devid
(
u8
 *
rxbuf
, 
n_rx
)

467 
u8
 
code
 = 
OPCODE_RDID
;

468 
ªtvÆ
;

470 #ifde‡
COMMAND_MODE


471 
ªtvÆ
 = 
	`ø•i_cmd
(
code
, 0, 0, 
rxbuf
, 
n_rx
, 0, 
SPIC_READ_BYTES
);

473 
ªtvÆ
 = 
	`•ic_ªad
(&
code
, 1, 
rxbuf
, 
n_rx
);

475 i‡(
ªtvÆ
 !
n_rx
) {

476 
	`¥ötf
("%s:Ñë: %x\n", 
__func__
, 
ªtvÆ
);

477  
ªtvÆ
;

479  
ªtvÆ
;

480 
	}
}

484 #i‚de‡
NO_4B_ADDRESS_SUPPORT


485 
	$ø•i_ªad_rg
(
u8
 *
vÆ
, u8 
›code
)

487 
ssize_t
 
ªtvÆ
;

488 
u8
 
code
 = 
›code
;

489 
u32
 
u£r
;

491 i‡(!
vÆ
)

492 
	`¥ötf
("NULLÖointer\n");

495 #ifde‡
COMMAND_MODE


496 
u£r
 = 
SPIUSR_SINGLE
 | (SPIUSR_SINGLE << 3Ë| (SPIUSR_SINGLE << 6Ë| (SPIUSR_SINGLE << 9Ë| (
SPIUSR_READ_DATA
 << 12Ë| (
SPIUSR_NO_DUMMY
 << 14Ë| (
SPIUSR_NO_MODE
 << 16Ë| (
SPIUSR_NO_ADDR
 << 17Ë| (
SPIUSR_ONE_INSTRU
 << 20) | (1 << 21);

497 
ªtvÆ
 = 
	`ø•i_cmd
(
code
, 0, 0, 
vÆ
, 1, 
u£r
, 
SPIC_READ_BYTES
 | 
SPIC_USER_MODE
);

499 
ªtvÆ
 = 
	`•ic_ªad
(&
code
, 1, 
vÆ
, 1);

503 
	}
}

505 
	$ø•i_wrôe_rg
(
u8
 *
vÆ
, u8 
›code
)

507 
ssize_t
 
ªtvÆ
;

508 
u8
 
code
 = 
›code
;

509 
u32
 
u£r
, 
dr
;

511 i‡(!
vÆ
)

512 
	`¥ötf
("NULLÖointer\n");

514 
dr
 = 
	`ø_öl
(
RT2880_SPI_DMA
);

515 
	`ø_oué
(
RT2880_SPI_DMA
, 0);

517 #ifde‡
COMMAND_MODE


518 
u£r
 = 
SPIUSR_SINGLE
 | (SPIUSR_SINGLE << 3Ë| (SPIUSR_SINGLE << 6Ë| (SPIUSR_SINGLE << 9Ë| (
SPIUSR_WRITE_DATA
 << 12Ë| (
SPIUSR_NO_DUMMY
 << 14Ë| (
SPIUSR_NO_MODE
 << 16Ë| (
SPIUSR_NO_ADDR
 << 17Ë| (
SPIUSR_ONE_INSTRU
 << 20) | (1 << 21);

519 
ªtvÆ
 = 
	`ø•i_cmd
(
code
, 0, 0, 
vÆ
, 1, 
u£r
, 
SPIC_WRITE_BYTES
 | 
SPIC_USER_MODE
);

521 
ªtvÆ
 = 
	`•ic_wrôe
(&
code
, 1, 
vÆ
, 1);

523 
	`ø_oué
(
RT2880_SPI_DMA
, 
dr
);

525 
	}
}

533 
	$ø•i_ªad_§
(
u8
 *
vÆ
)

535 
ssize_t
 
ªtvÆ
;

536 
u8
 
code
 = 
OPCODE_RDSR
;

538 #ifde‡
COMMAND_MODE


539 
ªtvÆ
 = 
	`ø•i_cmd
(
code
, 0, 0, 
vÆ
, 1, 0, 
SPIC_READ_BYTES
);

541 
ªtvÆ
 = 
	`•ic_ªad
(&
code
, 1, 
vÆ
, 1);

543 i‡(
ªtvÆ
 != 1) {

544 
	`¥ötf
("%s:Ñë: %x\n", 
__func__
, 
ªtvÆ
);

548 
	}
}

553 
	$ø•i_wrôe_§
(
u8
 *
vÆ
)

555 
ssize_t
 
ªtvÆ
;

556 
u8
 
code
 = 
OPCODE_WRSR
;

558 #ifde‡
COMMAND_MODE


559 
ªtvÆ
 = 
	`ø•i_cmd
(
code
, 0, 0, 
vÆ
, 1, 0, 
SPIC_WRITE_BYTES
);

561 
ªtvÆ
 = 
	`•ic_wrôe
(&
code
, 1, 
vÆ
, 1);

563 i‡(
ªtvÆ
 != 1) {

564 
	`¥ötf
("%s:Ñë: %x\n", 
__func__
, 
ªtvÆ
);

568 
	}
}

571 
	$ø•i_˛ór_§
()

573 
u8
 
code
 = 
OPCODE_CLSR
;

575 #ifde‡
COMMAND_MODE


576 
	`ø•i_cmd
(
code
, 0, 0, 0, 0, 0, 0);

578 
	`•ic_ªad
(&
code
, 1, 0, 0);

581 
	}
}

585 #i‚de‡
NO_4B_ADDRESS_SUPPORT


586 
	$ø•i_ªad_scur
(
u8
 *
vÆ
)

588 
ssize_t
 
ªtvÆ
;

589 
u8
 
code
 = 0x2b;

591 #ifde‡
COMMAND_MODE


593 
u32
 
u£r
;

595 
u£r
 = 
SPIUSR_SINGLE
 | (SPIUSR_SINGLE << 3Ë| (SPIUSR_SINGLE << 6Ë| (SPIUSR_SINGLE << 9Ë| (
SPIUSR_READ_DATA
 << 12Ë| (
SPIUSR_NO_DUMMY
 << 14Ë| (
SPIUSR_NO_MODE
 << 16Ë| (
SPIUSR_NO_ADDR
 << 17Ë| (
SPIUSR_ONE_INSTRU
 << 20) | (1 << 21);

596 
ªtvÆ
 = 
	`ø•i_cmd
(
code
, 0, 0, 
vÆ
, 1, 
u£r
, 
SPIC_READ_BYTES
 | 
SPIC_USER_MODE
);

599 
ªtvÆ
 = 
	`•ic_ªad
(&
code
, 1, 
vÆ
, 1);

601 i‡(
ªtvÆ
 != 1) {

602 
	`¥ötf
("%s:Ñë: %x\n", 
__func__
, 
ªtvÆ
);

606 
	}
}

608 
	$ø•i_4byã_mode
(
íabÀ
)

610 i‡(
•i_chù_öfo
->
id
 == 0x01)

612 
u8
 
br
, 
br_c‚
;

614 
	`ø•i_waô_ªady
(1);

616 i‡(
íabÀ
)

618 
br
 = 0x81;

619 
	`ø_‹
(
RT2880_SPICFG_REG
, 
SPICFG_ADDRMODE
);

623 
br
 = 0x0;

624 
	`ø_™d
(
RT2880_SPICFG_REG
, ~(
SPICFG_ADDRMODE
));

627 
	`ø•i_wrôe_rg
(&
br
, 
OPCODE_BRWR
);

628 
	`ø•i_ªad_rg
(&
br_c‚
, 
OPCODE_BRRD
);

629 i‡(
br_c‚
 !
br
)

631 
	`¥ötf
("4B mode switch failed\n");

637 
ssize_t
 
ªtvÆ
;

638 
u8
 
code
;

640 
	`ø•i_waô_ªady
(1);

641 
	`ø•i_wrôe_íabÀ
();

643 i‡(
íabÀ
)

645 
code
 = 0xB7;

646 
	`ø_‹
(
RT2880_SPICFG_REG
, 
SPICFG_ADDRMODE
);

650 
code
 = 0xE9;

651 
	`ø_™d
(
RT2880_SPICFG_REG
, ~(
SPICFG_ADDRMODE
));

653 #ifde‡
COMMAND_MODE


655 
u32
 
u£r
;

657 
u£r
 = 
SPIUSR_SINGLE
 | (SPIUSR_SINGLE << 3Ë| (SPIUSR_SINGLE << 6Ë| (SPIUSR_SINGLE << 9Ë| (
SPIUSR_NO_DATA
 << 12Ë| (
SPIUSR_NO_DUMMY
 << 14Ë| (
SPIUSR_NO_MODE
 << 16Ë| (
SPIUSR_NO_ADDR
 << 17Ë| (
SPIUSR_ONE_INSTRU
 << 20) | (1 << 21);

658 
ªtvÆ
 = 
	`ø•i_cmd
(
code
, 0, 0, 0, 0, 
u£r
, 
SPIC_USER_MODE
);

662 
ªtvÆ
 = 
	`•ic_ªad
(&
code
, 1, 0, 0);

664 i‡((!
íabÀ
Ë&& (
•i_chù_öfo
->
id
 == 0xef))

666 
code
 = 0x0;

667 
	`ø•i_wrôe_íabÀ
();

668 
	`ø•i_wrôe_rg
(&
code
, 0xc5);

670 i‡(
ªtvÆ
 != 0) {

671 
	`¥ötf
("%s:Ñë: %x\n", 
__func__
, 
ªtvÆ
);

676 
	}
}

685 
ölöe
 
	$ø•i_wrôe_íabÀ
()

687 
u8
 
code
 = 
OPCODE_WREN
;

689 #ifde‡
COMMAND_MODE


690 
	`ø•i_cmd
(
code
, 0, 0, 0, 0, 0, 0);

692  
	`•ic_wrôe
(&
code
, 1, 
NULL
, 0);

694 
	}
}

696 
ölöe
 
	$ø•i_wrôe_dißbÀ
()

698 
u8
 
code
 = 
OPCODE_WRDI
;

700 #ifde‡
COMMAND_MODE


701 
	`ø•i_cmd
(
code
, 0, 0, 0, 0, 0, 0);

703  
	`•ic_wrôe
(&
code
, 1, 
NULL
, 0);

705 
	}
}

711 
ölöe
 
	$ø•i_u≈rŸe˘
()

713 
u8
 
§
 = 0;

715 i‡(
	`ø•i_ªad_§
(&
§
) < 0) {

716 
	`¥ötf
("%s:Ñód_§ faû: %x\n", 
__func__
, 
§
);

720 i‡((
§
 & (
SR_BP0
 | 
SR_BP1
 | 
SR_BP2
)) != 0) {

721 
§
 = 0;

722 
	`ø•i_wrôe_§
(&
§
);

724 
	}
}

730 
	$ø•i_waô_ªady
(
¶ìp_ms
)

732 
cou¡
;

733 
§
 = 0;

740 
cou¡
 = 0; cou¡ < ((
¶ìp_ms
+1) *1000); count++) {

741 i‡((
	`ø•i_ªad_§
((
u8
 *)&
§
)) < 0)

743 i‡(!(
§
 & 
SR_WIP
)) {

747 
	`udñay
(500);

751 
	`¥ötf
("%s:Ñód_§ faû: %x\n", 
__func__
, 
§
);

753 
	}
}

761 
	$ø•i_îa£_£˘‹
(
u32
 
off£t
)

763 
u8
 
buf
[5];

766 i‡(
	`ø•i_waô_ªady
(3))

770 
	`ø•i_wrôe_íabÀ
();

771 
	`ø•i_u≈rŸe˘
();

773 #ifde‡
COMMAND_MODE


774 #ifde‡
ADDRESS_4B_MODE


775 i‡(
•i_chù_öfo
->
addr4b
)

777 
	`ø•i_4byã_mode
(1);

778 
	`ø•i_wrôe_íabÀ
();

779 
	`ø•i_cmd
(
OPCODE_SE
, 
off£t
, 0, 0, 0, 0, 
SPIC_4B_ADDR
);

780 
	`ø•i_waô_ªady
(950);

781 
	`ø•i_4byã_mode
(0);

786 
	`ø•i_cmd
(
OPCODE_SE
, 
off£t
, 0, 0, 0, 0, 0);

787 
	`ø•i_waô_ªady
(950);

792 #ifde‡
ADDRESS_4B_MODE


793 i‡(
•i_chù_öfo
->
addr4b
) {

795 
	`ø•i_4byã_mode
(1);

796 
	`ø•i_wrôe_íabÀ
();

798 
buf
[0] = 
OPCODE_SE
;

799 
buf
[1] = 
off£t
 >> 24;

800 
buf
[2] = 
off£t
 >> 16;

801 
buf
[3] = 
off£t
 >> 8;

802 
buf
[4] = 
off£t
;

803 
	`•ic_wrôe
(
buf
, 5, 0 , 0);

804 
	`ø•i_waô_ªady
(950);

806 
	`ø•i_4byã_mode
(0);

812 
buf
[0] = 
OPCODE_SE
;

813 
buf
[1] = 
off£t
 >> 16;

814 
buf
[2] = 
off£t
 >> 8;

815 
buf
[3] = 
off£t
;

817 
	`•ic_wrôe
(
buf
, 4, 0 , 0);

818 
	`ø•i_waô_ªady
(950);

821 
	`ø•i_wrôe_dißbÀ
();

824 
	}
}

826 
chù_öfo
 *
	$chù_¥ob
()

828 
chù_öfo
 *
öfo
, *
m©ch
;

829 
u8
 
buf
[5];

830 
u32
 
jedec
, 
weight
;

831 
i
;

833 
	`ø•i_ªad_devid
(
buf
, 5);

834 
jedec
 = (
u32
)((u32)(
buf
[1] << 24) | ((u32)buf[2] << 16) | ((u32)buf[3] <<8) | (u32)buf[4]);

836 
	`¥ötf
("•òdevi˚ id: %x %x %x %x %x (%x)\n", 
buf
[0], buf[1], buf[2], buf[3], buf[4], 
jedec
);

839 
weight
 = 0xffffffff;

840 
m©ch
 = &
chùs_d©a
[0];

841 
i
 = 0; i < (
chùs_d©a
)/(chips_data[0]); i++) {

842 
öfo
 = &
chùs_d©a
[
i
];

843 i‡(
öfo
->
id
 =
buf
[0]) {

844 i‡(
öfo
->
jedec_id
 =
jedec
) {

845 
	`¥ötf
("föd fœsh: %s\n", 
öfo
->
«me
);

846  
öfo
;

849 i‡(
weight
 > (
öfo
->
jedec_id
 ^ 
jedec
)) {

850 
weight
 = 
öfo
->
jedec_id
 ^ 
jedec
;

851 
m©ch
 = 
öfo
;

855 
	`¥ötf
("Warning: un-recognized chip ID,Ölease update bootloader!\n");

857  
m©ch
;

858 
	}
}

860 
	$ø•i_öô
()

862 
	`•ic_öô
();

863 
•i_chù_öfo
 = 
	`chù_¥ob
();

865  
•i_chù_öfo
->
£˘‹_size
 * spi_chù_öfo->
n_£˘‹s
;

866 
	}
}

868 
	$ø•i_îa£
(
offs
, 
Àn
)

870 
	`ø_dbg
("%s: offs:%xÜí:%x\n", 
__func__
, 
offs
, 
Àn
);

873 i‡(
Àn
 == 0)

877 
Àn
 > 0) {

878 i‡(
	`ø•i_îa£_£˘‹
(
offs
)) {

882 
offs
 +
•i_chù_öfo
->
£˘‹_size
;

883 
Àn
 -
•i_chù_öfo
->
£˘‹_size
;

884 
	`¥ötf
(".");

886 
	`¥ötf
("\n");

889 
	}
}

891 
	$ø•i_ªad
(*
buf
, 
‰om
, 
Àn
)

893 
u8
 
cmd
[5], 
code
;

894 
rdÀn
;

897 
	`ø_dbg
("%s: from:%xÜí:%x \n", 
__func__
, 
‰om
, 
Àn
);

900 i‡(
Àn
 == 0)

904 i‡(
	`ø•i_waô_ªady
(1)) {

913 #ifde‡
COMMAND_MODE


915 #i‡
	`deföed
 (
RD_MODE_QUAD
)

917 
code
 = 
OPCODE_QOR
;

919 #ifde‡
RD_MODE_QIOR


920 
code
 = 
OPCODE_QIOR
;

922 
	`ø•i_£t_quad
();

925 #ñi‡
	`deföed
 (
RD_MODE_DOR
)

927 
code
 = 
OPCODE_DOR
;

929 #ñi‡
	`deföed
 (
RD_MODE_DIOR
)

931 
code
 = 
OPCODE_DIOR
;

934 #ñi‡
	`deföed
 (
RD_MODE_FAST
)

936 
code
 = 
OPCODE_FAST_READ
;

940 
code
 = 
OPCODE_READ
;

944 #ifde‡
ADDRESS_4B_MODE


945 i‡(
•i_chù_öfo
->
addr4b
)

947 
	`ø•i_4byã_mode
(1);

948 
rdÀn
 = 
	`ø•i_cmd
(
code
, 
‰om
, 0, 
buf
, 
Àn
, 0, 
SPIC_READ_BYTES
 | 
SPIC_4B_ADDR
);

949 
	`ø•i_4byã_mode
(0);

953 
rdÀn
 = 
	`ø•i_cmd
(
code
, 
‰om
, 0, 
buf
, 
Àn
, 0, 
SPIC_READ_BYTES
);

959 
cmd
[0] = 
OPCODE_READ
;

961 #i‚de‡
READ_BY_PAGE


963 #ifde‡
ADDRESS_4B_MODE


964 i‡(
•i_chù_öfo
->
addr4b
) {

965 
	`ø•i_4byã_mode
(1);

966 
cmd
[1] = 
‰om
 >> 24;

967 
cmd
[2] = 
‰om
 >> 16;

968 
cmd
[3] = 
‰om
 >> 8;

969 
cmd
[4] = 
‰om
;

970 
rdÀn
 = 
	`•ic_ªad
(
cmd
, 5, 
buf
 , 
Àn
);

971 
	`ø•i_4byã_mode
(0);

976 
cmd
[1] = 
‰om
 >> 16;

977 
cmd
[2] = 
‰om
 >> 8;

978 
cmd
[3] = 
‰om
;

979 
rdÀn
 = 
	`•ic_ªad
(
cmd
, 4, 
buf
, 
Àn
);

981 i‡(
rdÀn
 !
Àn
)

982 
	`¥ötf
("warning:Ñdlen !=Üen\n");

986 #ifde‡
ADDRESS_4B_MODE


987 i‡(
•i_chù_öfo
->
addr4b
) {

988 
u32
 
∑ge_size
;

990 
rdÀn
 = 0;

991 
	`ø•i_4byã_mode
(1);

992 
Àn
 > 0) {

994 
cmd
[1] = 
‰om
 >> 24;

995 
cmd
[2] = 
‰om
 >> 16;

996 
cmd
[3] = 
‰om
 >> 8;

997 
cmd
[4] = 
‰om
;

999 
∑ge_size
 = 
	`mö
(
Àn
, 
FLASH_PAGESIZE
);

1000 
rdÀn
 +
	`•ic_ªad
(
cmd
, 5, 
buf
 , 
∑ge_size
);

1001 
buf
 +
∑ge_size
;

1002 
Àn
 -
∑ge_size
;

1003 
‰om
 +
∑ge_size
;

1005 
	`ø•i_4byã_mode
(0);

1010 
u32
 
∑ge_size
;

1012 
rdÀn
 = 0;

1013 
Àn
 > 0) {

1015 
cmd
[1] = 
‰om
 >> 16;

1016 
cmd
[2] = 
‰om
 >> 8;

1017 
cmd
[3] = 
‰om
;

1019 
∑ge_size
 = 
	`mö
(
Àn
, 
FLASH_PAGESIZE
);

1020 
rdÀn
 +
	`•ic_ªad
(
cmd
, 4, 
buf
, 
∑ge_size
);

1021 
buf
 +
∑ge_size
;

1022 
Àn
 -
∑ge_size
;

1023 
‰om
 +
∑ge_size
;

1033  
rdÀn
;

1034 
	}
}

1036 
	$ø•i_wrôe
(*
buf
, 
to
, 
Àn
)

1038 
u32
 
∑ge_off£t
, 
∑ge_size
;

1039 
rc
 = 0, 
ªéí
 = 0;

1040 
u8
 
cmd
[5];

1042 
	`ø_dbg
("%s:Åo:%xÜí:%x \n", 
__func__
, 
to
, 
Àn
);

1045 i‡(
Àn
 == 0)

1047 i‡(
to
 + 
Àn
 > 
•i_chù_öfo
->
£˘‹_size
 * spi_chù_öfo->
n_£˘‹s
)

1051 i‡(
	`ø•i_waô_ªady
(2)) {

1056 
cmd
[0] = 
OPCODE_PP
;

1057 #ifde‡
ADDRESS_4B_MODE


1058 i‡(
•i_chù_öfo
->
addr4b
) {

1059 
cmd
[1] = 
to
 >> 24;

1060 
cmd
[2] = 
to
 >> 16;

1061 
cmd
[3] = 
to
 >> 8;

1062 
cmd
[4] = 
to
;

1067 
cmd
[1] = 
to
 >> 16;

1068 
cmd
[2] = 
to
 >> 8;

1069 
cmd
[3] = 
to
;

1073 
∑ge_off£t
 = 
to
 % 
FLASH_PAGESIZE
;

1075 #ifde‡
ADDRESS_4B_MODE


1076 i‡(
•i_chù_öfo
->
addr4b
) {

1077 
	`ø•i_4byã_mode
(1);

1082 
Àn
 > 0) {

1083 
∑ge_size
 = 
	`mö
(
Àn
, 
FLASH_PAGESIZE
-
∑ge_off£t
);

1084 
∑ge_off£t
 = 0;

1086 #ifde‡
ADDRESS_4B_MODE


1087 i‡(
•i_chù_öfo
->
addr4b
) {

1088 
cmd
[1] = 
to
 >> 24;

1089 
cmd
[2] = 
to
 >> 16;

1090 
cmd
[3] = 
to
 >> 8;

1091 
cmd
[4] = 
to
;

1096 
cmd
[1] = 
to
 >> 16;

1097 
cmd
[2] = 
to
 >> 8;

1098 
cmd
[3] = 
to
;

1101 
	`ø•i_waô_ªady
(3);

1102 
	`ø•i_wrôe_íabÀ
();

1103 
	`ø•i_u≈rŸe˘
();

1105 #ifde‡
COMMAND_MODE


1107 #ifde‡
RD_MODE_QUAD


1108 
	`ø•i_£t_quad
();

1111 i‡(
•i_chù_öfo
->
addr4b
)

1112 
rc
 = 
	`ø•i_cmd
(
OPCODE_PP
, 
to
, 0, 
buf
, 
∑ge_size
, 0, 
SPIC_WRITE_BYTES
 | 
SPIC_4B_ADDR
);

1114 
rc
 = 
	`ø•i_cmd
(
OPCODE_PP
, 
to
, 0, 
buf
, 
∑ge_size
, 0, 
SPIC_WRITE_BYTES
);

1128 #ifde‡
ADDRESS_4B_MODE


1129 i‡(
•i_chù_öfo
->
addr4b
)

1130 
rc
 = 
	`•ic_wrôe
(
cmd
, 5, 
buf
, 
∑ge_size
);

1133 
rc
 = 
	`•ic_wrôe
(
cmd
, 4, 
buf
, 
∑ge_size
);

1138 i‡((
ªéí
 & 0xffff) == 0)

1139 
	`¥ötf
(".");

1141 i‡(
rc
 > 0) {

1142 
ªéí
 +
rc
;

1143 i‡(
rc
 < 
∑ge_size
) {

1144 
	`¥ötf
("%s:Ñc:%xÖage_size:%x\n",

1145 
__func__
, 
rc
, 
∑ge_size
);

1146 
	`ø•i_wrôe_dißbÀ
();

1147  
ªéí
;

1151 
Àn
 -
∑ge_size
;

1152 
to
 +
∑ge_size
;

1153 
buf
 +
∑ge_size
;

1156 #ifde‡
ADDRESS_4B_MODE


1157 i‡(
•i_chù_öfo
->
addr4b
) {

1158 
	`ø•i_4byã_mode
(0);

1162 
	`¥ötf
("\n");

1164 
	`ø•i_wrôe_dißbÀ
();

1168  
ªéí
;

1169 
	}
}

1171 
	$ø•i_îa£_wrôe
(*
buf
, 
offs
, 
cou¡
)

1173 
blocksize
 = 
•i_chù_öfo
->
£˘‹_size
;

1174 
blockmask
 = 
blocksize
 - 1;

1176 
	`ø_dbg
("%s: offs:%x, cou¡:%x\n", 
__func__
, 
offs
, 
cou¡
);

1178 i‡(
cou¡
 > (
•i_chù_öfo
->
£˘‹_size
 * spi_chù_öfo->
n_£˘‹s
) -

1179 (
CFG_BOOTLOADER_SIZE
 + 
CFG_CONFIG_SIZE
 + 
CFG_FACTORY_SIZE
)) {

1180 
	`¥ötf
("Ab‹t: imagêsizêœrgîÅh™ %d!\n\n", (
•i_chù_öfo
->
£˘‹_size
 * spi_chù_öfo->
n_£˘‹s
) -

1181 (
CFG_BOOTLOADER_SIZE
 + 
CFG_CONFIG_SIZE
 + 
CFG_FACTORY_SIZE
));

1182 
	`udñay
(10*1000*1000);

1186 
cou¡
 > 0) {

1187 
	#BLOCK_ALIGNE
(
a
Ë((◊Ë& 
blockmask
))

	)

1188 i‡(
	`BLOCK_ALIGNE
(
offs
Ë|| (
cou¡
 < 
blocksize
)) {

1189 *
block
;

1190 
põ˚
, 
blockaddr
;

1191 
põ˚_size
;

1192 *
ãmp
;

1194 
block
 = 
	`mÆloc
(
blocksize
);

1195 i‡(!
block
)

1197 
ãmp
 = 
	`mÆloc
(
blocksize
);

1198 i‡(!
ãmp
)

1201 
blockaddr
 = 
offs
 & ~
blockmask
;

1203 i‡(
	`ø•i_ªad
(
block
, 
blockaddr
, 
blocksize
) != blocksize) {

1204 
	`‰ì
(
block
);

1205 
	`‰ì
(
ãmp
);

1209 
põ˚
 = 
offs
 & 
blockmask
;

1210 
põ˚_size
 = 
	`mö
(
cou¡
, 
blocksize
 - 
põ˚
);

1211 
	`mem˝y
(
block
 + 
põ˚
, 
buf
, 
põ˚_size
);

1213 i‡(
	`ø•i_îa£
(
blockaddr
, 
blocksize
) != 0) {

1214 
	`‰ì
(
block
);

1215 
	`‰ì
(
ãmp
);

1218 i‡(
	`ø•i_wrôe
(
block
, 
blockaddr
, 
blocksize
) != blocksize) {

1219 
	`‰ì
(
block
);

1220 
	`‰ì
(
ãmp
);

1223 #ifde‡
RALINK_SPI_UPGRADE_CHECK


1224 i‡(
	`ø•i_ªad
(
ãmp
, 
blockaddr
, 
blocksize
) != blocksize) {

1225 
	`‰ì
(
block
);

1226 
	`‰ì
(
ãmp
);

1231 if(
	`memcmp
(
block
, 
ãmp
, 
blocksize
) == 0)

1237 
	`¥ötf
("block write incorrect!\n\r");

1238 
	`‰ì
(
block
);

1239 
	`‰ì
(
ãmp
);

1243 
	`‰ì
(
ãmp
);

1244 
	`‰ì
(
block
);

1246 
buf
 +
põ˚_size
;

1247 
offs
 +
põ˚_size
;

1248 
cou¡
 -
põ˚_size
;

1251 
Æig√d_size
 = 
cou¡
 & ~
blockmask
;

1252 *
ãmp
;

1253 
i
;

1254 
ãmp
 = 
	`mÆloc
(
blocksize
);

1255 i‡(!
ãmp
)

1258 i‡(
	`ø•i_îa£
(
offs
, 
Æig√d_size
) != 0)

1260 
	`‰ì
(
ãmp
);

1263 i‡(
	`ø•i_wrôe
(
buf
, 
offs
, 
Æig√d_size
) !=áligned_size)

1265 
	`‰ì
(
ãmp
);

1269 #ifde‡
RALINK_SPI_UPGRADE_CHECK


1270  
i
=0; i< (
Æig√d_size
/
blocksize
); i++)

1272 i‡(
	`ø•i_ªad
(
ãmp
, 
offs
+(
i
*
blocksize
), blocksize) != blocksize)

1274 
	`‰ì
(
ãmp
);

1277 if(
	`memcmp
(
buf
+(
i
*
blocksize
), 
ãmp
, blocksize) == 0)

1283 
	`¥ötf
("blocksizêwrôêöc‹ª˘ block#=%d!\n\r",
i
);

1284 
	`‰ì
(
ãmp
);

1289 
	`‰ì
(
ãmp
);

1291 
buf
 +
Æig√d_size
;

1292 
offs
 +
Æig√d_size
;

1293 
cou¡
 -
Æig√d_size
;

1296 
	`¥ötf
("Done!\n");

1298 
	}
}

1300 
ul⁄g
 
NëBoŸFûeX„rSize
;

1302 #ifde‡
RALINK_CMDLINE


1303 
	$do_mem_˝
(
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

1305 
addr
, 
de°
;

1306 
cou¡
;

1308 
addr
 = 
CFG_LOAD_ADDR
;

1309 
cou¡
 = ()
NëBoŸFûeX„rSize
;

1311 i‡(!
	`°∫cmp
(
¨gv
[0], "cp.linux", 9)) {

1312 
de°
 = 
CFG_KERN_ADDR
 - 
CFG_FLASH_BASE
;

1313 
	`¥ötf
("\¿C›yÜöux image[%d byã]ÅÿSPI Fœsh[0x%08X].... \n", 
cou¡
, 
de°
);

1315 i‡(!
	`°∫cmp
(
¨gv
[0], "cp.uboot", 9)) {

1316 
de°
 = 0;

1317 
	`¥ötf
("\¿C›y uboŸ[%d byã]ÅÿSPI Fœsh[0x%08X].... \n", 
cou¡
, 
de°
);

1320 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

1324 
	`ø•i_wrôe
((*)
addr
, 
de°
, 
cou¡
);

1326 
	}
}

1328 
U_BOOT_CMD
(

1329 
˝
, 2, 1, 
do_mem_˝
,

1335 
	$do_Êîa£
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

1337 
rcode
, 
size
;

1339 i‡(
¨gc
 < 2) {

1340 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

1344 
size
 = 
•i_chù_öfo
->
£˘‹_size
 * spi_chù_öfo->
n_£˘‹s
;

1345 i‡(
	`°rcmp
(
¨gv
[1], "linux") == 0)

1347 
	`¥ötf
("\n EraseÜinux kernel block !!\n");

1348 
	`¥ötf
("From 0x%XÜígth 0x%X\n", 
CFG_KERN_ADDR
 - 
CFG_FLASH_BASE
,

1349 
size
 - (
CFG_BOOTLOADER_SIZE
 + 
CFG_CONFIG_SIZE
 + 
CFG_FACTORY_SIZE
));

1350 
	`ø•i_u≈rŸe˘
();

1351 
rcode
 = 
	`ø•i_îa£
(
CFG_KERN_ADDR
 - 
CFG_FLASH_BASE
,

1352 
size
 - (
CFG_BOOTLOADER_SIZE
 + 
CFG_CONFIG_SIZE
 + 
CFG_FACTORY_SIZE
));

1353  
rcode
;

1355 i‡(
	`°rcmp
(
¨gv
[1], "uboot") == 0)

1357 
	`¥ötf
("\n Erase u-boot block !!\n");

1358 
	`¥ötf
("From 0x%XÜígth 0x%X\n", 0, 
CFG_BOOTLOADER_SIZE
);

1359 
	`ø•i_u≈rŸe˘
();

1360 
rcode
 = 
	`ø•i_îa£
(0, 
CFG_BOOTLOADER_SIZE
);

1361  
rcode
;

1363 i‡(
	`°rcmp
(
¨gv
[1], "all") == 0) {

1364 
	`ø•i_u≈rŸe˘
();

1365 
rcode
 = 
	`ø•i_îa£
(0, 
size
);

1366  
rcode
;

1369 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

1371 
	}
}

1373 
U_BOOT_CMD
(

1374 
îa£
, 2, 1, 
do_Êîa£
,

1382 #ifde‡
SPI_FLASH_DBG_CMD


1383 
	$ølök_•i_comm™d
(
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

1385 i‡(!
	`°∫cmp
(
¨gv
[1], "id", 3)) {

1386 
u8
 
buf
[5];

1387 
	`ø•i_ªad_devid
(
buf
, 5);

1388 
	`¥ötf
("devi˚ id: %x %x %x %x %x\n", 
buf
[0], buf[1], buf[2], buf[3], buf[4]);

1390 i‡(!
	`°∫cmp
(
¨gv
[1], "read", 5)) {

1391 
addr
, 
Àn
;

1392 
u8
 *
p
;

1393 
i
;

1395 
addr
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

1396 
Àn
 = 
	`sim∂e_°πoul
(
¨gv
[3], 
NULL
, 16);

1397 
p
 = (
u8
 *)
	`mÆloc
(
Àn
);

1398 i‡(!
p
) {

1399 
	`¥ötf
("mallocÉrror\n");

1402 
Àn
 = 
	`ø•i_ªad
(
p
, 
addr
,Üen);

1403 
	`¥ötf
("ªadÜí: %d\n", 
Àn
);

1404 
i
 = 0; i < 
Àn
; i++) {

1405 
	`¥ötf
("%x ", 
p
[
i
]);

1407 
	`¥ötf
("\n");

1408 
	`‰ì
(
p
);

1410 i‡(!
	`°∫cmp
(
¨gv
[1], "sr", 3)) {

1411 
u8
 
§
;

1412 i‡(!
	`°∫cmp
(
¨gv
[2], "read", 5)) {

1413 i‡(
	`ø•i_ªad_§
(&
§
) < 0)

1414 
	`¥ötf
("read sr failed\n");

1416 
	`¥ötf
("§ %x\n", 
§
);

1418 i‡(!
	`°∫cmp
(
¨gv
[2], "write", 6)) {

1419 
§
 = (
u8
)
	`sim∂e_°πoul
(
¨gv
[3], 
NULL
, 16);

1420 
	`¥ötf
("åyög wrôê§ %x\n", 
§
);

1421 i‡(
	`ø•i_wrôe_§
(&
§
) < 0)

1422 
	`¥ötf
("write sr failed\n");

1424 i‡(
	`ø•i_ªad_§
(&
§
) < 0)

1425 
	`¥ötf
("read sr failed\n");

1427 
	`¥ötf
("§ %x\n", 
§
);

1431 #i‚de‡
NO_4B_ADDRESS_SUPPORT


1432 i‡(!
	`°∫cmp
(
¨gv
[1], "scur", 2)) {

1433 
u8
 
scur
;

1434 i‡(
¨gv
[2][0] == 'r') {

1435 i‡(
	`ø•i_ªad_scur
(&
scur
) < 0)

1436 
	`¥ötf
("read scur failed\n");

1438 
	`¥ötf
("scu∏%d\n", 
scur
);

1443 
	`¥ötf
("Ußge:\n%s\¿u£ \"hñ∞•i\" f‹ dëaû!\n", 
cmdç
->
ußge
);

1445 
	}
}

1447 
U_BOOT_CMD
(

1448 
•i
, 4, 1, 
ølök_•i_comm™d
,

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/spi_rt6855A_flash.c

1 
	~<comm⁄.h
>

2 
	~<comm™d.h
>

3 
	~<π_mm≠.h
>

4 
	~<c⁄figs/π2880.h
>

5 
	~<mÆloc.h
>

6 
	~"bbu_•iÊash.h
"

9 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_SPI
)

12 
	#BBU_MODE


13 
	#MORE_BUF_MODE


	)

15 #i‡!
deföed
 
USER_MODE
 && !deföed 
COMMAND_MODE
 && !deföed 
BBU_MODE


23 
	#FLASH_PAGESIZE
 256

	)

26 
	#OPCODE_WREN
 6

	)

27 
	#OPCODE_WRDI
 4

	)

28 
	#OPCODE_RDSR
 5

	)

29 
	#OPCODE_WRSR
 1

	)

30 
	#OPCODE_READ
 3

	)

31 
	#OPCODE_PP
 2

	)

32 
	#OPCODE_SE
 0xD8

	)

33 
	#OPCODE_RES
 0xAB

	)

34 
	#OPCODE_RDID
 0x9F

	)

36 
	#OPCODE_FAST_READ
 0x0B

	)

37 
	#OPCODE_DOR
 0x3B

	)

38 
	#OPCODE_QOR
 0x6B

	)

39 
	#OPCODE_DIOR
 0xBB

	)

40 
	#OPCODE_QIOR
 0xEB

	)

41 
	#OPCODE_READ_ID
 0x90

	)

43 
	#OPCODE_P4E
 0x20

	)

44 
	#OPCODE_P8E
 0x40

	)

45 
	#OPCODE_BE
 0x60

	)

46 
	#OPCODE_BE1
 0xC7

	)

47 
	#OPCODE_QPP
 0x32

	)

49 
	#OPCODE_CLSR
 0x30

	)

50 
	#OPCODE_RCR
 0x35

	)

53 
	#SR_WIP
 1

	)

54 
	#SR_WEL
 2

	)

55 
	#SR_BP0
 4

	)

56 
	#SR_BP1
 8

	)

57 
	#SR_BP2
 0x10

	)

58 
	#SR_EPE
 0x20

	)

59 
	#SR_SRWD
 0x80

	)

61 
	#OPCODE_BRRD
 0x16

	)

62 
	#OPCODE_BRWR
 0x17

	)

64 
	#ø_dbg
(
¨gs
...)

	)

67 
	#SPI_FIFO_SIZE
 16

	)

69 
	#ADDR_4B


75 

	)

76 #i‡
deföed
(
RD_MODE_QOR
Ë|| deföed(
RD_MODE_QIOR
)

77 
	#RD_MODE_QUAD


	)

81 
	#SPIC_READ_BYTES
 (1<<0)

	)

82 
	#SPIC_WRITE_BYTES
 (1<<1)

	)

83 
	#SPIC_USER_MODE
 (1<<2)

	)

84 
	#SPIC_4B_ADDR
 (1<<3)

	)

87 
ø•i_waô_ªady
(
¶ìp_ms
);

88 #i‡
deföed
 
USER_MODE
 || deföed 
COMMAND_MODE


89 
	g•i_waô_n£c
 = 0;

90 
	$•ic_busy_waô
()

93 i‡((
	`ø_öl
(
RT2880_SPI0_STAT_REG
) & 0x01) == 0)

95 } 
•i_waô_n£c
 >> 1);

97 
	`¥ötf
("%s: faû \n", 
__func__
);

99 
	}
}

100 #ñi‡
deföed
 
BBU_MODE


101 
	$bbu_•ic_busy_waô
()

103 
n
 = 100000;

105 i‡((
	`ø_öl
(
SPI_REG_CTL
Ë& 
SPI_CTL_BUSY
) == 0)

107 
	`udñay
(1);

108 } --
n
 > 0);

110 
	`¥ötf
("%s: faû \n", 
__func__
);

112 
	}
}

116 #ifde‡
USER_MODE


127 
	$•ic_å™s„r
(c⁄° 
u8
 *
cmd
, 
n_cmd
, u8 *
buf
, 
n_buf
, 
Êag
)

129 
ªtvÆ
 = -1;

130 
	`ø_dbg
("cmd(%x): %x %x %x %x , buf:%xÜen:%x, flag:%s \n",

131 
n_cmd
, 
cmd
[0], cmd[1], cmd[2], cmd[3],

132 (
buf
)? (*bufË: 0, 
n_buf
,

133 (
Êag
 =
SPIC_READ_BYTES
)? "read" : "write");

136 
	`ø_™d
(
RT2880_SPI0_CTL_REG
, ~(
SPICTL_SPIENA_HIGH
));

139 
ªtvÆ
 = 0;ÑëvÆ < 
n_cmd
;Ñetval++) {

140 
	`ø_oué
(
RT2880_SPI0_DATA_REG
, 
cmd
[
ªtvÆ
]);

141 
	`ø_‹
(
RT2880_SPI0_CTL_REG
, 
SPICTL_STARTWR
);

142 i‡(
	`•ic_busy_waô
()) {

143 
ªtvÆ
 = -1;

144 
íd_å™s
;

149 i‡(
Êag
 & 
SPIC_READ_BYTES
) {

150 
ªtvÆ
 = 0;ÑëvÆ < 
n_buf
;Ñetval++) {

151 
	`ø_‹
(
RT2880_SPI0_CTL_REG
, 
SPICTL_STARTRD
);

152 i‡(
n_cmd
 !1 && (
ªtvÆ
 & 0xffff) == 0) {

153 
	`¥ötf
(".");

155 i‡(
	`•ic_busy_waô
()) {

156 
	`¥ötf
("\n");

157 
íd_å™s
;

159 
buf
[
ªtvÆ
] = (
u8
Ë
	`ø_öl
(
RT2880_SPI0_DATA_REG
);

163 i‡(
Êag
 & 
SPIC_WRITE_BYTES
) {

164 
ªtvÆ
 = 0;ÑëvÆ < 
n_buf
;Ñetval++) {

165 
	`ø_oué
(
RT2880_SPI0_DATA_REG
, 
buf
[
ªtvÆ
]);

166 
	`ø_‹
(
RT2880_SPI0_CTL_REG
, 
SPICTL_STARTWR
);

167 i‡(
	`•ic_busy_waô
())

168 
íd_å™s
;

172 
íd_å™s
:

174 
	`ø_‹
 (
RT2880_SPI0_CTL_REG
, (
SPICTL_SPIENA_HIGH
));

176  
ªtvÆ
;

177 
	}
}

179 
	$•ic_ªad
(c⁄° 
u8
 *
cmd
, 
size_t
 
n_cmd
, u8 *
rxbuf
, size_à
n_rx
)

181  
	`•ic_å™s„r
(
cmd
, 
n_cmd
, 
rxbuf
, 
n_rx
, 
SPIC_READ_BYTES
);

182 
	}
}

184 
	$•ic_wrôe
(c⁄° 
u8
 *
cmd
, 
size_t
 
n_cmd
, c⁄° u8 *
txbuf
, size_à
n_tx
)

186  
	`•ic_å™s„r
(
cmd
, 
n_cmd
, (
u8
 *)
txbuf
, 
n_tx
, 
SPIC_WRITE_BYTES
);

187 
	}
}

190 
mùs_bus_„q
;

191 
	$•ic_öô
()

193 #i‡
deföed
 
USER_MODE
 || deföed 
COMMAND_MODE


196 
	`ø_™d
(
RT2880_GPIOMODE_REG
, ~(1 << 1));

197 #i‡
	`deföed
 (
RT6855_ASIC_BOARD
Ë|| deföed (
RT6855_FPGA_BOARD
)

198 
	`ø_‹
(
RT2880_GPIOMODE_REG
, (1 << 11));

201 
	`ø_‹
(
RT2880_RSTCTRL_REG
, 
RSTCTRL_SPI_RESET
);

202 
	`udñay
(1);

203 
	`ø_™d
(
RT2880_RSTCTRL_REG
, ~
RSTCTRL_SPI_RESET
);

205 #i‡
	`deföed
(
RALINK_VITESSE_SWITCH_CONNECT_SPI_CS1
)

207 
	`RALINK_REG
(
RT2880_SPI_ARB_REG
Ë
SPIARB_ARB_EN
 | (
SPIARB_SPI1_ACTIVE_MODE
 <<1Ë| 
SPIARB_SPI0_ACTIVE_MODE
;

208 
	`RALINK_REG
(
RT2880_SPI0_CTL_REG
Ë(~
SPIARB_SPI0_ACTIVE_MODE
)&0x1;

209 
	`RALINK_REG
(
RT2880_SPI1_CTL_REG
Ë(~
SPIARB_SPI1_ACTIVE_MODE
)&0x1;

213 #ifde‡
ADDR_4B


214 
	`ø_oué
(
RT2880_SPI0_CFG_REG
, 
SPICFG_MSBFIRST
 | 
SPICFG_TXCLKEDGE_FALLING
 | 
SPICFG_SPICLK_DIV8
 | 
SPICFG_SPICLKPOL
 | 
SPICFG_ADDRMODE
);

216 
	`ø_oué
(
RT2880_SPI0_CFG_REG
, 
SPICFG_MSBFIRST
 | 
SPICFG_TXCLKEDGE_FALLING
 | 
SPICFG_SPICLK_DIV8
 | 
SPICFG_SPICLKPOL
);

220 
	`ø_oué
(
RT2880_SPI0_CTL_REG
, 
SPICTL_HIZSDO
 | 
SPICTL_SPIENA_HIGH
);

222 
•i_waô_n£c
 = (8 * 1000 / ((
mùs_bus_„q
 / 1000 / 1000 / 
SPICFG_SPICLK_DIV8
) )) >> 1 ;

224 
	`¥ötf
("•i_waô_n£c: %x \n", 
•i_waô_n£c
);

226 #ñi‡
deföed
 
BBU_MODE


227 #i‡
	`deföed
 (
RT6855_ASIC_BOARD
Ë|| deföed (
RT6855_FPGA_BOARD
)

229 
	`ø_‹
(
RALINK_SYSCTL_BASE
 + 0x38, 0x80000000);

232 
	}
}

235 
	schù_öfo
 {

236 *
	m«me
;

237 
u8
 
	mid
;

238 
u32
 
	mjedec_id
;

239 
	m£˘‹_size
;

240 
	mn_£˘‹s
;

241 
	maddr4b
;

243 
chù_öfo
 *
	g•i_chù_öfo
 = 
NULL
;

245 
chù_öfo
 
	gchùs_d©a
 [] = {

289 #ifde‡
COMMAND_MODE


290 
	$ø•i_cmd
(c⁄° 
u8
 
cmd
, c⁄° 
u32
 
addr
, c⁄° u8 
mode
, u8 *
buf
, c⁄° 
size_t
 
n_buf
, c⁄° u32 
u£r
, c⁄° 
Êag
)

292 
u32
 
ªg
, 
cou¡
;

293 
ªtvÆ
 = 0;

297 
	`ø_‹
(
RT2880_SPICFG_REG
, (
SPICFG_SPIENMODE
 | 
SPICFG_RXENVDIS
));

298 
	`ø_oué
(
RT2880_SPIDATA_REG
, 
cmd
);

299 
	`ø_oué
(
RT2880_SPIMODE_REG
, (
mode
 << 24));

300 #ifde‡
ADDR_4B


301 
	`ø_oué
(
RT2880_SPIADDR_REG
, 
addr
);

303 i‡(
Êag
 & 
SPIC_4B_ADDR
)

305 
	`ø_oué
(
RT2880_SPIADDR_REG
, 
addr
);

309 
	`ø_oué
(
RT2880_SPIADDR_REG
, (
addr
 << 8));

312 
	`ø_oué
(
RT2880_SPIBS_REG
, 
n_buf
);

313 i‡(
Êag
 & 
SPIC_USER_MODE
)

315 
	`ø_oué
(
RT2880_SPIUSER_REG
, 
u£r
);

318 
	`ø_oué
(
RT2880_SPIUSER_REG
, 0);

320 
	`ø_oué
(
RT2880_SPICTL_REG
, 
SPICTL_START
);

323 i‡(
Êag
 & 
SPIC_READ_BYTES
)

326 i‡(
buf
 == 0)

328 
	`¥ötf
("NULLÖointer\n");

332 
ªtvÆ
 = 0;ÑëvÆ < 
n_buf
;)

335 
ªg
 = (
u32
Ë(
	`ø_öl
(
RT2880_SPIFIFOSTAT_REG
) & 0xff);

336 } 
ªg
 == 0);

338 
cou¡
 = 
ªg
; count > 0; count--)

340 
buf
[
ªtvÆ
++] = (
u8
Ë
	`ø_öl
(
RT2880_SPIRXFIFO_REG
);

346 i‡(
Êag
 & 
SPIC_WRITE_BYTES
)

348 i‡(
buf
 == 0)

350 
	`¥ötf
("NULLÖointer\n");

354 
cou¡
 = 
SPI_FIFO_SIZE
;

355 
ªtvÆ
 = 0;ÑëvÆ < 
n_buf
;)

357 
cou¡
--)

359 
	`ø_oué
(
RT2880_SPITXFIFO_REG
, 
buf
[
ªtvÆ
++]);

363 
ªg
 = (
u32
Ë((
	`ø_öl
(
RT2880_SPIFIFOSTAT_REG
 ) & 0xff00) >> 8);

364 } 
ªg
 >
SPI_FIFO_SIZE
);

366 
cou¡
 = 
SPI_FIFO_SIZE
 - 
ªg
;

367 i‡((
ªtvÆ
 + 
cou¡
Ë> 
n_buf
)

368 
cou¡
 = 
n_buf
 - 
ªtvÆ
;

372 i‡(
	`•ic_busy_waô
())

374 
ªtvÆ
 = -1;

376 
	`ø_™d
(
RT2880_SPICFG_REG
, ~(
SPICFG_SPIENMODE
 | 
SPICFG_RXENVDIS
));

378  
ªtvÆ
;

379 
	}
}

381 
	$ø•i_£t_quad
()

383 
ªtvÆ
 = 0;

387 i‡(
•i_chù_öfo
->
id
 == 0x1f)

389 
u8
 
§
;

390 
ªtvÆ
 = 
	`ø•i_cmd
(0x3f, 0, 0, &
§
, 1, 0, 
SPIC_READ_BYTES
);

391 i‡(
ªtvÆ
 == -1)

392 
îr_íd
;

393 i‡((
§
 & (1 << 7)) == 0)

395 
§
 |= (1 << 7);

396 
	`ø•i_wrôe_íabÀ
();

397 
ªtvÆ
 = 
	`ø•i_cmd
(0x3e, 0, 0, &
§
, 1, 0, 
SPIC_WRITE_BYTES
);

400 i‡(
•i_chù_öfo
->
id
 == 0xc2)

402 
u8
 
§
;

403 
ªtvÆ
 = 
	`ø•i_cmd
(
OPCODE_RDSR
, 0, 0, &
§
, 1, 0, 
SPIC_READ_BYTES
);

404 i‡(
ªtvÆ
 == -1)

405 
îr_íd
;

406 i‡((
§
 & (1 << 6)) == 0)

408 
§
 |= (1 << 6);

409 
	`ø•i_wrôe_íabÀ
();

410 
ªtvÆ
 = 
	`ø•i_cmd
(
OPCODE_WRSR
, 0, 0, &
§
, 1, 0, 
SPIC_WRITE_BYTES
);

413 i‡((
•i_chù_öfo
->
id
 == 0x01) || (spi_chip_info->id == 0xef))

415 
u8
 
§
[2];

416 
ªtvÆ
 = 
	`ø•i_cmd
(
OPCODE_RDSR
, 0, 0, 
§
, 1, 0, 
SPIC_READ_BYTES
);

417 i‡(
ªtvÆ
 == -1)

418 
îr_íd
;

419 
ªtvÆ
 = 
	`ø•i_cmd
(0x35, 0, 0, &
§
[1], 1, 0, 
SPIC_READ_BYTES
);

420 i‡(
ªtvÆ
 == -1)

421 
îr_íd
;

422 i‡((
§
[1] & (1 << 1)) == 0)

424 
§
[1] |= (1 << 1);

426 
ªtvÆ
 = 
	`ø•i_cmd
(
OPCODE_WRSR
, 0, 0, 
§
, 2, 0, 
SPIC_WRITE_BYTES
);

430 
îr_íd
:

431 i‡(
ªtvÆ
 == -1)

432 
	`¥ötf
("raspi_set_quadÉrror\n");

434  
ªtvÆ
;

435 
	}
}

438 #ifde‡
BBU_MODE


439 #ifde‡
MORE_BUF_MODE


440 
	$bbu_mb_•ic_å™s
(c⁄° 
u8
 
code
, c⁄° 
u32
 
addr
, u8 *
buf
, c⁄° 
size_t
 
n_tx
, c⁄° size_à
n_rx
, 
Êag
)

442 
u32
 
ªg
;

443 
i
, 
q
, 
r
;

444 
rc
 = -1;

446 i‡(
Êag
 !
SPIC_READ_BYTES
 && fœg !
SPIC_WRITE_BYTES
) {

447 
	`¥ötf
("we currently support more-byte-mode forÑeadingánd writing data only\n");

452 
	`ø_‹
(
SPI_REG_MASTER
, (1 << 2));

454 
	`bbu_•ic_busy_waô
();

457 i‡(
•i_chù_öfo
 && spi_chù_öfo->
addr4b
) {

458 
	`ø_™d
(
SPI_REG_CTL
, ~
SPI_CTL_ADDREXT_MASK
);

459 
	`ø_‹
(
SPI_REG_CTL
, (
code
 << 24Ë& 
SPI_CTL_ADDREXT_MASK
);

460 
	`ø_oué
(
SPI_REG_OPCODE
, 
addr
);

464 
	`ø_oué
(
SPI_REG_OPCODE
, (
code
 << 24) & 0xff000000);

465 
	`ø_‹
(
SPI_REG_OPCODE
, (
addr
 & 0xffffff));

467 
	`ø_™d
(
SPI_REG_MOREBUF
, ~
SPI_MBCTL_CMD_MASK
);

468 i‡(
•i_chù_öfo
 && spi_chù_öfo->
addr4b
)

469 
	`ø_‹
(
SPI_REG_MOREBUF
, (40 << 24));

471 
	`ø_‹
(
SPI_REG_MOREBUF
, (32 << 24));

474 i‡(
Êag
 & 
SPIC_WRITE_BYTES
) {

475 i‡(
buf
 =
NULL
) {

476 
	`¥ötf
("%s: wrôênuŒ buf\n", 
__func__
);

477 
RET_MB_TRANS
;

479 
i
 = 0; i < 
n_tx
; i++) {

480 
q
 = 
i
 / 4;

481 
r
 = 
i
 % 4;

482 i‡(
r
 == 0)

483 
	`ø_oué
(
	`SPI_REG_DATA
(
q
), 0);

484 
	`ø_‹
(
	`SPI_REG_DATA
(
q
), (*(
buf
 + 
i
Ë<< (
r
 * 8)));

489 
	`ø_™d
(
SPI_REG_MOREBUF
, ~
SPI_MBCTL_TX_RX_CNT_MASK
);

490 
	`ø_‹
(
SPI_REG_MOREBUF
, (
n_rx
 << 3 << 12));

491 
	`ø_‹
(
SPI_REG_MOREBUF
, 
n_tx
 << 3);

494 
	`ø_‹
(
SPI_REG_CTL
, 
SPI_CTL_START
);

497 
	`bbu_•ic_busy_waô
();

498 i‡(
Êag
 & 
SPIC_WRITE_BYTES
) {

499 
rc
 = 0;

500 
RET_MB_TRANS
;

504 i‡(
Êag
 & 
SPIC_READ_BYTES
) {

505 i‡(
buf
 =
NULL
) {

506 
	`¥ötf
("%s:ÑódÇuŒ buf\n", 
__func__
);

509 
i
 = 0; i < 
n_rx
; i++) {

510 
q
 = 
i
 / 4;

511 
r
 = 
i
 % 4;

512 
ªg
 = 
	`ø_öl
(
	`SPI_REG_DATA
(
q
));

513 *(
buf
 + 
i
Ë(
u8
)(
ªg
 >> (
r
 * 8));

517 
rc
 = 0;

518 
RET_MB_TRANS
:

520 
	`ø_™d
(
SPI_REG_MASTER
, ~(1 << 2));

521  
rc
;

522 
	}
}

525 
	$bbu_•ic_å™s
(c⁄° 
u8
 
code
, c⁄° 
u32
 
addr
, u8 *
buf
, c⁄° 
size_t
 
n_tx
, c⁄° size_à
n_rx
, 
Êag
)

527 
u32
 
ªg
;

529 
	`bbu_•ic_busy_waô
();

532 i‡(
•i_chù_öfo
 && spi_chù_öfo->
addr4b
) {

533 
	`ø_™d
(
SPI_REG_CTL
, ~
SPI_CTL_ADDREXT_MASK
);

534 
	`ø_‹
(
SPI_REG_CTL
, 
addr
 & 
SPI_CTL_ADDREXT_MASK
);

536 
	`ø_oué
(
SPI_REG_OPCODE
, ((
addr
 & 0xffffff) << 8));

537 
	`ø_‹
(
SPI_REG_OPCODE
, 
code
);

540 i‡(
Êag
 & 
SPIC_WRITE_BYTES
) {

541 i‡(
buf
 =
NULL
) {

542 
	`¥ötf
("%s: wrôênuŒ buf\n", 
__func__
);

545 
	`ø_oué
(
SPI_REG_DATA0
, 0);

546 
n_tx
) {

548 
	`ø_‹
(
SPI_REG_DATA0
, (*(
buf
+3) << 24));

550 
	`ø_‹
(
SPI_REG_DATA0
, (*(
buf
+2) << 16));

552 
	`ø_‹
(
SPI_REG_DATA0
, (*(
buf
+1) << 8));

555 
	`ø_‹
(
SPI_REG_DATA0
, *
buf
);

558 
	`¥ötf
("%s: fixme, wrôêo‡Àngth %d\n", 
__func__
, 
n_tx
);

564 
	`ø_™d
(
SPI_REG_CTL
, ~
SPI_CTL_TX_RX_CNT_MASK
);

565 
	`ø_‹
(
SPI_REG_CTL
, (
n_rx
 << 4));

566 i‡(
•i_chù_öfo
 && spi_chù_öfo->
addr4b
 && 
n_tx
 >= 4)

567 
	`ø_‹
(
SPI_REG_CTL
, (
n_tx
 + 1));

569 
	`ø_‹
(
SPI_REG_CTL
, 
n_tx
);

572 
	`ø_‹
(
SPI_REG_CTL
, 
SPI_CTL_START
);

575 
	`bbu_•ic_busy_waô
();

576 i‡(
Êag
 & 
SPIC_WRITE_BYTES
)

580 i‡(
Êag
 & 
SPIC_READ_BYTES
) {

581 i‡(
buf
 =
NULL
) {

582 
	`¥ötf
("%s:ÑódÇuŒ buf\n", 
__func__
);

585 
ªg
 = 
	`ø_öl
(
SPI_REG_DATA0
);

586 
n_rx
) {

588 *(
buf
+3Ë(
u8
)(
ªg
 >> 24);

590 *(
buf
+2Ë(
u8
)(
ªg
 >> 16);

592 *(
buf
+1Ë(
u8
)(
ªg
 >> 8);

594 *
buf
 = (
u8
)
ªg
;

597 
	`¥ötf
("%s: fixme,Ñód o‡Àngth %d\n", 
__func__
, 
n_rx
);

602 
	}
}

605 
ø•i_ªad_rg
(
u8
 
code
, u8 *
vÆ
);

606 
ø•i_wrôe_rg
(
u8
 
code
, u8 *
vÆ
);

608 
	$ø•i_ªad_§
(
u8
 *
vÆ
)

610  
	`ø•i_ªad_rg
(
OPCODE_RDSR
, 
vÆ
);

611 
	}
}

612 
	$ø•i_wrôe_§
(
u8
 *
vÆ
)

614  
	`ø•i_wrôe_rg
(
OPCODE_WRSR
, 
vÆ
);

615 
	}
}

620 
	$ø•i_ªad_devid
(
u8
 *
rxbuf
, 
n_rx
)

622 
u8
 
code
 = 
OPCODE_RDID
;

623 
ªtvÆ
;

625 #ifde‡
USER_MODE


626 
ªtvÆ
 = 
	`•ic_ªad
(&
code
, 1, 
rxbuf
, 
n_rx
);

627 #ñi‡
deföed
 
COMMAND_MODE


628 
ªtvÆ
 = 
	`ø•i_cmd
(
code
, 0, 0, 
rxbuf
, 
n_rx
, 0, 
SPIC_READ_BYTES
);

629 #ñi‡
deföed
 
BBU_MODE


630 
ªtvÆ
 = 
	`bbu_•ic_å™s
(
code
, 0, 
rxbuf
, 1, 3, 
SPIC_READ_BYTES
);

631 i‡(!
ªtvÆ
)

632 
ªtvÆ
 = 
n_rx
;

634 i‡(
ªtvÆ
 !
n_rx
) {

635 
	`¥ötf
("%s:Ñë: %x\n", 
__func__
, 
ªtvÆ
);

636  
ªtvÆ
;

638  
ªtvÆ
;

639 
	}
}

644 
	$ø•i_ªad_rg
(
u8
 
code
, u8 *
vÆ
)

646 
ssize_t
 
ªtvÆ
;

648 #ifde‡
USER_MODE


649 
ªtvÆ
 = 
	`•ic_ªad
(&
code
, 1, 
vÆ
, 1);

650 #ñi‡
deföed
 
COMMAND_MODE


651 
ªtvÆ
 = 
	`ø•i_cmd
(
code
, 0, 0, 
vÆ
, 1, 0, 
SPIC_READ_BYTES
);

652 #ñi‡
deföed
 
BBU_MODE


653 
ªtvÆ
 = 
	`bbu_•ic_å™s
(
code
, 0, 
vÆ
, 1, 1, 
SPIC_READ_BYTES
);

654  
ªtvÆ
;

656 i‡(
ªtvÆ
 != 1) {

657 
	`¥ötf
("%s:Ñë: %x\n", 
__func__
, 
ªtvÆ
);

661 
	}
}

666 
	$ø•i_wrôe_rg
(
u8
 
code
, u8 *
vÆ
)

668 
ssize_t
 
ªtvÆ
;

670 #ifde‡
USER_MODE


671 
ªtvÆ
 = 
	`•ic_wrôe
(&
code
, 1, 
vÆ
, 1);

672 #ñi‡
deföed
 
COMMAND_MODE


673 
ªtvÆ
 = 
	`ø•i_cmd
(
code
, 0, 0, 
vÆ
, 1, 0, 
SPIC_WRITE_BYTES
);

674 #ñi‡
deföed
 
BBU_MODE


677 
u32
 
addªss
 = (*
vÆ
) << 24;

678 
ªtvÆ
 = 
	`bbu_•ic_å™s
(
code
, 
addªss
, 
vÆ
, 2, 0, 
SPIC_WRITE_BYTES
);

680  
ªtvÆ
;

682 i‡(
ªtvÆ
 != 1) {

683 
	`¥ötf
("%s:Ñë: %x\n", 
__func__
, 
ªtvÆ
);

687 
	}
}

690 
	$ø•i_˛ór_§
()

692 
u8
 
code
 = 
OPCODE_CLSR
;

694 #ifde‡
USER_MODE


695 
	`•ic_ªad
(&
code
, 1, 0, 0);

696 #ñi‡
deföed
 
COMMAND_MODE


697 
	`ø•i_cmd
(
code
, 0, 0, 0, 0, 0, 0);

698 #ñi‡
deföed
 
BBU_MODE


699 
	`bbu_•ic_å™s
(
code
, 0, 
NULL
, 1, 0, 0);

702 
	}
}

705 
	$ø•i_ªad_scur
(
u8
 *
vÆ
)

707 
ssize_t
 
ªtvÆ
 = -1;

708 
u8
 
code
 = 0x2b;

710 #ifde‡
USER_MODE


711 
ªtvÆ
 = 
	`•ic_ªad
(&
code
, 1, 
vÆ
, 1);

712 #ñi‡
deföed
 
COMMAND_MODE


713 
u32
 
u£r
;

715 
u£r
 = 
SPIUSR_SINGLE
 | (SPIUSR_SINGLE << 3Ë| (SPIUSR_SINGLE << 6Ë| (SPIUSR_SINGLE << 9Ë| (
SPIUSR_READ_DATA
 << 12Ë| (
SPIUSR_NO_DUMMY
 << 14Ë| (
SPIUSR_NO_MODE
 << 16Ë| (
SPIUSR_NO_ADDR
 << 17Ë| (
SPIUSR_ONE_INSTRU
 << 20) | (1 << 21);

716 
ªtvÆ
 = 
	`ø•i_cmd
(
code
, 0, 0, 
vÆ
, 1, 
u£r
, 
SPIC_READ_BYTES
 | 
SPIC_USER_MODE
);

717 #ñi‡
deföed
 
BBU_MODE


718 
ªtvÆ
 = 
	`bbu_•ic_å™s
(
code
, 0, 
vÆ
, 1, 1, 
SPIC_READ_BYTES
);

720 i‡(
ªtvÆ
 != 1) {

721 
	`¥ötf
("%s:Ñë: %x\n", 
__func__
, 
ªtvÆ
);

725 
	}
}

727 
	$ø•i_4byã_mode
(
íabÀ
)

729 
ssize_t
 
ªtvÆ
;

731 
	`ø•i_waô_ªady
(1);

733 i‡(
•i_chù_öfo
->
id
 == 0x1)

735 
u8
 
br
, 
br_c‚
;

736 #ifde‡
USER_MODE


737 i‡(
íabÀ
)

739 
br
 = 0x81;

740 
	`ø_‹
(
RT2880_SPICFG_REG
, 
SPICFG_ADDRMODE
);

744 
br
 = 0x0;

745 
	`ø_™d
(
RT2880_SPICFG_REG
, ~(
SPICFG_ADDRMODE
));

748 #ñi‡
deföed
 
BBU_MODE


749 i‡(
íabÀ
) {

750 
	`ø_‹
(
SPI_REG_CTL
, 0x3 << 19);

751 
	`ø_‹
(
SPI_REG_Q_CTL
, 0x3 << 8);

752 
br
 = 0x81;

755 
	`ø_™d
(
SPI_REG_CTL
, ~
SPI_CTL_SIZE_MASK
);

756 
	`ø_‹
(
SPI_REG_CTL
, 0x2 << 19);

757 
	`ø_™d
(
SPI_REG_Q_CTL
, ~(0x3 << 8));

758 
	`ø_‹
(
SPI_REG_Q_CTL
, 0x2 << 8);

759 
br
 = 0;

764 
	`ø•i_wrôe_rg
(
OPCODE_BRWR
, &
br
);

765 
	`ø•i_ªad_rg
(
OPCODE_BRRD
, &
br_c‚
);

766 i‡(
br_c‚
 !
br
)

768 
	`¥ötf
("4B modêswôch faûed %d, %x, %x\n", 
íabÀ
, 
br_c‚
, 
br
);

775 
u8
 
code
;

776 #ifde‡
COMMAND_MODE


777 
u32
 
u£r
;

780 
code
 = 
íabÀ
? 0xB7 : 0xE9;

782 #ifde‡
USER_MODE


783 i‡(
íabÀ
)

784 
	`ø_‹
(
RT2880_SPICFG_REG
, 
SPICFG_ADDRMODE
);

786 
	`ø_™d
(
RT2880_SPICFG_REG
, ~(
SPICFG_ADDRMODE
));

787 
ªtvÆ
 = 
	`•ic_ªad
(&
code
, 1, 0, 0);

788 #ñi‡
deföed
 
COMMAND_MODE


789 i‡(
íabÀ
)

790 
	`ø_‹
(
RT2880_SPICFG_REG
, 
SPICFG_ADDRMODE
);

792 
	`ø_™d
(
RT2880_SPICFG_REG
, ~(
SPICFG_ADDRMODE
));

793 
u£r
 = 
SPIUSR_SINGLE
 | (SPIUSR_SINGLE << 3Ë| (SPIUSR_SINGLE << 6Ë| (SPIUSR_SINGLE << 9Ë| (
SPIUSR_NO_DATA
 << 12Ë| (
SPIUSR_NO_DUMMY
 << 14Ë| (
SPIUSR_NO_MODE
 << 16Ë| (
SPIUSR_NO_ADDR
 << 17Ë| (
SPIUSR_ONE_INSTRU
 << 20) | (1 << 21);

794 
ªtvÆ
 = 
	`ø•i_cmd
(
code
, 0, 0, 0, 0, 
u£r
, 
SPIC_USER_MODE
);

795 #ñi‡
deföed
 
BBU_MODE


796 i‡(
íabÀ
) {

797 
	`ø_‹
(
SPI_REG_CTL
, 0x3 << 19);

798 
	`ø_‹
(
SPI_REG_Q_CTL
, 0x3 << 8);

801 
	`ø_™d
(
SPI_REG_CTL
, ~
SPI_CTL_SIZE_MASK
);

802 
	`ø_‹
(
SPI_REG_CTL
, 0x2 << 19);

803 
	`ø_™d
(
SPI_REG_Q_CTL
, ~(0x3 << 8));

804 
	`ø_‹
(
SPI_REG_Q_CTL
, 0x2 << 8);

806 
ªtvÆ
 = 
	`bbu_•ic_å™s
(
code
, 0, 
NULL
, 1, 0, 0);

808 i‡(
ªtvÆ
 != 0) {

809 
	`¥ötf
("%s:Ñë: %x\n", 
__func__
, 
ªtvÆ
);

814 
	}
}

820 
ölöe
 
	$ø•i_wrôe_íabÀ
()

822 
u8
 
code
 = 
OPCODE_WREN
;

824 #ifde‡
USER_MODE


825  
	`•ic_wrôe
(&
code
, 1, 
NULL
, 0);

826 #ñi‡
deföed
 
COMMAND_MODE


827  
	`ø•i_cmd
(
code
, 0, 0, 0, 0, 0, 0);

828 #ñi‡
deföed
 
BBU_MODE


829  
	`bbu_•ic_å™s
(
code
, 0, 
NULL
, 1, 0, 0);

831 
	}
}

833 
ölöe
 
	$ø•i_wrôe_dißbÀ
()

835 
u8
 
code
 = 
OPCODE_WRDI
;

837 #ifde‡
USER_MODE


838  
	`•ic_wrôe
(&
code
, 1, 
NULL
, 0);

839 #ñi‡
deföed
 
COMMAND_MODE


840  
	`ø•i_cmd
(
code
, 0, 0, 0, 0, 0, 0);

841 #ñi‡
deföed
 
BBU_MODE


842  
	`bbu_•ic_å™s
(
code
, 0, 
NULL
, 1, 0, 0);

844 
	}
}

850 
ölöe
 
	$ø•i_u≈rŸe˘
()

852 
u8
 
§
 = 0;

854 i‡(
	`ø•i_ªad_§
(&
§
) < 0) {

855 
	`¥ötf
("%s:Ñód_§ faû: %x\n", 
__func__
, 
§
);

859 i‡((
§
 & (
SR_BP0
 | 
SR_BP1
 | 
SR_BP2
)) != 0) {

860 
§
 = 0;

861 
	`ø•i_wrôe_§
(&
§
);

863 
	}
}

869 
	$ø•i_waô_ªady
(
¶ìp_ms
)

871 
cou¡
;

872 
§
 = 0;

879 
cou¡
 = 0; cou¡ < ((
¶ìp_ms
+1) *1000*500); count++) {

880 i‡((
	`ø•i_ªad_§
((
u8
 *)&
§
)) < 0)

882 i‡(!(
§
 & 
SR_WIP
)) {

886 
	`udñay
(1);

890 
	`¥ötf
("%s:Ñód_§ faû: %x\n", 
__func__
, 
§
);

892 
	}
}

900 
	$ø•i_îa£_£˘‹
(
u32
 
off£t
)

902 #ifde‡
USER_MODE


903 
u8
 
buf
[5];

907 i‡(
	`ø•i_waô_ªady
(950))

911 
	`ø•i_wrôe_íabÀ
();

912 
	`ø•i_u≈rŸe˘
();

914 #ifde‡
USER_MODE


915 i‡(
•i_chù_öfo
->
addr4b
) {

916 
	`ø•i_4byã_mode
(1);

917 
	`ø•i_wrôe_íabÀ
();

918 
buf
[0] = 
OPCODE_SE
;

919 
buf
[1] = 
off£t
 >> 24;

920 
buf
[2] = 
off£t
 >> 16;

921 
buf
[3] = 
off£t
 >> 8;

922 
buf
[4] = 
off£t
;

923 
	`•ic_wrôe
(
buf
, 5, 0, 0);

924 
	`ø•i_4byã_mode
(0);

929 
buf
[0] = 
OPCODE_SE
;

930 
buf
[1] = 
off£t
 >> 16;

931 
buf
[2] = 
off£t
 >> 8;

932 
buf
[3] = 
off£t
;

934 
	`•ic_wrôe
(
buf
, 4, 0, 0);

935 
	`ø•i_waô_ªady
(950);

936 #ñi‡
deföed
 
COMMAND_MODE


937 i‡(
•i_chù_öfo
->
addr4b
)

939 
	`ø•i_4byã_mode
(1);

940 
	`ø•i_wrôe_íabÀ
();

941 
	`ø•i_cmd
(
OPCODE_SE
, 
off£t
, 0, 0, 0, 0, 
SPIC_4B_ADDR
);

944 
	`ø•i_cmd
(
OPCODE_SE
, 
off£t
, 0, 0, 0, 0, 0);

945 
	`ø•i_waô_ªady
(950);

947 i‡(
•i_chù_öfo
->
addr4b
)

949 
	`ø•i_4byã_mode
(0);

951 #ñi‡
deföed
 
BBU_MODE


952 i‡(
•i_chù_öfo
->
addr4b
)

954 
	`ø•i_4byã_mode
(1);

955 
	`ø•i_wrôe_íabÀ
();

957 
	`bbu_•ic_å™s
(
STM_OP_SECTOR_ERASE
, 
off£t
, 
NULL
, 4, 0, 0);

958 
	`ø•i_waô_ªady
(950);

959 i‡(
•i_chù_öfo
->
addr4b
)

960 
	`ø•i_4byã_mode
(0);

963 
	`ø•i_wrôe_dißbÀ
();

966 
	}
}

968 
chù_öfo
 *
	$chù_¥ob
()

970 
chù_öfo
 *
öfo
, *
m©ch
;

971 
u8
 
buf
[5];

972 
u32
 
jedec
, 
weight
;

973 
i
;

975 
	`ø•i_ªad_devid
(
buf
, 5);

976 
jedec
 = (
u32
)((u32)(
buf
[1] << 24) | ((u32)buf[2] << 16) | ((u32)buf[3] <<8) | (u32)buf[4]);

978 #ifde‡
BBU_MODE


979 
	`¥ötf
("Êash m™uÁ˘uª id: %x, devi˚ id %x %x\n", 
buf
[0], buf[1], buf[2]);

981 
	`¥ötf
("•òdevi˚ id: %x %x %x %x %x (%x)\n", 
buf
[0], buf[1], buf[2], buf[3], buf[4], 
jedec
);

985 
weight
 = 0xffffffff;

986 
m©ch
 = &
chùs_d©a
[0];

987 
i
 = 0; i < (
chùs_d©a
)/(chips_data[0]); i++) {

988 
öfo
 = &
chùs_d©a
[
i
];

989 i‡(
öfo
->
id
 =
buf
[0]) {

990 #ifde‡
BBU_MODE


991 i‡((
u8
)(
öfo
->
jedec_id
 >> 24 & 0xffË=
buf
[1] &&

992 (
u8
)(
öfo
->
jedec_id
 >> 16 & 0xffË=
buf
[2])

994 i‡(
öfo
->
jedec_id
 =
jedec
)

997 
	`¥ötf
("föd fœsh: %s\n", 
öfo
->
«me
);

998  
öfo
;

1001 i‡(
weight
 > (
öfo
->
jedec_id
 ^ 
jedec
)) {

1002 
weight
 = 
öfo
->
jedec_id
 ^ 
jedec
;

1003 
m©ch
 = 
öfo
;

1007 
	`¥ötf
("Warning: un-recognized chip ID,Ölease update bootloader!\n");

1009  
m©ch
;

1010 
	}
}

1012 
	$ø•i_öô
()

1014 
	`•ic_öô
();

1015 
•i_chù_öfo
 = 
	`chù_¥ob
();

1016  
•i_chù_öfo
->
£˘‹_size
 * spi_chù_öfo->
n_£˘‹s
;

1017 
	}
}

1019 
	$ø•i_îa£
(
offs
, 
Àn
)

1021 
	`ø_dbg
("%s: offs:%xÜí:%x\n", 
__func__
, 
offs
, 
Àn
);

1024 i‡(
Àn
 == 0)

1028 
Àn
 > 0) {

1029 i‡(
	`ø•i_îa£_£˘‹
(
offs
)) {

1033 
offs
 +
•i_chù_öfo
->
£˘‹_size
;

1034 
Àn
 -
•i_chù_öfo
->
£˘‹_size
;

1035 
	`¥ötf
(".");

1037 
	`¥ötf
("\n");

1040 
	}
}

1042 
	$ø•i_ªad
(*
buf
, 
‰om
, 
Àn
)

1044 
rdÀn
 = 0;

1045 #ifde‡
USER_MODE


1046 
u8
 
cmd
[5];

1047 #ñi‡
deföed
 
COMMAND_MODE


1048 
u8
 
code
;

1051 
	`ø_dbg
("%s: from:%xÜí:%x \n", 
__func__
, 
‰om
, 
Àn
);

1054 i‡(
Àn
 == 0)

1058 i‡(
	`ø•i_waô_ªady
(1)) {

1063 #ifde‡
USER_MODE


1066 
cmd
[0] = 
OPCODE_READ
;

1067 i‡(
•i_chù_öfo
->
addr4b
) {

1068 
	`ø•i_4byã_mode
(1);

1069 
cmd
[1] = 
‰om
 >> 24;

1070 
cmd
[2] = 
‰om
 >> 16;

1071 
cmd
[3] = 
‰om
 >> 8;

1072 
cmd
[4] = 
‰om
;

1073 
rdÀn
 = 
	`•ic_ªad
(
cmd
, 5, 
buf
 , 
Àn
);

1074 
	`ø•i_4byã_mode
(0);

1078 
cmd
[1] = 
‰om
 >> 16;

1079 
cmd
[2] = 
‰om
 >> 8;

1080 
cmd
[3] = 
‰om
;

1081 
rdÀn
 = 
	`•ic_ªad
(
cmd
, 4, 
buf
, 
Àn
);

1083 i‡(
rdÀn
 !
Àn
)

1084 
	`¥ötf
("warning:Ñdlen !=Üen\n");

1086 #ñi‡
deföed
 
COMMAND_MODE


1089 #i‡
	`deföed
 (
RD_MODE_QUAD
)

1090 
code
 = 
OPCODE_QOR
;

1091 #ifde‡
RD_MODE_QIOR


1092 
code
 = 
OPCODE_QIOR
;

1094 
	`ø•i_£t_quad
();

1095 #ñi‡
	`deföed
 (
RD_MODE_DOR
)

1096 
code
 = 
OPCODE_DOR
;

1097 #ñi‡
	`deföed
 (
RD_MODE_DIOR
)

1098 
code
 = 
OPCODE_DIOR
;

1099 #ñi‡
	`deföed
 (
RD_MODE_FAST
)

1100 
code
 = 
OPCODE_FAST_READ
;

1102 
code
 = 
OPCODE_READ
;

1105 i‡(
•i_chù_öfo
->
addr4b
)

1107 
	`ø•i_4byã_mode
(1);

1108 
rdÀn
 = 
	`ø•i_cmd
(
code
, 
‰om
, 0, 
buf
, 
Àn
, 0, 
SPIC_READ_BYTES
 | 
SPIC_4B_ADDR
);

1111 
rdÀn
 = 
	`ø•i_cmd
(
code
, 
‰om
, 0, 
buf
, 
Àn
, 0, 
SPIC_READ_BYTES
);

1112 i‡(
•i_chù_öfo
->
addr4b
)

1114 
	`ø•i_4byã_mode
(0);

1117 #ñi‡
deföed
 
BBU_MODE


1118 i‡(
•i_chù_öfo
->
addr4b
)

1119 
	`ø•i_4byã_mode
(1);

1121 
rc
, 
m‹e
;

1122 #ifde‡
MORE_BUF_MODE


1123 
m‹e
 = 32;

1125 
m‹e
 = 4;

1127 i‡(
Àn
 - 
rdÀn
 <
m‹e
) {

1128 #ifde‡
MORE_BUF_MODE


1129 
rc
 = 
	`bbu_mb_•ic_å™s
(
STM_OP_RD_DATA
, 
‰om
, (
buf
+
rdÀn
), 0, (
Àn
-rdÀn), 
SPIC_READ_BYTES
);

1131 
rc
 = 
	`bbu_•ic_å™s
(
STM_OP_RD_DATA
, 
‰om
, (
buf
+
rdÀn
), 4, (
Àn
-rdÀn), 
SPIC_READ_BYTES
);

1133 i‡(
rc
 != 0) {

1134 
	`¥ötf
("%s: faûed\n", 
__func__
);

1137 
rdÀn
 = 
Àn
;

1140 #ifde‡
MORE_BUF_MODE


1141 
rc
 = 
	`bbu_mb_•ic_å™s
(
STM_OP_RD_DATA
, 
‰om
, (
buf
+
rdÀn
), 0, 
m‹e
, 
SPIC_READ_BYTES
);

1143 
rc
 = 
	`bbu_•ic_å™s
(
STM_OP_RD_DATA
, 
‰om
, (
buf
+
rdÀn
), 4, 
m‹e
, 
SPIC_READ_BYTES
);

1145 i‡(
rc
 != 0) {

1146 
	`¥ötf
("%s: faûed\n", 
__func__
);

1149 
rdÀn
 +
m‹e
;

1150 
‰om
 +
m‹e
;

1152 } 
rdÀn
 < 
Àn
);

1153 i‡(
•i_chù_öfo
->
addr4b
)

1154 
	`ø•i_4byã_mode
(0);

1157  
rdÀn
;

1158 
	}
}

1160 
	$ø•i_wrôe
(*
buf
, 
to
, 
Àn
)

1162 
u32
 
∑ge_off£t
, 
∑ge_size
;

1163 
rc
 = 0, 
ªéí
 = 0;

1164 #ifde‡
USER_MODE


1165 
u8
 
cmd
[5];

1166 #ñi‡
deföed
 
BBU_MODE


1167 
wπo
, 
wæí
, 
m‹e
;

1168 *
wrbuf
;

1171 
	`ø_dbg
("%s:Åo:%xÜí:%x \n", 
__func__
, 
to
, 
Àn
);

1174 i‡(
Àn
 == 0)

1176 i‡(
to
 + 
Àn
 > 
•i_chù_öfo
->
£˘‹_size
 * spi_chù_öfo->
n_£˘‹s
)

1180 i‡(
	`ø•i_waô_ªady
(2))

1183 #ifde‡
USER_MODE


1185 
cmd
[0] = 
OPCODE_PP
;

1186 i‡(
•i_chù_öfo
->
addr4b
) {

1187 
cmd
[1] = 
to
 >> 24;

1188 
cmd
[2] = 
to
 >> 16;

1189 
cmd
[3] = 
to
 >> 8;

1190 
cmd
[4] = 
to
;

1194 
cmd
[1] = 
to
 >> 16;

1195 
cmd
[2] = 
to
 >> 8;

1196 
cmd
[3] = 
to
;

1201 
∑ge_off£t
 = 
to
 % 
FLASH_PAGESIZE
;

1203 i‡(
•i_chù_öfo
->
addr4b
)

1204 
	`ø•i_4byã_mode
(1);

1207 
Àn
 > 0) {

1208 
∑ge_size
 = 
	`mö
(
Àn
, 
FLASH_PAGESIZE
-
∑ge_off£t
);

1209 
∑ge_off£t
 = 0;

1212 #ifde‡
USER_MODE


1213 i‡(
•i_chù_öfo
->
addr4b
) {

1214 
cmd
[1] = 
to
 >> 24;

1215 
cmd
[2] = 
to
 >> 16;

1216 
cmd
[3] = 
to
 >> 8;

1217 
cmd
[4] = 
to
;

1221 
cmd
[1] = 
to
 >> 16;

1222 
cmd
[2] = 
to
 >> 8;

1223 
cmd
[3] = 
to
;

1227 
	`ø•i_waô_ªady
(3);

1228 
	`ø•i_wrôe_íabÀ
();

1229 
	`ø•i_u≈rŸe˘
();

1231 #ifde‡
USER_MODE


1233 i‡(
•i_chù_öfo
->
addr4b
)

1234 
rc
 = 
	`•ic_wrôe
(
cmd
, 5, 
buf
, 
∑ge_size
);

1236 
rc
 = 
	`•ic_wrôe
(
cmd
, 4, 
buf
, 
∑ge_size
);

1238 #ñi‡
deföed
 
COMMAND_MODE


1240 #ifde‡
RD_MODE_QUAD


1241 
	`ø•i_£t_quad
();

1244 i‡(
•i_chù_öfo
->
addr4b
)

1245 
rc
 = 
	`ø•i_cmd
(
OPCODE_PP
, 
to
, 0, 
buf
, 
∑ge_size
, 0, 
SPIC_WRITE_BYTES
 | 
SPIC_4B_ADDR
);

1247 
rc
 = 
	`ø•i_cmd
(
OPCODE_PP
, 
to
, 0, 
buf
, 
∑ge_size
, 0, 
SPIC_WRITE_BYTES
);

1258 #ñi‡
deföed
 
BBU_MODE


1259 
wπo
 = 
to
;

1260 
wæí
 = 
∑ge_size
;

1261 
wrbuf
 = 
buf
;

1263 #ifde‡
MORE_BUF_MODE


1264 
m‹e
 = 32;

1266 
m‹e
 = 4;

1268 i‡(
wæí
 <
m‹e
) {

1269 #ifde‡
MORE_BUF_MODE


1270 
	`bbu_mb_•ic_å™s
(
STM_OP_PAGE_PGRM
, 
wπo
, 
wrbuf
, 
wæí
, 0, 
SPIC_WRITE_BYTES
);

1272 
	`bbu_•ic_å™s
(
STM_OP_PAGE_PGRM
, 
wπo
, 
wrbuf
, 
wæí
+4, 0, 
SPIC_WRITE_BYTES
);

1274 
ªéí
 +
wæí
;

1275 
wæí
 = 0;

1278 #ifde‡
MORE_BUF_MODE


1279 
	`bbu_mb_•ic_å™s
(
STM_OP_PAGE_PGRM
, 
wπo
, 
wrbuf
, 
m‹e
, 0, 
SPIC_WRITE_BYTES
);

1281 
	`bbu_•ic_å™s
(
STM_OP_PAGE_PGRM
, 
wπo
, 
wrbuf
, 
m‹e
+4, 0, 
SPIC_WRITE_BYTES
);

1283 
ªéí
 +
m‹e
;

1284 
wπo
 +
m‹e
;

1285 
wæí
 -
m‹e
;

1286 
wrbuf
 +
m‹e
;

1288 i‡(
wæí
 > 0) {

1289 
	`ø•i_wrôe_dißbÀ
();

1290 
	`ø•i_waô_ªady
(100);

1291 
	`ø•i_wrôe_íabÀ
();

1293 } 
wæí
 > 0);

1297 i‡((
ªéí
 & 0xffff) == 0)

1298 
	`¥ötf
(".");

1300 i‡(
rc
 > 0) {

1301 
ªéí
 +
rc
;

1302 i‡(
rc
 < 
∑ge_size
) {

1303 
	`¥ötf
("%s:Ñc:%xÖage_size:%x\n",

1304 
__func__
, 
rc
, 
∑ge_size
);

1305  
ªéí
;

1309 
Àn
 -
∑ge_size
;

1310 
to
 +
∑ge_size
;

1311 
buf
 +
∑ge_size
;

1313 
	`ø•i_waô_ªady
(100);

1314 
	`¥ötf
("\n");

1315 i‡(
•i_chù_öfo
->
addr4b
)

1316 
	`ø•i_4byã_mode
(0);

1318 
	`ø•i_wrôe_dißbÀ
();

1320  
ªéí
;

1321 
	}
}

1323 
	$ø•i_îa£_wrôe
(*
buf
, 
offs
, 
cou¡
)

1325 
blocksize
 = 
•i_chù_öfo
->
£˘‹_size
;

1326 
blockmask
 = 
blocksize
 - 1;

1328 
	`ø_dbg
("%s: offs:%x, cou¡:%x\n", 
__func__
, 
offs
, 
cou¡
);

1330 i‡(
cou¡
 > (
•i_chù_öfo
->
£˘‹_size
 * spi_chù_öfo->
n_£˘‹s
) -

1331 (
CFG_BOOTLOADER_SIZE
 + 
CFG_CONFIG_SIZE
 + 
CFG_FACTORY_SIZE
)) {

1332 
	`¥ötf
("Ab‹t: imagêsizêœrgîÅh™ %d!\n\n", (
•i_chù_öfo
->
£˘‹_size
 * spi_chù_öfo->
n_£˘‹s
) -

1333 (
CFG_BOOTLOADER_SIZE
 + 
CFG_CONFIG_SIZE
 + 
CFG_FACTORY_SIZE
));

1334 
	`udñay
(10*1000*1000);

1338 
cou¡
 > 0) {

1339 
	#BLOCK_ALIGNE
(
a
Ë((◊Ë& 
blockmask
))

	)

1340 i‡(
	`BLOCK_ALIGNE
(
offs
Ë|| (
cou¡
 < 
blocksize
)) {

1341 *
block
;

1342 
põ˚
, 
blockaddr
;

1343 
põ˚_size
;

1344 *
ãmp
;

1346 
block
 = 
	`mÆloc
(
blocksize
);

1347 i‡(!
block
)

1349 
ãmp
 = 
	`mÆloc
(
blocksize
);

1350 i‡(!
ãmp
)

1352 
	`‰ì
(
block
);

1356 
blockaddr
 = 
offs
 & ~
blockmask
;

1358 i‡(
	`ø•i_ªad
(
block
, 
blockaddr
, 
blocksize
) != blocksize) {

1359 
	`‰ì
(
block
);

1360 
	`‰ì
(
ãmp
);

1364 
põ˚
 = 
offs
 & 
blockmask
;

1365 
põ˚_size
 = 
	`mö
(
cou¡
, 
blocksize
 - 
põ˚
);

1366 
	`mem˝y
(
block
 + 
põ˚
, 
buf
, 
põ˚_size
);

1368 i‡(
	`ø•i_îa£
(
blockaddr
, 
blocksize
) != 0) {

1369 
	`‰ì
(
block
);

1370 
	`‰ì
(
ãmp
);

1373 i‡(
	`ø•i_wrôe
(
block
, 
blockaddr
, 
blocksize
) != blocksize) {

1374 
	`‰ì
(
block
);

1375 
	`‰ì
(
ãmp
);

1378 #ifde‡
RALINK_SPI_UPGRADE_CHECK


1379 i‡(
	`ø•i_ªad
(
ãmp
, 
blockaddr
, 
blocksize
) != blocksize) {

1380 
	`‰ì
(
block
);

1381 
	`‰ì
(
ãmp
);

1386 if(
	`memcmp
(
block
, 
ãmp
, 
blocksize
) == 0)

1392 
	`¥ötf
("block write incorrect!\n\r");

1393 
	`‰ì
(
block
);

1394 
	`‰ì
(
ãmp
);

1398 
	`‰ì
(
ãmp
);

1399 
	`‰ì
(
block
);

1401 
buf
 +
põ˚_size
;

1402 
offs
 +
põ˚_size
;

1403 
cou¡
 -
põ˚_size
;

1406 
Æig√d_size
 = 
cou¡
 & ~
blockmask
;

1407 *
ãmp
;

1408 
i
;

1409 
ãmp
 = 
	`mÆloc
(
blocksize
);

1410 i‡(!
ãmp
)

1413 i‡(
	`ø•i_îa£
(
offs
, 
Æig√d_size
) != 0)

1415 
	`‰ì
(
ãmp
);

1418 i‡(
	`ø•i_wrôe
(
buf
, 
offs
, 
Æig√d_size
) !=áligned_size)

1420 
	`‰ì
(
ãmp
);

1424 #ifde‡
RALINK_SPI_UPGRADE_CHECK


1425  
i
=0; i< (
Æig√d_size
/
blocksize
); i++)

1427 i‡(
	`ø•i_ªad
(
ãmp
, 
offs
+(
i
*
blocksize
), blocksize) != blocksize)

1429 
	`‰ì
(
ãmp
);

1432 if(
	`memcmp
(
buf
+(
i
*
blocksize
), 
ãmp
, blocksize) == 0)

1438 
	`¥ötf
("blocksizêwrôêöc‹ª˘ block#=%d!\n\r",
i
);

1439 
	`‰ì
(
ãmp
);

1444 
	`‰ì
(
ãmp
);

1446 
buf
 +
Æig√d_size
;

1447 
offs
 +
Æig√d_size
;

1448 
cou¡
 -
Æig√d_size
;

1451 
	`¥ötf
("Done!\n");

1453 
	}
}

1455 
	$ø•i_îa£_wrôe_Æl
(*
buf
, 
offs
, 
cou¡
)

1457 
blocksize
 = 
•i_chù_öfo
->
£˘‹_size
;

1458 
blockmask
 = 
blocksize
 - 1;

1460 
	`ø_dbg
("%s: offs:%x, cou¡:%x\n", 
__func__
, 
offs
, 
cou¡
);

1462 i‡(
cou¡
 > (
•i_chù_öfo
->
£˘‹_size
 * spi_chù_öfo->
n_£˘‹s
)) {

1463 
	`¥ötf
("Ab‹t: imagêsizêœrgîÅh™ %d!\n\n", (
•i_chù_öfo
->
£˘‹_size
 * spi_chù_öfo->
n_£˘‹s
));

1464 
	`udñay
(10*1000*1000);

1468 
cou¡
 > 0) {

1469 
	#BLOCK_ALIGNE
(
a
Ë((◊Ë& 
blockmask
))

	)

1470 i‡(
	`BLOCK_ALIGNE
(
offs
Ë|| (
cou¡
 < 
blocksize
)) {

1471 *
block
;

1472 
põ˚
, 
blockaddr
;

1473 
põ˚_size
;

1474 *
ãmp
;

1476 
block
 = 
	`mÆloc
(
blocksize
);

1477 i‡(!
block
)

1479 
ãmp
 = 
	`mÆloc
(
blocksize
);

1480 i‡(!
ãmp
)

1482 
	`‰ì
(
block
);

1486 
blockaddr
 = 
offs
 & ~
blockmask
;

1488 i‡(
	`ø•i_ªad
(
block
, 
blockaddr
, 
blocksize
) != blocksize) {

1489 
	`‰ì
(
block
);

1490 
	`‰ì
(
ãmp
);

1494 
põ˚
 = 
offs
 & 
blockmask
;

1495 
põ˚_size
 = 
	`mö
(
cou¡
, 
blocksize
 - 
põ˚
);

1496 
	`mem˝y
(
block
 + 
põ˚
, 
buf
, 
põ˚_size
);

1498 i‡(
	`ø•i_îa£
(
blockaddr
, 
blocksize
) != 0) {

1499 
	`‰ì
(
block
);

1500 
	`‰ì
(
ãmp
);

1503 i‡(
	`ø•i_wrôe
(
block
, 
blockaddr
, 
blocksize
) != blocksize) {

1504 
	`‰ì
(
block
);

1505 
	`‰ì
(
ãmp
);

1508 #ifde‡
RALINK_SPI_UPGRADE_CHECK


1509 i‡(
	`ø•i_ªad
(
ãmp
, 
blockaddr
, 
blocksize
) != blocksize) {

1510 
	`‰ì
(
block
);

1511 
	`‰ì
(
ãmp
);

1516 if(
	`memcmp
(
block
, 
ãmp
, 
blocksize
) == 0)

1522 
	`¥ötf
("block write incorrect!\n\r");

1523 
	`‰ì
(
block
);

1524 
	`‰ì
(
ãmp
);

1528 
	`‰ì
(
ãmp
);

1529 
	`‰ì
(
block
);

1531 
buf
 +
põ˚_size
;

1532 
offs
 +
põ˚_size
;

1533 
cou¡
 -
põ˚_size
;

1536 
Æig√d_size
 = 
cou¡
 & ~
blockmask
;

1537 *
ãmp
;

1538 
i
;

1539 
ãmp
 = 
	`mÆloc
(
blocksize
);

1540 i‡(!
ãmp
)

1543 i‡(
	`ø•i_îa£
(
offs
, 
Æig√d_size
) != 0)

1545 
	`‰ì
(
ãmp
);

1548 i‡(
	`ø•i_wrôe
(
buf
, 
offs
, 
Æig√d_size
) !=áligned_size)

1550 
	`‰ì
(
ãmp
);

1554 #ifde‡
RALINK_SPI_UPGRADE_CHECK


1555  
i
=0; i< (
Æig√d_size
/
blocksize
); i++)

1557 i‡(
	`ø•i_ªad
(
ãmp
, 
offs
+(
i
*
blocksize
), blocksize) != blocksize)

1559 
	`‰ì
(
ãmp
);

1562 if(
	`memcmp
(
buf
+(
i
*
blocksize
), 
ãmp
, blocksize) == 0)

1568 
	`¥ötf
("blocksizêwrôêöc‹ª˘ block#=%d!\n\r",
i
);

1569 
	`‰ì
(
ãmp
);

1574 
	`‰ì
(
ãmp
);

1576 
buf
 +
Æig√d_size
;

1577 
offs
 +
Æig√d_size
;

1578 
cou¡
 -
Æig√d_size
;

1581 
	`¥ötf
("Done!\n");

1583 
	}
}

1585 
ul⁄g
 
NëBoŸFûeX„rSize
;

1587 #ifde‡
RALINK_CMDLINE


1588 
	$do_mem_˝
(
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

1590 
addr
, 
de°
;

1591 
cou¡
;

1593 
addr
 = 
CFG_LOAD_ADDR
;

1594 
cou¡
 = ()
NëBoŸFûeX„rSize
;

1596 i‡(!
	`°∫cmp
(
¨gv
[0], "cp.linux", 9)) {

1597 
de°
 = 
CFG_KERN_ADDR
 - 
CFG_FLASH_BASE
;

1598 
	`¥ötf
("\¿C›yÜöux image[%d byã]ÅÿSPI Fœsh[0x%08X].... \n", 
cou¡
, 
de°
);

1600 i‡(!
	`°∫cmp
(
¨gv
[0], "cp.uboot", 9)) {

1601 
de°
 = 0;

1602 
	`¥ötf
("\¿C›y uboŸ[%d byã]ÅÿSPI Fœsh[0x%08X].... \n", 
cou¡
, 
de°
);

1605 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

1609 
	`ø•i_wrôe
((*)
addr
, 
de°
, 
cou¡
);

1611 
	}
}

1613 
U_BOOT_CMD
(

1614 
˝
, 2, 1, 
do_mem_˝
,

1620 
	$do_Êîa£
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

1622 
rcode
, 
size
;

1624 i‡(
¨gc
 < 2) {

1625 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

1629 
size
 = 
•i_chù_öfo
->
£˘‹_size
 * spi_chù_öfo->
n_£˘‹s
;

1630 i‡(
	`°rcmp
(
¨gv
[1], "linux") == 0)

1632 
	`¥ötf
("\n EraseÜinux kernel block !!\n");

1633 
	`¥ötf
("From 0x%XÜígth 0x%X\n", 
CFG_KERN_ADDR
 - 
CFG_FLASH_BASE
,

1634 
size
 - (
CFG_BOOTLOADER_SIZE
 + 
CFG_CONFIG_SIZE
 + 
CFG_FACTORY_SIZE
));

1635 
	`ø•i_u≈rŸe˘
();

1636 
rcode
 = 
	`ø•i_îa£
(
CFG_KERN_ADDR
 - 
CFG_FLASH_BASE
,

1637 
size
 - (
CFG_BOOTLOADER_SIZE
 + 
CFG_CONFIG_SIZE
 + 
CFG_FACTORY_SIZE
));

1638  
rcode
;

1640 i‡(
	`°rcmp
(
¨gv
[1], "uboot") == 0)

1642 
	`¥ötf
("\n Erase u-boot block !!\n");

1643 
	`¥ötf
("From 0x%XÜígth 0x%X\n", 0, 
CFG_BOOTLOADER_SIZE
);

1644 
	`ø•i_u≈rŸe˘
();

1645 
rcode
 = 
	`ø•i_îa£
(0, 
CFG_BOOTLOADER_SIZE
);

1646  
rcode
;

1648 i‡(
	`°rcmp
(
¨gv
[1], "all") == 0) {

1649 
	`ø•i_u≈rŸe˘
();

1650 
rcode
 = 
	`ø•i_îa£
(0, 
size
);

1651  
rcode
;

1654 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

1656 
	}
}

1658 
U_BOOT_CMD
(

1659 
îa£
, 2, 1, 
do_Êîa£
,

1666 
	#SPI_FLASH_DBG_CMD


	)

1667 #ifde‡
SPI_FLASH_DBG_CMD


1668 
	$ølök_•i_comm™d
(
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

1670 i‡(!
	`°∫cmp
(
¨gv
[1], "id", 3)) {

1671 
u8
 
buf
[5];

1672 
	`ø•i_ªad_devid
(
buf
, 5);

1673 
	`¥ötf
("devi˚ id: %x %x %x %x %x\n", 
buf
[0], buf[1], buf[2], buf[3], buf[4]);

1675 i‡(!
	`°∫cmp
(
¨gv
[1], "read", 5)) {

1676 
addr
, 
Àn
;

1677 
u8
 *
p
;

1678 
i
;

1680 
addr
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

1681 
Àn
 = 
	`sim∂e_°πoul
(
¨gv
[3], 
NULL
, 16);

1682 
p
 = (
u8
 *)
	`mÆloc
(
Àn
);

1683 i‡(!
p
) {

1684 
	`¥ötf
("mallocÉrror\n");

1687 
Àn
 = 
	`ø•i_ªad
(
p
, 
addr
,Üen);

1688 
	`¥ötf
("ªadÜí: %d\n", 
Àn
);

1689 
i
 = 0; i < 
Àn
; i++) {

1690 
	`¥ötf
("%x ", 
p
[
i
]);

1692 
	`¥ötf
("\n");

1693 
	`‰ì
(
p
);

1695 i‡(!
	`°∫cmp
(
¨gv
[1], "erase", 6)) {

1696 
o
, 
l
;

1697 
o
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

1698 
l
 = 
	`sim∂e_°πoul
(
¨gv
[3], 
NULL
, 16);

1699 
	`¥ötf
("îa£ off†0x%x,Üí 0x%x\n", 
o
, 
l
);

1700 
	`ø•i_îa£
(
o
, 
l
);

1702 i‡(!
	`°∫cmp
(
¨gv
[1], "write", 6)) {

1703 
o
, 
l
;

1704 
u8
 *
p
, 
t
[3] = {0};

1705 
i
;

1707 
o
 = 
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 16);

1708 
l
 = 
	`°æí
(
¨gv
[3]) / 2;

1709 
p
 = (
u8
 *)
	`mÆloc
(
l
);

1710 i‡(!
p
) {

1711 
	`¥ötf
("mallocÉrror\n");

1714 
i
 = 0; i < 
l
; i++) {

1715 
t
[0] = 
¨gv
[3][2*
i
];

1716 
t
[1] = 
¨gv
[3][2*
i
+1];

1717 *(
p
 + 
i
Ë
	`sim∂e_°πoul
(
t
, 
NULL
, 16);

1719 
	`¥ötf
("wrôêoff†0x%x,Üí 0x%x\n", 
o
, 
l
);

1720 
	`ø•i_wrôe
(
p
, 
o
, 
l
);

1721 
	`‰ì
(
p
);

1723 i‡(!
	`°∫cmp
(
¨gv
[1], "sr", 3)) {

1724 
u8
 
§
;

1725 i‡(!
	`°∫cmp
(
¨gv
[2], "read", 5)) {

1726 i‡(
	`ø•i_ªad_§
(&
§
) < 0)

1727 
	`¥ötf
("read sr failed\n");

1729 
	`¥ötf
("§ %x\n", 
§
);

1731 i‡(!
	`°∫cmp
(
¨gv
[2], "write", 6)) {

1732 
§
 = (
u8
)
	`sim∂e_°πoul
(
¨gv
[3], 
NULL
, 16);

1733 
	`¥ötf
("åyög wrôê§ %x\n", 
§
);

1734 i‡(
	`ø•i_wrôe_§
(&
§
) < 0)

1735 
	`¥ötf
("write sr failed\n");

1737 i‡(
	`ø•i_ªad_§
(&
§
) < 0)

1738 
	`¥ötf
("read sr failed\n");

1740 
	`¥ötf
("§ %x\n", 
§
);

1744 i‡(!
	`°∫cmp
(
¨gv
[1], "scur", 2)) {

1745 
u8
 
scur
;

1746 i‡(
¨gv
[2][0] == 'r') {

1747 i‡(
	`ø•i_ªad_scur
(&
scur
) < 0)

1748 
	`¥ötf
("read scur failed\n");

1750 
	`¥ötf
("scu∏%d\n", 
scur
);

1754 
	`¥ötf
("Ußge:\n%s\¿u£ \"hñ∞•i\" f‹ dëaû!\n", 
cmdç
->
ußge
);

1756 
	}
}

1758 
U_BOOT_CMD
(

1759 
•i
, 4, 1, 
ølök_•i_comm™d
,

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/usb/host/mtk-phy-7621.c

1 
	~<comm⁄.h
>

3 
	~"mtk-phy.h
"

5 #ifde‡
CONFIG_PROJECT_7621


6 
	~"mtk-phy-7621.h
"

10 #ifdef 
PHY_7621_DEBUG


11 
	#PHY_7621_PRINTF
(
fmt
,
¨gs
...Ë
	`¥ötf
 (fmà,##¨gs)

	)

13 
	#PHY_7621_PRINTF
(
fmt
,
¨gs
...)

	)

17 
PHY_INT32
 
	$mt7621_phy_öô
(
u3phy_öfo
 *
öfo
)

19  
PHY_TRUE
;

20 
	}
}

23 
PHY_INT32
 
	$phy_ch™ge_pùe_pha£
(
u3phy_öfo
 *
öfo
, 
PHY_INT32
 
phy_drv
, PHY_INT32 
pùe_pha£
){

24  
PHY_TRUE
;

25 
	}
}

40 
PHY_INT8
 
	$fgEyeSˇnHñ≥r_CheckPtInRegi⁄
(
°rucSˇnRegi⁄
 * 
¥Eye
, 
PHY_INT8
 
bX
, PHY_INT8 
bY
)

42 
PHY_INT8
 
fgVÆid
 = 
åue
;

48 i‡–(
¥Eye
->
bX_é
 <
bX
Ë&& (bX <¥Eye->
bX_br
)

49 && (
¥Eye
->
bY_é
 <
bY
Ë&& (bY <¥Eye->
bX_br
))

55 i‡–((
bX
 - 
¥Eye
->
bX_é
Ë% (¥Eye->
bDñèX
))

56 || ((
bY
 - 
¥Eye
->
bY_é
Ë% (¥Eye->
bDñèY
)) )

60 
fgVÆid
 = 
Ál£
;

69 
fgVÆid
 = 
Ál£
;

71  
fgVÆid
;

72 
	}
}

81 
	$EyeSˇnHñ≥r_RunTe°
(
u3phy_öfo
 *
öfo
)

83 
	`DRV_UDELAY
(100);

85 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_ªgs
->
eq_eye0
)

86 , 
RG_SSUSB_EQ_EYE_CNT_EN_OFST
, 
RG_SSUSB_EQ_EYE_CNT_EN
, 0);

87 
	`DRV_UDELAY
(100);

89 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_ªgs
->
eq_eye0
)

90 , 
RG_SSUSB_EQ_EYE_CNT_EN_OFST
, 
RG_SSUSB_EQ_EYE_CNT_EN
, 1);

91 
	`DRV_UDELAY
(100);

94 !
	`U3PhyRódFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_ªgs
->
phya_rx_m⁄5
)

95 , 
RGS_SSUSB_EQ_EYE_CNT_RDY_OFST
, 
RGS_SSUSB_EQ_EYE_CNT_RDY
));

96 
	}
}

112 
PHY_INT8
 
	$fgEyeSˇnHñ≥r_CÆNextPoöt
()

114 i‡–((
_bYcuº
 =
MAX_Y
Ë&& (
_eSˇnDú
 =
SCAN_DN
))

115 || ((
_bYcuº
 =
MIN_Y
Ë&& (
_eSˇnDú
 =
SCAN_UP
))

120 
_bXcuº
++;

121 
_fgXChged
 = 
åue
;

122 
_eSˇnDú
 = (_eSˇnDú =
SCAN_UP
Ë? 
SCAN_DN
 : SCAN_UP;

124 i‡(
_bXcuº
 > 
MAX_X
)

126  
Ál£
;

131 
_bYcuº
 = (
_eSˇnDú
 =
SCAN_DN
) ? _bYcurr + 1 : _bYcurr - 1;

132 
_fgXChged
 = 
Ál£
;

134  
PHY_TRUE
;

135 
	}
}

137 
PHY_INT32
 
	$eyesˇn_öô
(
u3phy_öfo
 *
öfo
){

139 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u3phya_ªgs
->
ªga
)

140 , 
RG_SSUSB_CDR_EPEN_OFST
, 
RG_SSUSB_CDR_EPEN
, 1);

141 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_ªgs
->
phyd_mix3
)

142 , 
RG_SSUSB_FORCE_CDR_PI_PWD_OFST
, 
RG_SSUSB_FORCE_CDR_PI_PWD
, 1);

143 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_b™k2_ªgs
->
b2_phyd_misc0
)

144 , 
RG_SSUSB_RX_PI_CAL_EN_SEL_OFST
, 
RG_SSUSB_RX_PI_CAL_EN_SEL
, 1);

145 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_b™k2_ªgs
->
b2_phyd_misc0
)

146 , 
RG_SSUSB_RX_PI_CAL_EN_OFST
, 
RG_SSUSB_RX_PI_CAL_EN
, 1);

147  
PHY_TRUE
;

148 
	}
}

150 
PHY_INT32
 
	$phy_eyesˇn
(
u3phy_öfo
 *
öfo
, 
PHY_INT32
 
x_t1
, PHY_INT32 
y_t1
, PHY_INT32 
x_br
, PHY_INT32 
y_br
, PHY_INT32 
dñè_x
, PHY_INT32 
dñè_y


151 , 
PHY_INT32
 
eye_˙t
, PHY_INT32 
num_˙t
, PHY_INT32 
PI_ˇl_í
, PHY_INT32 
num_ign‹e_˙t
){

152 
PHY_INT32
 
cOf°
 = 0;

153 
PHY_UINT8
 
bIdxX
 = 0;

154 
PHY_UINT8
 
bIdxY
 = 0;

156 
PHY_UINT8
 
bIdxCycC¡
 = 0;

157 
PHY_INT8
 
fgVÆid
;

158 
PHY_INT8
 
cX
;

159 
PHY_INT8
 
cY
;

160 
PHY_UINT8
 
bExãndC¡
;

161 
PHY_INT8
 
isC⁄töue
;

163 
PHY_UINT32
 
wEº0
 = 0, 
wEº1
 = 0;

166 
PHY_UINT32
 
pwEºC¡0
[
CYCLE_COUNT_MAX
][
ERRCNT_MAX
][ERRCNT_MAX];

167 
PHY_UINT32
 
pwEºC¡1
[
CYCLE_COUNT_MAX
][
ERRCNT_MAX
][ERRCNT_MAX];

169 
_rEye1
.
bX_é
 = 
x_t1
;

170 
_rEye1
.
bY_é
 = 
y_t1
;

171 
_rEye1
.
bX_br
 = 
x_br
;

172 
_rEye1
.
bY_br
 = 
y_br
;

173 
_rEye1
.
bDñèX
 = 
dñè_x
;

174 
_rEye1
.
bDñèY
 = 
dñè_y
;

176 
_rEye2
.
bX_é
 = 
x_t1
;

177 
_rEye2
.
bY_é
 = 
y_t1
;

178 
_rEye2
.
bX_br
 = 
x_br
;

179 
_rEye2
.
bY_br
 = 
y_br
;

180 
_rEye2
.
bDñèX
 = 
dñè_x
;

181 
_rEye2
.
bDñèY
 = 
dñè_y
;

183 
_rTe°Cy˛e
.
wEyeC¡
 = 
eye_˙t
;

184 
_rTe°Cy˛e
.
bNumOfEyeC¡
 = 
num_˙t
;

185 
_rTe°Cy˛e
.
bNumOfIgn‹eC¡
 = 
num_ign‹e_˙t
;

186 
_rTe°Cy˛e
.
bPICÆEn
 = 
PI_ˇl_í
;

188 
_bXcuº
 = 0;

189 
_bYcuº
 = 0;

190 
_eSˇnDú
 = 
SCAN_DN
;

191 
_fgXChged
 = 
Ál£
;

193 
	`PHY_7621_PRINTF
("x_t1: %x, y_t1: %x, x_br: %x, y_br: %x, delta_x: %x, delta_y: %x, \
_cnt: %x,Çum_cnt: %x, PI_cal_en: %x,Çum_ignore_cnt: %x\n", \

195 
x_t1
, 
y_t1
, 
x_br
, 
y_br
, 
dñè_x
, 
dñè_y
, 
eye_˙t
, 
num_˙t
, 
PI_ˇl_í
, 
num_ign‹e_˙t
);

198 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_b™k2_ªgs
->
b2_phyd_misc0
)

199 , 
RG_SSUSB_RX_SIGDET_EN_SEL_OFST
, 
RG_SSUSB_RX_SIGDET_EN_SEL
, 1);

200 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_b™k2_ªgs
->
b2_phyd_misc0
)

201 , 
RG_SSUSB_RX_SIGDET_EN_OFST
, 
RG_SSUSB_RX_SIGDET_EN
, 0);

202 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_ªgs
->
eq_eye1
)

203 , 
RG_SSUSB_EQ_SIGDET_OFST
, 
RG_SSUSB_EQ_SIGDET
, 0);

206 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_ªgs
->
eq3
)

207 , 
RG_SSUSB_EQ_TRI_DET_EN_OFST
, 
RG_SSUSB_EQ_TRI_DET_EN
, 0);

209 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_ªgs
->
eq_eye0
)

210 , 
RG_SSUSB_EQ_EYE_MON_EN_OFST
, 
RG_SSUSB_EQ_EYE_MON_EN
, 1);

211 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_ªgs
->
eq_eye0
)

212 , 
RG_SSUSB_EQ_EYE_XOFFSET_OFST
, 
RG_SSUSB_EQ_EYE_XOFFSET
, 0);

213 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_ªgs
->
eq_eye0
)

214 , 
RG_SSUSB_EQ_EYE0_Y_OFST
, 
RG_SSUSB_EQ_EYE0_Y
, 0);

215 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_ªgs
->
eq_eye0
)

216 , 
RG_SSUSB_EQ_EYE1_Y_OFST
, 
RG_SSUSB_EQ_EYE1_Y
, 0);

219 i‡(
PI_ˇl_í
){

221 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_b™k2_ªgs
->
b2_phyd_misc0
)

222 , 
RG_SSUSB_RX_PI_CAL_EN_SEL_OFST
, 
RG_SSUSB_RX_PI_CAL_EN_SEL
, 1);

223 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_b™k2_ªgs
->
b2_phyd_misc0
)

224 , 
RG_SSUSB_RX_PI_CAL_EN_OFST
, 
RG_SSUSB_RX_PI_CAL_EN
, 0);

225 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_b™k2_ªgs
->
b2_phyd_misc0
)

226 , 
RG_SSUSB_RX_PI_CAL_EN_OFST
, 
RG_SSUSB_RX_PI_CAL_EN
, 1);

228 
	`DRV_UDELAY
(20);

230 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_b™k2_ªgs
->
b2_phyd_misc0
)

231 , 
RG_SSUSB_RX_PI_CAL_EN_OFST
, 
RG_SSUSB_RX_PI_CAL_EN
, 0);

232 
_bPIResu…
 = 
	`U3PhyRódFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_ªgs
->
phya_rx_m⁄5
)

233 , 
RGS_SSUSB_EQ_PILPO_OFST
, 
RGS_SSUSB_EQ_PILPO
);

235 
	`PHY_7621_PRINTF
("PIÑesu…: %d\n", 
_bPIResu…
);

239 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_ªgs
->
eq_eye3
)

240 ,
RG_SSUSB_EQ_EYE_CNT_OFST
, 
RG_SSUSB_EQ_EYE_CNT
, 
eye_˙t
);

243 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_ªgs
->
eq_eye1
)

244 , 
RG_SSUSB_EQ_EYE_MASK_OFST
, 
RG_SSUSB_EQ_EYE_MASK
, 0x3ff);

245 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_ªgs
->
eq_eye0
)

246 , 
RG_SSUSB_EQ_EYE_MON_EN_OFST
, 
RG_SSUSB_EQ_EYE_MON_EN
, 1);

249 
cOf°
 = 0; cOfst >= -64; cOfst--)

251 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_ªgs
->
eq_eye0
)

252 ,
RG_SSUSB_EQ_EYE_XOFFSET_OFST
, 
RG_SSUSB_EQ_EYE_XOFFSET
, 
cOf°
);

254 
cOf°
 = 0; cOfst < 64; cOfst++)

256 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_ªgs
->
eq_eye0
)

257 , 
RG_SSUSB_EQ_EYE0_Y_OFST
, 
RG_SSUSB_EQ_EYE0_Y
, 
cOf°
);

258 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_ªgs
->
eq_eye0
)

259 , 
RG_SSUSB_EQ_EYE1_Y_OFST
, 
RG_SSUSB_EQ_EYE1_Y
, 
cOf°
);

262 
bIdxCycC¡
 = 0; bIdxCycC¡ < 
CYCLE_COUNT_MAX
; bIdxCycCnt++){

263 
bIdxX
 = 0; bIdxX < 
ERRCNT_MAX
; bIdxX++)

265 
bIdxY
 = 0; bIdxY < 
ERRCNT_MAX
; bIdxY++){

266 
pwEºC¡0
[
bIdxCycC¡
][
bIdxX
][
bIdxY
] = 0;

267 
pwEºC¡1
[
bIdxCycC¡
][
bIdxX
][
bIdxY
] = 0;

271 
isC⁄töue
 = 
åue
;

272 
isC⁄töue
){

278 
fgVÆid
 = 
	`fgEyeSˇnHñ≥r_CheckPtInRegi⁄
(&
_rEye1
, 
_bXcuº
, 
_bYcuº
)

279 || 
	`fgEyeSˇnHñ≥r_CheckPtInRegi⁄
(&
_rEye2
, 
_bXcuº
, 
_bYcuº
);

283 
cX
 = (
_bXcuº
 ^ 0x40);

284 
cY
 = (
_bYcuº
 ^ 0x3F);

287 i‡(
_fgXChged
 =
åue
)

289 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_ªgs
->
eq_eye0
)

290 , 
RG_SSUSB_EQ_EYE_XOFFSET_OFST
, 
RG_SSUSB_EQ_EYE_XOFFSET
, 
cX
);

293 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_ªgs
->
eq_eye0
)

294 , 
RG_SSUSB_EQ_EYE0_Y_OFST
, 
RG_SSUSB_EQ_EYE0_Y
, 
cY
);

295 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_ªgs
->
eq_eye0
)

296 , 
RG_SSUSB_EQ_EYE1_Y_OFST
, 
RG_SSUSB_EQ_EYE1_Y
, 
cY
);

299 i‡(
fgVÆid
){

300 
bExãndC¡
 = 0; bExãndC¡ < 
num_ign‹e_˙t
; bExtendCnt++)

303 
	`EyeSˇnHñ≥r_RunTe°
(
öfo
);

305 
bExãndC¡
 = 0; bExãndC¡ < 
num_˙t
; bExtendCnt++)

307 
	`EyeSˇnHñ≥r_RunTe°
(
öfo
);

308 
wEº0
 = 
	`U3PhyRódFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_ªgs
->
phya_rx_m⁄3
)

309 , 
RGS_SSUSB_EQ_EYE_MONITOR_ERRCNT_0_OFST
, 
RGS_SSUSB_EQ_EYE_MONITOR_ERRCNT_0
);

310 
wEº1
 = 
	`U3PhyRódFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_ªgs
->
phya_rx_m⁄4
)

311 , 
RGS_SSUSB_EQ_EYE_MONITOR_ERRCNT_1_OFST
, 
RGS_SSUSB_EQ_EYE_MONITOR_ERRCNT_1
);

313 
pwEºC¡0
[
bExãndC¡
][
_bXcuº
][
_bYcuº
] = 
wEº0
;

314 
pwEºC¡1
[
bExãndC¡
][
_bXcuº
][
_bYcuº
] = 
wEº1
;

325 i‡(
	`fgEyeSˇnHñ≥r_CÆNextPoöt
(Ë=
Ál£
){

327 
	`PHY_7621_PRINTF
("Xcuº [0x%x] Ycuº [0x%x]\n", 
_bXcuº
, 
_bYcuº
);

328 
	`PHY_7621_PRINTF
("XcuºREG [0x%x] YcuºREG [0x%x]\n", 
cX
, 
cY
);

330 
	`PHY_7621_PRINTF
("end ofÉye scan\n");

331 
isC⁄töue
 = 
Ál£
;

334 
	`PHY_7621_PRINTF
("CurX [0x%x] CurY [0x%x]\n"

335 , 
	`U3PhyRódFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_ªgs
->
eq_eye0
), 
RG_SSUSB_EQ_EYE_XOFFSET_OFST
, 
RG_SSUSB_EQ_EYE_XOFFSET
)

336 , 
	`U3PhyRódFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_ªgs
->
eq_eye0
), 
RG_SSUSB_EQ_EYE0_Y_OFST
, 
RG_SSUSB_EQ_EYE0_Y
));

339 
cOf°
 = 63; cOfst >= 0; cOfst--)

341 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_ªgs
->
eq_eye0
)

342 , 
RG_SSUSB_EQ_EYE_XOFFSET_OFST
, 
RG_SSUSB_EQ_EYE_XOFFSET
, 
cOf°
);

344 
cOf°
 = 63; cOfst >= 0; cOfst--)

346 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_ªgs
->
eq_eye0
)

347 , 
RG_SSUSB_EQ_EYE0_Y_OFST
, 
RG_SSUSB_EQ_EYE0_Y
, 
cOf°
);

348 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_ªgs
->
eq_eye0
)

349 , 
RG_SSUSB_EQ_EYE1_Y_OFST
, 
RG_SSUSB_EQ_EYE1_Y
, 
cOf°
);

352 
	`PHY_7621_PRINTF
("CurX [0x%x] CurY [0x%x]\n"

353 , 
	`U3PhyRódFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_ªgs
->
eq_eye0
), 
RG_SSUSB_EQ_EYE_XOFFSET_OFST
, 
RG_SSUSB_EQ_EYE_XOFFSET
)

354 , 
	`U3PhyRódFõld32
(((
PHY_UINT32
)&
öfo
->
u3phyd_ªgs
->
eq_eye0
), 
RG_SSUSB_EQ_EYE0_Y_OFST
, 
RG_SSUSB_EQ_EYE0_Y
));

356 
	`PHY_7621_PRINTF
("PIÑesu…: %d\n", 
_bPIResu…
);

357 
	`PHY_7621_PRINTF
("pwEºC¡0áddr: 0x%x\n", (
PHY_UINT32
)
pwEºC¡0
);

358 
	`PHY_7621_PRINTF
("pwEºC¡1áddr: 0x%x\n", (
PHY_UINT32
)
pwEºC¡1
);

360  
PHY_TRUE
;

361 
	}
}

364 
PHY_INT32
 
	$u2_ßve_cur_í
(
u3phy_öfo
 *
öfo
){

365  
PHY_TRUE
;

366 
	}
}

369 
PHY_INT32
 
	$u2_ßve_cur_ª
(
u3phy_öfo
 *
öfo
){

370  
PHY_TRUE
;

371 
	}
}

373 
PHY_INT32
 
	$u2_¶ew_øã_ˇlibøti⁄
(
u3phy_öfo
 *
öfo
){

374 
PHY_INT32
 
i
=0;

378 
PHY_INT32
 
fgRë
 = 0;

379 
PHY_INT32
 
u4FmOut
 = 0;

380 
PHY_INT32
 
u4Tmp
 = 0;

385 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u2phy_ªgs
->
u2phya¸0
)

386 , 
RG_USB20_HSTX_SRCAL_EN_OFST
, 
RG_USB20_HSTX_SRCAL_EN
, 0x1);

387 
	`DRV_MSLEEP
(1);

391 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
sif¶v_fm_ªgs
->
fmm⁄r1
)

392 , 
RG_FRCK_EN_OFST
, 
RG_FRCK_EN
, 1);

397 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
sif¶v_fm_ªgs
->
fm¸0
)

398 , 
RG_CYCLECNT_OFST
, 
RG_CYCLECNT
, 0x400);

402 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
sif¶v_fm_ªgs
->
fm¸0
)

403 , 
RG_FREQDET_EN_OFST
, 
RG_FREQDET_EN
, 0x1);

406 
i
=0; i<10; i++){

409 
u4FmOut
 = 
	`U3PhyRódReg32
(((
PHY_UINT32
)&
öfo
->
sif¶v_fm_ªgs
->
fmm⁄r0
));

410 
	`PHY_7621_PRINTF
("FM_OUT vÆue: u4FmOuà%d(0x%08X)\n", 
u4FmOut
, u4FmOut);

413 i‡(
u4FmOut
 != 0)

415 
fgRë
 = 0;

416 
	`PHY_7621_PRINTF
("FM dëe˘i⁄ d⁄e!Üo› = %d\n", 
i
);

421 
fgRë
 = 1;

422 
	`DRV_MSLEEP
(1);

426 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
sif¶v_fm_ªgs
->
fm¸0
)

427 , 
RG_FREQDET_EN_OFST
, 
RG_FREQDET_EN
, 0);

431 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
sif¶v_fm_ªgs
->
fmm⁄r1
)

432 , 
RG_FRCK_EN_OFST
, 
RG_FRCK_EN
, 0);

436 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u2phy_ªgs
->
u2phya¸0
)

437 , 
RG_USB20_HSTX_SRCAL_EN_OFST
, 
RG_USB20_HSTX_SRCAL_EN
, 0);

438 
	`DRV_MSLEEP
(1);

440 if(
u4FmOut
 == 0){

441 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u2phy_ªgs
->
u2phya¸0
)

442 , 
RG_USB20_HSTX_SRCTRL_OFST
, 
RG_USB20_HSTX_SRCTRL
, 0x4);

444 
fgRë
 = 1;

448 
u4Tmp
 = (((1024 * 25 * 
U2_SR_COEF_7621
Ë/ 
u4FmOut
) + 500) / 1000;

449 
	`PHY_7621_PRINTF
("SR cÆibøti⁄ vÆuêu1SrCÆVÆ = %d\n", (
PHY_UINT8
)
u4Tmp
);

450 
	`U3PhyWrôeFõld32
(((
PHY_UINT32
)&
öfo
->
u2phy_ªgs
->
u2phya¸0
)

451 , 
RG_USB20_HSTX_SRCTRL_OFST
, 
RG_USB20_HSTX_SRCTRL
, 
u4Tmp
);

453  
fgRë
;

454 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/usb/host/mtk-phy-7621.h

1 #ifde‡
CONFIG_PROJECT_7621


3 
	~"mtk-phy.h
"

5 #i‚de‡
__MTK_PHY_7621_H


6 
	#__MTK_PHY_7621_H


	)

8 
	#U2_SR_COEF_7621
 28

	)

12 
	su2phy_ªg
 {

14 
PHY_LE32
 
	mu2phyac0
;

15 
PHY_LE32
 
	mu2phyac1
;

16 
PHY_LE32
 
	mu2phyac2
;

17 
PHY_LE32
 
	mª£rve0
;

19 
PHY_LE32
 
	mu2phya¸0
;

20 
PHY_LE32
 
	mu2phya¸1
;

21 
PHY_LE32
 
	mu2phya¸2
;

22 
PHY_LE32
 
	mu2phya¸3
;

24 
PHY_LE32
 
	mu2phya¸4
;

25 
PHY_LE32
 
	mu2phyam⁄0
;

26 
PHY_LE32
 
	mª£rve1
[2];

28 
PHY_LE32
 
	mª£rve2
[12];

30 
PHY_LE32
 
	mu2phyd¸0
;

31 
PHY_LE32
 
	mu2phyd¸1
;

32 
PHY_LE32
 
	mu2phydtm0
;

33 
PHY_LE32
 
	mu2phydtm1
;

35 
PHY_LE32
 
	mu2phydm⁄0
;

36 
PHY_LE32
 
	mu2phydm⁄1
;

37 
PHY_LE32
 
	mu2phydm⁄2
;

38 
PHY_LE32
 
	mu2phydm⁄3
;

40 
PHY_LE32
 
	mu2phybc12c
;

41 
PHY_LE32
 
	mu2phybc12c1
;

42 
PHY_LE32
 
	mª£rve3
[2];

44 
PHY_LE32
 
	mª£rve4
[24];

46 
PHY_LE32
 
	mª£rve6
[3];

47 
PHY_LE32
 
	mªgfcom
;

51 
	#RG_USB20_USBPLL_DIVEN
 (0x7<<28)

52 
	#RG_USB20_USBPLL_CKCTRL
 (0x3<<26)

53 
	#RG_USB20_USBPLL_PREDIV
 (0x3<<24)

54 
	#RG_USB20_USBPLL_FORCE_ON
 (0x1<<23)

55 
	#RG_USB20_USBPLL_FBDIV
 (0x7f<<16)

56 
	#RG_USB20_REF_EN
 (0x1<<15)

57 
	#RG_USB20_INTR_EN
 (0x1<<14)

58 
	#RG_USB20_BG_TRIM
 (0xf<<8)

59 
	#RG_USB20_BG_RBSEL
 (0x3<<6)

60 
	#RG_USB20_BG_RASEL
 (0x3<<4)

61 
	#RG_USB20_BGR_DIV
 (0x3<<2)

62 
	#RG_SIFSLV_CHP_EN
 (0x1<<1)

63 
	#RG_SIFSLV_BGR_EN
 (0x1<<0)

64 

	)

66 
	#RG_USB20_VRT_VREF_SEL
 (0x7<<28)

67 
	#RG_USB20_TERM_VREF_SEL
 (0x7<<24)

68 
	#RG_USB20_MPX_SEL
 (0xff<<16)

69 
	#RG_USB20_MPX_OUT_SEL
 (0x3<<12)

70 
	#RG_USB20_TX_PH_ROT_SEL
 (0x7<<8)

71 
	#RG_USB20_USBPLL_ACCEN
 (0x1<<3)

72 
	#RG_USB20_USBPLL_LF
 (0x1<<2)

73 
	#RG_USB20_USBPLL_BR
 (0x1<<1)

74 
	#RG_USB20_USBPLL_BP
 (0x1<<0)

75 

	)

77 
	#RG_SIFSLV_MAC_BANDGAP_EN
 (0x1<<17)

78 
	#RG_SIFSLV_MAC_CHOPPER_EN
 (0x1<<16)

79 
	#RG_USB20_CLKREF_REV
 (0xff<<0)

80 

	)

82 
	#RG_USB20_ICUSB_EN
 (0x1<<24)

83 
	#RG_USB20_HSTX_SRCAL_EN
 (0x1<<23)

84 
	#RG_USB20_HSTX_SRCTRL
 (0x7<<16)

85 
	#RG_USB20_LS_CR
 (0x7<<12)

86 
	#RG_USB20_FS_CR
 (0x7<<8)

87 
	#RG_USB20_LS_SR
 (0x7<<4)

88 
	#RG_USB20_FS_SR
 (0x7<<0)

89 

	)

91 
	#RG_USB20_INIT_SQ_EN_DG
 (0x3<<28)

92 
	#RG_USB20_SQD
 (0x3<<24)

93 
	#RG_USB20_HSTX_TMODE_SEL
 (0x3<<20)

94 
	#RG_USB20_HSTX_TMODE_EN
 (0x1<<19)

95 
	#RG_USB20_PHYD_MONEN
 (0x1<<18)

96 
	#RG_USB20_INLPBK_EN
 (0x1<<17)

97 
	#RG_USB20_CHIRP_EN
 (0x1<<16)

98 
	#RG_USB20_DM_ABIST_SOURCE_EN
 (0x1<<15)

99 
	#RG_USB20_DM_ABIST_SELE
 (0xf<<8)

100 
	#RG_USB20_DP_ABIST_SOURCE_EN
 (0x1<<7)

101 
	#RG_USB20_DP_ABIST_SELE
 (0xf<<0)

102 

	)

104 
	#RG_USB20_OTG_ABIST_SELE
 (0x7<<29)

105 
	#RG_USB20_OTG_ABIST_EN
 (0x1<<28)

106 
	#RG_USB20_OTG_VBUSCMP_EN
 (0x1<<27)

107 
	#RG_USB20_OTG_VBUSTH
 (0x7<<24)

108 
	#RG_USB20_DISC_FIT_EN
 (0x1<<22)

109 
	#RG_USB20_DISCD
 (0x3<<20)

110 
	#RG_USB20_DISCTH
 (0xf<<16)

111 
	#RG_USB20_SQCAL_EN
 (0x1<<15)

112 
	#RG_USB20_SQCAL
 (0xf<<8)

113 
	#RG_USB20_SQTH
 (0xf<<0)

114 

	)

116 
	#RG_USB20_HSTX_DBIST
 (0xf<<28)

117 
	#RG_USB20_HSTX_BIST_EN
 (0x1<<26)

118 
	#RG_USB20_HSTX_I_EN_MODE
 (0x3<<24)

119 
	#RG_USB20_HSRX_TMODE_EN
 (0x1<<23)

120 
	#RG_USB20_HSRX_BIAS_EN_SEL
 (0x3<<20)

121 
	#RG_USB20_USB11_TMODE_EN
 (0x1<<19)

122 
	#RG_USB20_TMODE_FS_LS_TX_EN
 (0x1<<18)

123 
	#RG_USB20_TMODE_FS_LS_RCV_EN
 (0x1<<17)

124 
	#RG_USB20_TMODE_FS_LS_MODE
 (0x1<<16)

125 
	#RG_USB20_HS_TERM_EN_MODE
 (0x3<<13)

126 
	#RG_USB20_PUPD_BIST_EN
 (0x1<<12)

127 
	#RG_USB20_EN_PU_DM
 (0x1<<11)

128 
	#RG_USB20_EN_PD_DM
 (0x1<<10)

129 
	#RG_USB20_EN_PU_DP
 (0x1<<9)

130 
	#RG_USB20_EN_PD_DP
 (0x1<<8)

131 
	#RG_USB20_PHY_REV
 (0xff<<0)

132 

	)

134 
	#RG_USB20_DP_100K_MODE
 (0x1<<18)

135 
	#RG_USB20_DM_100K_EN
 (0x1<<17)

136 
	#USB20_DP_100K_EN
 (0x1<<16)

137 
	#USB20_GPIO_DM_I
 (0x1<<15)

138 
	#USB20_GPIO_DP_I
 (0x1<<14)

139 
	#USB20_GPIO_DM_OE
 (0x1<<13)

140 
	#USB20_GPIO_DP_OE
 (0x1<<12)

141 
	#RG_USB20_GPIO_CTL
 (0x1<<9)

142 
	#USB20_GPIO_MODE
 (0x1<<8)

143 
	#RG_USB20_TX_BIAS_EN
 (0x1<<5)

144 
	#RG_USB20_TX_VCMPDN_EN
 (0x1<<4)

145 
	#RG_USB20_HS_SQ_EN_MODE
 (0x3<<2)

146 
	#RG_USB20_HS_RCV_EN_MODE
 (0x3<<0)

147 

	)

149 
	#RGO_USB20_GPIO_DM_O
 (0x1<<1)

150 
	#RGO_USB20_GPIO_DP_O
 (0x1<<0)

151 

	)

153 
	#RG_USB20_CDR_TST
 (0x3<<30)

154 
	#RG_USB20_GATED_ENB
 (0x1<<29)

155 
	#RG_USB20_TESTMODE
 (0x3<<26)

156 
	#RG_USB20_PLL_STABLE
 (0x1<<25)

157 
	#RG_USB20_PLL_FORCE_ON
 (0x1<<24)

158 
	#RG_USB20_PHYD_RESERVE
 (0xffff<<8)

159 
	#RG_USB20_EBTHRLD
 (0x1<<7)

160 
	#RG_USB20_EARLY_HSTX_I
 (0x1<<6)

161 
	#RG_USB20_TX_TST
 (0x1<<5)

162 
	#RG_USB20_NEGEDGE_ENB
 (0x1<<4)

163 
	#RG_USB20_CDR_FILT
 (0xf<<0)

164 

	)

166 
	#RG_USB20_PROBE_SEL
 (0xff<<24)

167 
	#RG_USB20_DRVVBUS
 (0x1<<23)

168 
	#RG_DEBUG_EN
 (0x1<<22)

169 
	#RG_USB20_OTG_PROBE
 (0x3<<20)

170 
	#RG_USB20_SW_PLLMODE
 (0x3<<18)

171 
	#RG_USB20_BERTH
 (0x3<<16)

172 
	#RG_USB20_LBMODE
 (0x3<<13)

173 
	#RG_USB20_FORCE_TAP
 (0x1<<12)

174 
	#RG_USB20_TAPSEL
 (0xfff<<0)

175 

	)

177 
	#RG_UART_MODE
 (0x3<<30)

178 
	#FORCE_UART_I
 (0x1<<29)

179 
	#FORCE_UART_BIAS_EN
 (0x1<<28)

180 
	#FORCE_UART_TX_OE
 (0x1<<27)

181 
	#FORCE_UART_EN
 (0x1<<26)

182 
	#FORCE_USB_CLKEN
 (0x1<<25)

183 
	#FORCE_DRVVBUS
 (0x1<<24)

184 
	#FORCE_DATAIN
 (0x1<<23)

185 
	#FORCE_TXVALID
 (0x1<<22)

186 
	#FORCE_DM_PULLDOWN
 (0x1<<21)

187 
	#FORCE_DP_PULLDOWN
 (0x1<<20)

188 
	#FORCE_XCVRSEL
 (0x1<<19)

189 
	#FORCE_SUSPENDM
 (0x1<<18)

190 
	#FORCE_TERMSEL
 (0x1<<17)

191 
	#FORCE_OPMODE
 (0x1<<16)

192 
	#UTMI_MUXSEL
 (0x1<<15)

193 
	#RG_RESET
 (0x1<<14)

194 
	#RG_DATAIN
 (0xf<<10)

195 
	#RG_TXVALIDH
 (0x1<<9)

196 
	#RG_TXVALID
 (0x1<<8)

197 
	#RG_DMPULLDOWN
 (0x1<<7)

198 
	#RG_DPPULLDOWN
 (0x1<<6)

199 
	#RG_XCVRSEL
 (0x3<<4)

200 
	#RG_SUSPENDM
 (0x1<<3)

201 
	#RG_TERMSEL
 (0x1<<2)

202 
	#RG_OPMODE
 (0x3<<0)

203 

	)

205 
	#RG_USB20_PRBS7_EN
 (0x1<<31)

206 
	#RG_USB20_PRBS7_BITCNT
 (0x3f<<24)

207 
	#RG_USB20_CLK48M_EN
 (0x1<<23)

208 
	#RG_USB20_CLK60M_EN
 (0x1<<22)

209 
	#RG_UART_I
 (0x1<<19)

210 
	#RG_UART_BIAS_EN
 (0x1<<18)

211 
	#RG_UART_TX_OE
 (0x1<<17)

212 
	#RG_UART_EN
 (0x1<<16)

213 
	#FORCE_VBUSVALID
 (0x1<<13)

214 
	#FORCE_SESSEND
 (0x1<<12)

215 
	#FORCE_BVALID
 (0x1<<11)

216 
	#FORCE_AVALID
 (0x1<<10)

217 
	#FORCE_IDDIG
 (0x1<<9)

218 
	#FORCE_IDPULLUP
 (0x1<<8)

219 
	#RG_VBUSVALID
 (0x1<<5)

220 
	#RG_SESSEND
 (0x1<<4)

221 
	#RG_BVALID
 (0x1<<3)

222 
	#RG_AVALID
 (0x1<<2)

223 
	#RG_IDDIG
 (0x1<<1)

224 
	#RG_IDPULLUP
 (0x1<<0)

225 

	)

227 
	#RG_USB20_PRBS7_BERTH
 (0xff<<0)

228 

	)

230 
	#USB20_UART_O
 (0x1<<31)

231 
	#RGO_USB20_LB_PASS
 (0x1<<30)

232 
	#RGO_USB20_LB_DONE
 (0x1<<29)

233 
	#AD_USB20_BVALID
 (0x1<<28)

234 
	#USB20_IDDIG
 (0x1<<27)

235 
	#AD_USB20_VBUSVALID
 (0x1<<26)

236 
	#AD_USB20_SESSEND
 (0x1<<25)

237 
	#AD_USB20_AVALID
 (0x1<<24)

238 
	#USB20_LINE_STATE
 (0x3<<22)

239 
	#USB20_HST_DISCON
 (0x1<<21)

240 
	#USB20_TX_READY
 (0x1<<20)

241 
	#USB20_RX_ERROR
 (0x1<<19)

242 
	#USB20_RX_ACTIVE
 (0x1<<18)

243 
	#USB20_RX_VALIDH
 (0x1<<17)

244 
	#USB20_RX_VALID
 (0x1<<16)

245 
	#USB20_DATA_OUT
 (0xffff<<0)

246 

	)

248 
	#RGO_TXVALID_CNT
 (0xff<<24)

249 
	#RGO_RXACTIVE_CNT
 (0xff<<16)

250 
	#RGO_USB20_LB_BERCNT
 (0xff<<8)

251 
	#USB20_PROBE_OUT
 (0xff<<0)

252 

	)

254 
	#RGO_USB20_PRBS7_ERRCNT
 (0xffff<<16)

255 
	#RGO_USB20_PRBS7_DONE
 (0x1<<3)

256 
	#RGO_USB20_PRBS7_LOCK
 (0x1<<2)

257 
	#RGO_USB20_PRBS7_PASS
 (0x1<<1)

258 
	#RGO_USB20_PRBS7_PASSTH
 (0x1<<0)

259 

	)

261 
	#RG_SIFSLV_CHGDT_DEGLCH_CNT
 (0xf<<28)

262 
	#RG_SIFSLV_CHGDT_CTRL_CNT
 (0xf<<24)

263 
	#RG_SIFSLV_CHGDT_FORCE_MODE
 (0x1<<16)

264 
	#RG_CHGDT_ISRC_LEV
 (0x3<<14)

265 
	#RG_CHGDT_VDATSRC
 (0x1<<13)

266 
	#RG_CHGDT_BGVREF_SEL
 (0x7<<10)

267 
	#RG_CHGDT_RDVREF_SEL
 (0x3<<8)

268 
	#RG_CHGDT_ISRC_DP
 (0x1<<7)

269 
	#RG_SIFSLV_CHGDT_OPOUT_DM
 (0x1<<6)

270 
	#RG_CHGDT_VDAT_DM
 (0x1<<5)

271 
	#RG_CHGDT_OPOUT_DP
 (0x1<<4)

272 
	#RG_SIFSLV_CHGDT_VDAT_DP
 (0x1<<3)

273 
	#RG_SIFSLV_CHGDT_COMP_EN
 (0x1<<2)

274 
	#RG_SIFSLV_CHGDT_OPDRV_EN
 (0x1<<1)

275 
	#RG_CHGDT_EN
 (0x1<<0)

276 

	)

278 
	#RG_CHGDT_REV
 (0xff<<0)

279 

	)

281 
	#RG_PAGE
 (0xff<<24)

282 
	#I2C_MODE
 (0x1<<16)

283 

	)

288 
	#RG_USB20_USBPLL_DIVEN_OFST
 (28)

	)

289 
	#RG_USB20_USBPLL_CKCTRL_OFST
 (26)

	)

290 
	#RG_USB20_USBPLL_PREDIV_OFST
 (24)

	)

291 
	#RG_USB20_USBPLL_FORCE_ON_OFST
 (23)

	)

292 
	#RG_USB20_USBPLL_FBDIV_OFST
 (16)

	)

293 
	#RG_USB20_REF_EN_OFST
 (15)

	)

294 
	#RG_USB20_INTR_EN_OFST
 (14)

	)

295 
	#RG_USB20_BG_TRIM_OFST
 (8)

	)

296 
	#RG_USB20_BG_RBSEL_OFST
 (6)

	)

297 
	#RG_USB20_BG_RASEL_OFST
 (4)

	)

298 
	#RG_USB20_BGR_DIV_OFST
 (2)

	)

299 
	#RG_SIFSLV_CHP_EN_OFST
 (1)

	)

300 
	#RG_SIFSLV_BGR_EN_OFST
 (0)

	)

303 
	#RG_USB20_VRT_VREF_SEL_OFST
 (28)

	)

304 
	#RG_USB20_TERM_VREF_SEL_OFST
 (24)

	)

305 
	#RG_USB20_MPX_SEL_OFST
 (16)

	)

306 
	#RG_USB20_MPX_OUT_SEL_OFST
 (12)

	)

307 
	#RG_USB20_TX_PH_ROT_SEL_OFST
 (8)

	)

308 
	#RG_USB20_USBPLL_ACCEN_OFST
 (3)

	)

309 
	#RG_USB20_USBPLL_LF_OFST
 (2)

	)

310 
	#RG_USB20_USBPLL_BR_OFST
 (1)

	)

311 
	#RG_USB20_USBPLL_BP_OFST
 (0)

	)

314 
	#RG_SIFSLV_MAC_BANDGAP_EN_OFST
 (17)

	)

315 
	#RG_SIFSLV_MAC_CHOPPER_EN_OFST
 (16)

	)

316 
	#RG_USB20_CLKREF_REV_OFST
 (0)

	)

319 
	#RG_USB20_ICUSB_EN_OFST
 (24)

	)

320 
	#RG_USB20_HSTX_SRCAL_EN_OFST
 (23)

	)

321 
	#RG_USB20_HSTX_SRCTRL_OFST
 (16)

	)

322 
	#RG_USB20_LS_CR_OFST
 (12)

	)

323 
	#RG_USB20_FS_CR_OFST
 (8)

	)

324 
	#RG_USB20_LS_SR_OFST
 (4)

	)

325 
	#RG_USB20_FS_SR_OFST
 (0)

	)

328 
	#RG_USB20_INIT_SQ_EN_DG_OFST
 (28)

	)

329 
	#RG_USB20_SQD_OFST
 (24)

	)

330 
	#RG_USB20_HSTX_TMODE_SEL_OFST
 (20)

	)

331 
	#RG_USB20_HSTX_TMODE_EN_OFST
 (19)

	)

332 
	#RG_USB20_PHYD_MONEN_OFST
 (18)

	)

333 
	#RG_USB20_INLPBK_EN_OFST
 (17)

	)

334 
	#RG_USB20_CHIRP_EN_OFST
 (16)

	)

335 
	#RG_USB20_DM_ABIST_SOURCE_EN_OFST
 (15)

	)

336 
	#RG_USB20_DM_ABIST_SELE_OFST
 (8)

	)

337 
	#RG_USB20_DP_ABIST_SOURCE_EN_OFST
 (7)

	)

338 
	#RG_USB20_DP_ABIST_SELE_OFST
 (0)

	)

341 
	#RG_USB20_OTG_ABIST_SELE_OFST
 (29)

	)

342 
	#RG_USB20_OTG_ABIST_EN_OFST
 (28)

	)

343 
	#RG_USB20_OTG_VBUSCMP_EN_OFST
 (27)

	)

344 
	#RG_USB20_OTG_VBUSTH_OFST
 (24)

	)

345 
	#RG_USB20_DISC_FIT_EN_OFST
 (22)

	)

346 
	#RG_USB20_DISCD_OFST
 (20)

	)

347 
	#RG_USB20_DISCTH_OFST
 (16)

	)

348 
	#RG_USB20_SQCAL_EN_OFST
 (15)

	)

349 
	#RG_USB20_SQCAL_OFST
 (8)

	)

350 
	#RG_USB20_SQTH_OFST
 (0)

	)

353 
	#RG_USB20_HSTX_DBIST_OFST
 (28)

	)

354 
	#RG_USB20_HSTX_BIST_EN_OFST
 (26)

	)

355 
	#RG_USB20_HSTX_I_EN_MODE_OFST
 (24)

	)

356 
	#RG_USB20_HSRX_TMODE_EN_OFST
 (23)

	)

357 
	#RG_USB20_HSRX_BIAS_EN_SEL_OFST
 (20)

	)

358 
	#RG_USB20_USB11_TMODE_EN_OFST
 (19)

	)

359 
	#RG_USB20_TMODE_FS_LS_TX_EN_OFST
 (18)

	)

360 
	#RG_USB20_TMODE_FS_LS_RCV_EN_OFST
 (17)

	)

361 
	#RG_USB20_TMODE_FS_LS_MODE_OFST
 (16)

	)

362 
	#RG_USB20_HS_TERM_EN_MODE_OFST
 (13)

	)

363 
	#RG_USB20_PUPD_BIST_EN_OFST
 (12)

	)

364 
	#RG_USB20_EN_PU_DM_OFST
 (11)

	)

365 
	#RG_USB20_EN_PD_DM_OFST
 (10)

	)

366 
	#RG_USB20_EN_PU_DP_OFST
 (9)

	)

367 
	#RG_USB20_EN_PD_DP_OFST
 (8)

	)

368 
	#RG_USB20_PHY_REV_OFST
 (0)

	)

371 
	#RG_USB20_DP_100K_MODE_OFST
 (18)

	)

372 
	#RG_USB20_DM_100K_EN_OFST
 (17)

	)

373 
	#USB20_DP_100K_EN_OFST
 (16)

	)

374 
	#USB20_GPIO_DM_I_OFST
 (15)

	)

375 
	#USB20_GPIO_DP_I_OFST
 (14)

	)

376 
	#USB20_GPIO_DM_OE_OFST
 (13)

	)

377 
	#USB20_GPIO_DP_OE_OFST
 (12)

	)

378 
	#RG_USB20_GPIO_CTL_OFST
 (9)

	)

379 
	#USB20_GPIO_MODE_OFST
 (8)

	)

380 
	#RG_USB20_TX_BIAS_EN_OFST
 (5)

	)

381 
	#RG_USB20_TX_VCMPDN_EN_OFST
 (4)

	)

382 
	#RG_USB20_HS_SQ_EN_MODE_OFST
 (2)

	)

383 
	#RG_USB20_HS_RCV_EN_MODE_OFST
 (0)

	)

386 
	#RGO_USB20_GPIO_DM_O_OFST
 (1)

	)

387 
	#RGO_USB20_GPIO_DP_O_OFST
 (0)

	)

390 
	#RG_USB20_CDR_TST_OFST
 (30)

	)

391 
	#RG_USB20_GATED_ENB_OFST
 (29)

	)

392 
	#RG_USB20_TESTMODE_OFST
 (26)

	)

393 
	#RG_USB20_PLL_STABLE_OFST
 (25)

	)

394 
	#RG_USB20_PLL_FORCE_ON_OFST
 (24)

	)

395 
	#RG_USB20_PHYD_RESERVE_OFST
 (8)

	)

396 
	#RG_USB20_EBTHRLD_OFST
 (7)

	)

397 
	#RG_USB20_EARLY_HSTX_I_OFST
 (6)

	)

398 
	#RG_USB20_TX_TST_OFST
 (5)

	)

399 
	#RG_USB20_NEGEDGE_ENB_OFST
 (4)

	)

400 
	#RG_USB20_CDR_FILT_OFST
 (0)

	)

403 
	#RG_USB20_PROBE_SEL_OFST
 (24)

	)

404 
	#RG_USB20_DRVVBUS_OFST
 (23)

	)

405 
	#RG_DEBUG_EN_OFST
 (22)

	)

406 
	#RG_USB20_OTG_PROBE_OFST
 (20)

	)

407 
	#RG_USB20_SW_PLLMODE_OFST
 (18)

	)

408 
	#RG_USB20_BERTH_OFST
 (16)

	)

409 
	#RG_USB20_LBMODE_OFST
 (13)

	)

410 
	#RG_USB20_FORCE_TAP_OFST
 (12)

	)

411 
	#RG_USB20_TAPSEL_OFST
 (0)

	)

414 
	#RG_UART_MODE_OFST
 (30)

	)

415 
	#FORCE_UART_I_OFST
 (29)

	)

416 
	#FORCE_UART_BIAS_EN_OFST
 (28)

	)

417 
	#FORCE_UART_TX_OE_OFST
 (27)

	)

418 
	#FORCE_UART_EN_OFST
 (26)

	)

419 
	#FORCE_USB_CLKEN_OFST
 (25)

	)

420 
	#FORCE_DRVVBUS_OFST
 (24)

	)

421 
	#FORCE_DATAIN_OFST
 (23)

	)

422 
	#FORCE_TXVALID_OFST
 (22)

	)

423 
	#FORCE_DM_PULLDOWN_OFST
 (21)

	)

424 
	#FORCE_DP_PULLDOWN_OFST
 (20)

	)

425 
	#FORCE_XCVRSEL_OFST
 (19)

	)

426 
	#FORCE_SUSPENDM_OFST
 (18)

	)

427 
	#FORCE_TERMSEL_OFST
 (17)

	)

428 
	#FORCE_OPMODE_OFST
 (16)

	)

429 
	#UTMI_MUXSEL_OFST
 (15)

	)

430 
	#RG_RESET_OFST
 (14)

	)

431 
	#RG_DATAIN_OFST
 (10)

	)

432 
	#RG_TXVALIDH_OFST
 (9)

	)

433 
	#RG_TXVALID_OFST
 (8)

	)

434 
	#RG_DMPULLDOWN_OFST
 (7)

	)

435 
	#RG_DPPULLDOWN_OFST
 (6)

	)

436 
	#RG_XCVRSEL_OFST
 (4)

	)

437 
	#RG_SUSPENDM_OFST
 (3)

	)

438 
	#RG_TERMSEL_OFST
 (2)

	)

439 
	#RG_OPMODE_OFST
 (0)

	)

442 
	#RG_USB20_PRBS7_EN_OFST
 (31)

	)

443 
	#RG_USB20_PRBS7_BITCNT_OFST
 (24)

	)

444 
	#RG_USB20_CLK48M_EN_OFST
 (23)

	)

445 
	#RG_USB20_CLK60M_EN_OFST
 (22)

	)

446 
	#RG_UART_I_OFST
 (19)

	)

447 
	#RG_UART_BIAS_EN_OFST
 (18)

	)

448 
	#RG_UART_TX_OE_OFST
 (17)

	)

449 
	#RG_UART_EN_OFST
 (16)

	)

450 
	#FORCE_VBUSVALID_OFST
 (13)

	)

451 
	#FORCE_SESSEND_OFST
 (12)

	)

452 
	#FORCE_BVALID_OFST
 (11)

	)

453 
	#FORCE_AVALID_OFST
 (10)

	)

454 
	#FORCE_IDDIG_OFST
 (9)

	)

455 
	#FORCE_IDPULLUP_OFST
 (8)

	)

456 
	#RG_VBUSVALID_OFST
 (5)

	)

457 
	#RG_SESSEND_OFST
 (4)

	)

458 
	#RG_BVALID_OFST
 (3)

	)

459 
	#RG_AVALID_OFST
 (2)

	)

460 
	#RG_IDDIG_OFST
 (1)

	)

461 
	#RG_IDPULLUP_OFST
 (0)

	)

464 
	#RG_USB20_PRBS7_BERTH_OFST
 (0)

	)

467 
	#USB20_UART_O_OFST
 (31)

	)

468 
	#RGO_USB20_LB_PASS_OFST
 (30)

	)

469 
	#RGO_USB20_LB_DONE_OFST
 (29)

	)

470 
	#AD_USB20_BVALID_OFST
 (28)

	)

471 
	#USB20_IDDIG_OFST
 (27)

	)

472 
	#AD_USB20_VBUSVALID_OFST
 (26)

	)

473 
	#AD_USB20_SESSEND_OFST
 (25)

	)

474 
	#AD_USB20_AVALID_OFST
 (24)

	)

475 
	#USB20_LINE_STATE_OFST
 (22)

	)

476 
	#USB20_HST_DISCON_OFST
 (21)

	)

477 
	#USB20_TX_READY_OFST
 (20)

	)

478 
	#USB20_RX_ERROR_OFST
 (19)

	)

479 
	#USB20_RX_ACTIVE_OFST
 (18)

	)

480 
	#USB20_RX_VALIDH_OFST
 (17)

	)

481 
	#USB20_RX_VALID_OFST
 (16)

	)

482 
	#USB20_DATA_OUT_OFST
 (0)

	)

485 
	#RGO_TXVALID_CNT_OFST
 (24)

	)

486 
	#RGO_RXACTIVE_CNT_OFST
 (16)

	)

487 
	#RGO_USB20_LB_BERCNT_OFST
 (8)

	)

488 
	#USB20_PROBE_OUT_OFST
 (0)

	)

491 
	#RGO_USB20_PRBS7_ERRCNT_OFST
 (16)

	)

492 
	#RGO_USB20_PRBS7_DONE_OFST
 (3)

	)

493 
	#RGO_USB20_PRBS7_LOCK_OFST
 (2)

	)

494 
	#RGO_USB20_PRBS7_PASS_OFST
 (1)

	)

495 
	#RGO_USB20_PRBS7_PASSTH_OFST
 (0)

	)

498 
	#RG_SIFSLV_CHGDT_DEGLCH_CNT_OFST
 (28)

	)

499 
	#RG_SIFSLV_CHGDT_CTRL_CNT_OFST
 (24)

	)

500 
	#RG_SIFSLV_CHGDT_FORCE_MODE_OFST
 (16)

	)

501 
	#RG_CHGDT_ISRC_LEV_OFST
 (14)

	)

502 
	#RG_CHGDT_VDATSRC_OFST
 (13)

	)

503 
	#RG_CHGDT_BGVREF_SEL_OFST
 (10)

	)

504 
	#RG_CHGDT_RDVREF_SEL_OFST
 (8)

	)

505 
	#RG_CHGDT_ISRC_DP_OFST
 (7)

	)

506 
	#RG_SIFSLV_CHGDT_OPOUT_DM_OFST
 (6)

	)

507 
	#RG_CHGDT_VDAT_DM_OFST
 (5)

	)

508 
	#RG_CHGDT_OPOUT_DP_OFST
 (4)

	)

509 
	#RG_SIFSLV_CHGDT_VDAT_DP_OFST
 (3)

	)

510 
	#RG_SIFSLV_CHGDT_COMP_EN_OFST
 (2)

	)

511 
	#RG_SIFSLV_CHGDT_OPDRV_EN_OFST
 (1)

	)

512 
	#RG_CHGDT_EN_OFST
 (0)

	)

515 
	#RG_CHGDT_REV_OFST
 (0)

	)

518 
	#RG_PAGE_OFST
 (24)

	)

519 
	#I2C_MODE_OFST
 (16)

	)

524 
	su3phya_ªg
 {

526 
PHY_LE32
 
	mªg0
;

527 
PHY_LE32
 
	mªg1
;

528 
PHY_LE32
 
	mªg2
;

529 
PHY_LE32
 
	mªg3
;

531 
PHY_LE32
 
	mªg4
;

532 
PHY_LE32
 
	mªg5
;

533 
PHY_LE32
 
	mªg6
;

534 
PHY_LE32
 
	mªg7
;

536 
PHY_LE32
 
	mªg8
;

537 
PHY_LE32
 
	mªg9
;

538 
PHY_LE32
 
	mªga
;

539 
PHY_LE32
 
	mªgb
;

541 
PHY_LE32
 
	mªgc
;

542 
PHY_LE32
 
	mªgd
;

543 
PHY_LE32
 
	mªge
;

547 
	#RG_SSUSB_BGR_EN
 (0x1<<31)

548 
	#RG_SSUSB_CHPEN
 (0x1<<30)

549 
	#RG_SSUSB_BG_DIV
 (0x3<<28)

550 
	#RG_SSUSB_INTR_EN
 (0x1<<26)

551 
	#RG_SSUSB_MPX_OUT_SEL
 (0x3<<24)

552 
	#RG_SSUSB_MPX_SEL
 (0xff<<16)

553 
	#RG_SSUSB_REF_EN
 (0x1<<15)

554 
	#RG_SSUSB_VRT_VREF_SEL
 (0xf<<11)

555 
	#RG_SSUSB_BG_RASEL
 (0x3<<9)

556 
	#RG_SSUSB_BG_RBSEL
 (0x3<<7)

557 
	#RG_SSUSB_BG_MONEN
 (0x1<<6)

558 
	#RG_PCIE_CLKDRV_OFFSET
 (0x3<<0)

559 

	)

561 
	#RG_PCIE_CLKDRV_SLEW
 (0x3<<30)

562 
	#RG_PCIE_CLKDRV_AMP
 (0x7<<27)

563 
	#RG_SSUSB_XTAL_TST_A2DCK_EN
 (0x1<<26)

564 
	#RG_SSUSB_XTAL_MON_EN
 (0x1<<25)

565 
	#RG_SSUSB_XTAL_HYS
 (0x1<<24)

566 
	#RG_SSUSB_XTAL_TOP_RESERVE
 (0xffff<<8)

567 
	#RG_SSUSB_SYSPLL_RESERVE
 (0xf<<4)

568 
	#RG_SSUSB_SYSPLL_FBSEL
 (0x3<<2)

569 
	#RG_SSUSB_SYSPLL_PREDIV
 (0x3<<0)

570 

	)

572 
	#RG_SSUSB_SYSPLL_LF
 (0x1<<31)

573 
	#RG_SSUSB_SYSPLL_FBDIV
 (0x7f<<24)

574 
	#RG_SSUSB_SYSPLL_POSDIV
 (0x3<<22)

575 
	#RG_SSUSB_SYSPLL_VCO_DIV_SEL
 (0x1<<21)

576 
	#RG_SSUSB_SYSPLL_BLP
 (0x1<<20)

577 
	#RG_SSUSB_SYSPLL_BP
 (0x1<<19)

578 
	#RG_SSUSB_SYSPLL_BR
 (0x1<<18)

579 
	#RG_SSUSB_SYSPLL_BC
 (0x1<<17)

580 
	#RG_SSUSB_SYSPLL_DIVEN
 (0x7<<14)

581 
	#RG_SSUSB_SYSPLL_FPEN
 (0x1<<13)

582 
	#RG_SSUSB_SYSPLL_MONCK_EN
 (0x1<<12)

583 
	#RG_SSUSB_SYSPLL_MONVC_EN
 (0x1<<11)

584 
	#RG_SSUSB_SYSPLL_MONREF_EN
 (0x1<<10)

585 
	#RG_SSUSB_SYSPLL_VOD_EN
 (0x1<<9)

586 
	#RG_SSUSB_SYSPLL_CK_SEL
 (0x1<<8)

587 

	)

589 
	#RG_SSUSB_SYSPLL_TOP_RESERVE
 (0xffff<<16)

590 

	)

592 
	#RG_SSUSB_SYSPLL_PCW_NCPO
 (0x7fffffff<<1)

593 

	)

595 
	#RG_SSUSB_SYSPLL_DDS_PI_C
 (0x7<<29)

596 
	#RG_SSUSB_SYSPLL_DDS_HF_EN
 (0x1<<28)

597 
	#RG_SSUSB_SYSPLL_DDS_PREDIV2
 (0x1<<27)

598 
	#RG_SSUSB_SYSPLL_DDS_POSTDIV2
 (0x1<<26)

599 
	#RG_SSUSB_SYSPLL_DDS_PI_PL_EN
 (0x1<<25)

600 
	#RG_SSUSB_SYSPLL_DDS_PI_RST_SEL
 (0x1<<24)

601 
	#RG_SSUSB_SYSPLL_DDS_MONEN
 (0x1<<23)

602 
	#RG_SSUSB_SYSPLL_DDS_LPF_EN
 (0x1<<22)

603 
	#RG_SSUSB_SYSPLL_CLK_PH_INV
 (0x1<<21)

604 
	#RG_SSUSB_SYSPLL_DDS_SEL_EXT
 (0x1<<20)

605 
	#RG_SSUSB_SYSPLL_DDS_DMY
 (0xffff<<0)

606 

	)

608 
	#RG_SSUSB_TX250MCK_INVB
 (0x1<<31)

609 
	#RG_SSUSB_IDRV_ITAILOP_EN
 (0x1<<30)

610 
	#RG_SSUSB_IDRV_CALIB
 (0x3f<<24)

611 
	#RG_SSUSB_TX_R50_FON
 (0x1<<23)

612 
	#RG_SSUSB_TX_SR
 (0x7<<20)

613 
	#RG_SSUSB_TX_EIDLE_CM
 (0xf<<16)

614 
	#RG_SSUSB_RXDET_RSEL
 (0x3<<14)

615 
	#RG_SSUSB_RXDET_VTHSEL
 (0x3<<12)

616 
	#RG_SSUSB_CKMON_EN
 (0x1<<11)

617 
	#RG_SSUSB_CKMON_SEL
 (0x7<<8)

618 
	#RG_SSUSB_TX_VLMON_EN
 (0x1<<7)

619 
	#RG_SSUSB_TX_VLMON_SEL
 (0x1<<6)

620 
	#RG_SSUSB_RXLBTX_EN
 (0x1<<5)

621 
	#RG_SSUSB_TXLBRX_EN
 (0x1<<4)

622 

	)

624 
	#RG_SSUSB_RESERVE
 (0xfffff<<12)

625 
	#RG_SSUSB_PLL_CKCTRL
 (0x3<<10)

626 
	#RG_SSUSB_PLL_POSDIV
 (0x3<<8)

627 
	#RG_SSUSB_PLL_AUTOK_LOAD
 (0x1<<7)

628 
	#RG_SSUSB_PLL_LOAD_RSTB
 (0x1<<6)

629 
	#RG_SSUSB_PLL_EP_EN
 (0x1<<5)

630 
	#RG_SSUSB_PLL_VOD_EN
 (0x1<<4)

631 
	#RG_SSUSB_PLL_V11_EN
 (0x1<<3)

632 
	#RG_SSUSB_PLL_MONREF_EN
 (0x1<<2)

633 
	#RG_SSUSB_PLL_MONCK_EN
 (0x1<<1)

634 
	#RG_SSUSB_PLL_MONVC_EN
 (0x1<<0)

635 

	)

637 
	#RG_SSUSB_PLL_RESERVE
 (0xffff<<0)

638 

	)

640 
	#RG_SSUSB_PLL_DDS_DMY
 (0xffff<<16)

641 
	#RG_SSUSB_PLL_SSC_PRD
 (0xffff<<0)

642 

	)

644 
	#RG_SSUSB_PLL_SSC_PHASE_INI
 (0x1<<31)

645 
	#RG_SSUSB_PLL_SSC_TRI_EN
 (0x1<<30)

646 
	#RG_SSUSB_PLL_CLK_PH_INV
 (0x1<<29)

647 
	#RG_SSUSB_PLL_DDS_LPF_EN
 (0x1<<28)

648 
	#RG_SSUSB_PLL_DDS_VADJ
 (0x7<<21)

649 
	#RG_SSUSB_PLL_DDS_MONEN
 (0x1<<20)

650 
	#RG_SSUSB_PLL_DDS_PS_VADJ
 (0x7<<17)

651 
	#RG_SSUSB_PLL_DDS_SEL_EXT
 (0x1<<16)

652 
	#RG_SSUSB_CDR_PD_DIV_BYPASS
 (0x1<<15)

653 
	#RG_SSUSB_CDR_PD_DIV_SEL
 (0x1<<14)

654 
	#RG_SSUSB_CDR_CPBIAS_SEL
 (0x1<<13)

655 
	#RG_SSUSB_CDR_OSCDET_EN
 (0x1<<12)

656 
	#RG_SSUSB_CDR_MONMUX
 (0x1<<11)

657 
	#RG_SSUSB_CDR_CKCTRL
 (0x3<<9)

658 
	#RG_SSUSB_CDR_ACCEN
 (0x1<<8)

659 
	#RG_SSUSB_CDR_BYPASS
 (0x3<<6)

660 
	#RG_SSUSB_CDR_PI_SLEW
 (0x3<<4)

661 
	#RG_SSUSB_CDR_EPEN
 (0x1<<3)

662 
	#RG_SSUSB_CDR_AUTOK_LOAD
 (0x1<<2)

663 
	#RG_SSUSB_CDR_LOAD_RSTB
 (0x1<<1)

664 
	#RG_SSUSB_CDR_MONEN
 (0x1<<0)

665 

	)

667 
	#RG_SSUSB_CDR_MONEN_DIG
 (0x1<<31)

668 
	#RG_SSUSB_CDR_REGOD
 (0x3<<29)

669 
	#RG_SSUSB_RX_DAC_EN
 (0x1<<26)

670 
	#RG_SSUSB_RX_DAC_PWD
 (0x1<<25)

671 
	#RG_SSUSB_EQ_CURSEL
 (0x1<<24)

672 
	#RG_SSUSB_RX_DAC_MUX
 (0x1f<<19)

673 
	#RG_SSUSB_RX_R2T_EN
 (0x1<<18)

674 
	#RG_SSUSB_RX_T2R_EN
 (0x1<<17)

675 
	#RG_SSUSB_RX_50_LOWER
 (0x7<<14)

676 
	#RG_SSUSB_RX_50_TAR
 (0x3<<12)

677 
	#RG_SSUSB_RX_SW_CTRL
 (0xf<<7)

678 
	#RG_PCIE_SIGDET_VTH
 (0x3<<5)

679 
	#RG_PCIE_SIGDET_LPF
 (0x3<<3)

680 
	#RG_SSUSB_LFPS_MON_EN
 (0x1<<2)

681 

	)

683 
	#RG_SSUSB_RXAFE_DCMON_SEL
 (0xf<<28)

684 
	#RG_SSUSB_CDR_RESERVE
 (0xff<<16)

685 
	#RG_SSUSB_RXAFE_RESERVE
 (0xff<<8)

686 
	#RG_PCIE_RX_RESERVE
 (0xff<<0)

687 

	)

689 
	#RGS_SSUSB_CDR_NO_OSC
 (0x1<<8)

690 
	#RGS_SSUSB_RX_DEBUG_RESERVE
 (0xff<<0)

691 

	)

693 
	#RG_SSUSB_INT_BIAS_SEL
 (0x1<<4)

694 
	#RG_SSUSB_EXT_BIAS_SEL
 (0x1<<3)

695 
	#RG_SSUSB_RX_P1_ENTRY_PASS
 (0x1<<2)

696 
	#RG_SSUSB_RX_PD_RST
 (0x1<<1)

697 
	#RG_SSUSB_RX_PD_RST_PASS
 (0x1<<0)

698 

	)

703 
	#RG_SSUSB_BGR_EN_OFST
 (31)

	)

704 
	#RG_SSUSB_CHPEN_OFST
 (30)

	)

705 
	#RG_SSUSB_BG_DIV_OFST
 (28)

	)

706 
	#RG_SSUSB_INTR_EN_OFST
 (26)

	)

707 
	#RG_SSUSB_MPX_OUT_SEL_OFST
 (24)

	)

708 
	#RG_SSUSB_MPX_SEL_OFST
 (16)

	)

709 
	#RG_SSUSB_REF_EN_OFST
 (15)

	)

710 
	#RG_SSUSB_VRT_VREF_SEL_OFST
 (11)

	)

711 
	#RG_SSUSB_BG_RASEL_OFST
 (9)

	)

712 
	#RG_SSUSB_BG_RBSEL_OFST
 (7)

	)

713 
	#RG_SSUSB_BG_MONEN_OFST
 (6)

	)

714 
	#RG_PCIE_CLKDRV_OFFSET_OFST
 (0)

	)

717 
	#RG_PCIE_CLKDRV_SLEW_OFST
 (30)

	)

718 
	#RG_PCIE_CLKDRV_AMP_OFST
 (27)

	)

719 
	#RG_SSUSB_XTAL_TST_A2DCK_EN_OFST
 (26)

	)

720 
	#RG_SSUSB_XTAL_MON_EN_OFST
 (25)

	)

721 
	#RG_SSUSB_XTAL_HYS_OFST
 (24)

	)

722 
	#RG_SSUSB_XTAL_TOP_RESERVE_OFST
 (8)

	)

723 
	#RG_SSUSB_SYSPLL_RESERVE_OFST
 (4)

	)

724 
	#RG_SSUSB_SYSPLL_FBSEL_OFST
 (2)

	)

725 
	#RG_SSUSB_SYSPLL_PREDIV_OFST
 (0)

	)

728 
	#RG_SSUSB_SYSPLL_LF_OFST
 (31)

	)

729 
	#RG_SSUSB_SYSPLL_FBDIV_OFST
 (24)

	)

730 
	#RG_SSUSB_SYSPLL_POSDIV_OFST
 (22)

	)

731 
	#RG_SSUSB_SYSPLL_VCO_DIV_SEL_OFST
 (21)

	)

732 
	#RG_SSUSB_SYSPLL_BLP_OFST
 (20)

	)

733 
	#RG_SSUSB_SYSPLL_BP_OFST
 (19)

	)

734 
	#RG_SSUSB_SYSPLL_BR_OFST
 (18)

	)

735 
	#RG_SSUSB_SYSPLL_BC_OFST
 (17)

	)

736 
	#RG_SSUSB_SYSPLL_DIVEN_OFST
 (14)

	)

737 
	#RG_SSUSB_SYSPLL_FPEN_OFST
 (13)

	)

738 
	#RG_SSUSB_SYSPLL_MONCK_EN_OFST
 (12)

	)

739 
	#RG_SSUSB_SYSPLL_MONVC_EN_OFST
 (11)

	)

740 
	#RG_SSUSB_SYSPLL_MONREF_EN_OFST
 (10)

	)

741 
	#RG_SSUSB_SYSPLL_VOD_EN_OFST
 (9)

	)

742 
	#RG_SSUSB_SYSPLL_CK_SEL_OFST
 (8)

	)

745 
	#RG_SSUSB_SYSPLL_TOP_RESERVE_OFST
 (16)

	)

748 
	#RG_SSUSB_SYSPLL_PCW_NCPO_OFST
 (1)

	)

751 
	#RG_SSUSB_SYSPLL_DDS_PI_C_OFST
 (29)

	)

752 
	#RG_SSUSB_SYSPLL_DDS_HF_EN_OFST
 (28)

	)

753 
	#RG_SSUSB_SYSPLL_DDS_PREDIV2_OFST
 (27)

	)

754 
	#RG_SSUSB_SYSPLL_DDS_POSTDIV2_OFST
 (26)

	)

755 
	#RG_SSUSB_SYSPLL_DDS_PI_PL_EN_OFST
 (25)

	)

756 
	#RG_SSUSB_SYSPLL_DDS_PI_RST_SEL_OFST
 (24)

	)

757 
	#RG_SSUSB_SYSPLL_DDS_MONEN_OFST
 (23)

	)

758 
	#RG_SSUSB_SYSPLL_DDS_LPF_EN_OFST
 (22)

	)

759 
	#RG_SSUSB_SYSPLL_CLK_PH_INV_OFST
 (21)

	)

760 
	#RG_SSUSB_SYSPLL_DDS_SEL_EXT_OFST
 (20)

	)

761 
	#RG_SSUSB_SYSPLL_DDS_DMY_OFST
 (0)

	)

764 
	#RG_SSUSB_TX250MCK_INVB_OFST
 (31)

	)

765 
	#RG_SSUSB_IDRV_ITAILOP_EN_OFST
 (30)

	)

766 
	#RG_SSUSB_IDRV_CALIB_OFST
 (24)

	)

767 
	#RG_SSUSB_TX_R50_FON_OFST
 (23)

	)

768 
	#RG_SSUSB_TX_SR_OFST
 (20)

	)

769 
	#RG_SSUSB_TX_EIDLE_CM_OFST
 (16)

	)

770 
	#RG_SSUSB_RXDET_RSEL_OFST
 (14)

	)

771 
	#RG_SSUSB_RXDET_VTHSEL_OFST
 (12)

	)

772 
	#RG_SSUSB_CKMON_EN_OFST
 (11)

	)

773 
	#RG_SSUSB_CKMON_SEL_OFST
 (8)

	)

774 
	#RG_SSUSB_TX_VLMON_EN_OFST
 (7)

	)

775 
	#RG_SSUSB_TX_VLMON_SEL_OFST
 (6)

	)

776 
	#RG_SSUSB_RXLBTX_EN_OFST
 (5)

	)

777 
	#RG_SSUSB_TXLBRX_EN_OFST
 (4)

	)

780 
	#RG_SSUSB_RESERVE_OFST
 (12)

	)

781 
	#RG_SSUSB_PLL_CKCTRL_OFST
 (10)

	)

782 
	#RG_SSUSB_PLL_POSDIV_OFST
 (8)

	)

783 
	#RG_SSUSB_PLL_AUTOK_LOAD_OFST
 (7)

	)

784 
	#RG_SSUSB_PLL_LOAD_RSTB_OFST
 (6)

	)

785 
	#RG_SSUSB_PLL_EP_EN_OFST
 (5)

	)

786 
	#RG_SSUSB_PLL_VOD_EN_OFST
 (4)

	)

787 
	#RG_SSUSB_PLL_V11_EN_OFST
 (3)

	)

788 
	#RG_SSUSB_PLL_MONREF_EN_OFST
 (2)

	)

789 
	#RG_SSUSB_PLL_MONCK_EN_OFST
 (1)

	)

790 
	#RG_SSUSB_PLL_MONVC_EN_OFST
 (0)

	)

793 
	#RG_SSUSB_PLL_RESERVE_OFST
 (0)

	)

796 
	#RG_SSUSB_PLL_DDS_DMY_OFST
 (16)

	)

797 
	#RG_SSUSB_PLL_SSC_PRD_OFST
 (0)

	)

800 
	#RG_SSUSB_PLL_SSC_PHASE_INI_OFST
 (31)

	)

801 
	#RG_SSUSB_PLL_SSC_TRI_EN_OFST
 (30)

	)

802 
	#RG_SSUSB_PLL_CLK_PH_INV_OFST
 (29)

	)

803 
	#RG_SSUSB_PLL_DDS_LPF_EN_OFST
 (28)

	)

804 
	#RG_SSUSB_PLL_DDS_VADJ_OFST
 (21)

	)

805 
	#RG_SSUSB_PLL_DDS_MONEN_OFST
 (20)

	)

806 
	#RG_SSUSB_PLL_DDS_PS_VADJ_OFST
 (17)

	)

807 
	#RG_SSUSB_PLL_DDS_SEL_EXT_OFST
 (16)

	)

808 
	#RG_SSUSB_CDR_PD_DIV_BYPASS_OFST
 (15)

	)

809 
	#RG_SSUSB_CDR_PD_DIV_SEL_OFST
 (14)

	)

810 
	#RG_SSUSB_CDR_CPBIAS_SEL_OFST
 (13)

	)

811 
	#RG_SSUSB_CDR_OSCDET_EN_OFST
 (12)

	)

812 
	#RG_SSUSB_CDR_MONMUX_OFST
 (11)

	)

813 
	#RG_SSUSB_CDR_CKCTRL_OFST
 (9)

	)

814 
	#RG_SSUSB_CDR_ACCEN_OFST
 (8)

	)

815 
	#RG_SSUSB_CDR_BYPASS_OFST
 (6)

	)

816 
	#RG_SSUSB_CDR_PI_SLEW_OFST
 (4)

	)

817 
	#RG_SSUSB_CDR_EPEN_OFST
 (3)

	)

818 
	#RG_SSUSB_CDR_AUTOK_LOAD_OFST
 (2)

	)

819 
	#RG_SSUSB_CDR_LOAD_RSTB_OFST
 (1)

	)

820 
	#RG_SSUSB_CDR_MONEN_OFST
 (0)

	)

823 
	#RG_SSUSB_CDR_MONEN_DIG_OFST
 (31)

	)

824 
	#RG_SSUSB_CDR_REGOD_OFST
 (29)

	)

825 
	#RG_SSUSB_RX_DAC_EN_OFST
 (26)

	)

826 
	#RG_SSUSB_RX_DAC_PWD_OFST
 (25)

	)

827 
	#RG_SSUSB_EQ_CURSEL_OFST
 (24)

	)

828 
	#RG_SSUSB_RX_DAC_MUX_OFST
 (19)

	)

829 
	#RG_SSUSB_RX_R2T_EN_OFST
 (18)

	)

830 
	#RG_SSUSB_RX_T2R_EN_OFST
 (17)

	)

831 
	#RG_SSUSB_RX_50_LOWER_OFST
 (14)

	)

832 
	#RG_SSUSB_RX_50_TAR_OFST
 (12)

	)

833 
	#RG_SSUSB_RX_SW_CTRL_OFST
 (7)

	)

834 
	#RG_PCIE_SIGDET_VTH_OFST
 (5)

	)

835 
	#RG_PCIE_SIGDET_LPF_OFST
 (3)

	)

836 
	#RG_SSUSB_LFPS_MON_EN_OFST
 (2)

	)

839 
	#RG_SSUSB_RXAFE_DCMON_SEL_OFST
 (28)

	)

840 
	#RG_SSUSB_CDR_RESERVE_OFST
 (16)

	)

841 
	#RG_SSUSB_RXAFE_RESERVE_OFST
 (8)

	)

842 
	#RG_PCIE_RX_RESERVE_OFST
 (0)

	)

845 
	#RGS_SSUSB_CDR_NO_OSC_OFST
 (8)

	)

846 
	#RGS_SSUSB_RX_DEBUG_RESERVE_OFST
 (0)

	)

849 
	#RG_SSUSB_INT_BIAS_SEL_OFST
 (4)

	)

850 
	#RG_SSUSB_EXT_BIAS_SEL_OFST
 (3)

	)

851 
	#RG_SSUSB_RX_P1_ENTRY_PASS_OFST
 (2)

	)

852 
	#RG_SSUSB_RX_PD_RST_OFST
 (1)

	)

853 
	#RG_SSUSB_RX_PD_RST_PASS_OFST
 (0)

	)

857 
	su3phya_da_ªg
 {

859 
PHY_LE32
 
	mªg0
;

860 
PHY_LE32
 
	mªg1
;

861 
PHY_LE32
 
	mªg4
;

862 
PHY_LE32
 
	mªg5
;

864 
PHY_LE32
 
	mªg6
;

865 
PHY_LE32
 
	mªg7
;

866 
PHY_LE32
 
	mªg8
;

867 
PHY_LE32
 
	mªg9
;

869 
PHY_LE32
 
	mªg10
;

870 
PHY_LE32
 
	mªg12
;

871 
PHY_LE32
 
	mªg13
;

872 
PHY_LE32
 
	mªg14
;

874 
PHY_LE32
 
	mªg15
;

875 
PHY_LE32
 
	mªg16
;

876 
PHY_LE32
 
	mªg19
;

877 
PHY_LE32
 
	mªg20
;

879 
PHY_LE32
 
	mªg21
;

880 
PHY_LE32
 
	mªg23
;

881 
PHY_LE32
 
	mªg25
;

882 
PHY_LE32
 
	mªg26
;

884 
PHY_LE32
 
	mªg28
;

885 
PHY_LE32
 
	mªg29
;

886 
PHY_LE32
 
	mªg30
;

887 
PHY_LE32
 
	mªg31
;

889 
PHY_LE32
 
	mªg32
;

890 
PHY_LE32
 
	mªg33
;

894 
	#RG_PCIE_SPEED_PE2D
 (0x1<<24)

895 
	#RG_PCIE_SPEED_PE2H
 (0x1<<23)

896 
	#RG_PCIE_SPEED_PE1D
 (0x1<<22)

897 
	#RG_PCIE_SPEED_PE1H
 (0x1<<21)

898 
	#RG_PCIE_SPEED_U3
 (0x1<<20)

899 
	#RG_SSUSB_XTAL_EXT_EN_PE2D
 (0x3<<18)

900 
	#RG_SSUSB_XTAL_EXT_EN_PE2H
 (0x3<<16)

901 
	#RG_SSUSB_XTAL_EXT_EN_PE1D
 (0x3<<14)

902 
	#RG_SSUSB_XTAL_EXT_EN_PE1H
 (0x3<<12)

903 
	#RG_SSUSB_XTAL_EXT_EN_U3
 (0x3<<10)

904 
	#RG_SSUSB_CDR_REFCK_SEL_PE2D
 (0x3<<8)

905 
	#RG_SSUSB_CDR_REFCK_SEL_PE2H
 (0x3<<6)

906 
	#RG_SSUSB_CDR_REFCK_SEL_PE1D
 (0x3<<4)

907 
	#RG_SSUSB_CDR_REFCK_SEL_PE1H
 (0x3<<2)

908 
	#RG_SSUSB_CDR_REFCK_SEL_U3
 (0x3<<0)

909 

	)

911 
	#RG_USB20_REFCK_SEL_PE2D
 (0x1<<30)

912 
	#RG_USB20_REFCK_SEL_PE2H
 (0x1<<29)

913 
	#RG_USB20_REFCK_SEL_PE1D
 (0x1<<28)

914 
	#RG_USB20_REFCK_SEL_PE1H
 (0x1<<27)

915 
	#RG_USB20_REFCK_SEL_U3
 (0x1<<26)

916 
	#RG_PCIE_REFCK_DIV4_PE2D
 (0x1<<25)

917 
	#RG_PCIE_REFCK_DIV4_PE2H
 (0x1<<24)

918 
	#RG_PCIE_REFCK_DIV4_PE1D
 (0x1<<18)

919 
	#RG_PCIE_REFCK_DIV4_PE1H
 (0x1<<17)

920 
	#RG_PCIE_REFCK_DIV4_U3
 (0x1<<16)

921 
	#RG_PCIE_MODE_PE2D
 (0x1<<8)

922 
	#RG_PCIE_MODE_PE2H
 (0x1<<3)

923 
	#RG_PCIE_MODE_PE1D
 (0x1<<2)

924 
	#RG_PCIE_MODE_PE1H
 (0x1<<1)

925 
	#RG_PCIE_MODE_U3
 (0x1<<0)

926 

	)

928 
	#RG_SSUSB_PLL_DIVEN_PE2D
 (0x7<<22)

929 
	#RG_SSUSB_PLL_DIVEN_PE2H
 (0x7<<19)

930 
	#RG_SSUSB_PLL_DIVEN_PE1D
 (0x7<<16)

931 
	#RG_SSUSB_PLL_DIVEN_PE1H
 (0x7<<13)

932 
	#RG_SSUSB_PLL_DIVEN_U3
 (0x7<<10)

933 
	#RG_SSUSB_PLL_BC_PE2D
 (0x3<<8)

934 
	#RG_SSUSB_PLL_BC_PE2H
 (0x3<<6)

935 
	#RG_SSUSB_PLL_BC_PE1D
 (0x3<<4)

936 
	#RG_SSUSB_PLL_BC_PE1H
 (0x3<<2)

937 
	#RG_SSUSB_PLL_BC_U3
 (0x3<<0)

938 

	)

940 
	#RG_SSUSB_PLL_BR_PE2D
 (0x7<<27)

941 
	#RG_SSUSB_PLL_BR_PE2H
 (0x7<<24)

942 
	#RG_SSUSB_PLL_BR_PE1D
 (0x7<<21)

943 
	#RG_SSUSB_PLL_BR_PE1H
 (0x7<<18)

944 
	#RG_SSUSB_PLL_BR_U3
 (0x7<<15)

945 
	#RG_SSUSB_PLL_IC_PE2D
 (0x7<<12)

946 
	#RG_SSUSB_PLL_IC_PE2H
 (0x7<<9)

947 
	#RG_SSUSB_PLL_IC_PE1D
 (0x7<<6)

948 
	#RG_SSUSB_PLL_IC_PE1H
 (0x7<<3)

949 
	#RG_SSUSB_PLL_IC_U3
 (0x7<<0)

950 

	)

952 
	#RG_SSUSB_PLL_IR_PE2D
 (0xf<<24)

953 
	#RG_SSUSB_PLL_IR_PE2H
 (0xf<<16)

954 
	#RG_SSUSB_PLL_IR_PE1D
 (0xf<<8)

955 
	#RG_SSUSB_PLL_IR_PE1H
 (0xf<<4)

956 
	#RG_SSUSB_PLL_IR_U3
 (0xf<<0)

957 

	)

959 
	#RG_SSUSB_PLL_BP_PE2D
 (0xf<<24)

960 
	#RG_SSUSB_PLL_BP_PE2H
 (0xf<<16)

961 
	#RG_SSUSB_PLL_BP_PE1D
 (0xf<<8)

962 
	#RG_SSUSB_PLL_BP_PE1H
 (0xf<<4)

963 
	#RG_SSUSB_PLL_BP_U3
 (0xf<<0)

964 

	)

966 
	#RG_SSUSB_PLL_FBKSEL_PE2D
 (0x3<<24)

967 
	#RG_SSUSB_PLL_FBKSEL_PE2H
 (0x3<<16)

968 
	#RG_SSUSB_PLL_FBKSEL_PE1D
 (0x3<<8)

969 
	#RG_SSUSB_PLL_FBKSEL_PE1H
 (0x3<<2)

970 
	#RG_SSUSB_PLL_FBKSEL_U3
 (0x3<<0)

971 

	)

973 
	#RG_SSUSB_PLL_FBKDIV_PE2H
 (0x7f<<24)

974 
	#RG_SSUSB_PLL_FBKDIV_PE1D
 (0x7f<<16)

975 
	#RG_SSUSB_PLL_FBKDIV_PE1H
 (0x7f<<8)

976 
	#RG_SSUSB_PLL_FBKDIV_U3
 (0x7f<<0)

977 

	)

979 
	#RG_SSUSB_PLL_PREDIV_PE2D
 (0x3<<26)

980 
	#RG_SSUSB_PLL_PREDIV_PE2H
 (0x3<<24)

981 
	#RG_SSUSB_PLL_PREDIV_PE1D
 (0x3<<18)

982 
	#RG_SSUSB_PLL_PREDIV_PE1H
 (0x3<<16)

983 
	#RG_SSUSB_PLL_PREDIV_U3
 (0x3<<8)

984 
	#RG_SSUSB_PLL_FBKDIV_PE2D
 (0x7f<<0)

985 

	)

987 
	#RG_SSUSB_PLL_PCW_NCPO_U3
 (0x7fffffff<<0)

988 

	)

990 
	#RG_SSUSB_PLL_PCW_NCPO_PE1H
 (0x7fffffff<<0)

991 

	)

993 
	#RG_SSUSB_PLL_PCW_NCPO_PE1D
 (0x7fffffff<<0)

994 

	)

996 
	#RG_SSUSB_PLL_PCW_NCPO_PE2H
 (0x7fffffff<<0)

997 

	)

999 
	#RG_SSUSB_PLL_PCW_NCPO_PE2D
 (0x7fffffff<<0)

1000 

	)

1002 
	#RG_SSUSB_PLL_SSC_DELTA1_PE1H
 (0xffff<<16)

1003 
	#RG_SSUSB_PLL_SSC_DELTA1_U3
 (0xffff<<0)

1004 

	)

1006 
	#RG_SSUSB_PLL_SSC_DELTA1_PE2H
 (0xffff<<16)

1007 
	#RG_SSUSB_PLL_SSC_DELTA1_PE1D
 (0xffff<<0)

1008 

	)

1010 
	#RG_SSUSB_PLL_SSC_DELTA_U3
 (0xffff<<16)

1011 
	#RG_SSUSB_PLL_SSC_DELTA1_PE2D
 (0xffff<<0)

1012 

	)

1014 
	#RG_SSUSB_PLL_SSC_DELTA_PE1D
 (0xffff<<16)

1015 
	#RG_SSUSB_PLL_SSC_DELTA_PE1H
 (0xffff<<0)

1016 

	)

1018 
	#RG_SSUSB_PLL_SSC_DELTA_PE2D
 (0xffff<<16)

1019 
	#RG_SSUSB_PLL_SSC_DELTA_PE2H
 (0xffff<<0)

1020 

	)

1022 
	#RG_SSUSB_PLL_REFCKDIV_PE2D
 (0x1<<25)

1023 
	#RG_SSUSB_PLL_REFCKDIV_PE2H
 (0x1<<24)

1024 
	#RG_SSUSB_PLL_REFCKDIV_PE1D
 (0x1<<16)

1025 
	#RG_SSUSB_PLL_REFCKDIV_PE1H
 (0x1<<8)

1026 
	#RG_SSUSB_PLL_REFCKDIV_U3
 (0x1<<0)

1027 

	)

1029 
	#RG_SSUSB_CDR_BPA_PE2D
 (0x3<<24)

1030 
	#RG_SSUSB_CDR_BPA_PE2H
 (0x3<<16)

1031 
	#RG_SSUSB_CDR_BPA_PE1D
 (0x3<<10)

1032 
	#RG_SSUSB_CDR_BPA_PE1H
 (0x3<<8)

1033 
	#RG_SSUSB_CDR_BPA_U3
 (0x3<<0)

1034 

	)

1036 
	#RG_SSUSB_CDR_BPB_PE2D
 (0x7<<24)

1037 
	#RG_SSUSB_CDR_BPB_PE2H
 (0x7<<16)

1038 
	#RG_SSUSB_CDR_BPB_PE1D
 (0x7<<6)

1039 
	#RG_SSUSB_CDR_BPB_PE1H
 (0x7<<3)

1040 
	#RG_SSUSB_CDR_BPB_U3
 (0x7<<0)

1041 

	)

1043 
	#RG_SSUSB_CDR_BR_PE2D
 (0x7<<24)

1044 
	#RG_SSUSB_CDR_BR_PE2H
 (0x7<<16)

1045 
	#RG_SSUSB_CDR_BR_PE1D
 (0x7<<6)

1046 
	#RG_SSUSB_CDR_BR_PE1H
 (0x7<<3)

1047 
	#RG_SSUSB_CDR_BR_U3
 (0x7<<0)

1048 

	)

1050 
	#RG_SSUSB_CDR_FBDIV_PE2H
 (0x7f<<24)

1051 
	#RG_SSUSB_CDR_FBDIV_PE1D
 (0x7f<<16)

1052 
	#RG_SSUSB_CDR_FBDIV_PE1H
 (0x7f<<8)

1053 
	#RG_SSUSB_CDR_FBDIV_U3
 (0x7f<<0)

1054 

	)

1056 
	#RG_SSUSB_EQ_RSTEP1_PE2D
 (0x3<<30)

1057 
	#RG_SSUSB_EQ_RSTEP1_PE2H
 (0x3<<28)

1058 
	#RG_SSUSB_EQ_RSTEP1_PE1D
 (0x3<<26)

1059 
	#RG_SSUSB_EQ_RSTEP1_PE1H
 (0x3<<24)

1060 
	#RG_SSUSB_EQ_RSTEP1_U3
 (0x3<<22)

1061 
	#RG_SSUSB_LFPS_DEGLITCH_PE2D
 (0x3<<20)

1062 
	#RG_SSUSB_LFPS_DEGLITCH_PE2H
 (0x3<<18)

1063 
	#RG_SSUSB_LFPS_DEGLITCH_PE1D
 (0x3<<16)

1064 
	#RG_SSUSB_LFPS_DEGLITCH_PE1H
 (0x3<<14)

1065 
	#RG_SSUSB_LFPS_DEGLITCH_U3
 (0x3<<12)

1066 
	#RG_SSUSB_CDR_KVSEL_PE2D
 (0x1<<11)

1067 
	#RG_SSUSB_CDR_KVSEL_PE2H
 (0x1<<10)

1068 
	#RG_SSUSB_CDR_KVSEL_PE1D
 (0x1<<9)

1069 
	#RG_SSUSB_CDR_KVSEL_PE1H
 (0x1<<8)

1070 
	#RG_SSUSB_CDR_KVSEL_U3
 (0x1<<7)

1071 
	#RG_SSUSB_CDR_FBDIV_PE2D
 (0x7f<<0)

1072 

	)

1074 
	#RG_SSUSB_RX_CMPWD_PE2D
 (0x1<<26)

1075 
	#RG_SSUSB_RX_CMPWD_PE2H
 (0x1<<25)

1076 
	#RG_SSUSB_RX_CMPWD_PE1D
 (0x1<<24)

1077 
	#RG_SSUSB_RX_CMPWD_PE1H
 (0x1<<23)

1078 
	#RG_SSUSB_RX_CMPWD_U3
 (0x1<<16)

1079 
	#RG_SSUSB_EQ_RSTEP2_PE2D
 (0x3<<8)

1080 
	#RG_SSUSB_EQ_RSTEP2_PE2H
 (0x3<<6)

1081 
	#RG_SSUSB_EQ_RSTEP2_PE1D
 (0x3<<4)

1082 
	#RG_SSUSB_EQ_RSTEP2_PE1H
 (0x3<<2)

1083 
	#RG_SSUSB_EQ_RSTEP2_U3
 (0x3<<0)

1084 

	)

1089 
	#RG_PCIE_SPEED_PE2D_OFST
 (24)

	)

1090 
	#RG_PCIE_SPEED_PE2H_OFST
 (23)

	)

1091 
	#RG_PCIE_SPEED_PE1D_OFST
 (22)

	)

1092 
	#RG_PCIE_SPEED_PE1H_OFST
 (21)

	)

1093 
	#RG_PCIE_SPEED_U3_OFST
 (20)

	)

1094 
	#RG_SSUSB_XTAL_EXT_EN_PE2D_OFST
 (18)

	)

1095 
	#RG_SSUSB_XTAL_EXT_EN_PE2H_OFST
 (16)

	)

1096 
	#RG_SSUSB_XTAL_EXT_EN_PE1D_OFST
 (14)

	)

1097 
	#RG_SSUSB_XTAL_EXT_EN_PE1H_OFST
 (12)

	)

1098 
	#RG_SSUSB_XTAL_EXT_EN_U3_OFST
 (10)

	)

1099 
	#RG_SSUSB_CDR_REFCK_SEL_PE2D_OFST
 (8)

	)

1100 
	#RG_SSUSB_CDR_REFCK_SEL_PE2H_OFST
 (6)

	)

1101 
	#RG_SSUSB_CDR_REFCK_SEL_PE1D_OFST
 (4)

	)

1102 
	#RG_SSUSB_CDR_REFCK_SEL_PE1H_OFST
 (2)

	)

1103 
	#RG_SSUSB_CDR_REFCK_SEL_U3_OFST
 (0)

	)

1106 
	#RG_USB20_REFCK_SEL_PE2D_OFST
 (30)

	)

1107 
	#RG_USB20_REFCK_SEL_PE2H_OFST
 (29)

	)

1108 
	#RG_USB20_REFCK_SEL_PE1D_OFST
 (28)

	)

1109 
	#RG_USB20_REFCK_SEL_PE1H_OFST
 (27)

	)

1110 
	#RG_USB20_REFCK_SEL_U3_OFST
 (26)

	)

1111 
	#RG_PCIE_REFCK_DIV4_PE2D_OFST
 (25)

	)

1112 
	#RG_PCIE_REFCK_DIV4_PE2H_OFST
 (24)

	)

1113 
	#RG_PCIE_REFCK_DIV4_PE1D_OFST
 (18)

	)

1114 
	#RG_PCIE_REFCK_DIV4_PE1H_OFST
 (17)

	)

1115 
	#RG_PCIE_REFCK_DIV4_U3_OFST
 (16)

	)

1116 
	#RG_PCIE_MODE_PE2D_OFST
 (8)

	)

1117 
	#RG_PCIE_MODE_PE2H_OFST
 (3)

	)

1118 
	#RG_PCIE_MODE_PE1D_OFST
 (2)

	)

1119 
	#RG_PCIE_MODE_PE1H_OFST
 (1)

	)

1120 
	#RG_PCIE_MODE_U3_OFST
 (0)

	)

1123 
	#RG_SSUSB_PLL_DIVEN_PE2D_OFST
 (22)

	)

1124 
	#RG_SSUSB_PLL_DIVEN_PE2H_OFST
 (19)

	)

1125 
	#RG_SSUSB_PLL_DIVEN_PE1D_OFST
 (16)

	)

1126 
	#RG_SSUSB_PLL_DIVEN_PE1H_OFST
 (13)

	)

1127 
	#RG_SSUSB_PLL_DIVEN_U3_OFST
 (10)

	)

1128 
	#RG_SSUSB_PLL_BC_PE2D_OFST
 (8)

	)

1129 
	#RG_SSUSB_PLL_BC_PE2H_OFST
 (6)

	)

1130 
	#RG_SSUSB_PLL_BC_PE1D_OFST
 (4)

	)

1131 
	#RG_SSUSB_PLL_BC_PE1H_OFST
 (2)

	)

1132 
	#RG_SSUSB_PLL_BC_U3_OFST
 (0)

	)

1135 
	#RG_SSUSB_PLL_BR_PE2D_OFST
 (27)

	)

1136 
	#RG_SSUSB_PLL_BR_PE2H_OFST
 (24)

	)

1137 
	#RG_SSUSB_PLL_BR_PE1D_OFST
 (21)

	)

1138 
	#RG_SSUSB_PLL_BR_PE1H_OFST
 (18)

	)

1139 
	#RG_SSUSB_PLL_BR_U3_OFST
 (15)

	)

1140 
	#RG_SSUSB_PLL_IC_PE2D_OFST
 (12)

	)

1141 
	#RG_SSUSB_PLL_IC_PE2H_OFST
 (9)

	)

1142 
	#RG_SSUSB_PLL_IC_PE1D_OFST
 (6)

	)

1143 
	#RG_SSUSB_PLL_IC_PE1H_OFST
 (3)

	)

1144 
	#RG_SSUSB_PLL_IC_U3_OFST
 (0)

	)

1147 
	#RG_SSUSB_PLL_IR_PE2D_OFST
 (24)

	)

1148 
	#RG_SSUSB_PLL_IR_PE2H_OFST
 (16)

	)

1149 
	#RG_SSUSB_PLL_IR_PE1D_OFST
 (8)

	)

1150 
	#RG_SSUSB_PLL_IR_PE1H_OFST
 (4)

	)

1151 
	#RG_SSUSB_PLL_IR_U3_OFST
 (0)

	)

1154 
	#RG_SSUSB_PLL_BP_PE2D_OFST
 (24)

	)

1155 
	#RG_SSUSB_PLL_BP_PE2H_OFST
 (16)

	)

1156 
	#RG_SSUSB_PLL_BP_PE1D_OFST
 (8)

	)

1157 
	#RG_SSUSB_PLL_BP_PE1H_OFST
 (4)

	)

1158 
	#RG_SSUSB_PLL_BP_U3_OFST
 (0)

	)

1161 
	#RG_SSUSB_PLL_FBKSEL_PE2D_OFST
 (24)

	)

1162 
	#RG_SSUSB_PLL_FBKSEL_PE2H_OFST
 (16)

	)

1163 
	#RG_SSUSB_PLL_FBKSEL_PE1D_OFST
 (8)

	)

1164 
	#RG_SSUSB_PLL_FBKSEL_PE1H_OFST
 (2)

	)

1165 
	#RG_SSUSB_PLL_FBKSEL_U3_OFST
 (0)

	)

1168 
	#RG_SSUSB_PLL_FBKDIV_PE2H_OFST
 (24)

	)

1169 
	#RG_SSUSB_PLL_FBKDIV_PE1D_OFST
 (16)

	)

1170 
	#RG_SSUSB_PLL_FBKDIV_PE1H_OFST
 (8)

	)

1171 
	#RG_SSUSB_PLL_FBKDIV_U3_OFST
 (0)

	)

1174 
	#RG_SSUSB_PLL_PREDIV_PE2D_OFST
 (26)

	)

1175 
	#RG_SSUSB_PLL_PREDIV_PE2H_OFST
 (24)

	)

1176 
	#RG_SSUSB_PLL_PREDIV_PE1D_OFST
 (18)

	)

1177 
	#RG_SSUSB_PLL_PREDIV_PE1H_OFST
 (16)

	)

1178 
	#RG_SSUSB_PLL_PREDIV_U3_OFST
 (8)

	)

1179 
	#RG_SSUSB_PLL_FBKDIV_PE2D_OFST
 (0)

	)

1182 
	#RG_SSUSB_PLL_PCW_NCPO_U3_OFST
 (0)

	)

1185 
	#RG_SSUSB_PLL_PCW_NCPO_PE1H_OFST
 (0)

	)

1188 
	#RG_SSUSB_PLL_PCW_NCPO_PE1D_OFST
 (0)

	)

1191 
	#RG_SSUSB_PLL_PCW_NCPO_PE2H_OFST
 (0)

	)

1194 
	#RG_SSUSB_PLL_PCW_NCPO_PE2D_OFST
 (0)

	)

1197 
	#RG_SSUSB_PLL_SSC_DELTA1_PE1H_OFST
 (16)

	)

1198 
	#RG_SSUSB_PLL_SSC_DELTA1_U3_OFST
 (0)

	)

1201 
	#RG_SSUSB_PLL_SSC_DELTA1_PE2H_OFST
 (16)

	)

1202 
	#RG_SSUSB_PLL_SSC_DELTA1_PE1D_OFST
 (0)

	)

1205 
	#RG_SSUSB_PLL_SSC_DELTA_U3_OFST
 (16)

	)

1206 
	#RG_SSUSB_PLL_SSC_DELTA1_PE2D_OFST
 (0)

	)

1209 
	#RG_SSUSB_PLL_SSC_DELTA_PE1D_OFST
 (16)

	)

1210 
	#RG_SSUSB_PLL_SSC_DELTA_PE1H_OFST
 (0)

	)

1213 
	#RG_SSUSB_PLL_SSC_DELTA_PE2D_OFST
 (16)

	)

1214 
	#RG_SSUSB_PLL_SSC_DELTA_PE2H_OFST
 (0)

	)

1217 
	#RG_SSUSB_PLL_REFCKDIV_PE2D_OFST
 (25)

	)

1218 
	#RG_SSUSB_PLL_REFCKDIV_PE2H_OFST
 (24)

	)

1219 
	#RG_SSUSB_PLL_REFCKDIV_PE1D_OFST
 (16)

	)

1220 
	#RG_SSUSB_PLL_REFCKDIV_PE1H_OFST
 (8)

	)

1221 
	#RG_SSUSB_PLL_REFCKDIV_U3_OFST
 (0)

	)

1224 
	#RG_SSUSB_CDR_BPA_PE2D_OFST
 (24)

	)

1225 
	#RG_SSUSB_CDR_BPA_PE2H_OFST
 (16)

	)

1226 
	#RG_SSUSB_CDR_BPA_PE1D_OFST
 (10)

	)

1227 
	#RG_SSUSB_CDR_BPA_PE1H_OFST
 (8)

	)

1228 
	#RG_SSUSB_CDR_BPA_U3_OFST
 (0)

	)

1231 
	#RG_SSUSB_CDR_BPB_PE2D_OFST
 (24)

	)

1232 
	#RG_SSUSB_CDR_BPB_PE2H_OFST
 (16)

	)

1233 
	#RG_SSUSB_CDR_BPB_PE1D_OFST
 (6)

	)

1234 
	#RG_SSUSB_CDR_BPB_PE1H_OFST
 (3)

	)

1235 
	#RG_SSUSB_CDR_BPB_U3_OFST
 (0)

	)

1238 
	#RG_SSUSB_CDR_BR_PE2D_OFST
 (24)

	)

1239 
	#RG_SSUSB_CDR_BR_PE2H_OFST
 (16)

	)

1240 
	#RG_SSUSB_CDR_BR_PE1D_OFST
 (6)

	)

1241 
	#RG_SSUSB_CDR_BR_PE1H_OFST
 (3)

	)

1242 
	#RG_SSUSB_CDR_BR_U3_OFST
 (0)

	)

1245 
	#RG_SSUSB_CDR_FBDIV_PE2H_OFST
 (24)

	)

1246 
	#RG_SSUSB_CDR_FBDIV_PE1D_OFST
 (16)

	)

1247 
	#RG_SSUSB_CDR_FBDIV_PE1H_OFST
 (8)

	)

1248 
	#RG_SSUSB_CDR_FBDIV_U3_OFST
 (0)

	)

1251 
	#RG_SSUSB_EQ_RSTEP1_PE2D_OFST
 (30)

	)

1252 
	#RG_SSUSB_EQ_RSTEP1_PE2H_OFST
 (28)

	)

1253 
	#RG_SSUSB_EQ_RSTEP1_PE1D_OFST
 (26)

	)

1254 
	#RG_SSUSB_EQ_RSTEP1_PE1H_OFST
 (24)

	)

1255 
	#RG_SSUSB_EQ_RSTEP1_U3_OFST
 (22)

	)

1256 
	#RG_SSUSB_LFPS_DEGLITCH_PE2D_OFST
 (20)

	)

1257 
	#RG_SSUSB_LFPS_DEGLITCH_PE2H_OFST
 (18)

	)

1258 
	#RG_SSUSB_LFPS_DEGLITCH_PE1D_OFST
 (16)

	)

1259 
	#RG_SSUSB_LFPS_DEGLITCH_PE1H_OFST
 (14)

	)

1260 
	#RG_SSUSB_LFPS_DEGLITCH_U3_OFST
 (12)

	)

1261 
	#RG_SSUSB_CDR_KVSEL_PE2D_OFST
 (11)

	)

1262 
	#RG_SSUSB_CDR_KVSEL_PE2H_OFST
 (10)

	)

1263 
	#RG_SSUSB_CDR_KVSEL_PE1D_OFST
 (9)

	)

1264 
	#RG_SSUSB_CDR_KVSEL_PE1H_OFST
 (8)

	)

1265 
	#RG_SSUSB_CDR_KVSEL_U3_OFST
 (7)

	)

1266 
	#RG_SSUSB_CDR_FBDIV_PE2D_OFST
 (0)

	)

1269 
	#RG_SSUSB_RX_CMPWD_PE2D_OFST
 (26)

	)

1270 
	#RG_SSUSB_RX_CMPWD_PE2H_OFST
 (25)

	)

1271 
	#RG_SSUSB_RX_CMPWD_PE1D_OFST
 (24)

	)

1272 
	#RG_SSUSB_RX_CMPWD_PE1H_OFST
 (23)

	)

1273 
	#RG_SSUSB_RX_CMPWD_U3_OFST
 (16)

	)

1274 
	#RG_SSUSB_EQ_RSTEP2_PE2D_OFST
 (8)

	)

1275 
	#RG_SSUSB_EQ_RSTEP2_PE2H_OFST
 (6)

	)

1276 
	#RG_SSUSB_EQ_RSTEP2_PE1D_OFST
 (4)

	)

1277 
	#RG_SSUSB_EQ_RSTEP2_PE1H_OFST
 (2)

	)

1278 
	#RG_SSUSB_EQ_RSTEP2_U3_OFST
 (0)

	)

1283 
	su3phyd_ªg
 {

1285 
PHY_LE32
 
	mphyd_mix0
;

1286 
PHY_LE32
 
	mphyd_mix1
;

1287 
PHY_LE32
 
	mphyd_lÂs0
;

1288 
PHY_LE32
 
	mphyd_lÂs1
;

1290 
PHY_LE32
 
	mphyd_impˇl0
;

1291 
PHY_LE32
 
	mphyd_impˇl1
;

1292 
PHY_LE32
 
	mphyd_tx∂l0
;

1293 
PHY_LE32
 
	mphyd_tx∂l1
;

1295 
PHY_LE32
 
	mphyd_tx∂l2
;

1296 
PHY_LE32
 
	mphyd_Ê0
;

1297 
PHY_LE32
 
	mphyd_mix2
;

1298 
PHY_LE32
 
	mphyd_rx0
;

1300 
PHY_LE32
 
	mphyd_t2æb
;

1301 
PHY_LE32
 
	mphyd_˝∑t
;

1302 
PHY_LE32
 
	mphyd_mix3
;

1303 
PHY_LE32
 
	mphyd_ebuf˘l
;

1305 
PHY_LE32
 
	mphyd_pùe0
;

1306 
PHY_LE32
 
	mphyd_pùe1
;

1307 
PHY_LE32
 
	mphyd_mix4
;

1308 
PHY_LE32
 
	mphyd_ckgí0
;

1310 
PHY_LE32
 
	mphyd_mix5
;

1311 
PHY_LE32
 
	mphyd_ª£rved
;

1312 
PHY_LE32
 
	mphyd_cdr0
;

1313 
PHY_LE32
 
	mphyd_cdr1
;

1315 
PHY_LE32
 
	mphyd_∂l_0
;

1316 
PHY_LE32
 
	mphyd_∂l_1
;

1317 
PHY_LE32
 
	mphyd_b˙_dë_1
;

1318 
PHY_LE32
 
	mphyd_b˙_dë_2
;

1320 
PHY_LE32
 
	meq0
;

1321 
PHY_LE32
 
	meq1
;

1322 
PHY_LE32
 
	meq2
;

1323 
PHY_LE32
 
	meq3
;

1325 
PHY_LE32
 
	meq_eye0
;

1326 
PHY_LE32
 
	meq_eye1
;

1327 
PHY_LE32
 
	meq_eye2
;

1328 
PHY_LE32
 
	meq_d„0
;

1330 
PHY_LE32
 
	meq_d„1
;

1331 
PHY_LE32
 
	meq_d„2
;

1332 
PHY_LE32
 
	meq_d„3
;

1333 
PHY_LE32
 
	mª£rve0
;

1335 
PHY_LE32
 
	mphyd_m⁄0
;

1336 
PHY_LE32
 
	mphyd_m⁄1
;

1337 
PHY_LE32
 
	mphyd_m⁄2
;

1338 
PHY_LE32
 
	mphyd_m⁄3
;

1340 
PHY_LE32
 
	mphyd_m⁄4
;

1341 
PHY_LE32
 
	mphyd_m⁄5
;

1342 
PHY_LE32
 
	mphyd_m⁄6
;

1343 
PHY_LE32
 
	mphyd_m⁄7
;

1345 
PHY_LE32
 
	mphya_rx_m⁄0
;

1346 
PHY_LE32
 
	mphya_rx_m⁄1
;

1347 
PHY_LE32
 
	mphya_rx_m⁄2
;

1348 
PHY_LE32
 
	mphya_rx_m⁄3
;

1350 
PHY_LE32
 
	mphya_rx_m⁄4
;

1351 
PHY_LE32
 
	mphya_rx_m⁄5
;

1352 
PHY_LE32
 
	mphyd_˝∑t2
;

1353 
PHY_LE32
 
	meq_eye3
;

1355 
PHY_LE32
 
	mkb™d_out
;

1356 
PHY_LE32
 
	mkb™d_out1
;

1360 
	#RG_SSUSB_P_P3_TX_NG
 (0x1<<31)

1361 
	#RG_SSUSB_TSEQ_EN
 (0x1<<30)

1362 
	#RG_SSUSB_TSEQ_POLEN
 (0x1<<29)

1363 
	#RG_SSUSB_TSEQ_POL
 (0x1<<28)

1364 
	#RG_SSUSB_P_P3_PCLK_NG
 (0x1<<27)

1365 
	#RG_SSUSB_TSEQ_TH
 (0x7<<24)

1366 
	#RG_SSUSB_PRBS_BERTH
 (0xff<<16)

1367 
	#RG_SSUSB_DISABLE_PHY_U2_ON
 (0x1<<15)

1368 
	#RG_SSUSB_DISABLE_PHY_U2_OFF
 (0x1<<14)

1369 
	#RG_SSUSB_PRBS_EN
 (0x1<<13)

1370 
	#RG_SSUSB_BPSLOCK
 (0x1<<12)

1371 
	#RG_SSUSB_RTCOMCNT
 (0xf<<8)

1372 
	#RG_SSUSB_COMCNT
 (0xf<<4)

1373 
	#RG_SSUSB_PRBSEL_CALIB
 (0xf<<0)

1374 

	)

1376 
	#RG_SSUSB_SLEEP_EN
 (0x1<<31)

1377 
	#RG_SSUSB_PRBSEL_PCS
 (0x7<<28)

1378 
	#RG_SSUSB_TXLFPS_PRD
 (0xf<<24)

1379 
	#RG_SSUSB_P_RX_P0S_CK
 (0x1<<23)

1380 
	#RG_SSUSB_P_TX_P0S_CK
 (0x1<<22)

1381 
	#RG_SSUSB_PDNCTL
 (0x3f<<16)

1382 
	#RG_SSUSB_TX_DRV_EN
 (0x1<<15)

1383 
	#RG_SSUSB_TX_DRV_SEL
 (0x1<<14)

1384 
	#RG_SSUSB_TX_DRV_DLY
 (0x3f<<8)

1385 
	#RG_SSUSB_BERT_EN
 (0x1<<7)

1386 
	#RG_SSUSB_SCP_TH
 (0x7<<4)

1387 
	#RG_SSUSB_SCP_EN
 (0x1<<3)

1388 
	#RG_SSUSB_RXANSIDEC_TEST
 (0x7<<0)

1389 

	)

1391 
	#RG_SSUSB_LFPS_PWD
 (0x1<<30)

1392 
	#RG_SSUSB_FORCE_LFPS_PWD
 (0x1<<29)

1393 
	#RG_SSUSB_RXLFPS_OVF
 (0x1f<<24)

1394 
	#RG_SSUSB_P3_ENTRY_SEL
 (0x1<<23)

1395 
	#RG_SSUSB_P3_ENTRY
 (0x1<<22)

1396 
	#RG_SSUSB_RXLFPS_CDRSEL
 (0x3<<20)

1397 
	#RG_SSUSB_RXLFPS_CDRTH
 (0xf<<16)

1398 
	#RG_SSUSB_LOCK5G_BLOCK
 (0x1<<15)

1399 
	#RG_SSUSB_TFIFO_EXT_D_SEL
 (0x1<<14)

1400 
	#RG_SSUSB_TFIFO_NO_EXTEND
 (0x1<<13)

1401 
	#RG_SSUSB_RXLFPS_LOB
 (0x1f<<8)

1402 
	#RG_SSUSB_TXLFPS_EN
 (0x1<<7)

1403 
	#RG_SSUSB_TXLFPS_SEL
 (0x1<<6)

1404 
	#RG_SSUSB_RXLFPS_CDRLOCK
 (0x1<<5)

1405 
	#RG_SSUSB_RXLFPS_UPB
 (0x1f<<0)

1406 

	)

1408 
	#RG_SSUSB_RX_IMP_BIAS
 (0xf<<28)

1409 
	#RG_SSUSB_TX_IMP_BIAS
 (0xf<<24)

1410 
	#RG_SSUSB_FWAKE_TH
 (0x3f<<16)

1411 
	#RG_SSUSB_RXLFPS_UDF
 (0x1f<<8)

1412 
	#RG_SSUSB_RXLFPS_P0IDLETH
 (0xff<<0)

1413 

	)

1415 
	#RG_SSUSB_FORCE_TX_IMPSEL
 (0x1<<31)

1416 
	#RG_SSUSB_TX_IMPCAL_EN
 (0x1<<30)

1417 
	#RG_SSUSB_FORCE_TX_IMPCAL_EN
 (0x1<<29)

1418 
	#RG_SSUSB_TX_IMPSEL
 (0x1f<<24)

1419 
	#RG_SSUSB_TX_IMPCAL_CALCYC
 (0x3f<<16)

1420 
	#RG_SSUSB_TX_IMPCAL_STBCYC
 (0x1f<<10)

1421 
	#RG_SSUSB_TX_IMPCAL_CYCCNT
 (0x3ff<<0)

1422 

	)

1424 
	#RG_SSUSB_FORCE_RX_IMPSEL
 (0x1<<31)

1425 
	#RG_SSUSB_RX_IMPCAL_EN
 (0x1<<30)

1426 
	#RG_SSUSB_FORCE_RX_IMPCAL_EN
 (0x1<<29)

1427 
	#RG_SSUSB_RX_IMPSEL
 (0x1f<<24)

1428 
	#RG_SSUSB_RX_IMPCAL_CALCYC
 (0x3f<<16)

1429 
	#RG_SSUSB_RX_IMPCAL_STBCYC
 (0x1f<<10)

1430 
	#RG_SSUSB_RX_IMPCAL_CYCCNT
 (0x3ff<<0)

1431 

	)

1433 
	#RG_SSUSB_TXPLL_DDSEN_CYC
 (0x1f<<27)

1434 
	#RG_SSUSB_TXPLL_ON
 (0x1<<26)

1435 
	#RG_SSUSB_FORCE_TXPLLON
 (0x1<<25)

1436 
	#RG_SSUSB_TXPLL_STBCYC
 (0x1ff<<16)

1437 
	#RG_SSUSB_TXPLL_NCPOCHG_CYC
 (0xf<<12)

1438 
	#RG_SSUSB_TXPLL_NCPOEN_CYC
 (0x3<<10)

1439 
	#RG_SSUSB_TXPLL_DDSRSTB_CYC
 (0x7<<0)

1440 

	)

1442 
	#RG_SSUSB_PLL_NCPO_EN
 (0x1<<31)

1443 
	#RG_SSUSB_PLL_FIFO_START_MAN
 (0x1<<30)

1444 
	#RG_SSUSB_PLL_NCPO_CHG
 (0x1<<28)

1445 
	#RG_SSUSB_PLL_DDS_RSTB
 (0x1<<27)

1446 
	#RG_SSUSB_PLL_DDS_PWDB
 (0x1<<26)

1447 
	#RG_SSUSB_PLL_DDSEN
 (0x1<<25)

1448 
	#RG_SSUSB_PLL_AUTOK_VCO
 (0x1<<24)

1449 
	#RG_SSUSB_PLL_PWD
 (0x1<<23)

1450 
	#RG_SSUSB_RX_AFE_PWD
 (0x1<<22)

1451 
	#RG_SSUSB_PLL_TCADJ
 (0x3f<<16)

1452 
	#RG_SSUSB_FORCE_CDR_TCADJ
 (0x1<<15)

1453 
	#RG_SSUSB_FORCE_CDR_AUTOK_VCO
 (0x1<<14)

1454 
	#RG_SSUSB_FORCE_CDR_PWD
 (0x1<<13)

1455 
	#RG_SSUSB_FORCE_PLL_NCPO_EN
 (0x1<<12)

1456 
	#RG_SSUSB_FORCE_PLL_FIFO_START_MAN
 (0x1<<11)

1457 
	#RG_SSUSB_FORCE_PLL_NCPO_CHG
 (0x1<<9)

1458 
	#RG_SSUSB_FORCE_PLL_DDS_RSTB
 (0x1<<8)

1459 
	#RG_SSUSB_FORCE_PLL_DDS_PWDB
 (0x1<<7)

1460 
	#RG_SSUSB_FORCE_PLL_DDSEN
 (0x1<<6)

1461 
	#RG_SSUSB_FORCE_PLL_TCADJ
 (0x1<<5)

1462 
	#RG_SSUSB_FORCE_PLL_AUTOK_VCO
 (0x1<<4)

1463 
	#RG_SSUSB_FORCE_PLL_PWD
 (0x1<<3)

1464 
	#RG_SSUSB_FLT_1_DISPERR_B
 (0x1<<2)

1465 

	)

1467 
	#RG_SSUSB_TX_LFPS_EN
 (0x1<<31)

1468 
	#RG_SSUSB_FORCE_TX_LFPS_EN
 (0x1<<30)

1469 
	#RG_SSUSB_TX_LFPS
 (0x1<<29)

1470 
	#RG_SSUSB_FORCE_TX_LFPS
 (0x1<<28)

1471 
	#RG_SSUSB_RXPLL_STB
 (0x1<<27)

1472 
	#RG_SSUSB_TXPLL_STB
 (0x1<<26)

1473 
	#RG_SSUSB_FORCE_RXPLL_STB
 (0x1<<25)

1474 
	#RG_SSUSB_FORCE_TXPLL_STB
 (0x1<<24)

1475 
	#RG_SSUSB_RXPLL_REFCKSEL
 (0x1<<16)

1476 
	#RG_SSUSB_RXPLL_STBMODE
 (0x1<<11)

1477 
	#RG_SSUSB_RXPLL_ON
 (0x1<<10)

1478 
	#RG_SSUSB_FORCE_RXPLLON
 (0x1<<9)

1479 
	#RG_SSUSB_FORCE_RX_AFE_PWD
 (0x1<<8)

1480 
	#RG_SSUSB_CDR_AUTOK_VCO
 (0x1<<7)

1481 
	#RG_SSUSB_CDR_PWD
 (0x1<<6)

1482 
	#RG_SSUSB_CDR_TCADJ
 (0x3f<<0)

1483 

	)

1485 
	#RG_SSUSB_RX_FL_TARGET
 (0xffff<<16)

1486 
	#RG_SSUSB_RX_FL_CYCLECNT
 (0xffff<<0)

1487 

	)

1489 
	#RG_SSUSB_RX_EQ_RST
 (0x1<<31)

1490 
	#RG_SSUSB_RX_EQ_RST_SEL
 (0x1<<30)

1491 
	#RG_SSUSB_RXVAL_RST
 (0x1<<29)

1492 
	#RG_SSUSB_RXVAL_CNT
 (0x1f<<24)

1493 
	#RG_SSUSB_CDROS_EN
 (0x1<<18)

1494 
	#RG_SSUSB_CDR_LCKOP
 (0x3<<16)

1495 
	#RG_SSUSB_RX_FL_LOCKTH
 (0xf<<8)

1496 
	#RG_SSUSB_RX_FL_OFFSET
 (0xff<<0)

1497 

	)

1499 
	#RG_SSUSB_T2RLB_BERTH
 (0xff<<24)

1500 
	#RG_SSUSB_T2RLB_PAT
 (0xff<<16)

1501 
	#RG_SSUSB_T2RLB_EN
 (0x1<<15)

1502 
	#RG_SSUSB_T2RLB_BPSCRAMB
 (0x1<<14)

1503 
	#RG_SSUSB_T2RLB_SERIAL
 (0x1<<13)

1504 
	#RG_SSUSB_T2RLB_MODE
 (0x3<<11)

1505 
	#RG_SSUSB_RX_SAOSC_EN
 (0x1<<10)

1506 
	#RG_SSUSB_RX_SAOSC_EN_SEL
 (0x1<<9)

1507 
	#RG_SSUSB_RX_DFE_OPTION
 (0x1<<8)

1508 
	#RG_SSUSB_RX_DFE_EN
 (0x1<<7)

1509 
	#RG_SSUSB_RX_DFE_EN_SEL
 (0x1<<6)

1510 
	#RG_SSUSB_RX_EQ_EN
 (0x1<<5)

1511 
	#RG_SSUSB_RX_EQ_EN_SEL
 (0x1<<4)

1512 
	#RG_SSUSB_RX_SAOSC_RST
 (0x1<<3)

1513 
	#RG_SSUSB_RX_SAOSC_RST_SEL
 (0x1<<2)

1514 
	#RG_SSUSB_RX_DFE_RST
 (0x1<<1)

1515 
	#RG_SSUSB_RX_DFE_RST_SEL
 (0x1<<0)

1516 

	)

1518 
	#RG_SSUSB_EQTRAIN_CH_MODE
 (0x1<<28)

1519 
	#RG_SSUSB_PRB_OUT_CPPAT
 (0x1<<27)

1520 
	#RG_SSUSB_BPANSIENC
 (0x1<<26)

1521 
	#RG_SSUSB_VALID_EN
 (0x1<<25)

1522 
	#RG_SSUSB_EBUF_SRST
 (0x1<<24)

1523 
	#RG_SSUSB_K_EMP
 (0xf<<20)

1524 
	#RG_SSUSB_K_FUL
 (0xf<<16)

1525 
	#RG_SSUSB_T2RLB_BDATRST
 (0xf<<12)

1526 
	#RG_SSUSB_P_T2RLB_SKP_EN
 (0x1<<10)

1527 
	#RG_SSUSB_T2RLB_PATMODE
 (0x3<<8)

1528 
	#RG_SSUSB_T2RLB_TSEQCNT
 (0xff<<0)

1529 

	)

1531 
	#RG_SSUSB_CPPAT_PROGRAM_EN
 (0x1<<24)

1532 
	#RG_SSUSB_CPPAT_TOZ
 (0x3<<21)

1533 
	#RG_SSUSB_CPPAT_PRBS_EN
 (0x1<<20)

1534 
	#RG_SSUSB_CPPAT_OUT_TMP2
 (0xf<<16)

1535 
	#RG_SSUSB_CPPAT_OUT_TMP1
 (0xff<<8)

1536 
	#RG_SSUSB_CPPAT_OUT_TMP0
 (0xff<<0)

1537 

	)

1539 
	#RG_SSUSB_CDR_TCADJ_MINUS
 (0x1<<31)

1540 
	#RG_SSUSB_P_CDROS_EN
 (0x1<<30)

1541 
	#RG_SSUSB_P_P2_TX_DRV_DIS
 (0x1<<28)

1542 
	#RG_SSUSB_CDR_TCADJ_OFFSET
 (0x7<<24)

1543 
	#RG_SSUSB_PLL_TCADJ_MINUS
 (0x1<<23)

1544 
	#RG_SSUSB_FORCE_PLL_BIAS_LPF_EN
 (0x1<<20)

1545 
	#RG_SSUSB_PLL_BIAS_LPF_EN
 (0x1<<19)

1546 
	#RG_SSUSB_PLL_TCADJ_OFFSET
 (0x7<<16)

1547 
	#RG_SSUSB_FORCE_PLL_SSCEN
 (0x1<<15)

1548 
	#RG_SSUSB_PLL_SSCEN
 (0x1<<14)

1549 
	#RG_SSUSB_FORCE_CDR_PI_PWD
 (0x1<<13)

1550 
	#RG_SSUSB_CDR_PI_PWD
 (0x1<<12)

1551 
	#RG_SSUSB_CDR_PI_MODE
 (0x1<<11)

1552 
	#RG_SSUSB_TXPLL_SSCEN_CYC
 (0x3ff<<0)

1553 

	)

1555 
	#RG_SSUSB_EBUFCTL
 (0xffffffff<<0)

1556 

	)

1558 
	#RG_SSUSB_RXTERMINATION
 (0x1<<30)

1559 
	#RG_SSUSB_RXEQTRAINING
 (0x1<<29)

1560 
	#RG_SSUSB_RXPOLARITY
 (0x1<<28)

1561 
	#RG_SSUSB_TXDEEMPH
 (0x3<<26)

1562 
	#RG_SSUSB_POWERDOWN
 (0x3<<24)

1563 
	#RG_SSUSB_TXONESZEROS
 (0x1<<23)

1564 
	#RG_SSUSB_TXELECIDLE
 (0x1<<22)

1565 
	#RG_SSUSB_TXDETECTRX
 (0x1<<21)

1566 
	#RG_SSUSB_PIPE_SEL
 (0x1<<20)

1567 
	#RG_SSUSB_TXDATAK
 (0xf<<16)

1568 
	#RG_SSUSB_CDR_STABLE_SEL
 (0x1<<15)

1569 
	#RG_SSUSB_CDR_STABLE
 (0x1<<14)

1570 
	#RG_SSUSB_CDR_RSTB_SEL
 (0x1<<13)

1571 
	#RG_SSUSB_CDR_RSTB
 (0x1<<12)

1572 
	#RG_SSUSB_P_ERROR_SEL
 (0x3<<4)

1573 
	#RG_SSUSB_TXMARGIN
 (0x7<<1)

1574 
	#RG_SSUSB_TXCOMPLIANCE
 (0x1<<0)

1575 

	)

1577 
	#RG_SSUSB_TXDATA
 (0xffffffff<<0)

1578 

	)

1580 
	#RG_SSUSB_CDROS_CNT
 (0x3f<<24)

1581 
	#RG_SSUSB_T2RLB_BER_EN
 (0x1<<16)

1582 
	#RG_SSUSB_T2RLB_BER_RATE
 (0xffff<<0)

1583 

	)

1585 
	#RG_SSUSB_RFIFO_IMPLAT
 (0x1<<27)

1586 
	#RG_SSUSB_TFIFO_PSEL
 (0x7<<24)

1587 
	#RG_SSUSB_CKGEN_PSEL
 (0x3<<8)

1588 
	#RG_SSUSB_RXCK_INV
 (0x1<<0)

1589 

	)

1591 
	#RG_SSUSB_PRB_SEL
 (0xffff<<16)

1592 
	#RG_SSUSB_RXPLL_STBCYC
 (0x7ff<<0)

1593 

	)

1595 
	#RG_SSUSB_PHYD_RESERVE
 (0xffffffff<<0)

1600 

	)

1602 
	#RG_SSUSB_CDR_BIC_LTR
 (0xf<<28)

1603 
	#RG_SSUSB_CDR_BIC_LTD0
 (0xf<<24)

1604 
	#RG_SSUSB_CDR_BC_LTD1
 (0x1f<<16)

1605 
	#RG_SSUSB_CDR_BC_LTR
 (0x1f<<8)

1606 
	#RG_SSUSB_CDR_BC_LTD0
 (0x1f<<0)

1607 

	)

1609 
	#RG_SSUSB_CDR_BIR_LTD1
 (0x1f<<24)

1610 
	#RG_SSUSB_CDR_BIR_LTR
 (0x1f<<16)

1611 
	#RG_SSUSB_CDR_BIR_LTD0
 (0x1f<<8)

1612 
	#RG_SSUSB_CDR_BW_SEL
 (0x3<<6)

1613 
	#RG_SSUSB_CDR_BIC_LTD1
 (0xf<<0)

1614 

	)

1616 
	#RG_SSUSB_FORCE_CDR_BAND_5G
 (0x1<<28)

1617 
	#RG_SSUSB_FORCE_CDR_BAND_2P5G
 (0x1<<27)

1618 
	#RG_SSUSB_FORCE_PLL_BAND_5G
 (0x1<<26)

1619 
	#RG_SSUSB_FORCE_PLL_BAND_2P5G
 (0x1<<25)

1620 
	#RG_SSUSB_P_EQ_T_SEL
 (0x3ff<<15)

1621 
	#RG_SSUSB_PLL_ISO_EN_CYC
 (0x3ff<<5)

1622 
	#RG_SSUSB_PLLBAND_RECAL
 (0x1<<4)

1623 
	#RG_SSUSB_PLL_DDS_ISO_EN
 (0x1<<3)

1624 
	#RG_SSUSB_FORCE_PLL_DDS_ISO_EN
 (0x1<<2)

1625 
	#RG_SSUSB_PLL_DDS_PWR_ON
 (0x1<<1)

1626 
	#RG_SSUSB_FORCE_PLL_DDS_PWR_ON
 (0x1<<0)

1627 

	)

1629 
	#RG_SSUSB_CDR_BAND_5G
 (0xff<<24)

1630 
	#RG_SSUSB_CDR_BAND_2P5G
 (0xff<<16)

1631 
	#RG_SSUSB_PLL_BAND_5G
 (0xff<<8)

1632 
	#RG_SSUSB_PLL_BAND_2P5G
 (0xff<<0)

1633 

	)

1635 
	#RG_SSUSB_P_BCN_OBS_PRD
 (0xffff<<16)

1636 
	#RG_SSUSB_U_BCN_OBS_PRD
 (0xffff<<0)

1637 

	)

1639 
	#RG_SSUSB_P_BCN_OBS_SEL
 (0xfff<<16)

1640 
	#RG_SSUSB_BCN_DET_DIS
 (0x1<<12)

1641 
	#RG_SSUSB_U_BCN_OBS_SEL
 (0xfff<<0)

1642 

	)

1644 
	#RG_SSUSB_EQ_DLHL_LFI
 (0x7f<<24)

1645 
	#RG_SSUSB_EQ_DHHL_LFI
 (0x7f<<16)

1646 
	#RG_SSUSB_EQ_DD0HOS_LFI
 (0x7f<<8)

1647 
	#RG_SSUSB_EQ_DD0LOS_LFI
 (0x7f<<0)

1648 

	)

1650 
	#RG_SSUSB_EQ_DD1HOS_LFI
 (0x7f<<24)

1651 
	#RG_SSUSB_EQ_DD1LOS_LFI
 (0x7f<<16)

1652 
	#RG_SSUSB_EQ_DE0OS_LFI
 (0x7f<<8)

1653 
	#RG_SSUSB_EQ_DE1OS_LFI
 (0x7f<<0)

1654 

	)

1656 
	#RG_SSUSB_EQ_DLHLOS_LFI
 (0x7f<<24)

1657 
	#RG_SSUSB_EQ_DHHLOS_LFI
 (0x7f<<16)

1658 
	#RG_SSUSB_EQ_STOPTIME
 (0x1<<14)

1659 
	#RG_SSUSB_EQ_DHHL_LF_SEL
 (0x7<<11)

1660 
	#RG_SSUSB_EQ_DSAOS_LF_SEL
 (0x7<<8)

1661 
	#RG_SSUSB_EQ_STARTTIME
 (0x3<<6)

1662 
	#RG_SSUSB_EQ_DLEQ_LF_SEL
 (0x7<<3)

1663 
	#RG_SSUSB_EQ_DLHL_LF_SEL
 (0x7<<0)

1664 

	)

1666 
	#RG_SSUSB_EQ_DLEQ_LFI_GEN2
 (0xf<<28)

1667 
	#RG_SSUSB_EQ_DLEQ_LFI_GEN1
 (0xf<<24)

1668 
	#RG_SSUSB_EQ_DEYE0OS_LFI
 (0x7f<<16)

1669 
	#RG_SSUSB_EQ_DEYE1OS_LFI
 (0x7f<<8)

1670 
	#RG_SSUSB_EQ_TRI_DET_EN
 (0x1<<7)

1671 
	#RG_SSUSB_EQ_TRI_DET_TH
 (0x7f<<0)

1672 

	)

1674 
	#RG_SSUSB_EQ_EYE_XOFFSET
 (0x7f<<25)

1675 
	#RG_SSUSB_EQ_EYE_MON_EN
 (0x1<<24)

1676 
	#RG_SSUSB_EQ_EYE0_Y
 (0x7f<<16)

1677 
	#RG_SSUSB_EQ_EYE1_Y
 (0x7f<<8)

1678 
	#RG_SSUSB_EQ_PILPO_ROUT
 (0x1<<7)

1679 
	#RG_SSUSB_EQ_PI_KPGAIN
 (0x7<<4)

1680 
	#RG_SSUSB_EQ_EYE_CNT_EN
 (0x1<<3)

1681 

	)

1683 
	#RG_SSUSB_EQ_SIGDET
 (0x7f<<24)

1684 
	#RG_SSUSB_EQ_EYE_MASK
 (0x3ff<<7)

1685 

	)

1687 
	#RG_SSUSB_EQ_RX500M_CK_SEL
 (0x1<<31)

1688 
	#RG_SSUSB_EQ_SD_CNT1
 (0x3f<<24)

1689 
	#RG_SSUSB_EQ_ISIFLAG_SEL
 (0x3<<22)

1690 
	#RG_SSUSB_EQ_SD_CNT0
 (0x3f<<16)

1691 

	)

1693 
	#RG_SSUSB_EQ_LEQMAX
 (0xf<<28)

1694 
	#RG_SSUSB_EQ_DFEX_EN
 (0x1<<27)

1695 
	#RG_SSUSB_EQ_DFEX_LF_SEL
 (0x7<<24)

1696 
	#RG_SSUSB_EQ_CHK_EYE_H
 (0x1<<23)

1697 
	#RG_SSUSB_EQ_PIEYE_INI
 (0x7f<<16)

1698 
	#RG_SSUSB_EQ_PI90_INI
 (0x7f<<8)

1699 
	#RG_SSUSB_EQ_PI0_INI
 (0x7f<<0)

1700 

	)

1702 
	#RG_SSUSB_EQ_REV
 (0xffff<<16)

1703 
	#RG_SSUSB_EQ_DFEYEN_DUR
 (0x7<<12)

1704 
	#RG_SSUSB_EQ_DFEXEN_DUR
 (0x7<<8)

1705 
	#RG_SSUSB_EQ_DFEX_RST
 (0x1<<7)

1706 
	#RG_SSUSB_EQ_GATED_RXD_B
 (0x1<<6)

1707 
	#RG_SSUSB_EQ_PI90CK_SEL
 (0x3<<4)

1708 
	#RG_SSUSB_EQ_DFEX_DIS
 (0x1<<2)

1709 
	#RG_SSUSB_EQ_DFEYEN_STOP_DIS
 (0x1<<1)

1710 
	#RG_SSUSB_EQ_DFEXEN_SEL
 (0x1<<0)

1711 

	)

1713 
	#RG_SSUSB_EQ_MON_SEL
 (0x1f<<24)

1714 
	#RG_SSUSB_EQ_LEQOSC_DLYCNT
 (0x7<<16)

1715 
	#RG_SSUSB_EQ_DLEQOS_LFI
 (0x1f<<8)

1716 
	#RG_SSUSB_EQ_LEQ_STOP_TO
 (0x3<<0)

1717 

	)

1719 
	#RG_SSUSB_EQ_RESERVED
 (0xffffffff<<0)

1720 

	)

1722 
	#RGS_SSUSB_BERT_BERC
 (0xffff<<16)

1723 
	#RGS_SSUSB_LFPS
 (0xf<<12)

1724 
	#RGS_SSUSB_TRAINDEC
 (0x7<<8)

1725 
	#RGS_SSUSB_SCP_PAT
 (0xff<<0)

1726 

	)

1728 
	#RGS_SSUSB_RX_FL_OUT
 (0xffff<<0)

1729 

	)

1731 
	#RGS_SSUSB_T2RLB_ERRCNT
 (0xffff<<16)

1732 
	#RGS_SSUSB_RETRACK
 (0xf<<12)

1733 
	#RGS_SSUSB_RXPLL_LOCK
 (0x1<<10)

1734 
	#RGS_SSUSB_CDR_VCOCAL_CPLT_D
 (0x1<<9)

1735 
	#RGS_SSUSB_PLL_VCOCAL_CPLT_D
 (0x1<<8)

1736 
	#RGS_SSUSB_PDNCTL
 (0xff<<0)

1737 

	)

1739 
	#RGS_SSUSB_TSEQ_ERRCNT
 (0xffff<<16)

1740 
	#RGS_SSUSB_PRBS_ERRCNT
 (0xffff<<0)

1741 

	)

1743 
	#RGS_SSUSB_RX_LSLOCK_CNT
 (0xf<<24)

1744 
	#RGS_SSUSB_SCP_DETCNT
 (0xff<<16)

1745 
	#RGS_SSUSB_TSEQ_DETCNT
 (0xffff<<0)

1746 

	)

1748 
	#RGS_SSUSB_EBUFMSG
 (0xffff<<16)

1749 
	#RGS_SSUSB_BERT_LOCK
 (0x1<<15)

1750 
	#RGS_SSUSB_SCP_DET
 (0x1<<14)

1751 
	#RGS_SSUSB_TSEQ_DET
 (0x1<<13)

1752 
	#RGS_SSUSB_EBUF_UDF
 (0x1<<12)

1753 
	#RGS_SSUSB_EBUF_OVF
 (0x1<<11)

1754 
	#RGS_SSUSB_PRBS_PASSTH
 (0x1<<10)

1755 
	#RGS_SSUSB_PRBS_PASS
 (0x1<<9)

1756 
	#RGS_SSUSB_PRBS_LOCK
 (0x1<<8)

1757 
	#RGS_SSUSB_T2RLB_ERR
 (0x1<<6)

1758 
	#RGS_SSUSB_T2RLB_PASSTH
 (0x1<<5)

1759 
	#RGS_SSUSB_T2RLB_PASS
 (0x1<<4)

1760 
	#RGS_SSUSB_T2RLB_LOCK
 (0x1<<3)

1761 
	#RGS_SSUSB_RX_IMPCAL_DONE
 (0x1<<2)

1762 
	#RGS_SSUSB_TX_IMPCAL_DONE
 (0x1<<1)

1763 
	#RGS_SSUSB_RXDETECTED
 (0x1<<0)

1764 

	)

1766 
	#RGS_SSUSB_SIGCAL_DONE
 (0x1<<30)

1767 
	#RGS_SSUSB_SIGCAL_CAL_OUT
 (0x1<<29)

1768 
	#RGS_SSUSB_SIGCAL_OFFSET
 (0x1f<<24)

1769 
	#RGS_SSUSB_RX_IMP_SEL
 (0x1f<<16)

1770 
	#RGS_SSUSB_TX_IMP_SEL
 (0x1f<<8)

1771 
	#RGS_SSUSB_TFIFO_MSG
 (0xf<<4)

1772 
	#RGS_SSUSB_RFIFO_MSG
 (0xf<<0)

1773 

	)

1775 
	#RGS_SSUSB_FT_OUT
 (0xff<<8)

1776 
	#RGS_SSUSB_PRB_OUT
 (0xff<<0)

1777 

	)

1779 
	#RGS_SSUSB_EQ_DCLEQ
 (0xf<<24)

1780 
	#RGS_SSUSB_EQ_DCD0H
 (0x7f<<16)

1781 
	#RGS_SSUSB_EQ_DCD0L
 (0x7f<<8)

1782 
	#RGS_SSUSB_EQ_DCD1H
 (0x7f<<0)

1783 

	)

1785 
	#RGS_SSUSB_EQ_DCD1L
 (0x7f<<24)

1786 
	#RGS_SSUSB_EQ_DCE0
 (0x7f<<16)

1787 
	#RGS_SSUSB_EQ_DCE1
 (0x7f<<8)

1788 
	#RGS_SSUSB_EQ_DCHHL
 (0x7f<<0)

1789 

	)

1791 
	#RGS_SSUSB_EQ_LEQ_STOP
 (0x1<<31)

1792 
	#RGS_SSUSB_EQ_DCLHL
 (0x7f<<24)

1793 
	#RGS_SSUSB_EQ_STATUS
 (0xff<<16)

1794 
	#RGS_SSUSB_EQ_DCEYE0
 (0x7f<<8)

1795 
	#RGS_SSUSB_EQ_DCEYE1
 (0x7f<<0)

1796 

	)

1798 
	#RGS_SSUSB_EQ_EYE_MONITOR_ERRCNT_0
 (0xfffff<<0)

1799 

	)

1801 
	#RGS_SSUSB_EQ_EYE_MONITOR_ERRCNT_1
 (0xfffff<<0)

1802 

	)

1804 
	#RGS_SSUSB_EQ_DCLEQOS
 (0x1f<<8)

1805 
	#RGS_SSUSB_EQ_EYE_CNT_RDY
 (0x1<<7)

1806 
	#RGS_SSUSB_EQ_PILPO
 (0x7f<<0)

1807 

	)

1809 
	#RG_SSUSB_CPPAT_OUT_H_TMP2
 (0xf<<16)

1810 
	#RG_SSUSB_CPPAT_OUT_H_TMP1
 (0xff<<8)

1811 
	#RG_SSUSB_CPPAT_OUT_H_TMP0
 (0xff<<0)

1812 

	)

1814 
	#RG_SSUSB_EQ_LEQ_SHIFT
 (0x7<<24)

1815 
	#RG_SSUSB_EQ_EYE_CNT
 (0xfffff<<0)

1816 

	)

1818 
	#RGS_SSUSB_CDR_BAND_5G
 (0xff<<24)

1819 
	#RGS_SSUSB_CDR_BAND_2P5G
 (0xff<<16)

1820 
	#RGS_SSUSB_PLL_BAND_5G
 (0xff<<8)

1821 
	#RGS_SSUSB_PLL_BAND_2P5G
 (0xff<<0)

1822 

	)

1824 
	#RGS_SSUSB_CDR_VCOCAL_FAIL
 (0x1<<24)

1825 
	#RGS_SSUSB_CDR_VCOCAL_STATE
 (0xff<<16)

1826 
	#RGS_SSUSB_PLL_VCOCAL_FAIL
 (0x1<<8)

1827 
	#RGS_SSUSB_PLL_VCOCAL_STATE
 (0xff<<0)

1828 

	)

1833 
	#RG_SSUSB_P_P3_TX_NG_OFST
 (31)

	)

1834 
	#RG_SSUSB_TSEQ_EN_OFST
 (30)

	)

1835 
	#RG_SSUSB_TSEQ_POLEN_OFST
 (29)

	)

1836 
	#RG_SSUSB_TSEQ_POL_OFST
 (28)

	)

1837 
	#RG_SSUSB_P_P3_PCLK_NG_OFST
 (27)

	)

1838 
	#RG_SSUSB_TSEQ_TH_OFST
 (24)

	)

1839 
	#RG_SSUSB_PRBS_BERTH_OFST
 (16)

	)

1840 
	#RG_SSUSB_DISABLE_PHY_U2_ON_OFST
 (15)

	)

1841 
	#RG_SSUSB_DISABLE_PHY_U2_OFF_OFST
 (14)

	)

1842 
	#RG_SSUSB_PRBS_EN_OFST
 (13)

	)

1843 
	#RG_SSUSB_BPSLOCK_OFST
 (12)

	)

1844 
	#RG_SSUSB_RTCOMCNT_OFST
 (8)

	)

1845 
	#RG_SSUSB_COMCNT_OFST
 (4)

	)

1846 
	#RG_SSUSB_PRBSEL_CALIB_OFST
 (0)

	)

1849 
	#RG_SSUSB_SLEEP_EN_OFST
 (31)

	)

1850 
	#RG_SSUSB_PRBSEL_PCS_OFST
 (28)

	)

1851 
	#RG_SSUSB_TXLFPS_PRD_OFST
 (24)

	)

1852 
	#RG_SSUSB_P_RX_P0S_CK_OFST
 (23)

	)

1853 
	#RG_SSUSB_P_TX_P0S_CK_OFST
 (22)

	)

1854 
	#RG_SSUSB_PDNCTL_OFST
 (16)

	)

1855 
	#RG_SSUSB_TX_DRV_EN_OFST
 (15)

	)

1856 
	#RG_SSUSB_TX_DRV_SEL_OFST
 (14)

	)

1857 
	#RG_SSUSB_TX_DRV_DLY_OFST
 (8)

	)

1858 
	#RG_SSUSB_BERT_EN_OFST
 (7)

	)

1859 
	#RG_SSUSB_SCP_TH_OFST
 (4)

	)

1860 
	#RG_SSUSB_SCP_EN_OFST
 (3)

	)

1861 
	#RG_SSUSB_RXANSIDEC_TEST_OFST
 (0)

	)

1864 
	#RG_SSUSB_LFPS_PWD_OFST
 (30)

	)

1865 
	#RG_SSUSB_FORCE_LFPS_PWD_OFST
 (29)

	)

1866 
	#RG_SSUSB_RXLFPS_OVF_OFST
 (24)

	)

1867 
	#RG_SSUSB_P3_ENTRY_SEL_OFST
 (23)

	)

1868 
	#RG_SSUSB_P3_ENTRY_OFST
 (22)

	)

1869 
	#RG_SSUSB_RXLFPS_CDRSEL_OFST
 (20)

	)

1870 
	#RG_SSUSB_RXLFPS_CDRTH_OFST
 (16)

	)

1871 
	#RG_SSUSB_LOCK5G_BLOCK_OFST
 (15)

	)

1872 
	#RG_SSUSB_TFIFO_EXT_D_SEL_OFST
 (14)

	)

1873 
	#RG_SSUSB_TFIFO_NO_EXTEND_OFST
 (13)

	)

1874 
	#RG_SSUSB_RXLFPS_LOB_OFST
 (8)

	)

1875 
	#RG_SSUSB_TXLFPS_EN_OFST
 (7)

	)

1876 
	#RG_SSUSB_TXLFPS_SEL_OFST
 (6)

	)

1877 
	#RG_SSUSB_RXLFPS_CDRLOCK_OFST
 (5)

	)

1878 
	#RG_SSUSB_RXLFPS_UPB_OFST
 (0)

	)

1881 
	#RG_SSUSB_RX_IMP_BIAS_OFST
 (28)

	)

1882 
	#RG_SSUSB_TX_IMP_BIAS_OFST
 (24)

	)

1883 
	#RG_SSUSB_FWAKE_TH_OFST
 (16)

	)

1884 
	#RG_SSUSB_RXLFPS_UDF_OFST
 (8)

	)

1885 
	#RG_SSUSB_RXLFPS_P0IDLETH_OFST
 (0)

	)

1888 
	#RG_SSUSB_FORCE_TX_IMPSEL_OFST
 (31)

	)

1889 
	#RG_SSUSB_TX_IMPCAL_EN_OFST
 (30)

	)

1890 
	#RG_SSUSB_FORCE_TX_IMPCAL_EN_OFST
 (29)

	)

1891 
	#RG_SSUSB_TX_IMPSEL_OFST
 (24)

	)

1892 
	#RG_SSUSB_TX_IMPCAL_CALCYC_OFST
 (16)

	)

1893 
	#RG_SSUSB_TX_IMPCAL_STBCYC_OFST
 (10)

	)

1894 
	#RG_SSUSB_TX_IMPCAL_CYCCNT_OFST
 (0)

	)

1897 
	#RG_SSUSB_FORCE_RX_IMPSEL_OFST
 (31)

	)

1898 
	#RG_SSUSB_RX_IMPCAL_EN_OFST
 (30)

	)

1899 
	#RG_SSUSB_FORCE_RX_IMPCAL_EN_OFST
 (29)

	)

1900 
	#RG_SSUSB_RX_IMPSEL_OFST
 (24)

	)

1901 
	#RG_SSUSB_RX_IMPCAL_CALCYC_OFST
 (16)

	)

1902 
	#RG_SSUSB_RX_IMPCAL_STBCYC_OFST
 (10)

	)

1903 
	#RG_SSUSB_RX_IMPCAL_CYCCNT_OFST
 (0)

	)

1906 
	#RG_SSUSB_TXPLL_DDSEN_CYC_OFST
 (27)

	)

1907 
	#RG_SSUSB_TXPLL_ON_OFST
 (26)

	)

1908 
	#RG_SSUSB_FORCE_TXPLLON_OFST
 (25)

	)

1909 
	#RG_SSUSB_TXPLL_STBCYC_OFST
 (16)

	)

1910 
	#RG_SSUSB_TXPLL_NCPOCHG_CYC_OFST
 (12)

	)

1911 
	#RG_SSUSB_TXPLL_NCPOEN_CYC_OFST
 (10)

	)

1912 
	#RG_SSUSB_TXPLL_DDSRSTB_CYC_OFST
 (0)

	)

1915 
	#RG_SSUSB_PLL_NCPO_EN_OFST
 (31)

	)

1916 
	#RG_SSUSB_PLL_FIFO_START_MAN_OFST
 (30)

	)

1917 
	#RG_SSUSB_PLL_NCPO_CHG_OFST
 (28)

	)

1918 
	#RG_SSUSB_PLL_DDS_RSTB_OFST
 (27)

	)

1919 
	#RG_SSUSB_PLL_DDS_PWDB_OFST
 (26)

	)

1920 
	#RG_SSUSB_PLL_DDSEN_OFST
 (25)

	)

1921 
	#RG_SSUSB_PLL_AUTOK_VCO_OFST
 (24)

	)

1922 
	#RG_SSUSB_PLL_PWD_OFST
 (23)

	)

1923 
	#RG_SSUSB_RX_AFE_PWD_OFST
 (22)

	)

1924 
	#RG_SSUSB_PLL_TCADJ_OFST
 (16)

	)

1925 
	#RG_SSUSB_FORCE_CDR_TCADJ_OFST
 (15)

	)

1926 
	#RG_SSUSB_FORCE_CDR_AUTOK_VCO_OFST
 (14)

	)

1927 
	#RG_SSUSB_FORCE_CDR_PWD_OFST
 (13)

	)

1928 
	#RG_SSUSB_FORCE_PLL_NCPO_EN_OFST
 (12)

	)

1929 
	#RG_SSUSB_FORCE_PLL_FIFO_START_MAN_OFST
 (11)

	)

1930 
	#RG_SSUSB_FORCE_PLL_NCPO_CHG_OFST
 (9)

	)

1931 
	#RG_SSUSB_FORCE_PLL_DDS_RSTB_OFST
 (8)

	)

1932 
	#RG_SSUSB_FORCE_PLL_DDS_PWDB_OFST
 (7)

	)

1933 
	#RG_SSUSB_FORCE_PLL_DDSEN_OFST
 (6)

	)

1934 
	#RG_SSUSB_FORCE_PLL_TCADJ_OFST
 (5)

	)

1935 
	#RG_SSUSB_FORCE_PLL_AUTOK_VCO_OFST
 (4)

	)

1936 
	#RG_SSUSB_FORCE_PLL_PWD_OFST
 (3)

	)

1937 
	#RG_SSUSB_FLT_1_DISPERR_B_OFST
 (2)

	)

1940 
	#RG_SSUSB_TX_LFPS_EN_OFST
 (31)

	)

1941 
	#RG_SSUSB_FORCE_TX_LFPS_EN_OFST
 (30)

	)

1942 
	#RG_SSUSB_TX_LFPS_OFST
 (29)

	)

1943 
	#RG_SSUSB_FORCE_TX_LFPS_OFST
 (28)

	)

1944 
	#RG_SSUSB_RXPLL_STB_OFST
 (27)

	)

1945 
	#RG_SSUSB_TXPLL_STB_OFST
 (26)

	)

1946 
	#RG_SSUSB_FORCE_RXPLL_STB_OFST
 (25)

	)

1947 
	#RG_SSUSB_FORCE_TXPLL_STB_OFST
 (24)

	)

1948 
	#RG_SSUSB_RXPLL_REFCKSEL_OFST
 (16)

	)

1949 
	#RG_SSUSB_RXPLL_STBMODE_OFST
 (11)

	)

1950 
	#RG_SSUSB_RXPLL_ON_OFST
 (10)

	)

1951 
	#RG_SSUSB_FORCE_RXPLLON_OFST
 (9)

	)

1952 
	#RG_SSUSB_FORCE_RX_AFE_PWD_OFST
 (8)

	)

1953 
	#RG_SSUSB_CDR_AUTOK_VCO_OFST
 (7)

	)

1954 
	#RG_SSUSB_CDR_PWD_OFST
 (6)

	)

1955 
	#RG_SSUSB_CDR_TCADJ_OFST
 (0)

	)

1958 
	#RG_SSUSB_RX_FL_TARGET_OFST
 (16)

	)

1959 
	#RG_SSUSB_RX_FL_CYCLECNT_OFST
 (0)

	)

1962 
	#RG_SSUSB_RX_EQ_RST_OFST
 (31)

	)

1963 
	#RG_SSUSB_RX_EQ_RST_SEL_OFST
 (30)

	)

1964 
	#RG_SSUSB_RXVAL_RST_OFST
 (29)

	)

1965 
	#RG_SSUSB_RXVAL_CNT_OFST
 (24)

	)

1966 
	#RG_SSUSB_CDROS_EN_OFST
 (18)

	)

1967 
	#RG_SSUSB_CDR_LCKOP_OFST
 (16)

	)

1968 
	#RG_SSUSB_RX_FL_LOCKTH_OFST
 (8)

	)

1969 
	#RG_SSUSB_RX_FL_OFFSET_OFST
 (0)

	)

1972 
	#RG_SSUSB_T2RLB_BERTH_OFST
 (24)

	)

1973 
	#RG_SSUSB_T2RLB_PAT_OFST
 (16)

	)

1974 
	#RG_SSUSB_T2RLB_EN_OFST
 (15)

	)

1975 
	#RG_SSUSB_T2RLB_BPSCRAMB_OFST
 (14)

	)

1976 
	#RG_SSUSB_T2RLB_SERIAL_OFST
 (13)

	)

1977 
	#RG_SSUSB_T2RLB_MODE_OFST
 (11)

	)

1978 
	#RG_SSUSB_RX_SAOSC_EN_OFST
 (10)

	)

1979 
	#RG_SSUSB_RX_SAOSC_EN_SEL_OFST
 (9)

	)

1980 
	#RG_SSUSB_RX_DFE_OPTION_OFST
 (8)

	)

1981 
	#RG_SSUSB_RX_DFE_EN_OFST
 (7)

	)

1982 
	#RG_SSUSB_RX_DFE_EN_SEL_OFST
 (6)

	)

1983 
	#RG_SSUSB_RX_EQ_EN_OFST
 (5)

	)

1984 
	#RG_SSUSB_RX_EQ_EN_SEL_OFST
 (4)

	)

1985 
	#RG_SSUSB_RX_SAOSC_RST_OFST
 (3)

	)

1986 
	#RG_SSUSB_RX_SAOSC_RST_SEL_OFST
 (2)

	)

1987 
	#RG_SSUSB_RX_DFE_RST_OFST
 (1)

	)

1988 
	#RG_SSUSB_RX_DFE_RST_SEL_OFST
 (0)

	)

1991 
	#RG_SSUSB_EQTRAIN_CH_MODE_OFST
 (28)

	)

1992 
	#RG_SSUSB_PRB_OUT_CPPAT_OFST
 (27)

	)

1993 
	#RG_SSUSB_BPANSIENC_OFST
 (26)

	)

1994 
	#RG_SSUSB_VALID_EN_OFST
 (25)

	)

1995 
	#RG_SSUSB_EBUF_SRST_OFST
 (24)

	)

1996 
	#RG_SSUSB_K_EMP_OFST
 (20)

	)

1997 
	#RG_SSUSB_K_FUL_OFST
 (16)

	)

1998 
	#RG_SSUSB_T2RLB_BDATRST_OFST
 (12)

	)

1999 
	#RG_SSUSB_P_T2RLB_SKP_EN_OFST
 (10)

	)

2000 
	#RG_SSUSB_T2RLB_PATMODE_OFST
 (8)

	)

2001 
	#RG_SSUSB_T2RLB_TSEQCNT_OFST
 (0)

	)

2004 
	#RG_SSUSB_CPPAT_PROGRAM_EN_OFST
 (24)

	)

2005 
	#RG_SSUSB_CPPAT_TOZ_OFST
 (21)

	)

2006 
	#RG_SSUSB_CPPAT_PRBS_EN_OFST
 (20)

	)

2007 
	#RG_SSUSB_CPPAT_OUT_TMP2_OFST
 (16)

	)

2008 
	#RG_SSUSB_CPPAT_OUT_TMP1_OFST
 (8)

	)

2009 
	#RG_SSUSB_CPPAT_OUT_TMP0_OFST
 (0)

	)

2012 
	#RG_SSUSB_CDR_TCADJ_MINUS_OFST
 (31)

	)

2013 
	#RG_SSUSB_P_CDROS_EN_OFST
 (30)

	)

2014 
	#RG_SSUSB_P_P2_TX_DRV_DIS_OFST
 (28)

	)

2015 
	#RG_SSUSB_CDR_TCADJ_OFFSET_OFST
 (24)

	)

2016 
	#RG_SSUSB_PLL_TCADJ_MINUS_OFST
 (23)

	)

2017 
	#RG_SSUSB_FORCE_PLL_BIAS_LPF_EN_OFST
 (20)

	)

2018 
	#RG_SSUSB_PLL_BIAS_LPF_EN_OFST
 (19)

	)

2019 
	#RG_SSUSB_PLL_TCADJ_OFFSET_OFST
 (16)

	)

2020 
	#RG_SSUSB_FORCE_PLL_SSCEN_OFST
 (15)

	)

2021 
	#RG_SSUSB_PLL_SSCEN_OFST
 (14)

	)

2022 
	#RG_SSUSB_FORCE_CDR_PI_PWD_OFST
 (13)

	)

2023 
	#RG_SSUSB_CDR_PI_PWD_OFST
 (12)

	)

2024 
	#RG_SSUSB_CDR_PI_MODE_OFST
 (11)

	)

2025 
	#RG_SSUSB_TXPLL_SSCEN_CYC_OFST
 (0)

	)

2028 
	#RG_SSUSB_EBUFCTL_OFST
 (0)

	)

2031 
	#RG_SSUSB_RXTERMINATION_OFST
 (30)

	)

2032 
	#RG_SSUSB_RXEQTRAINING_OFST
 (29)

	)

2033 
	#RG_SSUSB_RXPOLARITY_OFST
 (28)

	)

2034 
	#RG_SSUSB_TXDEEMPH_OFST
 (26)

	)

2035 
	#RG_SSUSB_POWERDOWN_OFST
 (24)

	)

2036 
	#RG_SSUSB_TXONESZEROS_OFST
 (23)

	)

2037 
	#RG_SSUSB_TXELECIDLE_OFST
 (22)

	)

2038 
	#RG_SSUSB_TXDETECTRX_OFST
 (21)

	)

2039 
	#RG_SSUSB_PIPE_SEL_OFST
 (20)

	)

2040 
	#RG_SSUSB_TXDATAK_OFST
 (16)

	)

2041 
	#RG_SSUSB_CDR_STABLE_SEL_OFST
 (15)

	)

2042 
	#RG_SSUSB_CDR_STABLE_OFST
 (14)

	)

2043 
	#RG_SSUSB_CDR_RSTB_SEL_OFST
 (13)

	)

2044 
	#RG_SSUSB_CDR_RSTB_OFST
 (12)

	)

2045 
	#RG_SSUSB_P_ERROR_SEL_OFST
 (4)

	)

2046 
	#RG_SSUSB_TXMARGIN_OFST
 (1)

	)

2047 
	#RG_SSUSB_TXCOMPLIANCE_OFST
 (0)

	)

2050 
	#RG_SSUSB_TXDATA_OFST
 (0)

	)

2053 
	#RG_SSUSB_CDROS_CNT_OFST
 (24)

	)

2054 
	#RG_SSUSB_T2RLB_BER_EN_OFST
 (16)

	)

2055 
	#RG_SSUSB_T2RLB_BER_RATE_OFST
 (0)

	)

2058 
	#RG_SSUSB_RFIFO_IMPLAT_OFST
 (27)

	)

2059 
	#RG_SSUSB_TFIFO_PSEL_OFST
 (24)

	)

2060 
	#RG_SSUSB_CKGEN_PSEL_OFST
 (8)

	)

2061 
	#RG_SSUSB_RXCK_INV_OFST
 (0)

	)

2064 
	#RG_SSUSB_PRB_SEL_OFST
 (16)

	)

2065 
	#RG_SSUSB_RXPLL_STBCYC_OFST
 (0)

	)

2068 
	#RG_SSUSB_PHYD_RESERVE_OFST
 (0)

	)

2075 
	#RG_SSUSB_CDR_BIC_LTR_OFST
 (28)

	)

2076 
	#RG_SSUSB_CDR_BIC_LTD0_OFST
 (24)

	)

2077 
	#RG_SSUSB_CDR_BC_LTD1_OFST
 (16)

	)

2078 
	#RG_SSUSB_CDR_BC_LTR_OFST
 (8)

	)

2079 
	#RG_SSUSB_CDR_BC_LTD0_OFST
 (0)

	)

2082 
	#RG_SSUSB_CDR_BIR_LTD1_OFST
 (24)

	)

2083 
	#RG_SSUSB_CDR_BIR_LTR_OFST
 (16)

	)

2084 
	#RG_SSUSB_CDR_BIR_LTD0_OFST
 (8)

	)

2085 
	#RG_SSUSB_CDR_BW_SEL_OFST
 (6)

	)

2086 
	#RG_SSUSB_CDR_BIC_LTD1_OFST
 (0)

	)

2089 
	#RG_SSUSB_FORCE_CDR_BAND_5G_OFST
 (28)

	)

2090 
	#RG_SSUSB_FORCE_CDR_BAND_2P5G_OFST
 (27)

	)

2091 
	#RG_SSUSB_FORCE_PLL_BAND_5G_OFST
 (26)

	)

2092 
	#RG_SSUSB_FORCE_PLL_BAND_2P5G_OFST
 (25)

	)

2093 
	#RG_SSUSB_P_EQ_T_SEL_OFST
 (15)

	)

2094 
	#RG_SSUSB_PLL_ISO_EN_CYC_OFST
 (5)

	)

2095 
	#RG_SSUSB_PLLBAND_RECAL_OFST
 (4)

	)

2096 
	#RG_SSUSB_PLL_DDS_ISO_EN_OFST
 (3)

	)

2097 
	#RG_SSUSB_FORCE_PLL_DDS_ISO_EN_OFST
 (2)

	)

2098 
	#RG_SSUSB_PLL_DDS_PWR_ON_OFST
 (1)

	)

2099 
	#RG_SSUSB_FORCE_PLL_DDS_PWR_ON_OFST
 (0)

	)

2102 
	#RG_SSUSB_CDR_BAND_5G_OFST
 (24)

	)

2103 
	#RG_SSUSB_CDR_BAND_2P5G_OFST
 (16)

	)

2104 
	#RG_SSUSB_PLL_BAND_5G_OFST
 (8)

	)

2105 
	#RG_SSUSB_PLL_BAND_2P5G_OFST
 (0)

	)

2108 
	#RG_SSUSB_P_BCN_OBS_PRD_OFST
 (16)

	)

2109 
	#RG_SSUSB_U_BCN_OBS_PRD_OFST
 (0)

	)

2112 
	#RG_SSUSB_P_BCN_OBS_SEL_OFST
 (16)

	)

2113 
	#RG_SSUSB_BCN_DET_DIS_OFST
 (12)

	)

2114 
	#RG_SSUSB_U_BCN_OBS_SEL_OFST
 (0)

	)

2117 
	#RG_SSUSB_EQ_DLHL_LFI_OFST
 (24)

	)

2118 
	#RG_SSUSB_EQ_DHHL_LFI_OFST
 (16)

	)

2119 
	#RG_SSUSB_EQ_DD0HOS_LFI_OFST
 (8)

	)

2120 
	#RG_SSUSB_EQ_DD0LOS_LFI_OFST
 (0)

	)

2123 
	#RG_SSUSB_EQ_DD1HOS_LFI_OFST
 (24)

	)

2124 
	#RG_SSUSB_EQ_DD1LOS_LFI_OFST
 (16)

	)

2125 
	#RG_SSUSB_EQ_DE0OS_LFI_OFST
 (8)

	)

2126 
	#RG_SSUSB_EQ_DE1OS_LFI_OFST
 (0)

	)

2129 
	#RG_SSUSB_EQ_DLHLOS_LFI_OFST
 (24)

	)

2130 
	#RG_SSUSB_EQ_DHHLOS_LFI_OFST
 (16)

	)

2131 
	#RG_SSUSB_EQ_STOPTIME_OFST
 (14)

	)

2132 
	#RG_SSUSB_EQ_DHHL_LF_SEL_OFST
 (11)

	)

2133 
	#RG_SSUSB_EQ_DSAOS_LF_SEL_OFST
 (8)

	)

2134 
	#RG_SSUSB_EQ_STARTTIME_OFST
 (6)

	)

2135 
	#RG_SSUSB_EQ_DLEQ_LF_SEL_OFST
 (3)

	)

2136 
	#RG_SSUSB_EQ_DLHL_LF_SEL_OFST
 (0)

	)

2139 
	#RG_SSUSB_EQ_DLEQ_LFI_GEN2_OFST
 (28)

	)

2140 
	#RG_SSUSB_EQ_DLEQ_LFI_GEN1_OFST
 (24)

	)

2141 
	#RG_SSUSB_EQ_DEYE0OS_LFI_OFST
 (16)

	)

2142 
	#RG_SSUSB_EQ_DEYE1OS_LFI_OFST
 (8)

	)

2143 
	#RG_SSUSB_EQ_TRI_DET_EN_OFST
 (7)

	)

2144 
	#RG_SSUSB_EQ_TRI_DET_TH_OFST
 (0)

	)

2147 
	#RG_SSUSB_EQ_EYE_XOFFSET_OFST
 (25)

	)

2148 
	#RG_SSUSB_EQ_EYE_MON_EN_OFST
 (24)

	)

2149 
	#RG_SSUSB_EQ_EYE0_Y_OFST
 (16)

	)

2150 
	#RG_SSUSB_EQ_EYE1_Y_OFST
 (8)

	)

2151 
	#RG_SSUSB_EQ_PILPO_ROUT_OFST
 (7)

	)

2152 
	#RG_SSUSB_EQ_PI_KPGAIN_OFST
 (4)

	)

2153 
	#RG_SSUSB_EQ_EYE_CNT_EN_OFST
 (3)

	)

2156 
	#RG_SSUSB_EQ_SIGDET_OFST
 (24)

	)

2157 
	#RG_SSUSB_EQ_EYE_MASK_OFST
 (7)

	)

2160 
	#RG_SSUSB_EQ_RX500M_CK_SEL_OFST
 (31)

	)

2161 
	#RG_SSUSB_EQ_SD_CNT1_OFST
 (24)

	)

2162 
	#RG_SSUSB_EQ_ISIFLAG_SEL_OFST
 (22)

	)

2163 
	#RG_SSUSB_EQ_SD_CNT0_OFST
 (16)

	)

2166 
	#RG_SSUSB_EQ_LEQMAX_OFST
 (28)

	)

2167 
	#RG_SSUSB_EQ_DFEX_EN_OFST
 (27)

	)

2168 
	#RG_SSUSB_EQ_DFEX_LF_SEL_OFST
 (24)

	)

2169 
	#RG_SSUSB_EQ_CHK_EYE_H_OFST
 (23)

	)

2170 
	#RG_SSUSB_EQ_PIEYE_INI_OFST
 (16)

	)

2171 
	#RG_SSUSB_EQ_PI90_INI_OFST
 (8)

	)

2172 
	#RG_SSUSB_EQ_PI0_INI_OFST
 (0)

	)

2175 
	#RG_SSUSB_EQ_REV_OFST
 (16)

	)

2176 
	#RG_SSUSB_EQ_DFEYEN_DUR_OFST
 (12)

	)

2177 
	#RG_SSUSB_EQ_DFEXEN_DUR_OFST
 (8)

	)

2178 
	#RG_SSUSB_EQ_DFEX_RST_OFST
 (7)

	)

2179 
	#RG_SSUSB_EQ_GATED_RXD_B_OFST
 (6)

	)

2180 
	#RG_SSUSB_EQ_PI90CK_SEL_OFST
 (4)

	)

2181 
	#RG_SSUSB_EQ_DFEX_DIS_OFST
 (2)

	)

2182 
	#RG_SSUSB_EQ_DFEYEN_STOP_DIS_OFST
 (1)

	)

2183 
	#RG_SSUSB_EQ_DFEXEN_SEL_OFST
 (0)

	)

2186 
	#RG_SSUSB_EQ_MON_SEL_OFST
 (24)

	)

2187 
	#RG_SSUSB_EQ_LEQOSC_DLYCNT_OFST
 (16)

	)

2188 
	#RG_SSUSB_EQ_DLEQOS_LFI_OFST
 (8)

	)

2189 
	#RG_SSUSB_EQ_LEQ_STOP_TO_OFST
 (0)

	)

2192 
	#RG_SSUSB_EQ_RESERVED_OFST
 (0)

	)

2195 
	#RGS_SSUSB_BERT_BERC_OFST
 (16)

	)

2196 
	#RGS_SSUSB_LFPS_OFST
 (12)

	)

2197 
	#RGS_SSUSB_TRAINDEC_OFST
 (8)

	)

2198 
	#RGS_SSUSB_SCP_PAT_OFST
 (0)

	)

2201 
	#RGS_SSUSB_RX_FL_OUT_OFST
 (0)

	)

2204 
	#RGS_SSUSB_T2RLB_ERRCNT_OFST
 (16)

	)

2205 
	#RGS_SSUSB_RETRACK_OFST
 (12)

	)

2206 
	#RGS_SSUSB_RXPLL_LOCK_OFST
 (10)

	)

2207 
	#RGS_SSUSB_CDR_VCOCAL_CPLT_D_OFST
 (9)

	)

2208 
	#RGS_SSUSB_PLL_VCOCAL_CPLT_D_OFST
 (8)

	)

2209 
	#RGS_SSUSB_PDNCTL_OFST
 (0)

	)

2212 
	#RGS_SSUSB_TSEQ_ERRCNT_OFST
 (16)

	)

2213 
	#RGS_SSUSB_PRBS_ERRCNT_OFST
 (0)

	)

2216 
	#RGS_SSUSB_RX_LSLOCK_CNT_OFST
 (24)

	)

2217 
	#RGS_SSUSB_SCP_DETCNT_OFST
 (16)

	)

2218 
	#RGS_SSUSB_TSEQ_DETCNT_OFST
 (0)

	)

2221 
	#RGS_SSUSB_EBUFMSG_OFST
 (16)

	)

2222 
	#RGS_SSUSB_BERT_LOCK_OFST
 (15)

	)

2223 
	#RGS_SSUSB_SCP_DET_OFST
 (14)

	)

2224 
	#RGS_SSUSB_TSEQ_DET_OFST
 (13)

	)

2225 
	#RGS_SSUSB_EBUF_UDF_OFST
 (12)

	)

2226 
	#RGS_SSUSB_EBUF_OVF_OFST
 (11)

	)

2227 
	#RGS_SSUSB_PRBS_PASSTH_OFST
 (10)

	)

2228 
	#RGS_SSUSB_PRBS_PASS_OFST
 (9)

	)

2229 
	#RGS_SSUSB_PRBS_LOCK_OFST
 (8)

	)

2230 
	#RGS_SSUSB_T2RLB_ERR_OFST
 (6)

	)

2231 
	#RGS_SSUSB_T2RLB_PASSTH_OFST
 (5)

	)

2232 
	#RGS_SSUSB_T2RLB_PASS_OFST
 (4)

	)

2233 
	#RGS_SSUSB_T2RLB_LOCK_OFST
 (3)

	)

2234 
	#RGS_SSUSB_RX_IMPCAL_DONE_OFST
 (2)

	)

2235 
	#RGS_SSUSB_TX_IMPCAL_DONE_OFST
 (1)

	)

2236 
	#RGS_SSUSB_RXDETECTED_OFST
 (0)

	)

2239 
	#RGS_SSUSB_SIGCAL_DONE_OFST
 (30)

	)

2240 
	#RGS_SSUSB_SIGCAL_CAL_OUT_OFST
 (29)

	)

2241 
	#RGS_SSUSB_SIGCAL_OFFSET_OFST
 (24)

	)

2242 
	#RGS_SSUSB_RX_IMP_SEL_OFST
 (16)

	)

2243 
	#RGS_SSUSB_TX_IMP_SEL_OFST
 (8)

	)

2244 
	#RGS_SSUSB_TFIFO_MSG_OFST
 (4)

	)

2245 
	#RGS_SSUSB_RFIFO_MSG_OFST
 (0)

	)

2248 
	#RGS_SSUSB_FT_OUT_OFST
 (8)

	)

2249 
	#RGS_SSUSB_PRB_OUT_OFST
 (0)

	)

2252 
	#RGS_SSUSB_EQ_DCLEQ_OFST
 (24)

	)

2253 
	#RGS_SSUSB_EQ_DCD0H_OFST
 (16)

	)

2254 
	#RGS_SSUSB_EQ_DCD0L_OFST
 (8)

	)

2255 
	#RGS_SSUSB_EQ_DCD1H_OFST
 (0)

	)

2258 
	#RGS_SSUSB_EQ_DCD1L_OFST
 (24)

	)

2259 
	#RGS_SSUSB_EQ_DCE0_OFST
 (16)

	)

2260 
	#RGS_SSUSB_EQ_DCE1_OFST
 (8)

	)

2261 
	#RGS_SSUSB_EQ_DCHHL_OFST
 (0)

	)

2264 
	#RGS_SSUSB_EQ_LEQ_STOP_OFST
 (31)

	)

2265 
	#RGS_SSUSB_EQ_DCLHL_OFST
 (24)

	)

2266 
	#RGS_SSUSB_EQ_STATUS_OFST
 (16)

	)

2267 
	#RGS_SSUSB_EQ_DCEYE0_OFST
 (8)

	)

2268 
	#RGS_SSUSB_EQ_DCEYE1_OFST
 (0)

	)

2271 
	#RGS_SSUSB_EQ_EYE_MONITOR_ERRCNT_0_OFST
 (0)

	)

2274 
	#RGS_SSUSB_EQ_EYE_MONITOR_ERRCNT_1_OFST
 (0)

	)

2277 
	#RGS_SSUSB_EQ_DCLEQOS_OFST
 (8)

	)

2278 
	#RGS_SSUSB_EQ_EYE_CNT_RDY_OFST
 (7)

	)

2279 
	#RGS_SSUSB_EQ_PILPO_OFST
 (0)

	)

2282 
	#RG_SSUSB_CPPAT_OUT_H_TMP2_OFST
 (16)

	)

2283 
	#RG_SSUSB_CPPAT_OUT_H_TMP1_OFST
 (8)

	)

2284 
	#RG_SSUSB_CPPAT_OUT_H_TMP0_OFST
 (0)

	)

2287 
	#RG_SSUSB_EQ_LEQ_SHIFT_OFST
 (24)

	)

2288 
	#RG_SSUSB_EQ_EYE_CNT_OFST
 (0)

	)

2291 
	#RGS_SSUSB_CDR_BAND_5G_OFST
 (24)

	)

2292 
	#RGS_SSUSB_CDR_BAND_2P5G_OFST
 (16)

	)

2293 
	#RGS_SSUSB_PLL_BAND_5G_OFST
 (8)

	)

2294 
	#RGS_SSUSB_PLL_BAND_2P5G_OFST
 (0)

	)

2297 
	#RGS_SSUSB_CDR_VCOCAL_FAIL_OFST
 (24)

	)

2298 
	#RGS_SSUSB_CDR_VCOCAL_STATE_OFST
 (16)

	)

2299 
	#RGS_SSUSB_PLL_VCOCAL_FAIL_OFST
 (8)

	)

2300 
	#RGS_SSUSB_PLL_VCOCAL_STATE_OFST
 (0)

	)

2305 
	su3phyd_b™k2_ªg
 {

2307 
PHY_LE32
 
	mb2_phyd_t›1
;

2308 
PHY_LE32
 
	mb2_phyd_t›2
;

2309 
PHY_LE32
 
	mb2_phyd_t›3
;

2310 
PHY_LE32
 
	mb2_phyd_t›4
;

2312 
PHY_LE32
 
	mb2_phyd_t›5
;

2313 
PHY_LE32
 
	mb2_phyd_t›6
;

2314 
PHY_LE32
 
	mb2_phyd_t›7
;

2315 
PHY_LE32
 
	mb2_phyd_p_sigdë1
;

2317 
PHY_LE32
 
	mb2_phyd_p_sigdë2
;

2318 
PHY_LE32
 
	mb2_phyd_p_sigdë_ˇl1
;

2319 
PHY_LE32
 
	mb2_phyd_rxdë1
;

2320 
PHY_LE32
 
	mb2_phyd_rxdë2
;

2322 
PHY_LE32
 
	mb2_phyd_misc0
;

2323 
PHY_LE32
 
	mb2_phyd_misc2
;

2324 
PHY_LE32
 
	mb2_phyd_misc3
;

2325 
PHY_LE32
 
	mª£rve0
;

2327 
PHY_LE32
 
	mb2_rosc_0
;

2328 
PHY_LE32
 
	mb2_rosc_1
;

2329 
PHY_LE32
 
	mb2_rosc_2
;

2330 
PHY_LE32
 
	mb2_rosc_3
;

2332 
PHY_LE32
 
	mb2_rosc_4
;

2333 
PHY_LE32
 
	mb2_rosc_5
;

2334 
PHY_LE32
 
	mb2_rosc_6
;

2335 
PHY_LE32
 
	mb2_rosc_7
;

2337 
PHY_LE32
 
	mb2_rosc_8
;

2338 
PHY_LE32
 
	mb2_rosc_9
;

2339 
PHY_LE32
 
	mb2_rosc_a
;

2340 
PHY_LE32
 
	mª£rve1
;

2342 
PHY_LE32
 
	mª£rve2
[28];

2344 
PHY_LE32
 
	mphyd_vîsi⁄
;

2345 
PHY_LE32
 
	mphyd_modñ
;

2349 
	#RG_SSUSB_PCIE2_K_EMP
 (0xf<<28)

2350 
	#RG_SSUSB_PCIE2_K_FUL
 (0xf<<24)

2351 
	#RG_SSUSB_TX_EIDLE_LP_EN
 (0x1<<17)

2352 
	#RG_SSUSB_FORCE_TX_EIDLE_LP_EN
 (0x1<<16)

2353 
	#RG_SSUSB_SIGDET_EN
 (0x1<<15)

2354 
	#RG_SSUSB_FORCE_SIGDET_EN
 (0x1<<14)

2355 
	#RG_SSUSB_CLKRX_EN
 (0x1<<13)

2356 
	#RG_SSUSB_FORCE_CLKRX_EN
 (0x1<<12)

2357 
	#RG_SSUSB_CLKTX_EN
 (0x1<<11)

2358 
	#RG_SSUSB_FORCE_CLKTX_EN
 (0x1<<10)

2359 
	#RG_SSUSB_CLK_REQ_N_I
 (0x1<<9)

2360 
	#RG_SSUSB_FORCE_CLK_REQ_N_I
 (0x1<<8)

2361 
	#RG_SSUSB_RATE
 (0x1<<6)

2362 
	#RG_SSUSB_FORCE_RATE
 (0x1<<5)

2363 
	#RG_SSUSB_PCIE_MODE_SEL
 (0x1<<4)

2364 
	#RG_SSUSB_FORCE_PCIE_MODE_SEL
 (0x1<<3)

2365 
	#RG_SSUSB_PHY_MODE
 (0x3<<1)

2366 
	#RG_SSUSB_FORCE_PHY_MODE
 (0x1<<0)

2367 

	)

2369 
	#RG_SSUSB_FORCE_IDRV_6DB
 (0x1<<30)

2370 
	#RG_SSUSB_IDRV_6DB
 (0x3f<<24)

2371 
	#RG_SSUSB_FORCE_IDEM_3P5DB
 (0x1<<22)

2372 
	#RG_SSUSB_IDEM_3P5DB
 (0x3f<<16)

2373 
	#RG_SSUSB_FORCE_IDRV_3P5DB
 (0x1<<14)

2374 
	#RG_SSUSB_IDRV_3P5DB
 (0x3f<<8)

2375 
	#RG_SSUSB_FORCE_IDRV_0DB
 (0x1<<6)

2376 
	#RG_SSUSB_IDRV_0DB
 (0x3f<<0)

2377 

	)

2379 
	#RG_SSUSB_TX_BIASI
 (0x7<<25)

2380 
	#RG_SSUSB_FORCE_TX_BIASI_EN
 (0x1<<24)

2381 
	#RG_SSUSB_TX_BIASI_EN
 (0x1<<16)

2382 
	#RG_SSUSB_FORCE_TX_BIASI
 (0x1<<13)

2383 
	#RG_SSUSB_FORCE_IDEM_6DB
 (0x1<<8)

2384 
	#RG_SSUSB_IDEM_6DB
 (0x3f<<0)

2385 

	)

2387 
	#RG_SSUSB_G1_CDR_BIC_LTR
 (0xf<<28)

2388 
	#RG_SSUSB_G1_CDR_BIC_LTD0
 (0xf<<24)

2389 
	#RG_SSUSB_G1_CDR_BC_LTD1
 (0x1f<<16)

2390 
	#RG_SSUSB_G1_CDR_BC_LTR
 (0x1f<<8)

2391 
	#RG_SSUSB_G1_CDR_BC_LTD0
 (0x1f<<0)

2392 

	)

2394 
	#RG_SSUSB_G1_CDR_BIR_LTD1
 (0x1f<<24)

2395 
	#RG_SSUSB_G1_CDR_BIR_LTR
 (0x1f<<16)

2396 
	#RG_SSUSB_G1_CDR_BIR_LTD0
 (0x1f<<8)

2397 
	#RG_SSUSB_G1_CDR_BIC_LTD1
 (0xf<<0)

2398 

	)

2400 
	#RG_SSUSB_G2_CDR_BIC_LTR
 (0xf<<28)

2401 
	#RG_SSUSB_G2_CDR_BIC_LTD0
 (0xf<<24)

2402 
	#RG_SSUSB_G2_CDR_BC_LTD1
 (0x1f<<16)

2403 
	#RG_SSUSB_G2_CDR_BC_LTR
 (0x1f<<8)

2404 
	#RG_SSUSB_G2_CDR_BC_LTD0
 (0x1f<<0)

2405 

	)

2407 
	#RG_SSUSB_G2_CDR_BIR_LTD1
 (0x1f<<24)

2408 
	#RG_SSUSB_G2_CDR_BIR_LTR
 (0x1f<<16)

2409 
	#RG_SSUSB_G2_CDR_BIR_LTD0
 (0x1f<<8)

2410 
	#RG_SSUSB_G2_CDR_BIC_LTD1
 (0xf<<0)

2411 

	)

2413 
	#RG_SSUSB_P_SIGDET_FLT_DIS
 (0x1<<31)

2414 
	#RG_SSUSB_P_SIGDET_FLT_G2_DEAST_SEL
 (0x7f<<24)

2415 
	#RG_SSUSB_P_SIGDET_FLT_G1_DEAST_SEL
 (0x7f<<16)

2416 
	#RG_SSUSB_P_SIGDET_FLT_P2_AST_SEL
 (0x7f<<8)

2417 
	#RG_SSUSB_P_SIGDET_FLT_PX_AST_SEL
 (0x7f<<0)

2418 

	)

2420 
	#RG_SSUSB_P_SIGDET_RX_VAL_S
 (0x1<<29)

2421 
	#RG_SSUSB_P_SIGDET_L0S_DEAS_SEL
 (0x1<<28)

2422 
	#RG_SSUSB_P_SIGDET_L0_EXIT_S
 (0x1<<27)

2423 
	#RG_SSUSB_P_SIGDET_L0S_EXIT_T_S
 (0x3<<25)

2424 
	#RG_SSUSB_P_SIGDET_L0S_EXIT_S
 (0x1<<24)

2425 
	#RG_SSUSB_P_SIGDET_L0S_ENTRY_S
 (0x1<<16)

2426 
	#RG_SSUSB_P_SIGDET_PRB_SEL
 (0x1<<10)

2427 
	#RG_SSUSB_P_SIGDET_BK_SIG_T
 (0x3<<8)

2428 
	#RG_SSUSB_P_SIGDET_P2_RXLFPS
 (0x1<<6)

2429 
	#RG_SSUSB_P_SIGDET_NON_BK_AD
 (0x1<<5)

2430 
	#RG_SSUSB_P_SIGDET_BK_B_RXEQ
 (0x1<<4)

2431 
	#RG_SSUSB_P_SIGDET_G2_KO_SEL
 (0x3<<2)

2432 
	#RG_SSUSB_P_SIGDET_G1_KO_SEL
 (0x3<<0)

2433 

	)

2435 
	#RG_SSUSB_P_SIGDET_CAL_OFFSET
 (0x1f<<24)

2436 
	#RG_SSUSB_P_FORCE_SIGDET_CAL_OFFSET
 (0x1<<16)

2437 
	#RG_SSUSB_P_SIGDET_CAL_EN
 (0x1<<8)

2438 
	#RG_SSUSB_P_FORCE_SIGDET_CAL_EN
 (0x1<<3)

2439 
	#RG_SSUSB_P_SIGDET_FLT_EN
 (0x1<<2)

2440 
	#RG_SSUSB_P_SIGDET_SAMPLE_PRD
 (0x1<<1)

2441 
	#RG_SSUSB_P_SIGDET_REK
 (0x1<<0)

2442 

	)

2444 
	#RG_SSUSB_RXDET_PRB_SEL
 (0x1<<31)

2445 
	#RG_SSUSB_FORCE_CMDET
 (0x1<<30)

2446 
	#RG_SSUSB_RXDET_EN
 (0x1<<29)

2447 
	#RG_SSUSB_FORCE_RXDET_EN
 (0x1<<28)

2448 
	#RG_SSUSB_RXDET_K_TWICE
 (0x1<<27)

2449 
	#RG_SSUSB_RXDET_STB3_SET
 (0x1ff<<18)

2450 
	#RG_SSUSB_RXDET_STB2_SET
 (0x1ff<<9)

2451 
	#RG_SSUSB_RXDET_STB1_SET
 (0x1ff<<0)

2452 

	)

2454 
	#RG_SSUSB_PHYD_TRAINDEC_FORCE_CGEN
 (0x1<<31)

2455 
	#RG_SSUSB_PHYD_BERTLB_FORCE_CGEN
 (0x1<<30)

2456 
	#RG_SSUSB_PHYD_T2RLB_FORCE_CGEN
 (0x1<<29)

2457 
	#RG_SSUSB_PDN_T_SEL
 (0x3<<18)

2458 
	#RG_SSUSB_RXDET_STB3_SET_P3
 (0x1ff<<9)

2459 
	#RG_SSUSB_RXDET_STB2_SET_P3
 (0x1ff<<0)

2460 

	)

2462 
	#RG_SSUSB_FORCE_PLL_DDS_HF_EN
 (0x1<<22)

2463 
	#RG_SSUSB_PLL_DDS_HF_EN_MAN
 (0x1<<21)

2464 
	#RG_SSUSB_RXLFPS_ENTXDRV
 (0x1<<20)

2465 
	#RG_SSUSB_RX_FL_UNLOCKTH
 (0xf<<16)

2466 
	#RG_SSUSB_LFPS_PSEL
 (0x1<<15)

2467 
	#RG_SSUSB_RX_SIGDET_EN
 (0x1<<14)

2468 
	#RG_SSUSB_RX_SIGDET_EN_SEL
 (0x1<<13)

2469 
	#RG_SSUSB_RX_PI_CAL_EN
 (0x1<<12)

2470 
	#RG_SSUSB_RX_PI_CAL_EN_SEL
 (0x1<<11)

2471 
	#RG_SSUSB_P3_CLS_CK_SEL
 (0x1<<10)

2472 
	#RG_SSUSB_T2RLB_PSEL
 (0x3<<8)

2473 
	#RG_SSUSB_PPCTL_PSEL
 (0x7<<5)

2474 
	#RG_SSUSB_PHYD_TX_DATA_INV
 (0x1<<4)

2475 
	#RG_SSUSB_BERTLB_PSEL
 (0x3<<2)

2476 
	#RG_SSUSB_RETRACK_DIS
 (0x1<<1)

2477 
	#RG_SSUSB_PPERRCNT_CLR
 (0x1<<0)

2478 

	)

2480 
	#RG_SSUSB_FRC_PLL_DDS_PREDIV2
 (0x1<<31)

2481 
	#RG_SSUSB_FRC_PLL_DDS_IADJ
 (0xf<<27)

2482 
	#RG_SSUSB_P_SIGDET_125FILTER
 (0x1<<26)

2483 
	#RG_SSUSB_P_SIGDET_RST_FILTER
 (0x1<<25)

2484 
	#RG_SSUSB_P_SIGDET_EID_USE_RAW
 (0x1<<24)

2485 
	#RG_SSUSB_P_SIGDET_LTD_USE_RAW
 (0x1<<23)

2486 
	#RG_SSUSB_EIDLE_BF_RXDET
 (0x1<<22)

2487 
	#RG_SSUSB_EIDLE_LP_STBCYC
 (0x1ff<<13)

2488 
	#RG_SSUSB_TX_EIDLE_LP_POSTDLY
 (0x3f<<7)

2489 
	#RG_SSUSB_TX_EIDLE_LP_PREDLY
 (0x3f<<1)

2490 
	#RG_SSUSB_TX_EIDLE_LP_EN_ADV
 (0x1<<0)

2491 

	)

2493 
	#RGS_SSUSB_DDS_CALIB_C_STATE
 (0x7<<16)

2494 
	#RGS_SSUSB_PPERRCNT
 (0xffff<<0)

2495 

	)

2497 
	#RG_SSUSB_RING_OSC_CNTEND
 (0x1ff<<23)

2498 
	#RG_SSUSB_XTAL_OSC_CNTEND
 (0x7f<<16)

2499 
	#RG_SSUSB_RING_OSC_EN
 (0x1<<3)

2500 
	#RG_SSUSB_RING_OSC_FORCE_EN
 (0x1<<2)

2501 
	#RG_SSUSB_FRC_RING_BYPASS_DET
 (0x1<<1)

2502 
	#RG_SSUSB_RING_BYPASS_DET
 (0x1<<0)

2503 

	)

2505 
	#RG_SSUSB_RING_OSC_FRC_P3
 (0x1<<20)

2506 
	#RG_SSUSB_RING_OSC_P3
 (0x1<<19)

2507 
	#RG_SSUSB_RING_OSC_FRC_RECAL
 (0x3<<17)

2508 
	#RG_SSUSB_RING_OSC_RECAL
 (0x1<<16)

2509 
	#RG_SSUSB_RING_OSC_SEL
 (0xff<<8)

2510 
	#RG_SSUSB_RING_OSC_FRC_SEL
 (0x1<<0)

2511 

	)

2513 
	#RG_SSUSB_RING_DET_STRCYC2
 (0xffff<<16)

2514 
	#RG_SSUSB_RING_DET_STRCYC1
 (0xffff<<0)

2515 

	)

2517 
	#RG_SSUSB_RING_DET_DETWIN1
 (0xffff<<16)

2518 
	#RG_SSUSB_RING_DET_STRCYC3
 (0xffff<<0)

2519 

	)

2521 
	#RG_SSUSB_RING_DET_DETWIN3
 (0xffff<<16)

2522 
	#RG_SSUSB_RING_DET_DETWIN2
 (0xffff<<0)

2523 

	)

2525 
	#RG_SSUSB_RING_DET_LBOND1
 (0xffff<<16)

2526 
	#RG_SSUSB_RING_DET_UBOND1
 (0xffff<<0)

2527 

	)

2529 
	#RG_SSUSB_RING_DET_LBOND2
 (0xffff<<16)

2530 
	#RG_SSUSB_RING_DET_UBOND2
 (0xffff<<0)

2531 

	)

2533 
	#RG_SSUSB_RING_DET_LBOND3
 (0xffff<<16)

2534 
	#RG_SSUSB_RING_DET_UBOND3
 (0xffff<<0)

2535 

	)

2537 
	#RG_SSUSB_RING_RESERVE
 (0xffff<<16)

2538 
	#RG_SSUSB_ROSC_PROB_SEL
 (0xf<<2)

2539 
	#RG_SSUSB_RING_FREQMETER_EN
 (0x1<<1)

2540 
	#RG_SSUSB_RING_DET_BPS_UBOND
 (0x1<<0)

2541 

	)

2543 
	#RGS_FM_RING_CNT
 (0xffff<<16)

2544 
	#RGS_SSUSB_RING_OSC_STATE
 (0x3<<10)

2545 
	#RGS_SSUSB_RING_OSC_STABLE
 (0x1<<9)

2546 
	#RGS_SSUSB_RING_OSC_CAL_FAIL
 (0x1<<8)

2547 
	#RGS_SSUSB_RING_OSC_CAL
 (0xff<<0)

2548 

	)

2550 
	#RGS_SSUSB_ROSC_PROB_OUT
 (0xff<<0)

2551 

	)

2553 
	#RGS_SSUSB_PHYD_VERSION
 (0xffffffff<<0)

2554 

	)

2556 
	#RGS_SSUSB_PHYD_MODEL
 (0xffffffff<<0)

2557 

	)

2562 
	#RG_SSUSB_PCIE2_K_EMP_OFST
 (28)

	)

2563 
	#RG_SSUSB_PCIE2_K_FUL_OFST
 (24)

	)

2564 
	#RG_SSUSB_TX_EIDLE_LP_EN_OFST
 (17)

	)

2565 
	#RG_SSUSB_FORCE_TX_EIDLE_LP_EN_OFST
 (16)

	)

2566 
	#RG_SSUSB_SIGDET_EN_OFST
 (15)

	)

2567 
	#RG_SSUSB_FORCE_SIGDET_EN_OFST
 (14)

	)

2568 
	#RG_SSUSB_CLKRX_EN_OFST
 (13)

	)

2569 
	#RG_SSUSB_FORCE_CLKRX_EN_OFST
 (12)

	)

2570 
	#RG_SSUSB_CLKTX_EN_OFST
 (11)

	)

2571 
	#RG_SSUSB_FORCE_CLKTX_EN_OFST
 (10)

	)

2572 
	#RG_SSUSB_CLK_REQ_N_I_OFST
 (9)

	)

2573 
	#RG_SSUSB_FORCE_CLK_REQ_N_I_OFST
 (8)

	)

2574 
	#RG_SSUSB_RATE_OFST
 (6)

	)

2575 
	#RG_SSUSB_FORCE_RATE_OFST
 (5)

	)

2576 
	#RG_SSUSB_PCIE_MODE_SEL_OFST
 (4)

	)

2577 
	#RG_SSUSB_FORCE_PCIE_MODE_SEL_OFST
 (3)

	)

2578 
	#RG_SSUSB_PHY_MODE_OFST
 (1)

	)

2579 
	#RG_SSUSB_FORCE_PHY_MODE_OFST
 (0)

	)

2582 
	#RG_SSUSB_FORCE_IDRV_6DB_OFST
 (30)

	)

2583 
	#RG_SSUSB_IDRV_6DB_OFST
 (24)

	)

2584 
	#RG_SSUSB_FORCE_IDEM_3P5DB_OFST
 (22)

	)

2585 
	#RG_SSUSB_IDEM_3P5DB_OFST
 (16)

	)

2586 
	#RG_SSUSB_FORCE_IDRV_3P5DB_OFST
 (14)

	)

2587 
	#RG_SSUSB_IDRV_3P5DB_OFST
 (8)

	)

2588 
	#RG_SSUSB_FORCE_IDRV_0DB_OFST
 (6)

	)

2589 
	#RG_SSUSB_IDRV_0DB_OFST
 (0)

	)

2592 
	#RG_SSUSB_TX_BIASI_OFST
 (25)

	)

2593 
	#RG_SSUSB_FORCE_TX_BIASI_EN_OFST
 (24)

	)

2594 
	#RG_SSUSB_TX_BIASI_EN_OFST
 (16)

	)

2595 
	#RG_SSUSB_FORCE_TX_BIASI_OFST
 (13)

	)

2596 
	#RG_SSUSB_FORCE_IDEM_6DB_OFST
 (8)

	)

2597 
	#RG_SSUSB_IDEM_6DB_OFST
 (0)

	)

2600 
	#RG_SSUSB_G1_CDR_BIC_LTR_OFST
 (28)

	)

2601 
	#RG_SSUSB_G1_CDR_BIC_LTD0_OFST
 (24)

	)

2602 
	#RG_SSUSB_G1_CDR_BC_LTD1_OFST
 (16)

	)

2603 
	#RG_SSUSB_G1_CDR_BC_LTR_OFST
 (8)

	)

2604 
	#RG_SSUSB_G1_CDR_BC_LTD0_OFST
 (0)

	)

2607 
	#RG_SSUSB_G1_CDR_BIR_LTD1_OFST
 (24)

	)

2608 
	#RG_SSUSB_G1_CDR_BIR_LTR_OFST
 (16)

	)

2609 
	#RG_SSUSB_G1_CDR_BIR_LTD0_OFST
 (8)

	)

2610 
	#RG_SSUSB_G1_CDR_BIC_LTD1_OFST
 (0)

	)

2613 
	#RG_SSUSB_G2_CDR_BIC_LTR_OFST
 (28)

	)

2614 
	#RG_SSUSB_G2_CDR_BIC_LTD0_OFST
 (24)

	)

2615 
	#RG_SSUSB_G2_CDR_BC_LTD1_OFST
 (16)

	)

2616 
	#RG_SSUSB_G2_CDR_BC_LTR_OFST
 (8)

	)

2617 
	#RG_SSUSB_G2_CDR_BC_LTD0_OFST
 (0)

	)

2620 
	#RG_SSUSB_G2_CDR_BIR_LTD1_OFST
 (24)

	)

2621 
	#RG_SSUSB_G2_CDR_BIR_LTR_OFST
 (16)

	)

2622 
	#RG_SSUSB_G2_CDR_BIR_LTD0_OFST
 (8)

	)

2623 
	#RG_SSUSB_G2_CDR_BIC_LTD1_OFST
 (0)

	)

2626 
	#RG_SSUSB_P_SIGDET_FLT_DIS_OFST
 (31)

	)

2627 
	#RG_SSUSB_P_SIGDET_FLT_G2_DEAST_SEL_OFST
 (24)

	)

2628 
	#RG_SSUSB_P_SIGDET_FLT_G1_DEAST_SEL_OFST
 (16)

	)

2629 
	#RG_SSUSB_P_SIGDET_FLT_P2_AST_SEL_OFST
 (8)

	)

2630 
	#RG_SSUSB_P_SIGDET_FLT_PX_AST_SEL_OFST
 (0)

	)

2633 
	#RG_SSUSB_P_SIGDET_RX_VAL_S_OFST
 (29)

	)

2634 
	#RG_SSUSB_P_SIGDET_L0S_DEAS_SEL_OFST
 (28)

	)

2635 
	#RG_SSUSB_P_SIGDET_L0_EXIT_S_OFST
 (27)

	)

2636 
	#RG_SSUSB_P_SIGDET_L0S_EXIT_T_S_OFST
 (25)

	)

2637 
	#RG_SSUSB_P_SIGDET_L0S_EXIT_S_OFST
 (24)

	)

2638 
	#RG_SSUSB_P_SIGDET_L0S_ENTRY_S_OFST
 (16)

	)

2639 
	#RG_SSUSB_P_SIGDET_PRB_SEL_OFST
 (10)

	)

2640 
	#RG_SSUSB_P_SIGDET_BK_SIG_T_OFST
 (8)

	)

2641 
	#RG_SSUSB_P_SIGDET_P2_RXLFPS_OFST
 (6)

	)

2642 
	#RG_SSUSB_P_SIGDET_NON_BK_AD_OFST
 (5)

	)

2643 
	#RG_SSUSB_P_SIGDET_BK_B_RXEQ_OFST
 (4)

	)

2644 
	#RG_SSUSB_P_SIGDET_G2_KO_SEL_OFST
 (2)

	)

2645 
	#RG_SSUSB_P_SIGDET_G1_KO_SEL_OFST
 (0)

	)

2648 
	#RG_SSUSB_P_SIGDET_CAL_OFFSET_OFST
 (24)

	)

2649 
	#RG_SSUSB_P_FORCE_SIGDET_CAL_OFFSET_OFST
 (16)

	)

2650 
	#RG_SSUSB_P_SIGDET_CAL_EN_OFST
 (8)

	)

2651 
	#RG_SSUSB_P_FORCE_SIGDET_CAL_EN_OFST
 (3)

	)

2652 
	#RG_SSUSB_P_SIGDET_FLT_EN_OFST
 (2)

	)

2653 
	#RG_SSUSB_P_SIGDET_SAMPLE_PRD_OFST
 (1)

	)

2654 
	#RG_SSUSB_P_SIGDET_REK_OFST
 (0)

	)

2657 
	#RG_SSUSB_RXDET_PRB_SEL_OFST
 (31)

	)

2658 
	#RG_SSUSB_FORCE_CMDET_OFST
 (30)

	)

2659 
	#RG_SSUSB_RXDET_EN_OFST
 (29)

	)

2660 
	#RG_SSUSB_FORCE_RXDET_EN_OFST
 (28)

	)

2661 
	#RG_SSUSB_RXDET_K_TWICE_OFST
 (27)

	)

2662 
	#RG_SSUSB_RXDET_STB3_SET_OFST
 (18)

	)

2663 
	#RG_SSUSB_RXDET_STB2_SET_OFST
 (9)

	)

2664 
	#RG_SSUSB_RXDET_STB1_SET_OFST
 (0)

	)

2667 
	#RG_SSUSB_PHYD_TRAINDEC_FORCE_CGEN_OFST
 (31)

	)

2668 
	#RG_SSUSB_PHYD_BERTLB_FORCE_CGEN_OFST
 (30)

	)

2669 
	#RG_SSUSB_PHYD_T2RLB_FORCE_CGEN_OFST
 (29)

	)

2670 
	#RG_SSUSB_PDN_T_SEL_OFST
 (18)

	)

2671 
	#RG_SSUSB_RXDET_STB3_SET_P3_OFST
 (9)

	)

2672 
	#RG_SSUSB_RXDET_STB2_SET_P3_OFST
 (0)

	)

2675 
	#RG_SSUSB_FORCE_PLL_DDS_HF_EN_OFST
 (22)

	)

2676 
	#RG_SSUSB_PLL_DDS_HF_EN_MAN_OFST
 (21)

	)

2677 
	#RG_SSUSB_RXLFPS_ENTXDRV_OFST
 (20)

	)

2678 
	#RG_SSUSB_RX_FL_UNLOCKTH_OFST
 (16)

	)

2679 
	#RG_SSUSB_LFPS_PSEL_OFST
 (15)

	)

2680 
	#RG_SSUSB_RX_SIGDET_EN_OFST
 (14)

	)

2681 
	#RG_SSUSB_RX_SIGDET_EN_SEL_OFST
 (13)

	)

2682 
	#RG_SSUSB_RX_PI_CAL_EN_OFST
 (12)

	)

2683 
	#RG_SSUSB_RX_PI_CAL_EN_SEL_OFST
 (11)

	)

2684 
	#RG_SSUSB_P3_CLS_CK_SEL_OFST
 (10)

	)

2685 
	#RG_SSUSB_T2RLB_PSEL_OFST
 (8)

	)

2686 
	#RG_SSUSB_PPCTL_PSEL_OFST
 (5)

	)

2687 
	#RG_SSUSB_PHYD_TX_DATA_INV_OFST
 (4)

	)

2688 
	#RG_SSUSB_BERTLB_PSEL_OFST
 (2)

	)

2689 
	#RG_SSUSB_RETRACK_DIS_OFST
 (1)

	)

2690 
	#RG_SSUSB_PPERRCNT_CLR_OFST
 (0)

	)

2693 
	#RG_SSUSB_FRC_PLL_DDS_PREDIV2_OFST
 (31)

	)

2694 
	#RG_SSUSB_FRC_PLL_DDS_IADJ_OFST
 (27)

	)

2695 
	#RG_SSUSB_P_SIGDET_125FILTER_OFST
 (26)

	)

2696 
	#RG_SSUSB_P_SIGDET_RST_FILTER_OFST
 (25)

	)

2697 
	#RG_SSUSB_P_SIGDET_EID_USE_RAW_OFST
 (24)

	)

2698 
	#RG_SSUSB_P_SIGDET_LTD_USE_RAW_OFST
 (23)

	)

2699 
	#RG_SSUSB_EIDLE_BF_RXDET_OFST
 (22)

	)

2700 
	#RG_SSUSB_EIDLE_LP_STBCYC_OFST
 (13)

	)

2701 
	#RG_SSUSB_TX_EIDLE_LP_POSTDLY_OFST
 (7)

	)

2702 
	#RG_SSUSB_TX_EIDLE_LP_PREDLY_OFST
 (1)

	)

2703 
	#RG_SSUSB_TX_EIDLE_LP_EN_ADV_OFST
 (0)

	)

2706 
	#RGS_SSUSB_DDS_CALIB_C_STATE_OFST
 (16)

	)

2707 
	#RGS_SSUSB_PPERRCNT_OFST
 (0)

	)

2710 
	#RG_SSUSB_RING_OSC_CNTEND_OFST
 (23)

	)

2711 
	#RG_SSUSB_XTAL_OSC_CNTEND_OFST
 (16)

	)

2712 
	#RG_SSUSB_RING_OSC_EN_OFST
 (3)

	)

2713 
	#RG_SSUSB_RING_OSC_FORCE_EN_OFST
 (2)

	)

2714 
	#RG_SSUSB_FRC_RING_BYPASS_DET_OFST
 (1)

	)

2715 
	#RG_SSUSB_RING_BYPASS_DET_OFST
 (0)

	)

2718 
	#RG_SSUSB_RING_OSC_FRC_P3_OFST
 (20)

	)

2719 
	#RG_SSUSB_RING_OSC_P3_OFST
 (19)

	)

2720 
	#RG_SSUSB_RING_OSC_FRC_RECAL_OFST
 (17)

	)

2721 
	#RG_SSUSB_RING_OSC_RECAL_OFST
 (16)

	)

2722 
	#RG_SSUSB_RING_OSC_SEL_OFST
 (8)

	)

2723 
	#RG_SSUSB_RING_OSC_FRC_SEL_OFST
 (0)

	)

2726 
	#RG_SSUSB_RING_DET_STRCYC2_OFST
 (16)

	)

2727 
	#RG_SSUSB_RING_DET_STRCYC1_OFST
 (0)

	)

2730 
	#RG_SSUSB_RING_DET_DETWIN1_OFST
 (16)

	)

2731 
	#RG_SSUSB_RING_DET_STRCYC3_OFST
 (0)

	)

2734 
	#RG_SSUSB_RING_DET_DETWIN3_OFST
 (16)

	)

2735 
	#RG_SSUSB_RING_DET_DETWIN2_OFST
 (0)

	)

2738 
	#RG_SSUSB_RING_DET_LBOND1_OFST
 (16)

	)

2739 
	#RG_SSUSB_RING_DET_UBOND1_OFST
 (0)

	)

2742 
	#RG_SSUSB_RING_DET_LBOND2_OFST
 (16)

	)

2743 
	#RG_SSUSB_RING_DET_UBOND2_OFST
 (0)

	)

2746 
	#RG_SSUSB_RING_DET_LBOND3_OFST
 (16)

	)

2747 
	#RG_SSUSB_RING_DET_UBOND3_OFST
 (0)

	)

2750 
	#RG_SSUSB_RING_RESERVE_OFST
 (16)

	)

2751 
	#RG_SSUSB_ROSC_PROB_SEL_OFST
 (2)

	)

2752 
	#RG_SSUSB_RING_FREQMETER_EN_OFST
 (1)

	)

2753 
	#RG_SSUSB_RING_DET_BPS_UBOND_OFST
 (0)

	)

2756 
	#RGS_FM_RING_CNT_OFST
 (16)

	)

2757 
	#RGS_SSUSB_RING_OSC_STATE_OFST
 (10)

	)

2758 
	#RGS_SSUSB_RING_OSC_STABLE_OFST
 (9)

	)

2759 
	#RGS_SSUSB_RING_OSC_CAL_FAIL_OFST
 (8)

	)

2760 
	#RGS_SSUSB_RING_OSC_CAL_OFST
 (0)

	)

2763 
	#RGS_SSUSB_ROSC_PROB_OUT_OFST
 (0)

	)

2766 
	#RGS_SSUSB_PHYD_VERSION_OFST
 (0)

	)

2769 
	#RGS_SSUSB_PHYD_MODEL_OFST
 (0)

	)

2774 
	ssif¶v_chù_ªg
 {

2775 
PHY_LE32
 
	mxèlbüs
;

2776 
PHY_LE32
 
	msy•Œ1
;

2777 
PHY_LE32
 
	mgpio_˘œ
;

2778 
PHY_LE32
 
	mgpio_˘lb
;

2779 
PHY_LE32
 
	mgpio_˘lc
;

2783 
	#RG_C60802_GPIO_CTLA
 (0xffffffff<<0)

2784 

	)

2786 
	#RG_C60802_GPIO_CTLB
 (0xffffffff<<0)

2787 

	)

2789 
	#RG_C60802_GPIO_CTLC
 (0xffffffff<<0)

2790 

	)

2794 
	#RG_C60802_GPIO_CTLA_OFST
 (0)

	)

2797 
	#RG_C60802_GPIO_CTLB_OFST
 (0)

	)

2800 
	#RG_C60802_GPIO_CTLC_OFST
 (0)

	)

2804 
	ssif¶v_fm_„g
 {

2806 
PHY_LE32
 
	mfm¸0
;

2807 
PHY_LE32
 
	mfm¸1
;

2808 
PHY_LE32
 
	mfm¸2
;

2809 
PHY_LE32
 
	mfmm⁄r0
;

2811 
PHY_LE32
 
	mfmm⁄r1
;

2815 
	#RG_LOCKTH
 (0xf<<28)

2816 
	#RG_MONCLK_SEL
 (0x3<<26)

2817 
	#RG_FM_MODE
 (0x1<<25)

2818 
	#RG_FREQDET_EN
 (0x1<<24)

2819 
	#RG_CYCLECNT
 (0xffffff<<0)

2820 

	)

2822 
	#RG_TARGET
 (0xffffffff<<0)

2823 

	)

2825 
	#RG_OFFSET
 (0xffffffff<<0)

2826 

	)

2828 
	#USB_FM_OUT
 (0xffffffff<<0)

2829 

	)

2831 
	#RG_MONCLK_SEL_3
 (0x1<<9)

2832 
	#RG_FRCK_EN
 (0x1<<8)

2833 
	#USBPLL_LOCK
 (0x1<<1)

2834 
	#USB_FM_VLD
 (0x1<<0)

2835 

	)

2840 
	#RG_LOCKTH_OFST
 (28)

	)

2841 
	#RG_MONCLK_SEL_OFST
 (26)

	)

2842 
	#RG_FM_MODE_OFST
 (25)

	)

2843 
	#RG_FREQDET_EN_OFST
 (24)

	)

2844 
	#RG_CYCLECNT_OFST
 (0)

	)

2847 
	#RG_TARGET_OFST
 (0)

	)

2850 
	#RG_OFFSET_OFST
 (0)

	)

2853 
	#USB_FM_OUT_OFST
 (0)

	)

2856 
	#RG_MONCLK_SEL_3_OFST
 (9)

	)

2857 
	#RG_FRCK_EN_OFST
 (8)

	)

2858 
	#USBPLL_LOCK_OFST
 (1)

	)

2859 
	#USB_FM_VLD_OFST
 (0)

	)

2864 
PHY_INT32
 
mt7621_phy_öô
(
u3phy_öfo
 *
öfo
);

2865 
PHY_INT32
 
phy_ch™ge_pùe_pha£
(
u3phy_öfo
 *
öfo
, PHY_INT32 
phy_drv
, PHY_INT32 
pùe_pha£
);

2866 
PHY_INT32
 
eyesˇn_öô
(
u3phy_öfo
 *
öfo
);

2867 
PHY_INT32
 
phy_eyesˇn
(
u3phy_öfo
 *
öfo
, PHY_INT32 
x_t1
, PHY_INT32 
y_t1
, PHY_INT32 
x_br
, PHY_INT32 
y_br
, PHY_INT32 
dñè_x
, PHY_INT32 
dñè_y


2868 , 
PHY_INT32
 
eye_˙t
, PHY_INT32 
num_˙t
, PHY_INT32 
PI_ˇl_í
, PHY_INT32 
num_ign‹e_˙t
);

2869 
PHY_INT32
 
u2_ßve_cur_í
(
u3phy_öfo
 *
öfo
);

2870 
PHY_INT32
 
u2_ßve_cur_ª
(
u3phy_öfo
 *
öfo
);

2871 
PHY_INT32
 
u2_¶ew_øã_ˇlibøti⁄
(
u3phy_öfo
 *
öfo
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/usb/host/mtk-phy-ahb.c

1 
	~"mtk-phy.h
"

3 #ifde‡
CONFIG_U3_PHY_AHB_SUPPORT


5 
	#os_wrôñ
(
addr
,
d©a
) {\

6 (*((vﬁ©ûê
PHY_UINT32
*)(
addr
)Ë
d©a
);\

7 }

	)

8 
	#os_ªadl
(
addr
Ë*((vﬁ©ûê
PHY_UINT32
*)◊ddr))

	)

9 
	#os_wrôñmsk
(
addr
, 
d©a
, 
msk
) \

10 { 
	`os_wrôñ
(
addr
, ((
	`os_ªadl
◊ddrË& ~(
msk
)Ë| ((
d©a
) & (msk)))); \

11 }

	)

12 
	#os_£tmsk
(
addr
, 
msk
) \

13 { 
	`os_wrôñ
(
addr
, 
	`os_ªadl
◊ddrË| 
msk
); \

14 }

	)

15 
	#os_˛rmsk
(
addr
, 
msk
) \

16 { 
	`os_wrôñ
(
addr
, 
	`os_ªadl
◊ddrË&~ 
msk
); \

17 }

	)

19 
	#os_wrôñmskumsk
(
addr
, 
d©a
, 
msk
, 
umsk
) \

21 
	`os_wrôñ
(
addr
, ((
	`os_ªadl
◊ddrË& ~(
msk
)Ë| ((
d©a
Ë& (msk))Ë& (
umsk
));\

22 }

	)

25 
PHY_INT32
 
	$U3PhyWrôeReg32
(
PHY_UINT32
 
addr
, PHY_UINT32 
d©a
)

27 
	`os_wrôñ
(
addr
, 
d©a
);

30 
	}
}

32 
PHY_INT32
 
	$U3PhyRódReg32
(
PHY_UINT32
 
addr
)

34  
	`os_ªadl
(
addr
);

35 
	}
}

37 
PHY_INT32
 
	$U3PhyWrôeReg8
(
PHY_UINT32
 
addr
, 
PHY_UINT8
 
d©a
)

39 
	`os_wrôñmsk
(
addr
&0xfffffffc, 
d©a
<<((addr%4)*8), 0xff<<((addr%4)*8));

42 
	}
}

44 
PHY_INT8
 
	$U3PhyRódReg8
(
PHY_UINT32
 
addr
)

46  ((
	`os_ªadl
(
addr
)>>((addr%4)*8))&0xff);

47 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/usb/host/mtk-phy.c

2 
	~<mÆloc.h
>

4 
	#U3_PHY_LIB


	)

5 
	~"mtk-phy.h
"

6 #ifde‡
CONFIG_PROJECT_7621


7 
	~"mtk-phy-7621.h
"

9 #ifde‡
CONFIG_PROJECT_PHY


12 
u3phy_›î©‹
 
	g¥oje˘_›î©‹s
 = {

13 .
öô
 = 
mt7621_phy_öô
,

14 .
	gch™ge_pùe_pha£
 = 
phy_ch™ge_pùe_pha£
,

15 .
	geyesˇn_öô
 = 
eyesˇn_öô
,

16 .
	geyesˇn
 = 
phy_eyesˇn
,

17 .
	gu2_¶ew_øã_ˇlibøti⁄
 = 
u2_¶ew_øã_ˇlibøti⁄
,

22 
PHY_INT32
 
	$u3phy_öô
(){

23 #i‚de‡
CONFIG_PROJECT_PHY


24 
PHY_INT32
 
u3phy_vîsi⁄
;

30 
u3phy
 = 
	`mÆloc
((
u3phy_öfo
));

31 i‡(
u3phy
 =
NULL
)

32  
PHY_FALSE
;

34 #i‡
	`deföed
 (
CONFIG_RALINK_MT7621
)

35 
u3phy_p1
 = 
	`mÆloc
((
u3phy_öfo
));

36 i‡(
u3phy_p1
 =
NULL
)

37  
PHY_FALSE
;

40 
u3phy
->
phyd_vîsi⁄_addr
 = 
U3_PHYD_B2_BASE
 + 0xe4;

41 #i‡
	`deföed
 (
CONFIG_RALINK_MT7621
)

42 
u3phy_p1
->
phyd_vîsi⁄_addr
 = 
U3_PHYD_B2_BASE_P1
 + 0xe4;

45 #ifde‡
CONFIG_PROJECT_PHY


47 
u3phy
->
u2phy_ªgs
 = (
u2phy_ªg
 *)
U2_PHY_BASE
;

48 
u3phy
->
u3phyd_ªgs
 = (
u3phyd_ªg
 *)
U3_PHYD_BASE
;

49 
u3phy
->
u3phyd_b™k2_ªgs
 = (
u3phyd_b™k2_ªg
 *)
U3_PHYD_B2_BASE
;

50 
u3phy
->
u3phya_ªgs
 = (
u3phya_ªg
 *)
U3_PHYA_BASE
;

51 
u3phy
->
u3phya_da_ªgs
 = (
u3phya_da_ªg
 *)
U3_PHYA_DA_BASE
;

52 
u3phy
->
sif¶v_chù_ªgs
 = (
sif¶v_chù_ªg
 *)
SIFSLV_CHIP_BASE
;

53 
u3phy
->
sif¶v_fm_ªgs
 = (
sif¶v_fm_„g
 *)
SIFSLV_FM_FEG_BASE
;

54 
u3phy_›s
 = &
¥oje˘_›î©‹s
;

56 #i‡
	`deföed
 (
CONFIG_RALINK_MT7621
)

57 
u3phy_p1
->
u2phy_ªgs
 = (
u2phy_ªg
 *)
U2_PHY_BASE_P1
;

58 
u3phy_p1
->
u3phyd_ªgs
 = (
u3phyd_ªg
 *)
U3_PHYD_BASE_P1
;

59 
u3phy_p1
->
u3phyd_b™k2_ªgs
 = (
u3phyd_b™k2_ªg
 *)
U3_PHYD_B2_BASE_P1
;

60 
u3phy_p1
->
u3phya_ªgs
 = (
u3phya_ªg
 *)
U3_PHYA_BASE_P1
;

61 
u3phy_p1
->
u3phya_da_ªgs
 = (
u3phya_da_ªg
 *)
U3_PHYA_DA_BASE_P1
;

62 
u3phy_p1
->
sif¶v_chù_ªgs
 = (
sif¶v_chù_ªg
 *)
SIFSLV_CHIP_BASE
;

63 
u3phy_p1
->
sif¶v_fm_ªgs
 = (
sif¶v_fm_„g
 *)
SIFSLV_FM_FEG_BASE
;

68  
PHY_TRUE
;

69 
	}
}

71 
PHY_INT32
 
	$U3PhyWrôeFõld8
(
PHY_INT32
 
addr
, PHY_INT32 
off£t
, PHY_INT32 
mask
, PHY_INT32 
vÆue
){

72 
PHY_INT8
 
cur_vÆue
;

73 
PHY_INT8
 
√w_vÆue
;

75 
cur_vÆue
 = 
	`U3PhyRódReg8
(
addr
);

76 
√w_vÆue
 = (
cur_vÆue
 & (~
mask
)Ë| (
vÆue
 << 
off£t
);

78 
	`U3PhyWrôeReg8
(
addr
, 
√w_vÆue
);

79  
PHY_TRUE
;

80 
	}
}

82 
PHY_INT32
 
	$U3PhyWrôeFõld32
(
PHY_INT32
 
addr
, PHY_INT32 
off£t
, PHY_INT32 
mask
, PHY_INT32 
vÆue
){

83 
PHY_INT32
 
cur_vÆue
;

84 
PHY_INT32
 
√w_vÆue
;

86 
cur_vÆue
 = 
	`U3PhyRódReg32
(
addr
);

87 
√w_vÆue
 = (
cur_vÆue
 & (~
mask
)Ë| ((
vÆue
 << 
off£t
) & mask);

88 
	`U3PhyWrôeReg32
(
addr
, 
√w_vÆue
);

91  
PHY_TRUE
;

92 
	}
}

94 
PHY_INT32
 
	$U3PhyRódFõld8
(
PHY_INT32
 
addr
,PHY_INT32 
off£t
,PHY_INT32 
mask
){

96  ((
	`U3PhyRódReg8
(
addr
Ë& 
mask
Ë>> 
off£t
);

97 
	}
}

99 
PHY_INT32
 
	$U3PhyRódFõld32
(
PHY_INT32
 
addr
, PHY_INT32 
off£t
, PHY_INT32 
mask
){

101  ((
	`U3PhyRódReg32
(
addr
Ë& 
mask
Ë>> 
off£t
);

102 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/usb/host/mtk-phy.h

1 #i‚de‡
__MTK_PHY_NEW_H


2 
	#__MTK_PHY_NEW_H


	)

7 #i‡
deföed
 (
CONFIG_RALINK_MT7621
)

8 
	#CONFIG_PROJECT_7621


9 
	#CONFIG_U3_PHY_AHB_SUPPORT


10 
	#CONFIG_PROJECT_PHY


	)

14 #i‡
deföed
 (
CONFIG_RALINK_MT7621
)

15 
	#PHY_BASE
 0xBE1D0000

	)

16 
	#SIFSLV_FM_FEG_BASE
 (
PHY_BASE
+0x100)

	)

17 
	#SIFSLV_CHIP_BASE
 (
PHY_BASE
+0x700)

	)

18 
	#U2_PHY_BASE
 (
PHY_BASE
+0x800)

	)

19 
	#U3_PHYD_BASE
 (
PHY_BASE
+0x900)

	)

20 
	#U3_PHYD_B2_BASE
 (
PHY_BASE
+0xa00)

	)

21 
	#U3_PHYA_BASE
 (
PHY_BASE
+0xb00)

	)

22 
	#U3_PHYA_DA_BASE
 (
PHY_BASE
+0xc00)

	)

24 
	#SIFSLV_FM_FEG_BASE_P1
 (
PHY_BASE
+0x100)

	)

25 
	#SIFSLV_CHIP_BASE_P1
 (
PHY_BASE
+0x700)

	)

26 
	#U2_PHY_BASE_P1
 (
PHY_BASE
+0x1000)

	)

27 
	#U3_PHYD_BASE_P1
 (
PHY_BASE
+0x1100)

	)

28 
	#U3_PHYD_B2_BASE_P1
 (
PHY_BASE
+0x1200)

	)

29 
	#U3_PHYA_BASE_P1
 (
PHY_BASE
+0x1300)

	)

30 
	#U3_PHYA_DA_BASE_P1
 (
PHY_BASE
+0x1400)

	)

47 
	tPHY_UINT32
;

48 
	tPHY_INT32
;

49 
	tPHY_UINT16
;

50 
	tPHY_INT16
;

51 
	tPHY_UINT8
;

52 
	tPHY_INT8
;

55 
PHY_UINT32
 
	tPHY_LE32
;

58 
	#PHY_FALSE
 0

	)

59 
	#PHY_TRUE
 1

	)

61 
	#RET_SUCCESS
 0

	)

62 
	#RET_FAIL
 1

	)

65 
	#DRV_WrôeReg32
(
addr
,
d©a
Ë((*(vﬁ©ûê
PHY_UINT32
 *)◊ddr)Ë()(d©a))

	)

66 
	#DRV_Reg32
(
addr
Ë(*(vﬁ©ûê
PHY_UINT32
 *)◊ddr))

	)

68 
	#DRV_MDELAY
 
mdñay


	)

69 
	#DRV_MSLEEP
 
mdñay


	)

70 
	#DRV_UDELAY
 
udñay


	)

71 
	#DRV_USLEEP
 
udñay


	)

74 
PHY_INT32
 
U3PhyWrôeReg32
(
PHY_UINT32
 
addr
, PHY_UINT32 
d©a
);

75 
PHY_INT32
 
U3PhyRódReg32
(
PHY_UINT32
 
addr
);

76 
PHY_INT32
 
U3PhyWrôeReg8
(
PHY_UINT32
 
addr
, 
PHY_UINT8
 
d©a
);

77 
PHY_INT8
 
U3PhyRódReg8
(
PHY_UINT32
 
addr
);

80 
PHY_INT32
 
U3PhyWrôeFõld8
(PHY_INT32 
addr
, PHY_INT32 
off£t
, PHY_INT32 
mask
, PHY_INT32 
vÆue
);

81 
PHY_INT32
 
U3PhyWrôeFõld32
(PHY_INT32 
addr
, PHY_INT32 
off£t
, PHY_INT32 
mask
, PHY_INT32 
vÆue
);

82 
PHY_INT32
 
U3PhyRódFõld8
(PHY_INT32 
addr
, PHY_INT32 
off£t
, PHY_INT32 
mask
);

83 
PHY_INT32
 
U3PhyRódFõld32
(PHY_INT32 
addr
, PHY_INT32 
off£t
, PHY_INT32 
mask
);

85 
	su3phy_öfo
 {

86 
PHY_INT32
 
	mphy_vîsi⁄
;

87 
PHY_INT32
 
	mphyd_vîsi⁄_addr
;

89 #ifde‡
CONFIG_PROJECT_PHY


91 
u2phy_ªg
 *
	mu2phy_ªgs
;

92 
u3phya_ªg
 *
	mu3phya_ªgs
;

93 
u3phya_da_ªg
 *
	mu3phya_da_ªgs
;

94 
u3phyd_ªg
 *
	mu3phyd_ªgs
;

95 
u3phyd_b™k2_ªg
 *
	mu3phyd_b™k2_ªgs
;

96 
sif¶v_chù_ªg
 *
	msif¶v_chù_ªgs
;

97 
sif¶v_fm_„g
 *
	msif¶v_fm_ªgs
;

102 
	su3phy_›î©‹
 {

103 
PHY_INT32
 (*
öô
Ë(
u3phy_öfo
 *
	möfo
);

104 
PHY_INT32
 (*
ch™ge_pùe_pha£
Ë(
u3phy_öfo
 *
	möfo
, PHY_INT32 
	mphy_drv
, PHY_INT32 
	mpùe_pha£
);

105 
PHY_INT32
 (*
eyesˇn_öô
Ë(
u3phy_öfo
 *
	möfo
);

106 
PHY_INT32
 (*
eyesˇn
Ë(
u3phy_öfo
 *
	möfo
, PHY_INT32 
	mx_t1
, PHY_INT32 
	my_t1
, PHY_INT32 
	mx_br
, PHY_INT32 
	my_br
, PHY_INT32 
	mdñè_x
, PHY_INT32 
	mdñè_y
, PHY_INT32 
	meye_˙t
, PHY_INT32 
	mnum_˙t
, PHY_INT32 
	mPI_ˇl_í
, PHY_INT32 
	mnum_ign‹e_˙t
);

107 
PHY_INT32
 (*
u2_ßve_cuºít_íåy
Ë(
u3phy_öfo
 *
	möfo
);

108 
PHY_INT32
 (*
u2_ßve_cuºít_ªcovîy
Ë(
u3phy_öfo
 *
	möfo
);

109 
PHY_INT32
 (*
u2_¶ew_øã_ˇlibøti⁄
Ë(
u3phy_öfo
 *
	möfo
);

112 #ifde‡
U3_PHY_LIB


113 
	#AUTOEXT


	)

115 
	#AUTOEXT
 

	)

118 
AUTOEXT
 
u3phy_öfo
 *
u3phy
;

119 
AUTOEXT
 
u3phy_öfo
 *
	gu3phy_p1
;

120 
AUTOEXT
 
u3phy_›î©‹
 *
	gu3phy_›s
;

124 
	#LO_BYTE
(
x
Ë((
PHY_UINT8
)((xË& 0xFF))

	)

125 
	#HI_BYTE
(
x
Ë((
PHY_UINT8
)(((xË& 0xFF00Ë>> 8))

	)

129 
	mSCAN_UP
,

130 
	mSCAN_DN


131 } 
	tíumSˇnDú
;

133 
	s°rucSˇnRegi⁄


135 
PHY_INT8
 
	mbX_é
;

136 
PHY_INT8
 
	mbY_é
;

137 
PHY_INT8
 
	mbX_br
;

138 
PHY_INT8
 
	mbY_br
;

139 
PHY_INT8
 
	mbDñèX
;

140 
PHY_INT8
 
	mbDñèY
;

143 
	s°rucTe°Cy˛e


145 
PHY_UINT16
 
	mwEyeC¡
;

146 
PHY_INT8
 
	mbNumOfEyeC¡
;

147 
PHY_INT8
 
	mbPICÆEn
;

148 
PHY_INT8
 
	mbNumOfIgn‹eC¡
;

151 
	#ERRCNT_MAX
 128

	)

152 
	#CYCLE_COUNT_MAX
 15

	)

155 
	#MAX_X
 127

	)

156 
	#MAX_Y
 127

	)

157 
	#MIN_X
 0

	)

158 
	#MIN_Y
 0

	)

160 
PHY_INT32
 
u3phy_öô
();

161 
PHY_INT32
 
mt7628_phy_öô
();

162 
PHY_INT32
 
mt7628_phy_down
();

164 
AUTOEXT
 
°rucSˇnRegi⁄
 
	g_rEye1
;

165 
AUTOEXT
 
°rucSˇnRegi⁄
 
	g_rEye2
;

166 
AUTOEXT
 
°rucTe°Cy˛e
 
	g_rTe°Cy˛e
;

167 
AUTOEXT
 
PHY_UINT8
 
	g_bXcuº
;

168 
AUTOEXT
 
PHY_UINT8
 
	g_bYcuº
;

169 
AUTOEXT
 
íumSˇnDú
 
	g_eSˇnDú
;

170 
AUTOEXT
 
PHY_INT8
 
	g_fgXChged
;

171 
AUTOEXT
 
PHY_INT8
 
	g_bPIResu…
;

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/usb/host/xhci-mem.c

17 
	~<asm/addr•a˚.h
>

18 
	~<asm/byã‹dî.h
>

19 
	~<asm/ˇche.h
>

20 
	~<asm/î∫o.h
>

22 
	~<compûî.h
>

23 
	~<comm⁄.h
>

24 
	~<mÆloc.h
>

26 
	~<usb.h
>

28 
	~<π_mm≠.h
>

30 
	~"xhci.h
"

34 #ifdef 
XHCI_MEM_DEBUG


35 
	#XHCI_MEM_PRINTF
(
fmt
,
¨gs
...Ë
	`¥ötf
 (fmà,##¨gs)

	)

37 
	#XHCI_MEM_PRINTF
(
fmt
,
¨gs
...)

	)

40 
	#CACHELINE_SIZE
 
CONFIG_SYS_CACHELINE_SIZE


	)

48 
	$xhci_Êush_ˇche
(
uöt32_t
 
addr
, 
u32
 
Àn
)

50 
	`BUG_ON
((*)
addr
 =
NULL
 || 
Àn
 == 0);

52 
	`Êush_dˇche_ønge
(
addr
 & ~(
CACHELINE_SIZE
 - 1),

53 
	`ALIGN
(
addr
 + 
Àn
, 
CACHELINE_SIZE
));

54 
	}
}

63 
	$xhci_övÆ_ˇche
(
uöt32_t
 
addr
, 
u32
 
Àn
)

65 
	`BUG_ON
((*)
addr
 =
NULL
 || 
Àn
 == 0);

67 
	`övÆid©e_dˇche_ønge
(
addr
 & ~(
CACHELINE_SIZE
 - 1),

68 
	`ALIGN
(
addr
 + 
Àn
, 
CACHELINE_SIZE
));

69 
	}
}

78 
	$xhci_£gmít_‰ì
(
xhci_£gmít
 *
£g
)

80 i‡(
£g
) {

81 i‡(
£g
->
åbs
) {

82 
	`‰ì
(
£g
->
åbs
);

83 
£g
->
åbs
 = 
NULL
;

85 
	`‰ì
(
£g
);

87 
	}
}

95 
	$xhci_rög_‰ì
(
xhci_rög
 *
rög
)

97 
xhci_£gmít
 *
£g
;

98 
xhci_£gmít
 *
fú°_£g
;

100 
	`BUG_ON
(!
rög
);

102 
fú°_£g
 = 
rög
->first_seg;

103 
£g
 = 
fú°_£g
->
√xt
;

104 
£g
 !
fú°_£g
) {

105 
xhci_£gmít
 *
√xt
 = 
£g
->next;

106 
	`xhci_£gmít_‰ì
(
£g
);

107 
£g
 = 
√xt
;

109 
	`xhci_£gmít_‰ì
(
fú°_£g
);

111 
	`‰ì
(
rög
);

112 
	}
}

120 
	$xhci_‰ì_c⁄èöî_˘x
(
xhci_c⁄èöî_˘x
 *
˘x
)

122 i‡(
˘x
) {

123 i‡(
˘x
->
byãs
) {

125 
	`‰ì
(
˘x
->
byãs
);

127 
	`‰ì
(
	`KSEG0ADDR
(
˘x
));

129 
	}
}

137 
	$xhci_‰ì_vút_devi˚s
(
xhci_˘æ
 *
˘æ
)

139 
i
;

140 
¶Ÿ_id
;

141 
xhci_vút_devi˚
 *
vút_dev
;

147 
¶Ÿ_id
 = 0; slŸ_id < 
MAX_HC_SLOTS
; slot_id++) {

148 
vút_dev
 = 
˘æ
->
devs
[
¶Ÿ_id
];

149 i‡(!
vút_dev
)

152 
˘æ
->
dcbØ
->
dev_c⁄ãxt_±rs
[
¶Ÿ_id
] = 0;

154 
i
 = 0; i < 31; ++i)

155 i‡(
vút_dev
->
ïs
[
i
].
rög
)

156 
	`xhci_rög_‰ì
(
vút_dev
->
ïs
[
i
].
rög
);

158 i‡(
vút_dev
->
ö_˘x
)

159 
	`xhci_‰ì_c⁄èöî_˘x
(
vút_dev
->
ö_˘x
);

160 i‡(
vút_dev
->
out_˘x
)

161 
	`xhci_‰ì_c⁄èöî_˘x
(
vút_dev
->
out_˘x
);

163 
	`‰ì
(
vút_dev
);

165 
˘æ
->
devs
[
¶Ÿ_id
] = 
NULL
;

167 
	}
}

175 
	$xhci_˛ónup
(
xhci_˘æ
 *
˘æ
)

177 i‡(
˘æ
->
evít_rög
)

178 
	`xhci_rög_‰ì
(
˘æ
->
evít_rög
);

179 i‡(
˘æ
->
cmd_rög
)

180 
	`xhci_rög_‰ì
(
˘æ
->
cmd_rög
);

181 i‡(
˘æ
)

182 
	`xhci_‰ì_vút_devi˚s
(
˘æ
);

183 i‡(
˘æ
->
î°
.
íåõs
)

184 
	`‰ì
(
˘æ
->
î°
.
íåõs
);

185 i‡(
˘æ
->
dcbØ
)

186 
	`‰ì
(
˘æ
->
dcbØ
);

187 
	`mem£t
(
˘æ
, '\0', (
xhci_˘æ
));

188 
	}
}

196 *
	$xhci_mÆloc
(
size
)

198 *
±r
;

199 
size_t
 
ˇchñöe_size
 = 
	`max
(
XHCI_ALIGNMENT
, 
CACHELINE_SIZE
);

201 
±r
 = 
	`memÆign
(
ˇchñöe_size
, 
	`ALIGN
(
size
, cacheline_size));

202 
	`BUG_ON
(!
±r
);

203 
	`mem£t
(
±r
, '\0', 
size
);

205 
	`xhci_Êush_ˇche
((
uöt32_t
)
±r
, 
size
);

207  
±r
;

208 
	}
}

221 
	$xhci_lök_£gmíts
(
xhci_£gmít
 *
¥ev
,

222 
xhci_£gmít
 *
√xt
, 
lök_åbs
)

224 
u32
 
vÆ
;

225 
u64
 
vÆ_64
 = 0;

227 i‡(!
¥ev
 || !
√xt
)

229 
¥ev
->
√xt
 =Çext;

230 i‡(
lök_åbs
) {

231 
vÆ_64
 = (
uöçå_t
)
√xt
->
åbs
;

232 
¥ev
->
åbs
[
TRBS_PER_SEGMENT
-1].
lök
.
£gmít_±r
 = 
vÆ_64
;

238 
vÆ
 = 
	`À32_to_˝u
(
¥ev
->
åbs
[
TRBS_PER_SEGMENT
-1].
lök
.
c⁄åﬁ
);

239 
vÆ
 &~
TRB_TYPE_BITMASK
;

240 
vÆ
 |(
TRB_LINK
 << 
TRB_TYPE_SHIFT
);

242 
¥ev
->
åbs
[
TRBS_PER_SEGMENT
-1].
lök
.
c⁄åﬁ
 = 
	`˝u_to_À32
(
vÆ
);

244 
	}
}

252 
	$xhci_öôülize_rög_öfo
(
xhci_rög
 *
rög
)

257 
rög
->
íqueue
 =Ñög->
fú°_£g
->
åbs
;

258 
rög
->
íq_£g
 =Ñög->
fú°_£g
;

259 
rög
->
dequeue
 =Ñög->
íqueue
;

260 
rög
->
deq_£g
 =Ñög->
fú°_£g
;

268 
rög
->
cy˛e_°©e
 = 1;

269 
	}
}

280 
xhci_£gmít
 *
	$xhci_£gmít_Æloc
()

282 
xhci_£gmít
 *
£g
;

284 
£g
 = (
xhci_£gmít
 *)
	`KSEG1ADDR
(
	`xhci_mÆloc
((xhci_segment)));

285 
	`BUG_ON
(!
£g
);

287 
£g
->
åbs
 = (
xhci_åb
 *)
	`KSEG1ADDR
(
	`xhci_mÆloc
(
SEGMENT_SIZE
));

289 
£g
->
√xt
 = 
NULL
;

291  
£g
;

292 
	}
}

309 
xhci_rög
 *
	$xhci_rög_Æloc
(
num_£gs
, 
lök_åbs
)

311 
xhci_rög
 *
rög
;

312 
xhci_£gmít
 *
¥ev
;

314 
rög
 = (
xhci_rög
 *)
	`KSEG1ADDR
(
	`xhci_mÆloc
((xhci_ring)));

315 
	`BUG_ON
(!
rög
);

317 i‡(
num_£gs
 == 0)

318  
rög
;

320 
rög
->
fú°_£g
 = 
	`xhci_£gmít_Æloc
();

321 
	`BUG_ON
(!
rög
->
fú°_£g
);

323 
num_£gs
--;

325 
¥ev
 = 
rög
->
fú°_£g
;

326 
num_£gs
 > 0) {

327 
xhci_£gmít
 *
√xt
;

329 
√xt
 = 
	`xhci_£gmít_Æloc
();

330 
	`BUG_ON
(!
√xt
);

332 
	`xhci_lök_£gmíts
(
¥ev
, 
√xt
, 
lök_åbs
);

334 
¥ev
 = 
√xt
;

335 
num_£gs
--;

337 
	`xhci_lök_£gmíts
(
¥ev
, 
rög
->
fú°_£g
, 
lök_åbs
);

338 i‡(
lök_åbs
) {

340 
¥ev
->
åbs
[
TRBS_PER_SEGMENT
-1].
lök
.
c⁄åﬁ
 |=

341 
	`˝u_to_À32
(
LINK_TOGGLE
);

343 
	`xhci_öôülize_rög_öfo
(
rög
);

345  
rög
;

346 
	}
}

355 
xhci_c⁄èöî_˘x


356 *
	$xhci_Æloc_c⁄èöî_˘x
(
xhci_˘æ
 *
˘æ
, 
ty≥
)

358 
xhci_c⁄èöî_˘x
 *
˘x
;

360 
˘x
 = (
xhci_c⁄èöî_˘x
 *)
	`KSEG1ADDR
(

362 
	`mÆloc
((
xhci_c⁄èöî_˘x
)));

363 
	`BUG_ON
(!
˘x
);

365 
	`BUG_ON
((
ty≥
 !
XHCI_CTX_TYPE_DEVICE
Ë&& (ty≥ !
XHCI_CTX_TYPE_INPUT
));

366 
˘x
->
ty≥
 =Åype;

367 
˘x
->
size
 = (
MAX_EP_CTX_NUM
 + 1) *

368 
	`CTX_SIZE
(
	`ªadl
(&
˘æ
->
hc¸
->
¸_hc˝¨ams
));

369 i‡(
ty≥
 =
XHCI_CTX_TYPE_INPUT
)

370 
˘x
->
size
 +
	`CTX_SIZE
(
	`ªadl
(&
˘æ
->
hc¸
->
¸_hc˝¨ams
));

372 
˘x
->
byãs
 = (
u8
 *)
	`KSEG1ADDR
(
	`xhci_mÆloc
(˘x->
size
));

374  
˘x
;

375 
	}
}

383 
	$xhci_Æloc_vút_devi˚
(
usb_devi˚
 *
udev
)

385 
u64
 
byã_64
 = 0;

386 
¶Ÿ_id
 = 
udev
->slot_id;

387 
xhci_vút_devi˚
 *
vút_dev
;

388 
xhci_˘æ
 *
˘æ
 = 
udev
->
c⁄åﬁÀr
;

391 i‡(
˘æ
->
devs
[
¶Ÿ_id
]) {

392 
	`¥ötf
("Vúàdev f‹ slŸ[%d]áÃódyáŒoˇãd\n", 
¶Ÿ_id
);

393  -
EEXIST
;

396 
˘æ
->
devs
[
¶Ÿ_id
] = (
xhci_vút_devi˚
 *)
	`KSEG1ADDR
(

397 
	`xhci_mÆloc
((
xhci_vút_devi˚
)));

399 i‡(!
˘æ
->
devs
[
¶Ÿ_id
]) {

400 
	`puts
("FailedÅoállocate virtual device\n");

401  -
ENOMEM
;

404 
	`mem£t
(
˘æ
->
devs
[
¶Ÿ_id
], 0, (
xhci_vút_devi˚
));

405 
vút_dev
 = 
˘æ
->
devs
[
¶Ÿ_id
];

408 
vút_dev
->
out_˘x
 = 
	`xhci_Æloc_c⁄èöî_˘x
(
˘æ
,

409 
XHCI_CTX_TYPE_DEVICE
);

410 i‡(!
vút_dev
->
out_˘x
) {

411 
	`puts
("FailedÅoállocate out context for virt dev\n");

412  -
ENOMEM
;

416 
vút_dev
->
ö_˘x
 = 
	`xhci_Æloc_c⁄èöî_˘x
(
˘æ
,

417 
XHCI_CTX_TYPE_INPUT
);

418 i‡(!
vút_dev
->
ö_˘x
) {

419 
	`puts
("FailedÅoállocate in context for virt dev\n");

420  -
ENOMEM
;

424 
vút_dev
->
ïs
[0].
rög
 = 
	`xhci_rög_Æloc
(1, 
åue
);

426 
byã_64
 = (
uöçå_t
)(
vút_dev
->
out_˘x
->
byãs
);

429 
˘æ
->
dcbØ
->
dev_c⁄ãxt_±rs
[
¶Ÿ_id
] = 
byã_64
;

431 
	`xhci_Êush_ˇche
((
uöt32_t
)&
˘æ
->
dcbØ
->
dev_c⁄ãxt_±rs
[
¶Ÿ_id
],

432 (
__À64
));

434 
	}
}

445 
	$xhci_mem_öô
(
xhci_˘æ
 *
˘æ
, 
xhci_hc¸
 *
hc¸
,

446 
xhci_hc‹
 *
hc‹
)

448 
uöt64_t
 
vÆ_64
;

449 
uöt64_t
 
åb_64
;

450 
uöt32_t
 
vÆ
;

451 
deq
;

452 
i
;

453 
xhci_£gmít
 *
£g
;

456 
˘æ
->
dcbØ
 = (
xhci_devi˚_c⁄ãxt_¨øy
 *)
	`KSEG1ADDR
(

457 
	`xhci_mÆloc
((
xhci_devi˚_c⁄ãxt_¨øy
)));

458 i‡(
˘æ
->
dcbØ
 =
NULL
) {

459 
	`puts
("unableÅoállocate DCBA\n");

460  -
ENOMEM
;

463 
vÆ_64
 = (
uöçå_t
)
˘æ
->
dcbØ
;

465 
	`xhci_wrôeq
(&
hc‹
->
‹_dcbØp
, 
vÆ_64
);

468 
˘æ
->
cmd_rög
 = 
	`xhci_rög_Æloc
(1, 
åue
);

471 
åb_64
 = (
uöçå_t
)
˘æ
->
cmd_rög
->
fú°_£g
->
åbs
;

472 
vÆ_64
 = 
	`xhci_ªadq
(&
hc‹
->
‹_¸¸
);

473 
vÆ_64
 = (vÆ_64 & (
u64
Ë
CMD_RING_RSVD_BITS
) |

474 (
åb_64
 & (
u64
Ë~
CMD_RING_RSVD_BITS
) |

475 
˘æ
->
cmd_rög
->
cy˛e_°©e
;

476 
	`xhci_wrôeq
(&
hc‹
->
‹_¸¸
, 
vÆ_64
);

479 
vÆ
 = 
	`xhci_ªadl
(&
hc¸
->
¸_dboff
);

480 
vÆ
 &
DBOFF_MASK
;

481 
˘æ
->
dba
 = (
xhci_do‹bñl_¨øy
 *)((*)
hc¸
 + 
vÆ
);

484 
vÆ
 = 
	`xhci_ªadl
(&
hc¸
->
¸_πsoff
);

485 
vÆ
 &
RTSOFF_MASK
;

486 
˘æ
->
run_ªgs
 = (
xhci_run_ªgs
 *)((*)
hc¸
 + 
vÆ
);

489 
˘æ
->
ú_£t
 = &˘æ->
run_ªgs
->ir_set[0];

492 
˘æ
->
evít_rög
 = 
	`xhci_rög_Æloc
(
ERST_NUM_SEGS
, 
Ál£
);

493 
˘æ
->
î°
.
íåõs
 = (
xhci_î°_íåy
 *)
	`KSEG1ADDR
(

494 
	`xhci_mÆloc
((
xhci_î°_íåy
Ë* 
ERST_NUM_SEGS
));

496 
˘æ
->
î°
.
num_íåõs
 = 
ERST_NUM_SEGS
;

498 
vÆ
 = 0, 
£g
 = 
˘æ
->
evít_rög
->
fú°_£g
;

499 
vÆ
 < 
ERST_NUM_SEGS
;

500 
vÆ
++) {

501 
åb_64
 = 0;

502 
åb_64
 = (
uöçå_t
)
£g
->
åbs
;

503 
xhci_î°_íåy
 *
íåy
 = &
˘æ
->
î°
.
íåõs
[
vÆ
];

504 
	`xhci_wrôeq
(&
íåy
->
£g_addr
, 
åb_64
);

505 
íåy
->
£g_size
 = 
	`˝u_to_À32
(
TRBS_PER_SEGMENT
);

506 
íåy
->
rsvd
 = 0;

507 
£g
 = seg->
√xt
;

509 
	`xhci_Êush_ˇche
((
uöt32_t
)
˘æ
->
î°
.
íåõs
,

510 
ERST_NUM_SEGS
 * (
xhci_î°_íåy
));

512 
deq
 = ()
˘æ
->
evít_rög
->
dequeue
;

515 
	`xhci_wrôeq
(&
˘æ
->
ú_£t
->
î°_dequeue
,

516 ((
u64
)
deq
 & (u64)~
ERST_PTR_MASK
));

519 
vÆ
 = 
	`xhci_ªadl
(&
˘æ
->
ú_£t
->
î°_size
);

520 
vÆ
 &
ERST_SIZE_MASK
;

521 
vÆ
 |
ERST_NUM_SEGS
;

522 
	`xhci_wrôñ
(&
˘æ
->
ú_£t
->
î°_size
, 
vÆ
);

525 
vÆ_64
 = 
	`xhci_ªadq
(&
˘æ
->
ú_£t
->
î°_ba£
);

526 
vÆ_64
 &
ERST_PTR_MASK
;

527 
vÆ_64
 |((
u32
)(
˘æ
->
î°
.
íåõs
Ë& ~
ERST_PTR_MASK
);

529 
	`xhci_wrôeq
(&
˘æ
->
ú_£t
->
î°_ba£
, 
vÆ_64
);

532 
i
 = 0; i < 
MAX_HC_SLOTS
; ++i)

533 
˘æ
->
devs
[
i
] = 
NULL
;

540 
	`xhci_wrôñ
(&
hc‹
->
‹_dn˘æ
, 0x0);

543 
	}
}

551 
xhci_öput_c⁄åﬁ_˘x


552 *
	$xhci_gë_öput_c⁄åﬁ_˘x
(
xhci_c⁄èöî_˘x
 *
˘x
)

554 
	`BUG_ON
(
˘x
->
ty≥
 !
XHCI_CTX_TYPE_INPUT
);

555  (
xhci_öput_c⁄åﬁ_˘x
 *)
˘x
->
byãs
;

556 
	}
}

565 
xhci_¶Ÿ_˘x
 *
	$xhci_gë_¶Ÿ_˘x
(
xhci_˘æ
 *
˘æ
,

566 
xhci_c⁄èöî_˘x
 *
˘x
)

568 i‡(
˘x
->
ty≥
 =
XHCI_CTX_TYPE_DEVICE
)

569  (
xhci_¶Ÿ_˘x
 *)
˘x
->
byãs
;

571  (
xhci_¶Ÿ_˘x
 *)

572 (
˘x
->
byãs
 + 
	`CTX_SIZE
(
	`ªadl
(&
˘æ
->
hc¸
->
¸_hc˝¨ams
)));

573 
	}
}

583 
xhci_ï_˘x
 *
	$xhci_gë_ï_˘x
(
xhci_˘æ
 *
˘æ
,

584 
xhci_c⁄èöî_˘x
 *
˘x
,

585 
ï_ödex
)

588 
ï_ödex
++;

589 i‡(
˘x
->
ty≥
 =
XHCI_CTX_TYPE_INPUT
)

590 
ï_ödex
++;

592  (
xhci_ï_˘x
 *)

593 (
˘x
->
byãs
 +

594 (
ï_ödex
 * 
	`CTX_SIZE
(
	`ªadl
(&
˘æ
->
hc¸
->
¸_hc˝¨ams
))));

595 
	}
}

608 
	$xhci_ídpoöt_c›y
(
xhci_˘æ
 *
˘æ
,

609 
xhci_c⁄èöî_˘x
 *
ö_˘x
,

610 
xhci_c⁄èöî_˘x
 *
out_˘x
,

611 
ï_ödex
)

613 
xhci_ï_˘x
 *
out_ï_˘x
;

614 
xhci_ï_˘x
 *
ö_ï_˘x
;

616 
out_ï_˘x
 = 
	`xhci_gë_ï_˘x
(
˘æ
, 
out_˘x
, 
ï_ödex
);

617 
ö_ï_˘x
 = 
	`xhci_gë_ï_˘x
(
˘æ
, 
ö_˘x
, 
ï_ödex
);

619 
ö_ï_˘x
->
ï_öfo
 = 
out_ï_˘x
->ep_info;

620 
ö_ï_˘x
->
ï_öfo2
 = 
out_ï_˘x
->ep_info2;

621 
ö_ï_˘x
->
deq
 = 
out_ï_˘x
->deq;

622 
ö_ï_˘x
->
tx_öfo
 = 
out_ï_˘x
->tx_info;

623 
	}
}

637 
	$xhci_¶Ÿ_c›y
(
xhci_˘æ
 *
˘æ
, 
xhci_c⁄èöî_˘x
 *
ö_˘x
,

638 
xhci_c⁄èöî_˘x
 *
out_˘x
)

640 
xhci_¶Ÿ_˘x
 *
ö_¶Ÿ_˘x
;

641 
xhci_¶Ÿ_˘x
 *
out_¶Ÿ_˘x
;

643 
ö_¶Ÿ_˘x
 = 
	`xhci_gë_¶Ÿ_˘x
(
˘æ
, 
ö_˘x
);

644 
out_¶Ÿ_˘x
 = 
	`xhci_gë_¶Ÿ_˘x
(
˘æ
, 
out_˘x
);

646 
ö_¶Ÿ_˘x
->
dev_öfo
 = 
out_¶Ÿ_˘x
->dev_info;

647 
ö_¶Ÿ_˘x
->
dev_öfo2
 = 
out_¶Ÿ_˘x
->dev_info2;

648 
ö_¶Ÿ_˘x
->
â_öfo
 = 
out_¶Ÿ_˘x
->tt_info;

649 
ö_¶Ÿ_˘x
->
dev_°©e
 = 
out_¶Ÿ_˘x
->dev_state;

650 
	}
}

658 
	$xhci_£tup_addªsßbÀ_vút_dev
(
usb_devi˚
 *
udev
)

660 
usb_devi˚
 *
h›
 = 
udev
;

661 
xhci_vút_devi˚
 *
vút_dev
;

662 
xhci_ï_˘x
 *
ï0_˘x
;

663 
xhci_¶Ÿ_˘x
 *
¶Ÿ_˘x
;

664 
u32
 
p‹t_num
 = 0;

665 
u64
 
åb_64
 = 0;

666 
xhci_˘æ
 *
˘æ
 = 
udev
->
c⁄åﬁÀr
;

668 
vút_dev
 = 
˘æ
->
devs
[
udev
->
¶Ÿ_id
];

670 
	`BUG_ON
(!
vút_dev
);

673 
ï0_˘x
 = 
	`xhci_gë_ï_˘x
(
˘æ
, 
vút_dev
->
ö_˘x
, 0);

674 
¶Ÿ_˘x
 = 
	`xhci_gë_¶Ÿ_˘x
(
˘æ
, 
vút_dev
->
ö_˘x
);

677 
¶Ÿ_˘x
->
dev_öfo
 |
	`˝u_to_À32
(
	`LAST_CTX
(1) | 0);

679 
udev
->
•ìd
) {

680 
USB_SPEED_SUPER
:

681 
¶Ÿ_˘x
->
dev_öfo
 |
	`˝u_to_À32
(
SLOT_SPEED_SS
);

683 
USB_SPEED_HIGH
:

684 
¶Ÿ_˘x
->
dev_öfo
 |
	`˝u_to_À32
(
SLOT_SPEED_HS
);

686 
USB_SPEED_FULL
:

687 
¶Ÿ_˘x
->
dev_öfo
 |
	`˝u_to_À32
(
SLOT_SPEED_FS
);

689 
USB_SPEED_LOW
:

690 
¶Ÿ_˘x
->
dev_öfo
 |
	`˝u_to_À32
(
SLOT_SPEED_LS
);

694 
	`BUG
();

698 i‡(
h›
->
∑ª¡
)

699 
h›
->
∑ª¡
->parent)

700 
h›
 = h›->
∑ª¡
;

701 
p‹t_num
 = 
h›
->
p‹är
;

702 
	`XHCI_MEM_PRINTF
("p‹t_num = %d\n", 
p‹t_num
);

704 
¶Ÿ_˘x
->
dev_öfo2
 |=

705 
	`˝u_to_À32
(((
p‹t_num
 & 
ROOT_HUB_PORT_MASK
) <<

706 
ROOT_HUB_PORT_SHIFT
));

710 
ï0_˘x
->
ï_öfo2
 = 
	`˝u_to_À32
(
CTRL_EP
 << 
EP_TYPE_SHIFT
);

711 
	`XHCI_MEM_PRINTF
("SPEED = %d\n", 
udev
->
•ìd
);

713 
udev
->
•ìd
) {

714 
USB_SPEED_SUPER
:

715 
ï0_˘x
->
ï_öfo2
 |
	`˝u_to_À32
(((512 & 
MAX_PACKET_MASK
) <<

716 
MAX_PACKET_SHIFT
));

717 
	`XHCI_MEM_PRINTF
("Setting Packet size = 512bytes\n");

719 
USB_SPEED_HIGH
:

721 
USB_SPEED_FULL
:

722 
ï0_˘x
->
ï_öfo2
 |
	`˝u_to_À32
(((64 & 
MAX_PACKET_MASK
) <<

723 
MAX_PACKET_SHIFT
));

724 
	`XHCI_MEM_PRINTF
("Setting Packet size = 64bytes\n");

726 
USB_SPEED_LOW
:

727 
ï0_˘x
->
ï_öfo2
 |
	`˝u_to_À32
(((8 & 
MAX_PACKET_MASK
) <<

728 
MAX_PACKET_SHIFT
));

729 
	`XHCI_MEM_PRINTF
("Setting Packet size = 8bytes\n");

733 
	`BUG
();

737 
ï0_˘x
->
ï_öfo2
 |=

738 
	`˝u_to_À32
(((0 & 
MAX_BURST_MASK
Ë<< 
MAX_BURST_SHIFT
) |

739 ((3 & 
ERROR_COUNT_MASK
Ë<< 
ERROR_COUNT_SHIFT
));

741 
åb_64
 = (
uöçå_t
)
vút_dev
->
ïs
[0].
rög
->
fú°_£g
->
åbs
;

742 
ï0_˘x
->
deq
 = 
	`˝u_to_À64
(
åb_64
 | 
vút_dev
->
ïs
[0].
rög
->
cy˛e_°©e
);

746 
	`xhci_Êush_ˇche
((
uöt32_t
)
ï0_˘x
, (
xhci_ï_˘x
));

747 
	`xhci_Êush_ˇche
((
uöt32_t
)
¶Ÿ_˘x
, (
xhci_¶Ÿ_˘x
));

748 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/usb/host/xhci-mtk-power.c

1 
	~"xhci-mtk.h
"

2 
	~"xhci-mtk-powî.h
"

3 
	~"xhci.h
"

5 
	gg_num_u3_p‹t
;

6 
	gg_num_u2_p‹t
;

8 
	$íabÀXhciAŒP‹tPowî
(
xhci_hc‹
 *
hc‹
)

10 
i
;

11 
u32
 
p‹t_id
, 
ãmp
;

12 
__À32
 
__iomem
 
addr
;

15 
g_num_u3_p‹t
 = 
	`SSUSB_U3_PORT_NUM
(
	`ªadl
((c⁄° vﬁ©ûê
__iomem
 *)
SSUSB_IP_CAP
));

16 
g_num_u2_p‹t
 = 
	`SSUSB_U2_PORT_NUM
(
	`ªadl
((c⁄° vﬁ©ûê
__iomem
 *)
SSUSB_IP_CAP
));

18 
i
 = 1; i <
g_num_u3_p‹t
; i++) {

19 
p‹t_id
 = 
i
;

20 
addr
 = (
__À32
 
__iomem
)(&
hc‹
->
p‹åegs
);

21 
addr
 +
NUM_PORT_REGS
 * ((
p‹t_id
 - 1Ë& 0xffË* (
__À32
);

22 
ãmp
 = 
	`xhci_ªadl
((
__À32
 
__iomem
 *)
addr
);

23 
ãmp
 = 
	`xhci_p‹t_°©e_to_√uåÆ
(temp);

24 
ãmp
 |
PORT_POWER
;

25 
	`xhci_wrôñ
(
ãmp
, (
__À32
 
__iomem
 *)
addr
);

27 
i
 = 1; i <
g_num_u2_p‹t
; i++) {

28 
p‹t_id
=
i
+
g_num_u3_p‹t
;

29 
addr
 = (
__À32
 
__iomem
)(&
hc‹
->
p‹åegs
);

30 
addr
 +
NUM_PORT_REGS
 * ((
p‹t_id
 - 1Ë& 0xffË* (
__À32
);

31 
ãmp
 = 
	`xhci_ªadl
((
__À32
 
__iomem
 *)
addr
);

32 
ãmp
 = 
	`xhci_p‹t_°©e_to_√uåÆ
(temp);

33 
ãmp
 |
PORT_POWER
;

34 
	`xhci_wrôñ
(
ãmp
, (
__À32
 
__iomem
 *)
addr
);

36 
	}
}

38 
	$íabÀAŒClockPowî
()

40 
i
;

41 
u32
 
ãmp
;

43 
g_num_u3_p‹t
 = 
	`SSUSB_U3_PORT_NUM
(
	`ªadl
((c⁄° vﬁ©ûê
__iomem
 *)
SSUSB_IP_CAP
));

44 
g_num_u2_p‹t
 = 
	`SSUSB_U2_PORT_NUM
(
	`ªadl
((c⁄° vﬁ©ûê
__iomem
 *)
SSUSB_IP_CAP
));

47 
	`wrôñ
(
	`ªadl
((c⁄° vﬁ©ûê
__iomem
 *)
SSUSB_IP_PW_CTRL
Ë| (
SSUSB_IP_SW_RST
), (volatile __iomem *)SSUSB_IP_PW_CTRL);

48 
	`wrôñ
(
	`ªadl
((c⁄° vﬁ©ûê
__iomem
 *)
SSUSB_IP_PW_CTRL
Ë& (~
SSUSB_IP_SW_RST
), (volatile __iomem *)SSUSB_IP_PW_CTRL);

49 
	`wrôñ
(
	`ªadl
((c⁄° vﬁ©ûê
__iomem
 *)
SSUSB_IP_PW_CTRL_1
Ë& (~
SSUSB_IP_PDN
), (volatile __iomem *)SSUSB_IP_PW_CTRL_1);

52 
i
=0; i<
g_num_u3_p‹t
; i++){

53 
ãmp
 = 
	`ªadl
((c⁄° vﬁ©ûê
__iomem
 *)
	`SSUSB_U3_CTRL
(
i
));

54 
ãmp
 =Åem∞& (~
SSUSB_U3_PORT_PDN
Ë& (~
SSUSB_U3_PORT_DIS
);

55 
	`wrôñ
(
ãmp
, (vﬁ©ûê
__iomem
 *)
	`SSUSB_U3_CTRL
(
i
));

57 
i
=0; i<
g_num_u2_p‹t
; i++){

58 
ãmp
 = 
	`ªadl
((c⁄° vﬁ©ûê
__iomem
 *)
	`SSUSB_U2_CTRL
(
i
));

59 
ãmp
 =Åem∞& (~
SSUSB_U2_PORT_PDN
Ë& (~
SSUSB_U2_PORT_DIS
);

60 
	`wrôñ
(
ãmp
, (vﬁ©ûê
__iomem
 *)
	`SSUSB_U2_CTRL
(
i
));

62 
	`mdñay
(100);

63 
	}
}

74 
	$dißbÀP‹tClockPowî
()

76 
i
;

77 
u32
 
ãmp
;

79 
g_num_u3_p‹t
 = 
	`SSUSB_U3_PORT_NUM
(
	`ªadl
((c⁄° vﬁ©ûê
__iomem
 *)
SSUSB_IP_CAP
));

80 
g_num_u2_p‹t
 = 
	`SSUSB_U2_PORT_NUM
(
	`ªadl
((c⁄° vﬁ©ûê
__iomem
 *)
SSUSB_IP_CAP
));

82 
i
=0; i<
g_num_u3_p‹t
; i++){

83 
ãmp
 = 
	`ªadl
((c⁄° vﬁ©ûê
__iomem
 *)
	`SSUSB_U3_CTRL
(
i
));

84 
ãmp
 =Åem∞| (
SSUSB_U3_PORT_PDN
);

85 
	`wrôñ
(
ãmp
, (vﬁ©ûê
__iomem
 *)
	`SSUSB_U3_CTRL
(
i
));

87 
i
=0; i<
g_num_u2_p‹t
; i++){

88 
ãmp
 = 
	`ªadl
((c⁄° vﬁ©ûê
__iomem
 *)
	`SSUSB_U2_CTRL
(
i
));

89 
ãmp
 =Åem∞| (
SSUSB_U2_PORT_PDN
);

90 
	`wrôñ
(
ãmp
, (vﬁ©ûê
__iomem
 *)
	`SSUSB_U2_CTRL
(
i
));

92 
	`wrôñ
(
	`ªadl
((c⁄° vﬁ©ûê
__iomem
 *)
SSUSB_IP_PW_CTRL_1
Ë| (
SSUSB_IP_PDN
), (volatile __iomem *)SSUSB_IP_PW_CTRL_1);

93 
	}
}

99 
	$íabÀP‹tClockPowî
(
p‹t_ödex
, 
p‹t_ªv
)

101 
u32
 
ãmp
;

103 
	`wrôñ
(
	`ªadl
((c⁄° vﬁ©ûê
__iomem
 *)
SSUSB_IP_PW_CTRL_1
Ë& (~
SSUSB_IP_PDN
), (volatile __iomem *)SSUSB_IP_PW_CTRL_1);

105 if(
p‹t_ªv
 == 0x3){

106 
ãmp
 = 
	`ªadl
((c⁄° vﬁ©ûê
__iomem
 *)
	`SSUSB_U3_CTRL
(
p‹t_ödex
));

107 
ãmp
 =Åem∞& (~
SSUSB_U3_PORT_PDN
);

108 
	`wrôñ
(
ãmp
, (vﬁ©ûê
__iomem
 *)
	`SSUSB_U3_CTRL
(
p‹t_ödex
));

110 if(
p‹t_ªv
 == 0x2){

111 
ãmp
 = 
	`ªadl
((c⁄° vﬁ©ûê
__iomem
 *)
	`SSUSB_U2_CTRL
(
p‹t_ödex
));

112 
ãmp
 =Åem∞& (~
SSUSB_U2_PORT_PDN
);

113 
	`wrôñ
(
ãmp
, (vﬁ©ûê
__iomem
 *)
	`SSUSB_U2_CTRL
(
p‹t_ödex
));

115 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/usb/host/xhci-mtk-power.h

1 #i‚de‡
_XHCI_MTK_POWER_H


2 
	#_XHCI_MTK_POWER_H


	)

5 
	~"xhci.h
"

6 
	~"xhci-mtk.h
"

8 
íabÀXhciAŒP‹tPowî
(
xhci_hc‹
 *
hc‹
);

10 
íabÀAŒClockPowî
();

11 
dißbÀP‹tClockPowî
();

12 
íabÀP‹tClockPowî
(
p‹t_ödex
, 
p‹t_ªv
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/usb/host/xhci-mtk-scheduler.c

1 
	~<usb.h
>

3 
	~"xhci-mtk-scheduÀr.h
"

5 
sch_ï
 **
	gss_out_ïs
[
MAX_EP_NUM
];

6 
sch_ï
 **
	gss_ö_ïs
[
MAX_EP_NUM
];

7 
sch_ï
 **
	ghs_ïs
[
MAX_EP_NUM
];

8 
sch_ï
 **
	gâ_öå_ïs
[
MAX_EP_NUM
];

11 
	$mtk_xhci_scheduÀr_öô
()

13 
i
;

15 
i
=0; i<
MAX_EP_NUM
; i++){

16 
ss_out_ïs
[
i
] = 
NULL
;

18 
i
=0; i<
MAX_EP_NUM
; i++){

19 
ss_ö_ïs
[
i
] = 
NULL
;

21 
i
=0; i<
MAX_EP_NUM
; i++){

22 
hs_ïs
[
i
] = 
NULL
;

24 
i
=0; i<
MAX_EP_NUM
; i++){

25 
â_öå_ïs
[
i
] = 
NULL
;

28 
	}
}

30 
	$add_sch_ï
(
dev_•ìd
, 
is_ö
, 
isTT
, 
ï_ty≥
, 
maxp
, 
öãrvÆ
, 
bur°


31 , 
mu…
, 
off£t
, 
ª≥©
, 
pkts
, 
cs_cou¡
, 
bur°_mode


32 , 
bw_co°
, 
mtk_u32
 *
ï
, 
sch_ï
 *
tmp_ï
){

34 
sch_ï
 **
ï_¨øy
;

35 
i
;

37 if(
is_ö
 && 
dev_•ìd
 =
USB_SPEED_SUPER
 ){

38 
ï_¨øy
 = (
sch_ï
 **)
ss_ö_ïs
;

40 if(
dev_•ìd
 =
USB_SPEED_SUPER
){

41 
ï_¨øy
 = (
sch_ï
 **)
ss_out_ïs
;

43 if(
dev_•ìd
 =
USB_SPEED_HIGH
 || (
isTT
 && 
ï_ty≥
 =
USB_EP_ISOC
)){

44 
ï_¨øy
 = (
sch_ï
 **)
hs_ïs
;

47 
ï_¨øy
 = (
sch_ï
 **)
â_öå_ïs
;

49 
i
=0; i<
MAX_EP_NUM
; i++){

50 if(
ï_¨øy
[
i
] =
NULL
){

51 
tmp_ï
->
dev_•ìd
 = dev_speed;

52 
tmp_ï
->
isTT
 = isTT;

53 
tmp_ï
->
is_ö
 = is_in;

54 
tmp_ï
->
ï_ty≥
 =Ép_type;

55 
tmp_ï
->
maxp
 = maxp;

56 
tmp_ï
->
öãrvÆ
 = interval;

57 
tmp_ï
->
bur°
 = burst;

58 
tmp_ï
->
mu…
 = mult;

59 
tmp_ï
->
off£t
 = offset;

60 
tmp_ï
->
ª≥©
 =Ñepeat;

61 
tmp_ï
->
pkts
 =Ökts;

62 
tmp_ï
->
cs_cou¡
 = cs_count;

63 
tmp_ï
->
bur°_mode
 = burst_mode;

64 
tmp_ï
->
bw_co°
 = bw_cost;

65 
tmp_ï
->
ï
 =Ép;

66 
ï_¨øy
[
i
] = 
tmp_ï
;

67  
SCH_SUCCESS
;

70  
SCH_FAIL
;

71 
	}
}

73 
	$cou¡_ss_bw
(
is_ö
, 
ï_ty≥
, 
maxp
, 
öãrvÆ
, 
bur°
, 
mu…
, 
off£t
, 
ª≥©


74 , 
td_size
){

75 
i
, 
j
, 
k
;

76 
bw_ªquúed
[3];

77 
föÆ_bw_ªquúed
;

78 
bw_ªquúed_≥r_ª≥©
;

79 
tmp_bw_ªquúed
;

80 
sch_ï
 *
cur_sch_ï
;

81 
sch_ï
 **
ï_¨øy
;

82 
cur_off£t
;

83 
cur_ï_off£t
;

84 
tmp_off£t
;

85 
tmp_öãrvÆ
;

86 
ï_off£t
;

87 
ï_öãrvÆ
;

88 
ï_ª≥©
;

89 
ï_mu…
;

91 if(
is_ö
){

92 
ï_¨øy
 = (
sch_ï
 **)
ss_ö_ïs
;

95 
ï_¨øy
 = (
sch_ï
 **)
ss_out_ïs
;

98 
bw_ªquúed
[0] = 0;

99 
bw_ªquúed
[1] = 0;

100 
bw_ªquúed
[2] = 0;

102 if(
ª≥©
 == 0){

103 
föÆ_bw_ªquúed
 = 0;

104 
i
=0; i<
MAX_EP_NUM
; i++){

105 
cur_sch_ï
 = 
ï_¨øy
[
i
];

106 if(
cur_sch_ï
 =
NULL
){

109 
ï_öãrvÆ
 = 
cur_sch_ï
->
öãrvÆ
;

110 
ï_off£t
 = 
cur_sch_ï
->
off£t
;

111 if(
cur_sch_ï
->
ª≥©
 == 0){

112 if(
ï_öãrvÆ
 >
öãrvÆ
){

113 
tmp_off£t
 = 
ï_off£t
 + 
ï_öãrvÆ
 - 
off£t
;

114 
tmp_öãrvÆ
 = 
öãrvÆ
;

117 
tmp_off£t
 = 
off£t
 + 
öãrvÆ
 - 
ï_off£t
;

118 
tmp_öãrvÆ
 = 
ï_öãrvÆ
;

120 if(
tmp_off£t
 % 
tmp_öãrvÆ
 == 0){

121 
föÆ_bw_ªquúed
 +
cur_sch_ï
->
bw_co°
;

125 
ï_ª≥©
 = 
cur_sch_ï
->
ª≥©
;

126 
ï_mu…
 = 
cur_sch_ï
->
mu…
;

127 
k
=0; k<=
ï_mu…
; k++){

128 
cur_ï_off£t
 = 
ï_off£t
+(
k
*
ï_mu…
);

129 if(
ï_öãrvÆ
 >
öãrvÆ
){

130 
tmp_off£t
 = 
cur_ï_off£t
 + 
ï_öãrvÆ
 - 
off£t
;

131 
tmp_öãrvÆ
 = 
öãrvÆ
;

134 
tmp_off£t
 = 
off£t
 + 
öãrvÆ
 - 
cur_ï_off£t
;

135 
tmp_öãrvÆ
 = 
ï_öãrvÆ
;

137 if(
tmp_off£t
 % 
tmp_öãrvÆ
 == 0){

138 
föÆ_bw_ªquúed
 +
cur_sch_ï
->
bw_co°
;

144 
föÆ_bw_ªquúed
 +
td_size
;

147 
bw_ªquúed_≥r_ª≥©
 = 
maxp
 * (
bur°
+1);

148 
j
=0; j<=
mu…
; j++){

149 
tmp_bw_ªquúed
 = 0;

150 
cur_off£t
 = 
off£t
+(
j
*
ª≥©
);

151 
i
=0; i<
MAX_EP_NUM
; i++){

152 
cur_sch_ï
 = 
ï_¨øy
[
i
];

153 if(
cur_sch_ï
 =
NULL
){

156 
ï_öãrvÆ
 = 
cur_sch_ï
->
öãrvÆ
;

157 
ï_off£t
 = 
cur_sch_ï
->
off£t
;

158 if(
cur_sch_ï
->
ª≥©
 == 0){

159 if(
ï_öãrvÆ
 >
öãrvÆ
){

160 
tmp_off£t
 = 
ï_off£t
 + 
ï_öãrvÆ
 - 
cur_off£t
;

161 
tmp_öãrvÆ
 = 
öãrvÆ
;

164 
tmp_off£t
 = 
cur_off£t
 + 
öãrvÆ
 - 
ï_off£t
;

165 
tmp_öãrvÆ
 = 
ï_öãrvÆ
;

167 if(
tmp_off£t
 % 
tmp_öãrvÆ
 == 0){

168 
tmp_bw_ªquúed
 +
cur_sch_ï
->
bw_co°
;

172 
ï_ª≥©
 = 
cur_sch_ï
->
ª≥©
;

173 
ï_mu…
 = 
cur_sch_ï
->
mu…
;

174 
k
=0; k<=
ï_mu…
; k++){

175 
cur_ï_off£t
 = 
ï_off£t
+(
k
*
ï_ª≥©
);

176 if(
ï_öãrvÆ
 >
öãrvÆ
){

177 
tmp_off£t
 = 
cur_ï_off£t
 + 
ï_öãrvÆ
 - 
cur_off£t
;

178 
tmp_öãrvÆ
 = 
öãrvÆ
;

181 
tmp_off£t
 = 
cur_off£t
 + 
öãrvÆ
 - 
cur_ï_off£t
;

182 
tmp_öãrvÆ
 = 
ï_öãrvÆ
;

184 if(
tmp_off£t
 % 
tmp_öãrvÆ
 == 0){

185 
tmp_bw_ªquúed
 +
cur_sch_ï
->
bw_co°
;

191 
bw_ªquúed
[
j
] = 
tmp_bw_ªquúed
;

193 
föÆ_bw_ªquúed
 = 
SS_BW_BOUND
;

194 
j
=0; j<=
mu…
; j++){

195 if(
bw_ªquúed
[
j
] < 
föÆ_bw_ªquúed
){

196 
föÆ_bw_ªquúed
 = 
bw_ªquúed
[
j
];

199 
föÆ_bw_ªquúed
 +
bw_ªquúed_≥r_ª≥©
;

201  
föÆ_bw_ªquúed
;

202 
	}
}

204 
	$cou¡_hs_bw
(
ï_ty≥
, 
maxp
, 
öãrvÆ
, 
off£t
, 
td_size
){

205 
i
;

206 
bw_ªquúed
;

207 
sch_ï
 *
cur_sch_ï
;

208 
tmp_off£t
;

209 
tmp_öãrvÆ
;

210 
ï_off£t
;

211 
ï_öãrvÆ
;

212 
cur_â_isoc_öãrvÆ
;

214 
bw_ªquúed
 = 0;

215 
i
=0; i<
MAX_EP_NUM
; i++){

217 
cur_sch_ï
 = (
sch_ï
 *)
hs_ïs
[
i
];

218 if(
cur_sch_ï
 =
NULL
){

221 
ï_off£t
 = 
cur_sch_ï
->
off£t
;

222 
ï_öãrvÆ
 = 
cur_sch_ï
->
öãrvÆ
;

224 if(
cur_sch_ï
->
isTT
 && cur_sch_ï->
ï_ty≥
 =
USB_EP_ISOC
){

225 
cur_â_isoc_öãrvÆ
 = 
ï_öãrvÆ
<<3;

226 if(
ï_öãrvÆ
 >
öãrvÆ
){

227 
tmp_off£t
 = 
ï_off£t
 + 
cur_â_isoc_öãrvÆ
 - 
off£t
;

228 
tmp_öãrvÆ
 = 
öãrvÆ
;

231 
tmp_off£t
 = 
off£t
 + 
öãrvÆ
 - 
ï_off£t
;

232 
tmp_öãrvÆ
 = 
cur_â_isoc_öãrvÆ
;

234 if(
cur_sch_ï
->
is_ö
){

235 if((
tmp_off£t
%
tmp_öãrvÆ
 >=2Ë&& (tmp_off£t%tmp_öãrvÆ <
cur_sch_ï
->
cs_cou¡
)){

236 
bw_ªquúed
 += 188;

240 if(
tmp_off£t
%
tmp_öãrvÆ
 <
cur_sch_ï
->
cs_cou¡
){

241 
bw_ªquúed
 += 188;

246 if(
ï_öãrvÆ
 >
öãrvÆ
){

247 
tmp_off£t
 = 
ï_off£t
 + 
ï_öãrvÆ
 - 
off£t
;

248 
tmp_öãrvÆ
 = 
öãrvÆ
;

251 
tmp_off£t
 = 
off£t
 + 
öãrvÆ
 - 
ï_off£t
;

252 
tmp_öãrvÆ
 = 
ï_öãrvÆ
;

254 if(
tmp_off£t
%
tmp_öãrvÆ
 == 0){

255 
bw_ªquúed
 +
cur_sch_ï
->
bw_co°
;

259 
bw_ªquúed
 +
td_size
;

260  
bw_ªquúed
;

261 
	}
}

263 
	$cou¡_â_isoc_bw
(
is_ö
, 
maxp
, 
öãrvÆ
, 
off£t
, 
td_size
){

264 
is_cs
;

265 
cur_m‰ame
;

266 
bw_ªquúed
, 
max_bw
;

267 
ss_cs_cou¡
;

268 
cs_m‰ame
;

269 
i
 = 0,
j
;

270 
sch_ï
 *
cur_sch_ï
;

271 
ï_off£t
;

272 
ï_öãrvÆ
;

273 
â_isoc_öãrvÆ
;

274 
cur_â_isoc_öãrvÆ
;

275 
tmp_off£t
;

276 
tmp_öãrvÆ
;

278 
is_cs
 = 0;

280 
â_isoc_öãrvÆ
 = 
öãrvÆ
<<3;

281 if(
is_ö
){

282 
is_cs
 = 1;

284 
ss_cs_cou¡
 = (
maxp
 + (188 - 1))/188;

285 if(
is_cs
){

286 
cs_m‰ame
 = 
off£t
%8 + 2 + 
ss_cs_cou¡
;

287 i‡(
cs_m‰ame
 <= 6)

288 
ss_cs_cou¡
 += 2;

289 i‡(
cs_m‰ame
 == 7)

290 
ss_cs_cou¡
++;

291 i‡(
cs_m‰ame
 > 8)

294 
max_bw
 = 0;

295 if(
is_ö
){

296 
i
=2;

298 
cur_m‰ame
 = 
off£t
+
i
; i<
ss_cs_cou¡
; cur_mframe++, i++){

299 
bw_ªquúed
 = 0;

300 
j
=0; j<
MAX_EP_NUM
; j++){

301 
cur_sch_ï
 = (
sch_ï
 *)
hs_ïs
[
j
];

302 if(
cur_sch_ï
 =
NULL
){

305 
ï_off£t
 = 
cur_sch_ï
->
off£t
;

306 
ï_öãrvÆ
 = 
cur_sch_ï
->
öãrvÆ
;

307 if(
cur_sch_ï
->
isTT
 && cur_sch_ï->
ï_ty≥
 =
USB_EP_ISOC
){

311 
cur_â_isoc_öãrvÆ
 = 
ï_öãrvÆ
<<3;

312 if(
cur_â_isoc_öãrvÆ
 >
â_isoc_öãrvÆ
){

313 
tmp_off£t
 = (
ï_off£t
+
cur_â_isoc_öãrvÆ
Ë- 
cur_m‰ame
;

314 
tmp_öãrvÆ
 = 
â_isoc_öãrvÆ
;

317 
tmp_off£t
 = (
cur_m‰ame
+
â_isoc_öãrvÆ
Ë- 
ï_off£t
;

318 
tmp_öãrvÆ
 = 
cur_â_isoc_öãrvÆ
;

320 if(
cur_sch_ï
->
is_ö
){

321 if((
tmp_off£t
%
tmp_öãrvÆ
 >=2Ë&& (tmp_off£t%tmp_öãrvÆ <
cur_sch_ï
->
cs_cou¡
)){

322 
bw_ªquúed
 += 188;

326 if(
tmp_off£t
%
tmp_öãrvÆ
 <
cur_sch_ï
->
cs_cou¡
){

327 
bw_ªquúed
 += 188;

332 if(
cur_sch_ï
->
ï_ty≥
 =
USB_EP_INT
 || cur_sch_ï->ï_ty≥ =
USB_EP_ISOC
){

334 if(
ï_öãrvÆ
 >
â_isoc_öãrvÆ
){

335 
tmp_off£t
 = (
ï_off£t
+
ï_öãrvÆ
Ë- 
cur_m‰ame
;

336 
tmp_öãrvÆ
 = 
â_isoc_öãrvÆ
;

339 
tmp_off£t
 = (
cur_m‰ame
+
â_isoc_öãrvÆ
Ë- 
ï_off£t
;

340 
tmp_öãrvÆ
 = 
ï_öãrvÆ
;

342 if(
tmp_off£t
%
tmp_öãrvÆ
 == 0){

343 
bw_ªquúed
 +
cur_sch_ï
->
bw_co°
;

347 
bw_ªquúed
 += 188;

348 if(
bw_ªquúed
 > 
max_bw
){

349 
max_bw
 = 
bw_ªquúed
;

352  
max_bw
;

353 
	}
}

355 
	$cou¡_â_öå_bw
(
öãrvÆ
, 
‰ame_off£t
)

358 
i
;

359 
ï_off£t
;

360 
ï_öãrvÆ
;

361 
tmp_off£t
;

362 
tmp_öãrvÆ
;

363 
sch_ï
 *
cur_sch_ï
;

365 
i
=0; i<
MAX_EP_NUM
; i++){

366 
cur_sch_ï
 = (
sch_ï
 *)
â_öå_ïs
[
i
];

367 if(
cur_sch_ï
 =
NULL
){

370 
ï_off£t
 = 
cur_sch_ï
->
off£t
;

371 
ï_öãrvÆ
 = 
cur_sch_ï
->
öãrvÆ
;

372 if(
ï_öãrvÆ
 >
öãrvÆ
){

373 
tmp_off£t
 = 
ï_off£t
 + 
ï_öãrvÆ
 - 
‰ame_off£t
;

374 
tmp_öãrvÆ
 = 
öãrvÆ
;

377 
tmp_off£t
 = 
‰ame_off£t
 + 
öãrvÆ
 - 
ï_off£t
;

378 
tmp_öãrvÆ
 = 
ï_öãrvÆ
;

381 if(
tmp_off£t
%
tmp_öãrvÆ
==0){

382  
SCH_FAIL
;

385  
SCH_SUCCESS
;

386 
	}
}

388 
sch_ï
 * 
	$mtk_xhci_scheduÀr_ªmove_ï
(
dev_•ìd
, 
is_ö
, 
isTT
, 
ï_ty≥
, 
mtk_u32
 *
ï
){

389 
i
;

390 
sch_ï
 **
ï_¨øy
;

391 
sch_ï
 *
cur_ï
;

393 if(
is_ö
 && 
dev_•ìd
 =
USB_SPEED_SUPER
){

394 
ï_¨øy
 = (
sch_ï
 **)
ss_ö_ïs
;

396 if(
dev_•ìd
 =
USB_SPEED_SUPER
){

397 
ï_¨øy
 = (
sch_ï
 **)
ss_out_ïs
;

399 if(
dev_•ìd
 =
USB_SPEED_HIGH
 || (
isTT
 && 
ï_ty≥
 =
USB_EP_ISOC
)){

400 
ï_¨øy
 = (
sch_ï
 **)
hs_ïs
;

403 
ï_¨øy
 = (
sch_ï
 **)
â_öå_ïs
;

405 
i
=0; i<
MAX_EP_NUM
; i++){

406 
cur_ï
 = (
sch_ï
 *)
ï_¨øy
[
i
];

407 if(
cur_ï
 !
NULL
 && cur_ï->
ï
 ==Ép){

408 
ï_¨øy
[
i
] = 
NULL
;

409  
cur_ï
;

412  
NULL
;

413 
	}
}

415 
	$mtk_xhci_scheduÀr_add_ï
(
dev_•ìd
, 
is_ö
, 
isTT
, 
ï_ty≥
, 
maxp
, 
öãrvÆ
, 
bur°


416 , 
mu…
, 
mtk_u32
 *
ï
, mtk_u32 *
ï_˘x
, 
sch_ï
 *sch_ep){

417 
mtk_u32
 
bPkts
 = 0;

418 
mtk_u32
 
bCsCou¡
 = 0;

419 
mtk_u32
 
bBm
 = 1;

420 
mtk_u32
 
bOff£t
 = 0;

421 
mtk_u32
 
bRïót
 = 0;

422 
ªt
 = 
SCH_FAIL
;

423 
mtk_xhci_ï_˘x
 *
ãmp_ï_˘x
;

424 
td_size
;

425 
m‰ame_idx
, 
‰ame_idx
;

426 
bw_co°
;

427 
cur_bw
, 
be°_bw
, 
be°_bw_idx
,
ª≥©
, 
max_ª≥©
, 
be°_bw_ª≥©
 = 0;

428 
cur_off£t
, 
cs_m‰ame
;

429 
bªak_out
;

430 
‰ame_öãrvÆ
;

432 
	`¥ötf
("add_ïÖ¨amëîs, dev_•ìd %d, is_ö %d, isTT %d,Ép_ty≥ %d, max∞%d, i¡îvÆ %d, bur° %d, mu… %d,É∞0x%x,Ép_˘x 0x%x, sch_ï 0x%x\n", 
dev_•ìd
, 
is_ö
, 
isTT
, 
ï_ty≥
, 
maxp
 , 
öãrvÆ
, 
bur°
, 
mu…
, ()
ï
, ()
ï_˘x
, ()
sch_ï
);

433 if(
isTT
 && 
ï_ty≥
 =
USB_EP_INT
 && ((
dev_•ìd
 =
USB_SPEED_LOW
Ë|| (dev_•ìd =
USB_SPEED_FULL
))){

434 
‰ame_öãrvÆ
 = 
öãrvÆ
 >> 3;

435 
‰ame_idx
=0; føme_idx<
‰ame_öãrvÆ
; frame_idx++){

436 
	`¥ötf
("checkÅt_öå_bw i¡îvÆ %d, føme_idx %d\n", 
‰ame_öãrvÆ
, 
‰ame_idx
);

437 if(
	`cou¡_â_öå_bw
(
‰ame_öãrvÆ
, 
‰ame_idx
Ë=
SCH_SUCCESS
){

438 
	`¥ötf
("check OK............\n");

439 
bOff£t
 = 
‰ame_idx
<<3;

440 
bPkts
 = 1;

441 
bCsCou¡
 = 3;

442 
bw_co°
 = 
maxp
;

443 
bRïót
 = 0;

444 if(
	`add_sch_ï
(
dev_•ìd
, 
is_ö
, 
isTT
, 
ï_ty≥
, 
maxp
, 
‰ame_öãrvÆ
, 
bur°
, 
mu…


445 , 
bOff£t
, 
bRïót
, 
bPkts
, 
bCsCou¡
, 
bBm
, 
maxp
, 
ï
, 
sch_ï
Ë=
SCH_FAIL
){

446  
SCH_FAIL
;

448 
ªt
 = 
SCH_SUCCESS
;

453 if(
isTT
 && 
ï_ty≥
 =
USB_EP_ISOC
){

454 
be°_bw
 = 
HS_BW_BOUND
;

455 
be°_bw_idx
 = -1;

456 
cur_bw
 = 0;

457 
td_size
 = 
maxp
;

458 
bªak_out
 = 0;

459 
‰ame_öãrvÆ
 = 
öãrvÆ
>>3;

460 
‰ame_idx
=0; føme_idx<
‰ame_öãrvÆ
 && !
bªak_out
; frame_idx++){

461 
m‰ame_idx
=0; mframe_idx<8; mframe_idx++){

462 
cur_off£t
 = (
‰ame_idx
*8Ë+ 
m‰ame_idx
;

463 
cur_bw
 = 
	`cou¡_â_isoc_bw
(
is_ö
, 
maxp
, 
‰ame_öãrvÆ
, 
cur_off£t
, 
td_size
);

464 if(
cur_bw
 > 0 && cur_bw < 
be°_bw
){

465 
be°_bw_idx
 = 
cur_off£t
;

466 
be°_bw
 = 
cur_bw
;

467 if(
cur_bw
 =
td_size
 || cur_bw < (
HS_BW_BOUND
>>1)){

468 
bªak_out
 = 1;

474 if(
be°_bw_idx
 == -1){

475  
SCH_FAIL
;

478 
bOff£t
 = 
be°_bw_idx
;

479 
bPkts
 = 1;

480 
bCsCou¡
 = (
maxp
 + (188 - 1)) / 188;

481 if(
is_ö
){

482 
cs_m‰ame
 = 
bOff£t
%8 + 2 + 
bCsCou¡
;

483 i‡(
cs_m‰ame
 <= 6)

484 
bCsCou¡
 += 2;

485 i‡(
cs_m‰ame
 == 7)

486 
bCsCou¡
++;

488 
bw_co°
 = 188;

489 
bRïót
 = 0;

490 if(
	`add_sch_ï
–
dev_•ìd
, 
is_ö
, 
isTT
, 
ï_ty≥
, 
maxp
, 
öãrvÆ
, 
bur°
, 
mu…


491 , 
bOff£t
, 
bRïót
, 
bPkts
, 
bCsCou¡
, 
bBm
, 
bw_co°
, 
ï
, 
sch_ï
Ë=
SCH_FAIL
){

492  
SCH_FAIL
;

494 
ªt
 = 
SCH_SUCCESS
;

497 if((
dev_•ìd
 =
USB_SPEED_FULL
 || dev_•ìd =
USB_SPEED_LOW
Ë&& 
ï_ty≥
 =
USB_EP_INT
){

498 
bPkts
 = 1;

499 
ªt
 = 
SCH_SUCCESS
;

501 if(
dev_•ìd
 =
USB_SPEED_FULL
 && 
ï_ty≥
 =
USB_EP_ISOC
){

502 
bPkts
 = 1;

503 
ªt
 = 
SCH_SUCCESS
;

505 if(
dev_•ìd
 =
USB_SPEED_HIGH
 && (
ï_ty≥
 =
USB_EP_INT
 ||Ép_ty≥ =
USB_EP_ISOC
)){

506 
be°_bw
 = 
HS_BW_BOUND
;

507 
be°_bw_idx
 = -1;

508 
cur_bw
 = 0;

509 
td_size
 = 
maxp
*(
bur°
+1);

510 
cur_off£t
 = 0; cur_off£t<
öãrvÆ
; cur_offset++){

511 
cur_bw
 = 
	`cou¡_hs_bw
(
ï_ty≥
, 
maxp
, 
öãrvÆ
, 
cur_off£t
, 
td_size
);

512 if(
cur_bw
 > 0 && cur_bw < 
be°_bw
){

513 
be°_bw_idx
 = 
cur_off£t
;

514 
be°_bw
 = 
cur_bw
;

515 if(
cur_bw
 =
td_size
 || cur_bw < (
HS_BW_BOUND
>>1)){

520 if(
be°_bw_idx
 == -1){

521  
SCH_FAIL
;

524 
bOff£t
 = 
be°_bw_idx
;

525 
bPkts
 = 
bur°
 + 1;

526 
bCsCou¡
 = 0;

527 
bw_co°
 = 
td_size
;

528 
bRïót
 = 0;

529 if(
	`add_sch_ï
(
dev_•ìd
, 
is_ö
, 
isTT
, 
ï_ty≥
, 
maxp
, 
öãrvÆ
, 
bur°
, 
mu…


530 , 
bOff£t
, 
bRïót
, 
bPkts
, 
bCsCou¡
, 
bBm
, 
bw_co°
, 
ï
, 
sch_ï
Ë=
SCH_FAIL
){

531  
SCH_FAIL
;

533 
ªt
 = 
SCH_SUCCESS
;

536 if(
dev_•ìd
 =
USB_SPEED_SUPER
 && (
ï_ty≥
 =
USB_EP_INT
 ||Ép_ty≥ =
USB_EP_ISOC
)){

537 
be°_bw
 = 
SS_BW_BOUND
;

538 
be°_bw_idx
 = -1;

539 
cur_bw
 = 0;

540 
td_size
 = 
maxp
 * (
mu…
+1Ë* (
bur°
+1);

541 if(
mu…
 == 0){

542 
max_ª≥©
 = 0;

545 
max_ª≥©
 = (
öãrvÆ
-1)/(
mu…
+1);

547 
bªak_out
 = 0;

548 
‰ame_idx
 = 0; (‰ame_idx < 
öãrvÆ
Ë&& !
bªak_out
; frame_idx++){

549 
ª≥©
 = 
max_ª≥©
;Ñepeat >= 0;Ñepeat--){

550 
cur_bw
 = 
	`cou¡_ss_bw
(
is_ö
, 
ï_ty≥
, 
maxp
, 
öãrvÆ
, 
bur°
, 
mu…
, 
‰ame_idx


551 , 
ª≥©
, 
td_size
);

552 
	`¥ötf
("count_ss_bw, frame_idx %d,Ñepeat %d,Åd_size %d,Ñesult bw %d\n"

553 , 
‰ame_idx
, 
ª≥©
, 
td_size
, 
cur_bw
);

554 if(
cur_bw
 > 0 && cur_bw < 
be°_bw
){

555 
be°_bw_idx
 = 
‰ame_idx
;

556 
be°_bw_ª≥©
 = 
ª≥©
;

557 
be°_bw
 = 
cur_bw
;

558 if(
cur_bw
 <
td_size
 || cur_bw < (
HS_BW_BOUND
>>1)){

559 
bªak_out
 = 1;

565 
	`¥ötf
("föÆ be° idx %d, be°Ñïóà%d\n", 
be°_bw_idx
, 
be°_bw_ª≥©
);

566 if(
be°_bw_idx
 == -1){

567  
SCH_FAIL
;

570 
bOff£t
 = 
be°_bw_idx
;

571 
bCsCou¡
 = 0;

572 
bRïót
 = 
be°_bw_ª≥©
;

573 if(
bRïót
 == 0){

574 
bw_co°
 = (
bur°
+1)*(
mu…
+1)*
maxp
;

575 
bPkts
 = (
bur°
+1)*(
mu…
+1);

578 
bw_co°
 = (
bur°
+1)*
maxp
;

579 
bPkts
 = (
bur°
+1);

581 if(
	`add_sch_ï
(
dev_•ìd
, 
is_ö
, 
isTT
, 
ï_ty≥
, 
maxp
, 
öãrvÆ
, 
bur°
, 
mu…


582 , 
bOff£t
, 
bRïót
, 
bPkts
, 
bCsCou¡
, 
bBm
, 
bw_co°
, 
ï
, 
sch_ï
Ë=
SCH_FAIL
){

583  
SCH_FAIL
;

585 
ªt
 = 
SCH_SUCCESS
;

589 
bPkts
 = 1;

590 
ªt
 = 
SCH_SUCCESS
;

592 if(
ªt
 =
SCH_SUCCESS
){

593 
ãmp_ï_˘x
 = (
mtk_xhci_ï_˘x
 *)
ï_˘x
;

594 
ãmp_ï_˘x
->
ª£rved
[0] |(
	`BPKTS
(
bPkts
Ë| 
	`BCSCOUNT
(
bCsCou¡
Ë| 
	`BBM
(
bBm
));

595 
ãmp_ï_˘x
->
ª£rved
[1] |(
	`BOFFSET
(
bOff£t
Ë| 
	`BREPEAT
(
bRïót
));

596 
	`¥ötf
("[DBG] BPKTS: %x, BCSCOUNT: %x, BBM: %x\n", 
bPkts
, 
bCsCou¡
, 
bBm
);

597 
	`¥ötf
("[DBG] BOFFSET: %x, BREPEAT: %x\n", 
bOff£t
, 
bRïót
);

598  
SCH_SUCCESS
;

601  
SCH_FAIL
;

603 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/usb/host/xhci-mtk-scheduler.h

1 #i‚de‡
_XHCI_MTK_SCHEDULER_H


2 
	#_XHCI_MTK_SCHEDULER_H


	)

4 
	#MTK_SCH_NEW
 1

	)

6 
	#SCH_SUCCESS
 1

	)

7 
	#SCH_FAIL
 0

	)

9 
	#MAX_EP_NUM
 64

	)

10 
	#SS_BW_BOUND
 51000

	)

11 
	#HS_BW_BOUND
 6144

	)

13 
	#USB_EP_CONTROL
 0

	)

14 
	#USB_EP_ISOC
 1

	)

15 
	#USB_EP_BULK
 2

	)

16 
	#USB_EP_INT
 3

	)

19 
	#USB_SPEED_LOW
 1

	)

20 
	#USB_SPEED_FULL
 2

	)

21 
	#USB_SPEED_HIGH
 3

	)

22 
	#USB_SPEED_SUPER
 5

	)

26 
	#BPKTS
(
p
Ë(’Ë& 0x3f)

	)

27 
	#BCSCOUNT
(
p
Ë((’Ë& 0x7Ë<< 8)

	)

28 
	#BBM
(
p
Ë(’Ë<< 11)

	)

29 
	#BOFFSET
(
p
Ë(’Ë& 0x3fff)

	)

30 
	#BREPEAT
(
p
Ë((’Ë& 0x7fffË<< 16)

	)

34 
	tmtk_u32
;

35 
	tmtk_u64
;

38 
	#NULL
 ((*)0)

	)

40 
	smtk_xhci_ï_˘x
 {

41 
mtk_u32
 
	mï_öfo
;

42 
mtk_u32
 
	mï_öfo2
;

43 
mtk_u64
 
	mdeq
;

44 
mtk_u32
 
	mtx_öfo
;

46 
mtk_u32
 
	mª£rved
[3];

50 
	ssch_ï


53 
	mdev_•ìd
;

54 
	misTT
;

56 
	mis_ö
;

57 
	mï_ty≥
;

58 
	mmaxp
;

59 
	möãrvÆ
;

60 
	mbur°
;

61 
	mmu…
;

63 
	moff£t
;

64 
	mª≥©
;

65 
	mpkts
;

66 
	mcs_cou¡
;

67 
	mbur°_mode
;

69 
	mbw_co°
;

70 
mtk_u32
 *
	mï
;

73 
mtk_xhci_scheduÀr_öô
();

74 
mtk_xhci_scheduÀr_add_ï
(
dev_•ìd
, 
is_ö
, 
isTT
, 
ï_ty≥
, 
maxp
, 
öãrvÆ
, 
bur°


75 , 
mu…
, 
mtk_u32
 *
ï
, mtk_u32 *
ï_˘x
, 
sch_ï
 *sch_ep);

76 
sch_ï
 * 
mtk_xhci_scheduÀr_ªmove_ï
(
dev_•ìd
, 
is_ö
, 
isTT
, 
ï_ty≥
, 
mtk_u32
 *
ï
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/usb/host/xhci-mtk.c

1 
	~<comm⁄.h
>

3 
	~"xhci-mtk.h
"

4 
	~"xhci.h
"

5 
	~"mtk-phy.h
"

8 
	gDECLARE_GLOBAL_DATA_PTR
;

15 
	$ªöôIP
()

17 
	`íabÀAŒClockPowî
();

18 
	`mtk_xhci_scheduÀr_öô
();

19 
	}
}

21 
	$xhci_hcd_öô
(
ödex
, 
xhci_hc¸
 **
hc¸
, 
xhci_hc‹
 **
hc‹
)

23 
	`u3phy_öô
();

24 
	`u2_¶ew_øã_ˇlibøti⁄
(
u3phy
);

25 
	`u2_¶ew_øã_ˇlibøti⁄
(
u3phy_p1
);

27 
	`mt7621_phy_öô
(
u3phy
);

29 
	`ªöôIP
();

31 *
hc¸
 = (
uöt32_t
)
XHC_IO_START
;

32 *
hc‹
 = (
xhci_hc‹
 *)((
uöt32_t
Ë*
hc¸


33 + 
	`HC_LENGTH
(
	`xhci_ªadl
(&(*
hc¸
)->
¸_ˇpba£
)));

35 
	`debug
("mtk-xhci: init hccr %xánd hcor %x hc_length %d\n",

36 (
uöt32_t
)*
hc¸
, (uöt32_t)*
hc‹
,

37 (
uöt32_t
)
	`HC_LENGTH
(
	`xhci_ªadl
(&(*
hc¸
)->
¸_ˇpba£
)));

40 
	}
}

42 
	$xhci_hcd_°›
(
ödex
)

44 
	`dißbÀP‹tClockPowî
();

45 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/usb/host/xhci-mtk.h

1 #i‚de‡
_XHCI_MTK_H


2 
	#_XHCI_MTK_H


	)

4 
	~<löux/compûî.h
>

5 
	~<löux/ty≥s.h
>

6 
	~"xhci.h
"

8 
	#XHC_IRQ
 22

	)

9 
	#XHC_IO_START
 0xBE1C0000

	)

10 
	#XHC_IO_LENGTH
 0x10000

	)

13 
	#SSUSB_U3_XHCI_BASE
 0xBE1C0000

	)

14 
	#SSUSB_U3_MAC_BASE
 0xBE1C2400

	)

15 
	#SSUSB_U3_SYS_BASE
 0xBE1C2600

	)

16 
	#SSUSB_U2_SYS_BASE
 0xBE1C3400

	)

17 
	#SSUB_SIF_SLV_TOP
 0xBE1D0000

	)

18 
	#SIFSLV_IPPC
 (
SSUB_SIF_SLV_TOP
 + 0x700)

	)

20 
	#U3_PIPE_LATCH_SEL_ADD
 
SSUSB_U3_MAC_BASE
 + 0x130

	)

21 
	#U3_PIPE_LATCH_TX
 0

	)

22 
	#U3_PIPE_LATCH_RX
 0

	)

24 
	#U3_UX_EXIT_LFPS_TIMING_PAR
 0xa0

	)

25 
	#U3_REF_CK_PAR
 0xb0

	)

26 
	#U3_RX_UX_EXIT_LFPS_REF_OFFSET
 8

	)

27 
	#U3_RX_UX_EXIT_LFPS_REF
 3

	)

28 
	#U3_REF_CK_VAL
 10

	)

30 
	#U3_TIMING_PULSE_CTRL
 0xb4

	)

31 
	#CNT_1US_VALUE
 63

32 

	)

33 
	#USB20_TIMING_PARAMETER
 0x40

	)

34 
	#TIME_VALUE_1US
 63

35 

	)

36 
	#LINK_PM_TIMER
 0x8

	)

37 
	#PM_LC_TIMEOUT_VALUE
 3

	)

39 
	#XHCI_IMOD
 0x624

	)

40 
	#XHCI_IMOD_MT7621_VALUE
 0x10

	)

42 
	#SSUSB_HDMA_CFG
 0x950

	)

43 
	#SSUSB_HDMA_CFG_MT7621_VALUE
 0x10E0E0C

	)

45 
	#U3_LTSSM_TIMING_PARAMETER3
 0x2514

	)

46 
	#U3_LTSSM_TIMING_PARAMETER3_VALUE
 0x3E8012C

	)

48 
	#U2_PHYD_CR1
 0x64

	)

50 
	#SSUSB_IP_SPAR0
 0xC8

	)

52 
	#SYNC_HS_EOF
 0x938

	)

53 
	#SYNC_HS_EOF_VALUE
 0x201F3

	)

55 
	#HSCH_CFG1
 0x960

	)

56 
	#SCH2_FIFO_DEPTH_OFFSET
 16

	)

59 
	#SSUSB_IP_PW_CTRL
 (
SIFSLV_IPPC
+0x0)

	)

60 
	#SSUSB_IP_SW_RST
 (1<<0)

	)

61 
	#SSUSB_IP_PW_CTRL_1
 (
SIFSLV_IPPC
+0x4)

	)

62 
	#SSUSB_IP_PDN
 (1<<0)

	)

63 
	#SSUSB_U3_CTRL
(
p
Ë(
SIFSLV_IPPC
+0x30+’*0x08))

	)

64 
	#SSUSB_U3_PORT_DIS
 (1<<0)

	)

65 
	#SSUSB_U3_PORT_PDN
 (1<<1)

	)

66 
	#SSUSB_U3_PORT_HOST_SEL
 (1<<2)

	)

67 
	#SSUSB_U3_PORT_CKBG_EN
 (1<<3)

	)

68 
	#SSUSB_U3_PORT_MAC_RST
 (1<<4)

	)

69 
	#SSUSB_U3_PORT_PHYD_RST
 (1<<5)

	)

70 
	#SSUSB_U2_CTRL
(
p
Ë(
SIFSLV_IPPC
+(0x50)+’*0x08))

	)

71 
	#SSUSB_U2_PORT_DIS
 (1<<0)

	)

72 
	#SSUSB_U2_PORT_PDN
 (1<<1)

	)

73 
	#SSUSB_U2_PORT_HOST_SEL
 (1<<2)

	)

74 
	#SSUSB_U2_PORT_CKBG_EN
 (1<<3)

	)

75 
	#SSUSB_U2_PORT_MAC_RST
 (1<<4)

	)

76 
	#SSUSB_U2_PORT_PHYD_RST
 (1<<5)

	)

77 
	#SSUSB_IP_CAP
 (
SIFSLV_IPPC
+0x024)

	)

79 
	#SSUSB_U3_PORT_NUM
(
p
Ë’ & 0xff)

	)

80 
	#SSUSB_U2_PORT_NUM
(
p
Ë(’>>8Ë& 0xff)

	)

83 
	#XHCI_MTK_TEST_MAJOR
 234

	)

84 
	#DEVICE_NAME
 "xhci_mtk_ã°"

	)

86 
	#CLI_MAGIC
 'C'

	)

87 
	#IOCTL_READ
 
	`_IOR
(
CLI_MAGIC
, 0, )

	)

88 
	#IOCTL_WRITE
 
	`_IOW
(
CLI_MAGIC
, 1, )

	)

90 
ªöôIP
();

91 
£tInôülReg
();

92 
dbg_¥b_out
();

93 
ˇŒ_fun˘i⁄
(*
buf
);

95 
xhci_mtk_ã°_u∆ock_io˘l
(
fûe
 *fûe, 
cmd
, 
¨g
);

96 
xhci_mtk_ã°_›í
(
öode
 *öode, 
fûe
 *file);

97 
xhci_mtk_ã°_ªÀa£
(
öode
 *öode, 
fûe
 *file);

98 
ssize_t
 
xhci_mtk_ã°_ªad
(
fûe
 *fûe, *
buf
, 
size_t
 
cou¡
, 
loff_t
 *
±r
);

99 
ssize_t
 
xhci_mtk_ã°_wrôe
(
fûe
 *fûe, c⁄° *
buf
, 
size_t
 
cou¡
, 
loff_t
 * 
µos
);

106 
	#SW_PRB_OUT_ADDR
 (
SIFSLV_IPPC
+0xc0)

	)

107 
	#PRB_MODULE_SEL_ADDR
 (
SIFSLV_IPPC
+0xbc)

	)

109 
ölöe
 
	$mtk_¥obe_öô
(c⁄° 
u32
 
byã
){

110 
__u32
 
__iomem
 *
±r
 = (__u32 __iomem *Ë
PRB_MODULE_SEL_ADDR
;

111 
	`wrôñ
(
byã
, 
±r
);

112 
	}
}

114 
ölöe
 
	$mtk_¥obe_out
(c⁄° 
u32
 
vÆue
){

115 
__u32
 
__iomem
 *
±r
 = (__u32 __iomem *Ë
SW_PRB_OUT_ADDR
;

116 
	`wrôñ
(
vÆue
, 
±r
);

117 
	}
}

119 
ölöe
 
u32
 
	$mtk_¥obe_vÆue
(){

120 
__u32
 
__iomem
 *
±r
 = (__u32 __iomem *Ë
SW_PRB_OUT_ADDR
;

122  
	`ªadl
(
±r
);

123 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/usb/host/xhci-ring.c

17 
	~<asm/byã‹dî.h
>

18 
	~<asm/u«lig√d.h
>

19 
	~<asm/î∫o.h
>

20 
	~<asm/addr•a˚.h
>

22 
	~<compûî.h
>

23 
	~<comm⁄.h
>

25 
	~<usb.h
>

27 
	~"xhci.h
"

31 #ifdef 
XHCI_RING_DEBUG


32 
	#XHCI_RING_PRINTF
(
fmt
,
¨gs
...Ë
	`¥ötf
 (fmà,##¨gs)

	)

34 
	#XHCI_RING_PRINTF
(
fmt
,
¨gs
...)

	)

48 
	$œ°_åb
(
xhci_˘æ
 *
˘æ
, 
xhci_rög
 *
rög
,

49 
xhci_£gmít
 *
£g
, 
xhci_åb
 *
åb
)

51 i‡(
rög
 =
˘æ
->
evít_rög
)

52  
åb
 =&
£g
->
åbs
[
TRBS_PER_SEGMENT
];

54  
	`TRB_TYPE_LINK_LE32
(
åb
->
lök
.
c⁄åﬁ
);

55 
	}
}

67 
	$œ°_åb_⁄_œ°_£g
(
xhci_˘æ
 *
˘æ
,

68 
xhci_rög
 *
rög
,

69 
xhci_£gmít
 *
£g
,

70 
xhci_åb
 *
åb
)

72 i‡(
rög
 =
˘æ
->
evít_rög
)

73  ((
åb
 =&
£g
->
åbs
[
TRBS_PER_SEGMENT
]) &&

74 (
£g
->
√xt
 =
rög
->
fú°_£g
));

76  
	`À32_to_˝u
(
åb
->
lök
.
c⁄åﬁ
Ë& 
LINK_TOGGLE
;

77 
	}
}

101 
	$öc_íq
(
xhci_˘æ
 *
˘æ
, 
xhci_rög
 *
rög
,

102 
m‹e_åbs_comög
)

104 
u32
 
chaö
;

105 
xhci_åb
 *
√xt
;

107 
chaö
 = 
	`À32_to_˝u
(
rög
->
íqueue
->
gíîic
.
fõld
[3]Ë& 
TRB_CHAIN
;

108 
√xt
 = ++(
rög
->
íqueue
);

114 
	`œ°_åb
(
˘æ
, 
rög
,Ñög->
íq_£g
, 
√xt
)) {

115 i‡(
rög
 !
˘æ
->
evít_rög
) {

124 i‡(!
chaö
 && !
m‹e_åbs_comög
)

133 
√xt
->
lök
.
c⁄åﬁ
 &
	`˝u_to_À32
(~
TRB_CHAIN
);

134 
√xt
->
lök
.
c⁄åﬁ
 |
	`˝u_to_À32
(
chaö
);

136 
√xt
->
lök
.
c⁄åﬁ
 ^
	`˝u_to_À32
(
TRB_CYCLE
);

137 
	`xhci_Êush_ˇche
((
uöt32_t
)
√xt
,

138 (
xhci_åb
));

141 i‡(
	`œ°_åb_⁄_œ°_£g
(
˘æ
, 
rög
,

142 
rög
->
íq_£g
, 
√xt
))

143 
rög
->
cy˛e_°©e
 = (ring->cycle_state ? 0 : 1);

145 
rög
->
íq_£g
 =Ñög->íq_£g->
√xt
;

146 
rög
->
íqueue
 =Ñög->
íq_£g
->
åbs
;

147 
√xt
 = 
rög
->
íqueue
;

149 
	}
}

159 
	$öc_deq
(
xhci_˘æ
 *
˘æ
, 
xhci_rög
 *
rög
)

167 i‡(
	`œ°_åb
(
˘æ
, 
rög
,Ñög->
deq_£g
,Ñög->
dequeue
)) {

168 i‡(
rög
 =
˘æ
->
evít_rög
 &&

169 
	`œ°_åb_⁄_œ°_£g
(
˘æ
, 
rög
,

170 
rög
->
deq_£g
,Ñög->
dequeue
)) {

171 
rög
->
cy˛e_°©e
 = (ring->cycle_state ? 0 : 1);

173 
rög
->
deq_£g
 =Ñög->deq_£g->
√xt
;

174 
rög
->
dequeue
 =Ñög->
deq_£g
->
åbs
;

176 
rög
->
dequeue
++;

178 } 
	`œ°_åb
(
˘æ
, 
rög
,Ñög->
deq_£g
,Ñög->
dequeue
));

179 
	}
}

193 
xhci_gíîic_åb
 *
	$queue_åb
(
xhci_˘æ
 *
˘æ
,

194 
xhci_rög
 *
rög
,

195 
m‹e_åbs_comög
,

196 *
åb_fõlds
)

198 
xhci_gíîic_åb
 *
åb
;

199 
i
;

201 
åb
 = &
rög
->
íqueue
->
gíîic
;

203 
i
 = 0; i < 4; i++)

204 
åb
->
fõld
[
i
] = 
	`˝u_to_À32
(
åb_fõlds
[i]);

206 
	`xhci_Êush_ˇche
((
uöt32_t
)
åb
, (
xhci_gíîic_åb
));

208 
	`öc_íq
(
˘æ
, 
rög
, 
m‹e_åbs_comög
);

210  
åb
;

211 
	}
}

222 
	$¥ï¨e_rög
(
xhci_˘æ
 *
˘æ
, 
xhci_rög
 *
ï_rög
,

223 
u32
 
ï_°©e
)

225 
xhci_åb
 *
√xt
 = 
ï_rög
->
íqueue
;

229 
ï_°©e
) {

230 
EP_STATE_DISABLED
:

235 
	`puts
("WARN urb submittedÅo disabledÉp\n");

236  -
ENOENT
;

237 
EP_STATE_ERROR
:

238 
	`puts
("WARN waiting forÉrror onÉpÅo be cleared\n");

239  -
EINVAL
;

240 
EP_STATE_HALTED
:

241 
	`puts
("WARN haltedÉndpoint, queueing URBányway.\n");

242 
EP_STATE_STOPPED
:

243 
EP_STATE_RUNNING
:

244 
	`XHCI_RING_PRINTF
("EP STATE RUNNING.\n");

247 
	`puts
("ERROR unknownÉndpoint state forÉp\n");

248  -
EINVAL
;

251 
	`œ°_åb
(
˘æ
, 
ï_rög
,Ép_rög->
íq_£g
, 
√xt
)) {

256 
√xt
->
lök
.
c⁄åﬁ
 &
	`˝u_to_À32
(~
TRB_CHAIN
);

258 
√xt
->
lök
.
c⁄åﬁ
 ^
	`˝u_to_À32
(
TRB_CYCLE
);

260 
	`xhci_Êush_ˇche
((
uöt32_t
)
√xt
, (
xhci_åb
));

263 i‡(
	`œ°_åb_⁄_œ°_£g
(
˘æ
, 
ï_rög
,

264 
ï_rög
->
íq_£g
, 
√xt
))

265 
ï_rög
->
cy˛e_°©e
 = (ep_ring->cycle_state ? 0 : 1);

266 
ï_rög
->
íq_£g
 =Ép_rög->íq_£g->
√xt
;

267 
ï_rög
->
íqueue
 =Ép_rög->
íq_£g
->
åbs
;

268 
√xt
 = 
ï_rög
->
íqueue
;

272 
	}
}

285 
	$xhci_queue_comm™d
(
xhci_˘æ
 *
˘æ
, 
u8
 *
±r
, 
u32
 
¶Ÿ_id
,

286 
u32
 
ï_ödex
, 
åb_ty≥
 
cmd
)

288 
u32
 
fõlds
[4];

289 
u64
 
vÆ_64
 = (
uöçå_t
)
±r
;

291 
	`BUG_ON
(
	`¥ï¨e_rög
(
˘æ
, cål->
cmd_rög
, 
EP_STATE_RUNNING
));

293 
fõlds
[0] = 
	`lowî_32_bôs
(
vÆ_64
);

294 
fõlds
[1] = 
	`uµî_32_bôs
(
vÆ_64
);

295 
fõlds
[2] = 0;

296 
fõlds
[3] = 
	`TRB_TYPE
(
cmd
Ë| 
	`EP_ID_FOR_TRB
(
ï_ödex
) |

297 
	`SLOT_ID_FOR_TRB
(
¶Ÿ_id
Ë| 
˘æ
->
cmd_rög
->
cy˛e_°©e
;

299 
	`queue_åb
(
˘æ
, cål->
cmd_rög
, 
Ál£
, 
fõlds
);

302 
	`xhci_wrôñ
(&
˘æ
->
dba
->
do‹bñl
[0], 
DB_VALUE_HOST
);

303 
	`xhci_ªadl
(&
˘æ
->
dba
->
do‹bñl
[0]);

305 
	}
}

315 
u32
 
	$xhci_td_ªmaödî
(
td_å™s„r_size
, 
td_ru¬ög_tŸÆ


316 , 
maxp
, 
åb_buf„r_Àngth
)

318 
u32
 
max
 = 31;

319 
ªmaödî
, 
td_∑ckë_cou¡
, 
∑ckë_å™s„ºed
;

323 i‡(
td_ru¬ög_tŸÆ
 + 
åb_buf„r_Àngth
 =
td_å™s„r_size
)

327 
∑ckë_å™s„ºed
 = (
td_ru¬ög_tŸÆ
 ) / 
maxp
;

328 
td_∑ckë_cou¡
 = 
	`DIV_ROUND_UP
(
td_å™s„r_size
, 
maxp
);

329 
ªmaödî
 = 
td_∑ckë_cou¡
 - 
∑ckë_å™s„ºed
;

331 i‡(
ªmaödî
 > 
max
)

332  
max
 << 17;

334  
ªmaödî
 << 17;

335 
	}
}

347 
u32
 
	$xhci_v1_0_td_ªmaödî
(
ru¬ög_tŸÆ
,

348 
åb_buff_Àn
,

349 
tŸÆ_∑ckë_cou¡
,

350 
max∑ckësize
,

351 
num_åbs_À·
)

353 
∑ckës_å™s„ºed
;

356 i‡(
num_åbs_À·
 =0 || (
ru¬ög_tŸÆ
 =0 && 
åb_buff_Àn
 == 0))

363 
∑ckës_å™s„ºed
 = (
ru¬ög_tŸÆ
 + 
åb_buff_Àn
Ë/ 
max∑ckësize
;

365 i‡((
tŸÆ_∑ckë_cou¡
 - 
∑ckës_å™s„ºed
) > 31)

367  (
tŸÆ_∑ckë_cou¡
 - 
∑ckës_å™s„ºed
) << 17;

368 
	}
}

379 
	$giveback_fú°_åb
(
usb_devi˚
 *
udev
, 
ï_ödex
,

380 
°¨t_cy˛e
,

381 
xhci_gíîic_åb
 *
°¨t_åb
)

383 
xhci_˘æ
 *
˘æ
 = 
udev
->
c⁄åﬁÀr
;

389 
	`xhci_Êush_ˇche
((
uöt32_t
)
°¨t_åb
, (
xhci_gíîic_åb
));

390 i‡(
°¨t_cy˛e
)

391 
°¨t_åb
->
fõld
[3] |
	`˝u_to_À32
(
°¨t_cy˛e
);

393 
°¨t_åb
->
fõld
[3] &
	`˝u_to_À32
(~
TRB_CYCLE
);

395 
	`xhci_Êush_ˇche
((
uöt32_t
)
°¨t_åb
, (
xhci_gíîic_åb
));

398 
	`xhci_wrôñ
(&
˘æ
->
dba
->
do‹bñl
[
udev
->
¶Ÿ_id
],

399 
	`DB_VALUE
(
ï_ödex
, 0));

402 
	}
}

414 
	$xhci_acknowÀdge_evít
(
xhci_˘æ
 *
˘æ
)

417 
	`öc_deq
(
˘æ
, cål->
evít_rög
);

420 
	`xhci_wrôeq
(&
˘æ
->
ú_£t
->
î°_dequeue
,

421 (
uöçå_t
)
˘æ
->
evít_rög
->
dequeue
 | 
ERST_EHB
);

422 
	}
}

430 
	$evít_ªady
(
xhci_˘æ
 *
˘æ
)

432 
xhci_åb
 *
evít
;

434 
	`xhci_övÆ_ˇche
((
uöt32_t
)
˘æ
->
evít_rög
->
dequeue
,

435 (
xhci_åb
));

437 
evít
 = 
˘æ
->
evít_rög
->
dequeue
;

440 i‡((
	`À32_to_˝u
(
evít
->
evít_cmd
.
Êags
Ë& 
TRB_CYCLE
) !=

441 
˘æ
->
evít_rög
->
cy˛e_°©e
)

445 
	}
}

456 
xhci_åb
 *
	$xhci_waô_f‹_evít
(
xhci_˘æ
 *
˘æ
, 
åb_ty≥
 
ex≥˘ed
)

458 
åb_ty≥
 
ty≥
;

459 
ts
 = 
	`gë_timî
(0);

460 
ªåy
 = 50;

462 
åy_agaö
:

464 
xhci_åb
 *
evít
 = 
˘æ
->
evít_rög
->
dequeue
;

466 i‡(!
	`evít_ªady
(
˘æ
))

469 
ty≥
 = 
	`TRB_FIELD_TO_TYPE
(
	`À32_to_˝u
(
evít
->
evít_cmd
.
Êags
));

470 i‡(
ty≥
 =
ex≥˘ed
)

471  
evít
;

473 i‡(
ty≥
 =
TRB_PORT_STATUS
) {

479 
	`BUG_ON
(
	`GET_COMP_CODE
(

480 
	`À32_to_˝u
(
evít
->
gíîic
.
fõld
[2])) !=

481 
COMP_SUCCESS
);

484 
	`¥ötf
("Unexpected XHCIÉvent TRB, skipping... "

486 
	`À32_to_˝u
(
evít
->
gíîic
.
fõld
[0]),

487 
	`À32_to_˝u
(
evít
->
gíîic
.
fõld
[1]),

488 
	`À32_to_˝u
(
evít
->
gíîic
.
fõld
[2]),

489 
	`À32_to_˝u
(
evít
->
gíîic
.
fõld
[3]));

491 
	`xhci_acknowÀdge_evít
(
˘æ
);

492 } 
	`gë_timî
(
ts
Ë< (
XHCI_TIMEOUT
 * 50000));

494 
ªåy
--;

495 i‡(
ªåy
 > 0)

496 
åy_agaö
;

499 i‡(
ex≥˘ed
 =
TRB_TRANSFER
)

500  
NULL
;

502 
	`¥ötf
("\n\n\nXHCIÅimeouà⁄Évíàty≥ %d... c™nŸÑecovî.\n\n\n", 
ex≥˘ed
);

503 
	`BUG
();

504 
	}
}

514 
	$ab‹t_td
(
usb_devi˚
 *
udev
, 
ï_ödex
)

516 
xhci_˘æ
 *
˘æ
 = 
udev
->
c⁄åﬁÀr
;

517 
xhci_rög
 *
rög
 = 
˘æ
->
devs
[
udev
->
¶Ÿ_id
]->
ïs
[
ï_ödex
].ring;

518 
xhci_åb
 *
evít
;

519 
u32
 
fõld
;

521 
	`xhci_queue_comm™d
(
˘æ
, 
NULL
, 
udev
->
¶Ÿ_id
, 
ï_ödex
, 
TRB_STOP_RING
);

523 
evít
 = 
	`xhci_waô_f‹_evít
(
˘æ
, 
TRB_TRANSFER
);

524 
fõld
 = 
	`À32_to_˝u
(
evít
->
å™s_evít
.
Êags
);

525 
	`BUG_ON
(
	`TRB_TO_SLOT_ID
(
fõld
Ë!
udev
->
¶Ÿ_id
);

526 
	`BUG_ON
(
	`TRB_TO_EP_INDEX
(
fõld
Ë!
ï_ödex
);

527 
	`BUG_ON
(
	`GET_COMP_CODE
(
	`À32_to_˝u
(
evít
->
å™s_evít
.
å™s„r_Àn


528 !
COMP_STOP
)));

529 
	`xhci_acknowÀdge_evít
(
˘æ
);

531 
evít
 = 
	`xhci_waô_f‹_evít
(
˘æ
, 
TRB_COMPLETION
);

532 
	`BUG_ON
(
	`TRB_TO_SLOT_ID
(
	`À32_to_˝u
(
evít
->
evít_cmd
.
Êags
))

533 !
udev
->
¶Ÿ_id
 || 
	`GET_COMP_CODE
(
	`À32_to_˝u
(

534 
evít
->
evít_cmd
.
°©us
)Ë!
COMP_SUCCESS
);

535 
	`xhci_acknowÀdge_evít
(
˘æ
);

537 
	`xhci_queue_comm™d
(
˘æ
, (*)((
uöçå_t
)
rög
->
íqueue
 |

538 
rög
->
cy˛e_°©e
), 
udev
->
¶Ÿ_id
, 
ï_ödex
, 
TRB_SET_DEQ
);

539 
evít
 = 
	`xhci_waô_f‹_evít
(
˘æ
, 
TRB_COMPLETION
);

540 
	`BUG_ON
(
	`TRB_TO_SLOT_ID
(
	`À32_to_˝u
(
evít
->
evít_cmd
.
Êags
))

541 !
udev
->
¶Ÿ_id
 || 
	`GET_COMP_CODE
(
	`À32_to_˝u
(

542 
evít
->
evít_cmd
.
°©us
)Ë!
COMP_SUCCESS
);

543 
	`xhci_acknowÀdge_evít
(
˘æ
);

544 
	}
}

546 
	$ªc‹d_å™s„r_ªsu…
(
usb_devi˚
 *
udev
,

547 
xhci_åb
 *
evít
, 
Àngth
)

549 
udev
->
a˘_Àn
 = 
	`mö
(
Àngth
,Üength -

550 
	`EVENT_TRB_LEN
(
	`À32_to_˝u
(
evít
->
å™s_evít
.
å™s„r_Àn
)));

552 
	`GET_COMP_CODE
(
	`À32_to_˝u
(
evít
->
å™s_evít
.
å™s„r_Àn
))) {

553 
COMP_SUCCESS
:

554 
	`BUG_ON
(
udev
->
a˘_Àn
 !
Àngth
);

556 
COMP_SHORT_TX
:

557 
udev
->
°©us
 = 0;

559 
COMP_STALL
:

560 
udev
->
°©us
 = 
USB_ST_STALLED
;

562 
COMP_DB_ERR
:

563 
COMP_TRB_ERR
:

564 
udev
->
°©us
 = 
USB_ST_BUF_ERR
;

566 
COMP_BABBLE
:

567 
udev
->
°©us
 = 
USB_ST_BABBLE_DET
;

570 
udev
->
°©us
 = 0x80;

572 
	}
}

584 
	$xhci_bulk_tx
(
usb_devi˚
 *
udev
, 
pùe
,

585 
Àngth
, *
buf„r
)

587 
num_åbs
 = 0;

588 
xhci_gíîic_åb
 *
°¨t_åb
;

589 
fú°_åb
 = 0;

590 
°¨t_cy˛e
;

591 
u32
 
fõld
 = 0;

592 
u32
 
Àngth_fõld
 = 0;

593 
xhci_˘æ
 *
˘æ
 = 
udev
->
c⁄åﬁÀr
;

594 
¶Ÿ_id
 = 
udev
->slot_id;

595 
ï_ödex
;

596 
xhci_vút_devi˚
 *
vút_dev
;

597 
xhci_ï_˘x
 *
ï_˘x
;

598 
xhci_rög
 *
rög
;

599 
xhci_åb
 *
evít
;

601 
ru¬ög_tŸÆ
, 
åb_buff_Àn
;

602 
tŸÆ_∑ckë_cou¡
;

603 
max∑ckësize
;

604 
u64
 
addr
;

605 
ªt
;

606 
u32
 
åb_fõlds
[4];

607 
u64
 
vÆ_64
 = (
uöçå_t
)
	`KSEG1ADDR
(
buf„r
);

609 
	`XHCI_RING_PRINTF
("dev=%p,Öipe=%lx, buffer=%p,Üength=%d\n",

610 
udev
, 
pùe
, 
buf„r
, 
Àngth
);

612 
ï_ödex
 = 
	`usb_pùe_ï_ödex
(
pùe
);

613 
vút_dev
 = 
˘æ
->
devs
[
¶Ÿ_id
];

615 
	`xhci_övÆ_ˇche
((
uöt32_t
)
vút_dev
->
out_˘x
->
byãs
,

616 
vút_dev
->
out_˘x
->
size
);

618 
ï_˘x
 = 
	`xhci_gë_ï_˘x
(
˘æ
, 
vút_dev
->
out_˘x
, 
ï_ödex
);

620 
rög
 = 
vút_dev
->
ïs
[
ï_ödex
].ring;

627 
ru¬ög_tŸÆ
 = 
TRB_MAX_BUFF_SIZE
 -

628 (
	`lowî_32_bôs
(
vÆ_64
Ë& (
TRB_MAX_BUFF_SIZE
 - 1));

629 
åb_buff_Àn
 = 
ru¬ög_tŸÆ
;

630 
ru¬ög_tŸÆ
 &
TRB_MAX_BUFF_SIZE
 - 1;

636 i‡(
ru¬ög_tŸÆ
 !0 || 
Àngth
 == 0)

637 
num_åbs
++;

640 
ru¬ög_tŸÆ
 < 
Àngth
) {

641 
num_åbs
++;

642 
ru¬ög_tŸÆ
 +
TRB_MAX_BUFF_SIZE
;

650 
ªt
 = 
	`¥ï¨e_rög
(
˘æ
, 
rög
,

651 
	`À32_to_˝u
(
ï_˘x
->
ï_öfo
Ë& 
EP_STATE_MASK
);

652 i‡(
ªt
 < 0)

653  
ªt
;

660 
°¨t_åb
 = &
rög
->
íqueue
->
gíîic
;

661 
°¨t_cy˛e
 = 
rög
->
cy˛e_°©e
;

662 
ru¬ög_tŸÆ
 = 0;

663 
max∑ckësize
 = 
	`usb_max∑ckë
(
udev
, 
pùe
);

664 
tŸÆ_∑ckë_cou¡
 = 
	`DIV_ROUND_UP
(
Àngth
, 
max∑ckësize
);

672 
addr
 = 
	`KSEG1ADDR
(
vÆ_64
);

673 i‡(
åb_buff_Àn
 > 
Àngth
)

674 
åb_buff_Àn
 = 
Àngth
;

676 
fú°_åb
 = 
åue
;

679 
	`xhci_Êush_ˇche
((
uöt32_t
)
buf„r
, 
Àngth
);

683 
u32
 
ªmaödî
 = 0;

684 
fõld
 = 0;

686 i‡(
fú°_åb
) {

687 
fú°_åb
 = 
Ál£
;

688 i‡(
°¨t_cy˛e
 == 0)

689 
fõld
 |
TRB_CYCLE
;

691 
fõld
 |
rög
->
cy˛e_°©e
;

698 i‡(
num_åbs
 > 1)

699 
fõld
 |
TRB_CHAIN
;

701 
fõld
 |
TRB_IOC
;

704 i‡(
	`usb_pùeö
(
pùe
))

705 
fõld
 |
TRB_ISP
;

708 i‡(
	`HC_VERSION
(
	`xhci_ªadl
(&
˘æ
->
hc¸
->
¸_ˇpba£
)) < 0x100)

709 
ªmaödî
 = 
	`xhci_td_ªmaödî
(
Àngth
, 
ru¬ög_tŸÆ
, 
max∑ckësize
, 
åb_buff_Àn
);

712 
ªmaödî
 = 
	`xhci_v1_0_td_ªmaödî
(
ru¬ög_tŸÆ
,

713 
åb_buff_Àn
,

714 
tŸÆ_∑ckë_cou¡
,

715 
max∑ckësize
,

716 
num_åbs
 - 1);

717 
Àngth_fõld
 = ((
åb_buff_Àn
 & 
TRB_LEN_MASK
) |

718 
ªmaödî
 |

719 ((0 & 
TRB_INTR_TARGET_MASK
) <<

720 
TRB_INTR_TARGET_SHIFT
));

721 
åb_fõlds
[0] = 
	`lowî_32_bôs
(
addr
);

722 
åb_fõlds
[1] = 
	`uµî_32_bôs
(
addr
);

723 
åb_fõlds
[2] = 
Àngth_fõld
;

724 
åb_fõlds
[3] = 
fõld
 | (
TRB_NORMAL
 << 
TRB_TYPE_SHIFT
);

726 
	`queue_åb
(
˘æ
, 
rög
, (
num_åbs
 > 1), 
åb_fõlds
);

728 --
num_åbs
;

730 
ru¬ög_tŸÆ
 +
åb_buff_Àn
;

733 
addr
 +
åb_buff_Àn
;

734 
åb_buff_Àn
 = 
	`mö
((
Àngth
 - 
ru¬ög_tŸÆ
), 
TRB_MAX_BUFF_SIZE
);

735 } 
ru¬ög_tŸÆ
 < 
Àngth
);

737 
	`giveback_fú°_åb
(
udev
, 
ï_ödex
, 
°¨t_cy˛e
, 
°¨t_åb
);

739 
evít
 = 
	`xhci_waô_f‹_evít
(
˘æ
, 
TRB_TRANSFER
);

740 i‡(!
evít
) {

741 
	`XHCI_RING_PRINTF
("XHCI bulkÅransferÅimed out,áborting...\n");

742 
	`ab‹t_td
(
udev
, 
ï_ödex
);

743 
udev
->
°©us
 = 
USB_ST_NAK_REC
;

744 
udev
->
a˘_Àn
 = 0;

745  -
ETIMEDOUT
;

747 
fõld
 = 
	`À32_to_˝u
(
evít
->
å™s_evít
.
Êags
);

749 
	`BUG_ON
(
	`TRB_TO_SLOT_ID
(
fõld
Ë!
¶Ÿ_id
);

750 
	`BUG_ON
(
	`TRB_TO_EP_INDEX
(
fõld
Ë!
ï_ödex
);

751 
	`BUG_ON
(*(**)(
uöçå_t
)
	`À64_to_˝u
(
evít
->
å™s_evít
.
buf„r
) -

752 
buf„r
 > (
size_t
)
Àngth
);

754 
	`ªc‹d_å™s„r_ªsu…
(
udev
, 
evít
, 
Àngth
);

755 
	`xhci_acknowÀdge_evít
(
˘æ
);

756 
	`xhci_övÆ_ˇche
((
uöt32_t
)
buf„r
, 
Àngth
);

758  (
udev
->
°©us
 !
USB_ST_NOT_PROC
) ? 0 : -1;

759 
	}
}

771 
	$xhci_˘æ_tx
(
usb_devi˚
 *
udev
, 
pùe
,

772 
devªque°
 *
ªq
, 
Àngth
,

773 *
buf„r
)

775 
ªt
;

776 
°¨t_cy˛e
;

777 
num_åbs
;

778 
u32
 
fõld
;

779 
u32
 
Àngth_fõld
;

780 
u64
 
buf_64
 = 0;

781 
xhci_gíîic_åb
 *
°¨t_åb
;

782 
xhci_˘æ
 *
˘æ
 = 
udev
->
c⁄åﬁÀr
;

783 
¶Ÿ_id
 = 
udev
->slot_id;

784 
ï_ödex
;

785 
u32
 
åb_fõlds
[4];

786 
xhci_vút_devi˚
 *
vút_dev
 = 
˘æ
->
devs
[
¶Ÿ_id
];

787 
xhci_rög
 *
ï_rög
;

788 
xhci_åb
 *
evít
;

790 
	`XHCI_RING_PRINTF
("req=%u (%#x),Åype=%u (%#x), value=%u (%#x), index=%u\n",

791 
ªq
->
ªque°
,Ñeq->request,

792 
ªq
->
ªque°ty≥
,Ñeq->requesttype,

793 
	`À16_to_˝u
(
ªq
->
vÆue
),Üe16_to_cpu(req->value),

794 
	`À16_to_˝u
(
ªq
->
ödex
));

796 
ï_ödex
 = 
	`usb_pùe_ï_ödex
(
pùe
);

798 
ï_rög
 = 
vút_dev
->
ïs
[
ï_ödex
].
rög
;

804 i‡(
udev
->
•ìd
 =
USB_SPEED_FULL
) {

805 
ªt
 = 
	`xhci_check_max∑ckë
(
udev
);

806 i‡(
ªt
 < 0)

807  
ªt
;

810 
	`xhci_övÆ_ˇche
((
uöt32_t
)
vút_dev
->
out_˘x
->
byãs
,

811 
vút_dev
->
out_˘x
->
size
);

813 
xhci_ï_˘x
 *
ï_˘x
 = 
NULL
;

814 
ï_˘x
 = 
	`xhci_gë_ï_˘x
(
˘æ
, 
vút_dev
->
out_˘x
, 
ï_ödex
);

817 
num_åbs
 = 2;

824 i‡(
Àngth
 > 0)

825 
num_åbs
++;

831 
ªt
 = 
	`¥ï¨e_rög
(
˘æ
, 
ï_rög
,

832 
	`À32_to_˝u
(
ï_˘x
->
ï_öfo
Ë& 
EP_STATE_MASK
);

834 i‡(
ªt
 < 0)

835  
ªt
;

842 
°¨t_åb
 = &
ï_rög
->
íqueue
->
gíîic
;

843 
°¨t_cy˛e
 = 
ï_rög
->
cy˛e_°©e
;

845 
	`XHCI_RING_PRINTF
("°¨t_åb %p, sèπ_cy˛ê%d\n", 
°¨t_åb
, 
°¨t_cy˛e
);

849 
fõld
 = 0;

850 
fõld
 |
TRB_IDT
 | (
TRB_SETUP
 << 
TRB_TYPE_SHIFT
);

851 i‡(
°¨t_cy˛e
 == 0)

852 
fõld
 |= 0x1;

858 i‡(
Àngth
 > 0) {

859 i‡(
ªq
->
ªque°ty≥
 & 
USB_DIR_IN
)

860 
fõld
 |(
TRB_DATA_IN
 << 
TRB_TX_TYPE_SHIFT
);

862 
fõld
 |(
TRB_DATA_OUT
 << 
TRB_TX_TYPE_SHIFT
);

866 
	`XHCI_RING_PRINTF
("req->requesttype = %d,Ñeq->request = %d,"

870 
ªq
->
ªque°ty≥
,Ñeq->
ªque°
, 
	`À16_to_˝u
‘eq->
vÆue
),

871 
	`À16_to_˝u
(
ªq
->
ödex
),Üe16_to_˝u‘eq->
Àngth
));

873 
åb_fõlds
[0] = 
ªq
->
ªque°ty≥
 |Ñeq->
ªque°
 << 8 |

874 
	`À16_to_˝u
(
ªq
->
vÆue
) << 16;

875 
åb_fõlds
[1] = 
	`À16_to_˝u
(
ªq
->
ödex
) |

876 
	`À16_to_˝u
(
ªq
->
Àngth
) << 16;

878 
åb_fõlds
[2] = (8 | ((0 & 
TRB_INTR_TARGET_MASK
) <<

879 
TRB_INTR_TARGET_SHIFT
));

881 
åb_fõlds
[3] = 
fõld
;

882 
	`queue_åb
(
˘æ
, 
ï_rög
, 
åue
, 
åb_fõlds
);

885 
fõld
 = 0;

888 i‡(
	`usb_pùeö
(
pùe
))

889 
fõld
 = 
TRB_ISP
 | (
TRB_DATA
 << 
TRB_TYPE_SHIFT
);

891 
fõld
 = (
TRB_DATA
 << 
TRB_TYPE_SHIFT
);

893 
Àngth_fõld
 = (
Àngth
 & 
TRB_LEN_MASK
) | 0 |

895 ((0 & 
TRB_INTR_TARGET_MASK
Ë<< 
TRB_INTR_TARGET_SHIFT
);

901 i‡(
Àngth
 > 0) {

902 i‡(
ªq
->
ªque°ty≥
 & 
USB_DIR_IN
)

903 
fõld
 |
TRB_DIR_IN
;

904 
buf_64
 = (
uöçå_t
)
buf„r
;

906 
åb_fõlds
[0] = 
	`lowî_32_bôs
(
buf_64
);

907 
åb_fõlds
[1] = 
	`uµî_32_bôs
(
buf_64
);

908 
åb_fõlds
[2] = 
Àngth_fõld
;

909 
åb_fõlds
[3] = 
fõld
 | 
ï_rög
->
cy˛e_°©e
;

911 
	`xhci_Êush_ˇche
((
uöt32_t
)
buf„r
, 
Àngth
);

912 
	`queue_åb
(
˘æ
, 
ï_rög
, 
åue
, 
åb_fõlds
);

921 
fõld
 = 0;

922 i‡(
Àngth
 > 0 && 
ªq
->
ªque°ty≥
 & 
USB_DIR_IN
)

923 
fõld
 = 0;

925 
fõld
 = 
TRB_DIR_IN
;

927 
åb_fõlds
[0] = 0;

928 
åb_fõlds
[1] = 0;

929 
åb_fõlds
[2] = ((0 & 
TRB_INTR_TARGET_MASK
Ë<< 
TRB_INTR_TARGET_SHIFT
);

931 
åb_fõlds
[3] = 
fõld
 | 
TRB_IOC
 |

932 (
TRB_STATUS
 << 
TRB_TYPE_SHIFT
) |

933 
ï_rög
->
cy˛e_°©e
;

935 
	`queue_åb
(
˘æ
, 
ï_rög
, 
Ál£
, 
åb_fõlds
);

937 
	`giveback_fú°_åb
(
udev
, 
ï_ödex
, 
°¨t_cy˛e
, 
°¨t_åb
);

939 
evít
 = 
	`xhci_waô_f‹_evít
(
˘æ
, 
TRB_TRANSFER
);

940 i‡(!
evít
)

941 
ab‹t
;

942 
fõld
 = 
	`À32_to_˝u
(
evít
->
å™s_evít
.
Êags
);

944 
	`BUG_ON
(
	`TRB_TO_SLOT_ID
(
fõld
Ë!
¶Ÿ_id
);

945 
	`BUG_ON
(
	`TRB_TO_EP_INDEX
(
fõld
Ë!
ï_ödex
);

947 
	`ªc‹d_å™s„r_ªsu…
(
udev
, 
evít
, 
Àngth
);

948 
	`xhci_acknowÀdge_evít
(
˘æ
);

951 i‡(
Àngth
 > 0)

952 
	`xhci_övÆ_ˇche
((
uöt32_t
)
buf„r
, 
Àngth
);

954 i‡(
	`GET_COMP_CODE
(
	`À32_to_˝u
(
evít
->
å™s_evít
.
å™s„r_Àn
))

955 =
COMP_SHORT_TX
) {

957 
evít
 = 
	`xhci_waô_f‹_evít
(
˘æ
, 
TRB_TRANSFER
);

958 i‡(!
evít
)

959 
ab‹t
;

960 
	`BUG_ON
(
	`TRB_TO_SLOT_ID
(
fõld
Ë!
¶Ÿ_id
);

961 
	`BUG_ON
(
	`TRB_TO_EP_INDEX
(
fõld
Ë!
ï_ödex
);

962 
	`xhci_acknowÀdge_evít
(
˘æ
);

965  (
udev
->
°©us
 !
USB_ST_NOT_PROC
) ? 0 : -1;

967 
ab‹t
:

968 
	`XHCI_RING_PRINTF
("XHCI controlÅransferÅimed out,áborting...\n");

969 
	`ab‹t_td
(
udev
, 
ï_ödex
);

970 
udev
->
°©us
 = 
USB_ST_NAK_REC
;

971 
udev
->
a˘_Àn
 = 0;

972  -
ETIMEDOUT
;

973 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/usb/host/xhci.c

23 
	~<asm/î∫o.h
>

25 
	~<compûî.h
>

26 
	~<comm⁄.h
>

28 
	~<usb.h
>

30 
	~"xhci.h
"

34 #ifdef 
USB_XHCI_DEBUG


35 
	#USB_XHCI_PRINTF
(
fmt
,
¨gs
...Ë
	`¥ötf
 (fmà,##¨gs)

	)

37 
	#USB_XHCI_PRINTF
(
fmt
,
¨gs
...)

	)

40 #i‚de‡
CONFIG_USB_MAX_CONTROLLER_COUNT


41 
	#CONFIG_USB_MAX_CONTROLLER_COUNT
 1

	)

44 
	sdes¸ùt‹
 {

45 
usb_hub_des¸ùt‹
 
	mhub
;

46 
usb_devi˚_des¸ùt‹
 
	mdevi˚
;

47 
usb_c⁄fig_des¸ùt‹
 
	mc⁄fig
;

48 
usb_öãrÁ˚_des¸ùt‹
 
	möãrÁ˚
;

49 
usb_ídpoöt_des¸ùt‹
 
	mídpoöt
;

50 
usb_ss_ï_comp_des¸ùt‹
 
	mï_com∑ni⁄
;

51 } 
__©åibuã__
 ((
∑cked
)Ë
	gdes¸ùt‹
 = {

56 
˝u_to_À16
(0x8),

65 
˝u_to_À16
(0x0300),

72 
˝u_to_À16
(0x0100),

81 
˝u_to_À16
(0x1f),

114 
˝u_to_À16
(0x02),

118 
xhci_˘æ
 
	gxhcic
[
CONFIG_USB_MAX_CONTROLLER_COUNT
];

122 
	$xhci_ªadl
(
uöt32_t
 vﬁ©ûê*
ªgs
)

124  
	`ªadl
(
ªgs
);

125 
	}
}

127 
	$xhci_wrôñ
(
uöt32_t
 vﬁ©ûê*
ªgs
, c⁄° 
vÆ
)

129 
	`wrôñ
(
vÆ
, 
ªgs
);

130 
	}
}

140 
u64
 
	$xhci_ªadq
(
__À64
 vﬁ©ûê*
ªgs
)

142 vﬁ©ûê*
±r
 = (*)
ªgs
;

143 
__u64
 
vÆ_lo
, 
vÆ_hi
;

145 
vÆ_lo
 = 
	`ªadl
(
±r
);

146 
vÆ_hi
 = 
	`ªadl
(
±r
 + 1);

148  
vÆ_lo
 + (
vÆ_hi
 << 32);

149 
	}
}

151 
	$xhci_wrôeq
(
__À64
 vﬁ©ûê*
ªgs
, c⁄° 
u64
 
vÆ
)

153 vﬁ©ûê*
±r
 = (*)
ªgs
;

154 
u32
 
vÆ_lo
 = 
	`lowî_32_bôs
(
vÆ
);

156 
u32
 
vÆ_hi
 = 0;

157 
	`wrôñ
(
vÆ_lo
, 
±r
);

158 
	`wrôñ
(
vÆ_hi
, 
±r
 + 1);

159 
	}
}

173 
	$h™dshake
(
uöt32_t
 vﬁ©ûê*
±r
, uöt32_à
mask
,

174 
uöt32_t
 
d⁄e
, 
u£c
)

176 
uöt32_t
 
ªsu…
;

179 
ªsu…
 = 
	`xhci_ªadl
(
±r
);

180 i‡(
ªsu…
 =~(
uöt32_t
)0)

181  -
ENODEV
;

182 
ªsu…
 &
mask
;

183 i‡(
ªsu…
 =
d⁄e
)

185 
u£c
--;

186 
	`udñay
(1);

187 } 
u£c
 > 0);

189  -
ETIMEDOUT
;

190 
	}
}

198 
	$xhci_°¨t
(
xhci_hc‹
 *
hc‹
)

200 
u32
 
ãmp
;

201 
ªt
;

203 
	`puts
("StartingÅhe controller\n");

204 
ãmp
 = 
	`xhci_ªadl
(&
hc‹
->
‹_usbcmd
);

205 
ãmp
 |(
CMD_RUN
);

206 
	`xhci_wrôñ
(&
hc‹
->
‹_usbcmd
, 
ãmp
);

212 
ªt
 = 
	`h™dshake
(&
hc‹
->
‹_usb°s
, 
STS_HALT
, 0, 
XHCI_MAX_HALT_USEC
);

213 i‡(
ªt
)

214 
	`USB_XHCI_PRINTF
("HostÅookÅooÜongÅo start, "

216 
XHCI_MAX_HALT_USEC
);

217  
ªt
;

218 
	}
}

226 
	$xhci_ª£t
(
xhci_hc‹
 *
hc‹
)

228 
u32
 
cmd
;

229 
u32
 
°©e
;

230 
ªt
;

233 
	`USB_XHCI_PRINTF
("// HaltÅhe HC\n");

234 
°©e
 = 
	`xhci_ªadl
(&
hc‹
->
‹_usb°s
Ë& 
STS_HALT
;

235 i‡(!
°©e
) {

236 
cmd
 = 
	`xhci_ªadl
(&
hc‹
->
‹_usbcmd
);

237 
cmd
 &~
CMD_RUN
;

238 
	`xhci_wrôñ
(&
hc‹
->
‹_usbcmd
, 
cmd
);

241 
ªt
 = 
	`h™dshake
(&
hc‹
->
‹_usb°s
,

242 
STS_HALT
, STS_HALT, 
XHCI_MAX_HALT_USEC
);

243 i‡(
ªt
) {

244 
	`USB_XHCI_PRINTF
("HostÇot haltedáfter %u microseconds.\n",

245 
XHCI_MAX_HALT_USEC
);

246  -
EBUSY
;

249 
	`USB_XHCI_PRINTF
("// ResetÅhe HC\n");

250 
cmd
 = 
	`xhci_ªadl
(&
hc‹
->
‹_usbcmd
);

251 
cmd
 |
CMD_RESET
;

252 
	`xhci_wrôñ
(&
hc‹
->
‹_usbcmd
, 
cmd
);

254 
ªt
 = 
	`h™dshake
(&
hc‹
->
‹_usbcmd
, 
CMD_RESET
, 0, 
XHCI_MAX_RESET_USEC
);

255 i‡(
ªt
)

256  
ªt
;

262  
	`h™dshake
(&
hc‹
->
‹_usb°s
, 
STS_CNR
, 0, 
XHCI_MAX_RESET_USEC
);

263 
	}
}

278 
	$xhci_gë_ï_ödex
(
usb_ídpoöt_des¸ùt‹
 *
desc
)

280 
ödex
;

282 i‡(
	`usb_ídpoöt_x„r_c⁄åﬁ
(
desc
))

283 
ödex
 = ()(
	`usb_ídpoöt_num
(
desc
) * 2);

285 
ödex
 = ()((
	`usb_ídpoöt_num
(
desc
) * 2) -

286 (
	`usb_ídpoöt_dú_ö
(
desc
) ? 0 : 1));

288  
ödex
;

289 
	}
}

299 
	$xhci_c⁄figuª_ídpoöts
(
usb_devi˚
 *
udev
, 
˘x_ch™ge
)

301 
xhci_c⁄èöî_˘x
 *
ö_˘x
;

302 
xhci_vút_devi˚
 *
vút_dev
;

303 
xhci_˘æ
 *
˘æ
 = 
udev
->
c⁄åﬁÀr
;

304 
xhci_åb
 *
evít
;

306 
vút_dev
 = 
˘æ
->
devs
[
udev
->
¶Ÿ_id
];

307 
ö_˘x
 = 
vút_dev
->in_ctx;

309 
	`xhci_Êush_ˇche
((
uöt32_t
)
ö_˘x
->
byãs
, in_˘x->
size
);

310 
	`xhci_queue_comm™d
(
˘æ
, 
ö_˘x
->
byãs
, 
udev
->
¶Ÿ_id
, 0,

311 
˘x_ch™ge
 ? 
TRB_EVAL_CONTEXT
 : 
TRB_CONFIG_EP
);

312 
evít
 = 
	`xhci_waô_f‹_evít
(
˘æ
, 
TRB_COMPLETION
);

313 
	`BUG_ON
(
	`TRB_TO_SLOT_ID
(
	`À32_to_˝u
(
evít
->
evít_cmd
.
Êags
))

314 !
udev
->
¶Ÿ_id
);

316 
	`GET_COMP_CODE
(
	`À32_to_˝u
(
evít
->
evít_cmd
.
°©us
))) {

317 
COMP_SUCCESS
:

318 
	`USB_XHCI_PRINTF
("Successful %s command\n",

319 
˘x_ch™ge
 ? "Evaluate Context" : "Configure Endpoint");

322 
	`¥ötf
("ERROR: %s commandÑeturned completion code %d.\n",

323 
˘x_ch™ge
 ? "Evaluate Context" : "Configure Endpoint",

324 
	`GET_COMP_CODE
(
	`À32_to_˝u
(
evít
->
evít_cmd
.
°©us
)));

325  -
EINVAL
;

328 
	`xhci_acknowÀdge_evít
(
˘æ
);

331 
	}
}

339 
	$xhci_£t_c⁄figuøti⁄
(
usb_devi˚
 *
udev
)

341 
xhci_c⁄èöî_˘x
 *
ö_˘x
;

342 
xhci_c⁄èöî_˘x
 *
out_˘x
;

343 
xhci_öput_c⁄åﬁ_˘x
 *
˘æ_˘x
;

344 
xhci_¶Ÿ_˘x
 *
¶Ÿ_˘x
;

345 
xhci_ï_˘x
 *
ï_˘x
[
MAX_EP_CTX_NUM
];

346 
cur_ï
;

347 
max_ï_Êag
 = 0;

348 
ï_ödex
;

349 
dú
;

350 
ï_ty≥
;

351 
xhci_˘æ
 *
˘æ
 = 
udev
->
c⁄åﬁÀr
;

352 
num_of_ï
;

353 
ï_Êag
 = 0;

354 
u64
 
åb_64
 = 0;

355 
¶Ÿ_id
 = 
udev
->slot_id;

356 
xhci_vút_devi˚
 *
vút_dev
 = 
˘æ
->
devs
[
¶Ÿ_id
];

357 
usb_öãrÁ˚
 *
ifdesc
;

359 
out_˘x
 = 
vút_dev
->out_ctx;

360 
ö_˘x
 = 
vút_dev
->in_ctx;

362 
num_of_ï
 = 
udev
->
c⁄fig
.
if_desc
[0].
no_of_ï
;

363 
ifdesc
 = &
udev
->
c⁄fig
.
if_desc
[0];

365 
˘æ_˘x
 = 
	`xhci_gë_öput_c⁄åﬁ_˘x
(
ö_˘x
);

367 
˘æ_˘x
->
add_Êags
 = 0;

368 
˘æ_˘x
->
dr›_Êags
 = 0;

371 
cur_ï
 = 0; cur_ï < 
num_of_ï
; cur_ep++) {

372 
ï_Êag
 = 
	`xhci_gë_ï_ödex
(&
ifdesc
->
ï_desc
[
cur_ï
]);

373 
˘æ_˘x
->
add_Êags
 |
	`˝u_to_À32
(1 << (
ï_Êag
 + 1));

374 i‡(
max_ï_Êag
 < 
ï_Êag
)

375 
max_ï_Êag
 = 
ï_Êag
;

378 
	`xhci_övÆ_ˇche
((
uöt32_t
)
out_˘x
->
byãs
, out_˘x->
size
);

381 
	`xhci_¶Ÿ_c›y
(
˘æ
, 
ö_˘x
, 
out_˘x
);

382 
¶Ÿ_˘x
 = 
	`xhci_gë_¶Ÿ_˘x
(
˘æ
, 
ö_˘x
);

383 
¶Ÿ_˘x
->
dev_öfo
 &~(
LAST_CTX_MASK
);

384 
¶Ÿ_˘x
->
dev_öfo
 |
	`˝u_to_À32
(
	`LAST_CTX
(
max_ï_Êag
 + 1) | 0);

386 
	`xhci_ídpoöt_c›y
(
˘æ
, 
ö_˘x
, 
out_˘x
, 0);

389 
cur_ï
 = 0; cur_ï < 
num_of_ï
; cur_ep++) {

390 
usb_ídpoöt_des¸ùt‹
 *
íd±_desc
 = 
NULL
;

392 
íd±_desc
 = &
ifdesc
->
ï_desc
[
cur_ï
];

393 
åb_64
 = 0;

395 
ï_ödex
 = 
	`xhci_gë_ï_ödex
(
íd±_desc
);

396 
ï_˘x
[
ï_ödex
] = 
	`xhci_gë_ï_˘x
(
˘æ
, 
ö_˘x
,Ép_index);

399 
vút_dev
->
ïs
[
ï_ödex
].
rög
 = 
	`xhci_rög_Æloc
(1, 
åue
);

400 i‡(!
vút_dev
->
ïs
[
ï_ödex
].
rög
)

401  -
ENOMEM
;

404 
dú
 = (((
íd±_desc
->
bEndpoötAddªss
) & (0x80)) >> 7);

405 
ï_ty≥
 = (((
íd±_desc
->
bmAâribuãs
Ë& (0x3)Ë| (
dú
 << 2));

406 
ï_˘x
[
ï_ödex
]->
ï_öfo2
 =

407 
	`˝u_to_À32
(
ï_ty≥
 << 
EP_TYPE_SHIFT
);

408 
ï_˘x
[
ï_ödex
]->
ï_öfo2
 |=

409 
	`˝u_to_À32
(
MAX_PACKET


410 (
	`gë_u«lig√d
(&
íd±_desc
->
wMaxPackëSize
)));

412 
ï_˘x
[
ï_ödex
]->
ï_öfo2
 |=

413 
	`˝u_to_À32
(((0 & 
MAX_BURST_MASK
Ë<< 
MAX_BURST_SHIFT
) |

414 ((3 & 
ERROR_COUNT_MASK
Ë<< 
ERROR_COUNT_SHIFT
));

416 
åb_64
 = (
uöçå_t
)

417 
vút_dev
->
ïs
[
ï_ödex
].
rög
->
íqueue
;

418 
ï_˘x
[
ï_ödex
]->
deq
 = 
	`˝u_to_À64
(
åb_64
 |

419 
vút_dev
->
ïs
[
ï_ödex
].
rög
->
cy˛e_°©e
);

422  
	`xhci_c⁄figuª_ídpoöts
(
udev
, 
Ál£
);

423 
	}
}

432 
	$xhci_addªss_devi˚
(
usb_devi˚
 *
udev
)

434 
ªt
 = 0;

435 
xhci_˘æ
 *
˘æ
 = 
udev
->
c⁄åﬁÀr
;

436 
xhci_¶Ÿ_˘x
 *
¶Ÿ_˘x
;

437 
xhci_öput_c⁄åﬁ_˘x
 *
˘æ_˘x
;

438 
xhci_vút_devi˚
 *
vút_dev
;

439 
¶Ÿ_id
 = 
udev
->slot_id;

440 
xhci_åb
 *
evít
;

442 
vút_dev
 = 
˘æ
->
devs
[
¶Ÿ_id
];

448 
	`USB_XHCI_PRINTF
("Setting upáddressable devices\n");

449 
	`xhci_£tup_addªsßbÀ_vút_dev
(
udev
);

451 
˘æ_˘x
 = 
	`xhci_gë_öput_c⁄åﬁ_˘x
(
vút_dev
->
ö_˘x
);

452 
˘æ_˘x
->
add_Êags
 = 
	`˝u_to_À32
(
SLOT_FLAG
 | 
EP0_FLAG
);

453 
˘æ_˘x
->
dr›_Êags
 = 0;

455 
	`xhci_queue_comm™d
(
˘æ
, (*)
˘æ_˘x
, 
¶Ÿ_id
, 0, 
TRB_ADDR_DEV
);

456 
evít
 = 
	`xhci_waô_f‹_evít
(
˘æ
, 
TRB_COMPLETION
);

457 
	`BUG_ON
(
	`TRB_TO_SLOT_ID
(
	`À32_to_˝u
(
evít
->
evít_cmd
.
Êags
)Ë!
¶Ÿ_id
);

459 
	`GET_COMP_CODE
(
	`À32_to_˝u
(
evít
->
evít_cmd
.
°©us
))) {

460 
COMP_CTX_STATE
:

461 
COMP_EBADSLT
:

462 
	`¥ötf
("Setup ERROR:áddress device command for slot %d.\n",

463 
¶Ÿ_id
);

464 
ªt
 = -
EINVAL
;

466 
COMP_TX_ERR
:

467 
	`puts
("DeviceÇotÑespondingÅo setáddress.\n");

468 
ªt
 = -
EPROTO
;

470 
COMP_DEV_ERR
:

471 
	`puts
("ERROR: Incompatible device"

473 
ªt
 = -
ENODEV
;

475 
COMP_SUCCESS
:

476 
	`USB_XHCI_PRINTF
("Successful Address Device command\n");

477 
udev
->
°©us
 = 0;

480 
	`¥ötf
("ERROR: unexpected command completion code 0x%x.\n",

481 
	`GET_COMP_CODE
(
	`À32_to_˝u
(
evít
->
evít_cmd
.
°©us
)));

482 
ªt
 = -
EINVAL
;

486 
	`xhci_acknowÀdge_evít
(
˘æ
);

488 i‡(
ªt
 < 0)

493  
ªt
;

495 
	`xhci_övÆ_ˇche
((
uöt32_t
)
vút_dev
->
out_˘x
->
byãs
,

496 
vút_dev
->
out_˘x
->
size
);

497 
¶Ÿ_˘x
 = 
	`xhci_gë_¶Ÿ_˘x
(
˘æ
, 
vút_dev
->
out_˘x
);

499 
	`USB_XHCI_PRINTF
("xHC internaláddress is: %d\n",

500 
	`À32_to_˝u
(
¶Ÿ_˘x
->
dev_°©e
Ë& 
DEV_ADDR_MASK
);

503 
	}
}

514 
	$usb_Æloc_devi˚
(
usb_devi˚
 *
udev
)

516 
xhci_åb
 *
evít
;

517 
xhci_˘æ
 *
˘æ
 = 
udev
->
c⁄åﬁÀr
;

518 
ªt
;

525 i‡(
˘æ
->
roŸdev
 == 0) {

526 
udev
->
•ìd
 = 
USB_SPEED_SUPER
;

530 
	`xhci_queue_comm™d
(
˘æ
, 
NULL
, 0, 0, 
TRB_ENABLE_SLOT
);

531 
evít
 = 
	`xhci_waô_f‹_evít
(
˘æ
, 
TRB_COMPLETION
);

532 
	`BUG_ON
(
	`GET_COMP_CODE
(
	`À32_to_˝u
(
evít
->
evít_cmd
.
°©us
))

533 !
COMP_SUCCESS
);

535 
udev
->
¶Ÿ_id
 = 
	`TRB_TO_SLOT_ID
(
	`À32_to_˝u
(
evít
->
evít_cmd
.
Êags
));

537 
	`xhci_acknowÀdge_evít
(
˘æ
);

539 
ªt
 = 
	`xhci_Æloc_vút_devi˚
(
udev
);

540 i‡(
ªt
 < 0) {

545 
	`puts
("CouldÇotállocate xHCI USB device data structures\n");

546  
ªt
;

550 
	}
}

561 
	$xhci_check_max∑ckë
(
usb_devi˚
 *
udev
)

563 
xhci_˘æ
 *
˘æ
 = 
udev
->
c⁄åﬁÀr
;

564 
¶Ÿ_id
 = 
udev
->slot_id;

565 
ï_ödex
 = 0;

566 
xhci_c⁄èöî_˘x
 *
ö_˘x
;

567 
xhci_c⁄èöî_˘x
 *
out_˘x
;

568 
xhci_öput_c⁄åﬁ_˘x
 *
˘æ_˘x
;

569 
xhci_ï_˘x
 *
ï_˘x
;

570 
max_∑ckë_size
;

571 
hw_max_∑ckë_size
;

572 
ªt
 = 0;

573 
usb_öãrÁ˚
 *
ifdesc
;

575 
ifdesc
 = &
udev
->
c⁄fig
.
if_desc
[0];

577 
out_˘x
 = 
˘æ
->
devs
[
¶Ÿ_id
]->out_ctx;

578 
	`xhci_övÆ_ˇche
((
uöt32_t
)
out_˘x
->
byãs
, out_˘x->
size
);

580 
ï_˘x
 = 
	`xhci_gë_ï_˘x
(
˘æ
, 
out_˘x
, 
ï_ödex
);

581 
hw_max_∑ckë_size
 = 
	`MAX_PACKET_DECODED
(
	`À32_to_˝u
(
ï_˘x
->
ï_öfo2
));

582 
max_∑ckë_size
 = 
	`usb_ídpoöt_maxp
(&
ifdesc
->
ï_desc
[0]);

583 i‡(
hw_max_∑ckë_size
 !
max_∑ckë_size
) {

584 
	`USB_XHCI_PRINTF
("Max Packet Size forÉp 0 changed.\n");

585 
	`USB_XHCI_PRINTF
("MaxÖackë sizêö usb_devi˚ = %d\n", 
max_∑ckë_size
);

586 
	`USB_XHCI_PRINTF
("MaxÖackë sizêö xHCI HW = %d\n", 
hw_max_∑ckë_size
);

587 
	`USB_XHCI_PRINTF
("IssuingÉvaluate context command.\n");

590 
	`xhci_ídpoöt_c›y
(
˘æ
, cål->
devs
[
¶Ÿ_id
]->
ö_˘x
,

591 
˘æ
->
devs
[
¶Ÿ_id
]->
out_˘x
, 
ï_ödex
);

592 
ö_˘x
 = 
˘æ
->
devs
[
¶Ÿ_id
]->in_ctx;

593 
ï_˘x
 = 
	`xhci_gë_ï_˘x
(
˘æ
, 
ö_˘x
, 
ï_ödex
);

594 
ï_˘x
->
ï_öfo2
 &
	`˝u_to_À32
(~
MAX_PACKET_MASK
);

595 
ï_˘x
->
ï_öfo2
 |
	`˝u_to_À32
(
	`MAX_PACKET
(
max_∑ckë_size
));

602 
˘æ_˘x
 = 
	`xhci_gë_öput_c⁄åﬁ_˘x
(
ö_˘x
);

603 
˘æ_˘x
->
add_Êags
 = 
	`˝u_to_À32
(
EP0_FLAG
);

604 
˘æ_˘x
->
dr›_Êags
 = 0;

606 
ªt
 = 
	`xhci_c⁄figuª_ídpoöts
(
udev
, 
åue
);

608  
ªt
;

609 
	}
}

620 
	$xhci_˛ór_p‹t_ch™ge_bô
(
u16
 
wVÆue
,

621 
u16
 
wIndex
, vﬁ©ûê
uöt32_t
 *
addr
, 
u32
 
p‹t_°©us
)

623 *
p‹t_ch™ge_bô
;

624 
u32
 
°©us
;

626 
wVÆue
) {

627 
USB_PORT_FEAT_C_RESET
:

628 
°©us
 = 
PORT_RC
;

629 
p‹t_ch™ge_bô
 = "reset";

631 
USB_PORT_FEAT_C_CONNECTION
:

632 
°©us
 = 
PORT_CSC
;

633 
p‹t_ch™ge_bô
 = "connect";

635 
USB_PORT_FEAT_C_OVER_CURRENT
:

636 
°©us
 = 
PORT_OCC
;

637 
p‹t_ch™ge_bô
 = "over-current";

639 
USB_PORT_FEAT_C_ENABLE
:

640 
°©us
 = 
PORT_PEC
;

641 
p‹t_ch™ge_bô
 = "enable/disable";

643 
USB_PORT_FEAT_C_SUSPEND
:

644 
°©us
 = 
PORT_PLC
;

645 
p‹t_ch™ge_bô
 = "suspend/resume";

653 
	`xhci_wrôñ
(
addr
, 
p‹t_°©us
 | 
°©us
);

655 
p‹t_°©us
 = 
	`xhci_ªadl
(
addr
);

656 
	`USB_XHCI_PRINTF
("clearÖort %s change,áctualÖort %d status = 0x%x\n",

657 
p‹t_ch™ge_bô
, 
wIndex
, 
p‹t_°©us
);

658 
	}
}

670 
u32
 
	$xhci_p‹t_°©e_to_√uåÆ
(
u32
 
°©e
)

673  (
°©e
 & 
XHCI_PORT_RO
Ë| (°©ê& 
XHCI_PORT_RWS
);

674 
	}
}

684 
	$xhci_submô_roŸ
(
usb_devi˚
 *
udev
, 
pùe
,

685 *
buf„r
, 
devªque°
 *
ªq
)

687 
uöt8_t
 
tmpbuf
[4];

688 
u16
 
ty≥Req
;

689 *
§˝å
 = 
NULL
;

690 
Àn
, 
§˛í
;

691 
uöt32_t
 
ªg
;

692 vﬁ©ûê
uöt32_t
 *
°©us_ªg
;

693 
xhci_˘æ
 *
˘æ
 = 
udev
->
c⁄åﬁÀr
;

694 
xhci_hc‹
 *
hc‹
 = 
˘æ
->hcor;

696 i‡(((
ªq
->
ªque°ty≥
 & 
USB_RT_PORT
) &&

697 
	`À16_to_˝u
(
ªq
->
ödex
)Ë> 
CONFIG_SYS_USB_XHCI_MAX_ROOT_PORTS
) {

698 
	`¥ötf
("TheÑequestÖort(%d) isÇot configured\n",

699 
	`À16_to_˝u
(
ªq
->
ödex
) - 1);

700  -
EINVAL
;

703 
°©us_ªg
 = (vﬁ©ûê
uöt32_t
 *)

704 (&
hc‹
->
p‹åegs
[
	`À16_to_˝u
(
ªq
->
ödex
Ë- 1].
‹_p‹tsc
);

705 
§˛í
 = 0;

707 
ty≥Req
 = 
ªq
->
ªque°
 |Ñeq->
ªque°ty≥
 << 8;

709 
ty≥Req
) {

710 
Devi˚Reque°
 | 
USB_REQ_GET_DESCRIPTOR
:

711 
	`À16_to_˝u
(
ªq
->
vÆue
) >> 8) {

712 
USB_DT_DEVICE
:

713 
	`USB_XHCI_PRINTF
("USB_DT_DEVICEÑequest\n");

714 
§˝å
 = &
des¸ùt‹
.
devi˚
;

715 
§˛í
 = 0x12;

717 
USB_DT_CONFIG
:

718 
	`USB_XHCI_PRINTF
("USB_DT_CONFIG config\n");

719 
§˝å
 = &
des¸ùt‹
.
c⁄fig
;

720 
§˛í
 = 0x19;

722 
USB_DT_STRING
:

723 
	`USB_XHCI_PRINTF
("USB_DT_STRING config\n");

724 
	`À16_to_˝u
(
ªq
->
vÆue
) & 0xff) {

726 
§˝å
 = "\4\3\11\4";

727 
§˛í
 = 4;

730 
§˝å
 = "\16\3u\0-\0b\0o\0o\0t\0";

731 
§˛í
 = 14;

734 
§˝å
 = "\52\3X\0H\0C\0I\0 "

737 
§˛í
 = 42;

740 
	`¥ötf
("unknown value DT_STRING %x\n",

741 
	`À16_to_˝u
(
ªq
->
vÆue
));

742 
unknown
;

746 
	`¥ötf
("unknow¿vÆuê%x\n", 
	`À16_to_˝u
(
ªq
->
vÆue
));

747 
unknown
;

750 
USB_REQ_GET_DESCRIPTOR
 | ((
USB_DIR_IN
 | 
USB_RT_HUB
) << 8):

751 
	`À16_to_˝u
(
ªq
->
vÆue
) >> 8) {

752 
USB_DT_HUB
:

753 
	`USB_XHCI_PRINTF
("USB_DT_HUB config\n");

754 
§˝å
 = &
des¸ùt‹
.
hub
;

755 
§˛í
 = 0x8;

758 
	`¥ötf
("unknow¿vÆuê%x\n", 
	`À16_to_˝u
(
ªq
->
vÆue
));

759 
unknown
;

762 
USB_REQ_SET_ADDRESS
 | (
USB_RECIP_DEVICE
 << 8):

763 
	`USB_XHCI_PRINTF
("USB_REQ_SET_ADDRESS\n");

764 
˘æ
->
roŸdev
 = 
	`À16_to_˝u
(
ªq
->
vÆue
);

766 
Devi˚OutReque°
 | 
USB_REQ_SET_CONFIGURATION
:

769 
USB_REQ_GET_STATUS
 | ((
USB_DIR_IN
 | 
USB_RT_HUB
) << 8):

770 
tmpbuf
[0] = 1;

771 
tmpbuf
[1] = 0;

772 
§˝å
 = 
tmpbuf
;

773 
§˛í
 = 2;

775 
USB_REQ_GET_STATUS
 | ((
USB_RT_PORT
 | 
USB_DIR_IN
) << 8):

776 
	`mem£t
(
tmpbuf
, 0, 4);

777 
ªg
 = 
	`xhci_ªadl
(
°©us_ªg
);

778 i‡(
ªg
 & 
PORT_CONNECT
) {

779 
tmpbuf
[0] |
USB_PORT_STAT_CONNECTION
;

780 
ªg
 & 
DEV_SPEED_MASK
) {

781 
XDEV_FS
:

782 
	`USB_XHCI_PRINTF
("SPEED = FULLSPEED\n");

784 
XDEV_LS
:

785 
	`USB_XHCI_PRINTF
("SPEED = LOWSPEED\n");

786 
tmpbuf
[1] |
USB_PORT_STAT_LOW_SPEED
 >> 8;

788 
XDEV_HS
:

789 
	`USB_XHCI_PRINTF
("SPEED = HIGHSPEED\n");

790 
tmpbuf
[1] |
USB_PORT_STAT_HIGH_SPEED
 >> 8;

792 
XDEV_SS
:

793 
	`USB_XHCI_PRINTF
("SPEED = SUPERSPEED\n");

794 
tmpbuf
[1] |
USB_PORT_STAT_SUPER_SPEED
 >> 8;

798 i‡(
ªg
 & 
PORT_PE
)

799 
tmpbuf
[0] |
USB_PORT_STAT_ENABLE
;

800 i‡((
ªg
 & 
PORT_PLS_MASK
Ë=
XDEV_U3
)

801 
tmpbuf
[0] |
USB_PORT_STAT_SUSPEND
;

802 i‡(
ªg
 & 
PORT_OC
)

803 
tmpbuf
[0] |
USB_PORT_STAT_OVERCURRENT
;

804 i‡(
ªg
 & 
PORT_RESET
)

805 
tmpbuf
[0] |
USB_PORT_STAT_RESET
;

806 i‡(
ªg
 & 
PORT_POWER
)

816 
tmpbuf
[1] |
USB_PORT_STAT_POWER
 >> 8;

817 i‡(
ªg
 & 
PORT_CSC
)

818 
tmpbuf
[2] |
USB_PORT_STAT_C_CONNECTION
;

819 i‡(
ªg
 & 
PORT_PEC
)

820 
tmpbuf
[2] |
USB_PORT_STAT_C_ENABLE
;

821 i‡(
ªg
 & 
PORT_OCC
)

822 
tmpbuf
[2] |
USB_PORT_STAT_C_OVERCURRENT
;

823 i‡(
ªg
 & 
PORT_RC
)

824 
tmpbuf
[2] |
USB_PORT_STAT_C_RESET
;

826 
§˝å
 = 
tmpbuf
;

827 
§˛í
 = 4;

829 
USB_REQ_SET_FEATURE
 | ((
USB_DIR_OUT
 | 
USB_RT_PORT
) << 8):

830 
ªg
 = 
	`xhci_ªadl
(
°©us_ªg
);

831 
ªg
 = 
	`xhci_p‹t_°©e_to_√uåÆ
(reg);

832 
	`À16_to_˝u
(
ªq
->
vÆue
)) {

833 
USB_PORT_FEAT_ENABLE
:

834 
ªg
 |
PORT_PE
;

835 
	`xhci_wrôñ
(
°©us_ªg
, 
ªg
);

837 
USB_PORT_FEAT_POWER
:

838 
ªg
 |
PORT_POWER
;

839 
	`xhci_wrôñ
(
°©us_ªg
, 
ªg
);

841 
USB_PORT_FEAT_RESET
:

842 
ªg
 |
PORT_RESET
;

843 
	`xhci_wrôñ
(
°©us_ªg
, 
ªg
);

846 
	`¥ötf
("unknow¿„©uª %x\n", 
	`À16_to_˝u
(
ªq
->
vÆue
));

847 
unknown
;

850 
USB_REQ_CLEAR_FEATURE
 | ((
USB_DIR_OUT
 | 
USB_RT_PORT
) << 8):

851 
ªg
 = 
	`xhci_ªadl
(
°©us_ªg
);

852 
ªg
 = 
	`xhci_p‹t_°©e_to_√uåÆ
(reg);

853 
	`À16_to_˝u
(
ªq
->
vÆue
)) {

854 
USB_PORT_FEAT_ENABLE
:

855 
ªg
 &~
PORT_PE
;

857 
USB_PORT_FEAT_POWER
:

858 
ªg
 &~
PORT_POWER
;

860 
USB_PORT_FEAT_C_RESET
:

861 
USB_PORT_FEAT_C_CONNECTION
:

862 
USB_PORT_FEAT_C_OVER_CURRENT
:

863 
USB_PORT_FEAT_C_ENABLE
:

864 
	`xhci_˛ór_p‹t_ch™ge_bô
((
	`À16_to_˝u
(
ªq
->
vÆue
)),

865 
	`À16_to_˝u
(
ªq
->
ödex
),

866 
°©us_ªg
, 
ªg
);

869 
	`¥ötf
("unknow¿„©uª %x\n", 
	`À16_to_˝u
(
ªq
->
vÆue
));

870 
unknown
;

872 
	`xhci_wrôñ
(
°©us_ªg
, 
ªg
);

875 
	`puts
("UnknownÑequest\n");

876 
unknown
;

879 
	`USB_XHCI_PRINTF
("scrlen = %d\nÑeq->length = %d\n",

880 
§˛í
, 
	`À16_to_˝u
(
ªq
->
Àngth
));

882 
Àn
 = 
	`mö
(
§˛í
, 
	`À16_to_˝u
(
ªq
->
Àngth
));

884 i‡(
§˝å
 !
NULL
 && 
Àn
 > 0)

885 
	`mem˝y
(
buf„r
, 
§˝å
, 
Àn
);

887 
	`USB_XHCI_PRINTF
("Len is 0\n");

889 
udev
->
a˘_Àn
 = 
Àn
;

890 
udev
->
°©us
 = 0;

894 
unknown
:

895 
udev
->
a˘_Àn
 = 0;

896 
udev
->
°©us
 = 
USB_ST_STALLED
;

898  -
ENODEV
;

899 
	}
}

912 
	$submô_öt_msg
(
usb_devi˚
 *
udev
, 
pùe
, *
buf„r
,

913 
Àngth
, 
öãrvÆ
)

919  -
EINVAL
;

920 
	}
}

932 
	$submô_bulk_msg
(
usb_devi˚
 *
udev
, 
pùe
, *
buf„r
,

933 
Àngth
)

935 i‡(
	`usb_pùëy≥
(
pùe
Ë!
PIPE_BULK
) {

936 
	`¥ötf
("n⁄-bulkÖùê—y≥=%lu)", 
	`usb_pùëy≥
(
pùe
));

937  -
EINVAL
;

940  
	`xhci_bulk_tx
(
udev
, 
pùe
, 
Àngth
, 
buf„r
);

941 
	}
}

954 
	$submô_c⁄åﬁ_msg
(
usb_devi˚
 *
udev
, 
pùe
, *
buf„r
,

955 
Àngth
, 
devªque°
 *
£tup
)

957 
xhci_˘æ
 *
˘æ
 = 
udev
->
c⁄åﬁÀr
;

958 
ªt
 = 0;

960 i‡(
	`usb_pùëy≥
(
pùe
Ë!
PIPE_CONTROL
) {

961 
	`¥ötf
("n⁄-c⁄åﬁÖùê—y≥=%lu)", 
	`usb_pùëy≥
(
pùe
));

962  -
EINVAL
;

965 i‡(
	`usb_pùedevi˚
(
pùe
Ë=
˘æ
->
roŸdev
)

966  
	`xhci_submô_roŸ
(
udev
, 
pùe
, 
buf„r
, 
£tup
);

968 i‡(
£tup
->
ªque°
 =
USB_REQ_SET_ADDRESS
)

969  
	`xhci_addªss_devi˚
(
udev
);

971 i‡(
£tup
->
ªque°
 =
USB_REQ_SET_CONFIGURATION
) {

972 
ªt
 = 
	`xhci_£t_c⁄figuøti⁄
(
udev
);

973 i‡(
ªt
) {

974 
	`puts
("FailedÅo configure xHCIÉndpoint\n");

975  
ªt
;

979  
	`xhci_˘æ_tx
(
udev
, 
pùe
, 
£tup
, 
Àngth
, 
buf„r
);

980 
	}
}

989 
	$usb_lowÀvñ_öô
(
ödex
, 
usb_öô_ty≥
 
öô
, **
c⁄åﬁÀr
)

991 
uöt32_t
 
vÆ
;

992 
uöt32_t
 
vÆ2
;

993 
uöt32_t
 
ªg
;

994 
xhci_hc¸
 *
hc¸
;

995 
xhci_hc‹
 *
hc‹
;

996 
xhci_˘æ
 *
˘æ
;

998 i‡(
	`xhci_hcd_öô
(
ödex
, &
hc¸
, (
xhci_hc‹
 **)&
hc‹
) != 0)

999  -
ENODEV
;

1001 i‡(
	`xhci_ª£t
(
hc‹
) != 0)

1002  -
ENODEV
;

1004 
˘æ
 = &
xhcic
[
ödex
];

1006 
˘æ
->
hc¸
 = hccr;

1007 
˘æ
->
hc‹
 = hcor;

1013 
vÆ
 = (
	`xhci_ªadl
(&
hc¸
->
¸_hc•¨ams1
Ë& 
HCS_SLOTS_MASK
);

1014 
vÆ2
 = 
	`xhci_ªadl
(&
hc‹
->
‹_c⁄fig
);

1015 
vÆ
 |(
vÆ2
 & ~
HCS_SLOTS_MASK
);

1016 
	`xhci_wrôñ
(&
hc‹
->
‹_c⁄fig
, 
vÆ
);

1019 
	`mtk_xhci_scheduÀr_öô
();

1021 i‡(
	`xhci_mem_öô
(
˘æ
, 
hc¸
, 
hc‹
) < 0)

1022  -
ENOMEM
;

1024 
ªg
 = 
	`xhci_ªadl
(&
hc¸
->
¸_hc•¨ams1
);

1025 
des¸ùt‹
.
hub
.
bNbrP‹ts
 = ((
ªg
 & 
HCS_MAX_PORTS_MASK
) >>

1026 
HCS_MAX_PORTS_SHIFT
);

1027 
	`¥ötf
("Regi°î %x NbrP‹t†%d\n", 
ªg
, 
des¸ùt‹
.
hub
.
bNbrP‹ts
);

1029 
	`íabÀXhciAŒP‹tPowî
(
hc‹
);

1032 
ªg
 = 
	`xhci_ªadl
(&
hc¸
->
¸_hc˝¨ams
);

1033 i‡(
	`HCS_INDICATOR
(
ªg
))

1034 
	`put_u«lig√d
(
	`gë_u«lig√d
(&
des¸ùt‹
.
hub
.
wHubCh¨a˘îi°ics
)

1035 | 0x80, &
des¸ùt‹
.
hub
.
wHubCh¨a˘îi°ics
);

1038 i‡(
	`HCC_PPC
(
ªg
))

1039 
	`put_u«lig√d
(
	`gë_u«lig√d
(&
des¸ùt‹
.
hub
.
wHubCh¨a˘îi°ics
)

1040 | 0x01, &
des¸ùt‹
.
hub
.
wHubCh¨a˘îi°ics
);

1042 i‡(
	`xhci_°¨t
(
hc‹
)) {

1043 
	`xhci_ª£t
(
hc‹
);

1044  -
ENODEV
;

1047 
	`xhci_wrôñ
(&
˘æ
->
ú_£t
->
úq_c⁄åﬁ
, 0);

1048 
	`xhci_wrôñ
(&
˘æ
->
ú_£t
->
úq_≥ndög
, 0);

1051 
ªg
 = 
	`HC_VERSION
(
	`xhci_ªadl
(&
hc¸
->
¸_ˇpba£
));

1053 *
c⁄åﬁÀr
 = &
xhcic
[
ödex
];

1057 
	}
}

1066 
	$usb_lowÀvñ_°›
(
ödex
)

1068 
xhci_˘æ
 *
˘æ
 = (
xhcic
 + 
ödex
);

1069 
u32
 
ãmp
;

1071 
	`xhci_ª£t
(
˘æ
->
hc‹
);

1073 
	`USB_XHCI_PRINTF
("// DisablingÉventÑing interrupts\n");

1074 
ãmp
 = 
	`xhci_ªadl
(&
˘æ
->
hc‹
->
‹_usb°s
);

1075 
	`xhci_wrôñ
(&
˘æ
->
hc‹
->
‹_usb°s
, 
ãmp
 & ~
STS_EINT
);

1076 
ãmp
 = 
	`xhci_ªadl
(&
˘æ
->
ú_£t
->
úq_≥ndög
);

1077 
	`xhci_wrôñ
(&
˘æ
->
ú_£t
->
úq_≥ndög
, 
	`ER_IRQ_DISABLE
(
ãmp
));

1079 
	`xhci_hcd_°›
(
ödex
);

1081 
	`xhci_˛ónup
(
˘æ
);

1084 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/usb/host/xhci.h

17 #i‚de‡
HOST_XHCI_H_


18 
	#HOST_XHCI_H_


	)

20 
	~<asm/ˇche.h
>

21 
	~<asm/io.h
>

23 
	~<c⁄figs/π2880.h
>

25 
	#uµî_32_bôs
(
n
Ë(
u32
)(“Ë>> 32)

	)

26 
	#lowî_32_bôs
(
n
Ë(
u32
)“)

	)

28 
	#MAX_EP_CTX_NUM
 31

	)

29 
	#XHCI_ALIGNMENT
 64

	)

31 
	#XHCI_TIMEOUT
 100000

	)

33 
	#MAX_HC_SLOTS
 256

	)

35 
	#MAX_HC_PORTS
 127

	)

38 
	#XHCI_MAX_HALT_USEC
 (16*1000)

	)

40 
	#XHCI_MAX_RESET_USEC
 (250*1000)

	)

49 
	#XHCI_PORT_RO
 ((1 << 0Ë| (1 << 3Ë| (0x‡<< 10Ë| (1 << 30))

	)

55 
	#XHCI_PORT_RWS
 ((0x‡<< 5Ë| (1 << 9Ë| (0x3 << 14Ë| (0x7 << 25))

	)

60 
	#XHCI_PORT_RW1S
 ((1 << 4))

	)

69 
	#XHCI_PORT_RW1CS
 ((1 << 1Ë| (0x7‡<< 17))

	)

74 
	#XHCI_PORT_RW
 ((1 << 16))

	)

79 
	#XHCI_PORT_RZ
 ((1 << 2Ë| (1 << 24Ë| (0x‡<< 28))

	)

84 
	sxhci_hc¸
 {

85 
uöt32_t
 
	m¸_ˇpba£
;

86 
uöt32_t
 
	m¸_hc•¨ams1
;

87 
uöt32_t
 
	m¸_hc•¨ams2
;

88 
uöt32_t
 
	m¸_hc•¨ams3
;

89 
uöt32_t
 
	m¸_hc˝¨ams
;

90 
uöt32_t
 
	m¸_dboff
;

91 
uöt32_t
 
	m¸_πsoff
;

95 
	#HC_LENGTH
(
p
Ë
	`XHCI_HC_LENGTH
’)

	)

97 
	#HC_VERSION
(
p
Ë((’Ë>> 16Ë& 0xffff)

	)

101 
	#HCS_MAX_SLOTS
(
p
Ë((’Ë>> 0Ë& 0xff)

	)

102 
	#HCS_SLOTS_MASK
 0xff

	)

104 
	#HCS_MAX_INTRS
(
p
Ë((’Ë>> 8Ë& 0x7ff)

	)

106 
	#HCS_MAX_PORTS_SHIFT
 24

	)

107 
	#HCS_MAX_PORTS_MASK
 (0x7‡<< 
HCS_MAX_PORTS_SHIFT
)

	)

108 
	#HCS_MAX_PORTS
(
p
Ë((’Ë>> 24Ë& 0x7f)

	)

113 
	#HCS_IST
(
p
Ë((’Ë>> 0Ë& 0xf)

	)

115 
	#HCS_ERST_MAX
(
p
Ë((’Ë>> 4Ë& 0xf)

	)

118 
	#HCS_MAX_SCRATCHPAD
(
p
Ë((’Ë>> 27Ë& 0x1f)

	)

122 
	#HCS_U1_LATENCY
(
p
Ë((’Ë>> 0Ë& 0xff)

	)

124 
	#HCS_U2_LATENCY
(
p
Ë((’Ë>> 16Ë& 0xffff)

	)

128 
	#HCC_64BIT_ADDR
(
p
Ë(’Ë& (1 << 0))

	)

130 
	#HCC_BANDWIDTH_NEG
(
p
Ë(’Ë& (1 << 1))

	)

134 
	#HCC_64BYTE_CONTEXT
(
p
Ë(’Ë& (1 << 2))

	)

136 
	#HCC_PPC
(
p
Ë(’Ë& (1 << 3))

	)

138 
	#HCS_INDICATOR
(
p
Ë(’Ë& (1 << 4))

	)

140 
	#HCC_LIGHT_RESET
(
p
Ë(’Ë& (1 << 5))

	)

142 
	#HCC_LTC
(
p
Ë(’Ë& (1 << 6))

	)

144 
	#HCC_NSS
(
p
Ë(’Ë& (1 << 7))

	)

146 
	#HCC_MAX_PSA
(
p
Ë(1 << (((’Ë>> 12Ë& 0xfË+ 1))

	)

148 
	#HCC_EXT_CAPS
(
p
Ë
	`XHCI_HCC_EXT_CAPS
’)

	)

151 
	#DBOFF_MASK
 (~0x3)

	)

154 
	#RTSOFF_MASK
 (~0x1f)

	)

159 
	#NUM_PORT_REGS
 4

	)

161 
	sxhci_hc‹_p‹t_ªgs
 {

162 vﬁ©ûê
uöt32_t
 
	m‹_p‹tsc
;

163 vﬁ©ûê
uöt32_t
 
	m‹_p‹çmsc
;

164 vﬁ©ûê
uöt32_t
 
	m‹_p‹éi
;

165 vﬁ©ûê
uöt32_t
 
	mª£rved_3
;

168 
	sxhci_hc‹
 {

169 vﬁ©ûê
uöt32_t
 
	m‹_usbcmd
;

170 vﬁ©ûê
uöt32_t
 
	m‹_usb°s
;

171 vﬁ©ûê
uöt32_t
 
	m‹_∑gesize
;

172 vﬁ©ûê
uöt32_t
 
	mª£rved_0
[2];

173 vﬁ©ûê
uöt32_t
 
	m‹_dn˘æ
;

174 vﬁ©ûê
uöt64_t
 
	m‹_¸¸
;

175 vﬁ©ûê
uöt32_t
 
	mª£rved_1
[4];

176 vﬁ©ûê
uöt64_t
 
	m‹_dcbØp
;

177 vﬁ©ûê
uöt32_t
 
	m‹_c⁄fig
;

178 vﬁ©ûê
uöt32_t
 
	mª£rved_2
[241];

179 
xhci_hc‹_p‹t_ªgs
 
	mp‹åegs
[
CONFIG_SYS_USB_XHCI_MAX_ROOT_PORTS
];

181 
uöt32_t
 
	mª£rved_4
[
CONFIG_SYS_USB_XHCI_MAX_ROOT_PORTS
 * 254];

186 
	#CMD_RUN
 
XHCI_CMD_RUN


	)

191 
	#CMD_RESET
 (1 << 1)

	)

193 
	#CMD_EIE
 
XHCI_CMD_EIE


	)

195 
	#CMD_HSEIE
 
XHCI_CMD_HSEIE


	)

198 
	#CMD_LRESET
 (1 << 7)

	)

200 
	#CMD_CSS
 (1 << 8)

	)

201 
	#CMD_CRS
 (1 << 9)

	)

203 
	#CMD_EWE
 
XHCI_CMD_EWE


	)

209 
	#CMD_PM_INDEX
 (1 << 11)

	)

214 
	#STS_HALT
 
XHCI_STS_HALT


	)

216 
	#STS_FATAL
 (1 << 2)

	)

218 
	#STS_EINT
 (1 << 3)

	)

220 
	#STS_PORT
 (1 << 4)

	)

223 
	#STS_SAVE
 (1 << 8)

	)

225 
	#STS_RESTORE
 (1 << 9)

	)

227 
	#STS_SRE
 (1 << 10)

	)

229 
	#STS_CNR
 
XHCI_STS_CNR


	)

231 
	#STS_HCE
 (1 << 12)

	)

239 
	#DEV_NOTE_MASK
 (0xffff)

	)

240 
	#ENABLE_DEV_NOTE
(
x
Ë(1 << (x))

	)

244 
	#DEV_NOTE_FWAKE
 
	`ENABLE_DEV_NOTE
(1)

	)

249 
	#CMD_RING_PAUSE
 (1 << 1)

	)

251 
	#CMD_RING_ABORT
 (1 << 2)

	)

253 
	#CMD_RING_RUNNING
 (1 << 3)

	)

256 
	#CMD_RING_RSVD_BITS
 (0x3f)

	)

260 
	#MAX_DEVS
(
p
Ë(’Ë& 0xff)

	)

265 
	#PORT_CONNECT
 (1 << 0)

	)

267 
	#PORT_PE
 (1 << 1)

	)

270 
	#PORT_OC
 (1 << 3)

	)

272 
	#PORT_RESET
 (1 << 4)

	)

277 
	#PORT_PLS_MASK
 (0x‡<< 5)

	)

278 
	#XDEV_U0
 (0x0 << 5)

	)

279 
	#XDEV_U2
 (0x2 << 5)

	)

280 
	#XDEV_U3
 (0x3 << 5)

	)

281 
	#XDEV_RESUME
 (0x‡<< 5)

	)

283 
	#PORT_POWER
 (1 << 9)

	)

292 
	#DEV_SPEED_MASK
 (0x‡<< 10)

	)

293 
	#XDEV_FS
 (0x1 << 10)

	)

294 
	#XDEV_LS
 (0x2 << 10)

	)

295 
	#XDEV_HS
 (0x3 << 10)

	)

296 
	#XDEV_SS
 (0x4 << 10)

	)

297 
	#DEV_UNDEFSPEED
(
p
Ë((’Ë& 
DEV_SPEED_MASK
Ë=(0x0<<10))

	)

298 
	#DEV_FULLSPEED
(
p
Ë((’Ë& 
DEV_SPEED_MASK
Ë=
XDEV_FS
)

	)

299 
	#DEV_LOWSPEED
(
p
Ë((’Ë& 
DEV_SPEED_MASK
Ë=
XDEV_LS
)

	)

300 
	#DEV_HIGHSPEED
(
p
Ë((’Ë& 
DEV_SPEED_MASK
Ë=
XDEV_HS
)

	)

301 
	#DEV_SUPERSPEED
(
p
Ë((’Ë& 
DEV_SPEED_MASK
Ë=
XDEV_SS
)

	)

303 
	#SLOT_SPEED_FS
 (
XDEV_FS
 << 10)

	)

304 
	#SLOT_SPEED_LS
 (
XDEV_LS
 << 10)

	)

305 
	#SLOT_SPEED_HS
 (
XDEV_HS
 << 10)

	)

306 
	#SLOT_SPEED_SS
 (
XDEV_SS
 << 10)

	)

308 
	#PORT_LED_OFF
 (0 << 14)

	)

309 
	#PORT_LED_AMBER
 (1 << 14)

	)

310 
	#PORT_LED_GREEN
 (2 << 14)

	)

311 
	#PORT_LED_MASK
 (3 << 14)

	)

313 
	#PORT_LINK_STROBE
 (1 << 16)

	)

315 
	#PORT_CSC
 (1 << 17)

	)

317 
	#PORT_PEC
 (1 << 18)

	)

323 
	#PORT_WRC
 (1 << 19)

	)

325 
	#PORT_OCC
 (1 << 20)

	)

327 
	#PORT_RC
 (1 << 21)

	)

341 
	#PORT_PLC
 (1 << 22)

	)

343 
	#PORT_CEC
 (1 << 23)

	)

346 
	#PORT_WKCONN_E
 (1 << 25)

	)

348 
	#PORT_WKDISC_E
 (1 << 26)

	)

350 
	#PORT_WKOC_E
 (1 << 27)

	)

353 
	#PORT_DEV_REMOVE
 (1 << 30)

	)

355 
	#PORT_WR
 (1 << 31)

	)

358 
	#DUPLICATE_ENTRY
 ((
u8
)(-1))

	)

364 
	#PORT_U1_TIMEOUT
(
p
Ë(’Ë& 0xff)

	)

366 
	#PORT_U2_TIMEOUT
(
p
Ë((’Ë& 0xffË<< 8)

	)

370 
	#PORT_L1S_MASK
 7

	)

371 
	#PORT_L1S_SUCCESS
 1

	)

372 
	#PORT_RWE
 (1 << 3)

	)

373 
	#PORT_HIRD
(
p
Ë((’Ë& 0xfË<< 4)

	)

374 
	#PORT_HIRD_MASK
 (0x‡<< 4)

	)

375 
	#PORT_L1DS
(
p
Ë((’Ë& 0xffË<< 8)

	)

376 
	#PORT_HLE
 (1 << 16)

	)

396 
	sxhci_öå_ªg
 {

397 vﬁ©ûê
__À32
 
	múq_≥ndög
;

398 vﬁ©ûê
__À32
 
	múq_c⁄åﬁ
;

399 vﬁ©ûê
__À32
 
	mî°_size
;

400 vﬁ©ûê
__À32
 
	mrsvd
;

401 vﬁ©ûê
__À64
 
	mî°_ba£
;

402 vﬁ©ûê
__À64
 
	mî°_dequeue
;

406 
	#ER_IRQ_PENDING
(
p
Ë(’Ë& 0x1)

	)

409 
	#ER_IRQ_CLEAR
(
p
Ë(’Ë& 0xffffff„)

	)

410 
	#ER_IRQ_ENABLE
(
p
Ë((
	`ER_IRQ_CLEAR
’)Ë| 0x2)

	)

411 
	#ER_IRQ_DISABLE
(
p
Ë((
	`ER_IRQ_CLEAR
’)Ë& ~(0x2))

	)

418 
	#ER_IRQ_INTERVAL_MASK
 (0xffff)

	)

420 
	#ER_IRQ_COUNTER_MASK
 (0xfff‡<< 16)

	)

424 
	#ERST_SIZE_MASK
 (0xfff‡<< 16)

	)

430 
	#ERST_DESI_MASK
 (0x7)

	)

434 
	#ERST_EHB
 (1 << 3)

	)

435 
	#ERST_PTR_MASK
 (0xf)

	)

445 
	sxhci_run_ªgs
 {

446 
__À32
 
	mmi¸o‰ame_ödex
;

447 
__À32
 
	mrsvd
[7];

448 
xhci_öå_ªg
 
	mú_£t
[128];

460 
	sxhci_do‹bñl_¨øy
 {

461 vﬁ©ûê
__À32
 
	mdo‹bñl
[256];

464 
	#DB_VALUE
(
ï
, 
°ªam
Ë(((”pË+ 1Ë& 0xffË| ((°ªamË<< 16))

	)

465 
	#DB_VALUE_HOST
 0x00000000

	)

475 
	sxhci_¥Ÿocﬁ_ˇps
 {

476 
u32
 
	mªvisi⁄
;

477 
u32
 
	m«me_°rög
;

478 
u32
 
	mp‹t_öfo
;

481 
	#XHCI_EXT_PORT_MAJOR
(
x
Ë(((xË>> 24Ë& 0xff)

	)

482 
	#XHCI_EXT_PORT_OFF
(
x
Ë((xË& 0xff)

	)

483 
	#XHCI_EXT_PORT_COUNT
(
x
Ë(((xË>> 8Ë& 0xff)

	)

495 
	sxhci_c⁄èöî_˘x
 {

496 
	mty≥
;

497 
	#XHCI_CTX_TYPE_DEVICE
 0x1

	)

498 
	#XHCI_CTX_TYPE_INPUT
 0x2

	)

500 
	msize
;

501 
u8
 *
	mbyãs
;

515 
	sxhci_¶Ÿ_˘x
 {

516 
__À32
 
	mdev_öfo
;

517 
__À32
 
	mdev_öfo2
;

518 
__À32
 
	mâ_öfo
;

519 
__À32
 
	mdev_°©e
;

521 
__À32
 
	mª£rved
[4];

526 
	#ROUTE_STRING_MASK
 (0xfffff)

	)

528 
	#DEV_SPEED
 (0x‡<< 20)

	)

531 
	#DEV_MTT
 (0x1 << 25)

	)

533 
	#DEV_HUB
 (0x1 << 26)

	)

535 
	#LAST_CTX_MASK
 (0x1‡<< 27)

	)

536 
	#LAST_CTX
(
p
Ë(’Ë<< 27)

	)

537 
	#LAST_CTX_TO_EP_NUM
(
p
Ë((’Ë>> 27Ë- 1)

	)

538 
	#SLOT_FLAG
 (1 << 0)

	)

539 
	#EP0_FLAG
 (1 << 1)

	)

543 
	#MAX_EXIT
 (0xffff)

	)

545 
	#ROOT_HUB_PORT
(
p
Ë((’Ë& 0xffË<< 16)

	)

546 
	#ROOT_HUB_PORT_MASK
 (0xff)

	)

547 
	#ROOT_HUB_PORT_SHIFT
 (16)

	)

548 
	#DEVINFO_TO_ROOT_HUB_PORT
(
p
Ë((’Ë>> 16Ë& 0xff)

	)

550 
	#XHCI_MAX_PORTS
(
p
Ë((’Ë& 0xffË<< 24)

	)

558 
	#TT_SLOT
 (0xff)

	)

563 
	#TT_PORT
 (0xf‡<< 8)

	)

564 
	#TT_THINK_TIME
(
p
Ë((’Ë& 0x3Ë<< 16)

	)

568 
	#DEV_ADDR_MASK
 (0xff)

	)

571 
	#SLOT_STATE
 (0x1‡<< 27)

	)

572 
	#GET_SLOT_STATE
(
p
Ë((’Ë& (0x1‡<< 27)Ë>> 27)

	)

574 
	#SLOT_STATE_DISABLED
 0

	)

575 
	#SLOT_STATE_ENABLED
 
SLOT_STATE_DISABLED


	)

576 
	#SLOT_STATE_DEFAULT
 1

	)

577 
	#SLOT_STATE_ADDRESSED
 2

	)

578 
	#SLOT_STATE_CONFIGURED
 3

	)

598 
	sxhci_ï_˘x
 {

599 
__À32
 
	mï_öfo
;

600 
__À32
 
	mï_öfo2
;

601 
__À64
 
	mdeq
;

602 
__À32
 
	mtx_öfo
;

604 
__À32
 
	mª£rved
[3];

617 
	#EP_STATE_MASK
 (0xf)

	)

618 
	#EP_STATE_DISABLED
 0

	)

619 
	#EP_STATE_RUNNING
 1

	)

620 
	#EP_STATE_HALTED
 2

	)

621 
	#EP_STATE_STOPPED
 3

	)

622 
	#EP_STATE_ERROR
 4

	)

624 
	#EP_MULT
(
p
Ë((’Ë& 0x3Ë<< 8)

	)

625 
	#CTX_TO_EP_MULT
(
p
Ë((’Ë>> 8Ë& 0x3)

	)

629 
	#EP_INTERVAL
(
p
Ë((’Ë& 0xffË<< 16)

	)

630 
	#EP_INTERVAL_TO_UFRAMES
(
p
Ë(1 << ((’Ë>> 16Ë& 0xff))

	)

631 
	#CTX_TO_EP_INTERVAL
(
p
Ë((’Ë>> 16Ë& 0xff)

	)

632 
	#EP_MAXPSTREAMS_MASK
 (0x1‡<< 10)

	)

633 
	#EP_MAXPSTREAMS
(
p
Ë((’Ë<< 10Ë& 
EP_MAXPSTREAMS_MASK
)

	)

635 
	#EP_HAS_LSA
 (1 << 15)

	)

642 
	#FORCE_EVENT
 (0x1)

	)

643 
	#ERROR_COUNT
(
p
Ë((’Ë& 0x3Ë<< 1)

	)

644 
	#ERROR_COUNT_SHIFT
 (1)

	)

645 
	#ERROR_COUNT_MASK
 (0x3)

	)

646 
	#CTX_TO_EP_TYPE
(
p
Ë((’Ë>> 3Ë& 0x7)

	)

647 
	#EP_TYPE
(
p
Ë(’Ë<< 3)

	)

648 
	#EP_TYPE_SHIFT
 (3)

	)

649 
	#ISOC_OUT_EP
 1

	)

650 
	#BULK_OUT_EP
 2

	)

651 
	#INT_OUT_EP
 3

	)

652 
	#CTRL_EP
 4

	)

653 
	#ISOC_IN_EP
 5

	)

654 
	#BULK_IN_EP
 6

	)

655 
	#INT_IN_EP
 7

	)

658 
	#MAX_BURST
(
p
Ë((’)&0xffË<< 8)

	)

659 
	#MAX_BURST_MASK
 (0xff)

	)

660 
	#MAX_BURST_SHIFT
 (8)

	)

661 
	#CTX_TO_MAX_BURST
(
p
Ë((’Ë>> 8Ë& 0xff)

	)

662 
	#MAX_PACKET
(
p
Ë((’)&0xffffË<< 16)

	)

663 
	#MAX_PACKET_MASK
 (0xffff)

	)

664 
	#MAX_PACKET_DECODED
(
p
Ë((’Ë>> 16Ë& 0xffff)

	)

665 
	#MAX_PACKET_SHIFT
 (16)

	)

670 
	#GET_MAX_PACKET
(
p
Ë(’Ë& 0x7ff)

	)

673 
	#AVG_TRB_LENGTH_FOR_EP
(
p
Ë(’Ë& 0xffff)

	)

674 
	#MAX_ESIT_PAYLOAD_FOR_EP
(
p
Ë((’Ë& 0xffffË<< 16)

	)

675 
	#CTX_TO_MAX_ESIT_PAYLOAD
(
p
Ë((’Ë>> 16Ë& 0xffff)

	)

678 
	#EP_CTX_CYCLE_MASK
 (1 << 0)

	)

688 
	sxhci_öput_c⁄åﬁ_˘x
 {

689 vﬁ©ûê
__À32
 
	mdr›_Êags
;

690 vﬁ©ûê
__À32
 
	madd_Êags
;

691 
__À32
 
	mrsvd2
[6];

699 
	sxhci_devi˚_c⁄ãxt_¨øy
 {

701 
__À64
 
	mdev_c⁄ãxt_±rs
[
MAX_HC_SLOTS
];

710 
	sxhci_å™s„r_evít
 {

712 
__À64
 
	mbuf„r
;

713 
__À32
 
	må™s„r_Àn
;

715 vﬁ©ûê
__À32
 
	mÊags
;

720 
	#EVENT_TRB_LEN
(
p
Ë(’Ë& 0xffffff)

	)

723 
	#TRB_TO_EP_ID
(
p
Ë((’Ë>> 16Ë& 0x1f)

	)

726 
	#COMP_CODE_MASK
 (0xf‡<< 24)

	)

727 
	#COMP_CODE_SHIFT
 (24)

	)

728 
	#GET_COMP_CODE
(
p
Ë((’Ë& 
COMP_CODE_MASK
Ë>> 24)

	)

731 
	mCOMP_SUCCESS
 = 1,

733 
	mCOMP_DB_ERR
,

735 
	mCOMP_BABBLE
,

737 
	mCOMP_TX_ERR
,

739 
	mCOMP_TRB_ERR
,

741 
	mCOMP_STALL
,

743 
	mCOMP_ENOMEM
,

745 
	mCOMP_BW_ERR
,

747 
	mCOMP_ENOSLOTS
,

749 
	mCOMP_STREAM_ERR
,

751 
	mCOMP_EBADSLT
,

753 
	mCOMP_EBADEP
,

755 
	mCOMP_SHORT_TX
,

757 
	mCOMP_UNDERRUN
,

759 
	mCOMP_OVERRUN
,

761 
	mCOMP_VF_FULL
,

763 
	mCOMP_EINVAL
,

765 
	mCOMP_BW_OVER
,

767 
	mCOMP_CTX_STATE
,

769 
	mCOMP_PING_ERR
,

771 
	mCOMP_ER_FULL
,

773 
	mCOMP_DEV_ERR
,

775 
	mCOMP_MISSED_INT
,

777 
	mCOMP_CMD_STOP
,

779 
	mCOMP_CMD_ABORT
,

781 
	mCOMP_STOP
,

784 
	mCOMP_STOP_INVAL
,

786 
	mCOMP_DBG_ABORT
,

788 
	mCOMP_MEL_ERR
,

791 
	mCOMP_BUFF_OVER
 = 31,

793 
	mCOMP_ISSUES
,

795 
	mCOMP_UNKNOWN
,

797 
	mCOMP_STRID_ERR
,

799 
	mCOMP_2ND_BW_ERR
,

801 
	mCOMP_SPLIT_ERR


803 } 
	txhci_comp_code
;

805 
	sxhci_lök_åb
 {

807 vﬁ©ûê
__À64
 
	m£gmít_±r
;

808 vﬁ©ûê
__À32
 
	möå_èrgë
;

809 vﬁ©ûê
__À32
 
	mc⁄åﬁ
;

813 
	#LINK_TOGGLE
 (0x1 << 1)

	)

816 
	sxhci_evít_cmd
 {

818 vﬁ©ûê
__À64
 
	mcmd_åb
;

819 vﬁ©ûê
__À32
 
	m°©us
;

820 vﬁ©ûê
__À32
 
	mÊags
;

826 
	#TRB_TO_SLOT_ID
(
p
Ë((’Ë& (0xf‡<< 24)Ë>> 24)

	)

827 
	#TRB_TO_SLOT_ID_SHIFT
 (24)

	)

828 
	#TRB_TO_SLOT_ID_MASK
 (0xf‡<< 
TRB_TO_SLOT_ID_SHIFT
)

	)

829 
	#SLOT_ID_FOR_TRB
(
p
Ë((’Ë& 0xffË<< 24)

	)

830 
	#SLOT_ID_FOR_TRB_MASK
 (0xff)

	)

831 
	#SLOT_ID_FOR_TRB_SHIFT
 (24)

	)

834 
	#TRB_TO_EP_INDEX
(
p
Ë(((’Ë& (0x1‡<< 16)Ë>> 16Ë- 1)

	)

835 
	#EP_ID_FOR_TRB
(
p
Ë(((’Ë+ 1Ë& 0x1fË<< 16)

	)

837 
	#SUSPEND_PORT_FOR_TRB
(
p
Ë((’Ë& 1Ë<< 23)

	)

838 
	#TRB_TO_SUSPEND_PORT
(
p
Ë((’Ë& (1 << 23)Ë>> 23)

	)

839 
	#LAST_EP_INDEX
 30

	)

842 
	#TRB_TO_STREAM_ID
(
p
Ë(((’Ë& (0xfff‡<< 16)Ë>> 16))

	)

843 
	#STREAM_ID_FOR_TRB
(
p
Ë(((’)Ë& 0xffffË<< 16)

	)

848 
	#GET_PORT_ID
(
p
Ë((’Ë& (0xf‡<< 24)Ë>> 24)

	)

849 
	#PORT_ID_SHIFT
 (24)

	)

850 
	#PORT_ID_MASK
 (0xf‡<< 
PORT_ID_SHIFT
)

	)

854 
	#TRB_LEN
(
p
Ë(’Ë& 0x1ffff)

	)

855 
	#TRB_LEN_MASK
 (0x1ffff)

	)

857 
	#TRB_INTR_TARGET_SHIFT
 (22)

	)

858 
	#TRB_INTR_TARGET_MASK
 (0x3ff)

	)

859 
	#TRB_INTR_TARGET
(
p
Ë((’Ë& 0x3ffË<< 22)

	)

860 
	#GET_INTR_TARGET
(
p
Ë((’Ë>> 22Ë& 0x3ff)

	)

861 
	#TRB_TBC
(
p
Ë((’Ë& 0x3Ë<< 7)

	)

862 
	#TRB_TLBPC
(
p
Ë((’Ë& 0xfË<< 16)

	)

865 
	#TRB_CYCLE
 (1<<0)

	)

870 
	#TRB_ENT
 (1<<1)

	)

872 
	#TRB_ISP
 (1<<2)

	)

874 
	#TRB_NO_SNOOP
 (1<<3)

	)

876 
	#TRB_CHAIN
 (1<<4)

	)

878 
	#TRB_IOC
 (1<<5)

	)

880 
	#TRB_IDT
 (1<<6)

	)

883 
	#TRB_BEI
 (1<<9)

	)

886 
	#TRB_DIR_IN
 (1<<16)

	)

887 
	#TRB_TX_TYPE
(
p
Ë(’Ë<< 16)

	)

888 
	#TRB_TX_TYPE_SHIFT
 (16)

	)

889 
	#TRB_DATA_OUT
 2

	)

890 
	#TRB_DATA_IN
 3

	)

893 
	#TRB_SIA
 (1 << 31)

	)

895 
	sxhci_gíîic_åb
 {

896 vﬁ©ûê
__À32
 
	mfõld
[4];

899 
	uxhci_åb
 {

900 
xhci_lök_åb
 
	mlök
;

901 
xhci_å™s„r_evít
 
	må™s_evít
;

902 
xhci_evít_cmd
 
	mevít_cmd
;

903 
xhci_gíîic_åb
 
	mgíîic
;

907 
	#TRB_TYPE_BITMASK
 (0xfc00)

	)

908 
	#TRB_TYPE
(
p
Ë(’Ë<< 10)

	)

909 
	#TRB_TYPE_SHIFT
 (10)

	)

910 
	#TRB_FIELD_TO_TYPE
(
p
Ë((’Ë& 
TRB_TYPE_BITMASK
Ë>> 10)

	)

915 
	mTRB_NORMAL
 = 1,

917 
	mTRB_SETUP
,

919 
	mTRB_DATA
,

921 
	mTRB_STATUS
,

923 
	mTRB_ISOC
,

925 
	mTRB_LINK
,

927 
	mTRB_EVENT_DATA
,

929 
	mTRB_TR_NOOP
,

932 
	mTRB_ENABLE_SLOT
,

934 
	mTRB_DISABLE_SLOT
,

936 
	mTRB_ADDR_DEV
,

938 
	mTRB_CONFIG_EP
,

940 
	mTRB_EVAL_CONTEXT
,

942 
	mTRB_RESET_EP
,

944 
	mTRB_STOP_RING
,

946 
	mTRB_SET_DEQ
,

948 
	mTRB_RESET_DEV
,

950 
	mTRB_FORCE_EVENT
,

952 
	mTRB_NEG_BANDWIDTH
,

954 
	mTRB_SET_LT
,

956 
	mTRB_GET_BW
,

958 
	mTRB_FORCE_HEADER
,

960 
	mTRB_CMD_NOOP
,

964 
	mTRB_TRANSFER
 = 32,

966 
	mTRB_COMPLETION
,

968 
	mTRB_PORT_STATUS
,

970 
	mTRB_BANDWIDTH_EVENT
,

972 
	mTRB_DOORBELL
,

974 
	mTRB_HC_EVENT
,

976 
	mTRB_DEV_NOTE
,

978 
	mTRB_MFINDEX_WRAP
,

981 
	mTRB_NEC_CMD_COMP
 = 48,

983 
	mTRB_NEC_GET_FW
,

984 } 
	tåb_ty≥
;

986 
	#TRB_TYPE_LINK
(
x
Ë(((xË& 
TRB_TYPE_BITMASK
Ë=
	`TRB_TYPE
(
TRB_LINK
))

	)

988 
	#TRB_TYPE_LINK_LE32
(
x
Ë(((xË& 
	`˝u_to_À32
(
TRB_TYPE_BITMASK
)) == \

989 
	`˝u_to_À32
(
	`TRB_TYPE
(
TRB_LINK
)))

	)

990 
	#TRB_TYPE_NOOP_LE32
(
x
Ë(((xË& 
	`˝u_to_À32
(
TRB_TYPE_BITMASK
)) == \

991 
	`˝u_to_À32
(
	`TRB_TYPE
(
TRB_TR_NOOP
)))

	)

998 
	#TRBS_PER_SEGMENT
 64

	)

1000 
	#MAX_RSVD_CMD_TRBS
 (
TRBS_PER_SEGMENT
 - 3)

	)

1001 
	#SEGMENT_SIZE
 (
TRBS_PER_SEGMENT
*16)

	)

1005 
	#SEGMENT_SHIFT
 10

	)

1007 
	#TRB_MAX_BUFF_SHIFT
 16

	)

1008 
	#TRB_MAX_BUFF_SIZE
 (1 << 
TRB_MAX_BUFF_SHIFT
)

	)

1010 
	sxhci_£gmít
 {

1011 
xhci_åb
 *
	måbs
;

1013 
xhci_£gmít
 *
	m√xt
;

1016 
	sxhci_rög
 {

1017 
xhci_£gmít
 *
	mfú°_£g
;

1018 
xhci_åb
 *
	míqueue
;

1019 
xhci_£gmít
 *
	míq_£g
;

1020 
xhci_åb
 *
	mdequeue
;

1021 
xhci_£gmít
 *
	mdeq_£g
;

1027 vﬁ©ûê
u32
 
	mcy˛e_°©e
;

1028 
	mnum_£gs
;

1031 
	sxhci_î°_íåy
 {

1033 
__À64
 
	m£g_addr
;

1034 
__À32
 
	m£g_size
;

1036 
__À32
 
	mrsvd
;

1039 
	sxhci_î°
 {

1040 
xhci_î°_íåy
 *
	míåõs
;

1041 
	mnum_íåõs
;

1043 
	mî°_size
;

1051 
	#ERST_NUM_SEGS
 1

	)

1053 
	#ERST_ENTRIES
 1

	)

1055 
	#ERST_SIZE
 64

	)

1057 
	#POLL_TIMEOUT
 60

	)

1059 
	#XHCI_STOP_EP_CMD_TIMEOUT
 5

	)

1062 
	sxhci_vút_ï
 {

1063 
xhci_rög
 *
	mrög
;

1064 
	mï_°©e
;

1065 
	#SET_DEQ_PENDING
 (1 << 0)

	)

1066 
	#EP_HALTED
 (1 << 1Ë

	)

1067 
	#EP_HALT_PENDING
 (1 << 2Ë

	)

1069 
	#EP_GETTING_STREAMS
 (1 << 3)

	)

1070 
	#EP_HAS_STREAMS
 (1 << 4)

	)

1072 
	#EP_GETTING_NO_STREAMS
 (1 << 5)

	)

1075 
	#CTX_SIZE
(
_hcc
Ë(
	`HCC_64BYTE_CONTEXT
(_hccË? 64 : 32)

	)

1077 
	sxhci_vút_devi˚
 {

1078 
usb_devi˚
 *
	mudev
;

1087 
xhci_c⁄èöî_˘x
 *
	mout_˘x
;

1089 
xhci_c⁄èöî_˘x
 *
	mö_˘x
;

1091 
	#XHCI_MAX_RINGS_CACHED
 31

	)

1092 
xhci_vút_ï
 
	mïs
[31];

1095 
xhci_hcd_öô
(
ödex
, 
xhci_hc¸
 **
ªt_hc¸
,

1096 
xhci_hc‹
 **
ªt_hc‹
);

1097 
xhci_hcd_°›
(
ödex
);

1104 
	#XHCI_MAX_HALT_USEC
 (16*1000)

	)

1106 
	#XHCI_STS_HALT
 (1 << 0)

	)

1109 
	#XHCI_HCC_PARAMS_OFFSET
 0x10

	)

1111 
	#XHCI_HCC_EXT_CAPS
(
p
Ë((’)>>16)&0xffff)

	)

1114 
	#XHCI_CMD_OFFSET
 0x00

	)

1115 
	#XHCI_STS_OFFSET
 0x04

	)

1117 
	#XHCI_MAX_EXT_CAPS
 50

	)

1121 
	#XHCI_HC_LENGTH
(
p
Ë((’Ë>> 00Ë& 0x00ff)

	)

1124 
	#XHCI_EXT_CAPS_ID
(
p
Ë((’Ë>> 0Ë& 0xff)

	)

1125 
	#XHCI_EXT_CAPS_NEXT
(
p
Ë((’Ë>> 8Ë& 0xff)

	)

1126 
	#XHCI_EXT_CAPS_VAL
(
p
Ë(’Ë>> 16)

	)

1128 
	#XHCI_EXT_CAPS_LEGACY
 1

	)

1129 
	#XHCI_EXT_CAPS_PROTOCOL
 2

	)

1130 
	#XHCI_EXT_CAPS_PM
 3

	)

1131 
	#XHCI_EXT_CAPS_VIRT
 4

	)

1132 
	#XHCI_EXT_CAPS_ROUTE
 5

	)

1134 
	#XHCI_EXT_CAPS_DEBUG
 10

	)

1136 
	#XHCI_HC_BIOS_OWNED
 (1 << 16)

	)

1137 
	#XHCI_HC_OS_OWNED
 (1 << 24)

	)

1141 
	#XHCI_LEGACY_SUPPORT_OFFSET
 (0x00)

	)

1145 
	#XHCI_LEGACY_CONTROL_OFFSET
 (0x04)

	)

1147 
	#XHCI_LEGACY_DISABLE_SMI
 ((0x3 << 1Ë+ (0xf‡<< 5Ë+ (0x7 << 17))

	)

1150 
	#XHCI_L1C
 (1 << 16)

	)

1153 
	#XHCI_HLC
 (1 << 19)

	)

1157 
	#XHCI_CMD_RUN
 (1 << 0)

	)

1159 
	#XHCI_CMD_EIE
 (1 << 2)

	)

1161 
	#XHCI_CMD_HSEIE
 (1 << 3)

	)

1163 
	#XHCI_CMD_EWE
 (1 << 10)

	)

1165 
	#XHCI_IRQS
 (
XHCI_CMD_EIE
 | 
XHCI_CMD_HSEIE
 | 
XHCI_CMD_EWE
)

	)

1168 
	#XHCI_STS_CNR
 (1 << 11)

	)

1170 
	sxhci_˘æ
 {

1171 
xhci_hc¸
 *
	mhc¸
;

1172 
xhci_hc‹
 *
	mhc‹
;

1173 
xhci_do‹bñl_¨øy
 *
	mdba
;

1174 
xhci_run_ªgs
 *
	mrun_ªgs
;

1175 
xhci_devi˚_c⁄ãxt_¨øy
 *
	mdcbØ
 \

1176 
__©åibuã__
 ((
Æig√d
(
ARCH_DMA_MINALIGN
)));

1177 
xhci_rög
 *
	mevít_rög
;

1178 
xhci_rög
 *
	mcmd_rög
;

1179 
xhci_rög
 *
	må™s„r_rög
;

1180 
xhci_£gmít
 *
	m£g
;

1181 
xhci_öå_ªg
 *
	mú_£t
;

1182 
xhci_î°
 
	mî°
;

1183 
xhci_î°_íåy
 
	míåy
[
ERST_NUM_SEGS
];

1184 
xhci_vút_devi˚
 *
	mdevs
[
MAX_HC_SLOTS
];

1185 
	mroŸdev
;

1188 
åb_addr
(
xhci_£gmít
 *
£g
, 
xhci_åb
 *
åb
);

1189 
xhci_öput_c⁄åﬁ_˘x


1190 *
xhci_gë_öput_c⁄åﬁ_˘x
(
xhci_c⁄èöî_˘x
 *
˘x
);

1191 
xhci_¶Ÿ_˘x
 *
xhci_gë_¶Ÿ_˘x
(
xhci_˘æ
 *
˘æ
,

1192 
xhci_c⁄èöî_˘x
 *
˘x
);

1193 
xhci_ï_˘x
 *
xhci_gë_ï_˘x
(
xhci_˘æ
 *
˘æ
,

1194 
xhci_c⁄èöî_˘x
 *
˘x
,

1195 
ï_ödex
);

1196 
xhci_ídpoöt_c›y
(
xhci_˘æ
 *
˘æ
,

1197 
xhci_c⁄èöî_˘x
 *
ö_˘x
,

1198 
xhci_c⁄èöî_˘x
 *
out_˘x
,

1199 
ï_ödex
);

1200 
xhci_¶Ÿ_c›y
(
xhci_˘æ
 *
˘æ
,

1201 
xhci_c⁄èöî_˘x
 *
ö_˘x
,

1202 
xhci_c⁄èöî_˘x
 *
out_˘x
);

1203 
xhci_£tup_addªsßbÀ_vút_dev
(
usb_devi˚
 *
udev
);

1204 
xhci_queue_comm™d
(
xhci_˘æ
 *
˘æ
, 
u8
 *
±r
,

1205 
u32
 
¶Ÿ_id
, u32 
ï_ödex
, 
åb_ty≥
 
cmd
);

1206 
xhci_acknowÀdge_evít
(
xhci_˘æ
 *
˘æ
);

1207 
xhci_åb
 *
xhci_waô_f‹_evít
(
xhci_˘æ
 *
˘æ
, 
åb_ty≥
 
ex≥˘ed
);

1208 
xhci_bulk_tx
(
usb_devi˚
 *
udev
, 
pùe
,

1209 
Àngth
, *
buf„r
);

1210 
xhci_˘æ_tx
(
usb_devi˚
 *
udev
, 
pùe
,

1211 
devªque°
 *
ªq
, 
Àngth
, *
buf„r
);

1212 
xhci_check_max∑ckë
(
usb_devi˚
 *
udev
);

1213 
xhci_Êush_ˇche
(
uöt32_t
 
addr
, 
u32
 
ty≥_Àn
);

1214 
xhci_övÆ_ˇche
(
uöt32_t
 
addr
, 
u32
 
ty≥_Àn
);

1215 
xhci_˛ónup
(
xhci_˘æ
 *
˘æ
);

1216 
xhci_rög
 *
xhci_rög_Æloc
(
num_£gs
, 
lök_åbs
);

1217 
xhci_Æloc_vút_devi˚
(
usb_devi˚
 *
udev
);

1218 
xhci_mem_öô
(
xhci_˘æ
 *
˘æ
, 
xhci_hc¸
 *
hc¸
,

1219 
xhci_hc‹
 *
hc‹
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/vtss.h

3 
	glut⁄u_novœn
 [] = {

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/fs/fat/fat.c

28 
	~<comm⁄.h
>

29 
	~<c⁄fig.h
>

30 
	~<exp‹ts.h
>

31 
	~<Át.h
>

32 
	~<asm/byã‹dî.h
>

33 
	~<asm/addr•a˚.h
>

34 
	~<löux/compûî.h
>

35 
	~<∑π.h
>

39 #ifdef 
FAT_DEBUG


40 
	#FAT_PRINTF
(
fmt
,
¨gs
...Ë
	`¥ötf
 (fmà,##¨gs)

	)

42 
	#FAT_PRINTF
(
fmt
,
¨gs
...)

	)

48 
	$downˇ£
 (*
°r
)

50 *
°r
 != '\0') {

51 
	`TOLOWER
(*
°r
);

52 
°r
++;

54 
	}
}

56 
block_dev_desc_t
 *
	gcur_dev
;

57 
	gcur_∑π_ƒ
;

58 
disk_∑πôi⁄_t
 
	gcur_∑π_öfo
;

60 
	#DOS_BOOT_MAGIC_OFFSET
 0x1„

	)

61 
	#DOS_FS_TYPE_OFFSET
 0x36

	)

62 
	#DOS_FS32_TYPE_OFFSET
 0x52

	)

64 
	$disk_ªad
(
__u32
 
block
, __u32 
ƒ_blocks
, *
buf
)

66 i‡(!
cur_dev
 || !cur_dev->
block_ªad
)

69  
cur_dev
->
	`block_ªad
(cur_dev->
dev
,

70 
cur_∑π_öfo
.
°¨t
 + 
block
, 
ƒ_blocks
, 
buf
);

71 
	}
}

73 
	$Át_ªgi°î_devi˚
 (
block_dev_desc_t
 * 
dev_desc
, 
∑π_no
)

75 
tmp_buf
[
dev_desc
->
blksz
];

76 *
buf„r
 = 
	`KSEG1ADDR
(&
tmp_buf
[0]);

79 
cur_dev
 = 
NULL
;

81 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_IDE
) || \

82 (
CONFIG_COMMANDS
 & 
CFG_CMD_SCSI
)|| \

83 (
CONFIG_COMMANDS
 & 
CFG_CMD_USB
) || \

84 
	`deföed
(
CONFIG_SYSTEMACE
)

87 i‡(!
	`gë_∑πôi⁄_öfo
(
dev_desc
, 
∑π_no
, &
cur_∑π_öfo
)) {

88 
cur_dev
 = 
dev_desc
;

89 
cur_∑π_ƒ
 = 
∑π_no
;

94 i‡(!
cur_dev
) {

95 i‡(
∑π_no
 != 1) {

96 
	`¥ötf
("** Partition %dÇot valid on device %d **\n",

97 
∑π_no
, 
dev_desc
->
dev
);

101 
cur_dev
 = 
dev_desc
;

102 
cur_∑π_ƒ
 = 1;

103 
cur_∑π_öfo
.
°¨t
 = 0;

104 
cur_∑π_öfo
.
size
 = 
dev_desc
->
lba
;

105 
cur_∑π_öfo
.
blksz
 = 
dev_desc
->blksz;

106 
	`mem£t
(
cur_∑π_öfo
.
«me
, 0, (cur_part_info.name));

107 
	`mem£t
(
cur_∑π_öfo
.
ty≥
, 0, (cur_part_info.type));

111 i‡(
	`disk_ªad
(0, 1, 
buf„r
) != 1) {

112 
cur_dev
 = 
NULL
;

117 i‡(
	`memcmp
(
buf„r
 + 
DOS_BOOT_MAGIC_OFFSET
, "\x55\xAA", 2)) {

118 
cur_dev
 = 
NULL
;

123 i‡(!
	`memcmp
(
buf„r
 + 
DOS_FS_TYPE_OFFSET
, "FAT", 3))

125 i‡(!
	`memcmp
(
buf„r
 + 
DOS_FS32_TYPE_OFFSET
, "FAT32", 5))

128 
cur_dev
 = 
NULL
;

130 
	}
}

137 
	$dúdñim
 (*
°r
)

139 *
°¨t
 = 
°r
;

141 *
°r
 != '\0') {

142 i‡(
	`ISDIRDELIM
(*
°r
))

143  
°r
 - 
°¨t
;

144 
°r
++;

147 
	}
}

152 
	$gë_«me
 (
dú_íåy
 *
dúít
, *
s_«me
)

154 *
±r
;

156 
	`mem˝y
(
s_«me
, 
dúít
->
«me
, 8);

157 
s_«me
[8] = '\0';

158 
±r
 = 
s_«me
;

159 *
±r
 && *ptr != ' ')

160 
±r
++;

161 i‡(
dúít
->
ext
[0] && dirent->ext[0] != ' ') {

162 *
±r
 = '.';

163 
±r
++;

164 
	`mem˝y
(
±r
, 
dúít
->
ext
, 3);

165 
±r
[3] = '\0';

166 *
±r
 && *ptr != ' ')

167 
±r
++;

169 *
±r
 = '\0';

170 i‡(*
s_«me
 =
DELETED_FLAG
)

171 *
s_«me
 = '\0';

172 i‡(*
s_«me
 =
aRING
)

173 *
s_«me
 = 
DELETED_FLAG
;

174 
	`downˇ£
(
s_«me
);

175 
	}
}

181 
__u32
 
	$gë_Áã¡
 (
fsd©a
 *
myd©a
, 
__u32
 
íåy
)

183 
__u32
 
bu‚um
;

184 
__u32
 
off16
, 
off£t
;

185 
__u32
 
ªt
 = 0x00;

186 
__u16
 
vÆ1
, 
vÆ2
;

188 
myd©a
->
Átsize
) {

190 
bu‚um
 = 
íåy
 / 
FAT32BUFSIZE
;

191 
off£t
 = 
íåy
 - 
bu‚um
 * 
FAT32BUFSIZE
;

194 
bu‚um
 = 
íåy
 / 
FAT16BUFSIZE
;

195 
off£t
 = 
íåy
 - 
bu‚um
 * 
FAT16BUFSIZE
;

198 
bu‚um
 = 
íåy
 / 
FAT12BUFSIZE
;

199 
off£t
 = 
íåy
 - 
bu‚um
 * 
FAT12BUFSIZE
;

204  
ªt
;

207 
	`FAT_PRINTF
("FAT%d:Éntry: 0x%04x = %d, offset: 0x%04x = %d\n",

208 
myd©a
->
Átsize
, 
íåy
,É¡ry, 
off£t
, offset);

211 i‡(
bu‚um
 !
myd©a
->
Átbu‚um
) {

212 
__u32
 
gësize
 = 
FATBUFBLOCKS
;

213 
__u8
 *
buÂå
 = 
myd©a
->
Átbuf
;

214 
__u32
 
Áéígth
 = 
myd©a
->fatlength;

215 
__u32
 
°¨tblock
 = 
bu‚um
 * 
FATBUFBLOCKS
;

217 i‡(
gësize
 > 
Áéígth
)

218 
gësize
 = 
Áéígth
;

220 
Áéígth
 *
myd©a
->
£˘_size
;

221 
°¨tblock
 +
myd©a
->
Át_£˘
;

223 i‡(
	`disk_ªad
(
°¨tblock
, 
gësize
, 
buÂå
) < 0) {

224 
	`FAT_PRINTF
("ErrorÑeading FAT blocks\n");

225  
ªt
;

227 
myd©a
->
Átbu‚um
 = 
bu‚um
;

231 
myd©a
->
Átsize
) {

233 
ªt
 = 
	`FAT2CPU32
(((
__u32
 *Ë
myd©a
->
Átbuf
)[
off£t
]);

236 
ªt
 = 
	`FAT2CPU16
(((
__u16
 *Ë
myd©a
->
Átbuf
)[
off£t
]);

239 
off16
 = (
off£t
 * 3) / 4;

241 
off£t
 & 0x3) {

243 
ªt
 = 
	`FAT2CPU16
(((
__u16
 *Ë
myd©a
->
Átbuf
)[
off16
]);

244 
ªt
 &= 0xfff;

247 
vÆ1
 = 
	`FAT2CPU16
(((
__u16
 *)
myd©a
->
Átbuf
)[
off16
]);

248 
vÆ1
 &= 0xf000;

249 
vÆ2
 = 
	`FAT2CPU16
(((
__u16
 *)
myd©a
->
Átbuf
)[
off16
 + 1]);

250 
vÆ2
 &= 0x00ff;

251 
ªt
 = (
vÆ2
 << 4Ë| (
vÆ1
 >> 12);

254 
vÆ1
 = 
	`FAT2CPU16
(((
__u16
 *)
myd©a
->
Átbuf
)[
off16
]);

255 
vÆ1
 &= 0xff00;

256 
vÆ2
 = 
	`FAT2CPU16
(((
__u16
 *)
myd©a
->
Átbuf
)[
off16
 + 1]);

257 
vÆ2
 &= 0x000f;

258 
ªt
 = (
vÆ2
 << 8Ë| (
vÆ1
 >> 8);

261 
ªt
 = 
	`FAT2CPU16
(((
__u16
 *)
myd©a
->
Átbuf
)[
off16
]);

262 
ªt
 = (ret & 0xfff0) >> 4;

269 
	`FAT_PRINTF
("FAT%d:Ñet: %08x, offset: %04x\n",

270 
myd©a
->
Átsize
, 
ªt
, 
off£t
);

272  
ªt
;

273 
	}
}

280 
	$gë_˛u°î
 (
fsd©a
 *
myd©a
, 
__u32
 
˛u°num
, 
__u8
 *
buf„r
,

281 
size
)

283 
__u32
 
idx
 = 0;

284 
__u32
 
°¨t£˘
;

285 
__u32
 
ƒ_£˘
;

286 
ªt
;

288 i‡(
˛u°num
 > 0) {

289 
°¨t£˘
 = 
myd©a
->
d©a_begö
 +

290 
˛u°num
 * 
myd©a
->
˛u°_size
;

292 
°¨t£˘
 = 
myd©a
->
roŸdú_£˘
;

295 
	`FAT_PRINTF
("g¯- clu°num: %d, sèπ£˘: %d\n", 
˛u°num
, 
°¨t£˘
);

297 
ƒ_£˘
 = 
size
 / 
myd©a
->
£˘_size
;

298 
ªt
 = 
	`disk_ªad
(
°¨t£˘
, 
ƒ_£˘
, 
buf„r
);

299 i‡(
ªt
 !
ƒ_£˘
) {

300 
	`FAT_PRINTF
("Eº‹Ñódög d©®(gŸ %d)\n", 
ªt
);

303 i‡(
size
 % 
myd©a
->
£˘_size
) {

304 
__u8
 
tmp_buf
[
myd©a
->
£˘_size
];

305 
__u8
 *
tmpbuf
 = (__u8 *)
	`KSEG1ADDR
(&
tmp_buf
[0]);

307 
idx
 = 
size
 / 
myd©a
->
£˘_size
;

308 
ªt
 = 
	`disk_ªad
(
°¨t£˘
 + 
idx
, 1, 
tmpbuf
);

309 i‡(
ªt
 != 1) {

310 
	`FAT_PRINTF
("Eº‹Ñódög d©®(gŸ %d)\n", 
ªt
);

313 
buf„r
 +
idx
 * 
myd©a
->
£˘_size
;

315 
	`mem˝y
(
buf„r
, 
tmpbuf
, 
size
 % 
myd©a
->
£˘_size
);

320 
	}
}

328 
	$gë_c⁄ã¡s
 (
fsd©a
 *
myd©a
, 
dú_íåy
 *
díçå
, 
__u8
 *
tmp_buf
,

329 
maxsize
)

331 
fûesize
 = 
	`FAT2CPU32
(
díçå
->
size
), 
gŸsize
 = 0;

332 
byã•î˛u°
 = 
myd©a
->
˛u°_size
 * myd©a->
£˘_size
;

333 
a˘size
;

334 
__u32
 
cur˛u°
 = 
	`START
(
díçå
);

335 
__u32
 
íd˛u°
, 
√w˛u°
;

336 
__u8
 *
buf„r
 = (__u8 *)
	`KSEG1ADDR
(
tmp_buf
);

338 
	`FAT_PRINTF
("Fûesize: %ld byãs\n", 
fûesize
);

340 i‡(
maxsize
 > 0 && 
fûesize
 > maxsize)

341 
fûesize
 = 
maxsize
;

343 
	`FAT_PRINTF
("%ld byãs\n", 
fûesize
);

345 
a˘size
 = 
byã•î˛u°
;

346 
íd˛u°
 = 
cur˛u°
;

350 
a˘size
 < 
fûesize
) {

351 
√w˛u°
 = 
	`gë_Áã¡
(
myd©a
, 
íd˛u°
);

352 i‡((
√w˛u°
 - 1Ë!
íd˛u°
)

353 
gëô
;

354 i‡(
	`CHECK_CLUST
(
√w˛u°
, 
myd©a
->
Átsize
)) {

355 
	`FAT_PRINTF
("cur˛u°: 0x%x\n", 
√w˛u°
);

356 
	`FAT_PRINTF
("Invalid FATÉntry\n");

357  
gŸsize
;

359 
íd˛u°
 = 
√w˛u°
;

360 
a˘size
 +
byã•î˛u°
;

364 
a˘size
 -
byã•î˛u°
;

367 i‡(
	`gë_˛u°î
(
myd©a
, 
cur˛u°
, 
buf„r
, ()
a˘size
) != 0) {

368 
	`¥ötf
("ErrorÑeading cluster\n");

373 
gŸsize
 +()
a˘size
;

374 
fûesize
 -
a˘size
;

375 
buf„r
 +
a˘size
;

376 
a˘size
 = 
fûesize
;

377 i‡(
	`gë_˛u°î
(
myd©a
, 
íd˛u°
, 
buf„r
, ()
a˘size
) != 0) {

378 
	`¥ötf
("ErrorÑeading cluster\n");

381 
gŸsize
 +
a˘size
;

382  
gŸsize
;

383 
gëô
:

384 i‡(
	`gë_˛u°î
(
myd©a
, 
cur˛u°
, 
buf„r
, ()
a˘size
) != 0) {

385 
	`¥ötf
("ErrorÑeading cluster\n");

388 
gŸsize
 +()
a˘size
;

389 
fûesize
 -
a˘size
;

390 
buf„r
 +
a˘size
;

392 
cur˛u°
 = 
	`gë_Áã¡
(
myd©a
, 
íd˛u°
);

393 i‡(
	`CHECK_CLUST
(
cur˛u°
, 
myd©a
->
Átsize
)) {

394 
	`FAT_PRINTF
("cur˛u°: 0x%x\n", 
cur˛u°
);

395 
	`¥ötf
("Invalid FATÉntry\n");

396  
gŸsize
;

398 
a˘size
 = 
byã•î˛u°
;

399 
íd˛u°
 = 
cur˛u°
;

401 
	}
}

403 #ifde‡
CONFIG_SUPPORT_VFAT


409 
	$¶Ÿ2°r
 (
dú_¶Ÿ
 *
¶Ÿ±r
, *
l_«me
, *
idx
)

411 
j
;

413 
j
 = 0; j <= 8; j += 2) {

414 
l_«me
[*
idx
] = 
¶Ÿ±r
->
«me0_4
[
j
];

415 i‡(
l_«me
[*
idx
] == 0x00)

417 (*
idx
)++;

419 
j
 = 0; j <= 10; j += 2) {

420 
l_«me
[*
idx
] = 
¶Ÿ±r
->
«me5_10
[
j
];

421 i‡(
l_«me
[*
idx
] == 0x00)

423 (*
idx
)++;

425 
j
 = 0; j <= 2; j += 2) {

426 
l_«me
[*
idx
] = 
¶Ÿ±r
->
«me11_12
[
j
];

427 i‡(
l_«me
[*
idx
] == 0x00)

429 (*
idx
)++;

433 
	}
}

441 
__©åibuã__
 ((
__Æig√d__
 (
	$__Æignof__
 (
dú_íåy
))))

442 
__u8
 
gë_vÁäame_block
[
MAX_CLUSTSIZE
];

445 
	$gë_vÁäame
 (
fsd©a
 *
myd©a
, 
cur˛u°
, 
__u8
 *
˛u°î
,

446 
dú_íåy
 *
ªtdít
, *
l_«me
)

448 
dú_íåy
 *
ªÆdít
;

449 
dú_¶Ÿ
 *
¶Ÿ±r
 = (dú_¶Ÿ *)
ªtdít
;

450 
__u8
 *
buÊimô
 = 
˛u°î
 + 
myd©a
->
£˘_size
 * ((
cur˛u°
 == 0) ?

451 
PREFETCH_BLOCKS
 :

452 
myd©a
->
˛u°_size
);

453 
__u8
 
cou¡î
 = (
¶Ÿ±r
->
id
 & ~
LAST_LONG_ENTRY_MASK
) & 0xff;

454 
idx
 = 0;

456 i‡(
cou¡î
 > 
VFAT_MAXSEQ
) {

457 
	`FAT_PRINTF
("Error: VFATÇame isÅooÜong\n");

461 (
__u8
 *)
¶Ÿ±r
 < 
buÊimô
) {

462 i‡(
cou¡î
 == 0)

464 i‡(((
¶Ÿ±r
->
id
 & ~
LAST_LONG_ENTRY_MASK
Ë& 0xffË!
cou¡î
)

466 
¶Ÿ±r
++;

467 
cou¡î
--;

470 i‡((
__u8
 *)
¶Ÿ±r
 >
buÊimô
) {

471 
dú_¶Ÿ
 *
¶Ÿ±r2
;

473 i‡(
cur˛u°
 == 0)

475 
cur˛u°
 = 
	`gë_Áã¡
(
myd©a
, curclust);

476 i‡(
	`CHECK_CLUST
(
cur˛u°
, 
myd©a
->
Átsize
)) {

477 
	`FAT_PRINTF
("cur˛u°: 0x%x\n", 
cur˛u°
);

478 
	`¥ötf
("Invalid FATÉntry\n");

482 i‡(
	`gë_˛u°î
(
myd©a
, 
cur˛u°
, 
gë_vÁäame_block
,

483 
myd©a
->
˛u°_size
 * myd©a->
£˘_size
) != 0) {

484 
	`FAT_PRINTF
("Error:Ñeading directory block\n");

488 
¶Ÿ±r2
 = (
dú_¶Ÿ
 *)
gë_vÁäame_block
;

489 
cou¡î
 > 0) {

490 i‡(((
¶Ÿ±r2
->
id
 & ~
LAST_LONG_ENTRY_MASK
)

491 & 0xffË!
cou¡î
)

493 
¶Ÿ±r2
++;

494 
cou¡î
--;

498 
ªÆdít
 = (
dú_íåy
 *)
¶Ÿ±r2
;

499 (
__u8
 *)
¶Ÿ±r2
 > 
gë_vÁäame_block
) {

500 
¶Ÿ±r2
--;

501 
	`¶Ÿ2°r
(
¶Ÿ±r2
, 
l_«me
, &
idx
);

505 
ªÆdít
 = (
dú_íåy
 *)
¶Ÿ±r
;

509 
¶Ÿ±r
--;

510 i‡(
	`¶Ÿ2°r
(
¶Ÿ±r
, 
l_«me
, &
idx
))

512 } !(
¶Ÿ±r
->
id
 & 
LAST_LONG_ENTRY_MASK
));

514 
l_«me
[
idx
] = '\0';

515 i‡(*
l_«me
 =
DELETED_FLAG
)

516 *
l_«me
 = '\0';

517 i‡(*
l_«me
 =
aRING
)

518 *
l_«me
 = 
DELETED_FLAG
;

519 
	`downˇ£
(
l_«me
);

522 
	`mem˝y
(
ªtdít
, 
ªÆdít
, (
dú_íåy
));

525 
	}
}

528 
__u8
 
	$mkcksum
 (c⁄° *
°r
)

530 
i
;

532 
__u8
 
ªt
 = 0;

534 
i
 = 0; i < 11; i++) {

535 
ªt
 = ((‘ë & 1Ë<< 7Ë| (‘ë & 0x„Ë>> 1)Ë+ 
°r
[
i
];

538  
ªt
;

539 
	}
}

546 
__©åibuã__
 ((
__Æig√d__
 (
	$__Æignof__
 (
dú_íåy
))))

547 
__u8
 
gë_dít‰omdú_block_buf
[
MAX_CLUSTSIZE
];

549 
dú_íåy
 *
	$gë_dít‰omdú
 (
fsd©a
 *
myd©a
, 
°¨t£˘
,

550 *
fûíame
, 
dú_íåy
 *
ªtdít
,

551 
dﬁs
)

553 
__u16
 
¥evcksum
 = 0xffff;

554 
__u32
 
cur˛u°
 = 
	`START
(
ªtdít
);

555 
fûes
 = 0, 
dús
 = 0;

556 
__u8
* 
gë_dít‰omdú_block
 = (__u8 *)
	`KSEG1ADDR
(&
gë_dít‰omdú_block_buf
[0]);

558 
	`FAT_PRINTF
("gë_dít‰omdú: %s\n", 
fûíame
);

561 
dú_íåy
 *
díçå
;

563 
i
;

565 i‡(
	`gë_˛u°î
(
myd©a
, 
cur˛u°
, 
gë_dít‰omdú_block
,

566 
myd©a
->
˛u°_size
 * myd©a->
£˘_size
) != 0) {

567 
	`FAT_PRINTF
("Error:Ñeading directory block\n");

568  
NULL
;

571 
díçå
 = (
dú_íåy
 *)
gë_dít‰omdú_block
;

573 
i
 = 0; i < 
DIRENTSPERCLUST
; i++) {

574 
s_«me
[14], 
l_«me
[
VFAT_MAXLEN_BYTES
];

576 
l_«me
[0] = '\0';

577 i‡(
díçå
->
«me
[0] =
DELETED_FLAG
) {

578 
díçå
++;

581 i‡((
díçå
->
©å
 & 
ATTR_VOLUME
)) {

582 #ifde‡
CONFIG_SUPPORT_VFAT


583 i‡((
díçå
->
©å
 & 
ATTR_VFAT
) == ATTR_VFAT &&

584 (
díçå
->
«me
[0] & 
LAST_LONG_ENTRY_MASK
)) {

585 
¥evcksum
 = ((
dú_¶Ÿ
 *)
díçå
)->
Æüs_checksum
;

586 
	`gë_vÁäame
(
myd©a
, 
cur˛u°
,

587 
gë_dít‰omdú_block
,

588 
díçå
, 
l_«me
);

589 i‡(
dﬁs
) {

590 
isdú
;

591 
dúc
;

592 
doô
 = 0;

594 
isdú
 = (
díçå
->
©å
 & 
ATTR_DIR
);

596 i‡(
isdú
) {

597 
dús
++;

598 
dúc
 = '/';

599 
doô
 = 1;

601 
dúc
 = ' ';

602 i‡(
l_«me
[0] != 0) {

603 
fûes
++;

604 
doô
 = 1;

607 i‡(
doô
) {

608 i‡(
dúc
 == ' ') {

609 
	`¥ötf
(" %8ld %s%c\n",

610 ()
	`FAT2CPU32
(
díçå
->
size
),

611 
l_«me
,

612 
dúc
);

614 
	`¥ötf
(" %s%c\n",

615 
l_«me
,

616 
dúc
);

619 
díçå
++;

622 
	`FAT_PRINTF
("vÁäame: |%s|\n", 
l_«me
);

627 
díçå
++;

631 i‡(
díçå
->
«me
[0] == 0) {

632 i‡(
dﬁs
) {

633 
	`¥ötf
("\n%d file(s), %d dir(s)\n\n",

634 
fûes
, 
dús
);

636 
	`FAT_PRINTF
("Díäamê=NULL - %d\n", 
i
);

637  
NULL
;

639 #ifde‡
CONFIG_SUPPORT_VFAT


640 i‡(
dﬁs
 && 
	`mkcksum
(
díçå
->
«me
Ë=
¥evcksum
) {

641 
¥evcksum
 = 0xffff;

642 
díçå
++;

646 
	`gë_«me
(
díçå
, 
s_«me
);

647 i‡(
dﬁs
) {

648 
isdú
 = (
díçå
->
©å
 & 
ATTR_DIR
);

649 
dúc
;

650 
doô
 = 0;

652 i‡(
isdú
) {

653 
dús
++;

654 
dúc
 = '/';

655 
doô
 = 1;

657 
dúc
 = ' ';

658 i‡(
s_«me
[0] != 0) {

659 
fûes
++;

660 
doô
 = 1;

664 i‡(
doô
) {

665 i‡(
dúc
 == ' ') {

666 
	`¥ötf
(" %8ld %s%c\n",

667 ()
	`FAT2CPU32
(
díçå
->
size
),

668 
s_«me
, 
dúc
);

670 
	`¥ötf
(" %s%c\n",

671 
s_«me
, 
dúc
);

675 
díçå
++;

679 i‡(
	`°rcmp
(
fûíame
, 
s_«me
)

680 && 
	`°rcmp
(
fûíame
, 
l_«me
)) {

681 
	`FAT_PRINTF
("Mism©ch: |%s|%s|\n", 
s_«me
, 
l_«me
);

682 
díçå
++;

686 
	`mem˝y
(
ªtdít
, 
díçå
, (
dú_íåy
));

688 
	`FAT_PRINTF
("DítName: %s", 
s_«me
);

689 
	`FAT_PRINTF
(", sèπ: 0x%x", 
	`START
(
díçå
));

690 
	`FAT_PRINTF
(", size: 0x%x %s\n",

691 
	`FAT2CPU32
(
díçå
->
size
),

692 (
díçå
->
©å
 & 
ATTR_DIR
) ? "(DIR)" : "");

694  
ªtdít
;

697 
cur˛u°
 = 
	`gë_Áã¡
(
myd©a
, curclust);

698 i‡(
	`CHECK_CLUST
(
cur˛u°
, 
myd©a
->
Átsize
)) {

699 
	`FAT_PRINTF
("cur˛u°: 0x%x\n", 
cur˛u°
);

700 
	`¥ötf
("Invalid FATÉntry\n");

701  
NULL
;

705  
NULL
;

706 
	}
}

712 
	$ªad_boŸ£˘™dvi
 (
boŸ_£˘‹
 *
bs
, 
vﬁume_öfo
 *
vﬁöfo
, *
Átsize
)

714 
__u8
 *
block
;

715 
vﬁume_öfo
 *
vi°¨t
;

716 
ªt
 = 0;

718 i‡(
cur_dev
 =
NULL
) {

719 
	`FAT_PRINTF
("Error:Ço device selected\n");

723 
block
 = (
__u8
 *)
	`KSEG1ADDR
(
	`mÆloc
(
cur_dev
->
blksz
));

724 i‡(
block
 =
NULL
) {

725 
	`FAT_PRINTF
("Error:állocating block\n");

729 i‡(
	`disk_ªad
 (0, 1, 
block
) < 0) {

730 
	`FAT_PRINTF
("Error:Ñeading block\n");

731 
Áû
;

734 
	`mem˝y
(
bs
, 
block
, (
boŸ_£˘‹
));

735 
bs
->
ª£rved
 = 
	`FAT2CPU16
(bs->reserved);

736 
bs
->
Át_Àngth
 = 
	`FAT2CPU16
(bs->fat_length);

737 
bs
->
£cs_åack
 = 
	`FAT2CPU16
(bs->secs_track);

738 
bs
->
hóds
 = 
	`FAT2CPU16
(bs->heads);

739 
bs
->
tŸÆ_£˘
 = 
	`FAT2CPU32
(bs->total_sect);

742 i‡(
bs
->
Át_Àngth
 == 0) {

744 
bs
->
Át32_Àngth
 = 
	`FAT2CPU32
(bs->fat32_length);

745 
bs
->
Êags
 = 
	`FAT2CPU16
(bs->flags);

746 
bs
->
roŸ_˛u°î
 = 
	`FAT2CPU32
(bs->root_cluster);

747 
bs
->
öfo_£˘‹
 = 
	`FAT2CPU16
(bs->info_sector);

748 
bs
->
backup_boŸ
 = 
	`FAT2CPU16
(bs->backup_boot);

749 
vi°¨t
 = (
vﬁume_öfo
 *)(
block
 + (
boŸ_£˘‹
));

750 *
Átsize
 = 32;

752 
vi°¨t
 = (
vﬁume_öfo
 *)&(
bs
->
Át32_Àngth
);

753 *
Átsize
 = 0;

755 
	`mem˝y
(
vﬁöfo
, 
vi°¨t
, (
vﬁume_öfo
));

757 i‡(*
Átsize
 == 32) {

758 i‡(
	`°∫cmp
(
FAT32_SIGN
, 
vi°¨t
->
fs_ty≥
, 
SIGNLEN
) == 0)

759 
exô
;

761 i‡(
	`°∫cmp
(
FAT12_SIGN
, 
vi°¨t
->
fs_ty≥
, 
SIGNLEN
) == 0) {

762 *
Átsize
 = 12;

763 
exô
;

765 i‡(
	`°∫cmp
(
FAT16_SIGN
, 
vi°¨t
->
fs_ty≥
, 
SIGNLEN
) == 0) {

766 *
Átsize
 = 16;

767 
exô
;

771 
	`FAT_PRINTF
("Error: broken fs_type sign\n");

772 
Áû
:

773 
ªt
 = -1;

774 
exô
:

775 
	`‰ì
(
	`KSEG0ADDR
(
block
));

776  
ªt
;

777 
	}
}

779 
__©åibuã__
 ((
__Æig√d__
 (
	$__Æignof__
 (
dú_íåy
))))

780 
__u8
 
do_Át_ªad_block_buf
[
MAX_CLUSTSIZE
];

783 
	$do_Át_ªad
 (c⁄° *
fûíame
, *
buf„r
, 
maxsize
,

784 
dﬁs
)

786 
‚amec›y
[2048];

787 
boŸ_£˘‹
 
bs
;

788 
vﬁume_öfo
 
vﬁöfo
;

789 
fsd©a
 
d©ablock
;

790 
fsd©a
 *
myd©a
 = &
d©ablock
;

791 
dú_íåy
 *
díçå
;

792 
__u16
 
¥evcksum
 = 0xffff;

793 *
sub«me
 = "";

794 
__u32
 
cur£˘
;

795 
idx
, 
isdú
 = 0;

796 
fûes
 = 0, 
dús
 = 0;

797 
ªt
 = -1;

798 
fú°time
;

799 
__u32
 
roŸ_˛u°î
 = 0;

800 
roŸdú_size
 = 0;

801 
j
;

802 
__u8
 *
do_Át_ªad_block
 = 
	`KSEG1ADDR
(&
do_Át_ªad_block_buf
[0]);

804 i‡(
	`ªad_boŸ£˘™dvi
(&
bs
, &
vﬁöfo
, &
myd©a
->
Átsize
)) {

805 
	`FAT_PRINTF
("Error:Ñeading boot sector\n");

809 i‡(
myd©a
->
Átsize
 == 32) {

810 
roŸ_˛u°î
 = 
bs
.root_cluster;

811 
myd©a
->
Áéígth
 = 
bs
.
Át32_Àngth
;

813 
myd©a
->
Áéígth
 = 
bs
.
Át_Àngth
;

816 
myd©a
->
Át_£˘
 = 
bs
.
ª£rved
;

818 
cur£˘
 = 
myd©a
->
roŸdú_£˘


819 
myd©a
->
Át_£˘
 + myd©a->
Áéígth
 * 
bs
.
Áts
;

821 
myd©a
->
£˘_size
 = (
bs
.
£˘‹_size
[1] << 8) + bs.sector_size[0];

822 
myd©a
->
˛u°_size
 = 
bs
.
˛u°î_size
;

823 i‡(
myd©a
->
£˘_size
 !
cur_∑π_öfo
.
blksz
) {

824 
	`¥ötf
("Error: FAT sector size mismatch (fs=%hu, dev=%lu)\n",

825 
myd©a
->
£˘_size
, 
cur_∑π_öfo
.
blksz
);

829 i‡(
myd©a
->
Átsize
 == 32) {

830 
myd©a
->
d©a_begö
 = myd©a->
roŸdú_£˘
 -

831 (
myd©a
->
˛u°_size
 * 2);

833 
roŸdú_size
 = ((
bs
.
dú_íåõs
[1] * ()256 +

834 
bs
.
dú_íåõs
[0]) *

835 (
dú_íåy
)) /

836 
myd©a
->
£˘_size
;

837 
myd©a
->
d©a_begö
 = myd©a->
roŸdú_£˘
 +

838 
roŸdú_size
 -

839 (
myd©a
->
˛u°_size
 * 2);

842 
myd©a
->
Átbu‚um
 = -1;

843 
myd©a
->
Átbuf
 = (
__u8
 *)
	`KSEG1ADDR
(
	`mÆloc
(
FATBUFSIZE
));

844 i‡(
myd©a
->
Átbuf
 =
NULL
) {

845 
	`FAT_PRINTF
("Error:állocating memory\n");

849 #ifde‡
CONFIG_SUPPORT_VFAT


850 
	`FAT_PRINTF
("VFAT SupportÉnabled\n");

852 
	`FAT_PRINTF
("FAT%d, fat_sect: %d, fatlength: %d\n",

853 
myd©a
->
Átsize
, myd©a->
Át_£˘
, myd©a->
Áéígth
);

854 
	`FAT_PRINTF
("Rootdir beginsát cluster: %d, sector: %d, offset: %x\n"

856 
roŸ_˛u°î
,

857 
myd©a
->
roŸdú_£˘
,

858 
myd©a
->
roŸdú_£˘
 * myd©a->
£˘_size
, myd©a->
d©a_begö
);

859 
	`FAT_PRINTF
("Se˘‹ size: %d, clu°î size: %d\n", 
myd©a
->
£˘_size
,

860 
myd©a
->
˛u°_size
);

863 
	`ISDIRDELIM
(*
fûíame
))

864 
fûíame
++;

867 
	`°r˝y
(
‚amec›y
, 
fûíame
);

868 
	`downˇ£
(
‚amec›y
);

870 i‡(*
‚amec›y
 == '\0') {

871 i‡(!
dﬁs
)

872 
exô
;

874 
dﬁs
 = 
LS_ROOT
;

875 } i‡((
idx
 = 
	`dúdñim
(
‚amec›y
)) >= 0) {

876 
isdú
 = 1;

877 
‚amec›y
[
idx
] = '\0';

878 
sub«me
 = 
‚amec›y
 + 
idx
 + 1;

881 
	`ISDIRDELIM
(*
sub«me
))

882 
sub«me
++;

883 } i‡(
dﬁs
) {

884 
isdú
 = 1;

887 
j
 = 0;

889 
i
;

891 
	`FAT_PRINTF
("FATÑead sect=%d, clust_size=%d, DIRENTSPERBLOCK=%d\n",

892 
cur£˘
, 
myd©a
->
˛u°_size
, 
DIRENTSPERBLOCK
);

894 i‡(
	`disk_ªad
(
cur£˘
,

895 (
myd©a
->
Átsize
 == 32) ?

896 (
myd©a
->
˛u°_size
) :

897 
PREFETCH_BLOCKS
,

898 
do_Át_ªad_block
) < 0) {

899 
	`FAT_PRINTF
("Error:ÑeadingÑootdir block\n");

900 
exô
;

903 
díçå
 = (
dú_íåy
 *Ë
do_Át_ªad_block
;

905 
i
 = 0; i < 
DIRENTSPERBLOCK
; i++) {

906 
s_«me
[14], 
l_«me
[
VFAT_MAXLEN_BYTES
];

908 
l_«me
[0] = '\0';

909 i‡(
díçå
->
«me
[0] =
DELETED_FLAG
) {

910 
díçå
++;

913 i‡((
díçå
->
©å
 & 
ATTR_VOLUME
)) {

914 #ifde‡
CONFIG_SUPPORT_VFAT


915 i‡((
díçå
->
©å
 & 
ATTR_VFAT
) == ATTR_VFAT &&

916 (
díçå
->
«me
[0] & 
LAST_LONG_ENTRY_MASK
)) {

917 
¥evcksum
 =

918 ((
dú_¶Ÿ
 *)
díçå
)->
Æüs_checksum
;

920 
	`gë_vÁäame
(
myd©a
,

921 
roŸ_˛u°î
,

922 
do_Át_ªad_block
,

923 
díçå
, 
l_«me
);

925 i‡(
dﬁs
 =
LS_ROOT
) {

926 
dúc
;

927 
doô
 = 0;

928 
isdú
 =

929 (
díçå
->
©å
 & 
ATTR_DIR
);

931 i‡(
isdú
) {

932 
dús
++;

933 
dúc
 = '/';

934 
doô
 = 1;

936 
dúc
 = ' ';

937 i‡(
l_«me
[0] != 0) {

938 
fûes
++;

939 
doô
 = 1;

942 i‡(
doô
) {

943 i‡(
dúc
 == ' ') {

944 
	`¥ötf
(" %8ld %s%c\n",

945 ()
	`FAT2CPU32
(
díçå
->
size
),

946 
l_«me
,

947 
dúc
);

949 
	`¥ötf
(" %s%c\n",

950 
l_«me
,

951 
dúc
);

954 
díçå
++;

957 
	`FAT_PRINTF
("Rootvfatname: |%s|\n",

958 
l_«me
);

963 
díçå
++;

966 } i‡(
díçå
->
«me
[0] == 0) {

967 
	`FAT_PRINTF
("RoŸDíäamê=NULL - %d\n", 
i
);

968 i‡(
dﬁs
 =
LS_ROOT
) {

969 
	`¥ötf
("\n%d file(s), %d dir(s)\n\n",

970 
fûes
, 
dús
);

971 
ªt
 = 0;

973 
exô
;

975 #ifde‡
CONFIG_SUPPORT_VFAT


976 i‡(
dﬁs
 =
LS_ROOT
 &&

977 
	`mkcksum
(
díçå
->
«me
Ë=
¥evcksum
) {

978 
¥evcksum
 = 0xffff;

979 
díçå
++;

983 
	`gë_«me
(
díçå
, 
s_«me
);

985 i‡(
dﬁs
 =
LS_ROOT
) {

986 
isdú
 = (
díçå
->
©å
 & 
ATTR_DIR
);

987 
dúc
;

988 
doô
 = 0;

990 i‡(
isdú
) {

991 
dúc
 = '/';

992 i‡(
s_«me
[0] != 0) {

993 
dús
++;

994 
doô
 = 1;

997 
dúc
 = ' ';

998 i‡(
s_«me
[0] != 0) {

999 
fûes
++;

1000 
doô
 = 1;

1003 i‡(
doô
) {

1004 i‡(
dúc
 == ' ') {

1005 
	`¥ötf
(" %8ld %s%c\n",

1006 ()
	`FAT2CPU32
(
díçå
->
size
),

1007 
s_«me
, 
dúc
);

1009 
	`¥ötf
(" %s%c\n",

1010 
s_«me
, 
dúc
);

1013 
díçå
++;

1017 i‡(
	`°rcmp
(
‚amec›y
, 
s_«me
)

1018 && 
	`°rcmp
(
‚amec›y
, 
l_«me
)) {

1019 
	`FAT_PRINTF
("RoŸMism©ch: |%s|%s|\n", 
s_«me
,

1020 
l_«me
);

1021 
díçå
++;

1025 i‡(
isdú
 && !(
díçå
->
©å
 & 
ATTR_DIR
))

1026 
exô
;

1028 
	`FAT_PRINTF
("RoŸName: %s", 
s_«me
);

1029 
	`FAT_PRINTF
(", sèπ: 0x%x", 
	`START
(
díçå
));

1030 
	`FAT_PRINTF
(", size: 0x%x %s\n",

1031 
	`FAT2CPU32
(
díçå
->
size
),

1032 
isdú
 ? "(DIR)" : "");

1034 
roŸdú_d⁄e
;

1036 
	`FAT_PRINTF
("END LOOP: j=%d clu°_size=%d\n", 
j
,

1037 
myd©a
->
˛u°_size
);

1044 ++
j
;

1045 
Át32_íd
 = 0;

1046 i‡((
myd©a
->
Átsize
 =32Ë&& (
j
 =myd©a->
˛u°_size
)) {

1047 
nxt£˘
 = 0;

1048 
nxt_˛u°
 = 0;

1050 
nxt_˛u°
 = 
	`gë_Áã¡
(
myd©a
, 
roŸ_˛u°î
);

1051 
Át32_íd
 = 
	`CHECK_CLUST
(
nxt_˛u°
, 32);

1053 
nxt£˘
 = 
myd©a
->
d©a_begö
 +

1054 (
nxt_˛u°
 * 
myd©a
->
˛u°_size
);

1056 
roŸ_˛u°î
 = 
nxt_˛u°
;

1058 
cur£˘
 = 
nxt£˘
;

1059 
j
 = 0;

1061 
cur£˘
++;

1065 i‡((
myd©a
->
Átsize
 =32 && 
Át32_íd
) ||

1066 (
myd©a
->
Átsize
 !32 && 
j
 =
roŸdú_size
)) {

1067 i‡(
dﬁs
 =
LS_ROOT
) {

1068 
	`¥ötf
("\n%d file(s), %d dir(s)\n\n",

1069 
fûes
, 
dús
);

1070 
ªt
 = 0;

1072 
exô
;

1075 
roŸdú_d⁄e
:

1077 
fú°time
 = 1;

1079 
isdú
) {

1080 
°¨t£˘
 = 
myd©a
->
d©a_begö


1081 + 
	`START
(
díçå
Ë* 
myd©a
->
˛u°_size
;

1082 
dú_íåy
 
dít
;

1083 *
√xäame
 = 
NULL
;

1085 
dít
 = *
díçå
;

1086 
díçå
 = &
dít
;

1088 
idx
 = 
	`dúdñim
(
sub«me
);

1090 i‡(
idx
 >= 0) {

1091 
sub«me
[
idx
] = '\0';

1092 
√xäame
 = 
sub«me
 + 
idx
 + 1;

1094 
	`ISDIRDELIM
(*
√xäame
))

1095 
√xäame
++;

1096 i‡(
dﬁs
 && *
√xäame
 == '\0')

1097 
fú°time
 = 0;

1099 i‡(
dﬁs
 && 
fú°time
) {

1100 
fú°time
 = 0;

1102 
isdú
 = 0;

1106 i‡(
	`gë_dít‰omdú
(
myd©a
, 
°¨t£˘
, 
sub«me
, 
díçå
,

1107 
isdú
 ? 0 : 
dﬁs
Ë=
NULL
) {

1108 i‡(
dﬁs
 && !
isdú
)

1109 
ªt
 = 0;

1110 
exô
;

1113 i‡(
idx
 >= 0) {

1114 i‡(!(
díçå
->
©å
 & 
ATTR_DIR
))

1115 
exô
;

1116 
sub«me
 = 
√xäame
;

1120 
ªt
 = 
	`gë_c⁄ã¡s
(
myd©a
, 
díçå
, 
buf„r
, 
maxsize
);

1121 
	`FAT_PRINTF
("Size: %d, gŸ: %ld\n", 
	`FAT2CPU32
(
díçå
->
size
), 
ªt
);

1123 
exô
:

1124 
	`‰ì
(
	`KSEG0ADDR
(
myd©a
->
Átbuf
));

1125  
ªt
;

1126 
	}
}

1128 
	$fûe_Át_dëe˘fs
 ()

1130 
boŸ_£˘‹
 
bs
;

1131 
vﬁume_öfo
 
vﬁöfo
;

1132 
Átsize
;

1133 
vﬁ_œbñ
[12];

1135 i‡(
cur_dev
 =
NULL
) {

1136 
	`¥ötf
("No current device\n");

1140 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_IDE
) || \

1141 (
CONFIG_COMMANDS
 & 
CFG_CMD_SCSI
)|| \

1142 (
CONFIG_COMMANDS
 & 
CFG_CMD_USB
)

1144 
	`¥ötf
("Interface: ");

1145 
cur_dev
->
if_ty≥
) {

1146 
IF_TYPE_IDE
:

1147 
	`¥ötf
("IDE");

1154 
IF_TYPE_SCSI
:

1155 
	`¥ötf
("SCSI");

1162 
IF_TYPE_USB
:

1163 
	`¥ötf
("USB");

1174 
	`¥ötf
("Unknown");

1177 
	`¥ötf
("\¿ Devi˚ %d: ", 
cur_dev
->
dev
);

1178 
	`dev_¥öt
(
cur_dev
);

1181 i‡(
	`ªad_boŸ£˘™dvi
(&
bs
, &
vﬁöfo
, &
Átsize
)) {

1182 
	`¥ötf
("\nNo valid FAT fs found\n");

1186 
	`mem˝y
(
vﬁ_œbñ
, 
vﬁöfo
.
vﬁume_œbñ
, 11);

1187 
vﬁ_œbñ
[11] = '\0';

1188 
vﬁöfo
.
fs_ty≥
[5] = '\0';

1190 
	`¥ötf
("P¨tôi⁄ %d: Fûesy°em: %†\"%s\"\n", 
cur_∑π_ƒ
,

1191 
vﬁöfo
.
fs_ty≥
, 
vﬁ_œbñ
);

1194 
	}
}

1196 
	$fûe_Át_ls
 (c⁄° *
dú
)

1198  
	`do_Át_ªad
(
dú
, 
NULL
, 0, 
LS_YES
);

1199 
	}
}

1201 
	$fûe_Át_ªad
 (c⁄° *
fûíame
, *
buf„r
, 
maxsize
)

1203 
	`¥ötf
("ªadög %s\n", 
fûíame
);

1204  
	`do_Át_ªad
(
fûíame
, 
buf„r
, 
maxsize
, 
LS_NO
);

1205 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/fs/fat/file.c

28 
	~<comm⁄.h
>

29 
	~<c⁄fig.h
>

30 
	~<mÆloc.h
>

31 
	~<Át.h
>

32 
	~<löux/°©.h
>

33 
	~<löux/time.h
>

35 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_FAT
)

38 c⁄° 
fûesy°em
 
	gfûesy°ems
[] = {

39 { 
fûe_Át_dëe˘fs
, 
fûe_Át_ls
, 
fûe_Át_ªad
, "FAT" },

41 
	#NUM_FILESYS
 ((
fûesy°ems
)/(
fûesy°em
))

	)

44 
	gcuºít_fûesy°em
 = 
FSTYPE_NONE
;

47 
	#CWD_LEN
 511

	)

48 
	gfûe_cwd
[
CWD_LEN
+1] = "/";

51 
	$fûe_gëf¢ame
(
idx
)

53 i‡(
idx
 < 0 || idx >
NUM_FILESYS
Ë 
NULL
;

55  
fûesy°ems
[
idx
].
«me
;

56 
	}
}

60 
	$∑th˝y
(*
de°
, c⁄° *
§c
)

62 *
‹igde°
 = 
de°
;

65 i‡(
de°
-
fûe_cwd
 >
CWD_LEN
) {

66 *
de°
 = '\0';

69 *(
de°
Ë*(
§c
);

70 i‡(*
§c
 == '\0') {

71 i‡(
de°
-- !
‹igde°
 && 
	`ISDIRDELIM
(*dest)) {

72 *
de°
 = '\0';

76 ++
de°
;

77 i‡(
	`ISDIRDELIM
(*
§c
)) {

78 
	`ISDIRDELIM
(*
§c
)) src++;

80 
§c
++;

83 
	}
}

87 
	$fûe_cd
(c⁄° *
∑th
)

89 i‡(
	`ISDIRDELIM
(*
∑th
)) {

90 
	`ISDIRDELIM
(*
∑th
))Öath++;

91 
	`°∫˝y
(
fûe_cwd
+1, 
∑th
, 
CWD_LEN
-1);

93 c⁄° *
‹ig∑th
 = 
∑th
;

94 *
tmp°r
 = 
fûe_cwd
;

95 
back
 = 0;

97 *
tmp°r
 != '\0')Åmpstr++;

99 
tmp°r
--;

100 } 
	`ISDIRDELIM
(*
tmp°r
));

102 *
∑th
 == '.') {

103 
∑th
++;

104 *
∑th
 == '.') {

105 
∑th
++;

106 
back
++;

108 i‡(*
∑th
 !'\0' && !
	`ISDIRDELIM
(*path)) {

109 
∑th
 = 
‹ig∑th
;

110 
back
 = 0;

113 
	`ISDIRDELIM
(*
∑th
))Öath++;

114 
‹ig∑th
 = 
∑th
;

117 
back
--) {

119 !
	`ISDIRDELIM
(*
tmp°r
)) {

120 
tmp°r
--;

122 i‡(
tmp°r
 =
fûe_cwd
) {

124 
tmp°r
--;

128 
	`ISDIRDELIM
(*
tmp°r
))Åmpstr--;

130 
tmp°r
++;

131 i‡(*
∑th
 == '\0') {

132 i‡(
tmp°r
 =
fûe_cwd
) {

133 *
tmp°r
 = '/';

134 
tmp°r
++;

136 *
tmp°r
 = '\0';

139 *
tmp°r
 = '/';

140 
	`∑th˝y
(
tmp°r
+1, 
∑th
);

144 
	}
}

148 
	$fûe_dëe˘fs
()

150 
i
;

152 
cuºít_fûesy°em
 = 
FSTYPE_NONE
;

154 
i
 = 0; i < 
NUM_FILESYS
; i++) {

155 i‡(
fûesy°ems
[
i
].
	`dëe˘
() == 0) {

156 
	`°r˝y
(
fûe_cwd
, "/");

157 
cuºít_fûesy°em
 = 
i
;

162  
cuºít_fûesy°em
;

163 
	}
}

167 
	$fûe_ls
(c⁄° *
dú
)

169 
fuŒ∑th
[1024];

170 c⁄° *
¨g
;

172 i‡(
cuºít_fûesy°em
 =
FSTYPE_NONE
) {

173 
	`¥ötf
("Can'tÜist files withoutá filesystem!\n");

177 i‡(
	`ISDIRDELIM
(*
dú
)) {

178 
¨g
 = 
dú
;

180 
	`•rötf
(
fuŒ∑th
, "%s/%s", 
fûe_cwd
, 
dú
);

181 
¨g
 = 
fuŒ∑th
;

183  
fûesy°ems
[
cuºít_fûesy°em
].
	`ls
(
¨g
);

184 
	}
}

188 
	$fûe_ªad
(c⁄° *
fûíame
, *
buf„r
, 
maxsize
)

190 
fuŒ∑th
[1024];

191 c⁄° *
¨g
;

193 i‡(
cuºít_fûesy°em
 =
FSTYPE_NONE
) {

194 
	`¥ötf
("Can'tÜoad file withoutá filesystem!\n");

198 i‡(
	`ISDIRDELIM
(*
fûíame
)) {

199 
¨g
 = 
fûíame
;

201 
	`•rötf
(
fuŒ∑th
, "%s/%s", 
fûe_cwd
, 
fûíame
);

202 
¨g
 = 
fuŒ∑th
;

205  
fûesy°ems
[
cuºít_fûesy°em
].
	`ªad
(
¨g
, 
buf„r
, 
maxsize
);

206 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/ArchDefs.h

32 #i‚de‡
_ArchDefs_h_


33 
	#_ArchDefs_h_


	)

42 #i‡
deföed
(
MIPSAVPENV
Ë|| deföed(
__LANGUAGE_ASM__
Ë|| deföed(
__as£mbÀr
)

43 #unde‡
__ASSEMBLER__


44 
	#__ASSEMBLER__


	)

51 #i‡
deföed
(
__ASSEMBLER__
Ë&& !deföed(
KEEPINT64
)

52 #unde‡
UINT64_C


53 #unde‡
INT64_C


55 
	#UINT64_C
(
c
Ë
	)
c

56 
	#INT64_C
(
c
Ë
	)
c

85 
	#S_In°nOpcode
 26

	)

86 
	#M_In°nOpcode
 (0x3‡<< 
S_In°nOpcode
)

	)

87 
	#S_In°nRS
 21

	)

88 
	#M_In°nRS
 (0x1‡<< 
S_In°nRS
)

	)

89 
	#S_In°nRT
 16

	)

90 
	#M_In°nRT
 (0x1‡<< 
S_In°nRT
)

	)

91 
	#S_In°nRD
 11

	)

92 
	#M_In°nRD
 (0x1‡<< 
S_In°nRD
)

	)

93 
	#S_In°nSA
 6

	)

94 
	#M_In°nSA
 (0x1‡<< 
S_In°nSA
)

	)

95 
	#S_In°nTcode
 6

	)

96 
	#M_In°nTcode
 (0x3f‡<< 
S_In°nTcode
)

	)

97 
	#S_In°nBcode
 6

	)

98 
	#M_In°nBcode
 (0xffff‡<< 
S_In°nBcode
)

	)

99 
	#S_In°nFunc
 0

	)

100 
	#M_In°nFunc
 (0x3‡<< 
S_In°nFunc
)

	)

101 
	#S_In°nSñ
 0

	)

102 
	#M_In°nSñ
 (0x7 << 
S_In°nSñ
)

	)

105 
	#S_In°nSC
 5

	)

106 
	#M_In°nSC
 (0x1 << 
S_In°nSC
)

	)

109 
	#S_In°nSR
 21

	)

110 
	#M_In°nSR
 (0x1 << 
S_In°nSR
)

	)

113 
	#S_In°nHB
 10

	)

114 
	#M_In°nHB
 (0x1 << 
S_In°nHB
)

	)

126 
	#S_In°nOff£t
 0

	)

127 
	#M_In°nOff£t
 (0xfff‡<< 
S_In°nOff£t
)

	)

139 
	#S_In°nABô
 12

	)

140 
	#M_In°nABô
 (0x7 << 
S_In°nABô
)

	)

141 
	#S_In°nOff£t12
 0

	)

142 
	#M_In°nOff£t12
 (0xff‡<< 
S_In°nOff£t12
)

	)

154 
	#S_In°nHöt
 
S_In°nRT


	)

155 
	#M_In°nHöt
 
M_In°nRT


	)

167 
	#S_In°nJIndex
 0

	)

168 
	#M_In°nJIndex
 (0x03fffff‡<< 
S_In°nJIndex
)

	)

180 
	#S_In°nFmt
 
S_In°nRS


	)

181 
	#M_In°nFmt
 
M_In°nRS


	)

182 
	#S_In°nFT
 
S_In°nRT


	)

183 
	#M_In°nFT
 
M_In°nRT


	)

184 
	#S_In°nFS
 
S_In°nRD


	)

185 
	#M_In°nFS
 
M_In°nRD


	)

186 
	#S_In°nFD
 
S_In°nSA


	)

187 
	#M_In°nFD
 
M_In°nSA


	)

199 
	#S_In°nSub
 
S_In°nRS


	)

200 
	#M_In°nSub
 
M_In°nRS


	)

214 
	#S_In°nCCcmp
 8

	)

215 
	#M_In°nCCcmp
 (0x7 << 
S_In°nCCcmp
)

	)

216 
	#S_In°nCABS
 6

	)

217 
	#M_In°nCABS
 (0x1 << 
S_In°nCABS
)

	)

230 
	#S_In°nCC
 18

	)

231 
	#M_In°nCC
 (0x7 << 
S_In°nCC
)

	)

232 
	#S_In°nND
 17

	)

233 
	#M_In°nND
 (0x1 << 
S_In°nND
)

	)

234 
	#S_In°nTF
 16

	)

235 
	#M_In°nTF
 (0x1 << 
S_In°nTF
)

	)

247 
	#S_In°nFR
 
S_In°nRS


	)

248 
	#M_In°nFR
 
M_In°nRS


	)

249 
	#S_In°nOp4
 3

	)

250 
	#M_In°nOp4
 (0x7 << 
S_In°nOp4
)

	)

251 
	#S_In°nFmt3
 0

	)

252 
	#M_In°nFmt3
 (0x7 << 
S_In°nFmt3
)

	)

273 
	#S_In°nHötX
 
S_In°nRD


	)

274 
	#M_In°nHötX
 
M_In°nRD


	)

328 
	#S_In°nVT
 
S_In°nRT


	)

329 
	#M_In°nVT
 
M_In°nRT


	)

330 
	#S_In°nVS
 
S_In°nRD


	)

331 
	#M_In°nVS
 
M_In°nRD


	)

332 
	#S_In°nVD
 
S_In°nSA


	)

333 
	#M_In°nVD
 
M_In°nSA


	)

335 
	#S_In°nFmt£l
 
S_In°nFmt


	)

336 
	#M_In°nFmt£l
 (0x1 << 
S_In°nFmt£l
)

	)

337 
	#S_In°nVImm
 
S_In°nFmt


	)

338 
	#M_In°nVImm
 (0x7 << 
S_In°nVImm
)

	)

340 
	#S_In°nL
 10

	)

341 
	#M_In°nL
 (0x1 << 
S_In°nL
)

	)

361 
	#S_M16_In°nOpcode
 11

	)

362 
	#M_M16_In°nOpcode
 (0x1‡<< 
S_M16_In°nOpcode
)

	)

363 
	#S_M16_In°nOff£t
 0

	)

364 
	#M_M16_In°nOff£t
 (0x7f‡<< 
S_M16_In°nOff£t
)

	)

376 
	#S_M16_In°nRX
 8

	)

377 
	#M_M16_In°nRX
 (0x7 << 
S_M16_In°nRX
)

	)

378 
	#S_M16_In°nOff£t7
 0

	)

379 
	#M_M16_In°nOff£t7
 (0xf‡<< 
S_M16_In°nOff£t7
)

	)

391 
	#S_M16_In°nBPcode
 5

	)

392 
	#M_M16_In°nBPcode
 (0x3‡<< 
S_M16_In°nBPcode
)

	)

413 
	#S_M16_In°nRY
 5

	)

414 
	#M_M16_In°nRY
 (0x7 << 
S_M16_In°nRY
)

	)

415 
	#S_M16_In°nFunc
 0

	)

416 
	#M_M16_In°nFunc
 (0x1‡<< 
S_M16_In°nFunc
)

	)

438 
	#S_M16_In°nExãndSA4
 22

	)

439 
	#M_M16_In°nExãndSA4
 (0x1‡<< 
S_M16_In°nExãndSA4
)

	)

440 
	#S_M16_In°nExãndSA5
 21

	)

441 
	#M_M16_In°nExãndSA5
 (0x1 << 
S_M16_In°nExãndSA5
)

	)

442 
	#S_M16_In°nShi·F
 0

	)

443 
	#M_M16_In°nShi·F
 (0x3 << 
S_M16_In°nShi·F
)

	)

444 
	#S_M16_In°nRZ
 2

	)

445 
	#M_M16_In°nRZ
 (0x7 << 
S_M16_In°nRZ
)

	)

446 
	#S_M16_In°nSA
 2

	)

447 
	#M_M16_In°nSA
 (0x7 << 
S_M16_In°nSA
)

	)

459 
	#S_M16_In°nExãndOff£t15
 16

	)

460 
	#M_M16_In°nExãndOff£t15
 (0x1‡<< 
S_M16_In°nExãndOff£t15
)

	)

461 
	#S_M16_In°nExãndOff£t10
 21

	)

462 
	#M_M16_In°nExãndOff£t10
 (0x3‡<< 
S_M16_In°nExãndOff£t10
)

	)

475 
	#S_M16_In°nF
 4

	)

476 
	#M_M16_In°nF
 (0x1 << 
S_M16_In°nF
)

	)

477 
	#S_M16_In°nOff£t3
 0

	)

478 
	#M_M16_In°nOff£t3
 (0x‡<< 
S_M16_In°nOff£t3
)

	)

479 
	#S_M16_In°nExãndOff£t14
 16

	)

480 
	#M_M16_In°nExãndOff£t14
 (0x‡<< 
S_M16_In°nExãndOff£t14
)

	)

481 
	#S_M16_In°nExãndOff£t10_4
 20

	)

482 
	#M_M16_In°nExãndOff£t10_4
 (0x7‡<< 
S_M16_In°nExãndOff£t10_4
)

	)

495 
	#S_M16_In°nX
 26

	)

496 
	#M_M16_In°nX
 (0x1 << 
S_M16_In°nX
)

	)

497 
	#S_M16_In°nT¨gë2
 21

	)

498 
	#M_M16_In°nT¨gë2
 (0x1‡<< 
S_M16_In°nT¨gë2
)

	)

499 
	#S_M16_In°nT¨gë1
 16

	)

500 
	#M_M16_In°nT¨gë1
 (0x1‡<< 
S_M16_In°nT¨gë1
)

	)

501 
	#S_M16_In°nT¨gë0
 0

	)

502 
	#M_M16_In°nT¨gë0
 (0xfff‡<< 
S_M16_In°nT¨gë0
)

	)

514 
	#S_M16_In°nRZ0
 0

	)

515 
	#M_M16_In°nRZ0
 (0x7 << 
S_M16_In°nRZ0
)

	)

516 
	#S_M16_In°nR32u
 3

	)

517 
	#M_M16_In°nR32u
 (0x3 << 
S_M16_In°nR32u
)

	)

518 
	#S_M16_In°nR32l
 5

	)

519 
	#M_M16_In°nR32l
 (0x7 << 
S_M16_In°nR32l
)

	)

531 
	#S_M16_In°nX§egs
 24

	)

532 
	#M_M16_In°nX§egs
 (0x7 << 
S_M16_In°nX§egs
)

	)

533 
	#S_M16_In°nFømeSize7
 20

	)

534 
	#M_M16_In°nFømeSize7
 (0x‡<< 
S_M16_In°nFømeSize7
)

	)

535 
	#S_M16_In°nAªgs
 16

	)

536 
	#M_M16_In°nAªgs
 (0x‡<< 
S_M16_In°nAªgs
)

	)

537 
	#S_M16_In°nS
 7

	)

538 
	#M_M16_In°nS
 (0x1 << 
S_M16_In°nS
)

	)

539 
	#S_M16_In°nRa
 6

	)

540 
	#M_M16_In°nRa
 (0x1 << 
S_M16_In°nRa
)

	)

541 
	#S_M16_In°nS0
 5

	)

542 
	#M_M16_In°nS0
 (0x1 << 
S_M16_In°nS0
)

	)

543 
	#S_M16_In°nS1
 4

	)

544 
	#M_M16_In°nS1
 (0x1 << 
S_M16_In°nS1
)

	)

545 
	#S_M16_In°nFømeSize
 0

	)

546 
	#M_M16_In°nFømeSize
 (0x‡<< 
S_M16_In°nFømeSize
)

	)

556 #ifde‡
MIPSADDR64


557 
	#A_K0BASE
 
	`UINT64_C
(0xffffffff80000000)

	)

558 
	#A_K1BASE
 
	`UINT64_C
(0xfffffffÁ0000000)

	)

559 
	#A_K2BASE
 
	`UINT64_C
(0xffffffffc0000000)

	)

560 
	#A_K3BASE
 
	`UINT64_C
(0xfffffff„0000000)

	)

561 
	#A_REGION
 
	`UINT64_C
(0xc000000000000000)

	)

562 
	#A_XKPHYS_ATTR
 
	`UINT64_C
(0x3800000000000000)

	)

564 
	#A_K0BASE
 0x80000000

	)

565 
	#A_K1BASE
 0xa0000000

	)

566 
	#A_K2BASE
 0xc0000000

	)

567 
	#A_K3BASE
 0xe0000000

	)

569 
	#M_KMAPPED
 0x40000000

	)

570 
	#M_KUNCACHED
 0x20000000

	)

573 #ifde‡
MIPS_Modñ64


575 
	#S_VMAP64
 62

	)

576 
	#M_VMAP64
 
	`UINT64_C
(0xc000000000000000)

	)

578 
	#K_VMode11
 3

	)

579 
	#K_VMode10
 2

	)

580 
	#K_VMode01
 1

	)

581 
	#K_VMode00
 0

	)

583 
	#S_KSEG3
 29

	)

584 
	#M_KSEG3
 (0x7 << 
S_KSEG3
)

	)

585 
	#K_KSEG3
 7

	)

587 
	#S_SSEG
 29

	)

588 
	#M_SSEG
 (0x7 << 
S_KSEG3
)

	)

589 
	#K_SSEG
 6

	)

591 
	#S_KSSEG
 29

	)

592 
	#M_KSSEG
 (0x7 << 
S_KSEG3
)

	)

593 
	#K_KSSEG
 6

	)

595 
	#S_KSEG1
 29

	)

596 
	#M_KSEG1
 (0x7 << 
S_KSEG3
)

	)

597 
	#K_KSEG1
 5

	)

599 
	#S_KSEG0
 29

	)

600 
	#M_KSEG0
 (0x7 << 
S_KSEG3
)

	)

601 
	#K_KSEG0
 4

	)

603 
	#S_XKSEG
 29

	)

604 
	#M_XKSEG
 (0x7 << 
S_KSEG3
)

	)

605 
	#K_XKSEG
 3

	)

607 
	#S_USEG
 31

	)

608 
	#M_USEG
 (0x1 << 
S_USEG
)

	)

609 
	#K_USEG
 0

	)

611 
	#S_EjègProbeMem
 20

	)

612 
	#M_EjègProbeMem
 (0x1 << 
S_EjègProbeMem
)

	)

613 
	#K_EjègProbeMem
 0

	)

619 
	#S_KSEG3
 29

	)

620 
	#M_KSEG3
 (0x7 << 
S_KSEG3
)

	)

621 
	#K_KSEG3
 7

	)

623 
	#S_KSSEG
 29

	)

624 
	#M_KSSEG
 (0x7 << 
S_KSSEG
)

	)

625 
	#K_KSSEG
 6

	)

627 
	#S_SSEG
 29

	)

628 
	#M_SSEG
 (0x7 << 
S_SSEG
)

	)

629 
	#K_SSEG
 6

	)

631 
	#S_KSEG1
 29

	)

632 
	#M_KSEG1
 (0x7 << 
S_KSEG1
)

	)

633 
	#K_KSEG1
 5

	)

635 
	#S_KSEG0
 29

	)

636 
	#M_KSEG0
 (0x7 << 
S_KSEG0
)

	)

637 
	#K_KSEG0
 4

	)

639 
	#S_KUSEG
 31

	)

640 
	#M_KUSEG
 (0x1 << 
S_KUSEG
)

	)

641 
	#K_KUSEG
 0

	)

643 
	#S_SUSEG
 31

	)

644 
	#M_SUSEG
 (0x1 << 
S_SUSEG
)

	)

645 
	#K_SUSEG
 0

	)

647 
	#S_USEG
 31

	)

648 
	#M_USEG
 (0x1 << 
S_USEG
)

	)

649 
	#K_USEG
 0

	)

651 
	#K_EjègLowî
 0xff200000

	)

652 
	#K_EjègUµî
 0xff3fffff

	)

654 
	#S_EjègProbeMem
 20

	)

655 
	#M_EjègProbeMem
 (0x1 << 
S_EjègProbeMem
)

	)

656 
	#K_EjègProbeMem
 0

	)

671 
	#K_CachePriI
 0

	)

672 
	#K_CachePriD
 1

	)

673 
	#K_CachePriU
 1

	)

674 
	#K_CacheTîU
 2

	)

675 
	#K_CacheSecU
 3

	)

681 
	#S_CacheFunc
 2

	)

682 
	#K_CacheIndexInv
 0

	)

683 
	#K_CacheIndexWBInv
 0

	)

684 
	#K_CacheIndexLdTag
 1

	)

685 
	#K_CacheIndexStTag
 2

	)

686 
	#K_CacheHôInv
 4

	)

687 
	#K_CacheFûl
 5

	)

688 
	#K_CacheHôWBInv
 5

	)

689 
	#K_CacheHôWB
 6

	)

690 
	#K_CacheFëchLock
 7

	)

692 
	#ICIndexInv
 ((
K_CacheIndexInv
 << 
S_CacheFunc
Ë| 
K_CachePriI
)

	)

693 
	#DCIndexWBInv
 ((
K_CacheIndexWBInv
 << 
S_CacheFunc
Ë| 
K_CachePriD
)

	)

694 
	#DCIndexInv
 
DCIndexWBInv


	)

695 
	#ICIndexLdTag
 ((
K_CacheIndexLdTag
 << 
S_CacheFunc
Ë| 
K_CachePriI
)

	)

696 
	#DCIndexLdTag
 ((
K_CacheIndexLdTag
 << 
S_CacheFunc
Ë| 
K_CachePriD
)

	)

697 
	#ICIndexStTag
 ((
K_CacheIndexStTag
 << 
S_CacheFunc
Ë| 
K_CachePriI
)

	)

698 
	#DCIndexStTag
 ((
K_CacheIndexStTag
 << 
S_CacheFunc
Ë| 
K_CachePriD
)

	)

699 
	#ICHôInv
 ((
K_CacheHôInv
 << 
S_CacheFunc
Ë| 
K_CachePriI
)

	)

700 
	#DCHôInv
 ((
K_CacheHôInv
 << 
S_CacheFunc
Ë| 
K_CachePriD
)

	)

701 
	#ICFûl
 ((
K_CacheFûl
 << 
S_CacheFunc
Ë| 
K_CachePriI
)

	)

702 
	#DCHôWBInv
 ((
K_CacheHôWBInv
 << 
S_CacheFunc
Ë| 
K_CachePriD
)

	)

703 
	#DCHôWB
 ((
K_CacheHôWB
 << 
S_CacheFunc
Ë| 
K_CachePriD
)

	)

704 
	#ICFëchLock
 ((
K_CacheFëchLock
 << 
S_CacheFunc
Ë| 
K_CachePriI
)

	)

705 
	#DCFëchLock
 ((
K_CacheFëchLock
 << 
S_CacheFunc
Ë| 
K_CachePriD
)

	)

707 
	#SCIndexWBInv
 ((
K_CacheIndexWBInv
 << 
S_CacheFunc
Ë| 
K_CacheSecU
)

	)

708 
	#SCIndexInv
 
SCIndexWBInv


	)

709 
	#SCIndexLdTag
 ((
K_CacheIndexLdTag
 << 
S_CacheFunc
Ë| 
K_CacheSecU
)

	)

710 
	#SCIndexStTag
 ((
K_CacheIndexStTag
 << 
S_CacheFunc
Ë| 
K_CacheSecU
)

	)

711 
	#SCHôInv
 ((
K_CacheHôInv
 << 
S_CacheFunc
Ë| 
K_CacheSecU
)

	)

712 
	#SCHôWBInv
 ((
K_CacheHôWBInv
 << 
S_CacheFunc
Ë| 
K_CacheSecU
)

	)

713 
	#SCHôWB
 ((
K_CacheHôWB
 << 
S_CacheFunc
Ë| 
K_CacheSecU
)

	)

715 
	#TCIndexWBInv
 ((
K_CacheIndexWBInv
 << 
S_CacheFunc
Ë| 
K_CacheTîU
)

	)

716 
	#TCIndexInv
 
TCIndexWBInv


	)

717 
	#TCIndexLdTag
 ((
K_CacheIndexLdTag
 << 
S_CacheFunc
Ë| 
K_CacheTîU
)

	)

718 
	#TCIndexStTag
 ((
K_CacheIndexStTag
 << 
S_CacheFunc
Ë| 
K_CacheTîU
)

	)

719 
	#TCHôInv
 ((
K_CacheHôInv
 << 
S_CacheFunc
Ë| 
K_CacheTîU
)

	)

720 
	#TCHôWBInv
 ((
K_CacheHôWBInv
 << 
S_CacheFunc
Ë| 
K_CacheTîU
)

	)

721 
	#TCHôWB
 ((
K_CacheHôWB
 << 
S_CacheFunc
Ë| 
K_CacheTîU
)

	)

729 
	#PªfLﬂd
 0

	)

730 
	#PªfSt‹e
 1

	)

731 
	#PªfLﬂdSåómed
 4

	)

732 
	#PªfSt‹eSåómed
 5

	)

733 
	#PªfLﬂdRëaöed
 6

	)

734 
	#PªfSt‹eRëaöed
 7

	)

735 
	#PªfWBInvÆ
 25

	)

736 
	#PªfNudge
 25

	)

737 
	#PªfPª∑ªF‹St‹e
 30

	)

753 #i‡
deföed
(
__ASSEMBLER__
)

754 
	#zîo
 
$0


	)

755 
	#AT
 
$1


	)

756 
	#v0
 
$2


	)

757 
	#v1
 
$3


	)

758 
	#a0
 
$4


	)

759 
	#a1
 
$5


	)

760 
	#a2
 
$6


	)

761 
	#a3
 
$7


	)

762 
	#t0
 
$8


	)

763 
	#t1
 
$9


	)

764 
	#t2
 
$10


	)

765 
	#t3
 
$11


	)

766 
	#t4
 
$12


	)

767 
	#t5
 
$13


	)

768 
	#t6
 
$14


	)

769 
	#t7
 
$15


	)

770 
	#s0
 
$16


	)

771 
	#s1
 
$17


	)

772 
	#s2
 
$18


	)

773 
	#s3
 
$19


	)

774 
	#s4
 
$20


	)

775 
	#s5
 
$21


	)

776 
	#s6
 
$22


	)

777 
	#s7
 
$23


	)

778 
	#t8
 
$24


	)

779 
	#t9
 
$25


	)

780 
	#k0
 
$26


	)

781 
	#k1
 
$27


	)

782 
	#gp
 
$28


	)

783 
	#•
 
$29


	)

784 
	#Â
 
$30


	)

785 
	#ø
 
$31


	)

793 #ifde‡
MIPSAVPENV


794 
	#ªpc
 
$25


	)

795 
	#tid
 
$30


	)

814 #i‡
deföed
(
__ASSEMBLER__
)

815 
	#r0
 
$0


	)

816 
	#r1
 
$1


	)

817 
	#r2
 
$2


	)

818 
	#r3
 
$3


	)

819 
	#r4
 
$4


	)

820 
	#r5
 
$5


	)

821 
	#r6
 
$6


	)

822 
	#r7
 
$7


	)

823 
	#r8
 
$8


	)

824 
	#r9
 
$9


	)

825 
	#r10
 
$10


	)

826 
	#r11
 
$11


	)

827 
	#r12
 
$12


	)

828 
	#r13
 
$13


	)

829 
	#r14
 
$14


	)

830 
	#r15
 
$15


	)

831 
	#r16
 
$16


	)

832 
	#r17
 
$17


	)

833 
	#r18
 
$18


	)

834 
	#r19
 
$19


	)

835 
	#r20
 
$20


	)

836 
	#r21
 
$21


	)

837 
	#r22
 
$22


	)

838 
	#r23
 
$23


	)

839 
	#r24
 
$24


	)

840 #ifde‡
MIPSAVPENV


841 
	#r25
 
r25_unknown


	)

842 
	#r26
 
r26_unknown


	)

843 
	#r27
 
r27_unknown


	)

845 
	#r25
 
$25


	)

846 
	#r26
 
$26


	)

847 
	#r27
 
$27


	)

849 
	#r28
 
$28


	)

850 
	#r29
 
$29


	)

851 #ifde‡
MIPSAVPENV


852 
	#r30
 
r30_unknown


	)

854 
	#r30
 
$30


	)

856 
	#r31
 
$31


	)

869 
	#R_r0
 0

	)

870 
	#R_r1
 1

	)

871 
	#R_r2
 2

	)

872 
	#R_r3
 3

	)

873 
	#R_r4
 4

	)

874 
	#R_r5
 5

	)

875 
	#R_r6
 6

	)

876 
	#R_r7
 7

	)

877 
	#R_r8
 8

	)

878 
	#R_r9
 9

	)

879 
	#R_r10
 10

	)

880 
	#R_r11
 11

	)

881 
	#R_r12
 12

	)

882 
	#R_r13
 13

	)

883 
	#R_r14
 14

	)

884 
	#R_r15
 15

	)

885 
	#R_r16
 16

	)

886 
	#R_r17
 17

	)

887 
	#R_r18
 18

	)

888 
	#R_r19
 19

	)

889 
	#R_r20
 20

	)

890 
	#R_r21
 21

	)

891 
	#R_r22
 22

	)

892 
	#R_r23
 23

	)

893 
	#R_r24
 24

	)

894 
	#R_r25
 25

	)

895 
	#R_r26
 26

	)

896 
	#R_r27
 27

	)

897 
	#R_r28
 28

	)

898 
	#R_r29
 29

	)

899 
	#R_r30
 30

	)

900 
	#R_r31
 31

	)

912 
	#R_zîo
 0

	)

913 
	#R_AT
 1

	)

914 
	#R_v0
 2

	)

915 
	#R_v1
 3

	)

916 
	#R_a0
 4

	)

917 
	#R_a1
 5

	)

918 
	#R_a2
 6

	)

919 
	#R_a3
 7

	)

920 
	#R_t0
 8

	)

921 
	#R_t1
 9

	)

922 
	#R_t2
 10

	)

923 
	#R_t3
 11

	)

924 
	#R_t4
 12

	)

925 
	#R_t5
 13

	)

926 
	#R_t6
 14

	)

927 
	#R_t7
 15

	)

928 
	#R_s0
 16

	)

929 
	#R_s1
 17

	)

930 
	#R_s2
 18

	)

931 
	#R_s3
 19

	)

932 
	#R_s4
 20

	)

933 
	#R_s5
 21

	)

934 
	#R_s6
 22

	)

935 
	#R_s7
 23

	)

936 
	#R_t8
 24

	)

937 
	#R_t9
 25

	)

938 
	#R_ªpc
 25

	)

939 
	#R_k0
 26

	)

940 
	#R_k1
 27

	)

941 
	#R_gp
 28

	)

942 
	#R_•
 29

	)

943 
	#R_Â
 30

	)

944 
	#R_s8
 30

	)

945 
	#R_tid
 30

	)

946 
	#R_ø
 31

	)

947 
	#R_hi
 32

	)

948 
	#R_lo
 33

	)

959 
	#M_AT
 (1<<1)

	)

960 
	#M_v0
 (1<<2)

	)

961 
	#M_v1
 (1<<3)

	)

962 
	#M_a0
 (1<<4)

	)

963 
	#M_a1
 (1<<5)

	)

964 
	#M_a2
 (1<<6)

	)

965 
	#M_a3
 (1<<7)

	)

966 
	#M_t0
 (1<<8)

	)

967 
	#M_t1
 (1<<9)

	)

968 
	#M_t2
 (1<<10)

	)

969 
	#M_t3
 (1<<11)

	)

970 
	#M_t4
 (1<<12)

	)

971 
	#M_t5
 (1<<13)

	)

972 
	#M_t6
 (1<<14)

	)

973 
	#M_t7
 (1<<15)

	)

974 
	#M_s0
 (1<<16)

	)

975 
	#M_s1
 (1<<17)

	)

976 
	#M_s2
 (1<<18)

	)

977 
	#M_s3
 (1<<19)

	)

978 
	#M_s4
 (1<<20)

	)

979 
	#M_s5
 (1<<21)

	)

980 
	#M_s6
 (1<<22)

	)

981 
	#M_s7
 (1<<23)

	)

982 
	#M_t8
 (1<<24)

	)

983 
	#M_t9
 (1<<25)

	)

984 
	#M_k0
 (1<<26)

	)

985 
	#M_k1
 (1<<27)

	)

986 
	#M_gp
 (1<<28)

	)

987 
	#M_•
 (1<<29)

	)

988 
	#M_Â
 (1<<30)

	)

989 
	#M_ø
 (1<<31)

	)

997 
	#A_ac0
 0

	)

998 
	#A_ac1
 1

	)

999 
	#A_ac2
 2

	)

1000 
	#A_ac3
 3

	)

1011 
	#R_ac0_lo
 0

	)

1012 
	#R_ac0_hi
 1

	)

1013 
	#R_ac1_lo
 2

	)

1014 
	#R_ac1_hi
 3

	)

1015 
	#R_ac2_lo
 4

	)

1016 
	#R_ac2_hi
 5

	)

1017 
	#R_ac3_lo
 6

	)

1018 
	#R_ac3_hi
 7

	)

1058 
	#C0_Index
 
$0


	)

1059 
	#R_C0_Index
 0

	)

1060 
	#R_C0_SñIndex
 0

	)

1061 
	#C0_INX
 
C0_Index


	)

1063 
	#S_IndexP
 31

	)

1064 
	#M_IndexP
 (0x1 << 
S_IndexP
)

	)

1066 
	#S_IndexIndex
 0

	)

1067 
	#M_IndexIndex
 (0x3‡<< 
S_IndexIndex
)

	)

1069 
	#M_Index0Fõlds
 0x7fffffc0

	)

1070 
	#M_IndexRFõlds
 0x80000000

	)

1085 
	#C0_R™dom
 
$1


	)

1086 
	#R_C0_R™dom
 1

	)

1087 
	#R_C0_SñR™dom
 0

	)

1088 
	#C0_RAND
 
$1


	)

1090 
	#S_R™domIndex
 0

	)

1091 
	#M_R™domIndex
 (0x3‡<< 
S_R™domIndex
)

	)

1093 
	#M_R™dom0Fõlds
 0xffffffc0

	)

1094 
	#M_R™domRFõlds
 0x0000003f

	)

1110 
	#C0_E¡ryLo0
 
$2


	)

1111 
	#R_C0_E¡ryLo0
 2

	)

1112 
	#R_C0_SñE¡ryLo0
 0

	)

1113 
	#C0_TLBLO_0
 
C0_E¡ryLo0


	)

1119 
	#S_E¡ryLoRI
 31

	)

1120 
	#M_E¡ryLoRI
 (0x1 << 
S_E¡ryLoRI
)

	)

1121 
	#S_E¡ryLoXI
 30

	)

1122 
	#M_E¡ryLoXI
 (0x1 << 
S_E¡ryLoXI
)

	)

1124 
	#S_E¡ryLoPFN
 6

	)

1125 
	#M_E¡ryLoPFN
 (0xfffff‡<< 
S_E¡ryLoPFN
)

	)

1126 
	#S_E¡ryLoC
 3

	)

1127 
	#M_E¡ryLoC
 (0x7 << 
S_E¡ryLoC
)

	)

1128 
	#S_E¡ryLoD
 2

	)

1129 
	#M_E¡ryLoD
 (0x1 << 
S_E¡ryLoD
)

	)

1130 
	#S_E¡ryLoV
 1

	)

1131 
	#M_E¡ryLoV
 (0x1 << 
S_E¡ryLoV
)

	)

1132 
	#S_E¡ryLoG
 0

	)

1133 
	#M_E¡ryLoG
 (0x1 << 
S_E¡ryLoG
)

	)

1134 
	#M_E¡ryLoOddPFN
 (0x1 << 
S_E¡ryLoPFN
Ë

	)

1135 
	#S_E¡ryLo_RS
 
K_PageAlign


	)

1137 #i‚de‡
MIPS_Sm¨tMIPS_ASE


1138 
	#S_E¡ryLo_LS
 (12 - 
S_E¡ryLoPFN
)

	)

1140 
	#S_E¡ryLo_LS
 ((12 - 
S_E¡ryLoPFN
Ë- (12 - 
C0_PageGøöMSO√
))

	)

1143 
	#M_E¡ryLo0Fõlds
 0x00000000

	)

1144 
	#M_E¡ryLo0Fõlds64
 
	`UINT64_C
(0x0000000000000000)

	)

1145 #ifde‡
MIPS_Sm¨tMIPS_ASE


1146 
	#M_E¡ryLoRFõlds
 0x00000000

	)

1147 
	#M_E¡ryLoRFõlds64
 
	`UINT64_C
(0xffffffff00000000)

	)

1149 
	#M_E¡ryLoRFõlds
 0xc0000000

	)

1150 
	#M_E¡ryLoRFõlds64
 
	`UINT64_C
(0xffffffffc0000000)

	)

1157 
	#K_CacheAârCWTnWA
 0

	)

1158 
	#K_CacheAârCWTWA
 1

	)

1159 
	#K_CacheAârU
 2

	)

1160 
	#K_CacheAârC
 3

	)

1161 
	#K_CacheAârCN
 3

	)

1162 
	#K_CacheAârCCE
 4

	)

1163 
	#K_CacheAârCCS
 5

	)

1164 
	#K_CacheAârCCU
 6

	)

1165 
	#K_CacheAârUA
 7

	)

1167 
	#S_E¡ryLo0PFN
 
S_E¡ryLoPFN


	)

1168 
	#M_E¡ryLo0PFN
 
M_E¡ryLoPFN


	)

1182 
	#C0_E¡ryLo1
 
$3


	)

1183 
	#R_C0_E¡ryLo1
 3

	)

1184 
	#R_C0_SñE¡ryLo1
 0

	)

1185 
	#C0_TLBLO_1
 
C0_E¡ryLo1


	)

1204 
	#C0_C⁄ãxt
 
$4


	)

1205 
	#R_C0_C⁄ãxt
 4

	)

1206 
	#R_C0_SñC⁄ãxt
 0

	)

1207 
	#C0_CTXT
 
C0_C⁄ãxt


	)

1209 #i‚de‡
MIPS_Sm¨tMIPS_ASE


1210 
	#S_C⁄ãxtPTEBa£
 23

	)

1211 
	#S_C⁄ãxtBadVPN
 4

	)

1223 
	#S_C⁄ãxtPTEBa£
 (
C0_C⁄ãxtC⁄figMSO√
 + 1)

	)

1225 
	#S_C⁄ãxtBadVPN
 (
C0_C⁄ãxtC⁄figLSO√
)

	)

1234 
	#M_C⁄ãxt0Fõlds
 ((1 << 
S_C⁄ãxtBadVPN
Ë- 1)

	)

1235 
	#M_C⁄ãxtRFõlds
 (((1 << 
S_C⁄ãxtPTEBa£
) - 1) & \

1236 ~(
M_C⁄ãxt0Fõlds
))

	)

1237 
	#M_C⁄ãxt0Fõlds64
 ((
	`UINT64_C
(1Ë<< 
S_C⁄ãxtBadVPN
Ë- 1)

	)

1238 
	#M_C⁄ãxtRFõlds64
 (((
	`UINT64_C
(1Ë<< 
S_C⁄ãxtPTEBa£
) - 1) & \

1239 ~(
M_C⁄ãxt0Fõlds
))

	)

1240 
	#M_C⁄ãxtPTEBa£
 (((1 << 
S_C⁄ãxtBadVPN_LS
) - 1) << \

1241 (
S_C⁄ãxtPTEBa£
))

	)

1242 
	#M_C⁄ãxtBadVPN
 (((1 << (
S_C⁄ãxtPTEBa£
 - 
S_C⁄ãxtBadVPN
)) - 1) << \

1243 (
S_C⁄ãxtBadVPN
))

	)

1245 
	#S_C⁄ãxtBadVPN_LS
 (32 - 
S_C⁄ãxtPTEBa£
)

	)

1247 
	#S_C⁄ãxtBadVPN_RS
 (32 - (
S_C⁄ãxtPTEBa£
 - 
S_C⁄ãxtBadVPN
))

	)

1249 #i‡
deföed
(
MIPS_Sm¨tMIPS_ASE
Ë|| deföed(
MIPS_Rñó£2
)

1270 
	#C0_C⁄ãxtC⁄fig
 
$4
,1

	)

1271 
	#R_C0_C⁄ãxtC⁄fig
 4

	)

1272 
	#R_C0_SñC⁄ãxtC⁄fig
 1

	)

1286 #i‚de‡
C0_C⁄ãxtC⁄figMSO√


1287 
	#C0_C⁄ãxtC⁄figMSO√
 22

	)

1290 #i‚de‡
C0_C⁄ãxtC⁄figLSO√


1291 
	#C0_C⁄ãxtC⁄figLSO√
 4

	)

1309 
	#C0_U£rLoˇl
 
$4
,2

	)

1310 
	#R_C0_U£rLoˇl
 4

	)

1311 
	#R_C0_SñU£rLoˇl
 2

	)

1325 
	#C0_PageMask
 
$5


	)

1326 
	#R_C0_PageMask
 5

	)

1327 
	#R_C0_SñPageMask
 0

	)

1328 
	#C0_PGMASK
 
C0_PageMask


	)

1330 #i‚de‡
MIPS_Sm¨tMIPS_ASE


1332 
	#S_PageMaskMask
 13

	)

1333 
	#M_PageMaskMask
 (0xfff‡<< 
S_PageMaskMask
)

	)

1334 
	#S_PageMaskMaskX
 11

	)

1335 
	#M_PageMaskMaskX
 (0x3 << 
S_PageMaskMaskX
)

	)

1337 
	#M_PageMask0Fõlds
 0xe0001fff

	)

1338 
	#M_PageMaskRFõlds
 0x00000000

	)

1343 
	#K_PageMask4K
 0x0000

	)

1344 
	#K_PageMask16K
 0x0003

	)

1345 
	#K_PageMask64K
 0x000f

	)

1346 
	#K_PageMask256K
 0x003f

	)

1347 
	#K_PageMask1M
 0x00ff

	)

1348 
	#K_PageMask4M
 0x03ff

	)

1349 
	#K_PageMask16M
 0x0fff

	)

1350 
	#K_PageMask64M
 0x3fff

	)

1351 
	#K_PageMask256M
 0xffff

	)

1362 
	#S_PageMaskMask
 (
C0_PageGøöMSO√
 + 1)

	)

1363 
	#M_PageMaskMask
 (((0x1 << (12 + (12 - 
C0_PageGøöMSO√
))) - 1) << \

1364 (
S_PageMaskMask
))

	)

1366 
	#M_PageMask0Fõlds
 (0xfe0007ff | \

1367 (
C0_PageGøöVÆue
 & 
M_PageGøöMask
))

	)

1368 
	#M_PageMaskRFõlds
 0x00000000

	)

1374 
	#K_PageMask1K
 ((0x1 << (10 - 
C0_PageGøöMSO√
)Ë- 1)

	)

1375 
	#M_PageMask1K
 (
K_PageMask1K
 << 
S_PageMaskMask
)

	)

1381 
	#K_PageMask2K
 ((0x1 << (11 - 
C0_PageGøöMSO√
)Ë- 1)

	)

1382 
	#M_PageMask2K
 (
K_PageMask2K
 << 
S_PageMaskMask
)

	)

1388 
	#K_PageMask4K
 ((0x1 << (12 - 
C0_PageGøöMSO√
)Ë- 1)

	)

1389 
	#K_PageMask16K
 ((0x1 << (14 - 
C0_PageGøöMSO√
)Ë- 1)

	)

1390 
	#K_PageMask64K
 ((0x1 << (16 - 
C0_PageGøöMSO√
)Ë- 1)

	)

1391 
	#K_PageMask256K
 ((0x1 << (18 - 
C0_PageGøöMSO√
)Ë- 1)

	)

1392 
	#K_PageMask1M
 ((0x1 << (20 - 
C0_PageGøöMSO√
)Ë- 1)

	)

1393 
	#K_PageMask4M
 ((0x1 << (22 - 
C0_PageGøöMSO√
)Ë- 1)

	)

1394 
	#K_PageMask16M
 ((0x1 << (24 - 
C0_PageGøöMSO√
)Ë- 1)

	)

1395 
	#K_PageMask64M
 ((0x1 << (26 - 
C0_PageGøöMSO√
)Ë- 1)

	)

1396 
	#K_PageMask256M
 ((0x1 << (28 - 
C0_PageGøöMSO√
)Ë- 1)

	)

1400 
	#M_PageMask4K
 (
K_PageMask4K
 << 
S_PageMaskMask
Ë

	)

1401 
	#M_PageMask16K
 (
K_PageMask16K
 << 
S_PageMaskMask
Ë

	)

1402 
	#M_PageMask64K
 (
K_PageMask64K
 << 
S_PageMaskMask
)

	)

1403 
	#M_PageMask256K
 (
K_PageMask256K
 << 
S_PageMaskMask
)

	)

1404 
	#M_PageMask1M
 (
K_PageMask1M
 << 
S_PageMaskMask
)

	)

1405 
	#M_PageMask4M
 (
K_PageMask4M
 << 
S_PageMaskMask
)

	)

1406 
	#M_PageMask16M
 (
K_PageMask16M
 << 
S_PageMaskMask
)

	)

1407 
	#M_PageMask64M
 (
K_PageMask64M
 << 
S_PageMaskMask
)

	)

1408 
	#M_PageMask256M
 (
K_PageMask256M
 << 
S_PageMaskMask
)

	)

1411 
	#S_PAGE1K
 10

	)

1412 
	#S_PAGE2K
 11

	)

1413 
	#S_PAGE4K
 12

	)

1414 
	#S_PAGE16K
 14

	)

1415 
	#S_PAGE64K
 16

	)

1416 
	#S_PAGE256K
 18

	)

1417 
	#S_PAGE1M
 20

	)

1418 
	#S_PAGE4M
 22

	)

1419 
	#S_PAGE16M
 24

	)

1420 
	#S_PAGE64M
 26

	)

1421 
	#S_PAGE256M
 28

	)

1423 
	#S_PageMask1K
 (
S_PAGE1K
 + 1)

	)

1424 
	#S_PageMask2K
 (
S_PAGE2K
 + 1)

	)

1425 
	#S_PageMask4K
 (
S_PAGE4K
 + 1)

	)

1426 
	#S_PageMask16K
 (
S_PAGE16K
 + 1)

	)

1427 
	#S_PageMask64K
 (
S_PAGE64K
 + 1)

	)

1428 
	#S_PageMask256K
 (
S_PAGE256K
 + 1)

	)

1429 
	#S_PageMask1M
 (
S_PAGE1M
 + 1)

	)

1430 
	#S_PageMask4M
 (
S_PAGE4M
 + 1)

	)

1431 
	#S_PageMask16M
 (
S_PAGE16M
 + 1)

	)

1432 
	#S_PageMask64M
 (
S_PAGE64M
 + 1)

	)

1433 
	#S_PageMask256M
 (
S_PAGE256M
 + 1)

	)

1435 
	#K_1KPAGEMASK
 (0x00000)

	)

1436 
	#K_2KPAGEMASK
 (0x00800)

	)

1437 
	#K_4KPAGEMASK
 (0x01800)

	)

1438 
	#K_16KPAGEMASK
 (0x07800)

	)

1439 
	#K_64KPAGEMASK
 (0x1f800)

	)

1440 
	#K_256KPAGEMASK
 (0x7f800)

	)

1441 
	#K_1MPAGEMASK
 (0x1ff800)

	)

1442 
	#K_4MPAGEMASK
 (0x7ff800)

	)

1443 
	#K_16MPAGEMASK
 (0x1fff800)

	)

1444 
	#K_64MPAGEMASK
 (0x7fff800)

	)

1445 
	#K_256MPAGEMASK
 (0x1ffff800)

	)

1448 #i‡
deföed
(
MIPS_Sm¨tMIPS_ASE
Ë|| deföed(
MIPS_Rñó£2
)

1470 
	#C0_PageGøö
 
$5
,1

	)

1471 
	#R_C0_PageGøö
 5

	)

1472 
	#R_C0_SñPageGøö
 1

	)

1474 
	#S_PageGøöO√s
 8

	)

1475 
	#M_PageGøöO√s
 (0x7 << 
S_PageGøöO√s
)

	)

1477 
	#S_PageGøöMask
 11

	)

1478 
	#M_PageGøöMask
 (0x3 << 
S_PageGøöMask
)

	)

1485 
	#S_PageGøöRIE
 31

	)

1486 
	#M_PageGøöRIE
 (0x1 << 
S_PageGøöRIE
)

	)

1487 
	#S_PageGøöXIE
 30

	)

1488 
	#M_PageGøöXIE
 (0x1 << 
S_PageGøöXIE
)

	)

1490 
	#S_PageGøöELPA
 29

	)

1491 
	#M_PageGøöELPA
 (0x1 << 
S_PageGøöELPA
)

	)

1492 
	#S_PageGøöESP
 28

	)

1493 
	#M_PageGøöESP
 (0x1 << 
S_PageGøöESP
)

	)

1495 #i‡
deföed
(
MIPS_Sm¨tMIPS_ASE
Ë&& deföed(
MIPS_Rñó£2
)

1496 
	#M_PageGøö0Fõlds
 0x0ff„0ff

	)

1497 
	#M_PageGøöRFõlds
 0x00000700

	)

1499 #i‡
deföed
(
MIPS_Rñó£2
)

1500 
	#M_PageGøö0Fõlds
 0xcfffffff

	)

1501 
	#M_PageGøöRFõlds
 0x00000000

	)

1503 
	#M_PageGøö0Fõlds
 0x3ff„0ff

	)

1504 
	#M_PageGøöRFõlds
 0x00000700

	)

1517 #i‚de‡
C0_PageGøöMSO√


1518 
	#C0_PageGøöMSO√
 12

	)

1521 
	#C0_PageGøöVÆue
 ((((0x1 << (
C0_PageGøöMSO√
 - 
S_PageGøöMask
 + 1)) - 1) << \

1522 (
S_PageGøöMask
)Ë| 
M_PageGøöO√s
)

	)

1538 
	#C0_Wúed
 
$6


	)

1539 
	#R_C0_Wúed
 6

	)

1540 
	#R_C0_SñWúed
 0

	)

1541 
	#C0_TLBWIRED
 
C0_Wúed


	)

1543 
	#S_WúedIndex
 0

	)

1544 
	#M_WúedIndex
 (0x3‡<< 
S_WúedIndex
)

	)

1546 
	#M_Wúed0Fõlds
 0xffffffc0

	)

1547 
	#M_WúedRFõlds
 0x00000000

	)

1550 #ifde‡
MIPS_Rñó£2


1572 
	#C0_HWRE«
 
$7


	)

1573 
	#R_C0_HWRE«
 7

	)

1574 
	#R_C0_SñHWRE«
 0

	)

1575 
	#S_HWRE«Mask
 0

	)

1576 
	#M_HWRE«Mask
 (0xF << 
S_HWRE«Mask
)

	)

1582 
	#S_HWRE«Mask
 0

	)

1583 
	#M_HWRE«Mask
 (0xF << 
S_HWRE«Mask
)

	)

1589 
	#S_HWRE«Mask_CPUNum
 0

	)

1590 
	#M_HWRE«Mask_CPUNum
 (1 << 
S_HWRE«Mask_CPUNum
)

	)

1591 
	#S_HWRE«Mask_SYNCI_Sãp
 1

	)

1592 
	#M_HWRE«Mask_SYNCI_Sãp
 (1 << 
S_HWRE«Mask_SYNCI_Sãp
)

	)

1593 
	#S_HWRE«Mask_Cy˛eCou¡
 2

	)

1594 
	#M_HWRE«Mask_Cy˛eCou¡
 (1 << 
S_HWRE«Mask_Cy˛eCou¡
)

	)

1595 
	#S_HWRE«Mask_CC
 2

	)

1596 
	#M_HWRE«Mask_CC
 (1 << 
S_HWRE«Mask_CC
)

	)

1597 
	#S_HWRE«Mask_CCRes
 3

	)

1598 
	#M_HWRE«Mask_CCRes
 (1 << 
S_HWRE«Mask_CCRes
)

	)

1599 
	#S_HWRE«Mask_U£rLoˇl
 29

	)

1600 
	#M_HWRE«Mask_U£rLoˇl
 (1 << 
S_HWRE«Mask_U£rLoˇl
)

	)

1602 
	#HWR_CPUNum
 
$0


	)

1603 
	#R_HWR_CPUNum
 
S_HWRE«Mask_CPUNum


	)

1604 
	#HWR_SYNCI_Sãp
 
$1


	)

1605 
	#R_HWR_SYNCI_Sãp
 
S_HWRE«Mask_SYNCI_Sãp


	)

1606 
	#HWR_Cy˛eCou¡
 
$2


	)

1607 
	#R_HWR_Cy˛eCou¡
 
S_HWRE«Mask_Cy˛eCou¡


	)

1608 
	#HWR_CC
 
$2


	)

1609 
	#R_HWR_CC
 
S_HWRE«Mask_CC


	)

1610 
	#HWR_CCRes
 
$3


	)

1611 
	#R_HWR_CCRes
 
S_HWRE«Mask_CCRes


	)

1612 
	#HWR_U£rLoˇl
 
$29


	)

1613 
	#R_HWR_U£rLoˇl
 
S_HWRE«Mask_U£rLoˇl


	)

1615 
	#M_HWRE«0Fõlds
 0x1ffffff0

	)

1616 
	#M_HWRE«RFõlds
 0x00000000

	)

1633 
	#C0_BadVAddr
 
$8


	)

1634 
	#R_C0_BadVAddr
 8

	)

1635 
	#R_C0_SñBadVAddr
 0

	)

1636 
	#C0_BADVADDR
 
C0_BadVAddr


	)

1638 
	#M_BadVAddrOddPage
 
K_PageSize


	)

1640 
	#M_BadVAddr0Fõlds
 0x00000000

	)

1641 
	#M_BadVAddrRFõlds
 0xffffffff

	)

1642 
	#M_BadVAddr0Fõlds64
 
	`UINT64_C
(0x0000000000000000)

	)

1643 
	#M_BadVAddrRFõlds64
 
	`UINT64_C
(0xffffffffffffffff)

	)

1657 
	#C0_Cou¡
 
$9


	)

1658 
	#R_C0_Cou¡
 9

	)

1659 
	#R_C0_SñCou¡
 0

	)

1660 
	#C0_COUNT
 
C0_Cou¡


	)

1662 
	#M_Cou¡0Fõlds
 0x00000000

	)

1663 
	#M_Cou¡RFõlds
 0x00000000

	)

1678 
	#C0_E¡ryHi
 
$10


	)

1679 
	#R_C0_E¡ryHi
 10

	)

1680 
	#R_C0_SñE¡ryHi
 0

	)

1681 
	#C0_TLBHI
 
C0_E¡ryHi


	)

1683 
	#S_E¡ryHiR64
 62

	)

1684 
	#M_E¡ryHiR64
 
	`UINT64_C
(0xc000000000000000)

	)

1686 #i‚de‡
MIPS_Sm¨tMIPS_ASE


1688 
	#S_E¡ryHiVPN2
 13

	)

1689 
	#M_E¡ryHiVPN2
 (0x7fff‡<< 
S_E¡ryHiVPN2
)

	)

1690 
	#M_E¡ryHiVPN264
 
	`UINT64_C
(0x000000fffff„000)

	)

1692 #ifde‡
MIPS_Rñó£2


1694 
	#S_E¡ryHiVPN2X
 11

	)

1695 
	#M_E¡ryHiVPN2X
 (0x3 << 
S_E¡ryHiVPN2X
)

	)

1697 
	#M_E¡ryHi0Fõlds
 0x00000700

	)

1698 
	#M_E¡ryHiRFõlds
 0x00000000

	)

1699 
	#M_E¡ryHi0Fõlds64
 
	`UINT64_C
(0x0000000000000700)

	)

1703 
	#M_E¡ryHi0Fõlds
 0x00001f00

	)

1704 
	#M_E¡ryHiRFõlds
 0x00000000

	)

1705 
	#M_E¡ryHi0Fõlds64
 
	`UINT64_C
(0x0000000000001f00)

	)

1711 
	#S_E¡ryHiVPN2
 (
C0_PageGøöMSO√
 + 1)

	)

1712 
	#M_E¡ryHiVPN2
 (((0x1 << (19 + (12 - 
C0_PageGøöMSO√
)))-1) << \

1713 (
S_E¡ryHiVPN2
))

	)

1714 
	#M_E¡ryHiVPN264
 (((
	`UINT64_C
(0x1Ë<< (27 + (12 - 
C0_PageGøöMSO√
)))-1) << \

1715 (
S_E¡ryHiVPN2
))

	)

1717 
	#M_E¡ryHi0Fõlds
 (0x00000700 | (
C0_PageGøöVÆue
 & 
M_PageGøöMask
))

	)

1718 
	#M_E¡ryHiRFõlds
 0x00000000

	)

1720 
	#M_E¡ryHi0Fõlds64
 (
	`UINT64_C
(0x0000000000001f00) | \

1721 (
C0_PageGøöVÆue
 & 
M_PageGøöMask
))

	)

1725 
	#M_E¡ryHiRFõlds64
 
	`UINT64_C
(0x3fffff0000000000)

	)

1726 
	#S_E¡ryHiASID
 0

	)

1727 
	#M_E¡ryHiASID
 (0xf‡<< 
S_E¡ryHiASID
)

	)

1728 
	#W_E¡ryHiASID
 8

	)

1729 
	#S_E¡ryHiVPN_Shf
 
S_E¡ryHiVPN2


	)

1743 
	#C0_Com∑ª
 
$11


	)

1744 
	#R_C0_Com∑ª
 11

	)

1745 
	#R_C0_SñCom∑ª
 0

	)

1746 
	#C0_COMPARE
 
C0_Com∑ª


	)

1748 
	#M_Com∑ª0Fõlds
 0x00000000

	)

1749 
	#M_Com∑ªRFõlds
 0x00000000

	)

1766 
	#C0_Sètus
 
$12


	)

1767 
	#R_C0_Sètus
 12

	)

1768 
	#R_C0_SñSètus
 0

	)

1769 
	#C0_SR
 
C0_Sètus


	)

1771 
	#S_SètusCU
 28

	)

1772 
	#M_SètusCU
 (0x‡<< 
S_SètusCU
)

	)

1773 
	#S_SètusCU3
 31

	)

1774 
	#M_SètusCU3
 (0x1 << 
S_SètusCU3
)

	)

1775 
	#S_SètusCU2
 30

	)

1776 
	#M_SètusCU2
 (0x1 << 
S_SètusCU2
)

	)

1777 
	#S_SètusCU1
 29

	)

1778 
	#M_SètusCU1
 (0x1 << 
S_SètusCU1
)

	)

1779 
	#S_SètusCU0
 28

	)

1780 
	#M_SètusCU0
 (0x1 << 
S_SètusCU0
)

	)

1781 
	#S_SètusRP
 27

	)

1782 
	#M_SètusRP
 (0x1 << 
S_SètusRP
)

	)

1783 
	#S_SètusFR
 26

	)

1784 
	#M_SètusFR
 (0x1 << 
S_SètusFR
)

	)

1785 
	#S_SètusRE
 25

	)

1786 
	#M_SètusRE
 (0x1 << 
S_SètusRE
)

	)

1787 
	#S_SètusMX
 24

	)

1788 
	#M_SètusMX
 (0x1 << 
S_SètusMX
)

	)

1789 
	#S_SètusPX
 23

	)

1790 
	#M_SètusPX
 (0x1 << 
S_SètusPX
)

	)

1791 
	#S_SètusBEV
 22

	)

1792 
	#M_SètusBEV
 (0x1 << 
S_SètusBEV
)

	)

1793 
	#S_SètusTS
 21

	)

1794 
	#M_SètusTS
 (0x1 << 
S_SètusTS
)

	)

1795 
	#S_SètusSR
 20

	)

1796 
	#M_SètusSR
 (0x1 << 
S_SètusSR
)

	)

1797 
	#S_SètusNMI
 19

	)

1798 
	#M_SètusNMI
 (0x1 << 
S_SètusNMI
Ë

	)

1799 
	#S_SètusIm∂
 16

	)

1800 
	#M_SètusIm∂
 (0x3 << 
S_SètusIm∂
)

	)

1801 
	#S_SètusIM
 8

	)

1802 
	#M_SètusIM
 (0xf‡<< 
S_SètusIM
)

	)

1803 
	#W_SètusIM
 8

	)

1804 
	#S_SètusIM7
 15

	)

1805 
	#M_SètusIM7
 (0x1 << 
S_SètusIM7
)

	)

1806 
	#S_SètusIM6
 14

	)

1807 
	#M_SètusIM6
 (0x1 << 
S_SètusIM6
)

	)

1808 
	#S_SètusIM5
 13

	)

1809 
	#M_SètusIM5
 (0x1 << 
S_SètusIM5
)

	)

1810 
	#S_SètusIM4
 12

	)

1811 
	#M_SètusIM4
 (0x1 << 
S_SètusIM4
)

	)

1812 
	#S_SètusIM3
 11

	)

1813 
	#M_SètusIM3
 (0x1 << 
S_SètusIM3
)

	)

1814 
	#S_SètusIM2
 10

	)

1815 
	#M_SètusIM2
 (0x1 << 
S_SètusIM2
)

	)

1816 
	#S_SètusIM1
 9

	)

1817 
	#M_SètusIM1
 (0x1 << 
S_SètusIM1
)

	)

1818 
	#S_SètusIM0
 8

	)

1819 
	#M_SètusIM0
 (0x1 << 
S_SètusIM0
)

	)

1820 
	#S_SètusIPL
 10

	)

1821 
	#M_SètusIPL
 (0x3‡<< 
S_SètusIPL
)

	)

1822 
	#S_SètusKX
 7

	)

1823 
	#M_SètusKX
 (0x1 << 
S_SètusKX
)

	)

1824 
	#S_SètusSX
 6

	)

1825 
	#M_SètusSX
 (0x1 << 
S_SètusSX
)

	)

1826 
	#S_SètusUX
 5

	)

1827 
	#M_SètusUX
 (0x1 << 
S_SètusUX
)

	)

1828 
	#S_SètusKSU
 3

	)

1829 
	#M_SètusKSU
 (0x3 << 
S_SètusKSU
)

	)

1830 
	#W_SètusKSU
 2

	)

1831 
	#S_SètusUM
 4

	)

1832 
	#M_SètusUM
 (0x1 << 
S_SètusUM
)

	)

1833 
	#S_SètusSM
 3

	)

1834 
	#M_SètusSM
 (0x1 << 
S_SètusSM
)

	)

1835 
	#S_SètusERL
 2

	)

1836 
	#M_SètusERL
 (0x1 << 
S_SètusERL
)

	)

1837 
	#S_SètusEXL
 1

	)

1838 
	#M_SètusEXL
 (0x1 << 
S_SètusEXL
)

	)

1839 
	#S_SètusIE
 0

	)

1840 
	#M_SètusIE
 (0x1 << 
S_SètusIE
)

	)

1842 #ifde‡
MIPS_Rñó£2


1843 
	#M_Sètus0Fõlds
 0x00040000

	)

1844 
	#M_SètusRFõlds
 0x008000e0

	)

1846 
	#M_Sètus0Fõlds
 0x00040000

	)

1847 
	#M_SètusRFõlds
 0x058000e0

	)

1849 
	#M_Sètus0Fõlds64
 0x00040000

	)

1850 
	#M_SètusRFõlds64
 0x00000000

	)

1855 
	#K_SètusKSU_U
 2

	)

1856 
	#K_SètusKSU_S
 1

	)

1857 
	#K_SètusKSU_K
 0

	)

1860 #ifde‡
MIPS_Rñó£2


1877 
	#C0_I¡Cé
 
$12
,1

	)

1878 
	#R_C0_I¡Cé
 12

	)

1879 
	#R_C0_SñI¡Cé
 1

	)

1881 
	#S_I¡CéIPTI
 29

	)

1882 
	#M_I¡CéIPTI
 (0x7 << 
S_I¡CéIPTI
)

	)

1883 
	#W_I¡CéIPTI
 3

	)

1884 
	#S_I¡CéIPPCI
 26

	)

1885 
	#M_I¡CéIPPCI
 (0x7 << 
S_I¡CéIPPCI
)

	)

1886 
	#W_I¡CéIPPCI
 3

	)

1887 
	#S_I¡CéVS
 5

	)

1888 
	#M_I¡CéVS
 (0x1‡<< 
S_I¡CéVS
)

	)

1889 
	#W_I¡CéVS
 5

	)

1891 
	#M_I¡Cé0Fõlds
 0x03fffc1f

	)

1892 
	#M_I¡CéRFõlds
 0xfc000000

	)

1898 
	#K_I¡CéVS0
 0x00

	)

1899 
	#K_I¡CéVS32
 0x01

	)

1900 
	#K_I¡CéVS64
 0x02

	)

1901 
	#K_I¡CéVS128
 0x04

	)

1902 
	#K_I¡CéVS256
 0x08

	)

1903 
	#K_I¡CéVS512
 0x10

	)

1919 
	#C0_SRSCé
 
$12
,2

	)

1920 
	#R_C0_SRSCé
 12

	)

1921 
	#R_C0_SñSRSCé
 2

	)

1923 
	#S_SRSCéHSS
 26

	)

1924 
	#W_SRSCéHSS
 4

	)

1925 
	#M_SRSCéHSS
 (0x‡<< 
S_SRSCéHSS
)

	)

1926 
	#S_SRSCéEICSS
 18

	)

1927 
	#W_SRSCéEICSS
 4

	)

1928 
	#M_SRSCéEICSS
 (0x‡<< 
S_SRSCéEICSS
)

	)

1929 
	#S_SRSCéESS
 12

	)

1930 
	#W_SRSCéESS
 4

	)

1931 
	#M_SRSCéESS
 (0x‡<< 
S_SRSCéESS
)

	)

1932 
	#S_SRSCéPSS
 6

	)

1933 
	#W_SRSCéPSS
 4

	)

1934 
	#M_SRSCéPSS
 (0x‡<< 
S_SRSCéPSS
)

	)

1935 
	#S_SRSCéCSS
 0

	)

1936 
	#W_SRSCéCSS
 4

	)

1937 
	#M_SRSCéCSS
 (0x‡<< 
S_SRSCéCSS
Ë

	)

1939 
	#M_SRSCé0Fõlds
 0xc3c30c30

	)

1940 
	#M_SRSCéRFõlds
 0x3c3c000f

	)

1956 
	#C0_SRSM≠
 
$12
, 3

	)

1957 
	#R_C0_SRSM≠
 12

	)

1958 
	#R_C0_SñSRSM≠
 3

	)

1960 
	#S_SRSM≠SSV7
 28

	)

1961 
	#W_SRSM≠SSV7
 4

	)

1962 
	#M_SRSM≠SSV7
 (0x‡<< 
S_SRSM≠SSV7
)

	)

1963 
	#S_SRSM≠SSV6
 24

	)

1964 
	#W_SRSM≠SSV6
 4

	)

1965 
	#M_SRSM≠SSV6
 (0x‡<< 
S_SRSM≠SSV6
)

	)

1966 
	#S_SRSM≠SSV5
 20

	)

1967 
	#W_SRSM≠SSV5
 4

	)

1968 
	#M_SRSM≠SSV5
 (0x‡<< 
S_SRSM≠SSV5
)

	)

1969 
	#S_SRSM≠SSV4
 16

	)

1970 
	#W_SRSM≠SSV4
 4

	)

1971 
	#M_SRSM≠SSV4
 (0x‡<< 
S_SRSM≠SSV4
)

	)

1972 
	#S_SRSM≠SSV3
 12

	)

1973 
	#W_SRSM≠SSV3
 4

	)

1974 
	#M_SRSM≠SSV3
 (0x‡<< 
S_SRSM≠SSV3
)

	)

1975 
	#S_SRSM≠SSV2
 8

	)

1976 
	#W_SRSM≠SSV2
 4

	)

1977 
	#M_SRSM≠SSV2
 (0x‡<< 
S_SRSM≠SSV2
)

	)

1978 
	#S_SRSM≠SSV1
 4

	)

1979 
	#W_SRSM≠SSV1
 4

	)

1980 
	#M_SRSM≠SSV1
 (0x‡<< 
S_SRSM≠SSV1
)

	)

1981 
	#S_SRSM≠SSV0
 0

	)

1982 
	#W_SRSM≠SSV0
 4

	)

1983 
	#M_SRSM≠SSV0
 (0x‡<< 
S_SRSM≠SSV0
)

	)

1986 
	#M_SRSM≠0Fõlds
 0x00000000

	)

1987 
	#M_SRSM≠RFõlds
 0x00000000

	)

2001 
	#C0_SRSHi
 
$12
, 4

	)

2002 
	#R_C0_SRSHi
 12

	)

2003 
	#R_C0_SñSRSHi
 4

	)

2005 
	#S_SRSHiIPL12
 16

	)

2006 
	#W_SRSHiIPL12
 4

	)

2007 
	#M_SRSHiIPL12
 (0x‡<< 
S_SRSHiIPL12
)

	)

2008 
	#S_SRSHiIPL11
 12

	)

2009 
	#W_SRSHiIPL11
 4

	)

2010 
	#M_SRSHiIPL11
 (0x‡<< 
S_SRSHiIPL11
)

	)

2011 
	#S_SRSHiIPL10
 8

	)

2012 
	#W_SRSHiIPL10
 4

	)

2013 
	#M_SRSHiIPL10
 (0x‡<< 
S_SRSHiIPL10
)

	)

2014 
	#S_SRSHiIPL9
 4

	)

2015 
	#W_SRSHiIPL9
 4

	)

2016 
	#M_SRSHiIPL9
 (0x‡<< 
S_SRSHiIPL9
)

	)

2017 
	#S_SRSHiIPL8
 0

	)

2018 
	#W_SRSHiIPL8
 4

	)

2019 
	#M_SRSHiIPL8
 (0x‡<< 
S_SRSHiIPL8
)

	)

2021 
	#M_SRSHi0Fõlds
 0xfff00000

	)

2022 
	#M_SRSHiRFõlds
 0x000fffff

	)

2048 
	#C0_Cau£
 
$13


	)

2049 
	#R_C0_Cau£
 13

	)

2050 
	#R_C0_SñCau£
 0

	)

2051 
	#C0_CAUSE
 
C0_Cau£


	)

2053 
	#S_Cau£BD
 31

	)

2054 
	#M_Cau£BD
 (0x1 << 
S_Cau£BD
)

	)

2055 
	#S_Cau£CE
 28

	)

2056 
	#M_Cau£CE
 (0x3<< 
S_Cau£CE
)

	)

2057 
	#S_Cau£IV
 23

	)

2058 
	#M_Cau£IV
 (0x1 << 
S_Cau£IV
)

	)

2059 
	#S_Cau£WP
 22

	)

2060 
	#M_Cau£WP
 (0x1 << 
S_Cau£WP
)

	)

2063 
	#S_Cau£IP
 8

	)

2064 
	#M_Cau£IP
 (0xf‡<< 
S_Cau£IP
)

	)

2065 
	#S_Cau£IPEXT
 10

	)

2066 
	#M_Cau£IPEXT
 (0x3‡<< 
S_Cau£IPEXT
)

	)

2068 
	#S_Cau£PCI
 26

	)

2069 
	#M_Cau£PCI
 (0x1 << 
S_Cau£PCI
)

	)

2070 
	#S_Cau£DC
 27

	)

2071 
	#M_Cau£DC
 (0x1 << 
S_Cau£DC
)

	)

2072 
	#S_Cau£TI
 30

	)

2073 
	#M_Cau£TI
 (0x1 << 
S_Cau£TI
)

	)

2074 
	#S_Cau£RIPL
 10

	)

2075 
	#M_Cau£RIPL
 (0x3‡<< 
S_Cau£RIPL
)

	)

2077 
	#S_Cau£IP13
 21

	)

2078 
	#M_Cau£IP13
 (0x1 << 
S_Cau£IP13
)

	)

2079 
	#S_Cau£IP12
 20

	)

2080 
	#M_Cau£IP12
 (0x1 << 
S_Cau£IP12
)

	)

2081 
	#S_Cau£IP11
 19

	)

2082 
	#M_Cau£IP11
 (0x1 << 
S_Cau£IP11
)

	)

2083 
	#S_Cau£IP10
 18

	)

2084 
	#M_Cau£IP10
 (0x1 << 
S_Cau£IP10
)

	)

2085 
	#S_Cau£IP9
 17

	)

2086 
	#M_Cau£IP9
 (0x1 << 
S_Cau£IP9
)

	)

2087 
	#S_Cau£IP8
 16

	)

2088 
	#M_Cau£IP8
 (0x1 << 
S_Cau£IP8
)

	)

2090 
	#S_Cau£IP7
 15

	)

2091 
	#M_Cau£IP7
 (0x1 << 
S_Cau£IP7
)

	)

2092 
	#S_Cau£IP6
 14

	)

2093 
	#M_Cau£IP6
 (0x1 << 
S_Cau£IP6
)

	)

2094 
	#S_Cau£IP5
 13

	)

2095 
	#M_Cau£IP5
 (0x1 << 
S_Cau£IP5
)

	)

2096 
	#S_Cau£IP4
 12

	)

2097 
	#M_Cau£IP4
 (0x1 << 
S_Cau£IP4
)

	)

2098 
	#S_Cau£IP3
 11

	)

2099 
	#M_Cau£IP3
 (0x1 << 
S_Cau£IP3
)

	)

2100 
	#S_Cau£IP2
 10

	)

2101 
	#M_Cau£IP2
 (0x1 << 
S_Cau£IP2
)

	)

2102 
	#S_Cau£IP1
 9

	)

2103 
	#M_Cau£IP1
 (0x1 << 
S_Cau£IP1
)

	)

2104 
	#S_Cau£IP0
 8

	)

2105 
	#M_Cau£IP0
 (0x1 << 
S_Cau£IP0
)

	)

2106 
	#S_Cau£ExcCode
 2

	)

2107 
	#W_Cau£ExcCode
 5

	)

2108 
	#M_Cau£ExcCode
 (((1 << 
W_Cau£ExcCode
Ë-1 ) << 
S_Cau£ExcCode
)

	)

2110 #ifde‡
MIPS_Rñó£2


2111 
	#M_Cau£0Fõlds
 0x033f0083

	)

2112 
	#M_Cau£RFõlds
 0xf400fc7c

	)

2114 
	#M_Cau£0Fõlds
 0x4f3f0083

	)

2115 
	#M_Cau£RFõlds
 0xb000fc7c

	)

2121 
	#K_Cau£CE0
 0

	)

2122 
	#K_Cau£CE1
 1

	)

2123 
	#K_Cau£CE2
 2

	)

2124 
	#K_Cau£CE3
 3

	)

2129 
	#EX_INT
 0

	)

2130 
	#EXC_INT
 (
EX_INT
 << 
S_Cau£ExcCode
)

	)

2131 
	#EX_MOD
 1

	)

2132 
	#EXC_MOD
 (
EX_MOD
 << 
S_Cau£ExcCode
)

	)

2133 
	#EX_TLBL
 2

	)

2134 
	#EXC_TLBL
 (
EX_TLBL
 << 
S_Cau£ExcCode
)

	)

2135 
	#EX_TLBS
 3

	)

2136 
	#EXC_TLBS
 (
EX_TLBS
 << 
S_Cau£ExcCode
)

	)

2137 
	#EX_ADEL
 4

	)

2138 
	#EXC_ADEL
 (
EX_ADEL
 << 
S_Cau£ExcCode
)

	)

2139 
	#EX_ADES
 5

	)

2140 
	#EXC_ADES
 (
EX_ADES
 << 
S_Cau£ExcCode
)

	)

2141 
	#EX_IBE
 6

	)

2142 
	#EXC_IBE
 (
EX_IBE
 << 
S_Cau£ExcCode
)

	)

2143 
	#EX_DBE
 7

	)

2144 
	#EXC_DBE
 (
EX_DBE
 << 
S_Cau£ExcCode
)

	)

2145 
	#EX_SYS
 8

	)

2146 
	#EXC_SYS
 (
EX_SYS
 << 
S_Cau£ExcCode
)

	)

2147 
	#EX_SYSCALL
 
EX_SYS


	)

2148 
	#EXC_SYSCALL
 
EXC_SYS


	)

2149 
	#EX_BP
 9

	)

2150 
	#EXC_BP
 (
EX_BP
 << 
S_Cau£ExcCode
)

	)

2151 
	#EX_BREAK
 
EX_BP


	)

2152 
	#EXC_BREAK
 
EXC_BP


	)

2153 
	#EX_RI
 10

	)

2154 
	#EXC_RI
 (
EX_RI
 << 
S_Cau£ExcCode
)

	)

2155 
	#EX_CPU
 11

	)

2156 
	#EXC_CPU
 (
EX_CPU
 << 
S_Cau£ExcCode
)

	)

2157 
	#EX_OV
 12

	)

2158 
	#EXC_OV
 (
EX_OV
 << 
S_Cau£ExcCode
)

	)

2159 
	#EX_TR
 13

	)

2160 
	#EXC_TR
 (
EX_TR
 << 
S_Cau£ExcCode
)

	)

2161 
	#EX_TRAP
 
EX_TR


	)

2162 
	#EXC_TRAP
 
EXC_TR


	)

2163 
	#EX_FPE
 15

	)

2164 
	#EXC_FPE
 (
EX_FPE
 << 
S_Cau£ExcCode
)

	)

2165 
	#EX_CEU
 17

	)

2166 
	#EXC_CEU
 (
EX_CEU
 << 
S_Cau£ExcCode
)

	)

2167 
	#EX_C2E
 18

	)

2168 
	#EXC_C2E
 (
EX_C2E
 << 
S_Cau£ExcCode
)

	)

2169 
	#EX_MDMX
 22

	)

2170 
	#EXC_MDMX
 (
EX_MDMX
 << 
S_Cau£ExcCode
)

	)

2171 
	#EX_WATCH
 23

	)

2172 
	#EXC_WATCH
 (
EX_WATCH
 << 
S_Cau£ExcCode
)

	)

2173 
	#EX_MCHECK
 24

	)

2174 
	#EXC_MCHECK
 (
EX_MCHECK
 << 
S_Cau£ExcCode
)

	)

2175 
	#EX_THREAD
 25

	)

2176 
	#EXC_THREAD
 (
EX_THREAD
 << 
S_Cau£ExcCode
)

	)

2177 
	#EX_DSPDIS
 26

	)

2178 
	#EXC_DSPDIS
 (
EX_DSPDIS
 << 
S_Cau£ExcCode
)

	)

2179 
	#EX_CacheEº
 30

	)

2180 
	#EXC_CacheEº
 (
EX_CacheEº
 << 
S_Cau£ExcCode
)

	)

2195 
	#C0_EPC
 
$14


	)

2196 
	#R_C0_EPC
 14

	)

2197 
	#R_C0_SñEPC
 0

	)

2199 
	#M_EPC0Fõlds
 0x00000000

	)

2200 
	#M_EPCRFõlds
 0x00000000

	)

2201 
	#M_EPC0Fõlds64
 
	`UINT64_C
(0x0000000000000000)

	)

2202 
	#M_EPCRFõlds64
 
	`UINT64_C
(0x0000000000000000)

	)

2216 
	#C0_PRId
 
$15


	)

2217 
	#R_C0_PRId
 15

	)

2218 
	#R_C0_SñPRId
 0

	)

2219 
	#C0_PRID
 
C0_PRID


	)

2221 
	#S_PRIdCoO±
 24

	)

2222 
	#M_PRIdCoO±
 (0xf‡<< 
S_PRIdCoO±
)

	)

2223 
	#S_PRIdCoID
 16

	)

2224 
	#M_PRIdCoID
 (0xf‡<< 
S_PRIdCoID
)

	)

2225 
	#S_PRIdImp
 8

	)

2226 
	#M_PRIdImp
 (0xf‡<< 
S_PRIdImp
)

	)

2227 
	#S_PRIdRev
 0

	)

2228 
	#M_PRIdRev
 (0xf‡<< 
S_PRIdRev
)

	)

2230 
	#M_PRId0Fõlds
 0x00000000

	)

2231 
	#M_PRIdRFõlds
 0xffffffff

	)

2235 
	#K_PRIdCoID_MIPS
 1

	)

2236 
	#K_PRIdCoID_Brﬂdcom
 2

	)

2237 
	#K_PRIdCoID_Alchemy
 3

	)

2238 
	#K_PRIdCoID_SiByã
 4

	)

2239 
	#K_PRIdCoID_S™dCø·
 5

	)

2240 
	#K_PRIdCoID_Phûùs
 6

	)

2241 
	#K_PRIdCoID_Toshiba
 7

	)

2242 
	#K_PRIdCoID_LSI
 8

	)

2243 
	#K_PRIdCoID_I¡rösôy
 9

	)

2244 
	#K_PRIdCoID_UNANNOUNCED10
 10

	)

2245 
	#K_PRIdCoID_Lexø
 11

	)

2246 
	#K_PRIdCoID_Raza
 12

	)

2247 
	#K_PRIdCoID_Cavium
 13

	)

2248 
	#K_PRIdCoID_UNANNOUNCED14
 14

	)

2249 
	#K_PRIdCoID_UNANNOUNCED15
 15

	)

2250 
	#K_PRIdCoID_NextAvaûabÀ
 16

	)

2256 
	#K_PRIdImp_4KC
 0x80

	)

2257 
	#K_PRIdImp_Jade
 0x80

	)

2258 
	#K_PRIdImp_5KC
 0x81

	)

2259 
	#K_PRIdImp_O∑l
 0x81

	)

2260 
	#K_PRIdImp_20KC
 0x82

	)

2261 
	#K_PRIdImp_Ruby
 0x82

	)

2262 
	#K_PRIdImp_4KMP
 0x83

	)

2263 
	#K_PRIdImp_JadeLôe
 0x83

	)

2264 
	#K_PRIdImp_4KEc
 0x84

	)

2265 
	#K_PRIdImp_4KEmp
 0x85

	)

2266 
	#K_PRIdImp_4KSc
 0x86

	)

2267 
	#K_PRIdImp_M4K
 0x87

	)

2268 
	#K_PRIdImp_25Kf
 0x88

	)

2269 
	#K_PRIdImp_Amëhy°
 0x88

	)

2270 
	#K_PRIdImp_5KE
 0x89

	)

2271 
	#K_PRIdImp_4KEc_R2
 0x90

	)

2272 
	#K_PRIdImp_4KEmp_R2
 0x91

	)

2273 
	#K_PRIdImp_4KSd
 0x92

	)

2275 
	#K_PRIdImp_24K
 0x93

	)

2276 
	#K_PRIdImp_T›az
 0x93

	)

2277 
	#K_PRIdImp_T›azTLB
 0x93

	)

2279 
	#K_PRIdImp_34K
 0x95

	)

2280 
	#K_PRIdImp_24KE
 0x96

	)

2281 
	#K_PRIdImp_54K
 0x97

	)

2282 
	#K_PRIdImp_74K
 0x97

	)

2283 
	#K_PRIdImp_84K
 0x98

	)

2284 
	#K_PRIdImp_34KMP
 0x99

	)

2285 
	#K_PRIdImp_74KMP
 0x9®

	)

2287 
	#K_PRIdImp_R3000
 0x01

	)

2288 
	#K_PRIdImp_R4000
 0x04

	)

2289 
	#K_PRIdImp_R10000
 0x09

	)

2290 
	#K_PRIdImp_R4300
 0x0b

	)

2291 
	#K_PRIdImp_R5000
 0x23

	)

2292 
	#K_PRIdImp_R5200
 0x28

	)

2293 
	#K_PRIdImp_R5400
 0x54

	)

2295 #ifde‡
MIPS_Rñó£2


2308 
	#C0_EBa£
 
$15
,1

	)

2309 
	#R_C0_EBa£
 15

	)

2310 
	#R_C0_SñEBa£
 1

	)

2313 #ifde‡
MIPS_MT


2314 
	#S_EBa£VPENum
 0

	)

2315 
	#M_EBa£VPENum
 (0x‡<< 
S_EBa£VPENum
)

	)

2318 
	#S_EBa£VA
 12

	)

2319 
	#M_EBa£VA
 (0xffff‡<< 
S_EBa£VA
)

	)

2320 
	#S_EBa£CPUNum
 0

	)

2321 
	#M_EBa£CPUNum
 (0x3f‡<< 
S_EBa£CPUNum
)

	)

2322 
	#W_EBa£CPUNum
 18

	)

2324 
	#M_EBa£0Fõlds
 0x40000C00

	)

2325 
	#M_EBa£RFõlds
 0x800003ff

	)

2345 
	#C0_C⁄fig
 
$16


	)

2346 
	#R_C0_C⁄fig
 16

	)

2347 
	#R_C0_SñC⁄fig
 0

	)

2348 
	#C0_CONFIG
 
C0_C⁄fig


	)

2351 
	#S_C⁄figM‹e
 31

	)

2352 
	#M_C⁄figM‹e
 (0x1 << 
S_C⁄figM‹e
)

	)

2353 
	#S_C⁄figMM
 18

	)

2354 
	#M_C⁄figMM
 (0x1 << 
S_C⁄figMM
)

	)

2355 
	#S_C⁄figBM
 16

	)

2356 
	#M_C⁄figBM
 (0x1 << 
S_C⁄figBM
)

	)

2357 
	#S_C⁄figIm∂
 16

	)

2358 
	#M_C⁄figIm∂
 (0x7ff‡<< 
S_C⁄figIm∂
)

	)

2359 
	#S_C⁄figBE
 15

	)

2360 
	#M_C⁄figBE
 (0x1 << 
S_C⁄figBE
)

	)

2361 
	#S_C⁄figAT
 13

	)

2362 
	#M_C⁄figAT
 (0x3 << 
S_C⁄figAT
)

	)

2363 
	#W_C⁄figAT
 2

	)

2364 
	#S_C⁄figAR
 10

	)

2365 
	#M_C⁄figAR
 (0x7 << 
S_C⁄figAR
)

	)

2366 
	#S_C⁄figMT
 7

	)

2367 
	#M_C⁄figMT
 (0x7 << 
S_C⁄figMT
)

	)

2368 
	#W_C⁄figMT
 3

	)

2369 
	#S_C⁄figVI
 3

	)

2370 
	#M_C⁄figVI
 (0x1 << 
S_C⁄figVI
)

	)

2371 
	#S_C⁄figK0
 0

	)

2372 
	#M_C⁄figK0
 (0x7 << 
S_C⁄figK0
)

	)

2373 
	#W_C⁄figK0
 3

	)

2382 
	#S_C⁄figK23
 28

	)

2383 
	#M_C⁄figK23
 (0x7 << 
S_C⁄figK23
)

	)

2384 
	#W_C⁄figK23
 3

	)

2385 
	#S_C⁄figKU
 25

	)

2386 
	#M_C⁄figKU
 (0x7 << 
S_C⁄figKU
)

	)

2387 
	#W_C⁄figKU
 3

	)

2389 
	#M_C⁄fig0Fõlds
 0x00000070

	)

2390 
	#M_C⁄figRFõlds
 0x8000ff88

	)

2395 
	#K_C⁄figAT_MIPS32
 0

	)

2396 
	#K_C⁄figAT_MIPS64S
 1

	)

2397 
	#K_C⁄figAT_MIPS64
 2

	)

2398 
	#K_C⁄figAT_MAX
 2

	)

2404 
	#K_C⁄figAR_Rñ1
 0

	)

2405 
	#K_C⁄figAR_Rñ2
 1

	)

2410 
	#K_C⁄figMT_NoMMU
 0

	)

2411 
	#K_C⁄figMT_TLBMMU
 1

	)

2412 
	#K_C⁄figMT_BATMMU
 2

	)

2413 
	#K_C⁄figMT_FMTMMU
 3

	)

2414 
	#K_C⁄figMT_FMMMU
 
K_C⁄figMT_FMTMMU


	)

2430 
	#C0_C⁄fig1
 
$16
,1

	)

2431 
	#R_C0_C⁄fig1
 16

	)

2432 
	#R_C0_SñC⁄fig1
 1

	)

2434 
	#S_C⁄fig1M
 31

	)

2435 
	#M_C⁄fig1M
 (0x1 << 
S_C⁄fig1M‹e
)

	)

2436 
	#S_C⁄fig1M‹e
 
S_C⁄fig1M


	)

2437 
	#M_C⁄fig1M‹e
 (0x1 << 
S_C⁄fig1M
)

	)

2438 
	#S_C⁄fig1MMUSize
 25

	)

2439 
	#M_C⁄fig1MMUSize
 (0x3‡<< 
S_C⁄fig1MMUSize
)

	)

2440 
	#W_C⁄fig1MMUSize
 6

	)

2441 
	#S_C⁄fig1IS
 22

	)

2442 
	#M_C⁄fig1IS
 (0x7 << 
S_C⁄fig1IS
)

	)

2443 
	#W_C⁄fig1IS
 3

	)

2444 
	#S_C⁄fig1IL
 19

	)

2445 
	#M_C⁄fig1IL
 (0x7 << 
S_C⁄fig1IL
)

	)

2446 
	#W_C⁄fig1IL
 3

	)

2447 
	#S_C⁄fig1IA
 16

	)

2448 
	#M_C⁄fig1IA
 (0x7 << 
S_C⁄fig1IA
)

	)

2449 
	#W_C⁄fig1IA
 3

	)

2450 
	#S_C⁄fig1DS
 13

	)

2451 
	#M_C⁄fig1DS
 (0x7 << 
S_C⁄fig1DS
)

	)

2452 
	#W_C⁄fig1DS
 3

	)

2453 
	#S_C⁄fig1DL
 10

	)

2454 
	#M_C⁄fig1DL
 (0x7 << 
S_C⁄fig1DL
)

	)

2455 
	#W_C⁄fig1DL
 3

	)

2456 
	#S_C⁄fig1DA
 7

	)

2457 
	#M_C⁄fig1DA
 (0x7 << 
S_C⁄fig1DA
)

	)

2458 
	#S_C⁄fig1C2
 6

	)

2459 
	#W_C⁄fig1DA
 3

	)

2460 
	#M_C⁄fig1C2
 (0x1 << 
S_C⁄fig1C2
)

	)

2461 
	#S_C⁄fig1MD
 5

	)

2462 
	#M_C⁄fig1MD
 (0x1 << 
S_C⁄fig1MD
)

	)

2463 
	#S_C⁄fig1PC
 4

	)

2464 
	#M_C⁄fig1PC
 (0x1 << 
S_C⁄fig1PC
)

	)

2465 
	#S_C⁄fig1WR
 3

	)

2466 
	#M_C⁄fig1WR
 (0x1 << 
S_C⁄fig1WR
)

	)

2467 
	#S_C⁄fig1CA
 2

	)

2468 
	#M_C⁄fig1CA
 (0x1 << 
S_C⁄fig1CA
)

	)

2469 
	#S_C⁄fig1EP
 1

	)

2470 
	#M_C⁄fig1EP
 (0x1 << 
S_C⁄fig1EP
)

	)

2471 
	#S_C⁄fig1FP
 0

	)

2472 
	#M_C⁄fig1FP
 (0x1 << 
S_C⁄fig1FP
)

	)

2473 
	#W_C⁄fig1FP
 1

	)

2475 
	#M_C⁄fig10Fõlds
 0x00000000

	)

2476 
	#M_C⁄fig1RFõlds
 0xffffffff

	)

2484 
	#C⁄fig1CacheSës
() \

2485 
	`HALF
(64); \

2486 
	`HALF
(128); \

2487 
	`HALF
(256); \

2488 
	`HALF
(512); \

2489 
	`HALF
(1024); \

2490 
	`HALF
(2048); \

2491 
	`HALF
(4096); \

2492 
	`HALF
(8192); \

2493 
	`HALF
(0); \

2494 
	`HALF
(0); \

2495 
	`HALF
(0); \

2496 
	`HALF
(0); \

2497 
	`HALF
(0); \

2498 
	`HALF
(0); \

2499 
	`HALF
(0); \

2500 
	`HALF
(0);

	)

2508 
	#C⁄fig1CacheLöeSize
() \

2509 
	`HALF
(0); \

2510 
	`HALF
(4); \

2511 
	`HALF
(8); \

2512 
	`HALF
(16); \

2513 
	`HALF
(32); \

2514 
	`HALF
(64); \

2515 
	`HALF
(128); \

2516 
	`HALF
(256); \

2517 
	`HALF
(0); \

2518 
	`HALF
(0); \

2519 
	`HALF
(0); \

2520 
	`HALF
(0); \

2521 
	`HALF
(0); \

2522 
	`HALF
(0); \

2523 
	`HALF
(0); \

2524 
	`HALF
(0);

	)

2538 
	#C0_C⁄fig2
 
$16
,2

	)

2539 
	#R_C0_C⁄fig2
 16

	)

2540 
	#R_C0_SñC⁄fig2
 2

	)

2542 
	#S_C⁄fig2M
 31

	)

2543 
	#M_C⁄fig2M
 (0x1 << 
S_C⁄fig2M
)

	)

2545 
	#M_C⁄fig20Fõlds
 0x00000000

	)

2546 
	#M_C⁄fig2RFõlds
 0xffffffff

	)

2553 
	#S_C⁄fig2TU
 28

	)

2554 
	#M_C⁄fig2TU
 (0x7 << 
S_C⁄fig2TU
Ë

	)

2555 
	#W_C⁄fig2TU
 4

	)

2556 
	#S_C⁄fig2TS
 24

	)

2557 
	#M_C⁄fig2TS
 (0x‡<< 
S_C⁄fig2TS
Ë

	)

2558 
	#W_C⁄fig2TS
 4

	)

2559 
	#S_C⁄fig2TL
 20

	)

2560 
	#M_C⁄fig2TL
 (0x‡<< 
S_C⁄fig2TL
Ë

	)

2561 
	#W_C⁄fig2TL
 4

	)

2562 
	#S_C⁄fig2TA
 16

	)

2563 
	#M_C⁄fig2TA
 (0x‡<< 
S_C⁄fig2TA
Ë

	)

2564 
	#W_C⁄fig2TA
 4

	)

2566 
	#S_C⁄fig2SU
 12

	)

2567 
	#M_C⁄fig2SU
 (0x‡<< 
S_C⁄fig2SU
Ë

	)

2568 
	#W_C⁄fig2SU
 4

	)

2569 
	#S_C⁄fig2SS
 8

	)

2570 
	#M_C⁄fig2SS
 (0x‡<< 
S_C⁄fig2SS
Ë

	)

2571 
	#W_C⁄fig2SS
 4

	)

2572 
	#S_C⁄fig2SL
 4

	)

2573 
	#M_C⁄fig2SL
 (0x‡<< 
S_C⁄fig2SL
Ë

	)

2574 
	#W_C⁄fig2SL
 4

	)

2575 
	#S_C⁄fig2SA
 0

	)

2576 
	#M_C⁄fig2SA
 (0x‡<< 
S_C⁄fig2SA
Ë

	)

2577 
	#W_C⁄fig2SA
 4

	)

2597 
	#C0_C⁄fig3
 
$16
,3

	)

2598 
	#R_C0_C⁄fig3
 16

	)

2599 
	#R_C0_SñC⁄fig3
 3

	)

2601 
	#S_C⁄fig3M
 31

	)

2602 
	#M_C⁄fig3M
 (0x1 << 
S_C⁄fig3M
)

	)

2604 
	#S_C⁄fig3ISAONEXC
 16

	)

2605 
	#M_C⁄fig3ISAONEXC
 (0x1 << 
S_C⁄fig3ISAONEXC
)

	)

2606 
	#S_C⁄fig3ISA
 14

	)

2607 
	#M_C⁄fig3ISA
 (0x3 << 
S_C⁄fig3ISA
)

	)

2608 
	#S_C⁄fig3ULRI
 13

	)

2609 
	#M_C⁄fig3ULRI
 (0x1 << 
S_C⁄fig3ULRI
)

	)

2610 
	#S_C⁄fig3RXI
 12

	)

2611 
	#M_C⁄fig3RXI
 (0x1 << 
S_C⁄fig3RXI
)

	)

2612 
	#S_C⁄fig3DSP2P
 11

	)

2613 
	#M_C⁄fig3DSP2P
 (0x1 << 
S_C⁄fig3DSP2P
)

	)

2614 
	#S_C⁄fig3DSPP
 10

	)

2615 
	#M_C⁄fig3DSPP
 (0x1 << 
S_C⁄fig3DSPP
)

	)

2616 
	#S_C⁄fig3ITL
 8

	)

2617 
	#M_C⁄fig3ITL
 (0x1 << 
S_C⁄fig3ITL
)

	)

2618 
	#S_C⁄fig3LPA
 7

	)

2619 
	#M_C⁄fig3LPA
 (0x1 << 
S_C⁄fig3LPA
)

	)

2620 
	#S_C⁄fig3VEIC
 6

	)

2621 
	#M_C⁄fig3VEIC
 (0x1 << 
S_C⁄fig3VEIC
)

	)

2622 
	#S_C⁄fig3VI¡
 5

	)

2623 
	#M_C⁄fig3VI¡
 (0x1 << 
S_C⁄fig3VI¡
)

	)

2624 
	#S_C⁄fig3SP
 4

	)

2625 
	#M_C⁄fig3SP
 (0x1 << 
S_C⁄fig3SP
)

	)

2626 
	#S_C⁄fig3MT
 2

	)

2627 
	#W_C⁄fig3MT
 1

	)

2628 
	#M_C⁄fig3MT
 (((1 << 
W_C⁄fig3MT
Ë-1 ) << 
S_C⁄fig3MT
)

	)

2629 
	#S_C⁄fig3SM
 1

	)

2630 
	#M_C⁄fig3SM
 (0x1 << 
S_C⁄fig3SM
)

	)

2631 
	#S_C⁄fig3TL
 0

	)

2632 
	#M_C⁄fig3TL
 (0x1 << 
S_C⁄fig3TL
)

	)

2634 
	#K_C⁄fig3ISA_LM
 0

	)

2635 
	#K_C⁄fig3ISA_MM
 1

	)

2636 
	#K_C⁄fig3ISA_MMLM
 2

	)

2637 
	#K_C⁄fig3ISA_LMMM
 3

	)

2639 #ifde‡
MIPS_Rñó£2


2640 
	#M_C⁄fig30Fõlds
 0xfffffb08

	)

2641 
	#M_C⁄fig3RFõlds
 0x000004f7

	)

2643 
	#M_C⁄fig30Fõlds
 0xfffffff0

	)

2644 
	#M_C⁄fig3RFõlds
 0x0000000f

	)

2659 
	#C0_LLAddr
 
$17


	)

2660 
	#R_C0_LLAddr
 17

	)

2661 
	#R_C0_SñLLAddr
 0

	)

2662 
	#C0_LLADDR
 
C0_LLAddr


	)

2664 
	#M_LLAddr0Fõlds
 0x00000000

	)

2665 
	#M_LLAddrRFõlds
 0x00000000

	)

2666 
	#M_LLAddr0Fõlds64
 
	`UINT64_C
(0x0000000000000000)

	)

2667 
	#M_LLAddrRFõlds64
 
	`UINT64_C
(0x0000000000000000)

	)

2682 
	#C0_W©chLo
 
$18


	)

2683 
	#R_C0_W©chLo
 18

	)

2684 
	#R_C0_SñW©chLo
 0

	)

2685 
	#C0_WATCHLO
 
C0_W©chLo


	)

2687 
	#S_W©chLoVAddr
 3

	)

2688 
	#M_W©chLoVAddr
 (0x1ffffff‡<< 
S_W©chLoVAddr
)

	)

2689 
	#S_W©chLoI
 2

	)

2690 
	#M_W©chLoI
 (0x1 << 
S_W©chLoI
)

	)

2691 
	#S_W©chLoR
 1

	)

2692 
	#M_W©chLoR
 (0x1 << 
S_W©chLoR
)

	)

2693 
	#S_W©chLoW
 0

	)

2694 
	#M_W©chLoW
 (0x1 << 
S_W©chLoW
)

	)

2696 
	#M_W©chLo0Fõlds
 0x00000000

	)

2697 
	#M_W©chLoRFõlds
 0x00000000

	)

2698 
	#M_W©chLo0Fõlds64
 
	`UINT64_C
(0x0000000000000000)

	)

2699 
	#M_W©chLoRFõlds64
 
	`UINT64_C
(0x0000000000000000)

	)

2701 
	#M_W©chLoE«bÀs
 (
M_W©chLoI
 | 
M_W©chLoR
 | 
M_W©chLoW
)

	)

2716 
	#C0_W©chHi
 
$19


	)

2717 
	#R_C0_W©chHi
 19

	)

2718 
	#R_C0_SñW©chHi
 0

	)

2719 
	#C0_WATCHHI
 
C0_W©chHi


	)

2721 
	#S_W©chHiM
 31

	)

2722 
	#M_W©chHiM
 (0x1 << 
S_W©chHiM
)

	)

2723 
	#S_W©chHiG
 30

	)

2724 
	#M_W©chHiG
 (0x1 << 
S_W©chHiG
)

	)

2725 
	#S_W©chHiASID
 16

	)

2726 
	#M_W©chHiASID
 (0xf‡<< 
S_W©chHiASID
)

	)

2727 
	#S_W©chHiMask
 3

	)

2728 
	#M_W©chHiMask
 (0x1f‡<< 
S_W©chHiMask
)

	)

2730 #ifde‡
MIPS_Rñó£2


2731 
	#S_W©chHiI
 2

	)

2732 
	#M_W©chHiI
 (0x1 << 
S_W©chHiI
)

	)

2733 
	#S_W©chHiR
 1

	)

2734 
	#M_W©chHiR
 (0x1 << 
S_W©chHiR
)

	)

2735 
	#S_W©chHiW
 0

	)

2736 
	#M_W©chHiW
 (0x1 << 
S_W©chHiW
)

	)

2738 
	#M_W©chHi0Fõlds
 0x3f00f000

	)

2739 
	#M_W©chHiRFõlds
 0x80000000

	)

2741 
	#M_W©chHi0Fõlds
 0x3f00f007

	)

2742 
	#M_W©chHiRFõlds
 0x80000000

	)

2758 
	#C0_XC⁄ãxt
 
$20


	)

2759 
	#R_C0_XC⁄ãxt
 20

	)

2760 
	#R_C0_SñXC⁄ãxt
 0

	)

2761 
	#C0_EXTCTXT
 
C0_XC⁄ãxt


	)

2763 
	#S_XC⁄ãxtR
 31

	)

2764 
	#M_XC⁄ãxtR
 
	`UINT64_C
(0x0000000180000000)

	)

2765 
	#S_XC⁄ãxtBadVPN2
 4

	)

2766 
	#M_XC⁄ãxtBadVPN2
 (0x7fffff‡<< 
S_XC⁄ãxtBadVPN2
)

	)

2767 
	#S_XC⁄ãxtBadVPN
 
S_XC⁄ãxtBadVPN2


	)

2769 
	#M_XC⁄ãxt0Fõlds
 0x0000000f

	)

2791 
	#C0_Debug
 
$23


	)

2792 
	#R_C0_Debug
 23

	)

2793 
	#R_C0_SñDebug
 0

	)

2795 
	#S_DebugDBD
 31

	)

2796 
	#M_DebugDBD
 (0x1 << 
S_DebugDBD
)

	)

2797 
	#S_DebugDM
 30

	)

2798 
	#M_DebugDM
 (0x1 << 
S_DebugDM
)

	)

2799 
	#S_DebugNoDCR
 29

	)

2800 
	#M_DebugNoDCR
 (0x1 << 
S_DebugNoDCR
)

	)

2801 
	#S_DebugLSNM
 28

	)

2802 
	#M_DebugLSNM
 (0x1 << 
S_DebugLSNM
)

	)

2803 
	#S_DebugDoze
 27

	)

2804 
	#M_DebugDoze
 (0x1 << 
S_DebugDoze
)

	)

2805 
	#S_DebugHÆt
 26

	)

2806 
	#M_DebugHÆt
 (0x1 << 
S_DebugHÆt
)

	)

2807 
	#S_DebugCou¡DM
 25

	)

2808 
	#M_DebugCou¡DM
 (0x1 << 
S_DebugCou¡DM
)

	)

2809 
	#S_DebugIBusEP
 24

	)

2810 
	#M_DebugIBusEP
 (0x1 << 
S_DebugIBusEP
)

	)

2811 
	#S_DebugMCheckP
 23

	)

2812 
	#M_DebugMCheckP
 (0x1 << 
S_DebugMCheckP
)

	)

2813 
	#S_DebugCacheEP
 22

	)

2814 
	#M_DebugCacheEP
 (0x1 << 
S_DebugCacheEP
)

	)

2815 
	#S_DebugDBusEP
 21

	)

2816 
	#M_DebugDBusEP
 (0x1 << 
S_DebugDBusEP
)

	)

2817 
	#S_DebugIEXI
 20

	)

2818 
	#M_DebugIEXI
 (0x1 << 
S_DebugIEXI
)

	)

2819 
	#S_DebugDDBSIm¥
 19

	)

2820 
	#M_DebugDDBSIm¥
 (0x1 << 
S_DebugDDBSIm¥
)

	)

2821 
	#S_DebugDDBLIm¥
 18

	)

2822 
	#M_DebugDDBLIm¥
 (0x1 << 
S_DebugDDBLIm¥
)

	)

2823 
	#S_DebugEJTAGvî
 15

	)

2824 
	#M_DebugEJTAGvî
 (0x7 << 
S_DebugEJTAGvî
)

	)

2825 
	#S_DebugDExcCode
 10

	)

2826 
	#M_DebugDExcCode
 (0x1‡<< 
S_DebugDExcCode
)

	)

2827 
	#S_DebugNoSSt
 9

	)

2828 
	#M_DebugNoSSt
 (0x1 << 
S_DebugNoSSt
)

	)

2829 
	#S_DebugSSt
 8

	)

2830 
	#M_DebugSSt
 (0x1 << 
S_DebugSSt
)

	)

2831 
	#S_DebugOffLöe
 7

	)

2832 
	#M_DebugOffLöe
 (0x1 << 
S_DebugOffLöe
)

	)

2833 
	#S_DebugDIBIm¥
 6

	)

2834 
	#M_DebugDIBIm¥
 (0x1 << 
S_DebugDIBIm¥
)

	)

2835 
	#S_DebugDINT
 5

	)

2836 
	#M_DebugDINT
 (0x1 << 
S_DebugDINT
)

	)

2837 
	#S_DebugDIB
 4

	)

2838 
	#M_DebugDIB
 (0x1 << 
S_DebugDIB
)

	)

2839 
	#S_DebugDDBS
 3

	)

2840 
	#M_DebugDDBS
 (0x1 << 
S_DebugDDBS
)

	)

2841 
	#S_DebugDDBL
 2

	)

2842 
	#M_DebugDDBL
 (0x1 << 
S_DebugDDBL
)

	)

2843 
	#S_DebugDBp
 1

	)

2844 
	#M_DebugDBp
 (0x1 << 
S_DebugDBp
)

	)

2845 
	#S_DebugDSS
 0

	)

2846 
	#M_DebugDSS
 (0x1 << 
S_DebugDSS
)

	)

2848 
	#M_Debug0Fõlds
 0x01f000c0

	)

2849 
	#M_DebugRFõlds
 0xec0f„3f

	)

2867 
	#C0_Tø˚C⁄åﬁ
 
$23
,1

	)

2868 
	#R_C0_Tø˚C⁄åﬁ
 23

	)

2869 
	#R_C0_SñTø˚C⁄åﬁ
 1

	)

2871 
	#S_Tø˚C⁄åﬁTS
 31

	)

2872 
	#M_Tø˚C⁄åﬁTS
 (0x1 << 
S_Tø˚C⁄åﬁTS
)

	)

2873 
	#S_Tø˚C⁄åﬁUT
 30

	)

2874 
	#M_Tø˚C⁄åﬁUT
 (0x1 << 
S_Tø˚C⁄åﬁUT
)

	)

2875 
	#S_Tø˚C⁄åﬁTPC
 28

	)

2876 
	#M_Tø˚C⁄åﬁTPC
 (0x1 << 
S_Tø˚C⁄åﬁTPC
)

	)

2877 
	#S_Tø˚C⁄åﬁTB
 27

	)

2878 
	#M_Tø˚C⁄åﬁTB
 (0x1 << 
S_Tø˚C⁄åﬁTB
)

	)

2879 
	#S_Tø˚C⁄åﬁIO
 26

	)

2880 
	#M_Tø˚C⁄åﬁIO
 (0x1 << 
S_Tø˚C⁄åﬁIO
)

	)

2881 
	#S_Tø˚C⁄åﬁD
 25

	)

2882 
	#M_Tø˚C⁄åﬁD
 (0x1 << 
S_Tø˚C⁄åﬁD
)

	)

2883 
	#S_Tø˚C⁄åﬁE
 24

	)

2884 
	#M_Tø˚C⁄åﬁE
 (0x1 << 
S_Tø˚C⁄åﬁE
)

	)

2885 
	#S_Tø˚C⁄åﬁK
 23

	)

2886 
	#M_Tø˚C⁄åﬁK
 (0x1 << 
S_Tø˚C⁄åﬁK
)

	)

2887 
	#S_Tø˚C⁄åﬁS
 22

	)

2888 
	#M_Tø˚C⁄åﬁS
 (0x1 << 
S_Tø˚C⁄åﬁS
)

	)

2889 
	#S_Tø˚C⁄åﬁU
 21

	)

2890 
	#M_Tø˚C⁄åﬁU
 (0x1 << 
S_Tø˚C⁄åﬁU
)

	)

2891 
	#S_Tø˚C⁄åﬁASID_M
 13

	)

2892 
	#M_Tø˚C⁄åﬁASID_M
 (0xf‡<< 
S_Tø˚C⁄åﬁASID_M
)

	)

2893 
	#S_Tø˚C⁄åﬁASID
 5

	)

2894 
	#M_Tø˚C⁄åﬁASID
 (0xf‡<< 
S_Tø˚C⁄åﬁASID
)

	)

2895 
	#S_Tø˚C⁄åﬁG
 4

	)

2896 
	#M_Tø˚C⁄åﬁG
 (0x1 << 
S_Tø˚C⁄åﬁG
)

	)

2897 
	#S_Tø˚C⁄åﬁTFCR
 3

	)

2898 
	#M_Tø˚C⁄åﬁTFCR
 (0x1 << 
S_Tø˚C⁄åﬁTFCR
)

	)

2899 
	#S_Tø˚C⁄åﬁTLSM
 2

	)

2900 
	#M_Tø˚C⁄åﬁTLSM
 (0x1 << 
S_Tø˚C⁄åﬁTLSM
)

	)

2901 
	#S_Tø˚C⁄åﬁTIM
 1

	)

2902 
	#M_Tø˚C⁄åﬁTIM
 (0x1 << 
S_Tø˚C⁄åﬁTIM
)

	)

2903 
	#S_Tø˚C⁄åﬁOn
 0

	)

2904 
	#M_Tø˚C⁄åﬁOn
 (0x1 << 
S_Tø˚C⁄åﬁOn
)

	)

2907 
	#M_Tø˚C⁄åﬁR
 (0x1 << 29)

	)

2926 
	#C0_Tø˚C⁄åﬁ2
 
$23
,2

	)

2927 
	#R_C0_Tø˚C⁄åﬁ2
 23

	)

2928 
	#R_C0_SñTø˚C⁄åﬁ2
 2

	)

2930 
	#S_Tø˚C⁄åﬁ2SyPExt
 30

	)

2931 
	#M_Tø˚C⁄åﬁ2SyPExt
 (0x3 << 
S_Tø˚C⁄åﬁ2SyPExt
)

	)

2932 
	#S_Tø˚C⁄åﬁ2CPUIdV
 29

	)

2933 
	#M_Tø˚C⁄åﬁ2CPUIdV
 (0x1 << 
S_Tø˚C⁄åﬁ2CPUIdV
)

	)

2934 
	#S_Tø˚C⁄åﬁ2CPUId
 21

	)

2935 
	#M_Tø˚C⁄åﬁ2CPUId
 (0xf‡<< 
S_Tø˚C⁄åﬁ2CPUId
)

	)

2936 
	#S_Tø˚C⁄åﬁ2TCV
 20

	)

2937 
	#M_Tø˚C⁄åﬁ2TCV
 (0x1 << 
S_Tø˚C⁄åﬁ2TCV
)

	)

2938 
	#S_Tø˚C⁄åﬁ2TCNum
 12

	)

2939 
	#M_Tø˚C⁄åﬁ2TCNum
 (0xf‡<< 
S_Tø˚C⁄åﬁ2TCNum
)

	)

2940 
	#S_Tø˚C⁄åﬁ2Mode
 7

	)

2941 
	#M_Tø˚C⁄åﬁ2Mode
 (0x1‡<< 
S_Tø˚C⁄åﬁ2Mode
)

	)

2942 
	#S_Tø˚C⁄åﬁ2VÆidModes
 5

	)

2943 
	#M_Tø˚C⁄åﬁ2VÆidModes
 (0x3 << 
S_Tø˚C⁄åﬁ2VÆidModes
)

	)

2944 
	#S_Tø˚C⁄åﬁ2TBI
 4

	)

2945 
	#M_Tø˚C⁄åﬁ2TBI
 (0x1 << 
S_Tø˚C⁄åﬁ2TBI
)

	)

2946 
	#S_Tø˚C⁄åﬁ2TBU
 3

	)

2947 
	#M_Tø˚C⁄åﬁ2TBU
 (0x1 << 
S_Tø˚C⁄åﬁ2TBU
)

	)

2948 
	#S_Tø˚C⁄åﬁ2SyP
 0

	)

2949 
	#M_Tø˚C⁄åﬁ2SyP
 (0x7 << 
S_Tø˚C⁄åﬁ2SyP
)

	)

2952 
	#M_Tø˚C⁄åﬁ2R
 (0x3 << 30)

	)

2959 
	#C0_U£rTø˚D©a
 
$23
,3

	)

2960 
	#R_C0_U£rTø˚D©a
 23

	)

2961 
	#R_C0_SñU£rTø˚D©a
 3

	)

2963 #i‡
deföed
(
MIPS_Modñ64
)

2964 
	#M_U£rTø˚D©aD©a
 
	`UINT64_C
(0xffffffffffffffff)

	)

2966 
	#M_U£rTø˚D©aD©a
 0xffffffff

	)

2974 
	#C0_U£rTø˚D©a2
 
$24
,3

	)

2975 
	#R_C0_U£rTø˚D©a2
 24

	)

2976 
	#R_C0_SñU£rTø˚D©a2
 3

	)

2978 #i‡
deföed
(
MIPS_Modñ64
)

2979 
	#M_U£rTø˚D©a2D©a
 
	`UINT64_C
(0xffffffffffffffff)

	)

2981 
	#M_U£rTø˚D©a2D©a
 0xffffffff

	)

2990 
	#C0_Tø˚BPC
 
$23
,4

	)

2991 
	#R_C0_Tø˚BPC
 23

	)

2992 
	#R_C0_SñTø˚BPC
 4

	)

2994 
	#S_Tø˚BPCDE
 31

	)

2995 
	#M_Tø˚BPCDE
 (0x1 << 
S_Tø˚BPCDE
)

	)

2996 
	#S_Tø˚BPCDBPOn
 16

	)

2997 
	#M_Tø˚BPCDBPOn
 (0x7ff‡<< 
S_Tø˚BPCDBPOn
)

	)

2998 
	#S_Tø˚BPCIE
 15

	)

2999 
	#M_Tø˚BPCIE
 (0x1 << 
S_Tø˚BPCIE
)

	)

3000 
	#S_Tø˚BPCIBPOn
 0

	)

3001 
	#M_Tø˚BPCIBPOn
 (0x7ff‡<< 
S_Tø˚BPCIBPOn
)

	)

3018 
	#C0_Tø˚IBPC
 
$23
,4

	)

3019 
	#R_C0_Tø˚IBPC
 23

	)

3020 
	#R_C0_SñTø˚IBPC
 4

	)

3022 
	#S_Tø˚IBPCMB
 31

	)

3023 
	#M_Tø˚IBPCMB
 (0x1 << 
S_Tø˚IBPCMB
)

	)

3024 
	#S_Tø˚IBPCPCT
 29

	)

3025 
	#M_Tø˚IBPCPCT
 (0x1 << 
S_Tø˚IBPCPCT
)

	)

3026 
	#S_Tø˚IBPCIE
 28

	)

3027 
	#M_Tø˚IBPCIE
 (0x1 << 
S_Tø˚IBPCIE
)

	)

3028 
	#S_Tø˚IBPCATE
 27

	)

3029 
	#M_Tø˚IBPCATE
 (0x1 << 
S_Tø˚IBPCATE
)

	)

3030 
	#S_Tø˚IBPCIBPC8
 24

	)

3031 
	#M_Tø˚IBPCIBPC8
 (0x7 << 
S_Tø˚IBPCIBPC8
)

	)

3032 
	#S_Tø˚IBPCIBPC7
 21

	)

3033 
	#M_Tø˚IBPCIBPC7
 (0x7 << 
S_Tø˚IBPCIBPC7
)

	)

3034 
	#S_Tø˚IBPCIBPC6
 18

	)

3035 
	#M_Tø˚IBPCIBPC6
 (0x7 << 
S_Tø˚IBPCIBPC6
)

	)

3036 
	#S_Tø˚IBPCIBPC5
 15

	)

3037 
	#M_Tø˚IBPCIBPC5
 (0x7 << 
S_Tø˚IBPCIBPC5
)

	)

3038 
	#S_Tø˚IBPCIBPC4
 12

	)

3039 
	#M_Tø˚IBPCIBPC4
 (0x7 << 
S_Tø˚IBPCIBPC4
)

	)

3040 
	#S_Tø˚IBPCIBPC3
 9

	)

3041 
	#M_Tø˚IBPCIBPC3
 (0x7 << 
S_Tø˚IBPCIBPC3
)

	)

3042 
	#S_Tø˚IBPCIBPC2
 6

	)

3043 
	#M_Tø˚IBPCIBPC2
 (0x7 << 
S_Tø˚IBPCIBPC2
)

	)

3044 
	#S_Tø˚IBPCIBPC1
 3

	)

3045 
	#M_Tø˚IBPCIBPC1
 (0x7 << 
S_Tø˚IBPCIBPC1
)

	)

3046 
	#S_Tø˚IBPCIBPC0
 0

	)

3047 
	#M_Tø˚IBPCIBPC0
 (0x7 << 
S_Tø˚IBPCIBPC0
)

	)

3064 
	#C0_Tø˚DBPC
 
$23
,5

	)

3065 
	#R_C0_Tø˚DBPC
 23

	)

3066 
	#R_C0_SñTø˚DBPC
 5

	)

3068 
	#S_Tø˚DBPCMB
 31

	)

3069 
	#M_Tø˚DBPCMB
 (0x1 << 
S_Tø˚DBPCMB
)

	)

3070 
	#S_Tø˚DBPCPCT
 29

	)

3071 
	#M_Tø˚DBPCPCT
 (0x1 << 
S_Tø˚DBPCPCT
)

	)

3072 
	#S_Tø˚DBPCDE
 28

	)

3073 
	#M_Tø˚DBPCDE
 (0x1 << 
S_Tø˚DBPCDE
)

	)

3074 
	#S_Tø˚DBPCATE
 27

	)

3075 
	#M_Tø˚DBPCATE
 (0x1 << 
S_Tø˚DBPCATE
)

	)

3076 
	#S_Tø˚DBPCDBPC8
 24

	)

3077 
	#M_Tø˚DBPCDBPC8
 (0x7 << 
S_Tø˚DBPCDBPC8
)

	)

3078 
	#S_Tø˚DBPCDBPC7
 21

	)

3079 
	#M_Tø˚DBPCDBPC7
 (0x7 << 
S_Tø˚DBPCDBPC7
)

	)

3080 
	#S_Tø˚DBPCDBPC6
 18

	)

3081 
	#M_Tø˚DBPCDBPC6
 (0x7 << 
S_Tø˚DBPCDBPC6
)

	)

3082 
	#S_Tø˚DBPCDBPC5
 15

	)

3083 
	#M_Tø˚DBPCDBPC5
 (0x7 << 
S_Tø˚DBPCDBPC5
)

	)

3084 
	#S_Tø˚DBPCDBPC4
 12

	)

3085 
	#M_Tø˚DBPCDBPC4
 (0x7 << 
S_Tø˚DBPCDBPC4
)

	)

3086 
	#S_Tø˚DBPCDBPC3
 9

	)

3087 
	#M_Tø˚DBPCDBPC3
 (0x7 << 
S_Tø˚DBPCDBPC3
)

	)

3088 
	#S_Tø˚DBPCDBPC2
 6

	)

3089 
	#M_Tø˚DBPCDBPC2
 (0x7 << 
S_Tø˚DBPCDBPC2
)

	)

3090 
	#S_Tø˚DBPCDBPC1
 3

	)

3091 
	#M_Tø˚DBPCDBPC1
 (0x7 << 
S_Tø˚DBPCDBPC1
)

	)

3092 
	#S_Tø˚DBPCDBPC0
 0

	)

3093 
	#M_Tø˚DBPCDBPC0
 (0x7 << 
S_Tø˚DBPCDBPC0
)

	)

3097 
	#K_Tø˚BPCModeTø˚St›
 0

	)

3098 
	#K_Tø˚BPCModeTø˚Sèπ
 1

	)

3099 
	#K_Tø˚BPCModeQuÆifTø˚
 2

	)

3100 
	#K_Tø˚BPCModeARMTø˚
 3

	)

3101 
	#K_Tø˚BPCModeSt›IfArmed
 4

	)

3102 
	#K_Tø˚BPCModeSèπIfArmed
 5

	)

3103 
	#K_Tø˚BPCModeQuÆIfArmed
 6

	)

3104 
	#K_Tø˚BPCModeDISARM
 7

	)

3121 
	#C0_Debug2
 
$23
,6

	)

3122 
	#R_C0_Debug2
 23

	)

3123 
	#R_C0_SñDebug2
 6

	)

3125 
	#S_Debug2Prm
 3

	)

3126 
	#M_Debug2Prm
 (0x1 << 
S_Debug2Prm
)

	)

3127 
	#S_Debug2DQ
 2

	)

3128 
	#M_Debug2DQ
 (0x1 << 
S_Debug2DQ
)

	)

3129 
	#S_Debug2Tup
 1

	)

3130 
	#M_Debug2Tup
 (0x1 << 
S_Debug2Tup
)

	)

3131 
	#S_Debug2PaCo
 0

	)

3132 
	#M_Debug2PaCo
 (0x1 << 
S_Debug2PaCo
)

	)

3151 
	#C0_Tø˚C⁄åﬁ3
 
$24
,2

	)

3152 
	#R_C0_Tø˚C⁄åﬁ3
 24

	)

3153 
	#R_C0_SñTø˚C⁄åﬁ3
 2

	)

3155 
	#S_Tø˚C⁄åﬁ3PeCOvf
 13

	)

3156 
	#M_Tø˚C⁄åﬁ3PeCOvf
 (0x1 << 
S_Tø˚C⁄åﬁ3PeCOvf
)

	)

3158 
	#S_Tø˚C⁄åﬁ3PeCFCR
 12

	)

3159 
	#M_Tø˚C⁄åﬁ3PeCFCR
 (0x1 << 
S_Tø˚C⁄åﬁ3PeCFCR
)

	)

3161 
	#S_Tø˚C⁄åﬁ3PeCBP
 11

	)

3162 
	#M_Tø˚C⁄åﬁ3PeCBP
 (0x1 << 
S_Tø˚C⁄åﬁ3PeCBP
)

	)

3164 
	#S_Tø˚C⁄åﬁ3PeCSync
 10

	)

3165 
	#M_Tø˚C⁄åﬁ3PeCSync
 (0x1 << 
S_Tø˚C⁄åﬁ3PeCSync
)

	)

3167 
	#S_Tø˚C⁄åﬁ3PeCE
 9

	)

3168 
	#M_Tø˚C⁄åﬁ3PeCE
 (0x1 << 
S_Tø˚C⁄åﬁ3PeCE
)

	)

3170 
	#S_Tø˚C⁄åﬁ3PeC
 8

	)

3171 
	#M_Tø˚C⁄åﬁ3PeC
 (0x1 << 
S_Tø˚C⁄åﬁ3PeC
)

	)

3173 
	#S_Tø˚C⁄åﬁ3TRIdÀ
 2

	)

3174 
	#M_Tø˚C⁄åﬁ3TRIdÀ
 (0x1 << 
S_Tø˚C⁄åﬁ3TRIdÀ
)

	)

3176 
	#S_Tø˚C⁄åﬁ3TRPAD
 1

	)

3177 
	#M_Tø˚C⁄åﬁ3TRPAD
 (0x1 << 
S_Tø˚C⁄åﬁ3TRPAD
)

	)

3179 
	#S_Tø˚C⁄åﬁ3PeCFDT
 0

	)

3180 
	#M_Tø˚C⁄åﬁ3PeCFDT
 (0x1 << 
S_Tø˚C⁄åﬁ3PeCFDT
)

	)

3182 
	#S_Tø˚C⁄åﬁ3FDT
 0

	)

3183 
	#M_Tø˚C⁄åﬁ3FDT
 (0x1 << 
S_Tø˚C⁄åﬁ3FDT
)

	)

3199 
	#C0_DEPC
 
$24


	)

3200 
	#R_C0_DEPC
 24

	)

3201 
	#R_C0_SñDEPC
 0

	)

3203 
	#M_DEEPC0Fõlds
 0x00000000

	)

3204 
	#M_DEEPCRFõlds
 0x00000000

	)

3205 
	#M_DEEPC0Fõlds64
 
	`UINT64_C
(0x0000000000000000)

	)

3206 
	#M_DEEPCRFõlds64
 
	`UINT64_C
(0x0000000000000000)

	)

3230 
	#C0_PîfC¡
 
$25


	)

3231 
	#R_C0_PîfC¡
 25

	)

3232 
	#R_C0_SñPîfC¡
 0

	)

3233 
	#R_C0_SñPîfC¡0
 1

	)

3234 
	#R_C0_SñPîfC¡1
 3

	)

3235 
	#R_C0_SñPîfC¡2
 5

	)

3236 
	#R_C0_SñPîfC¡3
 7

	)

3238 
	#R_C0_PîfCål
 25

	)

3239 
	#R_C0_SñPîfCål0
 0

	)

3240 
	#R_C0_SñPîfCål1
 2

	)

3241 
	#R_C0_SñPîfCål2
 4

	)

3242 
	#R_C0_SñPîfCål3
 6

	)

3244 
	#C0_PRFCNT0
 
C0_PîfC¡


	)

3245 
	#C0_PRFCNT1
 
C0_PîfC¡


	)

3247 
	#S_PîfC¡M
 31

	)

3248 
	#M_PîfC¡M
 (1 << 
S_PîfC¡M
)

	)

3249 #ifde‡
MIPS_Rñó£2


3250 
	#S_PîfC¡W
 30

	)

3251 
	#M_PîfC¡W
 (1 << 
S_PîfC¡W
)

	)

3254 #ifde‡
MIPS_MT


3255 
	#S_PîfC¡TcId
 22

	)

3256 
	#M_PîfC¡TcId
 (0xf‡<< 
S_PîfC¡TcId
)

	)

3257 
	#S_PîfC¡MTEN
 20

	)

3258 
	#M_PîfC¡MTEN
 (3 << 
S_PîfC¡MTEN
)

	)

3259 
	#S_PîfC¡V≥Id
 16

	)

3260 
	#M_PîfC¡V≥Id
 (0x‡<< 
S_PîfC¡V≥Id
)

	)

3263 
	#S_PîfC¡PCTD
 15

	)

3264 
	#M_PîfC¡PCTD
 (1 << 
S_PîfC¡PCTD
)

	)

3265 
	#S_PîfC¡Evít
 5

	)

3266 
	#M_PîfC¡Evít
 (0x3‡<< 
S_PîfC¡Evít
)

	)

3267 
	#S_PîfC¡IE
 4

	)

3268 
	#M_PîfC¡IE
 (1 << 
S_PîfC¡IE
)

	)

3269 
	#S_PîfC¡U
 3

	)

3270 
	#M_PîfC¡U
 (1 << 
S_PîfC¡U
)

	)

3271 
	#S_PîfC¡S
 2

	)

3272 
	#M_PîfC¡S
 (1 << 
S_PîfC¡S
)

	)

3273 
	#S_PîfC¡K
 1

	)

3274 
	#M_PîfC¡K
 (1 << 
S_PîfC¡K
)

	)

3275 
	#S_PîfC¡EXL
 0

	)

3276 
	#M_PîfC¡EXL
 (1 << 
S_PîfC¡EXL
)

	)

3278 #ifde‡
MIPS_Rñó£2


3279 
	#M_PîfC¡0Fõlds
 0x3fff7000

	)

3280 
	#M_PîfC¡RFõlds
 0xc0000000

	)

3282 
	#M_PîfC¡0Fõlds
 0x7ffff800

	)

3283 
	#M_PîfC¡RFõlds
 0x80000000

	)

3298 
	#C0_EºCé
 
$26


	)

3299 
	#R_C0_EºCé
 26

	)

3300 
	#R_C0_SñEºCé
 0

	)

3301 
	#C0_ECC
 
$26


	)

3302 
	#R_C0_ECC
 26

	)

3304 
	#M_EºCé0Fõlds
 0x00000000

	)

3305 
	#M_EºCéRFõlds
 0x00000000

	)

3320 
	#C0_CacheEº
 
$27


	)

3321 
	#R_C0_CacheEº
 27

	)

3322 
	#R_C0_SñCacheEº
 0

	)

3323 
	#C0_CACHE_ERR
 
C0_CacheEº


	)

3325 
	#M_CacheEº0Fõlds
 0x00000000

	)

3326 
	#M_CachEºRFõlds
 0x00000000

	)

3348 
	#C0_TagLo
 
$28


	)

3349 
	#R_C0_TagLo
 28

	)

3350 
	#R_C0_SñTagLo
 0

	)

3351 
	#C0_TAGLO
 
C0_TagLo


	)

3354 
	#S_TagLoPTagLo
 8

	)

3355 
	#M_TagLoPTagLo
 (0xfffff‡<< 
S_TagLoPTagLo
)

	)

3356 
	#S_TagLoV
 7

	)

3357 
	#M_TagLoV
 (1 << 
S_TagLoV
)

	)

3358 
	#S_TagLoD
 6

	)

3359 
	#M_TagLoD
 (1 << 
S_TagLoD
)

	)

3360 
	#S_TagLoL
 5

	)

3361 
	#M_TagLoL
 (1 << 
S_TagLoL
)

	)

3362 
	#S_TagLoP
 0

	)

3363 
	#M_TagLoP
 (1 << 
S_TagLoP
)

	)

3372 
	#C0_ITagLo
 
$28
,0

	)

3373 
	#R_C0_ITagLo
 28

	)

3374 
	#R_C0_SñITagLo
 0

	)

3376 
	#C0_DTagLo
 
$28
,2

	)

3377 
	#R_C0_DTagLo
 28

	)

3378 
	#R_C0_SñDTagLo
 2

	)

3380 
	#M_TagLo0Fõlds
 0x00000000

	)

3381 
	#M_TagLoRFõlds
 0x00000000

	)

3396 
	#C0_D©aLo
 
$28
,1

	)

3397 
	#R_C0_D©aLo
 28

	)

3398 
	#R_C0_SñD©aLo
 1

	)

3406 
	#C0_ID©aLo
 
$28
,1

	)

3407 
	#R_C0_ID©aLo
 28

	)

3408 
	#R_C0_SñID©aLo
 1

	)

3410 
	#C0_DD©aLo
 
$28
,3

	)

3411 
	#R_C0_DD©aLo
 28

	)

3412 
	#R_C0_SñDD©aLo
 3

	)

3414 
	#M_D©aLo0Fõlds
 0x00000000

	)

3415 
	#M_D©aLoRFõlds
 0xffffffff

	)

3430 
	#C0_TagHi
 
$29


	)

3431 
	#R_C0_TagHi
 29

	)

3432 
	#R_C0_SñTagHi
 0

	)

3433 
	#C0_TAGHI
 
C0_TagHi


	)

3441 
	#C0_ITagHi
 
$29
,0

	)

3442 
	#R_C0_ITagHi
 29

	)

3443 
	#R_C0_SñITagHi
 0

	)

3445 
	#C0_DTagHi
 
$29
,2

	)

3446 
	#R_C0_DTagHi
 29

	)

3447 
	#R_C0_SñDTagHi
 2

	)

3449 
	#M_TagHi0Fõlds
 0x00000000

	)

3450 
	#M_TagHiRFõlds
 0x00000000

	)

3465 
	#C0_D©aHi
 
$29
,1

	)

3466 
	#R_C0_D©aHi
 29

	)

3467 
	#R_C0_SñD©aHi
 1

	)

3475 
	#C0_ID©aHi
 
$29
,1

	)

3476 
	#C0_DD©aHi
 
$29
,3

	)

3478 
	#M_D©aHi0Fõlds
 0x00000000

	)

3479 
	#M_D©aHiRFõlds
 0xffffffff

	)

3494 
	#C0_Eº‹EPC
 
$30


	)

3495 
	#R_C0_Eº‹EPC
 30

	)

3496 
	#R_C0_SñEº‹EPC
 0

	)

3497 
	#C0_ERROR_EPC
 
C0_Eº‹EPC


	)

3499 
	#M_Eº‹EPC0Fõlds
 0x00000000

	)

3500 
	#M_Eº‹EPCRFõlds
 0x00000000

	)

3501 
	#M_Eº‹EPC0Fõlds64
 
	`UINT64_C
(0x0000000000000000)

	)

3502 
	#M_Eº‹EPCRFõlds64
 
	`UINT64_C
(0x0000000000000000)

	)

3517 
	#C0_DESAVE
 
$31


	)

3518 
	#R_C0_DESAVE
 31

	)

3519 
	#R_C0_SñDESAVE
 0

	)

3521 
	#M_DESAVE0Fõlds
 0x00000000

	)

3522 
	#M_DESAVERFõlds
 0x00000000

	)

3523 
	#M_DESAVE0Fõlds64
 
	`UINT64_C
(0x0000000000000000)

	)

3524 
	#M_DESAVERFõlds64
 
	`UINT64_C
(0x0000000000000000)

	)

3550 
	#C0_MVPCé
 
$0
, 1

	)

3551 
	#R_C0_MVPCé
 0

	)

3552 
	#R_C0_SñMVPCé
 1

	)

3554 
	#S_MVPCéCPA
 3

	)

3555 
	#M_MVPCéCPA
 (0x1 << 
S_MVPCéCPA
)

	)

3556 
	#S_MVPCéSTLB
 2

	)

3557 
	#M_MVPCéSTLB
 (0x1 << 
S_MVPCéSTLB
)

	)

3558 
	#S_MVPCéVPC
 1

	)

3559 
	#M_MVPCéVPC
 (0x1 << 
S_MVPCéVPC
)

	)

3560 
	#W_MVPCéVPC
 1

	)

3561 
	#S_MVPCéEVP
 0

	)

3562 
	#M_MVPCéEVP
 (0x1 << 
S_MVPCéEVP
)

	)

3564 
	#M_MVPCé0Fõlds
 0xfffffff0

	)

3581 
	#C0_MVPC⁄f0
 
$0
,2

	)

3582 
	#R_C0_MVPC⁄f0
 0

	)

3583 
	#R_C0_SñMVPC⁄f0
 2

	)

3585 
	#S_MVPC⁄f0M
 31

	)

3586 
	#M_MVPC⁄f0M
 (0x1 << 
S_MVPC⁄f0M
)

	)

3587 
	#S_MVPC⁄f0TLBS
 29

	)

3588 
	#M_MVPC⁄f0TLBS
 (0x1 << 
S_MVPC⁄f0TLBS
)

	)

3589 
	#S_MVPC⁄f0GS
 28

	)

3590 
	#M_MVPC⁄f0GS
 (0x1 << 
S_MVPC⁄f0GS
)

	)

3591 
	#S_MVPC⁄f0PCP
 27

	)

3592 
	#M_MVPC⁄f0PCP
 (0x1 << 
S_MVPC⁄f0PCP
)

	)

3593 
	#S_MVPC⁄f0PTLBE
 16

	)

3594 
	#W_MVPC⁄f0PTLBE
 10

	)

3595 
	#M_MVPC⁄f0PTLBE
 (((1 << 
W_MVPC⁄f0PTLBE
Ë-1 ) << 
S_MVPC⁄f0PTLBE
)

	)

3596 
	#S_MVPC⁄f0TCA
 15

	)

3597 
	#M_MVPC⁄f0TCA
 (0x1 << 
S_MVPC⁄f0TCA
)

	)

3598 
	#S_MVPC⁄f0PVPE
 10

	)

3599 
	#W_MVPC⁄f0PVPE
 4

	)

3600 
	#M_MVPC⁄f0PVPE
 (((1 << 
W_MVPC⁄f0PVPE
Ë- 1Ë<< 
S_MVPC⁄f0PVPE
)

	)

3601 
	#S_MVPC⁄f0PTC
 0

	)

3602 
	#W_MVPC⁄f0PTC
 8

	)

3603 
	#M_MVPC⁄f0PTC
 (((1 << 
W_MVPC⁄f0PTC
)-1Ë<< 
S_MVPC⁄f0PTC
)

	)

3605 
	#M_MVPC⁄f00Fõlds
 0x44004300

	)

3606 
	#M_MVPC⁄f0RFõlds
 0xbbffbcff

	)

3622 
	#C0_MVPC⁄f1
 
$0
,3

	)

3623 
	#R_C0_MVPC⁄f1
 0

	)

3624 
	#R_C0_SñMVPC⁄f1
 3

	)

3626 
	#S_MVPC⁄f1C1M
 31

	)

3627 
	#M_MVPC⁄f1C1M
 (0x1 << 
S_MVPC⁄f1C1M
)

	)

3628 
	#S_MVPC⁄f1C1F
 30

	)

3629 
	#M_MVPC⁄f1C1F
 (0x1 << 
S_MVPC⁄f1C1F
)

	)

3630 
	#W_MVPC⁄f1C1F
 1

	)

3631 
	#S_MVPC⁄f1PCX
 20

	)

3632 
	#M_MVPC⁄f1PCX
 (0xf‡<< 
S_MVPC⁄f1PCX
)

	)

3633 
	#S_MVPC⁄f1PCP2
 10

	)

3634 
	#M_MVPC⁄f1PCP2
 (0xf‡<< 
S_MVPC⁄f1PCP2
)

	)

3635 
	#S_MVPC⁄f1PCP1
 0

	)

3636 
	#M_MVPC⁄f1PCP1
 (0xf‡<< 
S_MVPC⁄f1PCP1
)

	)

3637 
	#W_MVPC⁄f1PCP1
 10

	)

3639 
	#M_MVPC⁄f10Fõlds
 0x300c0300

	)

3640 
	#M_MVPC⁄f1RFõlds
 0xcff3fcff

	)

3657 
	#C0_VPECé
 
$1
,1

	)

3658 
	#R_C0_VPECé
 1

	)

3659 
	#R_C0_SñVPECé
 1

	)

3661 
	#S_VPECéYSI
 21

	)

3662 
	#M_VPECéYSI
 (0x1 << 
S_VPECéYSI
)

	)

3663 
	#S_VPECéGSI
 20

	)

3664 
	#M_VPECéGSI
 (0x1 << 
S_VPECéGSI
)

	)

3666 
	#S_VPECéEXCPT
 16

	)

3667 
	#M_VPECéEXCPT
 (0x7 << 
S_VPECéEXCPT
)

	)

3670 
	#K_VPECéEx˝tTU
 0

	)

3671 
	#K_VPECéEx˝tTO
 1

	)

3672 
	#K_VPECéEx˝tIYQ
 2

	)

3673 
	#K_VPECéEx˝tGSE
 3

	)

3674 
	#K_VPECéEx˝tYSE
 4

	)

3675 
	#K_VPECéEx˝tGSSE
 5

	)

3676 
	#K_VPECéEx˝tRes1
 6

	)

3677 
	#K_VPECéEx˝tRes2
 7

	)

3679 
	#S_VPECéTE
 15

	)

3680 
	#M_VPECéTE
 (0x1 << 
S_VPECéTE
)

	)

3681 
	#W_VPECéTE
 1

	)

3683 
	#S_VPECéT¨gTC
 0

	)

3684 
	#M_VPECéT¨gTC
 (0xf‡<< 
S_VPECéT¨gTC
)

	)

3685 
	#W_VPECéT¨gTC
 8

	)

3687 
	#M_VPECé0Fõlds
 0xffc87f00

	)

3688 
	#M_VPECéRFõlds
 0x00070000

	)

3704 
	#C0_VPEC⁄f0
 
$1
,2

	)

3705 
	#R_C0_VPEC⁄f0
 1

	)

3706 
	#R_C0_SñVPEC⁄f0
 2

	)

3708 
	#S_VPEC⁄f0M
 31

	)

3709 
	#M_VPEC⁄f0M
 (0x1 << 
S_VPEC⁄f0M
)

	)

3710 
	#S_VPEC⁄f0XTC
 21

	)

3711 
	#M_VPEC⁄f0XTC
 (0xf‡<< 
S_VPEC⁄f0XTC
)

	)

3712 
	#S_VPEC⁄f0TCS
 19

	)

3713 
	#M_VPEC⁄f0TCS
 (0x1 << 
S_VPEC⁄f0TCS
)

	)

3714 
	#S_VPEC⁄f0SCS
 18

	)

3715 
	#M_VPEC⁄f0SCS
 (0x1 << 
S_VPEC⁄f0SCS
)

	)

3716 
	#S_VPEC⁄f0DCS
 17

	)

3717 
	#M_VPEC⁄f0DCS
 (0x1 << 
S_VPEC⁄f0DCS
)

	)

3718 
	#S_VPEC⁄f0ICS
 16

	)

3719 
	#M_VPEC⁄f0ICS
 (0x1 << 
S_VPEC⁄f0ICS
)

	)

3720 
	#W_VPEC⁄f0XTC
 8

	)

3721 
	#S_VPEC⁄f0MVP
 1

	)

3722 
	#M_VPEC⁄f0MVP
 (0x1 << 
S_VPEC⁄f0MVP
)

	)

3723 
	#S_VPEC⁄f0VPA
 0

	)

3724 
	#M_VPEC⁄f0VPA
 (0x1 << 
S_VPEC⁄f0VPA
)

	)

3725 
	#W_VPEC⁄f0VPA
 1

	)

3727 
	#M_VPEC⁄f00Fõlds
 0x6010fffc

	)

3728 
	#M_VPEC⁄f0RFõlds
 0x800f0000

	)

3742 
	#C0_VPEC⁄f1
 
$1
,3

	)

3743 
	#R_C0_VPEC⁄f1
 1

	)

3744 
	#R_C0_SñVPEC⁄f1
 3

	)

3746 
	#S_VPEC⁄f1NCX
 20

	)

3747 
	#M_VPEC⁄f1NCX
 (0xf‡<< 
S_VPEC⁄f1NCX
)

	)

3748 
	#S_VPEC⁄f1NCP2
 10

	)

3749 
	#M_VPEC⁄f1NCP2
 (0xf‡<< 
S_VPEC⁄f1NCP2
)

	)

3750 
	#S_VPEC⁄f1NCP1
 0

	)

3751 
	#M_VPEC⁄f1NCP1
 (0xf‡<< 
S_VPEC⁄f1NCP1
)

	)

3753 
	#M_VPEC⁄f10Fõlds
 0xf00c0300

	)

3767 
	#C0_YQMask
 
$1
,4

	)

3768 
	#R_C0_YQMask
 1

	)

3769 
	#R_C0_SñYQMask
 4

	)

3771 
	#M_YQMask
 0x7fffffff

	)

3772 
	#M_YQMask0Fõlds
 0x80000000

	)

3786 
	#C0_VPEScheduÀ
 
$1
,5

	)

3787 
	#R_C0_VPEScheduÀ
 1

	)

3788 
	#R_C0_SñVPEScheduÀ
 5

	)

3804 
	#C0_VPEScheFBack
 
$1
,6

	)

3805 
	#R_C0_VPEScheFBack
 1

	)

3806 
	#R_C0_SñVPEScheFBack
 6

	)

3825 
	#C0_VPEO±
 
$1
,7

	)

3826 
	#R_C0_VPEO±
 1

	)

3827 
	#R_C0_SñVPEO±
 7

	)

3829 
	#S_VPEO±IWX
 8

	)

3830 
	#M_VPEO±IWX
 (0xf‡<< 
S_VPEO±IWX
)

	)

3831 
	#S_VPEO±IWX7
 15

	)

3832 
	#M_VPEO±IWX7
 (0x1 << 
S_VPEO±IWX7
)

	)

3833 
	#S_VPEO±IWX6
 14

	)

3834 
	#M_VPEO±IWX6
 (0x1 << 
S_VPEO±IWX6
)

	)

3835 
	#S_VPEO±IWX5
 13

	)

3836 
	#M_VPEO±IWX5
 (0x1 << 
S_VPEO±IWX5
)

	)

3837 
	#S_VPEO±IWX4
 12

	)

3838 
	#M_VPEO±IWX4
 (0x1 << 
S_VPEO±IWX4
)

	)

3839 
	#S_VPEO±IWX3
 11

	)

3840 
	#M_VPEO±IWX3
 (0x1 << 
S_VPEO±IWX3
)

	)

3841 
	#S_VPEO±IWX2
 10

	)

3842 
	#M_VPEO±IWX2
 (0x1 << 
S_VPEO±IWX2
)

	)

3843 
	#S_VPEO±IWX1
 9

	)

3844 
	#M_VPEO±IWX1
 (0x1 << 
S_VPEO±IWX1
)

	)

3845 
	#S_VPEO±IWX0
 8

	)

3846 
	#M_VPEO±IWX0
 (0x1 << 
S_VPEO±IWX0
)

	)

3848 
	#S_VPEO±DWX
 0

	)

3849 
	#M_VPEO±DWX
 (0xf‡<< 
S_VPEO±DWX
)

	)

3850 
	#S_VPEO±DWX7
 7

	)

3851 
	#M_VPEO±DWX7
 (0x1 << 
S_VPEO±DWX7
)

	)

3852 
	#S_VPEO±DWX6
 6

	)

3853 
	#M_VPEO±DWX6
 (0x1 << 
S_VPEO±DWX6
)

	)

3854 
	#S_VPEO±DWX5
 5

	)

3855 
	#M_VPEO±DWX5
 (0x1 << 
S_VPEO±DWX5
)

	)

3856 
	#S_VPEO±DWX4
 4

	)

3857 
	#M_VPEO±DWX4
 (0x1 << 
S_VPEO±DWX4
)

	)

3858 
	#S_VPEO±DWX3
 3

	)

3859 
	#M_VPEO±DWX3
 (0x1 << 
S_VPEO±DWX3
)

	)

3860 
	#S_VPEO±DWX2
 2

	)

3861 
	#M_VPEO±DWX2
 (0x1 << 
S_VPEO±DWX2
)

	)

3862 
	#S_VPEO±DWX1
 1

	)

3863 
	#M_VPEO±DWX1
 (0x1 << 
S_VPEO±DWX1
)

	)

3864 
	#S_VPEO±DWX0
 0

	)

3865 
	#M_VPEO±DWX0
 (0x1 << 
S_VPEO±DWX0
)

	)

3882 
	#C0_TCSètus
 
$2
,1

	)

3883 
	#R_C0_TCSètus
 2

	)

3884 
	#R_C0_SñTCSètus
 1

	)

3886 
	#S_TCSètusTCU
 28

	)

3887 
	#M_TCSètusTCU
 (0x‡<< 
S_TCSètusTCU
)

	)

3888 
	#S_TCSètusTCU3
 31

	)

3889 
	#M_TCSètusTCU3
 (0x1 << 
S_TCSètusTCU3
)

	)

3890 
	#S_TCSètusTCU2
 30

	)

3891 
	#M_TCSètusTCU2
 (0x1 << 
S_TCSètusTCU2
)

	)

3892 
	#S_TCSètusTCU1
 29

	)

3893 
	#M_TCSètusTCU1
 (0x1 << 
S_TCSètusTCU1
)

	)

3894 
	#S_TCSètusTCU0
 28

	)

3895 
	#M_TCSètusTCU0
 (0x1 << 
S_TCSètusTCU0
)

	)

3896 
	#S_TCSètusTMX
 27

	)

3897 
	#M_TCSètusTMX
 (0x1 << 
S_TCSètusTMX
)

	)

3898 
	#S_TCSètusRNST
 23

	)

3899 
	#M_TCSètusRNST
 (0x3 << 
S_TCSètusRNST
)

	)

3900 
	#S_TCSètusTDS
 21

	)

3901 
	#M_TCSètusTDS
 (0x1 << 
S_TCSètusTDS
)

	)

3902 
	#S_TCSètusDT
 20

	)

3903 
	#M_TCSètusDT
 (0x1 << 
S_TCSètusDT
)

	)

3904 
	#S_TCSètusIm∂
 16

	)

3905 
	#M_TCSètusIm∂
 (0x‡<< 
S_TCSètusIm∂
)

	)

3906 
	#S_TCSètusDA
 15

	)

3907 
	#M_TCSètusDA
 (0x1 << 
S_TCSètusDA
)

	)

3908 
	#S_TCSètusA
 13

	)

3909 
	#M_TCSètusA
 (0x1 << 
S_TCSètusA
)

	)

3910 
	#S_TCSètusTKSU
 11

	)

3911 
	#M_TCSètusTKSU
 (0x3 << 
S_TCSètusTKSU
)

	)

3912 
	#S_TCSètusIXMT
 10

	)

3913 
	#M_TCSètusIXMT
 (0x1 << 
S_TCSètusIXMT
)

	)

3914 
	#W_TCSètusIXMT
 1

	)

3915 
	#S_TCSètusTASID
 0

	)

3916 
	#M_TCSètusTASID
 (0xf‡<< 
S_TCSètusTASID
)

	)

3917 
	#W_TCSètusTASID
 8

	)

3920 
	#K_TCSètusRNSTRun
 0

	)

3921 
	#K_TCSètusRNSTWaô
 1

	)

3922 
	#K_TCSètusRNSTYõld
 2

	)

3923 
	#K_TCSètusRNSTSt‹e
 3

	)

3925 
	#M_TCSètus0Fõlds
 0x06404300

	)

3941 
	#C0_TCBöd
 
$2
,2

	)

3942 
	#R_C0_TCBöd
 2

	)

3943 
	#R_C0_SñTCBöd
 2

	)

3945 
	#S_TCBödCurTC
 21

	)

3946 
	#M_TCBödCurTC
 (0xf‡<< 
S_TCBödCurTC
)

	)

3947 
	#W_TCBödCurTC
 8

	)

3949 
	#S_TCBödA0
 18

	)

3950 
	#M_TCBödA0
 (0x7 << 
S_TCBödA0
)

	)

3952 
	#S_TCBödTBE
 17

	)

3953 
	#M_TCBödTBE
 (0x1 << 
S_TCBödTBE
)

	)

3955 
	#S_TCBödCurVPE
 0

	)

3956 
	#M_TCBödCurVPE
 (0x‡<< 
S_TCBödCurVPE
)

	)

3957 
	#W_TCBödCurVPE
 4

	)

3959 
	#M_TCBöd0Fõlds
 0xe003fff0

	)

3960 
	#M_TCBödRFõlds
 0x001c0000

	)

3974 
	#C0_TCRe°¨t
 
$2
,3

	)

3975 
	#R_C0_TCRe°¨t
 2

	)

3976 
	#R_C0_SñTCRe°¨t
 3

	)

3978 
	#M_TCRe°¨t
 0xffffffff

	)

3992 
	#C0_TCHÆt
 
$2
,4

	)

3993 
	#R_C0_TCHÆt
 2

	)

3994 
	#R_C0_SñTCHÆt
 4

	)

3996 
	#S_TCHÆtH
 0

	)

3997 
	#M_TCHÆtH
 (0x1 << 
S_TCHÆtH
)

	)

3999 
	#M_TCHÆt0Fõlds
 0xffffff„

	)

4013 
	#C0_TCC⁄ãxt
 
$2
,5

	)

4014 
	#R_C0_TCC⁄ãxt
 2

	)

4015 
	#R_C0_SñTCC⁄ãxt
 5

	)

4017 
	#M_TCC⁄ãxt
 0xffffffff

	)

4032 
	#C0_TCScheduÀ
 
$2
,6

	)

4033 
	#R_C0_TCScheduÀ
 2

	)

4034 
	#R_C0_SñTCScheduÀ
 6

	)

4036 
	#M_TCScheduÀ
 0xffffffff

	)

4051 
	#C0_TCScheFBack
 
$2
,7

	)

4052 
	#R_C0_TCScheFBack
 2

	)

4053 
	#R_C0_SñTCScheFBack
 7

	)

4055 
	#M_TCScheFBack
 0xffffffff

	)

4072 
	#C0_SRSC⁄f0
 
$6
,1

	)

4073 
	#R_C0_SRSC⁄f0
 6

	)

4074 
	#R_C0_SñSRSC⁄f0
 1

	)

4076 
	#S_SRSC⁄f0M
 31

	)

4077 
	#M_SRSC⁄f0M
 (0x1 << 
S_SRSC⁄f0M
)

	)

4078 
	#S_SRSC⁄f0SRS3
 20

	)

4079 
	#M_SRSC⁄f0SRS3
 (0x3f‡<< 
S_SRSC⁄f0SRS3
)

	)

4080 
	#S_SRSC⁄f0SRS2
 10

	)

4081 
	#M_SRSC⁄f0SRS2
 (0x3f‡<< 
S_SRSC⁄f0SRS2
)

	)

4082 
	#S_SRSC⁄f0SRS1
 0

	)

4083 
	#M_SRSC⁄f0SRS1
 (0x3f‡<< 
S_SRSC⁄f0SRS1
)

	)

4085 
	#M_SRSC⁄f00Fõlds
 0x40000000

	)

4086 
	#M_SRSC⁄f0RFõlds
 0x80000000

	)

4100 
	#C0_SRSC⁄f1
 
$6
,2

	)

4101 
	#R_C0_SRSC⁄f1
 6

	)

4102 
	#R_C0_SñSRSC⁄f1
 2

	)

4104 
	#S_SRSC⁄f1M
 31

	)

4105 
	#M_SRSC⁄f1M
 (0x1 << 
S_SRSC⁄f1M
)

	)

4106 
	#S_SRSC⁄f1SRS6
 20

	)

4107 
	#M_SRSC⁄f1SRS6
 (0x3f‡<< 
S_SRSC⁄f1SRS6
)

	)

4108 
	#S_SRSC⁄f1SRS5
 10

	)

4109 
	#M_SRSC⁄f1SRS5
 (0x3f‡<< 
S_SRSC⁄f1SRS5
)

	)

4110 
	#S_SRSC⁄f1SRS4
 0

	)

4111 
	#M_SRSC⁄f1SRS4
 (0x3f‡<< 
S_SRSC⁄f1SRS4
)

	)

4113 
	#M_SRSC⁄f10Fõlds
 0x40000000

	)

4114 
	#M_SRSC⁄f1RFõlds
 0x80000000

	)

4128 
	#C0_SRSC⁄f2
 
$6
,3

	)

4129 
	#R_C0_SRSC⁄f2
 6

	)

4130 
	#R_C0_SñSRSC⁄f2
 3

	)

4132 
	#S_SRSC⁄f2M
 31

	)

4133 
	#M_SRSC⁄f2M
 (0x1 << 
S_SRSC⁄f2M
)

	)

4134 
	#S_SRSC⁄f2SRS9
 20

	)

4135 
	#M_SRSC⁄f2SRS9
 (0x3f‡<< 
S_SRSC⁄f2SRS9
)

	)

4136 
	#S_SRSC⁄f2SRS8
 10

	)

4137 
	#M_SRSC⁄f2SRS8
 (0x3f‡<< 
S_SRSC⁄f2SRS8
)

	)

4138 
	#S_SRSC⁄f2SRS7
 0

	)

4139 
	#M_SRSC⁄f2SRS7
 (0x3f‡<< 
S_SRSC⁄f2SRS7
)

	)

4141 
	#M_SRSC⁄f20Fõlds
 0x40000000

	)

4142 
	#M_SRSC⁄f2RFõlds
 0x80000000

	)

4156 
	#C0_SRSC⁄f3
 
$6
,4

	)

4157 
	#R_C0_SRSC⁄f3
 6

	)

4158 
	#R_C0_SñSRSC⁄f3
 4

	)

4160 
	#S_SRSC⁄f3M
 31

	)

4161 
	#M_SRSC⁄f3M
 (0x1 << 
S_SRSC⁄f3M
)

	)

4162 
	#S_SRSC⁄f3SRS12
 20

	)

4163 
	#M_SRSC⁄f3SRS12
 (0x3f‡<< 
S_SRSC⁄f3SRS12
)

	)

4164 
	#S_SRSC⁄f3SRS11
 10

	)

4165 
	#M_SRSC⁄f3SRS11
 (0x3f‡<< 
S_SRSC⁄f3SRS11
)

	)

4166 
	#S_SRSC⁄f3SRS10
 0

	)

4167 
	#M_SRSC⁄f3SRS10
 (0x3f‡<< 
S_SRSC⁄f3SRS10
)

	)

4169 
	#M_SRSC⁄f30Fõlds
 0x40000000

	)

4170 
	#M_SRSC⁄f3RFõlds
 0x80000000

	)

4184 
	#C0_SRSC⁄f4
 
$6
,5

	)

4185 
	#R_C0_SRSC⁄f4
 6

	)

4186 
	#R_C0_SñSRSC⁄f4
 5

	)

4188 
	#S_SRSC⁄f4SRS15
 20

	)

4189 
	#M_SRSC⁄f4SRS15
 (0x3f‡<< 
S_SRSC⁄f4SRS15
)

	)

4190 
	#S_SRSC⁄f4SRS14
 10

	)

4191 
	#M_SRSC⁄f4SRS14
 (0x3f‡<< 
S_SRSC⁄f4SRS14
)

	)

4192 
	#S_SRSC⁄f4SRS13
 0

	)

4193 
	#M_SRSC⁄f4SRS13
 (0x3f‡<< 
S_SRSC⁄f4SRS13
)

	)

4195 
	#M_SRSC⁄f40Fõlds
 0xC0000000

	)

4196 
	#M_SRSC⁄f4RFõlds
 0x00000000

	)

4212 #i‡
deföed
(
__ASSEMBLER__
)

4213 
	#Â0
 
$f0


	)

4214 
	#Â1
 
$f1


	)

4215 
	#Â2
 
$f2


	)

4216 
	#Â3
 
$f3


	)

4217 
	#Â4
 
$f4


	)

4218 
	#Â5
 
$f5


	)

4219 
	#Â6
 
$f6


	)

4220 
	#Â7
 
$f7


	)

4221 
	#Â8
 
$f8


	)

4222 
	#Â9
 
$f9


	)

4223 
	#Â10
 
$f10


	)

4224 
	#Â11
 
$f11


	)

4225 
	#Â12
 
$f12


	)

4226 
	#Â13
 
$f13


	)

4227 
	#Â14
 
$f14


	)

4228 
	#Â15
 
$f15


	)

4229 
	#Â16
 
$f16


	)

4230 
	#Â17
 
$f17


	)

4231 
	#Â18
 
$f18


	)

4232 
	#Â19
 
$f19


	)

4233 
	#Â20
 
$f20


	)

4234 
	#Â21
 
$f21


	)

4235 
	#Â22
 
$f22


	)

4236 
	#Â23
 
$f23


	)

4237 
	#Â24
 
$f24


	)

4238 
	#Â25
 
$f25


	)

4239 
	#Â26
 
$f26


	)

4240 
	#Â27
 
$f27


	)

4241 
	#Â28
 
$f28


	)

4242 
	#Â29
 
$f29


	)

4243 
	#Â30
 
$f30


	)

4244 
	#Â31
 
$f31


	)

4253 #i‡
deföed
(
__ASSEMBLER__
)

4254 
	#Â1_eví
 
$f0


	)

4255 
	#Â3_eví
 
$f2


	)

4256 
	#Â5_eví
 
$f4


	)

4257 
	#Â7_eví
 
$f6


	)

4258 
	#Â9_eví
 
$f8


	)

4259 
	#Â11_eví
 
$f10


	)

4260 
	#Â13_eví
 
$f12


	)

4261 
	#Â15_eví
 
$f14


	)

4262 
	#Â17_eví
 
$f16


	)

4263 
	#Â19_eví
 
$f18


	)

4264 
	#Â21_eví
 
$f20


	)

4265 
	#Â23_eví
 
$f22


	)

4266 
	#Â25_eví
 
$f24


	)

4267 
	#Â27_eví
 
$f26


	)

4268 
	#Â29_eví
 
$f28


	)

4269 
	#Â31_eví
 
$f30


	)

4271 
	#Â0_odd
 
$f1


	)

4272 
	#Â2_odd
 
$f3


	)

4273 
	#Â4_odd
 
$f5


	)

4274 
	#Â6_odd
 
$f7


	)

4275 
	#Â8_odd
 
$f9


	)

4276 
	#Â10_odd
 
$f11


	)

4277 
	#Â12_odd
 
$f13


	)

4278 
	#Â14_odd
 
$f15


	)

4279 
	#Â16_odd
 
$f17


	)

4280 
	#Â18_odd
 
$f19


	)

4281 
	#Â20_odd
 
$f21


	)

4282 
	#Â22_odd
 
$f23


	)

4283 
	#Â24_odd
 
$f25


	)

4284 
	#Â26_odd
 
$f27


	)

4285 
	#Â28_odd
 
$f29


	)

4286 
	#Â30_odd
 
$f31


	)

4299 
	#R_Â0
 0

	)

4300 
	#R_Â1
 1

	)

4301 
	#R_Â2
 2

	)

4302 
	#R_Â3
 3

	)

4303 
	#R_Â4
 4

	)

4304 
	#R_Â5
 5

	)

4305 
	#R_Â6
 6

	)

4306 
	#R_Â7
 7

	)

4307 
	#R_Â8
 8

	)

4308 
	#R_Â9
 9

	)

4309 
	#R_Â10
 10

	)

4310 
	#R_Â11
 11

	)

4311 
	#R_Â12
 12

	)

4312 
	#R_Â13
 13

	)

4313 
	#R_Â14
 14

	)

4314 
	#R_Â15
 15

	)

4315 
	#R_Â16
 16

	)

4316 
	#R_Â17
 17

	)

4317 
	#R_Â18
 18

	)

4318 
	#R_Â19
 19

	)

4319 
	#R_Â20
 20

	)

4320 
	#R_Â21
 21

	)

4321 
	#R_Â22
 22

	)

4322 
	#R_Â23
 23

	)

4323 
	#R_Â24
 24

	)

4324 
	#R_Â25
 25

	)

4325 
	#R_Â26
 26

	)

4326 
	#R_Â27
 27

	)

4327 
	#R_Â28
 28

	)

4328 
	#R_Â29
 29

	)

4329 
	#R_Â30
 30

	)

4330 
	#R_Â31
 31

	)

4339 #i‡
deföed
(
__ASSEMBLER__
)

4340 
	#fc0
 
$0


	)

4341 
	#fc25
 
$25


	)

4342 
	#fc26
 
$26


	)

4343 
	#fc28
 
$28


	)

4344 
	#fc31
 
$31


	)

4357 
	#R_fc0
 0

	)

4358 
	#R_fc25
 25

	)

4359 
	#R_fc26
 26

	)

4360 
	#R_fc28
 28

	)

4361 
	#R_fc31
 31

	)

4370 #i‡
deföed
(
__ASSEMBLER__
)

4371 
	#cc0
 
$fcc0


	)

4372 
	#cc1
 
$fcc1


	)

4373 
	#cc2
 
$fcc2


	)

4374 
	#cc3
 
$fcc3


	)

4375 
	#cc4
 
$fcc4


	)

4376 
	#cc5
 
$fcc5


	)

4377 
	#cc6
 
$fcc6


	)

4378 
	#cc7
 
$fcc7


	)

4391 
	#R_cc0
 0

	)

4392 
	#R_cc1
 1

	)

4393 
	#R_cc2
 2

	)

4394 
	#R_cc3
 3

	)

4395 
	#R_cc4
 4

	)

4396 
	#R_cc5
 5

	)

4397 
	#R_cc6
 6

	)

4398 
	#R_cc7
 7

	)

4415 
	#C1_FIR
 
$0


	)

4416 
	#R_C1_FIR
 0

	)

4418 #ifde‡
MIPS_Rñó£2


4419 
	#S_FIRF64
 22

	)

4420 
	#M_FIRF64
 (0x1 << 
S_FIRC⁄figF64
)

	)

4421 
	#S_FIRL
 21

	)

4422 
	#M_FIRL
 (0x1 << 
S_FIRC⁄figL
)

	)

4423 
	#S_FIRW
 20

	)

4424 
	#M_FIRW
 (0x1 << 
S_FIRC⁄figW
)

	)

4425 
	#S_FIRC⁄figF64
 
S_FIRF64


	)

4426 
	#M_FIRC⁄figF64
 
M_FIRF64


	)

4427 
	#S_FIRC⁄figL
 
S_FIRL


	)

4428 
	#M_FIRC⁄figL
 
M_FIRL


	)

4429 
	#S_FIRC⁄figW
 
S_FIRW


	)

4430 
	#M_FIRC⁄figW
 
M_FIRW


	)

4432 
	#S_FIR3D
 19

	)

4433 
	#M_FIR3D
 (0x1 << 
S_FIRC⁄fig3D
)

	)

4434 
	#S_FIRPS
 18

	)

4435 
	#M_FIRPS
 (0x1 << 
S_FIRC⁄figPS
)

	)

4436 
	#S_FIRD
 17

	)

4437 
	#M_FIRD
 (0x1 << 
S_FIRC⁄figD
)

	)

4438 
	#S_FIRS
 16

	)

4439 
	#M_FIRS
 (0x1 << 
S_FIRC⁄figS
)

	)

4440 
	#S_FIRC⁄fig3D
 
S_FIR3D


	)

4441 
	#M_FIRC⁄fig3D
 
M_FIR3D


	)

4442 
	#S_FIRC⁄figPS
 
S_FIRPS


	)

4443 
	#M_FIRC⁄figPS
 
M_FIRPS


	)

4444 
	#S_FIRC⁄figD
 
S_FIRD


	)

4445 
	#M_FIRC⁄figD
 
M_FIRD


	)

4446 
	#S_FIRC⁄figS
 
S_FIRS


	)

4447 
	#M_FIRC⁄figS
 
M_FIRS


	)

4448 #ifde‡
MIPS_Rñó£2


4449 
	#M_FIRC⁄figAŒ
 (
M_FIRC⁄figS
|
M_FIRC⁄figD
|
M_FIRC⁄figPS
|
M_FIRC⁄fig3D
|
M_FIRC⁄figW
|
M_FIRC⁄figL
|
M_FIRC⁄figF64
)

	)

4451 
	#M_FIRC⁄figAŒ
 (
M_FIRC⁄figS
|
M_FIRC⁄figD
|
M_FIRC⁄figPS
|
M_FIRC⁄fig3D
)

	)

4453 
	#S_FIRC⁄figAŒ
 16

	)

4455 
	#S_FIRImp
 8

	)

4456 
	#M_FIRImp
 (0xf‡<< 
S_FIRImp
)

	)

4458 
	#S_FIRRev
 0

	)

4459 
	#M_FIRRev
 (0xf‡<< 
S_FIRRev
)

	)

4461 #ifde‡
MIPS_Rñó£2


4462 
	#M_FIR0Fõlds
 0xf0800000

	)

4463 
	#M_FIRRFõlds
 0x007fffff

	)

4465 
	#M_FIR0Fõlds
 0xfff00000

	)

4466 
	#M_FIRRFõlds
 0x000fffff

	)

4482 
	#C1_FCCR
 
$25


	)

4483 
	#R_C1_FCCR
 25

	)

4485 
	#S_FCCRCC
 0

	)

4486 
	#M_FCCRCC
 (0xf‡<< 
S_FCCRCC
)

	)

4487 
	#S_FCCRCC7
 7

	)

4488 
	#M_FCCRCC7
 (0x1 << 
S_FCCRCC7
)

	)

4489 
	#S_FCCRCC6
 6

	)

4490 
	#M_FCCRCC6
 (0x1 << 
S_FCCRCC6
)

	)

4491 
	#S_FCCRCC5
 5

	)

4492 
	#M_FCCRCC5
 (0x1 << 
S_FCCRCC5
)

	)

4493 
	#S_FCCRCC4
 4

	)

4494 
	#M_FCCRCC4
 (0x1 << 
S_FCCRCC4
)

	)

4495 
	#S_FCCRCC3
 3

	)

4496 
	#M_FCCRCC3
 (0x1 << 
S_FCCRCC3
)

	)

4497 
	#S_FCCRCC2
 2

	)

4498 
	#M_FCCRCC2
 (0x1 << 
S_FCCRCC2
)

	)

4499 
	#S_FCCRCC1
 1

	)

4500 
	#M_FCCRCC1
 (0x1 << 
S_FCCRCC1
)

	)

4501 
	#S_FCCRCC0
 0

	)

4502 
	#M_FCCRCC0
 (0x1 << 
S_FCCRCC0
)

	)

4504 
	#M_FCCR0Fõlds
 0xffffff00

	)

4505 
	#M_FCCRRFõlds
 0x000000ff

	)

4521 
	#C1_FEXR
 
$26


	)

4522 
	#R_C1_FEXR
 26

	)

4524 
	#S_FEXRExc
 12

	)

4525 
	#M_FEXRExc
 (0x3‡<< 
S_FEXRExc
)

	)

4526 
	#S_FEXRExcE
 17

	)

4527 
	#M_FEXRExcE
 (0x1 << 
S_FEXRExcE
)

	)

4528 
	#S_FEXRExcV
 16

	)

4529 
	#M_FEXRExcV
 (0x1 << 
S_FEXRExcV
)

	)

4530 
	#S_FEXRExcZ
 15

	)

4531 
	#M_FEXRExcZ
 (0x1 << 
S_FEXRExcZ
)

	)

4532 
	#S_FEXRExcO
 14

	)

4533 
	#M_FEXRExcO
 (0x1 << 
S_FEXRExcO
)

	)

4534 
	#S_FEXRExcU
 13

	)

4535 
	#M_FEXRExcU
 (0x1 << 
S_FEXRExcU
)

	)

4536 
	#S_FEXRExcI
 12

	)

4537 
	#M_FEXRExcI
 (0x1 << 
S_FEXRExcI
)

	)

4539 
	#S_FEXRFlg
 2

	)

4540 
	#M_FEXRFlg
 (0x1‡<< 
S_FEXRFlg
)

	)

4541 
	#S_FEXRFlgV
 6

	)

4542 
	#M_FEXRFlgV
 (0x1 << 
S_FEXRFlgV
)

	)

4543 
	#S_FEXRFlgZ
 5

	)

4544 
	#M_FEXRFlgZ
 (0x1 << 
S_FEXRFlgZ
)

	)

4545 
	#S_FEXRFlgO
 4

	)

4546 
	#M_FEXRFlgO
 (0x1 << 
S_FEXRFlgO
)

	)

4547 
	#S_FEXRFlgU
 3

	)

4548 
	#M_FEXRFlgU
 (0x1 << 
S_FEXRFlgU
)

	)

4549 
	#S_FEXRFlgI
 2

	)

4550 
	#M_FEXRFlgI
 (0x1 << 
S_FEXRFlgI
)

	)

4552 
	#M_FEXR0Fõlds
 0xfffc0f83

	)

4553 
	#M_FEXRRFõlds
 0x00000000

	)

4569 
	#C1_FENR
 
$28


	)

4570 
	#R_C1_FENR
 28

	)

4572 
	#S_FENRE«
 7

	)

4573 
	#M_FENRE«
 (0x1‡<< 
S_FENRE«
)

	)

4574 
	#S_FENRE«V
 11

	)

4575 
	#M_FENRE«V
 (0x1 << 
S_FENRE«V
)

	)

4576 
	#S_FENRE«Z
 10

	)

4577 
	#M_FENRE«Z
 (0x1 << 
S_FENRE«Z
)

	)

4578 
	#S_FENRE«O
 9

	)

4579 
	#M_FENRE«O
 (0x1 << 
S_FENRE«O
)

	)

4580 
	#S_FENRE«U
 8

	)

4581 
	#M_FENRE«U
 (0x1 << 
S_FENRE«U
)

	)

4582 
	#S_FENRE«I
 7

	)

4583 
	#M_FENRE«I
 (0x1 << 
S_FENRE«I
)

	)

4585 
	#S_FENRFS
 2

	)

4586 
	#M_FENRFS
 (0x1 << 
S_FENRFS
)

	)

4588 
	#S_FENRRM
 0

	)

4589 
	#M_FENRRM
 (0x3 << 
S_FENRRM
)

	)

4591 
	#M_FENR0Fõlds
 0xfffff078

	)

4592 
	#M_FENRRFõlds
 0x00000000

	)

4608 
	#C1_FCSR
 
$31


	)

4609 
	#R_C1_FCSR
 31

	)

4611 
	#S_FCSRFCC7_1
 25

	)

4612 
	#M_FCSRFCC7_1
 (0x7‡<< 
S_FCSRFCC7_1
)

	)

4613 
	#S_FCSRCC7
 31

	)

4614 
	#M_FCSRCC7
 (0x1 << 
S_FCSRCC7
)

	)

4615 
	#S_FCSRCC6
 30

	)

4616 
	#M_FCSRCC6
 (0x1 << 
S_FCSRCC6
)

	)

4617 
	#S_FCSRCC5
 29

	)

4618 
	#M_FCSRCC5
 (0x1 << 
S_FCSRCC5
)

	)

4619 
	#S_FCSRCC4
 28

	)

4620 
	#M_FCSRCC4
 (0x1 << 
S_FCSRCC4
)

	)

4621 
	#S_FCSRCC3
 27

	)

4622 
	#M_FCSRCC3
 (0x1 << 
S_FCSRCC3
)

	)

4623 
	#S_FCSRCC2
 26

	)

4624 
	#M_FCSRCC2
 (0x1 << 
S_FCSRCC2
)

	)

4625 
	#S_FCSRCC1
 25

	)

4626 
	#M_FCSRCC1
 (0x1 << 
S_FCSRCC1
)

	)

4628 
	#S_FCSRFS
 24

	)

4629 
	#M_FCSRFS
 (0x1 << 
S_FCSRFS
)

	)

4631 
	#S_FCSRCC0
 23

	)

4632 
	#M_FCSRCC0
 (0x1 << 
S_FCSRCC0
)

	)

4633 
	#S_FCSRCC
 
S_FCSRCC0


	)

4634 
	#M_FCSRCC
 
M_FCSRCC0


	)

4636 
	#S_FCSRIm∂
 21

	)

4637 
	#M_FCSRIm∂
 (0x3 << 
S_FCSRIm∂
)

	)

4639 
	#S_FCSRExc
 12

	)

4640 
	#M_FCSRExc
 (0x3‡<< 
S_FCSRExc
)

	)

4641 
	#S_FCSRExcE
 17

	)

4642 
	#M_FCSRExcE
 (0x1 << 
S_FCSRExcE
)

	)

4643 
	#S_FCSRExcV
 16

	)

4644 
	#M_FCSRExcV
 (0x1 << 
S_FCSRExcV
)

	)

4645 
	#S_FCSRExcZ
 15

	)

4646 
	#M_FCSRExcZ
 (0x1 << 
S_FCSRExcZ
)

	)

4647 
	#S_FCSRExcO
 14

	)

4648 
	#M_FCSRExcO
 (0x1 << 
S_FCSRExcO
)

	)

4649 
	#S_FCSRExcU
 13

	)

4650 
	#M_FCSRExcU
 (0x1 << 
S_FCSRExcU
)

	)

4651 
	#S_FCSRExcI
 12

	)

4652 
	#M_FCSRExcI
 (0x1 << 
S_FCSRExcI
)

	)

4654 
	#S_FCSRE«
 7

	)

4655 
	#M_FCSRE«
 (0x1‡<< 
S_FCSRE«
)

	)

4656 
	#S_FCSRE«V
 11

	)

4657 
	#M_FCSRE«V
 (0x1 << 
S_FCSRE«V
)

	)

4658 
	#S_FCSRE«Z
 10

	)

4659 
	#M_FCSRE«Z
 (0x1 << 
S_FCSRE«Z
)

	)

4660 
	#S_FCSRE«O
 9

	)

4661 
	#M_FCSRE«O
 (0x1 << 
S_FCSRE«O
)

	)

4662 
	#S_FCSRE«U
 8

	)

4663 
	#M_FCSRE«U
 (0x1 << 
S_FCSRE«U
)

	)

4664 
	#S_FCSRE«I
 7

	)

4665 
	#M_FCSRE«I
 (0x1 << 
S_FCSRE«I
)

	)

4667 
	#S_FCSRFlg
 2

	)

4668 
	#M_FCSRFlg
 (0x1‡<< 
S_FCSRFlg
)

	)

4669 
	#S_FCSRFlgV
 6

	)

4670 
	#M_FCSRFlgV
 (0x1 << 
S_FCSRFlgV
)

	)

4671 
	#S_FCSRFlgZ
 5

	)

4672 
	#M_FCSRFlgZ
 (0x1 << 
S_FCSRFlgZ
)

	)

4673 
	#S_FCSRFlgO
 4

	)

4674 
	#M_FCSRFlgO
 (0x1 << 
S_FCSRFlgO
)

	)

4675 
	#S_FCSRFlgU
 3

	)

4676 
	#M_FCSRFlgU
 (0x1 << 
S_FCSRFlgU
)

	)

4677 
	#S_FCSRFlgI
 2

	)

4678 
	#M_FCSRFlgI
 (0x1 << 
S_FCSRFlgI
)

	)

4680 
	#S_FCSRRM
 0

	)

4681 
	#M_FCSRRM
 (0x3 << 
S_FCSRRM
)

	)

4683 
	#M_FCSR0Fõlds
 0x001c0000

	)

4684 
	#M_FCSRRFõlds
 0x00000000

	)

4689 
	#K_FCSRRM_RN
 0

	)

4690 
	#K_FCSRRM_RZ
 1

	)

4691 
	#K_FCSRRM_RP
 2

	)

4692 
	#K_FCSRRM_RM
 3

	)

4705 
	#S_FP_SINGLE_SIGN
 31

	)

4706 
	#M_FP_SINGLE_SIGN
 (0x1 << 
S_FP_SINGLE_SIGN
)

	)

4707 
	#S_FP_SINGLE_EXPO
 23

	)

4708 
	#M_FP_SINGLE_EXPO
 (0xf‡<< 
S_FP_SINGLE_SIGN
)

	)

4709 
	#S_FP_SINGLE_FRAC
 0

	)

4710 
	#M_FP_SINGLE_FRAC
 (0x7ffff‡<< 
S_FP_SINGLE_SIGN
)

	)

4711 
	#S_FP_DOUBLE_SIGN
 63

	)

4712 
	#M_FP_DOUBLE_SIGN
 (
	`UINT64_C
(0x1Ë<< 
S_FP_DOUBLE_SIGN
)

	)

4713 
	#S_FP_DOUBLE_EXPO
 52

	)

4714 
	#M_FP_DOUBLE_EXPO
 (
	`UINT64_C
(0x7ffË<< 
S_FP_DOUBLE_SIGN
)

	)

4715 
	#S_FP_DOUBLE_FRAC
 0

	)

4716 
	#M_FP_DOUBLE_FRAC
 (
	`UINT64_C
(0xfffffffffffffË<< 
S_FP_DOUBLE_SIGN
)

	)

4718 
	#S_FP_PAIREDSINGLE_SIGN
 63

	)

4719 
	#M_FP_PAIREDSINGLE_SIGN
 (
	`UINT64_C
(0x1Ë<< 
S_FP_PAIREDSINGLE_SIGN
)

	)

4720 
	#S_FP_PAIREDSINGLE_EXPO
 52

	)

4721 
	#M_FP_PAIREDSINGLE_EXPO
 (
	`UINT64_C
(0xffË<< 
S_FP_PAIREDSINGLE_SIGN
)

	)

4722 
	#S_FP_PAIREDSINGLE_FRAC
 32

	)

4723 
	#M_FP_PAIREDSINGLE_FRAC
 (
	`UINT64_C
(0x7fffffË<< 
S_FP_PAIREDSINGLE_SIGN
)

	)

4728 
	#S_FIX_WORD_SIGN
 31

	)

4729 
	#M_FIX_WORD_SIGN
 (0x1 << 
S_FIX_WORD_SIGN
)

	)

4730 
	#S_FIX_WORD_VALUE
 0

	)

4731 
	#M_FIX_WORD_VALUE
 (0x7ffffff‡<< 
S_FIX_WORD_VALUE
)

	)

4732 
	#S_FIX_LONG_SIGN
 63

	)

4733 
	#M_FIX_LONG_SIGN
 (
	`UINT64_C
(0x1Ë<< 
S_FIX_LONG_SIGN
)

	)

4734 
	#S_FIX_LONG_VALUE
 0

	)

4735 
	#M_FIX_LONG_VALUE
 (
	`UINT64_C
(0x7fffffffffffffffË<< 
S_FIX_LONG_VALUE
)

	)

4751 
	#S_DSPCéCc⁄d
 24

	)

4752 
	#M_DSPCéCc⁄d
 (0x‡<< 
S_DSPCéCc⁄d
)

	)

4754 
	#S_DSPCéOuÊag
 16

	)

4755 
	#M_DSPCéOuÊag
 (0xf‡<< 
S_DSPCéOuÊag
)

	)

4757 
	#S_DSPCéEFI
 14

	)

4758 
	#M_DSPCéEFI
 (0x1 << 
S_DSPCéEFI
)

	)

4759 
	#S_DSPCéC
 13

	)

4760 
	#M_DSPCéC
 (0x1 << 
S_DSPCéC
)

	)

4761 
	#S_DSPCéScou¡
 7

	)

4762 
	#M_DSPCéScou¡
 (0x3‡<< 
S_DSPCéScou¡
)

	)

4763 
	#S_DSPCéPos
 0

	)

4764 
	#M_DSPCéPos
 (0x3‡<< 
S_DSPCéPos
)

	)

4767 
	#M_DSPCéOuÊagAccs
 (0x‡<< 
S_DSPCéOuÊag
)

	)

4768 
	#S_DSPCéOuÊagExt
 23

	)

4769 
	#M_DSPCéOuÊagExt
 (0x1 << 
S_DSPCéOuÊagExt
)

	)

4770 
	#S_DSPCéOuÊagSŒ
 22

	)

4771 
	#M_DSPCéOuÊagSŒ
 (0x1 << 
S_DSPCéOuÊagSŒ
)

	)

4772 
	#S_DSPCéOuÊagMul
 21

	)

4773 
	#M_DSPCéOuÊagMul
 (0x1 << 
S_DSPCéOuÊagMul
)

	)

4774 
	#S_DSPCéOuÊagAdd
 20

	)

4775 
	#M_DSPCéOuÊagAdd
 (0x1 << 
S_DSPCéOuÊagAdd
)

	)

4776 
	#S_DSPCéOuÊagAc3
 19

	)

4777 
	#M_DSPCéOuÊagAc3
 (0x1 << 
S_DSPCéOuÊagAc3
)

	)

4778 
	#S_DSPCéOuÊagAc2
 18

	)

4779 
	#M_DSPCéOuÊagAc2
 (0x1 << 
S_DSPCéOuÊagAc2
)

	)

4780 
	#S_DSPCéOuÊagAc1
 17

	)

4781 
	#M_DSPCéOuÊagAc1
 (0x1 << 
S_DSPCéOuÊagAc1
)

	)

4782 
	#S_DSPCéOuÊagAc0
 16

	)

4783 
	#M_DSPCéOuÊagAc0
 (0x1 << 
S_DSPCéOuÊagAc0
)

	)

4786 
	#K_DSPCéFldCou¡
 6

	)

4787 
	#M_DSPCéFldAŒ
 63

	)

4791 
	#K_DSPCéFldPos
 0

	)

4792 
	#K_DSPCéFldScou¡
 1

	)

4793 
	#K_DSPCéFldC
 2

	)

4794 
	#K_DSPCéFldOuÊag
 3

	)

4795 
	#K_DSPCéFldCc⁄d
 4

	)

4796 
	#K_DSPCéFldEFI
 5

	)

4798 
	#M_DSPCéFldPos
 1

	)

4799 
	#M_DSPCéFldScou¡
 2

	)

4800 
	#M_DSPCéFldC
 4

	)

4801 
	#M_DSPCéFldOuÊag
 8

	)

4802 
	#M_DSPCéFldCc⁄d
 16

	)

4803 
	#M_DSPCéFldEFI
 32

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/LzmaDecode.h

22 #i‚de‡
__LZMADECODE_H


23 
	#__LZMADECODE_H


	)

38 #i‚de‡
UI¡32


39 #ifde‡
_LZMA_UINT32_IS_ULONG


40 
	#UI¡32
 

	)

42 
	#UI¡32
 

	)

46 #ifde‡
_LZMA_PROB32


47 
	#CProb
 
UI¡32


	)

49 
	#CProb
 

	)

52 
	#LZMA_RESULT_OK
 0

	)

53 
	#LZMA_RESULT_DATA_ERROR
 1

	)

54 
	#LZMA_RESULT_NOT_ENOUGH_MEM
 2

	)

56 #ifde‡
_LZMA_IN_CB


57 
	s_ILzmaInCÆlback


59 (*
	mRód
)(*
	mobje˘
, **
	mbuf„r
, 
UI¡32
 *
	mbuf„rSize
);

60 } 
	tILzmaInCÆlback
;

63 
	#LZMA_BASE_SIZE
 1846

	)

64 
	#LZMA_LIT_SIZE
 768

	)

73 #ifde‡
_LZMA_OUT_READ


74 
LzmaDecodîInô
(

75 *
buf„r
, 
UI¡32
 
buf„rSize
,

76 
lc
, 
Õ
, 
pb
,

77 *
di˘i⁄¨y
, 
UI¡32
 
di˘i⁄¨ySize
,

78 #ifde‡
_LZMA_IN_CB


79 
ILzmaInCÆlback
 *
öCÆlback


81 *
öSåóm
, 
UI¡32
 
öSize


86 
LzmaDecode
(

87 *
buf„r
,

88 #i‚de‡
_LZMA_OUT_READ


89 
UI¡32
 
buf„rSize
,

90 
lc
, 
Õ
, 
pb
,

91 #ifde‡
_LZMA_IN_CB


92 
ILzmaInCÆlback
 *
öCÆlback
,

94 *
öSåóm
, 
UI¡32
 
öSize
,

97 *
outSåóm
, 
UI¡32
 
outSize
,

98 
UI¡32
 *
outSizePro˚s£d
);

100 
lzmaBuffToBuffDecom¥ess
(*
de°
,*
de°Àn
,*
§c
,
§˛í
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/_exports.h

1 
	$EXPORT_FUNC
(
gë_vîsi⁄
)

2 
	$EXPORT_FUNC
(
gëc
)

3 
	$EXPORT_FUNC
(
t°c
)

4 
	$EXPORT_FUNC
(
putc
)

5 
	$EXPORT_FUNC
(
puts
)

6 
	$EXPORT_FUNC
(
¥ötf
)

7 
	$EXPORT_FUNC
(
ö°Æl_hdÃ
)

8 
	$EXPORT_FUNC
(
‰ì_hdÃ
)

9 
	$EXPORT_FUNC
(
mÆloc
)

10 
	$EXPORT_FUNC
(
‰ì
)

11 
	$EXPORT_FUNC
(
udñay
)

12 
	$EXPORT_FUNC
(
gë_timî
)

13 
	$EXPORT_FUNC
(
v¥ötf
)

14 
	`EXPORT_FUNC
(
do_ª£t
)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/altera.h

25 
	~<Âga.h
>

27 #i‚de‡
_ALTERA_H_


28 
	#_ALTERA_H_


	)

36 
	#CFG_ACEX1K
 
	`CFG_FPGA_DEV
–0x1 )

	)

38 
	#CFG_ALTERA_ACEX1K
 (
CFG_FPGA_ALTERA
 | 
CFG_ACEX1K
)

	)

43 
	#CFG_ALTERA_IF_PS
 
	`CFG_FPGA_IF
–0x1 )

	)

47 
	mmö_Æãø_iÁ˚_ty≥
,

48 
	m∑ssive_£rül
,

49 
	m∑ssive_∑øŒñ_synchr⁄ous
,

50 
	m∑ssive_∑øŒñ_asynchr⁄ous
,

51 
	m∑ssive_£rül_asynchr⁄ous
,

52 
	mÆãø_jèg_mode
,

53 
	mmax_Æãø_iÁ˚_ty≥


54 } 
	tA…îa_iÁ˚
;

57 
	mmö_Æãø_ty≥
,

58 
	mA…îa_ACEX1K
,

60 
	mmax_Æãø_ty≥


61 } 
	tA…îa_Famûy
;

64 
A…îa_Famûy
 
	mÁmûy
;

65 
A…îa_iÁ˚
 
	miÁ˚
;

66 
size_t
 
	msize
;

67 * 
	miÁ˚_‚s
;

68 * 
	mba£
;

69 
	mcookõ
;

70 } 
	tA…îa_desc
;

74 
Æãø_lﬂd
–
A…îa_desc
 *
desc
, *
image
, 
size_t
 
size
 );

75 
Æãø_dump
–
A…îa_desc
 *
desc
, *
buf
, 
size_t
 
bsize
 );

76 
Æãø_öfo
–
A…îa_desc
 *
desc
 );

77 
Æãø_ªloc
–
A…îa_desc
 *
desc
, 
ul⁄g
 
ªloc_off£t
 );

81 (*
	tA…îa_¥e_‚
)–
	tcookõ
 );

82 (*
	tA…îa_c⁄fig_‚
)–
	tas£π_c⁄fig
, 
	tÊush
, 
	tcookõ
 );

83 (*
	tA…îa_°©us_‚
)–
	tcookõ
 );

84 (*
	tA…îa_d⁄e_‚
)–
	tcookõ
 );

85 (*
	tA…îa_˛k_‚
)–
	tas£π_˛k
, 
	tÊush
, 
	tcookõ
 );

86 (*
	tA…îa_d©a_‚
)–
	tas£π_d©a
, 
	tÊush
, 
	tcookõ
 );

87 (*
	tA…îa_ab‹t_‚
)–
	tcookõ
 );

88 (*
	tA…îa_po°_‚
)–
	tcookõ
 );

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/addrspace.h

11 #i‚de‡
__ASM_MIPS_ADDRSPACE_H


12 
	#__ASM_MIPS_ADDRSPACE_H


	)

17 
	#KUSEG
 0x00000000

	)

18 
	#KSEG0
 0x80000000

	)

19 
	#KSEG1
 0xa0000000

	)

20 
	#KSEG2
 0xc0000000

	)

21 
	#KSEG3
 0xe0000000

	)

23 
	#K0BASE
 
KSEG0


	)

28 #i‚de‡
__ASSEMBLY__


29 
	#KSEGX
(
a
Ë((()◊)Ë& 0xe0000000)

	)

31 
	#KSEGX
(
a
Ë(◊Ë& 0xe0000000)

	)

37 #i‚de‡
__ASSEMBLY__


38 
	#PHYSADDR
(
a
Ë((()◊)Ë& 0x1fffffff)

	)

40 
	#PHYSADDR
(
a
Ë(◊Ë& 0x1fffffff)

	)

46 #i‚de‡
__ASSEMBLY__


47 #i‡
deföed
(
CONFIG_AU1X00
Ë|| deföed(
CONFIG_TB0229
)

50 
	#UNCACHED_SDRAM
(
a
Ë((()◊)Ë| 0x20000000)

	)

52 
	#UNCACHED_SDRAM
(
a
Ë
	`PHYSADDR
◊)

	)

58 #i‚de‡
__ASSEMBLY__


59 
	#KSEG0ADDR
(
a
Ë((
	`__ty≥of__
◊))((()◊Ë& 0x1fffffffË| 
KSEG0
))

	)

60 
	#KSEG1ADDR
(
a
Ë((
	`__ty≥of__
◊))((()◊Ë& 0x1fffffffË| 
KSEG1
))

	)

61 
	#KSEG2ADDR
(
a
Ë((
	`__ty≥of__
◊))((()◊Ë& 0x1fffffffË| 
KSEG2
))

	)

62 
	#KSEG3ADDR
(
a
Ë((
	`__ty≥of__
◊))((()◊Ë& 0x1fffffffË| 
KSEG3
))

	)

64 
	#KSEG0ADDR
(
a
Ë((◊Ë& 0x1fffffffË| 
KSEG0
)

	)

65 
	#KSEG1ADDR
(
a
Ë((◊Ë& 0x1fffffffË| 
KSEG1
)

	)

66 
	#KSEG2ADDR
(
a
Ë((◊Ë& 0x1fffffffË| 
KSEG2
)

	)

67 
	#KSEG3ADDR
(
a
Ë((◊Ë& 0x1fffffffË| 
KSEG3
)

	)

73 
	#XKUSEG
 0x0000000000000000

	)

74 
	#XKSSEG
 0x4000000000000000

	)

75 
	#XKPHYS
 0x8000000000000000

	)

76 
	#XKSEG
 0xc000000000000000

	)

77 
	#CKSEG0
 0xffffffff80000000

	)

78 
	#CKSEG1
 0xfffffffÁ0000000

	)

79 
	#CKSSEG
 0xffffffffc0000000

	)

80 
	#CKSEG3
 0xfffffff„0000000

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/au1x00.h

35 #i‚de‡
_AU1X00_H_


36 
	#_AU1X00_H_


	)

38 #i‚de‡
__ASSEMBLY__


40 
ölöe
 
	$au_sync
()

42 
__asm__
 volatile ("sync");

43 
	}
}

45 
ölöe
 
	$au_sync_udñay
(
us
)

47 
__asm__
 volatile ("sync");

48 
	`udñay
(
us
);

49 
	}
}

51 
ölöe
 
	$au_wrôeb
(
u8
 
vÆ
, 
ªg
)

53 *(vﬁ©ûê
u8
 *)(
ªg
Ë
vÆ
;

54 
	}
}

56 
ölöe
 
	$au_wrôew
(
u16
 
vÆ
, 
ªg
)

58 *(vﬁ©ûê
u16
 *)(
ªg
Ë
vÆ
;

59 
	}
}

61 
ölöe
 
	$au_wrôñ
(
u32
 
vÆ
, 
ªg
)

63 *(vﬁ©ûê
u32
 *)(
ªg
Ë
vÆ
;

64 
	}
}

66 
ölöe
 
u8
 
	$au_ªadb
(
p‹t
)

68  (*(vﬁ©ûê
u8
 *)
p‹t
);

69 
	}
}

71 
ölöe
 
u16
 
	$au_ªadw
(
p‹t
)

73  (*(vﬁ©ûê
u16
 *)
p‹t
);

74 
	}
}

76 
ölöe
 
u32
 
	$au_ªadl
(
p‹t
)

78  (*(vﬁ©ûê
u32
 *)
p‹t
);

79 
	}
}

87 
__ölöe__
 
	$__ûog2
(
x
)

89 
lz
;

91 
asm
 volatile (

99 : "Ù" (
lz
)

100 : "r" (
x
));

102  31 - 
lz
;

103 
	}
}

105 
__ölöe__
 
	$au_ffz
(
x
)

107 i‡((
x
 = ~x) == 0)

109  
	`__ûog2
(
x
 & -x);

110 
	}
}

117 
__ölöe__
 
	$au_ffs
(
x
)

119  
	`__ûog2
(
x
 & -x) + 1;

120 
	}
}

124 #ifde‡
CONFIG_PM


126 
	#ALLINTS
 (
IE_IRQ0
 | 
IE_IRQ1
 | 
IE_IRQ2
 | 
IE_IRQ3
 | 
IE_IRQ4
)

	)

128 
	#ALLINTS
 (
IE_IRQ0
 | 
IE_IRQ1
 | 
IE_IRQ2
 | 
IE_IRQ3
 | 
IE_IRQ4
 | 
IE_IRQ5
)

	)

131 
	#CP0_IWATCHLO
 
$18
,1

	)

132 
	#CP0_DEBUG
 
$23


	)

135 #ifde‡
CONFIG_AU1550


137 
	#MEM_SDMODE0
 0xB4000800

	)

138 
	#MEM_SDMODE1
 0xB4000808

	)

139 
	#MEM_SDMODE2
 0xB4000810

	)

141 
	#MEM_SDADDR0
 0xB4000820

	)

142 
	#MEM_SDADDR1
 0xB4000828

	)

143 
	#MEM_SDADDR2
 0xB4000830

	)

145 
	#MEM_SDCONFIGA
 0xB4000840

	)

146 
	#MEM_SDCONFIGB
 0xB4000848

	)

147 
	#MEM_SDPRECMD
 0xB40008c0

	)

148 
	#MEM_SDAUTOREF
 0xB40008c8

	)

150 
	#MEM_SDWRMD0
 0xB4000880

	)

151 
	#MEM_SDWRMD1
 0xB4000888

	)

152 
	#MEM_SDWRMD2
 0xB4000890

	)

156 
	#MEM_SDMODE0
 0xB4000000

	)

157 
	#MEM_SDMODE1
 0xB4000004

	)

158 
	#MEM_SDMODE2
 0xB4000008

	)

160 
	#MEM_SDADDR0
 0xB400000C

	)

161 
	#MEM_SDADDR1
 0xB4000010

	)

162 
	#MEM_SDADDR2
 0xB4000014

	)

164 
	#MEM_SDREFCFG
 0xB4000018

	)

165 
	#MEM_SDPRECMD
 0xB400001C

	)

166 
	#MEM_SDAUTOREF
 0xB4000020

	)

168 
	#MEM_SDWRMD0
 0xB4000024

	)

169 
	#MEM_SDWRMD1
 0xB4000028

	)

170 
	#MEM_SDWRMD2
 0xB400002C

	)

174 
	#MEM_SDSLEEP
 0xB4000030

	)

175 
	#MEM_SDSMCKE
 0xB4000034

	)

178 
	#MEM_STCFG0
 0xB4001000

	)

179 
	#MEM_STTIME0
 0xB4001004

	)

180 
	#MEM_STADDR0
 0xB4001008

	)

182 
	#MEM_STCFG1
 0xB4001010

	)

183 
	#MEM_STTIME1
 0xB4001014

	)

184 
	#MEM_STADDR1
 0xB4001018

	)

186 
	#MEM_STCFG2
 0xB4001020

	)

187 
	#MEM_STTIME2
 0xB4001024

	)

188 
	#MEM_STADDR2
 0xB4001028

	)

190 
	#MEM_STCFG3
 0xB4001030

	)

191 
	#MEM_STTIME3
 0xB4001034

	)

192 
	#MEM_STADDR3
 0xB4001038

	)

195 
	#IC0_CFG0RD
 0xB0400040

	)

196 
	#IC0_CFG0SET
 0xB0400040

	)

197 
	#IC0_CFG0CLR
 0xB0400044

	)

199 
	#IC0_CFG1RD
 0xB0400048

	)

200 
	#IC0_CFG1SET
 0xB0400048

	)

201 
	#IC0_CFG1CLR
 0xB040004C

	)

203 
	#IC0_CFG2RD
 0xB0400050

	)

204 
	#IC0_CFG2SET
 0xB0400050

	)

205 
	#IC0_CFG2CLR
 0xB0400054

	)

207 
	#IC0_REQ0INT
 0xB0400054

	)

208 
	#IC0_SRCRD
 0xB0400058

	)

209 
	#IC0_SRCSET
 0xB0400058

	)

210 
	#IC0_SRCCLR
 0xB040005C

	)

211 
	#IC0_REQ1INT
 0xB040005C

	)

213 
	#IC0_ASSIGNRD
 0xB0400060

	)

214 
	#IC0_ASSIGNSET
 0xB0400060

	)

215 
	#IC0_ASSIGNCLR
 0xB0400064

	)

217 
	#IC0_WAKERD
 0xB0400068

	)

218 
	#IC0_WAKESET
 0xB0400068

	)

219 
	#IC0_WAKECLR
 0xB040006C

	)

221 
	#IC0_MASKRD
 0xB0400070

	)

222 
	#IC0_MASKSET
 0xB0400070

	)

223 
	#IC0_MASKCLR
 0xB0400074

	)

225 
	#IC0_RISINGRD
 0xB0400078

	)

226 
	#IC0_RISINGCLR
 0xB0400078

	)

227 
	#IC0_FALLINGRD
 0xB040007C

	)

228 
	#IC0_FALLINGCLR
 0xB040007C

	)

230 
	#IC0_TESTBIT
 0xB0400080

	)

233 
	#IC1_CFG0RD
 0xB1800040

	)

234 
	#IC1_CFG0SET
 0xB1800040

	)

235 
	#IC1_CFG0CLR
 0xB1800044

	)

237 
	#IC1_CFG1RD
 0xB1800048

	)

238 
	#IC1_CFG1SET
 0xB1800048

	)

239 
	#IC1_CFG1CLR
 0xB180004C

	)

241 
	#IC1_CFG2RD
 0xB1800050

	)

242 
	#IC1_CFG2SET
 0xB1800050

	)

243 
	#IC1_CFG2CLR
 0xB1800054

	)

245 
	#IC1_REQ0INT
 0xB1800054

	)

246 
	#IC1_SRCRD
 0xB1800058

	)

247 
	#IC1_SRCSET
 0xB1800058

	)

248 
	#IC1_SRCCLR
 0xB180005C

	)

249 
	#IC1_REQ1INT
 0xB180005C

	)

251 
	#IC1_ASSIGNRD
 0xB1800060

	)

252 
	#IC1_ASSIGNSET
 0xB1800060

	)

253 
	#IC1_ASSIGNCLR
 0xB1800064

	)

255 
	#IC1_WAKERD
 0xB1800068

	)

256 
	#IC1_WAKESET
 0xB1800068

	)

257 
	#IC1_WAKECLR
 0xB180006C

	)

259 
	#IC1_MASKRD
 0xB1800070

	)

260 
	#IC1_MASKSET
 0xB1800070

	)

261 
	#IC1_MASKCLR
 0xB1800074

	)

263 
	#IC1_RISINGRD
 0xB1800078

	)

264 
	#IC1_RISINGCLR
 0xB1800078

	)

265 
	#IC1_FALLINGRD
 0xB180007C

	)

266 
	#IC1_FALLINGCLR
 0xB180007C

	)

268 
	#IC1_TESTBIT
 0xB1800080

	)

271 
	#INTC_INT_DISABLED
 0

	)

272 
	#INTC_INT_RISE_EDGE
 0x1

	)

273 
	#INTC_INT_FALL_EDGE
 0x2

	)

274 
	#INTC_INT_RISE_AND_FALL_EDGE
 0x3

	)

275 
	#INTC_INT_HIGH_LEVEL
 0x5

	)

276 
	#INTC_INT_LOW_LEVEL
 0x6

	)

277 
	#INTC_INT_HIGH_AND_LOW_LEVEL
 0x7

	)

280 
	#AU1X00_UART0_INT
 0

	)

281 
	#AU1000_UART1_INT
 1

	)

282 
	#AU1000_UART2_INT
 2

	)

284 
	#AU1500_PCI_INTA
 1

	)

285 
	#AU1500_PCI_INTB
 2

	)

287 
	#AU1X00_UART3_INT
 3

	)

289 
	#AU1000_SSI0_INT
 4

	)

290 
	#AU1000_SSI1_INT
 5

	)

292 
	#AU1500_PCI_INTC
 4

	)

293 
	#AU1500_PCI_INTD
 5

	)

295 
	#AU1X00_DMA_INT_BASE
 6

	)

296 
	#AU1X00_TOY_INT
 14

	)

297 
	#AU1X00_TOY_MATCH0_INT
 15

	)

298 
	#AU1X00_TOY_MATCH1_INT
 16

	)

299 
	#AU1X00_TOY_MATCH2_INT
 17

	)

300 
	#AU1X00_RTC_INT
 18

	)

301 
	#AU1X00_RTC_MATCH0_INT
 19

	)

302 
	#AU1X00_RTC_MATCH1_INT
 20

	)

303 
	#AU1X00_RTC_MATCH2_INT
 21

	)

304 
	#AU1000_IRDA_TX_INT
 22

	)

305 
	#AU1000_IRDA_RX_INT
 23

	)

306 
	#AU1X00_USB_DEV_REQ_INT
 24

	)

307 
	#AU1X00_USB_DEV_SUS_INT
 25

	)

308 
	#AU1X00_USB_HOST_INT
 26

	)

309 
	#AU1X00_ACSYNC_INT
 27

	)

310 
	#AU1X00_MAC0_DMA_INT
 28

	)

311 
	#AU1X00_MAC1_DMA_INT
 29

	)

312 
	#AU1X00_ETH0_IRQ
 
AU1X00_MAC0_DMA_INT


	)

313 
	#AU1X00_ETH1_IRQ
 
AU1X00_MAC1_DMA_INT


	)

314 
	#AU1000_I2S_UO_INT
 30

	)

315 
	#AU1X00_AC97C_INT
 31

	)

316 
	#AU1X00_LAST_INTC0_INT
 
AU1X00_AC97C_INT


	)

317 
	#AU1X00_GPIO_0
 32

	)

318 
	#AU1X00_GPIO_1
 33

	)

319 
	#AU1X00_GPIO_2
 34

	)

320 
	#AU1X00_GPIO_3
 35

	)

321 
	#AU1X00_GPIO_4
 36

	)

322 
	#AU1X00_GPIO_5
 37

	)

323 
	#AU1X00_GPIO_6
 38

	)

324 
	#AU1X00_GPIO_7
 39

	)

325 
	#AU1X00_GPIO_8
 40

	)

326 
	#AU1X00_GPIO_9
 41

	)

327 
	#AU1X00_GPIO_10
 42

	)

328 
	#AU1X00_GPIO_11
 43

	)

329 
	#AU1X00_GPIO_12
 44

	)

330 
	#AU1X00_GPIO_13
 45

	)

331 
	#AU1X00_GPIO_14
 46

	)

332 
	#AU1X00_GPIO_15
 47

	)

335 
	#AU1000_GPIO_16
 48

	)

336 
	#AU1000_GPIO_17
 49

	)

337 
	#AU1000_GPIO_18
 50

	)

338 
	#AU1000_GPIO_19
 51

	)

339 
	#AU1000_GPIO_20
 52

	)

340 
	#AU1000_GPIO_21
 53

	)

341 
	#AU1000_GPIO_22
 54

	)

342 
	#AU1000_GPIO_23
 55

	)

343 
	#AU1000_GPIO_24
 56

	)

344 
	#AU1000_GPIO_25
 57

	)

345 
	#AU1000_GPIO_26
 58

	)

346 
	#AU1000_GPIO_27
 59

	)

347 
	#AU1000_GPIO_28
 60

	)

348 
	#AU1000_GPIO_29
 61

	)

349 
	#AU1000_GPIO_30
 62

	)

350 
	#AU1000_GPIO_31
 63

	)

353 
	#AU1500_GPIO_200
 48

	)

354 
	#AU1500_GPIO_201
 49

	)

355 
	#AU1500_GPIO_202
 50

	)

356 
	#AU1500_GPIO_203
 51

	)

357 
	#AU1500_GPIO_20
 52

	)

358 
	#AU1500_GPIO_204
 53

	)

359 
	#AU1500_GPIO_205
 54

	)

360 
	#AU1500_GPIO_23
 55

	)

361 
	#AU1500_GPIO_24
 56

	)

362 
	#AU1500_GPIO_25
 57

	)

363 
	#AU1500_GPIO_26
 58

	)

364 
	#AU1500_GPIO_27
 59

	)

365 
	#AU1500_GPIO_28
 60

	)

366 
	#AU1500_GPIO_206
 61

	)

367 
	#AU1500_GPIO_207
 62

	)

368 
	#AU1500_GPIO_208_215
 63

	)

370 
	#AU1X00_MAX_INTR
 63

	)

372 
	#AU1100_SD
 2

	)

373 
	#AU1100_GPIO_208_215
 29

	)

377 
	#SYS_BASE
 0xB1900000

	)

378 
	#SYS_COUNTER_CNTRL
 (
SYS_BASE
 + 0x14)

	)

379 
	#SYS_CNTRL_E1S
 (1<<23)

	)

380 
	#SYS_CNTRL_T1S
 (1<<20)

	)

381 
	#SYS_CNTRL_M21
 (1<<19)

	)

382 
	#SYS_CNTRL_M11
 (1<<18)

	)

383 
	#SYS_CNTRL_M01
 (1<<17)

	)

384 
	#SYS_CNTRL_C1S
 (1<<16)

	)

385 
	#SYS_CNTRL_BP
 (1<<14)

	)

386 
	#SYS_CNTRL_EN1
 (1<<13)

	)

387 
	#SYS_CNTRL_BT1
 (1<<12)

	)

388 
	#SYS_CNTRL_EN0
 (1<<11)

	)

389 
	#SYS_CNTRL_BT0
 (1<<10)

	)

390 
	#SYS_CNTRL_E0
 (1<<8)

	)

391 
	#SYS_CNTRL_E0S
 (1<<7)

	)

392 
	#SYS_CNTRL_32S
 (1<<5)

	)

393 
	#SYS_CNTRL_T0S
 (1<<4)

	)

394 
	#SYS_CNTRL_M20
 (1<<3)

	)

395 
	#SYS_CNTRL_M10
 (1<<2)

	)

396 
	#SYS_CNTRL_M00
 (1<<1)

	)

397 
	#SYS_CNTRL_C0S
 (1<<0)

	)

400 
	#SYS_TOYTRIM
 (
SYS_BASE
 + 0)

	)

401 
	#SYS_TOYWRITE
 (
SYS_BASE
 + 4)

	)

402 
	#SYS_TOYMATCH0
 (
SYS_BASE
 + 8)

	)

403 
	#SYS_TOYMATCH1
 (
SYS_BASE
 + 0xC)

	)

404 
	#SYS_TOYMATCH2
 (
SYS_BASE
 + 0x10)

	)

405 
	#SYS_TOYREAD
 (
SYS_BASE
 + 0x40)

	)

408 
	#SYS_RTCTRIM
 (
SYS_BASE
 + 0x44)

	)

409 
	#SYS_RTCWRITE
 (
SYS_BASE
 + 0x48)

	)

410 
	#SYS_RTCMATCH0
 (
SYS_BASE
 + 0x4C)

	)

411 
	#SYS_RTCMATCH1
 (
SYS_BASE
 + 0x50)

	)

412 
	#SYS_RTCMATCH2
 (
SYS_BASE
 + 0x54)

	)

413 
	#SYS_RTCREAD
 (
SYS_BASE
 + 0x58)

	)

416 
	#I2S_DATA
 0xB1000000

	)

417 
	#I2S_DATA_MASK
 (0xffffff)

	)

418 
	#I2S_CONFIG
 0xB1000004

	)

419 
	#I2S_CONFIG_XU
 (1<<25)

	)

420 
	#I2S_CONFIG_XO
 (1<<24)

	)

421 
	#I2S_CONFIG_RU
 (1<<23)

	)

422 
	#I2S_CONFIG_RO
 (1<<22)

	)

423 
	#I2S_CONFIG_TR
 (1<<21)

	)

424 
	#I2S_CONFIG_TE
 (1<<20)

	)

425 
	#I2S_CONFIG_TF
 (1<<19)

	)

426 
	#I2S_CONFIG_RR
 (1<<18)

	)

427 
	#I2S_CONFIG_RE
 (1<<17)

	)

428 
	#I2S_CONFIG_RF
 (1<<16)

	)

429 
	#I2S_CONFIG_PD
 (1<<11)

	)

430 
	#I2S_CONFIG_LB
 (1<<10)

	)

431 
	#I2S_CONFIG_IC
 (1<<9)

	)

432 
	#I2S_CONFIG_FM_BIT
 7

	)

433 
	#I2S_CONFIG_FM_MASK
 (0x3 << 
I2S_CONFIG_FM_BIT
)

	)

434 
	#I2S_CONFIG_FM_I2S
 (0x0 << 
I2S_CONFIG_FM_BIT
)

	)

435 
	#I2S_CONFIG_FM_LJ
 (0x1 << 
I2S_CONFIG_FM_BIT
)

	)

436 
	#I2S_CONFIG_FM_RJ
 (0x2 << 
I2S_CONFIG_FM_BIT
)

	)

437 
	#I2S_CONFIG_TN
 (1<<6)

	)

438 
	#I2S_CONFIG_RN
 (1<<5)

	)

439 
	#I2S_CONFIG_SZ_BIT
 0

	)

440 
	#I2S_CONFIG_SZ_MASK
 (0x1F << 
I2S_CONFIG_SZ_BIT
)

	)

442 
	#I2S_CONTROL
 0xB1000008

	)

443 
	#I2S_CONTROL_D
 (1<<1)

	)

444 
	#I2S_CONTROL_CE
 (1<<0)

	)

448 
	#USB_OHCI_BASE
 0x10100000

	)

449 
	#USB_OHCI_LEN
 0x00100000

	)

450 
	#USB_HOST_CONFIG
 0xB017fffc

	)

453 
	#USBD_EP0RD
 0xB0200000

	)

454 
	#USBD_EP0WR
 0xB0200004

	)

455 
	#USBD_EP2WR
 0xB0200008

	)

456 
	#USBD_EP3WR
 0xB020000C

	)

457 
	#USBD_EP4RD
 0xB0200010

	)

458 
	#USBD_EP5RD
 0xB0200014

	)

459 
	#USBD_INTEN
 0xB0200018

	)

460 
	#USBD_INTSTAT
 0xB020001C

	)

461 
	#USBDEV_INT_SOF
 (1<<12)

	)

462 
	#USBDEV_INT_HF_BIT
 6

	)

463 
	#USBDEV_INT_HF_MASK
 (0x3‡<< 
USBDEV_INT_HF_BIT
)

	)

464 
	#USBDEV_INT_CMPLT_BIT
 0

	)

465 
	#USBDEV_INT_CMPLT_MASK
 (0x3‡<< 
USBDEV_INT_CMPLT_BIT
)

	)

466 
	#USBD_CONFIG
 0xB0200020

	)

467 
	#USBD_EP0CS
 0xB0200024

	)

468 
	#USBD_EP2CS
 0xB0200028

	)

469 
	#USBD_EP3CS
 0xB020002C

	)

470 
	#USBD_EP4CS
 0xB0200030

	)

471 
	#USBD_EP5CS
 0xB0200034

	)

472 
	#USBDEV_CS_SU
 (1<<14)

	)

473 
	#USBDEV_CS_NAK
 (1<<13)

	)

474 
	#USBDEV_CS_ACK
 (1<<12)

	)

475 
	#USBDEV_CS_BUSY
 (1<<11)

	)

476 
	#USBDEV_CS_TSIZE_BIT
 1

	)

477 
	#USBDEV_CS_TSIZE_MASK
 (0x3f‡<< 
USBDEV_CS_TSIZE_BIT
)

	)

478 
	#USBDEV_CS_STALL
 (1<<0)

	)

479 
	#USBD_EP0RDSTAT
 0xB0200040

	)

480 
	#USBD_EP0WRSTAT
 0xB0200044

	)

481 
	#USBD_EP2WRSTAT
 0xB0200048

	)

482 
	#USBD_EP3WRSTAT
 0xB020004C

	)

483 
	#USBD_EP4RDSTAT
 0xB0200050

	)

484 
	#USBD_EP5RDSTAT
 0xB0200054

	)

485 
	#USBDEV_FSTAT_FLUSH
 (1<<6)

	)

486 
	#USBDEV_FSTAT_UF
 (1<<5)

	)

487 
	#USBDEV_FSTAT_OF
 (1<<4)

	)

488 
	#USBDEV_FSTAT_FCNT_BIT
 0

	)

489 
	#USBDEV_FSTAT_FCNT_MASK
 (0x0‡<< 
USBDEV_FSTAT_FCNT_BIT
)

	)

490 
	#USBD_ENABLE
 0xB0200058

	)

491 
	#USBDEV_ENABLE
 (1<<1)

	)

492 
	#USBDEV_CE
 (1<<0)

	)

495 
	#AU1000_ETH0_BASE
 0xB0500000

	)

496 
	#AU1000_ETH1_BASE
 0xB0510000

	)

497 
	#AU1500_ETH0_BASE
 0xB1500000

	)

498 
	#AU1500_ETH1_BASE
 0xB1510000

	)

499 
	#AU1100_ETH0_BASE
 0xB0500000

	)

500 
	#AU1550_ETH0_BASE
 0xB0500000

	)

501 
	#AU1550_ETH1_BASE
 0xB0510000

	)

504 
	#MAC_CONTROL
 0x0

	)

505 
	#MAC_RX_ENABLE
 (1<<2)

	)

506 
	#MAC_TX_ENABLE
 (1<<3)

	)

507 
	#MAC_DEF_CHECK
 (1<<5)

	)

508 
	#MAC_SET_BL
(
X
Ë(((X)&0x3)<<6)

	)

509 
	#MAC_AUTO_PAD
 (1<<8)

	)

510 
	#MAC_DISABLE_RETRY
 (1<<10)

	)

511 
	#MAC_DISABLE_BCAST
 (1<<11)

	)

512 
	#MAC_LATE_COL
 (1<<12)

	)

513 
	#MAC_HASH_MODE
 (1<<13)

	)

514 
	#MAC_HASH_ONLY
 (1<<15)

	)

515 
	#MAC_PASS_ALL
 (1<<16)

	)

516 
	#MAC_INVERSE_FILTER
 (1<<17)

	)

517 
	#MAC_PROMISCUOUS
 (1<<18)

	)

518 
	#MAC_PASS_ALL_MULTI
 (1<<19)

	)

519 
	#MAC_FULL_DUPLEX
 (1<<20)

	)

520 
	#MAC_NORMAL_MODE
 0

	)

521 
	#MAC_INT_LOOPBACK
 (1<<21)

	)

522 
	#MAC_EXT_LOOPBACK
 (1<<22)

	)

523 
	#MAC_DISABLE_RX_OWN
 (1<<23)

	)

524 
	#MAC_BIG_ENDIAN
 (1<<30)

	)

525 
	#MAC_RX_ALL
 (1<<31)

	)

526 
	#MAC_ADDRESS_HIGH
 0x4

	)

527 
	#MAC_ADDRESS_LOW
 0x8

	)

528 
	#MAC_MCAST_HIGH
 0xC

	)

529 
	#MAC_MCAST_LOW
 0x10

	)

530 
	#MAC_MII_CNTRL
 0x14

	)

531 
	#MAC_MII_BUSY
 (1<<0)

	)

532 
	#MAC_MII_READ
 0

	)

533 
	#MAC_MII_WRITE
 (1<<1)

	)

534 
	#MAC_SET_MII_SELECT_REG
(
X
Ë(((X)&0x1f)<<6)

	)

535 
	#MAC_SET_MII_SELECT_PHY
(
X
Ë(((X)&0x1f)<<11)

	)

536 
	#MAC_MII_DATA
 0x18

	)

537 
	#MAC_FLOW_CNTRL
 0x1C

	)

538 
	#MAC_FLOW_CNTRL_BUSY
 (1<<0)

	)

539 
	#MAC_FLOW_CNTRL_ENABLE
 (1<<1)

	)

540 
	#MAC_PASS_CONTROL
 (1<<2)

	)

541 
	#MAC_SET_PAUSE
(
X
Ë(((X)&0xffff)<<16)

	)

542 
	#MAC_VLAN1_TAG
 0x20

	)

543 
	#MAC_VLAN2_TAG
 0x24

	)

546 
	#AU1000_MAC0_ENABLE
 0xB0520000

	)

547 
	#AU1000_MAC1_ENABLE
 0xB0520004

	)

548 
	#AU1500_MAC0_ENABLE
 0xB1520000

	)

549 
	#AU1500_MAC1_ENABLE
 0xB1520004

	)

550 
	#AU1100_MAC0_ENABLE
 0xB0520000

	)

551 
	#AU1550_MAC0_ENABLE
 0xB0520000

	)

552 
	#AU1550_MAC1_ENABLE
 0xB0520004

	)

554 
	#MAC_EN_CLOCK_ENABLE
 (1<<0)

	)

555 
	#MAC_EN_RESET0
 (1<<1)

	)

556 
	#MAC_EN_TOSS
 (0<<2)

	)

557 
	#MAC_EN_CACHEABLE
 (1<<3)

	)

558 
	#MAC_EN_RESET1
 (1<<4)

	)

559 
	#MAC_EN_RESET2
 (1<<5)

	)

560 
	#MAC_DMA_RESET
 (1<<6)

	)

564 
	#MAC0_TX_DMA_ADDR
 0xB4004000

	)

565 
	#MAC1_TX_DMA_ADDR
 0xB4004200

	)

567 
	#MAC_TX_BUFF0_STATUS
 0x0

	)

568 
	#TX_FRAME_ABORTED
 (1<<0)

	)

569 
	#TX_JAB_TIMEOUT
 (1<<1)

	)

570 
	#TX_NO_CARRIER
 (1<<2)

	)

571 
	#TX_LOSS_CARRIER
 (1<<3)

	)

572 
	#TX_EXC_DEF
 (1<<4)

	)

573 
	#TX_LATE_COLL_ABORT
 (1<<5)

	)

574 
	#TX_EXC_COLL
 (1<<6)

	)

575 
	#TX_UNDERRUN
 (1<<7)

	)

576 
	#TX_DEFERRED
 (1<<8)

	)

577 
	#TX_LATE_COLL
 (1<<9)

	)

578 
	#TX_COLL_CNT_MASK
 (0xF<<10)

	)

579 
	#TX_PKT_RETRY
 (1<<31)

	)

580 
	#MAC_TX_BUFF0_ADDR
 0x4

	)

581 
	#TX_DMA_ENABLE
 (1<<0)

	)

582 
	#TX_T_DONE
 (1<<1)

	)

583 
	#TX_GET_DMA_BUFFER
(
X
Ë(((X)>>2)&0x3)

	)

584 
	#MAC_TX_BUFF0_LEN
 0x8

	)

585 
	#MAC_TX_BUFF1_STATUS
 0x10

	)

586 
	#MAC_TX_BUFF1_ADDR
 0x14

	)

587 
	#MAC_TX_BUFF1_LEN
 0x18

	)

588 
	#MAC_TX_BUFF2_STATUS
 0x20

	)

589 
	#MAC_TX_BUFF2_ADDR
 0x24

	)

590 
	#MAC_TX_BUFF2_LEN
 0x28

	)

591 
	#MAC_TX_BUFF3_STATUS
 0x30

	)

592 
	#MAC_TX_BUFF3_ADDR
 0x34

	)

593 
	#MAC_TX_BUFF3_LEN
 0x38

	)

595 
	#MAC0_RX_DMA_ADDR
 0xB4004100

	)

596 
	#MAC1_RX_DMA_ADDR
 0xB4004300

	)

598 
	#MAC_RX_BUFF0_STATUS
 0x0

	)

599 
	#RX_FRAME_LEN_MASK
 0x3fff

	)

600 
	#RX_WDOG_TIMER
 (1<<14)

	)

601 
	#RX_RUNT
 (1<<15)

	)

602 
	#RX_OVERLEN
 (1<<16)

	)

603 
	#RX_COLL
 (1<<17)

	)

604 
	#RX_ETHER
 (1<<18)

	)

605 
	#RX_MII_ERROR
 (1<<19)

	)

606 
	#RX_DRIBBLING
 (1<<20)

	)

607 
	#RX_CRC_ERROR
 (1<<21)

	)

608 
	#RX_VLAN1
 (1<<22)

	)

609 
	#RX_VLAN2
 (1<<23)

	)

610 
	#RX_LEN_ERROR
 (1<<24)

	)

611 
	#RX_CNTRL_FRAME
 (1<<25)

	)

612 
	#RX_U_CNTRL_FRAME
 (1<<26)

	)

613 
	#RX_MCAST_FRAME
 (1<<27)

	)

614 
	#RX_BCAST_FRAME
 (1<<28)

	)

615 
	#RX_FILTER_FAIL
 (1<<29)

	)

616 
	#RX_PACKET_FILTER
 (1<<30)

	)

617 
	#RX_MISSED_FRAME
 (1<<31)

	)

619 
	#RX_ERROR
 (
RX_WDOG_TIMER
 | 
RX_RUNT
 | 
RX_OVERLEN
 | \

620 
RX_COLL
 | 
RX_MII_ERROR
 | 
RX_CRC_ERROR
 | \

621 
RX_LEN_ERROR
 | 
RX_U_CNTRL_FRAME
 | 
RX_MISSED_FRAME
)

	)

622 
	#MAC_RX_BUFF0_ADDR
 0x4

	)

623 
	#RX_DMA_ENABLE
 (1<<0)

	)

624 
	#RX_T_DONE
 (1<<1)

	)

625 
	#RX_GET_DMA_BUFFER
(
X
Ë(((X)>>2)&0x3)

	)

626 
	#RX_SET_BUFF_ADDR
(
X
Ë((X)&0xffffffc0)

	)

627 
	#MAC_RX_BUFF1_STATUS
 0x10

	)

628 
	#MAC_RX_BUFF1_ADDR
 0x14

	)

629 
	#MAC_RX_BUFF2_STATUS
 0x20

	)

630 
	#MAC_RX_BUFF2_ADDR
 0x24

	)

631 
	#MAC_RX_BUFF3_STATUS
 0x30

	)

632 
	#MAC_RX_BUFF3_ADDR
 0x34

	)

636 
	#UART0_ADDR
 0xB1100000

	)

637 
	#UART1_ADDR
 0xB1200000

	)

638 
	#UART2_ADDR
 0xB1300000

	)

639 
	#UART3_ADDR
 0xB1400000

	)

640 
	#UART_BASE
 
UART0_ADDR


	)

641 
	#UART_DEBUG_BASE
 
UART2_ADDR


	)

643 
	#UART_RX
 0

	)

644 
	#UART_TX
 4

	)

645 
	#UART_IER
 8

	)

646 
	#UART_IIR
 0xC

	)

647 
	#UART_FCR
 0x10

	)

648 
	#UART_LCR
 0x14

	)

649 
	#UART_MCR
 0x18

	)

650 
	#UART_LSR
 0x1C

	)

651 
	#UART_MSR
 0x20

	)

652 
	#UART_CLK
 0x28

	)

653 
	#UART_ENABLE
 0x100

	)

655 
	#UART_EN_CE
 1

	)

656 
	#UART_EN_E
 2

	)

658 
	#UART_FCR_ENABLE_FIFO
 0x01

	)

659 
	#UART_FCR_CLEAR_RCVR
 0x02

	)

660 
	#UART_FCR_CLEAR_XMIT
 0x04

	)

661 
	#UART_FCR_DMA_SELECT
 0x08

	)

662 
	#UART_FCR_TRIGGER_MASK
 0xF0

	)

663 
	#UART_FCR_R_TRIGGER_1
 0x00

	)

664 
	#UART_FCR_R_TRIGGER_4
 0x40

	)

665 
	#UART_FCR_R_TRIGGER_8
 0x80

	)

666 
	#UART_FCR_R_TRIGGER_14
 0xA0

	)

667 
	#UART_FCR_T_TRIGGER_0
 0x00

	)

668 
	#UART_FCR_T_TRIGGER_4
 0x10

	)

669 
	#UART_FCR_T_TRIGGER_8
 0x20

	)

670 
	#UART_FCR_T_TRIGGER_12
 0x30

	)

675 
	#UART_LCR_SBC
 0x40

	)

676 
	#UART_LCR_SPAR
 0x20

	)

677 
	#UART_LCR_EPAR
 0x10

	)

678 
	#UART_LCR_PARITY
 0x08

	)

679 
	#UART_LCR_STOP
 0x04

	)

680 
	#UART_LCR_WLEN5
 0x00

	)

681 
	#UART_LCR_WLEN6
 0x01

	)

682 
	#UART_LCR_WLEN7
 0x02

	)

683 
	#UART_LCR_WLEN8
 0x03

	)

688 
	#UART_LSR_TEMT
 0x40

	)

689 
	#UART_LSR_THRE
 0x20

	)

690 
	#UART_LSR_BI
 0x10

	)

691 
	#UART_LSR_FE
 0x08

	)

692 
	#UART_LSR_PE
 0x04

	)

693 
	#UART_LSR_OE
 0x02

	)

694 
	#UART_LSR_DR
 0x01

	)

699 
	#UART_IIR_NO_INT
 0x01

	)

700 
	#UART_IIR_ID
 0x06

	)

701 
	#UART_IIR_MSI
 0x00

	)

702 
	#UART_IIR_THRI
 0x02

	)

703 
	#UART_IIR_RDI
 0x04

	)

704 
	#UART_IIR_RLSI
 0x06

	)

709 
	#UART_IER_MSI
 0x08

	)

710 
	#UART_IER_RLSI
 0x04

	)

711 
	#UART_IER_THRI
 0x02

	)

712 
	#UART_IER_RDI
 0x01

	)

717 
	#UART_MCR_LOOP
 0x10

	)

718 
	#UART_MCR_OUT2
 0x08

	)

719 
	#UART_MCR_OUT1
 0x04

	)

720 
	#UART_MCR_RTS
 0x02

	)

721 
	#UART_MCR_DTR
 0x01

	)

726 
	#UART_MSR_DCD
 0x80

	)

727 
	#UART_MSR_RI
 0x40

	)

728 
	#UART_MSR_DSR
 0x20

	)

729 
	#UART_MSR_CTS
 0x10

	)

730 
	#UART_MSR_DDCD
 0x08

	)

731 
	#UART_MSR_TERI
 0x04

	)

732 
	#UART_MSR_DDSR
 0x02

	)

733 
	#UART_MSR_DCTS
 0x01

	)

734 
	#UART_MSR_ANY_DELTA
 0x0F

	)

738 
	#SSI0_STATUS
 0xB1600000

	)

739 
	#SSI_STATUS_BF
 (1<<4)

	)

740 
	#SSI_STATUS_OF
 (1<<3)

	)

741 
	#SSI_STATUS_UF
 (1<<2)

	)

742 
	#SSI_STATUS_D
 (1<<1)

	)

743 
	#SSI_STATUS_B
 (1<<0)

	)

744 
	#SSI0_INT
 0xB1600004

	)

745 
	#SSI_INT_OI
 (1<<3)

	)

746 
	#SSI_INT_UI
 (1<<2)

	)

747 
	#SSI_INT_DI
 (1<<1)

	)

748 
	#SSI0_INT_ENABLE
 0xB1600008

	)

749 
	#SSI_INTE_OIE
 (1<<3)

	)

750 
	#SSI_INTE_UIE
 (1<<2)

	)

751 
	#SSI_INTE_DIE
 (1<<1)

	)

752 
	#SSI0_CONFIG
 0xB1600020

	)

753 
	#SSI_CONFIG_AO
 (1<<24)

	)

754 
	#SSI_CONFIG_DO
 (1<<23)

	)

755 
	#SSI_CONFIG_ALEN_BIT
 20

	)

756 
	#SSI_CONFIG_ALEN_MASK
 (0x7<<20)

	)

757 
	#SSI_CONFIG_DLEN_BIT
 16

	)

758 
	#SSI_CONFIG_DLEN_MASK
 (0x7<<16)

	)

759 
	#SSI_CONFIG_DD
 (1<<11)

	)

760 
	#SSI_CONFIG_AD
 (1<<10)

	)

761 
	#SSI_CONFIG_BM_BIT
 8

	)

762 
	#SSI_CONFIG_BM_MASK
 (0x3<<8)

	)

763 
	#SSI_CONFIG_CE
 (1<<7)

	)

764 
	#SSI_CONFIG_DP
 (1<<6)

	)

765 
	#SSI_CONFIG_DL
 (1<<5)

	)

766 
	#SSI_CONFIG_EP
 (1<<4)

	)

767 
	#SSI0_ADATA
 0xB1600024

	)

768 
	#SSI_AD_D
 (1<<24)

	)

769 
	#SSI_AD_ADDR_BIT
 16

	)

770 
	#SSI_AD_ADDR_MASK
 (0xff<<16)

	)

771 
	#SSI_AD_DATA_BIT
 0

	)

772 
	#SSI_AD_DATA_MASK
 (0xfff<<0)

	)

773 
	#SSI0_CLKDIV
 0xB1600028

	)

774 
	#SSI0_CONTROL
 0xB1600100

	)

775 
	#SSI_CONTROL_CD
 (1<<1)

	)

776 
	#SSI_CONTROL_E
 (1<<0)

	)

779 
	#SSI1_STATUS
 0xB1680000

	)

780 
	#SSI1_INT
 0xB1680004

	)

781 
	#SSI1_INT_ENABLE
 0xB1680008

	)

782 
	#SSI1_CONFIG
 0xB1680020

	)

783 
	#SSI1_ADATA
 0xB1680024

	)

784 
	#SSI1_CLKDIV
 0xB1680028

	)

785 
	#SSI1_ENABLE
 0xB1680100

	)

790 
	#SSI_STATUS_BF
 (1<<4)

	)

791 
	#SSI_STATUS_OF
 (1<<3)

	)

792 
	#SSI_STATUS_UF
 (1<<2)

	)

793 
	#SSI_STATUS_D
 (1<<1)

	)

794 
	#SSI_STATUS_B
 (1<<0)

	)

797 
	#SSI_INT_OI
 (1<<3)

	)

798 
	#SSI_INT_UI
 (1<<2)

	)

799 
	#SSI_INT_DI
 (1<<1)

	)

802 
	#SSI_INTEN_OIE
 (1<<3)

	)

803 
	#SSI_INTEN_UIE
 (1<<2)

	)

804 
	#SSI_INTEN_DIE
 (1<<1)

	)

806 
	#SSI_CONFIG_AO
 (1<<24)

	)

807 
	#SSI_CONFIG_DO
 (1<<23)

	)

808 
	#SSI_CONFIG_ALEN
 (7<<20)

	)

809 
	#SSI_CONFIG_DLEN
 (15<<16)

	)

810 
	#SSI_CONFIG_DD
 (1<<11)

	)

811 
	#SSI_CONFIG_AD
 (1<<10)

	)

812 
	#SSI_CONFIG_BM
 (3<<8)

	)

813 
	#SSI_CONFIG_CE
 (1<<7)

	)

814 
	#SSI_CONFIG_DP
 (1<<6)

	)

815 
	#SSI_CONFIG_DL
 (1<<5)

	)

816 
	#SSI_CONFIG_EP
 (1<<4)

	)

817 
	#SSI_CONFIG_ALEN_N
(
N
Ë((N-1)<<20)

	)

818 
	#SSI_CONFIG_DLEN_N
(
N
Ë((N-1)<<16)

	)

819 
	#SSI_CONFIG_BM_HI
 (0<<8)

	)

820 
	#SSI_CONFIG_BM_LO
 (1<<8)

	)

821 
	#SSI_CONFIG_BM_CY
 (2<<8)

	)

823 
	#SSI_ADATA_D
 (1<<24)

	)

824 
	#SSI_ADATA_ADDR
 (0xFF<<16)

	)

825 
	#SSI_ADATA_DATA
 (0x0FFF)

	)

826 
	#SSI_ADATA_ADDR_N
(
N
Ë(N<<16)

	)

828 
	#SSI_ENABLE_CD
 (1<<1)

	)

829 
	#SSI_ENABLE_E
 (1<<0)

	)

833 
	#IRDA_BASE
 0xB0300000

	)

834 
	#IR_RING_PTR_STATUS
 (
IRDA_BASE
+0x00)

	)

835 
	#IR_RING_BASE_ADDR_H
 (
IRDA_BASE
+0x04)

	)

836 
	#IR_RING_BASE_ADDR_L
 (
IRDA_BASE
+0x08)

	)

837 
	#IR_RING_SIZE
 (
IRDA_BASE
+0x0C)

	)

838 
	#IR_RING_PROMPT
 (
IRDA_BASE
+0x10)

	)

839 
	#IR_RING_ADDR_CMPR
 (
IRDA_BASE
+0x14)

	)

840 
	#IR_INT_CLEAR
 (
IRDA_BASE
+0x18)

	)

841 
	#IR_CONFIG_1
 (
IRDA_BASE
+0x20)

	)

842 
	#IR_RX_INVERT_LED
 (1<<0)

	)

843 
	#IR_TX_INVERT_LED
 (1<<1)

	)

844 
	#IR_ST
 (1<<2)

	)

845 
	#IR_SF
 (1<<3)

	)

846 
	#IR_SIR
 (1<<4)

	)

847 
	#IR_MIR
 (1<<5)

	)

848 
	#IR_FIR
 (1<<6)

	)

849 
	#IR_16CRC
 (1<<7)

	)

850 
	#IR_TD
 (1<<8)

	)

851 
	#IR_RX_ALL
 (1<<9)

	)

852 
	#IR_DMA_ENABLE
 (1<<10)

	)

853 
	#IR_RX_ENABLE
 (1<<11)

	)

854 
	#IR_TX_ENABLE
 (1<<12)

	)

855 
	#IR_LOOPBACK
 (1<<14)

	)

856 
	#IR_SIR_MODE
 (
IR_SIR
 | 
IR_DMA_ENABLE
 | \

857 
IR_RX_ALL
 | 
IR_RX_ENABLE
 | 
IR_SF
 | 
IR_16CRC
)

	)

858 
	#IR_SIR_FLAGS
 (
IRDA_BASE
+0x24)

	)

859 
	#IR_ENABLE
 (
IRDA_BASE
+0x28)

	)

860 
	#IR_RX_STATUS
 (1<<9)

	)

861 
	#IR_TX_STATUS
 (1<<10)

	)

862 
	#IR_READ_PHY_CONFIG
 (
IRDA_BASE
+0x2C)

	)

863 
	#IR_WRITE_PHY_CONFIG
 (
IRDA_BASE
+0x30)

	)

864 
	#IR_MAX_PKT_LEN
 (
IRDA_BASE
+0x34)

	)

865 
	#IR_RX_BYTE_CNT
 (
IRDA_BASE
+0x38)

	)

866 
	#IR_CONFIG_2
 (
IRDA_BASE
+0x3C)

	)

867 
	#IR_MODE_INV
 (1<<0)

	)

868 
	#IR_ONE_PIN
 (1<<1)

	)

869 
	#IR_INTERFACE_CONFIG
 (
IRDA_BASE
+0x40)

	)

872 
	#SYS_PINFUNC
 0xB190002C

	)

873 
	#SYS_PF_USB
 (1<<15Ë

	)

874 
	#SYS_PF_U3
 (1<<14Ë

	)

875 
	#SYS_PF_U2
 (1<<13Ë

	)

876 
	#SYS_PF_U1
 (1<<12Ë

	)

877 
	#SYS_PF_SRC
 (1<<11Ë

	)

878 
	#SYS_PF_CK5
 (1<<10Ë

	)

879 
	#SYS_PF_CK4
 (1<<9Ë

	)

880 
	#SYS_PF_IRF
 (1<<8Ë

	)

881 
	#SYS_PF_UR3
 (1<<7Ë

	)

882 
	#SYS_PF_I2D
 (1<<6Ë

	)

883 
	#SYS_PF_I2S
 (1<<5Ë

	)

884 
	#SYS_PF_NI2
 (1<<4Ë

	)

885 
	#SYS_PF_U0
 (1<<3Ë

	)

886 
	#SYS_PF_RD
 (1<<2Ë

	)

887 
	#SYS_PF_A97
 (1<<1Ë

	)

888 
	#SYS_PF_S0
 (1<<0Ë

	)

889 
	#SYS_TRIOUTRD
 0xB1900100

	)

890 
	#SYS_TRIOUTCLR
 0xB1900100

	)

891 
	#SYS_OUTPUTRD
 0xB1900108

	)

892 
	#SYS_OUTPUTSET
 0xB1900108

	)

893 
	#SYS_OUTPUTCLR
 0xB190010C

	)

894 
	#SYS_PINSTATERD
 0xB1900110

	)

895 
	#SYS_PININPUTEN
 0xB1900110

	)

898 
	#GPIO2_BASE
 0xB1700000

	)

899 
	#GPIO2_DIR
 (
GPIO2_BASE
 + 0)

	)

900 
	#GPIO2_DATA_EN
 (
GPIO2_BASE
 + 8)

	)

901 
	#GPIO2_PIN_STATE
 (
GPIO2_BASE
 + 0xC)

	)

902 
	#GPIO2_INT_ENABLE
 (
GPIO2_BASE
 + 0x10)

	)

903 
	#GPIO2_ENABLE
 (
GPIO2_BASE
 + 0x14)

	)

906 
	#SYS_SCRATCH0
 0xB1900018

	)

907 
	#SYS_SCRATCH1
 0xB190001C

	)

908 
	#SYS_WAKEMSK
 0xB1900034

	)

909 
	#SYS_ENDIAN
 0xB1900038

	)

910 
	#SYS_POWERCTRL
 0xB190003C

	)

911 
	#SYS_WAKESRC
 0xB190005C

	)

912 
	#SYS_SLPPWR
 0xB1900078

	)

913 
	#SYS_SLEEP
 0xB190007C

	)

916 
	#SYS_FREQCTRL0
 0xB1900020

	)

917 
	#SYS_FC_FRDIV2_BIT
 22

	)

918 
	#SYS_FC_FRDIV2_MASK
 (0xf‡<< 
FQC2_FRDIV2_BIT
)

	)

919 
	#SYS_FC_FE2
 (1<<21)

	)

920 
	#SYS_FC_FS2
 (1<<20)

	)

921 
	#SYS_FC_FRDIV1_BIT
 12

	)

922 
	#SYS_FC_FRDIV1_MASK
 (0xf‡<< 
FQC2_FRDIV1_BIT
)

	)

923 
	#SYS_FC_FE1
 (1<<11)

	)

924 
	#SYS_FC_FS1
 (1<<10)

	)

925 
	#SYS_FC_FRDIV0_BIT
 2

	)

926 
	#SYS_FC_FRDIV0_MASK
 (0xf‡<< 
FQC2_FRDIV0_BIT
)

	)

927 
	#SYS_FC_FE0
 (1<<1)

	)

928 
	#SYS_FC_FS0
 (1<<0)

	)

929 
	#SYS_FREQCTRL1
 0xB1900024

	)

930 
	#SYS_FC_FRDIV5_BIT
 22

	)

931 
	#SYS_FC_FRDIV5_MASK
 (0xf‡<< 
FQC2_FRDIV5_BIT
)

	)

932 
	#SYS_FC_FE5
 (1<<21)

	)

933 
	#SYS_FC_FS5
 (1<<20)

	)

934 
	#SYS_FC_FRDIV4_BIT
 12

	)

935 
	#SYS_FC_FRDIV4_MASK
 (0xf‡<< 
FQC2_FRDIV4_BIT
)

	)

936 
	#SYS_FC_FE4
 (1<<11)

	)

937 
	#SYS_FC_FS4
 (1<<10)

	)

938 
	#SYS_FC_FRDIV3_BIT
 2

	)

939 
	#SYS_FC_FRDIV3_MASK
 (0xf‡<< 
FQC2_FRDIV3_BIT
)

	)

940 
	#SYS_FC_FE3
 (1<<1)

	)

941 
	#SYS_FC_FS3
 (1<<0)

	)

942 
	#SYS_CLKSRC
 0xB1900028

	)

943 
	#SYS_CS_ME1_BIT
 27

	)

944 
	#SYS_CS_ME1_MASK
 (0x7<<
CSC_ME1_BIT
)

	)

945 
	#SYS_CS_DE1
 (1<<26)

	)

946 
	#SYS_CS_CE1
 (1<<25)

	)

947 
	#SYS_CS_ME0_BIT
 22

	)

948 
	#SYS_CS_ME0_MASK
 (0x7<<
CSC_ME0_BIT
)

	)

949 
	#SYS_CS_DE0
 (1<<21)

	)

950 
	#SYS_CS_CE0
 (1<<20)

	)

951 
	#SYS_CS_MI2_BIT
 17

	)

952 
	#SYS_CS_MI2_MASK
 (0x7<<
CSC_MI2_BIT
)

	)

953 
	#SYS_CS_DI2
 (1<<16)

	)

954 
	#SYS_CS_CI2
 (1<<15)

	)

955 
	#SYS_CS_MUH_BIT
 12

	)

956 
	#SYS_CS_MUH_MASK
 (0x7<<
CSC_MUH_BIT
)

	)

957 
	#SYS_CS_DUH
 (1<<11)

	)

958 
	#SYS_CS_CUH
 (1<<10)

	)

959 
	#SYS_CS_MUD_BIT
 7

	)

960 
	#SYS_CS_MUD_MASK
 (0x7<<
CSC_MUD_BIT
)

	)

961 
	#SYS_CS_DUD
 (1<<6)

	)

962 
	#SYS_CS_CUD
 (1<<5)

	)

963 
	#SYS_CS_MIR_BIT
 2

	)

964 
	#SYS_CS_MIR_MASK
 (0x7<<
CSC_MIR_BIT
)

	)

965 
	#SYS_CS_DIR
 (1<<1)

	)

966 
	#SYS_CS_CIR
 (1<<0)

	)

968 
	#SYS_CS_MUX_AUX
 0x1

	)

969 
	#SYS_CS_MUX_FQ0
 0x2

	)

970 
	#SYS_CS_MUX_FQ1
 0x3

	)

971 
	#SYS_CS_MUX_FQ2
 0x4

	)

972 
	#SYS_CS_MUX_FQ3
 0x5

	)

973 
	#SYS_CS_MUX_FQ4
 0x6

	)

974 
	#SYS_CS_MUX_FQ5
 0x7

	)

975 
	#SYS_CPUPLL
 0xB1900060

	)

976 
	#SYS_AUXPLL
 0xB1900064

	)

979 
	#AC97C_CONFIG
 0xB0000000

	)

980 
	#AC97C_RECV_SLOTS_BIT
 13

	)

981 
	#AC97C_RECV_SLOTS_MASK
 (0x3f‡<< 
AC97C_RECV_SLOTS_BIT
)

	)

982 
	#AC97C_XMIT_SLOTS_BIT
 3

	)

983 
	#AC97C_XMIT_SLOTS_MASK
 (0x3f‡<< 
AC97C_XMIT_SLOTS_BIT
)

	)

984 
	#AC97C_SG
 (1<<2)

	)

985 
	#AC97C_SYNC
 (1<<1)

	)

986 
	#AC97C_RESET
 (1<<0)

	)

987 
	#AC97C_STATUS
 0xB0000004

	)

988 
	#AC97C_XU
 (1<<11)

	)

989 
	#AC97C_XO
 (1<<10)

	)

990 
	#AC97C_RU
 (1<<9)

	)

991 
	#AC97C_RO
 (1<<8)

	)

992 
	#AC97C_READY
 (1<<7)

	)

993 
	#AC97C_CP
 (1<<6)

	)

994 
	#AC97C_TR
 (1<<5)

	)

995 
	#AC97C_TE
 (1<<4)

	)

996 
	#AC97C_TF
 (1<<3)

	)

997 
	#AC97C_RR
 (1<<2)

	)

998 
	#AC97C_RE
 (1<<1)

	)

999 
	#AC97C_RF
 (1<<0)

	)

1000 
	#AC97C_DATA
 0xB0000008

	)

1001 
	#AC97C_CMD
 0xB000000C

	)

1002 
	#AC97C_WD_BIT
 16

	)

1003 
	#AC97C_READ
 (1<<7)

	)

1004 
	#AC97C_INDEX_MASK
 0x7f

	)

1005 
	#AC97C_CNTRL
 0xB0000010

	)

1006 
	#AC97C_RS
 (1<<1)

	)

1007 
	#AC97C_CE
 (1<<0)

	)

1009 
	#DB1000_BCSR_ADDR
 0xAE000000

	)

1010 
	#DB1550_BCSR_ADDR
 0xAF000000

	)

1012 #ifde‡
CONFIG_DBAU1550


1013 
	#DB1XX0_BCSR_ADDR
 
DB1550_BCSR_ADDR


	)

1015 
	#DB1XX0_BCSR_ADDR
 
DB1000_BCSR_ADDR


	)

1018 #ifde‡
CONFIG_SOC_AU1500


1020 
	#Au1500_CFG_BASE
 0xB4005000

	)

1021 
	#Au1500_PCI_CMEM
 (
Au1500_CFG_BASE
 + 0)

	)

1022 
	#Au1500_PCI_CFG
 (
Au1500_CFG_BASE
 + 4)

	)

1023 
	#PCI_ERROR
 ((1<<22Ë| (1<<23Ë| (1<<24Ë| (1<<25Ë| (1<<26Ë| (1<<27))

	)

1024 
	#Au1500_PCI_B2BMASK_CCH
 (
Au1500_CFG_BASE
 + 8)

	)

1025 
	#Au1500_PCI_B2B0_VID
 (
Au1500_CFG_BASE
 + 0xC)

	)

1026 
	#Au1500_PCI_B2B1_ID
 (
Au1500_CFG_BASE
 + 0x10)

	)

1027 
	#Au1500_PCI_MWMASK_DEV
 (
Au1500_CFG_BASE
 + 0x14)

	)

1028 
	#Au1500_PCI_MWBASE_REV_CCL
 (
Au1500_CFG_BASE
 + 0x18)

	)

1029 
	#Au1500_PCI_ERR_ADDR
 (
Au1500_CFG_BASE
 + 0x1C)

	)

1030 
	#Au1500_PCI_SPEC_INTACK
 (
Au1500_CFG_BASE
 + 0x20)

	)

1031 
	#Au1500_PCI_ID
 (
Au1500_CFG_BASE
 + 0x100)

	)

1032 
	#Au1500_PCI_STATCMD
 (
Au1500_CFG_BASE
 + 0x104)

	)

1033 
	#Au1500_PCI_CLASSREV
 (
Au1500_CFG_BASE
 + 0x108)

	)

1034 
	#Au1500_PCI_HDRTYPE
 (
Au1500_CFG_BASE
 + 0x10C)

	)

1035 
	#Au1500_PCI_MBAR
 (
Au1500_CFG_BASE
 + 0x110)

	)

1037 
	#Au1500_PCI_HDR
 0xB4005100

	)

1047 
	#Au1500_EXT_CFG
 0x600000000

	)

1048 
	#Au1500_EXT_CFG_TYPE1
 0x680000000

	)

1049 
	#Au1500_PCI_IO_START
 0x500000000

	)

1050 
	#Au1500_PCI_IO_END
 0x5000FFFFF

	)

1051 
	#Au1500_PCI_MEM_START
 0x440000000

	)

1052 
	#Au1500_PCI_MEM_END
 0x443FFFFFF

	)

1054 
	#PCI_IO_START
 (
Au1500_PCI_IO_START
 + 0x300)

	)

1055 
	#PCI_IO_END
 (
Au1500_PCI_IO_END
)

	)

1056 
	#PCI_MEM_START
 (
Au1500_PCI_MEM_START
)

	)

1057 
	#PCI_MEM_END
 (
Au1500_PCI_MEM_END
)

	)

1058 
	#PCI_FIRST_DEVFN
 (0<<3)

	)

1059 
	#PCI_LAST_DEVFN
 (19<<3)

	)

1063 #i‡
deföed
(
CONFIG_SOC_AU1100
Ë|| (deföed(
CONFIG_SOC_AU1000
Ë&& !deföed(
CONFIG_MIPS_PB1000
))

1065 
	#PCI_IO_START
 0

	)

1066 
	#PCI_IO_END
 0

	)

1067 
	#PCI_MEM_START
 0

	)

1068 
	#PCI_MEM_END
 0

	)

1069 
	#PCI_FIRST_DEVFN
 0

	)

1070 
	#PCI_LAST_DEVFN
 0

	)

1072 
	#AU1X_SOCK0_IO
 0xF00000000

	)

1073 
	#AU1X_SOCK0_PHYS_ATTR
 0xF40000000

	)

1074 
	#AU1X_SOCK0_PHYS_MEM
 0xF80000000

	)

1081 
	#AU1X_SOCK1_IO
 0xF04000000

	)

1082 
	#AU1X_SOCK1_PHYS_ATTR
 0xF44000000

	)

1083 
	#AU1X_SOCK1_PHYS_MEM
 0xF84000000

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/bitops.h

9 #i‚de‡
_ASM_BITOPS_H


10 
	#_ASM_BITOPS_H


	)

12 
	~<löux/ty≥s.h
>

13 
	~<asm/byã‹dî.h
>

15 #ifde‡
__KERNEL__


17 
	~<asm/sgidefs.h
>

18 
	~<asm/sy°em.h
>

19 
	~<löux/c⁄fig.h
>

24 
	#smp_mb__bef‹e_˛ór_bô
(Ë
	`b¨rõr
()

	)

25 
	#smp_mb__a·î_˛ór_bô
(Ë
	`b¨rõr
()

	)

31 
	#__bi_Êags
 
Êags


	)

32 
	#__bi_˛i
(Ë
	`__˛i
()

	)

33 
	#__bi_ßve_Êags
(
x
Ë
	`__ßve_Êags
(x)

	)

34 
	#__bi_ßve_™d_˛i
(
x
Ë
	`__ßve_™d_˛i
(x)

	)

35 
	#__bi_ª°‹e_Êags
(
x
Ë
	`__ª°‹e_Êags
(x)

	)

37 
	#__bi_Êags


	)

38 
	#__bi_˛i
()

	)

39 
	#__bi_ßve_Êags
(
x
)

	)

40 
	#__bi_ßve_™d_˛i
(
x
)

	)

41 
	#__bi_ª°‹e_Êags
(
x
)

	)

44 #ifde‡
CONFIG_CPU_HAS_LLSC


46 
	~<asm/mù§egs.h
>

63 
__ölöe__
 

64 
	$£t_bô
(
ƒ
, vﬁ©ûê*
addr
)

66 *
m
 = ((*Ë
addr
Ë+ (
ƒ
 >> 5);

67 
ãmp
;

69 
__asm__
 
	`__vﬁ©ûe__
(

74 : "=&r" (
ãmp
), "=m" (*
m
)

75 : "ú" (1UL << (
ƒ
 & 0x1f)), "m" (*
m
));

76 
	}
}

87 
__ölöe__
 
	$__£t_bô
(
ƒ
, vﬁ©ûê* 
addr
)

89 * 
m
 = ((*Ë
addr
Ë+ (
ƒ
 >> 5);

91 *
m
 |1UL << (
ƒ
 & 31);

92 
	}
}

104 
__ölöe__
 

105 
	$˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
)

107 *
m
 = ((*Ë
addr
Ë+ (
ƒ
 >> 5);

108 
ãmp
;

110 
__asm__
 
	`__vﬁ©ûe__
(

115 : "=&r" (
ãmp
), "=m" (*
m
)

116 : "ú" (~(1UL << (
ƒ
 & 0x1f))), "m" (*
m
));

117 
	}
}

128 
__ölöe__
 

129 
	$ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
)

131 *
m
 = ((*Ë
addr
Ë+ (
ƒ
 >> 5);

132 
ãmp
;

134 
__asm__
 
	`__vﬁ©ûe__
(

139 : "=&r" (
ãmp
), "=m" (*
m
)

140 : "ú" (1UL << (
ƒ
 & 0x1f)), "m" (*
m
));

141 
	}
}

152 
__ölöe__
 
	$__ch™ge_bô
(
ƒ
, vﬁ©ûê* 
addr
)

154 * 
m
 = ((*Ë
addr
Ë+ (
ƒ
 >> 5);

156 *
m
 ^1UL << (
ƒ
 & 31);

157 
	}
}

167 
__ölöe__
 

168 
	$ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê*
addr
)

170 *
m
 = ((*Ë
addr
Ë+ (
ƒ
 >> 5);

171 
ãmp
, 
ªs
;

173 
__asm__
 
	`__vﬁ©ûe__
(

181 : "=&r" (
ãmp
), "=m" (*
m
), "=&r" (
ªs
)

182 : "r" (1UL << (
ƒ
 & 0x1f)), "m" (*
m
)

185  
ªs
 != 0;

186 
	}
}

197 
__ölöe__
 
	$__ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê* 
addr
)

199 
mask
, 
ªtvÆ
;

200 vﬁ©ûê*
a
 = 
addr
;

202 
a
 +
ƒ
 >> 5;

203 
mask
 = 1 << (
ƒ
 & 0x1f);

204 
ªtvÆ
 = (
mask
 & *
a
) != 0;

205 *
a
 |
mask
;

207  
ªtvÆ
;

208 
	}
}

218 
__ölöe__
 

219 
	$ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
)

221 *
m
 = ((*Ë
addr
Ë+ (
ƒ
 >> 5);

222 
ãmp
, 
ªs
;

224 
__asm__
 
	`__vﬁ©ûe__
(

233 : "=&r" (
ãmp
), "=m" (*
m
), "=&r" (
ªs
)

234 : "r" (1UL << (
ƒ
 & 0x1f)), "m" (*
m
)

237  
ªs
 != 0;

238 
	}
}

249 
__ölöe__
 
	$__ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê* 
addr
)

251 
mask
, 
ªtvÆ
;

252 vﬁ©ûê*
a
 = 
addr
;

254 
a
 +
ƒ
 >> 5;

255 
mask
 = 1 << (
ƒ
 & 0x1f);

256 
ªtvÆ
 = (
mask
 & *
a
) != 0;

257 *
a
 &~
mask
;

259  
ªtvÆ
;

260 
	}
}

270 
__ölöe__
 

271 
	$ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
)

273 *
m
 = ((*Ë
addr
Ë+ (
ƒ
 >> 5);

274 
ãmp
, 
ªs
;

276 
__asm__
 
	`__vﬁ©ûe__
(

284 : "=&r" (
ãmp
), "=m" (*
m
), "=&r" (
ªs
)

285 : "r" (1UL << (
ƒ
 & 0x1f)), "m" (*
m
)

288  
ªs
 != 0;

289 
	}
}

300 
__ölöe__
 
	$__ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê* 
addr
)

302 
mask
, 
ªtvÆ
;

303 vﬁ©ûê*
a
 = 
addr
;

305 
a
 +
ƒ
 >> 5;

306 
mask
 = 1 << (
ƒ
 & 0x1f);

307 
ªtvÆ
 = (
mask
 & *
a
) != 0;

308 *
a
 ^
mask
;

310  
ªtvÆ
;

311 
	}
}

325 
__ölöe__
 
	$£t_bô
(
ƒ
, vﬁ©ûê* 
addr
)

327 
mask
;

328 vﬁ©ûê*
a
 = 
addr
;

329 
__bi_Êags
;

331 
a
 +
ƒ
 >> 5;

332 
mask
 = 1 << (
ƒ
 & 0x1f);

333 
	`__bi_ßve_™d_˛i
(
Êags
);

334 *
a
 |
mask
;

335 
	`__bi_ª°‹e_Êags
(
Êags
);

336 
	}
}

347 
__ölöe__
 
	$__£t_bô
(
ƒ
, vﬁ©ûê* 
addr
)

349 
mask
;

350 vﬁ©ûê*
a
 = 
addr
;

352 
a
 +
ƒ
 >> 5;

353 
mask
 = 1 << (
ƒ
 & 0x1f);

354 *
a
 |
mask
;

355 
	}
}

367 
__ölöe__
 
	$˛ór_bô
(
ƒ
, vﬁ©ûê* 
addr
)

369 
mask
;

370 vﬁ©ûê*
a
 = 
addr
;

371 
__bi_Êags
;

373 
a
 +
ƒ
 >> 5;

374 
mask
 = 1 << (
ƒ
 & 0x1f);

375 
	`__bi_ßve_™d_˛i
(
Êags
);

376 *
a
 &~
mask
;

377 
	`__bi_ª°‹e_Êags
(
Êags
);

378 
	}
}

389 
__ölöe__
 
	$ch™ge_bô
(
ƒ
, vﬁ©ûê* 
addr
)

391 
mask
;

392 vﬁ©ûê*
a
 = 
addr
;

393 
__bi_Êags
;

395 
a
 +
ƒ
 >> 5;

396 
mask
 = 1 << (
ƒ
 & 0x1f);

397 
	`__bi_ßve_™d_˛i
(
Êags
);

398 *
a
 ^
mask
;

399 
	`__bi_ª°‹e_Êags
(
Êags
);

400 
	}
}

411 
__ölöe__
 
	$__ch™ge_bô
(
ƒ
, vﬁ©ûê* 
addr
)

413 * 
m
 = ((*Ë
addr
Ë+ (
ƒ
 >> 5);

415 *
m
 ^1UL << (
ƒ
 & 31);

416 
	}
}

426 
__ölöe__
 
	$ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê* 
addr
)

428 
mask
, 
ªtvÆ
;

429 vﬁ©ûê*
a
 = 
addr
;

430 
__bi_Êags
;

432 
a
 +
ƒ
 >> 5;

433 
mask
 = 1 << (
ƒ
 & 0x1f);

434 
	`__bi_ßve_™d_˛i
(
Êags
);

435 
ªtvÆ
 = (
mask
 & *
a
) != 0;

436 *
a
 |
mask
;

437 
	`__bi_ª°‹e_Êags
(
Êags
);

439  
ªtvÆ
;

440 
	}
}

451 
__ölöe__
 
	$__ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê* 
addr
)

453 
mask
, 
ªtvÆ
;

454 vﬁ©ûê*
a
 = 
addr
;

456 
a
 +
ƒ
 >> 5;

457 
mask
 = 1 << (
ƒ
 & 0x1f);

458 
ªtvÆ
 = (
mask
 & *
a
) != 0;

459 *
a
 |
mask
;

461  
ªtvÆ
;

462 
	}
}

472 
__ölöe__
 
	$ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê* 
addr
)

474 
mask
, 
ªtvÆ
;

475 vﬁ©ûê*
a
 = 
addr
;

476 
__bi_Êags
;

478 
a
 +
ƒ
 >> 5;

479 
mask
 = 1 << (
ƒ
 & 0x1f);

480 
	`__bi_ßve_™d_˛i
(
Êags
);

481 
ªtvÆ
 = (
mask
 & *
a
) != 0;

482 *
a
 &~
mask
;

483 
	`__bi_ª°‹e_Êags
(
Êags
);

485  
ªtvÆ
;

486 
	}
}

497 
__ölöe__
 
	$__ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê* 
addr
)

499 
mask
, 
ªtvÆ
;

500 vﬁ©ûê*
a
 = 
addr
;

502 
a
 +
ƒ
 >> 5;

503 
mask
 = 1 << (
ƒ
 & 0x1f);

504 
ªtvÆ
 = (
mask
 & *
a
) != 0;

505 *
a
 &~
mask
;

507  
ªtvÆ
;

508 
	}
}

518 
__ölöe__
 
	$ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê* 
addr
)

520 
mask
, 
ªtvÆ
;

521 vﬁ©ûê*
a
 = 
addr
;

522 
__bi_Êags
;

524 
a
 +
ƒ
 >> 5;

525 
mask
 = 1 << (
ƒ
 & 0x1f);

526 
	`__bi_ßve_™d_˛i
(
Êags
);

527 
ªtvÆ
 = (
mask
 & *
a
) != 0;

528 *
a
 ^
mask
;

529 
	`__bi_ª°‹e_Êags
(
Êags
);

531  
ªtvÆ
;

532 
	}
}

543 
__ölöe__
 
	$__ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê* 
addr
)

545 
mask
, 
ªtvÆ
;

546 vﬁ©ûê*
a
 = 
addr
;

548 
a
 +
ƒ
 >> 5;

549 
mask
 = 1 << (
ƒ
 & 0x1f);

550 
ªtvÆ
 = (
mask
 & *
a
) != 0;

551 *
a
 ^
mask
;

553  
ªtvÆ
;

554 
	}
}

556 #unde‡
__bi_Êags


557 #unde‡
__bi_˛i


558 #unde‡
__bi_ßve_Êags


559 #unde‡
__bi_ª°‹e_Êags


568 
__ölöe__
 
	$ã°_bô
(
ƒ
, vﬁ©ûê*
addr
)

570  ((1UL << (
ƒ
 & 31)Ë& (((c⁄° *Ë
addr
)[nr >> 5])) != 0;

571 
	}
}

573 #i‚de‡
__MIPSEB__


585 
__ölöe__
 
	$föd_fú°_zîo_bô
 (*
addr
, 
size
)

587 
dummy
;

588 
ªs
;

590 i‡(!
size
)

593 
	`__asm__
 (".set\tnoreorder\n\t"

599 #i‡(
_MIPS_ISA
 =
_MIPS_ISA_MIPS2
 ) || (_MIPS_ISA =
_MIPS_ISA_MIPS3
 ) || \

600 (
_MIPS_ISA
 =
_MIPS_ISA_MIPS4
 ) || (_MIPS_ISA =
_MIPS_ISA_MIPS5
 ) || \

601 (
_MIPS_ISA
 =
_MIPS_ISA_MIPS32
Ë|| (_MIPS_ISA =
_MIPS_ISA_MIPS64
)

610 #ifde‡
__MIPSEB__


622 : "Ù" (
ªs
), "Ù" (
dummy
), "Ù" (
addr
)

624 "2" (
addr
), "r" (
size
)

627  
ªs
;

628 
	}
}

636 
__ölöe__
 
	$föd_√xt_zîo_bô
 (* 
addr
, 
size
, 
off£t
)

638 *
p
 = ((*Ë
addr
Ë+ (
off£t
 >> 5);

639 
£t
 = 0, 
bô
 = 
off£t
 & 31, 
ªs
;

640 
dummy
;

642 i‡(
bô
) {

646 #ifde‡
__MIPSEB__


649 
	`__asm__
(".set\tnoreorder\n\t"

659 : "Ù" (
£t
), "Ù" (
dummy
)

660 : "0" (0), "1" (1 << 
bô
), "r" (*
p
)

662 i‡(
£t
 < (32 - 
bô
))

663  
£t
 + 
off£t
;

664 
£t
 = 32 - 
bô
;

665 
p
++;

670 
ªs
 = 
	`föd_fú°_zîo_bô
(
p
, 
size
 - 32 * (∞- (*Ë
addr
));

671  
off£t
 + 
£t
 + 
ªs
;

672 
	}
}

682 
__ölöe__
 
	$ffz
(
w‹d
)

684 
__ªs
;

685 
mask
 = 1;

687 
	`__asm__
 (

699 : "=&r" (
__ªs
), "Ù" (
mask
)

700 : "r" (
w‹d
), "1" (
mask
)

703  
__ªs
;

704 
	}
}

706 #ifde‡
__KERNEL__


717 
	#ffs
(
x
Ë
	`gíîic_ffs
(x)

	)

726 
	#hweight32
(
x
Ë
	`gíîic_hweight32
(x)

	)

727 
	#hweight16
(
x
Ë
	`gíîic_hweight16
(x)

	)

728 
	#hweight8
(
x
Ë
	`gíîic_hweight8
(x)

	)

732 #ifde‡
__MIPSEB__


739 
__ölöe__
 
	$föd_√xt_zîo_bô
(*
addr
, 
size
, 
off£t
)

741 *
p
 = ((*Ë
addr
Ë+ (
off£t
 >> 5);

742 
ªsu…
 = 
off£t
 & ~31UL;

743 
tmp
;

745 i‡(
off£t
 >
size
)

746  
size
;

747 
size
 -
ªsu…
;

748 
off£t
 &= 31UL;

749 i‡(
off£t
) {

750 
tmp
 = *(
p
++);

751 
tmp
 |~0UL >> (32-
off£t
);

752 i‡(
size
 < 32)

753 
found_fú°
;

754 i‡(~
tmp
)

755 
found_middÀ
;

756 
size
 -= 32;

757 
ªsu…
 += 32;

759 
size
 & ~31UL) {

760 i‡(~(
tmp
 = *(
p
++)))

761 
found_middÀ
;

762 
ªsu…
 += 32;

763 
size
 -= 32;

765 i‡(!
size
)

766  
ªsu…
;

767 
tmp
 = *
p
;

769 
found_fú°
:

770 
tmp
 |~0UL << 
size
;

771 
found_middÀ
:

772  
ªsu…
 + 
	`ffz
(
tmp
);

773 
	}
}

788 
föd_fú°_zîo_bô
 (*
addr
, 
size
);

791 
	#föd_fú°_zîo_bô
(
addr
, 
size
) \

792 
	`föd_√xt_zîo_bô
((
addr
), (
size
), 0)

	)

798 #ifde‡
__MIPSEB__


799 
__ölöe__
 
	$ext2_£t_bô
(
ƒ
, * 
addr
)

801 
mask
, 
ªtvÆ
, 
Êags
;

802 *
ADDR
 = (*Ë
addr
;

804 
ADDR
 +
ƒ
 >> 3;

805 
mask
 = 1 << (
ƒ
 & 0x07);

806 
	`ßve_™d_˛i
(
Êags
);

807 
ªtvÆ
 = (
mask
 & *
ADDR
) != 0;

808 *
ADDR
 |
mask
;

809 
	`ª°‹e_Êags
(
Êags
);

810  
ªtvÆ
;

811 
	}
}

813 
__ölöe__
 
	$ext2_˛ór_bô
(
ƒ
, * 
addr
)

815 
mask
, 
ªtvÆ
, 
Êags
;

816 *
ADDR
 = (*Ë
addr
;

818 
ADDR
 +
ƒ
 >> 3;

819 
mask
 = 1 << (
ƒ
 & 0x07);

820 
	`ßve_™d_˛i
(
Êags
);

821 
ªtvÆ
 = (
mask
 & *
ADDR
) != 0;

822 *
ADDR
 &~
mask
;

823 
	`ª°‹e_Êags
(
Êags
);

824  
ªtvÆ
;

825 
	}
}

827 
__ölöe__
 
	$ext2_ã°_bô
(
ƒ
, c⁄° * 
addr
)

829 
mask
;

830 c⁄° *
ADDR
 = (c⁄° *Ë
addr
;

832 
ADDR
 +
ƒ
 >> 3;

833 
mask
 = 1 << (
ƒ
 & 0x07);

834  ((
mask
 & *
ADDR
) != 0);

835 
	}
}

837 
	#ext2_föd_fú°_zîo_bô
(
addr
, 
size
) \

838 
	`ext2_föd_√xt_zîo_bô
((
addr
), (
size
), 0)

	)

840 
__ölöe__
 
	$ext2_föd_√xt_zîo_bô
(*
addr
, 
size
, 
off£t
)

842 *
p
 = ((*Ë
addr
Ë+ (
off£t
 >> 5);

843 
ªsu…
 = 
off£t
 & ~31UL;

844 
tmp
;

846 i‡(
off£t
 >
size
)

847  
size
;

848 
size
 -
ªsu…
;

849 
off£t
 &= 31UL;

850 if(
off£t
) {

861 
tmp
 = *(
p
++);

862 
tmp
 |
	`__swab32
(~0UL >> (32-
off£t
));

863 if(
size
 < 32)

864 
found_fú°
;

865 if(~
tmp
)

866 
found_middÀ
;

867 
size
 -= 32;

868 
ªsu…
 += 32;

870 
size
 & ~31UL) {

871 if(~(
tmp
 = *(
p
++)))

872 
found_middÀ
;

873 
ªsu…
 += 32;

874 
size
 -= 32;

876 if(!
size
)

877  
ªsu…
;

878 
tmp
 = *
p
;

880 
found_fú°
:

885  
ªsu…
 + 
	`ffz
(
	`__swab32
(
tmp
Ë| (~0UL << 
size
));

886 
found_middÀ
:

887  
ªsu…
 + 
	`ffz
(
	`__swab32
(
tmp
));

888 
	}
}

892 
	#ext2_£t_bô
(
ƒ
, 
addr
Ë
	`ã°_™d_£t_bô
(“r), (addr))

	)

893 
	#ext2_˛ór_bô
(
ƒ
, 
addr
Ë
	`ã°_™d_˛ór_bô
(“r), (addr))

	)

894 
	#ext2_ã°_bô
(
ƒ
, 
addr
Ë
	`ã°_bô
(“r), (addr))

	)

895 
	#ext2_föd_fú°_zîo_bô
(
addr
, 
size
Ë
	`föd_fú°_zîo_bô
(◊ddr), (size))

	)

896 
	#ext2_föd_√xt_zîo_bô
(
addr
, 
size
, 
off£t
) \

897 
	`föd_√xt_zîo_bô
((
addr
), (
size
), (
off£t
))

	)

906 
	#möix_ã°_™d_£t_bô
(
ƒ
,
addr
Ë
	`ã°_™d_£t_bô
“r,addr)

	)

907 
	#möix_£t_bô
(
ƒ
,
addr
Ë
	`£t_bô
“r,addr)

	)

908 
	#möix_ã°_™d_˛ór_bô
(
ƒ
,
addr
Ë
	`ã°_™d_˛ór_bô
“r,addr)

	)

909 
	#möix_ã°_bô
(
ƒ
,
addr
Ë
	`ã°_bô
“r,addr)

	)

910 
	#möix_föd_fú°_zîo_bô
(
addr
,
size
Ë
	`föd_fú°_zîo_bô
◊ddr,size)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/byteorder.h

9 #i‚de‡
_MIPS_BYTEORDER_H


10 
	#_MIPS_BYTEORDER_H


	)

12 
	~<asm/ty≥s.h
>

14 #ifde‡
__GNUC__


16 #i‡!
deföed
(
__STRICT_ANSI__
Ë|| deföed(
__KERNEL__
)

17 
	#__BYTEORDER_HAS_U64__


	)

18 
	#__SWAB_64_THRU_32__


	)

23 #i‡
deföed
 (
__MIPSEB__
)

24 
	~<löux/byã‹dî/big_ídün.h
>

25 #ñi‡
deföed
 (
__MIPSEL__
)

26 
	~<löux/byã‹dî/lôée_ídün.h
>

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/cachectl.h

6 #i‚def 
__ASM_MIPS_CACHECTL


7 
	#__ASM_MIPS_CACHECTL


	)

12 
	#ICACHE
 (1<<0Ë

	)

13 
	#DCACHE
 (1<<1Ë

	)

14 
	#BCACHE
 (
ICACHE
|
DCACHE
Ë

	)

21 
	#CACHEABLE
 0

	)

22 
	#UNCACHEABLE
 1

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/cacheops.h

10 #i‚def 
__ASM_MIPS_CACHEOPS_H


11 
	#__ASM_MIPS_CACHEOPS_H


	)

16 
	#Index_InvÆid©e_I
 0x00

	)

17 
	#Index_Wrôeback_Inv_D
 0x01

	)

18 
	#Index_InvÆid©e_SI
 0x02

	)

19 
	#Index_Wrôeback_Inv_SD
 0x03

	)

20 
	#Index_Lﬂd_Tag_I
 0x04

	)

21 
	#Index_Lﬂd_Tag_D
 0x05

	)

22 
	#Index_Lﬂd_Tag_SI
 0x06

	)

23 
	#Index_Lﬂd_Tag_SD
 0x07

	)

24 
	#Index_St‹e_Tag_I
 0x08

	)

25 
	#Index_St‹e_Tag_D
 0x09

	)

26 
	#Index_St‹e_Tag_SI
 0x0A

	)

27 
	#Index_St‹e_Tag_SD
 0x0B

	)

28 
	#Cª©e_Dúty_Ex˛_D
 0x0d

	)

29 
	#Cª©e_Dúty_Ex˛_SD
 0x0f

	)

30 
	#Hô_InvÆid©e_I
 0x10

	)

31 
	#Hô_InvÆid©e_D
 0x11

	)

32 
	#Hô_InvÆid©e_SI
 0x12

	)

33 
	#Hô_InvÆid©e_SD
 0x13

	)

34 
	#Fûl
 0x14

	)

35 
	#Hô_Wrôeback_Inv_D
 0x15

	)

37 
	#Hô_Wrôeback_Inv_SD
 0x17

	)

38 
	#Hô_Wrôeback_I
 0x18

	)

39 
	#Hô_Wrôeback_D
 0x19

	)

41 
	#Hô_Wrôeback_SD
 0x1b

	)

44 
	#Hô_Së_VútuÆ_SI
 0x1e

	)

45 
	#Hô_Së_VútuÆ_SD
 0x1f

	)

50 
	#INDEX_INVALIDATE_I
 0x00

	)

51 
	#INDEX_WRITEBACK_INV_D
 0x01

	)

52 
	#INDEX_LOAD_TAG_I
 0x04

	)

53 
	#INDEX_LOAD_TAG_D
 0x05

	)

54 
	#INDEX_STORE_TAG_I
 0x08

	)

55 
	#INDEX_STORE_TAG_D
 0x09

	)

56 #i‡
deföed
(
CONFIG_CPU_LOONGSON2
)

57 
	#HIT_INVALIDATE_I
 0x00

	)

59 
	#HIT_INVALIDATE_I
 0x10

	)

61 
	#HIT_INVALIDATE_D
 0x11

	)

62 
	#HIT_WRITEBACK_INV_D
 0x15

	)

67 
	#CREATE_DIRTY_EXCL_D
 0x0d

	)

68 
	#FILL
 0x14

	)

69 
	#HIT_WRITEBACK_I
 0x18

	)

70 
	#HIT_WRITEBACK_D
 0x19

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/global_data.h

24 #i‚def 
__ASM_GBL_DATA_H


25 
	#__ASM_GBL_DATA_H


	)

27 
	~<asm/ªgdef.h
>

39 
	sglobÆ_d©a
 {

40 
bd_t
 *
	mbd
;

41 
	mÊags
;

42 
	mbaudøã
;

43 
	mhave_c⁄sﬁe
;

44 
	møm_size
;

45 
	mªloc_off
;

46 
	mív_addr
;

47 
	mív_vÆid
;

48 **
	mjt
;

49 } 
	tgd_t
;

54 
	#GD_FLG_RELOC
 0x00001

	)

55 
	#GD_FLG_DEVINIT
 0x00002

	)

56 
	#GD_FLG_SILENT
 0x00004

	)

58 
	#DECLARE_GLOBAL_DATA_PTR
 vﬁ©ûê
gd_t
 *
gd
 
	`asm
 ("k0")

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/inca-ip.h

32 
	#INCA_IP_WDT
 (0xB8000000)

	)

37 
	#INCA_IP_WDT_RST_SR
 ((vﬁ©ûê
u32
*)(
INCA_IP_WDT
+ 0x0014))

	)

40 
	#INCA_IP_WDT_RST_REQ
 ((vﬁ©ûê
u32
*)(
INCA_IP_WDT
+ 0x0010))

	)

41 
	#INCA_IP_WDT_RST_REQ_SWBOOT
 (1 << 24)

	)

42 
	#INCA_IP_WDT_RST_REQ_SWCFG
 (1 << 16)

	)

43 
	#INCA_IP_WDT_RST_REQ_RRPHY
 (1 << 5)

	)

44 
	#INCA_IP_WDT_RST_REQ_RRHSP
 (1 << 4)

	)

45 
	#INCA_IP_WDT_RST_REQ_RRFPI
 (1 << 3)

	)

46 
	#INCA_IP_WDT_RST_REQ_RREXT
 (1 << 2)

	)

47 
	#INCA_IP_WDT_RST_REQ_RRDSP
 (1 << 1)

	)

48 
	#INCA_IP_WDT_RST_REQ_RRCPU
 (1 << 0)

	)

51 
	#INCA_IP_WDT_NMISR
 ((vﬁ©ûê
u32
*)(
INCA_IP_WDT
+ 0x002C))

	)

52 
	#INCA_IP_WDT_NMISR_NMIWDT
 (1 << 2)

	)

53 
	#INCA_IP_WDT_NMISR_NMIPLL
 (1 << 1)

	)

54 
	#INCA_IP_WDT_NMISR_NMIEXT
 (1 << 0)

	)

57 
	#INCA_IP_WDT_MANID
 ((vﬁ©ûê
u32
*)(
INCA_IP_WDT
+ 0x0070))

	)

58 
	#INCA_IP_WDT_MANID_MANUF
 (
vÆue
Ë(((–1 << 11Ë- 1Ë& (vÆue)Ë<< 5)

	)

61 
	#INCA_IP_WDT_CHIPID
 ((vﬁ©ûê
u32
*)(
INCA_IP_WDT
+ 0x0074))

	)

62 
	#INCA_IP_WDT_CHIPID_VERSION
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 28)

	)

63 
	#INCA_IP_WDT_CHIPID_PART_NUMBER
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 12)

	)

64 
	#INCA_IP_WDT_CHIPID_MANID
 (
vÆue
Ë(((–1 << 11Ë- 1Ë& (vÆue)Ë<< 1)

	)

67 
	#INCA_IP_WDT_RTID
 ((vﬁ©ûê
u32
*)(
INCA_IP_WDT
+ 0x0078))

	)

68 
	#INCA_IP_WDT_RTID_LC
 (1 << 15)

	)

69 
	#INCA_IP_WDT_RTID_RIX
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 0)

	)

72 
	#INCA_IP_WDT_WDT_CON0
 ((vﬁ©ûê
u32
*)(
INCA_IP_WDT
+ 0x0020))

	)

75 
	#INCA_IP_WDT_WDT_CON1
 ((vﬁ©ûê
u32
*)(
INCA_IP_WDT
+ 0x0024))

	)

76 
	#INCA_IP_WDT_WDT_CON1_WDTDR
 (1 << 3)

	)

77 
	#INCA_IP_WDT_WDT_CON1_WDTIR
 (1 << 2)

	)

80 
	#INCA_IP_WDT_WDT_SR
 ((vﬁ©ûê
u32
*)(
INCA_IP_WDT
+ 0x0028))

	)

81 
	#INCA_IP_WDT_WDT_SR_WDTTIM
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 16)

	)

82 
	#INCA_IP_WDT_WDT_SR_WDTPR
 (1 << 5)

	)

83 
	#INCA_IP_WDT_WDT_SR_WDTTO
 (1 << 4)

	)

84 
	#INCA_IP_WDT_WDT_SR_WDTDS
 (1 << 3)

	)

85 
	#INCA_IP_WDT_WDT_SR_WDTIS
 (1 << 2)

	)

86 
	#INCA_IP_WDT_WDT_SR_WDTOE
 (1 << 1)

	)

87 
	#INCA_IP_WDT_WDT_SR_WDTAE
 (1 << 0)

	)

93 
	#INCA_IP_CGU
 (0xBF107000)

	)

98 
	#INCA_IP_CGU_CGU_PLL1CR
 ((vﬁ©ûê
u32
*)(
INCA_IP_CGU
+ 0x0008))

	)

99 
	#INCA_IP_CGU_CGU_PLL1CR_SWRST
 (1 << 31)

	)

100 
	#INCA_IP_CGU_CGU_PLL1CR_EN
 (1 << 30)

	)

101 
	#INCA_IP_CGU_CGU_PLL1CR_NDIV
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 16)

	)

102 
	#INCA_IP_CGU_CGU_PLL1CR_MDIV
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

105 
	#INCA_IP_CGU_CGU_PLL0CR
 ((vﬁ©ûê
u32
*)(
INCA_IP_CGU
+ 0x0000))

	)

106 
	#INCA_IP_CGU_CGU_PLL0CR_SWRST
 (1 << 31)

	)

107 
	#INCA_IP_CGU_CGU_PLL0CR_EN
 (1 << 30)

	)

108 
	#INCA_IP_CGU_CGU_PLL0CR_NDIV
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 16)

	)

109 
	#INCA_IP_CGU_CGU_PLL0CR_MDIV
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

112 
	#INCA_IP_CGU_CGU_PLL0SR
 ((vﬁ©ûê
u32
*)(
INCA_IP_CGU
+ 0x0004))

	)

113 
	#INCA_IP_CGU_CGU_PLL0SR_LOCK
 (1 << 31)

	)

114 
	#INCA_IP_CGU_CGU_PLL0SR_RCF
 (1 << 29)

	)

115 
	#INCA_IP_CGU_CGU_PLL0SR_PLLBYP
 (1 << 15)

	)

118 
	#INCA_IP_CGU_CGU_PLL1SR
 ((vﬁ©ûê
u32
*)(
INCA_IP_CGU
+ 0x000C))

	)

119 
	#INCA_IP_CGU_CGU_PLL1SR_LOCK
 (1 << 31)

	)

120 
	#INCA_IP_CGU_CGU_PLL1SR_RCF
 (1 << 29)

	)

121 
	#INCA_IP_CGU_CGU_PLL1SR_PLLBYP
 (1 << 15)

	)

124 
	#INCA_IP_CGU_CGU_DIVCR
 ((vﬁ©ûê
u32
*)(
INCA_IP_CGU
+ 0x0010))

	)

127 
	#INCA_IP_CGU_CGU_MUXCR
 ((vﬁ©ûê
u32
*)(
INCA_IP_CGU
+ 0x0014))

	)

128 
	#INCA_IP_CGU_CGU_MUXCR_SWRST
 (1 << 31)

	)

129 
	#INCA_IP_CGU_CGU_MUXCR_MUXII
 (1 << 1)

	)

130 
	#INCA_IP_CGU_CGU_MUXCR_MUXI
 (1 << 0)

	)

133 
	#INCA_IP_CGU_CGU_FDCR
 ((vﬁ©ûê
u32
*)(
INCA_IP_CGU
+ 0x0018))

	)

134 
	#INCA_IP_CGU_CGU_FDCR_FDEN
 (1 << 31)

	)

135 
	#INCA_IP_CGU_CGU_FDCR_INTEGER
 (
vÆue
Ë(((–1 << 12Ë- 1Ë& (vÆue)Ë<< 16)

	)

136 
	#INCA_IP_CGU_CGU_FDCR_FRACTION
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

142 
	#INCA_IP_PMU
 (0xBF102000)

	)

147 
	#INCA_IP_PMU_PM_GEN
 ((vﬁ©ûê
u32
*)(
INCA_IP_PMU
+ 0x0000))

	)

148 
	#INCA_IP_PMU_PM_GEN_EN16
 (1 << 16)

	)

149 
	#INCA_IP_PMU_PM_GEN_EN15
 (1 << 15)

	)

150 
	#INCA_IP_PMU_PM_GEN_EN14
 (1 << 14)

	)

151 
	#INCA_IP_PMU_PM_GEN_EN13
 (1 << 13)

	)

152 
	#INCA_IP_PMU_PM_GEN_EN12
 (1 << 12)

	)

153 
	#INCA_IP_PMU_PM_GEN_EN11
 (1 << 11)

	)

154 
	#INCA_IP_PMU_PM_GEN_EN10
 (1 << 10)

	)

155 
	#INCA_IP_PMU_PM_GEN_EN9
 (1 << 9)

	)

156 
	#INCA_IP_PMU_PM_GEN_EN8
 (1 << 8)

	)

157 
	#INCA_IP_PMU_PM_GEN_EN7
 (1 << 7)

	)

158 
	#INCA_IP_PMU_PM_GEN_EN6
 (1 << 6)

	)

159 
	#INCA_IP_PMU_PM_GEN_EN5
 (1 << 5)

	)

160 
	#INCA_IP_PMU_PM_GEN_EN4
 (1 << 4)

	)

161 
	#INCA_IP_PMU_PM_GEN_EN3
 (1 << 3)

	)

162 
	#INCA_IP_PMU_PM_GEN_EN2
 (1 << 2)

	)

163 
	#INCA_IP_PMU_PM_GEN_EN0
 (1 << 0)

	)

166 
	#INCA_IP_PMU_PM_PDEN
 ((vﬁ©ûê
u32
*)(
INCA_IP_PMU
+ 0x0008))

	)

167 
	#INCA_IP_PMU_PM_PDEN_EN16
 (1 << 16)

	)

168 
	#INCA_IP_PMU_PM_PDEN_EN15
 (1 << 15)

	)

169 
	#INCA_IP_PMU_PM_PDEN_EN14
 (1 << 14)

	)

170 
	#INCA_IP_PMU_PM_PDEN_EN13
 (1 << 13)

	)

171 
	#INCA_IP_PMU_PM_PDEN_EN12
 (1 << 12)

	)

172 
	#INCA_IP_PMU_PM_PDEN_EN11
 (1 << 11)

	)

173 
	#INCA_IP_PMU_PM_PDEN_EN10
 (1 << 10)

	)

174 
	#INCA_IP_PMU_PM_PDEN_EN9
 (1 << 9)

	)

175 
	#INCA_IP_PMU_PM_PDEN_EN8
 (1 << 8)

	)

176 
	#INCA_IP_PMU_PM_PDEN_EN7
 (1 << 7)

	)

177 
	#INCA_IP_PMU_PM_PDEN_EN5
 (1 << 5)

	)

178 
	#INCA_IP_PMU_PM_PDEN_EN4
 (1 << 4)

	)

179 
	#INCA_IP_PMU_PM_PDEN_EN3
 (1 << 3)

	)

180 
	#INCA_IP_PMU_PM_PDEN_EN2
 (1 << 2)

	)

181 
	#INCA_IP_PMU_PM_PDEN_EN0
 (1 << 0)

	)

184 
	#INCA_IP_PMU_PM_WUP
 ((vﬁ©ûê
u32
*)(
INCA_IP_PMU
+ 0x0010))

	)

185 
	#INCA_IP_PMU_PM_WUP_WUP16
 (1 << 16)

	)

186 
	#INCA_IP_PMU_PM_WUP_WUP15
 (1 << 15)

	)

187 
	#INCA_IP_PMU_PM_WUP_WUP14
 (1 << 14)

	)

188 
	#INCA_IP_PMU_PM_WUP_WUP13
 (1 << 13)

	)

189 
	#INCA_IP_PMU_PM_WUP_WUP12
 (1 << 12)

	)

190 
	#INCA_IP_PMU_PM_WUP_WUP11
 (1 << 11)

	)

191 
	#INCA_IP_PMU_PM_WUP_WUP10
 (1 << 10)

	)

192 
	#INCA_IP_PMU_PM_WUP_WUP9
 (1 << 9)

	)

193 
	#INCA_IP_PMU_PM_WUP_WUP8
 (1 << 8)

	)

194 
	#INCA_IP_PMU_PM_WUP_WUP7
 (1 << 7)

	)

195 
	#INCA_IP_PMU_PM_WUP_WUP5
 (1 << 5)

	)

196 
	#INCA_IP_PMU_PM_WUP_WUP4
 (1 << 4)

	)

197 
	#INCA_IP_PMU_PM_WUP_WUP3
 (1 << 3)

	)

198 
	#INCA_IP_PMU_PM_WUP_WUP2
 (1 << 2)

	)

199 
	#INCA_IP_PMU_PM_WUP_WUP0
 (1 << 0)

	)

202 
	#INCA_IP_PMU_PM_CR
 ((vﬁ©ûê
u32
*)(
INCA_IP_PMU
+ 0x0014))

	)

203 
	#INCA_IP_PMU_PM_CR_AWEN
 (1 << 31)

	)

204 
	#INCA_IP_PMU_PM_CR_SWRST
 (1 << 30)

	)

205 
	#INCA_IP_PMU_PM_CR_SWCR
 (1 << 2)

	)

206 
	#INCA_IP_PMU_PM_CR_CRD
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 0)

	)

212 
	#INCA_IP_BCU
 (0xB8000100)

	)

217 
	#INCA_IP_BCU_BCU_CON
 ((vﬁ©ûê
u32
*)(
INCA_IP_BCU
+ 0x0010))

	)

218 
	#INCA_IP_BCU_BCU_CON_SPC
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 24)

	)

219 
	#INCA_IP_BCU_BCU_CON_SPE
 (1 << 19)

	)

220 
	#INCA_IP_BCU_BCU_CON_PSE
 (1 << 18)

	)

221 
	#INCA_IP_BCU_BCU_CON_DBG
 (1 << 16)

	)

222 
	#INCA_IP_BCU_BCU_CON_TOUT
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

225 
	#INCA_IP_BCU_BCU_ECON
 ((vﬁ©ûê
u32
*)(
INCA_IP_BCU
+ 0x0020))

	)

226 
	#INCA_IP_BCU_BCU_ECON_TAG
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 24)

	)

227 
	#INCA_IP_BCU_BCU_ECON_RDN
 (1 << 23)

	)

228 
	#INCA_IP_BCU_BCU_ECON_WRN
 (1 << 22)

	)

229 
	#INCA_IP_BCU_BCU_ECON_SVM
 (1 << 21)

	)

230 
	#INCA_IP_BCU_BCU_ECON_ACK
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 19)

	)

231 
	#INCA_IP_BCU_BCU_ECON_ABT
 (1 << 18)

	)

232 
	#INCA_IP_BCU_BCU_ECON_RDY
 (1 << 17)

	)

233 
	#INCA_IP_BCU_BCU_ECON_TOUT
 (1 << 16)

	)

234 
	#INCA_IP_BCU_BCU_ECON_ERRCNT
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

235 
	#INCA_IP_BCU_BCU_ECON_OPC
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 28)

	)

238 
	#INCA_IP_BCU_BCU_EADD
 ((vﬁ©ûê
u32
*)(
INCA_IP_BCU
+ 0x0024))

	)

239 
	#INCA_IP_BCU_BCU_EADD_FPIADR


	)

242 
	#INCA_IP_BCU_BCU_EDAT
 ((vﬁ©ûê
u32
*)(
INCA_IP_BCU
+ 0x0028))

	)

243 
	#INCA_IP_BCU_BCU_EDAT_FPIDAT


	)

249 
	#INCA_IP_MBC
 (0xBF103000)

	)

254 
	#INCA_IP_MBC_MBC_CFG
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0080))

	)

255 
	#INCA_IP_MBC_MBC_CFG_SWAP
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 6)

	)

256 
	#INCA_IP_MBC_MBC_CFG_RES
 (1 << 5)

	)

257 
	#INCA_IP_MBC_MBC_CFG_FWID
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 1)

	)

258 
	#INCA_IP_MBC_MBC_CFG_SIZE
 (1 << 0)

	)

261 
	#INCA_IP_MBC_MBC_ISR
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0084))

	)

262 
	#INCA_IP_MBC_MBC_ISR_B3DA
 (1 << 31)

	)

263 
	#INCA_IP_MBC_MBC_ISR_B2DA
 (1 << 30)

	)

264 
	#INCA_IP_MBC_MBC_ISR_B1E
 (1 << 29)

	)

265 
	#INCA_IP_MBC_MBC_ISR_B0E
 (1 << 28)

	)

266 
	#INCA_IP_MBC_MBC_ISR_WDT
 (1 << 27)

	)

267 
	#INCA_IP_MBC_MBC_ISR_DS260
 (
vÆue
Ë(((–1 << 27Ë- 1Ë& (vÆue)Ë<< 0)

	)

270 
	#INCA_IP_MBC_MBC_MSK
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0088))

	)

271 
	#INCA_IP_MBC_MBC_MSK_B3DA
 (1 << 31)

	)

272 
	#INCA_IP_MBC_MBC_MSK_B2DA
 (1 << 30)

	)

273 
	#INCA_IP_MBC_MBC_MSK_B1E
 (1 << 29)

	)

274 
	#INCA_IP_MBC_MBC_MSK_B0E
 (1 << 28)

	)

275 
	#INCA_IP_MBC_MBC_MSK_WDT
 (1 << 27)

	)

276 
	#INCA_IP_MBC_MBC_MSK_DS260
 (
vÆue
Ë(((–1 << 27Ë- 1Ë& (vÆue)Ë<< 0)

	)

279 
	#INCA_IP_MBC_MBC_MSK01
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x008C))

	)

280 
	#INCA_IP_MBC_MBC_MSK01_B3DA
 (1 << 31)

	)

281 
	#INCA_IP_MBC_MBC_MSK01_B2DA
 (1 << 30)

	)

282 
	#INCA_IP_MBC_MBC_MSK01_B1E
 (1 << 29)

	)

283 
	#INCA_IP_MBC_MBC_MSK01_B0E
 (1 << 28)

	)

284 
	#INCA_IP_MBC_MBC_MSK01_WDT
 (1 << 27)

	)

285 
	#INCA_IP_MBC_MBC_MSK01_DS260
 (
vÆue
Ë(((–1 << 27Ë- 1Ë& (vÆue)Ë<< 0)

	)

288 
	#INCA_IP_MBC_MBC_MSK10
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0090))

	)

289 
	#INCA_IP_MBC_MBC_MSK10_B3DA
 (1 << 31)

	)

290 
	#INCA_IP_MBC_MBC_MSK10_B2DA
 (1 << 30)

	)

291 
	#INCA_IP_MBC_MBC_MSK10_B1E
 (1 << 29)

	)

292 
	#INCA_IP_MBC_MBC_MSK10_B0E
 (1 << 28)

	)

293 
	#INCA_IP_MBC_MBC_MSK10_WDT
 (1 << 27)

	)

294 
	#INCA_IP_MBC_MBC_MSK10_DS260
 (
vÆue
Ë(((–1 << 27Ë- 1Ë& (vÆue)Ë<< 0)

	)

297 
	#INCA_IP_MBC_MBC_CMD
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0094))

	)

298 
	#INCA_IP_MBC_MBC_CMD_CS270
 (
vÆue
Ë(((–1 << 28Ë- 1Ë& (vÆue)Ë<< 0)

	)

301 
	#INCA_IP_MBC_MBC_ID0
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0000))

	)

302 
	#INCA_IP_MBC_MBC_ID0_INDATA


	)

305 
	#INCA_IP_MBC_MBC_ID1
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0020))

	)

306 
	#INCA_IP_MBC_MBC_ID1_INDATA


	)

309 
	#INCA_IP_MBC_MBC_OD2
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0040))

	)

310 
	#INCA_IP_MBC_MBC_OD2_OUTDATA


	)

313 
	#INCA_IP_MBC_MBC_OD3
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0060))

	)

314 
	#INCA_IP_MBC_MBC_OD3_OUTDATA


	)

317 
	#INCA_IP_MBC_MBC_CR0
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0004))

	)

318 
	#INCA_IP_MBC_MBC_CR0_RDYABTFLS
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 0)

	)

321 
	#INCA_IP_MBC_MBC_CR1
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0024))

	)

322 
	#INCA_IP_MBC_MBC_CR1_RDYABTFLS
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 0)

	)

325 
	#INCA_IP_MBC_MBC_CR2
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0044))

	)

326 
	#INCA_IP_MBC_MBC_CR2_RDYABTFLS
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 0)

	)

329 
	#INCA_IP_MBC_MBC_CR3
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0064))

	)

330 
	#INCA_IP_MBC_MBC_CR3_RDYABTFLS
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 0)

	)

333 
	#INCA_IP_MBC_MBC_FS0
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0008))

	)

334 
	#INCA_IP_MBC_MBC_FS0_FS


	)

337 
	#INCA_IP_MBC_MBC_FS1
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0028))

	)

338 
	#INCA_IP_MBC_MBC_FS1_FS


	)

341 
	#INCA_IP_MBC_MBC_FS2
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0048))

	)

342 
	#INCA_IP_MBC_MBC_FS2_FS


	)

345 
	#INCA_IP_MBC_MBC_FS3
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0068))

	)

346 
	#INCA_IP_MBC_MBC_FS3_FS


	)

349 
	#INCA_IP_MBC_MBC_DA0
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x000C))

	)

350 
	#INCA_IP_MBC_MBC_DA0_DA


	)

353 
	#INCA_IP_MBC_MBC_DA1
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x002C))

	)

354 
	#INCA_IP_MBC_MBC_DA1_DA


	)

357 
	#INCA_IP_MBC_MBC_DA2
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x004C))

	)

358 
	#INCA_IP_MBC_MBC_DA2_DA


	)

361 
	#INCA_IP_MBC_MBC_DA3
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x006C))

	)

362 
	#INCA_IP_MBC_MBC_DA3_DA


	)

365 
	#INCA_IP_MBC_MBC_IABS0
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0010))

	)

366 
	#INCA_IP_MBC_MBC_IABS0_IABS


	)

369 
	#INCA_IP_MBC_MBC_IABS1
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0030))

	)

370 
	#INCA_IP_MBC_MBC_IABS1_IABS


	)

373 
	#INCA_IP_MBC_MBC_IABS2
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0050))

	)

374 
	#INCA_IP_MBC_MBC_IABS2_IABS


	)

377 
	#INCA_IP_MBC_MBC_IABS3
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0070))

	)

378 
	#INCA_IP_MBC_MBC_IABS3_IABS


	)

381 
	#INCA_IP_MBC_MBC_ITMP0
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0014))

	)

382 
	#INCA_IP_MBC_MBC_ITMP0_ITMP


	)

385 
	#INCA_IP_MBC_MBC_ITMP1
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0034))

	)

386 
	#INCA_IP_MBC_MBC_ITMP1_ITMP


	)

389 
	#INCA_IP_MBC_MBC_ITMP2
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0054))

	)

390 
	#INCA_IP_MBC_MBC_ITMP2_ITMP


	)

393 
	#INCA_IP_MBC_MBC_ITMP3
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0074))

	)

394 
	#INCA_IP_MBC_MBC_ITMP3_ITMP


	)

397 
	#INCA_IP_MBC_MBC_OABS0
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0018))

	)

398 
	#INCA_IP_MBC_MBC_OABS0_OABS


	)

401 
	#INCA_IP_MBC_MBC_OABS1
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0038))

	)

402 
	#INCA_IP_MBC_MBC_OABS1_OABS


	)

405 
	#INCA_IP_MBC_MBC_OABS2
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0058))

	)

406 
	#INCA_IP_MBC_MBC_OABS2_OABS


	)

409 
	#INCA_IP_MBC_MBC_OABS3
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0078))

	)

410 
	#INCA_IP_MBC_MBC_OABS3_OABS


	)

413 
	#INCA_IP_MBC_MBC_OTMP0
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x001C))

	)

414 
	#INCA_IP_MBC_MBC_OTMP0_OTMP


	)

417 
	#INCA_IP_MBC_MBC_OTMP1
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x003C))

	)

418 
	#INCA_IP_MBC_MBC_OTMP1_OTMP


	)

421 
	#INCA_IP_MBC_MBC_OTMP2
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x005C))

	)

422 
	#INCA_IP_MBC_MBC_OTMP2_OTMP


	)

425 
	#INCA_IP_MBC_MBC_OTMP3
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x007C))

	)

426 
	#INCA_IP_MBC_MBC_OTMP3_OTMP


	)

429 
	#INCA_IP_MBC_DCTRL
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x00A0))

	)

430 
	#INCA_IP_MBC_DCTRL_BA
 (1 << 0)

	)

431 
	#INCA_IP_MBC_DCTRL_BMOD
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 1)

	)

432 
	#INCA_IP_MBC_DCTRL_IDL
 (1 << 4)

	)

433 
	#INCA_IP_MBC_DCTRL_RES
 (1 << 15)

	)

436 
	#INCA_IP_MBC_DSTA
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x00A4))

	)

437 
	#INCA_IP_MBC_DSTA_IDLE
 (1 << 0)

	)

438 
	#INCA_IP_MBC_DSTA_PD
 (1 << 1)

	)

441 
	#INCA_IP_MBC_DTST1
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x00A8))

	)

442 
	#INCA_IP_MBC_DTST1_ABORT
 (1 << 0)

	)

443 
	#INCA_IP_MBC_DTST1_HWF32
 (1 << 1)

	)

444 
	#INCA_IP_MBC_DTST1_HWF4M
 (1 << 2)

	)

445 
	#INCA_IP_MBC_DTST1_HWFOP
 (1 << 3)

	)

451 
	#INCA_IP_Swôch
 (0xBF104000)

	)

456 
	#INCA_IP_Swôch_UN_DEST
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0000))

	)

457 
	#INCA_IP_Swôch_UN_DEST_CB
 (1 << 8)

	)

458 
	#INCA_IP_Swôch_UN_DEST_LB
 (1 << 7)

	)

459 
	#INCA_IP_Swôch_UN_DEST_PB
 (1 << 6)

	)

460 
	#INCA_IP_Swôch_UN_DEST_CM
 (1 << 5)

	)

461 
	#INCA_IP_Swôch_UN_DEST_LM
 (1 << 4)

	)

462 
	#INCA_IP_Swôch_UN_DEST_PM
 (1 << 3)

	)

463 
	#INCA_IP_Swôch_UN_DEST_CU
 (1 << 2)

	)

464 
	#INCA_IP_Swôch_UN_DEST_LU
 (1 << 1)

	)

465 
	#INCA_IP_Swôch_UN_DEST_PU
 (1 << 0)

	)

468 
	#INCA_IP_Swôch_VLAN_CTRL
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0004))

	)

469 
	#INCA_IP_Swôch_VLAN_CTRL_SC
 (1 << 6)

	)

470 
	#INCA_IP_Swôch_VLAN_CTRL_SL
 (1 << 5)

	)

471 
	#INCA_IP_Swôch_VLAN_CTRL_SP
 (1 << 4)

	)

472 
	#INCA_IP_Swôch_VLAN_CTRL_TC
 (1 << 3)

	)

473 
	#INCA_IP_Swôch_VLAN_CTRL_TL
 (1 << 2)

	)

474 
	#INCA_IP_Swôch_VLAN_CTRL_TP
 (1 << 1)

	)

475 
	#INCA_IP_Swôch_VLAN_CTRL_VA
 (1 << 0)

	)

478 
	#INCA_IP_Swôch_PC_VLAN
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0008))

	)

479 
	#INCA_IP_Swôch_PC_VLAN_PRI
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 12)

	)

480 
	#INCA_IP_Swôch_PC_VLAN_VLAN_ID
 (
vÆue
Ë(((–1 << 12Ë- 1Ë& (vÆue)Ë<< 0)

	)

483 
	#INCA_IP_Swôch_LAN_VLAN
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x000C))

	)

484 
	#INCA_IP_Swôch_LAN_VLAN_PRI
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 12)

	)

485 
	#INCA_IP_Swôch_LAN_VLAN_VLAN_ID
 (
vÆue
Ë(((–1 << 12Ë- 1Ë& (vÆue)Ë<< 0)

	)

488 
	#INCA_IP_Swôch_CPU_VLAN
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0010))

	)

489 
	#INCA_IP_Swôch_CPU_VLAN_PRI
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 12)

	)

490 
	#INCA_IP_Swôch_CPU_VLAN_VLAN_ID
 (
vÆue
Ë(((–1 << 12Ë- 1Ë& (vÆue)Ë<< 0)

	)

493 
	#INCA_IP_Swôch_PRI_CoS
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0014))

	)

494 
	#INCA_IP_Swôch_PRI_CoS_P7
 (1 << 7)

	)

495 
	#INCA_IP_Swôch_PRI_CoS_P6
 (1 << 6)

	)

496 
	#INCA_IP_Swôch_PRI_CoS_P5
 (1 << 5)

	)

497 
	#INCA_IP_Swôch_PRI_CoS_P4
 (1 << 4)

	)

498 
	#INCA_IP_Swôch_PRI_CoS_P3
 (1 << 3)

	)

499 
	#INCA_IP_Swôch_PRI_CoS_P2
 (1 << 2)

	)

500 
	#INCA_IP_Swôch_PRI_CoS_P1
 (1 << 1)

	)

501 
	#INCA_IP_Swôch_PRI_CoS_P0
 (1 << 0)

	)

504 
	#INCA_IP_Swôch_ST_PT
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0018))

	)

505 
	#INCA_IP_Swôch_ST_PT_CPS
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 4)

	)

506 
	#INCA_IP_Swôch_ST_PT_LPS
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 2)

	)

507 
	#INCA_IP_Swôch_ST_PT_PPS
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 0)

	)

510 
	#INCA_IP_Swôch_ARL_CTL
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x001C))

	)

511 
	#INCA_IP_Swôch_ARL_CTL_CHCC
 (1 << 15)

	)

512 
	#INCA_IP_Swôch_ARL_CTL_CHCL
 (1 << 14)

	)

513 
	#INCA_IP_Swôch_ARL_CTL_CHCP
 (1 << 13)

	)

514 
	#INCA_IP_Swôch_ARL_CTL_CC
 (1 << 12)

	)

515 
	#INCA_IP_Swôch_ARL_CTL_CL
 (1 << 11)

	)

516 
	#INCA_IP_Swôch_ARL_CTL_CP
 (1 << 10)

	)

517 
	#INCA_IP_Swôch_ARL_CTL_CG
 (1 << 9)

	)

518 
	#INCA_IP_Swôch_ARL_CTL_PS
 (1 << 8)

	)

519 
	#INCA_IP_Swôch_ARL_CTL_MRO
 (1 << 7)

	)

520 
	#INCA_IP_Swôch_ARL_CTL_SRC
 (1 << 6)

	)

521 
	#INCA_IP_Swôch_ARL_CTL_ATS
 (1 << 5)

	)

522 
	#INCA_IP_Swôch_ARL_CTL_AGE_TICK_SEL
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 2)

	)

523 
	#INCA_IP_Swôch_ARL_CTL_MAF
 (1 << 1)

	)

524 
	#INCA_IP_Swôch_ARL_CTL_ENL
 (1 << 0)

	)

525 
	#INCA_IP_Swôch_ARL_CTL_Res
 (
vÆue
Ë(((–1 << 19Ë- 1Ë& (vÆue)Ë<< 13)

	)

528 
	#INCA_IP_Swôch_CPU_ACTL
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0020))

	)

529 
	#INCA_IP_Swôch_CPU_ACTL_RA
 (1 << 31)

	)

530 
	#INCA_IP_Swôch_CPU_ACTL_RW
 (1 << 30)

	)

531 
	#INCA_IP_Swôch_CPU_ACTL_Res
 (
vÆue
Ë(((–1 << 21Ë- 1Ë& (vÆue)Ë<< 9)

	)

532 
	#INCA_IP_Swôch_CPU_ACTL_AVA
 (1 << 8)

	)

533 
	#INCA_IP_Swôch_CPU_ACTL_IDX
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

536 
	#INCA_IP_Swôch_DATA1
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0024))

	)

537 
	#INCA_IP_Swôch_DATA1_D©a
 (
vÆue
Ë(((–1 << 24Ë- 1Ë& (vÆue)Ë<< 0)

	)

540 
	#INCA_IP_Swôch_DATA2
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0028))

	)

541 
	#INCA_IP_Swôch_DATA2_D©a


	)

544 
	#INCA_IP_Swôch_CPU_PCTL
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x002C))

	)

545 
	#INCA_IP_Swôch_CPU_PCTL_DA_PORTS
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 11)

	)

546 
	#INCA_IP_Swôch_CPU_PCTL_DAC
 (1 << 10)

	)

547 
	#INCA_IP_Swôch_CPU_PCTL_MA_STATE
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 7)

	)

548 
	#INCA_IP_Swôch_CPU_PCTL_MAM
 (1 << 6)

	)

549 
	#INCA_IP_Swôch_CPU_PCTL_MA_P‹ts
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 3)

	)

550 
	#INCA_IP_Swôch_CPU_PCTL_MAC
 (1 << 2)

	)

551 
	#INCA_IP_Swôch_CPU_PCTL_EML
 (1 << 1)

	)

552 
	#INCA_IP_Swôch_CPU_PCTL_EDL
 (1 << 0)

	)

553 
	#INCA_IP_Swôch_CPU_PCTL_Res
 (
vÆue
Ë(((–1 << 18Ë- 1Ë& (vÆue)Ë<< 14)

	)

556 
	#INCA_IP_Swôch_DSCP_COS1
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0030))

	)

557 
	#INCA_IP_Swôch_DSCP_COS1_DSCP


	)

560 
	#INCA_IP_Swôch_DSCP_COS2
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0034))

	)

561 
	#INCA_IP_Swôch_DSCP_COS2_DSCP


	)

564 
	#INCA_IP_Swôch_PC_WFQ_CTL
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0080))

	)

565 
	#INCA_IP_Swôch_PC_WFQ_CTL_P1
 (1 << 9)

	)

566 
	#INCA_IP_Swôch_PC_WFQ_CTL_P0
 (1 << 8)

	)

567 
	#INCA_IP_Swôch_PC_WFQ_CTL_WT1
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 5)

	)

568 
	#INCA_IP_Swôch_PC_WFQ_CTL_WT0
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 2)

	)

569 
	#INCA_IP_Swôch_PC_WFQ_CTL_SCH_SEL
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 0)

	)

572 
	#INCA_IP_Swôch_PC_TX_CTL
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0084))

	)

573 
	#INCA_IP_Swôch_PC_TX_CTL_ELR
 (1 << 1)

	)

574 
	#INCA_IP_Swôch_PC_TX_CTL_EER
 (1 << 0)

	)

577 
	#INCA_IP_Swôch_LAN_WFQ_CTL
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0100))

	)

578 
	#INCA_IP_Swôch_LAN_WFQ_CTL_P1
 (1 << 9)

	)

579 
	#INCA_IP_Swôch_LAN_WFQ_CTL_P0
 (1 << 8)

	)

580 
	#INCA_IP_Swôch_LAN_WFQ_CTL_WT1
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 5)

	)

581 
	#INCA_IP_Swôch_LAN_WFQ_CTL_WT0
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 2)

	)

582 
	#INCA_IP_Swôch_LAN_WFQ_CTL_SCH_SEL
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 0)

	)

585 
	#INCA_IP_Swôch_LAN_TX_CTL
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0104))

	)

586 
	#INCA_IP_Swôch_LAN_TX_CTL_ELR
 (1 << 1)

	)

587 
	#INCA_IP_Swôch_LAN_TX_CTL_EER
 (1 << 0)

	)

590 
	#INCA_IP_Swôch_CPU_WFQ_CTL
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0180))

	)

591 
	#INCA_IP_Swôch_CPU_WFQ_CTL_P1
 (1 << 9)

	)

592 
	#INCA_IP_Swôch_CPU_WFQ_CTL_P0
 (1 << 8)

	)

593 
	#INCA_IP_Swôch_CPU_WFQ_CTL_WT1
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 5)

	)

594 
	#INCA_IP_Swôch_CPU_WFQ_CTL_WT0
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 2)

	)

595 
	#INCA_IP_Swôch_CPU_WFQ_CTL_SCH_SEL
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 0)

	)

598 
	#INCA_IP_Swôch_PC_WM
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0200))

	)

599 
	#INCA_IP_Swôch_PC_WM_RX_WM1
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 24)

	)

600 
	#INCA_IP_Swôch_PC_WM_RX_WM2
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 16)

	)

601 
	#INCA_IP_Swôch_PC_WM_RX_WM3
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 8)

	)

602 
	#INCA_IP_Swôch_PC_WM_RX_WM4
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

605 
	#INCA_IP_Swôch_LAN_WM
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0204))

	)

606 
	#INCA_IP_Swôch_LAN_WM_RX_WM1
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 24)

	)

607 
	#INCA_IP_Swôch_LAN_WM_RX_WM2
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 16)

	)

608 
	#INCA_IP_Swôch_LAN_WM_RX_WM3
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 8)

	)

609 
	#INCA_IP_Swôch_LAN_WM_RX_WM4
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

612 
	#INCA_IP_Swôch_CPU_WM
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0208))

	)

613 
	#INCA_IP_Swôch_CPU_WM_RX_WM1
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 24)

	)

614 
	#INCA_IP_Swôch_CPU_WM_RX_WM2
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 16)

	)

615 
	#INCA_IP_Swôch_CPU_WM_RX_WM3
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 8)

	)

616 
	#INCA_IP_Swôch_CPU_WM_RX_WM4
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

619 
	#INCA_IP_Swôch_GBL_WM
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x020C))

	)

620 
	#INCA_IP_Swôch_GBL_WM_GBL_RX_WM1
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 24)

	)

621 
	#INCA_IP_Swôch_GBL_WM_GBL_RX_WM2
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 16)

	)

622 
	#INCA_IP_Swôch_GBL_WM_GBL_RX_WM3
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 8)

	)

623 
	#INCA_IP_Swôch_GBL_WM_GBL_RX_WM4
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

626 
	#INCA_IP_Swôch_PM_CTL
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0210))

	)

627 
	#INCA_IP_Swôch_PM_CTL_GDN
 (1 << 3)

	)

628 
	#INCA_IP_Swôch_PM_CTL_CDN
 (1 << 2)

	)

629 
	#INCA_IP_Swôch_PM_CTL_LDN
 (1 << 1)

	)

630 
	#INCA_IP_Swôch_PM_CTL_PDN
 (1 << 0)

	)

633 
	#INCA_IP_Swôch_PMAC_HD_CTL
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0280))

	)

634 
	#INCA_IP_Swôch_PMAC_HD_CTL_RL2
 (1 << 21)

	)

635 
	#INCA_IP_Swôch_PMAC_HD_CTL_RC
 (1 << 20)

	)

636 
	#INCA_IP_Swôch_PMAC_HD_CTL_CM
 (1 << 19)

	)

637 
	#INCA_IP_Swôch_PMAC_HD_CTL_CV
 (1 << 18)

	)

638 
	#INCA_IP_Swôch_PMAC_HD_CTL_TYPE_LEN
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 2)

	)

639 
	#INCA_IP_Swôch_PMAC_HD_CTL_TAG
 (1 << 1)

	)

640 
	#INCA_IP_Swôch_PMAC_HD_CTL_ADD
 (1 << 0)

	)

643 
	#INCA_IP_Swôch_PMAC_SA1
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0284))

	)

644 
	#INCA_IP_Swôch_PMAC_SA1_SA_47_32
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

647 
	#INCA_IP_Swôch_PMAC_SA2
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0288))

	)

648 
	#INCA_IP_Swôch_PMAC_SA2_SA_31_0


	)

651 
	#INCA_IP_Swôch_PMAC_DA1
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x028C))

	)

652 
	#INCA_IP_Swôch_PMAC_DA1_DA_47_32
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

655 
	#INCA_IP_Swôch_PMAC_DA2
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0290))

	)

656 
	#INCA_IP_Swôch_PMAC_DA2_DA_31_0


	)

659 
	#INCA_IP_Swôch_PMAC_VLAN
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0294))

	)

660 
	#INCA_IP_Swôch_PMAC_VLAN_PRI
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 13)

	)

661 
	#INCA_IP_Swôch_PMAC_VLAN_CFI
 (1 << 12)

	)

662 
	#INCA_IP_Swôch_PMAC_VLAN_VLANID
 (
vÆue
Ë(((–1 << 12Ë- 1Ë& (vÆue)Ë<< 0)

	)

665 
	#INCA_IP_Swôch_PMAC_TX_IPG
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0298))

	)

666 
	#INCA_IP_Swôch_PMAC_TX_IPG_IPGCNT
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

669 
	#INCA_IP_Swôch_PMAC_RX_IPG
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x029C))

	)

670 
	#INCA_IP_Swôch_PMAC_RX_IPG_IPGCNT
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

673 
	#INCA_IP_Swôch_MRR
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0300))

	)

674 
	#INCA_IP_Swôch_MRR_MRR
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 6)

	)

675 
	#INCA_IP_Swôch_MRR_EC
 (1 << 5)

	)

676 
	#INCA_IP_Swôch_MRR_EL
 (1 << 4)

	)

677 
	#INCA_IP_Swôch_MRR_EP
 (1 << 3)

	)

678 
	#INCA_IP_Swôch_MRR_IC
 (1 << 2)

	)

679 
	#INCA_IP_Swôch_MRR_IL
 (1 << 1)

	)

680 
	#INCA_IP_Swôch_MRR_IP
 (1 << 0)

	)

683 
	#INCA_IP_Swôch_PKT_LEN
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0304))

	)

684 
	#INCA_IP_Swôch_PKT_LEN_ADD
 (1 << 11)

	)

685 
	#INCA_IP_Swôch_PKT_LEN_MAX_PKT_LEN
 (
vÆue
Ë(((–1 << 11Ë- 1Ë& (vÆue)Ë<< 0)

	)

688 
	#INCA_IP_Swôch_MDIO_ACC
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0480))

	)

689 
	#INCA_IP_Swôch_MDIO_ACC_RA
 (1 << 31)

	)

690 
	#INCA_IP_Swôch_MDIO_ACC_RW
 (1 << 30)

	)

691 
	#INCA_IP_Swôch_MDIO_ACC_PHY_ADDR
 (
vÆue
Ë(((–1 << 5Ë- 1Ë& (vÆue)Ë<< 21)

	)

692 
	#INCA_IP_Swôch_MDIO_ACC_REG_ADDR
 (
vÆue
Ë(((–1 << 5Ë- 1Ë& (vÆue)Ë<< 16)

	)

693 
	#INCA_IP_Swôch_MDIO_ACC_PHY_DATA
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

696 
	#INCA_IP_Swôch_EPHY
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0484))

	)

697 
	#INCA_IP_Swôch_EPHY_SL
 (1 << 7)

	)

698 
	#INCA_IP_Swôch_EPHY_SP
 (1 << 6)

	)

699 
	#INCA_IP_Swôch_EPHY_LL
 (1 << 5)

	)

700 
	#INCA_IP_Swôch_EPHY_LP
 (1 << 4)

	)

701 
	#INCA_IP_Swôch_EPHY_DL
 (1 << 3)

	)

702 
	#INCA_IP_Swôch_EPHY_DP
 (1 << 2)

	)

703 
	#INCA_IP_Swôch_EPHY_PL
 (1 << 1)

	)

704 
	#INCA_IP_Swôch_EPHY_PP
 (1 << 0)

	)

707 
	#INCA_IP_Swôch_PWR_EN
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0488))

	)

708 
	#INCA_IP_Swôch_PWR_EN_PL
 (1 << 1)

	)

709 
	#INCA_IP_Swôch_PWR_EN_PP
 (1 << 0)

	)

712 
	#INCA_IP_Swôch_MDIO_CFG
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x048C))

	)

713 
	#INCA_IP_Swôch_MDIO_CFG_MDS
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 14)

	)

714 
	#INCA_IP_Swôch_MDIO_CFG_PHY_LAN_ADDR
 (
vÆue
Ë(((–1 << 5Ë- 1Ë& (vÆue)Ë<< 9)

	)

715 
	#INCA_IP_Swôch_MDIO_CFG_PHY_PC_ADDR
 (
vÆue
Ë(((–1 << 5Ë- 1Ë& (vÆue)Ë<< 4)

	)

716 
	#INCA_IP_Swôch_MDIO_CFG_UEP
 (1 << 3)

	)

717 
	#INCA_IP_Swôch_MDIO_CFG_PS
 (1 << 2)

	)

718 
	#INCA_IP_Swôch_MDIO_CFG_PT
 (1 << 1)

	)

719 
	#INCA_IP_Swôch_MDIO_CFG_UMM
 (1 << 0)

	)

722 
	#INCA_IP_Swôch_CLK_CFG
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0500))

	)

723 
	#INCA_IP_Swôch_CLK_CFG_ARL_ID
 (1 << 9)

	)

724 
	#INCA_IP_Swôch_CLK_CFG_CPU_ID
 (1 << 8)

	)

725 
	#INCA_IP_Swôch_CLK_CFG_LAN_ID
 (1 << 7)

	)

726 
	#INCA_IP_Swôch_CLK_CFG_PC_ID
 (1 << 6)

	)

727 
	#INCA_IP_Swôch_CLK_CFG_SE_ID
 (1 << 5)

	)

733 
	#INCA_IP_SSC1
 (0xB8000500)

	)

738 
	#INCA_IP_SSC1_SCC_CON_PRG
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC1
+ 0x0010))

	)

739 
	#INCA_IP_SSC1_SCC_CON_PRG_EN
 (1 << 15)

	)

740 
	#INCA_IP_SSC1_SCC_CON_PRG_MS
 (1 << 14)

	)

741 
	#INCA_IP_SSC1_SCC_CON_PRG_AREN
 (1 << 12)

	)

742 
	#INCA_IP_SSC1_SCC_CON_PRG_BEN
 (1 << 11)

	)

743 
	#INCA_IP_SSC1_SCC_CON_PRG_PEN
 (1 << 10)

	)

744 
	#INCA_IP_SSC1_SCC_CON_PRG_REN
 (1 << 9)

	)

745 
	#INCA_IP_SSC1_SCC_CON_PRG_TEN
 (1 << 8)

	)

746 
	#INCA_IP_SSC1_SCC_CON_PRG_LB
 (1 << 7)

	)

747 
	#INCA_IP_SSC1_SCC_CON_PRG_PO
 (1 << 6)

	)

748 
	#INCA_IP_SSC1_SCC_CON_PRG_PH
 (1 << 5)

	)

749 
	#INCA_IP_SSC1_SCC_CON_PRG_HB
 (1 << 4)

	)

750 
	#INCA_IP_SSC1_SCC_CON_PRG_BM
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

753 
	#INCA_IP_SSC1_SCC_CON_OPR
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC1
+ 0x0010))

	)

754 
	#INCA_IP_SSC1_SCC_CON_OPR_EN
 (1 << 15)

	)

755 
	#INCA_IP_SSC1_SCC_CON_OPR_MS
 (1 << 14)

	)

756 
	#INCA_IP_SSC1_SCC_CON_OPR_BSY
 (1 << 12)

	)

757 
	#INCA_IP_SSC1_SCC_CON_OPR_BE
 (1 << 11)

	)

758 
	#INCA_IP_SSC1_SCC_CON_OPR_PE
 (1 << 10)

	)

759 
	#INCA_IP_SSC1_SCC_CON_OPR_RE
 (1 << 9)

	)

760 
	#INCA_IP_SSC1_SCC_CON_OPR_TE
 (1 << 8)

	)

761 
	#INCA_IP_SSC1_SCC_CON_OPR_BC
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

764 
	#INCA_IP_SSC1_SSC_WHBCON
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC1
+ 0x0040))

	)

765 
	#INCA_IP_SSC1_SSC_WHBCON_SETBE
 (1 << 15)

	)

766 
	#INCA_IP_SSC1_SSC_WHBCON_SETPE
 (1 << 14)

	)

767 
	#INCA_IP_SSC1_SSC_WHBCON_SETRE
 (1 << 13)

	)

768 
	#INCA_IP_SSC1_SSC_WHBCON_SETTE
 (1 << 12)

	)

769 
	#INCA_IP_SSC1_SSC_WHBCON_CLRBE
 (1 << 11)

	)

770 
	#INCA_IP_SSC1_SSC_WHBCON_CLRPE
 (1 << 10)

	)

771 
	#INCA_IP_SSC1_SSC_WHBCON_CLRRE
 (1 << 9)

	)

772 
	#INCA_IP_SSC1_SSC_WHBCON_CLRTE
 (1 << 8)

	)

775 
	#INCA_IP_SSC1_SSC_BR
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC1
+ 0x0014))

	)

776 
	#INCA_IP_SSC1_SSC_BR_BR_VALUE
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

779 
	#INCA_IP_SSC1_SSC_TB
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC1
+ 0x0020))

	)

780 
	#INCA_IP_SSC1_SSC_TB_TB_VALUE
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

783 
	#INCA_IP_SSC1_SSC_RB
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC1
+ 0x0024))

	)

784 
	#INCA_IP_SSC1_SSC_RB_RB_VALUE
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

787 
	#INCA_IP_SSC1_SSC_RXFCON
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC1
+ 0x0030))

	)

788 
	#INCA_IP_SSC1_SSC_RXFCON_RXFITL
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 8)

	)

789 
	#INCA_IP_SSC1_SSC_RXFCON_RXTMEN
 (1 << 2)

	)

790 
	#INCA_IP_SSC1_SSC_RXFCON_RXFLU
 (1 << 1)

	)

791 
	#INCA_IP_SSC1_SSC_RXFCON_RXFEN
 (1 << 0)

	)

794 
	#INCA_IP_SSC1_SSC_TXFCON
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC1
+ 0x0034))

	)

795 
	#INCA_IP_SSC1_SSC_TXFCON_RXFITL
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 8)

	)

796 
	#INCA_IP_SSC1_SSC_TXFCON_TXTMEN
 (1 << 2)

	)

797 
	#INCA_IP_SSC1_SSC_TXFCON_TXFLU
 (1 << 1)

	)

798 
	#INCA_IP_SSC1_SSC_TXFCON_TXFEN
 (1 << 0)

	)

801 
	#INCA_IP_SSC1_SSC_FSTAT
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC1
+ 0x0038))

	)

802 
	#INCA_IP_SSC1_SSC_FSTAT_TXFFL
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 8)

	)

803 
	#INCA_IP_SSC1_SSC_FSTAT_RXFFL
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 0)

	)

806 
	#INCA_IP_SSC1_SSC_CLC
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC1
+ 0x0000))

	)

807 
	#INCA_IP_SSC1_SSC_CLC_RMC
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 8)

	)

808 
	#INCA_IP_SSC1_SSC_CLC_DISS
 (1 << 1)

	)

809 
	#INCA_IP_SSC1_SSC_CLC_DISR
 (1 << 0)

	)

815 
	#INCA_IP_SSC2
 (0xB8000600)

	)

820 
	#INCA_IP_SSC2_SCC_CON_PRG
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC2
+ 0x0010))

	)

821 
	#INCA_IP_SSC2_SCC_CON_PRG_EN
 (1 << 15)

	)

822 
	#INCA_IP_SSC2_SCC_CON_PRG_MS
 (1 << 14)

	)

823 
	#INCA_IP_SSC2_SCC_CON_PRG_AREN
 (1 << 12)

	)

824 
	#INCA_IP_SSC2_SCC_CON_PRG_BEN
 (1 << 11)

	)

825 
	#INCA_IP_SSC2_SCC_CON_PRG_PEN
 (1 << 10)

	)

826 
	#INCA_IP_SSC2_SCC_CON_PRG_REN
 (1 << 9)

	)

827 
	#INCA_IP_SSC2_SCC_CON_PRG_TEN
 (1 << 8)

	)

828 
	#INCA_IP_SSC2_SCC_CON_PRG_LB
 (1 << 7)

	)

829 
	#INCA_IP_SSC2_SCC_CON_PRG_PO
 (1 << 6)

	)

830 
	#INCA_IP_SSC2_SCC_CON_PRG_PH
 (1 << 5)

	)

831 
	#INCA_IP_SSC2_SCC_CON_PRG_HB
 (1 << 4)

	)

832 
	#INCA_IP_SSC2_SCC_CON_PRG_BM
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

835 
	#INCA_IP_SSC2_SCC_CON_OPR
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC2
+ 0x0010))

	)

836 
	#INCA_IP_SSC2_SCC_CON_OPR_EN
 (1 << 15)

	)

837 
	#INCA_IP_SSC2_SCC_CON_OPR_MS
 (1 << 14)

	)

838 
	#INCA_IP_SSC2_SCC_CON_OPR_BSY
 (1 << 12)

	)

839 
	#INCA_IP_SSC2_SCC_CON_OPR_BE
 (1 << 11)

	)

840 
	#INCA_IP_SSC2_SCC_CON_OPR_PE
 (1 << 10)

	)

841 
	#INCA_IP_SSC2_SCC_CON_OPR_RE
 (1 << 9)

	)

842 
	#INCA_IP_SSC2_SCC_CON_OPR_TE
 (1 << 8)

	)

843 
	#INCA_IP_SSC2_SCC_CON_OPR_BC
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

846 
	#INCA_IP_SSC2_SSC_WHBCON
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC2
+ 0x0040))

	)

847 
	#INCA_IP_SSC2_SSC_WHBCON_SETBE
 (1 << 15)

	)

848 
	#INCA_IP_SSC2_SSC_WHBCON_SETPE
 (1 << 14)

	)

849 
	#INCA_IP_SSC2_SSC_WHBCON_SETRE
 (1 << 13)

	)

850 
	#INCA_IP_SSC2_SSC_WHBCON_SETTE
 (1 << 12)

	)

851 
	#INCA_IP_SSC2_SSC_WHBCON_CLRBE
 (1 << 11)

	)

852 
	#INCA_IP_SSC2_SSC_WHBCON_CLRPE
 (1 << 10)

	)

853 
	#INCA_IP_SSC2_SSC_WHBCON_CLRRE
 (1 << 9)

	)

854 
	#INCA_IP_SSC2_SSC_WHBCON_CLRTE
 (1 << 8)

	)

857 
	#INCA_IP_SSC2_SSC_BR
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC2
+ 0x0014))

	)

858 
	#INCA_IP_SSC2_SSC_BR_BR_VALUE
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

861 
	#INCA_IP_SSC2_SSC_TB
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC2
+ 0x0020))

	)

862 
	#INCA_IP_SSC2_SSC_TB_TB_VALUE
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

865 
	#INCA_IP_SSC2_SSC_RB
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC2
+ 0x0024))

	)

866 
	#INCA_IP_SSC2_SSC_RB_RB_VALUE
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

869 
	#INCA_IP_SSC2_SSC_RXFCON
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC2
+ 0x0030))

	)

870 
	#INCA_IP_SSC2_SSC_RXFCON_RXFITL
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 8)

	)

871 
	#INCA_IP_SSC2_SSC_RXFCON_RXTMEN
 (1 << 2)

	)

872 
	#INCA_IP_SSC2_SSC_RXFCON_RXFLU
 (1 << 1)

	)

873 
	#INCA_IP_SSC2_SSC_RXFCON_RXFEN
 (1 << 0)

	)

876 
	#INCA_IP_SSC2_SSC_TXFCON
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC2
+ 0x0034))

	)

877 
	#INCA_IP_SSC2_SSC_TXFCON_RXFITL
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 8)

	)

878 
	#INCA_IP_SSC2_SSC_TXFCON_TXTMEN
 (1 << 2)

	)

879 
	#INCA_IP_SSC2_SSC_TXFCON_TXFLU
 (1 << 1)

	)

880 
	#INCA_IP_SSC2_SSC_TXFCON_TXFEN
 (1 << 0)

	)

883 
	#INCA_IP_SSC2_SSC_FSTAT
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC2
+ 0x0038))

	)

884 
	#INCA_IP_SSC2_SSC_FSTAT_TXFFL
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 8)

	)

885 
	#INCA_IP_SSC2_SSC_FSTAT_RXFFL
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 0)

	)

888 
	#INCA_IP_SSC2_SSC_CLC
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC2
+ 0x0000))

	)

889 
	#INCA_IP_SSC2_SSC_CLC_RMC
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 8)

	)

890 
	#INCA_IP_SSC2_SSC_CLC_DISS
 (1 << 1)

	)

891 
	#INCA_IP_SSC2_SSC_CLC_DISR
 (1 << 0)

	)

897 #i‡
deföed
(
CONFIG_INCA_IP
)

898 
	#INCA_IP_EBU
 (0xB8000200)

	)

899 #ñi‡
deföed
(
CONFIG_PURPLE
)

900 
	#INCA_IP_EBU
 (0xB800D800)

	)

907 
	#INCA_IP_EBU_EBU_CLC
 ((vﬁ©ûê
u32
*)(
INCA_IP_EBU
+ 0x0000))

	)

908 
	#INCA_IP_EBU_EBU_CLC_DISS
 (1 << 1)

	)

909 
	#INCA_IP_EBU_EBU_CLC_DISR
 (1 << 0)

	)

912 
	#INCA_IP_EBU_EBU_CON
 ((vﬁ©ûê
u32
*)(
INCA_IP_EBU
+ 0x0010))

	)

913 
	#INCA_IP_EBU_EBU_CON_DTACS
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 20)

	)

914 
	#INCA_IP_EBU_EBU_CON_DTARW
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 16)

	)

915 
	#INCA_IP_EBU_EBU_CON_TOUTC
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 8)

	)

916 
	#INCA_IP_EBU_EBU_CON_ARBMODE
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 6)

	)

917 
	#INCA_IP_EBU_EBU_CON_ARBSYNC
 (1 << 5)

	)

918 
	#INCA_IP_EBU_EBU_CON_1
 (1 << 3)

	)

921 
	#INCA_IP_EBU_EBU_ADDSEL0
 ((vﬁ©ûê
u32
*)(
INCA_IP_EBU
+ 0x0020))

	)

922 
	#INCA_IP_EBU_EBU_ADDSEL0_BASE
 (
vÆue
Ë(((–1 << 20Ë- 1Ë& (vÆue)Ë<< 12)

	)

923 
	#INCA_IP_EBU_EBU_ADDSEL0_MASK
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 4)

	)

924 
	#INCA_IP_EBU_EBU_ADDSEL0_MIRRORE
 (1 << 1)

	)

925 
	#INCA_IP_EBU_EBU_ADDSEL0_REGEN
 (1 << 0)

	)

928 
	#INCA_IP_EBU_EBU_ADDSEL1
 ((vﬁ©ûê
u32
*)(
INCA_IP_EBU
+ 0x0024))

	)

929 
	#INCA_IP_EBU_EBU_ADDSEL1_BASE
 (
vÆue
Ë(((–1 << 20Ë- 1Ë& (vÆue)Ë<< 12)

	)

930 
	#INCA_IP_EBU_EBU_ADDSEL1_MASK
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 4)

	)

931 
	#INCA_IP_EBU_EBU_ADDSEL1_MIRRORE
 (1 << 1)

	)

932 
	#INCA_IP_EBU_EBU_ADDSEL1_REGEN
 (1 << 0)

	)

935 
	#INCA_IP_EBU_EBU_ADDSEL2
 ((vﬁ©ûê
u32
*)(
INCA_IP_EBU
+ 0x0028))

	)

936 
	#INCA_IP_EBU_EBU_ADDSEL2_BASE
 (
vÆue
Ë(((–1 << 20Ë- 1Ë& (vÆue)Ë<< 12)

	)

937 
	#INCA_IP_EBU_EBU_ADDSEL2_MASK
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 4)

	)

938 
	#INCA_IP_EBU_EBU_ADDSEL2_MIRRORE
 (1 << 1)

	)

939 
	#INCA_IP_EBU_EBU_ADDSEL2_REGEN
 (1 << 0)

	)

942 
	#INCA_IP_EBU_EBU_BUSCON0
 ((vﬁ©ûê
u32
*)(
INCA_IP_EBU
+ 0x0060))

	)

943 
	#INCA_IP_EBU_EBU_BUSCON0_WRDIS
 (1 << 31)

	)

944 
	#INCA_IP_EBU_EBU_BUSCON0_ALEC
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 29)

	)

945 
	#INCA_IP_EBU_EBU_BUSCON0_BCGEN
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 27)

	)

946 
	#INCA_IP_EBU_EBU_BUSCON0_AGEN
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 24)

	)

947 
	#INCA_IP_EBU_EBU_BUSCON0_CMULTR
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 22)

	)

948 
	#INCA_IP_EBU_EBU_BUSCON0_WAIT
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 20)

	)

949 
	#INCA_IP_EBU_EBU_BUSCON0_WAITINV
 (1 << 19)

	)

950 
	#INCA_IP_EBU_EBU_BUSCON0_SETUP
 (1 << 18)

	)

951 
	#INCA_IP_EBU_EBU_BUSCON0_PORTW
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 16)

	)

952 
	#INCA_IP_EBU_EBU_BUSCON0_WAITRDC
 (
vÆue
Ë(((–1 << 7Ë- 1Ë& (vÆue)Ë<< 9)

	)

953 
	#INCA_IP_EBU_EBU_BUSCON0_WAITWRC
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 6)

	)

954 
	#INCA_IP_EBU_EBU_BUSCON0_HOLDC
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 4)

	)

955 
	#INCA_IP_EBU_EBU_BUSCON0_RECOVC
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 2)

	)

956 
	#INCA_IP_EBU_EBU_BUSCON0_CMULT
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 0)

	)

959 
	#INCA_IP_EBU_EBU_BUSCON1
 ((vﬁ©ûê
u32
*)(
INCA_IP_EBU
+ 0x0064))

	)

960 
	#INCA_IP_EBU_EBU_BUSCON1_WRDIS
 (1 << 31)

	)

961 
	#INCA_IP_EBU_EBU_BUSCON1_ALEC
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 29)

	)

962 
	#INCA_IP_EBU_EBU_BUSCON1_BCGEN
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 27)

	)

963 
	#INCA_IP_EBU_EBU_BUSCON1_AGEN
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 24)

	)

964 
	#INCA_IP_EBU_EBU_BUSCON1_CMULTR
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 22)

	)

965 
	#INCA_IP_EBU_EBU_BUSCON1_WAIT
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 20)

	)

966 
	#INCA_IP_EBU_EBU_BUSCON1_WAITINV
 (1 << 19)

	)

967 
	#INCA_IP_EBU_EBU_BUSCON1_SETUP
 (1 << 18)

	)

968 
	#INCA_IP_EBU_EBU_BUSCON1_PORTW
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 16)

	)

969 
	#INCA_IP_EBU_EBU_BUSCON1_WAITRDC
 (
vÆue
Ë(((–1 << 7Ë- 1Ë& (vÆue)Ë<< 9)

	)

970 
	#INCA_IP_EBU_EBU_BUSCON1_WAITWRC
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 6)

	)

971 
	#INCA_IP_EBU_EBU_BUSCON1_HOLDC
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 4)

	)

972 
	#INCA_IP_EBU_EBU_BUSCON1_RECOVC
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 2)

	)

973 
	#INCA_IP_EBU_EBU_BUSCON1_CMULT
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 0)

	)

976 
	#INCA_IP_EBU_EBU_BUSCON2
 ((vﬁ©ûê
u32
*)(
INCA_IP_EBU
+ 0x0068))

	)

977 
	#INCA_IP_EBU_EBU_BUSCON2_WRDIS
 (1 << 31)

	)

978 
	#INCA_IP_EBU_EBU_BUSCON2_ALEC
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 29)

	)

979 
	#INCA_IP_EBU_EBU_BUSCON2_BCGEN
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 27)

	)

980 
	#INCA_IP_EBU_EBU_BUSCON2_AGEN
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 24)

	)

981 
	#INCA_IP_EBU_EBU_BUSCON2_CMULTR
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 22)

	)

982 
	#INCA_IP_EBU_EBU_BUSCON2_WAIT
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 20)

	)

983 
	#INCA_IP_EBU_EBU_BUSCON2_WAITINV
 (1 << 19)

	)

984 
	#INCA_IP_EBU_EBU_BUSCON2_SETUP
 (1 << 18)

	)

985 
	#INCA_IP_EBU_EBU_BUSCON2_PORTW
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 16)

	)

986 
	#INCA_IP_EBU_EBU_BUSCON2_WAITRDC
 (
vÆue
Ë(((–1 << 7Ë- 1Ë& (vÆue)Ë<< 9)

	)

987 
	#INCA_IP_EBU_EBU_BUSCON2_WAITWRC
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 6)

	)

988 
	#INCA_IP_EBU_EBU_BUSCON2_HOLDC
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 4)

	)

989 
	#INCA_IP_EBU_EBU_BUSCON2_RECOVC
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 2)

	)

990 
	#INCA_IP_EBU_EBU_BUSCON2_CMULT
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 0)

	)

996 
	#INCA_IP_SDRAM
 (0xBF800000)

	)

1001 
	#INCA_IP_SDRAM_MC_ERRCAUSE
 ((vﬁ©ûê
u32
*)(
INCA_IP_SDRAM
+ 0x0100))

	)

1002 
	#INCA_IP_SDRAM_MC_ERRCAUSE_ERR
 (1 << 31)

	)

1003 
	#INCA_IP_SDRAM_MC_ERRCAUSE_PORT
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 16)

	)

1004 
	#INCA_IP_SDRAM_MC_ERRCAUSE_CAUSE
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 0)

	)

1005 
	#INCA_IP_SDRAM_MC_ERRCAUSE_Res
 (
vÆue
Ë(((–1 << 
NaN
Ë- 1Ë& (vÆue)Ë<< NaN)

	)

1008 
	#INCA_IP_SDRAM_MC_ERRADDR
 ((vﬁ©ûê
u32
*)(
INCA_IP_SDRAM
+ 0x0108))

	)

1009 
	#INCA_IP_SDRAM_MC_ERRADDR_ADDR


	)

1012 
	#INCA_IP_SDRAM_MC_IOGP
 ((vﬁ©ûê
u32
*)(
INCA_IP_SDRAM
+ 0x0800))

	)

1013 
	#INCA_IP_SDRAM_MC_IOGP_GPR6
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 28)

	)

1014 
	#INCA_IP_SDRAM_MC_IOGP_GPR5
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 24)

	)

1015 
	#INCA_IP_SDRAM_MC_IOGP_GPR4
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 20)

	)

1016 
	#INCA_IP_SDRAM_MC_IOGP_GPR3
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 16)

	)

1017 
	#INCA_IP_SDRAM_MC_IOGP_GPR2
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 12)

	)

1018 
	#INCA_IP_SDRAM_MC_IOGP_CPS
 (1 << 11)

	)

1019 
	#INCA_IP_SDRAM_MC_IOGP_CLKDELAY
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 8)

	)

1020 
	#INCA_IP_SDRAM_MC_IOGP_CLKRAT
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 4)

	)

1021 
	#INCA_IP_SDRAM_MC_IOGP_RDDEL
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

1024 
	#INCA_IP_SDRAM_MC_SELFRFSH
 ((vﬁ©ûê
u32
*)(
INCA_IP_SDRAM
+ 0x0A00))

	)

1025 
	#INCA_IP_SDRAM_MC_SELFRFSH_PWDS
 (1 << 1)

	)

1026 
	#INCA_IP_SDRAM_MC_SELFRFSH_PWD
 (1 << 0)

	)

1027 
	#INCA_IP_SDRAM_MC_SELFRFSH_Res
 (
vÆue
Ë(((–1 << 30Ë- 1Ë& (vÆue)Ë<< 2)

	)

1030 
	#INCA_IP_SDRAM_MC_CTRLENA
 ((vﬁ©ûê
u32
*)(
INCA_IP_SDRAM
+ 0x1000))

	)

1031 
	#INCA_IP_SDRAM_MC_CTRLENA_ENA
 (1 << 0)

	)

1032 
	#INCA_IP_SDRAM_MC_CTRLENA_Res
 (
vÆue
Ë(((–1 << 31Ë- 1Ë& (vÆue)Ë<< 1)

	)

1035 
	#INCA_IP_SDRAM_MC_MRSCODE
 ((vﬁ©ûê
u32
*)(
INCA_IP_SDRAM
+ 0x1008))

	)

1036 
	#INCA_IP_SDRAM_MC_MRSCODE_UMC
 (
vÆue
Ë(((–1 << 5Ë- 1Ë& (vÆue)Ë<< 7)

	)

1037 
	#INCA_IP_SDRAM_MC_MRSCODE_CL
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 4)

	)

1038 
	#INCA_IP_SDRAM_MC_MRSCODE_WT
 (1 << 3)

	)

1039 
	#INCA_IP_SDRAM_MC_MRSCODE_BL
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 0)

	)

1042 
	#INCA_IP_SDRAM_MC_CFGDW
 ((vﬁ©ûê
u32
*)(
INCA_IP_SDRAM
+ 0x1010))

	)

1043 
	#INCA_IP_SDRAM_MC_CFGDW_DW
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

1044 
	#INCA_IP_SDRAM_MC_CFGDW_Res
 (
vÆue
Ë(((–1 << 28Ë- 1Ë& (vÆue)Ë<< 4)

	)

1047 
	#INCA_IP_SDRAM_MC_CFGPB0
 ((vﬁ©ûê
u32
*)(
INCA_IP_SDRAM
+ 0x1018))

	)

1048 
	#INCA_IP_SDRAM_MC_CFGPB0_MCSEN0
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 12)

	)

1049 
	#INCA_IP_SDRAM_MC_CFGPB0_BANKN0
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 8)

	)

1050 
	#INCA_IP_SDRAM_MC_CFGPB0_ROWW0
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 4)

	)

1051 
	#INCA_IP_SDRAM_MC_CFGPB0_COLW0
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

1052 
	#INCA_IP_SDRAM_MC_CFGPB0_Res
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 16)

	)

1055 
	#INCA_IP_SDRAM_MC_LATENCY
 ((vﬁ©ûê
u32
*)(
INCA_IP_SDRAM
+ 0x1038))

	)

1056 
	#INCA_IP_SDRAM_MC_LATENCY_TRP
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 16)

	)

1057 
	#INCA_IP_SDRAM_MC_LATENCY_TRAS
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 12)

	)

1058 
	#INCA_IP_SDRAM_MC_LATENCY_TRCD
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 8)

	)

1059 
	#INCA_IP_SDRAM_MC_LATENCY_TDPL
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 4)

	)

1060 
	#INCA_IP_SDRAM_MC_LATENCY_TDAL
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

1061 
	#INCA_IP_SDRAM_MC_LATENCY_Res
 (
vÆue
Ë(((–1 << 12Ë- 1Ë& (vÆue)Ë<< 20)

	)

1064 
	#INCA_IP_SDRAM_MC_TREFRESH
 ((vﬁ©ûê
u32
*)(
INCA_IP_SDRAM
+ 0x1040))

	)

1065 
	#INCA_IP_SDRAM_MC_TREFRESH_TREF
 (
vÆue
Ë(((–1 << 13Ë- 1Ë& (vÆue)Ë<< 0)

	)

1066 
	#INCA_IP_SDRAM_MC_TREFRESH_Res
 (
vÆue
Ë(((–1 << 19Ë- 1Ë& (vÆue)Ë<< 13)

	)

1072 
	#INCA_IP_GPTU
 (0xB8000300)

	)

1077 
	#INCA_IP_GPTU_GPT_CLC
 ((vﬁ©ûê
u32
*)(
INCA_IP_GPTU
+ 0x0000))

	)

1078 
	#INCA_IP_GPTU_GPT_CLC_RMC
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 8)

	)

1079 
	#INCA_IP_GPTU_GPT_CLC_DISS
 (1 << 1)

	)

1080 
	#INCA_IP_GPTU_GPT_CLC_DISR
 (1 << 0)

	)

1083 
	#INCA_IP_GPTU_GPT_T3CON
 ((vﬁ©ûê
u32
*)(
INCA_IP_GPTU
+ 0x0014))

	)

1084 
	#INCA_IP_GPTU_GPT_T3CON_T3RDIR
 (1 << 15)

	)

1085 
	#INCA_IP_GPTU_GPT_T3CON_T3CHDIR
 (1 << 14)

	)

1086 
	#INCA_IP_GPTU_GPT_T3CON_T3EDGE
 (1 << 13)

	)

1087 
	#INCA_IP_GPTU_GPT_T3CON_BPS1
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 11)

	)

1088 
	#INCA_IP_GPTU_GPT_T3CON_T3OTL
 (1 << 10)

	)

1089 
	#INCA_IP_GPTU_GPT_T3CON_T3UD
 (1 << 7)

	)

1090 
	#INCA_IP_GPTU_GPT_T3CON_T3R
 (1 << 6)

	)

1091 
	#INCA_IP_GPTU_GPT_T3CON_T3M
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 3)

	)

1092 
	#INCA_IP_GPTU_GPT_T3CON_T3I
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 0)

	)

1096 
	#INCA_IP_GPTU_GPT_WHBT3CON
 ((vﬁ©ûê
u32
*)(
INCA_IP_GPTU
+ 0x004C))

	)

1097 
	#INCA_IP_GPTU_GPT_WHBT3CON_SETT3CHDIR
 (1 << 15)

	)

1098 
	#INCA_IP_GPTU_GPT_WHBT3CON_CLRT3CHDIR
 (1 << 14)

	)

1099 
	#INCA_IP_GPTU_GPT_WHBT3CON_SETT3EDGE
 (1 << 13)

	)

1100 
	#INCA_IP_GPTU_GPT_WHBT3CON_CLRT3EDGE
 (1 << 12)

	)

1101 
	#INCA_IP_GPTU_GPT_WHBT3CON_SETT3OTL
 (1 << 11)

	)

1102 
	#INCA_IP_GPTU_GPT_WHBT3CON_CLRT3OTL
 (1 << 10)

	)

1105 
	#INCA_IP_GPTU_GPT_T2CON
 ((vﬁ©ûê
u32
*)(
INCA_IP_GPTU
+ 0x0010))

	)

1106 
	#INCA_IP_GPTU_GPT_T2CON_TxRDIR
 (1 << 15)

	)

1107 
	#INCA_IP_GPTU_GPT_T2CON_TxCHDIR
 (1 << 14)

	)

1108 
	#INCA_IP_GPTU_GPT_T2CON_TxEDGE
 (1 << 13)

	)

1109 
	#INCA_IP_GPTU_GPT_T2CON_TxIRDIS
 (1 << 12)

	)

1110 
	#INCA_IP_GPTU_GPT_T2CON_TxRC
 (1 << 9)

	)

1111 
	#INCA_IP_GPTU_GPT_T2CON_TxUD
 (1 << 7)

	)

1112 
	#INCA_IP_GPTU_GPT_T2CON_TxR
 (1 << 6)

	)

1113 
	#INCA_IP_GPTU_GPT_T2CON_TxM
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 3)

	)

1114 
	#INCA_IP_GPTU_GPT_T2CON_TxI
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 0)

	)

1117 
	#INCA_IP_GPTU_GPT_T4CON
 ((vﬁ©ûê
u32
*)(
INCA_IP_GPTU
+ 0x0018))

	)

1118 
	#INCA_IP_GPTU_GPT_T4CON_TxRDIR
 (1 << 15)

	)

1119 
	#INCA_IP_GPTU_GPT_T4CON_TxCHDIR
 (1 << 14)

	)

1120 
	#INCA_IP_GPTU_GPT_T4CON_TxEDGE
 (1 << 13)

	)

1121 
	#INCA_IP_GPTU_GPT_T4CON_TxIRDIS
 (1 << 12)

	)

1122 
	#INCA_IP_GPTU_GPT_T4CON_TxRC
 (1 << 9)

	)

1123 
	#INCA_IP_GPTU_GPT_T4CON_TxUD
 (1 << 7)

	)

1124 
	#INCA_IP_GPTU_GPT_T4CON_TxR
 (1 << 6)

	)

1125 
	#INCA_IP_GPTU_GPT_T4CON_TxM
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 3)

	)

1126 
	#INCA_IP_GPTU_GPT_T4CON_TxI
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 0)

	)

1130 
	#INCA_IP_GPTU_GPT_WHBT2CON
 ((vﬁ©ûê
u32
*)(
INCA_IP_GPTU
+ 0x0048))

	)

1131 
	#INCA_IP_GPTU_GPT_WHBT2CON_SETTxCHDIR
 (1 << 15)

	)

1132 
	#INCA_IP_GPTU_GPT_WHBT2CON_CLRTxCHDIR
 (1 << 14)

	)

1133 
	#INCA_IP_GPTU_GPT_WHBT2CON_SETTxEDGE
 (1 << 13)

	)

1134 
	#INCA_IP_GPTU_GPT_WHBT2CON_CLRTxEDGE
 (1 << 12)

	)

1138 
	#INCA_IP_GPTU_GPT_WHBT4CON
 ((vﬁ©ûê
u32
*)(
INCA_IP_GPTU
+ 0x0050))

	)

1139 
	#INCA_IP_GPTU_GPT_WHBT4CON_SETTxCHDIR
 (1 << 15)

	)

1140 
	#INCA_IP_GPTU_GPT_WHBT4CON_CLRTxCHDIR
 (1 << 14)

	)

1141 
	#INCA_IP_GPTU_GPT_WHBT4CON_SETTxEDGE
 (1 << 13)

	)

1142 
	#INCA_IP_GPTU_GPT_WHBT4CON_CLRTxEDGE
 (1 << 12)

	)

1145 
	#INCA_IP_GPTU_GPT_CAPREL
 ((vﬁ©ûê
u32
*)(
INCA_IP_GPTU
+ 0x0030))

	)

1146 
	#INCA_IP_GPTU_GPT_CAPREL_CAPREL
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

1149 
	#INCA_IP_GPTU_GPT_T2
 ((vﬁ©ûê
u32
*)(
INCA_IP_GPTU
+ 0x0034))

	)

1150 
	#INCA_IP_GPTU_GPT_T2_TVAL
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

1153 
	#INCA_IP_GPTU_GPT_T3
 ((vﬁ©ûê
u32
*)(
INCA_IP_GPTU
+ 0x0038))

	)

1154 
	#INCA_IP_GPTU_GPT_T3_TVAL
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

1157 
	#INCA_IP_GPTU_GPT_T4
 ((vﬁ©ûê
u32
*)(
INCA_IP_GPTU
+ 0x003C))

	)

1158 
	#INCA_IP_GPTU_GPT_T4_TVAL
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

1161 
	#INCA_IP_GPTU_GPT_T5
 ((vﬁ©ûê
u32
*)(
INCA_IP_GPTU
+ 0x0040))

	)

1162 
	#INCA_IP_GPTU_GPT_T5_TVAL
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

1165 
	#INCA_IP_GPTU_GPT_T6
 ((vﬁ©ûê
u32
*)(
INCA_IP_GPTU
+ 0x0044))

	)

1166 
	#INCA_IP_GPTU_GPT_T6_TVAL
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

1169 
	#INCA_IP_GPTU_GPT_T6CON
 ((vﬁ©ûê
u32
*)(
INCA_IP_GPTU
+ 0x0020))

	)

1170 
	#INCA_IP_GPTU_GPT_T6CON_T6SR
 (1 << 15)

	)

1171 
	#INCA_IP_GPTU_GPT_T6CON_T6CLR
 (1 << 14)

	)

1172 
	#INCA_IP_GPTU_GPT_T6CON_BPS2
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 11)

	)

1173 
	#INCA_IP_GPTU_GPT_T6CON_T6OTL
 (1 << 10)

	)

1174 
	#INCA_IP_GPTU_GPT_T6CON_T6UD
 (1 << 7)

	)

1175 
	#INCA_IP_GPTU_GPT_T6CON_T6R
 (1 << 6)

	)

1176 
	#INCA_IP_GPTU_GPT_T6CON_T6M
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 3)

	)

1177 
	#INCA_IP_GPTU_GPT_T6CON_T6I
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 0)

	)

1181 
	#INCA_IP_GPTU_GPT_WHBT6CON
 ((vﬁ©ûê
u32
*)(
INCA_IP_GPTU
+ 0x0054))

	)

1182 
	#INCA_IP_GPTU_GPT_WHBT6CON_SETT6OTL
 (1 << 11)

	)

1183 
	#INCA_IP_GPTU_GPT_WHBT6CON_CLRT6OTL
 (1 << 10)

	)

1186 
	#INCA_IP_GPTU_GPT_T5CON
 ((vﬁ©ûê
u32
*)(
INCA_IP_GPTU
+ 0x001C))

	)

1187 
	#INCA_IP_GPTU_GPT_T5CON_T5SC
 (1 << 15)

	)

1188 
	#INCA_IP_GPTU_GPT_T5CON_T5CLR
 (1 << 14)

	)

1189 
	#INCA_IP_GPTU_GPT_T5CON_CI
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 12)

	)

1190 
	#INCA_IP_GPTU_GPT_T5CON_T5CC
 (1 << 11)

	)

1191 
	#INCA_IP_GPTU_GPT_T5CON_CT3
 (1 << 10)

	)

1192 
	#INCA_IP_GPTU_GPT_T5CON_T5RC
 (1 << 9)

	)

1193 
	#INCA_IP_GPTU_GPT_T5CON_T5UDE
 (1 << 8)

	)

1194 
	#INCA_IP_GPTU_GPT_T5CON_T5UD
 (1 << 7)

	)

1195 
	#INCA_IP_GPTU_GPT_T5CON_T5R
 (1 << 6)

	)

1196 
	#INCA_IP_GPTU_GPT_T5CON_T5M
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 3)

	)

1197 
	#INCA_IP_GPTU_GPT_T5CON_T5I
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 0)

	)

1203 
	#INCA_IP_IOM
 (0xBF105000)

	)

1208 
	#INCA_IP_IOM_RFIFO
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0000))

	)

1209 
	#INCA_IP_IOM_RFIFO_RXD
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

1212 
	#INCA_IP_IOM_XFIFO
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0000))

	)

1213 
	#INCA_IP_IOM_XFIFO_TXD
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

1216 
	#INCA_IP_IOM_ISTAH
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0080))

	)

1217 
	#INCA_IP_IOM_ISTAH_RME
 (1 << 7)

	)

1218 
	#INCA_IP_IOM_ISTAH_RPF
 (1 << 6)

	)

1219 
	#INCA_IP_IOM_ISTAH_RFO
 (1 << 5)

	)

1220 
	#INCA_IP_IOM_ISTAH_XPR
 (1 << 4)

	)

1221 
	#INCA_IP_IOM_ISTAH_XMR
 (1 << 3)

	)

1222 
	#INCA_IP_IOM_ISTAH_XDU
 (1 << 2)

	)

1225 
	#INCA_IP_IOM_MASKH
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0080))

	)

1226 
	#INCA_IP_IOM_MASKH_RME
 (1 << 7)

	)

1227 
	#INCA_IP_IOM_MASKH_RPF
 (1 << 6)

	)

1228 
	#INCA_IP_IOM_MASKH_RFO
 (1 << 5)

	)

1229 
	#INCA_IP_IOM_MASKH_XPR
 (1 << 4)

	)

1230 
	#INCA_IP_IOM_MASKH_XMR
 (1 << 3)

	)

1231 
	#INCA_IP_IOM_MASKH_XDU
 (1 << 2)

	)

1234 
	#INCA_IP_IOM_STAR
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0084))

	)

1235 
	#INCA_IP_IOM_STAR_XDOV
 (1 << 7)

	)

1236 
	#INCA_IP_IOM_STAR_XFW
 (1 << 6)

	)

1237 
	#INCA_IP_IOM_STAR_RACI
 (1 << 3)

	)

1238 
	#INCA_IP_IOM_STAR_XACI
 (1 << 1)

	)

1241 
	#INCA_IP_IOM_CMDR
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0084))

	)

1242 
	#INCA_IP_IOM_CMDR_RMC
 (1 << 7)

	)

1243 
	#INCA_IP_IOM_CMDR_RRES
 (1 << 6)

	)

1244 
	#INCA_IP_IOM_CMDR_XTF
 (1 << 3)

	)

1245 
	#INCA_IP_IOM_CMDR_XME
 (1 << 1)

	)

1246 
	#INCA_IP_IOM_CMDR_XRES
 (1 << 0)

	)

1249 
	#INCA_IP_IOM_MODEH
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0088))

	)

1250 
	#INCA_IP_IOM_MODEH_MDS2
 (1 << 7)

	)

1251 
	#INCA_IP_IOM_MODEH_MDS1
 (1 << 6)

	)

1252 
	#INCA_IP_IOM_MODEH_MDS0
 (1 << 5)

	)

1253 
	#INCA_IP_IOM_MODEH_RAC
 (1 << 3)

	)

1254 
	#INCA_IP_IOM_MODEH_DIM2
 (1 << 2)

	)

1255 
	#INCA_IP_IOM_MODEH_DIM1
 (1 << 1)

	)

1256 
	#INCA_IP_IOM_MODEH_DIM0
 (1 << 0)

	)

1259 
	#INCA_IP_IOM_EXMR
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x008C))

	)

1260 
	#INCA_IP_IOM_EXMR_XFBS
 (1 << 7)

	)

1261 
	#INCA_IP_IOM_EXMR_RFBS
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 5)

	)

1262 
	#INCA_IP_IOM_EXMR_SRA
 (1 << 4)

	)

1263 
	#INCA_IP_IOM_EXMR_XCRC
 (1 << 3)

	)

1264 
	#INCA_IP_IOM_EXMR_RCRC
 (1 << 2)

	)

1265 
	#INCA_IP_IOM_EXMR_ITF
 (1 << 0)

	)

1268 
	#INCA_IP_IOM_SAP1
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0094))

	)

1269 
	#INCA_IP_IOM_SAP1_SAPI1
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 2)

	)

1270 
	#INCA_IP_IOM_SAP1_MHA
 (1 << 0)

	)

1273 
	#INCA_IP_IOM_RBCL
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0098))

	)

1274 
	#INCA_IP_IOM_RBCL_RBC
(
vÆue
Ë(1 << vÆue)

	)

1278 
	#INCA_IP_IOM_SAP2
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0098))

	)

1279 
	#INCA_IP_IOM_SAP2_SAPI2
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 2)

	)

1280 
	#INCA_IP_IOM_SAP2_MLA
 (1 << 0)

	)

1283 
	#INCA_IP_IOM_RBCH
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x009C))

	)

1284 
	#INCA_IP_IOM_RBCH_OV
 (1 << 4)

	)

1285 
	#INCA_IP_IOM_RBCH_RBC11
 (1 << 3)

	)

1286 
	#INCA_IP_IOM_RBCH_RBC10
 (1 << 2)

	)

1287 
	#INCA_IP_IOM_RBCH_RBC9
 (1 << 1)

	)

1288 
	#INCA_IP_IOM_RBCH_RBC8
 (1 << 0)

	)

1291 
	#INCA_IP_IOM_TEI1
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x009C))

	)

1292 
	#INCA_IP_IOM_TEI1_TEI1
 (
vÆue
Ë(((–1 << 7Ë- 1Ë& (vÆue)Ë<< 1)

	)

1293 
	#INCA_IP_IOM_TEI1_EA
 (1 << 0)

	)

1296 
	#INCA_IP_IOM_RSTA
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x00A0))

	)

1297 
	#INCA_IP_IOM_RSTA_VFR
 (1 << 7)

	)

1298 
	#INCA_IP_IOM_RSTA_RDO
 (1 << 6)

	)

1299 
	#INCA_IP_IOM_RSTA_CRC
 (1 << 5)

	)

1300 
	#INCA_IP_IOM_RSTA_RAB
 (1 << 4)

	)

1301 
	#INCA_IP_IOM_RSTA_SA1
 (1 << 3)

	)

1302 
	#INCA_IP_IOM_RSTA_SA0
 (1 << 2)

	)

1303 
	#INCA_IP_IOM_RSTA_TA
 (1 << 0)

	)

1304 
	#INCA_IP_IOM_RSTA_CR
 (1 << 1)

	)

1307 
	#INCA_IP_IOM_TEI2
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x00A0))

	)

1308 
	#INCA_IP_IOM_TEI2_TEI2
 (
vÆue
Ë(((–1 << 7Ë- 1Ë& (vÆue)Ë<< 1)

	)

1309 
	#INCA_IP_IOM_TEI2_EA
 (1 << 0)

	)

1312 
	#INCA_IP_IOM_TMH
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x00A4))

	)

1313 
	#INCA_IP_IOM_TMH_TLP
 (1 << 0)

	)

1316 
	#INCA_IP_IOM_CIR0
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x00B8))

	)

1317 
	#INCA_IP_IOM_CIR0_CODR0
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 4)

	)

1318 
	#INCA_IP_IOM_CIR0_CIC0
 (1 << 3)

	)

1319 
	#INCA_IP_IOM_CIR0_CIC1
 (1 << 2)

	)

1320 
	#INCA_IP_IOM_CIR0_SG
 (1 << 1)

	)

1321 
	#INCA_IP_IOM_CIR0_BAS
 (1 << 0)

	)

1324 
	#INCA_IP_IOM_CIX0
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x00B8))

	)

1325 
	#INCA_IP_IOM_CIX0_CODX0
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 4)

	)

1326 
	#INCA_IP_IOM_CIX0_TBA2
 (1 << 3)

	)

1327 
	#INCA_IP_IOM_CIX0_TBA1
 (1 << 2)

	)

1328 
	#INCA_IP_IOM_CIX0_TBA0
 (1 << 1)

	)

1329 
	#INCA_IP_IOM_CIX0_BAC
 (1 << 0)

	)

1332 
	#INCA_IP_IOM_CIR1
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x00BC))

	)

1333 
	#INCA_IP_IOM_CIR1_CODR1
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 2)

	)

1336 
	#INCA_IP_IOM_CIX1
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x00BC))

	)

1337 
	#INCA_IP_IOM_CIX1_CODX1
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 2)

	)

1338 
	#INCA_IP_IOM_CIX1_CICW
 (1 << 1)

	)

1339 
	#INCA_IP_IOM_CIX1_CI1E
 (1 << 0)

	)

1342 
	#INCA_IP_IOM_CDA10
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0100))

	)

1343 
	#INCA_IP_IOM_CDA10_CDA
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

1346 
	#INCA_IP_IOM_CDA11
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0104))

	)

1347 
	#INCA_IP_IOM_CDA11_CDA
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

1350 
	#INCA_IP_IOM_CDA20
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0108))

	)

1351 
	#INCA_IP_IOM_CDA20_CDA
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

1354 
	#INCA_IP_IOM_CDA21
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x010C))

	)

1355 
	#INCA_IP_IOM_CDA21_CDA
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

1358 
	#INCA_IP_IOM_CDA_TSDP10
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0110))

	)

1359 
	#INCA_IP_IOM_CDA_TSDP10_DPS
 (1 << 7)

	)

1360 
	#INCA_IP_IOM_CDA_TSDP10_TSS
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

1363 
	#INCA_IP_IOM_CDA_TSDP11
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0114))

	)

1364 
	#INCA_IP_IOM_CDA_TSDP11_DPS
 (1 << 7)

	)

1365 
	#INCA_IP_IOM_CDA_TSDP11_TSS
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

1368 
	#INCA_IP_IOM_CDA_TSDP20
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0118))

	)

1369 
	#INCA_IP_IOM_CDA_TSDP20_DPS
 (1 << 7)

	)

1370 
	#INCA_IP_IOM_CDA_TSDP20_TSS
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

1373 
	#INCA_IP_IOM_CDA_TSDP21
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x011C))

	)

1374 
	#INCA_IP_IOM_CDA_TSDP21_DPS
 (1 << 7)

	)

1375 
	#INCA_IP_IOM_CDA_TSDP21_TSS
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

1378 
	#INCA_IP_IOM_CO_TSDP10
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0120))

	)

1379 
	#INCA_IP_IOM_CO_TSDP10_DPS
 (1 << 7)

	)

1380 
	#INCA_IP_IOM_CO_TSDP10_TSS
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

1383 
	#INCA_IP_IOM_CO_TSDP11
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0124))

	)

1384 
	#INCA_IP_IOM_CO_TSDP11_DPS
 (1 << 7)

	)

1385 
	#INCA_IP_IOM_CO_TSDP11_TSS
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

1388 
	#INCA_IP_IOM_CO_TSDP20
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0128))

	)

1389 
	#INCA_IP_IOM_CO_TSDP20_DPS
 (1 << 7)

	)

1390 
	#INCA_IP_IOM_CO_TSDP20_TSS
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

1393 
	#INCA_IP_IOM_CO_TSDP21
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x012C))

	)

1394 
	#INCA_IP_IOM_CO_TSDP21_DPS
 (1 << 7)

	)

1395 
	#INCA_IP_IOM_CO_TSDP21_TSS
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

1398 
	#INCA_IP_IOM_CDA1_CR
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0138))

	)

1399 
	#INCA_IP_IOM_CDA1_CR_EN_TBM
 (1 << 5)

	)

1400 
	#INCA_IP_IOM_CDA1_CR_EN_I1
 (1 << 4)

	)

1401 
	#INCA_IP_IOM_CDA1_CR_EN_I0
 (1 << 3)

	)

1402 
	#INCA_IP_IOM_CDA1_CR_EN_O1
 (1 << 2)

	)

1403 
	#INCA_IP_IOM_CDA1_CR_EN_O0
 (1 << 1)

	)

1404 
	#INCA_IP_IOM_CDA1_CR_SWAP
 (1 << 0)

	)

1407 
	#INCA_IP_IOM_CDA2_CR
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x013C))

	)

1408 
	#INCA_IP_IOM_CDA2_CR_EN_TBM
 (1 << 5)

	)

1409 
	#INCA_IP_IOM_CDA2_CR_EN_I1
 (1 << 4)

	)

1410 
	#INCA_IP_IOM_CDA2_CR_EN_I0
 (1 << 3)

	)

1411 
	#INCA_IP_IOM_CDA2_CR_EN_O1
 (1 << 2)

	)

1412 
	#INCA_IP_IOM_CDA2_CR_EN_O0
 (1 << 1)

	)

1413 
	#INCA_IP_IOM_CDA2_CR_SWAP
 (1 << 0)

	)

1416 
	#INCA_IP_IOM_BCHA_CR
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0144))

	)

1417 
	#INCA_IP_IOM_BCHA_CR_EN_BC2
 (1 << 4)

	)

1418 
	#INCA_IP_IOM_BCHA_CR_EN_BC1
 (1 << 3)

	)

1421 
	#INCA_IP_IOM_BCHB_CR
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0148))

	)

1422 
	#INCA_IP_IOM_BCHB_CR_EN_BC2
 (1 << 4)

	)

1423 
	#INCA_IP_IOM_BCHB_CR_EN_BC1
 (1 << 3)

	)

1426 
	#INCA_IP_IOM_DCI_CR
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x014C))

	)

1427 
	#INCA_IP_IOM_DCI_CR_DPS_CI1
 (1 << 7)

	)

1428 
	#INCA_IP_IOM_DCI_CR_EN_CI1
 (1 << 6)

	)

1429 
	#INCA_IP_IOM_DCI_CR_EN_D
 (1 << 5)

	)

1432 
	#INCA_IP_IOM_DCIC_CR
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x014C))

	)

1433 
	#INCA_IP_IOM_DCIC_CR_DPS_CI0
 (1 << 7)

	)

1434 
	#INCA_IP_IOM_DCIC_CR_EN_CI0
 (1 << 6)

	)

1435 
	#INCA_IP_IOM_DCIC_CR_DPS_D
 (1 << 5)

	)

1438 
	#INCA_IP_IOM_SDS_CR
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0154))

	)

1439 
	#INCA_IP_IOM_SDS_CR_ENS_TSS
 (1 << 7)

	)

1440 
	#INCA_IP_IOM_SDS_CR_ENS_TSS_1
 (1 << 6)

	)

1441 
	#INCA_IP_IOM_SDS_CR_ENS_TSS_3
 (1 << 5)

	)

1442 
	#INCA_IP_IOM_SDS_CR_TSS
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

1445 
	#INCA_IP_IOM_IOM_CR
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x015C))

	)

1446 
	#INCA_IP_IOM_IOM_CR_SPU
 (1 << 7)

	)

1447 
	#INCA_IP_IOM_IOM_CR_CI_CS
 (1 << 5)

	)

1448 
	#INCA_IP_IOM_IOM_CR_TIC_DIS
 (1 << 4)

	)

1449 
	#INCA_IP_IOM_IOM_CR_EN_BCL
 (1 << 3)

	)

1450 
	#INCA_IP_IOM_IOM_CR_CLKM
 (1 << 2)

	)

1451 
	#INCA_IP_IOM_IOM_CR_Res
 (1 << 1)

	)

1452 
	#INCA_IP_IOM_IOM_CR_DIS_IOM
 (1 << 0)

	)

1455 
	#INCA_IP_IOM_STI
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0160))

	)

1456 
	#INCA_IP_IOM_STI_STOV21
 (1 << 7)

	)

1457 
	#INCA_IP_IOM_STI_STOV20
 (1 << 6)

	)

1458 
	#INCA_IP_IOM_STI_STOV11
 (1 << 5)

	)

1459 
	#INCA_IP_IOM_STI_STOV10
 (1 << 4)

	)

1460 
	#INCA_IP_IOM_STI_STI21
 (1 << 3)

	)

1461 
	#INCA_IP_IOM_STI_STI20
 (1 << 2)

	)

1462 
	#INCA_IP_IOM_STI_STI11
 (1 << 1)

	)

1463 
	#INCA_IP_IOM_STI_STI10
 (1 << 0)

	)

1466 
	#INCA_IP_IOM_ASTI
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0160))

	)

1467 
	#INCA_IP_IOM_ASTI_ACK21
 (1 << 3)

	)

1468 
	#INCA_IP_IOM_ASTI_ACK20
 (1 << 2)

	)

1469 
	#INCA_IP_IOM_ASTI_ACK11
 (1 << 1)

	)

1470 
	#INCA_IP_IOM_ASTI_ACK10
 (1 << 0)

	)

1473 
	#INCA_IP_IOM_MSTI
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0164))

	)

1474 
	#INCA_IP_IOM_MSTI_STOV21
 (1 << 7)

	)

1475 
	#INCA_IP_IOM_MSTI_STOV20
 (1 << 6)

	)

1476 
	#INCA_IP_IOM_MSTI_STOV11
 (1 << 5)

	)

1477 
	#INCA_IP_IOM_MSTI_STOV10
 (1 << 4)

	)

1478 
	#INCA_IP_IOM_MSTI_STI21
 (1 << 3)

	)

1479 
	#INCA_IP_IOM_MSTI_STI20
 (1 << 2)

	)

1480 
	#INCA_IP_IOM_MSTI_STI11
 (1 << 1)

	)

1481 
	#INCA_IP_IOM_MSTI_STI10
 (1 << 0)

	)

1484 
	#INCA_IP_IOM_SDS_CONF
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0168))

	)

1485 
	#INCA_IP_IOM_SDS_CONF_SDS_BCL
 (1 << 0)

	)

1488 
	#INCA_IP_IOM_MCDA
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x016C))

	)

1489 
	#INCA_IP_IOM_MCDA_MCDA21
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 6)

	)

1490 
	#INCA_IP_IOM_MCDA_MCDA20
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 4)

	)

1491 
	#INCA_IP_IOM_MCDA_MCDA11
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 2)

	)

1492 
	#INCA_IP_IOM_MCDA_MCDA10
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 0)

	)

1498 #i‡
deföed
(
CONFIG_INCA_IP
)

1499 
	#INCA_IP_ASC
 (0xB8000400)

	)

1500 #ñi‡
deföed
(
CONFIG_PURPLE
)

1501 
	#INCA_IP_ASC
 (0xBE500000)

	)

1508 
	#INCA_IP_ASC_ASC_PISEL
 ((vﬁ©ûê
u32
*)(
INCA_IP_ASC
+ 0x0004))

	)

1509 
	#INCA_IP_ASC_ASC_PISEL_RIS
 (1 << 0)

	)

1512 
	#INCA_IP_ASC_ASC_CON
 ((vﬁ©ûê
u32
*)(
INCA_IP_ASC
+ 0x0010))

	)

1513 
	#INCA_IP_ASC_ASC_CON_R
 (1 << 15)

	)

1514 
	#INCA_IP_ASC_ASC_CON_LB
 (1 << 14)

	)

1515 
	#INCA_IP_ASC_ASC_CON_BRS
 (1 << 13)

	)

1516 
	#INCA_IP_ASC_ASC_CON_ODD
 (1 << 12)

	)

1517 
	#INCA_IP_ASC_ASC_CON_FDE
 (1 << 11)

	)

1518 
	#INCA_IP_ASC_ASC_CON_OE
 (1 << 10)

	)

1519 
	#INCA_IP_ASC_ASC_CON_FE
 (1 << 9)

	)

1520 
	#INCA_IP_ASC_ASC_CON_PE
 (1 << 8)

	)

1521 
	#INCA_IP_ASC_ASC_CON_OEN
 (1 << 7)

	)

1522 
	#INCA_IP_ASC_ASC_CON_FEN
 (1 << 6)

	)

1523 
	#INCA_IP_ASC_ASC_CON_PENRXDI
 (1 << 5)

	)

1524 
	#INCA_IP_ASC_ASC_CON_REN
 (1 << 4)

	)

1525 
	#INCA_IP_ASC_ASC_CON_STP
 (1 << 3)

	)

1526 
	#INCA_IP_ASC_ASC_CON_M
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 0)

	)

1529 
	#INCA_IP_ASC_ASC_WHBCON
 ((vﬁ©ûê
u32
*)(
INCA_IP_ASC
+ 0x0050))

	)

1530 
	#INCA_IP_ASC_ASC_WHBCON_SETOE
 (1 << 13)

	)

1531 
	#INCA_IP_ASC_ASC_WHBCON_SETFE
 (1 << 12)

	)

1532 
	#INCA_IP_ASC_ASC_WHBCON_SETPE
 (1 << 11)

	)

1533 
	#INCA_IP_ASC_ASC_WHBCON_CLROE
 (1 << 10)

	)

1534 
	#INCA_IP_ASC_ASC_WHBCON_CLRFE
 (1 << 9)

	)

1535 
	#INCA_IP_ASC_ASC_WHBCON_CLRPE
 (1 << 8)

	)

1536 
	#INCA_IP_ASC_ASC_WHBCON_SETREN
 (1 << 5)

	)

1537 
	#INCA_IP_ASC_ASC_WHBCON_CLRREN
 (1 << 4)

	)

1540 
	#INCA_IP_ASC_ASC_BTR
 ((vﬁ©ûê
u32
*)(
INCA_IP_ASC
+ 0x0014))

	)

1541 
	#INCA_IP_ASC_ASC_BTR_BR_VALUE
 (
vÆue
Ë(((–1 << 13Ë- 1Ë& (vÆue)Ë<< 0)

	)

1544 
	#INCA_IP_ASC_ASC_FDV
 ((vﬁ©ûê
u32
*)(
INCA_IP_ASC
+ 0x0018))

	)

1545 
	#INCA_IP_ASC_ASC_FDV_FD_VALUE
 (
vÆue
Ë(((–1 << 9Ë- 1Ë& (vÆue)Ë<< 0)

	)

1548 
	#INCA_IP_ASC_ASC_PMW
 ((vﬁ©ûê
u32
*)(
INCA_IP_ASC
+ 0x001C))

	)

1549 
	#INCA_IP_ASC_ASC_PMW_IRPW
 (1 << 8)

	)

1550 
	#INCA_IP_ASC_ASC_PMW_PW_VALUE
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

1553 
	#INCA_IP_ASC_ASC_TBUF
 ((vﬁ©ûê
u32
*)(
INCA_IP_ASC
+ 0x0020))

	)

1554 
	#INCA_IP_ASC_ASC_TBUF_TD_VALUE
 (
vÆue
Ë(((–1 << 9Ë- 1Ë& (vÆue)Ë<< 0)

	)

1557 
	#INCA_IP_ASC_ASC_RBUF
 ((vﬁ©ûê
u32
*)(
INCA_IP_ASC
+ 0x0024))

	)

1558 
	#INCA_IP_ASC_ASC_RBUF_RD_VALUE
 (
vÆue
Ë(((–1 << 9Ë- 1Ë& (vÆue)Ë<< 0)

	)

1561 
	#INCA_IP_ASC_ASC_ABCON
 ((vﬁ©ûê
u32
*)(
INCA_IP_ASC
+ 0x0030))

	)

1562 
	#INCA_IP_ASC_ASC_ABCON_RXINV
 (1 << 11)

	)

1563 
	#INCA_IP_ASC_ASC_ABCON_TXINV
 (1 << 10)

	)

1564 
	#INCA_IP_ASC_ASC_ABCON_ABEM
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 8)

	)

1565 
	#INCA_IP_ASC_ASC_ABCON_FCDETEN
 (1 << 4)

	)

1566 
	#INCA_IP_ASC_ASC_ABCON_ABDETEN
 (1 << 3)

	)

1567 
	#INCA_IP_ASC_ASC_ABCON_ABSTEN
 (1 << 2)

	)

1568 
	#INCA_IP_ASC_ASC_ABCON_AUREN
 (1 << 1)

	)

1569 
	#INCA_IP_ASC_ASC_ABCON_ABEN
 (1 << 0)

	)

1572 
	#INCA_IP_ASC_RXFCON
 ((vﬁ©ûê
u32
*)(
INCA_IP_ASC
+ 0x0040))

	)

1573 
	#INCA_IP_ASC_RXFCON_RXFITL
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 8)

	)

1574 
	#INCA_IP_ASC_RXFCON_RXTMEN
 (1 << 2)

	)

1575 
	#INCA_IP_ASC_RXFCON_RXFFLU
 (1 << 1)

	)

1576 
	#INCA_IP_ASC_RXFCON_RXFEN
 (1 << 0)

	)

1579 
	#INCA_IP_ASC_TXFCON
 ((vﬁ©ûê
u32
*)(
INCA_IP_ASC
+ 0x0044))

	)

1580 
	#INCA_IP_ASC_TXFCON_TXFITL
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 8)

	)

1581 
	#INCA_IP_ASC_TXFCON_TXTMEN
 (1 << 2)

	)

1582 
	#INCA_IP_ASC_TXFCON_TXFFLU
 (1 << 1)

	)

1583 
	#INCA_IP_ASC_TXFCON_TXFEN
 (1 << 0)

	)

1586 
	#INCA_IP_ASC_FSTAT
 ((vﬁ©ûê
u32
*)(
INCA_IP_ASC
+ 0x0048))

	)

1587 
	#INCA_IP_ASC_FSTAT_TXFFL
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 8)

	)

1588 
	#INCA_IP_ASC_FSTAT_RXFFL
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 0)

	)

1591 
	#INCA_IP_ASC_ASC_WHBABCON
 ((vﬁ©ûê
u32
*)(
INCA_IP_ASC
+ 0x0054))

	)

1592 
	#INCA_IP_ASC_ASC_WHBABCON_SETABEN
 (1 << 1)

	)

1593 
	#INCA_IP_ASC_ASC_WHBABCON_CLRABEN
 (1 << 0)

	)

1596 
	#INCA_IP_ASC_ASC_ABSTAT
 ((vﬁ©ûê
u32
*)(
INCA_IP_ASC
+ 0x0034))

	)

1597 
	#INCA_IP_ASC_ASC_ABSTAT_DETWAIT
 (1 << 4)

	)

1598 
	#INCA_IP_ASC_ASC_ABSTAT_SCCDET
 (1 << 3)

	)

1599 
	#INCA_IP_ASC_ASC_ABSTAT_SCSDET
 (1 << 2)

	)

1600 
	#INCA_IP_ASC_ASC_ABSTAT_FCCDET
 (1 << 1)

	)

1601 
	#INCA_IP_ASC_ASC_ABSTAT_FCSDET
 (1 << 0)

	)

1604 
	#INCA_IP_ASC_ASC_WHBABSTAT
 ((vﬁ©ûê
u32
*)(
INCA_IP_ASC
+ 0x0058))

	)

1605 
	#INCA_IP_ASC_ASC_WHBABSTAT_SETDETWAIT
 (1 << 9)

	)

1606 
	#INCA_IP_ASC_ASC_WHBABSTAT_CLRDETWAIT
 (1 << 8)

	)

1607 
	#INCA_IP_ASC_ASC_WHBABSTAT_SETSCCDET
 (1 << 7)

	)

1608 
	#INCA_IP_ASC_ASC_WHBABSTAT_CLRSCCDET
 (1 << 6)

	)

1609 
	#INCA_IP_ASC_ASC_WHBABSTAT_SETSCSDET
 (1 << 5)

	)

1610 
	#INCA_IP_ASC_ASC_WHBABSTAT_CLRSCSDET
 (1 << 4)

	)

1611 
	#INCA_IP_ASC_ASC_WHBABSTAT_SETFCCDET
 (1 << 3)

	)

1612 
	#INCA_IP_ASC_ASC_WHBABSTAT_CLRFCCDET
 (1 << 2)

	)

1613 
	#INCA_IP_ASC_ASC_WHBABSTAT_SETFCSDET
 (1 << 1)

	)

1614 
	#INCA_IP_ASC_ASC_WHBABSTAT_CLRFCSDET
 (1 << 0)

	)

1617 
	#INCA_IP_ASC_ASC_CLC
 ((vﬁ©ûê
u32
*)(
INCA_IP_ASC
+ 0x0000))

	)

1618 
	#INCA_IP_ASC_ASC_CLC_RMC
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 8)

	)

1619 
	#INCA_IP_ASC_ASC_CLC_DISS
 (1 << 1)

	)

1620 
	#INCA_IP_ASC_ASC_CLC_DISR
 (1 << 0)

	)

1626 
	#INCA_IP_DMA
 (0xBF108000)

	)

1631 
	#INCA_IP_DMA_DMA_RXCCR0
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x0800))

	)

1632 
	#INCA_IP_DMA_DMA_RXCCR0_LBE
 (1 << 31)

	)

1633 
	#INCA_IP_DMA_DMA_RXCCR0_HPEN
 (1 << 30)

	)

1634 
	#INCA_IP_DMA_DMA_RXCCR0_INIT
 (1 << 2)

	)

1635 
	#INCA_IP_DMA_DMA_RXCCR0_OFF
 (1 << 1)

	)

1636 
	#INCA_IP_DMA_DMA_RXCCR0_HR
 (1 << 0)

	)

1639 
	#INCA_IP_DMA_DMA_RXCCR1
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x0804))

	)

1640 
	#INCA_IP_DMA_DMA_RXCCR1_LBE
 (1 << 31)

	)

1641 
	#INCA_IP_DMA_DMA_RXCCR1_HPEN
 (1 << 30)

	)

1642 
	#INCA_IP_DMA_DMA_RXCCR1_INIT
 (1 << 2)

	)

1643 
	#INCA_IP_DMA_DMA_RXCCR1_OFF
 (1 << 1)

	)

1644 
	#INCA_IP_DMA_DMA_RXCCR1_HR
 (1 << 0)

	)

1647 
	#INCA_IP_DMA_DMA_RXISR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x0808))

	)

1648 
	#INCA_IP_DMA_DMA_RXISR_RDERRx
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 8)

	)

1649 
	#INCA_IP_DMA_DMA_RXISR_CMDCPTx
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 6)

	)

1650 
	#INCA_IP_DMA_DMA_RXISR_EOPx
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 4)

	)

1651 
	#INCA_IP_DMA_DMA_RXISR_CPTx
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 2)

	)

1652 
	#INCA_IP_DMA_DMA_RXISR_HLDx
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 0)

	)

1655 
	#INCA_IP_DMA_DMA_RXIMR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x080C))

	)

1656 
	#INCA_IP_DMA_DMA_RXIMR_RDERRx
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 8)

	)

1657 
	#INCA_IP_DMA_DMA_RXIMR_CMDCPTx
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 6)

	)

1658 
	#INCA_IP_DMA_DMA_RXIMR_EOPx
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 4)

	)

1659 
	#INCA_IP_DMA_DMA_RXIMR_CPTx
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 2)

	)

1660 
	#INCA_IP_DMA_DMA_RXIMR_HLDx
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 0)

	)

1664 
	#INCA_IP_DMA_DMA_RXFRDA0
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x0810))

	)

1665 
	#INCA_IP_DMA_DMA_RXFRDA0_RXFRDA
 (
vÆue
Ë(((–1 << 28Ë- 1Ë& (vÆue)Ë<< 0)

	)

1669 
	#INCA_IP_DMA_DMA_RXFRDA1
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x0814))

	)

1670 
	#INCA_IP_DMA_DMA_RXFRDA1_RXFRDA
 (
vÆue
Ë(((–1 << 28Ë- 1Ë& (vÆue)Ë<< 0)

	)

1673 
	#INCA_IP_DMA_DMA_RXPOLL
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x0818))

	)

1674 
	#INCA_IP_DMA_DMA_RXPOLL_BSZ1
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 30)

	)

1675 
	#INCA_IP_DMA_DMA_RXPOLL_BSZ0
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 28)

	)

1676 
	#INCA_IP_DMA_DMA_RXPOLL_RXPOLLTIME
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

1679 
	#INCA_IP_DMA_DMA_TXCCR0
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x0880))

	)

1680 
	#INCA_IP_DMA_DMA_TXCCR0_LBE
 (1 << 31)

	)

1681 
	#INCA_IP_DMA_DMA_TXCCR0_HPEN
 (1 << 30)

	)

1682 
	#INCA_IP_DMA_DMA_TXCCR0_HR
 (1 << 2)

	)

1683 
	#INCA_IP_DMA_DMA_TXCCR0_OFF
 (1 << 1)

	)

1684 
	#INCA_IP_DMA_DMA_TXCCR0_INIT
 (1 << 0)

	)

1687 
	#INCA_IP_DMA_DMA_TXCCR1
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x0884))

	)

1688 
	#INCA_IP_DMA_DMA_TXCCR1_LBE
 (1 << 31)

	)

1689 
	#INCA_IP_DMA_DMA_TXCCR1_HPEN
 (1 << 30)

	)

1690 
	#INCA_IP_DMA_DMA_TXCCR1_HR
 (1 << 2)

	)

1691 
	#INCA_IP_DMA_DMA_TXCCR1_OFF
 (1 << 1)

	)

1692 
	#INCA_IP_DMA_DMA_TXCCR1_INIT
 (1 << 0)

	)

1695 
	#INCA_IP_DMA_DMA_TXCCR2
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x0888))

	)

1696 
	#INCA_IP_DMA_DMA_TXCCR2_LBE
 (1 << 31)

	)

1697 
	#INCA_IP_DMA_DMA_TXCCR2_HPEN
 (1 << 30)

	)

1698 
	#INCA_IP_DMA_DMA_TXCCR2_HBF
 (1 << 29)

	)

1699 
	#INCA_IP_DMA_DMA_TXCCR2_HR
 (1 << 2)

	)

1700 
	#INCA_IP_DMA_DMA_TXCCR2_OFF
 (1 << 1)

	)

1701 
	#INCA_IP_DMA_DMA_TXCCR2_INIT
 (1 << 0)

	)

1705 
	#INCA_IP_DMA_DMA_TXFRDA0
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x08A0))

	)

1706 
	#INCA_IP_DMA_DMA_TXFRDA0_TXFRDA
 (
vÆue
Ë(((–1 << 28Ë- 1Ë& (vÆue)Ë<< 0)

	)

1710 
	#INCA_IP_DMA_DMA_TXFRDA1
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x08A4))

	)

1711 
	#INCA_IP_DMA_DMA_TXFRDA1_TXFRDA
 (
vÆue
Ë(((–1 << 28Ë- 1Ë& (vÆue)Ë<< 0)

	)

1715 
	#INCA_IP_DMA_DMA_TXFRDA2
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x08A8))

	)

1716 
	#INCA_IP_DMA_DMA_TXFRDA2_TXFRDA
 (
vÆue
Ë(((–1 << 28Ë- 1Ë& (vÆue)Ë<< 0)

	)

1719 
	#INCA_IP_DMA_DMA_TXWGT
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x08C0))

	)

1720 
	#INCA_IP_DMA_DMA_TXWGT_TX2PR
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 4)

	)

1721 
	#INCA_IP_DMA_DMA_TXWGT_TX1PRI
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 2)

	)

1722 
	#INCA_IP_DMA_DMA_TXWGT_TX0PRI
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 0)

	)

1725 
	#INCA_IP_DMA_DMA_TXPOLL
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x08C4))

	)

1726 
	#INCA_IP_DMA_DMA_TXPOLL_BSZ2
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 30)

	)

1727 
	#INCA_IP_DMA_DMA_TXPOLL_BSZ1
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 28)

	)

1728 
	#INCA_IP_DMA_DMA_TXPOLL_BSZ0
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 26)

	)

1729 
	#INCA_IP_DMA_DMA_TXPOLL_TXPOLLTIME
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

1732 
	#INCA_IP_DMA_DMA_TXISR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x08C8))

	)

1733 
	#INCA_IP_DMA_DMA_TXISR_RDERRx
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 12)

	)

1734 
	#INCA_IP_DMA_DMA_TXISR_HLDx
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 9)

	)

1735 
	#INCA_IP_DMA_DMA_TXISR_CPTx
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 6)

	)

1736 
	#INCA_IP_DMA_DMA_TXISR_EOPx
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 3)

	)

1737 
	#INCA_IP_DMA_DMA_TXISR_CMDCPTx
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 0)

	)

1740 
	#INCA_IP_DMA_DMA_TXIMR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x08CC))

	)

1741 
	#INCA_IP_DMA_DMA_TXIMR_RDERRx
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 12)

	)

1742 
	#INCA_IP_DMA_DMA_TXIMR_HLDx
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 9)

	)

1743 
	#INCA_IP_DMA_DMA_TXIMR_CPTx
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 6)

	)

1744 
	#INCA_IP_DMA_DMA_TXIMR_EOPx
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 3)

	)

1745 
	#INCA_IP_DMA_DMA_TXIMR_CMDCPTx
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 0)

	)

1751 
	#INCA_IP_Debug
 (0xBF106000)

	)

1756 
	#INCA_IP_Debug_MCD_BBS
 ((vﬁ©ûê
u32
*)(
INCA_IP_Debug
+ 0x0000))

	)

1757 
	#INCA_IP_Debug_MCD_BBS_BTP1
 (1 << 19)

	)

1758 
	#INCA_IP_Debug_MCD_BBS_BTP0
 (1 << 18)

	)

1759 
	#INCA_IP_Debug_MCD_BBS_BSP1
 (1 << 17)

	)

1760 
	#INCA_IP_Debug_MCD_BBS_BSP0
 (1 << 16)

	)

1761 
	#INCA_IP_Debug_MCD_BBS_BT5EN
 (1 << 15)

	)

1762 
	#INCA_IP_Debug_MCD_BBS_BT4EN
 (1 << 14)

	)

1763 
	#INCA_IP_Debug_MCD_BBS_BT5
 (1 << 13)

	)

1764 
	#INCA_IP_Debug_MCD_BBS_BT4
 (1 << 12)

	)

1765 
	#INCA_IP_Debug_MCD_BBS_BS5EN
 (1 << 7)

	)

1766 
	#INCA_IP_Debug_MCD_BBS_BS4EN
 (1 << 6)

	)

1767 
	#INCA_IP_Debug_MCD_BBS_BS5
 (1 << 5)

	)

1768 
	#INCA_IP_Debug_MCD_BBS_BS4
 (1 << 4)

	)

1771 
	#INCA_IP_Debug_MCD_MCR
 ((vﬁ©ûê
u32
*)(
INCA_IP_Debug
+ 0x0008))

	)

1772 
	#INCA_IP_Debug_MCD_MCR_MUX5
 (1 << 4)

	)

1773 
	#INCA_IP_Debug_MCD_MCR_MUX4
 (1 << 3)

	)

1774 
	#INCA_IP_Debug_MCD_MCR_MUX1
 (1 << 0)

	)

1780 
	#INCA_IP_TSF
 (0xB8000900)

	)

1785 
	#INCA_IP_TSF_TSF_CONF
 ((vﬁ©ûê
u32
*)(
INCA_IP_TSF
+ 0x0000))

	)

1786 
	#INCA_IP_TSF_TSF_CONF_PWMEN
 (1 << 2)

	)

1787 
	#INCA_IP_TSF_TSF_CONF_LEDEN
 (1 << 1)

	)

1788 
	#INCA_IP_TSF_TSF_CONF_KEYEN
 (1 << 0)

	)

1791 
	#INCA_IP_TSF_KEY_CONF
 ((vﬁ©ûê
u32
*)(
INCA_IP_TSF
+ 0x0004))

	)

1792 
	#INCA_IP_TSF_KEY_CONF_SL
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

1795 
	#INCA_IP_TSF_SREG01
 ((vﬁ©ûê
u32
*)(
INCA_IP_TSF
+ 0x0008))

	)

1796 
	#INCA_IP_TSF_SREG01_RES1x
 (
vÆue
Ë(((–1 << 12Ë- 1Ë& (vÆue)Ë<< 16)

	)

1797 
	#INCA_IP_TSF_SREG01_RES0x
 (
vÆue
Ë(((–1 << 13Ë- 1Ë& (vÆue)Ë<< 0)

	)

1800 
	#INCA_IP_TSF_SREG23
 ((vﬁ©ûê
u32
*)(
INCA_IP_TSF
+ 0x000C))

	)

1801 
	#INCA_IP_TSF_SREG23_RES3x
 (
vÆue
Ë(((–1 << 10Ë- 1Ë& (vÆue)Ë<< 16)

	)

1802 
	#INCA_IP_TSF_SREG23_RES2x
 (
vÆue
Ë(((–1 << 11Ë- 1Ë& (vÆue)Ë<< 0)

	)

1805 
	#INCA_IP_TSF_SREG456
 ((vﬁ©ûê
u32
*)(
INCA_IP_TSF
+ 0x0010))

	)

1806 
	#INCA_IP_TSF_SREG456_RES6x
 (
vÆue
Ë(((–1 << 7Ë- 1Ë& (vÆue)Ë<< 24)

	)

1807 
	#INCA_IP_TSF_SREG456_RES5x
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 16)

	)

1808 
	#INCA_IP_TSF_SREG456_RES4x
 (
vÆue
Ë(((–1 << 9Ë- 1Ë& (vÆue)Ë<< 0)

	)

1811 
	#INCA_IP_TSF_SREG7to12
 ((vﬁ©ûê
u32
*)(
INCA_IP_TSF
+ 0x0014))

	)

1812 
	#INCA_IP_TSF_SREG7to12_RES12x
 (1 << 28)

	)

1813 
	#INCA_IP_TSF_SREG7to12_RES11x
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 24)

	)

1814 
	#INCA_IP_TSF_SREG7to12_RES10x
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 20)

	)

1815 
	#INCA_IP_TSF_SREG7to12_RES9x
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 16)

	)

1816 
	#INCA_IP_TSF_SREG7to12_RES8x
 (
vÆue
Ë(((–1 << 5Ë- 1Ë& (vÆue)Ë<< 8)

	)

1817 
	#INCA_IP_TSF_SREG7to12_RES7x
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 0)

	)

1820 
	#INCA_IP_TSF_LEDMUX_CONF
 ((vﬁ©ûê
u32
*)(
INCA_IP_TSF
+ 0x0018))

	)

1821 
	#INCA_IP_TSF_LEDMUX_CONF_ETL1
 (1 << 25)

	)

1822 
	#INCA_IP_TSF_LEDMUX_CONF_ESTA1
 (1 << 24)

	)

1823 
	#INCA_IP_TSF_LEDMUX_CONF_EDPX1
 (1 << 23)

	)

1824 
	#INCA_IP_TSF_LEDMUX_CONF_EACT1
 (1 << 22)

	)

1825 
	#INCA_IP_TSF_LEDMUX_CONF_ESPD1
 (1 << 21)

	)

1826 
	#INCA_IP_TSF_LEDMUX_CONF_ETL0
 (1 << 20)

	)

1827 
	#INCA_IP_TSF_LEDMUX_CONF_ESTA0
 (1 << 19)

	)

1828 
	#INCA_IP_TSF_LEDMUX_CONF_EDPX0
 (1 << 18)

	)

1829 
	#INCA_IP_TSF_LEDMUX_CONF_EACT0
 (1 << 17)

	)

1830 
	#INCA_IP_TSF_LEDMUX_CONF_ESPD0
 (1 << 16)

	)

1831 
	#INCA_IP_TSF_LEDMUX_CONF_INV
 (1 << 1)

	)

1832 
	#INCA_IP_TSF_LEDMUX_CONF_NCOL
 (1 << 0)

	)

1835 
	#INCA_IP_TSF_LED_REG
 ((vﬁ©ûê
u32
*)(
INCA_IP_TSF
+ 0x001C))

	)

1836 
	#INCA_IP_TSF_LED_REG_Lxy
 (
vÆue
Ë(((–1 << 24Ë- 1Ë& (vÆue)Ë<< 0)

	)

1839 
	#INCA_IP_TSF_PWM12
 ((vﬁ©ûê
u32
*)(
INCA_IP_TSF
+ 0x0020))

	)

1840 
	#INCA_IP_TSF_PWM12_PW2PW1
 (
vÆue
Ë(((–1 << 
NaN
Ë- 1Ë& (vÆue)Ë<< NaN)

	)

1846 
	#INCA_IP_P‹ts
 (0xB8000A00)

	)

1851 
	#INCA_IP_P‹ts_P1_OUT
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x0020))

	)

1852 
	#INCA_IP_P‹ts_P1_OUT_P
(
vÆue
Ë(1 << vÆue)

	)

1856 
	#INCA_IP_P‹ts_P2_OUT
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x0040))

	)

1857 
	#INCA_IP_P‹ts_P2_OUT_P
(
vÆue
Ë(1 << vÆue)

	)

1861 
	#INCA_IP_P‹ts_P1_IN
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x0024))

	)

1862 
	#INCA_IP_P‹ts_P1_IN_P
(
vÆue
Ë(1 << vÆue)

	)

1866 
	#INCA_IP_P‹ts_P2_IN
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x0044))

	)

1867 
	#INCA_IP_P‹ts_P2_IN_P
(
vÆue
Ë(1 << vÆue)

	)

1871 
	#INCA_IP_P‹ts_P1_DIR
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x0028))

	)

1872 
	#INCA_IP_P‹ts_P1_DIR_P‹t1P
(
vÆue
Ë(1 << vÆue)

	)

1874 
	#INCA_IP_P‹ts_P1_DIR_P‹t2Pn
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

1877 
	#INCA_IP_P‹ts_P2_DIR
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x0048))

	)

1878 
	#INCA_IP_P‹ts_P2_DIR_P‹t1P
(
vÆue
Ë(1 << vÆue)

	)

1880 
	#INCA_IP_P‹ts_P2_DIR_P‹t2Pn
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

1884 
	#INCA_IP_P‹ts_P0_ALTSEL
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x000C))

	)

1885 
	#INCA_IP_P‹ts_P0_ALTSEL_P‹t0P
(
vÆue
Ë(1 << vÆue)

	)

1890 
	#INCA_IP_P‹ts_P1_ALTSEL
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x002C))

	)

1891 
	#INCA_IP_P‹ts_P1_ALTSEL_P‹t1P
(
vÆue
Ë(1 << vÆue)

	)

1893 
	#INCA_IP_P‹ts_P1_ALTSEL_P‹t2P
(
vÆue
Ë(1 << vÆue)

	)

1898 
	#INCA_IP_P‹ts_P2_ALTSEL
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x004C))

	)

1899 
	#INCA_IP_P‹ts_P2_ALTSEL_P‹t1P
(
vÆue
Ë(1 << vÆue)

	)

1901 
	#INCA_IP_P‹ts_P2_ALTSEL_P‹t2P
(
vÆue
Ë(1 << vÆue)

	)

1906 
	#INCA_IP_P‹ts_P0_STOFF
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x0010))

	)

1907 
	#INCA_IP_P‹ts_P0_STOFF_P‹t0P
(
vÆue
Ë(1 << vÆue)

	)

1912 
	#INCA_IP_P‹ts_P1_STOFF
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x0030))

	)

1913 
	#INCA_IP_P‹ts_P1_STOFF_P‹t1P
(
vÆue
Ë(1 << vÆue)

	)

1915 
	#INCA_IP_P‹ts_P1_STOFF_P‹t2P
(
vÆue
Ë(1 << vÆue)

	)

1920 
	#INCA_IP_P‹ts_P2_STOFF
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x0050))

	)

1921 
	#INCA_IP_P‹ts_P2_STOFF_P‹t1P
(
vÆue
Ë(1 << vÆue)

	)

1923 
	#INCA_IP_P‹ts_P2_STOFF_P‹t2P
(
vÆue
Ë(1 << vÆue)

	)

1927 
	#INCA_IP_P‹ts_P2_OD
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x0054))

	)

1928 
	#INCA_IP_P‹ts_P2_OD_P‹t2P
(
vÆue
Ë(1 << vÆue)

	)

1932 
	#INCA_IP_P‹ts_P0_PUDEN
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x0018))

	)

1933 
	#INCA_IP_P‹ts_P0_PUDEN_P‹t0P
(
vÆue
Ë(1 << vÆue)

	)

1937 
	#INCA_IP_P‹ts_P2_PUDEN
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x0058))

	)

1938 
	#INCA_IP_P‹ts_P2_PUDEN_P‹t2P
(
vÆue
Ë(1 << vÆue)

	)

1940 
	#INCA_IP_P‹ts_P2_PUDEN_P‹t2P
(
vÆue
Ë(1 << vÆue)

	)

1944 
	#INCA_IP_P‹ts_P0_PUDSEL
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x001C))

	)

1945 
	#INCA_IP_P‹ts_P0_PUDSEL_P‹t0P
(
vÆue
Ë(1 << vÆue)

	)

1949 
	#INCA_IP_P‹ts_P2_PUDSEL
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x005C))

	)

1950 
	#INCA_IP_P‹ts_P2_PUDSEL_P‹t2P
(
vÆue
Ë(1 << vÆue)

	)

1952 
	#INCA_IP_P‹ts_P2_PUDSEL_P‹t2P
(
vÆue
Ë(1 << vÆue)

	)

1959 
	#INCA_IP_DES_3DES
 (0xB8000800)

	)

1964 
	#INCA_IP_DES_3DES_DES_IHR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DES_3DES
+ 0x0000))

	)

1965 
	#INCA_IP_DES_3DES_DES_IHR_IH
(
vÆue
Ë(1 << vÆue)

	)

1969 
	#INCA_IP_DES_3DES_DES_ILR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DES_3DES
+ 0x0004))

	)

1970 
	#INCA_IP_DES_3DES_DES_ILR_IL
(
vÆue
Ë(1 << vÆue)

	)

1974 
	#INCA_IP_DES_3DES_DES_K1HR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DES_3DES
+ 0x0008))

	)

1975 
	#INCA_IP_DES_3DES_DES_K1HR_K1H
(
vÆue
Ë(1 << vÆue)

	)

1979 
	#INCA_IP_DES_3DES_DES_K1LR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DES_3DES
+ 0x000C))

	)

1980 
	#INCA_IP_DES_3DES_DES_K1LR_K1L
(
vÆue
Ë(1 << vÆue)

	)

1984 
	#INCA_IP_DES_3DES_DES_K2HR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DES_3DES
+ 0x0010))

	)

1985 
	#INCA_IP_DES_3DES_DES_K2HR_K2H
(
vÆue
Ë(1 << vÆue)

	)

1989 
	#INCA_IP_DES_3DES_DES_K2LR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DES_3DES
+ 0x0014))

	)

1990 
	#INCA_IP_DES_3DES_DES_K2LR_K2L
(
vÆue
Ë(1 << vÆue)

	)

1994 
	#INCA_IP_DES_3DES_DES_K3HR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DES_3DES
+ 0x0018))

	)

1995 
	#INCA_IP_DES_3DES_DES_K3HR_K3H
(
vÆue
Ë(1 << vÆue)

	)

1999 
	#INCA_IP_DES_3DES_DES_K3LR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DES_3DES
+ 0x001C))

	)

2000 
	#INCA_IP_DES_3DES_DES_K3LR_K3L
(
vÆue
Ë(1 << vÆue)

	)

2004 
	#INCA_IP_DES_3DES_DES_IVHR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DES_3DES
+ 0x0020))

	)

2005 
	#INCA_IP_DES_3DES_DES_IVHR_IVH
(
vÆue
Ë(1 << vÆue)

	)

2009 
	#INCA_IP_DES_3DES_DES_IVLR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DES_3DES
+ 0x0024))

	)

2010 
	#INCA_IP_DES_3DES_DES_IVLR_IVL
(
vÆue
Ë(1 << vÆue)

	)

2014 
	#INCA_IP_DES_3DES_DES_CONTROLR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DES_3DES
+ 0x0028))

	)

2015 
	#INCA_IP_DES_3DES_DES_CONTROLR_KRE
 (1 << 31)

	)

2016 
	#INCA_IP_DES_3DES_DES_CONTROLR_DAU
 (1 << 16)

	)

2017 
	#INCA_IP_DES_3DES_DES_CONTROLR_F
(
vÆue
Ë(1 << vÆue)

	)

2019 
	#INCA_IP_DES_3DES_DES_CONTROLR_O
(
vÆue
Ë(1 << vÆue)

	)

2021 
	#INCA_IP_DES_3DES_DES_CONTROLR_GO
 (1 << 8)

	)

2022 
	#INCA_IP_DES_3DES_DES_CONTROLR_STP
 (1 << 7)

	)

2023 
	#INCA_IP_DES_3DES_DES_CONTROLR_IEN
 (1 << 6)

	)

2024 
	#INCA_IP_DES_3DES_DES_CONTROLR_BUS
 (1 << 5)

	)

2025 
	#INCA_IP_DES_3DES_DES_CONTROLR_SM
 (1 << 4)

	)

2026 
	#INCA_IP_DES_3DES_DES_CONTROLR_E_D
 (1 << 3)

	)

2027 
	#INCA_IP_DES_3DES_DES_CONTROLR_M
(
vÆue
Ë(1 << vÆue)

	)

2031 
	#INCA_IP_DES_3DES_DES_OHR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DES_3DES
+ 0x002C))

	)

2032 
	#INCA_IP_DES_3DES_DES_OHR_OH
(
vÆue
Ë(1 << vÆue)

	)

2036 
	#INCA_IP_DES_3DES_DES_OLR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DES_3DES
+ 0x0030))

	)

2037 
	#INCA_IP_DES_3DES_DES_OLR_OL
(
vÆue
Ë(1 << vÆue)

	)

2044 
	#INCA_IP_AES
 (0xB8000880)

	)

2049 
	#INCA_IP_AES_AES_ID3R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2050 
	#INCA_IP_AES_AES_ID3R_I
(
vÆue
Ë(1 << vÆue)

	)

2054 
	#INCA_IP_AES_AES_ID2R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2055 
	#INCA_IP_AES_AES_ID2R_I
(
vÆue
Ë(1 << vÆue)

	)

2059 
	#INCA_IP_AES_AES_ID1R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2060 
	#INCA_IP_AES_AES_ID1R_I
(
vÆue
Ë(1 << vÆue)

	)

2064 
	#INCA_IP_AES_AES_ID0R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2065 
	#INCA_IP_AES_AES_ID0R_I
(
vÆue
Ë(1 << vÆue)

	)

2069 
	#INCA_IP_AES_AES_OD3R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2070 
	#INCA_IP_AES_AES_OD3R_O
(
vÆue
Ë(1 << vÆue)

	)

2074 
	#INCA_IP_AES_AES_OD2R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2075 
	#INCA_IP_AES_AES_OD2R_O
(
vÆue
Ë(1 << vÆue)

	)

2079 
	#INCA_IP_AES_AES_OD1R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2080 
	#INCA_IP_AES_AES_OD1R_O
(
vÆue
Ë(1 << vÆue)

	)

2084 
	#INCA_IP_AES_AES_OD0R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2085 
	#INCA_IP_AES_AES_OD0R_O
(
vÆue
Ë(1 << vÆue)

	)

2089 
	#INCA_IP_AES_AES_K7R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2090 
	#INCA_IP_AES_AES_K7R_K
(
vÆue
Ë(1 << vÆue)

	)

2094 
	#INCA_IP_AES_AES_K6R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2095 
	#INCA_IP_AES_AES_K6R_K
(
vÆue
Ë(1 << vÆue)

	)

2099 
	#INCA_IP_AES_AES_K5R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2100 
	#INCA_IP_AES_AES_K5R_K
(
vÆue
Ë(1 << vÆue)

	)

2104 
	#INCA_IP_AES_AES_K4R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2105 
	#INCA_IP_AES_AES_K4R_K
(
vÆue
Ë(1 << vÆue)

	)

2109 
	#INCA_IP_AES_AES_K3R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2110 
	#INCA_IP_AES_AES_K3R_K
(
vÆue
Ë(1 << vÆue)

	)

2114 
	#INCA_IP_AES_AES_K2R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2115 
	#INCA_IP_AES_AES_K2R_K
(
vÆue
Ë(1 << vÆue)

	)

2119 
	#INCA_IP_AES_AES_K1R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2120 
	#INCA_IP_AES_AES_K1R_K
(
vÆue
Ë(1 << vÆue)

	)

2124 
	#INCA_IP_AES_AES_K0R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2125 
	#INCA_IP_AES_AES_K0R_K
(
vÆue
Ë(1 << vÆue)

	)

2129 
	#INCA_IP_AES_AES_IV3R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2130 
	#INCA_IP_AES_AES_IV3R_IV
(
vÆue
Ë(1 << vÆue)

	)

2134 
	#INCA_IP_AES_AES_IV2R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2135 
	#INCA_IP_AES_AES_IV2R_IV
(
vÆue
Ë(1 << vÆue)

	)

2139 
	#INCA_IP_AES_AES_IV1R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2140 
	#INCA_IP_AES_AES_IV1R_IV
(
vÆue
Ë(1 << vÆue)

	)

2144 
	#INCA_IP_AES_AES_IV0R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2145 
	#INCA_IP_AES_AES_IV0R_IV
 (
vÆue
Ë(((–1 << 32Ë- 1Ë&(vÆue)Ë<< 0)

	)

2148 
	#INCA_IP_AES_AES_CONTROLR
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2149 
	#INCA_IP_AES_AES_CONTROLR_KRE
 (1 << 31)

	)

2150 
	#INCA_IP_AES_AES_CONTROLR_DAU
 (1 << 16)

	)

2151 
	#INCA_IP_AES_AES_CONTROLR_PNK
 (1 << 15)

	)

2152 
	#INCA_IP_AES_AES_CONTROLR_F
(
vÆue
Ë(1 << vÆue)

	)

2154 
	#INCA_IP_AES_AES_CONTROLR_O
(
vÆue
Ë(1 << vÆue)

	)

2156 
	#INCA_IP_AES_AES_CONTROLR_GO
 (1 << 8)

	)

2157 
	#INCA_IP_AES_AES_CONTROLR_STP
 (1 << 7)

	)

2158 
	#INCA_IP_AES_AES_CONTROLR_IEN
 (1 << 6)

	)

2159 
	#INCA_IP_AES_AES_CONTROLR_BUS
 (1 << 5)

	)

2160 
	#INCA_IP_AES_AES_CONTROLR_SM
 (1 << 4)

	)

2161 
	#INCA_IP_AES_AES_CONTROLR_E_D
 (1 << 3)

	)

2162 
	#INCA_IP_AES_AES_CONTROLR_KV
 (1 << 2)

	)

2163 
	#INCA_IP_AES_AES_CONTROLR_K
(
vÆue
Ë(1 << vÆue)

	)

2170 
	#INCA_IP_IIC
 (0xB8000700)

	)

2175 
	#INCA_IP_IIC_IIC_PISEL
 ((vﬁ©ûê
u32
*)(
INCA_IP_IIC
+ 0x0004))

	)

2176 
	#INCA_IP_IIC_IIC_PISEL_SDAIS
(
vÆue
Ë(1 << vÆue)

	)

2178 
	#INCA_IP_IIC_IIC_PISEL_SCLIS
(
vÆue
Ë(1 << vÆue)

	)

2182 
	#INCA_IP_IIC_IIC_CLC
 ((vﬁ©ûê
u32
*)(
INCA_IP_IIC
+ 0x0000))

	)

2183 
	#INCA_IP_IIC_IIC_CLC_RMC
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 8)

	)

2184 
	#INCA_IP_IIC_IIC_CLC_DISS
 (1 << 1)

	)

2185 
	#INCA_IP_IIC_IIC_CLC_DISR
 (1 << 0)

	)

2188 
	#INCA_IP_IIC_IIC_SYSCON_0
 ((vﬁ©ûê
u32
*)(
INCA_IP_IIC
+ 0x0010))

	)

2189 
	#INCA_IP_IIC_IIC_SYSCON_0_WMEN
 (1 << 31)

	)

2190 
	#INCA_IP_IIC_IIC_SYSCON_0_CI
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 26)

	)

2191 
	#INCA_IP_IIC_IIC_SYSCON_0_STP
 (1 << 25)

	)

2192 
	#INCA_IP_IIC_IIC_SYSCON_0_IGE
 (1 << 24)

	)

2193 
	#INCA_IP_IIC_IIC_SYSCON_0_TRX
 (1 << 23)

	)

2194 
	#INCA_IP_IIC_IIC_SYSCON_0_INT
 (1 << 22)

	)

2195 
	#INCA_IP_IIC_IIC_SYSCON_0_ACKDIS
 (1 << 21)

	)

2196 
	#INCA_IP_IIC_IIC_SYSCON_0_BUM
 (1 << 20)

	)

2197 
	#INCA_IP_IIC_IIC_SYSCON_0_MOD
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 18)

	)

2198 
	#INCA_IP_IIC_IIC_SYSCON_0_RSC
 (1 << 17)

	)

2199 
	#INCA_IP_IIC_IIC_SYSCON_0_M10
 (1 << 16)

	)

2200 
	#INCA_IP_IIC_IIC_SYSCON_0_RMEN
 (1 << 15)

	)

2201 
	#INCA_IP_IIC_IIC_SYSCON_0_CO
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 8)

	)

2202 
	#INCA_IP_IIC_IIC_SYSCON_0_IRQE
 (1 << 7)

	)

2203 
	#INCA_IP_IIC_IIC_SYSCON_0_IRQP
 (1 << 6)

	)

2204 
	#INCA_IP_IIC_IIC_SYSCON_0_IRQD
 (1 << 5)

	)

2205 
	#INCA_IP_IIC_IIC_SYSCON_0_BB
 (1 << 4)

	)

2206 
	#INCA_IP_IIC_IIC_SYSCON_0_LRB
 (1 << 3)

	)

2207 
	#INCA_IP_IIC_IIC_SYSCON_0_SLA
 (1 << 2)

	)

2208 
	#INCA_IP_IIC_IIC_SYSCON_0_AL
 (1 << 1)

	)

2209 
	#INCA_IP_IIC_IIC_SYSCON_0_ADR
 (1 << 0)

	)

2212 
	#INCA_IP_IIC_IIC_SYSCON_1
 ((vﬁ©ûê
u32
*)(
INCA_IP_IIC
+ 0x0010))

	)

2213 
	#INCA_IP_IIC_IIC_SYSCON_1_RM
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 24)

	)

2214 
	#INCA_IP_IIC_IIC_SYSCON_1_TRX
 (1 << 23)

	)

2215 
	#INCA_IP_IIC_IIC_SYSCON_1_INT
 (1 << 22)

	)

2216 
	#INCA_IP_IIC_IIC_SYSCON_1_ACKDIS
 (1 << 21)

	)

2217 
	#INCA_IP_IIC_IIC_SYSCON_1_BUM
 (1 << 20)

	)

2218 
	#INCA_IP_IIC_IIC_SYSCON_1_MOD
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 18)

	)

2219 
	#INCA_IP_IIC_IIC_SYSCON_1_RSC
 (1 << 17)

	)

2220 
	#INCA_IP_IIC_IIC_SYSCON_1_M10
 (1 << 16)

	)

2221 
	#INCA_IP_IIC_IIC_SYSCON_1_RMEN
 (1 << 15)

	)

2222 
	#INCA_IP_IIC_IIC_SYSCON_1_CO
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 8)

	)

2223 
	#INCA_IP_IIC_IIC_SYSCON_1_IRQE
 (1 << 7)

	)

2224 
	#INCA_IP_IIC_IIC_SYSCON_1_IRQP
 (1 << 6)

	)

2225 
	#INCA_IP_IIC_IIC_SYSCON_1_IRQD
 (1 << 5)

	)

2226 
	#INCA_IP_IIC_IIC_SYSCON_1_BB
 (1 << 4)

	)

2227 
	#INCA_IP_IIC_IIC_SYSCON_1_LRB
 (1 << 3)

	)

2228 
	#INCA_IP_IIC_IIC_SYSCON_1_SLA
 (1 << 2)

	)

2229 
	#INCA_IP_IIC_IIC_SYSCON_1_AL
 (1 << 1)

	)

2230 
	#INCA_IP_IIC_IIC_SYSCON_1_ADR
 (1 << 0)

	)

2233 
	#INCA_IP_IIC_IIC_SYSCON_2
 ((vﬁ©ûê
u32
*)(
INCA_IP_IIC
+ 0x0010))

	)

2234 
	#INCA_IP_IIC_IIC_SYSCON_2_WMEN
 (1 << 31)

	)

2235 
	#INCA_IP_IIC_IIC_SYSCON_2_CI
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 26)

	)

2236 
	#INCA_IP_IIC_IIC_SYSCON_2_STP
 (1 << 25)

	)

2237 
	#INCA_IP_IIC_IIC_SYSCON_2_IGE
 (1 << 24)

	)

2238 
	#INCA_IP_IIC_IIC_SYSCON_2_TRX
 (1 << 23)

	)

2239 
	#INCA_IP_IIC_IIC_SYSCON_2_INT
 (1 << 22)

	)

2240 
	#INCA_IP_IIC_IIC_SYSCON_2_ACKDIS
 (1 << 21)

	)

2241 
	#INCA_IP_IIC_IIC_SYSCON_2_BUM
 (1 << 20)

	)

2242 
	#INCA_IP_IIC_IIC_SYSCON_2_MOD
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 18)

	)

2243 
	#INCA_IP_IIC_IIC_SYSCON_2_RSC
 (1 << 17)

	)

2244 
	#INCA_IP_IIC_IIC_SYSCON_2_M10
 (1 << 16)

	)

2245 
	#INCA_IP_IIC_IIC_SYSCON_2_WM
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 8)

	)

2246 
	#INCA_IP_IIC_IIC_SYSCON_2_IRQE
 (1 << 7)

	)

2247 
	#INCA_IP_IIC_IIC_SYSCON_2_IRQP
 (1 << 6)

	)

2248 
	#INCA_IP_IIC_IIC_SYSCON_2_IRQD
 (1 << 5)

	)

2249 
	#INCA_IP_IIC_IIC_SYSCON_2_BB
 (1 << 4)

	)

2250 
	#INCA_IP_IIC_IIC_SYSCON_2_LRB
 (1 << 3)

	)

2251 
	#INCA_IP_IIC_IIC_SYSCON_2_SLA
 (1 << 2)

	)

2252 
	#INCA_IP_IIC_IIC_SYSCON_2_AL
 (1 << 1)

	)

2253 
	#INCA_IP_IIC_IIC_SYSCON_2_ADR
 (1 << 0)

	)

2257 
	#INCA_IP_IIC_IIC_WHBSYSCON
 ((vﬁ©ûê
u32
*)(
INCA_IP_IIC
+ 0x0020))

	)

2258 
	#INCA_IP_IIC_IIC_WHBSYSCON_CLRWMEN
 (1 << 31)

	)

2259 
	#INCA_IP_IIC_IIC_WHBSYSCON_SETWMEN
 (1 << 30)

	)

2260 
	#INCA_IP_IIC_IIC_WHBSYSCON_SETSTP
 (1 << 26)

	)

2261 
	#INCA_IP_IIC_IIC_WHBSYSCON_CLRSTP
 (1 << 25)

	)

2262 
	#INCA_IP_IIC_IIC_WHBSYSCON_SETTRX
 (1 << 24)

	)

2263 
	#INCA_IP_IIC_IIC_WHBSYSCON_CLRTRX
 (1 << 23)

	)

2264 
	#INCA_IP_IIC_IIC_WHBSYSCON_SETACKDIS
 (1 << 22)

	)

2265 
	#INCA_IP_IIC_IIC_WHBSYSCON_CLRACKDIS
 (1 << 21)

	)

2266 
	#INCA_IP_IIC_IIC_WHBSYSCON_SETBUM
 (1 << 20)

	)

2267 
	#INCA_IP_IIC_IIC_WHBSYSCON_CLRBUM
 (1 << 19)

	)

2268 
	#INCA_IP_IIC_IIC_WHBSYSCON_SETRSC
 (1 << 17)

	)

2269 
	#INCA_IP_IIC_IIC_WHBSYSCON_CLRRSC
 (1 << 16)

	)

2270 
	#INCA_IP_IIC_IIC_WHBSYSCON_SETRMEN
 (1 << 15)

	)

2271 
	#INCA_IP_IIC_IIC_WHBSYSCON_CLRRMEN
 (1 << 14)

	)

2272 
	#INCA_IP_IIC_IIC_WHBSYSCON_SETIRQE
 (1 << 10)

	)

2273 
	#INCA_IP_IIC_IIC_WHBSYSCON_SETIRQP
 (1 << 9)

	)

2274 
	#INCA_IP_IIC_IIC_WHBSYSCON_SETIRQD
 (1 << 8)

	)

2275 
	#INCA_IP_IIC_IIC_WHBSYSCON_CLRIRQE
 (1 << 7)

	)

2276 
	#INCA_IP_IIC_IIC_WHBSYSCON_CLRIRQP
 (1 << 6)

	)

2277 
	#INCA_IP_IIC_IIC_WHBSYSCON_CLRIRQD
 (1 << 5)

	)

2278 
	#INCA_IP_IIC_IIC_WHBSYSCON_SETAL
 (1 << 2)

	)

2279 
	#INCA_IP_IIC_IIC_WHBSYSCON_CLRAL
 (1 << 1)

	)

2282 
	#INCA_IP_IIC_IIC_BUSCON_0
 ((vﬁ©ûê
u32
*)(
INCA_IP_IIC
+ 0x0014))

	)

2283 
	#INCA_IP_IIC_IIC_BUSCON_0_BRPMOD
 (1 << 31)

	)

2284 
	#INCA_IP_IIC_IIC_BUSCON_0_PREDIV
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 29)

	)

2285 
	#INCA_IP_IIC_IIC_BUSCON_0_ICA9_0
 (
vÆue
Ë(((–1 << 10Ë- 1Ë& (vÆue)Ë<< 16)

	)

2286 
	#INCA_IP_IIC_IIC_BUSCON_0_BRP
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 8)

	)

2287 
	#INCA_IP_IIC_IIC_BUSCON_0_SCLEN
(
vÆue
Ë(1 << vÆue)

	)

2289 
	#INCA_IP_IIC_IIC_BUSCON_0_SDAEN
(
vÆue
Ë(1 << vÆue)

	)

2293 
	#INCA_IP_IIC_IIC_BUSCON_1
 ((vﬁ©ûê
u32
*)(
INCA_IP_IIC
+ 0x0014))

	)

2294 
	#INCA_IP_IIC_IIC_BUSCON_1_BRPMOD
 (1 << 31)

	)

2295 
	#INCA_IP_IIC_IIC_BUSCON_1_PREDIV
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 29)

	)

2296 
	#INCA_IP_IIC_IIC_BUSCON_1_ICA7_1
 (
vÆue
Ë(((–1 << 7Ë- 1Ë& (vÆue)Ë<< 17)

	)

2297 
	#INCA_IP_IIC_IIC_BUSCON_1_BRP
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 8)

	)

2298 
	#INCA_IP_IIC_IIC_BUSCON_1_SCLEN
(
vÆue
Ë(1 << vÆue)

	)

2300 
	#INCA_IP_IIC_IIC_BUSCON_1_SDAEN
(
vÆue
Ë(1 << vÆue)

	)

2304 
	#INCA_IP_IIC_IIC_RTB
 ((vﬁ©ûê
u32
*)(
INCA_IP_IIC
+ 0x0018))

	)

2305 
	#INCA_IP_IIC_IIC_RTB_RTB
(
vÆue
Ë(1 << vÆue)

	)

2312 
	#INCA_IP_FB
 (0xBF880000)

	)

2317 
	#INCA_IP_FB_FB_ERRCAUSE
 ((vﬁ©ûê
u32
*)(
INCA_IP_FB
+ 0x0100))

	)

2318 
	#INCA_IP_FB_FB_ERRCAUSE_ERR
 (1 << 31)

	)

2319 
	#INCA_IP_FB_FB_ERRCAUSE_PORT
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 16)

	)

2320 
	#INCA_IP_FB_FB_ERRCAUSE_CAUSE
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 0)

	)

2323 
	#INCA_IP_FB_FB_ERRADDR
 ((vﬁ©ûê
u32
*)(
INCA_IP_FB
+ 0x0108))

	)

2324 
	#INCA_IP_FB_FB_ERRADDR_ADDR


	)

2327 
	#INCA_IP_FB_FB_CFG
 ((vﬁ©ûê
u32
*)(
INCA_IP_FB
+ 0x0800))

	)

2328 
	#INCA_IP_FB_FB_CFG_SVM
 (1 << 0)

	)

2334 
	#INCA_IP_SRAM
 (0xBF980000)

	)

2339 
	#INCA_IP_SRAM_SRAM_SIZE
 ((vﬁ©ûê
u32
*)(
INCA_IP_SRAM
+ 0x0800))

	)

2340 
	#INCA_IP_SRAM_SRAM_SIZE_SIZE
 (
vÆue
Ë(((–1 << 23Ë- 1Ë& (vÆue)Ë<< 0)

	)

2346 
	#INCA_IP_BIU
 (0xBFA80000)

	)

2351 
	#INCA_IP_BIU_BIU_ID
 ((vﬁ©ûê
u32
*)(
INCA_IP_BIU
+ 0x0000))

	)

2352 
	#INCA_IP_BIU_BIU_ID_ARCH
 (1 << 16)

	)

2353 
	#INCA_IP_BIU_BIU_ID_ID
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 8)

	)

2354 
	#INCA_IP_BIU_BIU_ID_REV
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

2357 
	#INCA_IP_BIU_BIU_ERRCAUSE
 ((vﬁ©ûê
u32
*)(
INCA_IP_BIU
+ 0x0100))

	)

2358 
	#INCA_IP_BIU_BIU_ERRCAUSE_ERR
 (1 << 31)

	)

2359 
	#INCA_IP_BIU_BIU_ERRCAUSE_PORT
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 16)

	)

2360 
	#INCA_IP_BIU_BIU_ERRCAUSE_CAUSE
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 0)

	)

2363 
	#INCA_IP_BIU_BIU_ERRADDR
 ((vﬁ©ûê
u32
*)(
INCA_IP_BIU
+ 0x0108))

	)

2364 
	#INCA_IP_BIU_BIU_ERRADDR_ADDR


	)

2370 
	#INCA_IP_ICU
 (0xBF101000)

	)

2375 
	#INCA_IP_ICU_IM0_ISR
 ((vﬁ©ûê
u32
*)(
INCA_IP_ICU
+ 0x0000))

	)

2376 
	#INCA_IP_ICU_IM0_ISR_IR
(
vÆue
Ë(1 << vÆue)

	)

2380 
	#INCA_IP_ICU_IM1_ISR
 ((vﬁ©ûê
u32
*)(
INCA_IP_ICU
+ 0x0200))

	)

2381 
	#INCA_IP_ICU_IM1_ISR_IR
(
vÆue
Ë(1 << vÆue)

	)

2385 
	#INCA_IP_ICU_IM2_ISR
 ((vﬁ©ûê
u32
*)(
INCA_IP_ICU
+ 0x0400))

	)

2386 
	#INCA_IP_ICU_IM2_ISR_IR
(
vÆue
Ë(1 << vÆue)

	)

2390 
	#INCA_IP_ICU_IM0_IER
 ((vﬁ©ûê
u32
*)(
INCA_IP_ICU
+ 0x0008))

	)

2391 
	#INCA_IP_ICU_IM0_IER_IR
(
vÆue
Ë(1 << vÆue)

	)

2395 
	#INCA_IP_ICU_IM1_IER
 ((vﬁ©ûê
u32
*)(
INCA_IP_ICU
+ 0x0208))

	)

2396 
	#INCA_IP_ICU_IM1_IER_IR
(
vÆue
Ë(1 << vÆue)

	)

2400 
	#INCA_IP_ICU_IM2_IER
 ((vﬁ©ûê
u32
*)(
INCA_IP_ICU
+ 0x0408))

	)

2401 
	#INCA_IP_ICU_IM2_IER_IR
(
vÆue
Ë(1 << vÆue)

	)

2405 
	#INCA_IP_ICU_IM0_IOSR
 ((vﬁ©ûê
u32
*)(
INCA_IP_ICU
+ 0x0010))

	)

2406 
	#INCA_IP_ICU_IM0_IOSR_IR
(
vÆue
Ë(1 << vÆue)

	)

2410 
	#INCA_IP_ICU_IM1_IOSR
 ((vﬁ©ûê
u32
*)(
INCA_IP_ICU
+ 0x0210))

	)

2411 
	#INCA_IP_ICU_IM1_IOSR_IR
(
vÆue
Ë(1 << vÆue)

	)

2415 
	#INCA_IP_ICU_IM2_IOSR
 ((vﬁ©ûê
u32
*)(
INCA_IP_ICU
+ 0x0410))

	)

2416 
	#INCA_IP_ICU_IM2_IOSR_IR
(
vÆue
Ë(1 << vÆue)

	)

2420 
	#INCA_IP_ICU_IM0_IRSR
 ((vﬁ©ûê
u32
*)(
INCA_IP_ICU
+ 0x0018))

	)

2421 
	#INCA_IP_ICU_IM0_IRSR_IR
(
vÆue
Ë(1 << vÆue)

	)

2425 
	#INCA_IP_ICU_IM1_IRSR
 ((vﬁ©ûê
u32
*)(
INCA_IP_ICU
+ 0x0218))

	)

2426 
	#INCA_IP_ICU_IM1_IRSR_IR
(
vÆue
Ë(1 << vÆue)

	)

2430 
	#INCA_IP_ICU_IM2_IRSR
 ((vﬁ©ûê
u32
*)(
INCA_IP_ICU
+ 0x0418))

	)

2431 
	#INCA_IP_ICU_IM2_IRSR_IR
(
vÆue
Ë(1 << vÆue)

	)

2435 
	#INCA_IP_ICU_ICU_EICR
 ((vﬁ©ûê
u32
*)(
INCA_IP_ICU
+ 0x0B00))

	)

2436 
	#INCA_IP_ICU_ICU_EICR_EII5
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 20)

	)

2437 
	#INCA_IP_ICU_ICU_EICR_EII4
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 16)

	)

2438 
	#INCA_IP_ICU_ICU_EICR_EII3
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 12)

	)

2439 
	#INCA_IP_ICU_ICU_EICR_EII2
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 8)

	)

2440 
	#INCA_IP_ICU_ICU_EICR_EII1
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 4)

	)

2441 
	#INCA_IP_ICU_ICU_EICR_EII0
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 0)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/io.h

11 #i‚de‡
_ASM_IO_H


12 
	#_ASM_IO_H


	)

14 
	~<löux/c⁄fig.h
>

16 
	~<löux/∑gem≠.h
>

18 
	~<asm/addr•a˚.h
>

19 
	~<asm/byã‹dî.h
>

24 #unde‡
CONF_SLOWDOWN_IO


30 #i‡
deföed
(
CONFIG_SWAP_IO_SPACE
Ë&& deföed(
__MIPSEB__
)

32 
	#__ioswab8
(
x
Ë(x)

	)

33 
	#__ioswab16
(
x
Ë
	`swab16
(x)

	)

34 
	#__ioswab32
(
x
Ë
	`swab32
(x)

	)

38 
	#__ioswab8
(
x
Ë(x)

	)

39 
	#__ioswab16
(
x
Ë(x)

	)

40 
	#__ioswab32
(
x
Ë(x)

	)

74 
mùs_io_p‹t_ba£
;

88 
	#__SLOW_DOWN_IO
 \

89 
__asm__
 
	`__vﬁ©ûe__
( \

91 : : "r" (
mùs_io_p‹t_ba£
));

	)

93 #ifde‡
CONF_SLOWDOWN_IO


94 #ifde‡
REALLY_SLOW_IO


95 
	#SLOW_DOWN_IO
 { 
__SLOW_DOWN_IO
; __SLOW_DOWN_IO; __SLOW_DOWN_IO; __SLOW_DOWN_IO; }

	)

97 
	#SLOW_DOWN_IO
 
__SLOW_DOWN_IO


	)

100 
	#SLOW_DOWN_IO


	)

107 
ölöe
 
	$vút_to_phys
(vﬁ©ûê* 
addªss
)

109  
	`PHYSADDR
(
addªss
);

110 
	}
}

112 
ölöe
 * 
	$phys_to_vút
(
addªss
)

114  (*)
	`KSEG0ADDR
(
addªss
);

115 
	}
}

120 
ölöe
 
	$vút_to_bus
(vﬁ©ûê* 
addªss
)

122  
	`PHYSADDR
(
addªss
);

123 
	}
}

125 
ölöe
 * 
	$bus_to_vút
(
addªss
)

127  (*)
	`KSEG0ADDR
(
addªss
);

128 
	}
}

134 
iß_¶Ÿ_off£t
;

136 * 
__i‹em≠
(
off£t
, 
size
, 
Êags
);

139 
ölöe
 *
	$i‹em≠
(
off£t
, 
size
)

141  
	`__i‹em≠
(
off£t
, 
size
, 
_CACHE_UNCACHED
);

142 
	}
}

144 
ölöe
 *
	$i‹em≠_noˇche
(
off£t
, 
size
)

146  
	`__i‹em≠
(
off£t
, 
size
, 
_CACHE_UNCACHED
);

147 
	}
}

149 
iounm≠
(*
addr
);

157 
	#ªadb
(
addr
Ë(*(vﬁ©ûê*)◊ddr))

	)

158 
	#ªadw
(
addr
Ë
	`__ioswab16
((*(vﬁ©ûê*)◊ddr)))

	)

159 
	#ªadl
(
addr
Ë
	`__ioswab32
((*(vﬁ©ûê*)◊ddr)))

	)

160 
	#__øw_ªadb
 
ªadb


	)

161 
	#__øw_ªadw
 
ªadw


	)

162 
	#__øw_ªadl
 
ªadl


	)

164 
	#wrôeb
(
b
,
addr
Ë(*(vﬁ©ûê*)◊ddr)Ë(b)

	)

165 
	#wrôew
(
b
,
addr
Ë(*(vﬁ©ûê*)◊ddr)Ë(
	`__ioswab16
(b))

	)

166 
	#wrôñ
(
b
,
addr
Ë(*(vﬁ©ûê*)◊ddr)Ë(
	`__ioswab32
(b))

	)

167 
	#__øw_wrôeb
 
wrôeb


	)

168 
	#__øw_wrôew
 
wrôew


	)

169 
	#__øw_wrôñ
 
wrôñ


	)

171 
	#mem£t_io
(
a
,
b
,
c
Ë
	`mem£t
((*)◊),(b),(c))

	)

172 
	#mem˝y_‰omio
(
a
,
b
,
c
Ë
	`mem˝y
(◊),(*)(b),(c))

	)

173 
	#mem˝y_toio
(
a
,
b
,
c
Ë
	`mem˝y
((*)◊),(b),(c))

	)

185 
	#__ISA_IO_ba£
 ((*)(
PAGE_OFFSET
))

	)

187 
	#iß_ªadb
(
a
Ë
	`ªadb
◊)

	)

188 
	#iß_ªadw
(
a
Ë
	`ªadw
◊)

	)

189 
	#iß_ªadl
(
a
Ë
	`ªadl
◊)

	)

190 
	#iß_wrôeb
(
b
,
a
Ë
	`wrôeb
(b,a)

	)

191 
	#iß_wrôew
(
w
,
a
Ë
	`wrôew
(w,a)

	)

192 
	#iß_wrôñ
(
l
,
a
Ë
	`wrôñ
÷,a)

	)

194 
	#iß_mem£t_io
(
a
,
b
,
c
Ë
	`mem£t_io
(◊),(b),(c))

	)

195 
	#iß_mem˝y_‰omio
(
a
,
b
,
c
Ë
	`mem˝y_‰omio
(◊),(b),(c))

	)

196 
	#iß_mem˝y_toio
(
a
,
b
,
c
Ë
	`mem˝y_toio
(◊),(b),(c))

	)

202 
	#ëh_io_c›y_™d_sum
(
skb
,
§c
,
Àn
,
unu£d
Ë
	`mem˝y_‰omio
((skb)->
d©a
,(§c),÷í))

	)

203 
	#iß_ëh_io_c›y_™d_sum
(
a
,
b
,
c
,
d
Ë
	`ëh_c›y_™d_sum
(◊),(b),(c),(d))

	)

205 
ölöe
 
	$check_sig«tuª
(
io_addr
,

206 c⁄° *
sig«tuª
, 
Àngth
)

208 
ªtvÆ
 = 0;

210 i‡(
	`ªadb
(
io_addr
Ë!*
sig«tuª
)

211 
out
;

212 
io_addr
++;

213 
sig«tuª
++;

214 
Àngth
--;

215 } 
Àngth
);

216 
ªtvÆ
 = 1;

217 
out
:

218  
ªtvÆ
;

219 
	}
}

220 
	#iß_check_sig«tuª
(
io
, 
s
, 
l
Ë
	`check_sig«tuª
(
i
,s,l)

	)

226 
	#__OUT1
(
s
) \

227 
ölöe
 
__out
##
	`s
(
vÆue
, 
p‹t
Ë{

	)

229 
	#__OUT2
(
m
) \

230 
__asm__
 
	`__vﬁ©ûe__
 ("s" #m "\t%0,%1(%2)"

	)

232 
	#__OUT
(
m
,
s
,
w
) \

233 
	`__OUT1
(
s
Ë
	`__OUT2
(
m
Ë: : "r" (
__ioswab
##
	`w
(
vÆue
)), "i" (0), "r" (
mùs_io_p‹t_ba£
+
p‹t
)); } \

234 
	`__OUT1
(
s
##
c
Ë
	`__OUT2
(
m
Ë: : "r" (
__ioswab
##
	`w
(
vÆue
)), "ú" (
p‹t
), "r" (
mùs_io_p‹t_ba£
)); } \

235 
	`__OUT1
(
s
##
_p
Ë
	`__OUT2
(
m
Ë: : "r" (
__ioswab
##
	`w
(
vÆue
)), "i" (0), "r" (
mùs_io_p‹t_ba£
+
p‹t
)); \

236 
SLOW_DOWN_IO
; } \

237 
	`__OUT1
(
s
##
c_p
Ë
	`__OUT2
(
m
Ë: : "r" (
__ioswab
##
	`w
(
vÆue
)), "ú" (
p‹t
), "r" (
mùs_io_p‹t_ba£
)); \

238 
SLOW_DOWN_IO
; }

	)

240 
	#__IN1
(
t
,
s
) \

241 
__ölöe__
 
t
 
__ö
##
	`s
(
p‹t
Ë{Å 
_v
;

	)

246 
	#__IN2
(
m
) \

247 
__asm__
 
	`__vﬁ©ûe__
 ("l" #m "\t%0,%1(%2)"

	)

249 
	#__IN
(
t
,
m
,
s
,
w
) \

250 
	`__IN1
(
t
,
s
Ë
	`__IN2
(
m
Ë: "Ù" (
_v
Ë: "i" (0), "r" (
mùs_io_p‹t_ba£
+
p‹t
));  
__ioswab
##
	`w
(_v); } \

251 
	`__IN1
(
t
,
s
##
c
Ë
	`__IN2
(
m
Ë: "Ù" (
_v
Ë: "ú" (
p‹t
), "r" (
mùs_io_p‹t_ba£
));  
__ioswab
##
	`w
(_v); } \

252 
	`__IN1
(
t
,
s
##
_p
Ë
	`__IN2
(
m
Ë: "Ù" (
_v
Ë: "i" (0), "r" (
mùs_io_p‹t_ba£
+
p‹t
)); 
SLOW_DOWN_IO
;  
__ioswab
##
	`w
(_v); } \

253 
	`__IN1
(
t
,
s
##
c_p
Ë
	`__IN2
(
m
Ë: "Ù" (
_v
Ë: "ú" (
p‹t
), "r" (
mùs_io_p‹t_ba£
)); 
SLOW_DOWN_IO
;  
__ioswab
##
	`w
(_v); }

	)

255 
	#__INS1
(
s
) \

256 
ölöe
 
__ös
##
	`s
(
p‹t
, * 
addr
, 
cou¡
Ë{

	)

258 
	#__INS2
(
m
) \

259 i‡(
cou¡
) \

260 
__asm__
 
	`__vﬁ©ûe__
 ( \

269 ".£t\åe‹dî"

	)

271 
	#__INS
(
m
,
s
,
i
) \

272 
	`__INS1
(
s
Ë
	`__INS2
(
m
) \

273 : "Ù" (
addr
), "Ù" (
cou¡
) \

274 : "0" (
addr
), "1" (
cou¡
), "i" (0), \

275 "r" (
mùs_io_p‹t_ba£
+
p‹t
), "I" (
i
) \

277 
	`__INS1
(
s
##
c
Ë
	`__INS2
(
m
) \

278 : "Ù" (
addr
), "Ù" (
cou¡
) \

279 : "0" (
addr
), "1" (
cou¡
), "ú" (
p‹t
), \

280 "r" (
mùs_io_p‹t_ba£
), "I" (
i
) \

281 : "$1");}

	)

283 
	#__OUTS1
(
s
) \

284 
ölöe
 
__outs
##
	`s
(
p‹t
, c⁄° * 
addr
, 
cou¡
Ë{

	)

286 
	#__OUTS2
(
m
) \

287 i‡(
cou¡
) \

288 
__asm__
 
	`__vﬁ©ûe__
 ( \

297 ".£t\åe‹dî"

	)

299 
	#__OUTS
(
m
,
s
,
i
) \

300 
	`__OUTS1
(
s
Ë
	`__OUTS2
(
m
) \

301 : "Ù" (
addr
), "Ù" (
cou¡
) \

302 : "0" (
addr
), "1" (
cou¡
), "i" (0), "r" (
mùs_io_p‹t_ba£
+
p‹t
), "I" (
i
) \

304 
	`__OUTS1
(
s
##
c
Ë
	`__OUTS2
(
m
) \

305 : "Ù" (
addr
), "Ù" (
cou¡
) \

306 : "0" (
addr
), "1" (
cou¡
), "ú" (
p‹t
), "r" (
mùs_io_p‹t_ba£
), "I" (
i
) \

307 : "$1");}

	)

309 
	$__IN
(,
b
,b,8)

310 
	$__IN
(,
h
,
w
,16)

311 
	$__IN
(,
w
,
l
,32)

313 
	$__OUT
(
b
,b,8)

314 
	$__OUT
(
h
,
w
,16)

315 
	$__OUT
(
w
,
l
,32)

317 
	$__INS
(
b
,b,1)

318 
	$__INS
(
h
,
w
,2)

319 
	$__INS
(
w
,
l
,4)

321 
	$__OUTS
(
b
,b,1)

322 
	$__OUTS
(
h
,
w
,2)

323 
	$__OUTS
(
w
,
l
,4)

331 
	#outb
(
vÆ
,
p‹t
) \

332 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

333 
	`__outbc
((
vÆ
),(
p‹t
)) : \

334 
	`__outb
((
vÆ
),(
p‹t
)))

	)

336 
	#öb
(
p‹t
) \

337 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

338 
	`__öbc
(
p‹t
) : \

339 
	`__öb
(
p‹t
))

	)

341 
	#outb_p
(
vÆ
,
p‹t
) \

342 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

343 
	`__outbc_p
((
vÆ
),(
p‹t
)) : \

344 
	`__outb_p
((
vÆ
),(
p‹t
)))

	)

346 
	#öb_p
(
p‹t
) \

347 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

348 
	`__öbc_p
(
p‹t
) : \

349 
	`__öb_p
(
p‹t
))

	)

351 
	#outw
(
vÆ
,
p‹t
) \

352 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

353 
	`__outwc
((
vÆ
),(
p‹t
)) : \

354 
	`__outw
((
vÆ
),(
p‹t
)))

	)

356 
	#öw
(
p‹t
) \

357 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

358 
	`__öwc
(
p‹t
) : \

359 
	`__öw
(
p‹t
))

	)

361 
	#outw_p
(
vÆ
,
p‹t
) \

362 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

363 
	`__outwc_p
((
vÆ
),(
p‹t
)) : \

364 
	`__outw_p
((
vÆ
),(
p‹t
)))

	)

366 
	#öw_p
(
p‹t
) \

367 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

368 
	`__öwc_p
(
p‹t
) : \

369 
	`__öw_p
(
p‹t
))

	)

371 
	#oué
(
vÆ
,
p‹t
) \

372 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

373 
	`__ouéc
((
vÆ
),(
p‹t
)) : \

374 
	`__oué
((
vÆ
),(
p‹t
)))

	)

376 
	#öl
(
p‹t
) \

377 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

378 
	`__ölc
(
p‹t
) : \

379 
	`__öl
(
p‹t
))

	)

381 
	#oué_p
(
vÆ
,
p‹t
) \

382 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

383 
	`__ouéc_p
((
vÆ
),(
p‹t
)) : \

384 
	`__oué_p
((
vÆ
),(
p‹t
)))

	)

386 
	#öl_p
(
p‹t
) \

387 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

388 
	`__ölc_p
(
p‹t
) : \

389 
	`__öl_p
(
p‹t
))

	)

392 
	#outsb
(
p‹t
,
addr
,
cou¡
) \

393 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

394 
	`__outsbc
((
p‹t
),(
addr
),(
cou¡
)) : \

395 
	`__outsb
 ((
p‹t
),(
addr
),(
cou¡
)))

	)

397 
	#ösb
(
p‹t
,
addr
,
cou¡
) \

398 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

399 
	`__ösbc
((
p‹t
),(
addr
),(
cou¡
)) : \

400 
	`__ösb
((
p‹t
),(
addr
),(
cou¡
)))

	)

402 
	#outsw
(
p‹t
,
addr
,
cou¡
) \

403 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

404 
	`__outswc
((
p‹t
),(
addr
),(
cou¡
)) : \

405 
	`__outsw
 ((
p‹t
),(
addr
),(
cou¡
)))

	)

407 
	#ösw
(
p‹t
,
addr
,
cou¡
) \

408 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

409 
	`__öswc
((
p‹t
),(
addr
),(
cou¡
)) : \

410 
	`__ösw
((
p‹t
),(
addr
),(
cou¡
)))

	)

412 
	#out¶
(
p‹t
,
addr
,
cou¡
) \

413 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

414 
	`__out¶c
((
p‹t
),(
addr
),(
cou¡
)) : \

415 
	`__out¶
 ((
p‹t
),(
addr
),(
cou¡
)))

	)

417 
	#ö¶
(
p‹t
,
addr
,
cou¡
) \

418 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

419 
	`__ö¶c
((
p‹t
),(
addr
),(
cou¡
)) : \

420 
	`__ö¶
((
p‹t
),(
addr
),(
cou¡
)))

	)

422 
	#IO_SPACE_LIMIT
 0xffff

	)

442 (*
_dma_ˇche_wback_öv
)(
°¨t
, 
size
);

443 (*
_dma_ˇche_wback
)(
°¨t
, 
size
);

444 (*
_dma_ˇche_öv
)(
°¨t
, 
size
);

446 
	#dma_ˇche_wback_öv
(
°¨t
,
size
Ë
	`_dma_ˇche_wback_öv
(°¨t,size)

	)

447 
	#dma_ˇche_wback
(
°¨t
,
size
Ë
	`_dma_ˇche_wback
(°¨t,size)

	)

448 
	#dma_ˇche_öv
(
°¨t
,
size
Ë
	`_dma_ˇche_öv
(°¨t,size)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/isadep.h

8 
	~<löux/c⁄fig.h
>

10 #i‚de‡
__ASM_ISADEP_H


11 
	#__ASM_ISADEP_H


	)

13 #i‡
deföed
(
CONFIG_CPU_R3000
)

21 
	#KU_MASK
 0x08

	)

22 
	#KU_USER
 0x08

	)

23 
	#KU_KERN
 0x00

	)

29 
	#KU_MASK
 0x18

	)

30 
	#KU_USER
 0x10

	)

31 
	#KU_KERN
 0x00

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/mipsregs.h

13 #i‚de‡
_ASM_MIPSREGS_H


14 
	#_ASM_MIPSREGS_H


	)

17 
	~<löux/lökage.h
>

24 #i‚de‡
__STR


25 
	#__STR
(
x
Ë#x

	)

27 #i‚de‡
STR


28 
	#STR
(
x
Ë
	`__STR
(x)

	)

34 #ifde‡
__ASSEMBLY__


35 
	#_ULCAST_


	)

37 
	#_ULCAST_
 ()

	)

43 
	#CP0_INDEX
 
$0


	)

44 
	#CP0_RANDOM
 
$1


	)

45 
	#CP0_ENTRYLO0
 
$2


	)

46 
	#CP0_ENTRYLO1
 
$3


	)

47 
	#CP0_CONF
 
$3


	)

48 
	#CP0_CONTEXT
 
$4


	)

49 
	#CP0_PAGEMASK
 
$5


	)

50 
	#CP0_WIRED
 
$6


	)

51 
	#CP0_INFO
 
$7


	)

52 
	#CP0_BADVADDR
 
$8


	)

53 
	#CP0_COUNT
 
$9


	)

54 
	#CP0_ENTRYHI
 
$10


	)

55 
	#CP0_COMPARE
 
$11


	)

56 
	#CP0_STATUS
 
$12


	)

57 
	#CP0_CAUSE
 
$13


	)

58 
	#CP0_EPC
 
$14


	)

59 
	#CP0_PRID
 
$15


	)

60 
	#CP0_CONFIG
 
$16


	)

61 
	#CP0_LLADDR
 
$17


	)

62 
	#CP0_WATCHLO
 
$18


	)

63 
	#CP0_WATCHHI
 
$19


	)

64 
	#CP0_XCONTEXT
 
$20


	)

65 
	#CP0_FRAMEMASK
 
$21


	)

66 
	#CP0_DIAGNOSTIC
 
$22


	)

67 
	#CP0_PERFORMANCE
 
$25


	)

68 
	#CP0_ECC
 
$26


	)

69 
	#CP0_CACHEERR
 
$27


	)

70 
	#CP0_TAGLO
 
$28


	)

71 
	#CP0_TAGHI
 
$29


	)

72 
	#CP0_ERROREPC
 
$30


	)

80 
	#CP0_IBASE
 
$0


	)

81 
	#CP0_IBOUND
 
$1


	)

82 
	#CP0_DBASE
 
$2


	)

83 
	#CP0_DBOUND
 
$3


	)

84 
	#CP0_CALG
 
$17


	)

85 
	#CP0_IWATCH
 
$18


	)

86 
	#CP0_DWATCH
 
$19


	)

91 
	#CP0_S1_DERRADDR0
 
$26


	)

92 
	#CP0_S1_DERRADDR1
 
$27


	)

93 
	#CP0_S1_INTCONTROL
 
$20


	)

97 
	#CP1_REVISION
 
$0


	)

98 
	#CP1_STATUS
 
$31


	)

107 
	#FPU_CSR_FLUSH
 0x01000000

	)

108 
	#FPU_CSR_COND
 0x00800000

	)

109 
	#FPU_CSR_COND0
 0x00800000

	)

110 
	#FPU_CSR_COND1
 0x02000000

	)

111 
	#FPU_CSR_COND2
 0x04000000

	)

112 
	#FPU_CSR_COND3
 0x08000000

	)

113 
	#FPU_CSR_COND4
 0x10000000

	)

114 
	#FPU_CSR_COND5
 0x20000000

	)

115 
	#FPU_CSR_COND6
 0x40000000

	)

116 
	#FPU_CSR_COND7
 0x80000000

	)

123 
	#FPU_CSR_ALL_X
 0x0003f000

	)

124 
	#FPU_CSR_UNI_X
 0x00020000

	)

125 
	#FPU_CSR_INV_X
 0x00010000

	)

126 
	#FPU_CSR_DIV_X
 0x00008000

	)

127 
	#FPU_CSR_OVF_X
 0x00004000

	)

128 
	#FPU_CSR_UDF_X
 0x00002000

	)

129 
	#FPU_CSR_INE_X
 0x00001000

	)

131 
	#FPU_CSR_ALL_E
 0x00000f80

	)

132 
	#FPU_CSR_INV_E
 0x00000800

	)

133 
	#FPU_CSR_DIV_E
 0x00000400

	)

134 
	#FPU_CSR_OVF_E
 0x00000200

	)

135 
	#FPU_CSR_UDF_E
 0x00000100

	)

136 
	#FPU_CSR_INE_E
 0x00000080

	)

138 
	#FPU_CSR_ALL_S
 0x0000007c

	)

139 
	#FPU_CSR_INV_S
 0x00000040

	)

140 
	#FPU_CSR_DIV_S
 0x00000020

	)

141 
	#FPU_CSR_OVF_S
 0x00000010

	)

142 
	#FPU_CSR_UDF_S
 0x00000008

	)

143 
	#FPU_CSR_INE_S
 0x00000004

	)

146 
	#FPU_CSR_RN
 0x0

	)

147 
	#FPU_CSR_RZ
 0x1

	)

148 
	#FPU_CSR_RU
 0x2

	)

149 
	#FPU_CSR_RD
 0x3

	)

155 
	~<löux/c⁄fig.h
>

156 #ifde‡
CONFIG_CPU_VR41XX


157 
	#PM_1K
 0x00000000

	)

158 
	#PM_4K
 0x00001800

	)

159 
	#PM_16K
 0x00007800

	)

160 
	#PM_64K
 0x0001f800

	)

161 
	#PM_256K
 0x0007f800

	)

163 
	#PM_4K
 0x00000000

	)

164 
	#PM_16K
 0x00006000

	)

165 
	#PM_64K
 0x0001e000

	)

166 
	#PM_256K
 0x0007e000

	)

167 
	#PM_1M
 0x001„000

	)

168 
	#PM_4M
 0x007„000

	)

169 
	#PM_16M
 0x01f„000

	)

172 
	#MIPS_CONF1_DL_SHIFT
 10

	)

173 
	#MIPS_CONF1_DL
 (
	`_ULCAST_
(7Ë<< 10)

	)

174 
	#MIPS_CONF1_IL_SHIFT
 19

	)

175 
	#MIPS_CONF1_IL
 (
	`_ULCAST_
(7Ë<< 19)

	)

181 
	#PL_4K
 12

	)

182 
	#PL_16K
 14

	)

183 
	#PL_64K
 16

	)

184 
	#PL_256K
 18

	)

185 
	#PL_1M
 20

	)

186 
	#PL_4M
 22

	)

187 
	#PL_16M
 24

	)

192 
	#__ªad_32bô_c0_ªgi°î
(
sour˚
, 
£l
) \

193 ({ 
__ªs
; \

194 i‡(
£l
 == 0) \

195 
__asm__
 
	`__vﬁ©ûe__
( \

197 : "Ù" (
__ªs
)); \

199 
__asm__
 
	`__vﬁ©ûe__
( \

203 : "Ù" (
__ªs
)); \

204 
__ªs
; \

205 })

	)

207 
	#ªad_32bô_˝0_ªgi°î
(
sour˚
) \

208 ({ 
__ªs
; \

209 
__asm__
 
	`__vﬁ©ûe__
( \

212 "mfc0\t%0,"
	`STR
(
sour˚
)"\n\t" \

214 : "Ù" (
__ªs
)); \

215 
__ªs
;})

	)

217 
	#ªad_32bô_˝0_£t1_ªgi°î
(
sour˚
) \

218 ({ 
__ªs
; \

219 
__asm__
 
	`__vﬁ©ûe__
( \

222 "cfc0\t%0,"
	`STR
(
sour˚
)"\n\t" \

224 : "Ù" (
__ªs
)); \

225 
__ªs
;})

	)

230 
	#ªad_64bô_˝0_ªgi°î
(
sour˚
) \

231 ({ 
__ªs
; \

232 
__asm__
 
	`__vﬁ©ûe__
( \

234 "dmfc0\t%0,"
	`STR
(
sour˚
)"\n\t" \

236 : "Ù" (
__ªs
)); \

237 
__ªs
;})

	)

239 
	#wrôe_32bô_˝0_ªgi°î
(,
vÆue
) \

240 
__asm__
 
	`__vﬁ©ûe__
( \

241 "mtc0\t%0,"
	`STR
()"\n\t" \

243 : : "r" (
vÆue
));

	)

245 
	#wrôe_32bô_˝0_£t1_ªgi°î
(,
vÆue
) \

246 
__asm__
 
	`__vﬁ©ûe__
( \

247 "˘c0\t%0,"
	`STR
()"\n\t" \

249 : : "r" (
vÆue
));

	)

251 
	#wrôe_64bô_˝0_ªgi°î
(,
vÆue
) \

252 
__asm__
 
	`__vﬁ©ûe__
( \

254 "dmtc0\t%0,"
	`STR
()"\n\t" \

256 : : "r" (
vÆue
))

	)

261 
	#ªad_mùs32_˝0_c⁄fig1
() \

262 ({ 
__ªs
; \

263 
__asm__
 
	`__vﬁ©ûe__
( \

270 :"Ù" (
__ªs
)); \

271 
__ªs
;})

	)

273 
	#éb_wrôe_ödexed
() \

274 
__asm__
 
	`__vﬁ©ûe__
( \

277 ".£àª‹dî")

	)

282 
	#IE_SW0
 (1<< 8)

	)

283 
	#IE_SW1
 (1<< 9)

	)

284 
	#IE_IRQ0
 (1<<10)

	)

285 
	#IE_IRQ1
 (1<<11)

	)

286 
	#IE_IRQ2
 (1<<12)

	)

287 
	#IE_IRQ3
 (1<<13)

	)

288 
	#IE_IRQ4
 (1<<14)

	)

289 
	#IE_IRQ5
 (1<<15)

	)

294 
	#C_SW0
 (1<< 8)

	)

295 
	#C_SW1
 (1<< 9)

	)

296 
	#C_IRQ0
 (1<<10)

	)

297 
	#C_IRQ1
 (1<<11)

	)

298 
	#C_IRQ2
 (1<<12)

	)

299 
	#C_IRQ3
 (1<<13)

	)

300 
	#C_IRQ4
 (1<<14)

	)

301 
	#C_IRQ5
 (1<<15)

	)

303 #i‚de‡
_LANGUAGE_ASSEMBLY


308 
	#__BUILD_SET_CP0
(
«me
,) \

309 
__ölöe__
 \

310 
£t_˝0_
##
	`«me
(
£t
) \

312 
ªs
; \

314 
ªs
 = 
	`ªad_32bô_˝0_ªgi°î
(); \

315 
ªs
 |
£t
; \

316 
	`wrôe_32bô_˝0_ªgi°î
(, 
ªs
); \

318  
ªs
; \

321 
__ölöe__
 \

322 
˛ór_˝0_
##
	`«me
(
˛ór
) \

324 
ªs
; \

326 
ªs
 = 
	`ªad_32bô_˝0_ªgi°î
(); \

327 
ªs
 &~
˛ór
; \

328 
	`wrôe_32bô_˝0_ªgi°î
(, 
ªs
); \

330  
ªs
; \

333 
__ölöe__
 \

334 
ch™ge_˝0_
##
	`«me
(
ch™ge
, 
√w
) \

336 
ªs
; \

338 
ªs
 = 
	`ªad_32bô_˝0_ªgi°î
(); \

339 
ªs
 &~
ch™ge
; \

340 
ªs
 |(
√w
 & 
ch™ge
); \

341 if(
ch™ge
) \

342 
	`wrôe_32bô_˝0_ªgi°î
(, 
ªs
); \

344  
ªs
; \

345 }

	)

347 
	#ªad_c0_c⁄fig1
(Ë
	`__ªad_32bô_c0_ªgi°î
(
$16
, 1)

	)

349 
	$__BUILD_SET_CP0
(
°©us
,
CP0_STATUS
)

350 
	$__BUILD_SET_CP0
(
ˇu£
,
CP0_CAUSE
)

351 
	$__BUILD_SET_CP0
(
c⁄fig
,
CP0_CONFIG
)

358 
	#ST0_IE
 0x00000001

	)

359 
	#ST0_EXL
 0x00000002

	)

360 
	#ST0_ERL
 0x00000004

	)

361 
	#ST0_KSU
 0x00000018

	)

362 
	#KSU_USER
 0x00000010

	)

363 
	#KSU_SUPERVISOR
 0x00000008

	)

364 
	#KSU_KERNEL
 0x00000000

	)

365 
	#ST0_UX
 0x00000020

	)

366 
	#ST0_SX
 0x00000040

	)

367 
	#ST0_KX
 0x00000080

	)

368 
	#ST0_DE
 0x00010000

	)

369 
	#ST0_CE
 0x00020000

	)

374 
	#ST0_IEC
 0x00000001

	)

375 
	#ST0_KUC
 0x00000002

	)

376 
	#ST0_IEP
 0x00000004

	)

377 
	#ST0_KUP
 0x00000008

	)

378 
	#ST0_IEO
 0x00000010

	)

379 
	#ST0_KUO
 0x00000020

	)

381 
	#ST0_ISC
 0x00010000

	)

382 
	#ST0_SWC
 0x00020000

	)

383 
	#ST0_CM
 0x00080000

	)

388 
	#ST0_UM
 (1 << 4)

	)

389 
	#ST0_IL
 (1 << 23)

	)

390 
	#ST0_DL
 (1 << 24)

	)

395 
	#TX39_CONF_ICS_SHIFT
 19

	)

396 
	#TX39_CONF_ICS_MASK
 0x00380000

	)

397 
	#TX39_CONF_ICS_1KB
 0x00000000

	)

398 
	#TX39_CONF_ICS_2KB
 0x00080000

	)

399 
	#TX39_CONF_ICS_4KB
 0x00100000

	)

400 
	#TX39_CONF_ICS_8KB
 0x00180000

	)

401 
	#TX39_CONF_ICS_16KB
 0x00200000

	)

403 
	#TX39_CONF_DCS_SHIFT
 16

	)

404 
	#TX39_CONF_DCS_MASK
 0x00070000

	)

405 
	#TX39_CONF_DCS_1KB
 0x00000000

	)

406 
	#TX39_CONF_DCS_2KB
 0x00010000

	)

407 
	#TX39_CONF_DCS_4KB
 0x00020000

	)

408 
	#TX39_CONF_DCS_8KB
 0x00030000

	)

409 
	#TX39_CONF_DCS_16KB
 0x00040000

	)

411 
	#TX39_CONF_CWFON
 0x00004000

	)

412 
	#TX39_CONF_WBON
 0x00002000

	)

413 
	#TX39_CONF_RF_SHIFT
 10

	)

414 
	#TX39_CONF_RF_MASK
 0x00000c00

	)

415 
	#TX39_CONF_DOZE
 0x00000200

	)

416 
	#TX39_CONF_HALT
 0x00000100

	)

417 
	#TX39_CONF_LOCK
 0x00000080

	)

418 
	#TX39_CONF_ICE
 0x00000020

	)

419 
	#TX39_CONF_DCE
 0x00000010

	)

420 
	#TX39_CONF_IRSIZE_SHIFT
 2

	)

421 
	#TX39_CONF_IRSIZE_MASK
 0x0000000c

	)

422 
	#TX39_CONF_DRSIZE_SHIFT
 0

	)

423 
	#TX39_CONF_DRSIZE_MASK
 0x00000003

	)

428 
	#ST0_IM
 0x0000ff00

	)

429 
	#STATUSB_IP0
 8

	)

430 
	#STATUSF_IP0
 (1 << 8)

	)

431 
	#STATUSB_IP1
 9

	)

432 
	#STATUSF_IP1
 (1 << 9)

	)

433 
	#STATUSB_IP2
 10

	)

434 
	#STATUSF_IP2
 (1 << 10)

	)

435 
	#STATUSB_IP3
 11

	)

436 
	#STATUSF_IP3
 (1 << 11)

	)

437 
	#STATUSB_IP4
 12

	)

438 
	#STATUSF_IP4
 (1 << 12)

	)

439 
	#STATUSB_IP5
 13

	)

440 
	#STATUSF_IP5
 (1 << 13)

	)

441 
	#STATUSB_IP6
 14

	)

442 
	#STATUSF_IP6
 (1 << 14)

	)

443 
	#STATUSB_IP7
 15

	)

444 
	#STATUSF_IP7
 (1 << 15)

	)

445 
	#STATUSB_IP8
 0

	)

446 
	#STATUSF_IP8
 (1 << 0)

	)

447 
	#STATUSB_IP9
 1

	)

448 
	#STATUSF_IP9
 (1 << 1)

	)

449 
	#STATUSB_IP10
 2

	)

450 
	#STATUSF_IP10
 (1 << 2)

	)

451 
	#STATUSB_IP11
 3

	)

452 
	#STATUSF_IP11
 (1 << 3)

	)

453 
	#STATUSB_IP12
 4

	)

454 
	#STATUSF_IP12
 (1 << 4)

	)

455 
	#STATUSB_IP13
 5

	)

456 
	#STATUSF_IP13
 (1 << 5)

	)

457 
	#STATUSB_IP14
 6

	)

458 
	#STATUSF_IP14
 (1 << 6)

	)

459 
	#STATUSB_IP15
 7

	)

460 
	#STATUSF_IP15
 (1 << 7)

	)

461 
	#ST0_CH
 0x00040000

	)

462 
	#ST0_SR
 0x00100000

	)

463 
	#ST0_BEV
 0x00400000

	)

464 
	#ST0_RE
 0x02000000

	)

465 
	#ST0_FR
 0x04000000

	)

466 
	#ST0_CU
 0xf0000000

	)

467 
	#ST0_CU0
 0x10000000

	)

468 
	#ST0_CU1
 0x20000000

	)

469 
	#ST0_CU2
 0x40000000

	)

470 
	#ST0_CU3
 0x80000000

	)

471 
	#ST0_XX
 0x80000000

	)

478 
	#CAUSEB_EXCCODE
 2

	)

479 
	#CAUSEF_EXCCODE
 (31 << 2)

	)

480 
	#CAUSEB_IP
 8

	)

481 
	#CAUSEF_IP
 (255 << 8)

	)

482 
	#CAUSEB_IP0
 8

	)

483 
	#CAUSEF_IP0
 (1 << 8)

	)

484 
	#CAUSEB_IP1
 9

	)

485 
	#CAUSEF_IP1
 (1 << 9)

	)

486 
	#CAUSEB_IP2
 10

	)

487 
	#CAUSEF_IP2
 (1 << 10)

	)

488 
	#CAUSEB_IP3
 11

	)

489 
	#CAUSEF_IP3
 (1 << 11)

	)

490 
	#CAUSEB_IP4
 12

	)

491 
	#CAUSEF_IP4
 (1 << 12)

	)

492 
	#CAUSEB_IP5
 13

	)

493 
	#CAUSEF_IP5
 (1 << 13)

	)

494 
	#CAUSEB_IP6
 14

	)

495 
	#CAUSEF_IP6
 (1 << 14)

	)

496 
	#CAUSEB_IP7
 15

	)

497 
	#CAUSEF_IP7
 (1 << 15)

	)

498 
	#CAUSEB_IV
 23

	)

499 
	#CAUSEF_IV
 (1 << 23)

	)

500 
	#CAUSEB_CE
 28

	)

501 
	#CAUSEF_CE
 (3 << 28)

	)

502 
	#CAUSEB_BD
 31

	)

503 
	#CAUSEF_BD
 (1 << 31)

	)

508 
	#CONF_CM_CACHABLE_NO_WA
 0

	)

509 
	#CONF_CM_CACHABLE_WA
 1

	)

510 
	#CONF_CM_UNCACHED
 2

	)

511 
	#CONF_CM_CACHABLE_NONCOHERENT
 3

	)

512 
	#CONF_CM_CACHABLE_CE
 4

	)

513 
	#CONF_CM_CACHABLE_COW
 5

	)

514 
	#CONF_CM_CACHABLE_CUW
 6

	)

515 
	#CONF_CM_CACHABLE_ACCELERATED
 7

	)

516 
	#CONF_CM_CMASK
 7

	)

517 
	#CONF_DB
 (1 << 4)

	)

518 
	#CONF_IB
 (1 << 5)

	)

519 
	#CONF_SC
 (1 << 17)

	)

520 
	#CONF_AC
 (1 << 23)

	)

521 
	#CONF_HALT
 (1 << 25)

	)

534 
	#CE0_CYCLES
 0

	)

535 
	#CE0_INSN_ISSUED
 1

	)

536 
	#CE0_LPSC_ISSUED
 2

	)

537 
	#CE0_S_ISSUED
 3

	)

538 
	#CE0_SC_ISSUED
 4

	)

539 
	#CE0_SC_FAILED
 5

	)

540 
	#CE0_BRANCH_DECODED
 6

	)

541 
	#CE0_QW_WB_SECONDARY
 7

	)

542 
	#CE0_CORRECTED_ECC_ERRORS
 8

	)

543 
	#CE0_ICACHE_MISSES
 9

	)

544 
	#CE0_SCACHE_I_MISSES
 10

	)

545 
	#CE0_SCACHE_I_WAY_MISSPREDICTED
 11

	)

546 
	#CE0_EXT_INTERVENTIONS_REQ
 12

	)

547 
	#CE0_EXT_INVALIDATE_REQ
 13

	)

548 
	#CE0_VIRTUAL_COHERENCY_COND
 14

	)

549 
	#CE0_INSN_GRADUATED
 15

	)

554 
	#CE1_CYCLES
 0

	)

555 
	#CE1_INSN_GRADUATED
 1

	)

556 
	#CE1_LPSC_GRADUATED
 2

	)

557 
	#CE1_S_GRADUATED
 3

	)

558 
	#CE1_SC_GRADUATED
 4

	)

559 
	#CE1_FP_INSN_GRADUATED
 5

	)

560 
	#CE1_QW_WB_PRIMARY
 6

	)

561 
	#CE1_TLB_REFILL
 7

	)

562 
	#CE1_BRANCH_MISSPREDICTED
 8

	)

563 
	#CE1_DCACHE_MISS
 9

	)

564 
	#CE1_SCACHE_D_MISSES
 10

	)

565 
	#CE1_SCACHE_D_WAY_MISSPREDICTED
 11

	)

566 
	#CE1_EXT_INTERVENTION_HITS
 12

	)

567 
	#CE1_EXT_INVALIDATE_REQ
 13

	)

568 
	#CE1_SP_HINT_TO_CEXCL_SC_BLOCKS
 14

	)

569 
	#CE1_SP_HINT_TO_SHARED_SC_BLOCKS
 15

	)

574 
	#CEB_USER
 8

	)

575 
	#CEB_SUPERVISOR
 4

	)

576 
	#CEB_KERNEL
 2

	)

577 
	#CEB_EXL
 1

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/posix_types.h

9 #i‚de‡
_ASM_POSIX_TYPES_H


10 
	#_ASM_POSIX_TYPES_H


	)

18 
	t__kî√l_dev_t
;

19 
	t__kî√l_öo_t
;

20 
	t__kî√l_mode_t
;

21 
	t__kî√l_∆ök_t
;

22 
	t__kî√l_off_t
;

23 
	t__kî√l_pid_t
;

24 
	t__kî√l_ùc_pid_t
;

25 
	t__kî√l_uid_t
;

26 
	t__kî√l_gid_t
;

27 
	t__kî√l_size_t
;

28 
	t__kî√l_ssize_t
;

29 
	t__kî√l_±rdiff_t
;

30 
	t__kî√l_time_t
;

31 
	t__kî√l_su£c⁄ds_t
;

32 
	t__kî√l_˛ock_t
;

33 
	t__kî√l_daddr_t
;

34 * 
	t__kî√l_ˇddr_t
;

36 
	t__kî√l_uid16_t
;

37 
	t__kî√l_gid16_t
;

38 
	t__kî√l_uid32_t
;

39 
	t__kî√l_gid32_t
;

40 
__kî√l_uid_t
 
	t__kî√l_ﬁd_uid_t
;

41 
__kî√l_gid_t
 
	t__kî√l_ﬁd_gid_t
;

43 #ifde‡
__GNUC__


44 
	t__kî√l_loff_t
;

48 
	mvÆ
[2];

49 } 
	t__kî√l_fsid_t
;

51 #i‡
deföed
(
__KERNEL__
Ë|| !deföed(
__GLIBC__
) || (__GLIBC__ < 2)

53 #unde‡
__FD_SET


54 
__ölöe__
 
	$__FD_SET
(
__fd
, 
__kî√l_fd_£t
 *
__fd£ç
)

56 
__tmp
 = 
__fd
 / 
__NFDBITS
;

57 
__ªm
 = 
__fd
 % 
__NFDBITS
;

58 
__fd£ç
->
fds_bôs
[
__tmp
] |(1UL<<
__ªm
);

59 
	}
}

61 #unde‡
__FD_CLR


62 
__ölöe__
 
	$__FD_CLR
(
__fd
, 
__kî√l_fd_£t
 *
__fd£ç
)

64 
__tmp
 = 
__fd
 / 
__NFDBITS
;

65 
__ªm
 = 
__fd
 % 
__NFDBITS
;

66 
__fd£ç
->
fds_bôs
[
__tmp
] &~(1UL<<
__ªm
);

67 
	}
}

69 #unde‡
__FD_ISSET


70 
__ölöe__
 
	$__FD_ISSET
(
__fd
, c⁄° 
__kî√l_fd_£t
 *
__p
)

72 
__tmp
 = 
__fd
 / 
__NFDBITS
;

73 
__ªm
 = 
__fd
 % 
__NFDBITS
;

74  (
__p
->
fds_bôs
[
__tmp
] & (1UL<<
__ªm
)) != 0;

75 
	}
}

81 #unde‡
__FD_ZERO


82 
__ölöe__
 
	$__FD_ZERO
(
__kî√l_fd_£t
 *
__p
)

84 *
__tmp
 = 
__p
->
fds_bôs
;

85 
__i
;

87 i‡(
	`__buûtö_c⁄°™t_p
(
__FDSET_LONGS
)) {

88 
__FDSET_LONGS
) {

90 
__tmp
[ 0] = 0; __tmp[ 1] = 0;

91 
__tmp
[ 2] = 0; __tmp[ 3] = 0;

92 
__tmp
[ 4] = 0; __tmp[ 5] = 0;

93 
__tmp
[ 6] = 0; __tmp[ 7] = 0;

94 
__tmp
[ 8] = 0; __tmp[ 9] = 0;

95 
__tmp
[10] = 0; __tmp[11] = 0;

96 
__tmp
[12] = 0; __tmp[13] = 0;

97 
__tmp
[14] = 0; __tmp[15] = 0;

101 
__tmp
[ 0] = 0; __tmp[ 1] = 0;

102 
__tmp
[ 2] = 0; __tmp[ 3] = 0;

103 
__tmp
[ 4] = 0; __tmp[ 5] = 0;

104 
__tmp
[ 6] = 0; __tmp[ 7] = 0;

108 
__tmp
[ 0] = 0; __tmp[ 1] = 0;

109 
__tmp
[ 2] = 0; __tmp[ 3] = 0;

113 
__i
 = 
__FDSET_LONGS
;

114 
__i
) {

115 
__i
--;

116 *
__tmp
 = 0;

117 
__tmp
++;

119 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/processor.h

11 #i‚de‡
_ASM_PROCESSOR_H


12 
	#_ASM_PROCESSOR_H


	)

14 
	~<löux/c⁄fig.h
>

16 
	~<asm/ißdï.h
>

22 
	#cuºít_ãxt_addr
(Ë({ 
__œbñ__
 
_l
; _l: &&_l;})

	)

24 #i‡!
deföed
 (
_LANGUAGE_ASSEMBLY
)

26 
	~<löux/thªads.h
>

28 
	~<asm/ˇche˘l.h
>

29 
	~<asm/mù§egs.h
>

30 
	~<asm/ªg.h
>

31 
	~<asm/sy°em.h
>

33 
	smùs_˝uöfo
 {

34 
	mudñay_vÆ
;

35 *
	mpgd_quick
;

36 *
	m±e_quick
;

37 
	mpgèbÀ_ˇche_sz
;

44 (*
˝u_waô
)();

45 
	`r3081_waô
();

46 
	`r4k_waô
();

47 
cy˛ecou¡î_avaûabÀ
;

49 
mùs_˝uöfo
 
boŸ_˝u_d©a
;

50 
v˚d_cou¡
, 
v˚i_cou¡
;

52 #ifde‡
CONFIG_SMP


53 
mùs_˝uöfo
 
˝u_d©a
[];

54 
	#cuºít_˝u_d©a
 
˝u_d©a
[
	`smp_¥o˚ss‹_id
()]

	)

56 
	#˝u_d©a
 &
boŸ_˝u_d©a


	)

57 
	#cuºít_˝u_d©a
 
boŸ_˝u_d©a


	)

67 
EISA_bus
;

68 
	#MCA_bus
 0

	)

69 
	#MCA_bus__is_a_ma¸o


	)

74 
	#wp_w‹ks_ok
 1

	)

75 
	#wp_w‹ks_ok__is_a_ma¸o


	)

78 
èsk_°ru˘
 *
œ°_èsk_u£d_m©h
;

86 
	#TASK_SIZE
 (0x7fff8000UL)

	)

91 
	#TASK_UNMAPPED_BASE
 (
TASK_SIZE
 / 3)

	)

96 
	#IO_BITMAP_SIZE
 32

	)

98 
	#NUM_FPU_REGS
 32

	)

100 
	smùs_Âu_h¨d_°ru˘
 {

101 
Â_ªgs
[
NUM_FPU_REGS
];

102 
c⁄åﬁ
;

111 
u64
 
	tÂuªg_t
;

112 
	smùs_Âu_so·_°ru˘
 {

113 
Âuªg_t
 
ªgs
[
NUM_FPU_REGS
];

114 
§
;

117 
	umùs_Âu_uni⁄
 {

118 
mùs_Âu_h¨d_°ru˘
 
h¨d
;

119 
mùs_Âu_so·_°ru˘
 
so·
;

122 
	#INIT_FPU
 { \

124 
	}

	)
}

127 
	m£g
;

128 } 
	tmm_£gmít_t
;

133 
	sthªad_°ru˘
 {

135 
	mªg16
;

136 
	mªg17
, 
	mªg18
, 
	mªg19
, 
	mªg20
, 
	mªg21
, 
	mªg22
, 
	mªg23
;

137 
	mªg29
, 
	mªg30
, 
	mªg31
;

140 
	m˝0_°©us
;

143 
mùs_Âu_uni⁄
 
	mÂu
;

146 
	m˝0_badvaddr
;

147 
	m˝0_baduaddr
;

148 
	mîr‹_code
;

149 
	må≠_no
;

150 
	#MF_FIXADE
 1

	)

151 
	#MF_LOGADE
 2

	)

152 
	mmÊags
;

153 
mm_£gmít_t
 
	mcuºít_ds
;

154 
	múix_åampﬁöe
;

155 
	múix_ﬁd˘x
;

165 
	md£mul_ïc
;

170 
	md£mul_´Ωc
;

175 
	#INIT_THREAD
 { \

188 
INIT_FPU
, \

196 
MF_FIXADE
, { 0 }, 0, 0, \

202 }

	)

204 #ifde‡
__KERNEL__


206 
	#KERNEL_STACK_SIZE
 8192

	)

208 #i‡!
deföed
 (
_LANGUAGE_ASSEMBLY
)

211 
	#ªÀa£_thªad
(
thªad
Ëdÿ{ } 0)

	)

213 
kî√l_thªad
((*
‚
)(*), * 
¨g
, 
Êags
);

216 
	#c›y_£gmíts
(
p
, 
mm
Ëdÿ{ 
	}
} 0)

	)

217 
	#ªÀa£_£gmíts
(
mm
Ëdÿ{ } 0)

	)

222 
ölöe
 
	$thªad_ßved_pc
(
thªad_°ru˘
 *
t
)

224 
	`ªt_‰om_f‹k
();

227 i‡(
t
->
ªg31
 =(Ë
ªt_‰om_f‹k
)

228  
t
->
ªg31
;

230  ((*)
t
->
ªg29
)[10];

231 
	}
}

236 
	#°¨t_thªad
(
ªgs
, 
√w_pc
, 
√w_•
) do { \

238 
ªgs
->
˝0_°©us
 = (ªgs->˝0_°©u†& ~(
ST0_CU0
|
ST0_KSU
)Ë| 
KU_USER
;\

239 
ªgs
->
˝0_ïc
 = 
√w_pc
; \

240 
ªgs
->ªgs[29] = 
√w_•
; \

241 
cuºít
->
thªad
.
cuºít_ds
 = 
USER_DS
; \

242 } 0)

	)

244 
gë_wch™
(
èsk_°ru˘
 *
p
);

246 
	#__PT_REG
(
ªg
Ë(()&((
±_ªgs
 *)0)->ªg - (±_ªgs))

	)

247 
	#__KSTK_TOS
(
tsk
Ë(()—skË+ 
KERNEL_STACK_SIZE
 - 32)

	)

248 
	#KSTK_EIP
(
tsk
Ë(*(*)(
	`__KSTK_TOS
—skË+ 
	`__PT_REG
(
˝0_ïc
)))

	)

249 
	#KSTK_ESP
(
tsk
Ë(*(*)(
	`__KSTK_TOS
—skË+ 
	`__PT_REG
(
ªgs
[29])))

	)

255 
	#THREAD_SIZE
 (2*
PAGE_SIZE
)

	)

256 
	#Æloc_èsk_°ru˘
() \

257 ((
èsk_°ru˘
 *Ë
	`__gë_‰ì_∑ges
(
GFP_KERNEL
,1))

	)

258 
	#‰ì_èsk_°ru˘
(
p
Ë
	`‰ì_∑ges
(()’),1)

	)

259 
	#gë_èsk_°ru˘
(
tsk
Ë
	`©omic_öc
(&
	`vút_to_∑ge
—sk)->
cou¡
)

	)

261 
	#öô_èsk
 (
öô_èsk_uni⁄
.
èsk
)

	)

262 
	#öô_°ack
 (
öô_èsk_uni⁄
.
°ack
)

	)

264 
	#˝u_ªœx
(Ëdÿ{ } 0)

	)

281 
	#ªtu∫_addªss
(Ë({
__asm__
 
	`__vﬁ©ûe__
("":::"$31");
	`__buûtö_ªtu∫_addªss
(0);})

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/ptrace.h

11 #i‚de‡
_ASM_PTRACE_H


12 
	#_ASM_PTRACE_H


	)

14 
	~<asm/ißdï.h
>

15 
	~<löux/ty≥s.h
>

18 
	#FPR_BASE
 32

	)

19 
	#PC
 64

	)

20 
	#CAUSE
 65

	)

21 
	#BADVADDR
 66

	)

22 
	#MMHI
 67

	)

23 
	#MMLO
 68

	)

24 
	#FPC_CSR
 69

	)

25 
	#FPC_EIR
 70

	)

27 #i‚de‡
_LANGUAGE_ASSEMBLY


32 
	s±_ªgs
 {

34 
	m∑d0
[6];

37 
	mªgs
[32];

40 
	mlo
;

41 
	mhi
;

46 
	m˝0_ïc
;

47 
	m˝0_badvaddr
;

48 
	m˝0_°©us
;

49 
	m˝0_ˇu£
;

62 
	#PTRACE_SETOPTIONS
 21

	)

65 
	#PTRACE_O_TRACESYSGOOD
 0x00000001

	)

68 
	~<asm/off£t.h
>

71 #ifde‡
__KERNEL__


73 #i‚de‡
_LANGUAGE_ASSEMBLY


77 
	#u£r_mode
(
ªgs
Ë((‘egs)->
˝0_°©us
 & 
KU_MASK
Ë=
KU_USER
)

	)

79 
	#ö°ru˘i⁄_poöãr
(
ªgs
Ë(‘egs)->
˝0_ïc
)

	)

81 
show_ªgs
(
±_ªgs
 *);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/reg.h

11 #i‚de‡
__ASM_MIPS_REG_H


12 
	#__ASM_MIPS_REG_H


	)

19 
	#EF_REG0
 6

	)

20 
	#EF_REG1
 7

	)

21 
	#EF_REG2
 8

	)

22 
	#EF_REG3
 9

	)

23 
	#EF_REG4
 10

	)

24 
	#EF_REG5
 11

	)

25 
	#EF_REG6
 12

	)

26 
	#EF_REG7
 13

	)

27 
	#EF_REG8
 14

	)

28 
	#EF_REG9
 15

	)

29 
	#EF_REG10
 16

	)

30 
	#EF_REG11
 17

	)

31 
	#EF_REG12
 18

	)

32 
	#EF_REG13
 19

	)

33 
	#EF_REG14
 20

	)

34 
	#EF_REG15
 21

	)

35 
	#EF_REG16
 22

	)

36 
	#EF_REG17
 23

	)

37 
	#EF_REG18
 24

	)

38 
	#EF_REG19
 25

	)

39 
	#EF_REG20
 26

	)

40 
	#EF_REG21
 27

	)

41 
	#EF_REG22
 28

	)

42 
	#EF_REG23
 29

	)

43 
	#EF_REG24
 30

	)

44 
	#EF_REG25
 31

	)

48 
	#EF_REG28
 34

	)

49 
	#EF_REG29
 35

	)

50 
	#EF_REG30
 36

	)

51 
	#EF_REG31
 37

	)

56 
	#EF_LO
 38

	)

57 
	#EF_HI
 39

	)

59 
	#EF_CP0_EPC
 40

	)

60 
	#EF_CP0_BADVADDR
 41

	)

61 
	#EF_CP0_STATUS
 42

	)

62 
	#EF_CP0_CAUSE
 44

	)

64 
	#EF_SIZE
 180

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/regdef.h

11 #i‚de‡
__ASM_MIPS_REGDEF_H


12 
	#__ASM_MIPS_REGDEF_H


	)

17 
	#zîo
 
$0


	)

18 
	#AT
 
$1


	)

19 
	#v0
 
$2


	)

20 
	#v1
 
$3


	)

21 
	#a0
 
$4


	)

22 
	#a1
 
$5


	)

23 
	#a2
 
$6


	)

24 
	#a3
 
$7


	)

25 
	#t0
 
$8


	)

26 
	#t1
 
$9


	)

27 
	#t2
 
$10


	)

28 
	#t3
 
$11


	)

29 
	#t4
 
$12


	)

30 
	#t5
 
$13


	)

31 
	#t6
 
$14


	)

32 
	#t7
 
$15


	)

33 
	#s0
 
$16


	)

34 
	#s1
 
$17


	)

35 
	#s2
 
$18


	)

36 
	#s3
 
$19


	)

37 
	#s4
 
$20


	)

38 
	#s5
 
$21


	)

39 
	#s6
 
$22


	)

40 
	#s7
 
$23


	)

41 
	#t8
 
$24


	)

42 
	#t9
 
$25


	)

43 
	#jp
 
$25


	)

44 
	#k0
 
$26


	)

45 
	#k1
 
$27


	)

46 
	#gp
 
$28


	)

47 
	#•
 
$29


	)

48 
	#Â
 
$30


	)

49 
	#s8
 
$30


	)

50 
	#ø
 
$31


	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/sgidefs.h

10 #i‚de‡
__ASM_SGIDEFS_H


11 
	#__ASM_SGIDEFS_H


	)

18 #îr‹ 
U£
 
a
 
Löux
 
compûî
 
‹
 
give
 
up
.

29 
	#_MIPS_ISA_MIPS1
 1

	)

30 
	#_MIPS_ISA_MIPS2
 2

	)

31 
	#_MIPS_ISA_MIPS3
 3

	)

32 
	#_MIPS_ISA_MIPS4
 4

	)

33 
	#_MIPS_ISA_MIPS5
 5

	)

34 
	#_MIPS_ISA_MIPS32
 6

	)

35 
	#_MIPS_ISA_MIPS64
 7

	)

40 
	#_MIPS_SIM_ABI32
 1

	)

41 
	#_MIPS_SIM_NABI32
 2

	)

42 
	#_MIPS_SIM_ABI64
 3

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/string.h

9 #i‚de‡
__ASM_MIPS_STRING_H


10 
	#__ASM_MIPS_STRING_H


	)

12 
	~<löux/c⁄fig.h
>

14 
	#__HAVE_ARCH_STRCPY


	)

15 
__ölöe__
 *
	$°r˝y
(*
__de°
, 
__c⁄°__
 *
__§c
)

17 *
__xde°
 = 
__de°
;

19 
__asm__
 
	`__vﬁ©ûe__
(

29 : "Ù" (
__de°
), "Ù" (
__§c
)

30 : "0" (
__de°
), "1" (
__§c
)

33  
__xde°
;

34 
	}
}

36 
	#__HAVE_ARCH_STRNCPY


	)

37 
__ölöe__
 *
	$°∫˝y
(*
__de°
, 
__c⁄°__
 *
__§c
, 
size_t
 
__n
)

39 *
__xde°
 = 
__de°
;

41 i‡(
__n
 == 0)

42  
__xde°
;

44 
__asm__
 
	`__vﬁ©ûe__
(

57 : "Ù" (
__de°
), "Ù" (
__§c
), "Ù" (
__n
)

58 : "0" (
__de°
), "1" (
__§c
), "2" (
__n
)

61  
__de°
;

62 
	}
}

64 
	#__HAVE_ARCH_STRCMP


	)

65 
__ölöe__
 
	$°rcmp
(
__c⁄°__
 *
__cs
, __c⁄°__ *
__˘
)

67 
__ªs
;

69 
__asm__
 
	`__vﬁ©ûe__
(

79 #i‡
	`deföed
(
CONFIG_CPU_R3000
)

86 : "Ù" (
__cs
), "Ù" (
__˘
), "Ù" (
__ªs
)

87 : "0" (
__cs
), "1" (
__˘
)

90  
__ªs
;

91 
	}
}

93 
	#__HAVE_ARCH_STRNCMP


	)

94 
__ölöe__
 

95 
	$°∫cmp
(
__c⁄°__
 *
__cs
, __c⁄°__ *
__˘
, 
size_t
 
__cou¡
)

97 
__ªs
;

99 
__asm__
 
	`__vﬁ©ûe__
(

111 #i‡
	`deföed
(
CONFIG_CPU_R3000
)

118 : "Ù" (
__cs
), "Ù" (
__˘
), "Ù" (
__cou¡
), "Ù" (
__ªs
)

119 : "0" (
__cs
), "1" (
__˘
), "2" (
__cou¡
)

122  
__ªs
;

123 
	}
}

125 #unde‡
__HAVE_ARCH_MEMSET


126 *
mem£t
(*
__s
, 
__c
, 
size_t
 
__cou¡
);

128 #unde‡
__HAVE_ARCH_MEMCPY


129 *
mem˝y
(*
__to
, 
__c⁄°__
 *
__‰om
, 
size_t
 
__n
);

131 #unde‡
__HAVE_ARCH_MEMMOVE


132 *
memmove
(*
__de°
, 
__c⁄°__
 *
__§c
, 
size_t
 
__n
);

135 
	#__HAVE_ARCH_BCOPY


	)

137 
	#__HAVE_ARCH_MEMSCAN


	)

138 
__ölöe__
 *
	$memsˇn
(*
__addr
, 
__c
, 
size_t
 
__size
)

140 *
__íd
 = (*)
__addr
 + 
__size
;

142 
	`__asm__
(".set\tpush\n\t"

150 : "Ù" (
__addr
), "Ù" (
__íd
)

151 : "0" (
__addr
), "1" (
__íd
), "r" (
__c
)

154  
__addr
;

155 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/system.h

16 #i‚de‡
_ASM_SYSTEM_H


17 
	#_ASM_SYSTEM_H


	)

19 
	~<löux/c⁄fig.h
>

20 
	~<asm/sgidefs.h
>

21 
	~<asm/±ø˚.h
>

23 
	~<löux/kî√l.h
>

26 
__ölöe__
 

27 
	$__°i
()

29 
__asm__
 
	`__vﬁ©ûe__
(

41 
	}
}

50 
__ölöe__
 

51 
	$__˛i
()

53 
__asm__
 
	`__vﬁ©ûe__
(

69 
	}
}

71 
	#__ßve_Êags
(
x
) \

72 
__asm__
 
	`__vﬁ©ûe__
( \

77 : "Ù" (
x
))

	)

79 
	#__ßve_™d_˛i
(
x
) \

80 
__asm__
 
	`__vﬁ©ûe__
( \

93 : "Ù" (
x
) \

95 : "$1", "mem‹y")

	)

97 
	#__ª°‹e_Êags
(
Êags
) \

99 
__tmp1
; \

101 
__asm__
 
	`__vﬁ©ûe__
( \

115 : "Ù" (
__tmp1
) \

116 : "0" (
Êags
) \

118 } 0)

	)

120 #ifde‡
CONFIG_SMP


122 
__globÆ_°i
();

123 
__globÆ_˛i
();

124 
__globÆ_ßve_Êags
();

125 
__globÆ_ª°‹e_Êags
();

126 
	#°i
(Ë
	`__globÆ_°i
()

	)

127 
	#˛i
(Ë
	`__globÆ_˛i
()

	)

128 
	#ßve_Êags
(
x
Ëdÿ{ x = 
	`__globÆ_ßve_Êags
(); } 0)

	)

129 
	#ª°‹e_Êags
(
x
Ë
	`__globÆ_ª°‹e_Êags
(x)

	)

130 
	#ßve_™d_˛i
(
x
Ëdÿ{ 
	`ßve_Êags
(x); 
	`˛i
(); } 0)

	)

134 
	#°i
(Ë
	`__°i
()

	)

135 
	#˛i
(Ë
	`__˛i
()

	)

136 
	#ßve_Êags
(
x
Ë
	`__ßve_Êags
(x)

	)

137 
	#ßve_™d_˛i
(
x
Ë
	`__ßve_™d_˛i
(x)

	)

138 
	#ª°‹e_Êags
(
x
Ë
	`__ª°‹e_Êags
(x)

	)

143 
	#loˇl_úq_ßve
(
x
Ë
	`__ßve_™d_˛i
(x);

	)

144 
	#loˇl_úq_ª°‹e
(
x
Ë
	`__ª°‹e_Êags
(x);

	)

145 
	#loˇl_úq_dißbÀ
(Ë
	`__˛i
();

	)

146 
	#loˇl_úq_íabÀ
(Ë
	`__°i
();

	)

151 #ifde‡
CONFIG_CPU_HAS_WB


153 
	~<asm/wbÊush.h
>

154 
	#rmb
(Ëdÿ{ } 0)

	)

155 
	#wmb
(Ë
	`wbÊush
()

	)

156 
	#mb
(Ë
	`wbÊush
()

	)

160 
	#mb
() \

161 
__asm__
 
	`__vﬁ©ûe__
( \

169 : "mem‹y")

	)

170 
	#rmb
(Ë
	`mb
()

	)

171 
	#wmb
(Ë
	`mb
()

	)

175 #ifde‡
CONFIG_SMP


176 
	#smp_mb
(Ë
	`mb
()

	)

177 
	#smp_rmb
(Ë
	`rmb
()

	)

178 
	#smp_wmb
(Ë
	`wmb
()

	)

180 
	#smp_mb
(Ë
	`b¨rõr
()

	)

181 
	#smp_rmb
(Ë
	`b¨rõr
()

	)

182 
	#smp_wmb
(Ë
	`b¨rõr
()

	)

185 
	#£t_mb
(
v¨
, 
vÆue
) \

186 dÿ{ 
v¨
 = 
vÆue
; 
	`mb
(); } 0)

	)

188 
	#£t_wmb
(
v¨
, 
vÆue
) \

189 dÿ{ 
v¨
 = 
vÆue
; 
	`wmb
(); } 0)

	)

191 #i‡!
deföed
 (
_LANGUAGE_ASSEMBLY
)

197 
asmlökage
 *
ªsume
(*
œ°
, *
√xt
);

201 
	#¥ï¨e_to_swôch
(Ëdÿ{ } 0)

	)

202 
	#swôch_to
(
¥ev
,
√xt
,
œ°
) \

204 (
œ°
Ë
	`ªsume
(
¥ev
, 
√xt
); \

205 } 0)

	)

211 
__ölöe__
 
	$xchg_u32
(vﬁ©ûê* 
m
, 
vÆ
)

213 #ifde‡
CONFIG_CPU_HAS_LLSC


214 
dummy
;

216 
__asm__
 
	`__vﬁ©ûe__
(

226 : "Ù" (
vÆ
), "=o" (*
m
), "Ù" (
dummy
)

227 : "o" (*
m
), "2" (
vÆ
)

230  
vÆ
;

232 
Êags
, 
ªtvÆ
;

234 
	`ßve_Êags
(
Êags
);

235 
	`˛i
();

236 
ªtvÆ
 = *
m
;

237 *
m
 = 
vÆ
;

238 
	`ª°‹e_Êags
(
Êags
);

239  
ªtvÆ
;

241 
	}
}

243 
	#xchg
(
±r
,
x
Ë((
	`__ty≥of__
(*’å)))
	`__xchg
(()(x),’å),(*’å))))

	)

244 
	#ès
(
±r
Ë(
	`xchg
(’å),1))

	)

246 
__ölöe__
 

247 
	$__xchg
(
x
, vﬁ©ûê* 
±r
, 
size
)

249 
size
) {

251  
	`xchg_u32
(
±r
, 
x
);

253  
x
;

254 
	}
}

256 *
£t_ex˚±_ve˘‹
(
n
, *
addr
);

258 
	$__dõ
(c⁄° *, 
±_ªgs
 *, c⁄° *
whîe
,

259 
löe
Ë
	`__©åibuã__
((
n‹ëu∫
));

260 
	`__dõ_if_kî√l
(c⁄° *, 
±_ªgs
 *, c⁄° *
whîe
,

261 
löe
);

263 
	#dõ
(
msg
, 
ªgs
) \

264 
	`__dõ
(
msg
, 
ªgs
, 
__FILE__
 ":"
__FUNCTION__
, 
__LINE__
)

	)

265 
	#dõ_if_kî√l
(
msg
, 
ªgs
) \

266 
	`__dõ_if_kî√l
(
msg
, 
ªgs
, 
__FILE__
 ":"
__FUNCTION__
, 
__LINE__
)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/types.h

10 #i‚de‡
_ASM_TYPES_H


11 
	#_ASM_TYPES_H


	)

13 
	tumode_t
;

20 
__sig√d__
 
	t__s8
;

21 
	t__u8
;

23 
__sig√d__
 
	t__s16
;

24 
	t__u16
;

26 
__sig√d__
 
	t__s32
;

27 
	t__u32
;

29 #i‡(
_MIPS_SZLONG
 == 64)

31 
__sig√d__
 
	t__s64
;

32 
	t__u64
;

36 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

37 
__sig√d__
 
	t__s64
;

38 
	t__u64
;

46 #ifde‡
__KERNEL__


48 
__sig√d
 
	ts8
;

49 
	tu8
;

51 
__sig√d
 
	ts16
;

52 
	tu16
;

54 
__sig√d
 
	ts32
;

55 
	tu32
;

57 #i‡(
_MIPS_SZLONG
 == 64)

59 
__sig√d__
 
	ts64
;

60 
	tu64
;

64 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

65 
__sig√d__
 
	ts64
;

66 
	tu64
;

71 
	#BITS_PER_LONG
 
_MIPS_SZLONG


	)

73 
	tdma_addr_t
;

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/u-boot.h

24 #i‚de‡
_U_BOOT_H_


25 
	#_U_BOOT_H_
 1

	)

27 
	sbd_öfo
 {

28 
	mbi_baudøã
;

29 
	mbi_ù_addr
;

30 
	mbi_íëaddr
[6];

31 
	mbi_¨ch_numbî
;

32 
	mbi_boŸ_∑øms
;

33 
	mbi_mem°¨t
;

34 
	mbi_memsize
;

35 
	mbi_Êash°¨t
;

36 
	mbi_Êashsize
;

37 
	mbi_Êashoff£t
;

38 } 
	tbd_t
;

39 
	#bi_ív_d©a
 
bi_ív
->
d©a


	)

40 
	#bi_ív_¸c
 
bi_ív
->
¸c


	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/addrspace.h

11 #i‚de‡
__ASM_MIPS_ADDRSPACE_H


12 
	#__ASM_MIPS_ADDRSPACE_H


	)

17 
	#KUSEG
 0x00000000

	)

18 
	#KSEG0
 0x80000000

	)

19 
	#KSEG1
 0xa0000000

	)

20 
	#KSEG2
 0xc0000000

	)

21 
	#KSEG3
 0xe0000000

	)

23 
	#K0BASE
 
KSEG0


	)

28 #i‚de‡
__ASSEMBLY__


29 
	#KSEGX
(
a
Ë((()◊)Ë& 0xe0000000)

	)

31 
	#KSEGX
(
a
Ë(◊Ë& 0xe0000000)

	)

37 #i‚de‡
__ASSEMBLY__


38 
	#PHYSADDR
(
a
Ë((()◊)Ë& 0x1fffffff)

	)

40 
	#PHYSADDR
(
a
Ë(◊Ë& 0x1fffffff)

	)

46 #i‚de‡
__ASSEMBLY__


47 #i‡
deföed
(
CONFIG_AU1X00
Ë|| deföed(
CONFIG_TB0229
)

50 
	#UNCACHED_SDRAM
(
a
Ë((()◊)Ë| 0x20000000)

	)

52 
	#UNCACHED_SDRAM
(
a
Ë
	`PHYSADDR
◊)

	)

58 #i‚de‡
__ASSEMBLY__


59 
	#KSEG0ADDR
(
a
Ë((
	`__ty≥of__
◊))((()◊Ë& 0x1fffffffË| 
KSEG0
))

	)

60 
	#KSEG1ADDR
(
a
Ë((
	`__ty≥of__
◊))((()◊Ë& 0x1fffffffË| 
KSEG1
))

	)

61 
	#KSEG2ADDR
(
a
Ë((
	`__ty≥of__
◊))((()◊Ë& 0x1fffffffË| 
KSEG2
))

	)

62 
	#KSEG3ADDR
(
a
Ë((
	`__ty≥of__
◊))((()◊Ë& 0x1fffffffË| 
KSEG3
))

	)

64 
	#KSEG0ADDR
(
a
Ë((◊Ë& 0x1fffffffË| 
KSEG0
)

	)

65 
	#KSEG1ADDR
(
a
Ë((◊Ë& 0x1fffffffË| 
KSEG1
)

	)

66 
	#KSEG2ADDR
(
a
Ë((◊Ë& 0x1fffffffË| 
KSEG2
)

	)

67 
	#KSEG3ADDR
(
a
Ë((◊Ë& 0x1fffffffË| 
KSEG3
)

	)

73 
	#XKUSEG
 0x0000000000000000

	)

74 
	#XKSSEG
 0x4000000000000000

	)

75 
	#XKPHYS
 0x8000000000000000

	)

76 
	#XKSEG
 0xc000000000000000

	)

77 
	#CKSEG0
 0xffffffff80000000

	)

78 
	#CKSEG1
 0xfffffffÁ0000000

	)

79 
	#CKSSEG
 0xffffffffc0000000

	)

80 
	#CKSEG3
 0xfffffff„0000000

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/au1x00.h

35 #i‚de‡
_AU1X00_H_


36 
	#_AU1X00_H_


	)

38 #i‚de‡
__ASSEMBLY__


40 
ölöe
 
	$au_sync
()

42 
__asm__
 volatile ("sync");

43 
	}
}

45 
ölöe
 
	$au_sync_udñay
(
us
)

47 
__asm__
 volatile ("sync");

48 
	`udñay
(
us
);

49 
	}
}

51 
ölöe
 
	$au_wrôeb
(
u8
 
vÆ
, 
ªg
)

53 *(vﬁ©ûê
u8
 *)(
ªg
Ë
vÆ
;

54 
	}
}

56 
ölöe
 
	$au_wrôew
(
u16
 
vÆ
, 
ªg
)

58 *(vﬁ©ûê
u16
 *)(
ªg
Ë
vÆ
;

59 
	}
}

61 
ölöe
 
	$au_wrôñ
(
u32
 
vÆ
, 
ªg
)

63 *(vﬁ©ûê
u32
 *)(
ªg
Ë
vÆ
;

64 
	}
}

66 
ölöe
 
u8
 
	$au_ªadb
(
p‹t
)

68  (*(vﬁ©ûê
u8
 *)
p‹t
);

69 
	}
}

71 
ölöe
 
u16
 
	$au_ªadw
(
p‹t
)

73  (*(vﬁ©ûê
u16
 *)
p‹t
);

74 
	}
}

76 
ölöe
 
u32
 
	$au_ªadl
(
p‹t
)

78  (*(vﬁ©ûê
u32
 *)
p‹t
);

79 
	}
}

87 
__ölöe__
 
	$__ûog2
(
x
)

89 
lz
;

91 
asm
 volatile (

99 : "Ù" (
lz
)

100 : "r" (
x
));

102  31 - 
lz
;

103 
	}
}

105 
__ölöe__
 
	$au_ffz
(
x
)

107 i‡((
x
 = ~x) == 0)

109  
	`__ûog2
(
x
 & -x);

110 
	}
}

117 
__ölöe__
 
	$au_ffs
(
x
)

119  
	`__ûog2
(
x
 & -x) + 1;

120 
	}
}

124 #ifde‡
CONFIG_PM


126 
	#ALLINTS
 (
IE_IRQ0
 | 
IE_IRQ1
 | 
IE_IRQ2
 | 
IE_IRQ3
 | 
IE_IRQ4
)

	)

128 
	#ALLINTS
 (
IE_IRQ0
 | 
IE_IRQ1
 | 
IE_IRQ2
 | 
IE_IRQ3
 | 
IE_IRQ4
 | 
IE_IRQ5
)

	)

131 
	#CP0_IWATCHLO
 
$18
,1

	)

132 
	#CP0_DEBUG
 
$23


	)

135 #ifde‡
CONFIG_AU1550


137 
	#MEM_SDMODE0
 0xB4000800

	)

138 
	#MEM_SDMODE1
 0xB4000808

	)

139 
	#MEM_SDMODE2
 0xB4000810

	)

141 
	#MEM_SDADDR0
 0xB4000820

	)

142 
	#MEM_SDADDR1
 0xB4000828

	)

143 
	#MEM_SDADDR2
 0xB4000830

	)

145 
	#MEM_SDCONFIGA
 0xB4000840

	)

146 
	#MEM_SDCONFIGB
 0xB4000848

	)

147 
	#MEM_SDPRECMD
 0xB40008c0

	)

148 
	#MEM_SDAUTOREF
 0xB40008c8

	)

150 
	#MEM_SDWRMD0
 0xB4000880

	)

151 
	#MEM_SDWRMD1
 0xB4000888

	)

152 
	#MEM_SDWRMD2
 0xB4000890

	)

156 
	#MEM_SDMODE0
 0xB4000000

	)

157 
	#MEM_SDMODE1
 0xB4000004

	)

158 
	#MEM_SDMODE2
 0xB4000008

	)

160 
	#MEM_SDADDR0
 0xB400000C

	)

161 
	#MEM_SDADDR1
 0xB4000010

	)

162 
	#MEM_SDADDR2
 0xB4000014

	)

164 
	#MEM_SDREFCFG
 0xB4000018

	)

165 
	#MEM_SDPRECMD
 0xB400001C

	)

166 
	#MEM_SDAUTOREF
 0xB4000020

	)

168 
	#MEM_SDWRMD0
 0xB4000024

	)

169 
	#MEM_SDWRMD1
 0xB4000028

	)

170 
	#MEM_SDWRMD2
 0xB400002C

	)

174 
	#MEM_SDSLEEP
 0xB4000030

	)

175 
	#MEM_SDSMCKE
 0xB4000034

	)

178 
	#MEM_STCFG0
 0xB4001000

	)

179 
	#MEM_STTIME0
 0xB4001004

	)

180 
	#MEM_STADDR0
 0xB4001008

	)

182 
	#MEM_STCFG1
 0xB4001010

	)

183 
	#MEM_STTIME1
 0xB4001014

	)

184 
	#MEM_STADDR1
 0xB4001018

	)

186 
	#MEM_STCFG2
 0xB4001020

	)

187 
	#MEM_STTIME2
 0xB4001024

	)

188 
	#MEM_STADDR2
 0xB4001028

	)

190 
	#MEM_STCFG3
 0xB4001030

	)

191 
	#MEM_STTIME3
 0xB4001034

	)

192 
	#MEM_STADDR3
 0xB4001038

	)

195 
	#IC0_CFG0RD
 0xB0400040

	)

196 
	#IC0_CFG0SET
 0xB0400040

	)

197 
	#IC0_CFG0CLR
 0xB0400044

	)

199 
	#IC0_CFG1RD
 0xB0400048

	)

200 
	#IC0_CFG1SET
 0xB0400048

	)

201 
	#IC0_CFG1CLR
 0xB040004C

	)

203 
	#IC0_CFG2RD
 0xB0400050

	)

204 
	#IC0_CFG2SET
 0xB0400050

	)

205 
	#IC0_CFG2CLR
 0xB0400054

	)

207 
	#IC0_REQ0INT
 0xB0400054

	)

208 
	#IC0_SRCRD
 0xB0400058

	)

209 
	#IC0_SRCSET
 0xB0400058

	)

210 
	#IC0_SRCCLR
 0xB040005C

	)

211 
	#IC0_REQ1INT
 0xB040005C

	)

213 
	#IC0_ASSIGNRD
 0xB0400060

	)

214 
	#IC0_ASSIGNSET
 0xB0400060

	)

215 
	#IC0_ASSIGNCLR
 0xB0400064

	)

217 
	#IC0_WAKERD
 0xB0400068

	)

218 
	#IC0_WAKESET
 0xB0400068

	)

219 
	#IC0_WAKECLR
 0xB040006C

	)

221 
	#IC0_MASKRD
 0xB0400070

	)

222 
	#IC0_MASKSET
 0xB0400070

	)

223 
	#IC0_MASKCLR
 0xB0400074

	)

225 
	#IC0_RISINGRD
 0xB0400078

	)

226 
	#IC0_RISINGCLR
 0xB0400078

	)

227 
	#IC0_FALLINGRD
 0xB040007C

	)

228 
	#IC0_FALLINGCLR
 0xB040007C

	)

230 
	#IC0_TESTBIT
 0xB0400080

	)

233 
	#IC1_CFG0RD
 0xB1800040

	)

234 
	#IC1_CFG0SET
 0xB1800040

	)

235 
	#IC1_CFG0CLR
 0xB1800044

	)

237 
	#IC1_CFG1RD
 0xB1800048

	)

238 
	#IC1_CFG1SET
 0xB1800048

	)

239 
	#IC1_CFG1CLR
 0xB180004C

	)

241 
	#IC1_CFG2RD
 0xB1800050

	)

242 
	#IC1_CFG2SET
 0xB1800050

	)

243 
	#IC1_CFG2CLR
 0xB1800054

	)

245 
	#IC1_REQ0INT
 0xB1800054

	)

246 
	#IC1_SRCRD
 0xB1800058

	)

247 
	#IC1_SRCSET
 0xB1800058

	)

248 
	#IC1_SRCCLR
 0xB180005C

	)

249 
	#IC1_REQ1INT
 0xB180005C

	)

251 
	#IC1_ASSIGNRD
 0xB1800060

	)

252 
	#IC1_ASSIGNSET
 0xB1800060

	)

253 
	#IC1_ASSIGNCLR
 0xB1800064

	)

255 
	#IC1_WAKERD
 0xB1800068

	)

256 
	#IC1_WAKESET
 0xB1800068

	)

257 
	#IC1_WAKECLR
 0xB180006C

	)

259 
	#IC1_MASKRD
 0xB1800070

	)

260 
	#IC1_MASKSET
 0xB1800070

	)

261 
	#IC1_MASKCLR
 0xB1800074

	)

263 
	#IC1_RISINGRD
 0xB1800078

	)

264 
	#IC1_RISINGCLR
 0xB1800078

	)

265 
	#IC1_FALLINGRD
 0xB180007C

	)

266 
	#IC1_FALLINGCLR
 0xB180007C

	)

268 
	#IC1_TESTBIT
 0xB1800080

	)

271 
	#INTC_INT_DISABLED
 0

	)

272 
	#INTC_INT_RISE_EDGE
 0x1

	)

273 
	#INTC_INT_FALL_EDGE
 0x2

	)

274 
	#INTC_INT_RISE_AND_FALL_EDGE
 0x3

	)

275 
	#INTC_INT_HIGH_LEVEL
 0x5

	)

276 
	#INTC_INT_LOW_LEVEL
 0x6

	)

277 
	#INTC_INT_HIGH_AND_LOW_LEVEL
 0x7

	)

280 
	#AU1X00_UART0_INT
 0

	)

281 
	#AU1000_UART1_INT
 1

	)

282 
	#AU1000_UART2_INT
 2

	)

284 
	#AU1500_PCI_INTA
 1

	)

285 
	#AU1500_PCI_INTB
 2

	)

287 
	#AU1X00_UART3_INT
 3

	)

289 
	#AU1000_SSI0_INT
 4

	)

290 
	#AU1000_SSI1_INT
 5

	)

292 
	#AU1500_PCI_INTC
 4

	)

293 
	#AU1500_PCI_INTD
 5

	)

295 
	#AU1X00_DMA_INT_BASE
 6

	)

296 
	#AU1X00_TOY_INT
 14

	)

297 
	#AU1X00_TOY_MATCH0_INT
 15

	)

298 
	#AU1X00_TOY_MATCH1_INT
 16

	)

299 
	#AU1X00_TOY_MATCH2_INT
 17

	)

300 
	#AU1X00_RTC_INT
 18

	)

301 
	#AU1X00_RTC_MATCH0_INT
 19

	)

302 
	#AU1X00_RTC_MATCH1_INT
 20

	)

303 
	#AU1X00_RTC_MATCH2_INT
 21

	)

304 
	#AU1000_IRDA_TX_INT
 22

	)

305 
	#AU1000_IRDA_RX_INT
 23

	)

306 
	#AU1X00_USB_DEV_REQ_INT
 24

	)

307 
	#AU1X00_USB_DEV_SUS_INT
 25

	)

308 
	#AU1X00_USB_HOST_INT
 26

	)

309 
	#AU1X00_ACSYNC_INT
 27

	)

310 
	#AU1X00_MAC0_DMA_INT
 28

	)

311 
	#AU1X00_MAC1_DMA_INT
 29

	)

312 
	#AU1X00_ETH0_IRQ
 
AU1X00_MAC0_DMA_INT


	)

313 
	#AU1X00_ETH1_IRQ
 
AU1X00_MAC1_DMA_INT


	)

314 
	#AU1000_I2S_UO_INT
 30

	)

315 
	#AU1X00_AC97C_INT
 31

	)

316 
	#AU1X00_LAST_INTC0_INT
 
AU1X00_AC97C_INT


	)

317 
	#AU1X00_GPIO_0
 32

	)

318 
	#AU1X00_GPIO_1
 33

	)

319 
	#AU1X00_GPIO_2
 34

	)

320 
	#AU1X00_GPIO_3
 35

	)

321 
	#AU1X00_GPIO_4
 36

	)

322 
	#AU1X00_GPIO_5
 37

	)

323 
	#AU1X00_GPIO_6
 38

	)

324 
	#AU1X00_GPIO_7
 39

	)

325 
	#AU1X00_GPIO_8
 40

	)

326 
	#AU1X00_GPIO_9
 41

	)

327 
	#AU1X00_GPIO_10
 42

	)

328 
	#AU1X00_GPIO_11
 43

	)

329 
	#AU1X00_GPIO_12
 44

	)

330 
	#AU1X00_GPIO_13
 45

	)

331 
	#AU1X00_GPIO_14
 46

	)

332 
	#AU1X00_GPIO_15
 47

	)

335 
	#AU1000_GPIO_16
 48

	)

336 
	#AU1000_GPIO_17
 49

	)

337 
	#AU1000_GPIO_18
 50

	)

338 
	#AU1000_GPIO_19
 51

	)

339 
	#AU1000_GPIO_20
 52

	)

340 
	#AU1000_GPIO_21
 53

	)

341 
	#AU1000_GPIO_22
 54

	)

342 
	#AU1000_GPIO_23
 55

	)

343 
	#AU1000_GPIO_24
 56

	)

344 
	#AU1000_GPIO_25
 57

	)

345 
	#AU1000_GPIO_26
 58

	)

346 
	#AU1000_GPIO_27
 59

	)

347 
	#AU1000_GPIO_28
 60

	)

348 
	#AU1000_GPIO_29
 61

	)

349 
	#AU1000_GPIO_30
 62

	)

350 
	#AU1000_GPIO_31
 63

	)

353 
	#AU1500_GPIO_200
 48

	)

354 
	#AU1500_GPIO_201
 49

	)

355 
	#AU1500_GPIO_202
 50

	)

356 
	#AU1500_GPIO_203
 51

	)

357 
	#AU1500_GPIO_20
 52

	)

358 
	#AU1500_GPIO_204
 53

	)

359 
	#AU1500_GPIO_205
 54

	)

360 
	#AU1500_GPIO_23
 55

	)

361 
	#AU1500_GPIO_24
 56

	)

362 
	#AU1500_GPIO_25
 57

	)

363 
	#AU1500_GPIO_26
 58

	)

364 
	#AU1500_GPIO_27
 59

	)

365 
	#AU1500_GPIO_28
 60

	)

366 
	#AU1500_GPIO_206
 61

	)

367 
	#AU1500_GPIO_207
 62

	)

368 
	#AU1500_GPIO_208_215
 63

	)

370 
	#AU1X00_MAX_INTR
 63

	)

372 
	#AU1100_SD
 2

	)

373 
	#AU1100_GPIO_208_215
 29

	)

377 
	#SYS_BASE
 0xB1900000

	)

378 
	#SYS_COUNTER_CNTRL
 (
SYS_BASE
 + 0x14)

	)

379 
	#SYS_CNTRL_E1S
 (1<<23)

	)

380 
	#SYS_CNTRL_T1S
 (1<<20)

	)

381 
	#SYS_CNTRL_M21
 (1<<19)

	)

382 
	#SYS_CNTRL_M11
 (1<<18)

	)

383 
	#SYS_CNTRL_M01
 (1<<17)

	)

384 
	#SYS_CNTRL_C1S
 (1<<16)

	)

385 
	#SYS_CNTRL_BP
 (1<<14)

	)

386 
	#SYS_CNTRL_EN1
 (1<<13)

	)

387 
	#SYS_CNTRL_BT1
 (1<<12)

	)

388 
	#SYS_CNTRL_EN0
 (1<<11)

	)

389 
	#SYS_CNTRL_BT0
 (1<<10)

	)

390 
	#SYS_CNTRL_E0
 (1<<8)

	)

391 
	#SYS_CNTRL_E0S
 (1<<7)

	)

392 
	#SYS_CNTRL_32S
 (1<<5)

	)

393 
	#SYS_CNTRL_T0S
 (1<<4)

	)

394 
	#SYS_CNTRL_M20
 (1<<3)

	)

395 
	#SYS_CNTRL_M10
 (1<<2)

	)

396 
	#SYS_CNTRL_M00
 (1<<1)

	)

397 
	#SYS_CNTRL_C0S
 (1<<0)

	)

400 
	#SYS_TOYTRIM
 (
SYS_BASE
 + 0)

	)

401 
	#SYS_TOYWRITE
 (
SYS_BASE
 + 4)

	)

402 
	#SYS_TOYMATCH0
 (
SYS_BASE
 + 8)

	)

403 
	#SYS_TOYMATCH1
 (
SYS_BASE
 + 0xC)

	)

404 
	#SYS_TOYMATCH2
 (
SYS_BASE
 + 0x10)

	)

405 
	#SYS_TOYREAD
 (
SYS_BASE
 + 0x40)

	)

408 
	#SYS_RTCTRIM
 (
SYS_BASE
 + 0x44)

	)

409 
	#SYS_RTCWRITE
 (
SYS_BASE
 + 0x48)

	)

410 
	#SYS_RTCMATCH0
 (
SYS_BASE
 + 0x4C)

	)

411 
	#SYS_RTCMATCH1
 (
SYS_BASE
 + 0x50)

	)

412 
	#SYS_RTCMATCH2
 (
SYS_BASE
 + 0x54)

	)

413 
	#SYS_RTCREAD
 (
SYS_BASE
 + 0x58)

	)

416 
	#I2S_DATA
 0xB1000000

	)

417 
	#I2S_DATA_MASK
 (0xffffff)

	)

418 
	#I2S_CONFIG
 0xB1000004

	)

419 
	#I2S_CONFIG_XU
 (1<<25)

	)

420 
	#I2S_CONFIG_XO
 (1<<24)

	)

421 
	#I2S_CONFIG_RU
 (1<<23)

	)

422 
	#I2S_CONFIG_RO
 (1<<22)

	)

423 
	#I2S_CONFIG_TR
 (1<<21)

	)

424 
	#I2S_CONFIG_TE
 (1<<20)

	)

425 
	#I2S_CONFIG_TF
 (1<<19)

	)

426 
	#I2S_CONFIG_RR
 (1<<18)

	)

427 
	#I2S_CONFIG_RE
 (1<<17)

	)

428 
	#I2S_CONFIG_RF
 (1<<16)

	)

429 
	#I2S_CONFIG_PD
 (1<<11)

	)

430 
	#I2S_CONFIG_LB
 (1<<10)

	)

431 
	#I2S_CONFIG_IC
 (1<<9)

	)

432 
	#I2S_CONFIG_FM_BIT
 7

	)

433 
	#I2S_CONFIG_FM_MASK
 (0x3 << 
I2S_CONFIG_FM_BIT
)

	)

434 
	#I2S_CONFIG_FM_I2S
 (0x0 << 
I2S_CONFIG_FM_BIT
)

	)

435 
	#I2S_CONFIG_FM_LJ
 (0x1 << 
I2S_CONFIG_FM_BIT
)

	)

436 
	#I2S_CONFIG_FM_RJ
 (0x2 << 
I2S_CONFIG_FM_BIT
)

	)

437 
	#I2S_CONFIG_TN
 (1<<6)

	)

438 
	#I2S_CONFIG_RN
 (1<<5)

	)

439 
	#I2S_CONFIG_SZ_BIT
 0

	)

440 
	#I2S_CONFIG_SZ_MASK
 (0x1F << 
I2S_CONFIG_SZ_BIT
)

	)

442 
	#I2S_CONTROL
 0xB1000008

	)

443 
	#I2S_CONTROL_D
 (1<<1)

	)

444 
	#I2S_CONTROL_CE
 (1<<0)

	)

448 
	#USB_OHCI_BASE
 0x10100000

	)

449 
	#USB_OHCI_LEN
 0x00100000

	)

450 
	#USB_HOST_CONFIG
 0xB017fffc

	)

453 
	#USBD_EP0RD
 0xB0200000

	)

454 
	#USBD_EP0WR
 0xB0200004

	)

455 
	#USBD_EP2WR
 0xB0200008

	)

456 
	#USBD_EP3WR
 0xB020000C

	)

457 
	#USBD_EP4RD
 0xB0200010

	)

458 
	#USBD_EP5RD
 0xB0200014

	)

459 
	#USBD_INTEN
 0xB0200018

	)

460 
	#USBD_INTSTAT
 0xB020001C

	)

461 
	#USBDEV_INT_SOF
 (1<<12)

	)

462 
	#USBDEV_INT_HF_BIT
 6

	)

463 
	#USBDEV_INT_HF_MASK
 (0x3‡<< 
USBDEV_INT_HF_BIT
)

	)

464 
	#USBDEV_INT_CMPLT_BIT
 0

	)

465 
	#USBDEV_INT_CMPLT_MASK
 (0x3‡<< 
USBDEV_INT_CMPLT_BIT
)

	)

466 
	#USBD_CONFIG
 0xB0200020

	)

467 
	#USBD_EP0CS
 0xB0200024

	)

468 
	#USBD_EP2CS
 0xB0200028

	)

469 
	#USBD_EP3CS
 0xB020002C

	)

470 
	#USBD_EP4CS
 0xB0200030

	)

471 
	#USBD_EP5CS
 0xB0200034

	)

472 
	#USBDEV_CS_SU
 (1<<14)

	)

473 
	#USBDEV_CS_NAK
 (1<<13)

	)

474 
	#USBDEV_CS_ACK
 (1<<12)

	)

475 
	#USBDEV_CS_BUSY
 (1<<11)

	)

476 
	#USBDEV_CS_TSIZE_BIT
 1

	)

477 
	#USBDEV_CS_TSIZE_MASK
 (0x3f‡<< 
USBDEV_CS_TSIZE_BIT
)

	)

478 
	#USBDEV_CS_STALL
 (1<<0)

	)

479 
	#USBD_EP0RDSTAT
 0xB0200040

	)

480 
	#USBD_EP0WRSTAT
 0xB0200044

	)

481 
	#USBD_EP2WRSTAT
 0xB0200048

	)

482 
	#USBD_EP3WRSTAT
 0xB020004C

	)

483 
	#USBD_EP4RDSTAT
 0xB0200050

	)

484 
	#USBD_EP5RDSTAT
 0xB0200054

	)

485 
	#USBDEV_FSTAT_FLUSH
 (1<<6)

	)

486 
	#USBDEV_FSTAT_UF
 (1<<5)

	)

487 
	#USBDEV_FSTAT_OF
 (1<<4)

	)

488 
	#USBDEV_FSTAT_FCNT_BIT
 0

	)

489 
	#USBDEV_FSTAT_FCNT_MASK
 (0x0‡<< 
USBDEV_FSTAT_FCNT_BIT
)

	)

490 
	#USBD_ENABLE
 0xB0200058

	)

491 
	#USBDEV_ENABLE
 (1<<1)

	)

492 
	#USBDEV_CE
 (1<<0)

	)

495 
	#AU1000_ETH0_BASE
 0xB0500000

	)

496 
	#AU1000_ETH1_BASE
 0xB0510000

	)

497 
	#AU1500_ETH0_BASE
 0xB1500000

	)

498 
	#AU1500_ETH1_BASE
 0xB1510000

	)

499 
	#AU1100_ETH0_BASE
 0xB0500000

	)

500 
	#AU1550_ETH0_BASE
 0xB0500000

	)

501 
	#AU1550_ETH1_BASE
 0xB0510000

	)

504 
	#MAC_CONTROL
 0x0

	)

505 
	#MAC_RX_ENABLE
 (1<<2)

	)

506 
	#MAC_TX_ENABLE
 (1<<3)

	)

507 
	#MAC_DEF_CHECK
 (1<<5)

	)

508 
	#MAC_SET_BL
(
X
Ë(((X)&0x3)<<6)

	)

509 
	#MAC_AUTO_PAD
 (1<<8)

	)

510 
	#MAC_DISABLE_RETRY
 (1<<10)

	)

511 
	#MAC_DISABLE_BCAST
 (1<<11)

	)

512 
	#MAC_LATE_COL
 (1<<12)

	)

513 
	#MAC_HASH_MODE
 (1<<13)

	)

514 
	#MAC_HASH_ONLY
 (1<<15)

	)

515 
	#MAC_PASS_ALL
 (1<<16)

	)

516 
	#MAC_INVERSE_FILTER
 (1<<17)

	)

517 
	#MAC_PROMISCUOUS
 (1<<18)

	)

518 
	#MAC_PASS_ALL_MULTI
 (1<<19)

	)

519 
	#MAC_FULL_DUPLEX
 (1<<20)

	)

520 
	#MAC_NORMAL_MODE
 0

	)

521 
	#MAC_INT_LOOPBACK
 (1<<21)

	)

522 
	#MAC_EXT_LOOPBACK
 (1<<22)

	)

523 
	#MAC_DISABLE_RX_OWN
 (1<<23)

	)

524 
	#MAC_BIG_ENDIAN
 (1<<30)

	)

525 
	#MAC_RX_ALL
 (1<<31)

	)

526 
	#MAC_ADDRESS_HIGH
 0x4

	)

527 
	#MAC_ADDRESS_LOW
 0x8

	)

528 
	#MAC_MCAST_HIGH
 0xC

	)

529 
	#MAC_MCAST_LOW
 0x10

	)

530 
	#MAC_MII_CNTRL
 0x14

	)

531 
	#MAC_MII_BUSY
 (1<<0)

	)

532 
	#MAC_MII_READ
 0

	)

533 
	#MAC_MII_WRITE
 (1<<1)

	)

534 
	#MAC_SET_MII_SELECT_REG
(
X
Ë(((X)&0x1f)<<6)

	)

535 
	#MAC_SET_MII_SELECT_PHY
(
X
Ë(((X)&0x1f)<<11)

	)

536 
	#MAC_MII_DATA
 0x18

	)

537 
	#MAC_FLOW_CNTRL
 0x1C

	)

538 
	#MAC_FLOW_CNTRL_BUSY
 (1<<0)

	)

539 
	#MAC_FLOW_CNTRL_ENABLE
 (1<<1)

	)

540 
	#MAC_PASS_CONTROL
 (1<<2)

	)

541 
	#MAC_SET_PAUSE
(
X
Ë(((X)&0xffff)<<16)

	)

542 
	#MAC_VLAN1_TAG
 0x20

	)

543 
	#MAC_VLAN2_TAG
 0x24

	)

546 
	#AU1000_MAC0_ENABLE
 0xB0520000

	)

547 
	#AU1000_MAC1_ENABLE
 0xB0520004

	)

548 
	#AU1500_MAC0_ENABLE
 0xB1520000

	)

549 
	#AU1500_MAC1_ENABLE
 0xB1520004

	)

550 
	#AU1100_MAC0_ENABLE
 0xB0520000

	)

551 
	#AU1550_MAC0_ENABLE
 0xB0520000

	)

552 
	#AU1550_MAC1_ENABLE
 0xB0520004

	)

554 
	#MAC_EN_CLOCK_ENABLE
 (1<<0)

	)

555 
	#MAC_EN_RESET0
 (1<<1)

	)

556 
	#MAC_EN_TOSS
 (0<<2)

	)

557 
	#MAC_EN_CACHEABLE
 (1<<3)

	)

558 
	#MAC_EN_RESET1
 (1<<4)

	)

559 
	#MAC_EN_RESET2
 (1<<5)

	)

560 
	#MAC_DMA_RESET
 (1<<6)

	)

564 
	#MAC0_TX_DMA_ADDR
 0xB4004000

	)

565 
	#MAC1_TX_DMA_ADDR
 0xB4004200

	)

567 
	#MAC_TX_BUFF0_STATUS
 0x0

	)

568 
	#TX_FRAME_ABORTED
 (1<<0)

	)

569 
	#TX_JAB_TIMEOUT
 (1<<1)

	)

570 
	#TX_NO_CARRIER
 (1<<2)

	)

571 
	#TX_LOSS_CARRIER
 (1<<3)

	)

572 
	#TX_EXC_DEF
 (1<<4)

	)

573 
	#TX_LATE_COLL_ABORT
 (1<<5)

	)

574 
	#TX_EXC_COLL
 (1<<6)

	)

575 
	#TX_UNDERRUN
 (1<<7)

	)

576 
	#TX_DEFERRED
 (1<<8)

	)

577 
	#TX_LATE_COLL
 (1<<9)

	)

578 
	#TX_COLL_CNT_MASK
 (0xF<<10)

	)

579 
	#TX_PKT_RETRY
 (1<<31)

	)

580 
	#MAC_TX_BUFF0_ADDR
 0x4

	)

581 
	#TX_DMA_ENABLE
 (1<<0)

	)

582 
	#TX_T_DONE
 (1<<1)

	)

583 
	#TX_GET_DMA_BUFFER
(
X
Ë(((X)>>2)&0x3)

	)

584 
	#MAC_TX_BUFF0_LEN
 0x8

	)

585 
	#MAC_TX_BUFF1_STATUS
 0x10

	)

586 
	#MAC_TX_BUFF1_ADDR
 0x14

	)

587 
	#MAC_TX_BUFF1_LEN
 0x18

	)

588 
	#MAC_TX_BUFF2_STATUS
 0x20

	)

589 
	#MAC_TX_BUFF2_ADDR
 0x24

	)

590 
	#MAC_TX_BUFF2_LEN
 0x28

	)

591 
	#MAC_TX_BUFF3_STATUS
 0x30

	)

592 
	#MAC_TX_BUFF3_ADDR
 0x34

	)

593 
	#MAC_TX_BUFF3_LEN
 0x38

	)

595 
	#MAC0_RX_DMA_ADDR
 0xB4004100

	)

596 
	#MAC1_RX_DMA_ADDR
 0xB4004300

	)

598 
	#MAC_RX_BUFF0_STATUS
 0x0

	)

599 
	#RX_FRAME_LEN_MASK
 0x3fff

	)

600 
	#RX_WDOG_TIMER
 (1<<14)

	)

601 
	#RX_RUNT
 (1<<15)

	)

602 
	#RX_OVERLEN
 (1<<16)

	)

603 
	#RX_COLL
 (1<<17)

	)

604 
	#RX_ETHER
 (1<<18)

	)

605 
	#RX_MII_ERROR
 (1<<19)

	)

606 
	#RX_DRIBBLING
 (1<<20)

	)

607 
	#RX_CRC_ERROR
 (1<<21)

	)

608 
	#RX_VLAN1
 (1<<22)

	)

609 
	#RX_VLAN2
 (1<<23)

	)

610 
	#RX_LEN_ERROR
 (1<<24)

	)

611 
	#RX_CNTRL_FRAME
 (1<<25)

	)

612 
	#RX_U_CNTRL_FRAME
 (1<<26)

	)

613 
	#RX_MCAST_FRAME
 (1<<27)

	)

614 
	#RX_BCAST_FRAME
 (1<<28)

	)

615 
	#RX_FILTER_FAIL
 (1<<29)

	)

616 
	#RX_PACKET_FILTER
 (1<<30)

	)

617 
	#RX_MISSED_FRAME
 (1<<31)

	)

619 
	#RX_ERROR
 (
RX_WDOG_TIMER
 | 
RX_RUNT
 | 
RX_OVERLEN
 | \

620 
RX_COLL
 | 
RX_MII_ERROR
 | 
RX_CRC_ERROR
 | \

621 
RX_LEN_ERROR
 | 
RX_U_CNTRL_FRAME
 | 
RX_MISSED_FRAME
)

	)

622 
	#MAC_RX_BUFF0_ADDR
 0x4

	)

623 
	#RX_DMA_ENABLE
 (1<<0)

	)

624 
	#RX_T_DONE
 (1<<1)

	)

625 
	#RX_GET_DMA_BUFFER
(
X
Ë(((X)>>2)&0x3)

	)

626 
	#RX_SET_BUFF_ADDR
(
X
Ë((X)&0xffffffc0)

	)

627 
	#MAC_RX_BUFF1_STATUS
 0x10

	)

628 
	#MAC_RX_BUFF1_ADDR
 0x14

	)

629 
	#MAC_RX_BUFF2_STATUS
 0x20

	)

630 
	#MAC_RX_BUFF2_ADDR
 0x24

	)

631 
	#MAC_RX_BUFF3_STATUS
 0x30

	)

632 
	#MAC_RX_BUFF3_ADDR
 0x34

	)

636 
	#UART0_ADDR
 0xB1100000

	)

637 
	#UART1_ADDR
 0xB1200000

	)

638 
	#UART2_ADDR
 0xB1300000

	)

639 
	#UART3_ADDR
 0xB1400000

	)

640 
	#UART_BASE
 
UART0_ADDR


	)

641 
	#UART_DEBUG_BASE
 
UART2_ADDR


	)

643 
	#UART_RX
 0

	)

644 
	#UART_TX
 4

	)

645 
	#UART_IER
 8

	)

646 
	#UART_IIR
 0xC

	)

647 
	#UART_FCR
 0x10

	)

648 
	#UART_LCR
 0x14

	)

649 
	#UART_MCR
 0x18

	)

650 
	#UART_LSR
 0x1C

	)

651 
	#UART_MSR
 0x20

	)

652 
	#UART_CLK
 0x28

	)

653 
	#UART_ENABLE
 0x100

	)

655 
	#UART_EN_CE
 1

	)

656 
	#UART_EN_E
 2

	)

658 
	#UART_FCR_ENABLE_FIFO
 0x01

	)

659 
	#UART_FCR_CLEAR_RCVR
 0x02

	)

660 
	#UART_FCR_CLEAR_XMIT
 0x04

	)

661 
	#UART_FCR_DMA_SELECT
 0x08

	)

662 
	#UART_FCR_TRIGGER_MASK
 0xF0

	)

663 
	#UART_FCR_R_TRIGGER_1
 0x00

	)

664 
	#UART_FCR_R_TRIGGER_4
 0x40

	)

665 
	#UART_FCR_R_TRIGGER_8
 0x80

	)

666 
	#UART_FCR_R_TRIGGER_14
 0xA0

	)

667 
	#UART_FCR_T_TRIGGER_0
 0x00

	)

668 
	#UART_FCR_T_TRIGGER_4
 0x10

	)

669 
	#UART_FCR_T_TRIGGER_8
 0x20

	)

670 
	#UART_FCR_T_TRIGGER_12
 0x30

	)

675 
	#UART_LCR_SBC
 0x40

	)

676 
	#UART_LCR_SPAR
 0x20

	)

677 
	#UART_LCR_EPAR
 0x10

	)

678 
	#UART_LCR_PARITY
 0x08

	)

679 
	#UART_LCR_STOP
 0x04

	)

680 
	#UART_LCR_WLEN5
 0x00

	)

681 
	#UART_LCR_WLEN6
 0x01

	)

682 
	#UART_LCR_WLEN7
 0x02

	)

683 
	#UART_LCR_WLEN8
 0x03

	)

688 
	#UART_LSR_TEMT
 0x40

	)

689 
	#UART_LSR_THRE
 0x20

	)

690 
	#UART_LSR_BI
 0x10

	)

691 
	#UART_LSR_FE
 0x08

	)

692 
	#UART_LSR_PE
 0x04

	)

693 
	#UART_LSR_OE
 0x02

	)

694 
	#UART_LSR_DR
 0x01

	)

699 
	#UART_IIR_NO_INT
 0x01

	)

700 
	#UART_IIR_ID
 0x06

	)

701 
	#UART_IIR_MSI
 0x00

	)

702 
	#UART_IIR_THRI
 0x02

	)

703 
	#UART_IIR_RDI
 0x04

	)

704 
	#UART_IIR_RLSI
 0x06

	)

709 
	#UART_IER_MSI
 0x08

	)

710 
	#UART_IER_RLSI
 0x04

	)

711 
	#UART_IER_THRI
 0x02

	)

712 
	#UART_IER_RDI
 0x01

	)

717 
	#UART_MCR_LOOP
 0x10

	)

718 
	#UART_MCR_OUT2
 0x08

	)

719 
	#UART_MCR_OUT1
 0x04

	)

720 
	#UART_MCR_RTS
 0x02

	)

721 
	#UART_MCR_DTR
 0x01

	)

726 
	#UART_MSR_DCD
 0x80

	)

727 
	#UART_MSR_RI
 0x40

	)

728 
	#UART_MSR_DSR
 0x20

	)

729 
	#UART_MSR_CTS
 0x10

	)

730 
	#UART_MSR_DDCD
 0x08

	)

731 
	#UART_MSR_TERI
 0x04

	)

732 
	#UART_MSR_DDSR
 0x02

	)

733 
	#UART_MSR_DCTS
 0x01

	)

734 
	#UART_MSR_ANY_DELTA
 0x0F

	)

738 
	#SSI0_STATUS
 0xB1600000

	)

739 
	#SSI_STATUS_BF
 (1<<4)

	)

740 
	#SSI_STATUS_OF
 (1<<3)

	)

741 
	#SSI_STATUS_UF
 (1<<2)

	)

742 
	#SSI_STATUS_D
 (1<<1)

	)

743 
	#SSI_STATUS_B
 (1<<0)

	)

744 
	#SSI0_INT
 0xB1600004

	)

745 
	#SSI_INT_OI
 (1<<3)

	)

746 
	#SSI_INT_UI
 (1<<2)

	)

747 
	#SSI_INT_DI
 (1<<1)

	)

748 
	#SSI0_INT_ENABLE
 0xB1600008

	)

749 
	#SSI_INTE_OIE
 (1<<3)

	)

750 
	#SSI_INTE_UIE
 (1<<2)

	)

751 
	#SSI_INTE_DIE
 (1<<1)

	)

752 
	#SSI0_CONFIG
 0xB1600020

	)

753 
	#SSI_CONFIG_AO
 (1<<24)

	)

754 
	#SSI_CONFIG_DO
 (1<<23)

	)

755 
	#SSI_CONFIG_ALEN_BIT
 20

	)

756 
	#SSI_CONFIG_ALEN_MASK
 (0x7<<20)

	)

757 
	#SSI_CONFIG_DLEN_BIT
 16

	)

758 
	#SSI_CONFIG_DLEN_MASK
 (0x7<<16)

	)

759 
	#SSI_CONFIG_DD
 (1<<11)

	)

760 
	#SSI_CONFIG_AD
 (1<<10)

	)

761 
	#SSI_CONFIG_BM_BIT
 8

	)

762 
	#SSI_CONFIG_BM_MASK
 (0x3<<8)

	)

763 
	#SSI_CONFIG_CE
 (1<<7)

	)

764 
	#SSI_CONFIG_DP
 (1<<6)

	)

765 
	#SSI_CONFIG_DL
 (1<<5)

	)

766 
	#SSI_CONFIG_EP
 (1<<4)

	)

767 
	#SSI0_ADATA
 0xB1600024

	)

768 
	#SSI_AD_D
 (1<<24)

	)

769 
	#SSI_AD_ADDR_BIT
 16

	)

770 
	#SSI_AD_ADDR_MASK
 (0xff<<16)

	)

771 
	#SSI_AD_DATA_BIT
 0

	)

772 
	#SSI_AD_DATA_MASK
 (0xfff<<0)

	)

773 
	#SSI0_CLKDIV
 0xB1600028

	)

774 
	#SSI0_CONTROL
 0xB1600100

	)

775 
	#SSI_CONTROL_CD
 (1<<1)

	)

776 
	#SSI_CONTROL_E
 (1<<0)

	)

779 
	#SSI1_STATUS
 0xB1680000

	)

780 
	#SSI1_INT
 0xB1680004

	)

781 
	#SSI1_INT_ENABLE
 0xB1680008

	)

782 
	#SSI1_CONFIG
 0xB1680020

	)

783 
	#SSI1_ADATA
 0xB1680024

	)

784 
	#SSI1_CLKDIV
 0xB1680028

	)

785 
	#SSI1_ENABLE
 0xB1680100

	)

790 
	#SSI_STATUS_BF
 (1<<4)

	)

791 
	#SSI_STATUS_OF
 (1<<3)

	)

792 
	#SSI_STATUS_UF
 (1<<2)

	)

793 
	#SSI_STATUS_D
 (1<<1)

	)

794 
	#SSI_STATUS_B
 (1<<0)

	)

797 
	#SSI_INT_OI
 (1<<3)

	)

798 
	#SSI_INT_UI
 (1<<2)

	)

799 
	#SSI_INT_DI
 (1<<1)

	)

802 
	#SSI_INTEN_OIE
 (1<<3)

	)

803 
	#SSI_INTEN_UIE
 (1<<2)

	)

804 
	#SSI_INTEN_DIE
 (1<<1)

	)

806 
	#SSI_CONFIG_AO
 (1<<24)

	)

807 
	#SSI_CONFIG_DO
 (1<<23)

	)

808 
	#SSI_CONFIG_ALEN
 (7<<20)

	)

809 
	#SSI_CONFIG_DLEN
 (15<<16)

	)

810 
	#SSI_CONFIG_DD
 (1<<11)

	)

811 
	#SSI_CONFIG_AD
 (1<<10)

	)

812 
	#SSI_CONFIG_BM
 (3<<8)

	)

813 
	#SSI_CONFIG_CE
 (1<<7)

	)

814 
	#SSI_CONFIG_DP
 (1<<6)

	)

815 
	#SSI_CONFIG_DL
 (1<<5)

	)

816 
	#SSI_CONFIG_EP
 (1<<4)

	)

817 
	#SSI_CONFIG_ALEN_N
(
N
Ë((N-1)<<20)

	)

818 
	#SSI_CONFIG_DLEN_N
(
N
Ë((N-1)<<16)

	)

819 
	#SSI_CONFIG_BM_HI
 (0<<8)

	)

820 
	#SSI_CONFIG_BM_LO
 (1<<8)

	)

821 
	#SSI_CONFIG_BM_CY
 (2<<8)

	)

823 
	#SSI_ADATA_D
 (1<<24)

	)

824 
	#SSI_ADATA_ADDR
 (0xFF<<16)

	)

825 
	#SSI_ADATA_DATA
 (0x0FFF)

	)

826 
	#SSI_ADATA_ADDR_N
(
N
Ë(N<<16)

	)

828 
	#SSI_ENABLE_CD
 (1<<1)

	)

829 
	#SSI_ENABLE_E
 (1<<0)

	)

833 
	#IRDA_BASE
 0xB0300000

	)

834 
	#IR_RING_PTR_STATUS
 (
IRDA_BASE
+0x00)

	)

835 
	#IR_RING_BASE_ADDR_H
 (
IRDA_BASE
+0x04)

	)

836 
	#IR_RING_BASE_ADDR_L
 (
IRDA_BASE
+0x08)

	)

837 
	#IR_RING_SIZE
 (
IRDA_BASE
+0x0C)

	)

838 
	#IR_RING_PROMPT
 (
IRDA_BASE
+0x10)

	)

839 
	#IR_RING_ADDR_CMPR
 (
IRDA_BASE
+0x14)

	)

840 
	#IR_INT_CLEAR
 (
IRDA_BASE
+0x18)

	)

841 
	#IR_CONFIG_1
 (
IRDA_BASE
+0x20)

	)

842 
	#IR_RX_INVERT_LED
 (1<<0)

	)

843 
	#IR_TX_INVERT_LED
 (1<<1)

	)

844 
	#IR_ST
 (1<<2)

	)

845 
	#IR_SF
 (1<<3)

	)

846 
	#IR_SIR
 (1<<4)

	)

847 
	#IR_MIR
 (1<<5)

	)

848 
	#IR_FIR
 (1<<6)

	)

849 
	#IR_16CRC
 (1<<7)

	)

850 
	#IR_TD
 (1<<8)

	)

851 
	#IR_RX_ALL
 (1<<9)

	)

852 
	#IR_DMA_ENABLE
 (1<<10)

	)

853 
	#IR_RX_ENABLE
 (1<<11)

	)

854 
	#IR_TX_ENABLE
 (1<<12)

	)

855 
	#IR_LOOPBACK
 (1<<14)

	)

856 
	#IR_SIR_MODE
 (
IR_SIR
 | 
IR_DMA_ENABLE
 | \

857 
IR_RX_ALL
 | 
IR_RX_ENABLE
 | 
IR_SF
 | 
IR_16CRC
)

	)

858 
	#IR_SIR_FLAGS
 (
IRDA_BASE
+0x24)

	)

859 
	#IR_ENABLE
 (
IRDA_BASE
+0x28)

	)

860 
	#IR_RX_STATUS
 (1<<9)

	)

861 
	#IR_TX_STATUS
 (1<<10)

	)

862 
	#IR_READ_PHY_CONFIG
 (
IRDA_BASE
+0x2C)

	)

863 
	#IR_WRITE_PHY_CONFIG
 (
IRDA_BASE
+0x30)

	)

864 
	#IR_MAX_PKT_LEN
 (
IRDA_BASE
+0x34)

	)

865 
	#IR_RX_BYTE_CNT
 (
IRDA_BASE
+0x38)

	)

866 
	#IR_CONFIG_2
 (
IRDA_BASE
+0x3C)

	)

867 
	#IR_MODE_INV
 (1<<0)

	)

868 
	#IR_ONE_PIN
 (1<<1)

	)

869 
	#IR_INTERFACE_CONFIG
 (
IRDA_BASE
+0x40)

	)

872 
	#SYS_PINFUNC
 0xB190002C

	)

873 
	#SYS_PF_USB
 (1<<15Ë

	)

874 
	#SYS_PF_U3
 (1<<14Ë

	)

875 
	#SYS_PF_U2
 (1<<13Ë

	)

876 
	#SYS_PF_U1
 (1<<12Ë

	)

877 
	#SYS_PF_SRC
 (1<<11Ë

	)

878 
	#SYS_PF_CK5
 (1<<10Ë

	)

879 
	#SYS_PF_CK4
 (1<<9Ë

	)

880 
	#SYS_PF_IRF
 (1<<8Ë

	)

881 
	#SYS_PF_UR3
 (1<<7Ë

	)

882 
	#SYS_PF_I2D
 (1<<6Ë

	)

883 
	#SYS_PF_I2S
 (1<<5Ë

	)

884 
	#SYS_PF_NI2
 (1<<4Ë

	)

885 
	#SYS_PF_U0
 (1<<3Ë

	)

886 
	#SYS_PF_RD
 (1<<2Ë

	)

887 
	#SYS_PF_A97
 (1<<1Ë

	)

888 
	#SYS_PF_S0
 (1<<0Ë

	)

889 
	#SYS_TRIOUTRD
 0xB1900100

	)

890 
	#SYS_TRIOUTCLR
 0xB1900100

	)

891 
	#SYS_OUTPUTRD
 0xB1900108

	)

892 
	#SYS_OUTPUTSET
 0xB1900108

	)

893 
	#SYS_OUTPUTCLR
 0xB190010C

	)

894 
	#SYS_PINSTATERD
 0xB1900110

	)

895 
	#SYS_PININPUTEN
 0xB1900110

	)

898 
	#GPIO2_BASE
 0xB1700000

	)

899 
	#GPIO2_DIR
 (
GPIO2_BASE
 + 0)

	)

900 
	#GPIO2_DATA_EN
 (
GPIO2_BASE
 + 8)

	)

901 
	#GPIO2_PIN_STATE
 (
GPIO2_BASE
 + 0xC)

	)

902 
	#GPIO2_INT_ENABLE
 (
GPIO2_BASE
 + 0x10)

	)

903 
	#GPIO2_ENABLE
 (
GPIO2_BASE
 + 0x14)

	)

906 
	#SYS_SCRATCH0
 0xB1900018

	)

907 
	#SYS_SCRATCH1
 0xB190001C

	)

908 
	#SYS_WAKEMSK
 0xB1900034

	)

909 
	#SYS_ENDIAN
 0xB1900038

	)

910 
	#SYS_POWERCTRL
 0xB190003C

	)

911 
	#SYS_WAKESRC
 0xB190005C

	)

912 
	#SYS_SLPPWR
 0xB1900078

	)

913 
	#SYS_SLEEP
 0xB190007C

	)

916 
	#SYS_FREQCTRL0
 0xB1900020

	)

917 
	#SYS_FC_FRDIV2_BIT
 22

	)

918 
	#SYS_FC_FRDIV2_MASK
 (0xf‡<< 
FQC2_FRDIV2_BIT
)

	)

919 
	#SYS_FC_FE2
 (1<<21)

	)

920 
	#SYS_FC_FS2
 (1<<20)

	)

921 
	#SYS_FC_FRDIV1_BIT
 12

	)

922 
	#SYS_FC_FRDIV1_MASK
 (0xf‡<< 
FQC2_FRDIV1_BIT
)

	)

923 
	#SYS_FC_FE1
 (1<<11)

	)

924 
	#SYS_FC_FS1
 (1<<10)

	)

925 
	#SYS_FC_FRDIV0_BIT
 2

	)

926 
	#SYS_FC_FRDIV0_MASK
 (0xf‡<< 
FQC2_FRDIV0_BIT
)

	)

927 
	#SYS_FC_FE0
 (1<<1)

	)

928 
	#SYS_FC_FS0
 (1<<0)

	)

929 
	#SYS_FREQCTRL1
 0xB1900024

	)

930 
	#SYS_FC_FRDIV5_BIT
 22

	)

931 
	#SYS_FC_FRDIV5_MASK
 (0xf‡<< 
FQC2_FRDIV5_BIT
)

	)

932 
	#SYS_FC_FE5
 (1<<21)

	)

933 
	#SYS_FC_FS5
 (1<<20)

	)

934 
	#SYS_FC_FRDIV4_BIT
 12

	)

935 
	#SYS_FC_FRDIV4_MASK
 (0xf‡<< 
FQC2_FRDIV4_BIT
)

	)

936 
	#SYS_FC_FE4
 (1<<11)

	)

937 
	#SYS_FC_FS4
 (1<<10)

	)

938 
	#SYS_FC_FRDIV3_BIT
 2

	)

939 
	#SYS_FC_FRDIV3_MASK
 (0xf‡<< 
FQC2_FRDIV3_BIT
)

	)

940 
	#SYS_FC_FE3
 (1<<1)

	)

941 
	#SYS_FC_FS3
 (1<<0)

	)

942 
	#SYS_CLKSRC
 0xB1900028

	)

943 
	#SYS_CS_ME1_BIT
 27

	)

944 
	#SYS_CS_ME1_MASK
 (0x7<<
CSC_ME1_BIT
)

	)

945 
	#SYS_CS_DE1
 (1<<26)

	)

946 
	#SYS_CS_CE1
 (1<<25)

	)

947 
	#SYS_CS_ME0_BIT
 22

	)

948 
	#SYS_CS_ME0_MASK
 (0x7<<
CSC_ME0_BIT
)

	)

949 
	#SYS_CS_DE0
 (1<<21)

	)

950 
	#SYS_CS_CE0
 (1<<20)

	)

951 
	#SYS_CS_MI2_BIT
 17

	)

952 
	#SYS_CS_MI2_MASK
 (0x7<<
CSC_MI2_BIT
)

	)

953 
	#SYS_CS_DI2
 (1<<16)

	)

954 
	#SYS_CS_CI2
 (1<<15)

	)

955 
	#SYS_CS_MUH_BIT
 12

	)

956 
	#SYS_CS_MUH_MASK
 (0x7<<
CSC_MUH_BIT
)

	)

957 
	#SYS_CS_DUH
 (1<<11)

	)

958 
	#SYS_CS_CUH
 (1<<10)

	)

959 
	#SYS_CS_MUD_BIT
 7

	)

960 
	#SYS_CS_MUD_MASK
 (0x7<<
CSC_MUD_BIT
)

	)

961 
	#SYS_CS_DUD
 (1<<6)

	)

962 
	#SYS_CS_CUD
 (1<<5)

	)

963 
	#SYS_CS_MIR_BIT
 2

	)

964 
	#SYS_CS_MIR_MASK
 (0x7<<
CSC_MIR_BIT
)

	)

965 
	#SYS_CS_DIR
 (1<<1)

	)

966 
	#SYS_CS_CIR
 (1<<0)

	)

968 
	#SYS_CS_MUX_AUX
 0x1

	)

969 
	#SYS_CS_MUX_FQ0
 0x2

	)

970 
	#SYS_CS_MUX_FQ1
 0x3

	)

971 
	#SYS_CS_MUX_FQ2
 0x4

	)

972 
	#SYS_CS_MUX_FQ3
 0x5

	)

973 
	#SYS_CS_MUX_FQ4
 0x6

	)

974 
	#SYS_CS_MUX_FQ5
 0x7

	)

975 
	#SYS_CPUPLL
 0xB1900060

	)

976 
	#SYS_AUXPLL
 0xB1900064

	)

979 
	#AC97C_CONFIG
 0xB0000000

	)

980 
	#AC97C_RECV_SLOTS_BIT
 13

	)

981 
	#AC97C_RECV_SLOTS_MASK
 (0x3f‡<< 
AC97C_RECV_SLOTS_BIT
)

	)

982 
	#AC97C_XMIT_SLOTS_BIT
 3

	)

983 
	#AC97C_XMIT_SLOTS_MASK
 (0x3f‡<< 
AC97C_XMIT_SLOTS_BIT
)

	)

984 
	#AC97C_SG
 (1<<2)

	)

985 
	#AC97C_SYNC
 (1<<1)

	)

986 
	#AC97C_RESET
 (1<<0)

	)

987 
	#AC97C_STATUS
 0xB0000004

	)

988 
	#AC97C_XU
 (1<<11)

	)

989 
	#AC97C_XO
 (1<<10)

	)

990 
	#AC97C_RU
 (1<<9)

	)

991 
	#AC97C_RO
 (1<<8)

	)

992 
	#AC97C_READY
 (1<<7)

	)

993 
	#AC97C_CP
 (1<<6)

	)

994 
	#AC97C_TR
 (1<<5)

	)

995 
	#AC97C_TE
 (1<<4)

	)

996 
	#AC97C_TF
 (1<<3)

	)

997 
	#AC97C_RR
 (1<<2)

	)

998 
	#AC97C_RE
 (1<<1)

	)

999 
	#AC97C_RF
 (1<<0)

	)

1000 
	#AC97C_DATA
 0xB0000008

	)

1001 
	#AC97C_CMD
 0xB000000C

	)

1002 
	#AC97C_WD_BIT
 16

	)

1003 
	#AC97C_READ
 (1<<7)

	)

1004 
	#AC97C_INDEX_MASK
 0x7f

	)

1005 
	#AC97C_CNTRL
 0xB0000010

	)

1006 
	#AC97C_RS
 (1<<1)

	)

1007 
	#AC97C_CE
 (1<<0)

	)

1009 
	#DB1000_BCSR_ADDR
 0xAE000000

	)

1010 
	#DB1550_BCSR_ADDR
 0xAF000000

	)

1012 #ifde‡
CONFIG_DBAU1550


1013 
	#DB1XX0_BCSR_ADDR
 
DB1550_BCSR_ADDR


	)

1015 
	#DB1XX0_BCSR_ADDR
 
DB1000_BCSR_ADDR


	)

1018 #ifde‡
CONFIG_SOC_AU1500


1020 
	#Au1500_CFG_BASE
 0xB4005000

	)

1021 
	#Au1500_PCI_CMEM
 (
Au1500_CFG_BASE
 + 0)

	)

1022 
	#Au1500_PCI_CFG
 (
Au1500_CFG_BASE
 + 4)

	)

1023 
	#PCI_ERROR
 ((1<<22Ë| (1<<23Ë| (1<<24Ë| (1<<25Ë| (1<<26Ë| (1<<27))

	)

1024 
	#Au1500_PCI_B2BMASK_CCH
 (
Au1500_CFG_BASE
 + 8)

	)

1025 
	#Au1500_PCI_B2B0_VID
 (
Au1500_CFG_BASE
 + 0xC)

	)

1026 
	#Au1500_PCI_B2B1_ID
 (
Au1500_CFG_BASE
 + 0x10)

	)

1027 
	#Au1500_PCI_MWMASK_DEV
 (
Au1500_CFG_BASE
 + 0x14)

	)

1028 
	#Au1500_PCI_MWBASE_REV_CCL
 (
Au1500_CFG_BASE
 + 0x18)

	)

1029 
	#Au1500_PCI_ERR_ADDR
 (
Au1500_CFG_BASE
 + 0x1C)

	)

1030 
	#Au1500_PCI_SPEC_INTACK
 (
Au1500_CFG_BASE
 + 0x20)

	)

1031 
	#Au1500_PCI_ID
 (
Au1500_CFG_BASE
 + 0x100)

	)

1032 
	#Au1500_PCI_STATCMD
 (
Au1500_CFG_BASE
 + 0x104)

	)

1033 
	#Au1500_PCI_CLASSREV
 (
Au1500_CFG_BASE
 + 0x108)

	)

1034 
	#Au1500_PCI_HDRTYPE
 (
Au1500_CFG_BASE
 + 0x10C)

	)

1035 
	#Au1500_PCI_MBAR
 (
Au1500_CFG_BASE
 + 0x110)

	)

1037 
	#Au1500_PCI_HDR
 0xB4005100

	)

1047 
	#Au1500_EXT_CFG
 0x600000000

	)

1048 
	#Au1500_EXT_CFG_TYPE1
 0x680000000

	)

1049 
	#Au1500_PCI_IO_START
 0x500000000

	)

1050 
	#Au1500_PCI_IO_END
 0x5000FFFFF

	)

1051 
	#Au1500_PCI_MEM_START
 0x440000000

	)

1052 
	#Au1500_PCI_MEM_END
 0x443FFFFFF

	)

1054 
	#PCI_IO_START
 (
Au1500_PCI_IO_START
 + 0x300)

	)

1055 
	#PCI_IO_END
 (
Au1500_PCI_IO_END
)

	)

1056 
	#PCI_MEM_START
 (
Au1500_PCI_MEM_START
)

	)

1057 
	#PCI_MEM_END
 (
Au1500_PCI_MEM_END
)

	)

1058 
	#PCI_FIRST_DEVFN
 (0<<3)

	)

1059 
	#PCI_LAST_DEVFN
 (19<<3)

	)

1063 #i‡
deföed
(
CONFIG_SOC_AU1100
Ë|| (deföed(
CONFIG_SOC_AU1000
Ë&& !deföed(
CONFIG_MIPS_PB1000
))

1065 
	#PCI_IO_START
 0

	)

1066 
	#PCI_IO_END
 0

	)

1067 
	#PCI_MEM_START
 0

	)

1068 
	#PCI_MEM_END
 0

	)

1069 
	#PCI_FIRST_DEVFN
 0

	)

1070 
	#PCI_LAST_DEVFN
 0

	)

1072 
	#AU1X_SOCK0_IO
 0xF00000000

	)

1073 
	#AU1X_SOCK0_PHYS_ATTR
 0xF40000000

	)

1074 
	#AU1X_SOCK0_PHYS_MEM
 0xF80000000

	)

1081 
	#AU1X_SOCK1_IO
 0xF04000000

	)

1082 
	#AU1X_SOCK1_PHYS_ATTR
 0xF44000000

	)

1083 
	#AU1X_SOCK1_PHYS_MEM
 0xF84000000

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/bitops.h

9 #i‚de‡
_ASM_BITOPS_H


10 
	#_ASM_BITOPS_H


	)

12 
	~<löux/ty≥s.h
>

13 
	~<asm/byã‹dî.h
>

15 #ifde‡
__KERNEL__


17 
	~<asm/sgidefs.h
>

18 
	~<asm/sy°em.h
>

19 
	~<löux/c⁄fig.h
>

24 
	#smp_mb__bef‹e_˛ór_bô
(Ë
	`b¨rõr
()

	)

25 
	#smp_mb__a·î_˛ór_bô
(Ë
	`b¨rõr
()

	)

31 
	#__bi_Êags
 
Êags


	)

32 
	#__bi_˛i
(Ë
	`__˛i
()

	)

33 
	#__bi_ßve_Êags
(
x
Ë
	`__ßve_Êags
(x)

	)

34 
	#__bi_ßve_™d_˛i
(
x
Ë
	`__ßve_™d_˛i
(x)

	)

35 
	#__bi_ª°‹e_Êags
(
x
Ë
	`__ª°‹e_Êags
(x)

	)

37 
	#__bi_Êags


	)

38 
	#__bi_˛i
()

	)

39 
	#__bi_ßve_Êags
(
x
)

	)

40 
	#__bi_ßve_™d_˛i
(
x
)

	)

41 
	#__bi_ª°‹e_Êags
(
x
)

	)

44 #ifde‡
CONFIG_CPU_HAS_LLSC


46 
	~<asm/mù§egs.h
>

63 
__ölöe__
 

64 
	$£t_bô
(
ƒ
, vﬁ©ûê*
addr
)

66 *
m
 = ((*Ë
addr
Ë+ (
ƒ
 >> 5);

67 
ãmp
;

69 
__asm__
 
	`__vﬁ©ûe__
(

74 : "=&r" (
ãmp
), "=m" (*
m
)

75 : "ú" (1UL << (
ƒ
 & 0x1f)), "m" (*
m
));

76 
	}
}

87 
__ölöe__
 
	$__£t_bô
(
ƒ
, vﬁ©ûê* 
addr
)

89 * 
m
 = ((*Ë
addr
Ë+ (
ƒ
 >> 5);

91 *
m
 |1UL << (
ƒ
 & 31);

92 
	}
}

104 
__ölöe__
 

105 
	$˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
)

107 *
m
 = ((*Ë
addr
Ë+ (
ƒ
 >> 5);

108 
ãmp
;

110 
__asm__
 
	`__vﬁ©ûe__
(

115 : "=&r" (
ãmp
), "=m" (*
m
)

116 : "ú" (~(1UL << (
ƒ
 & 0x1f))), "m" (*
m
));

117 
	}
}

128 
__ölöe__
 

129 
	$ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
)

131 *
m
 = ((*Ë
addr
Ë+ (
ƒ
 >> 5);

132 
ãmp
;

134 
__asm__
 
	`__vﬁ©ûe__
(

139 : "=&r" (
ãmp
), "=m" (*
m
)

140 : "ú" (1UL << (
ƒ
 & 0x1f)), "m" (*
m
));

141 
	}
}

152 
__ölöe__
 
	$__ch™ge_bô
(
ƒ
, vﬁ©ûê* 
addr
)

154 * 
m
 = ((*Ë
addr
Ë+ (
ƒ
 >> 5);

156 *
m
 ^1UL << (
ƒ
 & 31);

157 
	}
}

167 
__ölöe__
 

168 
	$ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê*
addr
)

170 *
m
 = ((*Ë
addr
Ë+ (
ƒ
 >> 5);

171 
ãmp
, 
ªs
;

173 
__asm__
 
	`__vﬁ©ûe__
(

181 : "=&r" (
ãmp
), "=m" (*
m
), "=&r" (
ªs
)

182 : "r" (1UL << (
ƒ
 & 0x1f)), "m" (*
m
)

185  
ªs
 != 0;

186 
	}
}

197 
__ölöe__
 
	$__ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê* 
addr
)

199 
mask
, 
ªtvÆ
;

200 vﬁ©ûê*
a
 = 
addr
;

202 
a
 +
ƒ
 >> 5;

203 
mask
 = 1 << (
ƒ
 & 0x1f);

204 
ªtvÆ
 = (
mask
 & *
a
) != 0;

205 *
a
 |
mask
;

207  
ªtvÆ
;

208 
	}
}

218 
__ölöe__
 

219 
	$ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
)

221 *
m
 = ((*Ë
addr
Ë+ (
ƒ
 >> 5);

222 
ãmp
, 
ªs
;

224 
__asm__
 
	`__vﬁ©ûe__
(

233 : "=&r" (
ãmp
), "=m" (*
m
), "=&r" (
ªs
)

234 : "r" (1UL << (
ƒ
 & 0x1f)), "m" (*
m
)

237  
ªs
 != 0;

238 
	}
}

249 
__ölöe__
 
	$__ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê* 
addr
)

251 
mask
, 
ªtvÆ
;

252 vﬁ©ûê*
a
 = 
addr
;

254 
a
 +
ƒ
 >> 5;

255 
mask
 = 1 << (
ƒ
 & 0x1f);

256 
ªtvÆ
 = (
mask
 & *
a
) != 0;

257 *
a
 &~
mask
;

259  
ªtvÆ
;

260 
	}
}

270 
__ölöe__
 

271 
	$ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
)

273 *
m
 = ((*Ë
addr
Ë+ (
ƒ
 >> 5);

274 
ãmp
, 
ªs
;

276 
__asm__
 
	`__vﬁ©ûe__
(

284 : "=&r" (
ãmp
), "=m" (*
m
), "=&r" (
ªs
)

285 : "r" (1UL << (
ƒ
 & 0x1f)), "m" (*
m
)

288  
ªs
 != 0;

289 
	}
}

300 
__ölöe__
 
	$__ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê* 
addr
)

302 
mask
, 
ªtvÆ
;

303 vﬁ©ûê*
a
 = 
addr
;

305 
a
 +
ƒ
 >> 5;

306 
mask
 = 1 << (
ƒ
 & 0x1f);

307 
ªtvÆ
 = (
mask
 & *
a
) != 0;

308 *
a
 ^
mask
;

310  
ªtvÆ
;

311 
	}
}

325 
__ölöe__
 
	$£t_bô
(
ƒ
, vﬁ©ûê* 
addr
)

327 
mask
;

328 vﬁ©ûê*
a
 = 
addr
;

329 
__bi_Êags
;

331 
a
 +
ƒ
 >> 5;

332 
mask
 = 1 << (
ƒ
 & 0x1f);

333 
	`__bi_ßve_™d_˛i
(
Êags
);

334 *
a
 |
mask
;

335 
	`__bi_ª°‹e_Êags
(
Êags
);

336 
	}
}

347 
__ölöe__
 
	$__£t_bô
(
ƒ
, vﬁ©ûê* 
addr
)

349 
mask
;

350 vﬁ©ûê*
a
 = 
addr
;

352 
a
 +
ƒ
 >> 5;

353 
mask
 = 1 << (
ƒ
 & 0x1f);

354 *
a
 |
mask
;

355 
	}
}

367 
__ölöe__
 
	$˛ór_bô
(
ƒ
, vﬁ©ûê* 
addr
)

369 
mask
;

370 vﬁ©ûê*
a
 = 
addr
;

371 
__bi_Êags
;

373 
a
 +
ƒ
 >> 5;

374 
mask
 = 1 << (
ƒ
 & 0x1f);

375 
	`__bi_ßve_™d_˛i
(
Êags
);

376 *
a
 &~
mask
;

377 
	`__bi_ª°‹e_Êags
(
Êags
);

378 
	}
}

389 
__ölöe__
 
	$ch™ge_bô
(
ƒ
, vﬁ©ûê* 
addr
)

391 
mask
;

392 vﬁ©ûê*
a
 = 
addr
;

393 
__bi_Êags
;

395 
a
 +
ƒ
 >> 5;

396 
mask
 = 1 << (
ƒ
 & 0x1f);

397 
	`__bi_ßve_™d_˛i
(
Êags
);

398 *
a
 ^
mask
;

399 
	`__bi_ª°‹e_Êags
(
Êags
);

400 
	}
}

411 
__ölöe__
 
	$__ch™ge_bô
(
ƒ
, vﬁ©ûê* 
addr
)

413 * 
m
 = ((*Ë
addr
Ë+ (
ƒ
 >> 5);

415 *
m
 ^1UL << (
ƒ
 & 31);

416 
	}
}

426 
__ölöe__
 
	$ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê* 
addr
)

428 
mask
, 
ªtvÆ
;

429 vﬁ©ûê*
a
 = 
addr
;

430 
__bi_Êags
;

432 
a
 +
ƒ
 >> 5;

433 
mask
 = 1 << (
ƒ
 & 0x1f);

434 
	`__bi_ßve_™d_˛i
(
Êags
);

435 
ªtvÆ
 = (
mask
 & *
a
) != 0;

436 *
a
 |
mask
;

437 
	`__bi_ª°‹e_Êags
(
Êags
);

439  
ªtvÆ
;

440 
	}
}

451 
__ölöe__
 
	$__ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê* 
addr
)

453 
mask
, 
ªtvÆ
;

454 vﬁ©ûê*
a
 = 
addr
;

456 
a
 +
ƒ
 >> 5;

457 
mask
 = 1 << (
ƒ
 & 0x1f);

458 
ªtvÆ
 = (
mask
 & *
a
) != 0;

459 *
a
 |
mask
;

461  
ªtvÆ
;

462 
	}
}

472 
__ölöe__
 
	$ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê* 
addr
)

474 
mask
, 
ªtvÆ
;

475 vﬁ©ûê*
a
 = 
addr
;

476 
__bi_Êags
;

478 
a
 +
ƒ
 >> 5;

479 
mask
 = 1 << (
ƒ
 & 0x1f);

480 
	`__bi_ßve_™d_˛i
(
Êags
);

481 
ªtvÆ
 = (
mask
 & *
a
) != 0;

482 *
a
 &~
mask
;

483 
	`__bi_ª°‹e_Êags
(
Êags
);

485  
ªtvÆ
;

486 
	}
}

497 
__ölöe__
 
	$__ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê* 
addr
)

499 
mask
, 
ªtvÆ
;

500 vﬁ©ûê*
a
 = 
addr
;

502 
a
 +
ƒ
 >> 5;

503 
mask
 = 1 << (
ƒ
 & 0x1f);

504 
ªtvÆ
 = (
mask
 & *
a
) != 0;

505 *
a
 &~
mask
;

507  
ªtvÆ
;

508 
	}
}

518 
__ölöe__
 
	$ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê* 
addr
)

520 
mask
, 
ªtvÆ
;

521 vﬁ©ûê*
a
 = 
addr
;

522 
__bi_Êags
;

524 
a
 +
ƒ
 >> 5;

525 
mask
 = 1 << (
ƒ
 & 0x1f);

526 
	`__bi_ßve_™d_˛i
(
Êags
);

527 
ªtvÆ
 = (
mask
 & *
a
) != 0;

528 *
a
 ^
mask
;

529 
	`__bi_ª°‹e_Êags
(
Êags
);

531  
ªtvÆ
;

532 
	}
}

543 
__ölöe__
 
	$__ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê* 
addr
)

545 
mask
, 
ªtvÆ
;

546 vﬁ©ûê*
a
 = 
addr
;

548 
a
 +
ƒ
 >> 5;

549 
mask
 = 1 << (
ƒ
 & 0x1f);

550 
ªtvÆ
 = (
mask
 & *
a
) != 0;

551 *
a
 ^
mask
;

553  
ªtvÆ
;

554 
	}
}

556 #unde‡
__bi_Êags


557 #unde‡
__bi_˛i


558 #unde‡
__bi_ßve_Êags


559 #unde‡
__bi_ª°‹e_Êags


568 
__ölöe__
 
	$ã°_bô
(
ƒ
, vﬁ©ûê*
addr
)

570  ((1UL << (
ƒ
 & 31)Ë& (((c⁄° *Ë
addr
)[nr >> 5])) != 0;

571 
	}
}

573 #i‚de‡
__MIPSEB__


585 
__ölöe__
 
	$föd_fú°_zîo_bô
 (*
addr
, 
size
)

587 
dummy
;

588 
ªs
;

590 i‡(!
size
)

593 
	`__asm__
 (".set\tnoreorder\n\t"

599 #i‡(
_MIPS_ISA
 =
_MIPS_ISA_MIPS2
 ) || (_MIPS_ISA =
_MIPS_ISA_MIPS3
 ) || \

600 (
_MIPS_ISA
 =
_MIPS_ISA_MIPS4
 ) || (_MIPS_ISA =
_MIPS_ISA_MIPS5
 ) || \

601 (
_MIPS_ISA
 =
_MIPS_ISA_MIPS32
Ë|| (_MIPS_ISA =
_MIPS_ISA_MIPS64
)

610 #ifde‡
__MIPSEB__


622 : "Ù" (
ªs
), "Ù" (
dummy
), "Ù" (
addr
)

624 "2" (
addr
), "r" (
size
)

627  
ªs
;

628 
	}
}

636 
__ölöe__
 
	$föd_√xt_zîo_bô
 (* 
addr
, 
size
, 
off£t
)

638 *
p
 = ((*Ë
addr
Ë+ (
off£t
 >> 5);

639 
£t
 = 0, 
bô
 = 
off£t
 & 31, 
ªs
;

640 
dummy
;

642 i‡(
bô
) {

646 #ifde‡
__MIPSEB__


649 
	`__asm__
(".set\tnoreorder\n\t"

659 : "Ù" (
£t
), "Ù" (
dummy
)

660 : "0" (0), "1" (1 << 
bô
), "r" (*
p
)

662 i‡(
£t
 < (32 - 
bô
))

663  
£t
 + 
off£t
;

664 
£t
 = 32 - 
bô
;

665 
p
++;

670 
ªs
 = 
	`föd_fú°_zîo_bô
(
p
, 
size
 - 32 * (∞- (*Ë
addr
));

671  
off£t
 + 
£t
 + 
ªs
;

672 
	}
}

682 
__ölöe__
 
	$ffz
(
w‹d
)

684 
__ªs
;

685 
mask
 = 1;

687 
	`__asm__
 (

699 : "=&r" (
__ªs
), "Ù" (
mask
)

700 : "r" (
w‹d
), "1" (
mask
)

703  
__ªs
;

704 
	}
}

706 #ifde‡
__KERNEL__


717 
	#ffs
(
x
Ë
	`gíîic_ffs
(x)

	)

726 
	#hweight32
(
x
Ë
	`gíîic_hweight32
(x)

	)

727 
	#hweight16
(
x
Ë
	`gíîic_hweight16
(x)

	)

728 
	#hweight8
(
x
Ë
	`gíîic_hweight8
(x)

	)

732 #ifde‡
__MIPSEB__


739 
__ölöe__
 
	$föd_√xt_zîo_bô
(*
addr
, 
size
, 
off£t
)

741 *
p
 = ((*Ë
addr
Ë+ (
off£t
 >> 5);

742 
ªsu…
 = 
off£t
 & ~31UL;

743 
tmp
;

745 i‡(
off£t
 >
size
)

746  
size
;

747 
size
 -
ªsu…
;

748 
off£t
 &= 31UL;

749 i‡(
off£t
) {

750 
tmp
 = *(
p
++);

751 
tmp
 |~0UL >> (32-
off£t
);

752 i‡(
size
 < 32)

753 
found_fú°
;

754 i‡(~
tmp
)

755 
found_middÀ
;

756 
size
 -= 32;

757 
ªsu…
 += 32;

759 
size
 & ~31UL) {

760 i‡(~(
tmp
 = *(
p
++)))

761 
found_middÀ
;

762 
ªsu…
 += 32;

763 
size
 -= 32;

765 i‡(!
size
)

766  
ªsu…
;

767 
tmp
 = *
p
;

769 
found_fú°
:

770 
tmp
 |~0UL << 
size
;

771 
found_middÀ
:

772  
ªsu…
 + 
	`ffz
(
tmp
);

773 
	}
}

788 
föd_fú°_zîo_bô
 (*
addr
, 
size
);

791 
	#föd_fú°_zîo_bô
(
addr
, 
size
) \

792 
	`föd_√xt_zîo_bô
((
addr
), (
size
), 0)

	)

798 #ifde‡
__MIPSEB__


799 
__ölöe__
 
	$ext2_£t_bô
(
ƒ
, * 
addr
)

801 
mask
, 
ªtvÆ
, 
Êags
;

802 *
ADDR
 = (*Ë
addr
;

804 
ADDR
 +
ƒ
 >> 3;

805 
mask
 = 1 << (
ƒ
 & 0x07);

806 
	`ßve_™d_˛i
(
Êags
);

807 
ªtvÆ
 = (
mask
 & *
ADDR
) != 0;

808 *
ADDR
 |
mask
;

809 
	`ª°‹e_Êags
(
Êags
);

810  
ªtvÆ
;

811 
	}
}

813 
__ölöe__
 
	$ext2_˛ór_bô
(
ƒ
, * 
addr
)

815 
mask
, 
ªtvÆ
, 
Êags
;

816 *
ADDR
 = (*Ë
addr
;

818 
ADDR
 +
ƒ
 >> 3;

819 
mask
 = 1 << (
ƒ
 & 0x07);

820 
	`ßve_™d_˛i
(
Êags
);

821 
ªtvÆ
 = (
mask
 & *
ADDR
) != 0;

822 *
ADDR
 &~
mask
;

823 
	`ª°‹e_Êags
(
Êags
);

824  
ªtvÆ
;

825 
	}
}

827 
__ölöe__
 
	$ext2_ã°_bô
(
ƒ
, c⁄° * 
addr
)

829 
mask
;

830 c⁄° *
ADDR
 = (c⁄° *Ë
addr
;

832 
ADDR
 +
ƒ
 >> 3;

833 
mask
 = 1 << (
ƒ
 & 0x07);

834  ((
mask
 & *
ADDR
) != 0);

835 
	}
}

837 
	#ext2_föd_fú°_zîo_bô
(
addr
, 
size
) \

838 
	`ext2_föd_√xt_zîo_bô
((
addr
), (
size
), 0)

	)

840 
__ölöe__
 
	$ext2_föd_√xt_zîo_bô
(*
addr
, 
size
, 
off£t
)

842 *
p
 = ((*Ë
addr
Ë+ (
off£t
 >> 5);

843 
ªsu…
 = 
off£t
 & ~31UL;

844 
tmp
;

846 i‡(
off£t
 >
size
)

847  
size
;

848 
size
 -
ªsu…
;

849 
off£t
 &= 31UL;

850 if(
off£t
) {

861 
tmp
 = *(
p
++);

862 
tmp
 |
	`__swab32
(~0UL >> (32-
off£t
));

863 if(
size
 < 32)

864 
found_fú°
;

865 if(~
tmp
)

866 
found_middÀ
;

867 
size
 -= 32;

868 
ªsu…
 += 32;

870 
size
 & ~31UL) {

871 if(~(
tmp
 = *(
p
++)))

872 
found_middÀ
;

873 
ªsu…
 += 32;

874 
size
 -= 32;

876 if(!
size
)

877  
ªsu…
;

878 
tmp
 = *
p
;

880 
found_fú°
:

885  
ªsu…
 + 
	`ffz
(
	`__swab32
(
tmp
Ë| (~0UL << 
size
));

886 
found_middÀ
:

887  
ªsu…
 + 
	`ffz
(
	`__swab32
(
tmp
));

888 
	}
}

892 
	#ext2_£t_bô
(
ƒ
, 
addr
Ë
	`ã°_™d_£t_bô
(“r), (addr))

	)

893 
	#ext2_˛ór_bô
(
ƒ
, 
addr
Ë
	`ã°_™d_˛ór_bô
(“r), (addr))

	)

894 
	#ext2_ã°_bô
(
ƒ
, 
addr
Ë
	`ã°_bô
(“r), (addr))

	)

895 
	#ext2_föd_fú°_zîo_bô
(
addr
, 
size
Ë
	`föd_fú°_zîo_bô
(◊ddr), (size))

	)

896 
	#ext2_föd_√xt_zîo_bô
(
addr
, 
size
, 
off£t
) \

897 
	`föd_√xt_zîo_bô
((
addr
), (
size
), (
off£t
))

	)

906 
	#möix_ã°_™d_£t_bô
(
ƒ
,
addr
Ë
	`ã°_™d_£t_bô
“r,addr)

	)

907 
	#möix_£t_bô
(
ƒ
,
addr
Ë
	`£t_bô
“r,addr)

	)

908 
	#möix_ã°_™d_˛ór_bô
(
ƒ
,
addr
Ë
	`ã°_™d_˛ór_bô
“r,addr)

	)

909 
	#möix_ã°_bô
(
ƒ
,
addr
Ë
	`ã°_bô
“r,addr)

	)

910 
	#möix_föd_fú°_zîo_bô
(
addr
,
size
Ë
	`föd_fú°_zîo_bô
◊ddr,size)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/byteorder.h

9 #i‚de‡
_MIPS_BYTEORDER_H


10 
	#_MIPS_BYTEORDER_H


	)

12 
	~<asm/ty≥s.h
>

14 #ifde‡
__GNUC__


16 #i‡!
deföed
(
__STRICT_ANSI__
Ë|| deföed(
__KERNEL__
)

17 
	#__BYTEORDER_HAS_U64__


	)

18 
	#__SWAB_64_THRU_32__


	)

23 #i‡
deföed
 (
__MIPSEB__
)

24 
	~<löux/byã‹dî/big_ídün.h
>

25 #ñi‡
deföed
 (
__MIPSEL__
)

26 
	~<löux/byã‹dî/lôée_ídün.h
>

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/cache.h

7 #i‚de‡
__MIPS_CACHE_H__


8 
	#__MIPS_CACHE_H__


	)

10 
	#CONFIG_SYS_CACHELINE_SIZE
 32

	)

17 #ifde‡
CONFIG_SYS_CACHELINE_SIZE


18 
	#ARCH_DMA_MINALIGN
 
CONFIG_SYS_CACHELINE_SIZE


	)

20 
	#ARCH_DMA_MINALIGN
 128

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/cachectl.h

6 #i‚def 
__ASM_MIPS_CACHECTL


7 
	#__ASM_MIPS_CACHECTL


	)

12 
	#ICACHE
 (1<<0Ë

	)

13 
	#DCACHE
 (1<<1Ë

	)

14 
	#BCACHE
 (
ICACHE
|
DCACHE
Ë

	)

21 
	#CACHEABLE
 0

	)

22 
	#UNCACHEABLE
 1

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/cacheops.h

10 #i‚def 
__ASM_MIPS_CACHEOPS_H


11 
	#__ASM_MIPS_CACHEOPS_H


	)

16 
	#Index_InvÆid©e_I
 0x00

	)

17 
	#Index_Wrôeback_Inv_D
 0x01

	)

18 
	#Index_InvÆid©e_SI
 0x02

	)

19 
	#Index_Wrôeback_Inv_SD
 0x03

	)

20 
	#Index_Lﬂd_Tag_I
 0x04

	)

21 
	#Index_Lﬂd_Tag_D
 0x05

	)

22 
	#Index_Lﬂd_Tag_SI
 0x06

	)

23 
	#Index_Lﬂd_Tag_SD
 0x07

	)

24 
	#Index_St‹e_Tag_I
 0x08

	)

25 
	#Index_St‹e_Tag_D
 0x09

	)

26 
	#Index_St‹e_Tag_SI
 0x0A

	)

27 
	#Index_St‹e_Tag_SD
 0x0B

	)

28 
	#Cª©e_Dúty_Ex˛_D
 0x0d

	)

29 
	#Cª©e_Dúty_Ex˛_SD
 0x0f

	)

30 
	#Hô_InvÆid©e_I
 0x10

	)

31 
	#Hô_InvÆid©e_D
 0x11

	)

32 
	#Hô_InvÆid©e_SI
 0x12

	)

33 
	#Hô_InvÆid©e_SD
 0x13

	)

34 
	#Fûl
 0x14

	)

35 
	#Hô_Wrôeback_Inv_D
 0x15

	)

37 
	#Hô_Wrôeback_Inv_SD
 0x17

	)

38 
	#Hô_Wrôeback_I
 0x18

	)

39 
	#Hô_Wrôeback_D
 0x19

	)

41 
	#Hô_Wrôeback_SD
 0x1b

	)

44 
	#Hô_Së_VútuÆ_SI
 0x1e

	)

45 
	#Hô_Së_VútuÆ_SD
 0x1f

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/global_data.h

24 #i‚def 
__ASM_GBL_DATA_H


25 
	#__ASM_GBL_DATA_H


	)

27 
	~<asm/ªgdef.h
>

39 
	sglobÆ_d©a
 {

40 
bd_t
 *
	mbd
;

41 
	mÊags
;

42 
	mbaudøã
;

43 
	mhave_c⁄sﬁe
;

44 
	møm_size
;

45 
	mªloc_off
;

46 
	mív_addr
;

47 
	mív_vÆid
;

48 **
	mjt
;

49 } 
	tgd_t
;

54 
	#GD_FLG_RELOC
 0x00001

	)

55 
	#GD_FLG_DEVINIT
 0x00002

	)

56 
	#GD_FLG_SILENT
 0x00004

	)

58 
	#DECLARE_GLOBAL_DATA_PTR
 vﬁ©ûê
gd_t
 *
gd
 
	`asm
 ("k0")

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/inca-ip.h

32 
	#INCA_IP_WDT
 (0xB8000000)

	)

37 
	#INCA_IP_WDT_RST_SR
 ((vﬁ©ûê
u32
*)(
INCA_IP_WDT
+ 0x0014))

	)

40 
	#INCA_IP_WDT_RST_REQ
 ((vﬁ©ûê
u32
*)(
INCA_IP_WDT
+ 0x0010))

	)

41 
	#INCA_IP_WDT_RST_REQ_SWBOOT
 (1 << 24)

	)

42 
	#INCA_IP_WDT_RST_REQ_SWCFG
 (1 << 16)

	)

43 
	#INCA_IP_WDT_RST_REQ_RRPHY
 (1 << 5)

	)

44 
	#INCA_IP_WDT_RST_REQ_RRHSP
 (1 << 4)

	)

45 
	#INCA_IP_WDT_RST_REQ_RRFPI
 (1 << 3)

	)

46 
	#INCA_IP_WDT_RST_REQ_RREXT
 (1 << 2)

	)

47 
	#INCA_IP_WDT_RST_REQ_RRDSP
 (1 << 1)

	)

48 
	#INCA_IP_WDT_RST_REQ_RRCPU
 (1 << 0)

	)

51 
	#INCA_IP_WDT_NMISR
 ((vﬁ©ûê
u32
*)(
INCA_IP_WDT
+ 0x002C))

	)

52 
	#INCA_IP_WDT_NMISR_NMIWDT
 (1 << 2)

	)

53 
	#INCA_IP_WDT_NMISR_NMIPLL
 (1 << 1)

	)

54 
	#INCA_IP_WDT_NMISR_NMIEXT
 (1 << 0)

	)

57 
	#INCA_IP_WDT_MANID
 ((vﬁ©ûê
u32
*)(
INCA_IP_WDT
+ 0x0070))

	)

58 
	#INCA_IP_WDT_MANID_MANUF
 (
vÆue
Ë(((–1 << 11Ë- 1Ë& (vÆue)Ë<< 5)

	)

61 
	#INCA_IP_WDT_CHIPID
 ((vﬁ©ûê
u32
*)(
INCA_IP_WDT
+ 0x0074))

	)

62 
	#INCA_IP_WDT_CHIPID_VERSION
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 28)

	)

63 
	#INCA_IP_WDT_CHIPID_PART_NUMBER
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 12)

	)

64 
	#INCA_IP_WDT_CHIPID_MANID
 (
vÆue
Ë(((–1 << 11Ë- 1Ë& (vÆue)Ë<< 1)

	)

67 
	#INCA_IP_WDT_RTID
 ((vﬁ©ûê
u32
*)(
INCA_IP_WDT
+ 0x0078))

	)

68 
	#INCA_IP_WDT_RTID_LC
 (1 << 15)

	)

69 
	#INCA_IP_WDT_RTID_RIX
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 0)

	)

72 
	#INCA_IP_WDT_WDT_CON0
 ((vﬁ©ûê
u32
*)(
INCA_IP_WDT
+ 0x0020))

	)

75 
	#INCA_IP_WDT_WDT_CON1
 ((vﬁ©ûê
u32
*)(
INCA_IP_WDT
+ 0x0024))

	)

76 
	#INCA_IP_WDT_WDT_CON1_WDTDR
 (1 << 3)

	)

77 
	#INCA_IP_WDT_WDT_CON1_WDTIR
 (1 << 2)

	)

80 
	#INCA_IP_WDT_WDT_SR
 ((vﬁ©ûê
u32
*)(
INCA_IP_WDT
+ 0x0028))

	)

81 
	#INCA_IP_WDT_WDT_SR_WDTTIM
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 16)

	)

82 
	#INCA_IP_WDT_WDT_SR_WDTPR
 (1 << 5)

	)

83 
	#INCA_IP_WDT_WDT_SR_WDTTO
 (1 << 4)

	)

84 
	#INCA_IP_WDT_WDT_SR_WDTDS
 (1 << 3)

	)

85 
	#INCA_IP_WDT_WDT_SR_WDTIS
 (1 << 2)

	)

86 
	#INCA_IP_WDT_WDT_SR_WDTOE
 (1 << 1)

	)

87 
	#INCA_IP_WDT_WDT_SR_WDTAE
 (1 << 0)

	)

93 
	#INCA_IP_CGU
 (0xBF107000)

	)

98 
	#INCA_IP_CGU_CGU_PLL1CR
 ((vﬁ©ûê
u32
*)(
INCA_IP_CGU
+ 0x0008))

	)

99 
	#INCA_IP_CGU_CGU_PLL1CR_SWRST
 (1 << 31)

	)

100 
	#INCA_IP_CGU_CGU_PLL1CR_EN
 (1 << 30)

	)

101 
	#INCA_IP_CGU_CGU_PLL1CR_NDIV
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 16)

	)

102 
	#INCA_IP_CGU_CGU_PLL1CR_MDIV
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

105 
	#INCA_IP_CGU_CGU_PLL0CR
 ((vﬁ©ûê
u32
*)(
INCA_IP_CGU
+ 0x0000))

	)

106 
	#INCA_IP_CGU_CGU_PLL0CR_SWRST
 (1 << 31)

	)

107 
	#INCA_IP_CGU_CGU_PLL0CR_EN
 (1 << 30)

	)

108 
	#INCA_IP_CGU_CGU_PLL0CR_NDIV
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 16)

	)

109 
	#INCA_IP_CGU_CGU_PLL0CR_MDIV
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

112 
	#INCA_IP_CGU_CGU_PLL0SR
 ((vﬁ©ûê
u32
*)(
INCA_IP_CGU
+ 0x0004))

	)

113 
	#INCA_IP_CGU_CGU_PLL0SR_LOCK
 (1 << 31)

	)

114 
	#INCA_IP_CGU_CGU_PLL0SR_RCF
 (1 << 29)

	)

115 
	#INCA_IP_CGU_CGU_PLL0SR_PLLBYP
 (1 << 15)

	)

118 
	#INCA_IP_CGU_CGU_PLL1SR
 ((vﬁ©ûê
u32
*)(
INCA_IP_CGU
+ 0x000C))

	)

119 
	#INCA_IP_CGU_CGU_PLL1SR_LOCK
 (1 << 31)

	)

120 
	#INCA_IP_CGU_CGU_PLL1SR_RCF
 (1 << 29)

	)

121 
	#INCA_IP_CGU_CGU_PLL1SR_PLLBYP
 (1 << 15)

	)

124 
	#INCA_IP_CGU_CGU_DIVCR
 ((vﬁ©ûê
u32
*)(
INCA_IP_CGU
+ 0x0010))

	)

127 
	#INCA_IP_CGU_CGU_MUXCR
 ((vﬁ©ûê
u32
*)(
INCA_IP_CGU
+ 0x0014))

	)

128 
	#INCA_IP_CGU_CGU_MUXCR_SWRST
 (1 << 31)

	)

129 
	#INCA_IP_CGU_CGU_MUXCR_MUXII
 (1 << 1)

	)

130 
	#INCA_IP_CGU_CGU_MUXCR_MUXI
 (1 << 0)

	)

133 
	#INCA_IP_CGU_CGU_FDCR
 ((vﬁ©ûê
u32
*)(
INCA_IP_CGU
+ 0x0018))

	)

134 
	#INCA_IP_CGU_CGU_FDCR_FDEN
 (1 << 31)

	)

135 
	#INCA_IP_CGU_CGU_FDCR_INTEGER
 (
vÆue
Ë(((–1 << 12Ë- 1Ë& (vÆue)Ë<< 16)

	)

136 
	#INCA_IP_CGU_CGU_FDCR_FRACTION
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

142 
	#INCA_IP_PMU
 (0xBF102000)

	)

147 
	#INCA_IP_PMU_PM_GEN
 ((vﬁ©ûê
u32
*)(
INCA_IP_PMU
+ 0x0000))

	)

148 
	#INCA_IP_PMU_PM_GEN_EN16
 (1 << 16)

	)

149 
	#INCA_IP_PMU_PM_GEN_EN15
 (1 << 15)

	)

150 
	#INCA_IP_PMU_PM_GEN_EN14
 (1 << 14)

	)

151 
	#INCA_IP_PMU_PM_GEN_EN13
 (1 << 13)

	)

152 
	#INCA_IP_PMU_PM_GEN_EN12
 (1 << 12)

	)

153 
	#INCA_IP_PMU_PM_GEN_EN11
 (1 << 11)

	)

154 
	#INCA_IP_PMU_PM_GEN_EN10
 (1 << 10)

	)

155 
	#INCA_IP_PMU_PM_GEN_EN9
 (1 << 9)

	)

156 
	#INCA_IP_PMU_PM_GEN_EN8
 (1 << 8)

	)

157 
	#INCA_IP_PMU_PM_GEN_EN7
 (1 << 7)

	)

158 
	#INCA_IP_PMU_PM_GEN_EN6
 (1 << 6)

	)

159 
	#INCA_IP_PMU_PM_GEN_EN5
 (1 << 5)

	)

160 
	#INCA_IP_PMU_PM_GEN_EN4
 (1 << 4)

	)

161 
	#INCA_IP_PMU_PM_GEN_EN3
 (1 << 3)

	)

162 
	#INCA_IP_PMU_PM_GEN_EN2
 (1 << 2)

	)

163 
	#INCA_IP_PMU_PM_GEN_EN0
 (1 << 0)

	)

166 
	#INCA_IP_PMU_PM_PDEN
 ((vﬁ©ûê
u32
*)(
INCA_IP_PMU
+ 0x0008))

	)

167 
	#INCA_IP_PMU_PM_PDEN_EN16
 (1 << 16)

	)

168 
	#INCA_IP_PMU_PM_PDEN_EN15
 (1 << 15)

	)

169 
	#INCA_IP_PMU_PM_PDEN_EN14
 (1 << 14)

	)

170 
	#INCA_IP_PMU_PM_PDEN_EN13
 (1 << 13)

	)

171 
	#INCA_IP_PMU_PM_PDEN_EN12
 (1 << 12)

	)

172 
	#INCA_IP_PMU_PM_PDEN_EN11
 (1 << 11)

	)

173 
	#INCA_IP_PMU_PM_PDEN_EN10
 (1 << 10)

	)

174 
	#INCA_IP_PMU_PM_PDEN_EN9
 (1 << 9)

	)

175 
	#INCA_IP_PMU_PM_PDEN_EN8
 (1 << 8)

	)

176 
	#INCA_IP_PMU_PM_PDEN_EN7
 (1 << 7)

	)

177 
	#INCA_IP_PMU_PM_PDEN_EN5
 (1 << 5)

	)

178 
	#INCA_IP_PMU_PM_PDEN_EN4
 (1 << 4)

	)

179 
	#INCA_IP_PMU_PM_PDEN_EN3
 (1 << 3)

	)

180 
	#INCA_IP_PMU_PM_PDEN_EN2
 (1 << 2)

	)

181 
	#INCA_IP_PMU_PM_PDEN_EN0
 (1 << 0)

	)

184 
	#INCA_IP_PMU_PM_WUP
 ((vﬁ©ûê
u32
*)(
INCA_IP_PMU
+ 0x0010))

	)

185 
	#INCA_IP_PMU_PM_WUP_WUP16
 (1 << 16)

	)

186 
	#INCA_IP_PMU_PM_WUP_WUP15
 (1 << 15)

	)

187 
	#INCA_IP_PMU_PM_WUP_WUP14
 (1 << 14)

	)

188 
	#INCA_IP_PMU_PM_WUP_WUP13
 (1 << 13)

	)

189 
	#INCA_IP_PMU_PM_WUP_WUP12
 (1 << 12)

	)

190 
	#INCA_IP_PMU_PM_WUP_WUP11
 (1 << 11)

	)

191 
	#INCA_IP_PMU_PM_WUP_WUP10
 (1 << 10)

	)

192 
	#INCA_IP_PMU_PM_WUP_WUP9
 (1 << 9)

	)

193 
	#INCA_IP_PMU_PM_WUP_WUP8
 (1 << 8)

	)

194 
	#INCA_IP_PMU_PM_WUP_WUP7
 (1 << 7)

	)

195 
	#INCA_IP_PMU_PM_WUP_WUP5
 (1 << 5)

	)

196 
	#INCA_IP_PMU_PM_WUP_WUP4
 (1 << 4)

	)

197 
	#INCA_IP_PMU_PM_WUP_WUP3
 (1 << 3)

	)

198 
	#INCA_IP_PMU_PM_WUP_WUP2
 (1 << 2)

	)

199 
	#INCA_IP_PMU_PM_WUP_WUP0
 (1 << 0)

	)

202 
	#INCA_IP_PMU_PM_CR
 ((vﬁ©ûê
u32
*)(
INCA_IP_PMU
+ 0x0014))

	)

203 
	#INCA_IP_PMU_PM_CR_AWEN
 (1 << 31)

	)

204 
	#INCA_IP_PMU_PM_CR_SWRST
 (1 << 30)

	)

205 
	#INCA_IP_PMU_PM_CR_SWCR
 (1 << 2)

	)

206 
	#INCA_IP_PMU_PM_CR_CRD
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 0)

	)

212 
	#INCA_IP_BCU
 (0xB8000100)

	)

217 
	#INCA_IP_BCU_BCU_CON
 ((vﬁ©ûê
u32
*)(
INCA_IP_BCU
+ 0x0010))

	)

218 
	#INCA_IP_BCU_BCU_CON_SPC
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 24)

	)

219 
	#INCA_IP_BCU_BCU_CON_SPE
 (1 << 19)

	)

220 
	#INCA_IP_BCU_BCU_CON_PSE
 (1 << 18)

	)

221 
	#INCA_IP_BCU_BCU_CON_DBG
 (1 << 16)

	)

222 
	#INCA_IP_BCU_BCU_CON_TOUT
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

225 
	#INCA_IP_BCU_BCU_ECON
 ((vﬁ©ûê
u32
*)(
INCA_IP_BCU
+ 0x0020))

	)

226 
	#INCA_IP_BCU_BCU_ECON_TAG
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 24)

	)

227 
	#INCA_IP_BCU_BCU_ECON_RDN
 (1 << 23)

	)

228 
	#INCA_IP_BCU_BCU_ECON_WRN
 (1 << 22)

	)

229 
	#INCA_IP_BCU_BCU_ECON_SVM
 (1 << 21)

	)

230 
	#INCA_IP_BCU_BCU_ECON_ACK
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 19)

	)

231 
	#INCA_IP_BCU_BCU_ECON_ABT
 (1 << 18)

	)

232 
	#INCA_IP_BCU_BCU_ECON_RDY
 (1 << 17)

	)

233 
	#INCA_IP_BCU_BCU_ECON_TOUT
 (1 << 16)

	)

234 
	#INCA_IP_BCU_BCU_ECON_ERRCNT
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

235 
	#INCA_IP_BCU_BCU_ECON_OPC
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 28)

	)

238 
	#INCA_IP_BCU_BCU_EADD
 ((vﬁ©ûê
u32
*)(
INCA_IP_BCU
+ 0x0024))

	)

239 
	#INCA_IP_BCU_BCU_EADD_FPIADR


	)

242 
	#INCA_IP_BCU_BCU_EDAT
 ((vﬁ©ûê
u32
*)(
INCA_IP_BCU
+ 0x0028))

	)

243 
	#INCA_IP_BCU_BCU_EDAT_FPIDAT


	)

249 
	#INCA_IP_MBC
 (0xBF103000)

	)

254 
	#INCA_IP_MBC_MBC_CFG
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0080))

	)

255 
	#INCA_IP_MBC_MBC_CFG_SWAP
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 6)

	)

256 
	#INCA_IP_MBC_MBC_CFG_RES
 (1 << 5)

	)

257 
	#INCA_IP_MBC_MBC_CFG_FWID
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 1)

	)

258 
	#INCA_IP_MBC_MBC_CFG_SIZE
 (1 << 0)

	)

261 
	#INCA_IP_MBC_MBC_ISR
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0084))

	)

262 
	#INCA_IP_MBC_MBC_ISR_B3DA
 (1 << 31)

	)

263 
	#INCA_IP_MBC_MBC_ISR_B2DA
 (1 << 30)

	)

264 
	#INCA_IP_MBC_MBC_ISR_B1E
 (1 << 29)

	)

265 
	#INCA_IP_MBC_MBC_ISR_B0E
 (1 << 28)

	)

266 
	#INCA_IP_MBC_MBC_ISR_WDT
 (1 << 27)

	)

267 
	#INCA_IP_MBC_MBC_ISR_DS260
 (
vÆue
Ë(((–1 << 27Ë- 1Ë& (vÆue)Ë<< 0)

	)

270 
	#INCA_IP_MBC_MBC_MSK
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0088))

	)

271 
	#INCA_IP_MBC_MBC_MSK_B3DA
 (1 << 31)

	)

272 
	#INCA_IP_MBC_MBC_MSK_B2DA
 (1 << 30)

	)

273 
	#INCA_IP_MBC_MBC_MSK_B1E
 (1 << 29)

	)

274 
	#INCA_IP_MBC_MBC_MSK_B0E
 (1 << 28)

	)

275 
	#INCA_IP_MBC_MBC_MSK_WDT
 (1 << 27)

	)

276 
	#INCA_IP_MBC_MBC_MSK_DS260
 (
vÆue
Ë(((–1 << 27Ë- 1Ë& (vÆue)Ë<< 0)

	)

279 
	#INCA_IP_MBC_MBC_MSK01
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x008C))

	)

280 
	#INCA_IP_MBC_MBC_MSK01_B3DA
 (1 << 31)

	)

281 
	#INCA_IP_MBC_MBC_MSK01_B2DA
 (1 << 30)

	)

282 
	#INCA_IP_MBC_MBC_MSK01_B1E
 (1 << 29)

	)

283 
	#INCA_IP_MBC_MBC_MSK01_B0E
 (1 << 28)

	)

284 
	#INCA_IP_MBC_MBC_MSK01_WDT
 (1 << 27)

	)

285 
	#INCA_IP_MBC_MBC_MSK01_DS260
 (
vÆue
Ë(((–1 << 27Ë- 1Ë& (vÆue)Ë<< 0)

	)

288 
	#INCA_IP_MBC_MBC_MSK10
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0090))

	)

289 
	#INCA_IP_MBC_MBC_MSK10_B3DA
 (1 << 31)

	)

290 
	#INCA_IP_MBC_MBC_MSK10_B2DA
 (1 << 30)

	)

291 
	#INCA_IP_MBC_MBC_MSK10_B1E
 (1 << 29)

	)

292 
	#INCA_IP_MBC_MBC_MSK10_B0E
 (1 << 28)

	)

293 
	#INCA_IP_MBC_MBC_MSK10_WDT
 (1 << 27)

	)

294 
	#INCA_IP_MBC_MBC_MSK10_DS260
 (
vÆue
Ë(((–1 << 27Ë- 1Ë& (vÆue)Ë<< 0)

	)

297 
	#INCA_IP_MBC_MBC_CMD
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0094))

	)

298 
	#INCA_IP_MBC_MBC_CMD_CS270
 (
vÆue
Ë(((–1 << 28Ë- 1Ë& (vÆue)Ë<< 0)

	)

301 
	#INCA_IP_MBC_MBC_ID0
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0000))

	)

302 
	#INCA_IP_MBC_MBC_ID0_INDATA


	)

305 
	#INCA_IP_MBC_MBC_ID1
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0020))

	)

306 
	#INCA_IP_MBC_MBC_ID1_INDATA


	)

309 
	#INCA_IP_MBC_MBC_OD2
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0040))

	)

310 
	#INCA_IP_MBC_MBC_OD2_OUTDATA


	)

313 
	#INCA_IP_MBC_MBC_OD3
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0060))

	)

314 
	#INCA_IP_MBC_MBC_OD3_OUTDATA


	)

317 
	#INCA_IP_MBC_MBC_CR0
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0004))

	)

318 
	#INCA_IP_MBC_MBC_CR0_RDYABTFLS
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 0)

	)

321 
	#INCA_IP_MBC_MBC_CR1
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0024))

	)

322 
	#INCA_IP_MBC_MBC_CR1_RDYABTFLS
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 0)

	)

325 
	#INCA_IP_MBC_MBC_CR2
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0044))

	)

326 
	#INCA_IP_MBC_MBC_CR2_RDYABTFLS
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 0)

	)

329 
	#INCA_IP_MBC_MBC_CR3
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0064))

	)

330 
	#INCA_IP_MBC_MBC_CR3_RDYABTFLS
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 0)

	)

333 
	#INCA_IP_MBC_MBC_FS0
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0008))

	)

334 
	#INCA_IP_MBC_MBC_FS0_FS


	)

337 
	#INCA_IP_MBC_MBC_FS1
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0028))

	)

338 
	#INCA_IP_MBC_MBC_FS1_FS


	)

341 
	#INCA_IP_MBC_MBC_FS2
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0048))

	)

342 
	#INCA_IP_MBC_MBC_FS2_FS


	)

345 
	#INCA_IP_MBC_MBC_FS3
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0068))

	)

346 
	#INCA_IP_MBC_MBC_FS3_FS


	)

349 
	#INCA_IP_MBC_MBC_DA0
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x000C))

	)

350 
	#INCA_IP_MBC_MBC_DA0_DA


	)

353 
	#INCA_IP_MBC_MBC_DA1
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x002C))

	)

354 
	#INCA_IP_MBC_MBC_DA1_DA


	)

357 
	#INCA_IP_MBC_MBC_DA2
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x004C))

	)

358 
	#INCA_IP_MBC_MBC_DA2_DA


	)

361 
	#INCA_IP_MBC_MBC_DA3
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x006C))

	)

362 
	#INCA_IP_MBC_MBC_DA3_DA


	)

365 
	#INCA_IP_MBC_MBC_IABS0
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0010))

	)

366 
	#INCA_IP_MBC_MBC_IABS0_IABS


	)

369 
	#INCA_IP_MBC_MBC_IABS1
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0030))

	)

370 
	#INCA_IP_MBC_MBC_IABS1_IABS


	)

373 
	#INCA_IP_MBC_MBC_IABS2
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0050))

	)

374 
	#INCA_IP_MBC_MBC_IABS2_IABS


	)

377 
	#INCA_IP_MBC_MBC_IABS3
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0070))

	)

378 
	#INCA_IP_MBC_MBC_IABS3_IABS


	)

381 
	#INCA_IP_MBC_MBC_ITMP0
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0014))

	)

382 
	#INCA_IP_MBC_MBC_ITMP0_ITMP


	)

385 
	#INCA_IP_MBC_MBC_ITMP1
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0034))

	)

386 
	#INCA_IP_MBC_MBC_ITMP1_ITMP


	)

389 
	#INCA_IP_MBC_MBC_ITMP2
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0054))

	)

390 
	#INCA_IP_MBC_MBC_ITMP2_ITMP


	)

393 
	#INCA_IP_MBC_MBC_ITMP3
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0074))

	)

394 
	#INCA_IP_MBC_MBC_ITMP3_ITMP


	)

397 
	#INCA_IP_MBC_MBC_OABS0
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0018))

	)

398 
	#INCA_IP_MBC_MBC_OABS0_OABS


	)

401 
	#INCA_IP_MBC_MBC_OABS1
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0038))

	)

402 
	#INCA_IP_MBC_MBC_OABS1_OABS


	)

405 
	#INCA_IP_MBC_MBC_OABS2
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0058))

	)

406 
	#INCA_IP_MBC_MBC_OABS2_OABS


	)

409 
	#INCA_IP_MBC_MBC_OABS3
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x0078))

	)

410 
	#INCA_IP_MBC_MBC_OABS3_OABS


	)

413 
	#INCA_IP_MBC_MBC_OTMP0
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x001C))

	)

414 
	#INCA_IP_MBC_MBC_OTMP0_OTMP


	)

417 
	#INCA_IP_MBC_MBC_OTMP1
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x003C))

	)

418 
	#INCA_IP_MBC_MBC_OTMP1_OTMP


	)

421 
	#INCA_IP_MBC_MBC_OTMP2
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x005C))

	)

422 
	#INCA_IP_MBC_MBC_OTMP2_OTMP


	)

425 
	#INCA_IP_MBC_MBC_OTMP3
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x007C))

	)

426 
	#INCA_IP_MBC_MBC_OTMP3_OTMP


	)

429 
	#INCA_IP_MBC_DCTRL
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x00A0))

	)

430 
	#INCA_IP_MBC_DCTRL_BA
 (1 << 0)

	)

431 
	#INCA_IP_MBC_DCTRL_BMOD
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 1)

	)

432 
	#INCA_IP_MBC_DCTRL_IDL
 (1 << 4)

	)

433 
	#INCA_IP_MBC_DCTRL_RES
 (1 << 15)

	)

436 
	#INCA_IP_MBC_DSTA
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x00A4))

	)

437 
	#INCA_IP_MBC_DSTA_IDLE
 (1 << 0)

	)

438 
	#INCA_IP_MBC_DSTA_PD
 (1 << 1)

	)

441 
	#INCA_IP_MBC_DTST1
 ((vﬁ©ûê
u32
*)(
INCA_IP_MBC
+ 0x00A8))

	)

442 
	#INCA_IP_MBC_DTST1_ABORT
 (1 << 0)

	)

443 
	#INCA_IP_MBC_DTST1_HWF32
 (1 << 1)

	)

444 
	#INCA_IP_MBC_DTST1_HWF4M
 (1 << 2)

	)

445 
	#INCA_IP_MBC_DTST1_HWFOP
 (1 << 3)

	)

451 
	#INCA_IP_Swôch
 (0xBF104000)

	)

456 
	#INCA_IP_Swôch_UN_DEST
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0000))

	)

457 
	#INCA_IP_Swôch_UN_DEST_CB
 (1 << 8)

	)

458 
	#INCA_IP_Swôch_UN_DEST_LB
 (1 << 7)

	)

459 
	#INCA_IP_Swôch_UN_DEST_PB
 (1 << 6)

	)

460 
	#INCA_IP_Swôch_UN_DEST_CM
 (1 << 5)

	)

461 
	#INCA_IP_Swôch_UN_DEST_LM
 (1 << 4)

	)

462 
	#INCA_IP_Swôch_UN_DEST_PM
 (1 << 3)

	)

463 
	#INCA_IP_Swôch_UN_DEST_CU
 (1 << 2)

	)

464 
	#INCA_IP_Swôch_UN_DEST_LU
 (1 << 1)

	)

465 
	#INCA_IP_Swôch_UN_DEST_PU
 (1 << 0)

	)

468 
	#INCA_IP_Swôch_VLAN_CTRL
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0004))

	)

469 
	#INCA_IP_Swôch_VLAN_CTRL_SC
 (1 << 6)

	)

470 
	#INCA_IP_Swôch_VLAN_CTRL_SL
 (1 << 5)

	)

471 
	#INCA_IP_Swôch_VLAN_CTRL_SP
 (1 << 4)

	)

472 
	#INCA_IP_Swôch_VLAN_CTRL_TC
 (1 << 3)

	)

473 
	#INCA_IP_Swôch_VLAN_CTRL_TL
 (1 << 2)

	)

474 
	#INCA_IP_Swôch_VLAN_CTRL_TP
 (1 << 1)

	)

475 
	#INCA_IP_Swôch_VLAN_CTRL_VA
 (1 << 0)

	)

478 
	#INCA_IP_Swôch_PC_VLAN
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0008))

	)

479 
	#INCA_IP_Swôch_PC_VLAN_PRI
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 12)

	)

480 
	#INCA_IP_Swôch_PC_VLAN_VLAN_ID
 (
vÆue
Ë(((–1 << 12Ë- 1Ë& (vÆue)Ë<< 0)

	)

483 
	#INCA_IP_Swôch_LAN_VLAN
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x000C))

	)

484 
	#INCA_IP_Swôch_LAN_VLAN_PRI
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 12)

	)

485 
	#INCA_IP_Swôch_LAN_VLAN_VLAN_ID
 (
vÆue
Ë(((–1 << 12Ë- 1Ë& (vÆue)Ë<< 0)

	)

488 
	#INCA_IP_Swôch_CPU_VLAN
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0010))

	)

489 
	#INCA_IP_Swôch_CPU_VLAN_PRI
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 12)

	)

490 
	#INCA_IP_Swôch_CPU_VLAN_VLAN_ID
 (
vÆue
Ë(((–1 << 12Ë- 1Ë& (vÆue)Ë<< 0)

	)

493 
	#INCA_IP_Swôch_PRI_CoS
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0014))

	)

494 
	#INCA_IP_Swôch_PRI_CoS_P7
 (1 << 7)

	)

495 
	#INCA_IP_Swôch_PRI_CoS_P6
 (1 << 6)

	)

496 
	#INCA_IP_Swôch_PRI_CoS_P5
 (1 << 5)

	)

497 
	#INCA_IP_Swôch_PRI_CoS_P4
 (1 << 4)

	)

498 
	#INCA_IP_Swôch_PRI_CoS_P3
 (1 << 3)

	)

499 
	#INCA_IP_Swôch_PRI_CoS_P2
 (1 << 2)

	)

500 
	#INCA_IP_Swôch_PRI_CoS_P1
 (1 << 1)

	)

501 
	#INCA_IP_Swôch_PRI_CoS_P0
 (1 << 0)

	)

504 
	#INCA_IP_Swôch_ST_PT
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0018))

	)

505 
	#INCA_IP_Swôch_ST_PT_CPS
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 4)

	)

506 
	#INCA_IP_Swôch_ST_PT_LPS
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 2)

	)

507 
	#INCA_IP_Swôch_ST_PT_PPS
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 0)

	)

510 
	#INCA_IP_Swôch_ARL_CTL
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x001C))

	)

511 
	#INCA_IP_Swôch_ARL_CTL_CHCC
 (1 << 15)

	)

512 
	#INCA_IP_Swôch_ARL_CTL_CHCL
 (1 << 14)

	)

513 
	#INCA_IP_Swôch_ARL_CTL_CHCP
 (1 << 13)

	)

514 
	#INCA_IP_Swôch_ARL_CTL_CC
 (1 << 12)

	)

515 
	#INCA_IP_Swôch_ARL_CTL_CL
 (1 << 11)

	)

516 
	#INCA_IP_Swôch_ARL_CTL_CP
 (1 << 10)

	)

517 
	#INCA_IP_Swôch_ARL_CTL_CG
 (1 << 9)

	)

518 
	#INCA_IP_Swôch_ARL_CTL_PS
 (1 << 8)

	)

519 
	#INCA_IP_Swôch_ARL_CTL_MRO
 (1 << 7)

	)

520 
	#INCA_IP_Swôch_ARL_CTL_SRC
 (1 << 6)

	)

521 
	#INCA_IP_Swôch_ARL_CTL_ATS
 (1 << 5)

	)

522 
	#INCA_IP_Swôch_ARL_CTL_AGE_TICK_SEL
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 2)

	)

523 
	#INCA_IP_Swôch_ARL_CTL_MAF
 (1 << 1)

	)

524 
	#INCA_IP_Swôch_ARL_CTL_ENL
 (1 << 0)

	)

525 
	#INCA_IP_Swôch_ARL_CTL_Res
 (
vÆue
Ë(((–1 << 19Ë- 1Ë& (vÆue)Ë<< 13)

	)

528 
	#INCA_IP_Swôch_CPU_ACTL
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0020))

	)

529 
	#INCA_IP_Swôch_CPU_ACTL_RA
 (1 << 31)

	)

530 
	#INCA_IP_Swôch_CPU_ACTL_RW
 (1 << 30)

	)

531 
	#INCA_IP_Swôch_CPU_ACTL_Res
 (
vÆue
Ë(((–1 << 21Ë- 1Ë& (vÆue)Ë<< 9)

	)

532 
	#INCA_IP_Swôch_CPU_ACTL_AVA
 (1 << 8)

	)

533 
	#INCA_IP_Swôch_CPU_ACTL_IDX
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

536 
	#INCA_IP_Swôch_DATA1
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0024))

	)

537 
	#INCA_IP_Swôch_DATA1_D©a
 (
vÆue
Ë(((–1 << 24Ë- 1Ë& (vÆue)Ë<< 0)

	)

540 
	#INCA_IP_Swôch_DATA2
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0028))

	)

541 
	#INCA_IP_Swôch_DATA2_D©a


	)

544 
	#INCA_IP_Swôch_CPU_PCTL
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x002C))

	)

545 
	#INCA_IP_Swôch_CPU_PCTL_DA_PORTS
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 11)

	)

546 
	#INCA_IP_Swôch_CPU_PCTL_DAC
 (1 << 10)

	)

547 
	#INCA_IP_Swôch_CPU_PCTL_MA_STATE
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 7)

	)

548 
	#INCA_IP_Swôch_CPU_PCTL_MAM
 (1 << 6)

	)

549 
	#INCA_IP_Swôch_CPU_PCTL_MA_P‹ts
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 3)

	)

550 
	#INCA_IP_Swôch_CPU_PCTL_MAC
 (1 << 2)

	)

551 
	#INCA_IP_Swôch_CPU_PCTL_EML
 (1 << 1)

	)

552 
	#INCA_IP_Swôch_CPU_PCTL_EDL
 (1 << 0)

	)

553 
	#INCA_IP_Swôch_CPU_PCTL_Res
 (
vÆue
Ë(((–1 << 18Ë- 1Ë& (vÆue)Ë<< 14)

	)

556 
	#INCA_IP_Swôch_DSCP_COS1
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0030))

	)

557 
	#INCA_IP_Swôch_DSCP_COS1_DSCP


	)

560 
	#INCA_IP_Swôch_DSCP_COS2
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0034))

	)

561 
	#INCA_IP_Swôch_DSCP_COS2_DSCP


	)

564 
	#INCA_IP_Swôch_PC_WFQ_CTL
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0080))

	)

565 
	#INCA_IP_Swôch_PC_WFQ_CTL_P1
 (1 << 9)

	)

566 
	#INCA_IP_Swôch_PC_WFQ_CTL_P0
 (1 << 8)

	)

567 
	#INCA_IP_Swôch_PC_WFQ_CTL_WT1
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 5)

	)

568 
	#INCA_IP_Swôch_PC_WFQ_CTL_WT0
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 2)

	)

569 
	#INCA_IP_Swôch_PC_WFQ_CTL_SCH_SEL
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 0)

	)

572 
	#INCA_IP_Swôch_PC_TX_CTL
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0084))

	)

573 
	#INCA_IP_Swôch_PC_TX_CTL_ELR
 (1 << 1)

	)

574 
	#INCA_IP_Swôch_PC_TX_CTL_EER
 (1 << 0)

	)

577 
	#INCA_IP_Swôch_LAN_WFQ_CTL
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0100))

	)

578 
	#INCA_IP_Swôch_LAN_WFQ_CTL_P1
 (1 << 9)

	)

579 
	#INCA_IP_Swôch_LAN_WFQ_CTL_P0
 (1 << 8)

	)

580 
	#INCA_IP_Swôch_LAN_WFQ_CTL_WT1
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 5)

	)

581 
	#INCA_IP_Swôch_LAN_WFQ_CTL_WT0
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 2)

	)

582 
	#INCA_IP_Swôch_LAN_WFQ_CTL_SCH_SEL
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 0)

	)

585 
	#INCA_IP_Swôch_LAN_TX_CTL
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0104))

	)

586 
	#INCA_IP_Swôch_LAN_TX_CTL_ELR
 (1 << 1)

	)

587 
	#INCA_IP_Swôch_LAN_TX_CTL_EER
 (1 << 0)

	)

590 
	#INCA_IP_Swôch_CPU_WFQ_CTL
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0180))

	)

591 
	#INCA_IP_Swôch_CPU_WFQ_CTL_P1
 (1 << 9)

	)

592 
	#INCA_IP_Swôch_CPU_WFQ_CTL_P0
 (1 << 8)

	)

593 
	#INCA_IP_Swôch_CPU_WFQ_CTL_WT1
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 5)

	)

594 
	#INCA_IP_Swôch_CPU_WFQ_CTL_WT0
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 2)

	)

595 
	#INCA_IP_Swôch_CPU_WFQ_CTL_SCH_SEL
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 0)

	)

598 
	#INCA_IP_Swôch_PC_WM
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0200))

	)

599 
	#INCA_IP_Swôch_PC_WM_RX_WM1
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 24)

	)

600 
	#INCA_IP_Swôch_PC_WM_RX_WM2
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 16)

	)

601 
	#INCA_IP_Swôch_PC_WM_RX_WM3
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 8)

	)

602 
	#INCA_IP_Swôch_PC_WM_RX_WM4
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

605 
	#INCA_IP_Swôch_LAN_WM
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0204))

	)

606 
	#INCA_IP_Swôch_LAN_WM_RX_WM1
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 24)

	)

607 
	#INCA_IP_Swôch_LAN_WM_RX_WM2
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 16)

	)

608 
	#INCA_IP_Swôch_LAN_WM_RX_WM3
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 8)

	)

609 
	#INCA_IP_Swôch_LAN_WM_RX_WM4
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

612 
	#INCA_IP_Swôch_CPU_WM
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0208))

	)

613 
	#INCA_IP_Swôch_CPU_WM_RX_WM1
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 24)

	)

614 
	#INCA_IP_Swôch_CPU_WM_RX_WM2
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 16)

	)

615 
	#INCA_IP_Swôch_CPU_WM_RX_WM3
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 8)

	)

616 
	#INCA_IP_Swôch_CPU_WM_RX_WM4
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

619 
	#INCA_IP_Swôch_GBL_WM
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x020C))

	)

620 
	#INCA_IP_Swôch_GBL_WM_GBL_RX_WM1
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 24)

	)

621 
	#INCA_IP_Swôch_GBL_WM_GBL_RX_WM2
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 16)

	)

622 
	#INCA_IP_Swôch_GBL_WM_GBL_RX_WM3
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 8)

	)

623 
	#INCA_IP_Swôch_GBL_WM_GBL_RX_WM4
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

626 
	#INCA_IP_Swôch_PM_CTL
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0210))

	)

627 
	#INCA_IP_Swôch_PM_CTL_GDN
 (1 << 3)

	)

628 
	#INCA_IP_Swôch_PM_CTL_CDN
 (1 << 2)

	)

629 
	#INCA_IP_Swôch_PM_CTL_LDN
 (1 << 1)

	)

630 
	#INCA_IP_Swôch_PM_CTL_PDN
 (1 << 0)

	)

633 
	#INCA_IP_Swôch_PMAC_HD_CTL
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0280))

	)

634 
	#INCA_IP_Swôch_PMAC_HD_CTL_RL2
 (1 << 21)

	)

635 
	#INCA_IP_Swôch_PMAC_HD_CTL_RC
 (1 << 20)

	)

636 
	#INCA_IP_Swôch_PMAC_HD_CTL_CM
 (1 << 19)

	)

637 
	#INCA_IP_Swôch_PMAC_HD_CTL_CV
 (1 << 18)

	)

638 
	#INCA_IP_Swôch_PMAC_HD_CTL_TYPE_LEN
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 2)

	)

639 
	#INCA_IP_Swôch_PMAC_HD_CTL_TAG
 (1 << 1)

	)

640 
	#INCA_IP_Swôch_PMAC_HD_CTL_ADD
 (1 << 0)

	)

643 
	#INCA_IP_Swôch_PMAC_SA1
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0284))

	)

644 
	#INCA_IP_Swôch_PMAC_SA1_SA_47_32
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

647 
	#INCA_IP_Swôch_PMAC_SA2
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0288))

	)

648 
	#INCA_IP_Swôch_PMAC_SA2_SA_31_0


	)

651 
	#INCA_IP_Swôch_PMAC_DA1
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x028C))

	)

652 
	#INCA_IP_Swôch_PMAC_DA1_DA_47_32
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

655 
	#INCA_IP_Swôch_PMAC_DA2
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0290))

	)

656 
	#INCA_IP_Swôch_PMAC_DA2_DA_31_0


	)

659 
	#INCA_IP_Swôch_PMAC_VLAN
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0294))

	)

660 
	#INCA_IP_Swôch_PMAC_VLAN_PRI
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 13)

	)

661 
	#INCA_IP_Swôch_PMAC_VLAN_CFI
 (1 << 12)

	)

662 
	#INCA_IP_Swôch_PMAC_VLAN_VLANID
 (
vÆue
Ë(((–1 << 12Ë- 1Ë& (vÆue)Ë<< 0)

	)

665 
	#INCA_IP_Swôch_PMAC_TX_IPG
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0298))

	)

666 
	#INCA_IP_Swôch_PMAC_TX_IPG_IPGCNT
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

669 
	#INCA_IP_Swôch_PMAC_RX_IPG
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x029C))

	)

670 
	#INCA_IP_Swôch_PMAC_RX_IPG_IPGCNT
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

673 
	#INCA_IP_Swôch_MRR
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0300))

	)

674 
	#INCA_IP_Swôch_MRR_MRR
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 6)

	)

675 
	#INCA_IP_Swôch_MRR_EC
 (1 << 5)

	)

676 
	#INCA_IP_Swôch_MRR_EL
 (1 << 4)

	)

677 
	#INCA_IP_Swôch_MRR_EP
 (1 << 3)

	)

678 
	#INCA_IP_Swôch_MRR_IC
 (1 << 2)

	)

679 
	#INCA_IP_Swôch_MRR_IL
 (1 << 1)

	)

680 
	#INCA_IP_Swôch_MRR_IP
 (1 << 0)

	)

683 
	#INCA_IP_Swôch_PKT_LEN
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0304))

	)

684 
	#INCA_IP_Swôch_PKT_LEN_ADD
 (1 << 11)

	)

685 
	#INCA_IP_Swôch_PKT_LEN_MAX_PKT_LEN
 (
vÆue
Ë(((–1 << 11Ë- 1Ë& (vÆue)Ë<< 0)

	)

688 
	#INCA_IP_Swôch_MDIO_ACC
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0480))

	)

689 
	#INCA_IP_Swôch_MDIO_ACC_RA
 (1 << 31)

	)

690 
	#INCA_IP_Swôch_MDIO_ACC_RW
 (1 << 30)

	)

691 
	#INCA_IP_Swôch_MDIO_ACC_PHY_ADDR
 (
vÆue
Ë(((–1 << 5Ë- 1Ë& (vÆue)Ë<< 21)

	)

692 
	#INCA_IP_Swôch_MDIO_ACC_REG_ADDR
 (
vÆue
Ë(((–1 << 5Ë- 1Ë& (vÆue)Ë<< 16)

	)

693 
	#INCA_IP_Swôch_MDIO_ACC_PHY_DATA
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

696 
	#INCA_IP_Swôch_EPHY
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0484))

	)

697 
	#INCA_IP_Swôch_EPHY_SL
 (1 << 7)

	)

698 
	#INCA_IP_Swôch_EPHY_SP
 (1 << 6)

	)

699 
	#INCA_IP_Swôch_EPHY_LL
 (1 << 5)

	)

700 
	#INCA_IP_Swôch_EPHY_LP
 (1 << 4)

	)

701 
	#INCA_IP_Swôch_EPHY_DL
 (1 << 3)

	)

702 
	#INCA_IP_Swôch_EPHY_DP
 (1 << 2)

	)

703 
	#INCA_IP_Swôch_EPHY_PL
 (1 << 1)

	)

704 
	#INCA_IP_Swôch_EPHY_PP
 (1 << 0)

	)

707 
	#INCA_IP_Swôch_PWR_EN
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0488))

	)

708 
	#INCA_IP_Swôch_PWR_EN_PL
 (1 << 1)

	)

709 
	#INCA_IP_Swôch_PWR_EN_PP
 (1 << 0)

	)

712 
	#INCA_IP_Swôch_MDIO_CFG
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x048C))

	)

713 
	#INCA_IP_Swôch_MDIO_CFG_MDS
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 14)

	)

714 
	#INCA_IP_Swôch_MDIO_CFG_PHY_LAN_ADDR
 (
vÆue
Ë(((–1 << 5Ë- 1Ë& (vÆue)Ë<< 9)

	)

715 
	#INCA_IP_Swôch_MDIO_CFG_PHY_PC_ADDR
 (
vÆue
Ë(((–1 << 5Ë- 1Ë& (vÆue)Ë<< 4)

	)

716 
	#INCA_IP_Swôch_MDIO_CFG_UEP
 (1 << 3)

	)

717 
	#INCA_IP_Swôch_MDIO_CFG_PS
 (1 << 2)

	)

718 
	#INCA_IP_Swôch_MDIO_CFG_PT
 (1 << 1)

	)

719 
	#INCA_IP_Swôch_MDIO_CFG_UMM
 (1 << 0)

	)

722 
	#INCA_IP_Swôch_CLK_CFG
 ((vﬁ©ûê
u32
*)(
INCA_IP_Swôch
+ 0x0500))

	)

723 
	#INCA_IP_Swôch_CLK_CFG_ARL_ID
 (1 << 9)

	)

724 
	#INCA_IP_Swôch_CLK_CFG_CPU_ID
 (1 << 8)

	)

725 
	#INCA_IP_Swôch_CLK_CFG_LAN_ID
 (1 << 7)

	)

726 
	#INCA_IP_Swôch_CLK_CFG_PC_ID
 (1 << 6)

	)

727 
	#INCA_IP_Swôch_CLK_CFG_SE_ID
 (1 << 5)

	)

733 
	#INCA_IP_SSC1
 (0xB8000500)

	)

738 
	#INCA_IP_SSC1_SCC_CON_PRG
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC1
+ 0x0010))

	)

739 
	#INCA_IP_SSC1_SCC_CON_PRG_EN
 (1 << 15)

	)

740 
	#INCA_IP_SSC1_SCC_CON_PRG_MS
 (1 << 14)

	)

741 
	#INCA_IP_SSC1_SCC_CON_PRG_AREN
 (1 << 12)

	)

742 
	#INCA_IP_SSC1_SCC_CON_PRG_BEN
 (1 << 11)

	)

743 
	#INCA_IP_SSC1_SCC_CON_PRG_PEN
 (1 << 10)

	)

744 
	#INCA_IP_SSC1_SCC_CON_PRG_REN
 (1 << 9)

	)

745 
	#INCA_IP_SSC1_SCC_CON_PRG_TEN
 (1 << 8)

	)

746 
	#INCA_IP_SSC1_SCC_CON_PRG_LB
 (1 << 7)

	)

747 
	#INCA_IP_SSC1_SCC_CON_PRG_PO
 (1 << 6)

	)

748 
	#INCA_IP_SSC1_SCC_CON_PRG_PH
 (1 << 5)

	)

749 
	#INCA_IP_SSC1_SCC_CON_PRG_HB
 (1 << 4)

	)

750 
	#INCA_IP_SSC1_SCC_CON_PRG_BM
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

753 
	#INCA_IP_SSC1_SCC_CON_OPR
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC1
+ 0x0010))

	)

754 
	#INCA_IP_SSC1_SCC_CON_OPR_EN
 (1 << 15)

	)

755 
	#INCA_IP_SSC1_SCC_CON_OPR_MS
 (1 << 14)

	)

756 
	#INCA_IP_SSC1_SCC_CON_OPR_BSY
 (1 << 12)

	)

757 
	#INCA_IP_SSC1_SCC_CON_OPR_BE
 (1 << 11)

	)

758 
	#INCA_IP_SSC1_SCC_CON_OPR_PE
 (1 << 10)

	)

759 
	#INCA_IP_SSC1_SCC_CON_OPR_RE
 (1 << 9)

	)

760 
	#INCA_IP_SSC1_SCC_CON_OPR_TE
 (1 << 8)

	)

761 
	#INCA_IP_SSC1_SCC_CON_OPR_BC
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

764 
	#INCA_IP_SSC1_SSC_WHBCON
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC1
+ 0x0040))

	)

765 
	#INCA_IP_SSC1_SSC_WHBCON_SETBE
 (1 << 15)

	)

766 
	#INCA_IP_SSC1_SSC_WHBCON_SETPE
 (1 << 14)

	)

767 
	#INCA_IP_SSC1_SSC_WHBCON_SETRE
 (1 << 13)

	)

768 
	#INCA_IP_SSC1_SSC_WHBCON_SETTE
 (1 << 12)

	)

769 
	#INCA_IP_SSC1_SSC_WHBCON_CLRBE
 (1 << 11)

	)

770 
	#INCA_IP_SSC1_SSC_WHBCON_CLRPE
 (1 << 10)

	)

771 
	#INCA_IP_SSC1_SSC_WHBCON_CLRRE
 (1 << 9)

	)

772 
	#INCA_IP_SSC1_SSC_WHBCON_CLRTE
 (1 << 8)

	)

775 
	#INCA_IP_SSC1_SSC_BR
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC1
+ 0x0014))

	)

776 
	#INCA_IP_SSC1_SSC_BR_BR_VALUE
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

779 
	#INCA_IP_SSC1_SSC_TB
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC1
+ 0x0020))

	)

780 
	#INCA_IP_SSC1_SSC_TB_TB_VALUE
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

783 
	#INCA_IP_SSC1_SSC_RB
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC1
+ 0x0024))

	)

784 
	#INCA_IP_SSC1_SSC_RB_RB_VALUE
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

787 
	#INCA_IP_SSC1_SSC_RXFCON
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC1
+ 0x0030))

	)

788 
	#INCA_IP_SSC1_SSC_RXFCON_RXFITL
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 8)

	)

789 
	#INCA_IP_SSC1_SSC_RXFCON_RXTMEN
 (1 << 2)

	)

790 
	#INCA_IP_SSC1_SSC_RXFCON_RXFLU
 (1 << 1)

	)

791 
	#INCA_IP_SSC1_SSC_RXFCON_RXFEN
 (1 << 0)

	)

794 
	#INCA_IP_SSC1_SSC_TXFCON
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC1
+ 0x0034))

	)

795 
	#INCA_IP_SSC1_SSC_TXFCON_RXFITL
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 8)

	)

796 
	#INCA_IP_SSC1_SSC_TXFCON_TXTMEN
 (1 << 2)

	)

797 
	#INCA_IP_SSC1_SSC_TXFCON_TXFLU
 (1 << 1)

	)

798 
	#INCA_IP_SSC1_SSC_TXFCON_TXFEN
 (1 << 0)

	)

801 
	#INCA_IP_SSC1_SSC_FSTAT
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC1
+ 0x0038))

	)

802 
	#INCA_IP_SSC1_SSC_FSTAT_TXFFL
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 8)

	)

803 
	#INCA_IP_SSC1_SSC_FSTAT_RXFFL
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 0)

	)

806 
	#INCA_IP_SSC1_SSC_CLC
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC1
+ 0x0000))

	)

807 
	#INCA_IP_SSC1_SSC_CLC_RMC
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 8)

	)

808 
	#INCA_IP_SSC1_SSC_CLC_DISS
 (1 << 1)

	)

809 
	#INCA_IP_SSC1_SSC_CLC_DISR
 (1 << 0)

	)

815 
	#INCA_IP_SSC2
 (0xB8000600)

	)

820 
	#INCA_IP_SSC2_SCC_CON_PRG
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC2
+ 0x0010))

	)

821 
	#INCA_IP_SSC2_SCC_CON_PRG_EN
 (1 << 15)

	)

822 
	#INCA_IP_SSC2_SCC_CON_PRG_MS
 (1 << 14)

	)

823 
	#INCA_IP_SSC2_SCC_CON_PRG_AREN
 (1 << 12)

	)

824 
	#INCA_IP_SSC2_SCC_CON_PRG_BEN
 (1 << 11)

	)

825 
	#INCA_IP_SSC2_SCC_CON_PRG_PEN
 (1 << 10)

	)

826 
	#INCA_IP_SSC2_SCC_CON_PRG_REN
 (1 << 9)

	)

827 
	#INCA_IP_SSC2_SCC_CON_PRG_TEN
 (1 << 8)

	)

828 
	#INCA_IP_SSC2_SCC_CON_PRG_LB
 (1 << 7)

	)

829 
	#INCA_IP_SSC2_SCC_CON_PRG_PO
 (1 << 6)

	)

830 
	#INCA_IP_SSC2_SCC_CON_PRG_PH
 (1 << 5)

	)

831 
	#INCA_IP_SSC2_SCC_CON_PRG_HB
 (1 << 4)

	)

832 
	#INCA_IP_SSC2_SCC_CON_PRG_BM
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

835 
	#INCA_IP_SSC2_SCC_CON_OPR
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC2
+ 0x0010))

	)

836 
	#INCA_IP_SSC2_SCC_CON_OPR_EN
 (1 << 15)

	)

837 
	#INCA_IP_SSC2_SCC_CON_OPR_MS
 (1 << 14)

	)

838 
	#INCA_IP_SSC2_SCC_CON_OPR_BSY
 (1 << 12)

	)

839 
	#INCA_IP_SSC2_SCC_CON_OPR_BE
 (1 << 11)

	)

840 
	#INCA_IP_SSC2_SCC_CON_OPR_PE
 (1 << 10)

	)

841 
	#INCA_IP_SSC2_SCC_CON_OPR_RE
 (1 << 9)

	)

842 
	#INCA_IP_SSC2_SCC_CON_OPR_TE
 (1 << 8)

	)

843 
	#INCA_IP_SSC2_SCC_CON_OPR_BC
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

846 
	#INCA_IP_SSC2_SSC_WHBCON
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC2
+ 0x0040))

	)

847 
	#INCA_IP_SSC2_SSC_WHBCON_SETBE
 (1 << 15)

	)

848 
	#INCA_IP_SSC2_SSC_WHBCON_SETPE
 (1 << 14)

	)

849 
	#INCA_IP_SSC2_SSC_WHBCON_SETRE
 (1 << 13)

	)

850 
	#INCA_IP_SSC2_SSC_WHBCON_SETTE
 (1 << 12)

	)

851 
	#INCA_IP_SSC2_SSC_WHBCON_CLRBE
 (1 << 11)

	)

852 
	#INCA_IP_SSC2_SSC_WHBCON_CLRPE
 (1 << 10)

	)

853 
	#INCA_IP_SSC2_SSC_WHBCON_CLRRE
 (1 << 9)

	)

854 
	#INCA_IP_SSC2_SSC_WHBCON_CLRTE
 (1 << 8)

	)

857 
	#INCA_IP_SSC2_SSC_BR
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC2
+ 0x0014))

	)

858 
	#INCA_IP_SSC2_SSC_BR_BR_VALUE
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

861 
	#INCA_IP_SSC2_SSC_TB
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC2
+ 0x0020))

	)

862 
	#INCA_IP_SSC2_SSC_TB_TB_VALUE
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

865 
	#INCA_IP_SSC2_SSC_RB
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC2
+ 0x0024))

	)

866 
	#INCA_IP_SSC2_SSC_RB_RB_VALUE
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

869 
	#INCA_IP_SSC2_SSC_RXFCON
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC2
+ 0x0030))

	)

870 
	#INCA_IP_SSC2_SSC_RXFCON_RXFITL
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 8)

	)

871 
	#INCA_IP_SSC2_SSC_RXFCON_RXTMEN
 (1 << 2)

	)

872 
	#INCA_IP_SSC2_SSC_RXFCON_RXFLU
 (1 << 1)

	)

873 
	#INCA_IP_SSC2_SSC_RXFCON_RXFEN
 (1 << 0)

	)

876 
	#INCA_IP_SSC2_SSC_TXFCON
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC2
+ 0x0034))

	)

877 
	#INCA_IP_SSC2_SSC_TXFCON_RXFITL
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 8)

	)

878 
	#INCA_IP_SSC2_SSC_TXFCON_TXTMEN
 (1 << 2)

	)

879 
	#INCA_IP_SSC2_SSC_TXFCON_TXFLU
 (1 << 1)

	)

880 
	#INCA_IP_SSC2_SSC_TXFCON_TXFEN
 (1 << 0)

	)

883 
	#INCA_IP_SSC2_SSC_FSTAT
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC2
+ 0x0038))

	)

884 
	#INCA_IP_SSC2_SSC_FSTAT_TXFFL
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 8)

	)

885 
	#INCA_IP_SSC2_SSC_FSTAT_RXFFL
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 0)

	)

888 
	#INCA_IP_SSC2_SSC_CLC
 ((vﬁ©ûê
u32
*)(
INCA_IP_SSC2
+ 0x0000))

	)

889 
	#INCA_IP_SSC2_SSC_CLC_RMC
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 8)

	)

890 
	#INCA_IP_SSC2_SSC_CLC_DISS
 (1 << 1)

	)

891 
	#INCA_IP_SSC2_SSC_CLC_DISR
 (1 << 0)

	)

897 #i‡
deföed
(
CONFIG_INCA_IP
)

898 
	#INCA_IP_EBU
 (0xB8000200)

	)

899 #ñi‡
deföed
(
CONFIG_PURPLE
)

900 
	#INCA_IP_EBU
 (0xB800D800)

	)

907 
	#INCA_IP_EBU_EBU_CLC
 ((vﬁ©ûê
u32
*)(
INCA_IP_EBU
+ 0x0000))

	)

908 
	#INCA_IP_EBU_EBU_CLC_DISS
 (1 << 1)

	)

909 
	#INCA_IP_EBU_EBU_CLC_DISR
 (1 << 0)

	)

912 
	#INCA_IP_EBU_EBU_CON
 ((vﬁ©ûê
u32
*)(
INCA_IP_EBU
+ 0x0010))

	)

913 
	#INCA_IP_EBU_EBU_CON_DTACS
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 20)

	)

914 
	#INCA_IP_EBU_EBU_CON_DTARW
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 16)

	)

915 
	#INCA_IP_EBU_EBU_CON_TOUTC
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 8)

	)

916 
	#INCA_IP_EBU_EBU_CON_ARBMODE
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 6)

	)

917 
	#INCA_IP_EBU_EBU_CON_ARBSYNC
 (1 << 5)

	)

918 
	#INCA_IP_EBU_EBU_CON_1
 (1 << 3)

	)

921 
	#INCA_IP_EBU_EBU_ADDSEL0
 ((vﬁ©ûê
u32
*)(
INCA_IP_EBU
+ 0x0020))

	)

922 
	#INCA_IP_EBU_EBU_ADDSEL0_BASE
 (
vÆue
Ë(((–1 << 20Ë- 1Ë& (vÆue)Ë<< 12)

	)

923 
	#INCA_IP_EBU_EBU_ADDSEL0_MASK
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 4)

	)

924 
	#INCA_IP_EBU_EBU_ADDSEL0_MIRRORE
 (1 << 1)

	)

925 
	#INCA_IP_EBU_EBU_ADDSEL0_REGEN
 (1 << 0)

	)

928 
	#INCA_IP_EBU_EBU_ADDSEL1
 ((vﬁ©ûê
u32
*)(
INCA_IP_EBU
+ 0x0024))

	)

929 
	#INCA_IP_EBU_EBU_ADDSEL1_BASE
 (
vÆue
Ë(((–1 << 20Ë- 1Ë& (vÆue)Ë<< 12)

	)

930 
	#INCA_IP_EBU_EBU_ADDSEL1_MASK
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 4)

	)

931 
	#INCA_IP_EBU_EBU_ADDSEL1_MIRRORE
 (1 << 1)

	)

932 
	#INCA_IP_EBU_EBU_ADDSEL1_REGEN
 (1 << 0)

	)

935 
	#INCA_IP_EBU_EBU_ADDSEL2
 ((vﬁ©ûê
u32
*)(
INCA_IP_EBU
+ 0x0028))

	)

936 
	#INCA_IP_EBU_EBU_ADDSEL2_BASE
 (
vÆue
Ë(((–1 << 20Ë- 1Ë& (vÆue)Ë<< 12)

	)

937 
	#INCA_IP_EBU_EBU_ADDSEL2_MASK
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 4)

	)

938 
	#INCA_IP_EBU_EBU_ADDSEL2_MIRRORE
 (1 << 1)

	)

939 
	#INCA_IP_EBU_EBU_ADDSEL2_REGEN
 (1 << 0)

	)

942 
	#INCA_IP_EBU_EBU_BUSCON0
 ((vﬁ©ûê
u32
*)(
INCA_IP_EBU
+ 0x0060))

	)

943 
	#INCA_IP_EBU_EBU_BUSCON0_WRDIS
 (1 << 31)

	)

944 
	#INCA_IP_EBU_EBU_BUSCON0_ALEC
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 29)

	)

945 
	#INCA_IP_EBU_EBU_BUSCON0_BCGEN
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 27)

	)

946 
	#INCA_IP_EBU_EBU_BUSCON0_AGEN
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 24)

	)

947 
	#INCA_IP_EBU_EBU_BUSCON0_CMULTR
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 22)

	)

948 
	#INCA_IP_EBU_EBU_BUSCON0_WAIT
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 20)

	)

949 
	#INCA_IP_EBU_EBU_BUSCON0_WAITINV
 (1 << 19)

	)

950 
	#INCA_IP_EBU_EBU_BUSCON0_SETUP
 (1 << 18)

	)

951 
	#INCA_IP_EBU_EBU_BUSCON0_PORTW
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 16)

	)

952 
	#INCA_IP_EBU_EBU_BUSCON0_WAITRDC
 (
vÆue
Ë(((–1 << 7Ë- 1Ë& (vÆue)Ë<< 9)

	)

953 
	#INCA_IP_EBU_EBU_BUSCON0_WAITWRC
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 6)

	)

954 
	#INCA_IP_EBU_EBU_BUSCON0_HOLDC
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 4)

	)

955 
	#INCA_IP_EBU_EBU_BUSCON0_RECOVC
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 2)

	)

956 
	#INCA_IP_EBU_EBU_BUSCON0_CMULT
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 0)

	)

959 
	#INCA_IP_EBU_EBU_BUSCON1
 ((vﬁ©ûê
u32
*)(
INCA_IP_EBU
+ 0x0064))

	)

960 
	#INCA_IP_EBU_EBU_BUSCON1_WRDIS
 (1 << 31)

	)

961 
	#INCA_IP_EBU_EBU_BUSCON1_ALEC
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 29)

	)

962 
	#INCA_IP_EBU_EBU_BUSCON1_BCGEN
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 27)

	)

963 
	#INCA_IP_EBU_EBU_BUSCON1_AGEN
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 24)

	)

964 
	#INCA_IP_EBU_EBU_BUSCON1_CMULTR
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 22)

	)

965 
	#INCA_IP_EBU_EBU_BUSCON1_WAIT
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 20)

	)

966 
	#INCA_IP_EBU_EBU_BUSCON1_WAITINV
 (1 << 19)

	)

967 
	#INCA_IP_EBU_EBU_BUSCON1_SETUP
 (1 << 18)

	)

968 
	#INCA_IP_EBU_EBU_BUSCON1_PORTW
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 16)

	)

969 
	#INCA_IP_EBU_EBU_BUSCON1_WAITRDC
 (
vÆue
Ë(((–1 << 7Ë- 1Ë& (vÆue)Ë<< 9)

	)

970 
	#INCA_IP_EBU_EBU_BUSCON1_WAITWRC
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 6)

	)

971 
	#INCA_IP_EBU_EBU_BUSCON1_HOLDC
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 4)

	)

972 
	#INCA_IP_EBU_EBU_BUSCON1_RECOVC
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 2)

	)

973 
	#INCA_IP_EBU_EBU_BUSCON1_CMULT
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 0)

	)

976 
	#INCA_IP_EBU_EBU_BUSCON2
 ((vﬁ©ûê
u32
*)(
INCA_IP_EBU
+ 0x0068))

	)

977 
	#INCA_IP_EBU_EBU_BUSCON2_WRDIS
 (1 << 31)

	)

978 
	#INCA_IP_EBU_EBU_BUSCON2_ALEC
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 29)

	)

979 
	#INCA_IP_EBU_EBU_BUSCON2_BCGEN
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 27)

	)

980 
	#INCA_IP_EBU_EBU_BUSCON2_AGEN
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 24)

	)

981 
	#INCA_IP_EBU_EBU_BUSCON2_CMULTR
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 22)

	)

982 
	#INCA_IP_EBU_EBU_BUSCON2_WAIT
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 20)

	)

983 
	#INCA_IP_EBU_EBU_BUSCON2_WAITINV
 (1 << 19)

	)

984 
	#INCA_IP_EBU_EBU_BUSCON2_SETUP
 (1 << 18)

	)

985 
	#INCA_IP_EBU_EBU_BUSCON2_PORTW
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 16)

	)

986 
	#INCA_IP_EBU_EBU_BUSCON2_WAITRDC
 (
vÆue
Ë(((–1 << 7Ë- 1Ë& (vÆue)Ë<< 9)

	)

987 
	#INCA_IP_EBU_EBU_BUSCON2_WAITWRC
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 6)

	)

988 
	#INCA_IP_EBU_EBU_BUSCON2_HOLDC
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 4)

	)

989 
	#INCA_IP_EBU_EBU_BUSCON2_RECOVC
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 2)

	)

990 
	#INCA_IP_EBU_EBU_BUSCON2_CMULT
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 0)

	)

996 
	#INCA_IP_SDRAM
 (0xBF800000)

	)

1001 
	#INCA_IP_SDRAM_MC_ERRCAUSE
 ((vﬁ©ûê
u32
*)(
INCA_IP_SDRAM
+ 0x0100))

	)

1002 
	#INCA_IP_SDRAM_MC_ERRCAUSE_ERR
 (1 << 31)

	)

1003 
	#INCA_IP_SDRAM_MC_ERRCAUSE_PORT
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 16)

	)

1004 
	#INCA_IP_SDRAM_MC_ERRCAUSE_CAUSE
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 0)

	)

1005 
	#INCA_IP_SDRAM_MC_ERRCAUSE_Res
 (
vÆue
Ë(((–1 << 
NaN
Ë- 1Ë& (vÆue)Ë<< NaN)

	)

1008 
	#INCA_IP_SDRAM_MC_ERRADDR
 ((vﬁ©ûê
u32
*)(
INCA_IP_SDRAM
+ 0x0108))

	)

1009 
	#INCA_IP_SDRAM_MC_ERRADDR_ADDR


	)

1012 
	#INCA_IP_SDRAM_MC_IOGP
 ((vﬁ©ûê
u32
*)(
INCA_IP_SDRAM
+ 0x0800))

	)

1013 
	#INCA_IP_SDRAM_MC_IOGP_GPR6
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 28)

	)

1014 
	#INCA_IP_SDRAM_MC_IOGP_GPR5
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 24)

	)

1015 
	#INCA_IP_SDRAM_MC_IOGP_GPR4
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 20)

	)

1016 
	#INCA_IP_SDRAM_MC_IOGP_GPR3
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 16)

	)

1017 
	#INCA_IP_SDRAM_MC_IOGP_GPR2
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 12)

	)

1018 
	#INCA_IP_SDRAM_MC_IOGP_CPS
 (1 << 11)

	)

1019 
	#INCA_IP_SDRAM_MC_IOGP_CLKDELAY
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 8)

	)

1020 
	#INCA_IP_SDRAM_MC_IOGP_CLKRAT
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 4)

	)

1021 
	#INCA_IP_SDRAM_MC_IOGP_RDDEL
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

1024 
	#INCA_IP_SDRAM_MC_SELFRFSH
 ((vﬁ©ûê
u32
*)(
INCA_IP_SDRAM
+ 0x0A00))

	)

1025 
	#INCA_IP_SDRAM_MC_SELFRFSH_PWDS
 (1 << 1)

	)

1026 
	#INCA_IP_SDRAM_MC_SELFRFSH_PWD
 (1 << 0)

	)

1027 
	#INCA_IP_SDRAM_MC_SELFRFSH_Res
 (
vÆue
Ë(((–1 << 30Ë- 1Ë& (vÆue)Ë<< 2)

	)

1030 
	#INCA_IP_SDRAM_MC_CTRLENA
 ((vﬁ©ûê
u32
*)(
INCA_IP_SDRAM
+ 0x1000))

	)

1031 
	#INCA_IP_SDRAM_MC_CTRLENA_ENA
 (1 << 0)

	)

1032 
	#INCA_IP_SDRAM_MC_CTRLENA_Res
 (
vÆue
Ë(((–1 << 31Ë- 1Ë& (vÆue)Ë<< 1)

	)

1035 
	#INCA_IP_SDRAM_MC_MRSCODE
 ((vﬁ©ûê
u32
*)(
INCA_IP_SDRAM
+ 0x1008))

	)

1036 
	#INCA_IP_SDRAM_MC_MRSCODE_UMC
 (
vÆue
Ë(((–1 << 5Ë- 1Ë& (vÆue)Ë<< 7)

	)

1037 
	#INCA_IP_SDRAM_MC_MRSCODE_CL
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 4)

	)

1038 
	#INCA_IP_SDRAM_MC_MRSCODE_WT
 (1 << 3)

	)

1039 
	#INCA_IP_SDRAM_MC_MRSCODE_BL
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 0)

	)

1042 
	#INCA_IP_SDRAM_MC_CFGDW
 ((vﬁ©ûê
u32
*)(
INCA_IP_SDRAM
+ 0x1010))

	)

1043 
	#INCA_IP_SDRAM_MC_CFGDW_DW
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

1044 
	#INCA_IP_SDRAM_MC_CFGDW_Res
 (
vÆue
Ë(((–1 << 28Ë- 1Ë& (vÆue)Ë<< 4)

	)

1047 
	#INCA_IP_SDRAM_MC_CFGPB0
 ((vﬁ©ûê
u32
*)(
INCA_IP_SDRAM
+ 0x1018))

	)

1048 
	#INCA_IP_SDRAM_MC_CFGPB0_MCSEN0
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 12)

	)

1049 
	#INCA_IP_SDRAM_MC_CFGPB0_BANKN0
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 8)

	)

1050 
	#INCA_IP_SDRAM_MC_CFGPB0_ROWW0
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 4)

	)

1051 
	#INCA_IP_SDRAM_MC_CFGPB0_COLW0
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

1052 
	#INCA_IP_SDRAM_MC_CFGPB0_Res
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 16)

	)

1055 
	#INCA_IP_SDRAM_MC_LATENCY
 ((vﬁ©ûê
u32
*)(
INCA_IP_SDRAM
+ 0x1038))

	)

1056 
	#INCA_IP_SDRAM_MC_LATENCY_TRP
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 16)

	)

1057 
	#INCA_IP_SDRAM_MC_LATENCY_TRAS
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 12)

	)

1058 
	#INCA_IP_SDRAM_MC_LATENCY_TRCD
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 8)

	)

1059 
	#INCA_IP_SDRAM_MC_LATENCY_TDPL
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 4)

	)

1060 
	#INCA_IP_SDRAM_MC_LATENCY_TDAL
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

1061 
	#INCA_IP_SDRAM_MC_LATENCY_Res
 (
vÆue
Ë(((–1 << 12Ë- 1Ë& (vÆue)Ë<< 20)

	)

1064 
	#INCA_IP_SDRAM_MC_TREFRESH
 ((vﬁ©ûê
u32
*)(
INCA_IP_SDRAM
+ 0x1040))

	)

1065 
	#INCA_IP_SDRAM_MC_TREFRESH_TREF
 (
vÆue
Ë(((–1 << 13Ë- 1Ë& (vÆue)Ë<< 0)

	)

1066 
	#INCA_IP_SDRAM_MC_TREFRESH_Res
 (
vÆue
Ë(((–1 << 19Ë- 1Ë& (vÆue)Ë<< 13)

	)

1072 
	#INCA_IP_GPTU
 (0xB8000300)

	)

1077 
	#INCA_IP_GPTU_GPT_CLC
 ((vﬁ©ûê
u32
*)(
INCA_IP_GPTU
+ 0x0000))

	)

1078 
	#INCA_IP_GPTU_GPT_CLC_RMC
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 8)

	)

1079 
	#INCA_IP_GPTU_GPT_CLC_DISS
 (1 << 1)

	)

1080 
	#INCA_IP_GPTU_GPT_CLC_DISR
 (1 << 0)

	)

1083 
	#INCA_IP_GPTU_GPT_T3CON
 ((vﬁ©ûê
u32
*)(
INCA_IP_GPTU
+ 0x0014))

	)

1084 
	#INCA_IP_GPTU_GPT_T3CON_T3RDIR
 (1 << 15)

	)

1085 
	#INCA_IP_GPTU_GPT_T3CON_T3CHDIR
 (1 << 14)

	)

1086 
	#INCA_IP_GPTU_GPT_T3CON_T3EDGE
 (1 << 13)

	)

1087 
	#INCA_IP_GPTU_GPT_T3CON_BPS1
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 11)

	)

1088 
	#INCA_IP_GPTU_GPT_T3CON_T3OTL
 (1 << 10)

	)

1089 
	#INCA_IP_GPTU_GPT_T3CON_T3UD
 (1 << 7)

	)

1090 
	#INCA_IP_GPTU_GPT_T3CON_T3R
 (1 << 6)

	)

1091 
	#INCA_IP_GPTU_GPT_T3CON_T3M
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 3)

	)

1092 
	#INCA_IP_GPTU_GPT_T3CON_T3I
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 0)

	)

1096 
	#INCA_IP_GPTU_GPT_WHBT3CON
 ((vﬁ©ûê
u32
*)(
INCA_IP_GPTU
+ 0x004C))

	)

1097 
	#INCA_IP_GPTU_GPT_WHBT3CON_SETT3CHDIR
 (1 << 15)

	)

1098 
	#INCA_IP_GPTU_GPT_WHBT3CON_CLRT3CHDIR
 (1 << 14)

	)

1099 
	#INCA_IP_GPTU_GPT_WHBT3CON_SETT3EDGE
 (1 << 13)

	)

1100 
	#INCA_IP_GPTU_GPT_WHBT3CON_CLRT3EDGE
 (1 << 12)

	)

1101 
	#INCA_IP_GPTU_GPT_WHBT3CON_SETT3OTL
 (1 << 11)

	)

1102 
	#INCA_IP_GPTU_GPT_WHBT3CON_CLRT3OTL
 (1 << 10)

	)

1105 
	#INCA_IP_GPTU_GPT_T2CON
 ((vﬁ©ûê
u32
*)(
INCA_IP_GPTU
+ 0x0010))

	)

1106 
	#INCA_IP_GPTU_GPT_T2CON_TxRDIR
 (1 << 15)

	)

1107 
	#INCA_IP_GPTU_GPT_T2CON_TxCHDIR
 (1 << 14)

	)

1108 
	#INCA_IP_GPTU_GPT_T2CON_TxEDGE
 (1 << 13)

	)

1109 
	#INCA_IP_GPTU_GPT_T2CON_TxIRDIS
 (1 << 12)

	)

1110 
	#INCA_IP_GPTU_GPT_T2CON_TxRC
 (1 << 9)

	)

1111 
	#INCA_IP_GPTU_GPT_T2CON_TxUD
 (1 << 7)

	)

1112 
	#INCA_IP_GPTU_GPT_T2CON_TxR
 (1 << 6)

	)

1113 
	#INCA_IP_GPTU_GPT_T2CON_TxM
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 3)

	)

1114 
	#INCA_IP_GPTU_GPT_T2CON_TxI
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 0)

	)

1117 
	#INCA_IP_GPTU_GPT_T4CON
 ((vﬁ©ûê
u32
*)(
INCA_IP_GPTU
+ 0x0018))

	)

1118 
	#INCA_IP_GPTU_GPT_T4CON_TxRDIR
 (1 << 15)

	)

1119 
	#INCA_IP_GPTU_GPT_T4CON_TxCHDIR
 (1 << 14)

	)

1120 
	#INCA_IP_GPTU_GPT_T4CON_TxEDGE
 (1 << 13)

	)

1121 
	#INCA_IP_GPTU_GPT_T4CON_TxIRDIS
 (1 << 12)

	)

1122 
	#INCA_IP_GPTU_GPT_T4CON_TxRC
 (1 << 9)

	)

1123 
	#INCA_IP_GPTU_GPT_T4CON_TxUD
 (1 << 7)

	)

1124 
	#INCA_IP_GPTU_GPT_T4CON_TxR
 (1 << 6)

	)

1125 
	#INCA_IP_GPTU_GPT_T4CON_TxM
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 3)

	)

1126 
	#INCA_IP_GPTU_GPT_T4CON_TxI
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 0)

	)

1130 
	#INCA_IP_GPTU_GPT_WHBT2CON
 ((vﬁ©ûê
u32
*)(
INCA_IP_GPTU
+ 0x0048))

	)

1131 
	#INCA_IP_GPTU_GPT_WHBT2CON_SETTxCHDIR
 (1 << 15)

	)

1132 
	#INCA_IP_GPTU_GPT_WHBT2CON_CLRTxCHDIR
 (1 << 14)

	)

1133 
	#INCA_IP_GPTU_GPT_WHBT2CON_SETTxEDGE
 (1 << 13)

	)

1134 
	#INCA_IP_GPTU_GPT_WHBT2CON_CLRTxEDGE
 (1 << 12)

	)

1138 
	#INCA_IP_GPTU_GPT_WHBT4CON
 ((vﬁ©ûê
u32
*)(
INCA_IP_GPTU
+ 0x0050))

	)

1139 
	#INCA_IP_GPTU_GPT_WHBT4CON_SETTxCHDIR
 (1 << 15)

	)

1140 
	#INCA_IP_GPTU_GPT_WHBT4CON_CLRTxCHDIR
 (1 << 14)

	)

1141 
	#INCA_IP_GPTU_GPT_WHBT4CON_SETTxEDGE
 (1 << 13)

	)

1142 
	#INCA_IP_GPTU_GPT_WHBT4CON_CLRTxEDGE
 (1 << 12)

	)

1145 
	#INCA_IP_GPTU_GPT_CAPREL
 ((vﬁ©ûê
u32
*)(
INCA_IP_GPTU
+ 0x0030))

	)

1146 
	#INCA_IP_GPTU_GPT_CAPREL_CAPREL
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

1149 
	#INCA_IP_GPTU_GPT_T2
 ((vﬁ©ûê
u32
*)(
INCA_IP_GPTU
+ 0x0034))

	)

1150 
	#INCA_IP_GPTU_GPT_T2_TVAL
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

1153 
	#INCA_IP_GPTU_GPT_T3
 ((vﬁ©ûê
u32
*)(
INCA_IP_GPTU
+ 0x0038))

	)

1154 
	#INCA_IP_GPTU_GPT_T3_TVAL
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

1157 
	#INCA_IP_GPTU_GPT_T4
 ((vﬁ©ûê
u32
*)(
INCA_IP_GPTU
+ 0x003C))

	)

1158 
	#INCA_IP_GPTU_GPT_T4_TVAL
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

1161 
	#INCA_IP_GPTU_GPT_T5
 ((vﬁ©ûê
u32
*)(
INCA_IP_GPTU
+ 0x0040))

	)

1162 
	#INCA_IP_GPTU_GPT_T5_TVAL
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

1165 
	#INCA_IP_GPTU_GPT_T6
 ((vﬁ©ûê
u32
*)(
INCA_IP_GPTU
+ 0x0044))

	)

1166 
	#INCA_IP_GPTU_GPT_T6_TVAL
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

1169 
	#INCA_IP_GPTU_GPT_T6CON
 ((vﬁ©ûê
u32
*)(
INCA_IP_GPTU
+ 0x0020))

	)

1170 
	#INCA_IP_GPTU_GPT_T6CON_T6SR
 (1 << 15)

	)

1171 
	#INCA_IP_GPTU_GPT_T6CON_T6CLR
 (1 << 14)

	)

1172 
	#INCA_IP_GPTU_GPT_T6CON_BPS2
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 11)

	)

1173 
	#INCA_IP_GPTU_GPT_T6CON_T6OTL
 (1 << 10)

	)

1174 
	#INCA_IP_GPTU_GPT_T6CON_T6UD
 (1 << 7)

	)

1175 
	#INCA_IP_GPTU_GPT_T6CON_T6R
 (1 << 6)

	)

1176 
	#INCA_IP_GPTU_GPT_T6CON_T6M
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 3)

	)

1177 
	#INCA_IP_GPTU_GPT_T6CON_T6I
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 0)

	)

1181 
	#INCA_IP_GPTU_GPT_WHBT6CON
 ((vﬁ©ûê
u32
*)(
INCA_IP_GPTU
+ 0x0054))

	)

1182 
	#INCA_IP_GPTU_GPT_WHBT6CON_SETT6OTL
 (1 << 11)

	)

1183 
	#INCA_IP_GPTU_GPT_WHBT6CON_CLRT6OTL
 (1 << 10)

	)

1186 
	#INCA_IP_GPTU_GPT_T5CON
 ((vﬁ©ûê
u32
*)(
INCA_IP_GPTU
+ 0x001C))

	)

1187 
	#INCA_IP_GPTU_GPT_T5CON_T5SC
 (1 << 15)

	)

1188 
	#INCA_IP_GPTU_GPT_T5CON_T5CLR
 (1 << 14)

	)

1189 
	#INCA_IP_GPTU_GPT_T5CON_CI
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 12)

	)

1190 
	#INCA_IP_GPTU_GPT_T5CON_T5CC
 (1 << 11)

	)

1191 
	#INCA_IP_GPTU_GPT_T5CON_CT3
 (1 << 10)

	)

1192 
	#INCA_IP_GPTU_GPT_T5CON_T5RC
 (1 << 9)

	)

1193 
	#INCA_IP_GPTU_GPT_T5CON_T5UDE
 (1 << 8)

	)

1194 
	#INCA_IP_GPTU_GPT_T5CON_T5UD
 (1 << 7)

	)

1195 
	#INCA_IP_GPTU_GPT_T5CON_T5R
 (1 << 6)

	)

1196 
	#INCA_IP_GPTU_GPT_T5CON_T5M
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 3)

	)

1197 
	#INCA_IP_GPTU_GPT_T5CON_T5I
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 0)

	)

1203 
	#INCA_IP_IOM
 (0xBF105000)

	)

1208 
	#INCA_IP_IOM_RFIFO
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0000))

	)

1209 
	#INCA_IP_IOM_RFIFO_RXD
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

1212 
	#INCA_IP_IOM_XFIFO
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0000))

	)

1213 
	#INCA_IP_IOM_XFIFO_TXD
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

1216 
	#INCA_IP_IOM_ISTAH
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0080))

	)

1217 
	#INCA_IP_IOM_ISTAH_RME
 (1 << 7)

	)

1218 
	#INCA_IP_IOM_ISTAH_RPF
 (1 << 6)

	)

1219 
	#INCA_IP_IOM_ISTAH_RFO
 (1 << 5)

	)

1220 
	#INCA_IP_IOM_ISTAH_XPR
 (1 << 4)

	)

1221 
	#INCA_IP_IOM_ISTAH_XMR
 (1 << 3)

	)

1222 
	#INCA_IP_IOM_ISTAH_XDU
 (1 << 2)

	)

1225 
	#INCA_IP_IOM_MASKH
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0080))

	)

1226 
	#INCA_IP_IOM_MASKH_RME
 (1 << 7)

	)

1227 
	#INCA_IP_IOM_MASKH_RPF
 (1 << 6)

	)

1228 
	#INCA_IP_IOM_MASKH_RFO
 (1 << 5)

	)

1229 
	#INCA_IP_IOM_MASKH_XPR
 (1 << 4)

	)

1230 
	#INCA_IP_IOM_MASKH_XMR
 (1 << 3)

	)

1231 
	#INCA_IP_IOM_MASKH_XDU
 (1 << 2)

	)

1234 
	#INCA_IP_IOM_STAR
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0084))

	)

1235 
	#INCA_IP_IOM_STAR_XDOV
 (1 << 7)

	)

1236 
	#INCA_IP_IOM_STAR_XFW
 (1 << 6)

	)

1237 
	#INCA_IP_IOM_STAR_RACI
 (1 << 3)

	)

1238 
	#INCA_IP_IOM_STAR_XACI
 (1 << 1)

	)

1241 
	#INCA_IP_IOM_CMDR
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0084))

	)

1242 
	#INCA_IP_IOM_CMDR_RMC
 (1 << 7)

	)

1243 
	#INCA_IP_IOM_CMDR_RRES
 (1 << 6)

	)

1244 
	#INCA_IP_IOM_CMDR_XTF
 (1 << 3)

	)

1245 
	#INCA_IP_IOM_CMDR_XME
 (1 << 1)

	)

1246 
	#INCA_IP_IOM_CMDR_XRES
 (1 << 0)

	)

1249 
	#INCA_IP_IOM_MODEH
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0088))

	)

1250 
	#INCA_IP_IOM_MODEH_MDS2
 (1 << 7)

	)

1251 
	#INCA_IP_IOM_MODEH_MDS1
 (1 << 6)

	)

1252 
	#INCA_IP_IOM_MODEH_MDS0
 (1 << 5)

	)

1253 
	#INCA_IP_IOM_MODEH_RAC
 (1 << 3)

	)

1254 
	#INCA_IP_IOM_MODEH_DIM2
 (1 << 2)

	)

1255 
	#INCA_IP_IOM_MODEH_DIM1
 (1 << 1)

	)

1256 
	#INCA_IP_IOM_MODEH_DIM0
 (1 << 0)

	)

1259 
	#INCA_IP_IOM_EXMR
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x008C))

	)

1260 
	#INCA_IP_IOM_EXMR_XFBS
 (1 << 7)

	)

1261 
	#INCA_IP_IOM_EXMR_RFBS
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 5)

	)

1262 
	#INCA_IP_IOM_EXMR_SRA
 (1 << 4)

	)

1263 
	#INCA_IP_IOM_EXMR_XCRC
 (1 << 3)

	)

1264 
	#INCA_IP_IOM_EXMR_RCRC
 (1 << 2)

	)

1265 
	#INCA_IP_IOM_EXMR_ITF
 (1 << 0)

	)

1268 
	#INCA_IP_IOM_SAP1
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0094))

	)

1269 
	#INCA_IP_IOM_SAP1_SAPI1
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 2)

	)

1270 
	#INCA_IP_IOM_SAP1_MHA
 (1 << 0)

	)

1273 
	#INCA_IP_IOM_RBCL
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0098))

	)

1274 
	#INCA_IP_IOM_RBCL_RBC
(
vÆue
Ë(1 << vÆue)

	)

1278 
	#INCA_IP_IOM_SAP2
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0098))

	)

1279 
	#INCA_IP_IOM_SAP2_SAPI2
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 2)

	)

1280 
	#INCA_IP_IOM_SAP2_MLA
 (1 << 0)

	)

1283 
	#INCA_IP_IOM_RBCH
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x009C))

	)

1284 
	#INCA_IP_IOM_RBCH_OV
 (1 << 4)

	)

1285 
	#INCA_IP_IOM_RBCH_RBC11
 (1 << 3)

	)

1286 
	#INCA_IP_IOM_RBCH_RBC10
 (1 << 2)

	)

1287 
	#INCA_IP_IOM_RBCH_RBC9
 (1 << 1)

	)

1288 
	#INCA_IP_IOM_RBCH_RBC8
 (1 << 0)

	)

1291 
	#INCA_IP_IOM_TEI1
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x009C))

	)

1292 
	#INCA_IP_IOM_TEI1_TEI1
 (
vÆue
Ë(((–1 << 7Ë- 1Ë& (vÆue)Ë<< 1)

	)

1293 
	#INCA_IP_IOM_TEI1_EA
 (1 << 0)

	)

1296 
	#INCA_IP_IOM_RSTA
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x00A0))

	)

1297 
	#INCA_IP_IOM_RSTA_VFR
 (1 << 7)

	)

1298 
	#INCA_IP_IOM_RSTA_RDO
 (1 << 6)

	)

1299 
	#INCA_IP_IOM_RSTA_CRC
 (1 << 5)

	)

1300 
	#INCA_IP_IOM_RSTA_RAB
 (1 << 4)

	)

1301 
	#INCA_IP_IOM_RSTA_SA1
 (1 << 3)

	)

1302 
	#INCA_IP_IOM_RSTA_SA0
 (1 << 2)

	)

1303 
	#INCA_IP_IOM_RSTA_TA
 (1 << 0)

	)

1304 
	#INCA_IP_IOM_RSTA_CR
 (1 << 1)

	)

1307 
	#INCA_IP_IOM_TEI2
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x00A0))

	)

1308 
	#INCA_IP_IOM_TEI2_TEI2
 (
vÆue
Ë(((–1 << 7Ë- 1Ë& (vÆue)Ë<< 1)

	)

1309 
	#INCA_IP_IOM_TEI2_EA
 (1 << 0)

	)

1312 
	#INCA_IP_IOM_TMH
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x00A4))

	)

1313 
	#INCA_IP_IOM_TMH_TLP
 (1 << 0)

	)

1316 
	#INCA_IP_IOM_CIR0
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x00B8))

	)

1317 
	#INCA_IP_IOM_CIR0_CODR0
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 4)

	)

1318 
	#INCA_IP_IOM_CIR0_CIC0
 (1 << 3)

	)

1319 
	#INCA_IP_IOM_CIR0_CIC1
 (1 << 2)

	)

1320 
	#INCA_IP_IOM_CIR0_SG
 (1 << 1)

	)

1321 
	#INCA_IP_IOM_CIR0_BAS
 (1 << 0)

	)

1324 
	#INCA_IP_IOM_CIX0
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x00B8))

	)

1325 
	#INCA_IP_IOM_CIX0_CODX0
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 4)

	)

1326 
	#INCA_IP_IOM_CIX0_TBA2
 (1 << 3)

	)

1327 
	#INCA_IP_IOM_CIX0_TBA1
 (1 << 2)

	)

1328 
	#INCA_IP_IOM_CIX0_TBA0
 (1 << 1)

	)

1329 
	#INCA_IP_IOM_CIX0_BAC
 (1 << 0)

	)

1332 
	#INCA_IP_IOM_CIR1
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x00BC))

	)

1333 
	#INCA_IP_IOM_CIR1_CODR1
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 2)

	)

1336 
	#INCA_IP_IOM_CIX1
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x00BC))

	)

1337 
	#INCA_IP_IOM_CIX1_CODX1
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 2)

	)

1338 
	#INCA_IP_IOM_CIX1_CICW
 (1 << 1)

	)

1339 
	#INCA_IP_IOM_CIX1_CI1E
 (1 << 0)

	)

1342 
	#INCA_IP_IOM_CDA10
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0100))

	)

1343 
	#INCA_IP_IOM_CDA10_CDA
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

1346 
	#INCA_IP_IOM_CDA11
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0104))

	)

1347 
	#INCA_IP_IOM_CDA11_CDA
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

1350 
	#INCA_IP_IOM_CDA20
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0108))

	)

1351 
	#INCA_IP_IOM_CDA20_CDA
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

1354 
	#INCA_IP_IOM_CDA21
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x010C))

	)

1355 
	#INCA_IP_IOM_CDA21_CDA
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

1358 
	#INCA_IP_IOM_CDA_TSDP10
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0110))

	)

1359 
	#INCA_IP_IOM_CDA_TSDP10_DPS
 (1 << 7)

	)

1360 
	#INCA_IP_IOM_CDA_TSDP10_TSS
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

1363 
	#INCA_IP_IOM_CDA_TSDP11
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0114))

	)

1364 
	#INCA_IP_IOM_CDA_TSDP11_DPS
 (1 << 7)

	)

1365 
	#INCA_IP_IOM_CDA_TSDP11_TSS
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

1368 
	#INCA_IP_IOM_CDA_TSDP20
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0118))

	)

1369 
	#INCA_IP_IOM_CDA_TSDP20_DPS
 (1 << 7)

	)

1370 
	#INCA_IP_IOM_CDA_TSDP20_TSS
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

1373 
	#INCA_IP_IOM_CDA_TSDP21
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x011C))

	)

1374 
	#INCA_IP_IOM_CDA_TSDP21_DPS
 (1 << 7)

	)

1375 
	#INCA_IP_IOM_CDA_TSDP21_TSS
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

1378 
	#INCA_IP_IOM_CO_TSDP10
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0120))

	)

1379 
	#INCA_IP_IOM_CO_TSDP10_DPS
 (1 << 7)

	)

1380 
	#INCA_IP_IOM_CO_TSDP10_TSS
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

1383 
	#INCA_IP_IOM_CO_TSDP11
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0124))

	)

1384 
	#INCA_IP_IOM_CO_TSDP11_DPS
 (1 << 7)

	)

1385 
	#INCA_IP_IOM_CO_TSDP11_TSS
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

1388 
	#INCA_IP_IOM_CO_TSDP20
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0128))

	)

1389 
	#INCA_IP_IOM_CO_TSDP20_DPS
 (1 << 7)

	)

1390 
	#INCA_IP_IOM_CO_TSDP20_TSS
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

1393 
	#INCA_IP_IOM_CO_TSDP21
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x012C))

	)

1394 
	#INCA_IP_IOM_CO_TSDP21_DPS
 (1 << 7)

	)

1395 
	#INCA_IP_IOM_CO_TSDP21_TSS
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

1398 
	#INCA_IP_IOM_CDA1_CR
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0138))

	)

1399 
	#INCA_IP_IOM_CDA1_CR_EN_TBM
 (1 << 5)

	)

1400 
	#INCA_IP_IOM_CDA1_CR_EN_I1
 (1 << 4)

	)

1401 
	#INCA_IP_IOM_CDA1_CR_EN_I0
 (1 << 3)

	)

1402 
	#INCA_IP_IOM_CDA1_CR_EN_O1
 (1 << 2)

	)

1403 
	#INCA_IP_IOM_CDA1_CR_EN_O0
 (1 << 1)

	)

1404 
	#INCA_IP_IOM_CDA1_CR_SWAP
 (1 << 0)

	)

1407 
	#INCA_IP_IOM_CDA2_CR
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x013C))

	)

1408 
	#INCA_IP_IOM_CDA2_CR_EN_TBM
 (1 << 5)

	)

1409 
	#INCA_IP_IOM_CDA2_CR_EN_I1
 (1 << 4)

	)

1410 
	#INCA_IP_IOM_CDA2_CR_EN_I0
 (1 << 3)

	)

1411 
	#INCA_IP_IOM_CDA2_CR_EN_O1
 (1 << 2)

	)

1412 
	#INCA_IP_IOM_CDA2_CR_EN_O0
 (1 << 1)

	)

1413 
	#INCA_IP_IOM_CDA2_CR_SWAP
 (1 << 0)

	)

1416 
	#INCA_IP_IOM_BCHA_CR
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0144))

	)

1417 
	#INCA_IP_IOM_BCHA_CR_EN_BC2
 (1 << 4)

	)

1418 
	#INCA_IP_IOM_BCHA_CR_EN_BC1
 (1 << 3)

	)

1421 
	#INCA_IP_IOM_BCHB_CR
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0148))

	)

1422 
	#INCA_IP_IOM_BCHB_CR_EN_BC2
 (1 << 4)

	)

1423 
	#INCA_IP_IOM_BCHB_CR_EN_BC1
 (1 << 3)

	)

1426 
	#INCA_IP_IOM_DCI_CR
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x014C))

	)

1427 
	#INCA_IP_IOM_DCI_CR_DPS_CI1
 (1 << 7)

	)

1428 
	#INCA_IP_IOM_DCI_CR_EN_CI1
 (1 << 6)

	)

1429 
	#INCA_IP_IOM_DCI_CR_EN_D
 (1 << 5)

	)

1432 
	#INCA_IP_IOM_DCIC_CR
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x014C))

	)

1433 
	#INCA_IP_IOM_DCIC_CR_DPS_CI0
 (1 << 7)

	)

1434 
	#INCA_IP_IOM_DCIC_CR_EN_CI0
 (1 << 6)

	)

1435 
	#INCA_IP_IOM_DCIC_CR_DPS_D
 (1 << 5)

	)

1438 
	#INCA_IP_IOM_SDS_CR
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0154))

	)

1439 
	#INCA_IP_IOM_SDS_CR_ENS_TSS
 (1 << 7)

	)

1440 
	#INCA_IP_IOM_SDS_CR_ENS_TSS_1
 (1 << 6)

	)

1441 
	#INCA_IP_IOM_SDS_CR_ENS_TSS_3
 (1 << 5)

	)

1442 
	#INCA_IP_IOM_SDS_CR_TSS
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

1445 
	#INCA_IP_IOM_IOM_CR
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x015C))

	)

1446 
	#INCA_IP_IOM_IOM_CR_SPU
 (1 << 7)

	)

1447 
	#INCA_IP_IOM_IOM_CR_CI_CS
 (1 << 5)

	)

1448 
	#INCA_IP_IOM_IOM_CR_TIC_DIS
 (1 << 4)

	)

1449 
	#INCA_IP_IOM_IOM_CR_EN_BCL
 (1 << 3)

	)

1450 
	#INCA_IP_IOM_IOM_CR_CLKM
 (1 << 2)

	)

1451 
	#INCA_IP_IOM_IOM_CR_Res
 (1 << 1)

	)

1452 
	#INCA_IP_IOM_IOM_CR_DIS_IOM
 (1 << 0)

	)

1455 
	#INCA_IP_IOM_STI
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0160))

	)

1456 
	#INCA_IP_IOM_STI_STOV21
 (1 << 7)

	)

1457 
	#INCA_IP_IOM_STI_STOV20
 (1 << 6)

	)

1458 
	#INCA_IP_IOM_STI_STOV11
 (1 << 5)

	)

1459 
	#INCA_IP_IOM_STI_STOV10
 (1 << 4)

	)

1460 
	#INCA_IP_IOM_STI_STI21
 (1 << 3)

	)

1461 
	#INCA_IP_IOM_STI_STI20
 (1 << 2)

	)

1462 
	#INCA_IP_IOM_STI_STI11
 (1 << 1)

	)

1463 
	#INCA_IP_IOM_STI_STI10
 (1 << 0)

	)

1466 
	#INCA_IP_IOM_ASTI
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0160))

	)

1467 
	#INCA_IP_IOM_ASTI_ACK21
 (1 << 3)

	)

1468 
	#INCA_IP_IOM_ASTI_ACK20
 (1 << 2)

	)

1469 
	#INCA_IP_IOM_ASTI_ACK11
 (1 << 1)

	)

1470 
	#INCA_IP_IOM_ASTI_ACK10
 (1 << 0)

	)

1473 
	#INCA_IP_IOM_MSTI
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0164))

	)

1474 
	#INCA_IP_IOM_MSTI_STOV21
 (1 << 7)

	)

1475 
	#INCA_IP_IOM_MSTI_STOV20
 (1 << 6)

	)

1476 
	#INCA_IP_IOM_MSTI_STOV11
 (1 << 5)

	)

1477 
	#INCA_IP_IOM_MSTI_STOV10
 (1 << 4)

	)

1478 
	#INCA_IP_IOM_MSTI_STI21
 (1 << 3)

	)

1479 
	#INCA_IP_IOM_MSTI_STI20
 (1 << 2)

	)

1480 
	#INCA_IP_IOM_MSTI_STI11
 (1 << 1)

	)

1481 
	#INCA_IP_IOM_MSTI_STI10
 (1 << 0)

	)

1484 
	#INCA_IP_IOM_SDS_CONF
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x0168))

	)

1485 
	#INCA_IP_IOM_SDS_CONF_SDS_BCL
 (1 << 0)

	)

1488 
	#INCA_IP_IOM_MCDA
 ((vﬁ©ûê
u32
*)(
INCA_IP_IOM
+ 0x016C))

	)

1489 
	#INCA_IP_IOM_MCDA_MCDA21
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 6)

	)

1490 
	#INCA_IP_IOM_MCDA_MCDA20
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 4)

	)

1491 
	#INCA_IP_IOM_MCDA_MCDA11
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 2)

	)

1492 
	#INCA_IP_IOM_MCDA_MCDA10
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 0)

	)

1498 #i‡
deföed
(
CONFIG_INCA_IP
)

1499 
	#INCA_IP_ASC
 (0xB8000400)

	)

1500 #ñi‡
deföed
(
CONFIG_PURPLE
)

1501 
	#INCA_IP_ASC
 (0xBE500000)

	)

1508 
	#INCA_IP_ASC_ASC_PISEL
 ((vﬁ©ûê
u32
*)(
INCA_IP_ASC
+ 0x0004))

	)

1509 
	#INCA_IP_ASC_ASC_PISEL_RIS
 (1 << 0)

	)

1512 
	#INCA_IP_ASC_ASC_CON
 ((vﬁ©ûê
u32
*)(
INCA_IP_ASC
+ 0x0010))

	)

1513 
	#INCA_IP_ASC_ASC_CON_R
 (1 << 15)

	)

1514 
	#INCA_IP_ASC_ASC_CON_LB
 (1 << 14)

	)

1515 
	#INCA_IP_ASC_ASC_CON_BRS
 (1 << 13)

	)

1516 
	#INCA_IP_ASC_ASC_CON_ODD
 (1 << 12)

	)

1517 
	#INCA_IP_ASC_ASC_CON_FDE
 (1 << 11)

	)

1518 
	#INCA_IP_ASC_ASC_CON_OE
 (1 << 10)

	)

1519 
	#INCA_IP_ASC_ASC_CON_FE
 (1 << 9)

	)

1520 
	#INCA_IP_ASC_ASC_CON_PE
 (1 << 8)

	)

1521 
	#INCA_IP_ASC_ASC_CON_OEN
 (1 << 7)

	)

1522 
	#INCA_IP_ASC_ASC_CON_FEN
 (1 << 6)

	)

1523 
	#INCA_IP_ASC_ASC_CON_PENRXDI
 (1 << 5)

	)

1524 
	#INCA_IP_ASC_ASC_CON_REN
 (1 << 4)

	)

1525 
	#INCA_IP_ASC_ASC_CON_STP
 (1 << 3)

	)

1526 
	#INCA_IP_ASC_ASC_CON_M
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 0)

	)

1529 
	#INCA_IP_ASC_ASC_WHBCON
 ((vﬁ©ûê
u32
*)(
INCA_IP_ASC
+ 0x0050))

	)

1530 
	#INCA_IP_ASC_ASC_WHBCON_SETOE
 (1 << 13)

	)

1531 
	#INCA_IP_ASC_ASC_WHBCON_SETFE
 (1 << 12)

	)

1532 
	#INCA_IP_ASC_ASC_WHBCON_SETPE
 (1 << 11)

	)

1533 
	#INCA_IP_ASC_ASC_WHBCON_CLROE
 (1 << 10)

	)

1534 
	#INCA_IP_ASC_ASC_WHBCON_CLRFE
 (1 << 9)

	)

1535 
	#INCA_IP_ASC_ASC_WHBCON_CLRPE
 (1 << 8)

	)

1536 
	#INCA_IP_ASC_ASC_WHBCON_SETREN
 (1 << 5)

	)

1537 
	#INCA_IP_ASC_ASC_WHBCON_CLRREN
 (1 << 4)

	)

1540 
	#INCA_IP_ASC_ASC_BTR
 ((vﬁ©ûê
u32
*)(
INCA_IP_ASC
+ 0x0014))

	)

1541 
	#INCA_IP_ASC_ASC_BTR_BR_VALUE
 (
vÆue
Ë(((–1 << 13Ë- 1Ë& (vÆue)Ë<< 0)

	)

1544 
	#INCA_IP_ASC_ASC_FDV
 ((vﬁ©ûê
u32
*)(
INCA_IP_ASC
+ 0x0018))

	)

1545 
	#INCA_IP_ASC_ASC_FDV_FD_VALUE
 (
vÆue
Ë(((–1 << 9Ë- 1Ë& (vÆue)Ë<< 0)

	)

1548 
	#INCA_IP_ASC_ASC_PMW
 ((vﬁ©ûê
u32
*)(
INCA_IP_ASC
+ 0x001C))

	)

1549 
	#INCA_IP_ASC_ASC_PMW_IRPW
 (1 << 8)

	)

1550 
	#INCA_IP_ASC_ASC_PMW_PW_VALUE
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

1553 
	#INCA_IP_ASC_ASC_TBUF
 ((vﬁ©ûê
u32
*)(
INCA_IP_ASC
+ 0x0020))

	)

1554 
	#INCA_IP_ASC_ASC_TBUF_TD_VALUE
 (
vÆue
Ë(((–1 << 9Ë- 1Ë& (vÆue)Ë<< 0)

	)

1557 
	#INCA_IP_ASC_ASC_RBUF
 ((vﬁ©ûê
u32
*)(
INCA_IP_ASC
+ 0x0024))

	)

1558 
	#INCA_IP_ASC_ASC_RBUF_RD_VALUE
 (
vÆue
Ë(((–1 << 9Ë- 1Ë& (vÆue)Ë<< 0)

	)

1561 
	#INCA_IP_ASC_ASC_ABCON
 ((vﬁ©ûê
u32
*)(
INCA_IP_ASC
+ 0x0030))

	)

1562 
	#INCA_IP_ASC_ASC_ABCON_RXINV
 (1 << 11)

	)

1563 
	#INCA_IP_ASC_ASC_ABCON_TXINV
 (1 << 10)

	)

1564 
	#INCA_IP_ASC_ASC_ABCON_ABEM
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 8)

	)

1565 
	#INCA_IP_ASC_ASC_ABCON_FCDETEN
 (1 << 4)

	)

1566 
	#INCA_IP_ASC_ASC_ABCON_ABDETEN
 (1 << 3)

	)

1567 
	#INCA_IP_ASC_ASC_ABCON_ABSTEN
 (1 << 2)

	)

1568 
	#INCA_IP_ASC_ASC_ABCON_AUREN
 (1 << 1)

	)

1569 
	#INCA_IP_ASC_ASC_ABCON_ABEN
 (1 << 0)

	)

1572 
	#INCA_IP_ASC_RXFCON
 ((vﬁ©ûê
u32
*)(
INCA_IP_ASC
+ 0x0040))

	)

1573 
	#INCA_IP_ASC_RXFCON_RXFITL
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 8)

	)

1574 
	#INCA_IP_ASC_RXFCON_RXTMEN
 (1 << 2)

	)

1575 
	#INCA_IP_ASC_RXFCON_RXFFLU
 (1 << 1)

	)

1576 
	#INCA_IP_ASC_RXFCON_RXFEN
 (1 << 0)

	)

1579 
	#INCA_IP_ASC_TXFCON
 ((vﬁ©ûê
u32
*)(
INCA_IP_ASC
+ 0x0044))

	)

1580 
	#INCA_IP_ASC_TXFCON_TXFITL
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 8)

	)

1581 
	#INCA_IP_ASC_TXFCON_TXTMEN
 (1 << 2)

	)

1582 
	#INCA_IP_ASC_TXFCON_TXFFLU
 (1 << 1)

	)

1583 
	#INCA_IP_ASC_TXFCON_TXFEN
 (1 << 0)

	)

1586 
	#INCA_IP_ASC_FSTAT
 ((vﬁ©ûê
u32
*)(
INCA_IP_ASC
+ 0x0048))

	)

1587 
	#INCA_IP_ASC_FSTAT_TXFFL
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 8)

	)

1588 
	#INCA_IP_ASC_FSTAT_RXFFL
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 0)

	)

1591 
	#INCA_IP_ASC_ASC_WHBABCON
 ((vﬁ©ûê
u32
*)(
INCA_IP_ASC
+ 0x0054))

	)

1592 
	#INCA_IP_ASC_ASC_WHBABCON_SETABEN
 (1 << 1)

	)

1593 
	#INCA_IP_ASC_ASC_WHBABCON_CLRABEN
 (1 << 0)

	)

1596 
	#INCA_IP_ASC_ASC_ABSTAT
 ((vﬁ©ûê
u32
*)(
INCA_IP_ASC
+ 0x0034))

	)

1597 
	#INCA_IP_ASC_ASC_ABSTAT_DETWAIT
 (1 << 4)

	)

1598 
	#INCA_IP_ASC_ASC_ABSTAT_SCCDET
 (1 << 3)

	)

1599 
	#INCA_IP_ASC_ASC_ABSTAT_SCSDET
 (1 << 2)

	)

1600 
	#INCA_IP_ASC_ASC_ABSTAT_FCCDET
 (1 << 1)

	)

1601 
	#INCA_IP_ASC_ASC_ABSTAT_FCSDET
 (1 << 0)

	)

1604 
	#INCA_IP_ASC_ASC_WHBABSTAT
 ((vﬁ©ûê
u32
*)(
INCA_IP_ASC
+ 0x0058))

	)

1605 
	#INCA_IP_ASC_ASC_WHBABSTAT_SETDETWAIT
 (1 << 9)

	)

1606 
	#INCA_IP_ASC_ASC_WHBABSTAT_CLRDETWAIT
 (1 << 8)

	)

1607 
	#INCA_IP_ASC_ASC_WHBABSTAT_SETSCCDET
 (1 << 7)

	)

1608 
	#INCA_IP_ASC_ASC_WHBABSTAT_CLRSCCDET
 (1 << 6)

	)

1609 
	#INCA_IP_ASC_ASC_WHBABSTAT_SETSCSDET
 (1 << 5)

	)

1610 
	#INCA_IP_ASC_ASC_WHBABSTAT_CLRSCSDET
 (1 << 4)

	)

1611 
	#INCA_IP_ASC_ASC_WHBABSTAT_SETFCCDET
 (1 << 3)

	)

1612 
	#INCA_IP_ASC_ASC_WHBABSTAT_CLRFCCDET
 (1 << 2)

	)

1613 
	#INCA_IP_ASC_ASC_WHBABSTAT_SETFCSDET
 (1 << 1)

	)

1614 
	#INCA_IP_ASC_ASC_WHBABSTAT_CLRFCSDET
 (1 << 0)

	)

1617 
	#INCA_IP_ASC_ASC_CLC
 ((vﬁ©ûê
u32
*)(
INCA_IP_ASC
+ 0x0000))

	)

1618 
	#INCA_IP_ASC_ASC_CLC_RMC
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 8)

	)

1619 
	#INCA_IP_ASC_ASC_CLC_DISS
 (1 << 1)

	)

1620 
	#INCA_IP_ASC_ASC_CLC_DISR
 (1 << 0)

	)

1626 
	#INCA_IP_DMA
 (0xBF108000)

	)

1631 
	#INCA_IP_DMA_DMA_RXCCR0
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x0800))

	)

1632 
	#INCA_IP_DMA_DMA_RXCCR0_LBE
 (1 << 31)

	)

1633 
	#INCA_IP_DMA_DMA_RXCCR0_HPEN
 (1 << 30)

	)

1634 
	#INCA_IP_DMA_DMA_RXCCR0_INIT
 (1 << 2)

	)

1635 
	#INCA_IP_DMA_DMA_RXCCR0_OFF
 (1 << 1)

	)

1636 
	#INCA_IP_DMA_DMA_RXCCR0_HR
 (1 << 0)

	)

1639 
	#INCA_IP_DMA_DMA_RXCCR1
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x0804))

	)

1640 
	#INCA_IP_DMA_DMA_RXCCR1_LBE
 (1 << 31)

	)

1641 
	#INCA_IP_DMA_DMA_RXCCR1_HPEN
 (1 << 30)

	)

1642 
	#INCA_IP_DMA_DMA_RXCCR1_INIT
 (1 << 2)

	)

1643 
	#INCA_IP_DMA_DMA_RXCCR1_OFF
 (1 << 1)

	)

1644 
	#INCA_IP_DMA_DMA_RXCCR1_HR
 (1 << 0)

	)

1647 
	#INCA_IP_DMA_DMA_RXISR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x0808))

	)

1648 
	#INCA_IP_DMA_DMA_RXISR_RDERRx
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 8)

	)

1649 
	#INCA_IP_DMA_DMA_RXISR_CMDCPTx
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 6)

	)

1650 
	#INCA_IP_DMA_DMA_RXISR_EOPx
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 4)

	)

1651 
	#INCA_IP_DMA_DMA_RXISR_CPTx
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 2)

	)

1652 
	#INCA_IP_DMA_DMA_RXISR_HLDx
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 0)

	)

1655 
	#INCA_IP_DMA_DMA_RXIMR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x080C))

	)

1656 
	#INCA_IP_DMA_DMA_RXIMR_RDERRx
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 8)

	)

1657 
	#INCA_IP_DMA_DMA_RXIMR_CMDCPTx
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 6)

	)

1658 
	#INCA_IP_DMA_DMA_RXIMR_EOPx
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 4)

	)

1659 
	#INCA_IP_DMA_DMA_RXIMR_CPTx
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 2)

	)

1660 
	#INCA_IP_DMA_DMA_RXIMR_HLDx
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 0)

	)

1664 
	#INCA_IP_DMA_DMA_RXFRDA0
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x0810))

	)

1665 
	#INCA_IP_DMA_DMA_RXFRDA0_RXFRDA
 (
vÆue
Ë(((–1 << 28Ë- 1Ë& (vÆue)Ë<< 0)

	)

1669 
	#INCA_IP_DMA_DMA_RXFRDA1
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x0814))

	)

1670 
	#INCA_IP_DMA_DMA_RXFRDA1_RXFRDA
 (
vÆue
Ë(((–1 << 28Ë- 1Ë& (vÆue)Ë<< 0)

	)

1673 
	#INCA_IP_DMA_DMA_RXPOLL
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x0818))

	)

1674 
	#INCA_IP_DMA_DMA_RXPOLL_BSZ1
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 30)

	)

1675 
	#INCA_IP_DMA_DMA_RXPOLL_BSZ0
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 28)

	)

1676 
	#INCA_IP_DMA_DMA_RXPOLL_RXPOLLTIME
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

1679 
	#INCA_IP_DMA_DMA_TXCCR0
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x0880))

	)

1680 
	#INCA_IP_DMA_DMA_TXCCR0_LBE
 (1 << 31)

	)

1681 
	#INCA_IP_DMA_DMA_TXCCR0_HPEN
 (1 << 30)

	)

1682 
	#INCA_IP_DMA_DMA_TXCCR0_HR
 (1 << 2)

	)

1683 
	#INCA_IP_DMA_DMA_TXCCR0_OFF
 (1 << 1)

	)

1684 
	#INCA_IP_DMA_DMA_TXCCR0_INIT
 (1 << 0)

	)

1687 
	#INCA_IP_DMA_DMA_TXCCR1
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x0884))

	)

1688 
	#INCA_IP_DMA_DMA_TXCCR1_LBE
 (1 << 31)

	)

1689 
	#INCA_IP_DMA_DMA_TXCCR1_HPEN
 (1 << 30)

	)

1690 
	#INCA_IP_DMA_DMA_TXCCR1_HR
 (1 << 2)

	)

1691 
	#INCA_IP_DMA_DMA_TXCCR1_OFF
 (1 << 1)

	)

1692 
	#INCA_IP_DMA_DMA_TXCCR1_INIT
 (1 << 0)

	)

1695 
	#INCA_IP_DMA_DMA_TXCCR2
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x0888))

	)

1696 
	#INCA_IP_DMA_DMA_TXCCR2_LBE
 (1 << 31)

	)

1697 
	#INCA_IP_DMA_DMA_TXCCR2_HPEN
 (1 << 30)

	)

1698 
	#INCA_IP_DMA_DMA_TXCCR2_HBF
 (1 << 29)

	)

1699 
	#INCA_IP_DMA_DMA_TXCCR2_HR
 (1 << 2)

	)

1700 
	#INCA_IP_DMA_DMA_TXCCR2_OFF
 (1 << 1)

	)

1701 
	#INCA_IP_DMA_DMA_TXCCR2_INIT
 (1 << 0)

	)

1705 
	#INCA_IP_DMA_DMA_TXFRDA0
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x08A0))

	)

1706 
	#INCA_IP_DMA_DMA_TXFRDA0_TXFRDA
 (
vÆue
Ë(((–1 << 28Ë- 1Ë& (vÆue)Ë<< 0)

	)

1710 
	#INCA_IP_DMA_DMA_TXFRDA1
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x08A4))

	)

1711 
	#INCA_IP_DMA_DMA_TXFRDA1_TXFRDA
 (
vÆue
Ë(((–1 << 28Ë- 1Ë& (vÆue)Ë<< 0)

	)

1715 
	#INCA_IP_DMA_DMA_TXFRDA2
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x08A8))

	)

1716 
	#INCA_IP_DMA_DMA_TXFRDA2_TXFRDA
 (
vÆue
Ë(((–1 << 28Ë- 1Ë& (vÆue)Ë<< 0)

	)

1719 
	#INCA_IP_DMA_DMA_TXWGT
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x08C0))

	)

1720 
	#INCA_IP_DMA_DMA_TXWGT_TX2PR
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 4)

	)

1721 
	#INCA_IP_DMA_DMA_TXWGT_TX1PRI
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 2)

	)

1722 
	#INCA_IP_DMA_DMA_TXWGT_TX0PRI
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 0)

	)

1725 
	#INCA_IP_DMA_DMA_TXPOLL
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x08C4))

	)

1726 
	#INCA_IP_DMA_DMA_TXPOLL_BSZ2
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 30)

	)

1727 
	#INCA_IP_DMA_DMA_TXPOLL_BSZ1
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 28)

	)

1728 
	#INCA_IP_DMA_DMA_TXPOLL_BSZ0
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 26)

	)

1729 
	#INCA_IP_DMA_DMA_TXPOLL_TXPOLLTIME
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

1732 
	#INCA_IP_DMA_DMA_TXISR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x08C8))

	)

1733 
	#INCA_IP_DMA_DMA_TXISR_RDERRx
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 12)

	)

1734 
	#INCA_IP_DMA_DMA_TXISR_HLDx
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 9)

	)

1735 
	#INCA_IP_DMA_DMA_TXISR_CPTx
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 6)

	)

1736 
	#INCA_IP_DMA_DMA_TXISR_EOPx
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 3)

	)

1737 
	#INCA_IP_DMA_DMA_TXISR_CMDCPTx
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 0)

	)

1740 
	#INCA_IP_DMA_DMA_TXIMR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DMA
+ 0x08CC))

	)

1741 
	#INCA_IP_DMA_DMA_TXIMR_RDERRx
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 12)

	)

1742 
	#INCA_IP_DMA_DMA_TXIMR_HLDx
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 9)

	)

1743 
	#INCA_IP_DMA_DMA_TXIMR_CPTx
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 6)

	)

1744 
	#INCA_IP_DMA_DMA_TXIMR_EOPx
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 3)

	)

1745 
	#INCA_IP_DMA_DMA_TXIMR_CMDCPTx
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 0)

	)

1751 
	#INCA_IP_Debug
 (0xBF106000)

	)

1756 
	#INCA_IP_Debug_MCD_BBS
 ((vﬁ©ûê
u32
*)(
INCA_IP_Debug
+ 0x0000))

	)

1757 
	#INCA_IP_Debug_MCD_BBS_BTP1
 (1 << 19)

	)

1758 
	#INCA_IP_Debug_MCD_BBS_BTP0
 (1 << 18)

	)

1759 
	#INCA_IP_Debug_MCD_BBS_BSP1
 (1 << 17)

	)

1760 
	#INCA_IP_Debug_MCD_BBS_BSP0
 (1 << 16)

	)

1761 
	#INCA_IP_Debug_MCD_BBS_BT5EN
 (1 << 15)

	)

1762 
	#INCA_IP_Debug_MCD_BBS_BT4EN
 (1 << 14)

	)

1763 
	#INCA_IP_Debug_MCD_BBS_BT5
 (1 << 13)

	)

1764 
	#INCA_IP_Debug_MCD_BBS_BT4
 (1 << 12)

	)

1765 
	#INCA_IP_Debug_MCD_BBS_BS5EN
 (1 << 7)

	)

1766 
	#INCA_IP_Debug_MCD_BBS_BS4EN
 (1 << 6)

	)

1767 
	#INCA_IP_Debug_MCD_BBS_BS5
 (1 << 5)

	)

1768 
	#INCA_IP_Debug_MCD_BBS_BS4
 (1 << 4)

	)

1771 
	#INCA_IP_Debug_MCD_MCR
 ((vﬁ©ûê
u32
*)(
INCA_IP_Debug
+ 0x0008))

	)

1772 
	#INCA_IP_Debug_MCD_MCR_MUX5
 (1 << 4)

	)

1773 
	#INCA_IP_Debug_MCD_MCR_MUX4
 (1 << 3)

	)

1774 
	#INCA_IP_Debug_MCD_MCR_MUX1
 (1 << 0)

	)

1780 
	#INCA_IP_TSF
 (0xB8000900)

	)

1785 
	#INCA_IP_TSF_TSF_CONF
 ((vﬁ©ûê
u32
*)(
INCA_IP_TSF
+ 0x0000))

	)

1786 
	#INCA_IP_TSF_TSF_CONF_PWMEN
 (1 << 2)

	)

1787 
	#INCA_IP_TSF_TSF_CONF_LEDEN
 (1 << 1)

	)

1788 
	#INCA_IP_TSF_TSF_CONF_KEYEN
 (1 << 0)

	)

1791 
	#INCA_IP_TSF_KEY_CONF
 ((vﬁ©ûê
u32
*)(
INCA_IP_TSF
+ 0x0004))

	)

1792 
	#INCA_IP_TSF_KEY_CONF_SL
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 0)

	)

1795 
	#INCA_IP_TSF_SREG01
 ((vﬁ©ûê
u32
*)(
INCA_IP_TSF
+ 0x0008))

	)

1796 
	#INCA_IP_TSF_SREG01_RES1x
 (
vÆue
Ë(((–1 << 12Ë- 1Ë& (vÆue)Ë<< 16)

	)

1797 
	#INCA_IP_TSF_SREG01_RES0x
 (
vÆue
Ë(((–1 << 13Ë- 1Ë& (vÆue)Ë<< 0)

	)

1800 
	#INCA_IP_TSF_SREG23
 ((vﬁ©ûê
u32
*)(
INCA_IP_TSF
+ 0x000C))

	)

1801 
	#INCA_IP_TSF_SREG23_RES3x
 (
vÆue
Ë(((–1 << 10Ë- 1Ë& (vÆue)Ë<< 16)

	)

1802 
	#INCA_IP_TSF_SREG23_RES2x
 (
vÆue
Ë(((–1 << 11Ë- 1Ë& (vÆue)Ë<< 0)

	)

1805 
	#INCA_IP_TSF_SREG456
 ((vﬁ©ûê
u32
*)(
INCA_IP_TSF
+ 0x0010))

	)

1806 
	#INCA_IP_TSF_SREG456_RES6x
 (
vÆue
Ë(((–1 << 7Ë- 1Ë& (vÆue)Ë<< 24)

	)

1807 
	#INCA_IP_TSF_SREG456_RES5x
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 16)

	)

1808 
	#INCA_IP_TSF_SREG456_RES4x
 (
vÆue
Ë(((–1 << 9Ë- 1Ë& (vÆue)Ë<< 0)

	)

1811 
	#INCA_IP_TSF_SREG7to12
 ((vﬁ©ûê
u32
*)(
INCA_IP_TSF
+ 0x0014))

	)

1812 
	#INCA_IP_TSF_SREG7to12_RES12x
 (1 << 28)

	)

1813 
	#INCA_IP_TSF_SREG7to12_RES11x
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 24)

	)

1814 
	#INCA_IP_TSF_SREG7to12_RES10x
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 20)

	)

1815 
	#INCA_IP_TSF_SREG7to12_RES9x
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 16)

	)

1816 
	#INCA_IP_TSF_SREG7to12_RES8x
 (
vÆue
Ë(((–1 << 5Ë- 1Ë& (vÆue)Ë<< 8)

	)

1817 
	#INCA_IP_TSF_SREG7to12_RES7x
 (
vÆue
Ë(((–1 << 6Ë- 1Ë& (vÆue)Ë<< 0)

	)

1820 
	#INCA_IP_TSF_LEDMUX_CONF
 ((vﬁ©ûê
u32
*)(
INCA_IP_TSF
+ 0x0018))

	)

1821 
	#INCA_IP_TSF_LEDMUX_CONF_ETL1
 (1 << 25)

	)

1822 
	#INCA_IP_TSF_LEDMUX_CONF_ESTA1
 (1 << 24)

	)

1823 
	#INCA_IP_TSF_LEDMUX_CONF_EDPX1
 (1 << 23)

	)

1824 
	#INCA_IP_TSF_LEDMUX_CONF_EACT1
 (1 << 22)

	)

1825 
	#INCA_IP_TSF_LEDMUX_CONF_ESPD1
 (1 << 21)

	)

1826 
	#INCA_IP_TSF_LEDMUX_CONF_ETL0
 (1 << 20)

	)

1827 
	#INCA_IP_TSF_LEDMUX_CONF_ESTA0
 (1 << 19)

	)

1828 
	#INCA_IP_TSF_LEDMUX_CONF_EDPX0
 (1 << 18)

	)

1829 
	#INCA_IP_TSF_LEDMUX_CONF_EACT0
 (1 << 17)

	)

1830 
	#INCA_IP_TSF_LEDMUX_CONF_ESPD0
 (1 << 16)

	)

1831 
	#INCA_IP_TSF_LEDMUX_CONF_INV
 (1 << 1)

	)

1832 
	#INCA_IP_TSF_LEDMUX_CONF_NCOL
 (1 << 0)

	)

1835 
	#INCA_IP_TSF_LED_REG
 ((vﬁ©ûê
u32
*)(
INCA_IP_TSF
+ 0x001C))

	)

1836 
	#INCA_IP_TSF_LED_REG_Lxy
 (
vÆue
Ë(((–1 << 24Ë- 1Ë& (vÆue)Ë<< 0)

	)

1839 
	#INCA_IP_TSF_PWM12
 ((vﬁ©ûê
u32
*)(
INCA_IP_TSF
+ 0x0020))

	)

1840 
	#INCA_IP_TSF_PWM12_PW2PW1
 (
vÆue
Ë(((–1 << 
NaN
Ë- 1Ë& (vÆue)Ë<< NaN)

	)

1846 
	#INCA_IP_P‹ts
 (0xB8000A00)

	)

1851 
	#INCA_IP_P‹ts_P1_OUT
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x0020))

	)

1852 
	#INCA_IP_P‹ts_P1_OUT_P
(
vÆue
Ë(1 << vÆue)

	)

1856 
	#INCA_IP_P‹ts_P2_OUT
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x0040))

	)

1857 
	#INCA_IP_P‹ts_P2_OUT_P
(
vÆue
Ë(1 << vÆue)

	)

1861 
	#INCA_IP_P‹ts_P1_IN
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x0024))

	)

1862 
	#INCA_IP_P‹ts_P1_IN_P
(
vÆue
Ë(1 << vÆue)

	)

1866 
	#INCA_IP_P‹ts_P2_IN
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x0044))

	)

1867 
	#INCA_IP_P‹ts_P2_IN_P
(
vÆue
Ë(1 << vÆue)

	)

1871 
	#INCA_IP_P‹ts_P1_DIR
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x0028))

	)

1872 
	#INCA_IP_P‹ts_P1_DIR_P‹t1P
(
vÆue
Ë(1 << vÆue)

	)

1874 
	#INCA_IP_P‹ts_P1_DIR_P‹t2Pn
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

1877 
	#INCA_IP_P‹ts_P2_DIR
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x0048))

	)

1878 
	#INCA_IP_P‹ts_P2_DIR_P‹t1P
(
vÆue
Ë(1 << vÆue)

	)

1880 
	#INCA_IP_P‹ts_P2_DIR_P‹t2Pn
 (
vÆue
Ë(((–1 << 16Ë- 1Ë& (vÆue)Ë<< 0)

	)

1884 
	#INCA_IP_P‹ts_P0_ALTSEL
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x000C))

	)

1885 
	#INCA_IP_P‹ts_P0_ALTSEL_P‹t0P
(
vÆue
Ë(1 << vÆue)

	)

1890 
	#INCA_IP_P‹ts_P1_ALTSEL
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x002C))

	)

1891 
	#INCA_IP_P‹ts_P1_ALTSEL_P‹t1P
(
vÆue
Ë(1 << vÆue)

	)

1893 
	#INCA_IP_P‹ts_P1_ALTSEL_P‹t2P
(
vÆue
Ë(1 << vÆue)

	)

1898 
	#INCA_IP_P‹ts_P2_ALTSEL
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x004C))

	)

1899 
	#INCA_IP_P‹ts_P2_ALTSEL_P‹t1P
(
vÆue
Ë(1 << vÆue)

	)

1901 
	#INCA_IP_P‹ts_P2_ALTSEL_P‹t2P
(
vÆue
Ë(1 << vÆue)

	)

1906 
	#INCA_IP_P‹ts_P0_STOFF
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x0010))

	)

1907 
	#INCA_IP_P‹ts_P0_STOFF_P‹t0P
(
vÆue
Ë(1 << vÆue)

	)

1912 
	#INCA_IP_P‹ts_P1_STOFF
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x0030))

	)

1913 
	#INCA_IP_P‹ts_P1_STOFF_P‹t1P
(
vÆue
Ë(1 << vÆue)

	)

1915 
	#INCA_IP_P‹ts_P1_STOFF_P‹t2P
(
vÆue
Ë(1 << vÆue)

	)

1920 
	#INCA_IP_P‹ts_P2_STOFF
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x0050))

	)

1921 
	#INCA_IP_P‹ts_P2_STOFF_P‹t1P
(
vÆue
Ë(1 << vÆue)

	)

1923 
	#INCA_IP_P‹ts_P2_STOFF_P‹t2P
(
vÆue
Ë(1 << vÆue)

	)

1927 
	#INCA_IP_P‹ts_P2_OD
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x0054))

	)

1928 
	#INCA_IP_P‹ts_P2_OD_P‹t2P
(
vÆue
Ë(1 << vÆue)

	)

1932 
	#INCA_IP_P‹ts_P0_PUDEN
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x0018))

	)

1933 
	#INCA_IP_P‹ts_P0_PUDEN_P‹t0P
(
vÆue
Ë(1 << vÆue)

	)

1937 
	#INCA_IP_P‹ts_P2_PUDEN
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x0058))

	)

1938 
	#INCA_IP_P‹ts_P2_PUDEN_P‹t2P
(
vÆue
Ë(1 << vÆue)

	)

1940 
	#INCA_IP_P‹ts_P2_PUDEN_P‹t2P
(
vÆue
Ë(1 << vÆue)

	)

1944 
	#INCA_IP_P‹ts_P0_PUDSEL
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x001C))

	)

1945 
	#INCA_IP_P‹ts_P0_PUDSEL_P‹t0P
(
vÆue
Ë(1 << vÆue)

	)

1949 
	#INCA_IP_P‹ts_P2_PUDSEL
 ((vﬁ©ûê
u32
*)(
INCA_IP_P‹ts
+ 0x005C))

	)

1950 
	#INCA_IP_P‹ts_P2_PUDSEL_P‹t2P
(
vÆue
Ë(1 << vÆue)

	)

1952 
	#INCA_IP_P‹ts_P2_PUDSEL_P‹t2P
(
vÆue
Ë(1 << vÆue)

	)

1959 
	#INCA_IP_DES_3DES
 (0xB8000800)

	)

1964 
	#INCA_IP_DES_3DES_DES_IHR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DES_3DES
+ 0x0000))

	)

1965 
	#INCA_IP_DES_3DES_DES_IHR_IH
(
vÆue
Ë(1 << vÆue)

	)

1969 
	#INCA_IP_DES_3DES_DES_ILR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DES_3DES
+ 0x0004))

	)

1970 
	#INCA_IP_DES_3DES_DES_ILR_IL
(
vÆue
Ë(1 << vÆue)

	)

1974 
	#INCA_IP_DES_3DES_DES_K1HR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DES_3DES
+ 0x0008))

	)

1975 
	#INCA_IP_DES_3DES_DES_K1HR_K1H
(
vÆue
Ë(1 << vÆue)

	)

1979 
	#INCA_IP_DES_3DES_DES_K1LR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DES_3DES
+ 0x000C))

	)

1980 
	#INCA_IP_DES_3DES_DES_K1LR_K1L
(
vÆue
Ë(1 << vÆue)

	)

1984 
	#INCA_IP_DES_3DES_DES_K2HR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DES_3DES
+ 0x0010))

	)

1985 
	#INCA_IP_DES_3DES_DES_K2HR_K2H
(
vÆue
Ë(1 << vÆue)

	)

1989 
	#INCA_IP_DES_3DES_DES_K2LR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DES_3DES
+ 0x0014))

	)

1990 
	#INCA_IP_DES_3DES_DES_K2LR_K2L
(
vÆue
Ë(1 << vÆue)

	)

1994 
	#INCA_IP_DES_3DES_DES_K3HR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DES_3DES
+ 0x0018))

	)

1995 
	#INCA_IP_DES_3DES_DES_K3HR_K3H
(
vÆue
Ë(1 << vÆue)

	)

1999 
	#INCA_IP_DES_3DES_DES_K3LR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DES_3DES
+ 0x001C))

	)

2000 
	#INCA_IP_DES_3DES_DES_K3LR_K3L
(
vÆue
Ë(1 << vÆue)

	)

2004 
	#INCA_IP_DES_3DES_DES_IVHR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DES_3DES
+ 0x0020))

	)

2005 
	#INCA_IP_DES_3DES_DES_IVHR_IVH
(
vÆue
Ë(1 << vÆue)

	)

2009 
	#INCA_IP_DES_3DES_DES_IVLR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DES_3DES
+ 0x0024))

	)

2010 
	#INCA_IP_DES_3DES_DES_IVLR_IVL
(
vÆue
Ë(1 << vÆue)

	)

2014 
	#INCA_IP_DES_3DES_DES_CONTROLR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DES_3DES
+ 0x0028))

	)

2015 
	#INCA_IP_DES_3DES_DES_CONTROLR_KRE
 (1 << 31)

	)

2016 
	#INCA_IP_DES_3DES_DES_CONTROLR_DAU
 (1 << 16)

	)

2017 
	#INCA_IP_DES_3DES_DES_CONTROLR_F
(
vÆue
Ë(1 << vÆue)

	)

2019 
	#INCA_IP_DES_3DES_DES_CONTROLR_O
(
vÆue
Ë(1 << vÆue)

	)

2021 
	#INCA_IP_DES_3DES_DES_CONTROLR_GO
 (1 << 8)

	)

2022 
	#INCA_IP_DES_3DES_DES_CONTROLR_STP
 (1 << 7)

	)

2023 
	#INCA_IP_DES_3DES_DES_CONTROLR_IEN
 (1 << 6)

	)

2024 
	#INCA_IP_DES_3DES_DES_CONTROLR_BUS
 (1 << 5)

	)

2025 
	#INCA_IP_DES_3DES_DES_CONTROLR_SM
 (1 << 4)

	)

2026 
	#INCA_IP_DES_3DES_DES_CONTROLR_E_D
 (1 << 3)

	)

2027 
	#INCA_IP_DES_3DES_DES_CONTROLR_M
(
vÆue
Ë(1 << vÆue)

	)

2031 
	#INCA_IP_DES_3DES_DES_OHR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DES_3DES
+ 0x002C))

	)

2032 
	#INCA_IP_DES_3DES_DES_OHR_OH
(
vÆue
Ë(1 << vÆue)

	)

2036 
	#INCA_IP_DES_3DES_DES_OLR
 ((vﬁ©ûê
u32
*)(
INCA_IP_DES_3DES
+ 0x0030))

	)

2037 
	#INCA_IP_DES_3DES_DES_OLR_OL
(
vÆue
Ë(1 << vÆue)

	)

2044 
	#INCA_IP_AES
 (0xB8000880)

	)

2049 
	#INCA_IP_AES_AES_ID3R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2050 
	#INCA_IP_AES_AES_ID3R_I
(
vÆue
Ë(1 << vÆue)

	)

2054 
	#INCA_IP_AES_AES_ID2R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2055 
	#INCA_IP_AES_AES_ID2R_I
(
vÆue
Ë(1 << vÆue)

	)

2059 
	#INCA_IP_AES_AES_ID1R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2060 
	#INCA_IP_AES_AES_ID1R_I
(
vÆue
Ë(1 << vÆue)

	)

2064 
	#INCA_IP_AES_AES_ID0R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2065 
	#INCA_IP_AES_AES_ID0R_I
(
vÆue
Ë(1 << vÆue)

	)

2069 
	#INCA_IP_AES_AES_OD3R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2070 
	#INCA_IP_AES_AES_OD3R_O
(
vÆue
Ë(1 << vÆue)

	)

2074 
	#INCA_IP_AES_AES_OD2R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2075 
	#INCA_IP_AES_AES_OD2R_O
(
vÆue
Ë(1 << vÆue)

	)

2079 
	#INCA_IP_AES_AES_OD1R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2080 
	#INCA_IP_AES_AES_OD1R_O
(
vÆue
Ë(1 << vÆue)

	)

2084 
	#INCA_IP_AES_AES_OD0R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2085 
	#INCA_IP_AES_AES_OD0R_O
(
vÆue
Ë(1 << vÆue)

	)

2089 
	#INCA_IP_AES_AES_K7R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2090 
	#INCA_IP_AES_AES_K7R_K
(
vÆue
Ë(1 << vÆue)

	)

2094 
	#INCA_IP_AES_AES_K6R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2095 
	#INCA_IP_AES_AES_K6R_K
(
vÆue
Ë(1 << vÆue)

	)

2099 
	#INCA_IP_AES_AES_K5R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2100 
	#INCA_IP_AES_AES_K5R_K
(
vÆue
Ë(1 << vÆue)

	)

2104 
	#INCA_IP_AES_AES_K4R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2105 
	#INCA_IP_AES_AES_K4R_K
(
vÆue
Ë(1 << vÆue)

	)

2109 
	#INCA_IP_AES_AES_K3R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2110 
	#INCA_IP_AES_AES_K3R_K
(
vÆue
Ë(1 << vÆue)

	)

2114 
	#INCA_IP_AES_AES_K2R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2115 
	#INCA_IP_AES_AES_K2R_K
(
vÆue
Ë(1 << vÆue)

	)

2119 
	#INCA_IP_AES_AES_K1R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2120 
	#INCA_IP_AES_AES_K1R_K
(
vÆue
Ë(1 << vÆue)

	)

2124 
	#INCA_IP_AES_AES_K0R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2125 
	#INCA_IP_AES_AES_K0R_K
(
vÆue
Ë(1 << vÆue)

	)

2129 
	#INCA_IP_AES_AES_IV3R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2130 
	#INCA_IP_AES_AES_IV3R_IV
(
vÆue
Ë(1 << vÆue)

	)

2134 
	#INCA_IP_AES_AES_IV2R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2135 
	#INCA_IP_AES_AES_IV2R_IV
(
vÆue
Ë(1 << vÆue)

	)

2139 
	#INCA_IP_AES_AES_IV1R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2140 
	#INCA_IP_AES_AES_IV1R_IV
(
vÆue
Ë(1 << vÆue)

	)

2144 
	#INCA_IP_AES_AES_IV0R
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2145 
	#INCA_IP_AES_AES_IV0R_IV
 (
vÆue
Ë(((–1 << 32Ë- 1Ë&(vÆue)Ë<< 0)

	)

2148 
	#INCA_IP_AES_AES_CONTROLR
 ((vﬁ©ûê
u32
*)(
INCA_IP_AES
+ 0x0000))

	)

2149 
	#INCA_IP_AES_AES_CONTROLR_KRE
 (1 << 31)

	)

2150 
	#INCA_IP_AES_AES_CONTROLR_DAU
 (1 << 16)

	)

2151 
	#INCA_IP_AES_AES_CONTROLR_PNK
 (1 << 15)

	)

2152 
	#INCA_IP_AES_AES_CONTROLR_F
(
vÆue
Ë(1 << vÆue)

	)

2154 
	#INCA_IP_AES_AES_CONTROLR_O
(
vÆue
Ë(1 << vÆue)

	)

2156 
	#INCA_IP_AES_AES_CONTROLR_GO
 (1 << 8)

	)

2157 
	#INCA_IP_AES_AES_CONTROLR_STP
 (1 << 7)

	)

2158 
	#INCA_IP_AES_AES_CONTROLR_IEN
 (1 << 6)

	)

2159 
	#INCA_IP_AES_AES_CONTROLR_BUS
 (1 << 5)

	)

2160 
	#INCA_IP_AES_AES_CONTROLR_SM
 (1 << 4)

	)

2161 
	#INCA_IP_AES_AES_CONTROLR_E_D
 (1 << 3)

	)

2162 
	#INCA_IP_AES_AES_CONTROLR_KV
 (1 << 2)

	)

2163 
	#INCA_IP_AES_AES_CONTROLR_K
(
vÆue
Ë(1 << vÆue)

	)

2170 
	#INCA_IP_IIC
 (0xB8000700)

	)

2175 
	#INCA_IP_IIC_IIC_PISEL
 ((vﬁ©ûê
u32
*)(
INCA_IP_IIC
+ 0x0004))

	)

2176 
	#INCA_IP_IIC_IIC_PISEL_SDAIS
(
vÆue
Ë(1 << vÆue)

	)

2178 
	#INCA_IP_IIC_IIC_PISEL_SCLIS
(
vÆue
Ë(1 << vÆue)

	)

2182 
	#INCA_IP_IIC_IIC_CLC
 ((vﬁ©ûê
u32
*)(
INCA_IP_IIC
+ 0x0000))

	)

2183 
	#INCA_IP_IIC_IIC_CLC_RMC
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 8)

	)

2184 
	#INCA_IP_IIC_IIC_CLC_DISS
 (1 << 1)

	)

2185 
	#INCA_IP_IIC_IIC_CLC_DISR
 (1 << 0)

	)

2188 
	#INCA_IP_IIC_IIC_SYSCON_0
 ((vﬁ©ûê
u32
*)(
INCA_IP_IIC
+ 0x0010))

	)

2189 
	#INCA_IP_IIC_IIC_SYSCON_0_WMEN
 (1 << 31)

	)

2190 
	#INCA_IP_IIC_IIC_SYSCON_0_CI
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 26)

	)

2191 
	#INCA_IP_IIC_IIC_SYSCON_0_STP
 (1 << 25)

	)

2192 
	#INCA_IP_IIC_IIC_SYSCON_0_IGE
 (1 << 24)

	)

2193 
	#INCA_IP_IIC_IIC_SYSCON_0_TRX
 (1 << 23)

	)

2194 
	#INCA_IP_IIC_IIC_SYSCON_0_INT
 (1 << 22)

	)

2195 
	#INCA_IP_IIC_IIC_SYSCON_0_ACKDIS
 (1 << 21)

	)

2196 
	#INCA_IP_IIC_IIC_SYSCON_0_BUM
 (1 << 20)

	)

2197 
	#INCA_IP_IIC_IIC_SYSCON_0_MOD
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 18)

	)

2198 
	#INCA_IP_IIC_IIC_SYSCON_0_RSC
 (1 << 17)

	)

2199 
	#INCA_IP_IIC_IIC_SYSCON_0_M10
 (1 << 16)

	)

2200 
	#INCA_IP_IIC_IIC_SYSCON_0_RMEN
 (1 << 15)

	)

2201 
	#INCA_IP_IIC_IIC_SYSCON_0_CO
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 8)

	)

2202 
	#INCA_IP_IIC_IIC_SYSCON_0_IRQE
 (1 << 7)

	)

2203 
	#INCA_IP_IIC_IIC_SYSCON_0_IRQP
 (1 << 6)

	)

2204 
	#INCA_IP_IIC_IIC_SYSCON_0_IRQD
 (1 << 5)

	)

2205 
	#INCA_IP_IIC_IIC_SYSCON_0_BB
 (1 << 4)

	)

2206 
	#INCA_IP_IIC_IIC_SYSCON_0_LRB
 (1 << 3)

	)

2207 
	#INCA_IP_IIC_IIC_SYSCON_0_SLA
 (1 << 2)

	)

2208 
	#INCA_IP_IIC_IIC_SYSCON_0_AL
 (1 << 1)

	)

2209 
	#INCA_IP_IIC_IIC_SYSCON_0_ADR
 (1 << 0)

	)

2212 
	#INCA_IP_IIC_IIC_SYSCON_1
 ((vﬁ©ûê
u32
*)(
INCA_IP_IIC
+ 0x0010))

	)

2213 
	#INCA_IP_IIC_IIC_SYSCON_1_RM
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 24)

	)

2214 
	#INCA_IP_IIC_IIC_SYSCON_1_TRX
 (1 << 23)

	)

2215 
	#INCA_IP_IIC_IIC_SYSCON_1_INT
 (1 << 22)

	)

2216 
	#INCA_IP_IIC_IIC_SYSCON_1_ACKDIS
 (1 << 21)

	)

2217 
	#INCA_IP_IIC_IIC_SYSCON_1_BUM
 (1 << 20)

	)

2218 
	#INCA_IP_IIC_IIC_SYSCON_1_MOD
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 18)

	)

2219 
	#INCA_IP_IIC_IIC_SYSCON_1_RSC
 (1 << 17)

	)

2220 
	#INCA_IP_IIC_IIC_SYSCON_1_M10
 (1 << 16)

	)

2221 
	#INCA_IP_IIC_IIC_SYSCON_1_RMEN
 (1 << 15)

	)

2222 
	#INCA_IP_IIC_IIC_SYSCON_1_CO
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 8)

	)

2223 
	#INCA_IP_IIC_IIC_SYSCON_1_IRQE
 (1 << 7)

	)

2224 
	#INCA_IP_IIC_IIC_SYSCON_1_IRQP
 (1 << 6)

	)

2225 
	#INCA_IP_IIC_IIC_SYSCON_1_IRQD
 (1 << 5)

	)

2226 
	#INCA_IP_IIC_IIC_SYSCON_1_BB
 (1 << 4)

	)

2227 
	#INCA_IP_IIC_IIC_SYSCON_1_LRB
 (1 << 3)

	)

2228 
	#INCA_IP_IIC_IIC_SYSCON_1_SLA
 (1 << 2)

	)

2229 
	#INCA_IP_IIC_IIC_SYSCON_1_AL
 (1 << 1)

	)

2230 
	#INCA_IP_IIC_IIC_SYSCON_1_ADR
 (1 << 0)

	)

2233 
	#INCA_IP_IIC_IIC_SYSCON_2
 ((vﬁ©ûê
u32
*)(
INCA_IP_IIC
+ 0x0010))

	)

2234 
	#INCA_IP_IIC_IIC_SYSCON_2_WMEN
 (1 << 31)

	)

2235 
	#INCA_IP_IIC_IIC_SYSCON_2_CI
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 26)

	)

2236 
	#INCA_IP_IIC_IIC_SYSCON_2_STP
 (1 << 25)

	)

2237 
	#INCA_IP_IIC_IIC_SYSCON_2_IGE
 (1 << 24)

	)

2238 
	#INCA_IP_IIC_IIC_SYSCON_2_TRX
 (1 << 23)

	)

2239 
	#INCA_IP_IIC_IIC_SYSCON_2_INT
 (1 << 22)

	)

2240 
	#INCA_IP_IIC_IIC_SYSCON_2_ACKDIS
 (1 << 21)

	)

2241 
	#INCA_IP_IIC_IIC_SYSCON_2_BUM
 (1 << 20)

	)

2242 
	#INCA_IP_IIC_IIC_SYSCON_2_MOD
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 18)

	)

2243 
	#INCA_IP_IIC_IIC_SYSCON_2_RSC
 (1 << 17)

	)

2244 
	#INCA_IP_IIC_IIC_SYSCON_2_M10
 (1 << 16)

	)

2245 
	#INCA_IP_IIC_IIC_SYSCON_2_WM
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 8)

	)

2246 
	#INCA_IP_IIC_IIC_SYSCON_2_IRQE
 (1 << 7)

	)

2247 
	#INCA_IP_IIC_IIC_SYSCON_2_IRQP
 (1 << 6)

	)

2248 
	#INCA_IP_IIC_IIC_SYSCON_2_IRQD
 (1 << 5)

	)

2249 
	#INCA_IP_IIC_IIC_SYSCON_2_BB
 (1 << 4)

	)

2250 
	#INCA_IP_IIC_IIC_SYSCON_2_LRB
 (1 << 3)

	)

2251 
	#INCA_IP_IIC_IIC_SYSCON_2_SLA
 (1 << 2)

	)

2252 
	#INCA_IP_IIC_IIC_SYSCON_2_AL
 (1 << 1)

	)

2253 
	#INCA_IP_IIC_IIC_SYSCON_2_ADR
 (1 << 0)

	)

2257 
	#INCA_IP_IIC_IIC_WHBSYSCON
 ((vﬁ©ûê
u32
*)(
INCA_IP_IIC
+ 0x0020))

	)

2258 
	#INCA_IP_IIC_IIC_WHBSYSCON_CLRWMEN
 (1 << 31)

	)

2259 
	#INCA_IP_IIC_IIC_WHBSYSCON_SETWMEN
 (1 << 30)

	)

2260 
	#INCA_IP_IIC_IIC_WHBSYSCON_SETSTP
 (1 << 26)

	)

2261 
	#INCA_IP_IIC_IIC_WHBSYSCON_CLRSTP
 (1 << 25)

	)

2262 
	#INCA_IP_IIC_IIC_WHBSYSCON_SETTRX
 (1 << 24)

	)

2263 
	#INCA_IP_IIC_IIC_WHBSYSCON_CLRTRX
 (1 << 23)

	)

2264 
	#INCA_IP_IIC_IIC_WHBSYSCON_SETACKDIS
 (1 << 22)

	)

2265 
	#INCA_IP_IIC_IIC_WHBSYSCON_CLRACKDIS
 (1 << 21)

	)

2266 
	#INCA_IP_IIC_IIC_WHBSYSCON_SETBUM
 (1 << 20)

	)

2267 
	#INCA_IP_IIC_IIC_WHBSYSCON_CLRBUM
 (1 << 19)

	)

2268 
	#INCA_IP_IIC_IIC_WHBSYSCON_SETRSC
 (1 << 17)

	)

2269 
	#INCA_IP_IIC_IIC_WHBSYSCON_CLRRSC
 (1 << 16)

	)

2270 
	#INCA_IP_IIC_IIC_WHBSYSCON_SETRMEN
 (1 << 15)

	)

2271 
	#INCA_IP_IIC_IIC_WHBSYSCON_CLRRMEN
 (1 << 14)

	)

2272 
	#INCA_IP_IIC_IIC_WHBSYSCON_SETIRQE
 (1 << 10)

	)

2273 
	#INCA_IP_IIC_IIC_WHBSYSCON_SETIRQP
 (1 << 9)

	)

2274 
	#INCA_IP_IIC_IIC_WHBSYSCON_SETIRQD
 (1 << 8)

	)

2275 
	#INCA_IP_IIC_IIC_WHBSYSCON_CLRIRQE
 (1 << 7)

	)

2276 
	#INCA_IP_IIC_IIC_WHBSYSCON_CLRIRQP
 (1 << 6)

	)

2277 
	#INCA_IP_IIC_IIC_WHBSYSCON_CLRIRQD
 (1 << 5)

	)

2278 
	#INCA_IP_IIC_IIC_WHBSYSCON_SETAL
 (1 << 2)

	)

2279 
	#INCA_IP_IIC_IIC_WHBSYSCON_CLRAL
 (1 << 1)

	)

2282 
	#INCA_IP_IIC_IIC_BUSCON_0
 ((vﬁ©ûê
u32
*)(
INCA_IP_IIC
+ 0x0014))

	)

2283 
	#INCA_IP_IIC_IIC_BUSCON_0_BRPMOD
 (1 << 31)

	)

2284 
	#INCA_IP_IIC_IIC_BUSCON_0_PREDIV
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 29)

	)

2285 
	#INCA_IP_IIC_IIC_BUSCON_0_ICA9_0
 (
vÆue
Ë(((–1 << 10Ë- 1Ë& (vÆue)Ë<< 16)

	)

2286 
	#INCA_IP_IIC_IIC_BUSCON_0_BRP
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 8)

	)

2287 
	#INCA_IP_IIC_IIC_BUSCON_0_SCLEN
(
vÆue
Ë(1 << vÆue)

	)

2289 
	#INCA_IP_IIC_IIC_BUSCON_0_SDAEN
(
vÆue
Ë(1 << vÆue)

	)

2293 
	#INCA_IP_IIC_IIC_BUSCON_1
 ((vﬁ©ûê
u32
*)(
INCA_IP_IIC
+ 0x0014))

	)

2294 
	#INCA_IP_IIC_IIC_BUSCON_1_BRPMOD
 (1 << 31)

	)

2295 
	#INCA_IP_IIC_IIC_BUSCON_1_PREDIV
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 29)

	)

2296 
	#INCA_IP_IIC_IIC_BUSCON_1_ICA7_1
 (
vÆue
Ë(((–1 << 7Ë- 1Ë& (vÆue)Ë<< 17)

	)

2297 
	#INCA_IP_IIC_IIC_BUSCON_1_BRP
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 8)

	)

2298 
	#INCA_IP_IIC_IIC_BUSCON_1_SCLEN
(
vÆue
Ë(1 << vÆue)

	)

2300 
	#INCA_IP_IIC_IIC_BUSCON_1_SDAEN
(
vÆue
Ë(1 << vÆue)

	)

2304 
	#INCA_IP_IIC_IIC_RTB
 ((vﬁ©ûê
u32
*)(
INCA_IP_IIC
+ 0x0018))

	)

2305 
	#INCA_IP_IIC_IIC_RTB_RTB
(
vÆue
Ë(1 << vÆue)

	)

2312 
	#INCA_IP_FB
 (0xBF880000)

	)

2317 
	#INCA_IP_FB_FB_ERRCAUSE
 ((vﬁ©ûê
u32
*)(
INCA_IP_FB
+ 0x0100))

	)

2318 
	#INCA_IP_FB_FB_ERRCAUSE_ERR
 (1 << 31)

	)

2319 
	#INCA_IP_FB_FB_ERRCAUSE_PORT
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 16)

	)

2320 
	#INCA_IP_FB_FB_ERRCAUSE_CAUSE
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 0)

	)

2323 
	#INCA_IP_FB_FB_ERRADDR
 ((vﬁ©ûê
u32
*)(
INCA_IP_FB
+ 0x0108))

	)

2324 
	#INCA_IP_FB_FB_ERRADDR_ADDR


	)

2327 
	#INCA_IP_FB_FB_CFG
 ((vﬁ©ûê
u32
*)(
INCA_IP_FB
+ 0x0800))

	)

2328 
	#INCA_IP_FB_FB_CFG_SVM
 (1 << 0)

	)

2334 
	#INCA_IP_SRAM
 (0xBF980000)

	)

2339 
	#INCA_IP_SRAM_SRAM_SIZE
 ((vﬁ©ûê
u32
*)(
INCA_IP_SRAM
+ 0x0800))

	)

2340 
	#INCA_IP_SRAM_SRAM_SIZE_SIZE
 (
vÆue
Ë(((–1 << 23Ë- 1Ë& (vÆue)Ë<< 0)

	)

2346 
	#INCA_IP_BIU
 (0xBFA80000)

	)

2351 
	#INCA_IP_BIU_BIU_ID
 ((vﬁ©ûê
u32
*)(
INCA_IP_BIU
+ 0x0000))

	)

2352 
	#INCA_IP_BIU_BIU_ID_ARCH
 (1 << 16)

	)

2353 
	#INCA_IP_BIU_BIU_ID_ID
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 8)

	)

2354 
	#INCA_IP_BIU_BIU_ID_REV
 (
vÆue
Ë(((–1 << 8Ë- 1Ë& (vÆue)Ë<< 0)

	)

2357 
	#INCA_IP_BIU_BIU_ERRCAUSE
 ((vﬁ©ûê
u32
*)(
INCA_IP_BIU
+ 0x0100))

	)

2358 
	#INCA_IP_BIU_BIU_ERRCAUSE_ERR
 (1 << 31)

	)

2359 
	#INCA_IP_BIU_BIU_ERRCAUSE_PORT
 (
vÆue
Ë(((–1 << 4Ë- 1Ë& (vÆue)Ë<< 16)

	)

2360 
	#INCA_IP_BIU_BIU_ERRCAUSE_CAUSE
 (
vÆue
Ë(((–1 << 2Ë- 1Ë& (vÆue)Ë<< 0)

	)

2363 
	#INCA_IP_BIU_BIU_ERRADDR
 ((vﬁ©ûê
u32
*)(
INCA_IP_BIU
+ 0x0108))

	)

2364 
	#INCA_IP_BIU_BIU_ERRADDR_ADDR


	)

2370 
	#INCA_IP_ICU
 (0xBF101000)

	)

2375 
	#INCA_IP_ICU_IM0_ISR
 ((vﬁ©ûê
u32
*)(
INCA_IP_ICU
+ 0x0000))

	)

2376 
	#INCA_IP_ICU_IM0_ISR_IR
(
vÆue
Ë(1 << vÆue)

	)

2380 
	#INCA_IP_ICU_IM1_ISR
 ((vﬁ©ûê
u32
*)(
INCA_IP_ICU
+ 0x0200))

	)

2381 
	#INCA_IP_ICU_IM1_ISR_IR
(
vÆue
Ë(1 << vÆue)

	)

2385 
	#INCA_IP_ICU_IM2_ISR
 ((vﬁ©ûê
u32
*)(
INCA_IP_ICU
+ 0x0400))

	)

2386 
	#INCA_IP_ICU_IM2_ISR_IR
(
vÆue
Ë(1 << vÆue)

	)

2390 
	#INCA_IP_ICU_IM0_IER
 ((vﬁ©ûê
u32
*)(
INCA_IP_ICU
+ 0x0008))

	)

2391 
	#INCA_IP_ICU_IM0_IER_IR
(
vÆue
Ë(1 << vÆue)

	)

2395 
	#INCA_IP_ICU_IM1_IER
 ((vﬁ©ûê
u32
*)(
INCA_IP_ICU
+ 0x0208))

	)

2396 
	#INCA_IP_ICU_IM1_IER_IR
(
vÆue
Ë(1 << vÆue)

	)

2400 
	#INCA_IP_ICU_IM2_IER
 ((vﬁ©ûê
u32
*)(
INCA_IP_ICU
+ 0x0408))

	)

2401 
	#INCA_IP_ICU_IM2_IER_IR
(
vÆue
Ë(1 << vÆue)

	)

2405 
	#INCA_IP_ICU_IM0_IOSR
 ((vﬁ©ûê
u32
*)(
INCA_IP_ICU
+ 0x0010))

	)

2406 
	#INCA_IP_ICU_IM0_IOSR_IR
(
vÆue
Ë(1 << vÆue)

	)

2410 
	#INCA_IP_ICU_IM1_IOSR
 ((vﬁ©ûê
u32
*)(
INCA_IP_ICU
+ 0x0210))

	)

2411 
	#INCA_IP_ICU_IM1_IOSR_IR
(
vÆue
Ë(1 << vÆue)

	)

2415 
	#INCA_IP_ICU_IM2_IOSR
 ((vﬁ©ûê
u32
*)(
INCA_IP_ICU
+ 0x0410))

	)

2416 
	#INCA_IP_ICU_IM2_IOSR_IR
(
vÆue
Ë(1 << vÆue)

	)

2420 
	#INCA_IP_ICU_IM0_IRSR
 ((vﬁ©ûê
u32
*)(
INCA_IP_ICU
+ 0x0018))

	)

2421 
	#INCA_IP_ICU_IM0_IRSR_IR
(
vÆue
Ë(1 << vÆue)

	)

2425 
	#INCA_IP_ICU_IM1_IRSR
 ((vﬁ©ûê
u32
*)(
INCA_IP_ICU
+ 0x0218))

	)

2426 
	#INCA_IP_ICU_IM1_IRSR_IR
(
vÆue
Ë(1 << vÆue)

	)

2430 
	#INCA_IP_ICU_IM2_IRSR
 ((vﬁ©ûê
u32
*)(
INCA_IP_ICU
+ 0x0418))

	)

2431 
	#INCA_IP_ICU_IM2_IRSR_IR
(
vÆue
Ë(1 << vÆue)

	)

2435 
	#INCA_IP_ICU_ICU_EICR
 ((vﬁ©ûê
u32
*)(
INCA_IP_ICU
+ 0x0B00))

	)

2436 
	#INCA_IP_ICU_ICU_EICR_EII5
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 20)

	)

2437 
	#INCA_IP_ICU_ICU_EICR_EII4
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 16)

	)

2438 
	#INCA_IP_ICU_ICU_EICR_EII3
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 12)

	)

2439 
	#INCA_IP_ICU_ICU_EICR_EII2
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 8)

	)

2440 
	#INCA_IP_ICU_ICU_EICR_EII1
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 4)

	)

2441 
	#INCA_IP_ICU_ICU_EICR_EII0
 (
vÆue
Ë(((–1 << 3Ë- 1Ë& (vÆue)Ë<< 0)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/io.h

11 #i‚de‡
_ASM_IO_H


12 
	#_ASM_IO_H


	)

14 
	~<löux/c⁄fig.h
>

16 
	~<löux/∑gem≠.h
>

18 
	~<asm/addr•a˚.h
>

19 
	~<asm/byã‹dî.h
>

24 #unde‡
CONF_SLOWDOWN_IO


30 #i‡
deföed
(
CONFIG_SWAP_IO_SPACE
Ë&& deföed(
__MIPSEB__
)

32 
	#__ioswab8
(
x
Ë(x)

	)

33 
	#__ioswab16
(
x
Ë
	`swab16
(x)

	)

34 
	#__ioswab32
(
x
Ë
	`swab32
(x)

	)

38 
	#__ioswab8
(
x
Ë(x)

	)

39 
	#__ioswab16
(
x
Ë(x)

	)

40 
	#__ioswab32
(
x
Ë(x)

	)

74 
mùs_io_p‹t_ba£
;

88 
	#__SLOW_DOWN_IO
 \

89 
__asm__
 
	`__vﬁ©ûe__
( \

91 : : "r" (
mùs_io_p‹t_ba£
));

	)

93 #ifde‡
CONF_SLOWDOWN_IO


94 #ifde‡
REALLY_SLOW_IO


95 
	#SLOW_DOWN_IO
 { 
__SLOW_DOWN_IO
; __SLOW_DOWN_IO; __SLOW_DOWN_IO; __SLOW_DOWN_IO; }

	)

97 
	#SLOW_DOWN_IO
 
__SLOW_DOWN_IO


	)

100 
	#SLOW_DOWN_IO


	)

107 
ölöe
 
	$vút_to_phys
(vﬁ©ûê* 
addªss
)

109  
	`PHYSADDR
(
addªss
);

110 
	}
}

112 
ölöe
 * 
	$phys_to_vút
(
addªss
)

114  (*)
	`KSEG0ADDR
(
addªss
);

115 
	}
}

120 
ölöe
 
	$vút_to_bus
(vﬁ©ûê* 
addªss
)

122  
	`PHYSADDR
(
addªss
);

123 
	}
}

125 
ölöe
 * 
	$bus_to_vút
(
addªss
)

127  (*)
	`KSEG0ADDR
(
addªss
);

128 
	}
}

134 
iß_¶Ÿ_off£t
;

136 * 
__i‹em≠
(
off£t
, 
size
, 
Êags
);

139 
ölöe
 *
	$i‹em≠
(
off£t
, 
size
)

141  
	`__i‹em≠
(
off£t
, 
size
, 
_CACHE_UNCACHED
);

142 
	}
}

144 
ölöe
 *
	$i‹em≠_noˇche
(
off£t
, 
size
)

146  
	`__i‹em≠
(
off£t
, 
size
, 
_CACHE_UNCACHED
);

147 
	}
}

149 
iounm≠
(*
addr
);

157 
	#ªadb
(
addr
Ë(*(vﬁ©ûê*)◊ddr))

	)

158 
	#ªadw
(
addr
Ë
	`__ioswab16
((*(vﬁ©ûê*)◊ddr)))

	)

159 
	#ªadl
(
addr
Ë
	`__ioswab32
((*(vﬁ©ûê*)◊ddr)))

	)

160 
	#__øw_ªadb
 
ªadb


	)

161 
	#__øw_ªadw
 
ªadw


	)

162 
	#__øw_ªadl
 
ªadl


	)

164 
	#wrôeb
(
b
,
addr
Ë(*(vﬁ©ûê*)◊ddr)Ë(b)

	)

165 
	#wrôew
(
b
,
addr
Ë(*(vﬁ©ûê*)◊ddr)Ë(
	`__ioswab16
(b))

	)

166 
	#wrôñ
(
b
,
addr
Ë(*(vﬁ©ûê*)◊ddr)Ë(
	`__ioswab32
(b))

	)

167 
	#__øw_wrôeb
 
wrôeb


	)

168 
	#__øw_wrôew
 
wrôew


	)

169 
	#__øw_wrôñ
 
wrôñ


	)

171 
	#mem£t_io
(
a
,
b
,
c
Ë
	`mem£t
((*)◊),(b),(c))

	)

172 
	#mem˝y_‰omio
(
a
,
b
,
c
Ë
	`mem˝y
(◊),(*)(b),(c))

	)

173 
	#mem˝y_toio
(
a
,
b
,
c
Ë
	`mem˝y
((*)◊),(b),(c))

	)

185 
	#__ISA_IO_ba£
 ((*)(
PAGE_OFFSET
))

	)

187 
	#iß_ªadb
(
a
Ë
	`ªadb
◊)

	)

188 
	#iß_ªadw
(
a
Ë
	`ªadw
◊)

	)

189 
	#iß_ªadl
(
a
Ë
	`ªadl
◊)

	)

190 
	#iß_wrôeb
(
b
,
a
Ë
	`wrôeb
(b,a)

	)

191 
	#iß_wrôew
(
w
,
a
Ë
	`wrôew
(w,a)

	)

192 
	#iß_wrôñ
(
l
,
a
Ë
	`wrôñ
÷,a)

	)

194 
	#iß_mem£t_io
(
a
,
b
,
c
Ë
	`mem£t_io
(◊),(b),(c))

	)

195 
	#iß_mem˝y_‰omio
(
a
,
b
,
c
Ë
	`mem˝y_‰omio
(◊),(b),(c))

	)

196 
	#iß_mem˝y_toio
(
a
,
b
,
c
Ë
	`mem˝y_toio
(◊),(b),(c))

	)

202 
	#ëh_io_c›y_™d_sum
(
skb
,
§c
,
Àn
,
unu£d
Ë
	`mem˝y_‰omio
((skb)->
d©a
,(§c),÷í))

	)

203 
	#iß_ëh_io_c›y_™d_sum
(
a
,
b
,
c
,
d
Ë
	`ëh_c›y_™d_sum
(◊),(b),(c),(d))

	)

205 
ölöe
 
	$check_sig«tuª
(
io_addr
,

206 c⁄° *
sig«tuª
, 
Àngth
)

208 
ªtvÆ
 = 0;

210 i‡(
	`ªadb
(
io_addr
Ë!*
sig«tuª
)

211 
out
;

212 
io_addr
++;

213 
sig«tuª
++;

214 
Àngth
--;

215 } 
Àngth
);

216 
ªtvÆ
 = 1;

217 
out
:

218  
ªtvÆ
;

219 
	}
}

220 
	#iß_check_sig«tuª
(
io
, 
s
, 
l
Ë
	`check_sig«tuª
(
i
,s,l)

	)

226 
	#__OUT1
(
s
) \

227 
ölöe
 
__out
##
	`s
(
vÆue
, 
p‹t
Ë{

	)

229 
	#__OUT2
(
m
) \

230 
__asm__
 
	`__vﬁ©ûe__
 ("s" #m "\t%0,%1(%2)"

	)

232 
	#__OUT
(
m
,
s
,
w
) \

233 
	`__OUT1
(
s
Ë
	`__OUT2
(
m
Ë: : "r" (
__ioswab
##
	`w
(
vÆue
)), "i" (0), "r" (
mùs_io_p‹t_ba£
+
p‹t
)); } \

234 
	`__OUT1
(
s
##
c
Ë
	`__OUT2
(
m
Ë: : "r" (
__ioswab
##
	`w
(
vÆue
)), "ú" (
p‹t
), "r" (
mùs_io_p‹t_ba£
)); } \

235 
	`__OUT1
(
s
##
_p
Ë
	`__OUT2
(
m
Ë: : "r" (
__ioswab
##
	`w
(
vÆue
)), "i" (0), "r" (
mùs_io_p‹t_ba£
+
p‹t
)); \

236 
SLOW_DOWN_IO
; } \

237 
	`__OUT1
(
s
##
c_p
Ë
	`__OUT2
(
m
Ë: : "r" (
__ioswab
##
	`w
(
vÆue
)), "ú" (
p‹t
), "r" (
mùs_io_p‹t_ba£
)); \

238 
SLOW_DOWN_IO
; }

	)

240 
	#__IN1
(
t
,
s
) \

241 
__ölöe__
 
t
 
__ö
##
	`s
(
p‹t
Ë{Å 
_v
;

	)

246 
	#__IN2
(
m
) \

247 
__asm__
 
	`__vﬁ©ûe__
 ("l" #m "\t%0,%1(%2)"

	)

249 
	#__IN
(
t
,
m
,
s
,
w
) \

250 
	`__IN1
(
t
,
s
Ë
	`__IN2
(
m
Ë: "Ù" (
_v
Ë: "i" (0), "r" (
mùs_io_p‹t_ba£
+
p‹t
));  
__ioswab
##
	`w
(_v); } \

251 
	`__IN1
(
t
,
s
##
c
Ë
	`__IN2
(
m
Ë: "Ù" (
_v
Ë: "ú" (
p‹t
), "r" (
mùs_io_p‹t_ba£
));  
__ioswab
##
	`w
(_v); } \

252 
	`__IN1
(
t
,
s
##
_p
Ë
	`__IN2
(
m
Ë: "Ù" (
_v
Ë: "i" (0), "r" (
mùs_io_p‹t_ba£
+
p‹t
)); 
SLOW_DOWN_IO
;  
__ioswab
##
	`w
(_v); } \

253 
	`__IN1
(
t
,
s
##
c_p
Ë
	`__IN2
(
m
Ë: "Ù" (
_v
Ë: "ú" (
p‹t
), "r" (
mùs_io_p‹t_ba£
)); 
SLOW_DOWN_IO
;  
__ioswab
##
	`w
(_v); }

	)

255 
	#__INS1
(
s
) \

256 
ölöe
 
__ös
##
	`s
(
p‹t
, * 
addr
, 
cou¡
Ë{

	)

258 
	#__INS2
(
m
) \

259 i‡(
cou¡
) \

260 
__asm__
 
	`__vﬁ©ûe__
 ( \

269 ".£t\åe‹dî"

	)

271 
	#__INS
(
m
,
s
,
i
) \

272 
	`__INS1
(
s
Ë
	`__INS2
(
m
) \

273 : "Ù" (
addr
), "Ù" (
cou¡
) \

274 : "0" (
addr
), "1" (
cou¡
), "i" (0), \

275 "r" (
mùs_io_p‹t_ba£
+
p‹t
), "I" (
i
) \

277 
	`__INS1
(
s
##
c
Ë
	`__INS2
(
m
) \

278 : "Ù" (
addr
), "Ù" (
cou¡
) \

279 : "0" (
addr
), "1" (
cou¡
), "ú" (
p‹t
), \

280 "r" (
mùs_io_p‹t_ba£
), "I" (
i
) \

281 : "$1");}

	)

283 
	#__OUTS1
(
s
) \

284 
ölöe
 
__outs
##
	`s
(
p‹t
, c⁄° * 
addr
, 
cou¡
Ë{

	)

286 
	#__OUTS2
(
m
) \

287 i‡(
cou¡
) \

288 
__asm__
 
	`__vﬁ©ûe__
 ( \

297 ".£t\åe‹dî"

	)

299 
	#__OUTS
(
m
,
s
,
i
) \

300 
	`__OUTS1
(
s
Ë
	`__OUTS2
(
m
) \

301 : "Ù" (
addr
), "Ù" (
cou¡
) \

302 : "0" (
addr
), "1" (
cou¡
), "i" (0), "r" (
mùs_io_p‹t_ba£
+
p‹t
), "I" (
i
) \

304 
	`__OUTS1
(
s
##
c
Ë
	`__OUTS2
(
m
) \

305 : "Ù" (
addr
), "Ù" (
cou¡
) \

306 : "0" (
addr
), "1" (
cou¡
), "ú" (
p‹t
), "r" (
mùs_io_p‹t_ba£
), "I" (
i
) \

307 : "$1");}

	)

309 
	$__IN
(,
b
,b,8)

310 
	$__IN
(,
h
,
w
,16)

311 
	$__IN
(,
w
,
l
,32)

313 
	$__OUT
(
b
,b,8)

314 
	$__OUT
(
h
,
w
,16)

315 
	$__OUT
(
w
,
l
,32)

317 
	$__INS
(
b
,b,1)

318 
	$__INS
(
h
,
w
,2)

319 
	$__INS
(
w
,
l
,4)

321 
	$__OUTS
(
b
,b,1)

322 
	$__OUTS
(
h
,
w
,2)

323 
	$__OUTS
(
w
,
l
,4)

331 
	#outb
(
vÆ
,
p‹t
) \

332 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

333 
	`__outbc
((
vÆ
),(
p‹t
)) : \

334 
	`__outb
((
vÆ
),(
p‹t
)))

	)

336 
	#öb
(
p‹t
) \

337 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

338 
	`__öbc
(
p‹t
) : \

339 
	`__öb
(
p‹t
))

	)

341 
	#outb_p
(
vÆ
,
p‹t
) \

342 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

343 
	`__outbc_p
((
vÆ
),(
p‹t
)) : \

344 
	`__outb_p
((
vÆ
),(
p‹t
)))

	)

346 
	#öb_p
(
p‹t
) \

347 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

348 
	`__öbc_p
(
p‹t
) : \

349 
	`__öb_p
(
p‹t
))

	)

351 
	#outw
(
vÆ
,
p‹t
) \

352 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

353 
	`__outwc
((
vÆ
),(
p‹t
)) : \

354 
	`__outw
((
vÆ
),(
p‹t
)))

	)

356 
	#öw
(
p‹t
) \

357 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

358 
	`__öwc
(
p‹t
) : \

359 
	`__öw
(
p‹t
))

	)

361 
	#outw_p
(
vÆ
,
p‹t
) \

362 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

363 
	`__outwc_p
((
vÆ
),(
p‹t
)) : \

364 
	`__outw_p
((
vÆ
),(
p‹t
)))

	)

366 
	#öw_p
(
p‹t
) \

367 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

368 
	`__öwc_p
(
p‹t
) : \

369 
	`__öw_p
(
p‹t
))

	)

371 
	#oué
(
vÆ
,
p‹t
) \

372 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

373 
	`__ouéc
((
vÆ
),(
p‹t
)) : \

374 
	`__oué
((
vÆ
),(
p‹t
)))

	)

376 
	#öl
(
p‹t
) \

377 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

378 
	`__ölc
(
p‹t
) : \

379 
	`__öl
(
p‹t
))

	)

381 
	#oué_p
(
vÆ
,
p‹t
) \

382 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

383 
	`__ouéc_p
((
vÆ
),(
p‹t
)) : \

384 
	`__oué_p
((
vÆ
),(
p‹t
)))

	)

386 
	#öl_p
(
p‹t
) \

387 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

388 
	`__ölc_p
(
p‹t
) : \

389 
	`__öl_p
(
p‹t
))

	)

392 
	#outsb
(
p‹t
,
addr
,
cou¡
) \

393 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

394 
	`__outsbc
((
p‹t
),(
addr
),(
cou¡
)) : \

395 
	`__outsb
 ((
p‹t
),(
addr
),(
cou¡
)))

	)

397 
	#ösb
(
p‹t
,
addr
,
cou¡
) \

398 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

399 
	`__ösbc
((
p‹t
),(
addr
),(
cou¡
)) : \

400 
	`__ösb
((
p‹t
),(
addr
),(
cou¡
)))

	)

402 
	#outsw
(
p‹t
,
addr
,
cou¡
) \

403 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

404 
	`__outswc
((
p‹t
),(
addr
),(
cou¡
)) : \

405 
	`__outsw
 ((
p‹t
),(
addr
),(
cou¡
)))

	)

407 
	#ösw
(
p‹t
,
addr
,
cou¡
) \

408 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

409 
	`__öswc
((
p‹t
),(
addr
),(
cou¡
)) : \

410 
	`__ösw
((
p‹t
),(
addr
),(
cou¡
)))

	)

412 
	#out¶
(
p‹t
,
addr
,
cou¡
) \

413 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

414 
	`__out¶c
((
p‹t
),(
addr
),(
cou¡
)) : \

415 
	`__out¶
 ((
p‹t
),(
addr
),(
cou¡
)))

	)

417 
	#ö¶
(
p‹t
,
addr
,
cou¡
) \

418 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 32768) ? \

419 
	`__ö¶c
((
p‹t
),(
addr
),(
cou¡
)) : \

420 
	`__ö¶
((
p‹t
),(
addr
),(
cou¡
)))

	)

422 
	#IO_SPACE_LIMIT
 0xffff

	)

442 (*
_dma_ˇche_wback_öv
)(
°¨t
, 
size
);

443 (*
_dma_ˇche_wback
)(
°¨t
, 
size
);

444 (*
_dma_ˇche_öv
)(
°¨t
, 
size
);

446 
	#dma_ˇche_wback_öv
(
°¨t
,
size
Ë
	`_dma_ˇche_wback_öv
(°¨t,size)

	)

447 
	#dma_ˇche_wback
(
°¨t
,
size
Ë
	`_dma_ˇche_wback
(°¨t,size)

	)

448 
	#dma_ˇche_öv
(
°¨t
,
size
Ë
	`_dma_ˇche_öv
(°¨t,size)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/isadep.h

8 
	~<löux/c⁄fig.h
>

10 #i‚de‡
__ASM_ISADEP_H


11 
	#__ASM_ISADEP_H


	)

13 #i‡
deföed
(
CONFIG_CPU_R3000
)

21 
	#KU_MASK
 0x08

	)

22 
	#KU_USER
 0x08

	)

23 
	#KU_KERN
 0x00

	)

29 
	#KU_MASK
 0x18

	)

30 
	#KU_USER
 0x10

	)

31 
	#KU_KERN
 0x00

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/mipsregs.h

13 #i‚de‡
_ASM_MIPSREGS_H


14 
	#_ASM_MIPSREGS_H


	)

17 
	~<löux/lökage.h
>

24 #i‚de‡
__STR


25 
	#__STR
(
x
Ë#x

	)

27 #i‚de‡
STR


28 
	#STR
(
x
Ë
	`__STR
(x)

	)

34 
	#CP0_INDEX
 
$0


	)

35 
	#CP0_RANDOM
 
$1


	)

36 
	#CP0_ENTRYLO0
 
$2


	)

37 
	#CP0_ENTRYLO1
 
$3


	)

38 
	#CP0_CONF
 
$3


	)

39 
	#CP0_CONTEXT
 
$4


	)

40 
	#CP0_PAGEMASK
 
$5


	)

41 
	#CP0_WIRED
 
$6


	)

42 
	#CP0_INFO
 
$7


	)

43 
	#CP0_BADVADDR
 
$8


	)

44 
	#CP0_COUNT
 
$9


	)

45 
	#CP0_ENTRYHI
 
$10


	)

46 
	#CP0_COMPARE
 
$11


	)

47 
	#CP0_STATUS
 
$12


	)

48 
	#CP0_CAUSE
 
$13


	)

49 
	#CP0_EPC
 
$14


	)

50 
	#CP0_PRID
 
$15


	)

51 
	#CP0_CONFIG
 
$16


	)

52 
	#CP0_LLADDR
 
$17


	)

53 
	#CP0_WATCHLO
 
$18


	)

54 
	#CP0_WATCHHI
 
$19


	)

55 
	#CP0_XCONTEXT
 
$20


	)

56 
	#CP0_FRAMEMASK
 
$21


	)

57 
	#CP0_DIAGNOSTIC
 
$22


	)

58 
	#CP0_PERFORMANCE
 
$25


	)

59 
	#CP0_ECC
 
$26


	)

60 
	#CP0_CACHEERR
 
$27


	)

61 
	#CP0_TAGLO
 
$28


	)

62 
	#CP0_TAGHI
 
$29


	)

63 
	#CP0_ERROREPC
 
$30


	)

71 
	#CP0_IBASE
 
$0


	)

72 
	#CP0_IBOUND
 
$1


	)

73 
	#CP0_DBASE
 
$2


	)

74 
	#CP0_DBOUND
 
$3


	)

75 
	#CP0_CALG
 
$17


	)

76 
	#CP0_IWATCH
 
$18


	)

77 
	#CP0_DWATCH
 
$19


	)

82 
	#CP0_S1_DERRADDR0
 
$26


	)

83 
	#CP0_S1_DERRADDR1
 
$27


	)

84 
	#CP0_S1_INTCONTROL
 
$20


	)

88 
	#CP1_REVISION
 
$0


	)

89 
	#CP1_STATUS
 
$31


	)

98 
	#FPU_CSR_FLUSH
 0x01000000

	)

99 
	#FPU_CSR_COND
 0x00800000

	)

100 
	#FPU_CSR_COND0
 0x00800000

	)

101 
	#FPU_CSR_COND1
 0x02000000

	)

102 
	#FPU_CSR_COND2
 0x04000000

	)

103 
	#FPU_CSR_COND3
 0x08000000

	)

104 
	#FPU_CSR_COND4
 0x10000000

	)

105 
	#FPU_CSR_COND5
 0x20000000

	)

106 
	#FPU_CSR_COND6
 0x40000000

	)

107 
	#FPU_CSR_COND7
 0x80000000

	)

114 
	#FPU_CSR_ALL_X
 0x0003f000

	)

115 
	#FPU_CSR_UNI_X
 0x00020000

	)

116 
	#FPU_CSR_INV_X
 0x00010000

	)

117 
	#FPU_CSR_DIV_X
 0x00008000

	)

118 
	#FPU_CSR_OVF_X
 0x00004000

	)

119 
	#FPU_CSR_UDF_X
 0x00002000

	)

120 
	#FPU_CSR_INE_X
 0x00001000

	)

122 
	#FPU_CSR_ALL_E
 0x00000f80

	)

123 
	#FPU_CSR_INV_E
 0x00000800

	)

124 
	#FPU_CSR_DIV_E
 0x00000400

	)

125 
	#FPU_CSR_OVF_E
 0x00000200

	)

126 
	#FPU_CSR_UDF_E
 0x00000100

	)

127 
	#FPU_CSR_INE_E
 0x00000080

	)

129 
	#FPU_CSR_ALL_S
 0x0000007c

	)

130 
	#FPU_CSR_INV_S
 0x00000040

	)

131 
	#FPU_CSR_DIV_S
 0x00000020

	)

132 
	#FPU_CSR_OVF_S
 0x00000010

	)

133 
	#FPU_CSR_UDF_S
 0x00000008

	)

134 
	#FPU_CSR_INE_S
 0x00000004

	)

137 
	#FPU_CSR_RN
 0x0

	)

138 
	#FPU_CSR_RZ
 0x1

	)

139 
	#FPU_CSR_RU
 0x2

	)

140 
	#FPU_CSR_RD
 0x3

	)

146 
	~<löux/c⁄fig.h
>

147 #ifde‡
CONFIG_CPU_VR41XX


148 
	#PM_1K
 0x00000000

	)

149 
	#PM_4K
 0x00001800

	)

150 
	#PM_16K
 0x00007800

	)

151 
	#PM_64K
 0x0001f800

	)

152 
	#PM_256K
 0x0007f800

	)

154 
	#PM_4K
 0x00000000

	)

155 
	#PM_16K
 0x00006000

	)

156 
	#PM_64K
 0x0001e000

	)

157 
	#PM_256K
 0x0007e000

	)

158 
	#PM_1M
 0x001„000

	)

159 
	#PM_4M
 0x007„000

	)

160 
	#PM_16M
 0x01f„000

	)

166 
	#PL_4K
 12

	)

167 
	#PL_16K
 14

	)

168 
	#PL_64K
 16

	)

169 
	#PL_256K
 18

	)

170 
	#PL_1M
 20

	)

171 
	#PL_4M
 22

	)

172 
	#PL_16M
 24

	)

177 
	#ªad_32bô_˝0_ªgi°î
(
sour˚
) \

178 ({ 
__ªs
; \

179 
__asm__
 
	`__vﬁ©ûe__
( \

182 "mfc0\t%0,"
	`STR
(
sour˚
)"\n\t" \

184 : "Ù" (
__ªs
)); \

185 
__ªs
;})

	)

187 
	#ªad_32bô_˝0_£t1_ªgi°î
(
sour˚
) \

188 ({ 
__ªs
; \

189 
__asm__
 
	`__vﬁ©ûe__
( \

192 "cfc0\t%0,"
	`STR
(
sour˚
)"\n\t" \

194 : "Ù" (
__ªs
)); \

195 
__ªs
;})

	)

200 
	#ªad_64bô_˝0_ªgi°î
(
sour˚
) \

201 ({ 
__ªs
; \

202 
__asm__
 
	`__vﬁ©ûe__
( \

204 "dmfc0\t%0,"
	`STR
(
sour˚
)"\n\t" \

206 : "Ù" (
__ªs
)); \

207 
__ªs
;})

	)

209 
	#wrôe_32bô_˝0_ªgi°î
(,
vÆue
) \

210 
__asm__
 
	`__vﬁ©ûe__
( \

211 "mtc0\t%0,"
	`STR
()"\n\t" \

213 : : "r" (
vÆue
));

	)

215 
	#wrôe_32bô_˝0_£t1_ªgi°î
(,
vÆue
) \

216 
__asm__
 
	`__vﬁ©ûe__
( \

217 "˘c0\t%0,"
	`STR
()"\n\t" \

219 : : "r" (
vÆue
));

	)

221 
	#wrôe_64bô_˝0_ªgi°î
(,
vÆue
) \

222 
__asm__
 
	`__vﬁ©ûe__
( \

224 "dmtc0\t%0,"
	`STR
()"\n\t" \

226 : : "r" (
vÆue
))

	)

231 
	#ªad_mùs32_˝0_c⁄fig1
() \

232 ({ 
__ªs
; \

233 
__asm__
 
	`__vﬁ©ûe__
( \

240 :"Ù" (
__ªs
)); \

241 
__ªs
;})

	)

243 
	#éb_wrôe_ödexed
() \

244 
__asm__
 
	`__vﬁ©ûe__
( \

247 ".£àª‹dî")

	)

252 
	#IE_SW0
 (1<< 8)

	)

253 
	#IE_SW1
 (1<< 9)

	)

254 
	#IE_IRQ0
 (1<<10)

	)

255 
	#IE_IRQ1
 (1<<11)

	)

256 
	#IE_IRQ2
 (1<<12)

	)

257 
	#IE_IRQ3
 (1<<13)

	)

258 
	#IE_IRQ4
 (1<<14)

	)

259 
	#IE_IRQ5
 (1<<15)

	)

264 
	#C_SW0
 (1<< 8)

	)

265 
	#C_SW1
 (1<< 9)

	)

266 
	#C_IRQ0
 (1<<10)

	)

267 
	#C_IRQ1
 (1<<11)

	)

268 
	#C_IRQ2
 (1<<12)

	)

269 
	#C_IRQ3
 (1<<13)

	)

270 
	#C_IRQ4
 (1<<14)

	)

271 
	#C_IRQ5
 (1<<15)

	)

273 #i‚de‡
_LANGUAGE_ASSEMBLY


278 
	#__BUILD_SET_CP0
(
«me
,) \

279 
__ölöe__
 \

280 
£t_˝0_
##
	`«me
(
£t
) \

282 
ªs
; \

284 
ªs
 = 
	`ªad_32bô_˝0_ªgi°î
(); \

285 
ªs
 |
£t
; \

286 
	`wrôe_32bô_˝0_ªgi°î
(, 
ªs
); \

288  
ªs
; \

291 
__ölöe__
 \

292 
˛ór_˝0_
##
	`«me
(
˛ór
) \

294 
ªs
; \

296 
ªs
 = 
	`ªad_32bô_˝0_ªgi°î
(); \

297 
ªs
 &~
˛ór
; \

298 
	`wrôe_32bô_˝0_ªgi°î
(, 
ªs
); \

300  
ªs
; \

303 
__ölöe__
 \

304 
ch™ge_˝0_
##
	`«me
(
ch™ge
, 
√w
) \

306 
ªs
; \

308 
ªs
 = 
	`ªad_32bô_˝0_ªgi°î
(); \

309 
ªs
 &~
ch™ge
; \

310 
ªs
 |(
√w
 & 
ch™ge
); \

311 if(
ch™ge
) \

312 
	`wrôe_32bô_˝0_ªgi°î
(, 
ªs
); \

314  
ªs
; \

315 }

	)

317 
	$__BUILD_SET_CP0
(
°©us
,
CP0_STATUS
)

318 
	$__BUILD_SET_CP0
(
ˇu£
,
CP0_CAUSE
)

319 
	$__BUILD_SET_CP0
(
c⁄fig
,
CP0_CONFIG
)

326 
	#ST0_IE
 0x00000001

	)

327 
	#ST0_EXL
 0x00000002

	)

328 
	#ST0_ERL
 0x00000004

	)

329 
	#ST0_KSU
 0x00000018

	)

330 
	#KSU_USER
 0x00000010

	)

331 
	#KSU_SUPERVISOR
 0x00000008

	)

332 
	#KSU_KERNEL
 0x00000000

	)

333 
	#ST0_UX
 0x00000020

	)

334 
	#ST0_SX
 0x00000040

	)

335 
	#ST0_KX
 0x00000080

	)

336 
	#ST0_DE
 0x00010000

	)

337 
	#ST0_CE
 0x00020000

	)

342 
	#ST0_IEC
 0x00000001

	)

343 
	#ST0_KUC
 0x00000002

	)

344 
	#ST0_IEP
 0x00000004

	)

345 
	#ST0_KUP
 0x00000008

	)

346 
	#ST0_IEO
 0x00000010

	)

347 
	#ST0_KUO
 0x00000020

	)

349 
	#ST0_ISC
 0x00010000

	)

350 
	#ST0_SWC
 0x00020000

	)

351 
	#ST0_CM
 0x00080000

	)

356 
	#ST0_UM
 (1 << 4)

	)

357 
	#ST0_IL
 (1 << 23)

	)

358 
	#ST0_DL
 (1 << 24)

	)

363 
	#TX39_CONF_ICS_SHIFT
 19

	)

364 
	#TX39_CONF_ICS_MASK
 0x00380000

	)

365 
	#TX39_CONF_ICS_1KB
 0x00000000

	)

366 
	#TX39_CONF_ICS_2KB
 0x00080000

	)

367 
	#TX39_CONF_ICS_4KB
 0x00100000

	)

368 
	#TX39_CONF_ICS_8KB
 0x00180000

	)

369 
	#TX39_CONF_ICS_16KB
 0x00200000

	)

371 
	#TX39_CONF_DCS_SHIFT
 16

	)

372 
	#TX39_CONF_DCS_MASK
 0x00070000

	)

373 
	#TX39_CONF_DCS_1KB
 0x00000000

	)

374 
	#TX39_CONF_DCS_2KB
 0x00010000

	)

375 
	#TX39_CONF_DCS_4KB
 0x00020000

	)

376 
	#TX39_CONF_DCS_8KB
 0x00030000

	)

377 
	#TX39_CONF_DCS_16KB
 0x00040000

	)

379 
	#TX39_CONF_CWFON
 0x00004000

	)

380 
	#TX39_CONF_WBON
 0x00002000

	)

381 
	#TX39_CONF_RF_SHIFT
 10

	)

382 
	#TX39_CONF_RF_MASK
 0x00000c00

	)

383 
	#TX39_CONF_DOZE
 0x00000200

	)

384 
	#TX39_CONF_HALT
 0x00000100

	)

385 
	#TX39_CONF_LOCK
 0x00000080

	)

386 
	#TX39_CONF_ICE
 0x00000020

	)

387 
	#TX39_CONF_DCE
 0x00000010

	)

388 
	#TX39_CONF_IRSIZE_SHIFT
 2

	)

389 
	#TX39_CONF_IRSIZE_MASK
 0x0000000c

	)

390 
	#TX39_CONF_DRSIZE_SHIFT
 0

	)

391 
	#TX39_CONF_DRSIZE_MASK
 0x00000003

	)

396 
	#ST0_IM
 0x0000ff00

	)

397 
	#STATUSB_IP0
 8

	)

398 
	#STATUSF_IP0
 (1 << 8)

	)

399 
	#STATUSB_IP1
 9

	)

400 
	#STATUSF_IP1
 (1 << 9)

	)

401 
	#STATUSB_IP2
 10

	)

402 
	#STATUSF_IP2
 (1 << 10)

	)

403 
	#STATUSB_IP3
 11

	)

404 
	#STATUSF_IP3
 (1 << 11)

	)

405 
	#STATUSB_IP4
 12

	)

406 
	#STATUSF_IP4
 (1 << 12)

	)

407 
	#STATUSB_IP5
 13

	)

408 
	#STATUSF_IP5
 (1 << 13)

	)

409 
	#STATUSB_IP6
 14

	)

410 
	#STATUSF_IP6
 (1 << 14)

	)

411 
	#STATUSB_IP7
 15

	)

412 
	#STATUSF_IP7
 (1 << 15)

	)

413 
	#STATUSB_IP8
 0

	)

414 
	#STATUSF_IP8
 (1 << 0)

	)

415 
	#STATUSB_IP9
 1

	)

416 
	#STATUSF_IP9
 (1 << 1)

	)

417 
	#STATUSB_IP10
 2

	)

418 
	#STATUSF_IP10
 (1 << 2)

	)

419 
	#STATUSB_IP11
 3

	)

420 
	#STATUSF_IP11
 (1 << 3)

	)

421 
	#STATUSB_IP12
 4

	)

422 
	#STATUSF_IP12
 (1 << 4)

	)

423 
	#STATUSB_IP13
 5

	)

424 
	#STATUSF_IP13
 (1 << 5)

	)

425 
	#STATUSB_IP14
 6

	)

426 
	#STATUSF_IP14
 (1 << 6)

	)

427 
	#STATUSB_IP15
 7

	)

428 
	#STATUSF_IP15
 (1 << 7)

	)

429 
	#ST0_CH
 0x00040000

	)

430 
	#ST0_SR
 0x00100000

	)

431 
	#ST0_BEV
 0x00400000

	)

432 
	#ST0_RE
 0x02000000

	)

433 
	#ST0_FR
 0x04000000

	)

434 
	#ST0_CU
 0xf0000000

	)

435 
	#ST0_CU0
 0x10000000

	)

436 
	#ST0_CU1
 0x20000000

	)

437 
	#ST0_CU2
 0x40000000

	)

438 
	#ST0_CU3
 0x80000000

	)

439 
	#ST0_XX
 0x80000000

	)

446 
	#CAUSEB_EXCCODE
 2

	)

447 
	#CAUSEF_EXCCODE
 (31 << 2)

	)

448 
	#CAUSEB_IP
 8

	)

449 
	#CAUSEF_IP
 (255 << 8)

	)

450 
	#CAUSEB_IP0
 8

	)

451 
	#CAUSEF_IP0
 (1 << 8)

	)

452 
	#CAUSEB_IP1
 9

	)

453 
	#CAUSEF_IP1
 (1 << 9)

	)

454 
	#CAUSEB_IP2
 10

	)

455 
	#CAUSEF_IP2
 (1 << 10)

	)

456 
	#CAUSEB_IP3
 11

	)

457 
	#CAUSEF_IP3
 (1 << 11)

	)

458 
	#CAUSEB_IP4
 12

	)

459 
	#CAUSEF_IP4
 (1 << 12)

	)

460 
	#CAUSEB_IP5
 13

	)

461 
	#CAUSEF_IP5
 (1 << 13)

	)

462 
	#CAUSEB_IP6
 14

	)

463 
	#CAUSEF_IP6
 (1 << 14)

	)

464 
	#CAUSEB_IP7
 15

	)

465 
	#CAUSEF_IP7
 (1 << 15)

	)

466 
	#CAUSEB_IV
 23

	)

467 
	#CAUSEF_IV
 (1 << 23)

	)

468 
	#CAUSEB_CE
 28

	)

469 
	#CAUSEF_CE
 (3 << 28)

	)

470 
	#CAUSEB_BD
 31

	)

471 
	#CAUSEF_BD
 (1 << 31)

	)

476 
	#CONF_CM_CACHABLE_NO_WA
 0

	)

477 
	#CONF_CM_CACHABLE_WA
 1

	)

478 
	#CONF_CM_UNCACHED
 2

	)

479 
	#CONF_CM_CACHABLE_NONCOHERENT
 3

	)

480 
	#CONF_CM_CACHABLE_CE
 4

	)

481 
	#CONF_CM_CACHABLE_COW
 5

	)

482 
	#CONF_CM_CACHABLE_CUW
 6

	)

483 
	#CONF_CM_CACHABLE_ACCELERATED
 7

	)

484 
	#CONF_CM_CMASK
 7

	)

485 
	#CONF_DB
 (1 << 4)

	)

486 
	#CONF_IB
 (1 << 5)

	)

487 
	#CONF_SC
 (1 << 17)

	)

488 
	#CONF_AC
 (1 << 23)

	)

489 
	#CONF_HALT
 (1 << 25)

	)

502 
	#CE0_CYCLES
 0

	)

503 
	#CE0_INSN_ISSUED
 1

	)

504 
	#CE0_LPSC_ISSUED
 2

	)

505 
	#CE0_S_ISSUED
 3

	)

506 
	#CE0_SC_ISSUED
 4

	)

507 
	#CE0_SC_FAILED
 5

	)

508 
	#CE0_BRANCH_DECODED
 6

	)

509 
	#CE0_QW_WB_SECONDARY
 7

	)

510 
	#CE0_CORRECTED_ECC_ERRORS
 8

	)

511 
	#CE0_ICACHE_MISSES
 9

	)

512 
	#CE0_SCACHE_I_MISSES
 10

	)

513 
	#CE0_SCACHE_I_WAY_MISSPREDICTED
 11

	)

514 
	#CE0_EXT_INTERVENTIONS_REQ
 12

	)

515 
	#CE0_EXT_INVALIDATE_REQ
 13

	)

516 
	#CE0_VIRTUAL_COHERENCY_COND
 14

	)

517 
	#CE0_INSN_GRADUATED
 15

	)

522 
	#CE1_CYCLES
 0

	)

523 
	#CE1_INSN_GRADUATED
 1

	)

524 
	#CE1_LPSC_GRADUATED
 2

	)

525 
	#CE1_S_GRADUATED
 3

	)

526 
	#CE1_SC_GRADUATED
 4

	)

527 
	#CE1_FP_INSN_GRADUATED
 5

	)

528 
	#CE1_QW_WB_PRIMARY
 6

	)

529 
	#CE1_TLB_REFILL
 7

	)

530 
	#CE1_BRANCH_MISSPREDICTED
 8

	)

531 
	#CE1_DCACHE_MISS
 9

	)

532 
	#CE1_SCACHE_D_MISSES
 10

	)

533 
	#CE1_SCACHE_D_WAY_MISSPREDICTED
 11

	)

534 
	#CE1_EXT_INTERVENTION_HITS
 12

	)

535 
	#CE1_EXT_INVALIDATE_REQ
 13

	)

536 
	#CE1_SP_HINT_TO_CEXCL_SC_BLOCKS
 14

	)

537 
	#CE1_SP_HINT_TO_SHARED_SC_BLOCKS
 15

	)

542 
	#CEB_USER
 8

	)

543 
	#CEB_SUPERVISOR
 4

	)

544 
	#CEB_KERNEL
 2

	)

545 
	#CEB_EXL
 1

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/posix_types.h

9 #i‚de‡
_ASM_POSIX_TYPES_H


10 
	#_ASM_POSIX_TYPES_H


	)

18 
	t__kî√l_dev_t
;

19 
	t__kî√l_öo_t
;

20 
	t__kî√l_mode_t
;

21 
	t__kî√l_∆ök_t
;

22 
	t__kî√l_off_t
;

23 
	t__kî√l_pid_t
;

24 
	t__kî√l_ùc_pid_t
;

25 
	t__kî√l_uid_t
;

26 
	t__kî√l_gid_t
;

27 
	t__kî√l_size_t
;

28 
	t__kî√l_ssize_t
;

29 
	t__kî√l_±rdiff_t
;

30 
	t__kî√l_time_t
;

31 
	t__kî√l_su£c⁄ds_t
;

32 
	t__kî√l_˛ock_t
;

33 
	t__kî√l_daddr_t
;

34 * 
	t__kî√l_ˇddr_t
;

36 
	t__kî√l_uid16_t
;

37 
	t__kî√l_gid16_t
;

38 
	t__kî√l_uid32_t
;

39 
	t__kî√l_gid32_t
;

40 
__kî√l_uid_t
 
	t__kî√l_ﬁd_uid_t
;

41 
__kî√l_gid_t
 
	t__kî√l_ﬁd_gid_t
;

43 #ifde‡
__GNUC__


44 
	t__kî√l_loff_t
;

48 
	mvÆ
[2];

49 } 
	t__kî√l_fsid_t
;

51 #i‡
deföed
(
__KERNEL__
Ë|| !deföed(
__GLIBC__
) || (__GLIBC__ < 2)

53 #unde‡
__FD_SET


54 
__ölöe__
 
	$__FD_SET
(
__fd
, 
__kî√l_fd_£t
 *
__fd£ç
)

56 
__tmp
 = 
__fd
 / 
__NFDBITS
;

57 
__ªm
 = 
__fd
 % 
__NFDBITS
;

58 
__fd£ç
->
fds_bôs
[
__tmp
] |(1UL<<
__ªm
);

59 
	}
}

61 #unde‡
__FD_CLR


62 
__ölöe__
 
	$__FD_CLR
(
__fd
, 
__kî√l_fd_£t
 *
__fd£ç
)

64 
__tmp
 = 
__fd
 / 
__NFDBITS
;

65 
__ªm
 = 
__fd
 % 
__NFDBITS
;

66 
__fd£ç
->
fds_bôs
[
__tmp
] &~(1UL<<
__ªm
);

67 
	}
}

69 #unde‡
__FD_ISSET


70 
__ölöe__
 
	$__FD_ISSET
(
__fd
, c⁄° 
__kî√l_fd_£t
 *
__p
)

72 
__tmp
 = 
__fd
 / 
__NFDBITS
;

73 
__ªm
 = 
__fd
 % 
__NFDBITS
;

74  (
__p
->
fds_bôs
[
__tmp
] & (1UL<<
__ªm
)) != 0;

75 
	}
}

81 #unde‡
__FD_ZERO


82 
__ölöe__
 
	$__FD_ZERO
(
__kî√l_fd_£t
 *
__p
)

84 *
__tmp
 = 
__p
->
fds_bôs
;

85 
__i
;

87 i‡(
	`__buûtö_c⁄°™t_p
(
__FDSET_LONGS
)) {

88 
__FDSET_LONGS
) {

90 
__tmp
[ 0] = 0; __tmp[ 1] = 0;

91 
__tmp
[ 2] = 0; __tmp[ 3] = 0;

92 
__tmp
[ 4] = 0; __tmp[ 5] = 0;

93 
__tmp
[ 6] = 0; __tmp[ 7] = 0;

94 
__tmp
[ 8] = 0; __tmp[ 9] = 0;

95 
__tmp
[10] = 0; __tmp[11] = 0;

96 
__tmp
[12] = 0; __tmp[13] = 0;

97 
__tmp
[14] = 0; __tmp[15] = 0;

101 
__tmp
[ 0] = 0; __tmp[ 1] = 0;

102 
__tmp
[ 2] = 0; __tmp[ 3] = 0;

103 
__tmp
[ 4] = 0; __tmp[ 5] = 0;

104 
__tmp
[ 6] = 0; __tmp[ 7] = 0;

108 
__tmp
[ 0] = 0; __tmp[ 1] = 0;

109 
__tmp
[ 2] = 0; __tmp[ 3] = 0;

113 
__i
 = 
__FDSET_LONGS
;

114 
__i
) {

115 
__i
--;

116 *
__tmp
 = 0;

117 
__tmp
++;

119 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/processor.h

11 #i‚de‡
_ASM_PROCESSOR_H


12 
	#_ASM_PROCESSOR_H


	)

14 
	~<löux/c⁄fig.h
>

16 
	~<asm/ißdï.h
>

22 
	#cuºít_ãxt_addr
(Ë({ 
__œbñ__
 
_l
; _l: &&_l;})

	)

24 #i‡!
deföed
 (
_LANGUAGE_ASSEMBLY
)

26 
	~<löux/thªads.h
>

28 
	~<asm/ˇche˘l.h
>

29 
	~<asm/mù§egs.h
>

30 
	~<asm/ªg.h
>

31 
	~<asm/sy°em.h
>

33 
	smùs_˝uöfo
 {

34 
	mudñay_vÆ
;

35 *
	mpgd_quick
;

36 *
	m±e_quick
;

37 
	mpgèbÀ_ˇche_sz
;

44 (*
˝u_waô
)();

45 
	`r3081_waô
();

46 
	`r4k_waô
();

47 
cy˛ecou¡î_avaûabÀ
;

49 
mùs_˝uöfo
 
boŸ_˝u_d©a
;

50 
v˚d_cou¡
, 
v˚i_cou¡
;

52 #ifde‡
CONFIG_SMP


53 
mùs_˝uöfo
 
˝u_d©a
[];

54 
	#cuºít_˝u_d©a
 
˝u_d©a
[
	`smp_¥o˚ss‹_id
()]

	)

56 
	#˝u_d©a
 &
boŸ_˝u_d©a


	)

57 
	#cuºít_˝u_d©a
 
boŸ_˝u_d©a


	)

67 
EISA_bus
;

68 
	#MCA_bus
 0

	)

69 
	#MCA_bus__is_a_ma¸o


	)

74 
	#wp_w‹ks_ok
 1

	)

75 
	#wp_w‹ks_ok__is_a_ma¸o


	)

78 
èsk_°ru˘
 *
œ°_èsk_u£d_m©h
;

86 
	#TASK_SIZE
 (0x7fff8000UL)

	)

91 
	#TASK_UNMAPPED_BASE
 (
TASK_SIZE
 / 3)

	)

96 
	#IO_BITMAP_SIZE
 32

	)

98 
	#NUM_FPU_REGS
 32

	)

100 
	smùs_Âu_h¨d_°ru˘
 {

101 
Â_ªgs
[
NUM_FPU_REGS
];

102 
c⁄åﬁ
;

111 
u64
 
	tÂuªg_t
;

112 
	smùs_Âu_so·_°ru˘
 {

113 
Âuªg_t
 
ªgs
[
NUM_FPU_REGS
];

114 
§
;

117 
	umùs_Âu_uni⁄
 {

118 
mùs_Âu_h¨d_°ru˘
 
h¨d
;

119 
mùs_Âu_so·_°ru˘
 
so·
;

122 
	#INIT_FPU
 { \

124 
	}

	)
}

127 
	m£g
;

128 } 
	tmm_£gmít_t
;

133 
	sthªad_°ru˘
 {

135 
	mªg16
;

136 
	mªg17
, 
	mªg18
, 
	mªg19
, 
	mªg20
, 
	mªg21
, 
	mªg22
, 
	mªg23
;

137 
	mªg29
, 
	mªg30
, 
	mªg31
;

140 
	m˝0_°©us
;

143 
mùs_Âu_uni⁄
 
	mÂu
;

146 
	m˝0_badvaddr
;

147 
	m˝0_baduaddr
;

148 
	mîr‹_code
;

149 
	må≠_no
;

150 
	#MF_FIXADE
 1

	)

151 
	#MF_LOGADE
 2

	)

152 
	mmÊags
;

153 
mm_£gmít_t
 
	mcuºít_ds
;

154 
	múix_åampﬁöe
;

155 
	múix_ﬁd˘x
;

165 
	md£mul_ïc
;

170 
	md£mul_´Ωc
;

175 
	#INIT_THREAD
 { \

188 
INIT_FPU
, \

196 
MF_FIXADE
, { 0 }, 0, 0, \

202 }

	)

204 #ifde‡
__KERNEL__


206 
	#KERNEL_STACK_SIZE
 8192

	)

208 #i‡!
deföed
 (
_LANGUAGE_ASSEMBLY
)

211 
	#ªÀa£_thªad
(
thªad
Ëdÿ{ } 0)

	)

213 
kî√l_thªad
((*
‚
)(*), * 
¨g
, 
Êags
);

216 
	#c›y_£gmíts
(
p
, 
mm
Ëdÿ{ 
	}
} 0)

	)

217 
	#ªÀa£_£gmíts
(
mm
Ëdÿ{ } 0)

	)

222 
ölöe
 
	$thªad_ßved_pc
(
thªad_°ru˘
 *
t
)

224 
	`ªt_‰om_f‹k
();

227 i‡(
t
->
ªg31
 =(Ë
ªt_‰om_f‹k
)

228  
t
->
ªg31
;

230  ((*)
t
->
ªg29
)[10];

231 
	}
}

236 
	#°¨t_thªad
(
ªgs
, 
√w_pc
, 
√w_•
) do { \

238 
ªgs
->
˝0_°©us
 = (ªgs->˝0_°©u†& ~(
ST0_CU0
|
ST0_KSU
)Ë| 
KU_USER
;\

239 
ªgs
->
˝0_ïc
 = 
√w_pc
; \

240 
ªgs
->ªgs[29] = 
√w_•
; \

241 
cuºít
->
thªad
.
cuºít_ds
 = 
USER_DS
; \

242 } 0)

	)

244 
gë_wch™
(
èsk_°ru˘
 *
p
);

246 
	#__PT_REG
(
ªg
Ë(()&((
±_ªgs
 *)0)->ªg - (±_ªgs))

	)

247 
	#__KSTK_TOS
(
tsk
Ë(()—skË+ 
KERNEL_STACK_SIZE
 - 32)

	)

248 
	#KSTK_EIP
(
tsk
Ë(*(*)(
	`__KSTK_TOS
—skË+ 
	`__PT_REG
(
˝0_ïc
)))

	)

249 
	#KSTK_ESP
(
tsk
Ë(*(*)(
	`__KSTK_TOS
—skË+ 
	`__PT_REG
(
ªgs
[29])))

	)

255 
	#THREAD_SIZE
 (2*
PAGE_SIZE
)

	)

256 
	#Æloc_èsk_°ru˘
() \

257 ((
èsk_°ru˘
 *Ë
	`__gë_‰ì_∑ges
(
GFP_KERNEL
,1))

	)

258 
	#‰ì_èsk_°ru˘
(
p
Ë
	`‰ì_∑ges
(()’),1)

	)

259 
	#gë_èsk_°ru˘
(
tsk
Ë
	`©omic_öc
(&
	`vút_to_∑ge
—sk)->
cou¡
)

	)

261 
	#öô_èsk
 (
öô_èsk_uni⁄
.
èsk
)

	)

262 
	#öô_°ack
 (
öô_èsk_uni⁄
.
°ack
)

	)

264 
	#˝u_ªœx
(Ëdÿ{ } 0)

	)

281 
	#ªtu∫_addªss
(Ë({
__asm__
 
	`__vﬁ©ûe__
("":::"$31");
	`__buûtö_ªtu∫_addªss
(0);})

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/ptrace.h

11 #i‚de‡
_ASM_PTRACE_H


12 
	#_ASM_PTRACE_H


	)

14 
	~<asm/ißdï.h
>

15 
	~<löux/ty≥s.h
>

18 
	#FPR_BASE
 32

	)

19 
	#PC
 64

	)

20 
	#CAUSE
 65

	)

21 
	#BADVADDR
 66

	)

22 
	#MMHI
 67

	)

23 
	#MMLO
 68

	)

24 
	#FPC_CSR
 69

	)

25 
	#FPC_EIR
 70

	)

27 #i‚de‡
_LANGUAGE_ASSEMBLY


32 
	s±_ªgs
 {

34 
	m∑d0
[6];

37 
	mªgs
[32];

40 
	mlo
;

41 
	mhi
;

46 
	m˝0_ïc
;

47 
	m˝0_badvaddr
;

48 
	m˝0_°©us
;

49 
	m˝0_ˇu£
;

62 
	#PTRACE_SETOPTIONS
 21

	)

65 
	#PTRACE_O_TRACESYSGOOD
 0x00000001

	)

68 
	~<asm/off£t.h
>

71 #ifde‡
__KERNEL__


73 #i‚de‡
_LANGUAGE_ASSEMBLY


77 
	#u£r_mode
(
ªgs
Ë((‘egs)->
˝0_°©us
 & 
KU_MASK
Ë=
KU_USER
)

	)

79 
	#ö°ru˘i⁄_poöãr
(
ªgs
Ë(‘egs)->
˝0_ïc
)

	)

81 
show_ªgs
(
±_ªgs
 *);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/reg.h

11 #i‚de‡
__ASM_MIPS_REG_H


12 
	#__ASM_MIPS_REG_H


	)

19 
	#EF_REG0
 6

	)

20 
	#EF_REG1
 7

	)

21 
	#EF_REG2
 8

	)

22 
	#EF_REG3
 9

	)

23 
	#EF_REG4
 10

	)

24 
	#EF_REG5
 11

	)

25 
	#EF_REG6
 12

	)

26 
	#EF_REG7
 13

	)

27 
	#EF_REG8
 14

	)

28 
	#EF_REG9
 15

	)

29 
	#EF_REG10
 16

	)

30 
	#EF_REG11
 17

	)

31 
	#EF_REG12
 18

	)

32 
	#EF_REG13
 19

	)

33 
	#EF_REG14
 20

	)

34 
	#EF_REG15
 21

	)

35 
	#EF_REG16
 22

	)

36 
	#EF_REG17
 23

	)

37 
	#EF_REG18
 24

	)

38 
	#EF_REG19
 25

	)

39 
	#EF_REG20
 26

	)

40 
	#EF_REG21
 27

	)

41 
	#EF_REG22
 28

	)

42 
	#EF_REG23
 29

	)

43 
	#EF_REG24
 30

	)

44 
	#EF_REG25
 31

	)

48 
	#EF_REG28
 34

	)

49 
	#EF_REG29
 35

	)

50 
	#EF_REG30
 36

	)

51 
	#EF_REG31
 37

	)

56 
	#EF_LO
 38

	)

57 
	#EF_HI
 39

	)

59 
	#EF_CP0_EPC
 40

	)

60 
	#EF_CP0_BADVADDR
 41

	)

61 
	#EF_CP0_STATUS
 42

	)

62 
	#EF_CP0_CAUSE
 44

	)

64 
	#EF_SIZE
 180

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/regdef.h

11 #i‚de‡
__ASM_MIPS_REGDEF_H


12 
	#__ASM_MIPS_REGDEF_H


	)

17 
	#zîo
 
$0


	)

18 
	#AT
 
$1


	)

19 
	#v0
 
$2


	)

20 
	#v1
 
$3


	)

21 
	#a0
 
$4


	)

22 
	#a1
 
$5


	)

23 
	#a2
 
$6


	)

24 
	#a3
 
$7


	)

25 
	#t0
 
$8


	)

26 
	#t1
 
$9


	)

27 
	#t2
 
$10


	)

28 
	#t3
 
$11


	)

29 
	#t4
 
$12


	)

30 
	#t5
 
$13


	)

31 
	#t6
 
$14


	)

32 
	#t7
 
$15


	)

33 
	#s0
 
$16


	)

34 
	#s1
 
$17


	)

35 
	#s2
 
$18


	)

36 
	#s3
 
$19


	)

37 
	#s4
 
$20


	)

38 
	#s5
 
$21


	)

39 
	#s6
 
$22


	)

40 
	#s7
 
$23


	)

41 
	#t8
 
$24


	)

42 
	#t9
 
$25


	)

43 
	#jp
 
$25


	)

44 
	#k0
 
$26


	)

45 
	#k1
 
$27


	)

46 
	#gp
 
$28


	)

47 
	#•
 
$29


	)

48 
	#Â
 
$30


	)

49 
	#s8
 
$30


	)

50 
	#ø
 
$31


	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/sgidefs.h

10 #i‚de‡
__ASM_SGIDEFS_H


11 
	#__ASM_SGIDEFS_H


	)

18 #îr‹ 
U£
 
a
 
Löux
 
compûî
 
‹
 
give
 
up
.

29 
	#_MIPS_ISA_MIPS1
 1

	)

30 
	#_MIPS_ISA_MIPS2
 2

	)

31 
	#_MIPS_ISA_MIPS3
 3

	)

32 
	#_MIPS_ISA_MIPS4
 4

	)

33 
	#_MIPS_ISA_MIPS5
 5

	)

34 
	#_MIPS_ISA_MIPS32
 6

	)

35 
	#_MIPS_ISA_MIPS64
 7

	)

40 
	#_MIPS_SIM_ABI32
 1

	)

41 
	#_MIPS_SIM_NABI32
 2

	)

42 
	#_MIPS_SIM_ABI64
 3

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/string.h

9 #i‚de‡
__ASM_MIPS_STRING_H


10 
	#__ASM_MIPS_STRING_H


	)

12 
	~<löux/c⁄fig.h
>

14 
	#__HAVE_ARCH_STRCPY


	)

15 
__ölöe__
 *
	$°r˝y
(*
__de°
, 
__c⁄°__
 *
__§c
)

17 *
__xde°
 = 
__de°
;

19 
__asm__
 
	`__vﬁ©ûe__
(

29 : "Ù" (
__de°
), "Ù" (
__§c
)

30 : "0" (
__de°
), "1" (
__§c
)

33  
__xde°
;

34 
	}
}

36 
	#__HAVE_ARCH_STRNCPY


	)

37 
__ölöe__
 *
	$°∫˝y
(*
__de°
, 
__c⁄°__
 *
__§c
, 
size_t
 
__n
)

39 *
__xde°
 = 
__de°
;

41 i‡(
__n
 == 0)

42  
__xde°
;

44 
__asm__
 
	`__vﬁ©ûe__
(

57 : "Ù" (
__de°
), "Ù" (
__§c
), "Ù" (
__n
)

58 : "0" (
__de°
), "1" (
__§c
), "2" (
__n
)

61  
__de°
;

62 
	}
}

64 
	#__HAVE_ARCH_STRCMP


	)

65 
__ölöe__
 
	$°rcmp
(
__c⁄°__
 *
__cs
, __c⁄°__ *
__˘
)

67 
__ªs
;

69 
__asm__
 
	`__vﬁ©ûe__
(

79 #i‡
	`deföed
(
CONFIG_CPU_R3000
)

86 : "Ù" (
__cs
), "Ù" (
__˘
), "Ù" (
__ªs
)

87 : "0" (
__cs
), "1" (
__˘
)

90  
__ªs
;

91 
	}
}

93 
	#__HAVE_ARCH_STRNCMP


	)

94 
__ölöe__
 

95 
	$°∫cmp
(
__c⁄°__
 *
__cs
, __c⁄°__ *
__˘
, 
size_t
 
__cou¡
)

97 
__ªs
;

99 
__asm__
 
	`__vﬁ©ûe__
(

111 #i‡
	`deföed
(
CONFIG_CPU_R3000
)

118 : "Ù" (
__cs
), "Ù" (
__˘
), "Ù" (
__cou¡
), "Ù" (
__ªs
)

119 : "0" (
__cs
), "1" (
__˘
), "2" (
__cou¡
)

122  
__ªs
;

123 
	}
}

125 #unde‡
__HAVE_ARCH_MEMSET


126 *
mem£t
(*
__s
, 
__c
, 
size_t
 
__cou¡
);

128 #unde‡
__HAVE_ARCH_MEMCPY


129 *
mem˝y
(*
__to
, 
__c⁄°__
 *
__‰om
, 
size_t
 
__n
);

131 #unde‡
__HAVE_ARCH_MEMMOVE


132 *
memmove
(*
__de°
, 
__c⁄°__
 *
__§c
, 
size_t
 
__n
);

135 
	#__HAVE_ARCH_BCOPY


	)

137 
	#__HAVE_ARCH_MEMSCAN


	)

138 
__ölöe__
 *
	$memsˇn
(*
__addr
, 
__c
, 
size_t
 
__size
)

140 *
__íd
 = (*)
__addr
 + 
__size
;

142 
	`__asm__
(".set\tpush\n\t"

150 : "Ù" (
__addr
), "Ù" (
__íd
)

151 : "0" (
__addr
), "1" (
__íd
), "r" (
__c
)

154  
__addr
;

155 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/system.h

16 #i‚de‡
_ASM_SYSTEM_H


17 
	#_ASM_SYSTEM_H


	)

19 
	~<löux/c⁄fig.h
>

20 
	~<asm/sgidefs.h
>

21 
	~<asm/±ø˚.h
>

23 
	~<löux/kî√l.h
>

26 
__ölöe__
 

27 
	$__°i
()

29 
__asm__
 
	`__vﬁ©ûe__
(

41 
	}
}

50 
__ölöe__
 

51 
	$__˛i
()

53 
__asm__
 
	`__vﬁ©ûe__
(

69 
	}
}

71 
	#__ßve_Êags
(
x
) \

72 
__asm__
 
	`__vﬁ©ûe__
( \

77 : "Ù" (
x
))

	)

79 
	#__ßve_™d_˛i
(
x
) \

80 
__asm__
 
	`__vﬁ©ûe__
( \

93 : "Ù" (
x
) \

95 : "$1", "mem‹y")

	)

97 
	#__ª°‹e_Êags
(
Êags
) \

99 
__tmp1
; \

101 
__asm__
 
	`__vﬁ©ûe__
( \

115 : "Ù" (
__tmp1
) \

116 : "0" (
Êags
) \

118 } 0)

	)

120 #ifde‡
CONFIG_SMP


122 
__globÆ_°i
();

123 
__globÆ_˛i
();

124 
__globÆ_ßve_Êags
();

125 
__globÆ_ª°‹e_Êags
();

126 
	#°i
(Ë
	`__globÆ_°i
()

	)

127 
	#˛i
(Ë
	`__globÆ_˛i
()

	)

128 
	#ßve_Êags
(
x
Ëdÿ{ x = 
	`__globÆ_ßve_Êags
(); } 0)

	)

129 
	#ª°‹e_Êags
(
x
Ë
	`__globÆ_ª°‹e_Êags
(x)

	)

130 
	#ßve_™d_˛i
(
x
Ëdÿ{ 
	`ßve_Êags
(x); 
	`˛i
(); } 0)

	)

134 
	#°i
(Ë
	`__°i
()

	)

135 
	#˛i
(Ë
	`__˛i
()

	)

136 
	#ßve_Êags
(
x
Ë
	`__ßve_Êags
(x)

	)

137 
	#ßve_™d_˛i
(
x
Ë
	`__ßve_™d_˛i
(x)

	)

138 
	#ª°‹e_Êags
(
x
Ë
	`__ª°‹e_Êags
(x)

	)

143 
	#loˇl_úq_ßve
(
x
Ë
	`__ßve_™d_˛i
(x);

	)

144 
	#loˇl_úq_ª°‹e
(
x
Ë
	`__ª°‹e_Êags
(x);

	)

145 
	#loˇl_úq_dißbÀ
(Ë
	`__˛i
();

	)

146 
	#loˇl_úq_íabÀ
(Ë
	`__°i
();

	)

151 #ifde‡
CONFIG_CPU_HAS_WB


153 
	~<asm/wbÊush.h
>

154 
	#rmb
(Ëdÿ{ } 0)

	)

155 
	#wmb
(Ë
	`wbÊush
()

	)

156 
	#mb
(Ë
	`wbÊush
()

	)

160 
	#mb
() \

161 
__asm__
 
	`__vﬁ©ûe__
( \

169 : "mem‹y")

	)

170 
	#rmb
(Ë
	`mb
()

	)

171 
	#wmb
(Ë
	`mb
()

	)

175 #ifde‡
CONFIG_SMP


176 
	#smp_mb
(Ë
	`mb
()

	)

177 
	#smp_rmb
(Ë
	`rmb
()

	)

178 
	#smp_wmb
(Ë
	`wmb
()

	)

180 
	#smp_mb
(Ë
	`b¨rõr
()

	)

181 
	#smp_rmb
(Ë
	`b¨rõr
()

	)

182 
	#smp_wmb
(Ë
	`b¨rõr
()

	)

185 
	#£t_mb
(
v¨
, 
vÆue
) \

186 dÿ{ 
v¨
 = 
vÆue
; 
	`mb
(); } 0)

	)

188 
	#£t_wmb
(
v¨
, 
vÆue
) \

189 dÿ{ 
v¨
 = 
vÆue
; 
	`wmb
(); } 0)

	)

191 #i‡!
deföed
 (
_LANGUAGE_ASSEMBLY
)

197 
asmlökage
 *
ªsume
(*
œ°
, *
√xt
);

201 
	#¥ï¨e_to_swôch
(Ëdÿ{ } 0)

	)

202 
	#swôch_to
(
¥ev
,
√xt
,
œ°
) \

204 (
œ°
Ë
	`ªsume
(
¥ev
, 
√xt
); \

205 } 0)

	)

211 
__ölöe__
 
	$xchg_u32
(vﬁ©ûê* 
m
, 
vÆ
)

213 #ifde‡
CONFIG_CPU_HAS_LLSC


214 
dummy
;

216 
__asm__
 
	`__vﬁ©ûe__
(

226 : "Ù" (
vÆ
), "=o" (*
m
), "Ù" (
dummy
)

227 : "o" (*
m
), "2" (
vÆ
)

230  
vÆ
;

232 
Êags
, 
ªtvÆ
;

234 
	`ßve_Êags
(
Êags
);

235 
	`˛i
();

236 
ªtvÆ
 = *
m
;

237 *
m
 = 
vÆ
;

238 
	`ª°‹e_Êags
(
Êags
);

239  
ªtvÆ
;

241 
	}
}

243 
	#xchg
(
±r
,
x
Ë((
	`__ty≥of__
(*’å)))
	`__xchg
(()(x),’å),(*’å))))

	)

244 
	#ès
(
±r
Ë(
	`xchg
(’å),1))

	)

246 
__ölöe__
 

247 
	$__xchg
(
x
, vﬁ©ûê* 
±r
, 
size
)

249 
size
) {

251  
	`xchg_u32
(
±r
, 
x
);

253  
x
;

254 
	}
}

256 *
£t_ex˚±_ve˘‹
(
n
, *
addr
);

258 
	$__dõ
(c⁄° *, 
±_ªgs
 *, c⁄° *
whîe
,

259 
löe
Ë
	`__©åibuã__
((
n‹ëu∫
));

260 
	`__dõ_if_kî√l
(c⁄° *, 
±_ªgs
 *, c⁄° *
whîe
,

261 
löe
);

263 
	#dõ
(
msg
, 
ªgs
) \

264 
	`__dõ
(
msg
, 
ªgs
, 
__FILE__
 ":"
__FUNCTION__
, 
__LINE__
)

	)

265 
	#dõ_if_kî√l
(
msg
, 
ªgs
) \

266 
	`__dõ_if_kî√l
(
msg
, 
ªgs
, 
__FILE__
 ":"
__FUNCTION__
, 
__LINE__
)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/types.h

10 #i‚de‡
_ASM_TYPES_H


11 
	#_ASM_TYPES_H


	)

13 
	tumode_t
;

20 
__sig√d__
 
	t__s8
;

21 
	t__u8
;

23 
__sig√d__
 
	t__s16
;

24 
	t__u16
;

26 
__sig√d__
 
	t__s32
;

27 
	t__u32
;

29 #i‡(
_MIPS_SZLONG
 == 64)

31 
__sig√d__
 
	t__s64
;

32 
	t__u64
;

36 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

37 
__sig√d__
 
	t__s64
;

38 
	t__u64
;

46 #ifde‡
__KERNEL__


48 
__sig√d
 
	ts8
;

49 
	tu8
;

51 
__sig√d
 
	ts16
;

52 
	tu16
;

54 
__sig√d
 
	ts32
;

55 
	tu32
;

57 #i‡(
_MIPS_SZLONG
 == 64)

59 
__sig√d__
 
	ts64
;

60 
	tu64
;

64 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

65 
__sig√d__
 
	ts64
;

66 
	tu64
;

71 
	#BITS_PER_LONG
 
_MIPS_SZLONG


	)

73 
	tdma_addr_t
;

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/u-boot.h

24 #i‚de‡
_U_BOOT_H_


25 
	#_U_BOOT_H_
 1

	)

27 
	sbd_öfo
 {

28 
	mbi_baudøã
;

29 
	mbi_ù_addr
;

30 
	mbi_íëaddr
[6];

31 
	mbi_¨ch_numbî
;

32 
	mbi_boŸ_∑øms
;

33 
	mbi_mem°¨t
;

34 
	mbi_memsize
;

35 
	mbi_Êash°¨t
;

36 
	mbi_Êashsize
;

37 
	mbi_Êashoff£t
;

38 } 
	tbd_t
;

39 
	#bi_ív_d©a
 
bi_ív
->
d©a


	)

40 
	#bi_ív_¸c
 
bi_ív
->
¸c


	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/unaligned.h

1 #i‚de‡
_GENERIC_UNALIGNED_H


2 
	#_GENERIC_UNALIGNED_H


	)

4 
	~<asm/byã‹dî.h
>

6 
	~<löux/u«lig√d/À_byãshi·.h
>

7 
	~<löux/u«lig√d/be_byãshi·.h
>

8 
	~<löux/u«lig√d/gíîic.h
>

13 #i‡
deföed
(
__LITTLE_ENDIAN
)

14 
	#gë_u«lig√d
 
__gë_u«lig√d_À


	)

15 
	#put_u«lig√d
 
__put_u«lig√d_À


	)

16 #ñi‡
deföed
(
__BIG_ENDIAN
)

17 
	#gë_u«lig√d
 
__gë_u«lig√d_be


	)

18 
	#put_u«lig√d
 
__put_u«lig√d_be


	)

20 #îr‹ 
övÆid
 
ídün


	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/ata.h

33 #i‚def 
_ATA_H


34 
	#_ATA_H


	)

40 #i‚de‡
CFG_ATA_STRIDE


41 
	#CFG_ATA_STRIDE
 1

	)

44 
	#ATA_IO_DATA
(
x
Ë(
CFG_ATA_DATA_OFFSET
+((xË* 
CFG_ATA_STRIDE
))

	)

45 
	#ATA_IO_REG
(
x
Ë(
CFG_ATA_REG_OFFSET
 +((xË* 
CFG_ATA_STRIDE
))

	)

46 
	#ATA_IO_ALT
(
x
Ë(
CFG_ATA_ALT_OFFSET
 +((xË* 
CFG_ATA_STRIDE
))

	)

51 
	#ATA_DATA_REG
 
	`ATA_IO_DATA
(0)

	)

52 
	#ATA_ERROR_REG
 
	`ATA_IO_REG
(1)

	)

53 
	#ATA_SECT_CNT
 
	`ATA_IO_REG
(2)

	)

54 
	#ATA_SECT_NUM
 
	`ATA_IO_REG
(3)

	)

55 
	#ATA_CYL_LOW
 
	`ATA_IO_REG
(4)

	)

56 
	#ATA_CYL_HIGH
 
	`ATA_IO_REG
(5)

	)

57 
	#ATA_DEV_HD
 
	`ATA_IO_REG
(6)

	)

58 
	#ATA_COMMAND
 
	`ATA_IO_REG
(7)

	)

59 
	#ATA_DATA_EVEN
 
	`ATA_IO_REG
(8)

	)

60 
	#ATA_DATA_ODD
 
	`ATA_IO_REG
(9)

	)

61 
	#ATA_STATUS
 
ATA_COMMAND


	)

62 
	#ATA_DEV_CTL
 
	`ATA_IO_ALT
(6)

	)

63 
	#ATA_LBA_LOW
 
ATA_SECT_NUM


	)

64 
	#ATA_LBA_MID
 
ATA_CYL_LOW


	)

65 
	#ATA_LBA_HIGH
 
ATA_CYL_HIGH


	)

66 
	#ATA_LBA_SEL
 
ATA_DEV_CTL


	)

71 
	#ATA_STAT_BUSY
 0x80

	)

72 
	#ATA_STAT_READY
 0x40

	)

73 
	#ATA_STAT_FAULT
 0x20

	)

74 
	#ATA_STAT_SEEK
 0x10

	)

75 
	#ATA_STAT_DRQ
 0x08

	)

76 
	#ATA_STAT_CORR
 0x04

	)

77 
	#ATA_STAT_INDEX
 0x02

	)

78 
	#ATA_STAT_ERR
 0x01

	)

83 
	#ATA_DEVICE
(
x
Ë((x & 1)<<4)

	)

84 
	#ATA_LBA
 0xE0

	)

89 
	#ATA_CMD_READ
 0x20

	)

90 
	#ATA_CMD_READN
 0x21

	)

91 
	#ATA_CMD_WRITE
 0x30

	)

92 
	#ATA_CMD_WRITEN
 0x31

	)

93 
	#ATA_CMD_VRFY
 0x40

	)

94 
	#ATA_CMD_VRFYN
 0x41

	)

95 
	#ATA_CMD_SEEK
 0x70

	)

96 
	#ATA_CMD_DIAG
 0x90

	)

97 
	#ATA_CMD_INIT
 0x91

	)

98 
	#ATA_CMD_RD_MULT
 0xC4

	)

99 
	#ATA_CMD_WR_MULT
 0xC5

	)

100 
	#ATA_CMD_SETMULT
 0xC6

	)

101 
	#ATA_CMD_RD_DMA
 0xC8

	)

102 
	#ATA_CMD_RD_DMAN
 0xC9

	)

103 
	#ATA_CMD_WR_DMA
 0xCA

	)

104 
	#ATA_CMD_WR_DMAN
 0xCB

	)

105 
	#ATA_CMD_IDENT
 0xEC

	)

106 
	#ATA_CMD_SETF
 0xEF

	)

107 
	#ATA_CMD_CHK_PWR
 0xE5

	)

109 
	#ATA_CMD_READ_EXT
 0x24

	)

110 
	#ATA_CMD_WRITE_EXT
 0x34

	)

111 
	#ATA_CMD_VRFY_EXT
 0x42

	)

116 
	#ATAPI_CMD_IDENT
 0xA1

	)

117 
	#ATAPI_CMD_PACKET
 0xA0

	)

120 
	#ATAPI_CMD_INQUIRY
 0x12

	)

121 
	#ATAPI_CMD_REQ_SENSE
 0x03

	)

122 
	#ATAPI_CMD_READ_CAP
 0x25

	)

123 
	#ATAPI_CMD_START_STOP
 0x1B

	)

124 
	#ATAPI_CMD_READ_12
 0xA8

	)

127 
	#ATA_GET_ERR
(Ë
	`öb
(
ATA_STATUS
)

	)

128 
	#ATA_GET_STAT
(Ë
	`öb
(
ATA_STATUS
)

	)

129 
	#ATA_OK_STAT
(
°©
,
good
,
bad
Ë(((°©)&((good)|(bad)))==(good))

	)

130 
	#ATA_BAD_R_STAT
 (
ATA_STAT_BUSY
 | 
ATA_STAT_ERR
)

	)

131 
	#ATA_BAD_W_STAT
 (
ATA_BAD_R_STAT
 | 
ATA_STAT_FAULT
)

	)

132 
	#ATA_BAD_STAT
 (
ATA_BAD_R_STAT
 | 
ATA_STAT_DRQ
)

	)

133 
	#ATA_DRIVE_READY
 (
ATA_READY_STAT
 | 
ATA_STAT_SEEK
)

	)

134 
	#ATA_DATA_READY
 (
ATA_STAT_DRQ
)

	)

136 
	#ATA_BLOCKSIZE
 512

	)

137 
	#ATA_BLOCKSHIFT
 9

	)

138 
	#ATA_SECTORWORDS
 (512 / ())

	)

140 #i‚de‡
ATA_RESET_TIME


141 
	#ATA_RESET_TIME
 60

	)

149 
	shd_driveid
 {

150 
	mc⁄fig
;

151 
	mcyls
;

152 
	mª£rved2
;

153 
	mhóds
;

154 
	måack_byãs
;

155 
	m£˘‹_byãs
;

156 
	m£˘‹s
;

157 
	mvíd‹0
;

158 
	mvíd‹1
;

159 
	mvíd‹2
;

160 
	m£rül_no
[20];

161 
	mbuf_ty≥
;

162 
	mbuf_size
;

163 
	mecc_byãs
;

164 
	mfw_ªv
[8];

165 
	mmodñ
[40];

166 
	mmax_mu…£˘
;

167 
	mvíd‹3
;

168 
	mdw‹d_io
;

169 
	mvíd‹4
;

170 
	mˇ∑bûôy
;

171 
	mª£rved50
;

172 
	mvíd‹5
;

173 
	mtPIO
;

174 
	mvíd‹6
;

175 
	mtDMA
;

176 
	mfõld_vÆid
;

177 
	mcur_cyls
;

178 
	mcur_hóds
;

179 
	mcur_£˘‹s
;

180 
	mcur_ˇ∑côy0
;

181 
	mcur_ˇ∑côy1
;

182 
	mmu…£˘
;

183 
	mmu…£˘_vÆid
;

184 
	mlba_ˇ∑côy
;

185 
	mdma_1w‹d
;

186 
	mdma_mw‹d
;

187 
	meide_pio_modes
;

188 
	meide_dma_mö
;

189 
	meide_dma_time
;

190 
	meide_pio
;

191 
	meide_pio_i‹dy
;

192 
	mw‹ds69_70
[2];

193 
	mw‹ds71_74
[4];

194 
	mqueue_dïth
;

195 
	mw‹ds76_79
[4];

196 
	mmaj‹_ªv_num
;

197 
	mmö‹_ªv_num
;

198 
	mcomm™d_£t_1
;

199 
	mcomm™d_£t_2
;

200 
	mcfs£
;

201 
	mcfs_íabÀ_1
;

202 
	mcfs_íabÀ_2
;

203 
	mcsf_deÁu…
;

204 
	mdma_u…ø
;

205 
	mw‹d89
;

206 
	mw‹d90
;

207 
	mCurAPMvÆues
;

208 
	mw‹d92
;

209 
	mhw_c⁄fig
;

210 
	mw‹ds94_99
[6];

212 
	mlba48_ˇ∑côy
[4];

213 
	mw‹ds104_125
[22];

214 
	mœ°_lun
;

215 
	mw‹d127
;

216 
	mdlf
;

227 
	mcsfo
;

234 
	mw‹ds130_155
[26];

235 
	mw‹d156
;

236 
	mw‹ds157_159
[3];

237 
	mw‹ds160_255
[95];

238 } 
	thd_driveid_t
;

248 
	mt_£tup
;

249 
	mt_Àngth
;

250 
	mt_hﬁd
;

252 
	tpio_c⁄fig_t
;

254 
	#IDE_MAX_PIO_MODE
 4

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/bedbug/bedbug.h

3 #i‚de‡
_BEDBUG_H


4 
	#_BEDBUG_H


	)

6 #i‚de‡
NULL


7 
	#NULL
 0

	)

10 
	#_USE_PROTOTYPES


	)

12 #i‚de‡
isbœnk


13 
	#isbœnk
(
c
Ë
	`is•a˚
(()(c))

	)

16 #i‚de‡
__P


17 #i‡
deföed
(
_USE_PROTOTYPES
Ë&& (deföed(
__STDC__
Ë|| deföed(
__˝lu•lus
))

18 
	#__P
(
¥Ÿos
Ë¥Ÿo†

	)

20 
	#__P
(
¥Ÿos
Ë(Ë

	)

24 
	#as£π
–
c⁄dôi⁄
 ) if–(c⁄dôi⁄ËË
	`_exô
(0)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/bedbug/ppc.h

3 #i‚de‡
_PPC_H


4 
	#_PPC_H


	)

12 
	eOP_FIELD
 {

13 
	mO_AA
 = 1, 
	mO_BD
, 
	mO_BI
, 
	mO_BO
, 
	mO_¸bD
, 
	mO_¸bA
, 
	mO_¸bB
, 
	mO_CRM
, 
	mO_d
, 
	mO_‰C
, 
	mO_‰D
,

14 
	mO_‰S
, 
	mO_IMM
, 
	mO_LI
, 
	mO_LK
, 
	mO_MB
, 
	mO_ME
, 
	mO_NB
, 
	mO_OE
, 
	mO_rA
, 
	mO_rB
, 
	mO_Rc
, 
	mO_rD
,

15 
	mO_rS
, 
	mO_SH
, 
	mO_SIMM
, 
	mO_SR
, 
	mO_TO
, 
	mO_UIMM
, 
	mO_¸fD
, 
	mO_¸fS
, 
	mO_L
, 
	mO_•r
, 
	mO_tbr
,

16 
	mO_¸2
 };

18 
	s›î™d
 {

19 
OP_FIELD
 
	mfõld
;

22 * 
	m«me
;

24 
	mbôs
;

27 
	mshi·
;

32 
	mhöt
;

39 
	#OH_SILENT
 0x01

	)

40 
	#OH_ADDR
 0x02

	)

41 
	#OH_REG
 0x04

	)

42 
	#OH_SPR
 0x08

	)

43 
	#OH_TBR
 0x10

	)

44 
	#OH_OFFSET
 0x20

	)

45 
	#OH_LITERAL
 0x40

	)

59 
	#GET_OPCD
(
i
Ë((()(iË>> 26Ë& 0x3f)

	)

60 
	#MAKE_OPCODE
(
i
Ë(((()(i)Ë& 0x3fË<< 26)

	)

74 
	#I_OPCODE
(
i
,
Ø
,
lk
Ë(
	`MAKE_OPCODE
(iË| ((◊aË& 0x1Ë<< 1Ë| (÷kË& 0x1))

	)

75 
	#I_MASK
 
	`I_OPCODE
(0x3f,0x1,0x1)

	)

85 
	#B_OPCODE
(
i
,
Ø
,
lk
Ë(
	`MAKE_OPCODE
(iË| ((◊aË& 0x1Ë<< 1Ë| (÷kË& 0x1))

	)

86 
	#B_MASK
 
	`B_OPCODE
(0x3f,0x1,0x1)

	)

96 
	#SC_OPCODE
(
i
Ë(
	`MAKE_OPCODE
(iË| 0x2)

	)

97 
	#SC_MASK
 
	`SC_OPCODE
(0x3f)

	)

116 
	#D_OPCODE
(
i
Ë
	`MAKE_OPCODE
(i)

	)

117 
	#D_MASK
 
	`MAKE_OPCODE
(0x3f)

	)

128 
	#DS_OPCODE
(
i
,
xo
Ë(
	`MAKE_OPCODE
(iË| ((xoË& 0x3))

	)

129 
	#DS_MASK
 
	`DS_OPCODE
(0x3f,0x1)

	)

171 
	#X_OPCODE
(
i
,
xo
,
rc
Ë(
	`MAKE_OPCODE
(i) | (((xo) & 0x3ff) << 1) | \

172 ((
rc
Ë& 0x1))

	)

173 
	#X_MASK
 
	`X_OPCODE
(0x3f,0x3ff,0x1)

	)

187 
	#XL_OPCODE
(
i
,
xo
,
lk
Ë(
	`MAKE_OPCODE
(i) | (((xo) & 0x3ff) << 1) | \

188 ((
lk
Ë& 0x1))

	)

189 
	#XL_MASK
 
	`XL_OPCODE
(0x3f,0x3ff,0x1)

	)

202 
	#XFX_OPCODE
(
i
,
xo
,
rc
Ë(
	`MAKE_OPCODE
(i) | (((xo) & 0x3ff) << 1) | \

203 ((
rc
Ë& 0x1))

	)

204 
	#XFX_MASK
 
	`XFX_OPCODE
(0x3f,0x3ff,0x1)

	)

214 
	#XFL_OPCODE
(
i
,
xo
,
rc
Ë(
	`MAKE_OPCODE
(i) | (((xo) & 0x3ff) << 1) | \

215 ((
rc
Ë& 0x1))

	)

216 
	#XFL_MASK
 
	`XFL_OPCODE
(0x3f,0x3ff,0x1)

	)

226 
	#XS_OPCODE
(
i
,
xo
,
rc
Ë(
	`MAKE_OPCODE
(i) | (((xo) & 0x1ff) << 2) | \

227 ((
rc
Ë& 0x1))

	)

228 
	#XS_MASK
 
	`XS_OPCODE
(0x3f,0x1ff,0x1)

	)

242 
	#XO_OPCODE
(
i
,
xo
,
€
,
rc
Ë(
	`MAKE_OPCODE
(i) | (((oe) & 0x1) << 10) | \

243 (((
xo
Ë& 0x1ffË<< 1Ë| ((
rc
Ë& 0x1))

	)

244 
	#XO_MASK
 
	`XO_OPCODE
(0x3f,0x1ff,0x1,0x1)

	)

257 
	#A_OPCODE
(
i
,
xo
,
rc
Ë(
	`MAKE_OPCODE
(i) | (((xo) & 0x1f) << 1) | \

258 ((
rc
Ë& 0x1))

	)

259 
	#A_MASK
 
	`A_OPCODE
(0x3f,0x1f,0x1)

	)

270 
	#M_OPCODE
(
i
,
rc
Ë(
	`MAKE_OPCODE
(iË| (‘cË& 0x1))

	)

271 
	#M_MASK
 
	`M_OPCODE
(0x3f,0x1)

	)

282 
	#MD_OPCODE
(
i
,
xo
,
rc
Ë(
	`MAKE_OPCODE
(i) | (((xo) & 0x7) << 2) | \

283 ((
rc
Ë& 0x1))

	)

284 
	#MD_MASK
 
	`MD_OPCODE
(0x3f,0x7,0x1)

	)

295 
	#MDS_OPCODE
(
i
,
xo
,
rc
Ë(
	`MAKE_OPCODE
(i) | (((xo) & 0xf) << 1) | \

296 ((
rc
Ë& 0x1))

	)

297 
	#MDS_MASK
 
	`MDS_OPCODE
(0x3f,0xf,0x1)

	)

299 #i‚de‡
FALSE


300 
	#FALSE
 0

	)

301 
	#TRUE
 (!
FALSE
)

	)

304 
	#INSTRUCTION
–
memaddr
 ) 
	`¡ohl
(*(*)(memaddr))

	)

306 
	#MAX_OPERANDS
 8

	)

308 
	gµc_˘x
;

310 
	s›code
 {

311 
	m›code
;

314 
	mmask
;

318 
OP_FIELD
 
	mfõlds
[
MAX_OPERANDS
];

323 (*
	mhfunc
)(
	mµc_˘x
 *);

327 * 
	m«me
;

329 
	mhöt
;

336 
	#H_RELATIVE
 0x1

	)

337 
	#H_IMM_HIGH
 0x2

	)

338 
	#H_RA0_IS_0
 0x4

	)

340 
	sµc_˘x
 {

341 
›code
 * 
	m›
;

342 
	mö°r
;

343 
	mÊags
;

344 
	md©Æí
;

345 
	md©a
[ 256 ];

346 
	mødix_fmt
[ 8 ];

347 * 
	mvútuÆ
;

358 
	#F_RADOCTAL
 0x1

	)

359 
	#F_RADUDECIMAL
 0x2

	)

360 
	#F_RADSDECIMAL
 0x4

	)

361 
	#F_RADHEX
 0x8

	)

362 
	#F_SIMPLE
 0x10

	)

363 
	#F_SYMBOL
 0x20

	)

364 
	#F_INSTR
 0x40

	)

365 
	#F_LOCALMEM
 0x80

	)

367 
	#F_LINENO
 0x100

	)

368 
	#F_VALIDONLY
 0x200

	)

371 
	#E_ASM_BAD_OPCODE
 1

	)

372 
	#E_ASM_NUM_OPERANDS
 2

	)

373 
	#E_ASM_BAD_REGISTER
 3

	)

374 
	#E_ASM_BAD_SPR
 4

	)

375 
	#E_ASM_BAD_TBR
 5

	)

377 
di•pc
 
__P
((*,*,,

379 
¥öt_sour˚_löe
 
	`__P
((*,*,,

380 (*
pfunc
)(const *)));

381 
föd_√xt_addªss
 
	`__P
((*,,
±_ªgs
 *));

382 
h™dÀ_bc
 
	`__P
((
µc_˘x
 *));

383 
asmµc
 
	`__P
((,*,*));

384 *
asm_îr‹_°r
 
	`__P
(());

392 
›î™d
 
›î™ds
[];

393 c⁄° 
n_›î™ds
;

394 
›code
 
›codes
[];

395 c⁄° 
n_›codes
;

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/bedbug/regs.h

3 #i‚de‡
_REGS_H


4 
	#_REGS_H


	)

8 
	#SPR_CR
 -1

	)

9 
	#SPR_MSR
 -2

	)

11 
	#SPR_XER
 1

	)

12 
	#SPR_LR
 8

	)

13 
	#SPR_CTR
 9

	)

14 
	#SPR_DSISR
 18

	)

15 
	#SPR_DAR
 19

	)

16 
	#SPR_DEC
 22

	)

17 
	#SPR_SRR0
 26

	)

18 
	#SPR_SRR1
 27

	)

19 
	#SPR_EIE
 80

	)

20 
	#SPR_EID
 81

	)

21 
	#SPR_CMPA
 144

	)

22 
	#SPR_CMPB
 145

	)

23 
	#SPR_CMPC
 146

	)

24 
	#SPR_CMPD
 147

	)

25 
	#SPR_ICR
 148

	)

26 
	#SPR_DER
 149

	)

27 
	#SPR_COUNTA
 150

	)

28 
	#SPR_COUNTB
 151

	)

29 
	#SPR_CMPE
 152

	)

30 
	#SPR_CMPF
 153

	)

31 
	#SPR_CMPG
 154

	)

32 
	#SPR_CMPH
 155

	)

33 
	#SPR_LCTRL1
 156

	)

34 
	#SPR_LCTRL2
 157

	)

35 
	#SPR_ICTRL
 158

	)

36 
	#SPR_BAR
 159

	)

37 
	#SPR_USPRG0
 256

	)

38 
	#SPR_SPRG4_RO
 260

	)

39 
	#SPR_SPRG5_RO
 261

	)

40 
	#SPR_SPRG6_RO
 262

	)

41 
	#SPR_SPRG7_RO
 263

	)

42 
	#SPR_SPRG0
 272

	)

43 
	#SPR_SPRG1
 273

	)

44 
	#SPR_SPRG2
 274

	)

45 
	#SPR_SPRG3
 275

	)

46 
	#SPR_SPRG4
 276

	)

47 
	#SPR_SPRG5
 277

	)

48 
	#SPR_SPRG6
 278

	)

49 
	#SPR_SPRG7
 279

	)

50 
	#SPR_EAR
 282

	)

51 
	#SPR_TBL
 284

	)

52 
	#SPR_TBU
 285

	)

53 
	#SPR_PVR
 287

	)

54 
	#SPR_IC_CST
 560

	)

55 
	#SPR_IC_ADR
 561

	)

56 
	#SPR_IC_DAT
 562

	)

57 
	#SPR_DC_CST
 568

	)

58 
	#SPR_DC_ADR
 569

	)

59 
	#SPR_DC_DAT
 570

	)

60 
	#SPR_DPDR
 630

	)

61 
	#SPR_IMMR
 638

	)

62 
	#SPR_MI_CTR
 784

	)

63 
	#SPR_MI_AP
 786

	)

64 
	#SPR_MI_EPN
 787

	)

65 
	#SPR_MI_TWC
 789

	)

66 
	#SPR_MI_RPN
 790

	)

67 
	#SPR_MD_CTR
 792

	)

68 
	#SPR_M_CASID
 793

	)

69 
	#SPR_MD_AP
 794

	)

70 
	#SPR_MD_EPN
 795

	)

71 
	#SPR_M_TWB
 796

	)

72 
	#SPR_MD_TWC
 797

	)

73 
	#SPR_MD_RPN
 798

	)

74 
	#SPR_M_TW
 799

	)

75 
	#SPR_MI_DBCAM
 816

	)

76 
	#SPR_MI_DBRAM0
 817

	)

77 
	#SPR_MI_DBRAM1
 818

	)

78 
	#SPR_MD_DBCAM
 824

	)

79 
	#SPR_MD_DBRAM0
 825

	)

80 
	#SPR_MD_DBRAM1
 826

	)

81 
	#SPR_ZPR
 944

	)

82 
	#SPR_PID
 945

	)

83 
	#SPR_CCR0
 947

	)

84 
	#SPR_IAC3
 948

	)

85 
	#SPR_IAC4
 949

	)

86 
	#SPR_DVC1
 950

	)

87 
	#SPR_DVC2
 951

	)

88 
	#SPR_SGR
 953

	)

89 
	#SPR_DCWR
 954

	)

90 
	#SPR_SLER
 955

	)

91 
	#SPR_SU0R
 956

	)

92 
	#SPR_DBCR1
 957

	)

93 
	#SPR_ICDBDR
 979

	)

94 
	#SPR_ESR
 980

	)

95 
	#SPR_DEAR
 981

	)

96 
	#SPR_EVPR
 982

	)

97 
	#SPR_TSR
 984

	)

98 
	#SPR_TCR
 986

	)

99 
	#SPR_PIT
 987

	)

100 
	#SPR_SRR2
 990

	)

101 
	#SPR_SRR3
 991

	)

102 
	#SPR_DBSR
 1008

	)

103 
	#SPR_DBCR0
 1010

	)

104 
	#SPR_IABR
 1010

	)

105 
	#SPR_IAC1
 1012

	)

106 
	#SPR_IAC2
 1013

	)

107 
	#SPR_DAC1
 1014

	)

108 
	#SPR_DAC2
 1015

	)

109 
	#SPR_DCCR
 1018

	)

110 
	#SPR_ICCR
 1019

	)

113 
	#DBCR0_EDM
 0x80000000

	)

114 
	#DBCR0_IDM
 0x40000000

	)

115 
	#DBCR0_RST
 0x30000000

	)

116 
	#DBCR0_IC
 0x08000000

	)

117 
	#DBCR0_BT
 0x04000000

	)

118 
	#DBCR0_EDE
 0x02000000

	)

119 
	#DBCR0_TDE
 0x01000000

	)

120 
	#DBCR0_IA1
 0x00800000

	)

121 
	#DBCR0_IA2
 0x00400000

	)

122 
	#DBCR0_IA12
 0x00200000

	)

123 
	#DBCR0_IA12X
 0x00100000

	)

124 
	#DBCR0_IA3
 0x00080000

	)

125 
	#DBCR0_IA4
 0x00040000

	)

126 
	#DBCR0_IA34
 0x00020000

	)

127 
	#DBCR0_IA34X
 0x00010000

	)

128 
	#DBCR0_IA12T
 0x00008000

	)

129 
	#DBCR0_IA34T
 0x00004000

	)

130 
	#DBCR0_FT
 0x00000001

	)

133 
	#DBCR1_D1R
 0x80000000

	)

134 
	#DBCR1_D2R
 0x40000000

	)

135 
	#DBCR1_D1W
 0x20000000

	)

136 
	#DBCR1_D2W
 0x10000000

	)

137 
	#DBCR1_D1S
 0x0C000000

	)

138 
	#DBCR1_D2S
 0x03000000

	)

139 
	#DBCR1_DA12
 0x00800000

	)

140 
	#DBCR1_DA12X
 0x00400000

	)

141 
	#DBCR1_DV1M
 0x000C0000

	)

142 
	#DBCR1_DV2M
 0x00030000

	)

143 
	#DBCR1_DV1BE
 0x0000F000

	)

144 
	#DBCR1_DV2BE
 0x00000F00

	)

147 
	#DBSR_IC
 0x80000000

	)

148 
	#DBSR_BT
 0x40000000

	)

149 
	#DBSR_EDE
 0x20000000

	)

150 
	#DBSR_TIE
 0x10000000

	)

151 
	#DBSR_UDE
 0x08000000

	)

152 
	#DBSR_IA1
 0x04000000

	)

153 
	#DBSR_IA2
 0x02000000

	)

154 
	#DBSR_DR1
 0x01000000

	)

155 
	#DBSR_DW1
 0x00800000

	)

156 
	#DBSR_DR2
 0x00400000

	)

157 
	#DBSR_DW2
 0x00200000

	)

158 
	#DBSR_IDE
 0x00100000

	)

159 
	#DBSR_IA3
 0x00080000

	)

160 
	#DBSR_IA4
 0x00040000

	)

161 
	#DBSR_MRR
 0x00000300

	)

163 
	s•r_öfo
 {

164 
	m•r_vÆ
;

165 
	m•r_«me
[ 10 ];

168 
•r_öfo
 
•r_m≠
[];

169 c⁄° 
n_•rs
;

172 
	#SET_REGISTER
–
°r
, 
vÆ
 ) \

173 ({ 
__vÆue
 = (
vÆ
); \

174 
asm
 vﬁ©ûe–
°r
 : : "r" (
__vÆue
)); \

175 
__vÆue
; })

	)

177 
	#GET_REGISTER
–
°r
 ) \

178 ({ 
__vÆue
; \

179 
asm
 vﬁ©ûe–
°r
 : "Ù" (
__vÆue
) : ); \

180 
__vÆue
; })

	)

182 
	#GET_CR
(Ë
	`GET_REGISTER
–"mf¸ %0" )

	)

183 
	#SET_CR
(
vÆ
Ë
	`SET_REGISTER
–"mt¸ %0", vÆ )

	)

184 
	#GET_MSR
(Ë
	`GET_REGISTER
–"mfm§ %0" )

	)

185 
	#SET_MSR
(
vÆ
Ë
	`SET_REGISTER
–"mtm§ %0", vÆ )

	)

186 
	#GET_XER
(Ë
	`GET_REGISTER
–"mf•∏%0,1" )

	)

187 
	#SET_XER
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏1,%0", vÆ )

	)

188 
	#GET_LR
(Ë
	`GET_REGISTER
–"mf•∏%0,8" )

	)

189 
	#SET_LR
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏8,%0", vÆ )

	)

190 
	#GET_CTR
(Ë
	`GET_REGISTER
–"mf•∏%0,9" )

	)

191 
	#SET_CTR
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏9,%0", vÆ )

	)

192 
	#GET_DSISR
(Ë
	`GET_REGISTER
–"mf•∏%0,18" )

	)

193 
	#SET_DSISR
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏18,%0", vÆ )

	)

194 
	#GET_DAR
(Ë
	`GET_REGISTER
–"mf•∏%0,19" )

	)

195 
	#SET_DAR
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏19,%0", vÆ )

	)

196 
	#GET_DEC
(Ë
	`GET_REGISTER
–"mf•∏%0,22" )

	)

197 
	#SET_DEC
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏22,%0", vÆ )

	)

198 
	#GET_SRR0
(Ë
	`GET_REGISTER
–"mf•∏%0,26" )

	)

199 
	#SET_SRR0
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏26,%0", vÆ )

	)

200 
	#GET_SRR1
(Ë
	`GET_REGISTER
–"mf•∏%0,27" )

	)

201 
	#SET_SRR1
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏27,%0", vÆ )

	)

202 
	#GET_EIE
(Ë
	`GET_REGISTER
–"mf•∏%0,80" )

	)

203 
	#SET_EIE
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏80,%0", vÆ )

	)

204 
	#GET_EID
(Ë
	`GET_REGISTER
–"mf•∏%0,81" )

	)

205 
	#SET_EID
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏81,%0", vÆ )

	)

206 
	#GET_CMPA
(Ë
	`GET_REGISTER
–"mf•∏%0,144" )

	)

207 
	#SET_CMPA
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏144,%0", vÆ )

	)

208 
	#GET_CMPB
(Ë
	`GET_REGISTER
–"mf•∏%0,145" )

	)

209 
	#SET_CMPB
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏145,%0", vÆ )

	)

210 
	#GET_CMPC
(Ë
	`GET_REGISTER
–"mf•∏%0,146" )

	)

211 
	#SET_CMPC
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏146,%0", vÆ )

	)

212 
	#GET_CMPD
(Ë
	`GET_REGISTER
–"mf•∏%0,147" )

	)

213 
	#SET_CMPD
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏147,%0", vÆ )

	)

214 
	#GET_ICR
(Ë
	`GET_REGISTER
–"mf•∏%0,148" )

	)

215 
	#SET_ICR
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏148,%0", vÆ )

	)

216 
	#GET_DER
(Ë
	`GET_REGISTER
–"mf•∏%0,149" )

	)

217 
	#SET_DER
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏149,%0", vÆ )

	)

218 
	#GET_COUNTA
(Ë
	`GET_REGISTER
–"mf•∏%0,150" )

	)

219 
	#SET_COUNTA
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏150,%0", vÆ )

	)

220 
	#GET_COUNTB
(Ë
	`GET_REGISTER
–"mf•∏%0,151" )

	)

221 
	#SET_COUNTB
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏151,%0", vÆ )

	)

222 
	#GET_CMPE
(Ë
	`GET_REGISTER
–"mf•∏%0,152" )

	)

223 
	#SET_CMPE
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏152,%0", vÆ )

	)

224 
	#GET_CMPF
(Ë
	`GET_REGISTER
–"mf•∏%0,153" )

	)

225 
	#SET_CMPF
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏153,%0", vÆ )

	)

226 
	#GET_CMPG
(Ë
	`GET_REGISTER
–"mf•∏%0,154" )

	)

227 
	#SET_CMPG
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏154,%0", vÆ )

	)

228 
	#GET_CMPH
(Ë
	`GET_REGISTER
–"mf•∏%0,155" )

	)

229 
	#SET_CMPH
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏155,%0", vÆ )

	)

230 
	#GET_LCTRL1
(Ë
	`GET_REGISTER
–"mf•∏%0,156" )

	)

231 
	#SET_LCTRL1
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏156,%0", vÆ )

	)

232 
	#GET_LCTRL2
(Ë
	`GET_REGISTER
–"mf•∏%0,157" )

	)

233 
	#SET_LCTRL2
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏157,%0", vÆ )

	)

234 
	#GET_ICTRL
(Ë
	`GET_REGISTER
–"mf•∏%0,158" )

	)

235 
	#SET_ICTRL
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏158,%0", vÆ )

	)

236 
	#GET_BAR
(Ë
	`GET_REGISTER
–"mf•∏%0,159" )

	)

237 
	#SET_BAR
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏159,%0", vÆ )

	)

238 
	#GET_USPRG0
(Ë
	`GET_REGISTER
–"mf•∏%0,256" )

	)

239 
	#SET_USPRG0
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏256,%0", vÆ )

	)

240 
	#GET_SPRG4_RO
(Ë
	`GET_REGISTER
–"mf•∏%0,260" )

	)

241 
	#SET_SPRG4_RO
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏260,%0", vÆ )

	)

242 
	#GET_SPRG5_RO
(Ë
	`GET_REGISTER
–"mf•∏%0,261" )

	)

243 
	#SET_SPRG5_RO
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏261,%0", vÆ )

	)

244 
	#GET_SPRG6_RO
(Ë
	`GET_REGISTER
–"mf•∏%0,262" )

	)

245 
	#SET_SPRG6_RO
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏262,%0", vÆ )

	)

246 
	#GET_SPRG7_RO
(Ë
	`GET_REGISTER
–"mf•∏%0,263" )

	)

247 
	#SET_SPRG7_RO
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏263,%0", vÆ )

	)

248 
	#GET_SPRG0
(Ë
	`GET_REGISTER
–"mf•∏%0,272" )

	)

249 
	#SET_SPRG0
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏272,%0", vÆ )

	)

250 
	#GET_SPRG1
(Ë
	`GET_REGISTER
–"mf•∏%0,273" )

	)

251 
	#SET_SPRG1
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏273,%0", vÆ )

	)

252 
	#GET_SPRG2
(Ë
	`GET_REGISTER
–"mf•∏%0,274" )

	)

253 
	#SET_SPRG2
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏274,%0", vÆ )

	)

254 
	#GET_SPRG3
(Ë
	`GET_REGISTER
–"mf•∏%0,275" )

	)

255 
	#SET_SPRG3
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏275,%0", vÆ )

	)

256 
	#GET_SPRG4
(Ë
	`GET_REGISTER
–"mf•∏%0,276" )

	)

257 
	#SET_SPRG4
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏276,%0", vÆ )

	)

258 
	#GET_SPRG5
(Ë
	`GET_REGISTER
–"mf•∏%0,277" )

	)

259 
	#SET_SPRG5
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏277,%0", vÆ )

	)

260 
	#GET_SPRG6
(Ë
	`GET_REGISTER
–"mf•∏%0,278" )

	)

261 
	#SET_SPRG6
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏278,%0", vÆ )

	)

262 
	#GET_SPRG7
(Ë
	`GET_REGISTER
–"mf•∏%0,279" )

	)

263 
	#SET_SPRG7
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏279,%0", vÆ )

	)

264 
	#GET_EAR
(Ë
	`GET_REGISTER
–"mf•∏%0,282" )

	)

265 
	#SET_EAR
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏282,%0", vÆ )

	)

266 
	#GET_TBL
(Ë
	`GET_REGISTER
–"mf•∏%0,284" )

	)

267 
	#SET_TBL
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏284,%0", vÆ )

	)

268 
	#GET_TBU
(Ë
	`GET_REGISTER
–"mf•∏%0,285" )

	)

269 
	#SET_TBU
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏285,%0", vÆ )

	)

270 
	#GET_PVR
(Ë
	`GET_REGISTER
–"mf•∏%0,287" )

	)

271 
	#SET_PVR
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏287,%0", vÆ )

	)

272 
	#GET_IC_CST
(Ë
	`GET_REGISTER
–"mf•∏%0,560" )

	)

273 
	#SET_IC_CST
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏560,%0", vÆ )

	)

274 
	#GET_IC_ADR
(Ë
	`GET_REGISTER
–"mf•∏%0,561" )

	)

275 
	#SET_IC_ADR
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏561,%0", vÆ )

	)

276 
	#GET_IC_DAT
(Ë
	`GET_REGISTER
–"mf•∏%0,562" )

	)

277 
	#SET_IC_DAT
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏562,%0", vÆ )

	)

278 
	#GET_DC_CST
(Ë
	`GET_REGISTER
–"mf•∏%0,568" )

	)

279 
	#SET_DC_CST
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏568,%0", vÆ )

	)

280 
	#GET_DC_ADR
(Ë
	`GET_REGISTER
–"mf•∏%0,569" )

	)

281 
	#SET_DC_ADR
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏569,%0", vÆ )

	)

282 
	#GET_DC_DAT
(Ë
	`GET_REGISTER
–"mf•∏%0,570" )

	)

283 
	#SET_DC_DAT
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏570,%0", vÆ )

	)

284 
	#GET_DPDR
(Ë
	`GET_REGISTER
–"mf•∏%0,630" )

	)

285 
	#SET_DPDR
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏630,%0", vÆ )

	)

286 
	#GET_IMMR
(Ë
	`GET_REGISTER
–"mf•∏%0,638" )

	)

287 
	#SET_IMMR
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏638,%0", vÆ )

	)

288 
	#GET_MI_CTR
(Ë
	`GET_REGISTER
–"mf•∏%0,784" )

	)

289 
	#SET_MI_CTR
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏784,%0", vÆ )

	)

290 
	#GET_MI_AP
(Ë
	`GET_REGISTER
–"mf•∏%0,786" )

	)

291 
	#SET_MI_AP
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏786,%0", vÆ )

	)

292 
	#GET_MI_EPN
(Ë
	`GET_REGISTER
–"mf•∏%0,787" )

	)

293 
	#SET_MI_EPN
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏787,%0", vÆ )

	)

294 
	#GET_MI_TWC
(Ë
	`GET_REGISTER
–"mf•∏%0,789" )

	)

295 
	#SET_MI_TWC
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏789,%0", vÆ )

	)

296 
	#GET_MI_RPN
(Ë
	`GET_REGISTER
–"mf•∏%0,790" )

	)

297 
	#SET_MI_RPN
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏790,%0", vÆ )

	)

298 
	#GET_MD_CTR
(Ë
	`GET_REGISTER
–"mf•∏%0,792" )

	)

299 
	#SET_MD_CTR
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏792,%0", vÆ )

	)

300 
	#GET_M_CASID
(Ë
	`GET_REGISTER
–"mf•∏%0,793" )

	)

301 
	#SET_M_CASID
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏793,%0", vÆ )

	)

302 
	#GET_MD_AP
(Ë
	`GET_REGISTER
–"mf•∏%0,794" )

	)

303 
	#SET_MD_AP
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏,794%0", vÆ )

	)

304 
	#GET_MD_EPN
(Ë
	`GET_REGISTER
–"mf•∏%0,795" )

	)

305 
	#SET_MD_EPN
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏795,%0", vÆ )

	)

306 
	#GET_M_TWB
(Ë
	`GET_REGISTER
–"mf•∏%0,796" )

	)

307 
	#SET_M_TWB
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏796,%0", vÆ )

	)

308 
	#GET_MD_TWC
(Ë
	`GET_REGISTER
–"mf•∏%0,797" )

	)

309 
	#SET_MD_TWC
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏797,%0", vÆ )

	)

310 
	#GET_MD_RPN
(Ë
	`GET_REGISTER
–"mf•∏%0,798" )

	)

311 
	#SET_MD_RPN
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏798,%0", vÆ )

	)

312 
	#GET_M_TW
(Ë
	`GET_REGISTER
–"mf•∏%0,799" )

	)

313 
	#SET_M_TW
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏799,%0", vÆ )

	)

314 
	#GET_MI_DBCAM
(Ë
	`GET_REGISTER
–"mf•∏%0,816" )

	)

315 
	#SET_MI_DBCAM
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏816,%0", vÆ )

	)

316 
	#GET_MI_DBRAM0
(Ë
	`GET_REGISTER
–"mf•∏%0,817" )

	)

317 
	#SET_MI_DBRAM0
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏817,%0", vÆ )

	)

318 
	#GET_MI_DBRAM1
(Ë
	`GET_REGISTER
–"mf•∏%0,818" )

	)

319 
	#SET_MI_DBRAM1
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏818,%0", vÆ )

	)

320 
	#GET_MD_DBCAM
(Ë
	`GET_REGISTER
–"mf•∏%0,824" )

	)

321 
	#SET_MD_DBCA
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏824,%0", vÆ )

	)

322 
	#GET_MD_DBRAM0
(Ë
	`GET_REGISTER
–"mf•∏%0,825" )

	)

323 
	#SET_MD_DBRAM0
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏825,%0", vÆ )

	)

324 
	#GET_MD_DBRAM1
(Ë
	`GET_REGISTER
–"mf•∏%0,826" )

	)

325 
	#SET_MD_DBRAM1
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏826,%0", vÆ )

	)

326 
	#GET_ZPR
(Ë
	`GET_REGISTER
–"mf•∏%0,944" )

	)

327 
	#SET_ZPR
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏944,%0", vÆ )

	)

328 
	#GET_PID
(Ë
	`GET_REGISTER
–"mf•∏%0,945" )

	)

329 
	#SET_PID
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏945,%0", vÆ )

	)

330 
	#GET_CCR0
(Ë
	`GET_REGISTER
–"mf•∏%0,947" )

	)

331 
	#SET_CCR0
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏947,%0", vÆ )

	)

332 
	#GET_IAC3
(Ë
	`GET_REGISTER
–"mf•∏%0,948" )

	)

333 
	#SET_IAC3
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏948,%0", vÆ )

	)

334 
	#GET_IAC4
(Ë
	`GET_REGISTER
–"mf•∏%0,949" )

	)

335 
	#SET_IAC4
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏949,%0", vÆ )

	)

336 
	#GET_DVC1
(Ë
	`GET_REGISTER
–"mf•∏%0,950" )

	)

337 
	#SET_DVC1
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏950,%0", vÆ )

	)

338 
	#GET_DVC2
(Ë
	`GET_REGISTER
–"mf•∏%0,951" )

	)

339 
	#SET_DVC2
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏951,%0", vÆ )

	)

340 
	#GET_SGR
(Ë
	`GET_REGISTER
–"mf•∏%0,953" )

	)

341 
	#SET_SGR
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏953,%0", vÆ )

	)

342 
	#GET_DCWR
(Ë
	`GET_REGISTER
–"mf•∏%0,954" )

	)

343 
	#SET_DCWR
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏954,%0", vÆ )

	)

344 
	#GET_SLER
(Ë
	`GET_REGISTER
–"mf•∏%0,955" )

	)

345 
	#SET_SLER
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏955,%0", vÆ )

	)

346 
	#GET_SU0R
(Ë
	`GET_REGISTER
–"mf•∏%0,956" )

	)

347 
	#SET_SU0R
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏956,%0", vÆ )

	)

348 
	#GET_DBCR1
(Ë
	`GET_REGISTER
–"mf•∏%0,957" )

	)

349 
	#SET_DBCR1
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏957,%0", vÆ )

	)

350 
	#GET_ICDBDR
(Ë
	`GET_REGISTER
–"mf•∏%0,979" )

	)

351 
	#SET_ICDBDR
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏979,%0", vÆ )

	)

352 
	#GET_ESR
(Ë
	`GET_REGISTER
–"mf•∏%0,980" )

	)

353 
	#SET_ESR
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏980,%0", vÆ )

	)

354 
	#GET_DEAR
(Ë
	`GET_REGISTER
–"mf•∏%0,981" )

	)

355 
	#SET_DEAR
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏981,%0", vÆ )

	)

356 
	#GET_EVPR
(Ë
	`GET_REGISTER
–"mf•∏%0,982" )

	)

357 
	#SET_EVPR
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏982,%0", vÆ )

	)

358 
	#GET_TSR
(Ë
	`GET_REGISTER
–"mf•∏%0,984" )

	)

359 
	#SET_TSR
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏984,%0", vÆ )

	)

360 
	#GET_TCR
(Ë
	`GET_REGISTER
–"mf•∏%0,986" )

	)

361 
	#SET_TCR
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏986,%0", vÆ )

	)

362 
	#GET_PIT
(Ë
	`GET_REGISTER
–"mf•∏%0,987" )

	)

363 
	#SET_PIT
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏987,%0", vÆ )

	)

364 
	#GET_SRR2
(Ë
	`GET_REGISTER
–"mf•∏%0,990" )

	)

365 
	#SET_SRR2
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏990,%0", vÆ )

	)

366 
	#GET_SRR3
(Ë
	`GET_REGISTER
–"mf•∏%0,991" )

	)

367 
	#SET_SRR3
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏991,%0", vÆ )

	)

368 
	#GET_DBSR
(Ë
	`GET_REGISTER
–"mf•∏%0,1008" )

	)

369 
	#SET_DBSR
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏1008,%0", vÆ )

	)

370 
	#GET_DBCR0
(Ë
	`GET_REGISTER
–"mf•∏%0,1010" )

	)

371 
	#SET_DBCR0
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏1010,%0", vÆ )

	)

372 
	#GET_IABR
(Ë
	`GET_REGISTER
–"mf•∏%0,1010" )

	)

373 
	#SET_IABR
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏1010,%0", vÆ )

	)

374 
	#GET_IAC1
(Ë
	`GET_REGISTER
–"mf•∏%0,1012" )

	)

375 
	#SET_IAC1
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏1012,%0", vÆ )

	)

376 
	#GET_IAC2
(Ë
	`GET_REGISTER
–"mf•∏%0,1013" )

	)

377 
	#SET_IAC2
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏1013,%0", vÆ )

	)

378 
	#GET_DAC1
(Ë
	`GET_REGISTER
–"mf•∏%0,1014" )

	)

379 
	#SET_DAC1
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏1014,%0", vÆ )

	)

380 
	#GET_DAC2
(Ë
	`GET_REGISTER
–"mf•∏%0,1015" )

	)

381 
	#SET_DAC2
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏1015,%0", vÆ )

	)

382 
	#GET_DCCR
(Ë
	`GET_REGISTER
–"mf•∏%0,1018" )

	)

383 
	#SET_DCCR
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏1018,%0", vÆ )

	)

384 
	#GET_ICCR
(Ë
	`GET_REGISTER
–"mf•∏%0,1019" )

	)

385 
	#SET_ICCR
(
vÆ
Ë
	`SET_REGISTER
–"mt•∏1019,%0", vÆ )

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/bedbug/tables.h

3 #i‚de‡
TABLES_H


4 
	#TABLES_H


	)

14 
›î™d
 
	g›î™ds
[] = {

17 { 
O_AA
, "O_AA", 1, 1, 
OH_SILENT
 },

18 { 
O_BD
, "O_BD", 14, 2, 
OH_ADDR
 },

19 { 
O_BI
, "O_BI", 5, 16, 0 },

20 { 
O_BO
, "O_BO", 5, 21, 0 },

21 { 
O_¸bD
, "O_crbD", 5, 21, 0 },

22 { 
O_¸bA
, "O_crbA", 5, 16, 0 },

23 { 
O_¸bB
, "O_crbB", 5, 11, 0 },

24 { 
O_CRM
, "O_CRM", 8, 12, 0 },

25 { 
O_d
, "O_d", 15, 0, 
OH_OFFSET
 },

26 { 
O_‰C
, "O_frC", 5, 6, 0 },

27 { 
O_‰D
, "O_frD", 5, 21, 0 },

28 { 
O_‰S
, "O_frS", 5, 21, 0 },

29 { 
O_IMM
, "O_IMM", 4, 12, 0 },

30 { 
O_LI
, "O_LI", 24, 2, 
OH_ADDR
 },

31 { 
O_LK
, "O_LK", 1, 0, 
OH_SILENT
 },

32 { 
O_MB
, "O_MB", 5, 6, 0 },

33 { 
O_ME
, "O_ME", 5, 1, 0 },

34 { 
O_NB
, "O_NB", 5, 11, 0 },

35 { 
O_OE
, "O_OE", 1, 10, 
OH_SILENT
 },

36 { 
O_rA
, "O_rA", 5, 16, 
OH_REG
 },

37 { 
O_rB
, "O_rB", 5, 11, 
OH_REG
 },

38 { 
O_Rc
, "O_Rc", 1, 0, 
OH_SILENT
 },

39 { 
O_rD
, "O_rD", 5, 21, 
OH_REG
 },

40 { 
O_rS
, "O_rS", 5, 21, 
OH_REG
 },

41 { 
O_SH
, "O_SH", 5, 11, 0 },

42 { 
O_SIMM
, "O_SIMM", 16, 0, 0 },

43 { 
O_SR
, "O_SR", 4, 16, 0 },

44 { 
O_TO
, "O_TO", 5, 21, 0 },

45 { 
O_UIMM
, "O_UIMM", 16, 0, 0 },

46 { 
O_¸fD
, "O_crfD", 3, 23, 0 },

47 { 
O_¸fS
, "O_crfS", 3, 18, 0 },

48 { 
O_L
, "O_L", 1, 21, 0 },

49 { 
O_•r
, "O_•r", 10, 11, 
OH_SPR
 },

50 { 
O_tbr
, "O_tbr", 10, 11, 
OH_TBR
 },

51 { 
O_¸2
, "O_¸2", 0, 0, 
OH_LITERAL
 },

54 c⁄° 
	gn_›î™ds
 = (
›î™ds
) / (operands[0]);

66 
›code
 
	g›codes
[] = {

67 { 
D_OPCODE
(3), 
D_MASK
, {
O_TO
, 
O_rA
, 
O_SIMM
, 0},

69 { 
D_OPCODE
(7), 
D_MASK
, {
O_rD
, 
O_rA
, 
O_SIMM
, 0},

71 { 
D_OPCODE
(8), 
D_MASK
, {
O_rD
, 
O_rA
, 
O_SIMM
, 0},

73 { 
D_OPCODE
(10), 
D_MASK
, {
O_¸fD
, 
O_L
, 
O_rA
, 
O_UIMM
, 0},

75 { 
D_OPCODE
(11), 
D_MASK
, {
O_¸fD
, 
O_L
, 
O_rA
, 
O_SIMM
, 0},

77 { 
D_OPCODE
(12), 
D_MASK
, {
O_rD
, 
O_rA
, 
O_SIMM
, 0},

79 { 
D_OPCODE
(13), 
D_MASK
, {
O_rD
, 
O_rA
, 
O_SIMM
, 0},

81 { 
D_OPCODE
(14), 
D_MASK
, {
O_rD
, 
O_rA
, 
O_SIMM
, 0},

82 0, "addi", 
H_RA0_IS_0
 },

83 { 
D_OPCODE
(15), 
D_MASK
, {
O_rD
, 
O_rA
, 
O_SIMM
, 0},

84 0, "addis", 
H_RA0_IS_0
|
H_IMM_HIGH
 },

85 { 
B_OPCODE
(16,0,0), 
B_MASK
, {
O_BO
, 
O_BI
, 
O_BD
, 
O_AA
, 
O_LK
, 0},

86 
h™dÀ_bc
, "bc", 
H_RELATIVE
 },

87 { 
B_OPCODE
(16,0,1), 
B_MASK
, {
O_BO
, 
O_BI
, 
O_BD
, 
O_AA
, 
O_LK
, 0},

88 0, "b˛", 
H_RELATIVE
 },

89 { 
B_OPCODE
(16,1,0), 
B_MASK
, {
O_BO
, 
O_BI
, 
O_BD
, 
O_AA
, 
O_LK
, 0},

91 { 
B_OPCODE
(16,1,1), 
B_MASK
, {
O_BO
, 
O_BI
, 
O_BD
, 
O_AA
, 
O_LK
, 0},

93 { 
SC_OPCODE
(17), 
SC_MASK
, {0},

95 { 
I_OPCODE
(18,0,0), 
I_MASK
, {
O_LI
, 
O_AA
, 
O_LK
, 0},

96 0, "b", 
H_RELATIVE
 },

97 { 
I_OPCODE
(18,0,1), 
I_MASK
, {
O_LI
, 
O_AA
, 
O_LK
, 0},

98 0, "bl", 
H_RELATIVE
 },

99 { 
I_OPCODE
(18,1,0), 
I_MASK
, {
O_LI
, 
O_AA
, 
O_LK
, 0},

101 { 
I_OPCODE
(18,1,1), 
I_MASK
, {
O_LI
, 
O_AA
, 
O_LK
, 0},

103 { 
XL_OPCODE
(19,0,0), 
XL_MASK
, {
O_¸fD
, 
O_¸fS
},

105 { 
XL_OPCODE
(19,16,0), 
XL_MASK
, {
O_BO
, 
O_BI
, 
O_LK
, 0},

107 { 
XL_OPCODE
(19,16,1), 
XL_MASK
, {
O_BO
, 
O_BI
, 
O_LK
, 0},

109 { 
XL_OPCODE
(19,33,0), 
XL_MASK
, {
O_¸bD
, 
O_¸bA
, 
O_¸bB
, 0},

111 { 
XL_OPCODE
(19,50,0), 
XL_MASK
, {0},

113 { 
XL_OPCODE
(19,129,0), 
XL_MASK
, {
O_¸bD
, 
O_¸bA
, 
O_¸bB
, 0},

115 { 
XL_OPCODE
(19,150,0), 
XL_MASK
, {0},

117 { 
XL_OPCODE
(19,193,0), 
XL_MASK
, {
O_¸bD
, 
O_¸bA
, 
O_¸bB
, 0},

119 { 
XL_OPCODE
(19,225,0), 
XL_MASK
, {
O_¸bD
, 
O_¸bA
, 
O_¸bB
, 0},

121 { 
XL_OPCODE
(19,257,0), 
XL_MASK
, {
O_¸bD
, 
O_¸bA
, 
O_¸bB
, 0},

123 { 
XL_OPCODE
(19,289,0), 
XL_MASK
, {
O_¸bD
, 
O_¸bA
, 
O_¸bB
, 0},

125 { 
XL_OPCODE
(19,417,0), 
XL_MASK
, {
O_¸bD
, 
O_¸bA
, 
O_¸bB
, 0},

127 { 
XL_OPCODE
(19,449,0), 
XL_MASK
, {
O_¸bD
, 
O_¸bA
, 
O_¸bB
, 0},

129 { 
XL_OPCODE
(19,528,0), 
XL_MASK
, {
O_BO
, 
O_BI
, 
O_LK
, 0},

131 { 
XL_OPCODE
(19,528,1), 
XL_MASK
, {
O_BO
, 
O_BI
, 
O_LK
, 0},

133 { 
M_OPCODE
(20,0), 
M_MASK
, {
O_rA
, 
O_rS
, 
O_SH
, 
O_MB
, 
O_ME
, 
O_Rc
, 0},

135 { 
M_OPCODE
(20,1), 
M_MASK
, {
O_rA
, 
O_rS
, 
O_SH
, 
O_MB
, 
O_ME
, 
O_Rc
, 0},

137 { 
M_OPCODE
(21,0), 
M_MASK
, {
O_rA
, 
O_rS
, 
O_SH
, 
O_MB
, 
O_ME
, 
O_Rc
, 0},

139 { 
M_OPCODE
(21,1), 
M_MASK
, {
O_rA
, 
O_rS
, 
O_SH
, 
O_MB
, 
O_ME
, 
O_Rc
, 0},

141 { 
M_OPCODE
(23,0), 
M_MASK
, {
O_rA
, 
O_rS
, 
O_rB
, 
O_MB
, 
O_ME
, 
O_Rc
, 0},

143 { 
M_OPCODE
(23,1), 
M_MASK
, {
O_rA
, 
O_rS
, 
O_rB
, 
O_MB
, 
O_ME
, 
O_Rc
, 0},

145 { 
D_OPCODE
(24), 
D_MASK
, {
O_rA
, 
O_rS
, 
O_UIMM
, 0},

147 { 
D_OPCODE
(25), 
D_MASK
, {
O_rA
, 
O_rS
, 
O_UIMM
, 0},

148 0, "‹is", 
H_IMM_HIGH
 },

149 { 
D_OPCODE
(26), 
D_MASK
, {
O_rA
, 
O_rS
, 
O_UIMM
, 0},

151 { 
D_OPCODE
(27), 
D_MASK
, {
O_rA
, 
O_rS
, 
O_UIMM
, 0},

152 0, "x‹is", 
H_IMM_HIGH
 },

153 { 
D_OPCODE
(28), 
D_MASK
, {
O_rA
, 
O_rS
, 
O_UIMM
, 0},

155 { 
D_OPCODE
(29), 
D_MASK
, {
O_rA
, 
O_rS
, 
O_UIMM
, 0},

156 0, "™dis.", 
H_IMM_HIGH
 },

157 { 
X_OPCODE
(31,0,0), 
X_MASK
, {
O_¸fD
, 
O_L
, 
O_rA
, 
O_rB
, 0},

159 { 
X_OPCODE
(31,4,0), 
X_MASK
, {
O_TO
, 
O_rA
, 
O_rB
, 0},

161 { 
XO_OPCODE
(31,8,0,0), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

163 { 
XO_OPCODE
(31,8,0,1), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

165 { 
XO_OPCODE
(31,10,0,0), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

167 { 
XO_OPCODE
(31,10,0,1), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

169 { 
XO_OPCODE
(31,11,0,0), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_Rc
, 0},

171 { 
XO_OPCODE
(31,11,0,1), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_Rc
, 0},

173 { 
X_OPCODE
(31,19,0), 
X_MASK
, {
O_rD
, 0},

175 { 
X_OPCODE
(31,20,0), 
X_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 0},

176 0, "lw¨x", 
H_RA0_IS_0
 },

177 { 
X_OPCODE
(31,23,0), 
X_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 0},

178 0, "lwzx", 
H_RA0_IS_0
 },

179 { 
X_OPCODE
(31,24,0), 
X_MASK
, {
O_rA
, 
O_rS
, 
O_rB
, 
O_Rc
, 0},

181 { 
X_OPCODE
(31,24,1), 
X_MASK
, {
O_rA
, 
O_rS
, 
O_rB
, 
O_Rc
, 0},

183 { 
X_OPCODE
(31,26,0), 
X_MASK
, {
O_rA
, 
O_rS
, 
O_Rc
, 0 },

185 { 
X_OPCODE
(31,26,1), 
X_MASK
, {
O_rA
, 
O_rS
, 
O_Rc
, 0},

187 { 
X_OPCODE
(31,28,0), 
X_MASK
, {
O_rA
, 
O_rS
, 
O_rB
, 
O_Rc
, 0},

189 { 
X_OPCODE
(31,28,1), 
X_MASK
, {
O_rA
, 
O_rS
, 
O_rB
, 
O_Rc
, 0},

191 { 
X_OPCODE
(31,32,0), 
X_MASK
, {
O_¸fD
, 
O_L
, 
O_rA
, 
O_rB
, 0},

193 { 
XO_OPCODE
(31,40,0,0), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

195 { 
XO_OPCODE
(31,40,0,1), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

197 { 
X_OPCODE
(31,54,0), 
X_MASK
, {
O_rA
, 
O_rB
, 0},

198 0, "dcb°", 
H_RA0_IS_0
 },

199 { 
X_OPCODE
(31,55,0), 
X_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 0},

201 { 
X_OPCODE
(31,60,0), 
X_MASK
, {
O_rA
, 
O_rS
, 
O_rB
, 
O_Rc
, 0},

203 { 
X_OPCODE
(31,60,1), 
X_MASK
, {
O_rA
, 
O_rS
, 
O_rB
, 
O_Rc
, 0},

205 { 
XO_OPCODE
(31,75,0,0), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_Rc
, 0},

207 { 
XO_OPCODE
(31,75,0,1), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_Rc
, 0},

209 { 
X_OPCODE
(31,83,0), 
X_MASK
, {
O_rD
, 0},

211 { 
X_OPCODE
(31,86,0), 
X_MASK
, {
O_rA
, 
O_rB
, 0},

212 0, "dcbf", 
H_RA0_IS_0
 },

213 { 
X_OPCODE
(31,87,0), 
X_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 0},

214 0, "lbzx", 
H_RA0_IS_0
 },

215 { 
XO_OPCODE
(31,104,0,0), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_OE
, 
O_Rc
, 0},

217 { 
XO_OPCODE
(31,104,0,1), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_OE
, 
O_Rc
, 0},

219 { 
X_OPCODE
(31,119,0), 
X_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 0},

221 { 
X_OPCODE
(31,124,0), 
X_MASK
, {
O_rA
, 
O_rS
, 
O_rB
, 
O_Rc
, 0},

223 { 
X_OPCODE
(31,124,1), 
X_MASK
, {
O_rA
, 
O_rS
, 
O_rB
, 
O_Rc
, 0},

225 { 
XO_OPCODE
(31,136,0,0), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

227 { 
XO_OPCODE
(31,136,0,1), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

229 { 
XO_OPCODE
(31,138,0,0), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

231 { 
XO_OPCODE
(31,138,0,1), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

233 { 
XFX_OPCODE
(31,144,0), 
XFX_MASK
, {
O_CRM
, 
O_rS
, 0},

235 { 
X_OPCODE
(31,146,0), 
X_MASK
, {
O_rS
, 0},

237 { 
X_OPCODE
(31,150,1), 
X_MASK
, {
O_rS
, 
O_rA
, 
O_rB
, 0},

239 { 
X_OPCODE
(31,151,0), 
X_MASK
, {
O_rS
, 
O_rA
, 
O_rB
, 0},

241 { 
X_OPCODE
(31,183,0), 
X_MASK
, {
O_rS
, 
O_rA
, 
O_rB
, 0},

243 { 
XO_OPCODE
(31,200,0,0), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_OE
, 
O_Rc
, 0},

245 { 
XO_OPCODE
(31,200,0,1), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_OE
, 
O_Rc
, 0},

247 { 
XO_OPCODE
(31,202,0,0), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_OE
, 
O_Rc
, 0},

249 { 
XO_OPCODE
(31,202,0,1), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_OE
, 
O_Rc
, 0},

251 { 
X_OPCODE
(31,210,0), 
X_MASK
, {
O_SR
, 
O_rS
, 0},

253 { 
X_OPCODE
(31,215,0), 
X_MASK
, {
O_rS
, 
O_rA
, 
O_rB
, 0},

254 0, "°bx", 
H_RA0_IS_0
 },

255 { 
XO_OPCODE
(31,232,0,0), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_OE
, 
O_Rc
, 0},

257 { 
XO_OPCODE
(31,232,0,1), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_OE
, 
O_Rc
, 0},

259 { 
XO_OPCODE
(31,234,0,0), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_OE
, 
O_Rc
, 0},

261 { 
XO_OPCODE
(31,234,0,1), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_OE
, 
O_Rc
, 0},

263 { 
XO_OPCODE
(31,235,0,0), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

265 { 
XO_OPCODE
(31,235,0,1), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

267 { 
X_OPCODE
(31,242,0), 
X_MASK
, {
O_rS
, 
O_rB
, 0},

269 { 
X_OPCODE
(31,246,0), 
X_MASK
, {
O_rA
, 
O_rB
, 0},

270 0, "dcbt°", 
H_RA0_IS_0
 },

271 { 
X_OPCODE
(31,247,0), 
X_MASK
, {
O_rS
, 
O_rA
, 
O_rB
, 0},

273 { 
XO_OPCODE
(31,266,0,0), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

275 { 
XO_OPCODE
(31,266,0,1), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

277 { 
X_OPCODE
(31,278,0), 
X_MASK
, {
O_rA
, 
O_rB
, 0},

278 0, "dcbt", 
H_RA0_IS_0
 },

279 { 
X_OPCODE
(31,279,0), 
X_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 0},

280 0, "lhzx", 
H_RA0_IS_0
 },

281 { 
X_OPCODE
(31,284,0), 
X_MASK
, {
O_rA
, 
O_rS
, 
O_rB
, 
O_Rc
, 0},

283 { 
X_OPCODE
(31,284,1), 
X_MASK
, {
O_rA
, 
O_rS
, 
O_rB
, 
O_Rc
, 0},

285 { 
X_OPCODE
(31,306,0), 
X_MASK
, {
O_rB
, 0},

287 { 
X_OPCODE
(31,310,0), 
X_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 0},

288 0, "eciwx", 
H_RA0_IS_0
 },

289 { 
X_OPCODE
(31,311,0), 
X_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 0},

291 { 
X_OPCODE
(31,316,0), 
X_MASK
, {
O_rA
, 
O_rS
, 
O_rB
, 
O_Rc
, 0},

293 { 
X_OPCODE
(31,316,1), 
X_MASK
, {
O_rA
, 
O_rS
, 
O_rB
, 
O_Rc
, 0},

295 { 
XFX_OPCODE
(31,339,0), 
XFX_MASK
, {
O_rD
, 
O_•r
, 0},

297 { 
X_OPCODE
(31,343,0), 
X_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 0},

298 0, "lhax", 
H_RA0_IS_0
 },

299 { 
X_OPCODE
(31,370,0), 
X_MASK
, {0},

301 { 
XFX_OPCODE
(31,371,0), 
XFX_MASK
, {
O_rD
, 
O_tbr
, 0},

303 { 
X_OPCODE
(31,375,0), 
X_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 0},

305 { 
X_OPCODE
(31,407,0), 
X_MASK
, {
O_rS
, 
O_rA
, 
O_rB
, 0},

306 0, "°hx", 
H_RA0_IS_0
 },

307 { 
X_OPCODE
(31,412,0), 
X_MASK
, {
O_rA
, 
O_rS
, 
O_rB
, 
O_Rc
, 0},

309 { 
X_OPCODE
(31,412,1), 
X_MASK
, {
O_rA
, 
O_rS
, 
O_rB
, 
O_Rc
, 0},

311 { 
X_OPCODE
(31,438,0), 
X_MASK
, {
O_rS
, 
O_rA
, 
O_rB
, 0},

312 0, "ecowx", 
H_RA0_IS_0
 },

313 { 
X_OPCODE
(31,439,0), 
X_MASK
, {
O_rS
, 
O_rA
, 
O_rB
, 0},

315 { 
X_OPCODE
(31,444,0), 
X_MASK
, {
O_rA
, 
O_rS
, 
O_rB
, 
O_Rc
, 0},

317 { 
X_OPCODE
(31,444,1), 
X_MASK
, {
O_rA
, 
O_rS
, 
O_rB
, 
O_Rc
, 0},

319 { 
XO_OPCODE
(31,459,0,0), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

321 { 
XO_OPCODE
(31,459,0,1), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

323 { 
XFX_OPCODE
(31,467,0), 
XFX_MASK
, {
O_•r
, 
O_rS
, 0},

325 { 
X_OPCODE
(31,470,0), 
X_MASK
, {
O_rA
, 
O_rB
, 0},

326 0, "dcbi", 
H_RA0_IS_0
 },

327 { 
X_OPCODE
(31,476,0), 
X_MASK
, {
O_rA
, 
O_rS
, 
O_rB
, 
O_Rc
, 0},

329 { 
X_OPCODE
(31,476,1), 
X_MASK
, {
O_rA
, 
O_rS
, 
O_rB
, 
O_Rc
,0},

331 { 
XO_OPCODE
(31,491,0,0), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

333 { 
XO_OPCODE
(31,491,0,1), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

335 { 
X_OPCODE
(31,512,0), 
X_MASK
, {
O_¸fD
, 0},

337 { 
XO_OPCODE
(31,8,1,0), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

339 { 
XO_OPCODE
(31,8,1,1), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

341 { 
XO_OPCODE
(31,10,1,0), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

343 { 
XO_OPCODE
(31,10,1,1), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

345 { 
X_OPCODE
(31,533,0), 
X_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 0},

346 0, "lswx", 
H_RA0_IS_0
 },

347 { 
X_OPCODE
(31,534,0), 
X_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 0},

348 0, "lwbrx", 
H_RA0_IS_0
 },

349 { 
X_OPCODE
(31,536,0), 
X_MASK
, {
O_rA
, 
O_rS
, 
O_rB
, 
O_Rc
, 0},

351 { 
X_OPCODE
(31,536,1), 
X_MASK
, {
O_rA
, 
O_rS
, 
O_rB
, 
O_Rc
, 0},

353 { 
XO_OPCODE
(31,40,1,0), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

355 { 
XO_OPCODE
(31,40,1,1), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

357 { 
X_OPCODE
(31,566,0), 
X_MASK
, {0},

359 { 
X_OPCODE
(31,595,0), 
X_MASK
, {
O_rD
, 
O_SR
, 0},

361 { 
X_OPCODE
(31,597,0), 
X_MASK
, {
O_rD
, 
O_rA
, 
O_NB
, 0},

362 0, "lswi", 
H_RA0_IS_0
 },

363 { 
X_OPCODE
(31,598,0), 
X_MASK
, {0},

365 { 
XO_OPCODE
(31,104,1,0), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_OE
, 
O_Rc
, 0},

367 { 
XO_OPCODE
(31,104,1,1), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_OE
, 
O_Rc
, 0},

369 { 
XO_OPCODE
(31,136,1,0), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

371 { 
XO_OPCODE
(31,136,1,1), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

373 { 
XO_OPCODE
(31,138,1,0), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

375 { 
XO_OPCODE
(31,138,1,1), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

377 { 
X_OPCODE
(31,659,0), 
X_MASK
, {
O_rD
, 
O_rB
, 0},

379 { 
X_OPCODE
(31,661,0), 
X_MASK
, {
O_rS
, 
O_rA
, 
O_rB
, 0},

380 0, "°swx", 
H_RA0_IS_0
 },

381 { 
X_OPCODE
(31,662,0), 
X_MASK
, {
O_rS
, 
O_rA
, 
O_rB
, 0},

382 0, "°wbrx", 
H_RA0_IS_0
 },

383 { 
XO_OPCODE
(31,200,1,0), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_OE
, 
O_Rc
, 0},

385 { 
XO_OPCODE
(31,200,1,1), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_OE
, 
O_Rc
, 0},

387 { 
XO_OPCODE
(31,202,1,0), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_OE
, 
O_Rc
, 0},

389 { 
XO_OPCODE
(31,202,1,1), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_OE
, 
O_Rc
, 0},

391 { 
X_OPCODE
(31,725,0), 
X_MASK
, {
O_rS
, 
O_rA
, 
O_NB
, 0},

392 0, "°swi", 
H_RA0_IS_0
 },

393 { 
XO_OPCODE
(31,232,1,0), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_OE
, 
O_Rc
, 0},

395 { 
XO_OPCODE
(31,232,1,1), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_OE
, 
O_Rc
, 0},

397 { 
XO_OPCODE
(31,234,1,0), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_OE
, 
O_Rc
, 0},

399 { 
XO_OPCODE
(31,234,1,1), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_OE
, 
O_Rc
, 0},

401 { 
XO_OPCODE
(31,235,1,0), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

403 { 
XO_OPCODE
(31,235,1,1), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

405 { 
XO_OPCODE
(31,266,1,0), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

407 { 
XO_OPCODE
(31,266,1,1), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

409 { 
X_OPCODE
(31,790,0), 
X_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 0},

410 0, "lhbrx", 
H_RA0_IS_0
 },

411 { 
X_OPCODE
(31,792,0), 
X_MASK
, {
O_rA
, 
O_rS
, 
O_rB
, 
O_Rc
, 0},

413 { 
X_OPCODE
(31,792,1), 
X_MASK
, {
O_rA
, 
O_rS
, 
O_rB
, 
O_Rc
, 0},

415 { 
X_OPCODE
(31,824,0), 
X_MASK
, {
O_rA
, 
O_rS
, 
O_SH
, 
O_Rc
, 0},

417 { 
X_OPCODE
(31,824,1), 
X_MASK
, {
O_rA
, 
O_rS
, 
O_SH
, 
O_Rc
, 0},

419 { 
X_OPCODE
(31,854,0), 
X_MASK
, {0},

421 { 
X_OPCODE
(31,918,0), 
X_MASK
, {
O_rS
, 
O_rA
, 
O_rB
, 0},

422 0, "°hbrx", 
H_RA0_IS_0
 },

423 { 
X_OPCODE
(31,922,0), 
X_MASK
, {
O_rA
, 
O_rS
, 
O_Rc
, 0},

425 { 
X_OPCODE
(31,922,1), 
X_MASK
, {
O_rA
, 
O_rS
, 
O_Rc
, 0},

427 { 
X_OPCODE
(31,954,0), 
X_MASK
, {
O_rA
, 
O_rS
, 
O_Rc
, 0},

429 { 
X_OPCODE
(31,954,1), 
X_MASK
, {
O_rA
, 
O_rS
, 
O_Rc
, 0},

431 { 
XO_OPCODE
(31,459,1,0), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

433 { 
XO_OPCODE
(31,459,1,1), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

435 { 
X_OPCODE
(31,978,0), 
X_MASK
, {
O_rB
, 0},

437 { 
X_OPCODE
(31,982,0), 
X_MASK
, {
O_rA
, 
O_rB
, 0},

438 0, "icbi", 
H_RA0_IS_0
 },

439 { 
XO_OPCODE
(31,491,1,0), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

441 { 
XO_OPCODE
(31,491,1,1), 
XO_MASK
, {
O_rD
, 
O_rA
, 
O_rB
, 
O_OE
, 
O_Rc
, 0},

443 { 
X_OPCODE
(31,1010,0), 
X_MASK
, {
O_rB
, 0},

445 { 
X_OPCODE
(31,1014,0), 
X_MASK
, {
O_rA
, 
O_rB
, 0},

446 0, "dcbz", 
H_RA0_IS_0
 },

447 { 
D_OPCODE
(32), 
D_MASK
, {
O_rD
, 
O_d
, 
O_rA
, 0},

448 0, "lwz", 
H_RA0_IS_0
 },

449 { 
D_OPCODE
(33), 
D_MASK
, {
O_rD
, 
O_d
, 
O_rA
, 0},

451 { 
D_OPCODE
(34), 
D_MASK
, {
O_rD
, 
O_d
, 
O_rA
, 0},

452 0, "lbz", 
H_RA0_IS_0
 },

453 { 
D_OPCODE
(35), 
D_MASK
, {
O_rD
, 
O_d
, 
O_rA
, 0},

455 { 
D_OPCODE
(36), 
D_MASK
, {
O_rS
, 
O_d
, 
O_rA
, 0},

456 0, "°w", 
H_RA0_IS_0
 },

457 { 
D_OPCODE
(37), 
D_MASK
, {
O_rS
, 
O_d
, 
O_rA
, 0},

459 { 
D_OPCODE
(38), 
D_MASK
, {
O_rS
, 
O_d
, 
O_rA
, 0},

460 0, "°b", 
H_RA0_IS_0
 },

461 { 
D_OPCODE
(39), 
D_MASK
, {
O_rS
, 
O_d
, 
O_rA
, 0},

463 { 
D_OPCODE
(40), 
D_MASK
, {
O_rD
, 
O_d
, 
O_rA
, 0},

464 0, "lhz", 
H_RA0_IS_0
 },

465 { 
D_OPCODE
(41), 
D_MASK
, {
O_rD
, 
O_d
, 
O_rA
, 0},

467 { 
D_OPCODE
(42), 
D_MASK
, {
O_rD
, 
O_d
, 
O_rA
, 0},

468 0, "lha", 
H_RA0_IS_0
 },

469 { 
D_OPCODE
(43), 
D_MASK
, {
O_rD
, 
O_d
, 
O_rA
, 0},

471 { 
D_OPCODE
(44), 
D_MASK
, {
O_rS
, 
O_d
, 
O_rA
, 0},

472 0, "°h", 
H_RA0_IS_0
 },

473 { 
D_OPCODE
(45), 
D_MASK
, {
O_rS
, 
O_d
, 
O_rA
, 0},

475 { 
D_OPCODE
(46), 
D_MASK
, {
O_rD
, 
O_d
, 
O_rA
, 0},

476 0, "lmw", 
H_RA0_IS_0
 },

477 { 
D_OPCODE
(47), 
D_MASK
, {
O_rS
, 
O_d
, 
O_rA
, 0},

478 0, "°mw", 
H_RA0_IS_0
 },

481 c⁄° 
	gn_›codes
 = (
›codes
) / (opcodes[0]);

483 
•r_öfo
 
	g•r_m≠
[] = {

484 { 
SPR_XER
, "XER" },

485 { 
SPR_LR
, "LR" },

486 { 
SPR_CTR
, "CTR" },

487 { 
SPR_DSISR
, "DSISR" },

488 { 
SPR_DAR
, "DAR" },

489 { 
SPR_DEC
, "DEC" },

490 { 
SPR_SRR0
, "SRR0" },

491 { 
SPR_SRR1
, "SRR1" },

492 { 
SPR_EIE
, "EIE" },

493 { 
SPR_EID
, "EID" },

494 { 
SPR_CMPA
, "CMPA" },

495 { 
SPR_CMPB
, "CMPB" },

496 { 
SPR_CMPC
, "CMPC" },

497 { 
SPR_CMPD
, "CMPD" },

498 { 
SPR_ICR
, "ICR" },

499 { 
SPR_DER
, "DER" },

500 { 
SPR_COUNTA
, "COUNTA" },

501 { 
SPR_COUNTB
, "COUNTB" },

502 { 
SPR_CMPE
, "CMPE" },

503 { 
SPR_CMPF
, "CMPF" },

504 { 
SPR_CMPG
, "CMPG" },

505 { 
SPR_CMPH
, "CMPH" },

506 { 
SPR_LCTRL1
, "LCTRL1" },

507 { 
SPR_LCTRL2
, "LCTRL2" },

508 { 
SPR_ICTRL
, "ICTRL" },

509 { 
SPR_BAR
, "BAR" },

510 { 
SPR_USPRG0
, "USPRG0" },

511 { 
SPR_SPRG4_RO
, "SPRG4_RO" },

512 { 
SPR_SPRG5_RO
, "SPRG5_RO" },

513 { 
SPR_SPRG6_RO
, "SPRG6_RO" },

514 { 
SPR_SPRG7_RO
, "SPRG7_RO" },

515 { 
SPR_SPRG0
, "SPRG0" },

516 { 
SPR_SPRG1
, "SPRG1" },

517 { 
SPR_SPRG2
, "SPRG2" },

518 { 
SPR_SPRG3
, "SPRG3" },

519 { 
SPR_SPRG4
, "SPRG4" },

520 { 
SPR_SPRG5
, "SPRG5" },

521 { 
SPR_SPRG6
, "SPRG6" },

522 { 
SPR_SPRG7
, "SPRG7" },

523 { 
SPR_EAR
, "EAR" },

524 { 
SPR_TBL
, "TBL" },

525 { 
SPR_TBU
, "TBU" },

526 { 
SPR_IC_CST
, "IC_CST" },

527 { 
SPR_IC_ADR
, "IC_ADR" },

528 { 
SPR_IC_DAT
, "IC_DAT" },

529 { 
SPR_DC_CST
, "DC_CST" },

530 { 
SPR_DC_ADR
, "DC_ADR" },

531 { 
SPR_DC_DAT
, "DC_DAT" },

532 { 
SPR_DPDR
, "DPDR" },

533 { 
SPR_IMMR
, "IMMR" },

534 { 
SPR_MI_CTR
, "MI_CTR" },

535 { 
SPR_MI_AP
, "MI_AP" },

536 { 
SPR_MI_EPN
, "MI_EPN" },

537 { 
SPR_MI_TWC
, "MI_TWC" },

538 { 
SPR_MI_RPN
, "MI_RPN" },

539 { 
SPR_MD_CTR
, "MD_CTR" },

540 { 
SPR_M_CASID
, "M_CASID" },

541 { 
SPR_MD_AP
, "MD_AP" },

542 { 
SPR_MD_EPN
, "MD_EPN" },

543 { 
SPR_M_TWB
, "M_TWB" },

544 { 
SPR_MD_TWC
, "MD_TWC" },

545 { 
SPR_MD_RPN
, "MD_RPN" },

546 { 
SPR_M_TW
, "M_TW" },

547 { 
SPR_MI_DBCAM
, "MI_DBCAM" },

548 { 
SPR_MI_DBRAM0
, "MI_DBRAM0" },

549 { 
SPR_MI_DBRAM1
, "MI_DBRAM1" },

550 { 
SPR_MD_DBCAM
, "MD_DBCAM" },

551 { 
SPR_MD_DBRAM0
, "MD_DBRAM0" },

552 { 
SPR_MD_DBRAM1
, "MD_DBRAM1" },

553 { 
SPR_ZPR
, "ZPR" },

554 { 
SPR_PID
, "PID" },

555 { 
SPR_CCR0
, "CCR0" },

556 { 
SPR_IAC3
, "IAC3" },

557 { 
SPR_IAC4
, "IAC4" },

558 { 
SPR_DVC1
, "DVC1" },

559 { 
SPR_DVC2
, "DVC2" },

560 { 
SPR_SGR
, "SGR" },

561 { 
SPR_DCWR
, "DCWR" },

562 { 
SPR_SLER
, "SLER" },

563 { 
SPR_SU0R
, "SU0R" },

564 { 
SPR_DBCR1
, "DBCR1" },

565 { 
SPR_ICDBDR
, "ICDBDR" },

566 { 
SPR_ESR
, "ESR" },

567 { 
SPR_DEAR
, "DEAR" },

568 { 
SPR_EVPR
, "EVPR" },

569 { 
SPR_TSR
, "TSR" },

570 { 
SPR_TCR
, "TCR" },

571 { 
SPR_PIT
, "PIT" },

572 { 
SPR_SRR2
, "SRR2" },

573 { 
SPR_SRR3
, "SRR3" },

574 { 
SPR_DBSR
, "DBSR" },

575 { 
SPR_DBCR0
, "DBCR0" },

576 { 
SPR_IAC1
, "IAC1" },

577 { 
SPR_IAC2
, "IAC2" },

578 { 
SPR_DAC1
, "DAC1" },

579 { 
SPR_DAC2
, "DAC2" },

580 { 
SPR_DCCR
, "DCCR" },

581 { 
SPR_ICCR
, "ICCR" },

584 c⁄° 
	gn_•rs
 = (
•r_m≠
) / (spr_map[0]);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/bedbug/type.h

1 #i‚de‡
_TYPE_BEDBUG_H


2 
	#_TYPE_BEDBUG_H


	)

5 
bedbug_puts
 (const *);

6 
bedbug_öô
 ();

7 
bedbug860_öô
 ();

8 
do_bedbug_bªakpoöt
 (
±_ªgs
 *);

9 
bedbug_maö_lo›
 (, 
±_ªgs
 *);

13 
	mhw_debug_íabÀd
;

14 
	m°›≥d
;

15 
	mcuºít_bp
;

16 
±_ªgs
 *
	mªgs
;

18 (*
	mdo_bªak
Ë(
	mcmd_tbl_t
 *, , , *[]);

19 (*
	mbªak_i§
Ë(
	m±_ªgs
 *);

20 (*
	mföd_em±y
) ();

21 (*
	m£t
) (, );

22 (*
	m˛ór
) ();

23 } 
	tCPU_DEBUG_CTX
;

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/bmp_layout.h

27 #i‚de‡
_BMP_H_


28 
	#_BMP_H_


	)

30 
	sbmp_cﬁ‹_èbÀ_íåy
 {

31 
__u8
 
	mblue
;

32 
__u8
 
	mgªí
;

33 
__u8
 
	mªd
;

34 
__u8
 
	mª£rved
;

35 } 
	t__©åibuã__
 ((
	t∑cked
)Ë
	tbmp_cﬁ‹_èbÀ_íåy_t
;

40 
	sbmp_hódî
 {

42 
	msig«tuª
[2];

43 
__u32
 
	mfûe_size
;

44 
__u32
 
	mª£rved
;

45 
__u32
 
	md©a_off£t
;

47 
__u32
 
	msize
;

48 
__u32
 
	mwidth
;

49 
__u32
 
	mheight
;

50 
__u16
 
	m∂™es
;

51 
__u16
 
	mbô_cou¡
;

52 
__u32
 
	mcom¥essi⁄
;

53 
__u32
 
	mimage_size
;

54 
__u32
 
	mx_pixñs_≥r_m
;

55 
__u32
 
	my_pixñs_≥r_m
;

56 
__u32
 
	mcﬁ‹s_u£d
;

57 
__u32
 
	mcﬁ‹s_imp‹è¡
;

60 } 
	t__©åibuã__
 ((
	t∑cked
)Ë
	tbmp_hódî_t
;

62 
	sbmp_image
 {

63 
bmp_hódî_t
 
	mhódî
;

66 
bmp_cﬁ‹_èbÀ_íåy_t
 
	mcﬁ‹_èbÀ
[0];

67 } 
	tbmp_image_t
;

70 
	#BMP_DATA_ALIGN
 4

	)

73 
	#BMP_BI_RGB
 0

	)

74 
	#BMP_BI_RLE8
 1

	)

75 
	#BMP_BI_RLE4
 2

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/bmp_logo.h

9 #i‚de‡
__BMP_LOGO_H__


10 
	#__BMP_LOGO_H__


	)

12 
	#BMP_LOGO_WIDTH
 160

	)

13 
	#BMP_LOGO_HEIGHT
 96

	)

14 
	#BMP_LOGO_COLORS
 31

	)

15 
	#BMP_LOGO_OFFSET
 16

	)

17 
	gbmp_logo_∑Àâe
[] = {

24 
	gbmp_logo_bôm≠
[] = {

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/bzlib.h

66 #i‚de‡
_BZLIB_H


67 
	#_BZLIB_H


	)

70 
	#BZ_NO_STDIO


	)

71 
	#BZ_NO_COMPRESS


	)

74 #ifde‡
__˝lu•lus


78 
	#BZ_RUN
 0

	)

79 
	#BZ_FLUSH
 1

	)

80 
	#BZ_FINISH
 2

	)

82 
	#BZ_OK
 0

	)

83 
	#BZ_RUN_OK
 1

	)

84 
	#BZ_FLUSH_OK
 2

	)

85 
	#BZ_FINISH_OK
 3

	)

86 
	#BZ_STREAM_END
 4

	)

87 
	#BZ_SEQUENCE_ERROR
 (-1)

	)

88 
	#BZ_PARAM_ERROR
 (-2)

	)

89 
	#BZ_MEM_ERROR
 (-3)

	)

90 
	#BZ_DATA_ERROR
 (-4)

	)

91 
	#BZ_DATA_ERROR_MAGIC
 (-5)

	)

92 
	#BZ_IO_ERROR
 (-6)

	)

93 
	#BZ_UNEXPECTED_EOF
 (-7)

	)

94 
	#BZ_OUTBUFF_FULL
 (-8)

	)

95 
	#BZ_CONFIG_ERROR
 (-9)

	)

99 *
√xt_ö
;

100 
avaû_ö
;

101 
tŸÆ_ö_lo32
;

102 
tŸÆ_ö_hi32
;

104 *
√xt_out
;

105 
avaû_out
;

106 
tŸÆ_out_lo32
;

107 
tŸÆ_out_hi32
;

109 *
°©e
;

111 *(*
bzÆloc
)(*,,);

112 (*
bz‰ì
)(*,*);

113 *
›aque
;

115 
	tbz_°ªam
;

118 #i‚de‡
BZ_IMPORT


119 
	#BZ_EXPORT


	)

122 #ifde‡
_WIN32


123 
	~<wödows.h
>

124 #ifde‡
smÆl


126 #unde‡
smÆl


128 #ifde‡
BZ_EXPORT


129 
	#BZ_API
(
func
Ë
WINAPI
 
	)
func

130 
	#BZ_EXTERN
 

	)

133 
	#BZ_API
(
func
Ë(
WINAPI
 * func)

	)

134 
	#BZ_EXTERN


	)

137 
	#BZ_API
(
func
Ë
	)
func

138 
	#BZ_EXTERN
 

	)

144 
BZ_EXTERN
 
BZ_API
(
BZ2_bzCom¥essInô
) (

145 
bz_°ªam
* 
°rm
,

146 
blockSize100k
,

147 
vîbosôy
,

148 
w‹kFa˘‹


151 
BZ_EXTERN
 
BZ_API
(
BZ2_bzCom¥ess
) (

152 
bz_°ªam
* 
	g°rm
,

153 
	ga˘i⁄


156 
BZ_EXTERN
 
BZ_API
(
BZ2_bzCom¥essEnd
) (

157 
bz_°ªam
* 
	g°rm


160 
BZ_EXTERN
 
BZ_API
(
BZ2_bzDecom¥essInô
) (

161 
bz_°ªam
 *
	g°rm
,

162 
	gvîbosôy
,

163 
	gsmÆl


166 
BZ_EXTERN
 
BZ_API
(
BZ2_bzDecom¥ess
) (

167 
bz_°ªam
* 
	g°rm


170 
BZ_EXTERN
 
BZ_API
(
BZ2_bzDecom¥essEnd
) (

171 
bz_°ªam
 *
	g°rm


177 #i‚de‡
BZ_NO_STDIO


178 
	#BZ_MAX_UNUSED
 5000

	)

181 
	~<°dio.h
>

183 
	tBZFILE
;

185 
BZ_EXTERN
 
BZFILE
* 
BZ_API
(
BZ2_bzRódO≥n
) (

186 * 
	gbzîr‹
,

187 
FILE
* 
	gf
,

188 
	gvîbosôy
,

189 
	gsmÆl
,

190 * 
	gunu£d
,

191 
	gnUnu£d


194 
BZ_EXTERN
 
BZ_API
(
BZ2_bzRódClo£
) (

195 * 
	gbzîr‹
,

196 
BZFILE
* 
	gb


199 
BZ_EXTERN
 
BZ_API
(
BZ2_bzRódGëUnu£d
) (

200 * 
	gbzîr‹
,

201 
BZFILE
* 
	gb
,

202 ** 
	gunu£d
,

203 * 
	gnUnu£d


206 
BZ_EXTERN
 
BZ_API
(
BZ2_bzRód
) (

207 * 
	gbzîr‹
,

208 
BZFILE
* 
	gb
,

209 * 
	gbuf
,

210 
	gÀn


213 
BZ_EXTERN
 
BZFILE
* 
BZ_API
(
BZ2_bzWrôeO≥n
) (

214 * 
	gbzîr‹
,

215 
FILE
* 
	gf
,

216 
	gblockSize100k
,

217 
	gvîbosôy
,

218 
	gw‹kFa˘‹


221 
BZ_EXTERN
 
BZ_API
(
BZ2_bzWrôe
) (

222 * 
	gbzîr‹
,

223 
BZFILE
* 
	gb
,

224 * 
	gbuf
,

225 
	gÀn


228 
BZ_EXTERN
 
BZ_API
(
BZ2_bzWrôeClo£
) (

229 * 
	gbzîr‹
,

230 
BZFILE
* 
	gb
,

231 
	gab™d⁄
,

232 * 
	gnbyãs_ö
,

233 * 
	gnbyãs_out


236 
BZ_EXTERN
 
BZ_API
(
BZ2_bzWrôeClo£64
) (

237 * 
	gbzîr‹
,

238 
BZFILE
* 
	gb
,

239 
	gab™d⁄
,

240 * 
	gnbyãs_ö_lo32
,

241 * 
	gnbyãs_ö_hi32
,

242 * 
	gnbyãs_out_lo32
,

243 * 
	gnbyãs_out_hi32


250 
BZ_EXTERN
 
BZ_API
(
BZ2_bzBuffToBuffCom¥ess
) (

251 * 
	gde°
,

252 * 
	gde°Lí
,

253 * 
	gsour˚
,

254 
	gsour˚Lí
,

255 
	gblockSize100k
,

256 
	gvîbosôy
,

257 
	gw‹kFa˘‹


260 
BZ_EXTERN
 
BZ_API
(
BZ2_bzBuffToBuffDecom¥ess
) (

261 * 
	gde°
,

262 * 
	gde°Lí
,

263 * 
	gsour˚
,

264 
	gsour˚Lí
,

265 
	gsmÆl
,

266 
	gvîbosôy


280 
BZ_EXTERN
 c⁄° * 
BZ_API
(
BZ2_bzlibVîsi⁄
) (

284 #i‚de‡
BZ_NO_STDIO


285 
BZ_EXTERN
 
BZFILE
 * 
BZ_API
(
BZ2_bz›í
) (

286 c⁄° *
	g∑th
,

287 c⁄° *
	gmode


290 
BZ_EXTERN
 
BZFILE
 * 
BZ_API
(
BZ2_bzd›í
) (

291 
	gfd
,

292 c⁄° *
	gmode


295 
BZ_EXTERN
 
BZ_API
(
BZ2_bzªad
) (

296 
BZFILE
* 
	gb
,

297 * 
	gbuf
,

298 
	gÀn


301 
BZ_EXTERN
 
BZ_API
(
BZ2_bzwrôe
) (

302 
BZFILE
* 
	gb
,

303 * 
	gbuf
,

304 
	gÀn


307 
BZ_EXTERN
 
BZ_API
(
BZ2_bzÊush
) (

308 
BZFILE
* 
	gb


311 
BZ_EXTERN
 
BZ_API
(
BZ2_bz˛o£
) (

312 
BZFILE
* 
	gb


315 
BZ_EXTERN
 c⁄° * 
BZ_API
(
BZ2_bzîr‹
) (

316 
BZFILE
 *
	gb
,

317 *
	gî∫um


321 #ifde‡
__˝lu•lus


	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/circbuf.h

21 #i‚de‡
__CIRCBUF_H__


22 
	#__CIRCBUF_H__


	)

24 
	scúcbuf
 {

25 
	msize
;

26 
	mtŸÆsize
;

28 *
	mt›
;

29 *
	mèû
;

31 *
	md©a
;

32 *
	míd
;

33 } 
	tcúcbuf_t
;

35 
buf_öô
 (
cúcbuf_t
 * 
buf
, 
size
);

36 
buf_‰ì
 (
cúcbuf_t
 * 
buf
);

37 
buf_p›
 (
cúcbuf_t
 * 
buf
, *
de°
, 
Àn
);

38 
buf_push
 (
cúcbuf_t
 * 
buf
, c⁄° *
§c
, 
Àn
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/cmd_confdefs.h

27 #i‚de‡
_CMD_CONFIG_H


28 
	#_CMD_CONFIG_H


	)

33 
	#CFG_CMD_BDI
 0x00000001ULL

	)

34 
	#CFG_CMD_LOADS
 0x00000002ULL

	)

35 #ifde‡
RALINK_UPGRADE_BY_SERIAL


36 
	#CFG_CMD_LOADB
 0x00000004ULL

	)

38 
	#CFG_CMD_LOADB
 0x00000000ULL

	)

40 
	#CFG_CMD_IMI
 0x00000008ULL

	)

41 
	#CFG_CMD_CACHE
 0x00000010ULL

	)

42 
	#CFG_CMD_FLASH
 0x00000020ULL

	)

43 
	#CFG_CMD_MEMORY
 0x00000040ULL

	)

45 
	#CFG_CMD_NET
 0x00000080ULL

	)

46 
	#CFG_CMD_ENV
 0x00000100ULL

	)

47 
	#CFG_CMD_KGDB
 0x00000200ULL

	)

48 
	#CFG_CMD_PCMCIA
 0x00000400ULL

	)

49 
	#CFG_CMD_IDE
 0x00000800ULL

	)

50 
	#CFG_CMD_PCI
 0x00001000ULL

	)

51 
	#CFG_CMD_IRQ
 0x00002000ULL

	)

52 
	#CFG_CMD_BOOTD
 0x00004000ULL

	)

53 
	#CFG_CMD_CONSOLE
 0x00008000ULL

	)

54 
	#CFG_CMD_EEPROM
 0x00010000ULL

	)

55 
	#CFG_CMD_ASKENV
 0x00020000ULL

	)

56 
	#CFG_CMD_RUN
 0x00040000ULL

	)

57 
	#CFG_CMD_ECHO
 0x00080000ULL

	)

58 
	#CFG_CMD_I2C
 0x00100000ULL

	)

59 
	#CFG_CMD_REGINFO
 0x00200000ULL

	)

60 
	#CFG_CMD_IMMAP
 0x00400000ULL

	)

61 
	#CFG_CMD_DATE
 0x00800000ULL

	)

62 
	#CFG_CMD_DHCP
 0x01000000ULL

	)

63 
	#CFG_CMD_BEDBUG
 0x02000000ULL

	)

64 
	#CFG_CMD_FDC
 0x04000000ULL

	)

65 
	#CFG_CMD_SCSI
 0x08000000ULL

	)

66 
	#CFG_CMD_AUTOSCRIPT
 0x10000000ULL

	)

67 
	#CFG_CMD_MII
 0x20000000ULL

	)

68 
	#CFG_CMD_SETGETDCR
 0x40000000ULL

	)

69 
	#CFG_CMD_BSP
 0x80000000ULL

	)

71 
	#CFG_CMD_ELF
 0x0000000100000000ULL

	)

72 
	#CFG_CMD_MISC
 0x0000000200000000ULL

	)

73 
	#CFG_CMD_USB
 0x0000000400000000ULL

	)

74 
	#CFG_CMD_DOC
 0x0000000800000000ULL

	)

75 
	#CFG_CMD_JFFS2
 0x0000001000000000ULL

	)

76 
	#CFG_CMD_DTT
 0x0000002000000000ULL

	)

77 
	#CFG_CMD_SDRAM
 0x0000004000000000ULL

	)

78 
	#CFG_CMD_DIAG
 0x0000008000000000ULL

	)

79 
	#CFG_CMD_FPGA
 0x0000010000000000ULL

	)

80 
	#CFG_CMD_HWFLOW
 0x0000020000000000ULL

	)

81 
	#CFG_CMD_SAVES
 0x0000040000000000ULL

	)

82 
	#CFG_CMD_SPI
 0x0000100000000000ULL

	)

83 
	#CFG_CMD_FDOS
 0x0000200000000000ULL

	)

84 
	#CFG_CMD_VFD
 0x0000400000000000ULL

	)

85 
	#CFG_CMD_NAND
 0x0000800000000000ULL

	)

86 
	#CFG_CMD_BMP
 0x0001000000000000ULL

	)

87 
	#CFG_CMD_PORTIO
 0x0002000000000000ULL

	)

88 
	#CFG_CMD_PING
 0x0004000000000000ULL

	)

89 
	#CFG_CMD_MMC
 0x0008000000000000ULL

	)

90 
	#CFG_CMD_FAT
 0x0010000000000000ULL

	)

91 
	#CFG_CMD_IMLS
 0x0020000000000000ULL

	)

92 
	#CFG_CMD_ITEST
 0x0040000000000000ULL

	)

93 
	#CFG_CMD_NFS
 0x0080000000000000ULL

	)

94 
	#CFG_CMD_REISER
 0x0100000000000000ULL

	)

95 
	#CFG_CMD_CDP
 0x0200000000000000ULL

	)

96 
	#CFG_CMD_XIMG
 0x0400000000000000ULL

	)

97 
	#CFG_CMD_UNIVERSE
 0x0800000000000000ULL

	)

98 
	#CFG_CMD_EXT2
 0x1000000000000000ULL

	)

100 
	#CFG_CMD_ALL
 0xFFFFFFFFFFFFFFFFULL

	)

105 
	#CFG_CMD_NONSTD
 (
CFG_CMD_ASKENV
 | \

106 
CFG_CMD_AUTOSCRIPT
 | \

107 
CFG_CMD_BEDBUG
 | \

108 
CFG_CMD_BMP
 | \

109 
CFG_CMD_BOOTD
 | \

110 
CFG_CMD_BSP
 | \

111 
CFG_CMD_CACHE
 | \

112 
CFG_CMD_CDP
 | \

113 
CFG_CMD_DATE
 | \

114 
CFG_CMD_DHCP
 | \

115 
CFG_CMD_DIAG
 | \

116 
CFG_CMD_DOC
 | \

117 
CFG_CMD_DTT
 | \

118 
CFG_CMD_ECHO
 | \

119 
CFG_CMD_EEPROM
 | \

120 
CFG_CMD_ELF
 | \

121 
CFG_CMD_EXT2
 | \

122 
CFG_CMD_FDC
 | \

123 
CFG_CMD_FAT
 | \

124 
CFG_CMD_FDOS
 | \

125 
CFG_CMD_HWFLOW
 | \

126 
CFG_CMD_I2C
 | \

127 
CFG_CMD_IDE
 | \

128 
CFG_CMD_IMLS
 | \

129 
CFG_CMD_IMMAP
 | \

130 
CFG_CMD_IRQ
 | \

131 
CFG_CMD_ITEST
 | \

132 
CFG_CMD_JFFS2
 | \

133 
CFG_CMD_KGDB
 | \

134 
CFG_CMD_LOADS
 | \

135 
CFG_CMD_MII
 | \

136 
CFG_CMD_MMC
 | \

137 
CFG_CMD_NAND
 | \

138 
CFG_CMD_NFS
 | \

139 
CFG_CMD_PCI
 | \

140 
CFG_CMD_PCMCIA
 | \

141 
CFG_CMD_PING
 | \

142 
CFG_CMD_PORTIO
 | \

143 
CFG_CMD_REGINFO
 | \

144 
CFG_CMD_REISER
 | \

145 
CFG_CMD_RUN
 | \

146 
CFG_CMD_SAVES
 | \

147 
CFG_CMD_SCSI
 | \

148 
CFG_CMD_SDRAM
 | \

149 
CFG_CMD_UNIVERSE
 | \

150 
CFG_CMD_USB
 | \

151 
CFG_CMD_VFD
 )

	)

155 
	#CONFIG_CMD_DFL
 (
CFG_CMD_ALL
 & ~
CFG_CMD_NONSTD
)

	)

156 
	#CONFIG_COMMANDS
 (
CONFIG_CMD_DFL
)

	)

159 #i‡
deföed
 (
RALINK_USB
Ë|| deföed (
MTK_USB
)

160 #unde‡
CONFIG_COMMANDS


161 
	#CONFIG_COMMANDS
 (
CONFIG_CMD_DFL
 | 
CFG_CMD_USB
 | 
CFG_CMD_FAT
)

	)

168 
	#CONFIG_BOOTP_SUBNETMASK
 0x00000001

	)

169 
	#CONFIG_BOOTP_GATEWAY
 0x00000002

	)

170 
	#CONFIG_BOOTP_HOSTNAME
 0x00000004

	)

171 
	#CONFIG_BOOTP_NISDOMAIN
 0x00000008

	)

172 
	#CONFIG_BOOTP_BOOTPATH
 0x00000010

	)

173 
	#CONFIG_BOOTP_BOOTFILESIZE
 0x00000020

	)

174 
	#CONFIG_BOOTP_DNS
 0x00000040

	)

175 
	#CONFIG_BOOTP_DNS2
 0x00000080

	)

176 
	#CONFIG_BOOTP_SEND_HOSTNAME
 0x00000100

	)

178 
	#CONFIG_BOOTP_VENDOREX
 0x80000000

	)

180 
	#CONFIG_BOOTP_ALL
 (~
CONFIG_BOOTP_VENDOREX
)

	)

183 
	#CONFIG_BOOTP_DEFAULT
 (
CONFIG_BOOTP_SUBNETMASK
 | \

184 
CONFIG_BOOTP_GATEWAY
 | \

185 
CONFIG_BOOTP_HOSTNAME
 | \

186 
CONFIG_BOOTP_BOOTPATH
)

	)

188 #i‚de‡
CONFIG_BOOTP_MASK


189 
	#CONFIG_BOOTP_MASK
 
CONFIG_BOOTP_DEFAULT


	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/command.h

27 #i‚de‡
__COMMAND_H


28 
	#__COMMAND_H


	)

30 #i‚de‡
NULL


31 
	#NULL
 0

	)

34 #i‚def 
__ASSEMBLY__


39 
	scmd_tbl_s
 {

40 *
	m«me
;

41 
	mmax¨gs
;

42 
	mª≥©abÀ
;

44 (*
	mcmd
)(
	mcmd_tbl_s
 *, , , *[]);

45 *
	mußge
;

46 #ifdef 
CFG_LONGHELP


47 *
	mhñp
;

49 #ifde‡
CONFIG_AUTO_COMPLETE


51 (*
	mcom∂ëe
)(
	m¨gc
, *
	m¨gv
[], 
	mœ°_ch¨
, 
	mmaxv
, *
	mcmdv
[]);

55 
cmd_tbl_s
 
	tcmd_tbl_t
;

57 
cmd_tbl_t
 
__u_boŸ_cmd_°¨t
;

58 
cmd_tbl_t
 
__u_boŸ_cmd_íd
;

62 
cmd_tbl_t
 *
föd_cmd
(c⁄° *
cmd
);

64 #ifde‡
CONFIG_AUTO_COMPLETE


65 
ö°Æl_auto_com∂ëe
();

66 
cmd_auto_com∂ëe
(c⁄° *c⁄° 
¥om±
, *
buf
, *
≈
, *
cﬁp
);

77 
	tcomm™d_t
 (
	tcmd_tbl_t
 *, , , *[]);

84 
	#CMD_FLAG_REPEAT
 0x0001

	)

85 
	#CMD_FLAG_BOOTD
 0x0002

	)

93 
	#Såu˘_Se˘i⁄
 
	`__©åibuã__
 ((
unu£d
,
	`£˘i⁄
 (".u_boŸ_cmd")))

	)

95 #ifde‡ 
CFG_LONGHELP


97 
	#U_BOOT_CMD
(
«me
,
max¨gs
,
ªp
,
cmd
,
ußge
,
hñp
) \

98 
cmd_tbl_t
 
__u_boŸ_cmd_
##
«me
 
Såu˘_Se˘i⁄
 = {#«me, 
max¨gs
, 
ªp
, 
cmd
, 
ußge
, 
hñp
}

	)

102 
	#U_BOOT_CMD
(
«me
,
max¨gs
,
ªp
,
cmd
,
ußge
,
hñp
) \

103 
cmd_tbl_t
 
__u_boŸ_cmd_
##
«me
 
Såu˘_Se˘i⁄
 = {#«me, 
max¨gs
, 
ªp
, 
cmd
, 
ußge
}

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/common.h

24 #i‚de‡
__COMMON_H_


25 
	#__COMMON_H_
 1

	)

27 #unde‡
_LINUX_CONFIG_H


28 
	#_LINUX_CONFIG_H
 1

	)

30 
	tuch¨
;

31 vﬁ©ûê
	tvu_l⁄g
;

32 vﬁ©ûê
	tvu_sh‹t
;

33 vﬁ©ûê
	tvu_ch¨
;

35 
	~<c⁄fig.h
>

36 
	~<löux/bô›s.h
>

37 
	~<löux/ty≥s.h
>

38 
	~<löux/°rög.h
>

39 
	~<asm/±ø˚.h
>

40 
	~<°d¨g.h
>

41 #i‡
deföed
(
CONFIG_PCI
Ë&& deföed(
CONFIG_440
)

42 
	~<pci.h
>

44 #i‡
deföed
(
CONFIG_8xx
)

45 
	~<asm/8xx_imm≠.h
>

46 #i‡
deföed
(
CONFIG_MPC852
Ë|| deföed(
CONFIG_MPC852T
) || \

47 
deföed
(
CONFIG_MPC859
Ë|| deföed(
CONFIG_MPC859T
) || \

48 
deföed
(
CONFIG_MPC859DSL
) || \

49 
deföed
(
CONFIG_MPC866
Ë|| deföed(
CONFIG_MPC866T
) || \

50 
	$deföed
(
CONFIG_MPC866P
)

51 
	#CONFIG_MPC866_FAMILY
 1

	)

52 #ñi‡
	`deföed
(
CONFIG_MPC870
) \

53 || 
	`deföed
(
CONFIG_MPC875
) \

54 || 
	`deföed
(
CONFIG_MPC880
) \

55 || 
	$deföed
(
CONFIG_MPC885
)

56 
	#CONFIG_MPC885_FAMILY
 1

	)

58 #i‡ 
	`deföed
(
CONFIG_MPC860
) \

59 || 
	`deföed
(
CONFIG_MPC860T
) \

60 || 
	`deföed
(
CONFIG_MPC866_FAMILY
) \

61 || 
	$deföed
(
CONFIG_MPC885_FAMILY
)

62 
	#CONFIG_MPC86x
 1

	)

64 #ñi‡
	`deföed
(
CONFIG_5xx
)

65 
	~<asm/5xx_imm≠.h
>

66 #ñi‡
	`deföed
(
CONFIG_MPC5xxx
)

67 
	~<mpc5xxx.h
>

68 #ñi‡
	`deföed
(
CONFIG_MPC8220
)

69 
	~<asm/imm≠_8220.h
>

70 #ñi‡
	`deföed
(
CONFIG_8260
)

71 #i‡ 
	`deföed
(
CONFIG_MPC8247
) \

72 || 
	`deföed
(
CONFIG_MPC8248
) \

73 || 
	`deföed
(
CONFIG_MPC8271
) \

74 || 
	$deföed
(
CONFIG_MPC8272
)

75 
	#CONFIG_MPC8272_FAMILY
 1

	)

77 #i‡
	`deföed
(
CONFIG_MPC8272_FAMILY
)

78 
	#CONFIG_MPC8260
 1

	)

80 
	~<asm/imm≠_8260.h
>

82 #ifde‡
CONFIG_MPC85xx


83 
	~<mpc85xx.h
>

84 
	~<asm/imm≠_85xx.h
>

86 #ifdef 
CONFIG_4xx


87 
	~<µc4xx.h
>

89 #ifde‡
CONFIG_HYMOD


90 
	~<bﬂrd/hymod/hymod.h
>

92 #ifde‡
CONFIG_ARM


93 
	#asmlökage


	)

96 
	~<∑π.h
>

97 
	~<Êash.h
>

98 
	~<image.h
>

100 #ifdef 
DEBUG


101 
	#debug
(
fmt
,
¨gs
...Ë
	`¥ötf
 (fmà,##¨gs)

	)

102 
	#debugX
(
Àvñ
,
fmt
,
¨gs
...Ëi‡(
DEBUG
>ˆevñË
	`¥ötf
(fmt,##¨gs);

	)

104 
	#debug
(
fmt
,
¨gs
...)

	)

105 
	#debugX
(
Àvñ
,
fmt
,
¨gs
...)

	)

108 #i‚de‡
BUG


109 
	#BUG
() do { \

110 
	`¥ötf
("BUG: faûuªáà%s:%d/%s()!\n", 
__FILE__
, 
__LINE__
, 
__FUNCTION__
); \

111 
	`∑nic
("BUG!"); \

112 
	}
} 0)

	)

113 
	#BUG_ON
(
c⁄dôi⁄
Ëdÿ{ i‡(
	`u∆ikñy
((c⁄dôi⁄)!=0)Ë
	`BUG
(); } 0)

	)

116 
	#PAD_COUNT
(
s
, 
∑d
Ë(((sË- 1Ë/ (∑dË+ 1)

	)

117 
	#PAD_SIZE
(
s
, 
∑d
Ë(
	`PAD_COUNT
(s,ÖadË*Öad)

	)

118 
	#ALLOC_ALIGN_BUFFER_PAD
(
ty≥
, 
«me
, 
size
, 
Æign
, 
∑d
) \

119 
__
##
«me
[
	`ROUND
(
	`PAD_SIZE
((
size
Ë* (
ty≥
), 
∑d
), 
Æign
) \

120 + (
Æign
 - 1)]; \

122 
ty≥
 *
«me
 = (ty≥ *Ë
	`ALIGN
((
uöçå_t
)
__
##«me, 
Æign
)

	)

123 
	#ALLOC_ALIGN_BUFFER
(
ty≥
, 
«me
, 
size
, 
Æign
) \

124 
	`ALLOC_ALIGN_BUFFER_PAD
(
ty≥
, 
«me
, 
size
, 
Æign
, 1)

	)

125 
	#ALLOC_CACHE_ALIGN_BUFFER_PAD
(
ty≥
, 
«me
, 
size
, 
∑d
) \

126 
	`ALLOC_ALIGN_BUFFER_PAD
(
ty≥
, 
«me
, 
size
, 
ARCH_DMA_MINALIGN
, 
∑d
)

	)

127 
	#ALLOC_CACHE_ALIGN_BUFFER
(
ty≥
, 
«me
, 
size
) \

128 
	`ALLOC_ALIGN_BUFFER
(
ty≥
, 
«me
, 
size
, 
ARCH_DMA_MINALIGN
)

	)

131 (
	töãºu±_h™dÀr_t
)(*);

133 
	~<asm/u-boŸ.h
>

134 
	~<asm/globÆ_d©a.h
>

141 #i‡
	`deföed
(
CONFIG_TQM823M
Ë|| deföed(
CONFIG_TQM850M
) || \

142 
	`deföed
(
CONFIG_TQM855M
Ë|| deföed(
CONFIG_TQM860M
) || \

143 
	`deföed
(
CONFIG_TQM862M
Ë|| 
	$deföed
(
CONFIG_TQM866M
)

144 #i‚de‡
CONFIG_TQM8xxM


145 
	#CONFIG_TQM8xxM


	)

148 #i‡
	`deföed
(
CONFIG_TQM823L
Ë|| deföed(
CONFIG_TQM850L
) || \

149 
	`deföed
(
CONFIG_TQM855L
Ë|| deföed(
CONFIG_TQM860L
) || \

150 
	`deföed
(
CONFIG_TQM862L
Ë|| 
	$deföed
(
CONFIG_TQM8xxM
)

151 #i‚de‡
CONFIG_TQM8xxL


152 
	#CONFIG_TQM8xxL


	)

156 #i‚de‡
CONFIG_SERIAL_MULTI


158 #i‡
	`deföed
(
CONFIG_8xx_CONS_SMC1
Ë|| deföed(
CONFIG_8xx_CONS_SMC2
) \

159 || 
	`deföed
(
CONFIG_8xx_CONS_SCC1
Ë|| deföed(
CONFIG_8xx_CONS_SCC2
) \

160 || 
	`deföed
(
CONFIG_8xx_CONS_SCC3
Ë|| 
	$deföed
(
CONFIG_8xx_CONS_SCC4
)

162 
	#CONFIG_SERIAL_MULTI
 1

	)

171 
	#mö
(
X
, 
Y
) \

172 ({ 
	`ty≥of
 (
X
Ë
__x
 = (X), 
__y
 = (
Y
); \

173 (
__x
 < 
__y
Ë? __x : __y; 
	}
})

	)

175 
	#max
(
X
, 
Y
) \

176 ({ 
	`ty≥of
 (
X
Ë
__x
 = (X), 
__y
 = (
Y
); \

177 (
__x
 > 
__y
Ë? __x : __y; })

	)

179 
	#NUM_RX_DESC
 24

	)

180 
	#NUM_TX_DESC
 24

	)

185 
_BUFFER_ELEM_
 
	tBUFFER_ELEM
;

187 
	s_BUFFER_ELEM_


189 
	mtx_idx
;

190 *
	mpbuf
;

191 
BUFFER_ELEM
 *
	m√xt
;

196 
_VALID_BUFFER_STRUCT_
 
	tVALID_BUFFER_STRUCT
;

198 
	s_VALID_BUFFER_STRUCT_


200 
BUFFER_ELEM
 *
	mhód
;

201 
BUFFER_ELEM
 *
	mèû
;

209 #ifde‡
CONFIG_SERIAL_SOFTWARE_FIFO


210 
£rül_buf„ªd_öô
 ();

211 
£rül_buf„ªd_putc
 (const );

212 
£rül_buf„ªd_puts
 (const *);

213 
£rül_buf„ªd_gëc
 ();

214 
£rül_buf„ªd_t°c
 ();

217 
	$h™g
 (Ë
	`__©åibuã__
 ((
n‹ëu∫
));

220 
	`öôdøm
 ();

221 
	`di•œy_›ti⁄s
 ();

222 
	`¥öt_size
 (
ul⁄g
, const *);

225 
	`maö_lo›
 ();

226 
	`run_comm™d
 (c⁄° *
cmd
, 
Êag
);

227 
	`ªadlöe
 (c⁄° *c⁄° 
¥om±
, 
show_buf
);

228 
	`öô_cmd_timeout
();

229 
	`ª£t_cmd_timeout
();

232 
	`__©åibuã__
((
nomùs16
)Ë
	`bﬂrd_öô_f
 (
ul⁄g
);

233 
	`__©åibuã__
((
nomùs16
)Ë
	`bﬂrd_öô_r
 (
gd_t
 *, 
ul⁄g
);

234 
	`checkbﬂrd
 ();

235 
	`checkÊash
 ();

236 
	`checkdøm
 ();

237 * 
	`°rmhz
(*
buf
, 
hz
);

238 
	`œ°_°age_öô
();

239 
ul⁄g
 
m⁄ô‹_Êash_Àn
;

242 
	`Êash_≥º‹
 ();

245 
	`autos¸ùt
 (
ul⁄g
 
addr
);

248 
	`¥öt_image_hdr
 (
image_hódî_t
 *
hdr
);

250 
ul⁄g
 
lﬂd_addr
;

253 
	`ív_öô
 ();

254 
	`ív_ªloˇã
 ();

255 *
	`gëív
 (
uch¨
 *);

256 
	`gëív_r
 (
uch¨
 *
«me
, uch¨ *
buf
, 
Àn
);

257 
	`ßvìnv
 ();

258 #ifde‡
CONFIG_PPC


259 
ölöe
 
	`£ãnv
 (*, *);

261 
	`£ãnv
 (*, *);

263 #ifde‡
CONFIG_ARM


264 
	~<asm/mach-ty≥s.h
>

265 
	~<asm/£tup.h
>

266 
	~<asm/u-boŸ-¨m.h
>

268 #ifde‡
CONFIG_I386


269 
	~<asm/u-boŸ-i386.h
>

272 #ifde‡
CONFIG_AUTO_COMPLETE


273 
	`ív_com∂ëe
(*
v¨
, 
maxv
, *
cmdv
[], 
maxsz
, *
buf
);

276 
	`pci_öô
 ();

277 
	`pci_öô_bﬂrd
();

278 
	`pciöfo
 (, );

280 #i‡
	`deföed
(
CONFIG_PCI
Ë&& deföed(
CONFIG_440
)

281 #i‡
	`deföed
(
CFG_PCI_PRE_INIT
)

282 
	`pci_¥e_öô
 (
pci_c⁄åﬁÀr
 * );

284 #i‡
	`deföed
(
CFG_PCI_TARGET_INIT
)

285 
	`pci_èrgë_öô
 (
pci_c⁄åﬁÀr
 *);

287 #i‡
	`deföed
(
CFG_PCI_MASTER_INIT
)

288 
	`pci_ma°î_öô
 (
pci_c⁄åﬁÀr
 *);

290 
	`is_pci_ho°
 (
pci_c⁄åﬁÀr
 *);

293 
	`misc_öô_f
 ();

294 
	`misc_öô_r
 ();

297 
	`jum±abÀ_öô
();

303 
	`ª£t_phy
 ();

304 
	`fdc_hw_öô
 ();

307 
	`ì¥om_öô
 ();

308 #i‚de‡
CONFIG_SPI


309 
	`ì¥om_¥obe
 (
dev_addr
, 
off£t
);

311 
	`ì¥om_ªad
 (
dev_addr
, 
off£t
, 
uch¨
 *
buf„r
, 
˙t
);

312 
	`ì¥om_wrôe
 (
dev_addr
, 
off£t
, 
uch¨
 *
buf„r
, 
˙t
);

313 #ifde‡
CONFIG_LWMON


314 
uch¨
 
	`pic_ªad
 (uch¨ 
ªg
);

315 
	`pic_wrôe
 (
uch¨
 
ªg
, uch¨ 
vÆ
);

322 #i‡
	`deföed
(
CONFIG_SPI
Ë|| !deföed(
CFG_I2C_EEPROM_ADDR
)

323 
	#CFG_DEF_EEPROM_ADDR
 0

	)

325 
	#CFG_DEF_EEPROM_ADDR
 
CFG_I2C_EEPROM_ADDR


	)

328 #i‡
	`deföed
(
CONFIG_SPI
)

329 
	`•i_öô_f
 ();

330 
	`•i_öô_r
 ();

331 
ssize_t
 
	`•i_ªad
 (
uch¨
 *, , uchar *, );

332 
ssize_t
 
	`•i_wrôe
 (
uch¨
 *, , uchar *, );

335 #ifde‡
CONFIG_RPXCLASSIC


336 
	`Ωx˛assic_öô
 ();

339 
	`Ωxlôe_öô
 ();

341 #ifde‡
CONFIG_MBX


343 
	`mbx_öô
 ();

344 
	`bﬂrd_£rül_öô
 ();

345 
	`bﬂrd_ëhî_öô
 ();

348 #i‡
	`deföed
(
CONFIG_RPXCLASSIC
Ë|| deföed(
CONFIG_MBX
) || \

349 
	`deföed
(
CONFIG_IAD210
Ë|| 
	$deföed
(
CONFIG_XPEDITE1K
)

350 
	`bﬂrd_gë_íëaddr
 (
uch¨
 *
addr
);

353 #ifde‡
CONFIG_HERMES


355 
	`hîmes_°¨t_lxt980
 (
•ìd
);

358 #ifde‡
CONFIG_EVB64260


359 
	`evb64260_öô
();

360 
	`debug_Àd
(, );

361 
	`di•œy_mem_m≠
();

362 
	`≥rf‹m_so·_ª£t
();

365 
	`lﬂd_£∫um_ëhaddr
 ();

368 
	`bﬂrd_óæy_öô_f
 ();

369 
	`bﬂrd_œã_öô
 ();

370 
	`bﬂrd_po°˛k_öô
 ();

371 
	`bﬂrd_óæy_öô_r
 ();

372 
	`bﬂrd_powîoff
 ();

374 #i‡
	`deföed
(
CFG_DRAM_TEST
)

375 
	`ã°døm
();

379 #i‡
	`deföed
(
CONFIG_5xx
) || \

380 
	$deföed
(
CONFIG_8xx
)

381 
uöt
 
	`gë_immr
 (uint);

383 
uöt
 
	`gë_pú
 ();

384 #i‡
	`deföed
(
CONFIG_MPC5xxx
)

385 
uöt
 
	`gë_svr
 ();

387 
uöt
 
	`gë_pvr
 ();

388 
uöt
 
	`gë_svr
 ();

389 
uöt
 
	`rd_ic_c°
 ();

390 
	`wr_ic_c°
 (
uöt
);

391 
	`wr_ic_adr
 (
uöt
);

392 
uöt
 
	`rd_dc_c°
 ();

393 
	`wr_dc_c°
 (
uöt
);

394 
	`wr_dc_adr
 (
uöt
);

395 
	`iˇche_°©us
 ();

396 
	`iˇche_íabÀ
 ();

397 
	`iˇche_dißbÀ
();

398 
	`dˇche_°©us
 ();

399 
	`dˇche_íabÀ
 ();

400 
	`dˇche_dißbÀ
();

401 
	`ªloˇã_code
 (
ul⁄g
, 
gd_t
 *, ulong);

402 
	`mùs_ˇche_ª£t
();

404 
ul⁄g
 
	`gë_ídaddr
 ();

405 
	`å≠_öô
 (
ul⁄g
);

406 #i‡
	`deföed
 (
CONFIG_4xx
) || \

407 
	`deföed
 (
CONFIG_MPC5xxx
) || \

408 
	`deföed
 (
CONFIG_74xx_7xx
) || \

409 
	`deföed
 (
CONFIG_74x
) || \

410 
	`deföed
 (
CONFIG_75x
) || \

411 
	`deföed
 (
CONFIG_74xx
) || \

412 
	`deföed
 (
CONFIG_MPC8220
) || \

413 
	$deföed
(
CONFIG_MPC85xx
)

414 
	`ö8
();

415 
	`out8
(, );

416 
	`ö16
();

417 
	`ö16r
();

418 
	`out16
(, 
vÆue
);

419 
	`out16r
(, 
vÆue
);

420 
	`ö32
();

421 
	`ö32r
();

422 
	`out32
(, 
vÆue
);

423 
	`out32r
(, 
vÆue
);

424 
	`µcDcbf
(
vÆue
);

425 
	`µcDcbi
(
vÆue
);

426 
	`µcSync
();

427 
	`µcDcbz
(
vÆue
);

431 
	`check˝u
 ();

432 
	`checkiˇche
 ();

433 
	`checkdˇche
 ();

434 
	`upmc⁄fig
 (, *, );

435 
ul⁄g
 
	`gë_tb˛k
 ();

438 
	`£rül_öô
 ();

439 
	`£rül_£tbrg
 ();

440 
	`£rül_putc
 (const );

441 
	`£rül_puts
 (const *);

442 
	`£rül_addr
 ();

443 
	`£rül_gëc
 ();

444 
	`£rül_t°c
 ();

447 
	`gë_˛ocks
 ();

448 
	`gë_˛ocks_866
 ();

449 
	`sdøm_adju°_866
 ();

450 
	`adju°_sdøm_tbs_8xx
 ();

451 #i‡
	`deföed
(
CONFIG_8260
)

452 
	`¥t_8260_˛ks
 ();

454 #i‡
	`deföed
(
CONFIG_MPC5xxx
)

455 
	`¥t_mpc5xxx_˛ks
 ();

457 #i‡
	`deföed
(
CONFIG_MPC8220
)

458 
	`¥t_mpc8220_˛ks
 ();

460 #ifde‡
CONFIG_4xx


461 
ul⁄g
 
	`gë_OPB_‰eq
 ();

462 
ul⁄g
 
	`gë_PCI_‰eq
 ();

464 #i‡
	`deföed
(
CONFIG_S3C2400
Ë|| deföed(
CONFIG_S3C2410
Ë|| deföed(
CONFIG_LH7A40X
)

465 
ul⁄g
 
	`gë_FCLK
 ();

466 
ul⁄g
 
	`gë_HCLK
 ();

467 
ul⁄g
 
	`gë_PCLK
 ();

468 
ul⁄g
 
	`gë_UCLK
 ();

470 #i‡
	`deföed
(
CONFIG_LH7A40X
)

471 
ul⁄g
 
	`gë_PLLCLK
 ();

473 #i‡
deföed
 
CONFIG_INCA_IP


474 
uöt
 
	`öˇù_gë_˝u˛k
 ();

476 #i‡
	`deföed
(
CONFIG_IMX
)

477 
ul⁄g
 
	`gë_sy°emPLLCLK
();

478 
ul⁄g
 
	`gë_FCLK
();

479 
ul⁄g
 
	`gë_HCLK
();

480 
ul⁄g
 
	`gë_BCLK
();

481 
ul⁄g
 
	`gë_PERCLK1
();

482 
ul⁄g
 
	`gë_PERCLK2
();

483 
ul⁄g
 
	`gë_PERCLK3
();

485 
ul⁄g
 
	`gë_bus_‰eq
 (ulong);

487 #i‡
	`deföed
(
CONFIG_MPC85xx
)

488 
MPC85xx_SYS_INFO
 
	tsys_öfo_t
;

489 
	`gë_sys_öfo
 ( 
sys_öfo_t
 * );

492 #i‡
	`deföed
(
CONFIG_4xx
Ë|| deföed(
CONFIG_IOP480
)

493 #i‡
	`deföed
(
CONFIG_440
)

494 
PPC440_SYS_INFO
 
	tsys_öfo_t
;

496 
PPC405_SYS_INFO
 
	tsys_öfo_t
;

498 
	`gë_sys_öfo
 ( 
sys_öfo_t
 * );

502 #i‡
	`deföed
(
CONFIG_8xx
Ë|| deföed(
CONFIG_8260
)

503 
	`˝u_öô_f
 (vﬁ©ûê
imm≠_t
 *
immr
);

505 #i‡
	`deföed
(
CONFIG_4xx
Ë|| deföed(
CONFIG_MPC85xx
Ë|| deföed(
CONFIG_MCF52x2
)

506 
	`˝u_öô_f
 ();

509 
	`˝u_öô_r
 ();

510 #i‡
	`deföed
(
CONFIG_8260
)

511 
	`¥t_8260_r§
 ();

515 
	`öãºu±_öô
 ();

516 
	`timî_öãºu±
 (
±_ªgs
 *);

517 
	`exã∫Æ_öãºu±
 (
±_ªgs
 *);

518 
	`úq_ö°Æl_h™dÀr
(, 
öãºu±_h™dÀr_t
 *, *);

519 
	`úq_‰ì_h™dÀr
 ();

520 
	`ª£t_timî
 ();

521 
	`__©åibuã__
((
nomùs16
)Ë
ul⁄g
 
	`gë_timî
 (ul⁄g 
ba£
);

522 
	`£t_timî
 (
ul⁄g
 
t
);

523 
	`íabÀ_öãºu±s
 ();

524 
	`dißbÀ_öãºu±s
 ();

527 
	`d¥am_öô
 ();

528 
uöt
 
	`d¥am_ba£
();

529 
uöt
 
	`d¥am_ba£_Æign
(uöà
Æign
);

530 
uöt
 
	`d¥am_Æloc
(uöà
size
);

531 
uöt
 
	`d¥am_Æloc_Æign
(uöà
size
,uöà
Æign
);

532 
	`po°_w‹d_°‹e
 (
ul⁄g
);

533 
ul⁄g
 
	`po°_w‹d_lﬂd
 ();

534 
	`boŸcou¡_°‹e
 (
ul⁄g
);

535 
ul⁄g
 
	`boŸcou¡_lﬂd
 ();

536 
	#BOOTCOUNT_MAGIC
 0xB001C041

	)

539 
	`mii_öô
 ();

542 
ul⁄g
 
	`lcd_£tmem
 (ulong);

545 
ul⁄g
 
	`vfd_£tmem
 (ulong);

548 
ul⁄g
 
	`video_£tmem
 (ulong);

551 
	`__©åibuã__
((
nomùs16
)Ë
	`Êush_ˇche
 (, );

555 
	`gë_ticks
();

556 
	`waô_ticks
 ();

559 
	`__©åibuã__
((
nomùs16
)Ë
	`udñay
 ();

560 
ul⁄g
 
	`u£c2ticks
 (
u£c
);

561 
ul⁄g
 
	`ticks2u£c
 (
ticks
);

562 
	`öô_timeba£
 ();

565 
ul⁄g
 
	`sim∂e_°πoul
(c⁄° *
˝
,**
ídp
,
ba£
);

566 #ifde‡
CFG_64BIT_VSPRINTF


567 
	`sim∂e_°πouŒ
(c⁄° *
˝
,**
ídp
,
ba£
);

569 
	`sim∂e_°πﬁ
(c⁄° *
˝
,**
ídp
,
ba£
);

570 
	`∑nic
(c⁄° *
fmt
, ...);

571 
	`•rötf
(* 
buf
, c⁄° *
fmt
, ...);

572 
	`v•rötf
(*
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

575 
ul⁄g
 
	`¸c32
 (ul⁄g, c⁄° *, 
uöt
);

576 
ul⁄g
 
	`¸c32_no_comp
 (ul⁄g, c⁄° *, 
uöt
);

579 
	`c⁄sﬁe_öô_f
();

580 
	`c⁄sﬁe_öô_r
();

581 
	`c⁄sﬁe_assign
 (
fûe
, *
dev«me
);

582 
	`˘æc
 ();

583 
	`had_˘æc
 ();

584 
	`˛ór_˘æc
 ();

585 
	`dißbÀ_˘æc
 ();

592 
	`£rül_¥ötf
 (c⁄° *
fmt
, ...);

595 
	`gëc
();

596 
	`t°c
();

599 
	`putc
(c⁄° 
c
);

600 
	`puts
(c⁄° *
s
);

601 
	`¥ötf
(c⁄° *
fmt
, ...);

602 
	`v¥ötf
(c⁄° *
fmt
, 
va_li°
 
¨gs
);

605 
	#ïutc
(
c
Ë
	`Âutc
(
°dîr
, c)

	)

606 
	#ïuts
(
s
Ë
	`Âuts
(
°dîr
, s)

	)

607 
	#ïrötf
(
fmt
,
¨gs
...Ë
	`Ârötf
(
°dîr
,fmà,##¨gs)

	)

613 
	#°dö
 0

	)

614 
	#°dout
 1

	)

615 
	#°dîr
 2

	)

616 
	#MAX_FILES
 3

	)

618 
	`Ârötf
(
fûe
, c⁄° *
fmt
, ...);

619 
	`Âuts
(
fûe
, c⁄° *
s
);

620 
	`Âutc
(
fûe
, c⁄° 
c
);

621 
	`·°c
(
fûe
);

622 
	`fgëc
(
fûe
);

624 
	`pcmcü_öô
 ();

626 #ifde‡
CONFIG_SHOW_BOOT_PROGRESS


627 
	`show_boŸ_¥ogªss
 (
°©us
);

630 #i‡
	`deföed
(
CFG_ENV_IS_IN_NAND
)

631 #i‡
	`deföed
(
MTK_NAND
)

632 
	~"../drivîs/«nd/mt6575_ty≥defs.h
"

634 
	~"../drivîs/ølök_«nd.h
"

638 
	#ARRAY_SIZE
(
x
Ë((xË/ ((x)[0]))

	)

640 
	#ROUND
(
a
,
b
Ë((◊Ë+ (bË- 1Ë& ~((bË- 1))

	)

641 
	#DIV_ROUND
(
n
,
d
Ë((“Ë+ ((d)/2)Ë/ (d))

	)

642 
	#DIV_ROUND_UP
(
n
,
d
Ë((“Ë+ (dË- 1Ë/ (d))

	)

643 
	#roundup
(
x
, 
y
Ë((((xË+ ((yË- 1)Ë/ (y)Ë* (y))

	)

650 
	#DIV_ROUND_CLOSEST
(
x
, 
divis‹
)( \

652 
	`ty≥of
(
x
Ë
__x
 = x; \

653 
	`ty≥of
(
divis‹
Ë
__d
 = divisor; \

654 (((
	`ty≥of
(
x
))-1) > 0 || \

655 ((
	`ty≥of
(
divis‹
))-1Ë> 0 || (
__x
) > 0) ? \

656 (((
__x
Ë+ ((
__d
) / 2)) / (__d)) : \

657 (((
__x
Ë- ((
__d
) / 2)) / (__d)); \

658 
	}
} \

659 )

	)

661 
	#ALIGN
(
x
,
a
Ë
	`__ALIGN_MASK
((x),(
	`ty≥of
(x))◊)-1)

	)

662 
	#__ALIGN_MASK
(
x
,
mask
Ë(((x)+(mask))&~(mask))

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/compiler.h

1 #i‚de‡
__COMPILER_H__


2 
	#__COMPILER_H__


	)

4 
	#likñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

5 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/config.h

1 
	~<c⁄figs/π2880.h
>

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/configs/rt2880.h

28 #i‚de‡
__CONFIG_H


29 
	#__CONFIG_H


	)

31 #i‚de‡
__ASSEMBLY__


32 #i‡
deföed
(
CFG_ENV_IS_IN_NAND
)

33 #i‡
deföed
(
MTK_NAND
)

34 
CFG_BLOCKSIZE
;

36 
	~"../../drivîs/ølök_«nd.h
"

41 
	~"../../autoc⁄f.h
"

44 
	#CONFIG_RT2880_ETH
 1

	)

46 
	#CONFIG_MIPS32
 1

	)

48 #i‡
deföed
 (
RT3052_FPGA_BOARD
Ë|| deföed (
RT3352_FPGA_BOARD
) || \

49 
deföed
 (
RT2883_FPGA_BOARD
Ë|| deföed (
RT3883_FPGA_BOARD
) || \

50 
deföed
 (
RT5350_FPGA_BOARD
Ë|| deföed (
RT6855_FPGA_BOARD
) || \

51 
deföed
 (
MT7620_FPGA_BOARD
Ë|| deföed (
MT7621_FPGA_BOARD
) || \

52 
deföed
 (
RT6855A_FPGA_BOARD
Ë|| 
	$deföed
 (
MT7628_FPGA_BOARD
)

53 
	#FPGA_BOARD_CLOCK_RATE
 40000000

	)

55 
	#FPGA_BOARD_CLOCK_RATE
 25000000

	)

57 
	#PALMCHIP_CLOCK_DIVISOR
 16

	)

58 
	#FPGA_BOARD_CLOCK_DIVISOR
 32

	)

63 #ifde‡
RT2880_ASIC_BOARD


64 
	#CPU_CLOCK_RATE
 266666666

	)

65 #ñi‡
	`deföed
 (
RT3052_ASIC_BOARD
)

66 
	#CPU_CLOCK_RATE
 384000000

	)

67 #ñi‡
	`deföed
 (
RT3352_ASIC_BOARD
)

68 
	#CPU_CLOCK_RATE
 400000000

	)

69 #ñi‡
	`deföed
 (
RT6855_ASIC_BOARD
Ë|| deföed (
RT6855A_ASIC_BOARD
)

70 
	#CPU_CLOCK_RATE
 500000000

	)

71 #ñi‡
	`deföed
 (
MT7620_ASIC_BOARD
)

72 
	#CPU_CLOCK_RATE
 600000000

	)

73 #ñi‡
	`deföed
 (
MT7628_ASIC_BOARD
)

74 
	#CPU_CLOCK_RATE
 600000000

	)

75 #ñi‡
	`deföed
 (
MT7621_ASIC_BOARD
)

76 #i‡
	`deföed
 (
MT7621_CPU_FREQUENCY
)

77 
	#CPU_CLOCK_RATE
 (
MT7621_CPU_FREQUENCY
*1000000)

	)

79 
	#CPU_CLOCK_RATE
 (800000000)

	)

81 #ñi‡
	`deföed
 (
RT2883_ASIC_BOARD
)

82 
	#CPU_CLOCK_RATE
 400000000

	)

83 #ñi‡
	`deföed
 (
RT3883_ASIC_BOARD
)

84 
	#CPU_CLOCK_RATE
 500000000

	)

85 #ñi‡
	`deföed
 (
RT5350_ASIC_BOARD
)

86 
	#CPU_CLOCK_RATE
 360000000

	)

88 
	#CPU_CLOCK_RATE
 
FPGA_BOARD_CLOCK_RATE


	)

93 
	#SERIAL_CLOCK_DIVISOR
 16

	)

95 
	#CONFIG_BOOTDELAY
 2

	)

97 
	#CONFIG_BAUDRATE
 115200

	)

99 
	#CONFIG_SERVERIP
 192.168.10.188

	)

100 
	#CONFIG_IPADDR
 192.168.10.1

	)

101 
	#CONFIG_ETHADDR
 "00:66:88:00:00:00"

	)

103 
	#CFG_BAUDRATE_TABLE
 { 9600, 19200, 38400, 57600, 115200 
	}

	)
}

107 #unde‡
CONFIG_BOOTARGS


109 
	#CONFIG_BOOTCOMMAND
 "tftp"

110 

	)

112 
	~<cmd_c⁄fdefs.h
>

117 
	#CFG_LONGHELP


	)

119 #i‡
deföed
 (
RT2880_FPGA_BOARD
Ë|| deföed (
RT2880_ASIC_BOARD
)

120 
	#CFG_PROMPT
 "RT2880 # "

	)

121 #ñi‡
deföed
 (
RT2883_FPGA_BOARD
Ë|| deföed (
RT2883_ASIC_BOARD
)

122 
	#CFG_PROMPT
 "RT2883 # "

	)

123 #ñi‡
deföed
 (
RT3052_FPGA_BOARD
Ë|| deföed (
RT3052_ASIC_BOARD
)

124 
	#CFG_PROMPT
 "RT3052 # "

	)

125 #ñi‡
deföed
 (
RT3352_FPGA_BOARD
Ë|| deföed (
RT3352_ASIC_BOARD
)

126 
	#CFG_PROMPT
 "RT3352 # "

	)

127 #ñi‡
deföed
 (
RT3883_FPGA_BOARD
Ë|| deföed (
RT3883_ASIC_BOARD
)

128 
	#CFG_PROMPT
 "RT3883 # "

	)

129 #ñi‡
deföed
 (
RT5350_FPGA_BOARD
Ë|| deföed (
RT5350_ASIC_BOARD
)

130 
	#CFG_PROMPT
 "RT5350 # "

	)

131 #ñi‡
deföed
 (
RT6855_FPGA_BOARD
Ë|| deföed (
RT6855_ASIC_BOARD
)

132 
	#CFG_PROMPT
 "RT6855 # "

	)

133 #ñi‡
deföed
 (
RT6855A_FPGA_BOARD
Ë|| deföed (
RT6855A_ASIC_BOARD
)

134 
	#CFG_PROMPT
 "RT6855A # "

	)

135 #ñi‡
deföed
 (
MT7620_FPGA_BOARD
Ë|| deföed (
MT7620_ASIC_BOARD
)

136 
	#CFG_PROMPT
 "MT7620 # "

	)

137 #ñi‡
deföed
 (
MT7621_FPGA_BOARD
Ë|| deföed (
MT7621_ASIC_BOARD
)

138 
	#CFG_PROMPT
 "MT7621 # "

	)

139 #ñi‡
deföed
 (
MT7628_FPGA_BOARD
Ë|| deföed (
MT7628_ASIC_BOARD
)

140 
	#CFG_PROMPT
 "MT7628 # "

	)

142 
	#CFG_PROMPT
 "RTxxxx # "

	)

144 
	#CFG_CBSIZE
 256

	)

145 
	#CFG_PBSIZE
 (
CFG_CBSIZE
+(
CFG_PROMPT
)+16Ë

	)

146 
	#CFG_MAXARGS
 16

	)

148 #i‡
deföed
 (
MTK_NAND
)

149 
	#CFG_MALLOC_LEN
 1*1024*1024

	)

151 
	#CFG_MALLOC_LEN
 256*1024

	)

154 
	#CFG_BOOTPARAMS_LEN
 128*1024

	)

156 
	#CFG_HZ
 
CPU_CLOCK_RATE
/2

	)

158 #i‡
deföed
 (
RT2880_FPGA_BOARD
Ë|| deföed (
RT2880_ASIC_BOARD
)

159 
	#CFG_SDRAM_BASE
 0x8A000000

	)

161 
	#CFG_SDRAM_BASE
 0x80000000

	)

168 
	#CFG_CONSOLE_INFO_QUIET


	)

170 #i‡
deföed
 (
RT2880_FPGA_BOARD
Ë|| deföed (
RT2880_ASIC_BOARD
)

171 
	#CFG_LOAD_ADDR
 0x8A100000

	)

172 
	#CFG_HTTP_DL_ADDR
 0x8A300000

	)

174 
	#CFG_MEMTEST_START
 0x8A100000

	)

175 
	#CFG_MEMTEST_END
 0x8A400000

	)

177 
	#CFG_LOAD_ADDR
 0x80100000

	)

178 
	#CFG_HTTP_DL_ADDR
 0x80300000

	)

179 #i‡
deföed
(
RT6855A_FPGA_BOARD
Ë|| deföed(
RT6855A_ASIC_BOARD
Ë|| deföed(
MT7620_FPGA_BOARD
Ë|| deföed(
MT7620_ASIC_BOARD
Ë|| deföed(
MT7628_FPGA_BOARD
Ë|| deföed(
MT7628_ASIC_BOARD
)

180 
	#CFG_SPINAND_LOAD_ADDR
 0x80c00000

	)

182 
	#CFG_SPINAND_LOAD_ADDR
 0x80500000

	)

185 
	#CFG_MEMTEST_START
 0x80100000

	)

186 
	#CFG_MEMTEST_END
 0x80400000

	)

190 
	#CFG_EMBEDED_SRAM_START
 0xA0800000

	)

191 
	#CFG_EMBEDED_SRAM_FOR_RXRING0_DESC
 0xA0800000

	)

192 
	#CFG_EMBEDED_SRAM_FOR_TXRING0_DESC
 0xA0800100

	)

193 
	#CFG_EMBEDED_SRAM_FOR_TXRING1_DESC
 0xA0800200

	)

194 
	#CFG_EMBEDED_SRAM_BUF_START
 0xA0800300

	)

195 
	#CFG_EMBEDED_SRAM_SDP0_BUF_START
 0xA0804000

	)

196 
	#CFG_EMBEDED_SRAM_END
 0xA0807FFF

	)

201 
	#CFG_MAX_FLASH_BANKS
 1

	)

202 
	#CFG_MAX_FLASH_SECT
 (263Ë

	)

204 #i‡
deföed
 (
RT2880_FPGA_BOARD
Ë|| deföed (
RT2880_ASIC_BOARD
)

205 #ifde‡
DUAL_IMAGE_SUPPORT


206 
	#PHYS_FLASH_START
 0xBC000000

	)

207 #i‡
deföed
 (
ON_BOARD_2M_FLASH_COMPONENT
)

208 
	#PHYS_FLASH_1
 0xBC000000

	)

209 
	#PHYS_FLASH2_1
 0xBC100000

	)

210 #ñi‡
deföed
 (
ON_BOARD_4M_FLASH_COMPONENT
)

211 
	#PHYS_FLASH_1
 0xBC000000

	)

212 
	#PHYS_FLASH2_1
 0xBC200000

	)

213 #ñi‡
deföed
 (
ON_BOARD_8M_FLASH_COMPONENT
)

214 
	#PHYS_FLASH_1
 0xBC400000

	)

215 
	#PHYS_FLASH_2
 0xBC000000

	)

216 
	#PHYS_FLASH2_1
 0xBC000000

	)

217 #ñi‡
deföed
 (
ON_BOARD_16M_FLASH_COMPONENT
)

218 
	#PHYS_FLASH_1
 0xBCC00000

	)

219 
	#PHYS_FLASH_2
 0xBC000000

	)

220 
	#PHYS_FLASH2_1
 0xBC400000

	)

221 
	#PHYS_FLASH2_2
 0xBC800000

	)

224 #ifde‡
ON_BOARD_8M_FLASH_COMPONENT


225 
	#PHYS_FLASH_1
 0xBC400000

	)

227 
	#PHYS_FLASH_1
 0xBCC00000

	)

229 
	#PHYS_FLASH_2
 0xBC000000

	)

230 #i‡
deföed
 (
ON_BOARD_8M_FLASH_COMPONENT
Ë|| deföed (
ON_BOARD_16M_FLASH_COMPONENT
)

231 
	#PHYS_FLASH_START
 
PHYS_FLASH_2


	)

233 
	#PHYS_FLASH_START
 
PHYS_FLASH_1


	)

236 #ñi‡
deföed
 (
RT2883_FPGA_BOARD
Ë|| deföed (
RT2883_ASIC_BOARD
) || \

237 
deföed
 (
RT3883_FPGA_BOARD
Ë|| deföed (
RT3883_ASIC_BOARD
) || \

238 
deföed
 (
RT3352_FPGA_BOARD
Ë|| deföed (
RT3352_ASIC_BOARD
) || \

239 
deföed
 (
RT5350_FPGA_BOARD
Ë|| deföed (
RT5350_ASIC_BOARD
) || \

240 
deföed
 (
RT6855_FPGA_BOARD
Ë|| deföed (
RT6855_ASIC_BOARD
) || \

241 
deföed
 (
MT7620_FPGA_BOARD
Ë|| deföed (
MT7620_ASIC_BOARD
) || \

242 
deföed
 (
MT7621_FPGA_BOARD
Ë|| deföed (
MT7621_ASIC_BOARD
) || \

243 
deföed
 (
MT7628_FPGA_BOARD
Ë|| 
	$deföed
 (
MT7628_ASIC_BOARD
)

244 
	#PHYS_FLASH_START
 0xBC000000

	)

245 
	#PHYS_FLASH_1
 0xBC000000

	)

246 #ifde‡
DUAL_IMAGE_SUPPORT


247 #i‡
	`deföed
 (
ON_BOARD_2M_FLASH_COMPONENT
)

248 
	#PHYS_FLASH2_1
 0xBC100000

	)

249 #ñi‡
	`deföed
 (
ON_BOARD_4M_FLASH_COMPONENT
)

250 
	#PHYS_FLASH2_1
 0xBC200000

	)

251 #ñi‡
	`deföed
 (
ON_BOARD_8M_FLASH_COMPONENT
)

252 
	#PHYS_FLASH2_1
 0xBC400000

	)

253 #ñi‡
	`deföed
 (
ON_BOARD_16M_FLASH_COMPONENT
)

254 
	#PHYS_FLASH2_1
 0xBC800000

	)

255 #ñi‡
	`deföed
 (
ON_BOARD_32M_FLASH_COMPONENT
)

256 
	#PHYS_FLASH2_1
 0xBD000000

	)

259 #ñi‡ 
	`deföed
 (
MT7621_FPGA_BOARD
Ë|| deföed (
MT7621_ASIC_BOARD
)

260 
	#PHYS_FLASH_START
 0xBFC00000

	)

261 
	#PHYS_FLASH_1
 0xBFC00000

	)

262 #ifde‡
DUAL_IMAGE_SUPPORT


265 #ñi‡
	`deföed
 (
RT3052_FPGA_BOARD
Ë|| deföed (
RT3052_ASIC_BOARD
)

267 
	#PHYS_FLASH_START
 0xBF000000

	)

268 
	#PHYS_FLASH_1
 0xBF000000

	)

269 #ifde‡
DUAL_IMAGE_SUPPORT


270 #i‡
	`deföed
 (
ON_BOARD_2M_FLASH_COMPONENT
)

271 
	#PHYS_FLASH2_1
 0xBF100000

	)

272 #ñi‡
	`deföed
 (
ON_BOARD_4M_FLASH_COMPONENT
)

273 
	#PHYS_FLASH2_1
 0xBF200000

	)

274 #ñi‡
	`deföed
 (
ON_BOARD_8M_FLASH_COMPONENT
)

275 
	#PHYS_FLASH2_1
 0xBF400000

	)

276 #ñi‡
	`deföed
 (
ON_BOARD_16M_FLASH_COMPONENT
)

277 
	#PHYS_FLASH2_1
 0xBF800000

	)

278 #ñi‡
	`deföed
 (
ON_BOARD_32M_FLASH_COMPONENT
)

279 
	#PHYS_FLASH2_1
 0xBB000000

	)

280 #unde‡
CFG_MAX_FLASH_BANKS


281 
	#CFG_MAX_FLASH_BANKS
 2

	)

285 #ifde‡
ON_BOARD_32M_FLASH_COMPONENT


286 
	#PHYS_FLASH2_START
 0xBB000000

	)

287 
	#PHYS_FLASH_2
 0xBB000000

	)

288 #unde‡
CFG_MAX_FLASH_BANKS


289 
	#CFG_MAX_FLASH_BANKS
 2

	)

292 #ñi‡
	`deföed
 (
RT6855A_FPGA_BOARD
Ë|| deföed (
RT6855A_ASIC_BOARD
)

293 
	#PHYS_FLASH_1
 0xB0000000

	)

297 
	#CFG_MONITOR_BASE
 
TEXT_BASE


	)

299 
	#CFG_MONITOR_LEN
 (192 << 10)

	)

301 
	#CFG_INIT_SP_OFFSET
 0x400000

	)

303 
	#CFG_FLASH_BASE
 
PHYS_FLASH_1


	)

304 #ifde‡
DUAL_IMAGE_SUPPORT


305 
	#CFG_FLASH2_BASE
 
PHYS_FLASH2_1


	)

309 
	#CFG_FLASH_ERASE_TOUT
 (15UL * 
CFG_HZ
Ë

	)

310 
	#CFG_FLASH_WRITE_TOUT
 (5 * 
CFG_HZ
Ë

	)

311 
	#CFG_ETH_AN_TOUT
 (5 * 
CFG_HZ
Ë

	)

312 
	#CFG_ETH_LINK_UP_TOUT
 (5 * 
CFG_HZ
Ë

	)

313 
	#CFG_FLASH_STATE_DISPLAY_TOUT
 (2 * 
CFG_HZ
Ë

	)

315 #i‡
	`deföed
 (
ON_BOARD_32M_FLASH_COMPONENT
Ë&& !deföed (
DUAL_IMAGE_SUPPORT
)

316 
	#CFG_BOOTLOADER_SIZE
 0x40000

	)

317 
	#CFG_CONFIG_SIZE
 0x20000

	)

318 
	#CFG_FACTORY_SIZE
 0x20000

	)

319 
	#CFG_ENV_ADDR
 (
PHYS_FLASH_2
 + 0x1000000 - 
CFG_BOOTLOADER_SIZE
)

	)

320 
	#CFG_FACTORY_ADDR
 (
PHYS_FLASH_2
 + 0x1000000 - 
CFG_FACTORY_SIZE
)

	)

321 
	#CFG_KERN_ADDR
 (
CFG_FLASH_BASE
 + 
CFG_BOOTLOADER_SIZE
)

	)

322 
	#CFG_KERN2_ADDR
 (
CFG_FLASH2_BASE
 + 
CFG_BOOTLOADER_SIZE
)

	)

324 #i‡
	`deföed
(
SMALL_UBOOT_PARTITION
)

325 
	#CFG_BOOTLOADER_SIZE
 0x20000

	)

326 
	#CFG_CONFIG_SIZE
 0x10000

	)

327 
	#CFG_FACTORY_SIZE
 0x00000

	)

329 #i‡
	`deföed
(
MTK_NAND
Ë|| deföed (
CFG_ENV_IS_IN_NAND
)

330 
	#CFG_BOOTLOADER_SIZE
 (
CFG_BLOCKSIZE
<<2)

	)

331 
	#CFG_CONFIG_SIZE
 (
CFG_BLOCKSIZE
<<2)

	)

332 
	#CFG_FACTORY_SIZE
 (
CFG_BLOCKSIZE
<<1)

	)

334 
	#CFG_BOOTLOADER_SIZE
 0x30000

	)

335 
	#CFG_CONFIG_SIZE
 0x10000

	)

336 
	#CFG_FACTORY_SIZE
 0x10000

	)

340 
	#CFG_ENV_ADDR
 (
CFG_FLASH_BASE
 + 
CFG_BOOTLOADER_SIZE
)

	)

341 
	#CFG_FACTORY_ADDR
 (
CFG_FLASH_BASE
 + 
CFG_BOOTLOADER_SIZE
 + 
CFG_CONFIG_SIZE
)

	)

342 
	#CFG_KERN_ADDR
 (
CFG_FLASH_BASE
 + (
CFG_BOOTLOADER_SIZE
 + 
CFG_CONFIG_SIZE
 + 
CFG_FACTORY_SIZE
))

	)

343 #ifde‡
DUAL_IMAGE_SUPPORT


344 
	#CFG_KERN2_ADDR
 (
CFG_FLASH2_BASE
 + (
CFG_BOOTLOADER_SIZE
 + 
CFG_CONFIG_SIZE
 + 
CFG_FACTORY_SIZE
))

	)

348 
	#CFG_ENV_SECT_SIZE
 
CFG_CONFIG_SIZE


	)

349 
	#CFG_ENV_SIZE
 0x1000

	)

351 #i‡
	`deföed
(
SMALL_UBOOT_PARTITION
)

352 
	#CFG_UBOOT_SECT_SIZE
 
CFG_BOOTLOADER_SIZE


	)

353 
	#CFG_UBOOT_SIZE
 0x19000

354 
	#CFG_RF_PARAM_SIZE
 0x800

	)

355 #unde‡
CFG_FACTORY_ADDR


356 
	#CFG_FACTORY_ADDR
 (
CFG_BOOTLOADER_SIZE
 - (2 * 
CFG_RF_PARAM_SIZE
))

	)

357 
	#CFG_FACTORY_ADDR2
 (
CFG_BOOTLOADER_SIZE
 - 
CFG_RF_PARAM_SIZE
)

	)

360 #i‡
	`deföed
 (
DUAL_IMAGE_SUPPORT
)

361 #i‡
	`deföed
 (
ON_BOARD_2M_FLASH_COMPONENT
)

362 
	#CFG_KERN_SIZE
 (0x100000 - (
CFG_BOOTLOADER_SIZE
 + 
CFG_CONFIG_SIZE
 + 
CFG_FACTORY_SIZE
))

	)

363 #ñi‡
	`deföed
 (
ON_BOARD_4M_FLASH_COMPONENT
)

364 
	#CFG_KERN_SIZE
 (0x200000 - (
CFG_BOOTLOADER_SIZE
 + 
CFG_CONFIG_SIZE
 + 
CFG_FACTORY_SIZE
))

	)

365 #ñi‡
	`deföed
 (
ON_BOARD_8M_FLASH_COMPONENT
)

366 
	#CFG_KERN_SIZE
 (0x400000 - (
CFG_BOOTLOADER_SIZE
 + 
CFG_CONFIG_SIZE
 + 
CFG_FACTORY_SIZE
))

	)

367 #ñi‡
	`deföed
 (
ON_BOARD_16M_FLASH_COMPONENT
)

368 
	#CFG_KERN_SIZE
 (0x800000 - (
CFG_BOOTLOADER_SIZE
 + 
CFG_CONFIG_SIZE
 + 
CFG_FACTORY_SIZE
))

	)

370 
	#CFG_KERN2_SIZE
 
CFG_KERN_SIZE


	)

372 #i‡
	`deföed
 (
ON_BOARD_2M_FLASH_COMPONENT
)

373 
	#CFG_KERN_SIZE
 (0x200000 - (
CFG_BOOTLOADER_SIZE
 + 
CFG_CONFIG_SIZE
 + 
CFG_FACTORY_SIZE
))

	)

374 #ñi‡
	`deföed
 (
ON_BOARD_4M_FLASH_COMPONENT
)

375 
	#CFG_KERN_SIZE
 (0x400000 - (
CFG_BOOTLOADER_SIZE
 + 
CFG_CONFIG_SIZE
 + 
CFG_FACTORY_SIZE
))

	)

376 #ñi‡
	`deföed
 (
ON_BOARD_8M_FLASH_COMPONENT
)

377 
	#CFG_KERN_SIZE
 (0x800000 - (
CFG_BOOTLOADER_SIZE
 + 
CFG_CONFIG_SIZE
 + 
CFG_FACTORY_SIZE
))

	)

378 #ñi‡
	`deföed
 (
ON_BOARD_16M_FLASH_COMPONENT
)

379 
	#CFG_KERN_SIZE
 (0x1000000 - (
CFG_BOOTLOADER_SIZE
 + 
CFG_CONFIG_SIZE
 + 
CFG_FACTORY_SIZE
))

	)

383 
	#CONFIG_FLASH_16BIT


	)

385 
	#CONFIG_NR_DRAM_BANKS
 1

	)

387 
	#CFG_RX_ETH_BUFFER
 60

	)

392 
	#CFG_DCACHE_SIZE
 (16*1024)

	)

393 
	#CFG_ICACHE_SIZE
 (16*1024)

	)

394 
	#CFG_CACHELINE_SIZE
 16

	)

396 
	#RT2880_REGS_BASE
 0xA0000000

	)

408 
	#RT2880_SYS_CNTL_BASE
 (
RALINK_SYSCTL_BASE
)

	)

409 #i‡
	`deföed
 (
RT6855A_FPGA_BOARD
Ë|| deföed (
RT6855A_ASIC_BOARD
)

410 
	#RT2880_SYSCFG_REG
 (
RT2880_SYS_CNTL_BASE
+0x8c)

	)

411 
	#RT2880_RSTCTRL_REG
 (
RT2880_SYS_CNTL_BASE
+0x834)

	)

412 
	#RT2880_RSTSTAT_REG
 (
RT2880_SYS_CNTL_BASE
+0x38)

	)

413 
	#RT2880_GPIOMODE_REG
 (
RT2880_SYS_CNTL_BASE
+0x860)

	)

415 
	#RT2880_CHIP_REV_ID_REG
 (
RT2880_SYS_CNTL_BASE
+0x0c)

	)

416 
	#RT2880_SYSCFG_REG
 (
RT2880_SYS_CNTL_BASE
+0x10)

	)

417 
	#RT2880_SYSCFG1_REG
 (
RT2880_SYS_CNTL_BASE
+0x14)

	)

418 
	#RT2880_CLKCFG1_REG
 (
RT2880_SYS_CNTL_BASE
+0x30)

	)

419 
	#RT2880_RSTCTRL_REG
 (
RT2880_SYS_CNTL_BASE
+0x34)

	)

420 
	#RT2880_RSTSTAT_REG
 (
RT2880_SYS_CNTL_BASE
+0x38)

	)

421 
	#RT2880_SYSCLKCFG_REG
 (
RT2880_SYS_CNTL_BASE
+0x3c)

	)

422 #i‡
	`deföed
 (
MT7628_ASIC_BOARD
)

423 
	#RT2880_AGPIOCFG_REG
 (
RT2880_SYS_CNTL_BASE
+0x3c)

	)

425 
	#RT2880_GPIOMODE_REG
 (
RT2880_SYS_CNTL_BASE
+0x60)

	)

428 
	#RT2880_PRGIO_ADDR
 (
RALINK_SYSCTL_BASE
 + 0x600)

429 #i‡
	`deföed
 (
MT7621_FPGA_BOARD
Ë|| deföed (
MT7621_ASIC_BOARD
) || \

430 
	`deföed
 (
MT7628_FPGA_BOARD
Ë|| deföed (
MT7628_ASIC_BOARD
)

	)

431 
	#RT2880_REG_PIOINT
 (
RT2880_PRGIO_ADDR
 + 0x90)

	)

432 
	#RT2880_REG_PIOEDGE
 (
RT2880_PRGIO_ADDR
 + 0xA0)

	)

433 
	#RT2880_REG_PIORENA
 (
RT2880_PRGIO_ADDR
 + 0x50)

	)

434 
	#RT2880_REG_PIOFENA
 (
RT2880_PRGIO_ADDR
 + 0x60)

	)

435 
	#RT2880_REG_PIODATA
 (
RT2880_PRGIO_ADDR
 + 0x20)

	)

436 
	#RT2880_REG_PIODIR
 (
RT2880_PRGIO_ADDR
 + 0x00)

	)

437 
	#RT2880_REG_PIOSET
 (
RT2880_PRGIO_ADDR
 + 0x30)

	)

438 
	#RT2880_REG_PIORESET
 (
RT2880_PRGIO_ADDR
 + 0x40)

	)

440 
	#RT2880_REG_PIOINT
 (
RT2880_PRGIO_ADDR
 + 0)

	)

441 
	#RT2880_REG_PIOEDGE
 (
RT2880_PRGIO_ADDR
 + 0x04)

	)

442 
	#RT2880_REG_PIORENA
 (
RT2880_PRGIO_ADDR
 + 0x08)

	)

443 
	#RT2880_REG_PIOFENA
 (
RT2880_PRGIO_ADDR
 + 0x0C)

	)

444 
	#RT2880_REG_PIODATA
 (
RT2880_PRGIO_ADDR
 + 0x20)

	)

445 
	#RT2880_REG_PIODIR
 (
RT2880_PRGIO_ADDR
 + 0x24)

	)

446 
	#RT2880_REG_PIOSET
 (
RT2880_PRGIO_ADDR
 + 0x30)

	)

447 
	#RT2880_REG_PIORESET
 (
RT2880_PRGIO_ADDR
 + 0x40)

	)

449 
	#RALINK_REG
(
x
Ë(*((vﬁ©ûê
u32
 *)(x)))

	)

450 #i‡
	`deföed
 (
RT6855A_FPGA_BOARD
Ë|| deföed (
RT6855A_ASIC_BOARD
) || \

451 
	`deföed
 (
MT7621_FPGA_BOARD
Ë|| deföed (
MT7621_ASIC_BOARD
Ë|| deföed (
MT7628_FPGA_BOARD
Ë|| 
	$deföed
 (
MT7628_ASIC_BOARD
)

452 
	#ø_öb
(
off£t
Ë(*(vﬁ©ûê*)(off£t))

	)

453 
	#ø_öw
(
off£t
Ë(*(vﬁ©ûê*)(off£t))

	)

454 
	#ø_öl
(
off£t
Ë(*(vﬁ©ûê*)(off£t))

	)

456 
	#ø_outb
(
off£t
,
vÆ
Ë(*(vﬁ©ûê*)(off£tËvÆ)

	)

457 
	#ø_outw
(
off£t
,
vÆ
Ë(*(vﬁ©ûê*)(off£tËvÆ)

	)

458 
	#ø_oué
(
off£t
,
vÆ
Ë(*(vﬁ©ûê*)(off£tËvÆ)

	)

460 
	#ø_™d
(
addr
, 
vÆue
Ë
	`ø_oué
◊ddr, (
	`ø_öl
◊ddrË& (vÆue)))

	)

461 
	#ø_‹
(
addr
, 
vÆue
Ë
	`ø_oué
◊ddr, (
	`ø_öl
◊ddrË| (vÆue)))

	)

463 
	#RT2880_WDRST
 (1<<1)

	)

464 
	#RT2880_SWSYSRST
 (1<<2)

	)

465 
	#RT2880_SWCPURST
 (1<<3)

	)

468 
	#RT2880_UPHY0_CLK_EN
 (1<<18)

	)

469 
	#RT2880_UPHY1_CLK_EN
 (1<<20)

	)

475 #i‡
	`deföed
 (
RALINK_USB
Ë|| deföed (
MTK_USB
)

476 #ifde‡
CONFIG_RALINK_MT7621


477 
	#CONFIG_USB_STORAGE
 1

	)

478 
	#CONFIG_DOS_PARTITION
 1

	)

479 
	#LITTLEENDIAN


	)

480 
	#CONFIG_CRC32_VERIFY


	)

481 
	#CONFIG_SYS_USB_XHCI_MAX_ROOT_PORTS
 2

	)

483 
	#CONFIG_USB_OHCI
 1

	)

484 
	#CONFIG_SYS_USB_OHCI_MAX_ROOT_PORTS
 2

	)

485 
	#CONFIG_SYS_USB_OHCI_REGS_BASE
 0x101C1000

	)

486 
	#CONFIG_SYS_USB_OHCI_SLOT_NAME
 "π3680"

	)

487 
	#CONFIG_USB_EHCI
 1

	)

488 
	#CONFIG_USB_STORAGE
 1

	)

489 
	#CONFIG_DOS_PARTITION
 1

	)

490 
	#LITTLEENDIAN


	)

491 
	#CONFIG_CRC32_VERIFY


	)

495 #i‡
	`deföed
 (
MT7621_ASIC_BOARD
Ë|| deföed (
MT7621_FPGA_BOARD
)

499 #i‡
	`deföed
(
MT7628_ASIC_BOARD
)

500 
	#PHY_BASE
 0xB0120000

	)

501 
	#SIFSLV_FM_FEG_BASE
 (
PHY_BASE
+0xf00)

	)

502 
	#U2_PHY_BASE
 (
PHY_BASE
+0x800)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/console.h

24 #i‚de‡
_CONSOLE_H_


25 
	#_CONSOLE_H_


	)

27 
	~<devi˚s.h
>

33 
devi˚_t
 *
°dio_devi˚s
[] ;

34 *
°dio_«mes
[
MAX_FILES
] ;

36 
c⁄sﬁe_ªÆloc
(
t›
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/devices.h

24 
	~<li°s.h
>

26 #i‚de‡
_DEVICES_H_


27 
	#_DEVICES_H_


	)

33 
	#DEV_FLAGS_INPUT
 0x00000001

	)

34 
	#DEV_FLAGS_OUTPUT
 0x00000002

	)

35 
	#DEV_FLAGS_SYSTEM
 0x80000000

	)

36 
	#DEV_EXT_VIDEO
 0x00000001

	)

40 
	mÊags
;

41 
	mext
;

42 
	m«me
[16];

46 (*
	m°¨t
) ();

47 (*
	m°›
) ();

51 (*
	mputc
Ë(c⁄° 
	mc
);

52 (*
	mputs
Ë(c⁄° *
	ms
);

56 (*
	mt°c
) ();

57 (*
	mgëc
) ();

61 *
	m¥iv
;

62 } 
	tdevi˚_t
;

67 
	#VIDEO_FORMAT_RGB_INDEXED
 0x0000

	)

68 
	#VIDEO_FORMAT_RGB_DIRECTCOLOR
 0x0001

	)

69 
	#VIDEO_FORMAT_YUYV_4_4_4
 0x0010

	)

70 
	#VIDEO_FORMAT_YUYV_4_2_2
 0x0011

	)

73 *
	maddªss
;

74 
ush‹t
 
	mwidth
;

75 
ush‹t
 
	mheight
;

76 
uch¨
 
	mf‹m©
;

77 
uch¨
 
	mcﬁ‹s
;

78 (*
	m£tcﬁªg
) (, , , );

79 (*
	mgëcﬁªg
) (, *);

80 } 
	tvideo_ext_t
;

85 
li°_t
 
devli°
;

86 
devi˚_t
 *
°dio_devi˚s
[];

87 *
°dio_«mes
[
MAX_FILES
];

92 
devi˚_ªgi°î
 (
devi˚_t
 * 
dev
);

93 
devi˚s_öô
 ();

94 
devi˚s_d⁄e
 ();

95 
devi˚_dîegi°î
(*
dev«me
);

96 #ifde‡
CONFIG_LCD


97 
drv_lcd_öô
 ();

99 #ifde‡
CONFIG_VFD


100 
drv_vfd_öô
 ();

102 #i‡
deföed
(
CONFIG_VIDEO
Ë|| deföed(
CONFIG_CFB_CONSOLE
)

103 
drv_video_öô
 ();

105 #ifde‡
CONFIG_KEYBOARD


106 
drv_keybﬂrd_öô
 ();

108 #ifde‡
CONFIG_USB_TTY


109 
drv_usbây_öô
 ();

111 #ifde‡
CONFIG_NETCONSOLE


112 
drv_nc_öô
 ();

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/environment.h

24 #i‚de‡
_ENVIRONMENT_H_


25 
	#_ENVIRONMENT_H_
 1

	)

40 #i‡
deföed
(
CFG_ENV_IS_IN_FLASH
)

41 #i‚de‡ 
CFG_ENV_ADDR


42 
	#CFG_ENV_ADDR
 (
CFG_FLASH_BASE
 + 
CFG_ENV_OFFSET
)

	)

44 #i‚de‡ 
CFG_ENV_OFFSET


45 
	#CFG_ENV_OFFSET
 (
CFG_ENV_ADDR
 - 
CFG_FLASH_BASE
)

	)

47 #i‡!
deföed
(
CFG_ENV_ADDR_REDUND
Ë&& deföed(
CFG_ENV_OFFSET_REDUND
)

48 
	#CFG_ENV_ADDR_REDUND
 (
CFG_FLASH_BASE
 + 
CFG_ENV_OFFSET_REDUND
)

	)

50 #i‡
deföed
(
CFG_ENV_SECT_SIZE
Ë|| deföed(
CFG_ENV_SIZE
)

51 #i‚de‡ 
CFG_ENV_SECT_SIZE


52 
	#CFG_ENV_SECT_SIZE
 
CFG_ENV_SIZE


	)

54 #i‚de‡ 
CFG_ENV_SIZE


55 
	#CFG_ENV_SIZE
 
CFG_ENV_SECT_SIZE


	)

60 #i‡
deföed
(
CFG_ENV_ADDR_REDUND
Ë&& !deföed(
CFG_ENV_SIZE_REDUND
)

61 
	#CFG_ENV_SIZE_REDUND
 
CFG_ENV_SIZE


	)

63 #i‡(
CFG_ENV_ADDR
 >
CFG_MONITOR_BASE
) && \

64 (
	gCFG_ENV_ADDR
+
	gCFG_ENV_SIZE
Ë<(
CFG_MONITOR_BASE
 + 
CFG_MONITOR_LEN
)

65 
	#ENV_IS_EMBEDDED
 1

	)

67 #i‡
deföed
(
CFG_ENV_ADDR_REDUND
Ë|| deföed(
CFG_ENV_OFFSET_REDUND
)

68 
	#CFG_REDUNDAND_ENVIRONMENT
 1

	)

73 #ifde‡
CFG_REDUNDAND_ENVIRONMENT


74 
	#ENV_HEADER_SIZE
 ((Ë+ 1)

	)

76 
	#ENV_HEADER_SIZE
 (())

	)

80 
	#ENV_SIZE
 (
CFG_ENV_SIZE
 - 
ENV_HEADER_SIZE
)

	)

82 
	sívú⁄mít_s
 {

83 
¸c
;

84 #ifde‡
CFG_REDUNDAND_ENVIRONMENT


85 
	mÊags
;

87 
	md©a
[
ENV_SIZE
];

88 } 
	tív_t
;

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/exports.h

1 #i‚de‡
__EXPORTS_H__


2 
	#__EXPORTS_H__


	)

4 #i‚de‡
__ASSEMBLY__


6 
	~<comm⁄.h
>

9 
gë_vîsi⁄
();

10 
gëc
();

11 
t°c
();

12 
putc
(const );

13 
puts
(const *);

14 
¥ötf
(c⁄° * 
fmt
, ...);

15 
ö°Æl_hdÃ
(, 
öãºu±_h™dÀr_t
*, *);

16 
‰ì_hdÃ
();

17 *
mÆloc
(
size_t
);

18 
‰ì
(*);

19 
__©åibuã__
((
nomùs16
)Ë
udñay
();

20 
__©åibuã__
((
nomùs16
)Ë
gë_timî
();

21 
v¥ötf
(c⁄° *, 
va_li°
);

22 
do_ª£t
 ();

24 
≠p_°¨tup
(**);

29 
	#EXPORT_FUNC
(
x
Ë
XF_
 ## x ,

	)

30 
	~<_exp‹ts.h
>

31 #unde‡
EXPORT_FUNC


33 
	mXF_MAX


36 
	#XF_VERSION
 2

	)

38 #i‡
deföed
(
CONFIG_I386
)

39 
gd_t
 *
globÆ_d©a
;

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/fat.h

27 #i‚de‡
_FAT_H_


28 
	#_FAT_H_


	)

30 
	~<asm/byã‹dî.h
>

32 
	#CONFIG_SUPPORT_VFAT


	)

34 
	#VFAT_MAXLEN_BYTES
 256

	)

35 
	#VFAT_MAXSEQ
 9

	)

36 
	#PREFETCH_BLOCKS
 2

	)

38 
	#MAX_CLUSTSIZE
 65536

	)

39 
	#DIRENTSPERBLOCK
 (
myd©a
->
£˘_size
 / (
dú_íåy
))

	)

40 
	#DIRENTSPERCLUST
 ((
myd©a
->
˛u°_size
 * myd©a->
£˘_size
) / \

41 (
dú_íåy
))

	)

43 
	#FATBUFBLOCKS
 6

	)

44 
	#FATBUFSIZE
 (
myd©a
->
£˘_size
 * 
FATBUFBLOCKS
)

	)

45 
	#FAT12BUFSIZE
 ((
FATBUFSIZE
*2)/3)

	)

46 
	#FAT16BUFSIZE
 (
FATBUFSIZE
/2)

	)

47 
	#FAT32BUFSIZE
 (
FATBUFSIZE
/4)

	)

51 
	#FAT12_SIGN
 "FAT12 "

	)

52 
	#FAT16_SIGN
 "FAT16 "

	)

53 
	#FAT32_SIGN
 "FAT32 "

	)

54 
	#SIGNLEN
 8

	)

57 
	#ATTR_RO
 1

	)

58 
	#ATTR_HIDDEN
 2

	)

59 
	#ATTR_SYS
 4

	)

60 
	#ATTR_VOLUME
 8

	)

61 
	#ATTR_DIR
 16

	)

62 
	#ATTR_ARCH
 32

	)

64 
	#ATTR_VFAT
 (
ATTR_RO
 | 
ATTR_HIDDEN
 | 
ATTR_SYS
 | 
ATTR_VOLUME
)

	)

66 
	#DELETED_FLAG
 (()0xe5Ë

	)

67 
	#aRING
 0x05

	)

72 
	#LAST_LONG_ENTRY_MASK
 0x40

	)

75 
	#LS_NO
 0

	)

76 
	#LS_YES
 1

	)

77 
	#LS_DIR
 1

	)

78 
	#LS_ROOT
 2

	)

80 #ifde‡
DEBUG


81 
	#FAT_DPRINT
(
¨gs
...Ë
	`¥ötf
◊rgs)

	)

83 
	#FAT_DPRINT
(
¨gs
...)

	)

85 
	#FAT_ERROR
(
¨g
Ë
	`¥ötf
◊rg)

	)

87 
	#ISDIRDELIM
(
c
Ë((cË='/' || (cË='\\')

	)

89 
	#FSTYPE_NONE
 (-1)

	)

91 #i‡
deföed
(
__löux__
Ë&& deföed(
__KERNEL__
)

92 
	#FAT2CPU16
 
À16_to_˝u


	)

93 
	#FAT2CPU32
 
À32_to_˝u


	)

95 #i‡
__LITTLE_ENDIAN


96 
	#FAT2CPU16
(
x
Ë(x)

	)

97 
	#FAT2CPU32
(
x
Ë(x)

	)

99 
	#FAT2CPU16
(
x
Ë((((xË& 0x00ffË<< 8Ë| (((xË& 0xff00Ë>> 8))

	)

100 
	#FAT2CPU32
(
x
) ((((x) & 0x000000ff) << 24) | \

101 (((
x
) & 0x0000ff00) << 8) | \

102 (((
x
) & 0x00ff0000) >> 8) | \

103 (((
x
Ë& 0xff000000Ë>> 24))

	)

107 
	#TOLOWER
(
c
Ëif((cË>'A' && (cË<'Z'){(c)+=('a' - 'A');}

	)

108 
	#START
(
dít
Ë(
	`FAT2CPU16
((dít)->
°¨t
) \

109 + (
myd©a
->
Átsize
 != 32 ? 0 : \

110 (
	`FAT2CPU16
((
dít
)->
°¨thi
Ë<< 16)))

	)

111 
	#CHECK_CLUST
(
x
, 
Átsize
) ((x) <= 1 || \

112 (
x
Ë>((
Átsize
Ë!32 ? 0xfff0 : 0xffffff0))

	)

114 
	sboŸ_£˘‹
 {

115 
__u8
 
	mign‹ed
[3];

116 
	msy°em_id
[8];

117 
__u8
 
	m£˘‹_size
[2];

118 
__u8
 
	m˛u°î_size
;

119 
__u16
 
	mª£rved
;

120 
__u8
 
	mÁts
;

121 
__u8
 
	mdú_íåõs
[2];

122 
__u8
 
	m£˘‹s
[2];

123 
__u8
 
	mmedü
;

124 
__u16
 
	mÁt_Àngth
;

125 
__u16
 
	m£cs_åack
;

126 
__u16
 
	mhóds
;

127 
__u32
 
	mhiddí
;

128 
__u32
 
	mtŸÆ_£˘
;

131 
__u32
 
	mÁt32_Àngth
;

132 
__u16
 
	mÊags
;

133 
__u8
 
	mvîsi⁄
[2];

134 
__u32
 
	mroŸ_˛u°î
;

135 
__u16
 
	möfo_£˘‹
;

136 
__u16
 
	mbackup_boŸ
;

137 
__u16
 
	mª£rved2
[6];

138 } 
	tboŸ_£˘‹
;

140 
	svﬁume_öfo


142 
__u8
 
	mdrive_numbî
;

143 
__u8
 
	mª£rved
;

144 
__u8
 
	mext_boŸ_sign
;

145 
__u8
 
	mvﬁume_id
[4];

146 
	mvﬁume_œbñ
[11];

147 
	mfs_ty≥
[8];

150 } 
	tvﬁume_öfo
;

152 
	sdú_íåy
 {

153 
	m«me
[8],
	mext
[3];

154 
__u8
 
	m©å
;

155 
__u8
 
	mlˇ£
;

156 
__u8
 
	m˘ime_ms
;

157 
__u16
 
	m˘ime
;

158 
__u16
 
	mcd©e
;

159 
__u16
 
	mad©e
;

160 
__u16
 
	m°¨thi
;

161 
__u16
 
	mtime
,
	md©e
,
	m°¨t
;

162 
__u32
 
	msize
;

163 } 
	tdú_íåy
;

165 
	sdú_¶Ÿ
 {

166 
__u8
 
	mid
;

167 
__u8
 
	m«me0_4
[10];

168 
__u8
 
	m©å
;

169 
__u8
 
	mª£rved
;

170 
__u8
 
	mÆüs_checksum
;

171 
__u8
 
	m«me5_10
[12];

172 
__u16
 
	m°¨t
;

173 
__u8
 
	m«me11_12
[4];

174 } 
	tdú_¶Ÿ
;

178 
	mÁtsize
;

179 
__u16
 
	mÁéígth
;

180 
__u16
 
	mÁt_£˘
;

181 
__u16
 
	mroŸdú_£˘
;

182 
__u16
 
	m£˘_size
;

183 
__u16
 
	m˛u°_size
;

190 
__u8
 *
	mÁtbuf
;

191 
	mÁtbu‚um
;

192 
	md©a_begö
;

193 } 
	tfsd©a
;

195 (
	tfûe_dëe˘fs_func
)();

196 (
	tfûe_ls_func
)(c⁄° *
	tdú
);

197 (
	tfûe_ªad_func
)(c⁄° *
	tfûíame
, *
	tbuf„r
,

198 
	tmaxsize
);

200 
	sfûesy°em
 {

201 
fûe_dëe˘fs_func
 *
dëe˘
;

202 
fûe_ls_func
 *
ls
;

203 
fûe_ªad_func
 *
ªad
;

204 c⁄° 
«me
[12];

208 
fûe_dëe˘fs_func
 
fûe_Át_dëe˘fs
;

209 
fûe_ls_func
 
fûe_Át_ls
;

210 
fûe_ªad_func
 
fûe_Át_ªad
;

213 
	`fûe_cd
(c⁄° *
∑th
);

214 
	`fûe_Át_dëe˘fs
();

215 
	`fûe_Át_ls
(c⁄° *
dú
);

216 
	`fûe_Át_ªad
(c⁄° *
fûíame
, *
buf„r
, 
maxsize
);

217 c⁄° *
	`fûe_gëf¢ame
(
idx
);

218 
	`Át_ªgi°î_devi˚
(
block_dev_desc_t
 *
dev_desc
, 
∑π_no
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/fat_old.h

27 #i‚de‡
_FAT_H_


28 
	#_FAT_H_


	)

30 
	~<asm/byã‹dî.h
>

32 
	#CONFIG_SUPPORT_VFAT


	)

34 
	#SECTOR_SIZE
 
FS_BLOCK_SIZE


	)

36 
	#FS_BLOCK_SIZE
 512

	)

38 #i‡
FS_BLOCK_SIZE
 !
SECTOR_SIZE


39 #îr‹ 
FS_BLOCK_SIZE
 !
SECTOR_SIZE
 - 
This
 
code
 
√eds
 
to
 
be
 
fixed
!

42 
	#MAX_CLUSTSIZE
 65536

	)

43 
	#DIRENTSPERBLOCK
 (
FS_BLOCK_SIZE
/(
dú_íåy
))

	)

44 
	#DIRENTSPERCLUST
 ((
myd©a
->
˛u°_size
*
SECTOR_SIZE
)/(
dú_íåy
))

	)

46 
	#FATBUFBLOCKS
 6

	)

47 
	#FATBUFSIZE
 (
FS_BLOCK_SIZE
*
FATBUFBLOCKS
)

	)

48 
	#FAT12BUFSIZE
 ((
FATBUFSIZE
*2)/3)

	)

49 
	#FAT16BUFSIZE
 (
FATBUFSIZE
/2)

	)

50 
	#FAT32BUFSIZE
 (
FATBUFSIZE
/4)

	)

54 
	#FAT12_SIGN
 "FAT12 "

	)

55 
	#FAT16_SIGN
 "FAT16 "

	)

56 
	#FAT32_SIGN
 "FAT32 "

	)

57 
	#SIGNLEN
 8

	)

60 
	#ATTR_RO
 1

	)

61 
	#ATTR_HIDDEN
 2

	)

62 
	#ATTR_SYS
 4

	)

63 
	#ATTR_VOLUME
 8

	)

64 
	#ATTR_DIR
 16

	)

65 
	#ATTR_ARCH
 32

	)

67 
	#ATTR_VFAT
 (
ATTR_RO
 | 
ATTR_HIDDEN
 | 
ATTR_SYS
 | 
ATTR_VOLUME
)

	)

69 
	#DELETED_FLAG
 (()0xe5Ë

	)

70 
	#aRING
 0x05

	)

75 
	#LAST_LONG_ENTRY_MASK
 0x40

	)

78 
	#LS_NO
 0

	)

79 
	#LS_YES
 1

	)

80 
	#LS_DIR
 1

	)

81 
	#LS_ROOT
 2

	)

83 #ifde‡
DEBUG


84 
	#FAT_DPRINT
(
¨gs
...Ë
	`¥ötf
◊rgs)

	)

86 
	#FAT_DPRINT
(
¨gs
...)

	)

88 
	#FAT_ERROR
(
¨g
Ë
	`¥ötf
◊rg)

	)

90 
	#ISDIRDELIM
(
c
Ë((cË='/' || (cË='\\')

	)

92 
	#FSTYPE_NONE
 (-1)

	)

94 #i‡
deföed
(
__löux__
Ë&& deföed(
__KERNEL__
)

95 
	#FAT2CPU16
 
À16_to_˝u


	)

96 
	#FAT2CPU32
 
À32_to_˝u


	)

98 #i‡
__LITTLE_ENDIAN


99 
	#FAT2CPU16
(
x
Ë(x)

	)

100 
	#FAT2CPU32
(
x
Ë(x)

	)

102 
	#FAT2CPU16
(
x
Ë((((xË& 0x00ffË<< 8Ë| (((xË& 0xff00Ë>> 8))

	)

103 
	#FAT2CPU32
(
x
) ((((x) & 0x000000ff) << 24) | \

104 (((
x
) & 0x0000ff00) << 8) | \

105 (((
x
) & 0x00ff0000) >> 8) | \

106 (((
x
Ë& 0xff000000Ë>> 24))

	)

110 
	#TOLOWER
(
c
Ëif((cË>'A' && (cË<'Z'){(c)+=('a' - 'A');}

	)

111 
	#START
(
dít
Ë(
	`FAT2CPU16
((dít)->
°¨t
) \

112 + (
myd©a
->
Átsize
 != 32 ? 0 : \

113 (
	`FAT2CPU16
((
dít
)->
°¨thi
Ë<< 16)))

	)

116 
	sboŸ_£˘‹
 {

117 
__u8
 
	mign‹ed
[3];

118 
	msy°em_id
[8];

119 
__u8
 
	m£˘‹_size
[2];

120 
__u8
 
	m˛u°î_size
;

121 
__u16
 
	mª£rved
;

122 
__u8
 
	mÁts
;

123 
__u8
 
	mdú_íåõs
[2];

124 
__u8
 
	m£˘‹s
[2];

125 
__u8
 
	mmedü
;

126 
__u16
 
	mÁt_Àngth
;

127 
__u16
 
	m£cs_åack
;

128 
__u16
 
	mhóds
;

129 
__u32
 
	mhiddí
;

130 
__u32
 
	mtŸÆ_£˘
;

133 
__u32
 
	mÁt32_Àngth
;

134 
__u16
 
	mÊags
;

135 
__u8
 
	mvîsi⁄
[2];

136 
__u32
 
	mroŸ_˛u°î
;

137 
__u16
 
	möfo_£˘‹
;

138 
__u16
 
	mbackup_boŸ
;

139 
__u16
 
	mª£rved2
[6];

140 } 
	tboŸ_£˘‹
;

142 
	svﬁume_öfo


144 
__u8
 
	mdrive_numbî
;

145 
__u8
 
	mª£rved
;

146 
__u8
 
	mext_boŸ_sign
;

147 
__u8
 
	mvﬁume_id
[4];

148 
	mvﬁume_œbñ
[11];

149 
	mfs_ty≥
[8];

152 } 
	tvﬁume_öfo
;

154 
	sdú_íåy
 {

155 
	m«me
[8],
	mext
[3];

156 
__u8
 
	m©å
;

157 
__u8
 
	mlˇ£
;

158 
__u8
 
	m˘ime_ms
;

159 
__u16
 
	m˘ime
;

160 
__u16
 
	mcd©e
;

161 
__u16
 
	mad©e
;

162 
__u16
 
	m°¨thi
;

163 
__u16
 
	mtime
,
	md©e
,
	m°¨t
;

164 
__u32
 
	msize
;

165 } 
	tdú_íåy
;

167 
	sdú_¶Ÿ
 {

168 
__u8
 
	mid
;

169 
__u8
 
	m«me0_4
[10];

170 
__u8
 
	m©å
;

171 
__u8
 
	mª£rved
;

172 
__u8
 
	mÆüs_checksum
;

173 
__u8
 
	m«me5_10
[12];

174 
__u16
 
	m°¨t
;

175 
__u8
 
	m«me11_12
[4];

176 } 
	tdú_¶Ÿ
;

180 
	mÁtsize
;

181 
__u16
 
	mÁéígth
;

182 
__u16
 
	mÁt_£˘
;

183 
__u16
 
	mroŸdú_£˘
;

184 
__u16
 
	m˛u°_size
;

190 
__u8
 
	mÁtbuf
[
FATBUFSIZE
];

191 
	mÁtbu‚um
;

192 
	md©a_begö
;

193 } 
	tfsd©a
;

195 (
	tfûe_dëe˘fs_func
)();

196 (
	tfûe_ls_func
)(c⁄° *
	tdú
);

197 (
	tfûe_ªad_func
)(c⁄° *
	tfûíame
, *
	tbuf„r
,

198 
	tmaxsize
);

200 
	sfûesy°em
 {

201 
fûe_dëe˘fs_func
 *
dëe˘
;

202 
fûe_ls_func
 *
ls
;

203 
fûe_ªad_func
 *
ªad
;

204 c⁄° 
«me
[12];

208 
fûe_dëe˘fs_func
 
fûe_Át_dëe˘fs
;

209 
fûe_ls_func
 
fûe_Át_ls
;

210 
fûe_ªad_func
 
fûe_Át_ªad
;

213 
	`fûe_cd
(c⁄° *
∑th
);

214 
	`fûe_Át_dëe˘fs
();

215 
	`fûe_Át_ls
(c⁄° *
dú
);

216 
	`fûe_Át_ªad
(c⁄° *
fûíame
, *
buf„r
, 
maxsize
);

217 c⁄° *
	`fûe_gëf¢ame
(
idx
);

218 
	`Át_ªgi°î_devi˚
(
block_dev_desc_t
 *
dev_desc
, 
∑π_no
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/flash.h

24 #i‚de‡
_FLASH_H_


25 
	#_FLASH_H_


	)

27 #i‚de‡
CFG_NO_FLASH


33 
ul⁄g
 
	msize
;

34 
ush‹t
 
	m£˘‹_cou¡
;

35 
ul⁄g
 
	mÊash_id
;

36 
ul⁄g
 
	m°¨t
[
CFG_MAX_FLASH_SECT
];

37 
uch¨
 
	m¥Ÿe˘
[
CFG_MAX_FLASH_SECT
];

38 #ifde‡
CFG_FLASH_CFI


39 
uch¨
 
	mp‹twidth
;

40 
uch¨
 
	mchùwidth
;

41 
ush‹t
 
	mbuf„r_size
;

42 
ul⁄g
 
	mîa£_blk_tout
;

43 
ul⁄g
 
	mwrôe_tout
;

44 
ul⁄g
 
	mbuf„r_wrôe_tout
;

45 
ush‹t
 
	mvíd‹
;

46 
ush‹t
 
	mcmd_ª£t
;

47 
ush‹t
 
	möãrÁ˚
;

49 } 
	tÊash_öfo_t
;

54 
	#FLASH_CFI_8BIT
 0x01

	)

55 
	#FLASH_CFI_16BIT
 0x02

	)

56 
	#FLASH_CFI_32BIT
 0x04

	)

57 
	#FLASH_CFI_64BIT
 0x08

	)

61 
	#FLASH_CFI_BY8
 0x01

	)

62 
	#FLASH_CFI_BY16
 0x02

	)

63 
	#FLASH_CFI_BY32
 0x04

	)

64 
	#FLASH_CFI_BY64
 0x08

	)

66 
	#CFI_FLASH_SHIFT_WIDTH
 3

	)

70 
	#FLASH_CFI_X8
 0x00

	)

71 
	#FLASH_CFI_X16
 0x01

	)

72 
	#FLASH_CFI_X8X16
 0x02

	)

75 
	#CFI_FLASH_SHIFT_WIDTH
 3

	)

78 
Êash_öô
 ();

79 
Êash_¥öt_öfo
 (
Êash_öfo_t
 *);

80 
Êash_îa£
 (
Êash_öfo_t
 *, , );

81 
îa£_Æl_chù
(
Êash_öfo_t
 *, , );

82 
Êash_£˘_îa£
 (
ul⁄g
 
addr_fú°
, ul⁄g 
addr_œ°
);

83 
Êash_£˘_¥Ÿe˘
 (
Êag
, 
ul⁄g
 
addr_fú°
, ul⁄g 
addr_œ°
);

86 
Êash_¥Ÿe˘
 (
Êag
, 
ul⁄g
 
‰om
, ul⁄g 
to
, 
Êash_öfo_t
 *
öfo
);

87 
Êash_wrôe
 (
uch¨
 *, 
ul⁄g
, ulong);

88 
Êash_öfo_t
 *
addr2öfo
 (
ul⁄g
);

89 
wrôe_buff
 (
Êash_öfo_t
 *
öfo
, 
uch¨
 *
§c
, 
ul⁄g
 
addr
, ul⁄g 
˙t
);

92 #i‡
deföed
(
CFG_FLASH_PROTECTION
)

93 
Êash_ªÆ_¥Ÿe˘
(
Êash_öfo_t
 *
öfo
, 
£˘‹
, 
¥Ÿ
);

94 
Êash_ªad_u£r_£rül
(
Êash_öfo_t
 * 
öfo
, * 
buf„r
, 
off£t
, 
Àn
);

95 
Êash_ªad_Á˘‹y_£rül
(
Êash_öfo_t
 * 
öfo
, * 
buf„r
, 
off£t
, 
Àn
);

101 
	#ERR_OK
 0

	)

102 
	#ERR_TIMOUT
 1

	)

103 
	#ERR_NOT_ERASED
 2

	)

104 
	#ERR_PROTECTED
 4

	)

105 
	#ERR_INVAL
 8

	)

106 
	#ERR_ALIGN
 16

	)

107 
	#ERR_UNKNOWN_FLASH_VENDOR
 32

	)

108 
	#ERR_UNKNOWN_FLASH_TYPE
 64

	)

109 
	#ERR_PROG_ERROR
 128

	)

114 
	#FLAG_PROTECT_SET
 0x01

	)

115 
	#FLAG_PROTECT_CLEAR
 0x02

	)

121 
	#AMD_MANUFACT
 0x00010001

	)

122 
	#FUJ_MANUFACT
 0x00040004

	)

123 
	#ATM_MANUFACT
 0x001F001F

	)

124 
	#STM_MANUFACT
 0x00200020

	)

125 
	#SST_MANUFACT
 0x00BF00BF

	)

126 
	#MT_MANUFACT
 0x00890089

	)

127 
	#INTEL_MANUFACT
 0x00890089

	)

128 
	#INTEL_ALT_MANU
 0x00B000B0

	)

129 
	#MX_MANUFACT
 0x00C200C2

	)

130 
	#TOSH_MANUFACT
 0x00980098

	)

131 
	#MT2_MANUFACT
 0x002C002C

	)

132 
	#EXCEL_MANUFACT
 0x004A004A

	)

133 
	#MX_MANUFACT
 0x00C200C2

	)

134 
	#AMD_MANUFACT_EON
 0x00420042

	)

137 
	#MT_ID_28F400_T
 0x44704470

	)

138 
	#MT_ID_28F400_B
 0x44714471

	)

140 
	#AMD_ID_LV040B
 0x4F

	)

144 
	#AMD_ID_F040B
 0xA4

	)

147 
	#STM_ID_M29W040B
 0xE3

	)

150 
	#AMD_ID_F080B
 0xD5

	)

153 
	#AMD_ID_F016D
 0xAD

	)

154 
	#AMD_ID_F032B
 0x41

	)

155 
	#AMD_ID_LV116DT
 0xC7

	)

156 
	#AMD_ID_LV116DB
 0x4C

	)

157 
	#AMD_ID_LV016B
 0xc8

	)

159 
	#AMD_ID_PL160CB
 0x22452245

	)

161 
	#AMD_ID_LV400T
 0x22B922B9

	)

162 
	#AMD_ID_LV400B
 0x22BA22BA

	)

164 
	#AMD_ID_LV033C
 0xA3

	)

165 
	#AMD_ID_LV065D
 0x93

	)

167 
	#AMD_ID_LV800T
 0x22DA22DA

	)

168 
	#AMD_ID_LV800B
 0x225B225B

	)

170 
	#AMD_ID_LV160T
 0x22C422C4

	)

171 
	#AMD_ID_LV160B
 0x22492249

	)

173 
	#AMD_ID_DL163T
 0x22282228

	)

174 
	#AMD_ID_DL163B
 0x222B222B

	)

176 
	#AMD_ID_LV320T
 0x22F622F6

	)

177 
	#MX_ID_LV320T
 0x22A722A7

	)

178 
	#AMD_ID_LV320B
 0x000022F9

	)

179 
	#MX_ID_LV320B
 0x22A822A8

	)

180 
	#MX_ID_LV320BT
 0x000022A8

	)

181 
	#MX_ID_LV160B
 0x00002249

	)

182 
	#MX_ID_LV160T
 0x000022C4

	)

183 
	#EN_ID_29LV641L
 0x000022A8

	)

184 
	#EN_ID_29LV640H
 0x00002228

	)

185 
	#MX_ID_29LV640DB
 0x000022CB

	)

186 
	#MX_ID_29LV128DB
 0x0000227A

	)

187 
	#MX_ID_29GL128EHT
 0x0000227E

	)

189 
	#AMD_ID_DL322T
 0x22552255

	)

190 
	#AMD_ID_DL322B
 0x22562256

	)

191 
	#AMD_ID_DL323T
 0x22502250

	)

192 
	#AMD_ID_DL323B
 0x22532253

	)

193 
	#AMD_ID_DL324T
 0x225C225C

	)

194 
	#AMD_ID_DL324B
 0x225F225F

	)

196 
	#AMD_ID_DL640
 0x227E227E

	)

197 
	#AMD_ID_MIRROR
 0x227E227E

	)

198 
	#AMD_ID_DL640G_2
 0x22022202

	)

199 
	#AMD_ID_DL640G_3
 0x22012201

	)

200 
	#AMD_ID_LV640U_2
 0x220C220C

	)

201 
	#AMD_ID_LV640U_3
 0x22012201

	)

202 
	#AMD_ID_LV640MT_2
 0x22102210

	)

203 
	#AMD_ID_LV640MT_3
 0x22012201

	)

204 
	#AMD_ID_LV640MB_2
 0x22102210

	)

205 
	#AMD_ID_LV640MB_3
 0x22002200

	)

206 
	#AMD_ID_LV128U_2
 0x22122212

	)

207 
	#AMD_ID_LV128U_3
 0x22002200

	)

208 
	#AMD_ID_LV256U_2
 0x22122212

	)

209 
	#AMD_ID_LV256U_3
 0x22012201

	)

210 
	#AMD_ID_GL064M_2
 0x22132213

	)

211 
	#AMD_ID_GL064M_3
 0x22012201

	)

213 
	#AMD_ID_LV320B_2
 0x221A221A

	)

214 
	#AMD_ID_LV320B_3
 0x22002200

	)

216 
	#AMD_ID_LV640U
 0x22D722D7

	)

220 
	#ATM_ID_BV1614
 0x000000C0

	)

221 
	#ATM_ID_BV1614A
 0x000000C8

	)

222 
	#ATM_ID_BV6416
 0x000000D6

	)

224 
	#FUJI_ID_29F800BA
 0x22582258

	)

225 
	#FUJI_ID_29F800TA
 0x22D622D6

	)

226 
	#FUJI_ID_29LV650UE
 0x22d722d7

	)

228 
	#SST_ID_xF200A
 0x27892789

	)

229 
	#SST_ID_xF400A
 0x27802780

	)

230 
	#SST_ID_xF800A
 0x27812781

	)

231 
	#SST_ID_xF160A
 0x27822782

	)

232 
	#SST_ID_xF1601
 0x234B234B

	)

233 
	#SST_ID_xF1602
 0x234A234A

	)

234 
	#SST_ID_xF3201
 0x235B235B

	)

235 
	#SST_ID_xF3202
 0x235A235A

	)

236 
	#SST_ID_xF6401
 0x236B236B

	)

237 
	#SST_ID_xF6402
 0x236A236A

	)

238 
	#SST_ID_xF040
 0xBFD7BFD7

	)

240 
	#STM_ID_F040B
 0xE2

	)

243 
	#STM_ID_x800AB
 0x005B005B

	)

244 
	#STM_ID_29W320DT
 0x22CA22CA

	)

245 
	#STM_ID_29W320DB
 0x22CB22CB

	)

246 
	#STM_ID_29W040B
 0x00E300E3

	)

248 
	#INTEL_ID_28F016S
 0x66a066a0

	)

249 
	#INTEL_ID_28F800B3T
 0x88928892

	)

250 
	#INTEL_ID_28F800B3B
 0x88938893

	)

251 
	#INTEL_ID_28F160B3T
 0x88908890

	)

252 
	#INTEL_ID_28F160B3B
 0x88918891

	)

253 
	#INTEL_ID_28F320B3T
 0x88968896

	)

254 
	#INTEL_ID_28F320B3B
 0x88978897

	)

255 
	#INTEL_ID_28F640B3T
 0x88988898

	)

256 
	#INTEL_ID_28F640B3B
 0x88998899

	)

257 
	#INTEL_ID_28F160F3B
 0x88F488F4

	)

259 
	#INTEL_ID_28F800C3T
 0x88C088C0

	)

260 
	#INTEL_ID_28F800C3B
 0x88C188C1

	)

261 
	#INTEL_ID_28F160C3T
 0x88C288C2

	)

262 
	#INTEL_ID_28F160C3B
 0x88C388C3

	)

263 
	#INTEL_ID_28F320C3T
 0x88C488C4

	)

264 
	#INTEL_ID_28F320C3B
 0x88C588C5

	)

265 
	#INTEL_ID_28F640C3T
 0x88CC88CC

	)

266 
	#INTEL_ID_28F640C3B
 0x88CD88CD

	)

268 
	#INTEL_ID_28F128J3
 0x89188918

	)

269 
	#INTEL_ID_28F320J5
 0x00140014

	)

270 
	#INTEL_ID_28F640J5
 0x00150015

	)

271 
	#INTEL_ID_28F320J3A
 0x00160016

	)

272 
	#INTEL_ID_28F640J3A
 0x00170017

	)

273 
	#INTEL_ID_28F128J3A
 0x00180018

	)

274 
	#INTEL_ID_28F256L18T
 0x880D880D

	)

275 
	#INTEL_ID_28F64K3
 0x88018801

	)

276 
	#INTEL_ID_28F128K3
 0x88028802

	)

277 
	#INTEL_ID_28F256K3
 0x88038803

	)

279 
	#INTEL_ID_28F160S3
 0x00D000D0

	)

280 
	#INTEL_ID_28F320S3
 0x00D400D4

	)

283 
	#SHARP_ID_28F016SCL
 0xAAAAAAAA

	)

284 
	#SHARP_ID_28F016SCZ
 0xA0A0A0A0

	)

285 
	#SHARP_ID_28F008SC
 0xA6A6A6A6

	)

288 
	#TOSH_ID_FVT160
 0xC2

	)

289 
	#TOSH_ID_FVB160
 0x43

	)

297 
	#FLASH_AM040
 0x0001

	)

303 
	#FLASH_AM400T
 0x0002

	)

304 
	#FLASH_AM400B
 0x0003

	)

305 
	#FLASH_AM800T
 0x0004

	)

306 
	#FLASH_AM800B
 0x0005

	)

307 
	#FLASH_AM116DT
 0x0026

	)

308 
	#FLASH_AM116DB
 0x0027

	)

309 
	#FLASH_AM160T
 0x0006

	)

310 
	#FLASH_AM160LV
 0x0046

	)

311 
	#FLASH_AM160B
 0x0007

	)

312 
	#FLASH_AM320T
 0x0008

	)

313 
	#FLASH_AM320B
 0x0009

	)

315 
	#FLASH_AM080
 0x000A

	)

318 
	#FLASH_AMDL322T
 0x0010

	)

319 
	#FLASH_AMDL322B
 0x0011

	)

320 
	#FLASH_AMDL323T
 0x0012

	)

321 
	#FLASH_AMDL323B
 0x0013

	)

322 
	#FLASH_AMDL324T
 0x0014

	)

323 
	#FLASH_AMDL324B
 0x0015

	)

325 
	#FLASH_AMDLV033C
 0x0018

	)

326 
	#FLASH_AMDLV065D
 0x001A

	)

328 
	#FLASH_AMDL640
 0x0016

	)

329 
	#FLASH_AMD016
 0x0018

	)

330 
	#FLASH_AMDL640MB
 0x0019

	)

331 
	#FLASH_AMDL640MT
 0x001A

	)

333 
	#FLASH_SST200A
 0x0040

	)

334 
	#FLASH_SST400A
 0x0042

	)

335 
	#FLASH_SST800A
 0x0044

	)

336 
	#FLASH_SST160A
 0x0046

	)

337 
	#FLASH_SST320
 0x0048

	)

338 
	#FLASH_SST640
 0x004A

	)

339 
	#FLASH_SST040
 0x000E

	)

341 
	#FLASH_STM800AB
 0x0051

	)

342 
	#FLASH_STMW320DT
 0x0052

	)

343 
	#FLASH_STMW320DB
 0x0053

	)

344 
	#FLASH_STM320DB
 0x00CB

	)

345 
	#FLASH_STM800DT
 0x00D7

	)

346 
	#FLASH_STM800DB
 0x005B

	)

348 
	#FLASH_28F400_T
 0x0062

	)

349 
	#FLASH_28F400_B
 0x0063

	)

351 
	#FLASH_INTEL800T
 0x0074

	)

352 
	#FLASH_INTEL800B
 0x0075

	)

353 
	#FLASH_INTEL160T
 0x0076

	)

354 
	#FLASH_INTEL160B
 0x0077

	)

355 
	#FLASH_INTEL320T
 0x0078

	)

356 
	#FLASH_INTEL320B
 0x0079

	)

357 
	#FLASH_INTEL640T
 0x007A

	)

358 
	#FLASH_INTEL640B
 0x007B

	)

360 
	#FLASH_28F008S5
 0x0080

	)

361 
	#FLASH_28F016SV
 0x0081

	)

362 
	#FLASH_28F800_B
 0x0083

	)

363 
	#FLASH_AM29F800B
 0x0084

	)

364 
	#FLASH_28F320J5
 0x0085

	)

365 
	#FLASH_28F160S3
 0x0086

	)

366 
	#FLASH_28F320S3
 0x0088

	)

367 
	#FLASH_AM640U
 0x0090

	)

368 
	#FLASH_AM033C
 0x0091

	)

369 
	#FLASH_LH28F016SCT
 0x0092

	)

370 
	#FLASH_28F160F3B
 0x0093

	)

372 
	#FLASH_28F640J5
 0x0099

	)

374 
	#FLASH_28F800C3T
 0x009A

	)

375 
	#FLASH_28F800C3B
 0x009B

	)

376 
	#FLASH_28F160C3T
 0x009C

	)

377 
	#FLASH_28F160C3B
 0x009D

	)

378 
	#FLASH_28F320C3T
 0x009E

	)

379 
	#FLASH_28F320C3B
 0x009F

	)

380 
	#FLASH_28F640C3T
 0x00A0

	)

381 
	#FLASH_28F640C3B
 0x00A1

	)

382 
	#FLASH_AMLV320U
 0x00A2

	)

383 
	#FLASH_AMLV640U
 0x00A4

	)

384 
	#FLASH_AMLV128U
 0x00A6

	)

385 
	#FLASH_AMLV320B
 0x00A7

	)

386 
	#FLASH_AMLV320T
 0x00A8

	)

387 
	#FLASH_AMLV256U
 0x00AA

	)

388 
	#FLASH_MXLV320B
 0x00AB

	)

389 
	#FLASH_MXLV320BT
 0x22A8

	)

390 
	#FLASH_MXLV160B
 0x2249

	)

391 
	#FLASH_MXLV160T
 0x22C4

	)

392 
	#FLASH_MXLV320T
 0x00AC

	)

393 
	#FLASH_28F256L18T
 0x00B0

	)

394 
	#FLASH_AMDL163T
 0x00B2

	)

395 
	#FLASH_AMDL163B
 0x00B3

	)

396 
	#FLASH_28F64K3
 0x00B4

	)

397 
	#FLASH_28F128K3
 0x00B6

	)

398 
	#FLASH_28F256K3
 0x00B8

	)

400 
	#FLASH_28F320J3A
 0x00C0

	)

401 
	#FLASH_28F640J3A
 0x00C2

	)

402 
	#FLASH_28F128J3A
 0x00C4

	)

404 
	#FLASH_FUJLV650
 0x00D0

	)

405 
	#FLASH_MT28S4M16LC
 0x00E1

	)

406 
	#FLASH_S29GL064M
 0x00F0

	)

407 
	#FLASH_S29GL256N
 0x227E

	)

409 
	#FLASH_UNKNOWN
 0xFFFF

	)

414 
	#FLASH_MAN_AMD
 0x00000000

	)

415 
	#FLASH_MAN_FUJ
 0x00010000

	)

416 
	#FLASH_MAN_BM
 0x00020000

	)

417 
	#FLASH_MAN_MX
 0x00030000

	)

419 
	#FLASH_MAN_STM
 0x00040000

	)

420 
	#FLASH_MAN_TOSH
 0x00050000

	)

421 
	#FLASH_MAN_EXCEL
 0x00060000

	)

422 
	#FLASH_MAN_SST
 0x00100000

	)

423 
	#FLASH_MAN_INTEL
 0x00300000

	)

424 
	#FLASH_MAN_MT
 0x00400000

	)

425 
	#FLASH_MAN_SHARP
 0x00500000

	)

428 
	#FLASH_TYPEMASK
 0x0000FFFF

	)

429 
	#FLASH_VENDMASK
 0xFFFF0000

	)

431 
	#FLASH_AMD_COMP
 0x000FFFFF

	)

435 
	#FLASH_BTYPE
 0x0001

	)

443 
	#FLASH_ERASE_TIMEOUT
 120000

	)

444 
	#FLASH_WRITE_TIMEOUT
 500

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/fpga.h

25 
	~<löux/ty≥s.h
>

27 #i‚de‡
_FPGA_H_


28 
	#_FPGA_H_


	)

30 #i‚de‡
CONFIG_MAX_FPGA_DEVICES


31 
	#CONFIG_MAX_FPGA_DEVICES
 5

	)

35 #i‚de‡
FALSE


36 
	#FALSE
 (0)

	)

38 #i‚de‡
TRUE


39 
	#TRUE
 (!
FALSE
)

	)

43 
	#CFG_FPGA_MAN
(
x
Ë(x)

	)

44 
	#CFG_FPGA_DEV
(
x
Ë((xË<< 8 )

	)

45 
	#CFG_FPGA_IF
(
x
Ë((xË<< 16 )

	)

48 
	#CFG_FPGA_XILINX
 
	`CFG_FPGA_MAN
–0x1 )

	)

49 
	#CFG_FPGA_ALTERA
 
	`CFG_FPGA_MAN
–0x2 )

	)

53 
	#FPGA_SUCCESS
 0

	)

54 
	#FPGA_FAIL
 -1

	)

57 
	#FPGA_INVALID_DEVICE
 -1

	)

61 
	mÂga_mö_ty≥
,

62 
	mÂga_xûöx
,

63 
	mÂga_Æãø
,

64 
	mÂga_undeföed


65 } 
	tÂga_ty≥
;

68 
Âga_ty≥
 
	mdevty≥
;

69 * 
	mdevdesc
;

70 } 
	tÂga_desc
;

74 
Âga_öô
–
ul⁄g
 
ªloc_off
 );

75 
Âga_add
–
Âga_ty≥
 
devty≥
, *
desc
 );

76 c⁄° 
Âga_cou¡
( );

77 
Âga_lﬂd
–
devnum
, *
buf
, 
size_t
 
bsize
 );

78 
Âga_dump
–
devnum
, *
buf
, 
size_t
 
bsize
 );

79 
Âga_öfo
–
devnum
 );

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/hush.h

24 #i‚de‡
_HUSH_H_


25 
	#_HUSH_H_


	)

27 
	#FLAG_EXIT_FROM_LOOP
 1

	)

28 
	#FLAG_PARSE_SEMICOLON
 (1 << 1Ë

	)

29 
	#FLAG_REPARSING
 (1 << 2Ë

	)

31 
u_boŸ_hush_°¨t
();

32 
∑r£_°rög_ouãr
(*, );

33 
∑r£_fûe_ouãr
();

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/i2c.h

29 #i‚de‡
_I2C_H_


30 
	#_I2C_H_


	)

47 
	#I2C_RXTX_LEN
 128

	)

53 
i2c_öô
(
•ìd
, 
¶avóddr
);

54 #ifde‡
CFG_I2C_INIT_BOARD


55 
i2c_öô_bﬂrd
();

62 
i2c_¥obe
(
uch¨
 
chù
);

76 
i2c_ªad
(
uch¨
 
chù
, 
uöt
 
addr
, 
Æí
, uch¨ *
buf„r
, 
Àn
);

77 
i2c_wrôe
(
uch¨
 
chù
, 
uöt
 
addr
, 
Æí
, uch¨ *
buf„r
, 
Àn
);

82 
uch¨
 
i2c_ªg_ªad
 (uch¨ 
chù
, uch¨ 
ªg
);

83 
i2c_ªg_wrôe
(
uch¨
 
chù
, uch¨ 
ªg
, uch¨ 
vÆ
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/ide.h

24 #i‚def 
_IDE_H


25 
	#_IDE_H


	)

27 
	#IDE_BUS
(
dev
Ë(dev >> 1)

	)

29 #ifde‡
CONFIG_IDE_LED


34 
	#LED_PORT
 ((
uch¨
 *)(
PER8_BASE
 + 0x3000))

	)

35 
	#LED_IDE1
 0x01

	)

36 
	#LED_IDE2
 0x02

	)

37 
	#DEVICE_LED
(
d
Ë((d & 2Ë| ((d & 2Ë=0)Ë

	)

41 #ifde‡
CFG_64BIT_LBA


42 
uöt64_t
 
	tlbaöt_t
;

44 
ul⁄g
 
	tlbaöt_t
;

51 
ide_öô
 ();

52 
ul⁄g
 
ide_ªad
 (
devi˚
, 
lbaöt_t
 
blkƒ
, ul⁄g 
blk˙t
, ul⁄g *
buf„r
);

53 
ul⁄g
 
ide_wrôe
 (
devi˚
, 
lbaöt_t
 
blkƒ
, ul⁄g 
blk˙t
, ul⁄g *
buf„r
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/image.h

24 #i‚de‡
__IMAGE_H__


25 
	#__IMAGE_H__


	)

30 
	#IH_OS_INVALID
 0

	)

31 
	#IH_OS_OPENBSD
 1

	)

32 
	#IH_OS_NETBSD
 2

	)

33 
	#IH_OS_FREEBSD
 3

	)

34 
	#IH_OS_4_4BSD
 4

	)

35 
	#IH_OS_LINUX
 5

	)

36 
	#IH_OS_SVR4
 6

	)

37 
	#IH_OS_ESIX
 7

	)

38 
	#IH_OS_SOLARIS
 8

	)

39 
	#IH_OS_IRIX
 9

	)

40 
	#IH_OS_SCO
 10

	)

41 
	#IH_OS_DELL
 11

	)

42 
	#IH_OS_NCR
 12

	)

43 
	#IH_OS_LYNXOS
 13

	)

44 
	#IH_OS_VXWORKS
 14

	)

45 
	#IH_OS_PSOS
 15

	)

46 
	#IH_OS_QNX
 16

	)

47 
	#IH_OS_U_BOOT
 17

	)

48 
	#IH_OS_RTEMS
 18

	)

49 
	#IH_OS_ARTOS
 19

	)

50 
	#IH_OS_UNITY
 20

	)

55 
	#IH_CPU_INVALID
 0

	)

56 
	#IH_CPU_ALPHA
 1

	)

57 
	#IH_CPU_ARM
 2

	)

58 
	#IH_CPU_I386
 3

	)

59 
	#IH_CPU_IA64
 4

	)

60 
	#IH_CPU_MIPS
 5

	)

61 
	#IH_CPU_MIPS64
 6

	)

62 
	#IH_CPU_PPC
 7

	)

63 
	#IH_CPU_S390
 8

	)

64 
	#IH_CPU_SH
 9

	)

65 
	#IH_CPU_SPARC
 10

	)

66 
	#IH_CPU_SPARC64
 11

	)

67 
	#IH_CPU_M68K
 12

	)

68 
	#IH_CPU_NIOS
 13

	)

69 
	#IH_CPU_MICROBLAZE
 14

	)

70 
	#IH_CPU_NIOS2
 15

	)

111 
	#IH_TYPE_INVALID
 0

	)

112 
	#IH_TYPE_STANDALONE
 1

	)

113 
	#IH_TYPE_KERNEL
 2

	)

114 
	#IH_TYPE_RAMDISK
 3

	)

115 
	#IH_TYPE_MULTI
 4

	)

116 
	#IH_TYPE_FIRMWARE
 5

	)

117 
	#IH_TYPE_SCRIPT
 6

	)

118 
	#IH_TYPE_FILESYSTEM
 7

	)

123 
	#IH_COMP_NONE
 0

	)

124 
	#IH_COMP_GZIP
 1

	)

125 
	#IH_COMP_BZIP2
 2

	)

126 
	#IH_COMP_LZMA
 3

	)

127 
	#IH_COMP_XZ
 5

	)

129 
	#IH_MAGIC
 0x27051956

	)

130 
	#IH_NMLEN
 32

	)

136 
	simage_hódî
 {

137 
uöt32_t
 
	mih_magic
;

138 
uöt32_t
 
	mih_h¸c
;

139 
uöt32_t
 
	mih_time
;

140 
uöt32_t
 
	mih_size
;

141 
uöt32_t
 
	mih_lﬂd
;

142 
uöt32_t
 
	mih_ï
;

143 
uöt32_t
 
	mih_d¸c
;

144 
uöt8_t
 
	mih_os
;

145 
uöt8_t
 
	mih_¨ch
;

146 
uöt8_t
 
	mih_ty≥
;

147 
uöt8_t
 
	mih_comp
;

148 
uöt8_t
 
	mih_«me
[
IH_NMLEN
];

149 } 
	timage_hódî_t
;

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/kgdb.h

1 #i‚de‡
__KGDB_H__


2 
	#__KGDB_H__


	)

4 
	~<asm/±ø˚.h
>

6 
	#KGDBERR_BADPARAMS
 1

	)

7 
	#KGDBERR_NOTHEXDIG
 2

	)

8 
	#KGDBERR_MEMFAULT
 3

	)

9 
	#KGDBERR_NOSPACE
 4

	)

10 
	#KGDBERR_ALIGNFAULT
 5

	)

12 
	#KGDBDATA_MAXREGS
 8

	)

13 
	#KGDBDATA_MAXPRIV
 8

	)

15 
	#KGDBEXIT_TYPEMASK
 0xff

	)

17 
	#KGDBEXIT_KILL
 0

	)

18 
	#KGDBEXIT_CONTINUE
 1

	)

19 
	#KGDBEXIT_SINGLE
 2

	)

21 
	#KGDBEXIT_WITHADDR
 0x100

	)

25 
	mnum
;

26 
	mvÆ
;

28 
	tkgdb_ªg
;

32 
	msigvÆ
;

33 
	mexty≥
;

34 
	mexaddr
;

35 
	mƒegs
;

36 
kgdb_ªg
 
	mªgs
[
KGDBDATA_MAXREGS
];

37 
	m¥iv©e
[
KGDBDATA_MAXPRIV
];

39 
	tkgdb_d©a
;

42 
kgdb_öô
();

43 
kgdb_îr‹
();

44 
kgdb_ouçut_°rög
(const *, );

45 
bªakpoöt
();

48 
kgdb_Êush_ˇche_ønge
(*, *);

49 
kgdb_Êush_ˇche_Æl
();

50 
kgdb_£tjmp
(*);

51 
kgdb_l⁄gjmp
(*, );

52 
kgdb_íãr
(
±_ªgs
 *, 
kgdb_d©a
 *);

53 
kgdb_exô
(
±_ªgs
 *, 
kgdb_d©a
 *);

54 
kgdb_gëªgs
(
±_ªgs
 *, *, );

55 
kgdb_puåeg
(
±_ªgs
 *, , *, );

56 
kgdb_puåegs
(
±_ªgs
 *, *, );

57 
kgdb_å≠
(
±_ªgs
 *);

58 
kgdb_bªakpoöt
(
¨gc
, *
¨gv
[]);

61 
kgdb_£rül_öô
();

62 
gëDebugCh¨
();

63 
putDebugCh¨
();

64 
putDebugSå
(const *);

65 
kgdb_öãºu±ibÀ
();

68 (*
debuggî_ex˚±i⁄_h™dÀr
)(
±_ªgs
 *);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/launch.h

31 #i‚de‡
LAUNCH_H


32 
	#LAUNCH_H


	)

34 #i‚de‡
_ASSEMBLER_


37 
	mpc
;

38 
	mgp
;

39 
	m•
;

40 
	ma0
;

41 
	m_∑d
[3];

42 
	mÊags
;

43 } 
	t˝uœunch_t
;

47 
	#LOG2CPULAUNCH
 5

	)

48 
	#LAUNCH_PC
 0

	)

49 
	#LAUNCH_GP
 4

	)

50 
	#LAUNCH_SP
 8

	)

51 
	#LAUNCH_A0
 12

	)

52 
	#LAUNCH_FLAGS
 28

	)

56 
	#LAUNCH_FREADY
 1

	)

57 
	#LAUNCH_FGO
 2

	)

58 
	#LAUNCH_FGONE
 4

	)

60 
	#SCRLAUNCH
 0x00000e00

	)

61 
	#CPULAUNCH
 0x00000f00

	)

62 
	#NCPULAUNCH
 8

	)

65 
	#LAUNCHPERIOD
 10000

	)

67 #i‚de‡
__ASSEMBLER__


68 
˝u_¥e£¡
 ();

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/bitops.h

1 #i‚de‡
_LINUX_BITOPS_H


2 
	#_LINUX_BITOPS_H


	)

11 
ölöe
 
	$gíîic_ffs
(
x
)

13 
r
 = 1;

15 i‡(!
x
)

17 i‡(!(
x
 & 0xffff)) {

18 
x
 >>= 16;

19 
r
 += 16;

21 i‡(!(
x
 & 0xff)) {

22 
x
 >>= 8;

23 
r
 += 8;

25 i‡(!(
x
 & 0xf)) {

26 
x
 >>= 4;

27 
r
 += 4;

29 i‡(!(
x
 & 3)) {

30 
x
 >>= 2;

31 
r
 += 2;

33 i‡(!(
x
 & 1)) {

34 
x
 >>= 1;

35 
r
 += 1;

37  
r
;

38 
	}
}

45 
ölöe
 
	$gíîic_hweight32
(
w
)

47 
ªs
 = (
w
 & 0x55555555) + ((w >> 1) & 0x55555555);

48 
ªs
 = (res & 0x33333333) + ((res >> 2) & 0x33333333);

49 
ªs
 = (res & 0x0F0F0F0F) + ((res >> 4) & 0x0F0F0F0F);

50 
ªs
 = (res & 0x00FF00FF) + ((res >> 8) & 0x00FF00FF);

51  (
ªs
 & 0x0000FFFF) + ((res >> 16) & 0x0000FFFF);

52 
	}
}

54 
ölöe
 
	$gíîic_hweight16
(
w
)

56 
ªs
 = (
w
 & 0x5555) + ((w >> 1) & 0x5555);

57 
ªs
 = (res & 0x3333) + ((res >> 2) & 0x3333);

58 
ªs
 = (res & 0x0F0F) + ((res >> 4) & 0x0F0F);

59  (
ªs
 & 0x00FF) + ((res >> 8) & 0x00FF);

60 
	}
}

62 
ölöe
 
	$gíîic_hweight8
(
w
)

64 
ªs
 = (
w
 & 0x55) + ((w >> 1) & 0x55);

65 
ªs
 = (res & 0x33) + ((res >> 2) & 0x33);

66  (
ªs
 & 0x0F) + ((res >> 4) & 0x0F);

67 
	}
}

69 
	~<asm/bô›s.h
>

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/byteorder/big_endian.h

1 #i‚de‡
_LINUX_BYTEORDER_BIG_ENDIAN_H


2 
	#_LINUX_BYTEORDER_BIG_ENDIAN_H


	)

4 #i‚de‡
__BIG_ENDIAN


5 
	#__BIG_ENDIAN
 4321

	)

7 #i‚de‡
__BIG_ENDIAN_BITFIELD


8 
	#__BIG_ENDIAN_BITFIELD


	)

10 
	#__BYTE_ORDER
 
__BIG_ENDIAN


	)

12 
	~<löux/byã‹dî/swab.h
>

14 
	#__c⁄°™t_ht⁄l
(
x
Ë((
__u32
)(x))

	)

15 
	#__c⁄°™t_¡ohl
(
x
Ë((
__u32
)(x))

	)

16 
	#__c⁄°™t_ht⁄s
(
x
Ë((
__u16
)(x))

	)

17 
	#__c⁄°™t_¡ohs
(
x
Ë((
__u16
)(x))

	)

18 
	#__c⁄°™t_˝u_to_À64
(
x
Ë
	`___swab64
((x))

	)

19 
	#__c⁄°™t_À64_to_˝u
(
x
Ë
	`___swab64
((x))

	)

20 
	#__c⁄°™t_˝u_to_À32
(
x
Ë
	`___swab32
((x))

	)

21 
	#__c⁄°™t_À32_to_˝u
(
x
Ë
	`___swab32
((x))

	)

22 
	#__c⁄°™t_˝u_to_À16
(
x
Ë
	`___swab16
((x))

	)

23 
	#__c⁄°™t_À16_to_˝u
(
x
Ë
	`___swab16
((x))

	)

24 
	#__c⁄°™t_˝u_to_be64
(
x
Ë((
__u64
)(x))

	)

25 
	#__c⁄°™t_be64_to_˝u
(
x
Ë((
__u64
)(x))

	)

26 
	#__c⁄°™t_˝u_to_be32
(
x
Ë((
__u32
)(x))

	)

27 
	#__c⁄°™t_be32_to_˝u
(
x
Ë((
__u32
)(x))

	)

28 
	#__c⁄°™t_˝u_to_be16
(
x
Ë((
__u16
)(x))

	)

29 
	#__c⁄°™t_be16_to_˝u
(
x
Ë((
__u16
)(x))

	)

30 
	#__˝u_to_À64
(
x
Ë
	`__swab64
((x))

	)

31 
	#__À64_to_˝u
(
x
Ë
	`__swab64
((x))

	)

32 
	#__˝u_to_À32
(
x
Ë
	`__swab32
((x))

	)

33 
	#__À32_to_˝u
(
x
Ë
	`__swab32
((x))

	)

34 
	#__˝u_to_À16
(
x
Ë
	`__swab16
((x))

	)

35 
	#__À16_to_˝u
(
x
Ë
	`__swab16
((x))

	)

36 
	#__˝u_to_be64
(
x
Ë((
__u64
)(x))

	)

37 
	#__be64_to_˝u
(
x
Ë((
__u64
)(x))

	)

38 
	#__˝u_to_be32
(
x
Ë((
__u32
)(x))

	)

39 
	#__be32_to_˝u
(
x
Ë((
__u32
)(x))

	)

40 
	#__˝u_to_be16
(
x
Ë((
__u16
)(x))

	)

41 
	#__be16_to_˝u
(
x
Ë((
__u16
)(x))

	)

42 
	#__˝u_to_À64p
(
x
Ë
	`__swab64p
((x))

	)

43 
	#__À64_to_˝up
(
x
Ë
	`__swab64p
((x))

	)

44 
	#__˝u_to_À32p
(
x
Ë
	`__swab32p
((x))

	)

45 
	#__À32_to_˝up
(
x
Ë
	`__swab32p
((x))

	)

46 
	#__˝u_to_À16p
(
x
Ë
	`__swab16p
((x))

	)

47 
	#__À16_to_˝up
(
x
Ë
	`__swab16p
((x))

	)

48 
	#__˝u_to_be64p
(
x
Ë(*(
__u64
*)(x))

	)

49 
	#__be64_to_˝up
(
x
Ë(*(
__u64
*)(x))

	)

50 
	#__˝u_to_be32p
(
x
Ë(*(
__u32
*)(x))

	)

51 
	#__be32_to_˝up
(
x
Ë(*(
__u32
*)(x))

	)

52 
	#__˝u_to_be16p
(
x
Ë(*(
__u16
*)(x))

	)

53 
	#__be16_to_˝up
(
x
Ë(*(
__u16
*)(x))

	)

54 
	#__˝u_to_À64s
(
x
Ë
	`__swab64s
((x))

	)

55 
	#__À64_to_˝us
(
x
Ë
	`__swab64s
((x))

	)

56 
	#__˝u_to_À32s
(
x
Ë
	`__swab32s
((x))

	)

57 
	#__À32_to_˝us
(
x
Ë
	`__swab32s
((x))

	)

58 
	#__˝u_to_À16s
(
x
Ë
	`__swab16s
((x))

	)

59 
	#__À16_to_˝us
(
x
Ë
	`__swab16s
((x))

	)

60 
	#__˝u_to_be64s
(
x
Ëdÿ{} 0)

	)

61 
	#__be64_to_˝us
(
x
Ëdÿ{} 0)

	)

62 
	#__˝u_to_be32s
(
x
Ëdÿ{} 0)

	)

63 
	#__be32_to_˝us
(
x
Ëdÿ{} 0)

	)

64 
	#__˝u_to_be16s
(
x
Ëdÿ{} 0)

	)

65 
	#__be16_to_˝us
(
x
Ëdÿ{} 0)

	)

67 
	~<löux/byã‹dî/gíîic.h
>

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/byteorder/generic.h

1 #i‚de‡
_LINUX_BYTEORDER_GENERIC_H


2 
	#_LINUX_BYTEORDER_GENERIC_H


	)

82 #i‡
deföed
(
__KERNEL__
)

87 
	#˝u_to_À64
 
__˝u_to_À64


	)

88 
	#À64_to_˝u
 
__À64_to_˝u


	)

89 
	#˝u_to_À32
 
__˝u_to_À32


	)

90 
	#À32_to_˝u
 
__À32_to_˝u


	)

91 
	#˝u_to_À16
 
__˝u_to_À16


	)

92 
	#À16_to_˝u
 
__À16_to_˝u


	)

93 
	#˝u_to_be64
 
__˝u_to_be64


	)

94 
	#be64_to_˝u
 
__be64_to_˝u


	)

95 
	#˝u_to_be32
 
__˝u_to_be32


	)

96 
	#be32_to_˝u
 
__be32_to_˝u


	)

97 
	#˝u_to_be16
 
__˝u_to_be16


	)

98 
	#be16_to_˝u
 
__be16_to_˝u


	)

99 
	#˝u_to_À64p
 
__˝u_to_À64p


	)

100 
	#À64_to_˝up
 
__À64_to_˝up


	)

101 
	#˝u_to_À32p
 
__˝u_to_À32p


	)

102 
	#À32_to_˝up
 
__À32_to_˝up


	)

103 
	#˝u_to_À16p
 
__˝u_to_À16p


	)

104 
	#À16_to_˝up
 
__À16_to_˝up


	)

105 
	#˝u_to_be64p
 
__˝u_to_be64p


	)

106 
	#be64_to_˝up
 
__be64_to_˝up


	)

107 
	#˝u_to_be32p
 
__˝u_to_be32p


	)

108 
	#be32_to_˝up
 
__be32_to_˝up


	)

109 
	#˝u_to_be16p
 
__˝u_to_be16p


	)

110 
	#be16_to_˝up
 
__be16_to_˝up


	)

111 
	#˝u_to_À64s
 
__˝u_to_À64s


	)

112 
	#À64_to_˝us
 
__À64_to_˝us


	)

113 
	#˝u_to_À32s
 
__˝u_to_À32s


	)

114 
	#À32_to_˝us
 
__À32_to_˝us


	)

115 
	#˝u_to_À16s
 
__˝u_to_À16s


	)

116 
	#À16_to_˝us
 
__À16_to_˝us


	)

117 
	#˝u_to_be64s
 
__˝u_to_be64s


	)

118 
	#be64_to_˝us
 
__be64_to_˝us


	)

119 
	#˝u_to_be32s
 
__˝u_to_be32s


	)

120 
	#be32_to_˝us
 
__be32_to_˝us


	)

121 
	#˝u_to_be16s
 
__˝u_to_be16s


	)

122 
	#be16_to_˝us
 
__be16_to_˝us


	)

140 #unde‡
¡ohl


141 #unde‡
¡ohs


142 #unde‡
ht⁄l


143 #unde‡
ht⁄s


149 #i‡
deföed
(
__KERNEL__
Ë|| (deföed (
__GLIBC__
) && __GLIBC__ >= 2)

150 
__u32
 
¡ohl
(__u32);

151 
__u32
 
ht⁄l
(__u32);

153 
¡ohl
();

154 
ht⁄l
();

156 
¡ohs
();

157 
ht⁄s
();

160 #i‡
deföed
(
__GNUC__
) && (__GNUC__ >= 2)

162 
	#___ht⁄l
(
x
Ë
	`__˝u_to_be32
(x)

	)

163 
	#___ht⁄s
(
x
Ë
	`__˝u_to_be16
(x)

	)

164 
	#___¡ohl
(
x
Ë
	`__be32_to_˝u
(x)

	)

165 
	#___¡ohs
(
x
Ë
	`__be16_to_˝u
(x)

	)

167 #i‡
deföed
(
__KERNEL__
Ë|| (deföed (
__GLIBC__
) && __GLIBC__ >= 2)

168 
	#ht⁄l
(
x
Ë
	`___ht⁄l
(x)

	)

169 
	#¡ohl
(
x
Ë
	`___¡ohl
(x)

	)

171 
	#ht⁄l
(
x
Ë(()
	`___ht⁄l
(x))

	)

172 
	#¡ohl
(
x
Ë(()
	`___¡ohl
(x))

	)

174 
	#ht⁄s
(
x
Ë
	`___ht⁄s
(x)

	)

175 
	#¡ohs
(
x
Ë
	`___¡ohs
(x)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/byteorder/little_endian.h

1 #i‚de‡
_LINUX_BYTEORDER_LITTLE_ENDIAN_H


2 
	#_LINUX_BYTEORDER_LITTLE_ENDIAN_H


	)

4 #i‚de‡
__LITTLE_ENDIAN


5 
	#__LITTLE_ENDIAN
 1234

	)

7 #i‚de‡
__LITTLE_ENDIAN_BITFIELD


8 
	#__LITTLE_ENDIAN_BITFIELD


	)

10 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

12 
	~<löux/byã‹dî/swab.h
>

14 
	#__c⁄°™t_ht⁄l
(
x
Ë
	`___c⁄°™t_swab32
((x))

	)

15 
	#__c⁄°™t_¡ohl
(
x
Ë
	`___c⁄°™t_swab32
((x))

	)

16 
	#__c⁄°™t_ht⁄s
(
x
Ë
	`___c⁄°™t_swab16
((x))

	)

17 
	#__c⁄°™t_¡ohs
(
x
Ë
	`___c⁄°™t_swab16
((x))

	)

18 
	#__c⁄°™t_˝u_to_À64
(
x
Ë((
__u64
)(x))

	)

19 
	#__c⁄°™t_À64_to_˝u
(
x
Ë((
__u64
)(x))

	)

20 
	#__c⁄°™t_˝u_to_À32
(
x
Ë((
__u32
)(x))

	)

21 
	#__c⁄°™t_À32_to_˝u
(
x
Ë((
__u32
)(x))

	)

22 
	#__c⁄°™t_˝u_to_À16
(
x
Ë((
__u16
)(x))

	)

23 
	#__c⁄°™t_À16_to_˝u
(
x
Ë((
__u16
)(x))

	)

24 
	#__c⁄°™t_˝u_to_be64
(
x
Ë
	`___c⁄°™t_swab64
((x))

	)

25 
	#__c⁄°™t_be64_to_˝u
(
x
Ë
	`___c⁄°™t_swab64
((x))

	)

26 
	#__c⁄°™t_˝u_to_be32
(
x
Ë
	`___c⁄°™t_swab32
((x))

	)

27 
	#__c⁄°™t_be32_to_˝u
(
x
Ë
	`___c⁄°™t_swab32
((x))

	)

28 
	#__c⁄°™t_˝u_to_be16
(
x
Ë
	`___c⁄°™t_swab16
((x))

	)

29 
	#__c⁄°™t_be16_to_˝u
(
x
Ë
	`___c⁄°™t_swab16
((x))

	)

30 
	#__˝u_to_À64
(
x
Ë((
__u64
)(x))

	)

31 
	#__À64_to_˝u
(
x
Ë((
__u64
)(x))

	)

32 
	#__˝u_to_À32
(
x
Ë((
__u32
)(x))

	)

33 
	#__À32_to_˝u
(
x
Ë((
__u32
)(x))

	)

34 
	#__˝u_to_À16
(
x
Ë((
__u16
)(x))

	)

35 
	#__À16_to_˝u
(
x
Ë((
__u16
)(x))

	)

36 
	#__˝u_to_be64
(
x
Ë
	`__swab64
((x))

	)

37 
	#__be64_to_˝u
(
x
Ë
	`__swab64
((x))

	)

38 
	#__˝u_to_be32
(
x
Ë
	`__swab32
((x))

	)

39 
	#__be32_to_˝u
(
x
Ë
	`__swab32
((x))

	)

40 
	#__˝u_to_be16
(
x
Ë
	`__swab16
((x))

	)

41 
	#__be16_to_˝u
(
x
Ë
	`__swab16
((x))

	)

42 
	#__˝u_to_À64p
(
x
Ë(*(
__u64
*)(x))

	)

43 
	#__À64_to_˝up
(
x
Ë(*(
__u64
*)(x))

	)

44 
	#__˝u_to_À32p
(
x
Ë(*(
__u32
*)(x))

	)

45 
	#__À32_to_˝up
(
x
Ë(*(
__u32
*)(x))

	)

46 
	#__˝u_to_À16p
(
x
Ë(*(
__u16
*)(x))

	)

47 
	#__À16_to_˝up
(
x
Ë(*(
__u16
*)(x))

	)

48 
	#__˝u_to_be64p
(
x
Ë
	`__swab64p
((x))

	)

49 
	#__be64_to_˝up
(
x
Ë
	`__swab64p
((x))

	)

50 
	#__˝u_to_be32p
(
x
Ë
	`__swab32p
((x))

	)

51 
	#__be32_to_˝up
(
x
Ë
	`__swab32p
((x))

	)

52 
	#__˝u_to_be16p
(
x
Ë
	`__swab16p
((x))

	)

53 
	#__be16_to_˝up
(
x
Ë
	`__swab16p
((x))

	)

54 
	#__˝u_to_À64s
(
x
Ëdÿ{} 0)

	)

55 
	#__À64_to_˝us
(
x
Ëdÿ{} 0)

	)

56 
	#__˝u_to_À32s
(
x
Ëdÿ{} 0)

	)

57 
	#__À32_to_˝us
(
x
Ëdÿ{} 0)

	)

58 
	#__˝u_to_À16s
(
x
Ëdÿ{} 0)

	)

59 
	#__À16_to_˝us
(
x
Ëdÿ{} 0)

	)

60 
	#__˝u_to_be64s
(
x
Ë
	`__swab64s
((x))

	)

61 
	#__be64_to_˝us
(
x
Ë
	`__swab64s
((x))

	)

62 
	#__˝u_to_be32s
(
x
Ë
	`__swab32s
((x))

	)

63 
	#__be32_to_˝us
(
x
Ë
	`__swab32s
((x))

	)

64 
	#__˝u_to_be16s
(
x
Ë
	`__swab16s
((x))

	)

65 
	#__be16_to_˝us
(
x
Ë
	`__swab16s
((x))

	)

67 
	~<löux/byã‹dî/gíîic.h
>

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/byteorder/swab.h

1 #i‚de‡
_LINUX_BYTEORDER_SWAB_H


2 
	#_LINUX_BYTEORDER_SWAB_H


	)

21 
	#___swab16
(
x
) \

22 ((
__u16
)( \

23 (((
__u16
)(
x
) & (__u16)0x00ffU) << 8) | \

24 (((
__u16
)(
x
Ë& (__u16)0xff00UË>> 8Ë))

	)

25 
	#___swab32
(
x
) \

26 ((
__u32
)( \

27 (((
__u32
)(
x
) & (__u32)0x000000ffUL) << 24) | \

28 (((
__u32
)(
x
) & (__u32)0x0000ff00UL) << 8) | \

29 (((
__u32
)(
x
) & (__u32)0x00ff0000UL) >> 8) | \

30 (((
__u32
)(
x
Ë& (__u32)0xff000000ULË>> 24Ë))

	)

31 
	#___swab64
(
x
) \

32 ((
__u64
)( \

33 (
__u64
)(((__u64)(
x
) & (__u64)0x00000000000000ffULL) << 56) | \

34 (
__u64
)(((__u64)(
x
) & (__u64)0x000000000000ff00ULL) << 40) | \

35 (
__u64
)(((__u64)(
x
) & (__u64)0x0000000000ff0000ULL) << 24) | \

36 (
__u64
)(((__u64)(
x
) & (__u64)0x00000000ff000000ULL) << 8) | \

37 (
__u64
)(((__u64)(
x
) & (__u64)0x000000ff00000000ULL) >> 8) | \

38 (
__u64
)(((__u64)(
x
) & (__u64)0x0000ff0000000000ULL) >> 24) | \

39 (
__u64
)(((__u64)(
x
) & (__u64)0x00ff000000000000ULL) >> 40) | \

40 (
__u64
)(((__u64)(
x
Ë& (__u64)0xff00000000000000ULLË>> 56Ë))

	)

45 #i‚de‡
__¨ch__swab16


46 
	#__¨ch__swab16
(
x
Ë
	`___swab16
(x)

	)

48 #i‚de‡
__¨ch__swab32


49 
	#__¨ch__swab32
(
x
Ë
	`___swab32
(x)

	)

51 #i‚de‡
__¨ch__swab64


52 
	#__¨ch__swab64
(
x
Ë
	`___swab64
(x)

	)

55 #i‚de‡
__¨ch__swab16p


56 
	#__¨ch__swab16p
(
x
Ë
	`__swab16
(*(x))

	)

58 #i‚de‡
__¨ch__swab32p


59 
	#__¨ch__swab32p
(
x
Ë
	`__swab32
(*(x))

	)

61 #i‚de‡
__¨ch__swab64p


62 
	#__¨ch__swab64p
(
x
Ë
	`__swab64
(*(x))

	)

65 #i‚de‡
__¨ch__swab16s


66 
	#__¨ch__swab16s
(
x
Ëdÿ{ *(xË
	`__swab16p
((x)); } 0)

	)

68 #i‚de‡
__¨ch__swab32s


69 
	#__¨ch__swab32s
(
x
Ëdÿ{ *(xË
	`__swab32p
((x)); } 0)

	)

71 #i‚de‡
__¨ch__swab64s


72 
	#__¨ch__swab64s
(
x
Ëdÿ{ *(xË
	`__swab64p
((x)); } 0)

	)

79 #i‡
deföed
(
__GNUC__
Ë&& (__GNUC__ >2Ë&& deföed(
__OPTIMIZE__
)

80 
	#__swab16
(
x
) \

81 (
	`__buûtö_c⁄°™t_p
((
__u16
)(
x
)) ? \

82 
	`___swab16
((
x
)) : \

83 
	`__fswab16
((
x
)))

	)

84 
	#__swab32
(
x
) \

85 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

86 
	`___swab32
((
x
)) : \

87 
	`__fswab32
((
x
)))

	)

88 
	#__swab64
(
x
) \

89 (
	`__buûtö_c⁄°™t_p
((
__u64
)(
x
)) ? \

90 
	`___swab64
((
x
)) : \

91 
	`__fswab64
((
x
)))

	)

93 
	#__swab16
(
x
Ë
	`__fswab16
(x)

	)

94 
	#__swab32
(
x
Ë
	`__fswab32
(x)

	)

95 
	#__swab64
(
x
Ë
	`__fswab64
(x)

	)

99 
__ölöe__
 
__c⁄°__
 
__u16
 
	$__fswab16
(
__u16
 
x
)

101  
	`__¨ch__swab16
(
x
);

102 
	}
}

103 
__ölöe__
 
__u16
 
	$__swab16p
(
__u16
 *
x
)

105  
	`__¨ch__swab16p
(
x
);

106 
	}
}

107 
__ölöe__
 
	$__swab16s
(
__u16
 *
addr
)

109 
	`__¨ch__swab16s
(
addr
);

110 
	}
}

112 
__ölöe__
 
__c⁄°__
 
__u32
 
	$__fswab32
(
__u32
 
x
)

114  
	`__¨ch__swab32
(
x
);

115 
	}
}

116 
__ölöe__
 
__u32
 
	$__swab32p
(
__u32
 *
x
)

118  
	`__¨ch__swab32p
(
x
);

119 
	}
}

120 
__ölöe__
 
	$__swab32s
(
__u32
 *
addr
)

122 
	`__¨ch__swab32s
(
addr
);

123 
	}
}

125 #ifde‡
__BYTEORDER_HAS_U64__


126 
__ölöe__
 
__c⁄°__
 
__u64
 
	$__fswab64
(
__u64
 
x
)

128 #ifde‡
__SWAB_64_THRU_32__


129 
__u32
 
h
 = 
x
 >> 32;

130 
__u32
 
l
 = 
x
 & ((1ULL<<32)-1);

131  (((
__u64
)
	`__swab32
(
l
)Ë<< 32Ë| ((__u64)(__swab32(
h
)));

133  
	`__¨ch__swab64
(
x
);

135 
	}
}

136 
__ölöe__
 
__u64
 
	$__swab64p
(
__u64
 *
x
)

138  
	`__¨ch__swab64p
(
x
);

139 
	}
}

140 
__ölöe__
 
	$__swab64s
(
__u64
 *
addr
)

142 
	`__¨ch__swab64s
(
addr
);

143 
	}
}

146 #i‡
deföed
(
__KERNEL__
)

147 
	#swab16
 
__swab16


	)

148 
	#swab32
 
__swab32


	)

149 
	#swab64
 
__swab64


	)

150 
	#swab16p
 
__swab16p


	)

151 
	#swab32p
 
__swab32p


	)

152 
	#swab64p
 
__swab64p


	)

153 
	#swab16s
 
__swab16s


	)

154 
	#swab32s
 
__swab32s


	)

155 
	#swab64s
 
__swab64s


	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/compiler-gcc.h

1 #i‚de‡
__LINUX_COMPILER_H


12 
	#b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("": : :"mem‹y")

	)

32 
	#RELOC_HIDE
(
±r
, 
off
) \

33 ({ 
__±r
; \

34 
	`__asm__
 ("" : "Ù"(
__±r
Ë: "0"(
±r
)); \

35 (
	`ty≥of
(
±r
)Ë(
__±r
 + (
off
)); })

	)

38 
	#__mu°_be_¨øy
(
a
Ë
	`BUILD_BUG_ON_ZERO
(
	`__ßme_ty≥
(◊), &◊)[0]))

	)

44 #i‡!
deföed
(
CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING
) || \

45 !
deföed
(
CONFIG_OPTIMIZE_INLINING
Ë|| (
	g__GNUC__
 < 4)

46 
	#ölöe
 
ölöe
 
	`__©åibuã__
((
Æways_ölöe
))

	)

47 
	#__ölöe__
 
__ölöe__
 
	`__©åibuã__
((
Æways_ölöe
))

	)

48 
	#__ölöe
 
__ölöe
 
	`__©åibuã__
((
Æways_ölöe
))

	)

51 
	#__dïªˇãd
 
	`__©åibuã__
((
dïªˇãd
))

	)

52 
	#__∑cked
 
	`__©åibuã__
((
∑cked
))

	)

53 
	#__wók
 
	`__©åibuã__
((
wók
))

	)

65 
	#__«ked
 
	`__©åibuã__
((
«ked
)Ë
noölöe
 
__no˛⁄e
 
nŸø˚


	)

67 
	#__n‹ëu∫
 
	`__©åibuã__
((
n‹ëu∫
))

	)

79 
	#__puª
 
	`__©åibuã__
((
puª
))

	)

80 
	#__Æig√d
(
x
Ë
	`__©åibuã__
((
	`Æig√d
(x)))

	)

81 
	#__¥ötf
(
a
,
b
Ë
	`__©åibuã__
((
	`f‹m©
(
¥ötf
,a,b)))

	)

82 
	#noölöe
 
	`__©åibuã__
((
noölöe
))

	)

83 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
((
__c⁄°__
))

	)

84 
	#__maybe_unu£d
 
	`__©åibuã__
((
unu£d
))

	)

85 
	#__Æways_unu£d
 
	`__©åibuã__
((
unu£d
))

	)

87 
	#__gcc_hódî
(
x
Ë#x

	)

88 
	#_gcc_hódî
(
x
Ë
	`__gcc_hódî
(
löux
/
compûî
-
gcc
##x.
h
)

	)

89 
	#gcc_hódî
(
x
Ë
	`_gcc_hódî
(x)

	)

90 #ö˛udê
gcc_hódî
(
__GNUC__
)

92 #i‡!
deföed
(
__no˛⁄e
)

93 
	#__no˛⁄e


	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/compiler-gcc3.h

1 #i‚de‡
__LINUX_COMPILER_H


5 #i‡
__GNUC_MINOR__
 < 2

6 #îr‹ 
S‹ry
, 
your
 
compûî
 
is
 
too
 
ﬁd
 - 
∂ó£
 
upgøde
 
ô
.

9 #i‡
__GNUC_MINOR__
 >= 3

10 
	#__u£d
 
	`__©åibuã__
((
__u£d__
))

	)

12 
	#__u£d
 
	`__©åibuã__
((
__unu£d__
))

	)

15 #i‡
__GNUC_MINOR__
 >= 4

16 
	#__mu°_check
 
	`__©åibuã__
((
w¨n_unu£d_ªsu…
))

	)

19 #ifde‡
CONFIG_GCOV_KERNEL


20 #i‡
__GNUC_MINOR__
 < 4

29 
	#unöôülized_v¨
(
x
Ëx = 
	)
x

31 
	#__Æways_ölöe
 
ölöe
 
	`__©åibuã__
((
Æways_ölöe
))

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/compiler-gcc4.h

1 #i‚de‡
__LINUX_COMPILER_H


6 #ifde‡
__KERNEL__


7 #i‡
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 <= 1

8 #îr‹ 
Your
 
vîsi⁄
 
of
 
gcc
 
miscompûes
 
the
 
__wók
 
dúe˘ive


12 
	#__u£d
 
	`__©åibuã__
((
__u£d__
))

	)

13 
	#__mu°_check
 
	`__©åibuã__
((
w¨n_unu£d_ªsu…
))

	)

14 
	#__compûî_off£tof
(
a
,
b
Ë
	`__buûtö_off£tof
◊,b)

	)

15 
	#__Æways_ölöe
 
ölöe
 
	`__©åibuã__
((
Æways_ölöe
))

	)

21 
	#unöôülized_v¨
(
x
Ëx = 
	)
x

23 #i‡
__GNUC_MINOR__
 >= 3

37 
	#__cﬁd
 
	`__©åibuã__
((
__cﬁd__
))

	)

40 #i‡
__GNUC_MINOR__
 >= 5

50 
	#uƒóchabÀ
(Ë
	`__buûtö_uƒóchabÀ
()

	)

53 
	#__no˛⁄e
 
	`__©åibuã__
((
__no˛⁄e__
))

	)

59 #i‡
__GNUC_MINOR__
 > 0

60 
	#__compûëime_obje˘_size
(
obj
Ë
	`__buûtö_obje˘_size
(obj, 0)

	)

62 #i‡
__GNUC_MINOR__
 >= 4

63 
	#__compûëime_w¨nög
(
mesßge
Ë
	`__©åibuã__
((
	`w¨nög
(mesßge)))

	)

64 
	#__compûëime_îr‹
(
mesßge
Ë
	`__©åibuã__
((
	`îr‹
(mesßge)))

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/compiler.h

1 #i‚de‡
__LINUX_COMPILER_H


2 
	#__LINUX_COMPILER_H


	)

4 #i‚de‡
__ASSEMBLY__


6 #ifde‡
__CHECKER__


7 
	#__u£r
 
	`__©åibuã__
((
nodîef
, 
	`addªss_•a˚
(1)))

	)

8 
	#__kî√l
 
	`__©åibuã__
((
	`addªss_•a˚
(0)))

	)

9 
	#__ß„
 
	`__©åibuã__
((
ß„
))

	)

10 
	#__f‹˚
 
	`__©åibuã__
((
f‹˚
))

	)

11 
	#__noˇ°
 
	`__©åibuã__
((
noˇ°
))

	)

12 
	#__iomem
 
	`__©åibuã__
((
nodîef
, 
	`addªss_•a˚
(2)))

	)

13 
	#__acquúes
(
x
Ë
	`__©åibuã__
((
	`c⁄ãxt
(x,0,1)))

	)

14 
	#__ªÀa£s
(
x
Ë
	`__©åibuã__
((
	`c⁄ãxt
(x,1,0)))

	)

15 
	#__acquúe
(
x
Ë
	`__c⁄ãxt__
(x,1)

	)

16 
	#__ªÀa£
(
x
Ë
	`__c⁄ãxt__
(x,-1)

	)

17 
	#__c⁄d_lock
(
x
,
c
Ë((cË? ({ 
	`__acquúe
(x); 1; }Ë: 0)

	)

18 
	#__≥r˝u
 
	`__©åibuã__
((
nodîef
, 
	`addªss_•a˚
(3)))

	)

19 
	#__rcu


	)

20 
__chk_u£r_±r
(c⁄° vﬁ©ûê
__u£r
 *);

21 
__chk_io_±r
(c⁄° vﬁ©ûê
__iomem
 *);

23 
	#__u£r


	)

24 
	#__kî√l


	)

25 
	#__ß„


	)

26 
	#__f‹˚


	)

27 
	#__noˇ°


	)

28 
	#__iomem


	)

29 
	#__chk_u£r_±r
(
x
Ë()0

	)

30 
	#__chk_io_±r
(
x
Ë()0

	)

31 
	#__buûtö_w¨nög
(
x
, 
y
...Ë(1)

	)

32 
	#__acquúes
(
x
)

	)

33 
	#__ªÀa£s
(
x
)

	)

34 
	#__acquúe
(
x
Ë()0

	)

35 
	#__ªÀa£
(
x
Ë()0

	)

36 
	#__c⁄d_lock
(
x
,
c
Ë(c)

	)

37 
	#__≥r˝u


	)

38 
	#__rcu


	)

41 #ifde‡
__KERNEL__


43 #ifde‡
__GNUC__


44 
	~<löux/compûî-gcc.h
>

47 
	#nŸø˚
 
	`__©åibuã__
((
no_ö°rumít_fun˘i⁄
))

	)

52 #ifde‡
__INTEL_COMPILER


53 
	~<löux/compûî-öãl.h
>

62 
	s·ø˚_bønch_d©a
 {

63 c⁄° *
	mfunc
;

64 c⁄° *
	mfûe
;

65 
	mlöe
;

68 
	mc‹ª˘
;

69 
	möc‹ª˘
;

72 
	mmiss
;

73 
	mhô
;

75 
	mmiss_hô
[2];

83 #i‡
deföed
(
CONFIG_TRACE_BRANCH_PROFILING
) \

84 && !
deföed
(
DISABLE_BRANCH_PROFILING
Ë&& !
	$deföed
(
__CHECKER__
)

85 
	`·ø˚_likñy_upd©e
(
·ø˚_bønch_d©a
 *
f
, 
vÆ
, 
ex≥˘
);

87 
	#likñy_nŸø˚
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

88 
	#u∆ikñy_nŸø˚
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

90 
	#__bønch_check__
(
x
, 
ex≥˘
) ({ \

91 
______r
; \

92 
·ø˚_bønch_d©a
 \

93 
	`__©åibuã__
((
	`__Æig√d__
(4))) \

94 
	`__©åibuã__
((
	`£˘i⁄
("_ftrace_annotated_branch"))) \

95 
______f
 = { \

96 .
func
 = 
__func__
, \

97 .
fûe
 = 
__FILE__
, \

98 .
löe
 = 
__LINE__
, \

100 
______r
 = 
	`likñy_nŸø˚
(
x
); \

101 
	`·ø˚_likñy_upd©e
(&
______f
, 
______r
, 
ex≥˘
); \

102 
______r
; \

103 
	}
})

	)

110 #i‚de‡
likñy


111 
	#likñy
(
x
Ë(
	`__buûtö_c⁄°™t_p
(xË? !!(xË: 
	`__bønch_check__
(x, 1))

	)

113 #i‚de‡
u∆ikñy


114 
	#u∆ikñy
(
x
Ë(
	`__buûtö_c⁄°™t_p
(xË? !!(xË: 
	`__bønch_check__
(x, 0))

	)

117 #ifde‡
CONFIG_PROFILE_ALL_BRANCHES


122 
c⁄d
, ...Ë
	`__åa˚_if
–(c⁄d , ## 
__VA_ARGS__
Ë)

	)

123 
	#__åa˚_if
(
c⁄d
) \

124 i‡(
	`__buûtö_c⁄°™t_p
((
c⁄d
)) ? !!(cond) : \

126 
______r
; \

127 
·ø˚_bønch_d©a
 \

128 
	`__©åibuã__
((
	`__Æig√d__
(4))) \

129 
	`__©åibuã__
((
	`£˘i⁄
("_ftrace_branch"))) \

130 
______f
 = { \

131 .
func
 = 
__func__
, \

132 .
fûe
 = 
__FILE__
, \

133 .
löe
 = 
__LINE__
, \

135 
______r
 = !!(
c⁄d
); \

136 
______f
.
miss_hô
[
______r
]++; \

137 
______r
; \

138 }))

	)

142 
	#likñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

143 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

147 #i‚de‡
b¨rõr


148 
	#b¨rõr
(Ë
	`__mem‹y_b¨rõr
()

	)

152 #i‚de‡
uƒóchabÀ


153 
	#uƒóchabÀ
(Ëdÿ{ } 1)

	)

156 #i‚de‡
RELOC_HIDE


157 
	#RELOC_HIDE
(
±r
, 
off
) \

158 ({ 
__±r
; \

159 
__±r
 = (Ë(
±r
); \

160 (
	`ty≥of
(
±r
)Ë(
__±r
 + (
off
)); })

	)

167 #ifde‡
__KERNEL__


174 #i‚de‡
__dïªˇãd


175 
	#__dïªˇãd


	)

178 #ifde‡
MODULE


179 
	#__dïªˇãd_f‹_moduÀs
 
__dïªˇãd


	)

181 
	#__dïªˇãd_f‹_moduÀs


	)

184 #i‚de‡
__mu°_check


185 
	#__mu°_check


	)

188 #i‚de‡
CONFIG_ENABLE_MUST_CHECK


189 #unde‡
__mu°_check


190 
	#__mu°_check


	)

192 #i‚de‡
CONFIG_ENABLE_WARN_DEPRECATED


193 #unde‡
__dïªˇãd


194 #unde‡
__dïªˇãd_f‹_moduÀs


195 
	#__dïªˇãd


	)

196 
	#__dïªˇãd_f‹_moduÀs


	)

217 #i‚de‡
__u£d


218 
	#__u£d


	)

221 #i‚de‡
__maybe_unu£d


222 
	#__maybe_unu£d


	)

225 #i‚de‡
__Æways_unu£d


226 
	#__Æways_unu£d


	)

229 #i‚de‡
noölöe


230 
	#noölöe


	)

237 
	#noölöe_f‹_°ack
 
noölöe


	)

239 #i‚de‡
__Æways_ölöe


240 
	#__Æways_ölöe
 
ölöe


	)

259 #i‚de‡
__©åibuã_c⁄°__


260 
	#__©åibuã_c⁄°__


	)

268 #i‚de‡
__cﬁd


269 
	#__cﬁd


	)

273 #i‚de‡
__£˘i⁄


274 
	#__£˘i⁄
(
S
Ë
	`__©åibuã__
 ((
	`__£˘i⁄__
(#S)))

	)

278 #i‚de‡
__ßme_ty≥


279 
	#__ßme_ty≥
(
a
, 
b
Ë
	`__buûtö_ty≥s_com∑tibÀ_p
(
	`ty≥of
◊),Åy≥of(b))

	)

283 #i‚de‡
__compûëime_obje˘_size


284 
	#__compûëime_obje˘_size
(
obj
Ë-1

	)

286 #i‚de‡
__compûëime_w¨nög


287 
	#__compûëime_w¨nög
(
mesßge
)

	)

289 #i‚de‡
__compûëime_îr‹


290 
	#__compûëime_îr‹
(
mesßge
)

	)

305 
	#ACCESS_ONCE
(
x
Ë(*(vﬁ©ûê
	`ty≥of
(xË*)&(x))

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/config.h

1 #i‚de‡
_LINUX_CONFIG_H


2 
	#_LINUX_CONFIG_H


	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/ctype.h

1 #i‚de‡
_LINUX_CTYPE_H


2 
	#_LINUX_CTYPE_H


	)

9 
	#_U
 0x01

	)

10 
	#_L
 0x02

	)

11 
	#_D
 0x04

	)

12 
	#_C
 0x08

	)

13 
	#_P
 0x10

	)

14 
	#_S
 0x20

	)

15 
	#_X
 0x40

	)

16 
	#_SP
 0x80

	)

18 
_˘y≥
[];

20 
	#__ismask
(
x
Ë(
_˘y≥
[()()(x)])

	)

22 
	#iß um
(
c
Ë((
	`__ismask
(c)&(
_U
|
_L
|
_D
)Ë!0)

	)

23 
	#ißÕha
(
c
Ë((
	`__ismask
(c)&(
_U
|
_L
)Ë!0)

	)

24 
	#is˙ål
(
c
Ë((
	`__ismask
(c)&(
_C
)Ë!0)

	)

25 
	#isdigô
(
c
Ë((
	`__ismask
(c)&(
_D
)Ë!0)

	)

26 
	#isgøph
(
c
Ë((
	`__ismask
(c)&(
_P
|
_U
|
_L
|
_D
)Ë!0)

	)

27 
	#i¶owî
(
c
Ë((
	`__ismask
(c)&(
_L
)Ë!0)

	)

28 
	#i•röt
(
c
Ë((
	`__ismask
(c)&(
_P
|
_U
|
_L
|
_D
|
_SP
)Ë!0)

	)

29 
	#i•un˘
(
c
Ë((
	`__ismask
(c)&(
_P
)Ë!0)

	)

30 
	#is•a˚
(
c
Ë((
	`__ismask
(c)&(
_S
)Ë!0)

	)

31 
	#isuµî
(
c
Ë((
	`__ismask
(c)&(
_U
)Ë!0)

	)

32 
	#isxdigô
(
c
Ë((
	`__ismask
(c)&(
_D
|
_X
)Ë!0)

	)

34 
	#ißscii
(
c
Ë((()(c))<=0x7f)

	)

35 
	#tﬂscii
(
c
Ë((()(c))&0x7f)

	)

37 
ölöe
 
	$__tﬁowî
(
c
)

39 i‡(
	`isuµî
(
c
))

40 
c
 -= 'A'-'a';

41  
c
;

42 
	}
}

44 
ölöe
 
	$__touµî
(
c
)

46 i‡(
	`i¶owî
(
c
))

47 
c
 -= 'a'-'A';

48  
c
;

49 
	}
}

51 
	#tﬁowî
(
c
Ë
	`__tﬁowî
(c)

	)

52 
	#touµî
(
c
Ë
	`__touµî
(c)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/err.h

1 #i‚de‡
_LINUX_ERR_H


2 
	#_LINUX_ERR_H


	)

4 
	~<löux/compûî.h
>

6 
	~<asm/î∫o.h
>

16 
	#MAX_ERRNO
 4095

	)

18 #i‚de‡
__ASSEMBLY__


20 
	#IS_ERR_VALUE
(
x
Ë
	`u∆ikñy
((xË>()-
MAX_ERRNO
)

	)

22 
ölöe
 * 
__mu°_check
 
	$ERR_PTR
(
îr‹
)

24  (*Ë
îr‹
;

25 
	}
}

27 
ölöe
 
__mu°_check
 
	$PTR_ERR
(c⁄° *
±r
)

29  (Ë
±r
;

30 
	}
}

32 
ölöe
 
__mu°_check
 
	$IS_ERR
(c⁄° *
±r
)

34  
	`IS_ERR_VALUE
(()
±r
);

35 
	}
}

37 
ölöe
 
__mu°_check
 
	$IS_ERR_OR_NULL
(c⁄° *
±r
)

39  !
±r
 || 
	`IS_ERR_VALUE
(()ptr);

40 
	}
}

49 
ölöe
 * 
__mu°_check
 
	$ERR_CAST
(c⁄° *
±r
)

52  (*Ë
±r
;

53 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

6 #ifde‡
__KERNEL__


9 
	#ERESTARTSYS
 512

	)

10 
	#ERESTARTNOINTR
 513

	)

11 
	#ERESTARTNOHAND
 514

	)

12 
	#ENOIOCTLCMD
 515

	)

13 
	#ERESTART_RESTARTBLOCK
 516

	)

16 
	#EBADHANDLE
 521

	)

17 
	#ENOTSYNC
 522

	)

18 
	#EBADCOOKIE
 523

	)

19 
	#ENOTSUPP
 524

	)

20 
	#ETOOSMALL
 525

	)

21 
	#ESERVERFAULT
 526

	)

22 
	#EBADTYPE
 527

	)

23 
	#EJUKEBOX
 528

	)

24 
	#EIOCBQUEUED
 529

	)

25 
	#EIOCBRETRY
 530

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/mc146818rtc.h

11 #i‚de‡
_MC146818RTC_H


12 
	#_MC146818RTC_H


	)

14 
	~<asm/io.h
>

15 
	~<löux/πc.h
>

16 
	~<asm/mc146818πc.h
>

21 
	#RTC_SECONDS
 0

	)

22 
	#RTC_SECONDS_ALARM
 1

	)

23 
	#RTC_MINUTES
 2

	)

24 
	#RTC_MINUTES_ALARM
 3

	)

25 
	#RTC_HOURS
 4

	)

26 
	#RTC_HOURS_ALARM
 5

	)

28 
	#RTC_ALARM_DONT_CARE
 0xC0

	)

30 
	#RTC_DAY_OF_WEEK
 6

	)

31 
	#RTC_DAY_OF_MONTH
 7

	)

32 
	#RTC_MONTH
 8

	)

33 
	#RTC_YEAR
 9

	)

37 
	#RTC_REG_A
 10

	)

38 
	#RTC_REG_B
 11

	)

39 
	#RTC_REG_C
 12

	)

40 
	#RTC_REG_D
 13

	)

45 
	#RTC_FREQ_SELECT
 
RTC_REG_A


	)

51 
	#RTC_UIP
 0x80

	)

52 
	#RTC_DIV_CTL
 0x70

	)

54 
	#RTC_REF_CLCK_4MHZ
 0x00

	)

55 
	#RTC_REF_CLCK_1MHZ
 0x10

	)

56 
	#RTC_REF_CLCK_32KHZ
 0x20

	)

58 
	#RTC_DIV_RESET1
 0x60

	)

59 
	#RTC_DIV_RESET2
 0x70

	)

61 
	#RTC_RATE_SELECT
 0x0F

	)

64 
	#RTC_CONTROL
 
RTC_REG_B


	)

65 
	#RTC_SET
 0x80

	)

66 
	#RTC_PIE
 0x40

	)

67 
	#RTC_AIE
 0x20

	)

68 
	#RTC_UIE
 0x10

	)

69 
	#RTC_SQWE
 0x08

	)

70 
	#RTC_DM_BINARY
 0x04

	)

71 
	#RTC_24H
 0x02

	)

72 
	#RTC_DST_EN
 0x01

	)

75 
	#RTC_INTR_FLAGS
 
RTC_REG_C


	)

77 
	#RTC_IRQF
 0x80

	)

78 
	#RTC_PF
 0x40

	)

79 
	#RTC_AF
 0x20

	)

80 
	#RTC_UF
 0x10

	)

83 
	#RTC_VALID
 
RTC_REG_D


	)

84 
	#RTC_VRT
 0x80

	)

90 #i‚de‡
BCD_TO_BIN


91 
	#BCD_TO_BIN
(
vÆ
Ë((vÆ)=((vÆ)&15Ë+ ((vÆ)>>4)*10)

	)

94 #i‚de‡
BIN_TO_BCD


95 
	#BIN_TO_BCD
(
vÆ
Ë((vÆ)=(((vÆ)/10)<<4Ë+ (vÆ)%10)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/mtd/bbm.h

28 #i‚de‡
__LINUX_MTD_BBM_H


29 
	#__LINUX_MTD_BBM_H


	)

32 
	#NAND_MAX_CHIPS
 8

	)

57 
	s«nd_bbt_des¸
 {

58 
	m›ti⁄s
;

59 
	m∑ges
[
NAND_MAX_CHIPS
];

60 
	moffs
;

61 
	mvîoffs
;

62 
uöt8_t
 
	mvîsi⁄
[
NAND_MAX_CHIPS
];

63 
	mÀn
;

64 
	mmaxblocks
;

65 
	mª£rved_block_code
;

66 
uöt8_t
 *
	m∑âîn
;

72 
	#NAND_BBT_NRBITS_MSK
 0x0000000F

	)

73 
	#NAND_BBT_1BIT
 0x00000001

	)

74 
	#NAND_BBT_2BIT
 0x00000002

	)

75 
	#NAND_BBT_4BIT
 0x00000004

	)

76 
	#NAND_BBT_8BIT
 0x00000008

	)

78 
	#NAND_BBT_LASTBLOCK
 0x00000010

	)

80 
	#NAND_BBT_ABSPAGE
 0x00000020

	)

82 
	#NAND_BBT_SEARCH
 0x00000040

	)

84 
	#NAND_BBT_PERCHIP
 0x00000080

	)

86 
	#NAND_BBT_VERSION
 0x00000100

	)

88 
	#NAND_BBT_CREATE
 0x00000200

	)

90 
	#NAND_BBT_SCANALLPAGES
 0x00000400

	)

92 
	#NAND_BBT_SCANEMPTY
 0x00000800

	)

94 
	#NAND_BBT_WRITE
 0x00001000

	)

96 
	#NAND_BBT_SAVECONTENT
 0x00002000

	)

98 
	#NAND_BBT_SCAN2NDPAGE
 0x00004000

	)

100 
	#NAND_BBT_SCANLASTPAGE
 0x00008000

	)

102 
	#NAND_BBT_SCANBYTE1AND6
 0x00100000

	)

104 
	#NAND_BBT_DYNAMICSTRUCT
 0x00200000

	)

107 
	#NAND_BBT_SCAN_MAXBLOCKS
 4

	)

112 
	#NAND_SMALL_BADBLOCK_POS
 5

	)

113 
	#NAND_LARGE_BADBLOCK_POS
 0

	)

114 
	#ONENAND_BADBLOCK_POS
 0

	)

119 
	#ONENAND_BBT_READ_ERROR
 1

	)

120 
	#ONENAND_BBT_READ_ECC_ERROR
 2

	)

121 
	#ONENAND_BBT_READ_FATAL_ERROR
 4

	)

134 
	sbbm_öfo
 {

135 
	mbbt_îa£_shi·
;

136 
	mbadblockpos
;

137 
	m›ti⁄s
;

139 
uöt8_t
 *
	mbbt
;

141 (*
	misbad_bbt
)(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	mofs
, 
	mÆlowbbt
);

144 
«nd_bbt_des¸
 *
	mbadblock_∑âîn
;

146 *
	m¥iv
;

150 
⁄í™d_sˇn_bbt
(
mtd_öfo
 *
mtd
, 
«nd_bbt_des¸
 *
bd
);

151 
⁄í™d_deÁu…_bbt
(
mtd_öfo
 *
mtd
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/mtd/doc2000.h

7 #i‚de‡
__MTD_DOC2000_H__


8 
	#__MTD_DOC2000_H__


	)

10 
	gDiskOnChù
;

12 
	~<löux/mtd/n·l.h
>

14 
	#DoC_Sig1
 0

	)

15 
	#DoC_Sig2
 1

	)

17 
	#DoC_ChùID
 0x1000

	)

18 
	#DoC_DOCSètus
 0x1001

	)

19 
	#DoC_DOCC⁄åﬁ
 0x1002

	)

20 
	#DoC_Flo‹Sñe˘
 0x1003

	)

21 
	#DoC_CDSNC⁄åﬁ
 0x1004

	)

22 
	#DoC_CDSNDevi˚Sñe˘
 0x1005

	)

23 
	#DoC_ECCC⁄f
 0x1006

	)

24 
	#DoC_2k_ECCSètus
 0x1007

	)

26 
	#DoC_CDSNSlowIO
 0x100d

	)

27 
	#DoC_ECCSyndrome0
 0x1010

	)

28 
	#DoC_ECCSyndrome1
 0x1011

	)

29 
	#DoC_ECCSyndrome2
 0x1012

	)

30 
	#DoC_ECCSyndrome3
 0x1013

	)

31 
	#DoC_ECCSyndrome4
 0x1014

	)

32 
	#DoC_ECCSyndrome5
 0x1015

	)

33 
	#DoC_AlüsResﬁuti⁄
 0x101b

	)

34 
	#DoC_C⁄figI≈ut
 0x101c

	)

35 
	#DoC_RódPùeInô
 0x101d

	)

36 
	#DoC_WrôePùeTîm
 0x101e

	)

37 
	#DoC_La°D©aRód
 0x101f

	)

38 
	#DoC_NOP
 0x1020

	)

40 
	#DoC_Mû_CDSN_IO
 0x0800

	)

41 
	#DoC_2k_CDSN_IO
 0x1800

	)

43 
	#RódDOC_
(
adr
, 
ªg
Ë((vﬁ©ûê)(*(vﬁ©ûê
__u8
 *)(((Ôdr)+(‘eg)))))

	)

44 
	#WrôeDOC_
(
d
, 
adr
, 
ªg
Ëdo{ *(vﬁ©ûê
__u8
 *)(((Ôdr)+(‘eg))Ë(__u8)d; 
	`eõio
();} 0)

	)

46 
	#DOC_IOREMAP_LEN
 0x4000

	)

49 
	#RódDOC
(
adr
, 
ªg
Ë
	`RódDOC_
◊dr,
DoC_
##ªg)

	)

50 
	#WrôeDOC
(
d
, 
adr
, 
ªg
Ë
	`WrôeDOC_
(d,adr,
DoC_
##ªg)

	)

52 
	#DOC_MODE_RESET
 0

	)

53 
	#DOC_MODE_NORMAL
 1

	)

54 
	#DOC_MODE_RESERVED1
 2

	)

55 
	#DOC_MODE_RESERVED2
 3

	)

57 
	#DOC_MODE_MDWREN
 4

	)

58 
	#DOC_MODE_CLR_ERR
 0x80

	)

60 
	#DOC_ChùID_UNKNOWN
 0x00

	)

61 
	#DOC_ChùID_Doc2k
 0x20

	)

62 
	#DOC_ChùID_DocMû
 0x30

	)

64 
	#CDSN_CTRL_FR_B
 0x80

	)

65 
	#CDSN_CTRL_ECC_IO
 0x20

	)

66 
	#CDSN_CTRL_FLASH_IO
 0x10

	)

67 
	#CDSN_CTRL_WP
 0x08

	)

68 
	#CDSN_CTRL_ALE
 0x04

	)

69 
	#CDSN_CTRL_CLE
 0x02

	)

70 
	#CDSN_CTRL_CE
 0x01

	)

72 
	#DOC_ECC_RESET
 0

	)

73 
	#DOC_ECC_ERROR
 0x80

	)

74 
	#DOC_ECC_RW
 0x20

	)

75 
	#DOC_ECC__EN
 0x08

	)

76 
	#DOC_TOGGLE_BIT
 0x04

	)

77 
	#DOC_ECC_RESV
 0x02

	)

78 
	#DOC_ECC_IGNORE
 0x01

	)

81 
	#DOC_ECC_EN
 (
DOC_ECC__EN
 | 
DOC_ECC_RESV
)

	)

82 
	#DOC_ECC_DIS
 (
DOC_ECC_RESV
)

	)

84 
	#MAX_FLOORS
 4

	)

85 
	#MAX_CHIPS
 4

	)

87 
	#MAX_FLOORS_MIL
 4

	)

88 
	#MAX_CHIPS_MIL
 1

	)

90 
	#ADDR_COLUMN
 1

	)

91 
	#ADDR_PAGE
 2

	)

92 
	#ADDR_COLUMN_PAGE
 3

	)

94 
	sDiskOnChù
 {

95 
	mphyßdr
;

96 
	mvúèdr
;

97 
	mtŸÀn
;

98 * 
	m«me
;

99 
	mChùID
;

100 
	mi‹eg
;

102 * 
	mchùs_«me
;

103 
	mm‰
;

104 
	mid
;

105 
	mchùshi·
;

106 
	m∑ge256
;

107 
	m∑gódæí
;

108 
	mîa£size
;

110 
	mcurÊo‹
;

111 
	mcurchù
;

113 
	mnumchùs
;

114 
N™d
 *
	mchùs
;

116 
	mn·l_found
;

117 
NFTLªc‹d
 
	mn·l
;

120 
	#SECTORSIZE
 512

	)

124 
	#DOC_OK
 0

	)

125 
	#DOC_EIO
 1

	)

126 
	#DOC_EINVAL
 2

	)

127 
	#DOC_EECC
 3

	)

128 
	#DOC_ETIMEOUT
 4

	)

133 
doc_decode_ecc
(
£˘‹
[512], 
ecc1
[6]);

135 
doc_rw
(
DiskOnChù
* 
this
, 
cmd
, 
loff_t
 
‰om
, 
size_t
 
Àn
,

136 
size_t
 *
ªéí
, 
u_ch¨
 *
buf
);

137 
doc_ªad_ecc
(
DiskOnChù
* 
this
, 
loff_t
 
‰om
, 
size_t
 
Àn
,

138 
size_t
 *
ªéí
, 
u_ch¨
 *
buf
, u_ch¨ *
eccbuf
);

139 
doc_wrôe_ecc
(
DiskOnChù
* 
this
, 
loff_t
 
to
, 
size_t
 
Àn
,

140 
size_t
 *
ªéí
, c⁄° 
u_ch¨
 *
buf
, u_ch¨ *
eccbuf
);

141 
doc_ªad_oob
(
DiskOnChù
* 
this
, 
loff_t
 
ofs
, 
size_t
 
Àn
,

142 
size_t
 *
ªéí
, 
u_ch¨
 *
buf
);

143 
doc_wrôe_oob
(
DiskOnChù
* 
this
, 
loff_t
 
ofs
, 
size_t
 
Àn
,

144 
size_t
 *
ªéí
, c⁄° 
u_ch¨
 *
buf
);

145 
doc_îa£
 (
DiskOnChù
* 
this
, 
loff_t
 
ofs
, 
size_t
 
Àn
);

147 
doc_¥obe
(
phyßdr
);

149 
doc_¥öt
(
DiskOnChù
*);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/mtd/mtd.h

9 #i‚de‡
__MTD_MTD_H__


10 
	#__MTD_MTD_H__


	)

12 #i‚de‡
__KERNEL__


13 #îr‹ 
This
 
is
 
a
 
kî√l
 
hódî
. 
Pîh≠s
 
ö˛ude
 
mtd
-
u£r
.
h
 
ö°ód
?

16 
	~<löux/ty≥s.h
>

22 
	~<mtd/mtd-abi.h
>

24 
	#MTD_CHAR_MAJOR
 90

	)

25 
	#MTD_BLOCK_MAJOR
 31

	)

26 
	#MAX_MTD_DEVICES
 32

	)

28 
	#MTD_ERASE_PENDING
 0x01

	)

29 
	#MTD_ERASING
 0x02

	)

30 
	#MTD_ERASE_SUSPEND
 0x04

	)

31 
	#MTD_ERASE_DONE
 0x08

	)

32 
	#MTD_ERASE_FAILED
 0x10

	)

37 
	sîa£_öfo
 {

38 
mtd_öfo
 *
	mmtd
;

39 
uöt64_t
 
	maddr
;

40 
uöt64_t
 
	mÀn
;

41 
uöt64_t
 
	mÁû_addr
;

42 
u_l⁄g
 
	mtime
;

43 
u_l⁄g
 
	mªåõs
;

44 
u_öt
 
	mdev
;

45 
u_öt
 
	m˚Œ
;

46 (*
	mˇŒback
Ë(
îa£_öfo
 *
	m£lf
);

47 
u_l⁄g
 
	m¥iv
;

48 
u_ch¨
 
	m°©e
;

49 
îa£_öfo
 *
	m√xt
;

52 
	smtd_îa£_ªgi⁄_öfo
 {

53 
uöt64_t
 
	moff£t
;

54 
u_öt32_t
 
	mîa£size
;

55 
u_öt32_t
 
	mnumblocks
;

69 
	mMTD_OOB_PLACE
,

70 
	mMTD_OOB_AUTO
,

71 
	mMTD_OOB_RAW
,

72 } 
	tmtd_oob_mode_t
;

93 
	smtd_oob_›s
 {

94 
mtd_oob_mode_t
 
	mmode
;

95 
size_t
 
	mÀn
;

96 
size_t
 
	mªéí
;

97 
size_t
 
	moobÀn
;

98 
size_t
 
	moobªéí
;

99 
uöt32_t
 
	mooboffs
;

100 
uöt8_t
 *
	md©buf
;

101 
uöt8_t
 *
	moobbuf
;

104 
	smtd_öfo
 {

105 
u_ch¨
 
	mty≥
;

106 
u_öt32_t
 
	mÊags
;

107 
uöt64_t
 
	msize
;

113 
u_öt32_t
 
	mîa£size
;

121 
u_öt32_t
 
	mwrôesize
;

123 
u_öt32_t
 
	moobsize
;

124 
u_öt32_t
 
	moobavaû
;

127 *
	m«me
;

128 
	mödex
;

131 
«nd_ec˛ayout
 *
	mec˛ayout
;

136 
	mnumîa£ªgi⁄s
;

137 
mtd_îa£_ªgi⁄_öfo
 *
	mîa£ªgi⁄s
;

140 
u_öt32_t
 
	mb™k_size
;

142 (*
	mîa£
Ë(
mtd_öfo
 *
	mmtd
, 
îa£_öfo
 *
	mö°r
);

145 (*
	mpoöt
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	m‰om
, 
size_t
 
	mÀn
, size_à*
	mªéí
, 
u_ch¨
 **
	mmtdbuf
);

148 (*
	mu≈oöt
Ë(
mtd_öfo
 *
	mmtd
, 
u_ch¨
 * 
	maddr
, 
loff_t
 
	m‰om
, 
size_t
 
	mÀn
);

151 (*
	mªad
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	m‰om
, 
size_t
 
	mÀn
, size_à*
	mªéí
, 
u_ch¨
 *
	mbuf
);

152 (*
	mwrôe
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	mto
, 
size_t
 
	mÀn
, size_à*
	mªéí
, c⁄° 
u_ch¨
 *
	mbuf
);

154 (*
	mªad_oob
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	m‰om
,

155 
mtd_oob_›s
 *
	m›s
);

156 (*
	mwrôe_oob
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	mto
,

157 
mtd_oob_›s
 *
	m›s
);

164 (*
	mgë_Á˘_¥Ÿ_öfo
Ë(
mtd_öfo
 *
	mmtd
, 
Ÿp_öfo
 *
	mbuf
, 
size_t
 
	mÀn
);

165 (*
	mªad_Á˘_¥Ÿ_ªg
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	m‰om
, 
size_t
 
	mÀn
, size_à*
	mªéí
, 
u_ch¨
 *
	mbuf
);

166 (*
	mgë_u£r_¥Ÿ_öfo
Ë(
mtd_öfo
 *
	mmtd
, 
Ÿp_öfo
 *
	mbuf
, 
size_t
 
	mÀn
);

167 (*
	mªad_u£r_¥Ÿ_ªg
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	m‰om
, 
size_t
 
	mÀn
, size_à*
	mªéí
, 
u_ch¨
 *
	mbuf
);

168 (*
	mwrôe_u£r_¥Ÿ_ªg
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	m‰om
, 
size_t
 
	mÀn
, size_à*
	mªéí
, 
u_ch¨
 *
	mbuf
);

169 (*
	mlock_u£r_¥Ÿ_ªg
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	m‰om
, 
size_t
 
	mÀn
);

175 (*
	mwrôev
Ë(
mtd_öfo
 *
	mmtd
, c⁄° 
kvec
 *
	mvecs
, 
	mcou¡
, 
loff_t
 
	mto
, 
size_t
 *
	mªéí
);

178 (*
	msync
Ë(
mtd_öfo
 *
	mmtd
);

181 (*
	mlock
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	mofs
, 
size_t
 
	mÀn
);

182 (*
	mu∆ock
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	mofs
, 
size_t
 
	mÀn
);

185 (*
	msu•íd
Ë(
mtd_öfo
 *
	mmtd
);

186 (*
	mªsume
Ë(
mtd_öfo
 *
	mmtd
);

189 (*
	mblock_isbad
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	mofs
);

190 (*
	mblock_m¨kbad
Ë(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	mofs
);

195 
mtd_ecc_°©s
 
	mecc_°©s
;

197 
	msub∑ge_s·
;

199 *
	m¥iv
;

201 
moduÀ
 *
	mow√r
;

202 
	mu£cou¡
;

208 (*
	mgë_devi˚
Ë(
mtd_öfo
 *
	mmtd
);

209 (*
	mput_devi˚
Ë(
mtd_öfo
 *
	mmtd
);

215 
add_mtd_devi˚
(
mtd_öfo
 *
mtd
);

216 
dñ_mtd_devi˚
 (
mtd_öfo
 *
mtd
);

218 
mtd_öfo
 *
gë_mtd_devi˚
(mtd_öfÿ*
mtd
, 
num
);

219 
mtd_öfo
 *
gë_mtd_devi˚_nm
(c⁄° *
«me
);

221 
put_mtd_devi˚
(
mtd_öfo
 *
mtd
);

224 
	smtd_nŸifõr
 {

225 (*
	madd
)(
mtd_öfo
 *
	mmtd
);

226 (*
	mªmove
)(
mtd_öfo
 *
	mmtd
);

231 
ªgi°î_mtd_u£r
 (
mtd_nŸifõr
 *
√w
);

232 
uƒegi°î_mtd_u£r
 (
mtd_nŸifõr
 *
ﬁd
);

234 
deÁu…_mtd_wrôev
(
mtd_öfo
 *
mtd
, c⁄° 
kvec
 *
vecs
,

235 
cou¡
, 
loff_t
 
to
, 
size_t
 *
ªéí
);

237 
deÁu…_mtd_ªadv
(
mtd_öfo
 *
mtd
, 
kvec
 *
vecs
,

238 
cou¡
, 
loff_t
 
‰om
, 
size_t
 *
ªéí
);

240 #ifde‡
CONFIG_MTD_PARTITIONS


241 
mtd_îa£_ˇŒback
(
îa£_öfo
 *
ö°r
);

243 
ölöe
 
	$mtd_îa£_ˇŒback
(
îa£_öfo
 *
ö°r
)

245 i‡(
ö°r
->
ˇŒback
)

246 
ö°r
->
	`ˇŒback
(instr);

247 
	}
}

253 
	#MTD_DEBUG_LEVEL0
 (0Ë

	)

254 
	#MTD_DEBUG_LEVEL1
 (1Ë

	)

255 
	#MTD_DEBUG_LEVEL2
 (2Ë

	)

256 
	#MTD_DEBUG_LEVEL3
 (3Ë

	)

258 #ifde‡
CONFIG_MTD_DEBUG


259 
	#DEBUG
(
n
, 
¨gs
...) \

261 i‡(
n
 <
CONFIG_MTD_DEBUG_VERBOSE
) \

262 
	`¥ötk
(
KERN_INFO
 
¨gs
); \

263 } 0)

	)

265 
	#DEBUG
(
n
, 
¨gs
...Ëdÿ{ } 0)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/mtd/nand.h

18 #i‚de‡
__LINUX_MTD_NAND_H


19 
	#__LINUX_MTD_NAND_H


	)

21 
	~<löux/ty≥s.h
>

24 #ifde‡
__CHECKER__


25 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

27 
	#__bôwi£__


	)

29 #ifde‡
__CHECK_ENDIAN__


30 
	#__bôwi£
 
__bôwi£__


	)

32 
	#__bôwi£


	)

35 
	#__iomem


	)

39 
	mFL_READY
,

40 
	mFL_STATUS
,

41 
	mFL_CFI_QUERY
,

42 
	mFL_JEDEC_QUERY
,

43 
	mFL_ERASING
,

44 
	mFL_ERASE_SUSPENDING
,

45 
	mFL_ERASE_SUSPENDED
,

46 
	mFL_WRITING
,

47 
	mFL_WRITING_TO_BUFFER
,

48 
	mFL_OTP_WRITE
,

49 
	mFL_WRITE_SUSPENDING
,

50 
	mFL_WRITE_SUSPENDED
,

51 
	mFL_PM_SUSPENDED
,

52 
	mFL_SYNCING
,

53 
	mFL_UNLOADING
,

54 
	mFL_LOCKING
,

55 
	mFL_UNLOCKING
,

56 
	mFL_POINT
,

57 
	mFL_XIP_WHILE_ERASING
,

58 
	mFL_XIP_WHILE_WRITING
,

59 
	mFL_SHUTDOWN
,

61 
	mFL_READING
,

62 
	mFL_CACHEDPRG
,

64 
	mFL_RESETING
,

65 
	mFL_OTPING
,

66 
	mFL_PREPARING_ERASE
,

67 
	mFL_VERIFYING_ERASE
,

69 
	mFL_UNKNOWN


70 } 
	tÊ°©e_t
;

73 
	~<löux/mtd/mtd.h
>

75 
	~<löux/mtd/bbm.h
>

77 
	gmtd_öfo
;

78 
	g«nd_Êash_dev
;

80 
«nd_sˇn
(
mtd_öfo
 *
mtd
, 
max_chùs
);

87 
«nd_sˇn_idít
(
mtd_öfo
 *
mtd
, 
max_chùs
);

88 
«nd_sˇn_èû
(
mtd_öfo
 *
mtd
);

91 
«nd_ªÀa£
(
mtd_öfo
 *
mtd
);

94 
«nd_waô_ªady
(
mtd_öfo
 *
mtd
);

97 
«nd_lock
(
mtd_öfo
 *
mtd
, 
loff_t
 
ofs
, 
uöt64_t
 
Àn
);

100 
«nd_u∆ock
(
mtd_öfo
 *
mtd
, 
loff_t
 
ofs
, 
uöt64_t
 
Àn
);

103 
	#NAND_MAX_CHIPS
 8

	)

110 
	#NAND_MAX_OOBSIZE
 576

	)

111 
	#NAND_MAX_PAGESIZE
 8192

	)

120 
	#NAND_NCE
 0x01

	)

122 
	#NAND_CLE
 0x02

	)

124 
	#NAND_ALE
 0x04

	)

126 
	#NAND_CTRL_CLE
 (
NAND_NCE
 | 
NAND_CLE
)

	)

127 
	#NAND_CTRL_ALE
 (
NAND_NCE
 | 
NAND_ALE
)

	)

128 
	#NAND_CTRL_CHANGE
 0x80

	)

133 
	#NAND_CMD_READ0
 0

	)

134 
	#NAND_CMD_READ1
 1

	)

135 
	#NAND_CMD_RNDOUT
 5

	)

136 
	#NAND_CMD_PAGEPROG
 0x10

	)

137 
	#NAND_CMD_READOOB
 0x50

	)

138 
	#NAND_CMD_ERASE1
 0x60

	)

139 
	#NAND_CMD_STATUS
 0x70

	)

140 
	#NAND_CMD_STATUS_MULTI
 0x71

	)

141 
	#NAND_CMD_SEQIN
 0x80

	)

142 
	#NAND_CMD_RNDIN
 0x85

	)

143 
	#NAND_CMD_READID
 0x90

	)

144 
	#NAND_CMD_ERASE2
 0xd0

	)

145 
	#NAND_CMD_PARAM
 0xec

	)

146 
	#NAND_CMD_RESET
 0xff

	)

148 
	#NAND_CMD_LOCK
 0x2a

	)

149 
	#NAND_CMD_UNLOCK1
 0x23

	)

150 
	#NAND_CMD_UNLOCK2
 0x24

	)

153 
	#NAND_CMD_READSTART
 0x30

	)

154 
	#NAND_CMD_RNDOUTSTART
 0xE0

	)

155 
	#NAND_CMD_CACHEDPROG
 0x15

	)

164 
	#NAND_CMD_DEPLETE1
 0x100

	)

165 
	#NAND_CMD_DEPLETE2
 0x38

	)

166 
	#NAND_CMD_STATUS_MULTI
 0x71

	)

167 
	#NAND_CMD_STATUS_ERROR
 0x72

	)

169 
	#NAND_CMD_STATUS_ERROR0
 0x73

	)

170 
	#NAND_CMD_STATUS_ERROR1
 0x74

	)

171 
	#NAND_CMD_STATUS_ERROR2
 0x75

	)

172 
	#NAND_CMD_STATUS_ERROR3
 0x76

	)

173 
	#NAND_CMD_STATUS_RESET
 0x7f

	)

174 
	#NAND_CMD_STATUS_CLEAR
 0xff

	)

176 
	#NAND_CMD_NONE
 -1

	)

179 
	#NAND_STATUS_FAIL
 0x01

	)

180 
	#NAND_STATUS_FAIL_N1
 0x02

	)

181 
	#NAND_STATUS_TRUE_READY
 0x20

	)

182 
	#NAND_STATUS_READY
 0x40

	)

183 
	#NAND_STATUS_WP
 0x80

	)

189 
	mNAND_ECC_NONE
,

190 
	mNAND_ECC_SOFT
,

191 
	mNAND_ECC_HW
,

192 
	mNAND_ECC_HW_SYNDROME
,

193 
	mNAND_ECC_HW_OOB_FIRST
,

194 
	mNAND_ECC_SOFT_BCH
,

195 } 
	t«nd_ecc_modes_t
;

201 
	#NAND_ECC_READ
 0

	)

203 
	#NAND_ECC_WRITE
 1

	)

205 
	#NAND_ECC_READSYN
 2

	)

208 
	#NAND_GET_DEVICE
 0x80

	)

216 
	#NAND_NO_AUTOINCR
 0x00000001

	)

218 
	#NAND_BUSWIDTH_16
 0x00000002

	)

220 
	#NAND_NO_PADDING
 0x00000004

	)

222 
	#NAND_CACHEPRG
 0x00000008

	)

224 
	#NAND_COPYBACK
 0x00000010

	)

229 
	#NAND_IS_AND
 0x00000020

	)

234 
	#NAND_4PAGE_ARRAY
 0x00000040

	)

240 
	#BBT_AUTO_REFRESH
 0x00000080

	)

246 
	#NAND_NO_READRDY
 0x00000100

	)

248 
	#NAND_NO_SUBPAGE_WRITE
 0x00000200

	)

251 
	#NAND_BROKEN_XD
 0x00000400

	)

254 
	#NAND_ROM
 0x00000800

	)

257 
	#NAND_SAMSUNG_LP_OPTIONS
 \

258 (
NAND_NO_PADDING
 | 
NAND_CACHEPRG
 | 
NAND_COPYBACK
)

	)

261 
	#NAND_CANAUTOINCR
(
chù
Ë(!(chù->
›ti⁄s
 & 
NAND_NO_AUTOINCR
))

	)

262 
	#NAND_MUST_PAD
(
chù
Ë(!(chù->
›ti⁄s
 & 
NAND_NO_PADDING
))

	)

263 
	#NAND_HAS_CACHEPROG
(
chù
Ë((chù->
›ti⁄s
 & 
NAND_CACHEPRG
))

	)

264 
	#NAND_HAS_COPYBACK
(
chù
Ë((chù->
›ti⁄s
 & 
NAND_COPYBACK
))

	)

266 
	#NAND_SUBPAGE_READ
(
chù
Ë((chù->
ecc
.
mode
 =
NAND_ECC_SOFT
) \

267 && (
chù
->
∑ge_shi·
 > 9))

	)

270 
	#NAND_CHIPOPTIONS_MSK
 (0x0000fff‡& ~
NAND_NO_AUTOINCR
)

	)

277 
	#NAND_USE_FLASH_BBT
 0x00010000

	)

279 
	#NAND_SKIP_BBTSCAN
 0x00020000

	)

284 
	#NAND_OWN_BUFFERS
 0x00040000

	)

286 
	#NAND_SCAN_SILENT_NODEV
 0x00080000

	)

291 
	#NAND_USE_FLASH_BBT_NO_OOB
 0x00800000

	)

293 
	#NAND_CREATE_EMPTY_BBT
 0x01000000

	)

297 
	#NAND_CONTROLLER_ALLOC
 0x80000000

	)

300 
	#NAND_CI_CHIPNR_MSK
 0x03

	)

301 
	#NAND_CI_CELLTYPE_MSK
 0x0C

	)

304 
	g«nd_chù
;

306 
	s«nd_⁄fi_∑øms
 {

309 
u8
 
	msig
[4];

310 
__À16
 
	mªvisi⁄
;

311 
__À16
 
	m„©uªs
;

312 
__À16
 
	m›t_cmd
;

313 
u8
 
	mª£rved
[22];

316 
	mm™uÁ˘uªr
[12];

317 
	mmodñ
[20];

318 
u8
 
	mjedec_id
;

319 
__À16
 
	md©e_code
;

320 
u8
 
	mª£rved2
[13];

323 
__À32
 
	mbyã_≥r_∑ge
;

324 
__À16
 
	m•¨e_byãs_≥r_∑ge
;

325 
__À32
 
	md©a_byãs_≥r_µage
;

326 
__À16
 
	m•¨e_byãs_≥r_µage
;

327 
__À32
 
	m∑ges_≥r_block
;

328 
__À32
 
	mblocks_≥r_lun
;

329 
u8
 
	mlun_cou¡
;

330 
u8
 
	maddr_cy˛es
;

331 
u8
 
	mbôs_≥r_˚Œ
;

332 
__À16
 
	mbb_≥r_lun
;

333 
__À16
 
	mblock_íduøn˚
;

334 
u8
 
	mgu¨™ãed_good_blocks
;

335 
__À16
 
	mgu¨™ãed_block_íduøn˚
;

336 
u8
 
	m¥ogøms_≥r_∑ge
;

337 
u8
 
	mµage_©å
;

338 
u8
 
	mecc_bôs
;

339 
u8
 
	möãæóved_bôs
;

340 
u8
 
	möãæóved_›s
;

341 
u8
 
	mª£rved3
[13];

344 
u8
 
	mio_pö_ˇ∑cô™˚_max
;

345 
__À16
 
	masync_timög_mode
;

346 
__À16
 
	m¥ogøm_ˇche_timög_mode
;

347 
__À16
 
	mt_¥og
;

348 
__À16
 
	mt_bîs
;

349 
__À16
 
	mt_r
;

350 
__À16
 
	mt_ccs
;

351 
__À16
 
	m§c_sync_timög_mode
;

352 
__À16
 
	m§c_ssync_„©uªs
;

353 
__À16
 
	m˛k_pö_ˇ∑cô™˚_typ
;

354 
__À16
 
	mio_pö_ˇ∑cô™˚_typ
;

355 
__À16
 
	möput_pö_ˇ∑cô™˚_typ
;

356 
u8
 
	möput_pö_ˇ∑cô™˚_max
;

357 
u8
 
	mdrivî_°ªnght_suµ‹t
;

358 
__À16
 
	mt_öt_r
;

359 
__À16
 
	mt_Æd
;

360 
u8
 
	mª£rved4
[7];

363 
u8
 
	mª£rved5
[90];

365 
__À16
 
	m¸c
;

366 } 
__©åibuã__
((
∑cked
));

368 
	#ONFI_CRC_BASE
 0x4F4E

	)

378 
	s«nd_hw_c⁄åﬁ
 {

380 
«nd_chù
 *
	ma˘ive
;

409 
	s«nd_ecc_˘æ
 {

410 
«nd_ecc_modes_t
 
	mmode
;

411 
	m°ïs
;

412 
	msize
;

413 
	mbyãs
;

414 
	mtŸÆ
;

415 
	m¥ïad
;

416 
	mpo°∑d
;

417 
«nd_ec˛ayout
 *
	mœyout
;

418 *
	m¥iv
;

419 (*
	mhw˘l
)(
mtd_öfo
 *
	mmtd
, 
	mmode
);

420 (*
	mˇlcuœã
)(
mtd_öfo
 *
	mmtd
, c⁄° 
uöt8_t
 *
	md©
,

421 
uöt8_t
 *
	mecc_code
);

422 (*
	mc‹ª˘
)(
mtd_öfo
 *
	mmtd
, 
uöt8_t
 *
	md©
, uöt8_à*
	mªad_ecc
,

423 
uöt8_t
 *
	mˇlc_ecc
);

424 (*
	mªad_∑ge_øw
)(
mtd_öfo
 *
	mmtd
, 
«nd_chù
 *
	mchù
,

425 
uöt8_t
 *
	mbuf
, 
	m∑ge
);

426 (*
	mwrôe_∑ge_øw
)(
mtd_öfo
 *
	mmtd
, 
«nd_chù
 *
	mchù
,

427 c⁄° 
uöt8_t
 *
	mbuf
);

428 (*
	mªad_∑ge
)(
mtd_öfo
 *
	mmtd
, 
«nd_chù
 *
	mchù
,

429 
uöt8_t
 *
	mbuf
, 
	m∑ge
);

430 (*
	mªad_sub∑ge
)(
mtd_öfo
 *
	mmtd
, 
«nd_chù
 *
	mchù
,

431 
uöt32_t
 
	moffs
, uöt32_à
	mÀn
, 
uöt8_t
 *
	mbuf
);

432 (*
	mwrôe_∑ge
)(
mtd_öfo
 *
	mmtd
, 
«nd_chù
 *
	mchù
,

433 c⁄° 
uöt8_t
 *
	mbuf
);

434 (*
	mªad_oob
)(
mtd_öfo
 *
	mmtd
, 
«nd_chù
 *
	mchù
, 
	m∑ge
,

435 
	m¢dcmd
);

436 (*
	mwrôe_oob
)(
mtd_öfo
 *
	mmtd
, 
«nd_chù
 *
	mchù
,

437 
	m∑ge
);

449 
	s«nd_buf„rs
 {

450 
uöt8_t
 
	meccˇlc
[
NAND_MAX_OOBSIZE
];

451 
uöt8_t
 
	mecccode
[
NAND_MAX_OOBSIZE
];

452 
uöt8_t
 
	md©abuf
[
NAND_MAX_PAGESIZE
 + 
NAND_MAX_OOBSIZE
];

535 
	s«nd_chù
 {

536 
__iomem
 *
	mIO_ADDR_R
;

537 
__iomem
 *
	mIO_ADDR_W
;

539 
uöt8_t
 (*
ªad_byã
)(
mtd_öfo
 *
	mmtd
);

540 
u16
 (*
ªad_w‹d
)(
mtd_öfo
 *
	mmtd
);

541 (*
	mwrôe_buf
)(
mtd_öfo
 *
	mmtd
, c⁄° 
uöt8_t
 *
	mbuf
, 
	mÀn
);

542 (*
	mªad_buf
)(
mtd_öfo
 *
	mmtd
, 
uöt8_t
 *
	mbuf
, 
	mÀn
);

543 (*
	mvîify_buf
)(
mtd_öfo
 *
	mmtd
, c⁄° 
uöt8_t
 *
	mbuf
, 
	mÀn
);

544 (*
	m£À˘_chù
)(
mtd_öfo
 *
	mmtd
, 
	mchù
);

545 (*
	mblock_bad
)(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	mofs
, 
	mgëchù
);

546 (*
	mblock_m¨kbad
)(
mtd_öfo
 *
	mmtd
, 
loff_t
 
	mofs
);

547 (*
	mcmd_˘æ
)(
mtd_öfo
 *
	mmtd
, 
	md©
, 
	m˘æ
);

548 (*
	möô_size
)(
mtd_öfo
 *
	mmtd
, 
«nd_chù
 *
	mthis
,

549 
u8
 *
	mid_d©a
);

550 (*
	mdev_ªady
)(
mtd_öfo
 *
	mmtd
);

551 (*
	mcmdfunc
)(
mtd_öfo
 *
	mmtd
, 
	mcomm™d
, 
	mcﬁumn
,

552 
	m∑ge_addr
);

553 (*
	mwaôfunc
)(
mtd_öfo
 *
	mmtd
, 
«nd_chù
 *
	mthis
);

554 (*
	mîa£_cmd
)(
mtd_öfo
 *
	mmtd
, 
	m∑ge
);

555 (*
	msˇn_bbt
)(
mtd_öfo
 *
	mmtd
);

556 (*
	mîr°©
)(
mtd_öfo
 *
	mmtd
, 
«nd_chù
 *
	mthis
, 
	m°©e
,

557 
	m°©us
, 
	m∑ge
);

558 (*
	mwrôe_∑ge
)(
mtd_öfo
 *
	mmtd
, 
«nd_chù
 *
	mchù
,

559 c⁄° 
uöt8_t
 *
	mbuf
, 
	m∑ge
, 
	mˇched
, 
	møw
);

561 #i‡
deföed
 (
MT7621_ASIC_BOARD
Ë|| deföed (
MT7621_FPGA_BOARD
)

562 (*
	mªad_∑ge
)(
mtd_öfo
 *
	mmtd
, 
«nd_chù
 *
	mchù
, 
u8
 *
	mbuf
, 
	m∑ge
);

563 (*
	mîa£
)(
mtd_öfo
 *
	mmtd
, 
	m∑ge
);

566 
	mchù_dñay
;

567 
	m›ti⁄s
;

569 
	m∑ge_shi·
;

570 
	mphys_îa£_shi·
;

571 
	mbbt_îa£_shi·
;

572 
	mchù_shi·
;

573 
	mnumchùs
;

574 
uöt64_t
 
	mchùsize
;

575 
	m∑gemask
;

576 
	m∑gebuf
;

577 
	msub∑gesize
;

578 
uöt8_t
 
	m˚Œöfo
;

579 
	mbadblockpos
;

580 
	mbadblockbôs
;

582 
	m⁄fi_vîsi⁄
;

583 
«nd_⁄fi_∑øms
 
	m⁄fi_∑øms
;

585 
Ê°©e_t
 
	m°©e
;

587 
uöt8_t
 *
	moob_poi
;

588 
«nd_hw_c⁄åﬁ
 *
	mc⁄åﬁÀr
;

589 
«nd_ec˛ayout
 *
	mec˛ayout
;

591 
«nd_ecc_˘æ
 
	mecc
;

592 
«nd_buf„rs
 *
	mbuf„rs
;

593 
«nd_hw_c⁄åﬁ
 
	mhwc⁄åﬁ
;

595 
mtd_oob_›s
 
	m›s
;

597 
uöt8_t
 *
	mbbt
;

598 
«nd_bbt_des¸
 *
	mbbt_td
;

599 
«nd_bbt_des¸
 *
	mbbt_md
;

601 
«nd_bbt_des¸
 *
	mbadblock_∑âîn
;

603 *
	m¥iv
;

609 
	#NAND_MFR_TOSHIBA
 0x98

	)

610 
	#NAND_MFR_SAMSUNG
 0xec

	)

611 
	#NAND_MFR_FUJITSU
 0x04

	)

612 
	#NAND_MFR_NATIONAL
 0x8f

	)

613 
	#NAND_MFR_RENESAS
 0x07

	)

614 
	#NAND_MFR_STMICRO
 0x20

	)

615 
	#NAND_MFR_HYNIX
 0xad

	)

616 
	#NAND_MFR_MICRON
 0x2c

	)

617 
	#NAND_MFR_AMD
 0x01

	)

631 
	s«nd_Êash_dev
 {

632 *
	m«me
;

633 
	mid
;

634 
	m∑gesize
;

635 
	mchùsize
;

636 
	mîa£size
;

637 
	m›ti⁄s
;

645 
	s«nd_m™uÁ˘uªrs
 {

646 
	mid
;

647 *
	m«me
;

650 
«nd_Êash_dev
 
«nd_Êash_ids
[];

651 
«nd_m™uÁ˘uªrs
 
«nd_m™uf_ids
[];

653 
«nd_sˇn_bbt
(
mtd_öfo
 *
mtd
, 
«nd_bbt_des¸
 *
bd
);

654 
«nd_upd©e_bbt
(
mtd_öfo
 *
mtd
, 
loff_t
 
offs
);

655 
«nd_deÁu…_bbt
(
mtd_öfo
 *
mtd
);

656 
«nd_isbad_bbt
(
mtd_öfo
 *
mtd
, 
loff_t
 
offs
, 
Ælowbbt
);

657 
«nd_îa£_«nd
(
mtd_öfo
 *
mtd
, 
îa£_öfo
 *
ö°r
,

658 
Ælowbbt
);

659 
«nd_do_ªad
(
mtd_öfo
 *
mtd
, 
loff_t
 
‰om
, 
size_t
 
Àn
,

660 
size_t
 *
ªéí
, 
uöt8_t
 *
buf
);

675 
	s∂©f‹m_«nd_chù
 {

676 
	mƒ_chùs
;

677 
	mchù_off£t
;

678 
	mƒ_∑πôi⁄s
;

679 
mtd_∑πôi⁄
 *
	m∑πôi⁄s
;

680 
«nd_ec˛ayout
 *
	mec˛ayout
;

681 
	mchù_dñay
;

682 
	m›ti⁄s
;

683 c⁄° **
	m∑π_¥obe_ty≥s
;

684 (*
	m£t_∑πs
)(
uöt64_t
 
	msize
, 
∂©f‹m_«nd_chù
 *
	mchù
);

685 *
	m¥iv
;

689 
	g∂©f‹m_devi˚
;

706 
	s∂©f‹m_«nd_˘æ
 {

707 (*
	m¥obe
)(
∂©f‹m_devi˚
 *
	mpdev
);

708 (*
	mªmove
)(
∂©f‹m_devi˚
 *
	mpdev
);

709 (*
	mhwc⁄åﬁ
)(
mtd_öfo
 *
	mmtd
, 
	mcmd
);

710 (*
	mdev_ªady
)(
mtd_öfo
 *
	mmtd
);

711 (*
	m£À˘_chù
)(
mtd_öfo
 *
	mmtd
, 
	mchù
);

712 (*
	mcmd_˘æ
)(
mtd_öfo
 *
	mmtd
, 
	md©
, 
	m˘æ
);

713 (*
	mwrôe_buf
)(
mtd_öfo
 *
	mmtd
, c⁄° 
uöt8_t
 *
	mbuf
, 
	mÀn
);

714 (*
	mªad_buf
)(
mtd_öfo
 *
	mmtd
, 
uöt8_t
 *
	mbuf
, 
	mÀn
);

715 *
	m¥iv
;

723 
	s∂©f‹m_«nd_d©a
 {

724 
∂©f‹m_«nd_chù
 
	mchù
;

725 
∂©f‹m_«nd_˘æ
 
	m˘æ
;

729 
ölöe


730 
∂©f‹m_«nd_chù
 *
	$gë_∂©f‹m_«ndchù
(
mtd_öfo
 *
mtd
)

732 
«nd_chù
 *
chù
 = 
mtd
->
¥iv
;

734  
chù
->
¥iv
;

735 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/mtd/nand_ecc.h

15 #i‚de‡
__MTD_NAND_ECC_H__


16 
	#__MTD_NAND_ECC_H__


	)

18 
	gmtd_öfo
;

23 
«nd_ˇlcuœã_ecc
(
mtd_öfo
 *
mtd
, c⁄° 
u_ch¨
 *
d©
, u_ch¨ *
ecc_code
);

28 
«nd_c‹ª˘_d©a
(
mtd_öfo
 *
mtd
, 
u_ch¨
 *
d©
, u_ch¨ *
ªad_ecc
, u_ch¨ *
ˇlc_ecc
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/mtd/nand_ids.h

28 #i‚de‡
__LINUX_MTD_NAND_IDS_H


29 
	#__LINUX_MTD_NAND_IDS_H


	)

31 
«nd_Êash_dev
 
	g«nd_Êash_ids
[] = {

32 {"Toshib®TC5816BDC", 
NAND_MFR_TOSHIBA
, 0x64, 21, 1, 2, 0x1000},

33 {"Toshib®TC5832DC", 
NAND_MFR_TOSHIBA
, 0x6b, 22, 0, 2, 0x2000},

34 {"Toshib®TH58V128DC", 
NAND_MFR_TOSHIBA
, 0x73, 24, 0, 2, 0x4000},

35 {"Toshib®TC58256FT/DC", 
NAND_MFR_TOSHIBA
, 0x75, 25, 0, 2, 0x4000},

36 {"Toshib®TH58512FT", 
NAND_MFR_TOSHIBA
, 0x76, 26, 0, 3, 0x4000},

37 {"Toshib®TC58V32DC", 
NAND_MFR_TOSHIBA
, 0xe5, 22, 0, 2, 0x2000},

38 {"Toshib®TC58V64AFT/DC", 
NAND_MFR_TOSHIBA
, 0xe6, 23, 0, 2, 0x2000},

39 {"Toshib®TC58V16BDC", 
NAND_MFR_TOSHIBA
, 0xea, 21, 1, 2, 0x1000},

40 {"Toshib®TH58100FT", 
NAND_MFR_TOSHIBA
, 0x79, 27, 0, 3, 0x4000},

41 {"Samsung KM29N16000", 
NAND_MFR_SAMSUNG
, 0x64, 21, 1, 2, 0x1000},

42 {"Samsung unknow¿4Mb", 
NAND_MFR_SAMSUNG
, 0x6b, 22, 0, 2, 0x2000},

43 {"Samsung KM29U128T", 
NAND_MFR_SAMSUNG
, 0x73, 24, 0, 2, 0x4000},

44 {"Samsung KM29U256T", 
NAND_MFR_SAMSUNG
, 0x75, 25, 0, 2, 0x4000},

45 {"Samsung unknow¿64Mb", 
NAND_MFR_SAMSUNG
, 0x76, 26, 0, 3, 0x4000},

46 {"Samsung KM29W32000", 
NAND_MFR_SAMSUNG
, 0xe3, 22, 0, 2, 0x2000},

47 {"Samsung unknow¿4Mb", 
NAND_MFR_SAMSUNG
, 0xe5, 22, 0, 2, 0x2000},

48 {"Samsung KM29U64000", 
NAND_MFR_SAMSUNG
, 0xe6, 23, 0, 2, 0x2000},

49 {"Samsung KM29W16000", 
NAND_MFR_SAMSUNG
, 0xea, 21, 1, 2, 0x1000},

50 {
NULL
,}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/mtd/nftl.h

7 #i‚de‡
__MTD_NFTL_H__


8 
	#__MTD_NFTL_H__


	)

12 
	sn·l_bci
 {

13 
	mECCSig
[6];

14 
__u8
 
	mSètus
;

15 
__u8
 
	mSètus1
;

16 }
__©åibuã__
((
∑cked
));

20 
	sn·l_uci0
 {

21 
__u16
 
	mVútUnôNum
;

22 
__u16
 
	mRïlUnôNum
;

23 
__u16
 
	mS∑ªVútUnôNum
;

24 
__u16
 
	mS∑ªRïlUnôNum
;

25 } 
__©åibuã__
((
∑cked
));

27 
	sn·l_uci1
 {

28 
__u32
 
	mWórInfo
;

29 
__u16
 
	mEø£M¨k
;

30 
__u16
 
	mEø£M¨k1
;

31 } 
__©åibuã__
((
∑cked
));

33 
	sn·l_uci2
 {

34 
__u16
 
	mFﬁdM¨k
;

35 
__u16
 
	mFﬁdM¨k1
;

36 
__u32
 
	munu£d
;

37 } 
__©åibuã__
((
∑cked
));

39 
	un·l_uci
 {

40 
n·l_uci0
 
	ma
;

41 
n·l_uci1
 
	mb
;

42 
n·l_uci2
 
	mc
;

45 
	sn·l_oob
 {

46 
n·l_bci
 
	mb
;

47 
n·l_uci
 
	mu
;

52 
	sNFTLMedüHódî
 {

53 
	mD©aOrgID
[6];

54 
__u16
 
	mNumEø£Unôs
;

55 
__u16
 
	mFú°PhysiˇlEUN
;

56 
__u32
 
	mF‹m©ãdSize
;

57 
	mUnôSizeFa˘‹
;

58 } 
__©åibuã__
((
∑cked
));

60 
	#MAX_ERASE_ZONES
 (8192 - 512)

	)

62 
	#ERASE_MARK
 0x3c69

	)

63 
	#SECTOR_FREE
 0xff

	)

64 
	#SECTOR_USED
 0x55

	)

65 
	#SECTOR_IGNORE
 0x11

	)

66 
	#SECTOR_DELETED
 0x00

	)

68 
	#FOLD_MARK_IN_PROGRESS
 0x5555

	)

70 
	#ZONE_GOOD
 0xff

	)

71 
	#ZONE_BAD_ORIGINAL
 0

	)

72 
	#ZONE_BAD_MARKED
 7

	)

75 
	#BLOCK_NIL
 0xfff‡

	)

76 
	#BLOCK_FREE
 0xff„

	)

77 
	#BLOCK_NOTEXPLORED
 0xfffd

	)

78 
	#BLOCK_RESERVED
 0xfff¯

	)

80 
	sNFTLªc‹d
 {

81 
DiskOnChù
 *
	mmtd
;

82 
__u16
 
	mMedüUnô
, 
	mS∑ªMedüUnô
;

83 
__u32
 
	mEø£Size
;

84 
NFTLMedüHódî
 
	mMedüHdr
;

85 
	mu£cou¡
;

86 
	mhóds
;

87 
	m£˘‹s
;

88 
	mcylödîs
;

89 
__u16
 
	mnumvunôs
;

90 
__u16
 
	mœ°EUN
;

91 
__u16
 
	mnum‰ìEUNs
;

92 
__u16
 
	mLa°FªeEUN
;

93 
__u32
 
	mƒ_£˘s
;

94 
	mhód
,
	m£˘
,
	mcyl
;

95 
__u16
 *
	mEUNèbÀ
;

96 
__u16
 *
	mRïlUnôTabÀ
;

97 
	mnb_blocks
;

98 
	mnb_boŸ_blocks
;

101 
	#MAX_NFTLS
 16

	)

102 
	#MAX_SECTORS_PER_UNIT
 32

	)

103 
	#NFTL_PARTN_BITS
 4

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

46 
	~<asm/posix_ty≥s.h
>

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/stat.h

1 #i‚de‡
_LINUX_STAT_H


2 
	#_LINUX_STAT_H


	)

4 
	~<löux/ty≥s.h
>

6 #ifde‡
__˝lu•lus


10 
	#S_IFMT
 00170000

	)

11 
	#S_IFSOCK
 0140000

	)

12 
	#S_IFLNK
 0120000

	)

13 
	#S_IFREG
 0100000

	)

14 
	#S_IFBLK
 0060000

	)

15 
	#S_IFDIR
 0040000

	)

16 
	#S_IFCHR
 0020000

	)

17 
	#S_IFIFO
 0010000

	)

18 
	#S_ISUID
 0004000

	)

19 
	#S_ISGID
 0002000

	)

20 
	#S_ISVTX
 0001000

	)

22 
	#S_ISLNK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFLNK
)

	)

23 
	#S_ISREG
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFREG
)

	)

24 
	#S_ISDIR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFDIR
)

	)

25 
	#S_ISCHR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFCHR
)

	)

26 
	#S_ISBLK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFBLK
)

	)

27 
	#S_ISFIFO
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFIFO
)

	)

28 
	#S_ISSOCK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFSOCK
)

	)

30 
	#S_IRWXU
 00700

	)

31 
	#S_IRUSR
 00400

	)

32 
	#S_IWUSR
 00200

	)

33 
	#S_IXUSR
 00100

	)

35 
	#S_IRWXG
 00070

	)

36 
	#S_IRGRP
 00040

	)

37 
	#S_IWGRP
 00020

	)

38 
	#S_IXGRP
 00010

	)

40 
	#S_IRWXO
 00007

	)

41 
	#S_IROTH
 00004

	)

42 
	#S_IWOTH
 00002

	)

43 
	#S_IXOTH
 00001

	)

45 #ifdef 
__PPC__


47 
	s°©
 {

48 
dev_t
 
°_dev
;

49 
öo_t
 
°_öo
;

50 
mode_t
 
°_mode
;

51 
∆ök_t
 
°_∆ök
;

52 
uid_t
 
°_uid
;

53 
gid_t
 
°_gid
;

54 
dev_t
 
°_rdev
;

55 
off_t
 
°_size
;

56 
°_blksize
;

57 
°_blocks
;

58 
°_©ime
;

59 
__unu£d1
;

60 
°_mtime
;

61 
__unu£d2
;

62 
°_˘ime
;

63 
__unu£d3
;

64 
__unu£d4
;

65 
__unu£d5
;

70 #i‡
deföed
 (
__ARM__
Ë|| deföed (
__I386__
)

72 
	s°©
 {

73 
°_dev
;

74 
__∑d1
;

75 
°_öo
;

76 
°_mode
;

77 
°_∆ök
;

78 
°_uid
;

79 
°_gid
;

80 
°_rdev
;

81 
__∑d2
;

82 
°_size
;

83 
°_blksize
;

84 
°_blocks
;

85 
°_©ime
;

86 
__unu£d1
;

87 
°_mtime
;

88 
__unu£d2
;

89 
°_˘ime
;

90 
__unu£d3
;

91 
__unu£d4
;

92 
__unu£d5
;

97 #i‡
deföed
 (
__MIPS__
)

99 
	s°©
 {

100 
dev_t
 
°_dev
;

101 
°_∑d1
[3];

102 
öo_t
 
°_öo
;

103 
mode_t
 
°_mode
;

104 
∆ök_t
 
°_∆ök
;

105 
uid_t
 
°_uid
;

106 
gid_t
 
°_gid
;

107 
dev_t
 
°_rdev
;

108 
°_∑d2
[2];

109 
off_t
 
°_size
;

110 
°_∑d3
;

115 
time_t
 
°_©ime
;

116 
ª£rved0
;

117 
time_t
 
°_mtime
;

118 
ª£rved1
;

119 
time_t
 
°_˘ime
;

120 
ª£rved2
;

121 
°_blksize
;

122 
°_blocks
;

123 
°_∑d4
[14];

128 #ifde‡
__˝lu•lus


	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

4 #unde‡
NULL


5 #i‡
deföed
(
__˝lu•lus
)

6 
	#NULL
 0

	)

8 
	#NULL
 ((*)0)

	)

11 #i‚de‡
_SIZE_T


12 
	~<löux/ty≥s.h
>

15 #unde‡
off£tof


16 
	#off£tof
(
TYPE
, 
MEMBER
Ë((
size_t
Ë&((TYPE *)0)->MEMBER)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/string.h

1 #i‚de‡
_LINUX_STRING_H_


2 
	#_LINUX_STRING_H_


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/°ddef.h
>

7 #ifde‡
__˝lu•lus


11 * 
___°πok
;

12 * 
°Ωbrk
(const *,const *);

13 * 
°πok
(*,const *);

14 * 
°r£p
(**,const *);

15 
__kî√l_size_t
 
°r•n
(const *,const *);

21 #i‚de‡
CONFIG_MIPS16


22 
	~<asm/°rög.h
>

24 #i‚de‡
__HAVE_ARCH_STRCPY


25 * 
°r˝y
(*,const *);

27 #i‚de‡
__HAVE_ARCH_STRNCPY


28 * 
°∫˝y
(*,c⁄° *, 
__kî√l_size_t
);

30 #i‚de‡
__HAVE_ARCH_STRCAT


31 * 
°rˇt
(*, const *);

33 #i‚de‡
__HAVE_ARCH_STRNCAT


34 * 
°∫ˇt
(*, c⁄° *, 
__kî√l_size_t
);

36 #i‚de‡
__HAVE_ARCH_STRCMP


37 
°rcmp
(const *,const *);

39 #i‚de‡
__HAVE_ARCH_STRNCMP


40 
°∫cmp
(c⁄° *,c⁄° *,
__kî√l_size_t
);

42 #i‚de‡
__HAVE_ARCH_STRNICMP


43 
°∫icmp
(c⁄° *, c⁄° *, 
__kî√l_size_t
);

45 #i‚de‡
__HAVE_ARCH_STRCHR


46 * 
°rchr
(const *,);

48 #i‚de‡
__HAVE_ARCH_STRRCHR


49 * 
°ºchr
(const *,);

51 #i‚de‡
__HAVE_ARCH_STRSTR


52 * 
°r°r
(const *,const *);

54 #i‚de‡
__HAVE_ARCH_STRLEN


55 
__kî√l_size_t
 
°æí
(const *);

57 #i‚de‡
__HAVE_ARCH_STRNLEN


58 
__kî√l_size_t
 
°∫Àn
(const *,__kernel_size_t);

60 #i‚de‡
__HAVE_ARCH_STRDUP


61 * 
°rdup
(const *);

63 #i‚de‡
__HAVE_ARCH_STRSWAB


64 * 
°rswab
(const *);

67 #i‚de‡
__HAVE_ARCH_MEMSET


68 * 
mem£t
(*,,
__kî√l_size_t
);

70 #i‚de‡
__HAVE_ARCH_MEMCPY


71 * 
mem˝y
(*,c⁄° *,
__kî√l_size_t
);

73 #i‚de‡
__HAVE_ARCH_MEMMOVE


74 * 
memmove
(*,c⁄° *,
__kî√l_size_t
);

76 #i‚de‡
__HAVE_ARCH_MEMSCAN


77 * 
memsˇn
(*,,
__kî√l_size_t
);

79 #i‚de‡
__HAVE_ARCH_MEMCMP


80 
memcmp
(c⁄° *,c⁄° *,
__kî√l_size_t
);

82 #i‚de‡
__HAVE_ARCH_MEMCHR


83 * 
memchr
(c⁄° *,,
__kî√l_size_t
);

86 #ifde‡
__˝lu•lus


	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/time.h

1 #i‚de‡
_LINUX_TIME_H


2 
	#_LINUX_TIME_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#_DEFUN
(
a
,
b
,
c
Ë
	`a
(c)

	)

7 
	#_CONST
 c⁄°

	)

8 
	#_AND
 ,

	)

10 
	#_REENT_ONLY


	)

12 
	#SECSPERMIN
 60L

	)

13 
	#MINSPERHOUR
 60L

	)

14 
	#HOURSPERDAY
 24L

	)

15 
	#SECSPERHOUR
 (
SECSPERMIN
 * 
MINSPERHOUR
)

	)

16 
	#SECSPERDAY
 (
SECSPERHOUR
 * 
HOURSPERDAY
)

	)

17 
	#DAYSPERWEEK
 7

	)

18 
	#MONSPERYEAR
 12

	)

20 
	#YEAR_BASE
 1900

	)

21 
	#EPOCH_YEAR
 1970

	)

22 
	#EPOCH_WDAY
 4

	)

24 
	#i¶óp
(
y
Ë((((yË% 4Ë=0 && ((yË% 100Ë!0Ë|| ((yË% 400Ë=0)

	)

28 
	stm
 {

29 
	mtm_£c
;

30 
	mtm_mö
;

31 
	mtm_hour
;

32 
	mtm_mday
;

33 
	mtm_m⁄
;

34 
	mtm_yór
;

35 
	mtm_wday
;

36 
	mtm_yday
;

37 
	mtm_isd°
;

39 #ifde‡
__USE_BSD


40 
	mtm_gmtoff
;

41 
__c⁄°
 *
	mtm_z⁄e
;

43 
	m__tm_gmtoff
;

44 
__c⁄°
 *
	m__tm_z⁄e
;

48 
ölöe
 *

49 
_DEFUN
 (
as˘ime_r
, (
tim_p
, 
ªsu…
),

50 
_CONST
 
tm
 *
tim_p
 
_AND


51 *
ªsu…
)

53 
_CONST
 
	gday_«me
[7][3] = {

56 
_CONST
 
	gm⁄_«me
[12][3] = {

61 
•rötf
 (
ªsu…
, "%.3s %.3s %.2d %.2d:%.2d:%.2d %d\n",

62 
day_«me
[
tim_p
->
tm_wday
],

63 
m⁄_«me
[
tim_p
->
tm_m⁄
],

64 
tim_p
->
tm_mday
,Åim_p->
tm_hour
,Åim_p->
tm_mö
,

65 
tim_p
->
tm_£c
, 1900 +Åim_p->
tm_yór
);

66  
	gªsu…
;

69 
ölöe
 
tm
 *

70 
_DEFUN
 (
loˇ…ime_r
, (
tim_p
, 
ªs
),

71 
_CONST
 
time_t
 * 
tim_p
 
_AND


72 
tm
 *
ªs
)

74 
_CONST
 
	gm⁄_Àngths
[2][
MONSPERYEAR
] = {

79 
_CONST
 
	gyór_Àngths
[2] = {

84 
	gdays
, 
	gªm
;

85 
	gy
;

86 
	gyÀ≠
;

87 
_CONST
 *
	gù
;

89 
	gdays
 = ((Ë*
tim_p
Ë/ 
SECSPERDAY
;

90 
	gªm
 = ((Ë*
tim_p
Ë% 
SECSPERDAY
;

91 
	gªm
 < 0)

93 
	gªm
 +
SECSPERDAY
;

94 --
	gdays
;

96 
	gªm
 >
SECSPERDAY
)

98 
ªm
 -
SECSPERDAY
;

99 ++
	gdays
;

103 
	gªs
->
	gtm_hour
 = (Ë(
ªm
 / 
SECSPERHOUR
);

104 
	gªm
 %
SECSPERHOUR
;

105 
	gªs
->
	gtm_mö
 = (Ë(
ªm
 / 
SECSPERMIN
);

106 
	gªs
->
	gtm_£c
 = (Ë(
ªm
 % 
SECSPERMIN
);

109 i‡((
	gªs
->
	gtm_wday
 = ((
EPOCH_WDAY
 + 
days
Ë% 
DAYSPERWEEK
)) < 0)

110 
ªs
->
tm_wday
 +
DAYSPERWEEK
;

113 
	gy
 = 
EPOCH_YEAR
;

114 i‡(
	gdays
 >= 0)

118 
	gyÀ≠
 = 
i¶óp
(
y
);

119 i‡(
	gdays
 < 
	gyór_Àngths
[
yÀ≠
])

121 
	gy
++;

122 
	gdays
 -
yór_Àngths
[
yÀ≠
];

129 --
	gy
;

130 
	gyÀ≠
 = 
i¶óp
(
y
);

131 
	gdays
 +
yór_Àngths
[
yÀ≠
];

132 } 
	gdays
 < 0);

135 
	gªs
->
	gtm_yór
 = 
y
 - 
YEAR_BASE
;

136 
	gªs
->
	gtm_yday
 = 
days
;

137 
	gù
 = 
m⁄_Àngths
[
yÀ≠
];

138 
	gªs
->
	gtm_m⁄
 = 0; 
	gdays
 >
ù
[
ªs
->
tm_m⁄
]; ++res->tm_mon)

139 
	gdays
 -
ù
[
ªs
->
tm_m⁄
];

140 
	gªs
->
	gtm_mday
 = 
days
 + 1;

143 
	gªs
->
	gtm_isd°
 = -1;

145  (
	gªs
);

148 
ölöe
 *

149 
_DEFUN
 (
˘ime_r
, (
tim_p
, 
ªsu…
),

150 
_CONST
 
time_t
 * 
tim_p
 
_AND


151 * 
ªsu…
)

154 
tm
 
	gtm
;

155  
as˘ime_r
 (
loˇ…ime_r
 (
tim_p
, &
tm
), 
ªsu…
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 #ifdef 
__KERNEL__


5 
	~<löux/c⁄fig.h
>

8 
	~<löux/posix_ty≥s.h
>

9 
	~<asm/ty≥s.h
>

11 #i‚de‡
__KERNEL_STRICT_NAMES


13 
__kî√l_fd_£t
 
	tfd_£t
;

14 
__kî√l_dev_t
 
	tdev_t
;

15 
__kî√l_öo_t
 
	töo_t
;

16 
__kî√l_mode_t
 
	tmode_t
;

17 
__kî√l_∆ök_t
 
	t∆ök_t
;

18 
__kî√l_off_t
 
	toff_t
;

19 
__kî√l_pid_t
 
	tpid_t
;

20 
__kî√l_daddr_t
 
	tdaddr_t
;

21 
__kî√l_key_t
 
	tkey_t
;

22 
__kî√l_su£c⁄ds_t
 
	tsu£c⁄ds_t
;

24 #ifde‡
__KERNEL__


25 
__kî√l_uid32_t
 
	tuid_t
;

26 
__kî√l_gid32_t
 
	tgid_t
;

27 
__kî√l_uid16_t
 
	tuid16_t
;

28 
__kî√l_gid16_t
 
	tgid16_t
;

30 #ifde‡
CONFIG_UID16


32 
__kî√l_ﬁd_uid_t
 
	tﬁd_uid_t
;

33 
__kî√l_ﬁd_gid_t
 
	tﬁd_gid_t
;

40 
__kî√l_uid_t
 
	tuid_t
;

41 
__kî√l_gid_t
 
	tgid_t
;

44 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

45 
__kî√l_loff_t
 
	tloff_t
;

52 #i‚de‡
_SIZE_T


53 
	#_SIZE_T


	)

54 
__kî√l_size_t
 
	tsize_t
;

57 #i‚de‡
_SSIZE_T


58 
	#_SSIZE_T


	)

59 
__kî√l_ssize_t
 
	tssize_t
;

62 #i‚de‡
_PTRDIFF_T


63 
	#_PTRDIFF_T


	)

64 
__kî√l_±rdiff_t
 
	t±rdiff_t
;

67 #i‚de‡
_TIME_T


68 
	#_TIME_T


	)

69 
__kî√l_time_t
 
	ttime_t
;

72 #i‚de‡
_CLOCK_T


73 
	#_CLOCK_T


	)

74 
__kî√l_˛ock_t
 
	t˛ock_t
;

77 #i‚de‡
_CADDR_T


78 
	#_CADDR_T


	)

79 
__kî√l_ˇddr_t
 
	tˇddr_t
;

82 
	#åue
 (1)

	)

83 
	#Ál£
 (0)

	)

86 
	tu_ch¨
;

87 
	tu_sh‹t
;

88 
	tu_öt
;

89 
	tu_l⁄g
;

90 #ifde‡
MTK_MSDC


91 
	tboﬁ
;

95 
	tunch¨
;

96 
	tush‹t
;

97 
	tuöt
;

98 
	tul⁄g
;

100 #ifde‡
MTK_MSDC


101 
	tuöt8
;

102 
	tuöt16
;

103 
	tuöt32
;

104 sig√d 
	töt8
;

105 sig√d 
	töt16
;

106 sig√d 
	töt32
;

108 #i‚de‡
__BIT_TYPES_DEFINED__


109 
	#__BIT_TYPES_DEFINED__


	)

111 
__u8
 
	tu_öt8_t
;

112 
__s8
 
	töt8_t
;

113 
__u16
 
	tu_öt16_t
;

114 
__s16
 
	töt16_t
;

115 
__u32
 
	tu_öt32_t
;

116 
__s32
 
	töt32_t
;

120 
__u8
 
	tuöt8_t
;

121 
__u16
 
	tuöt16_t
;

122 
__u32
 
	tuöt32_t
;

124 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

125 
__u64
 
	tuöt64_t
;

126 
__u64
 
	tu_öt64_t
;

127 
__s64
 
	töt64_t
;

136 #ifde‡
__CHECKER__


137 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

139 
	#__bôwi£__


	)

141 #ifde‡
__CHECK_ENDIAN__


142 
	#__bôwi£
 
__bôwi£__


	)

144 
	#__bôwi£


	)

147 
__u16
 
	t__bôwi£
 
	t__À16
;

148 
__u16
 
	t__bôwi£
 
	t__be16
;

149 
__u32
 
	t__bôwi£
 
	t__À32
;

150 
__u32
 
	t__bôwi£
 
	t__be32
;

151 #i‡
deföed
(
__GNUC__
)

152 
__u64
 
	t__bôwi£
 
	t__À64
;

153 
__u64
 
	t__bôwi£
 
	t__be64
;

155 
__u16
 
	t__bôwi£
 
	t__sum16
;

156 
__u32
 
	t__bôwi£
 
	t__wsum
;

159 
	su°©
 {

160 
__kî√l_daddr_t
 
	mf_t‰ì
;

161 
__kî√l_öo_t
 
	mf_töode
;

162 
	mf_‚ame
[6];

163 
	mf_Âack
[6];

166 
	tuöçå_t
;

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/unaligned/access_ok.h

1 #i‚de‡
_LINUX_UNALIGNED_ACCESS_OK_H


2 
	#_LINUX_UNALIGNED_ACCESS_OK_H


	)

4 
	~<asm/byã‹dî.h
>

6 
ölöe
 
u16
 
	$gë_u«lig√d_À16
(c⁄° *
p
)

8  
	`À16_to_˝up
((
__À16
 *)
p
);

9 
	}
}

11 
ölöe
 
u32
 
	$gë_u«lig√d_À32
(c⁄° *
p
)

13  
	`À32_to_˝up
((
__À32
 *)
p
);

14 
	}
}

16 
ölöe
 
u64
 
	$gë_u«lig√d_À64
(c⁄° *
p
)

18  
	`À64_to_˝up
((
__À64
 *)
p
);

19 
	}
}

21 
ölöe
 
u16
 
	$gë_u«lig√d_be16
(c⁄° *
p
)

23  
	`be16_to_˝up
((
__be16
 *)
p
);

24 
	}
}

26 
ölöe
 
u32
 
	$gë_u«lig√d_be32
(c⁄° *
p
)

28  
	`be32_to_˝up
((
__be32
 *)
p
);

29 
	}
}

31 
ölöe
 
u64
 
	$gë_u«lig√d_be64
(c⁄° *
p
)

33  
	`be64_to_˝up
((
__be64
 *)
p
);

34 
	}
}

36 
ölöe
 
	$put_u«lig√d_À16
(
u16
 
vÆ
, *
p
)

38 *((
__À16
 *)
p
Ë
	`˝u_to_À16
(
vÆ
);

39 
	}
}

41 
ölöe
 
	$put_u«lig√d_À32
(
u32
 
vÆ
, *
p
)

43 *((
__À32
 *)
p
Ë
	`˝u_to_À32
(
vÆ
);

44 
	}
}

46 
ölöe
 
	$put_u«lig√d_À64
(
u64
 
vÆ
, *
p
)

48 *((
__À64
 *)
p
Ë
	`˝u_to_À64
(
vÆ
);

49 
	}
}

51 
ölöe
 
	$put_u«lig√d_be16
(
u16
 
vÆ
, *
p
)

53 *((
__be16
 *)
p
Ë
	`˝u_to_be16
(
vÆ
);

54 
	}
}

56 
ölöe
 
	$put_u«lig√d_be32
(
u32
 
vÆ
, *
p
)

58 *((
__be32
 *)
p
Ë
	`˝u_to_be32
(
vÆ
);

59 
	}
}

61 
ölöe
 
	$put_u«lig√d_be64
(
u64
 
vÆ
, *
p
)

63 *((
__be64
 *)
p
Ë
	`˝u_to_be64
(
vÆ
);

64 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/unaligned/be_byteshift.h

1 #i‚de‡
_LINUX_UNALIGNED_BE_BYTESHIFT_H


2 
	#_LINUX_UNALIGNED_BE_BYTESHIFT_H


	)

4 
	~<löux/ty≥s.h
>

6 
ölöe
 
u16
 
	$__gë_u«lig√d_be16
(c⁄° 
u8
 *
p
)

8  
p
[0] << 8 |Ö[1];

9 
	}
}

11 
ölöe
 
u32
 
	$__gë_u«lig√d_be32
(c⁄° 
u8
 *
p
)

13  
p
[0] << 24 |Ö[1] << 16 |Ö[2] << 8 |Ö[3];

14 
	}
}

16 
ölöe
 
u64
 
	$__gë_u«lig√d_be64
(c⁄° 
u8
 *
p
)

18  (
u64
)
	`__gë_u«lig√d_be32
(
p
) << 32 |

19 
	`__gë_u«lig√d_be32
(
p
 + 4);

20 
	}
}

22 
ölöe
 
	$__put_u«lig√d_be16
(
u16
 
vÆ
, 
u8
 *
p
)

24 *
p
++ = 
vÆ
 >> 8;

25 *
p
++ = 
vÆ
;

26 
	}
}

28 
ölöe
 
	$__put_u«lig√d_be32
(
u32
 
vÆ
, 
u8
 *
p
)

30 
	`__put_u«lig√d_be16
(
vÆ
 >> 16, 
p
);

31 
	`__put_u«lig√d_be16
(
vÆ
, 
p
 + 2);

32 
	}
}

34 
ölöe
 
	$__put_u«lig√d_be64
(
u64
 
vÆ
, 
u8
 *
p
)

36 
	`__put_u«lig√d_be32
(
vÆ
 >> 32, 
p
);

37 
	`__put_u«lig√d_be32
(
vÆ
, 
p
 + 4);

38 
	}
}

40 
ölöe
 
u16
 
	$gë_u«lig√d_be16
(c⁄° *
p
)

42  
	`__gë_u«lig√d_be16
((c⁄° 
u8
 *)
p
);

43 
	}
}

45 
ölöe
 
u32
 
	$gë_u«lig√d_be32
(c⁄° *
p
)

47  
	`__gë_u«lig√d_be32
((c⁄° 
u8
 *)
p
);

48 
	}
}

50 
ölöe
 
u64
 
	$gë_u«lig√d_be64
(c⁄° *
p
)

52  
	`__gë_u«lig√d_be64
((c⁄° 
u8
 *)
p
);

53 
	}
}

55 
ölöe
 
	$put_u«lig√d_be16
(
u16
 
vÆ
, *
p
)

57 
	`__put_u«lig√d_be16
(
vÆ
, 
p
);

58 
	}
}

60 
ölöe
 
	$put_u«lig√d_be32
(
u32
 
vÆ
, *
p
)

62 
	`__put_u«lig√d_be32
(
vÆ
, 
p
);

63 
	}
}

65 
ölöe
 
	$put_u«lig√d_be64
(
u64
 
vÆ
, *
p
)

67 
	`__put_u«lig√d_be64
(
vÆ
, 
p
);

68 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/unaligned/generic.h

1 #i‚de‡
_LINUX_UNALIGNED_GENERIC_H


2 
	#_LINUX_UNALIGNED_GENERIC_H


	)

5 
	#__f‹˚


	)

11 
__bad_u«lig√d_ac˚ss_size
();

13 
	#__gë_u«lig√d_À
(
±r
Ë((
__f‹˚
 
	`ty≥of
(*(ptr)))({ \

14 
	`__buûtö_choo£_ex¥
((*(
±r
)) == 1, *(ptr), \

15 
	`__buûtö_choo£_ex¥
((*(
±r
)Ë=2, 
	`gë_u«lig√d_À16
((ptr)), \

16 
	`__buûtö_choo£_ex¥
((*(
±r
)Ë=4, 
	`gë_u«lig√d_À32
((ptr)), \

17 
	`__buûtö_choo£_ex¥
((*(
±r
)Ë=8, 
	`gë_u«lig√d_À64
((ptr)), \

18 
	`__bad_u«lig√d_ac˚ss_size
())))); \

19 }))

	)

21 
	#__gë_u«lig√d_be
(
±r
Ë((
__f‹˚
 
	`ty≥of
(*(ptr)))({ \

22 
	`__buûtö_choo£_ex¥
((*(
±r
)) == 1, *(ptr), \

23 
	`__buûtö_choo£_ex¥
((*(
±r
)Ë=2, 
	`gë_u«lig√d_be16
((ptr)), \

24 
	`__buûtö_choo£_ex¥
((*(
±r
)Ë=4, 
	`gë_u«lig√d_be32
((ptr)), \

25 
	`__buûtö_choo£_ex¥
((*(
±r
)Ë=8, 
	`gë_u«lig√d_be64
((ptr)), \

26 
	`__bad_u«lig√d_ac˚ss_size
())))); \

27 }))

	)

29 
	#__put_u«lig√d_À
(
vÆ
, 
±r
) ({ \

30 *
__gu_p
 = (
±r
); \

31 (*(
±r
))) { \

33 *(
u8
 *)
__gu_p
 = (
__f‹˚
 u8)(
vÆ
); \

36 
	`put_u«lig√d_À16
((
__f‹˚
 
u16
)(
vÆ
), 
__gu_p
); \

39 
	`put_u«lig√d_À32
((
__f‹˚
 
u32
)(
vÆ
), 
__gu_p
); \

42 
	`put_u«lig√d_À64
((
__f‹˚
 
u64
)(
vÆ
), 
__gu_p
); \

45 
	`__bad_u«lig√d_ac˚ss_size
(); \

48 ()0; })

	)

50 
	#__put_u«lig√d_be
(
vÆ
, 
±r
) ({ \

51 *
__gu_p
 = (
±r
); \

52 (*(
±r
))) { \

54 *(
u8
 *)
__gu_p
 = (
__f‹˚
 u8)(
vÆ
); \

57 
	`put_u«lig√d_be16
((
__f‹˚
 
u16
)(
vÆ
), 
__gu_p
); \

60 
	`put_u«lig√d_be32
((
__f‹˚
 
u32
)(
vÆ
), 
__gu_p
); \

63 
	`put_u«lig√d_be64
((
__f‹˚
 
u64
)(
vÆ
), 
__gu_p
); \

66 
	`__bad_u«lig√d_ac˚ss_size
(); \

69 ()0; })

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/unaligned/le_byteshift.h

1 #i‚de‡
_LINUX_UNALIGNED_LE_BYTESHIFT_H


2 
	#_LINUX_UNALIGNED_LE_BYTESHIFT_H


	)

4 
	~<löux/ty≥s.h
>

6 
ölöe
 
u16
 
	$__gë_u«lig√d_À16
(c⁄° 
u8
 *
p
)

8  
p
[0] |Ö[1] << 8;

9 
	}
}

11 
ölöe
 
u32
 
	$__gë_u«lig√d_À32
(c⁄° 
u8
 *
p
)

13  
p
[0] |Ö[1] << 8 |Ö[2] << 16 |Ö[3] << 24;

14 
	}
}

16 
ölöe
 
u64
 
	$__gë_u«lig√d_À64
(c⁄° 
u8
 *
p
)

18  (
u64
)
	`__gë_u«lig√d_À32
(
p
 + 4) << 32 |

19 
	`__gë_u«lig√d_À32
(
p
);

20 
	}
}

22 
ölöe
 
	$__put_u«lig√d_À16
(
u16
 
vÆ
, 
u8
 *
p
)

24 *
p
++ = 
vÆ
;

25 *
p
++ = 
vÆ
 >> 8;

26 
	}
}

28 
ölöe
 
	$__put_u«lig√d_À32
(
u32
 
vÆ
, 
u8
 *
p
)

30 
	`__put_u«lig√d_À16
(
vÆ
 >> 16, 
p
 + 2);

31 
	`__put_u«lig√d_À16
(
vÆ
, 
p
);

32 
	}
}

34 
ölöe
 
	$__put_u«lig√d_À64
(
u64
 
vÆ
, 
u8
 *
p
)

36 
	`__put_u«lig√d_À32
(
vÆ
 >> 32, 
p
 + 4);

37 
	`__put_u«lig√d_À32
(
vÆ
, 
p
);

38 
	}
}

40 
ölöe
 
u16
 
	$gë_u«lig√d_À16
(c⁄° *
p
)

42  
	`__gë_u«lig√d_À16
((c⁄° 
u8
 *)
p
);

43 
	}
}

45 
ölöe
 
u32
 
	$gë_u«lig√d_À32
(c⁄° *
p
)

47  
	`__gë_u«lig√d_À32
((c⁄° 
u8
 *)
p
);

48 
	}
}

50 
ölöe
 
u64
 
	$gë_u«lig√d_À64
(c⁄° *
p
)

52  
	`__gë_u«lig√d_À64
((c⁄° 
u8
 *)
p
);

53 
	}
}

55 
ölöe
 
	$put_u«lig√d_À16
(
u16
 
vÆ
, *
p
)

57 
	`__put_u«lig√d_À16
(
vÆ
, 
p
);

58 
	}
}

60 
ölöe
 
	$put_u«lig√d_À32
(
u32
 
vÆ
, *
p
)

62 
	`__put_u«lig√d_À32
(
vÆ
, 
p
);

63 
	}
}

65 
ölöe
 
	$put_u«lig√d_À64
(
u64
 
vÆ
, *
p
)

67 
	`__put_u«lig√d_À64
(
vÆ
, 
p
);

68 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/usb/atmel_usba_udc.h

7 #i‚de‡
__LINUX_USB_USBA_H__


8 
	#__LINUX_USB_USBA_H__


	)

10 
	susba_ï_d©a
 {

11 *
	m«me
;

12 
	mödex
;

13 
	mfifo_size
;

14 
	mƒ_b™ks
;

15 
	mˇn_dma
;

16 
	mˇn_isoc
;

19 
	susba_∂©f‹m_d©a
 {

20 
	mnum_ï
;

21 
usba_ï_d©a
 *
	mï
;

24 
usba_udc_¥obe
(
usba_∂©f‹m_d©a
 *
pd©a
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/usb/cdc.h

12 
	#USB_CDC_SUBCLASS_ACM
 0x02

	)

13 
	#USB_CDC_SUBCLASS_ETHERNET
 0x06

	)

14 
	#USB_CDC_SUBCLASS_WHCM
 0x08

	)

15 
	#USB_CDC_SUBCLASS_DMM
 0x09

	)

16 
	#USB_CDC_SUBCLASS_MDLM
 0x0a

	)

17 
	#USB_CDC_SUBCLASS_OBEX
 0x0b

	)

19 
	#USB_CDC_PROTO_NONE
 0

	)

21 
	#USB_CDC_ACM_PROTO_AT_V25TER
 1

	)

22 
	#USB_CDC_ACM_PROTO_AT_PCCA101
 2

	)

23 
	#USB_CDC_ACM_PROTO_AT_PCCA101_WAKE
 3

	)

24 
	#USB_CDC_ACM_PROTO_AT_GSM
 4

	)

25 
	#USB_CDC_ACM_PROTO_AT_3G
 5

	)

26 
	#USB_CDC_ACM_PROTO_AT_CDMA
 6

	)

27 
	#USB_CDC_ACM_PROTO_VENDOR
 0xff

	)

35 
	#USB_CDC_HEADER_TYPE
 0x00

	)

36 
	#USB_CDC_CALL_MANAGEMENT_TYPE
 0x01

	)

37 
	#USB_CDC_ACM_TYPE
 0x02

	)

38 
	#USB_CDC_UNION_TYPE
 0x06

	)

39 
	#USB_CDC_COUNTRY_TYPE
 0x07

	)

40 
	#USB_CDC_NETWORK_TERMINAL_TYPE
 0x0®

	)

41 
	#USB_CDC_ETHERNET_TYPE
 0x0‡

	)

42 
	#USB_CDC_WHCM_TYPE
 0x11

	)

43 
	#USB_CDC_MDLM_TYPE
 0x12

	)

44 
	#USB_CDC_MDLM_DETAIL_TYPE
 0x13

	)

45 
	#USB_CDC_DMM_TYPE
 0x14

	)

46 
	#USB_CDC_OBEX_TYPE
 0x15

	)

49 
	susb_cdc_hódî_desc
 {

50 
__u8
 
	mbLígth
;

51 
__u8
 
	mbDes¸ùt‹Ty≥
;

52 
__u8
 
	mbDes¸ùt‹SubTy≥
;

54 
__À16
 
	mbcdCDC
;

55 } 
__©åibuã__
 ((
∑cked
));

58 
	susb_cdc_ˇŒ_mgmt_des¸ùt‹
 {

59 
__u8
 
	mbLígth
;

60 
__u8
 
	mbDes¸ùt‹Ty≥
;

61 
__u8
 
	mbDes¸ùt‹SubTy≥
;

63 
__u8
 
	mbmC≠abûôõs
;

64 
	#USB_CDC_CALL_MGMT_CAP_CALL_MGMT
 0x01

	)

65 
	#USB_CDC_CALL_MGMT_CAP_DATA_INTF
 0x02

	)

67 
__u8
 
	mbD©aI¡îÁ˚
;

68 } 
__©åibuã__
 ((
∑cked
));

71 
	susb_cdc_acm_des¸ùt‹
 {

72 
__u8
 
	mbLígth
;

73 
__u8
 
	mbDes¸ùt‹Ty≥
;

74 
__u8
 
	mbDes¸ùt‹SubTy≥
;

76 
__u8
 
	mbmC≠abûôõs
;

77 } 
__©åibuã__
 ((
∑cked
));

81 
	#USB_CDC_COMM_FEATURE
 0x01

	)

82 
	#USB_CDC_CAP_LINE
 0x02

	)

83 
	#USB_CDC_CAP_BRK
 0x04

	)

84 
	#USB_CDC_CAP_NOTIFY
 0x08

	)

87 
	susb_cdc_uni⁄_desc
 {

88 
__u8
 
	mbLígth
;

89 
__u8
 
	mbDes¸ùt‹Ty≥
;

90 
__u8
 
	mbDes¸ùt‹SubTy≥
;

92 
__u8
 
	mbMa°îI¡îÁ˚0
;

93 
__u8
 
	mbSœveI¡îÁ˚0
;

95 } 
__©åibuã__
 ((
∑cked
));

98 
	susb_cdc_cou¡ry_fun˘i⁄Æ_desc
 {

99 
__u8
 
	mbLígth
;

100 
__u8
 
	mbDes¸ùt‹Ty≥
;

101 
__u8
 
	mbDes¸ùt‹SubTy≥
;

103 
__u8
 
	miCou¡ryCodeRñD©e
;

104 
__À16
 
	mwCou¡yCode0
;

106 } 
__©åibuã__
 ((
∑cked
));

109 
	susb_cdc_√tw‹k_ãrmöÆ_desc
 {

110 
__u8
 
	mbLígth
;

111 
__u8
 
	mbDes¸ùt‹Ty≥
;

112 
__u8
 
	mbDes¸ùt‹SubTy≥
;

114 
__u8
 
	mbE¡ôyId
;

115 
__u8
 
	miName
;

116 
__u8
 
	mbCh™√lIndex
;

117 
__u8
 
	mbPhysiˇlI¡îÁ˚
;

118 } 
__©åibuã__
 ((
∑cked
));

121 
	susb_cdc_ëhî_desc
 {

122 
__u8
 
	mbLígth
;

123 
__u8
 
	mbDes¸ùt‹Ty≥
;

124 
__u8
 
	mbDes¸ùt‹SubTy≥
;

126 
__u8
 
	miMACAddªss
;

127 
__À32
 
	mbmEthî√tSèti°ics
;

128 
__À16
 
	mwMaxSegmítSize
;

129 
__À16
 
	mwNumbîMCFûãrs
;

130 
__u8
 
	mbNumbîPowîFûãrs
;

131 } 
__©åibuã__
 ((
∑cked
));

134 
	susb_cdc_mdlm_desc
 {

135 
__u8
 
	mbLígth
;

136 
__u8
 
	mbDes¸ùt‹Ty≥
;

137 
__u8
 
	mbDes¸ùt‹SubTy≥
;

139 
__À16
 
	mbcdVîsi⁄
;

140 
__u8
 
	mbGUID
[16];

141 } 
__©åibuã__
 ((
∑cked
));

144 
	susb_cdc_mdlm_dëaû_desc
 {

145 
__u8
 
	mbLígth
;

146 
__u8
 
	mbDes¸ùt‹Ty≥
;

147 
__u8
 
	mbDes¸ùt‹SubTy≥
;

150 
__u8
 
	mbGuidDes¸ùt‹Ty≥
;

151 
__u8
 
	mbDëaûD©a
[0];

152 } 
__©åibuã__
 ((
∑cked
));

166 
	#USB_CDC_SEND_ENCAPSULATED_COMMAND
 0x00

	)

167 
	#USB_CDC_GET_ENCAPSULATED_RESPONSE
 0x01

	)

168 
	#USB_CDC_REQ_SET_LINE_CODING
 0x20

	)

169 
	#USB_CDC_REQ_GET_LINE_CODING
 0x21

	)

170 
	#USB_CDC_REQ_SET_CONTROL_LINE_STATE
 0x22

	)

171 
	#USB_CDC_REQ_SEND_BREAK
 0x23

	)

172 
	#USB_CDC_SET_ETHERNET_MULTICAST_FILTERS
 0x40

	)

173 
	#USB_CDC_SET_ETHERNET_PM_PATTERN_FILTER
 0x41

	)

174 
	#USB_CDC_GET_ETHERNET_PM_PATTERN_FILTER
 0x42

	)

175 
	#USB_CDC_SET_ETHERNET_PACKET_FILTER
 0x43

	)

176 
	#USB_CDC_GET_ETHERNET_STATISTIC
 0x44

	)

179 
	susb_cdc_löe_codög
 {

180 
__À32
 
	mdwDTER©e
;

181 
__u8
 
	mbCh¨F‹m©
;

182 
	#USB_CDC_1_STOP_BITS
 0

	)

183 
	#USB_CDC_1_5_STOP_BITS
 1

	)

184 
	#USB_CDC_2_STOP_BITS
 2

	)

186 
__u8
 
	mbP¨ôyTy≥
;

187 
	#USB_CDC_NO_PARITY
 0

	)

188 
	#USB_CDC_ODD_PARITY
 1

	)

189 
	#USB_CDC_EVEN_PARITY
 2

	)

190 
	#USB_CDC_MARK_PARITY
 3

	)

191 
	#USB_CDC_SPACE_PARITY
 4

	)

193 
__u8
 
	mbD©aBôs
;

194 } 
__©åibuã__
 ((
∑cked
));

197 
	#USB_CDC_PACKET_TYPE_PROMISCUOUS
 (1 << 0)

	)

198 
	#USB_CDC_PACKET_TYPE_ALL_MULTICAST
 (1 << 1Ë

	)

199 
	#USB_CDC_PACKET_TYPE_DIRECTED
 (1 << 2)

	)

200 
	#USB_CDC_PACKET_TYPE_BROADCAST
 (1 << 3)

	)

201 
	#USB_CDC_PACKET_TYPE_MULTICAST
 (1 << 4Ë

	)

213 
	#USB_CDC_NOTIFY_NETWORK_CONNECTION
 0x00

	)

214 
	#USB_CDC_NOTIFY_RESPONSE_AVAILABLE
 0x01

	)

215 
	#USB_CDC_NOTIFY_SERIAL_STATE
 0x20

	)

216 
	#USB_CDC_NOTIFY_SPEED_CHANGE
 0x2a

	)

218 
	susb_cdc_nŸifiˇti⁄
 {

219 
__u8
 
	mbmReque°Ty≥
;

220 
__u8
 
	mbNŸifiˇti⁄Ty≥
;

221 
__À16
 
	mwVÆue
;

222 
__À16
 
	mwIndex
;

223 
__À16
 
	mwLígth
;

224 } 
__©åibuã__
 ((
∑cked
));

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/usb/ch9.h

33 #i‚de‡
__LINUX_USB_CH9_H


34 
	#__LINUX_USB_CH9_H


	)

36 
	~<löux/ty≥s.h
>

37 
	~<asm/byã‹dî.h
>

38 
	~<asm/u«lig√d.h
>

50 
	#USB_DIR_OUT
 0

	)

51 
	#USB_DIR_IN
 0x80

	)

56 
	#USB_TYPE_MASK
 (0x03 << 5)

	)

57 
	#USB_TYPE_STANDARD
 (0x00 << 5)

	)

58 
	#USB_TYPE_CLASS
 (0x01 << 5)

	)

59 
	#USB_TYPE_VENDOR
 (0x02 << 5)

	)

60 
	#USB_TYPE_RESERVED
 (0x03 << 5)

	)

65 
	#USB_RECIP_MASK
 0x1f

	)

66 
	#USB_RECIP_DEVICE
 0x00

	)

67 
	#USB_RECIP_INTERFACE
 0x01

	)

68 
	#USB_RECIP_ENDPOINT
 0x02

	)

69 
	#USB_RECIP_OTHER
 0x03

	)

71 
	#USB_RECIP_PORT
 0x04

	)

72 
	#USB_RECIP_RPIPE
 0x05

	)

81 
	#USB_REQ_GET_STATUS
 0x00

	)

82 
	#USB_REQ_CLEAR_FEATURE
 0x01

	)

83 
	#USB_REQ_SET_FEATURE
 0x03

	)

84 
	#USB_REQ_SET_ADDRESS
 0x05

	)

85 
	#USB_REQ_GET_DESCRIPTOR
 0x06

	)

86 
	#USB_REQ_SET_DESCRIPTOR
 0x07

	)

87 
	#USB_REQ_GET_CONFIGURATION
 0x08

	)

88 
	#USB_REQ_SET_CONFIGURATION
 0x09

	)

89 
	#USB_REQ_GET_INTERFACE
 0x0A

	)

90 
	#USB_REQ_SET_INTERFACE
 0x0B

	)

91 
	#USB_REQ_SYNCH_FRAME
 0x0C

	)

92 
	#USB_REQ_SET_SEL
 0x30

	)

93 
	#USB_REQ_SET_ISOCH_DELAY
 0x31

	)

95 
	#USB_REQ_SET_ENCRYPTION
 0x0D

	)

96 
	#USB_REQ_GET_ENCRYPTION
 0x0E

	)

97 
	#USB_REQ_RPIPE_ABORT
 0x0E

	)

98 
	#USB_REQ_SET_HANDSHAKE
 0x0F

	)

99 
	#USB_REQ_RPIPE_RESET
 0x0F

	)

100 
	#USB_REQ_GET_HANDSHAKE
 0x10

	)

101 
	#USB_REQ_SET_CONNECTION
 0x11

	)

102 
	#USB_REQ_SET_SECURITY_DATA
 0x12

	)

103 
	#USB_REQ_GET_SECURITY_DATA
 0x13

	)

104 
	#USB_REQ_SET_WUSB_DATA
 0x14

	)

105 
	#USB_REQ_LOOPBACK_DATA_WRITE
 0x15

	)

106 
	#USB_REQ_LOOPBACK_DATA_READ
 0x16

	)

107 
	#USB_REQ_SET_INTERFACE_DS
 0x17

	)

120 
	#USB_DEVICE_SELF_POWERED
 0

	)

121 
	#USB_DEVICE_REMOTE_WAKEUP
 1

	)

122 
	#USB_DEVICE_TEST_MODE
 2

	)

123 
	#USB_DEVICE_BATTERY
 2

	)

124 
	#USB_DEVICE_B_HNP_ENABLE
 3

	)

125 
	#USB_DEVICE_WUSB_DEVICE
 3

	)

126 
	#USB_DEVICE_A_HNP_SUPPORT
 4

	)

127 
	#USB_DEVICE_A_ALT_HNP_SUPPORT
 5

	)

128 
	#USB_DEVICE_DEBUG_MODE
 6

	)

134 
	#TEST_J
 1

	)

135 
	#TEST_K
 2

	)

136 
	#TEST_SE0_NAK
 3

	)

137 
	#TEST_PACKET
 4

	)

138 
	#TEST_FORCE_EN
 5

	)

144 
	#USB_DEVICE_U1_ENABLE
 48

	)

145 
	#USB_DEVICE_U2_ENABLE
 49

	)

146 
	#USB_DEVICE_LTM_ENABLE
 50

	)

147 
	#USB_INTRF_FUNC_SUSPEND
 0

	)

149 
	#USB_INTR_FUNC_SUSPEND_OPT_MASK
 0xFF00

	)

153 
	#USB_INTRF_FUNC_SUSPEND_LP
 (1 << (8 + 0))

	)

154 
	#USB_INTRF_FUNC_SUSPEND_RW
 (1 << (8 + 1))

	)

156 
	#USB_ENDPOINT_HALT
 0

	)

159 
	#USB_DEV_STAT_U1_ENABLED
 2

	)

160 
	#USB_DEV_STAT_U2_ENABLED
 3

	)

161 
	#USB_DEV_STAT_LTM_ENABLED
 4

	)

180 
	susb_˘æªque°
 {

181 
__u8
 
	mbReque°Ty≥
;

182 
__u8
 
	mbReque°
;

183 
__À16
 
	mwVÆue
;

184 
__À16
 
	mwIndex
;

185 
__À16
 
	mwLígth
;

186 } 
__©åibuã__
 ((
∑cked
));

206 
	#USB_DT_DEVICE
 0x01

	)

207 
	#USB_DT_CONFIG
 0x02

	)

208 
	#USB_DT_STRING
 0x03

	)

209 
	#USB_DT_INTERFACE
 0x04

	)

210 
	#USB_DT_ENDPOINT
 0x05

	)

211 
	#USB_DT_DEVICE_QUALIFIER
 0x06

	)

212 
	#USB_DT_OTHER_SPEED_CONFIG
 0x07

	)

213 
	#USB_DT_INTERFACE_POWER
 0x08

	)

215 
	#USB_DT_OTG
 0x09

	)

216 
	#USB_DT_DEBUG
 0x0a

	)

217 
	#USB_DT_INTERFACE_ASSOCIATION
 0x0b

	)

219 
	#USB_DT_SECURITY
 0x0c

	)

220 
	#USB_DT_KEY
 0x0d

	)

221 
	#USB_DT_ENCRYPTION_TYPE
 0x0e

	)

222 
	#USB_DT_BOS
 0x0f

	)

223 
	#USB_DT_DEVICE_CAPABILITY
 0x10

	)

224 
	#USB_DT_WIRELESS_ENDPOINT_COMP
 0x11

	)

225 
	#USB_DT_WIRE_ADAPTER
 0x21

	)

226 
	#USB_DT_RPIPE
 0x22

	)

227 
	#USB_DT_CS_RADIO_CONTROL
 0x23

	)

229 
	#USB_DT_PIPE_USAGE
 0x24

	)

231 
	#USB_DT_SS_ENDPOINT_COMP
 0x30

	)

237 
	#USB_DT_CS_DEVICE
 (
USB_TYPE_CLASS
 | 
USB_DT_DEVICE
)

	)

238 
	#USB_DT_CS_CONFIG
 (
USB_TYPE_CLASS
 | 
USB_DT_CONFIG
)

	)

239 
	#USB_DT_CS_STRING
 (
USB_TYPE_CLASS
 | 
USB_DT_STRING
)

	)

240 
	#USB_DT_CS_INTERFACE
 (
USB_TYPE_CLASS
 | 
USB_DT_INTERFACE
)

	)

241 
	#USB_DT_CS_ENDPOINT
 (
USB_TYPE_CLASS
 | 
USB_DT_ENDPOINT
)

	)

244 
	susb_des¸ùt‹_hódî
 {

245 
__u8
 
	mbLígth
;

246 
__u8
 
	mbDes¸ùt‹Ty≥
;

247 } 
__©åibuã__
 ((
∑cked
));

253 
	susb_devi˚_des¸ùt‹
 {

254 
__u8
 
	mbLígth
;

255 
__u8
 
	mbDes¸ùt‹Ty≥
;

257 
__À16
 
	mbcdUSB
;

258 
__u8
 
	mbDevi˚Cœss
;

259 
__u8
 
	mbDevi˚SubCœss
;

260 
__u8
 
	mbDevi˚PrŸocﬁ
;

261 
__u8
 
	mbMaxPackëSize0
;

262 
__À16
 
	midVíd‹
;

263 
__À16
 
	midProdu˘
;

264 
__À16
 
	mbcdDevi˚
;

265 
__u8
 
	miM™uÁ˘uªr
;

266 
__u8
 
	miProdu˘
;

267 
__u8
 
	miSîülNumbî
;

268 
__u8
 
	mbNumC⁄figuøti⁄s
;

269 } 
__©åibuã__
 ((
∑cked
));

271 
	#USB_DT_DEVICE_SIZE
 18

	)

279 
	#USB_CLASS_PER_INTERFACE
 0

	)

280 
	#USB_CLASS_AUDIO
 1

	)

281 
	#USB_CLASS_COMM
 2

	)

282 
	#USB_CLASS_HID
 3

	)

283 
	#USB_CLASS_PHYSICAL
 5

	)

284 
	#USB_CLASS_STILL_IMAGE
 6

	)

285 
	#USB_CLASS_PRINTER
 7

	)

286 
	#USB_CLASS_MASS_STORAGE
 8

	)

287 
	#USB_CLASS_HUB
 9

	)

288 
	#USB_CLASS_CDC_DATA
 0x0a

	)

289 
	#USB_CLASS_CSCID
 0x0b

	)

290 
	#USB_CLASS_CONTENT_SEC
 0x0d

	)

291 
	#USB_CLASS_VIDEO
 0x0e

	)

292 
	#USB_CLASS_WIRELESS_CONTROLLER
 0xe0

	)

293 
	#USB_CLASS_MISC
 0xef

	)

294 
	#USB_CLASS_APP_SPEC
 0x„

	)

295 
	#USB_CLASS_VENDOR_SPEC
 0xff

	)

297 
	#USB_SUBCLASS_VENDOR_SPEC
 0xff

	)

309 
	susb_c⁄fig_des¸ùt‹
 {

310 
__u8
 
	mbLígth
;

311 
__u8
 
	mbDes¸ùt‹Ty≥
;

313 
__À16
 
	mwTŸÆLígth
;

314 
__u8
 
	mbNumI¡îÁ˚s
;

315 
__u8
 
	mbC⁄figuøti⁄VÆue
;

316 
__u8
 
	miC⁄figuøti⁄
;

317 
__u8
 
	mbmAâribuãs
;

318 
__u8
 
	mbMaxPowî
;

319 } 
__©åibuã__
 ((
∑cked
));

321 
	#USB_DT_CONFIG_SIZE
 9

	)

324 
	#USB_CONFIG_ATT_ONE
 (1 << 7Ë

	)

325 
	#USB_CONFIG_ATT_SELFPOWER
 (1 << 6Ë

	)

326 
	#USB_CONFIG_ATT_WAKEUP
 (1 << 5Ë

	)

327 
	#USB_CONFIG_ATT_BATTERY
 (1 << 4Ë

	)

332 
	susb_°rög_des¸ùt‹
 {

333 
__u8
 
	mbLígth
;

334 
__u8
 
	mbDes¸ùt‹Ty≥
;

336 
__À16
 
	mwD©a
[1];

337 } 
__©åibuã__
 ((
∑cked
));

346 
	susb_öãrÁ˚_des¸ùt‹
 {

347 
__u8
 
	mbLígth
;

348 
__u8
 
	mbDes¸ùt‹Ty≥
;

350 
__u8
 
	mbI¡îÁ˚Numbî
;

351 
__u8
 
	mbA…î«ãSëtög
;

352 
__u8
 
	mbNumEndpoöts
;

353 
__u8
 
	mbI¡îÁ˚Cœss
;

354 
__u8
 
	mbI¡îÁ˚SubCœss
;

355 
__u8
 
	mbI¡îÁ˚PrŸocﬁ
;

356 
__u8
 
	miI¡îÁ˚
;

357 } 
__©åibuã__
 ((
∑cked
));

359 
	#USB_DT_INTERFACE_SIZE
 9

	)

364 
	susb_ídpoöt_des¸ùt‹
 {

365 
__u8
 
	mbLígth
;

366 
__u8
 
	mbDes¸ùt‹Ty≥
;

368 
__u8
 
	mbEndpoötAddªss
;

369 
__u8
 
	mbmAâribuãs
;

370 
__À16
 
	mwMaxPackëSize
;

371 
__u8
 
	mbI¡îvÆ
;

375 
__u8
 
	mbRe‰esh
;

376 
__u8
 
	mbSynchAddªss
;

377 } 
__©åibuã__
 ((
∑cked
));

379 
	#USB_DT_ENDPOINT_SIZE
 7

	)

380 
	#USB_DT_ENDPOINT_AUDIO_SIZE
 9

	)

386 
	#USB_ENDPOINT_NUMBER_MASK
 0x0‡

	)

387 
	#USB_ENDPOINT_DIR_MASK
 0x80

	)

389 
	#USB_ENDPOINT_XFERTYPE_MASK
 0x03

	)

390 
	#USB_ENDPOINT_XFER_CONTROL
 0

	)

391 
	#USB_ENDPOINT_XFER_ISOC
 1

	)

392 
	#USB_ENDPOINT_XFER_BULK
 2

	)

393 
	#USB_ENDPOINT_XFER_INT
 3

	)

394 
	#USB_ENDPOINT_MAX_ADJUSTABLE
 0x80

	)

397 
	#USB_ENDPOINT_INTRTYPE
 0x30

	)

398 
	#USB_ENDPOINT_INTR_PERIODIC
 (0 << 4)

	)

399 
	#USB_ENDPOINT_INTR_NOTIFICATION
 (1 << 4)

	)

401 
	#USB_ENDPOINT_SYNCTYPE
 0x0c

	)

402 
	#USB_ENDPOINT_SYNC_NONE
 (0 << 2)

	)

403 
	#USB_ENDPOINT_SYNC_ASYNC
 (1 << 2)

	)

404 
	#USB_ENDPOINT_SYNC_ADAPTIVE
 (2 << 2)

	)

405 
	#USB_ENDPOINT_SYNC_SYNC
 (3 << 2)

	)

407 
	#USB_ENDPOINT_USAGE_MASK
 0x30

	)

408 
	#USB_ENDPOINT_USAGE_DATA
 0x00

	)

409 
	#USB_ENDPOINT_USAGE_FEEDBACK
 0x10

	)

410 
	#USB_ENDPOINT_USAGE_IMPLICIT_FB
 0x20

	)

420 
ölöe
 
	$usb_ídpoöt_num
(c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ïd
)

422  
ïd
->
bEndpoötAddªss
 & 
USB_ENDPOINT_NUMBER_MASK
;

423 
	}
}

432 
ölöe
 
	$usb_ídpoöt_ty≥
(c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ïd
)

434  
ïd
->
bmAâribuãs
 & 
USB_ENDPOINT_XFERTYPE_MASK
;

435 
	}
}

443 
ölöe
 
	$usb_ídpoöt_dú_ö
(c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ïd
)

445  ((
ïd
->
bEndpoötAddªss
 & 
USB_ENDPOINT_DIR_MASK
Ë=
USB_DIR_IN
);

446 
	}
}

454 
ölöe
 
	$usb_ídpoöt_dú_out
(

455 c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ïd
)

457  ((
ïd
->
bEndpoötAddªss
 & 
USB_ENDPOINT_DIR_MASK
Ë=
USB_DIR_OUT
);

458 
	}
}

466 
ölöe
 
	$usb_ídpoöt_x„r_bulk
(

467 c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ïd
)

469  ((
ïd
->
bmAâribuãs
 & 
USB_ENDPOINT_XFERTYPE_MASK
) ==

470 
USB_ENDPOINT_XFER_BULK
);

471 
	}
}

479 
ölöe
 
	$usb_ídpoöt_x„r_c⁄åﬁ
(

480 c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ïd
)

482  ((
ïd
->
bmAâribuãs
 & 
USB_ENDPOINT_XFERTYPE_MASK
) ==

483 
USB_ENDPOINT_XFER_CONTROL
);

484 
	}
}

493 
ölöe
 
	$usb_ídpoöt_x„r_öt
(

494 c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ïd
)

496  ((
ïd
->
bmAâribuãs
 & 
USB_ENDPOINT_XFERTYPE_MASK
) ==

497 
USB_ENDPOINT_XFER_INT
);

498 
	}
}

507 
ölöe
 
	$usb_ídpoöt_x„r_isoc
(

508 c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ïd
)

510  ((
ïd
->
bmAâribuãs
 & 
USB_ENDPOINT_XFERTYPE_MASK
) ==

511 
USB_ENDPOINT_XFER_ISOC
);

512 
	}
}

521 
ölöe
 
	$usb_ídpoöt_is_bulk_ö
(

522 c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ïd
)

524  
	`usb_ídpoöt_x„r_bulk
(
ïd
Ë&& 
	`usb_ídpoöt_dú_ö
(epd);

525 
	}
}

534 
ölöe
 
	$usb_ídpoöt_is_bulk_out
(

535 c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ïd
)

537  
	`usb_ídpoöt_x„r_bulk
(
ïd
Ë&& 
	`usb_ídpoöt_dú_out
(epd);

538 
	}
}

547 
ölöe
 
	$usb_ídpoöt_is_öt_ö
(

548 c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ïd
)

550  
	`usb_ídpoöt_x„r_öt
(
ïd
Ë&& 
	`usb_ídpoöt_dú_ö
(epd);

551 
	}
}

560 
ölöe
 
	$usb_ídpoöt_is_öt_out
(

561 c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ïd
)

563  
	`usb_ídpoöt_x„r_öt
(
ïd
Ë&& 
	`usb_ídpoöt_dú_out
(epd);

564 
	}
}

573 
ölöe
 
	$usb_ídpoöt_is_isoc_ö
(

574 c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ïd
)

576  
	`usb_ídpoöt_x„r_isoc
(
ïd
Ë&& 
	`usb_ídpoöt_dú_ö
(epd);

577 
	}
}

586 
ölöe
 
	$usb_ídpoöt_is_isoc_out
(

587 c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ïd
)

589  
	`usb_ídpoöt_x„r_isoc
(
ïd
Ë&& 
	`usb_ídpoöt_dú_out
(epd);

590 
	}
}

598 
ölöe
 
	$usb_ídpoöt_maxp
(c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ïd
)

600  
	`__À16_to_˝u
(
	`gë_u«lig√d
(&
ïd
->
wMaxPackëSize
));

601 
	}
}

603 
ölöe
 
	$usb_ídpoöt_öãºu±_ty≥
(

604 c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ïd
)

606  
ïd
->
bmAâribuãs
 & 
USB_ENDPOINT_INTRTYPE
;

607 
	}
}

612 
	susb_ss_ï_comp_des¸ùt‹
 {

613 
__u8
 
	mbLígth
;

614 
__u8
 
	mbDes¸ùt‹Ty≥
;

616 
__u8
 
	mbMaxBur°
;

617 
__u8
 
	mbmAâribuãs
;

618 
__À16
 
	mwByãsPîI¡îvÆ
;

619 } 
__©åibuã__
 ((
∑cked
));

621 
	#USB_DT_SS_EP_COMP_SIZE
 6

	)

624 
ölöe
 

625 
	$usb_ss_max_°ªams
(c⁄° 
usb_ss_ï_comp_des¸ùt‹
 *
comp
)

627 
max_°ªams
;

629 i‡(!
comp
)

632 
max_°ªams
 = 
comp
->
bmAâribuãs
 & 0x1f;

634 i‡(!
max_°ªams
)

637 
max_°ªams
 = 1 << max_streams;

639  
max_°ªams
;

640 
	}
}

643 
	#USB_SS_MULT
(
p
Ë(1 + (’Ë& 0x3))

	)

648 
	susb_quÆifõr_des¸ùt‹
 {

649 
__u8
 
	mbLígth
;

650 
__u8
 
	mbDes¸ùt‹Ty≥
;

652 
__À16
 
	mbcdUSB
;

653 
__u8
 
	mbDevi˚Cœss
;

654 
__u8
 
	mbDevi˚SubCœss
;

655 
__u8
 
	mbDevi˚PrŸocﬁ
;

656 
__u8
 
	mbMaxPackëSize0
;

657 
__u8
 
	mbNumC⁄figuøti⁄s
;

658 
__u8
 
	mbRESERVED
;

659 } 
__©åibuã__
 ((
∑cked
));

665 
	susb_Ÿg_des¸ùt‹
 {

666 
__u8
 
	mbLígth
;

667 
__u8
 
	mbDes¸ùt‹Ty≥
;

669 
__u8
 
	mbmAâribuãs
;

670 } 
__©åibuã__
 ((
∑cked
));

673 
	#USB_OTG_SRP
 (1 << 0)

	)

674 
	#USB_OTG_HNP
 (1 << 1Ë

	)

679 
	susb_debug_des¸ùt‹
 {

680 
__u8
 
	mbLígth
;

681 
__u8
 
	mbDes¸ùt‹Ty≥
;

684 
__u8
 
	mbDebugInEndpoöt
;

685 
__u8
 
	mbDebugOutEndpoöt
;

686 } 
__©åibuã__
((
∑cked
));

691 
	susb_öãrÁ˚_assoc_des¸ùt‹
 {

692 
__u8
 
	mbLígth
;

693 
__u8
 
	mbDes¸ùt‹Ty≥
;

695 
__u8
 
	mbFú°I¡îÁ˚
;

696 
__u8
 
	mbI¡îÁ˚Cou¡
;

697 
__u8
 
	mbFun˘i⁄Cœss
;

698 
__u8
 
	mbFun˘i⁄SubCœss
;

699 
__u8
 
	mbFun˘i⁄PrŸocﬁ
;

700 
__u8
 
	miFun˘i⁄
;

701 } 
__©åibuã__
 ((
∑cked
));

709 
	susb_£curôy_des¸ùt‹
 {

710 
__u8
 
	mbLígth
;

711 
__u8
 
	mbDes¸ùt‹Ty≥
;

713 
__À16
 
	mwTŸÆLígth
;

714 
__u8
 
	mbNumEn¸y±i⁄Ty≥s
;

715 } 
__©åibuã__
((
∑cked
));

722 
	susb_key_des¸ùt‹
 {

723 
__u8
 
	mbLígth
;

724 
__u8
 
	mbDes¸ùt‹Ty≥
;

726 
__u8
 
	mtTKID
[3];

727 
__u8
 
	mbRe£rved
;

728 
__u8
 
	mbKeyD©a
[0];

729 } 
__©åibuã__
((
∑cked
));

734 
	susb_í¸y±i⁄_des¸ùt‹
 {

735 
__u8
 
	mbLígth
;

736 
__u8
 
	mbDes¸ùt‹Ty≥
;

738 
__u8
 
	mbEn¸y±i⁄Ty≥
;

739 
	#USB_ENC_TYPE_UNSECURE
 0

	)

740 
	#USB_ENC_TYPE_WIRED
 1

	)

741 
	#USB_ENC_TYPE_CCM_1
 2

	)

742 
	#USB_ENC_TYPE_RSA_1
 3

	)

743 
__u8
 
	mbEn¸y±i⁄VÆue
;

744 
__u8
 
	mbAuthKeyIndex
;

745 } 
__©åibuã__
((
∑cked
));

751 
	susb_bos_des¸ùt‹
 {

752 
__u8
 
	mbLígth
;

753 
__u8
 
	mbDes¸ùt‹Ty≥
;

755 
__À16
 
	mwTŸÆLígth
;

756 
__u8
 
	mbNumDevi˚C≠s
;

757 } 
__©åibuã__
((
∑cked
));

759 
	#USB_DT_BOS_SIZE
 5

	)

763 
	susb_dev_ˇp_hódî
 {

764 
__u8
 
	mbLígth
;

765 
__u8
 
	mbDes¸ùt‹Ty≥
;

766 
__u8
 
	mbDevC≠abûôyTy≥
;

767 } 
__©åibuã__
((
∑cked
));

769 
	#USB_CAP_TYPE_WIRELESS_USB
 1

	)

771 
	susb_wúñess_ˇp_des¸ùt‹
 {

772 
__u8
 
	mbLígth
;

773 
__u8
 
	mbDes¸ùt‹Ty≥
;

774 
__u8
 
	mbDevC≠abûôyTy≥
;

776 
__u8
 
	mbmAâribuãs
;

777 
	#USB_WIRELESS_P2P_DRD
 (1 << 1)

	)

778 
	#USB_WIRELESS_BEACON_MASK
 (3 << 2)

	)

779 
	#USB_WIRELESS_BEACON_SELF
 (1 << 2)

	)

780 
	#USB_WIRELESS_BEACON_DIRECTED
 (2 << 2)

	)

781 
	#USB_WIRELESS_BEACON_NONE
 (3 << 2)

	)

782 
__À16
 
	mwPHYR©es
;

783 
	#USB_WIRELESS_PHY_53
 (1 << 0Ë

	)

784 
	#USB_WIRELESS_PHY_80
 (1 << 1)

	)

785 
	#USB_WIRELESS_PHY_107
 (1 << 2Ë

	)

786 
	#USB_WIRELESS_PHY_160
 (1 << 3)

	)

787 
	#USB_WIRELESS_PHY_200
 (1 << 4Ë

	)

788 
	#USB_WIRELESS_PHY_320
 (1 << 5)

	)

789 
	#USB_WIRELESS_PHY_400
 (1 << 6)

	)

790 
	#USB_WIRELESS_PHY_480
 (1 << 7)

	)

791 
__u8
 
	mbmTFITXPowîInfo
;

792 
__u8
 
	mbmFFITXPowîInfo
;

793 
__À16
 
	mbmB™dGroup
;

794 
__u8
 
	mbRe£rved
;

795 } 
__©åibuã__
((
∑cked
));

798 
	#USB_CAP_TYPE_EXT
 2

	)

800 
	susb_ext_ˇp_des¸ùt‹
 {

801 
__u8
 
	mbLígth
;

802 
__u8
 
	mbDes¸ùt‹Ty≥
;

803 
__u8
 
	mbDevC≠abûôyTy≥
;

804 
__À32
 
	mbmAâribuãs
;

805 
	#USB_LPM_SUPPORT
 (1 << 1Ë

	)

806 
	#USB_BESL_SUPPORT
 (1 << 2Ë

	)

807 
	#USB_BESL_BASELINE_VALID
 (1 << 3Ë

	)

808 
	#USB_BESL_DEEP_VALID
 (1 << 4Ë

	)

809 
	#USB_GET_BESL_BASELINE
(
p
Ë((’Ë& (0x‡<< 8)Ë>> 8)

	)

810 
	#USB_GET_BESL_DEEP
(
p
Ë((’Ë& (0x‡<< 12)Ë>> 12)

	)

811 } 
__©åibuã__
((
∑cked
));

813 
	#USB_DT_USB_EXT_CAP_SIZE
 7

	)

819 
	#USB_SS_CAP_TYPE
 3

	)

820 
	susb_ss_ˇp_des¸ùt‹
 {

821 
__u8
 
	mbLígth
;

822 
__u8
 
	mbDes¸ùt‹Ty≥
;

823 
__u8
 
	mbDevC≠abûôyTy≥
;

824 
__u8
 
	mbmAâribuãs
;

825 
	#USB_LTM_SUPPORT
 (1 << 1Ë

	)

826 
__À16
 
	mwS≥edSuµ‹ãd
;

827 
	#USB_LOW_SPEED_OPERATION
 (1Ë

	)

828 
	#USB_FULL_SPEED_OPERATION
 (1 << 1Ë

	)

829 
	#USB_HIGH_SPEED_OPERATION
 (1 << 2Ë

	)

830 
	#USB_5GBPS_OPERATION
 (1 << 3Ë

	)

831 
__u8
 
	mbFun˘i⁄ÆôySuµ‹t
;

832 
__u8
 
	mbU1devExôL©
;

833 
__À16
 
	mbU2DevExôL©
;

834 } 
__©åibuã__
((
∑cked
));

836 
	#USB_DT_USB_SS_CAP_SIZE
 10

	)

842 
	#CONTAINER_ID_TYPE
 4

	)

843 
	susb_ss_c⁄èöî_id_des¸ùt‹
 {

844 
__u8
 
	mbLígth
;

845 
__u8
 
	mbDes¸ùt‹Ty≥
;

846 
__u8
 
	mbDevC≠abûôyTy≥
;

847 
__u8
 
	mbRe£rved
;

848 
__u8
 
	mC⁄èöîID
[16];

849 } 
__©åibuã__
((
∑cked
));

851 
	#USB_DT_USB_SS_CONTN_ID_SIZE
 20

	)

857 
	susb_wúñess_ï_comp_des¸ùt‹
 {

858 
__u8
 
	mbLígth
;

859 
__u8
 
	mbDes¸ùt‹Ty≥
;

861 
__u8
 
	mbMaxBur°
;

862 
__u8
 
	mbMaxSequí˚
;

863 
__À16
 
	mwMaxSåómDñay
;

864 
__À16
 
	mwOvîTheAúPackëSize
;

865 
__u8
 
	mbOvîTheAúI¡îvÆ
;

866 
__u8
 
	mbmCompAâribuãs
;

867 
	#USB_ENDPOINT_SWITCH_MASK
 0x03

	)

868 
	#USB_ENDPOINT_SWITCH_NO
 0

	)

869 
	#USB_ENDPOINT_SWITCH_SWITCH
 1

	)

870 
	#USB_ENDPOINT_SWITCH_SCALE
 2

	)

871 } 
__©åibuã__
((
∑cked
));

879 
	susb_h™dshake
 {

880 
__u8
 
	mbMesßgeNumbî
;

881 
__u8
 
	mbSètus
;

882 
__u8
 
	mtTKID
[3];

883 
__u8
 
	mbRe£rved
;

884 
__u8
 
	mCDID
[16];

885 
__u8
 
	mn⁄˚
[16];

886 
__u8
 
	mMIC
[8];

887 } 
__©åibuã__
((
∑cked
));

895 
	susb_c⁄√˘i⁄_c⁄ãxt
 {

896 
__u8
 
	mCHID
[16];

897 
__u8
 
	mCDID
[16];

898 
__u8
 
	mCK
[16];

899 } 
__©åibuã__
((
∑cked
));

905 
	eusb_devi˚_•ìd
 {

906 #i‡
deföed
 (
RALINK_OHCI
Ë|| deföed (
RALINK_EHCI
)

907 
	mUSB_SPEED_FULL
 = 0,

909 
	mUSB_SPEED_UNKNOWN
 = 0,

910 
	mUSB_SPEED_FULL
,

912 
	mUSB_SPEED_LOW
,

913 
	mUSB_SPEED_HIGH
,

914 
	mUSB_SPEED_WIRELESS
,

915 
	mUSB_SPEED_SUPER
,

918 #ifde‡
__KERNEL__


926 c⁄° *
usb_•ìd_°rög
(
usb_devi˚_•ìd
 
•ìd
);

930 
	eusb_devi˚_°©e
 {

934 
	mUSB_STATE_NOTATTACHED
 = 0,

937 
	mUSB_STATE_ATTACHED
,

938 
	mUSB_STATE_POWERED
,

939 
	mUSB_STATE_RECONNECTING
,

940 
	mUSB_STATE_UNAUTHENTICATED
,

941 
	mUSB_STATE_DEFAULT
,

942 
	mUSB_STATE_ADDRESS
,

943 
	mUSB_STATE_CONFIGURED
,

945 
	mUSB_STATE_SUSPENDED


955 
	eusb3_lök_°©e
 {

956 
	mUSB3_LPM_U0
 = 0,

957 
	mUSB3_LPM_U1
,

958 
	mUSB3_LPM_U2
,

959 
	mUSB3_LPM_U3


980 
	#USB3_LPM_DISABLED
 0x0

	)

981 
	#USB3_LPM_U1_MAX_TIMEOUT
 0x7F

	)

982 
	#USB3_LPM_U2_MAX_TIMEOUT
 0xFE

	)

983 
	#USB3_LPM_DEVICE_INITIATED
 0xFF

	)

985 
	susb_£t_£l_ªq
 {

986 
__u8
 
	mu1_£l
;

987 
__u8
 
	mu1_≥l
;

988 
__À16
 
	mu2_£l
;

989 
__À16
 
	mu2_≥l
;

990 } 
__©åibuã__
 ((
∑cked
));

997 
	#USB3_LPM_MAX_U1_SEL_PEL
 0xFF

	)

998 
	#USB3_LPM_MAX_U2_SEL_PEL
 0xFFFF

	)

1008 
	#USB_SELF_POWER_VBUS_MAX_DRAW
 100

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/usb/composite.h

9 #i‚def 
__LINUX_USB_COMPOSITE_H


10 
	#__LINUX_USB_COMPOSITE_H


	)

25 
	~<comm⁄.h
>

26 
	~<löux/usb/ch9.h
>

27 
	~<löux/usb/gadgë.h
>

28 
	~<usb/lö_gadgë_com∑t.h
>

30 
	gusb_c⁄figuøti⁄
;

85 
	susb_fun˘i⁄
 {

86 c⁄° *
	m«me
;

87 
usb_gadgë_°rögs
 **
	m°rögs
;

88 
usb_des¸ùt‹_hódî
 **
	mdes¸ùt‹s
;

89 
usb_des¸ùt‹_hódî
 **
	mhs_des¸ùt‹s
;

91 
usb_c⁄figuøti⁄
 *
	mc⁄fig
;

100 (*
	mböd
)(
	musb_c⁄figuøti⁄
 *,

101 
	musb_fun˘i⁄
 *);

102 (*
	munböd
)(
	musb_c⁄figuøti⁄
 *,

103 
	musb_fun˘i⁄
 *);

106 (*
	m£t_Æt
)(
	musb_fun˘i⁄
 *,

107 
	möãrÁ˚
, 
	mÆt
);

108 (*
	mgë_Æt
)(
	musb_fun˘i⁄
 *,

109 
	möãrÁ˚
);

110 (*
	mdißbÀ
)(
	musb_fun˘i⁄
 *);

111 (*
	m£tup
)(
	musb_fun˘i⁄
 *,

112 c⁄° 
	musb_˘æªque°
 *);

113 (*
	msu•íd
)(
	musb_fun˘i⁄
 *);

114 (*
	mªsume
)(
	musb_fun˘i⁄
 *);

118 
li°_hód
 
	mli°
;

119 
DECLARE_BITMAP
(
ídpoöts
, 32);

122 
usb_add_fun˘i⁄
(
usb_c⁄figuøti⁄
 *, 
usb_fun˘i⁄
 *);

124 
usb_fun˘i⁄_dó˘iv©e
(
usb_fun˘i⁄
 *);

125 
usb_fun˘i⁄_a˘iv©e
(
usb_fun˘i⁄
 *);

127 
usb_öãrÁ˚_id
(
usb_c⁄figuøti⁄
 *, 
usb_fun˘i⁄
 *);

135 
ölöe
 
usb_ídpoöt_des¸ùt‹
 *

136 
	$ï_choo£
(
usb_gadgë
 *
g
, 
usb_ídpoöt_des¸ùt‹
 *
hs
,

137 
usb_ídpoöt_des¸ùt‹
 *
fs
)

139 i‡(
	`gadgë_is_duÆ•ìd
(
g
Ë&& g->
•ìd
 =
USB_SPEED_HIGH
)

140  
hs
;

141  
fs
;

142 
	}
}

144 
	#MAX_CONFIG_INTERFACES
 16

	)

189 
	susb_c⁄figuøti⁄
 {

190 c⁄° *
	mœbñ
;

191 
usb_gadgë_°rögs
 **
	m°rögs
;

192 c⁄° 
usb_des¸ùt‹_hódî
 **
	mdes¸ùt‹s
;

200 (*
	mböd
)(
	musb_c⁄figuøti⁄
 *);

201 (*
	munböd
)(
	musb_c⁄figuøti⁄
 *);

202 (*
	m£tup
)(
	musb_c⁄figuøti⁄
 *,

203 c⁄° 
	musb_˘æªque°
 *);

206 
u8
 
	mbC⁄figuøti⁄VÆue
;

207 
u8
 
	miC⁄figuøti⁄
;

208 
u8
 
	mbmAâribuãs
;

209 
u8
 
	mbMaxPowî
;

211 
usb_composôe_dev
 *
	mcdev
;

215 
li°_hód
 
	mli°
;

216 
li°_hód
 
	mfun˘i⁄s
;

217 
u8
 
	m√xt_öãrÁ˚_id
;

218 
	mhigh•ìd
:1;

219 
	mfuŒ•ìd
:1;

220 
usb_fun˘i⁄
 *
	möãrÁ˚
[
MAX_CONFIG_INTERFACES
];

223 
usb_add_c⁄fig
(
usb_composôe_dev
 *,

224 
usb_c⁄figuøti⁄
 *);

256 
	susb_composôe_drivî
 {

257 c⁄° *
	m«me
;

258 c⁄° 
usb_devi˚_des¸ùt‹
 *
	mdev
;

259 
usb_gadgë_°rögs
 **
	m°rögs
;

266 (*
	mböd
)(
	musb_composôe_dev
 *);

267 (*
	munböd
)(
	musb_composôe_dev
 *);

269 (*
	mdisc⁄√˘
)(
	musb_composôe_dev
 *);

272 (*
	msu•íd
)(
	musb_composôe_dev
 *);

273 (*
	mªsume
)(
	musb_composôe_dev
 *);

276 
usb_composôe_ªgi°î
(
usb_composôe_drivî
 *);

277 
usb_composôe_uƒegi°î
(
usb_composôe_drivî
 *);

312 
	susb_composôe_dev
 {

313 
usb_gadgë
 *
	mgadgë
;

314 
usb_ªque°
 *
	mªq
;

315 
	mbufsiz
;

317 
usb_c⁄figuøti⁄
 *
	mc⁄fig
;

321 
	msu•íded
:1;

322 
usb_devi˚_des¸ùt‹
 
__Æig√d
(
CONFIG_SYS_CACHELINE_SIZE
Ë
	mdesc
;

323 
li°_hód
 
	mc⁄figs
;

324 
usb_composôe_drivî
 *
	mdrivî
;

325 
u8
 
	m√xt_°rög_id
;

330 
	mdó˘iv©i⁄s
;

333 
usb_°rög_id
(
usb_composôe_dev
 *
c
);

334 
usb_°rög_ids_èb
(
usb_composôe_dev
 *
c
,

335 
usb_°rög
 *
°r
);

336 
usb_°rög_ids_n
(
usb_composôe_dev
 *
c
, 
n
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/usb/dwc3.h

10 #i‚de‡
__DWC3_H_


11 
	#__DWC3_H_


	)

14 
	#DWC3_ENDPOINTS_NUM
 32

	)

16 
	#DWC3_EVENT_BUFFERS_SIZE
 
PAGE_SIZE


	)

17 
	#DWC3_EVENT_TYPE_MASK
 0x„

	)

19 
	#DWC3_EVENT_TYPE_DEV
 0

	)

20 
	#DWC3_EVENT_TYPE_CARKIT
 3

	)

21 
	#DWC3_EVENT_TYPE_I2C
 4

	)

23 
	#DWC3_DEVICE_EVENT_DISCONNECT
 0

	)

24 
	#DWC3_DEVICE_EVENT_RESET
 1

	)

25 
	#DWC3_DEVICE_EVENT_CONNECT_DONE
 2

	)

26 
	#DWC3_DEVICE_EVENT_LINK_STATUS_CHANGE
 3

	)

27 
	#DWC3_DEVICE_EVENT_WAKEUP
 4

	)

28 
	#DWC3_DEVICE_EVENT_EOPF
 6

	)

29 
	#DWC3_DEVICE_EVENT_SOF
 7

	)

30 
	#DWC3_DEVICE_EVENT_ERRATIC_ERROR
 9

	)

31 
	#DWC3_DEVICE_EVENT_CMD_CMPL
 10

	)

32 
	#DWC3_DEVICE_EVENT_OVERFLOW
 11

	)

34 
	#DWC3_GEVNTCOUNT_MASK
 0xfffc

	)

35 
	#DWC3_GSNPSID_MASK
 0xffff0000

	)

36 
	#DWC3_GSNPSID_SHIFT
 16

	)

37 
	#DWC3_GSNPSREV_MASK
 0xffff

	)

39 
	#DWC3_REVISION_MASK
 0xffff

	)

41 
	#DWC3_REG_OFFSET
 0xC100

	)

43 
	sg_evít_buf„r
 {

44 
u64
 
	mg_ev¡adr
;

45 
u32
 
	mg_ev¡siz
;

46 
u32
 
	mg_ev¡cou¡
;

49 
	sd_physiˇl_ídpoöt
 {

50 
u32
 
	md_dïcmd∑r2
;

51 
u32
 
	md_dïcmd∑r1
;

52 
u32
 
	md_dïcmd∑r0
;

53 
u32
 
	md_dïcmd
;

56 
	sdwc3
 {

57 
u32
 
	mg_sbuscfg0
;

58 
u32
 
	mg_sbuscfg1
;

59 
u32
 
	mg_txthrcfg
;

60 
u32
 
	mg_rxthrcfg
;

61 
u32
 
	mg_˘l
;

63 
u32
 
	mª£rved1
;

65 
u32
 
	mg_°s
;

67 
u32
 
	mª£rved2
;

69 
u32
 
	mg_¢psid
;

70 
u32
 
	mg_gpio
;

71 
u32
 
	mg_uid
;

72 
u32
 
	mg_u˘l
;

73 
u64
 
	mg_bu£ºaddr
;

74 
u64
 
	mg_¥tbim≠
;

76 
u32
 
	mg_hw∑øms0
;

77 
u32
 
	mg_hw∑øms1
;

78 
u32
 
	mg_hw∑øms2
;

79 
u32
 
	mg_hw∑øms3
;

80 
u32
 
	mg_hw∑øms4
;

81 
u32
 
	mg_hw∑øms5
;

82 
u32
 
	mg_hw∑øms6
;

83 
u32
 
	mg_hw∑øms7
;

85 
u32
 
	mg_dbgfifo•a˚
;

86 
u32
 
	mg_dbg…ssm
;

87 
u32
 
	mg_dbg mcc
;

88 
u32
 
	mg_dbgbmu
;

89 
u32
 
	mg_dbgl•mux
;

90 
u32
 
	mg_dbgl•
;

91 
u32
 
	mg_dbgïöfo0
;

92 
u32
 
	mg_dbgïöfo1
;

94 
u64
 
	mg_¥tbim≠_hs
;

95 
u64
 
	mg_¥tbim≠_fs
;

97 
u32
 
	mª£rved3
[28];

99 
u32
 
	mg_usb2phycfg
[16];

100 
u32
 
	mg_usb2i2c˘l
[16];

101 
u32
 
	mg_usb2phyacc
[16];

102 
u32
 
	mg_usb3pùe˘l
[16];

104 
u32
 
	mg_txfifosiz
[32];

105 
u32
 
	mg_rxfifosiz
[32];

107 
g_evít_buf„r
 
	mg_ev¡_buf
[32];

109 
u32
 
	mg_hw∑øms8
;

111 
u32
 
	mª£rved4
[63];

113 
u32
 
	md_cfg
;

114 
u32
 
	md_˘l
;

115 
u32
 
	md_evãn
;

116 
u32
 
	md_°s
;

117 
u32
 
	md_gcmd∑r
;

118 
u32
 
	md_gcmd
;

120 
u32
 
	mª£rved5
[2];

122 
u32
 
	md_Æïía
;

124 
u32
 
	mª£rved6
[55];

126 
d_physiˇl_ídpoöt
 
	md_phy_ï_cmd
[32];

128 
u32
 
	mª£rved7
[128];

130 
u32
 
	mo_cfg
;

131 
u32
 
	mo_˘l
;

132 
u32
 
	mo_evt
;

133 
u32
 
	mo_evãn
;

134 
u32
 
	mo_°s
;

136 
u32
 
	mª£rved8
[3];

138 
u32
 
	madp_cfg
;

139 
u32
 
	madp_˘l
;

140 
u32
 
	madp_evt
;

141 
u32
 
	madp_evãn
;

143 
u32
 
	mbc_cfg
;

145 
u32
 
	mª£rved9
;

147 
u32
 
	mbc_evt
;

148 
u32
 
	mbc_evãn
;

152 
	#DWC3_GCTL_PWRDNSCALE
(
n
Ë(“Ë<< 19)

	)

153 
	#DWC3_GCTL_U2RSTECN
 (1 << 16)

	)

154 
	#DWC3_GCTL_RAMCLKSEL
(
x
) \

155 (((
x
Ë& 
DWC3_GCTL_CLK_MASK
Ë<< 6)

	)

156 
	#DWC3_GCTL_CLK_BUS
 (0)

	)

157 
	#DWC3_GCTL_CLK_PIPE
 (1)

	)

158 
	#DWC3_GCTL_CLK_PIPEHALF
 (2)

	)

159 
	#DWC3_GCTL_CLK_MASK
 (3)

	)

160 
	#DWC3_GCTL_PRTCAP
(
n
Ë((“Ë& (3 << 12)Ë>> 12)

	)

161 
	#DWC3_GCTL_PRTCAPDIR
(
n
Ë(“Ë<< 12)

	)

162 
	#DWC3_GCTL_PRTCAP_HOST
 1

	)

163 
	#DWC3_GCTL_PRTCAP_DEVICE
 2

	)

164 
	#DWC3_GCTL_PRTCAP_OTG
 3

	)

165 
	#DWC3_GCTL_CORESOFTRESET
 (1 << 11)

	)

166 
	#DWC3_GCTL_SCALEDOWN
(
n
Ë(“Ë<< 4)

	)

167 
	#DWC3_GCTL_SCALEDOWN_MASK
 
	`DWC3_GCTL_SCALEDOWN
(3)

	)

168 
	#DWC3_GCTL_DISSCRAMBLE
 (1 << 3)

	)

169 
	#DWC3_GCTL_DSBLCLKGTNG
 (1 << 0)

	)

172 
	#DWC3_GHWPARAMS1_EN_PWROPT
(
n
Ë((“Ë& (3 << 24)Ë>> 24)

	)

173 
	#DWC3_GHWPARAMS1_EN_PWROPT_NO
 0

	)

174 
	#DWC3_GHWPARAMS1_EN_PWROPT_CLK
 1

	)

177 
	#DWC3_GUSB2PHYCFG_PHYSOFTRST
 (1 << 31)

	)

178 
	#DWC3_GUSB2PHYCFG_SUSPHY
 (1 << 6)

	)

181 
	#DWC3_GUSB3PIPECTL_PHYSOFTRST
 (1 << 31)

	)

182 
	#DWC3_GUSB3PIPECTL_SUSPHY
 (1 << 17)

	)

185 
	#DWC3_GTXFIFOSIZ_TXFDEF
(
n
Ë(“Ë& 0xffff)

	)

186 
	#DWC3_GTXFIFOSIZ_TXFSTADDR
(
n
Ë(“Ë& 0xffff0000)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/usb/gadget.h

18 #i‚de‡
__LINUX_USB_GADGET_H


19 
	#__LINUX_USB_GADGET_H


	)

21 
	~<î∫o.h
>

22 
	~<löux/li°.h
>

24 
	gusb_ï
;

82 
	susb_ªque°
 {

83 *
	mbuf
;

84 
	mÀngth
;

85 
dma_addr_t
 
	mdma
;

87 
	mno_öãºu±
:1;

88 
	mzîo
:1;

89 
	msh‹t_nŸ_ok
:1;

91 (*
	mcom∂ëe
)(
usb_ï
 *
	mï
,

92 
usb_ªque°
 *
	mªq
);

93 *
	mc⁄ãxt
;

94 
li°_hód
 
	mli°
;

96 
	m°©us
;

97 
	ma˘uÆ
;

109 
	susb_ï_›s
 {

110 (*
	míabÀ
Ë(
usb_ï
 *
	mï
,

111 c⁄° 
usb_ídpoöt_des¸ùt‹
 *
	mdesc
);

112 (*
	mdißbÀ
Ë(
usb_ï
 *
	mï
);

114 
	musb_ªque°
 *(*
	mÆloc_ªque°
Ë(
usb_ï
 *
	mï
,

115 
gÂ_t
 
	mgÂ_Êags
);

116 (*
	m‰ì_ªque°
Ë(
usb_ï
 *
	mï
, 
usb_ªque°
 *
	mªq
);

118 (*
	mqueue
Ë(
usb_ï
 *
	mï
, 
usb_ªque°
 *
	mªq
,

119 
gÂ_t
 
	mgÂ_Êags
);

120 (*
	mdequeue
Ë(
usb_ï
 *
	mï
, 
usb_ªque°
 *
	mªq
);

122 (*
	m£t_hÆt
Ë(
usb_ï
 *
	mï
, 
	mvÆue
);

123 (*
	mfifo_°©us
Ë(
usb_ï
 *
	mï
);

124 (*
	mfifo_Êush
Ë(
usb_ï
 *
	mï
);

142 
	susb_ï
 {

143 *
	mdrivî_d©a
;

144 c⁄° *
	m«me
;

145 c⁄° 
usb_ï_›s
 *
	m›s
;

146 
li°_hód
 
	mï_li°
;

147 
	mmax∑ckë
:16;

175 
ölöe
 
	$usb_ï_íabÀ
(
usb_ï
 *
ï
,

176 c⁄° 
usb_ídpoöt_des¸ùt‹
 *
desc
)

178  
ï
->
›s
->
	`íabÀ
”p, 
desc
);

179 
	}
}

193 
ölöe
 
	$usb_ï_dißbÀ
(
usb_ï
 *
ï
)

195  
ï
->
›s
->
	`dißbÀ
(ep);

196 
	}
}

212 
ölöe
 
usb_ªque°
 *
	$usb_ï_Æloc_ªque°
(
usb_ï
 *
ï
,

213 
gÂ_t
 
gÂ_Êags
)

215  
ï
->
›s
->
	`Æloc_ªque°
”p, 
gÂ_Êags
);

216 
	}
}

227 
ölöe
 
	$usb_ï_‰ì_ªque°
(
usb_ï
 *
ï
,

228 
usb_ªque°
 *
ªq
)

230 
ï
->
›s
->
	`‰ì_ªque°
”p, 
ªq
);

231 
	}
}

287 
ölöe
 
	$usb_ï_queue
(
usb_ï
 *
ï
,

288 
usb_ªque°
 *
ªq
, 
gÂ_t
 
gÂ_Êags
)

290  
ï
->
›s
->
	`queue
”p, 
ªq
, 
gÂ_Êags
);

291 
	}
}

307 
ölöe
 
	$usb_ï_dequeue
(
usb_ï
 *
ï
, 
usb_ªque°
 *
ªq
)

309  
ï
->
›s
->
	`dequeue
”p, 
ªq
);

310 
	}
}

333 
ölöe
 
	$usb_ï_£t_hÆt
(
usb_ï
 *
ï
)

335  
ï
->
›s
->
	`£t_hÆt
(ep, 1);

336 
	}
}

351 
ölöe
 
	$usb_ï_˛ór_hÆt
(
usb_ï
 *
ï
)

353  
ï
->
›s
->
	`£t_hÆt
(ep, 0);

354 
	}
}

371 
ölöe
 
	$usb_ï_fifo_°©us
(
usb_ï
 *
ï
)

373 i‡(
ï
->
›s
->
fifo_°©us
)

374  
ï
->
›s
->
	`fifo_°©us
(ep);

376  -
EOPNOTSUPP
;

377 
	}
}

388 
ölöe
 
	$usb_ï_fifo_Êush
(
usb_ï
 *
ï
)

390 i‡(
ï
->
›s
->
fifo_Êush
)

391 
ï
->
›s
->
	`fifo_Êush
(ep);

392 
	}
}

397 
	gusb_gadgë
;

402 
	susb_gadgë_›s
 {

403 (*
	mgë_‰ame
)(
	musb_gadgë
 *);

404 (*
	mwakeup
)(
	musb_gadgë
 *);

405 (*
	m£t_£lÂowîed
Ë(
	musb_gadgë
 *, 
	mis_£lÂowîed
);

406 (*
	mvbus_£ssi⁄
Ë(
	musb_gadgë
 *, 
	mis_a˘ive
);

407 (*
	mvbus_døw
Ë(
	musb_gadgë
 *, 
	mmA
);

408 (*
	mpuŒup
Ë(
	musb_gadgë
 *, 
	mis_⁄
);

409 (*
	mio˘l
)(
	musb_gadgë
 *,

410 
	mcode
, 
	m∑øm
);

413 
	sdevi˚
 {

414 *
	mdrivî_d©a
;

415 *
	mdevi˚_d©a
;

460 
	susb_gadgë
 {

462 c⁄° 
usb_gadgë_›s
 *
	m›s
;

463 
usb_ï
 *
	mï0
;

464 
li°_hód
 
	mï_li°
;

465 
usb_devi˚_•ìd
 
	m•ìd
;

466 
	mis_duÆ•ìd
:1;

467 
	mis_Ÿg
:1;

468 
	mis_a_≥rùhîÆ
:1;

469 
	mb_h≈_íabÀ
:1;

470 
	ma_h≈_suµ‹t
:1;

471 
	ma_Æt_h≈_suµ‹t
:1;

472 c⁄° *
	m«me
;

473 
devi˚
 
	mdev
;

476 
ölöe
 
	$£t_gadgë_d©a
(
usb_gadgë
 *
gadgë
, *
d©a
)

478 
gadgë
->
dev
.
drivî_d©a
 = 
d©a
;

479 
	}
}

481 
ölöe
 *
	$gë_gadgë_d©a
(
usb_gadgë
 *
gadgë
)

483  
gadgë
->
dev
.
drivî_d©a
;

484 
	}
}

486 
ölöe
 
usb_gadgë
 *
	$dev_to_usb_gadgë
(
devi˚
 *
dev
)

488  
	`c⁄èöî_of
(
dev
, 
usb_gadgë
, dev);

489 
	}
}

492 
	#gadgë_f‹_óch_ï
(
tmp
, 
gadgë
) \

493 
	`li°_f‹_óch_íåy
(
tmp
, &(
gadgë
)->
ï_li°
,Ép_li°)

	)

500 
ölöe
 
	$gadgë_is_duÆ•ìd
(
usb_gadgë
 *
g
)

502 #ifde‡
CONFIG_USB_GADGET_DUALSPEED


510 
	}
}

519 
ölöe
 
	$gadgë_is_Ÿg
(
usb_gadgë
 *
g
)

521 #ifde‡
CONFIG_USB_OTG


522  
g
->
is_Ÿg
;

526 
	}
}

535 
ölöe
 
	$usb_gadgë_‰ame_numbî
(
usb_gadgë
 *
gadgë
)

537  
gadgë
->
›s
->
	`gë_‰ame
(gadget);

538 
	}
}

553 
ölöe
 
	$usb_gadgë_wakeup
(
usb_gadgë
 *
gadgë
)

555 i‡(!
gadgë
->
›s
->
wakeup
)

556  -
EOPNOTSUPP
;

557  
gadgë
->
›s
->
	`wakeup
(gadget);

558 
	}
}

569 
ölöe
 
	$usb_gadgë_£t_£lÂowîed
(
usb_gadgë
 *
gadgë
)

571 i‡(!
gadgë
->
›s
->
£t_£lÂowîed
)

572  -
EOPNOTSUPP
;

573  
gadgë
->
›s
->
	`£t_£lÂowîed
(gadget, 1);

574 
	}
}

586 
ölöe
 
	$usb_gadgë_˛ór_£lÂowîed
(
usb_gadgë
 *
gadgë
)

588 i‡(!
gadgë
->
›s
->
£t_£lÂowîed
)

589  -
EOPNOTSUPP
;

590  
gadgë
->
›s
->
	`£t_£lÂowîed
(gadget, 0);

591 
	}
}

605 
ölöe
 
	$usb_gadgë_vbus_c⁄√˘
(
usb_gadgë
 *
gadgë
)

607 i‡(!
gadgë
->
›s
->
vbus_£ssi⁄
)

608  -
EOPNOTSUPP
;

609  
gadgë
->
›s
->
	`vbus_£ssi⁄
(gadget, 1);

610 
	}
}

624 
ölöe
 
	$usb_gadgë_vbus_døw
(
usb_gadgë
 *
gadgë
, 
mA
)

626 i‡(!
gadgë
->
›s
->
vbus_døw
)

627  -
EOPNOTSUPP
;

628  
gadgë
->
›s
->
	`vbus_døw
(gadgë, 
mA
);

629 
	}
}

641 
ölöe
 
	$usb_gadgë_vbus_disc⁄√˘
(
usb_gadgë
 *
gadgë
)

643 i‡(!
gadgë
->
›s
->
vbus_£ssi⁄
)

644  -
EOPNOTSUPP
;

645  
gadgë
->
›s
->
	`vbus_£ssi⁄
(gadget, 0);

646 
	}
}

659 
ölöe
 
	$usb_gadgë_c⁄√˘
(
usb_gadgë
 *
gadgë
)

661 i‡(!
gadgë
->
›s
->
puŒup
)

662  -
EOPNOTSUPP
;

663  
gadgë
->
›s
->
	`puŒup
(gadget, 1);

664 
	}
}

681 
ölöe
 
	$usb_gadgë_disc⁄√˘
(
usb_gadgë
 *
gadgë
)

683 i‡(!
gadgë
->
›s
->
puŒup
)

684  -
EOPNOTSUPP
;

685  
gadgë
->
›s
->
	`puŒup
(gadget, 0);

686 
	}
}

759 
	susb_gadgë_drivî
 {

760 
usb_devi˚_•ìd
 
	m•ìd
;

761 (*
	mböd
)(
	musb_gadgë
 *);

762 (*
	munböd
)(
	musb_gadgë
 *);

763 (*
	m£tup
)(
	musb_gadgë
 *,

764 c⁄° 
	musb_˘æªque°
 *);

765 (*
	mdisc⁄√˘
)(
	musb_gadgë
 *);

766 (*
	msu•íd
)(
	musb_gadgë
 *);

767 (*
	mªsume
)(
	musb_gadgë
 *);

791 
usb_gadgë_ªgi°î_drivî
(
usb_gadgë_drivî
 *
drivî
);

806 
usb_gadgë_uƒegi°î_drivî
(
usb_gadgë_drivî
 *
drivî
);

820 
	susb_°rög
 {

821 
u8
 
	mid
;

822 c⁄° *
	ms
;

833 
	susb_gadgë_°rögs
 {

834 
u16
 
	mœnguage
;

835 
usb_°rög
 *
	m°rögs
;

839 
usb_gadgë_gë_°rög
(
usb_gadgë_°rögs
 *
èbÀ
, 
id
, 
u8
 *
buf
);

846 
usb_des¸ùt‹_fûlbuf
(*, ,

847 c⁄° 
usb_des¸ùt‹_hódî
 **);

850 
usb_gadgë_c⁄fig_buf
(c⁄° 
usb_c⁄fig_des¸ùt‹
 *
c⁄fig
,

851 *
buf
, 
buÊí
, c⁄° 
usb_des¸ùt‹_hódî
 **
desc
);

857 
usb_ï
 *
usb_ï_autoc⁄fig
(
usb_gadgë
 *,

858 
usb_ídpoöt_des¸ùt‹
 *);

860 
usb_ï_autoc⁄fig_ª£t
(
usb_gadgë
 *);

862 
usb_gadgë_h™dÀ_öãºu±s
();

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/usb/musb.h

10 #i‚de‡
__LINUX_USB_MUSB_H


11 
	#__LINUX_USB_MUSB_H


	)

13 #i‚de‡
__dïªˇãd


14 
	#__dïªˇãd


	)

20 
	emusb_mode
 {

21 
	mMUSB_UNDEFINED
 = 0,

22 
	mMUSB_HOST
,

23 
	mMUSB_PERIPHERAL
,

24 
	mMUSB_OTG


27 
	g˛k
;

29 
	emusb_fifo_°yÀ
 {

30 
	mFIFO_RXTX
,

31 
	mFIFO_TX
,

32 
	mFIFO_RX


33 } 
__©åibuã__
 ((
∑cked
));

35 
	emusb_buf_mode
 {

36 
	mBUF_SINGLE
,

37 
	mBUF_DOUBLE


38 } 
__©åibuã__
 ((
∑cked
));

40 
	smusb_fifo_cfg
 {

41 
u8
 
	mhw_ï_num
;

42 
musb_fifo_°yÀ
 
	m°yÀ
;

43 
musb_buf_mode
 
	mmode
;

44 
u16
 
	mmax∑ckë
;

47 
	#MUSB_EP_FIFO
(
ï
, 
°
, 
m
, 
pkt
) \

49 .
hw_ï_num
 = 
ï
, \

50 .
°yÀ
 = 
°
, \

51 .
mode
 = 
m
, \

52 .
max∑ckë
 = 
pkt
, \

53 }

	)

55 
	#MUSB_EP_FIFO_SINGLE
(
ï
, 
°
, 
pkt
) \

56 
	`MUSB_EP_FIFO
(
ï
, 
°
, 
BUF_SINGLE
, 
pkt
)

	)

58 
	#MUSB_EP_FIFO_DOUBLE
(
ï
, 
°
, 
pkt
) \

59 
	`MUSB_EP_FIFO
(
ï
, 
°
, 
BUF_DOUBLE
, 
pkt
)

	)

61 
	smusb_hdrc_ïs_bôs
 {

62 c⁄° 
	m«me
[16];

63 
u8
 
	mbôs
;

66 
	smusb_hdrc_c⁄fig
 {

67 
musb_fifo_cfg
 *
	mfifo_cfg
;

68 
	mfifo_cfg_size
;

71 
	mmu…ùoöt
:1;

72 
	mdyn_fifo
:1 
__dïªˇãd
;

73 
	mso·_c⁄
:1 
__dïªˇãd
;

74 
	mutm_16
:1 
__dïªˇãd
;

75 
	mbig_ídün
:1;

76 
	mmu…_bulk_tx
:1;

77 
	mmu…_bulk_rx
:1;

78 
	mhigh_iso_tx
:1;

79 
	mhigh_iso_rx
:1;

80 
	mdma
:1 
__dïªˇãd
;

81 
	mvíd‹_ªq
:1 
__dïªˇãd
;

83 
u8
 
	mnum_ïs
;

84 
u8
 
dma_ch™√ls
 
	m__dïªˇãd
;

85 
u8
 
	mdyn_fifo_size
;

86 
u8
 
víd‹_˘æ
 
	m__dïªˇãd
;

87 
u8
 
víd‹_°©
 
	m__dïªˇãd
;

88 
u8
 
dma_ªq_ch™
 
	m__dïªˇãd
;

89 
u8
 
	møm_bôs
;

91 
musb_hdrc_ïs_bôs
 *
ïs_bôs
 
	m__dïªˇãd
;

92 #ifde‡
CONFIG_BLACKFIN


94 
	mgpio_vr£l
;

95 
	mgpio_vr£l_a˘ive
;

97 
	m˛kö
;

102 
	smusb_hdrc_∂©f‹m_d©a
 {

104 
u8
 
	mmode
;

107 c⁄° *
	m˛ock
;

110 (*
	m£t_vbus
)(
devi˚
 *
	mdev
, 
	mis_⁄
);

113 
u8
 
	mpowî
;

116 
u8
 
	mmö_powî
;

119 
u8
 
	mpŸpgt
;

122 
	mextvbus
:1;

125 (*
	m£t_powî
)(
	m°©e
);

128 
musb_hdrc_c⁄fig
 *
	mc⁄fig
;

131 *
	mbﬂrd_d©a
;

134 c⁄° *
	m∂©f‹m_›s
;

140 
	#TUSB6010_OSCCLK_60
 16667

	)

141 
	#TUSB6010_REFCLK_24
 41667

	)

142 
	#TUSB6010_REFCLK_19
 52083

	)

144 #ifdef 
CONFIG_ARCH_OMAP2


146 
__öô
 
tusb6010_£tup_öãrÁ˚
(

147 
musb_hdrc_∂©f‹m_d©a
 *
d©a
,

148 
ps_ªf˛k
, 
waôpö
,

149 
async_cs
, 
sync_cs
,

150 
úq
, 
dmach™
);

152 
tusb6010_∂©f‹m_ªtime
(
is_ªf˛k
);

159 
musb_ªgi°î
(
musb_hdrc_∂©f‹m_d©a
 *
∂©
, *
bd©a
,

160 *
˘l_ªgs
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/usb/xhci-omap.h

10 #i‚de‡
_ASM_ARCH_XHCI_OMAP_H_


11 
	#_ASM_ARCH_XHCI_OMAP_H_


	)

13 #ifde‡
CONFIG_DRA7XX


14 
	#OMAP_XHCI_BASE
 0x488d0000

	)

15 
	#OMAP_OCP1_SCP_BASE
 0x4A081000

	)

16 
	#OMAP_OTG_WRAPPER_BASE
 0x488c0000

	)

17 #ñi‡
deföed
 
CONFIG_AM43XX


18 
	#OMAP_XHCI_BASE
 0x483d0000

	)

19 
	#OMAP_OCP1_SCP_BASE
 0x483E8000

	)

20 
	#OMAP_OTG_WRAPPER_BASE
 0x483dc100

	)

23 
	#OMAP_XHCI_BASE
 0x4a030000

	)

24 
	#OMAP_OCP1_SCP_BASE
 0x4a084c00

	)

25 
	#OMAP_OTG_WRAPPER_BASE
 0x4A020000

	)

29 
	#PLL_REGM_MASK
 0x001FFE00

	)

30 
	#PLL_REGM_SHIFT
 0x9

	)

31 
	#PLL_REGM_F_MASK
 0x0003FFFF

	)

32 
	#PLL_REGM_F_SHIFT
 0x0

	)

33 
	#PLL_REGN_MASK
 0x000001FE

	)

34 
	#PLL_REGN_SHIFT
 0x1

	)

35 
	#PLL_SELFREQDCO_MASK
 0x0000000E

	)

36 
	#PLL_SELFREQDCO_SHIFT
 0x1

	)

37 
	#PLL_SD_MASK
 0x0003FC00

	)

38 
	#PLL_SD_SHIFT
 0x9

	)

39 
	#SET_PLL_GO
 0x1

	)

40 
	#PLL_TICOPWDN
 0x10000

	)

41 
	#PLL_LOCK
 0x2

	)

42 
	#PLL_IDLE
 0x1

	)

44 
	#USB3_PWRCTL_CLK_CMD_MASK
 0x3FE000

	)

45 
	#USB3_PWRCTL_CLK_FREQ_MASK
 0xFFC

	)

46 
	#USB3_PHY_PARTIAL_RX_POWERON
 (1 << 6)

	)

47 
	#USB3_PHY_RX_POWERON
 (1 << 14)

	)

48 
	#USB3_PHY_TX_POWERON
 (1 << 15)

	)

49 
	#USB3_PHY_TX_RX_POWERON
 (
USB3_PHY_RX_POWERON
 | 
USB3_PHY_TX_POWERON
)

	)

50 
	#USB3_PWRCTL_CLK_CMD_SHIFT
 14

	)

51 
	#USB3_PWRCTL_CLK_FREQ_SHIFT
 22

	)

54 
	#USBOTGSS_WRAPRESET
 (1 << 17)

	)

55 
	#USBOTGSS_DMADISABLE
 (1 << 16)

	)

56 
	#USBOTGSS_STANDBYMODE_NO_STANDBY
 (1 << 4)

	)

57 
	#USBOTGSS_STANDBYMODE_SMRT
 (1 << 5)

	)

58 
	#USBOTGSS_STANDBYMODE_SMRT_WKUP
 (0x3 << 4)

	)

59 
	#USBOTGSS_IDLEMODE_NOIDLE
 (1 << 2)

	)

60 
	#USBOTGSS_IDLEMODE_SMRT
 (1 << 3)

	)

61 
	#USBOTGSS_IDLEMODE_SMRT_WKUP
 (0x3 << 2)

	)

64 
	#USBOTGSS_COREIRQ_EN
 (1 << 0)

	)

67 
	#USBOTGSS_IRQ_SET_1_IDPULLUP_FALL_EN
 (1 << 0)

	)

68 
	#USBOTGSS_IRQ_SET_1_DISCHRGVBUS_FALL_EN
 (1 << 3)

	)

69 
	#USBOTGSS_IRQ_SET_1_CHRGVBUS_FALL_EN
 (1 << 4)

	)

70 
	#USBOTGSS_IRQ_SET_1_DRVVBUS_FALL_EN
 (1 << 5)

	)

71 
	#USBOTGSS_IRQ_SET_1_IDPULLUP_RISE_EN
 (1 << 8)

	)

72 
	#USBOTGSS_IRQ_SET_1_DISCHRGVBUS_RISE_EN
 (1 << 11)

	)

73 
	#USBOTGSS_IRQ_SET_1_CHRGVBUS_RISE_EN
 (1 << 12)

	)

74 
	#USBOTGSS_IRQ_SET_1_DRVVBUS_RISE_EN
 (1 << 13)

	)

75 
	#USBOTGSS_IRQ_SET_1_OEVT_EN
 (1 << 16)

	)

76 
	#USBOTGSS_IRQ_SET_1_DMADISABLECLR_EN
 (1 << 17)

	)

81 
	som≠_dwc_wøµî
 {

82 
u32
 
	mªvisi⁄
;

84 
u32
 
	mª£rve_1
[3];

86 
u32
 
	msysc⁄fig
;

88 
u32
 
	mª£rve_2
[3];

89 
u16
 
	mª£rve_3
;

91 
u32
 
	múq°©us_øw_0
;

92 
u32
 
	múq°©us_0
;

93 
u32
 
	múqíabÀ_£t_0
;

94 
u32
 
	múqíabÀ_˛r_0
;

96 
u32
 
	múq°©us_øw_1
;

97 
u32
 
	múq°©us_1
;

98 
u32
 
	múqíabÀ_£t_1
;

99 
u32
 
	múqíabÀ_˛r_1
;

101 
u32
 
	mª£rve_4
[15];

103 
u32
 
	mutmi_Ÿg_˘æ
;

104 
u32
 
	mutmi_Ÿg_°©us
;

106 
u32
 
	mª£rve_5
[30];

108 
u32
 
	mmøm_off£t
;

109 
u32
 
	mÊadj
;

110 
u32
 
	mdbg_c⁄fig
;

111 
u32
 
	mdbg_d©a
;

112 
u32
 
	mdev_ebc_í
;

116 
	som≠_usb3_phy
 {

117 
u32
 
	mª£rve1
;

118 
u32
 
	m∂l_°©us
;

119 
u32
 
	m∂l_go
;

120 
u32
 
	m∂l_c⁄fig_1
;

121 
u32
 
	m∂l_c⁄fig_2
;

122 
u32
 
	m∂l_c⁄fig_3
;

123 
u32
 
	m∂l_ssc_c⁄fig_1
;

124 
u32
 
	m∂l_ssc_c⁄fig_2
;

125 
u32
 
	m∂l_c⁄fig_4
;

128 
	som≠_xhci
 {

129 
om≠_dwc_wøµî
 *
	mŸg_wøµî
;

130 
om≠_usb3_phy
 *
	musb3_phy
;

131 
xhci_hc¸
 *
	mhcd
;

132 
dwc3
 *
	mdwc3_ªg
;

136 
om≠_íabÀ_phy
(
om≠_xhci
 *
om≠
);

137 
om≠_ª£t_usb_phy
(
dwc3
 *
dwc3_ªg
);

138 
usb_phy_powî
(
⁄
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/lists.h

1 #i‚de‡
_LISTS_H_


2 
	#_LISTS_H_


	)

4 
	#LIST_START
 -1

	)

5 
	#LIST_END
 0

	)

10 *
	m±r
;

11 
	msize
;

12 } 
	tH™dÀRec‹d
;

14 **
	tH™dÀ
;

16 (*
	tCom∑ªFun˘i⁄
)(*
	td©a1
, *
	td©a2
) ;

18 
	sLi°Såu˘Tag


20 
sig«tuª
;

21 
≥r˚¡In¸ó£
;

22 
möNumIãmsIn¸ó£
;

23 
li°Size
;

24 
ôemSize
;

25 
numIãms
;

26 
ôemLi°
[1];

27 } 
	tLi°Såu˘
;

29 
Li°Såu˘Tag
 **
	tli°_t
;

30 –* 
	tLi°Aµliˇti⁄Func
)(
	tödex
, *
	t±rToIãm
, *
	tˇŒbackD©a
);

33 
li°_t
 
	`Li°Cª©e
(
ñemítSize
);

34 
	`Li°NumIãms
(
li°_t
 
li°
);

35 
	`Li°In£πIãm
(
li°_t
 
li°
, *
±rToIãm
, 
ôemPosôi⁄
);

36 
	`Li°In£πIãms
(
li°_t
 
li°
, *
±rToIãms
, 
fú°IãmPosôi⁄
, 
numIãmsToIn£π
);

37 
	`Li°Di•o£
(
li°_t
 
li°
);

38 *
	`Li°GëPåToIãm
(
li°_t
 
li°
, 
ôemPosôi⁄
);

39 
	`Li°RemoveIãm
(
li°_t
 
li°
, *
ôemDe°ö©i⁄
, 
ôemPosôi⁄
);

40 
	`Li°RemoveIãms
(
li°_t
 
li°
, *
ôemsDe°ö©i⁄
, 
fú°IãmPosôi⁄
, 
numIãmsToRemove
);

43 
	`Li°Di•o£PåLi°
(
li°_t
 
li°
);

44 
	`Li°GëIãm
(
li°_t
 
li°
, *
ôemDe°ö©i⁄
, 
ôemPosôi⁄
);

45 
	`Li°Rïœ˚Iãm
(
li°_t
 
li°
, *
±rToIãm
, 
ôemPosôi⁄
);

46 
	`Li°RemoveIãm
(
li°_t
 
li°
, *
ôemDe°ö©i⁄
, 
ôemPosôi⁄
);

47 
	`Li°GëIãms
(
li°_t
 
li°
, *
ôemsDe°ö©i⁄
, 
fú°IãmPosôi⁄
, 
numIãmsToGë
);

48 
	`Li°Rïœ˚Iãms
(
li°_t
 
li°
, *
±rToIãms
, 
fú°IãmPosôi⁄
, 
numIãmsToRïœ˚
);

49 
	`Li°RemoveIãms
(
li°_t
 
li°
, *
ôemsDe°ö©i⁄
, 
fú°IãmPosôi⁄
, 
numIãmsToRemove
);

50 
li°_t
 
	`Li°C›y
÷i°_à
‹igöÆLi°
);

51 
	`Li°Aµíd
(
li°_t
 
li°1
,Üi°_à
li°2
);

52 
	`Li°CÀ¨
(
li°_t
 
li°
);

53 
	`Li°EquÆ
(
li°_t
 
li°1
,Üi°_à
li°2
);

54 
	`Li°In£πInOrdî
(
li°_t
 
li°
, *
±rToIãm
, 
Com∑ªFun˘i⁄
 
com∑ªFun˘i⁄
);

55 *
	`Li°GëD©aPå
(
li°_t
 
li°
);

56 
	`Li°AµlyToEach
(
li°_t
 
li°
, 
as˚ndög
, 
Li°Aµliˇti⁄Func
 
funcToAµly
, *
ˇŒbackD©a
);

59 
	`Li°FödIãm
(
li°_t
 
li°
, *
±rToIãm
, 
°¨tögPosôi⁄
, 
Com∑ªFun˘i⁄
 
com∑ªFun˘i⁄
);

60 
	`Li°RemoveDu∂iˇãs
(
li°_t
 
li°
, 
Com∑ªFun˘i⁄
 
com∑ªFun˘i⁄
);

61 
	`Li°BöSórch
(
li°_t
 
li°
, *
ôemPå
, 
Com∑ªFun˘i⁄
 
com∑ªFun˘i⁄
);

62 
	`Li°QuickS‹t
(
li°_t
 
li°
, 
Com∑ªFun˘i⁄
 
com∑ªFun˘i⁄
);

63 
	`Li°HópS‹t
(
li°_t
 
li°
, 
Com∑ªFun˘i⁄
 
com∑ªFun˘i⁄
);

64 
	`Li°In£πi⁄S‹t
(
li°_t
 
li°
, 
Com∑ªFun˘i⁄
 
com∑ªFun˘i⁄
);

65 
	`Li°IsS‹ãd
(
li°_t
 
li°
, 
Com∑ªFun˘i⁄
 
com∑ªFun˘i⁄
);

68 
	`Li°SëAŒoˇti⁄Pﬁicy
(
li°_t
 
li°
, 
möIãmsPîAŒoc
, 
≥r˚¡In¸ó£PîAŒoc
);

69 
	`Li°Com∑˘
(
li°_t
 
li°
);

70 
	`Li°PªAŒoˇã
(
li°_t
 
li°
, 
numIãms
);

71 
	`Li°GëIãmSize
(
li°_t
 
li°
);

72 
	`GëI¡Li°FromP¨mInfo
(
va_li°
 
∑rmInfo
, 
numI¡egîs
, 
li°_t
 *
öãgîLi°
);

73 
	`Li°In£πA·îIãm
(
li°_t
 
li°
, *
±rToIãm
, *
±rToIãmToIn£πA·î
, 
Com∑ªFun˘i⁄
 
com∑ªFun˘i⁄
);

74 
	`Li°In£πBef‹eIãm
(
li°_t
 
li°
, *
±rToIãm
, *
±rToIãmToIn£πBef‹e
, 
Com∑ªFun˘i⁄
 
com∑ªFun˘i⁄
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/logbuff.h

23 #i‚de‡
_LOGBUFF_H


24 
	#_LOGBUFF_H


	)

26 #ifde‡
CONFIG_LOGBUFFER


28 
	#LOGBUFF_LEN
 (16384Ë

	)

29 
	#LOGBUFF_MASK
 (
LOGBUFF_LEN
-1)

	)

30 
	#LOGBUFF_OVERHEAD
 (4096Ë

	)

31 
	#LOGBUFF_RESERVE
 (
LOGBUFF_LEN
+
LOGBUFF_OVERHEAD
)

	)

33 
	#LOGBUFF_INITIALIZED
 (1<<31)

	)

35 
drv_logbuff_öô
 ();

36 
logbuff_öô_±rs
 ();

37 
logbuff_log
(*
msg
);

38 
logbuff_ª£t
 ();

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/lzma/LzmaDec.h

26 #i‚de‡
__LZMADEC_H__FAKE__


27 
	#__LZMADEC_H__FAKE__


	)

29 
	~"../../lib_gíîic/LzmaDec.h
"

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/lzma/LzmaTools.h

26 #i‚de‡
__LZMATOOLS_H__FAKE__


27 
	#__LZMATOOLS_H__FAKE__


	)

29 
	~"../../lib_gíîic/LzmaToﬁs.h
"

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/lzma/LzmaTypes.h

26 #i‚de‡
__TYPES_H__FAKE__


27 
	#__TYPES_H__FAKE__


	)

32 
	#Byã
 
LZByã


	)

34 
	~"../../lib_gíîic/Ty≥s.h
"

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/malloc.h

223 #i‚de‡
__STD_C


224 #ifde‡
__STDC__


225 
	#__STD_C
 1

	)

227 #i‡
__˝lu•lus


228 
	#__STD_C
 1

	)

230 
	#__STD_C
 0

	)

235 #i‚de‡
Void_t


236 #i‡(
__STD_C
 || 
deföed
(
WIN32
))

237 
	#Void_t
 

	)

239 
	#Void_t
 

	)

243 #i‡
__STD_C


244 
	~<löux/°ddef.h
>

246 
	~<sys/ty≥s.h
>

249 #ifde‡
__˝lu•lus


254 
	~<°dio.h
>

287 #ifde‡
DEBUG


289 
	#as£π
(
x
Ë(()0)

	)

291 
	#as£π
(
x
Ë(()0)

	)

304 #i‚de‡
INTERNAL_SIZE_T


305 
	#INTERNAL_SIZE_T
 
size_t


	)

325 #ifde‡
WIN32


326 
	#MORECORE
 
wsbrk


	)

327 
	#HAVE_MMAP
 0

	)

329 
	#LACKS_UNISTD_H


	)

330 
	#LACKS_SYS_PARAM_H


	)

340 
	#WIN32_LEAN_AND_MEAN


	)

341 
	~<wödows.h
>

358 
	#HAVE_MEMCPY


	)

360 #i‚de‡
USE_MEMCPY


361 #ifde‡
HAVE_MEMCPY


362 
	#USE_MEMCPY
 1

	)

364 
	#USE_MEMCPY
 0

	)

368 #i‡(
__STD_C
 || 
deföed
(
HAVE_MEMCPY
))

370 #i‡
__STD_C


371 * 
mem£t
(*, , 
size_t
);

372 * 
mem˝y
(*, c⁄° *, 
size_t
);

374 #ifde‡
WIN32


378 
Void_t
* 
mem£t
();

379 
Void_t
* 
mem˝y
();

384 #i‡
USE_MEMCPY


390 
	#MALLOC_ZERO
(
ch¨p
, 
nbyãs
) \

392 
INTERNAL_SIZE_T
 
mzsz
 = (
nbyãs
); \

393 if(
mzsz
 <= 9*(mzsz)) { \

394 
INTERNAL_SIZE_T
* 
mz
 = (INTERNAL_SIZE_T*Ë(
ch¨p
); \

395 if(
mzsz
 >5*(mzsz)Ë{ *
mz
++ = 0; \

396 *
mz
++ = 0; \

397 if(
mzsz
 >7*(mzsz)Ë{ *
mz
++ = 0; \

398 *
mz
++ = 0; \

399 if(
mzsz
 >9*(mzsz)Ë{ *
mz
++ = 0; \

400 *
mz
++ = 0; }}} \

401 *
mz
++ = 0; \

402 *
mz
++ = 0; \

403 *
mz
 = 0; \

404 } 
	`mem£t
((
ch¨p
), 0, 
mzsz
); \

405 } 0)

	)

407 
	#MALLOC_COPY
(
de°
,
§c
,
nbyãs
) \

409 
INTERNAL_SIZE_T
 
mcsz
 = (
nbyãs
); \

410 if(
mcsz
 <= 9*(mcsz)) { \

411 
INTERNAL_SIZE_T
* 
mc§c
 = (INTERNAL_SIZE_T*Ë(
§c
); \

412 
INTERNAL_SIZE_T
* 
mcd°
 = (INTERNAL_SIZE_T*Ë(
de°
); \

413 if(
mcsz
 >5*(mcsz)Ë{ *
mcd°
++ = *
mc§c
++; \

414 *
mcd°
++ = *
mc§c
++; \

415 if(
mcsz
 >7*(mcsz)Ë{ *
mcd°
++ = *
mc§c
++; \

416 *
mcd°
++ = *
mc§c
++; \

417 if(
mcsz
 >9*(mcsz)Ë{ *
mcd°
++ = *
mc§c
++; \

418 *
mcd°
++ = *
mc§c
++; }}} \

419 *
mcd°
++ = *
mc§c
++; \

420 *
mcd°
++ = *
mc§c
++; \

421 *
mcd°
 = *
mc§c
 ; \

422 } 
	`mem˝y
(
de°
, 
§c
, 
mcsz
); \

423 } 0)

	)

429 
	#MALLOC_ZERO
(
ch¨p
, 
nbyãs
) \

431 
INTERNAL_SIZE_T
* 
mzp
 = (INTERNAL_SIZE_T*)(
ch¨p
); \

432 
m˘mp
 = (
nbyãs
)/(
INTERNAL_SIZE_T
), 
m˙
; \

433 i‡(
m˘mp
 < 8Ë
m˙
 = 0; { mcn = (mctmp-1)/8; mctmp %= 8; } \

434 
m˘mp
) { \

435 0: ;;Ë{ *
mzp
++ = 0; \

436 7: *
mzp
++ = 0; \

437 6: *
mzp
++ = 0; \

438 5: *
mzp
++ = 0; \

439 4: *
mzp
++ = 0; \

440 3: *
mzp
++ = 0; \

441 2: *
mzp
++ = 0; \

442 1: *
mzp
++ = 0; if(
m˙
 <= 0) ; mcn--; } \

444 } 0)

	)

446 
	#MALLOC_COPY
(
de°
,
§c
,
nbyãs
) \

448 
INTERNAL_SIZE_T
* 
mc§c
 = (INTERNAL_SIZE_T*Ë
§c
; \

449 
INTERNAL_SIZE_T
* 
mcd°
 = (INTERNAL_SIZE_T*Ë
de°
; \

450 
m˘mp
 = (
nbyãs
)/(
INTERNAL_SIZE_T
), 
m˙
; \

451 i‡(
m˘mp
 < 8Ë
m˙
 = 0; { mcn = (mctmp-1)/8; mctmp %= 8; } \

452 
m˘mp
) { \

453 0: ;;Ë{ *
mcd°
++ = *
mc§c
++; \

454 7: *
mcd°
++ = *
mc§c
++; \

455 6: *
mcd°
++ = *
mc§c
++; \

456 5: *
mcd°
++ = *
mc§c
++; \

457 4: *
mcd°
++ = *
mc§c
++; \

458 3: *
mcd°
++ = *
mc§c
++; \

459 2: *
mcd°
++ = *
mc§c
++; \

460 1: *
mcd°
++ = *
mc§c
++; if(
m˙
 <= 0) ; mcn--; } \

462 } 0)

	)

478 #unde‡
HAVE_MMAP


495 #unde‡
HAVE_MREMAP


497 #i‡
HAVE_MMAP


499 
	~<uni°d.h
>

500 
	~<f˙é.h
>

501 
	~<sys/mm™.h
>

503 #i‡!
deföed
(
MAP_ANONYMOUS
Ë&& deföed(
MAP_ANON
)

504 
	#MAP_ANONYMOUS
 
MAP_ANON


	)

517 
	#LACKS_UNISTD_H


	)

518 
	#mÆloc_gë∑gesize
 4096

	)

520 #i‚de‡
LACKS_UNISTD_H


521 
	~<uni°d.h
>

524 #i‚de‡
mÆloc_gë∑gesize


525 #ifde‡
_SC_PAGESIZE


526 #i‚de‡
_SC_PAGE_SIZE


527 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

530 #ifde‡
_SC_PAGE_SIZE


531 
	#mÆloc_gë∑gesize
 
	`sysc⁄f
(
_SC_PAGE_SIZE
)

	)

533 #i‡
deföed
(
BSD
Ë|| deföed(
DGUX
Ë|| deföed(
HAVE_GETPAGESIZE
)

534 
size_t
 
gë∑gesize
();

535 
	#mÆloc_gë∑gesize
 
	`gë∑gesize
()

	)

537 #ifde‡
WIN32


538 
	#mÆloc_gë∑gesize
 (4096Ë

	)

540 #i‚de‡
LACKS_SYS_PARAM_H


541 
	~<sys/∑øm.h
>

543 #ifde‡
EXEC_PAGESIZE


544 
	#mÆloc_gë∑gesize
 
EXEC_PAGESIZE


	)

546 #ifde‡
NBPG


547 #i‚de‡
CLSIZE


548 
	#mÆloc_gë∑gesize
 
NBPG


	)

550 
	#mÆloc_gë∑gesize
 (
NBPG
 * 
CLSIZE
)

	)

553 #ifde‡
NBPC


554 
	#mÆloc_gë∑gesize
 
NBPC


	)

556 #ifde‡
PAGESIZE


557 
	#mÆloc_gë∑gesize
 
PAGESIZE


	)

559 
	#mÆloc_gë∑gesize
 (4096Ë

	)

597 #i‡
HAVE_USR_INCLUDE_MALLOC_H


598 
	~"/u§/ö˛ude/mÆloc.h
"

603 
	smÆlöfo
 {

604 
	g¨ía
;

605 
	g‹dblks
;

606 
	gsmblks
;

607 
	ghblks
;

608 
	ghblkhd
;

609 
	gusmblks
;

610 
	gfsmblks
;

611 
	gu‹dblks
;

612 
	gf‹dblks
;

613 
	gkìpco°
;

618 
	#M_MXFAST
 1

	)

619 
	#M_NLBLKS
 2

	)

620 
	#M_GRAIN
 3

	)

621 
	#M_KEEP
 4

	)

627 
	#M_TRIM_THRESHOLD
 -1

	)

628 
	#M_TOP_PAD
 -2

	)

629 
	#M_MMAP_THRESHOLD
 -3

	)

630 
	#M_MMAP_MAX
 -4

	)

633 #i‚de‡
DEFAULT_TRIM_THRESHOLD


634 
	#DEFAULT_TRIM_THRESHOLD
 (128 * 1024)

	)

687 #i‚de‡
DEFAULT_TOP_PAD


688 
	#DEFAULT_TOP_PAD
 (0)

	)

720 #i‚de‡
DEFAULT_MMAP_THRESHOLD


721 
	#DEFAULT_MMAP_THRESHOLD
 (128 * 1024)

	)

763 #i‚de‡
DEFAULT_MMAP_MAX


764 #i‡
HAVE_MMAP


765 
	#DEFAULT_MMAP_MAX
 (64)

	)

767 
	#DEFAULT_MMAP_MAX
 (0)

	)

817 #ifde‡
INTERNAL_LINUX_C_LIB


819 #i‡
__STD_C


821 
Void_t
 * 
__deÁu…_m‹ec‹e_öô
 (
±rdiff_t
);

822 
	gVoid_t
 *(*
	g__m‹ec‹e
)(
	g±rdiff_t
Ë
__deÁu…_m‹ec‹e_öô
;

826 
Void_t
 * 
__deÁu…_m‹ec‹e_öô
 ();

827 
	gVoid_t
 *(*
	g__m‹ec‹e
)(Ë
__deÁu…_m‹ec‹e_öô
;

831 
	#MORECORE
 (*
__m‹ec‹e
)

	)

832 
	#MORECORE_FAILURE
 0

	)

833 
	#MORECORE_CLEARS
 1

	)

837 #i‡
__STD_C


838 
Void_t
* 
sbrk
(
±rdiff_t
);

840 
Void_t
* 
sbrk
();

843 #i‚de‡
MORECORE


844 
	#MORECORE
 
sbrk


	)

847 #i‚de‡
MORECORE_FAILURE


848 
	#MORECORE_FAILURE
 -1

	)

851 #i‚de‡
MORECORE_CLEARS


852 
	#MORECORE_CLEARS
 1

	)

857 #i‡
deföed
(
INTERNAL_LINUX_C_LIB
Ë&& deföed(
__ELF__
)

859 
	#cALLOc
 
__libc_ˇŒoc


	)

860 
	#fREe
 
__libc_‰ì


	)

861 
	#mALLOc
 
__libc_mÆloc


	)

862 
	#mEMALIGn
 
__libc_memÆign


	)

863 
	#rEALLOc
 
__libc_ªÆloc


	)

864 
	#vALLOc
 
__libc_vÆloc


	)

865 
	#pvALLOc
 
__libc_pvÆloc


	)

866 
	#mALLINFo
 
__libc_mÆlöfo


	)

867 
	#mALLOPt
 
__libc_mÆl›t


	)

869 #¥agm®
wók
 
ˇŒoc
 = 
__libc_ˇŒoc


870 #¥agm®
wók
 
‰ì
 = 
__libc_‰ì


871 #¥agm®
wók
 
c‰ì
 = 
__libc_‰ì


872 #¥agm®
wók
 
mÆloc
 = 
__libc_mÆloc


873 #¥agm®
wók
 
memÆign
 = 
__libc_memÆign


874 #¥agm®
wók
 
ªÆloc
 = 
__libc_ªÆloc


875 #¥agm®
wók
 
vÆloc
 = 
__libc_vÆloc


876 #¥agm®
wók
 
pvÆloc
 = 
__libc_pvÆloc


877 #¥agm®
wók
 
mÆlöfo
 = 
__libc_mÆlöfo


878 #¥agm®
wók
 
mÆl›t
 = 
__libc_mÆl›t


882 #ifde‡
USE_DL_PREFIX


883 
	#cALLOc
 
dlˇŒoc


	)

884 
	#fREe
 
dl‰ì


	)

885 
	#mALLOc
 
dlmÆloc


	)

886 
	#mEMALIGn
 
dlmemÆign


	)

887 
	#rEALLOc
 
dÃóŒoc


	)

888 
	#vALLOc
 
dlvÆloc


	)

889 
	#pvALLOc
 
dÕvÆloc


	)

890 
	#mALLINFo
 
dlmÆlöfo


	)

891 
	#mALLOPt
 
dlmÆl›t


	)

893 
	#cALLOc
 
ˇŒoc


	)

894 
	#fREe
 
‰ì


	)

895 
	#mALLOc
 
mÆloc


	)

896 
	#mEMALIGn
 
memÆign


	)

897 
	#rEALLOc
 
ªÆloc


	)

898 
	#vALLOc
 
vÆloc


	)

899 
	#pvALLOc
 
pvÆloc


	)

900 
	#mALLINFo
 
mÆlöfo


	)

901 
	#mALLOPt
 
mÆl›t


	)

908 #i‡
__STD_C


910 
Void_t
* 
mALLOc
(
size_t
);

911 
fREe
(
Void_t
*);

912 
Void_t
* 
rEALLOc
(Void_t*, 
size_t
);

913 
Void_t
* 
mEMALIGn
(
size_t
, size_t);

914 
Void_t
* 
vALLOc
(
size_t
);

915 
Void_t
* 
pvALLOc
(
size_t
);

916 
Void_t
* 
cALLOc
(
size_t
, size_t);

917 
c‰ì
(
Void_t
*);

918 
mÆloc_åim
(
size_t
);

919 
size_t
 
mÆloc_ußbÀ_size
(
Void_t
*);

920 
mÆloc_°©s
();

921 
mALLOPt
(, );

922 
mÆlöfo
 
mALLINFo
();

924 
Void_t
* 
mALLOc
();

925 
fREe
();

926 
Void_t
* 
rEALLOc
();

927 
Void_t
* 
mEMALIGn
();

928 
Void_t
* 
vALLOc
();

929 
Void_t
* 
pvALLOc
();

930 
Void_t
* 
cALLOc
();

931 
c‰ì
();

932 
mÆloc_åim
();

933 
size_t
 
mÆloc_ußbÀ_size
();

934 
mÆloc_°©s
();

935 
mALLOPt
();

936 
mÆlöfo
 
mALLINFo
();

940 #ifde‡
__˝lu•lus


	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/mk48t59.h

29 #i‡
deföed
(
CONFIG_RTC_MK48T59
Ë&& (
CONFIG_COMMANDS
 & 
CFG_CMD_DATE
)

31 
	#RTC_PORT_ADDR0
 
CFG_ISA_IO
 + 0x70

	)

32 
	#RTC_PORT_ADDR1
 
RTC_PORT_ADDR0
 + 0x1

	)

33 
	#RTC_PORT_DATA
 
CFG_ISA_IO
 + 0x76

	)

36 
	#RTC_SECONDS
 0x1FF9

	)

37 
	#RTC_MINUTES
 0x1FFA

	)

38 
	#RTC_HOURS
 0x1FFB

	)

39 
	#RTC_DAY_OF_WEEK
 0x1FFC

	)

40 
	#RTC_DAY_OF_MONTH
 0x1FFD

	)

41 
	#RTC_MONTH
 0x1FFE

	)

42 
	#RTC_YEAR
 0x1FFF

	)

44 
	#RTC_CONTROLA
 0x1FF8

	)

45 
	#RTC_CA_WRITE
 0x80

	)

46 
	#RTC_CA_READ
 0x40

	)

47 
	#RTC_CA_CALIB_SIGN
 0x20

	)

48 
	#RTC_CA_CALIB_MASK
 0x1f

	)

50 
	#RTC_CONTROLB
 0x1FF9

	)

51 
	#RTC_CB_STOP
 0x80

	)

53 
	#RTC_WATCHDOG
 0x1FF7

	)

54 
	#RTC_WDS
 0x80

	)

55 
	#RTC_WD_RB_16TH
 0x0

	)

56 
	#RTC_WD_RB_4TH
 0x1

	)

57 
	#RTC_WD_RB_1
 0x2

	)

58 
	#RTC_WD_RB_4
 0x3

	)

60 
πc_£t_w©chdog
(
mu…i
, 
ªs
);

61 *
nvøm_ªad
(*
de°
, c⁄° 
§c
, 
size_t
 
cou¡
);

62 
nvøm_wrôe
(
de°
, c⁄° *
§c
, 
size_t
 
cou¡
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/mtd/mtd-abi.h

7 #i‚de‡
__MTD_ABI_H__


8 
	#__MTD_ABI_H__


	)

10 
	#__u£r


	)

12 
	sîa£_öfo_u£r
 {

13 
uöt32_t
 
	m°¨t
;

14 
uöt32_t
 
	mÀngth
;

17 
	smtd_oob_buf
 {

18 
uöt32_t
 
	m°¨t
;

19 
uöt32_t
 
	mÀngth
;

20 
__u£r
 *
	m±r
;

23 
	#MTD_ABSENT
 0

	)

24 
	#MTD_RAM
 1

	)

25 
	#MTD_ROM
 2

	)

26 
	#MTD_NORFLASH
 3

	)

27 
	#MTD_NANDFLASH
 4

	)

28 
	#MTD_DATAFLASH
 6

	)

30 
	#MTD_WRITEABLE
 0x400

	)

31 
	#MTD_BIT_WRITEABLE
 0x800

	)

32 
	#MTD_NO_ERASE
 0x1000

	)

33 
	#MTD_STUPID_LOCK
 0x2000

	)

36 
	#MTD_CAP_ROM
 0

	)

37 
	#MTD_CAP_RAM
 (
MTD_WRITEABLE
 | 
MTD_BIT_WRITEABLE
 | 
MTD_NO_ERASE
)

	)

38 
	#MTD_CAP_NORFLASH
 (
MTD_WRITEABLE
 | 
MTD_BIT_WRITEABLE
)

	)

39 
	#MTD_CAP_NANDFLASH
 (
MTD_WRITEABLE
)

	)

42 
	#MTD_NANDECC_OFF
 0

43 
	#MTD_NANDECC_PLACE
 1

44 
	#MTD_NANDECC_AUTOPLACE
 2

45 
	#MTD_NANDECC_PLACEONLY
 3

46 
	#MTD_NANDECC_AUTOPL_USR
 4

47 

	)

49 
	#MTD_OTP_OFF
 0

	)

50 
	#MTD_OTP_FACTORY
 1

	)

51 
	#MTD_OTP_USER
 2

	)

53 
	smtd_öfo_u£r
 {

54 
uöt8_t
 
	mty≥
;

55 
uöt32_t
 
	mÊags
;

56 
uöt32_t
 
	msize
;

57 
uöt32_t
 
	mîa£size
;

58 
uöt32_t
 
	mwrôesize
;

59 
uöt32_t
 
	moobsize
;

62 
uöt32_t
 
	mec˘y≥
;

63 
uöt32_t
 
	meccsize
;

66 
	sªgi⁄_öfo_u£r
 {

67 
uöt32_t
 
	moff£t
;

69 
uöt32_t
 
	mîa£size
;

70 
uöt32_t
 
	mnumblocks
;

71 
uöt32_t
 
	mªgi⁄ödex
;

74 
	sŸp_öfo
 {

75 
uöt32_t
 
	m°¨t
;

76 
uöt32_t
 
	mÀngth
;

77 
uöt32_t
 
	mlocked
;

80 
	#MEMGETINFO
 
	`_IOR
('M', 1, 
mtd_öfo_u£r
)

	)

81 
	#MEMERASE
 
	`_IOW
('M', 2, 
îa£_öfo_u£r
)

	)

82 
	#MEMWRITEOOB
 
	`_IOWR
('M', 3, 
mtd_oob_buf
)

	)

83 
	#MEMREADOOB
 
	`_IOWR
('M', 4, 
mtd_oob_buf
)

	)

84 
	#MEMLOCK
 
	`_IOW
('M', 5, 
îa£_öfo_u£r
)

	)

85 
	#MEMUNLOCK
 
	`_IOW
('M', 6, 
îa£_öfo_u£r
)

	)

86 
	#MEMGETREGIONCOUNT
 
	`_IOR
('M', 7, )

	)

87 
	#MEMGETREGIONINFO
 
	`_IOWR
('M', 8, 
ªgi⁄_öfo_u£r
)

	)

88 
	#MEMSETOOBSEL
 
	`_IOW
('M', 9, 
«nd_ooböfo
)

	)

89 
	#MEMGETOOBSEL
 
	`_IOR
('M', 10, 
«nd_ooböfo
)

	)

90 
	#MEMGETBADBLOCK
 
	`_IOW
('M', 11, 
loff_t
)

	)

91 
	#MEMSETBADBLOCK
 
	`_IOW
('M', 12, 
loff_t
)

	)

92 
	#OTPSELECT
 
	`_IOR
('M', 13, )

	)

93 
	#OTPGETREGIONCOUNT
 
	`_IOW
('M', 14, )

	)

94 
	#OTPGETREGIONINFO
 
	`_IOW
('M', 15, 
Ÿp_öfo
)

	)

95 
	#OTPLOCK
 
	`_IOR
('M', 16, 
Ÿp_öfo
)

	)

96 
	#ECCGETLAYOUT
 
	`_IOR
('M', 17, 
«nd_ec˛ayout
)

	)

97 
	#ECCGETSTATS
 
	`_IOR
('M', 18, 
mtd_ecc_°©s
)

	)

98 
	#MTDFILEMODE
 
	`_IO
('M', 19)

	)

104 
	s«nd_ooböfo
 {

105 
uöt32_t
 
	mu£ecc
;

106 
uöt32_t
 
	meccbyãs
;

107 
uöt32_t
 
	moob‰ì
[8][2];

108 
uöt32_t
 
	mec˝os
[32];

111 
	s«nd_oob‰ì
 {

112 
uöt32_t
 
	moff£t
;

113 
uöt32_t
 
	mÀngth
;

116 
	#MTD_MAX_OOBFREE_ENTRIES
 8

	)

121 
	s«nd_ec˛ayout
 {

122 
uöt32_t
 
	meccbyãs
;

123 
uöt32_t
 
	mec˝os
[64];

124 
uöt32_t
 
	moobavaû
;

125 
«nd_oob‰ì
 
	moob‰ì
[
MTD_MAX_OOBFREE_ENTRIES
];

136 
	smtd_ecc_°©s
 {

137 
uöt32_t
 
	mc‹ª˘ed
;

138 
uöt32_t
 
	mÁûed
;

139 
uöt32_t
 
	mbadblocks
;

140 
uöt32_t
 
	mbbtblocks
;

146 
	emtd_fûe_modes
 {

147 
	mMTD_MODE_NORMAL
 = 
MTD_OTP_OFF
,

148 
	mMTD_MODE_OTP_FACTORY
 = 
MTD_OTP_FACTORY
,

149 
	mMTD_MODE_OTP_USER
 = 
MTD_OTP_USER
,

150 
	mMTD_MODE_RAW
,

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/nand_api.h

1 #i‚de‡
_NAND_API_H_


2 
	#_NAND_SPI_H_


	)

5 
ø«nd_öô
();

6 
«nd_ív_öô
();

8 
ø«nd_wrôe
(*
buf
, 
to
, 
Àn
);

9 
ø«nd_ªad
(*
buf
, 
‰om
, 
Àn
);

10 
ø«nd_îa£
(
offs
, 
Àn
);

11 
ø«nd_îa£_wrôe
(*
buf
, 
offs
, 
cou¡
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/net.h

12 #i‚de‡
__NET_H__


13 
	#__NET_H__


	)

15 #i‡
deföed
(
CONFIG_8xx
)

16 
	~<comm¥oc.h
>

17 #i‡!
deföed
(
CONFIG_NET_MULTI
)

18 #i‡
deföed
(
FEC_ENET
Ë|| deföed(
SCC_ENET
)

19 
	#CONFIG_NET_MULTI


	)

24 #i‡
deföed
(
CONFIG_MPC5xxx
)

25 #i‡!
deföed
(
CONFIG_NET_MULTI
)

26 #i‡
deföed
(
CONFIG_MPC5xxx_FEC
)

27 
	#CONFIG_NET_MULTI


	)

32 #i‡!
deföed
(
CONFIG_NET_MULTI
Ë&& (deföed(
CONFIG_8260
Ë|| deföed(
CONFIG_MPC8560
))

33 
	~<c⁄fig.h
>

34 #i‡
deföed
(
CONFIG_ETHER_ON_FCC
)

35 #i‡
deföed
(
CONFIG_ETHER_ON_SCC
)

38 
	#CONFIG_NET_MULTI


	)

39 #i‡(
CONFIG_ETHER_INDEX
 == 1)

40 
	#CONFIG_ETHER_ON_FCC1


	)

41 
	#CFG_CMXFCR_MASK1
 
CFG_CMXFCR_MASK


	)

42 
	#CFG_CMXFCR_VALUE1
 
CFG_CMXFCR_VALUE


	)

43 #ñi‡(
CONFIG_ETHER_INDEX
 == 2)

44 
	#CONFIG_ETHER_ON_FCC2


	)

45 
	#CFG_CMXFCR_MASK2
 
CFG_CMXFCR_MASK


	)

46 
	#CFG_CMXFCR_VALUE2
 
CFG_CMXFCR_VALUE


	)

47 #ñi‡(
CONFIG_ETHER_INDEX
 == 3)

48 
	#CONFIG_ETHER_ON_FCC3


	)

49 
	#CFG_CMXFCR_MASK3
 
CFG_CMXFCR_MASK


	)

50 
	#CFG_CMXFCR_VALUE3
 
CFG_CMXFCR_VALUE


	)

55 
	~<asm/byã‹dî.h
>

64 #ifde‡
CFG_RX_ETH_BUFFER


65 
	#PKTBUFSRX
 
CFG_RX_ETH_BUFFER


	)

67 
	#PKTBUFSRX
 8

	)

70 
	#PKTALIGN
 64

	)

71 
	#FLANK_TEST_SPX_ALIGNMENT
 16

	)

72 
ul⁄g
 
	tIPaddr_t
;

80 
	trxh™d_f
(
	tuch¨
 *, , , );

85 
	tth™d_f
();

87 
	#NAMESIZE
 16

	)

89 
	eëh_°©e_t
 {

90 
	mETH_STATE_INIT
,

91 
	mETH_STATE_PASSIVE
,

92 
	mETH_STATE_ACTIVE


95 
	sëh_devi˚
 {

96 
	m«me
[
NAMESIZE
];

97 
	míëaddr
[6];

98 
	mioba£
;

99 
	m°©e
;

101 (*
	möô
Ë(
	mëh_devi˚
*, 
	mbd_t
*);

102 (*
	m£nd
Ë(
	mëh_devi˚
*, vﬁ©ûê* 
	m∑chë
, 
	mÀngth
);

103 (*
	mªcv
Ë(
	mëh_devi˚
*);

104 (*
	mhÆt
Ë(
	mëh_devi˚
*);

106 
ëh_devi˚
 *
	m√xt
;

107 *
	m¥iv
;

110 
ëh_öôülize
(
bd_t
 *
bis
);

111 
ëh_ªgi°î
(
ëh_devi˚
* 
dev
);

112 
ëh_åy_™Ÿhî
(
fú°_ª°¨t
);

113 #ifde‡
CONFIG_NET_MULTI


114 
ëh_£t_cuºít
();

116 
ëh_devi˚
 *
ëh_gë_dev
();

117 
ëh_gë_dev_ödex
 ();

118 
ëh_£t_íëaddr
(
num
, * 
a
);

120 
ëh_öô
(
bd_t
 *
bis
);

121 
ëh_£nd
(vﬁ©ûê*
∑ckë
, 
Àngth
);

122 
ëh_rx
();

123 
ëh_hÆt
();

124 *
ëh_gë_«me
();

136 
uch¨
 
	më_de°
[6];

137 
uch¨
 
	më_§c
[6];

138 
ush‹t
 
	më_¥ŸÀn
;

139 
uch¨
 
	më_dßp
;

140 
uch¨
 
	më_sßp
;

141 
uch¨
 
	më_˘l
;

142 
uch¨
 
	më_¢≠1
;

143 
uch¨
 
	më_¢≠2
;

144 
uch¨
 
	më_¢≠3
;

145 
ush‹t
 
	më_¥Ÿ
;

146 } 
	tEthî√t_t
;

148 
	#ETHER_HDR_SIZE
 14

	)

149 
	#E802_HDR_SIZE
 22

	)

155 
uch¨
 
	mvë_de°
[6];

156 
uch¨
 
	mvë_§c
[6];

157 
ush‹t
 
	mvë_vœn_ty≥
;

158 
ush‹t
 
	mvë_èg
;

159 
ush‹t
 
	mvë_ty≥
;

160 } 
	tVLAN_Ethî√t_t
;

162 
	#VLAN_ETHER_HDR_SIZE
 18

	)

164 
	#PROT_IP
 0x0800

	)

165 
	#PROT_ARP
 0x0806

	)

166 
	#PROT_RARP
 0x8035

	)

167 
	#PROT_VLAN
 0x8100

	)

169 
	#IPPROTO_ICMP
 1

	)

170 
	#IPPROTO_UDP
 17

	)

176 
uch¨
 
	mù_hl_v
;

177 
uch¨
 
	mù_tos
;

178 
ush‹t
 
	mù_Àn
;

179 
ush‹t
 
	mù_id
;

180 
ush‹t
 
	mù_off
;

181 
uch¨
 
	mù_âl
;

182 
uch¨
 
	mù_p
;

183 
ush‹t
 
	mù_sum
;

184 
IPaddr_t
 
	mù_§c
;

185 
IPaddr_t
 
	mù_d°
;

186 
ush‹t
 
	mudp_§c
;

187 
ush‹t
 
	mudp_d°
;

188 
ush‹t
 
	mudp_Àn
;

189 
ush‹t
 
	mudp_xsum
;

190 } 
	tIP_t
;

192 
	#IP_HDR_SIZE_NO_UDP
 ( (
IP_t
Ë- 8)

	)

193 
	#IP_HDR_SIZE
 ( (
IP_t
))

	)

201 
ush‹t
 
	m¨_hrd
;

202 
	#ARP_ETHER
 1

	)

203 
ush‹t
 
	m¨_¥o
;

204 
uch¨
 
	m¨_h 
;

205 
uch¨
 
	m¨_∂n
;

206 
ush‹t
 
	m¨_›
;

207 
	#ARPOP_REQUEST
 1

	)

208 
	#ARPOP_REPLY
 2

	)

210 
	#RARPOP_REQUEST
 3

	)

211 
	#RARPOP_REPLY
 4

	)

218 
uch¨
 
	m¨_d©a
[0];

220 
uch¨
 
	m¨_sha
[];

221 
uch¨
 
	m¨_•a
[];

222 
uch¨
 
	m¨_tha
[];

223 
uch¨
 
	m¨_ça
[];

225 } 
	tARP_t
;

227 
	#ARP_HDR_SIZE
 (8+20Ë

	)

232 
	#ICMP_ECHO_REPLY
 0

	)

233 
	#ICMP_REDIRECT
 5

	)

234 
	#ICMP_ECHO_REQUEST
 8

	)

237 
	#ICMP_REDIR_NET
 0

	)

238 
	#ICMP_REDIR_HOST
 1

	)

240 
	sicmphdr
 {

241 
uch¨
 
	mty≥
;

242 
uch¨
 
	mcode
;

243 
ush‹t
 
	mchecksum
;

246 
ush‹t
 
	mid
;

247 
ush‹t
 
	m£quí˚
;

248 } 
	mecho
;

249 
ul⁄g
 
	mg©eway
;

251 
ush‹t
 
	m__unu£d
;

252 
ush‹t
 
	mmtu
;

253 } 
	m‰ag
;

254 } 
	mun
;

255 } 
	tICMP_t
;

270 
	#PKTSIZE
 1518

	)

271 
	#PKTSIZE_ALIGN
 1536

	)

280 
	#RINGSZ
 4

	)

281 
	#RINGSZ_LOG2
 2

	)

295 
IPaddr_t
 
NëOurG©ewayIP
;

296 
IPaddr_t
 
NëOurSub√tMask
;

297 
IPaddr_t
 
NëOurDNSIP
;

298 #i‡(
CONFIG_BOOTP_MASK
 & 
CONFIG_BOOTP_DNS2
)

299 
IPaddr_t
 
NëOurDNS2IP
;

301 
NëOurNISDomaö
[32];

302 
NëOurHo°Name
[32];

303 
NëOurRoŸP©h
[64];

304 
ush‹t
 
NëBoŸFûeSize
;

306 
ul⁄g
 
NëBoŸFûeX„rSize
;

307 
uch¨
 
NëOurEthî
[6];

308 
uch¨
 
NëSîvîEthî
[6];

309 
IPaddr_t
 
NëOurIP
;

310 
IPaddr_t
 
NëSîvîIP
;

311 vﬁ©ûê
uch¨
 * 
NëTxPackë
;

312 vﬁ©ûê
uch¨
 * 
NëRxPackës
[
PKTBUFSRX
];

313 vﬁ©ûê
uch¨
 * 
NëRxPkt
;

314 
NëRxPktLí
;

315 
NëIPID
;

316 
uch¨
 
NëBˇ°Addr
[6];

317 
uch¨
 
NëEthîNuŒAddr
[6];

319 
	#VLAN_NONE
 4095

	)

320 
	#VLAN_IDMASK
 0x0ff‡

	)

321 
ush‹t
 
NëOurVLAN
;

322 
ush‹t
 
NëOurN©iveVLAN
;

324 
uch¨
 
NëCDPAddr
[6];

325 
ush‹t
 
CDPN©iveVLAN
;

326 
ush‹t
 
CDPAµlün˚VLAN
;

328 
NëSèã
;

329 
	#NETLOOP_CONTINUE
 1

	)

330 
	#NETLOOP_RESTART
 2

	)

331 
	#NETLOOP_SUCCESS
 3

	)

332 
	#NETLOOP_FAIL
 4

	)

334 #ifde‡
CONFIG_NET_MULTI


335 
NëRe°¨tWøp
;

338 íum { 
	mBOOTP
, 
	mRARP
, 
	mARP
, 
	mTFTP
, 
	mDHCP
, 
	mPING
, 
	mDNS
, 
	mNFS
, 
	mCDP
, 
	mNETCONS
 } 
	t¥Ÿo_t
;

341 
BoŸFûe
[128];

343 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_PING
)

344 
IPaddr_t
 
NëPögIP
;

347 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_CDP
)

349 
ush‹t
 
CDPN©iveVLAN
;

350 
ush‹t
 
CDPAµlün˚VLAN
;

354 
NëLo›
(
¥Ÿo_t
);

357 
NëSt›
();

360 
NëSèπAgaö
();

363 
NëEthHdrSize
();

366 
NëSëEthî
(vﬁ©ûê
uch¨
 *, uch¨ *, 
uöt
);

369 
NëSëIP
(vﬁ©ûê
uch¨
 *, 
IPaddr_t
, , , );

372 
NëCksumOk
(
uch¨
 *, );

373 
uöt
 
NëCksum
(
uch¨
 *, );

376 
NëSëH™dÀr
(
rxh™d_f
 *);

377 
NëSëTimeout
(
ul⁄g
, 
th™d_f
 *);

380 
NëSídPackë
(vﬁ©ûê
uch¨
 *, );

383 
NëSídUDPPackë
(
uch¨
 *
ëhî
, 
IPaddr_t
 
de°
, 
dp‹t
, 
•‹t
, 
Àn
);

386 
NëRe˚ive
(vﬁ©ûê
uch¨
 *, );

389 
¥öt_IPaddr
 (
IPaddr_t
);

399 
ölöe
 
IPaddr_t
 
	$NëRódIP
(*
‰om
)

401 
IPaddr_t
 
ù
;

402 
	`mem˝y
((*)&
ù
, 
‰om
, (ip));

403  
ù
;

404 
	}
}

407 
ölöe
 
ul⁄g
 
	$NëRódL⁄g
(
ul⁄g
 *
‰om
)

409 
ul⁄g
 
l
;

410 
	`mem˝y
((*)&
l
, (*)
‰om
, (l));

411  
l
;

412 
	}
}

415 
ölöe
 
	$NëWrôeIP
(*
to
, 
IPaddr_t
 
ù
)

417 
	`mem˝y
(
to
, (*)&
ù
, (ip));

418 
	}
}

421 
ölöe
 
	$NëC›yIP
(*
to
, *
‰om
)

423 
	`mem˝y
(
to
, 
‰om
, (
IPaddr_t
));

424 
	}
}

427 
ölöe
 
	$NëC›yL⁄g
(
ul⁄g
 *
to
, ul⁄g *
‰om
)

429 
	`mem˝y
((*)
to
, (*)
‰om
, (
ul⁄g
));

430 
	}
}

433 
ù_to_°rög
 (
IPaddr_t
 
x
, *
s
);

436 
IPaddr_t
 
°rög_to_ù
(*
s
);

439 
VLAN_to_°rög
 (
ush‹t
 
x
, *
s
);

442 
ush‹t
 
°rög_to_VLAN
(*
s
);

445 
IPaddr_t
 
gëív_IPaddr
 (*);

448 
ush‹t
 
gëív_VLAN
(*);

451 
c›y_fûíame
 (
uch¨
 *
d°
, uch¨ *
§c
, 
size
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/part.h

23 #i‚de‡
_PART_H


24 
	#_PART_H


	)

25 
	~<ide.h
>

27 
	sblock_dev_desc
 {

28 
	mif_ty≥
;

29 
	mdev
;

30 
	m∑π_ty≥
;

31 
	mèrgë
;

32 
	mlun
;

33 
	mty≥
;

34 
	mªmovabÀ
;

35 #ifde‡
CONFIG_LBA48


36 
	mlba48
;

38 
lbaöt_t
 
	mlba
;

39 
	mblksz
;

40 
	mvíd‹
 [40+1];

41 
	m¥odu˘
[20+1];

42 
	mªvisi⁄
[8+1];

43 (*
	mblock_ªad
)(
	mdev
,

44 
	m°¨t
,

45 
lbaöt_t
 
	mblk˙t
,

46 *
	mbuf„r
);

47 }
	tblock_dev_desc_t
;

50 
	#IF_TYPE_UNKNOWN
 0

	)

51 
	#IF_TYPE_IDE
 1

	)

52 
	#IF_TYPE_SCSI
 2

	)

53 
	#IF_TYPE_ATAPI
 3

	)

54 
	#IF_TYPE_USB
 4

	)

55 
	#IF_TYPE_DOC
 5

	)

56 
	#IF_TYPE_MMC
 6

	)

59 
	#PART_TYPE_UNKNOWN
 0x00

	)

60 
	#PART_TYPE_MAC
 0x01

	)

61 
	#PART_TYPE_DOS
 0x02

	)

62 
	#PART_TYPE_ISO
 0x03

	)

63 
	#PART_TYPE_AMIGA
 0x04

	)

68 
	#BOOT_PART_TYPE
 "U-BoŸ"

	)

69 
	#BOOT_PART_COMP
 "PPCBoŸ"

	)

72 
	#DEV_TYPE_UNKNOWN
 0xf‡

	)

73 
	#DEV_TYPE_HARDDISK
 0x00

	)

74 
	#DEV_TYPE_TAPE
 0x01

	)

75 
	#DEV_TYPE_CDROM
 0x05

	)

76 
	#DEV_TYPE_OPDISK
 0x07

	)

78 
	sdisk_∑πôi⁄
 {

79 
ul⁄g
 
	m°¨t
;

80 
ul⁄g
 
	msize
;

81 
ul⁄g
 
	mblksz
;

82 
uch¨
 
	m«me
[32];

83 
uch¨
 
	mty≥
[32];

84 } 
	tdisk_∑πôi⁄_t
;

87 
gë_∑πôi⁄_öfo
 (
block_dev_desc_t
 * 
dev_desc
, 
∑π
, 
disk_∑πôi⁄_t
 *
öfo
);

88 
¥öt_∑π
 (
block_dev_desc_t
 *
dev_desc
);

89 
öô_∑π
 (
block_dev_desc_t
 *
dev_desc
);

90 
dev_¥öt
(
block_dev_desc_t
 *
dev_desc
);

93 #ifde‡
CONFIG_MAC_PARTITION


95 
gë_∑πôi⁄_öfo_mac
 (
block_dev_desc_t
 * 
dev_desc
, 
∑π
, 
disk_∑πôi⁄_t
 *
öfo
);

96 
¥öt_∑π_mac
 (
block_dev_desc_t
 *
dev_desc
);

97 
ã°_∑π_mac
 (
block_dev_desc_t
 *
dev_desc
);

100 #ifde‡
CONFIG_DOS_PARTITION


102 
gë_∑πôi⁄_öfo_dos
 (
block_dev_desc_t
 * 
dev_desc
, 
∑π
, 
disk_∑πôi⁄_t
 *
öfo
);

103 
¥öt_∑π_dos
 (
block_dev_desc_t
 *
dev_desc
);

104 
ã°_∑π_dos
 (
block_dev_desc_t
 *
dev_desc
);

107 #ifde‡
CONFIG_ISO_PARTITION


109 
gë_∑πôi⁄_öfo_iso
 (
block_dev_desc_t
 * 
dev_desc
, 
∑π
, 
disk_∑πôi⁄_t
 *
öfo
);

110 
¥öt_∑π_iso
 (
block_dev_desc_t
 *
dev_desc
);

111 
ã°_∑π_iso
 (
block_dev_desc_t
 *
dev_desc
);

114 #ifde‡
CONFIG_AMIGA_PARTITION


116 
gë_∑πôi⁄_öfo_amiga
 (
block_dev_desc_t
 * 
dev_desc
, 
∑π
, 
disk_∑πôi⁄_t
 *
öfo
);

117 
¥öt_∑π_amiga
 (
block_dev_desc_t
 *
dev_desc
);

118 
ã°_∑π_amiga
 (
block_dev_desc_t
 *
dev_desc
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/post.h

23 #i‚de‡
_POST_H


24 
	#_POST_H


	)

26 #i‚def 
__ASSEMBLY__


27 
	~<comm⁄.h
>

30 #ifde‡
CONFIG_POST


32 
	#POST_POWERON
 0x01

	)

33 
	#POST_NORMAL
 0x02

	)

34 
	#POST_SLOWTEST
 0x04

	)

35 
	#POST_POWERTEST
 0x08

	)

37 
	#POST_COLDBOOT
 0x80

	)

39 
	#POST_ROM
 0x0100

	)

40 
	#POST_RAM
 0x0200

	)

41 
	#POST_MANUAL
 0x0400

	)

42 
	#POST_REBOOT
 0x0800

	)

43 
	#POST_PREREL
 0x1000

	)

45 
	#POST_MEM
 (
POST_RAM
 | 
POST_ROM
)

	)

46 
	#POST_ALWAYS
 (
POST_NORMAL
 | \

47 
POST_SLOWTEST
 | \

48 
POST_MANUAL
 | \

49 
POST_POWERON
 )

	)

51 #i‚def 
__ASSEMBLY__


53 
	spo°_ã°
 {

54 *
	m«me
;

55 *
	mcmd
;

56 *
	mdesc
;

57 
	mÊags
;

58 (*
	mã°
Ë(
	mÊags
);

59 (*
	möô_f
) ();

60 (*
	mªloc
) ();

61 
	mã°id
;

63 
po°_öô_f
 ();

64 
po°_boŸmode_öô
 ();

65 
po°_boŸmode_gë
 (* 
œ°_ã°
);

66 
po°_boŸmode_˛ór
 ();

67 
po°_ouçut_backlog
 ( );

68 
po°_run
 (*
«me
, 
Êags
);

69 
po°_öfo
 (*
«me
);

70 
po°_log
 (*
f‹m©
, ...);

71 
po°_ªloc
 ();

72 
po°_time_ms
 (
ba£
);

74 
po°_ã°
 
po°_li°
[];

75 
po°_li°_size
;

76 
po°_hŸkeys_¥es£d
();

80 
	#CFG_POST_RTC
 0x00000001

	)

81 
	#CFG_POST_WATCHDOG
 0x00000002

	)

82 
	#CFG_POST_MEMORY
 0x00000004

	)

83 
	#CFG_POST_CPU
 0x00000008

	)

84 
	#CFG_POST_I2C
 0x00000010

	)

85 
	#CFG_POST_CACHE
 0x00000020

	)

86 
	#CFG_POST_UART
 0x00000040

	)

87 
	#CFG_POST_ETHER
 0x00000080

	)

88 
	#CFG_POST_SPI
 0x00000100

	)

89 
	#CFG_POST_USB
 0x00000200

	)

90 
	#CFG_POST_SPR
 0x00000400

	)

91 
	#CFG_POST_SYSMON
 0x00000800

	)

92 
	#CFG_POST_DSP
 0x00001000

	)

93 
	#CFG_POST_CODEC
 0x00002000

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/rt_mmap.h

32 #i‚de‡
__RALINK_MMAP__


33 
	#__RALINK_MMAP__


	)

35 #i‡
deföed
 (
RT2880_FPGA_BOARD
Ë|| deföed (
RT2880_ASIC_BOARD
)

37 #ifde‡
RT2880_SHUTTLE


39 
	#RALINK_SYSCTL_BASE
 0xA0300000

	)

40 
	#RALINK_TIMER_BASE
 0xA0300100

	)

41 
	#RALINK_INTCL_BASE
 0xA0300200

	)

42 
	#RALINK_MEMCTRL_BASE
 0xA0300300

	)

43 
	#RALINK_UART_BASE
 0xA0300500

	)

44 
	#RALINK_PIO_BASE
 0xA0300600

	)

45 
	#RALINK_I2C_BASE
 0xA0300900

	)

46 
	#RALINK_SPI_BASE
 0xA0300B00

	)

47 
	#RALINK_UART_LITE_BASE
 0xA0300C00

	)

48 
	#RALINK_FRAME_ENGINE_BASE
 0xA0310000

	)

49 
	#RALINK_EMBEDD_ROM_BASE
 0xA0400000

	)

50 
	#RALINK_PCI_BASE
 0xA0500000

	)

51 
	#RALINK_11N_MAC_BASE
 0xA0600000

	)

55 
	#RALINK_SYSCTL_BASE
 0xA0300000

	)

56 
	#RALINK_TIMER_BASE
 0xA0300100

	)

57 
	#RALINK_INTCL_BASE
 0xA0300200

	)

58 
	#RALINK_MEMCTRL_BASE
 0xA0300300

	)

59 
	#RALINK_UART_BASE
 0xA0300500

	)

60 
	#RALINK_PIO_BASE
 0xA0300600

	)

61 
	#RALINK_I2C_BASE
 0xA0300900

	)

62 
	#RALINK_SPI_BASE
 0xA0300B00

	)

63 
	#RALINK_UART_LITE_BASE
 0x00300C00

	)

64 
	#RALINK_FRAME_ENGINE_BASE
 0xA0400000

	)

65 
	#RALINK_EMBEDD_ROM_BASE
 0xA0410000

	)

66 
	#RALINK_PCI_BASE
 0xA0440000

	)

67 
	#RALINK_11N_MAC_BASE
 0xA0480000

	)

70 
	#RALINK_INTCTL_TIMER0
 (1<<0)

	)

71 
	#RALINK_INTCTL_WDTIMER
 (1<<1)

	)

72 
	#RALINK_INTCTL_UART
 (1<<2)

	)

73 
	#RALINK_INTCTL_PIO
 (1<<3)

	)

74 
	#RALINK_INTCTL_PCM
 (1<<4)

	)

75 
	#RALINK_INTCTL_UARTLITE
 (1<<8)

	)

76 
	#RALINK_INTCTL_ILL_ACCESS
 (1<<23)

	)

79 
	#RALINK_TIMER_RST
 (1<<1)

	)

80 
	#RALINK_INTC_RST
 (1<<2)

	)

81 
	#RALINK_MC_RST
 (1<<3)

	)

82 
	#RALINK_CPU_RST
 (1<<4)

	)

83 
	#RALINK_UART_RST
 (1<<5)

	)

84 
	#RALINK_PIO_RST
 (1<<6)

	)

85 
	#RALINK_I2C_RST
 (1<<9)

	)

86 
	#RALINK_SPI_RST
 (1<<11)

	)

87 
	#RALINK_UART2_RST
 (1<<12)

	)

88 
	#RALINK_PCI_RST
 (1<<16)

	)

89 
	#RALINK_2860_RST
 (1<<17)

	)

90 
	#RALINK_FE_RST
 (1<<18)

	)

91 
	#RALINK_PCM_RST
 (1<<19)

	)

95 #ñi‡
deföed
 (
RT3052_FPGA_BOARD
Ë|| deföed (
RT3052_ASIC_BOARD
)

97 
	#RALINK_SYSCTL_BASE
 0xB0000000

	)

98 
	#RALINK_TIMER_BASE
 0xB0000100

	)

99 
	#RALINK_INTCL_BASE
 0xB0000200

	)

100 
	#RALINK_MEMCTRL_BASE
 0xB0000300

	)

101 
	#RALINK_PCM_BASE
 0xB0000400

	)

102 
	#RALINK_UART_BASE
 0xB0000500

	)

103 
	#RALINK_PIO_BASE
 0xB0000600

	)

104 
	#RALINK_GDMA_BASE
 0xB0000700

	)

105 
	#RALINK_NAND_CTRL_BASE
 0xB0000800

	)

106 
	#RALINK_I2C_BASE
 0xB0000900

	)

107 
	#RALINK_I2S_BASE
 0xB0000A00

	)

108 
	#RALINK_SPI_BASE
 0xB0000B00

	)

109 
	#RALINK_UART_LITE_BASE
 0xB0000C00

	)

110 
	#RALINK_FRAME_ENGINE_BASE
 0xB0100000

	)

111 
	#RALINK_ETH_SW_BASE
 0xB0110000

	)

112 
	#RALINK_11N_MAC_BASE
 0xB0180000

	)

113 
	#RALINK_USB_OTG_BASE
 0xB01C0000

	)

116 
	#RALINK_INTCTL_SYSCTL
 (1<<0)

	)

117 
	#RALINK_INTCTL_TIMER0
 (1<<1)

	)

118 
	#RALINK_INTCTL_WDTIMER
 (1<<2)

	)

119 
	#RALINK_INTCTL_ILL_ACCESS
 (1<<3)

	)

120 
	#RALINK_INTCTL_PCM
 (1<<4)

	)

121 
	#RALINK_INTCTL_UART
 (1<<5)

	)

122 
	#RALINK_INTCTL_PIO
 (1<<6)

	)

123 
	#RALINK_INTCTL_DMA
 (1<<7)

	)

124 
	#RALINK_INTCTL_NAND
 (1<<8)

	)

125 
	#RALINK_INTCTL_PC
 (1<<9)

	)

126 
	#RALINK_INTCTL_I2S
 (1<<10)

	)

127 
	#RALINK_INTCTL_UARTLITE
 (1<<12)

	)

128 
	#RALINK_INTCTL_ESW
 (1<<17)

	)

129 
	#RALINK_INTCTL_OTG
 (1<<18)

	)

130 
	#RALINK_INTCTL_OTG_IRQN
 18

	)

131 
	#RALINK_INTCTL_GLOBAL
 (1<<31)

	)

134 
	#RALINK_SYS_RST
 (1<<0)

	)

135 
	#RALINK_CPU_RST
 (1<<1)

	)

136 
	#RALINK_TIMER_RST
 (1<<8)

	)

137 
	#RALINK_INTC_RST
 (1<<9)

	)

138 
	#RALINK_MC_RST
 (1<<10)

	)

139 
	#RALINK_PCM_RST
 (1<<11)

	)

140 
	#RALINK_UART_RST
 (1<<12)

	)

141 
	#RALINK_PIO_RST
 (1<<13)

	)

142 
	#RALINK_DMA_RST
 (1<<14)

	)

143 
	#RALINK_I2C_RST
 (1<<16)

	)

144 
	#RALINK_I2S_RST
 (1<<17)

	)

145 
	#RALINK_SPI_RST
 (1<<18)

	)

146 
	#RALINK_UARTL_RST
 (1<<19)

	)

147 
	#RALINK_RT2872_RST
 (1<<20)

	)

148 
	#RALINK_FE_RST
 (1<<21)

	)

149 
	#RALINK_OTG_RST
 (1<<22)

	)

150 
	#RALINK_SW_RST
 (1<<23)

	)

151 
	#RALINK_EPHY_RST
 (1<<24)

	)

153 #ñi‡
deföed
 (
RT3352_FPGA_BOARD
Ë|| deföed (
RT3352_ASIC_BOARD
)

155 
	#RALINK_SYSCTL_BASE
 0xB0000000

	)

156 
	#RALINK_TIMER_BASE
 0xB0000100

	)

157 
	#RALINK_INTCL_BASE
 0xB0000200

	)

158 
	#RALINK_MEMCTRL_BASE
 0xB0000300

	)

159 
	#RALINK_UART_BASE
 0xB0000500

	)

160 
	#RALINK_PIO_BASE
 0xB0000600

	)

161 
	#RALINK_I2C_BASE
 0xB0000900

	)

162 
	#RALINK_I2S_BASE
 0xB0000A00

	)

163 
	#RALINK_SPI_BASE
 0xB0000B00

	)

164 
	#RALINK_UART_LITE_BASE
 0xB0000C00

	)

165 
	#RALINK_PCM_BASE
 0xB0002000

	)

166 
	#RALINK_GDMA_BASE
 0xB0002800

	)

167 
	#RALINK_FRAME_ENGINE_BASE
 0xB0100000

	)

168 
	#RALINK_ETH_SW_BASE
 0xB0110000

	)

169 
	#RALINK_USB_DEV_BASE
 0xB0120000

	)

170 
	#RALINK_11N_MAC_BASE
 0xB0180000

	)

171 
	#RALINK_USB_OTG_BASE
 0xB01C0000

	)

174 
	#RALINK_INTCTL_SYSCTL
 (1<<0)

	)

175 
	#RALINK_INTCTL_TIMER0
 (1<<1)

	)

176 
	#RALINK_INTCTL_WDTIMER
 (1<<2)

	)

177 
	#RALINK_INTCTL_ILL_ACCESS
 (1<<3)

	)

178 
	#RALINK_INTCTL_PCM
 (1<<4)

	)

179 
	#RALINK_INTCTL_UART
 (1<<5)

	)

180 
	#RALINK_INTCTL_PIO
 (1<<6)

	)

181 
	#RALINK_INTCTL_DMA
 (1<<7)

	)

182 
	#RALINK_INTCTL_PC
 (1<<9)

	)

183 
	#RALINK_INTCTL_I2S
 (1<<10)

	)

184 
	#RALINK_INTCTL_UARTLITE
 (1<<12)

	)

185 
	#RALINK_INTCTL_ESW
 (1<<17)

	)

186 
	#RALINK_INTCTL_UHST
 (1<<18)

	)

187 
	#RALINK_INTCTL_UDEV
 (1<<19)

	)

188 
	#RALINK_INTCTL_GLOBAL
 (1<<31)

	)

191 
	#RALINK_SYS_RST
 (1<<0)

	)

192 
	#RALINK_TIMER_RST
 (1<<8)

	)

193 
	#RALINK_INTC_RST
 (1<<9)

	)

194 
	#RALINK_MC_RST
 (1<<10)

	)

195 
	#RALINK_PCM_RST
 (1<<11)

	)

196 
	#RALINK_UART_RST
 (1<<12)

	)

197 
	#RALINK_PIO_RST
 (1<<13)

	)

198 
	#RALINK_DMA_RST
 (1<<14)

	)

199 
	#RALINK_I2C_RST
 (1<<16)

	)

200 
	#RALINK_I2S_RST
 (1<<17)

	)

201 
	#RALINK_SPI_RST
 (1<<18)

	)

202 
	#RALINK_UARTL_RST
 (1<<19)

	)

203 
	#RALINK_WLAN_RST
 (1<<20)

	)

204 
	#RALINK_FE_RST
 (1<<21)

	)

205 
	#RALINK_UHST_RST
 (1<<22)

	)

206 
	#RALINK_ESW_RST
 (1<<23)

	)

207 
	#RALINK_EPHY_RST
 (1<<24)

	)

208 
	#RALINK_UDEV_RST
 (1<<25)

	)

211 
	#RALINK_UPHY1_CLK_EN
 (1<<20)

	)

212 
	#RALINK_UPHY0_CLK_EN
 (1<<18)

	)

213 
	#RALINK_GE1_CLK_EN
 (1<<16)

	)

216 #ñi‡
deföed
 (
RT6855_FPGA_BOARD
Ë|| deföed (
RT6855_ASIC_BOARD
)

218 
	#RALINK_SYSCTL_BASE
 0xB0000000

	)

219 
	#RALINK_TIMER_BASE
 0xB0000100

	)

220 
	#RALINK_INTCL_BASE
 0xB0000200

	)

221 
	#RALINK_MEMCTRL_BASE
 0xB0000300

	)

222 
	#RALINK_UART_BASE
 0xB0000500

	)

223 
	#RALINK_PIO_BASE
 0xB0000600

	)

224 
	#RALINK_NAND_CTRL_BASE
 0xB0000810

	)

225 
	#RALINK_I2C_BASE
 0xB0000900

	)

226 
	#RALINK_I2S_BASE
 0xB0000A00

	)

227 
	#RALINK_SPI_BASE
 0xB0000B00

	)

228 
	#RALINK_UART_LITE_BASE
 0xB0000C00

	)

229 
	#RALINK_PCM_BASE
 0xB0002000

	)

230 
	#RALINK_GDMA_BASE
 0xB0002800

	)

231 
	#RALINK_FRAME_ENGINE_BASE
 0xB0100000

	)

232 
	#RALINK_ETH_SW_BASE
 0xB0110000

	)

233 
	#RALINK_USB_DEV_BASE
 0xB0120000

	)

234 
	#RALINK_PCIE_BASE
 0xB0140000

	)

235 
	#RALINK_USB_OTG_BASE
 0xB01C0000

	)

238 
	#RALINK_INTCTL_SYSCTL
 (1<<0)

	)

239 
	#RALINK_INTCTL_TIMER0
 (1<<1)

	)

240 
	#RALINK_INTCTL_WDTIMER
 (1<<2)

	)

241 
	#RALINK_INTCTL_ILL_ACCESS
 (1<<3)

	)

242 
	#RALINK_INTCTL_PCM
 (1<<4)

	)

243 
	#RALINK_INTCTL_UART
 (1<<5)

	)

244 
	#RALINK_INTCTL_PIO
 (1<<6)

	)

245 
	#RALINK_INTCTL_DMA
 (1<<7)

	)

246 
	#RALINK_INTCTL_PC
 (1<<9)

	)

247 
	#RALINK_INTCTL_I2S
 (1<<10)

	)

248 
	#RALINK_INTCTL_UARTLITE
 (1<<12)

	)

249 
	#RALINK_INTCTL_ESW
 (1<<17)

	)

250 
	#RALINK_INTCTL_UHST
 (1<<18)

	)

251 
	#RALINK_INTCTL_UDEV
 (1<<19)

	)

252 
	#RALINK_INTCTL_GLOBAL
 (1<<31)

	)

255 
	#RALINK_SYS_RST
 (1<<0)

	)

256 
	#RALINK_TIMER_RST
 (1<<8)

	)

257 
	#RALINK_INTC_RST
 (1<<9)

	)

258 
	#RALINK_MC_RST
 (1<<10)

	)

259 
	#RALINK_PCM_RST
 (1<<11)

	)

260 
	#RALINK_UART_RST
 (1<<12)

	)

261 
	#RALINK_PIO_RST
 (1<<13)

	)

262 
	#RALINK_DMA_RST
 (1<<14)

	)

263 
	#RALINK_I2C_RST
 (1<<16)

	)

264 
	#RALINK_I2S_RST
 (1<<17)

	)

265 
	#RALINK_SPI_RST
 (1<<18)

	)

266 
	#RALINK_UARTL_RST
 (1<<19)

	)

267 
	#RALINK_FE_RST
 (1<<21)

	)

268 
	#RALINK_UHST_RST
 (1<<22)

	)

269 
	#RALINK_ESW_RST
 (1<<23)

	)

270 
	#RALINK_EPHY_RST
 (1<<24)

	)

271 
	#RALINK_UHST0_RST
 (1<<25)

	)

272 
	#RALINK_UDEV_RST
 (1<<25)

	)

273 
	#RALINK_PCIE0_RST
 (1<<26)

	)

274 
	#RALINK_PCIE1_RST
 (1<<27)

	)

277 
	#RALINK_UPHY0_CLK_EN
 (1<<25)

	)

279 #ñi‡
deföed
 (
MT7620_FPGA_BOARD
Ë|| deföed (
MT7620_ASIC_BOARD
)

280 
	#RALINK_SYSCTL_BASE
 0xB0000000

	)

281 
	#RALINK_TIMER_BASE
 0xB0000100

	)

282 
	#RALINK_INTCL_BASE
 0xB0000200

	)

283 
	#RALINK_MEMCTRL_BASE
 0xB0000300

	)

284 
	#RALINK_RBUS_MATRIXCTL_BASE
 0xB0000400

	)

285 
	#RALINK_UART_BASE
 0x10000500

	)

286 
	#RALINK_PIO_BASE
 0xB0000600

	)

287 
	#RALINK_NAND_CTRL_BASE
 0xB0000810

	)

288 
	#RALINK_I2C_BASE
 0xB0000900

	)

289 
	#RALINK_I2S_BASE
 0xB0000A00

	)

290 
	#RALINK_SPI_BASE
 0xB0000B00

	)

291 
	#RALINK_UART_LITE_BASE
 0x10000C00

	)

292 
	#RALINK_MIPS_CNT_BASE
 0x10000D00

	)

293 
	#RALINK_PCM_BASE
 0xB0002000

	)

294 
	#RALINK_GDMA_BASE
 0xB0002800

	)

295 
	#RALINK_CRYPTO_ENGING_BASE
 0xB0004000

	)

296 
	#RALINK_FRAME_ENGINE_BASE
 0xB0100000

	)

297 
	#RALINK_ETH_SW_BASE
 0xB0110000

	)

298 
	#RALINK_USB_DEV_BASE
 0x10120000

	)

299 
	#RALINK_MSDC_BASE
 0xB0130000

	)

300 
	#RALINK_PCI_BASE
 0xB0140000

	)

301 
	#RALINK_11N_MAC_BASE
 0xB0180000

	)

302 
	#RALINK_USB_HOST_BASE
 0x101C0000

	)

304 
	#RALINK_MCNT_CFG
 0xB0000D00

	)

305 
	#RALINK_COMPARE
 0xB0000D04

	)

306 
	#RALINK_COUNT
 0xB0000D08

	)

308 
	#RALINK_CPLLCFG0_REG
 (
RALINK_SYSCTL_BASE
+0x54)

	)

309 
	#RALINK_CPLLCFG1_REG
 (
RALINK_SYSCTL_BASE
+0x58)

	)

312 
	#RALINK_INTCTL_SYSCTL
 (1<<0)

	)

313 
	#RALINK_INTCTL_TIMER0
 (1<<1)

	)

314 
	#RALINK_INTCTL_WDTIMER
 (1<<2)

	)

315 
	#RALINK_INTCTL_ILL_ACCESS
 (1<<3)

	)

316 
	#RALINK_INTCTL_PCM
 (1<<4)

	)

317 
	#RALINK_INTCTL_UART
 (1<<5)

	)

318 
	#RALINK_INTCTL_PIO
 (1<<6)

	)

319 
	#RALINK_INTCTL_DMA
 (1<<7)

	)

320 
	#RALINK_INTCTL_PC
 (1<<9)

	)

321 
	#RALINK_INTCTL_I2S
 (1<<10)

	)

322 
	#RALINK_INTCTL_SPI
 (1<<11)

	)

323 
	#RALINK_INTCTL_UARTLITE
 (1<<12)

	)

324 
	#RALINK_INTCTL_CRYPTO
 (1<<13)

	)

325 
	#RALINK_INTCTL_ESW
 (1<<17)

	)

326 
	#RALINK_INTCTL_UHST
 (1<<18)

	)

327 
	#RALINK_INTCTL_UDEV
 (1<<19)

	)

328 
	#RALINK_INTCTL_GLOBAL
 (1<<31)

	)

331 
	#RALINK_SYS_RST
 (1<<0)

	)

332 
	#RALINK_TIMER_RST
 (1<<8)

	)

333 
	#RALINK_INTC_RST
 (1<<9)

	)

334 
	#RALINK_MC_RST
 (1<<10)

	)

335 
	#RALINK_PCM_RST
 (1<<11)

	)

336 
	#RALINK_UART_RST
 (1<<12)

	)

337 
	#RALINK_PIO_RST
 (1<<13)

	)

338 
	#RALINK_DMA_RST
 (1<<14)

	)

339 
	#RALINK_I2C_RST
 (1<<16)

	)

340 
	#RALINK_I2S_RST
 (1<<17)

	)

341 
	#RALINK_SPI_RST
 (1<<18)

	)

342 
	#RALINK_UARTL_RST
 (1<<19)

	)

343 
	#RALINK_FE_RST
 (1<<21)

	)

344 
	#RALINK_UHST_RST
 (1<<22)

	)

345 
	#RALINK_ESW_RST
 (1<<23)

	)

346 
	#RALINK_EPHY_RST
 (1<<24)

	)

347 
	#RALINK_UDEV_RST
 (1<<25)

	)

348 
	#RALINK_PCIE0_RST
 (1<<26)

	)

349 
	#RALINK_PCIE1_RST
 (1<<27)

	)

350 
	#RALINK_MIPS_CNT_RST
 (1<<28)

	)

351 
	#RALINK_CRYPTO_RST
 (1<<29)

	)

355 
	#RALINK_UPHY1_CLK_EN
 (1<<22)

	)

356 
	#RALINK_UPHY0_CLK_EN
 (1<<25)

	)

358 #ñi‡
deföed
 (
MT7628_FPGA_BOARD
Ë|| deföed (
MT7628_ASIC_BOARD
)

360 
	#RALINK_SYSCTL_BASE
 0xB0000000

	)

361 
	#RALINK_TIMER_BASE
 0xB0000100

	)

362 
	#RALINK_INTCL_BASE
 0xB0000200

	)

363 
	#RALINK_MEMCTRL_BASE
 0xB0000300

	)

364 
	#RALINK_RBUS_MATRIXCTL_BASE
 0xB0000400

	)

365 
	#RALINK_MIPS_CNT_BASE
 0x10000500

	)

366 
	#RALINK_PIO_BASE
 0xB0000600

	)

367 
	#RALINK_I2C_BASE
 0xB0000900

	)

368 
	#RALINK_I2S_BASE
 0xB0000A00

	)

369 
	#RALINK_SPI_BASE
 0xB0000B00

	)

370 
	#RALINK_UART_LITE_BASE
 0x10000C00

	)

371 
	#RALINK_UART_LITE2_BASE
 0x10000D00

	)

372 
	#RALINK_UART_LITE3_BASE
 0x10000E00

	)

373 
	#RALINK_PCM_BASE
 0xB0002000

	)

374 
	#RALINK_GDMA_BASE
 0xB0002800

	)

375 
	#RALINK_AES_ENGING_BASE
 0xB0004000

	)

376 
	#RALINK_CRYPTO_ENGING_BASE
 
RALINK_AES_ENGING_BASE


	)

377 
	#RALINK_RGCTRL_BASE
 0xB0001000

	)

378 
	#RALINK_FRAME_ENGINE_BASE
 0xB0100000

	)

379 
	#RALINK_ETH_SW_BASE
 0xB0110000

	)

380 
	#RALINK_USB_DEV_BASE
 0x10120000

	)

381 
	#RALINK_MSDC_BASE
 0xB0130000

	)

382 
	#RALINK_PCI_BASE
 0xB0140000

	)

383 
	#RALINK_11N_MAC_BASE
 0xB0180000

	)

384 
	#RALINK_USB_HOST_BASE
 0x101C0000

	)

386 
	#RALINK_MCNT_CFG
 0xB0000D00

	)

387 
	#RALINK_COMPARE
 0xB0000D04

	)

388 
	#RALINK_COUNT
 0xB0000D08

	)

390 
	#RALINK_CPLLCFG0_REG
 (
RALINK_SYSCTL_BASE
+0x54)

	)

391 
	#RALINK_CPLLCFG1_REG
 (
RALINK_SYSCTL_BASE
+0x58)

	)

394 
	#RALINK_INTCTL_SYSCTL
 (1<<0)

	)

395 
	#RALINK_INTCTL_TIMER0
 (1<<1)

	)

396 
	#RALINK_INTCTL_WDTIMER
 (1<<2)

	)

397 
	#RALINK_INTCTL_ILL_ACCESS
 (1<<3)

	)

398 
	#RALINK_INTCTL_PCM
 (1<<4)

	)

399 
	#RALINK_INTCTL_UART
 (1<<5)

	)

400 
	#RALINK_INTCTL_PIO
 (1<<6)

	)

401 
	#RALINK_INTCTL_DMA
 (1<<7)

	)

402 
	#RALINK_INTCTL_PC
 (1<<9)

	)

403 
	#RALINK_INTCTL_I2S
 (1<<10)

	)

404 
	#RALINK_INTCTL_SPI
 (1<<11)

	)

405 
	#RALINK_INTCTL_UARTLITE
 (1<<12)

	)

406 
	#RALINK_INTCTL_CRYPTO
 (1<<13)

	)

407 
	#RALINK_INTCTL_ESW
 (1<<17)

	)

408 
	#RALINK_INTCTL_UHST
 (1<<18)

	)

409 
	#RALINK_INTCTL_UDEV
 (1<<19)

	)

410 
	#RALINK_INTCTL_GLOBAL
 (1<<31)

	)

413 
	#RALINK_SYS_RST
 (1<<0)

	)

414 
	#RALINK_TIMER_RST
 (1<<8)

	)

415 
	#RALINK_INTC_RST
 (1<<9)

	)

416 
	#RALINK_MC_RST
 (1<<10)

	)

417 
	#RALINK_PCM_RST
 (1<<11)

	)

418 
	#RALINK_UART_RST
 (1<<12)

	)

419 
	#RALINK_PIO_RST
 (1<<13)

	)

420 
	#RALINK_DMA_RST
 (1<<14)

	)

421 
	#RALINK_I2C_RST
 (1<<16)

	)

422 
	#RALINK_I2S_RST
 (1<<17)

	)

423 
	#RALINK_SPI_RST
 (1<<18)

	)

424 
	#RALINK_UARTL_RST
 (1<<19)

	)

425 
	#RALINK_FE_RST
 (1<<21)

	)

426 
	#RALINK_UHST_RST
 (1<<22)

	)

427 
	#RALINK_ESW_RST
 (1<<23)

	)

428 
	#RALINK_EPHY_RST
 (1<<24)

	)

429 
	#RALINK_UDEV_RST
 (1<<25)

	)

430 
	#RALINK_PCIE0_RST
 (1<<26)

	)

431 
	#RALINK_PCIE1_RST
 (1<<27)

	)

432 
	#RALINK_MIPS_CNT_RST
 (1<<28)

	)

433 
	#RALINK_CRYPTO_RST
 (1<<29)

	)

437 
	#RALINK_UPHY1_CLK_EN
 (1<<22)

	)

438 
	#RALINK_UPHY0_CLK_EN
 (1<<25)

	)

439 
	#RALINK_PCIE_CLK_EN
 (1<<26)

	)

441 #ñi‡
deföed
 (
MT7621_FPGA_BOARD
Ë|| deföed (
MT7621_ASIC_BOARD
)

443 
	#RALINK_SYSCTL_BASE
 0xBE000000

	)

444 
	#RALINK_TIMER_BASE
 0xBE000100

	)

445 
	#RALINK_INTCL_BASE
 0xBE000200

	)

446 
	#RALINK_RBUS_MATRIXCTL_BASE
 0xBE000400

	)

447 
	#RALINK_MIPS_CNT_BASE
 0x1E000500

	)

448 
	#RALINK_PIO_BASE
 0xBE000600

	)

449 
	#RALINK_SPDIF_BASE
 0xBE000700

	)

450 
	#RALINK_DMA_ARB_BASE
 0xBE000800

	)

451 
	#RALINK_I2C_BASE
 0xBE000900

	)

452 
	#RALINK_I2S_BASE
 0xBE000A00

	)

453 
	#RALINK_SPI_BASE
 0xBE000B00

	)

454 
	#RALINK_UART_LITE_BASE
 0xBE000C00

	)

455 
	#RALINK_UART_LITE2_BASE
 0xBE000D00

	)

456 
	#RALINK_UART_LITE3_BASE
 0xBE000E00

	)

457 
	#RALINK_PCM_BASE
 0xBE002000

	)

458 
	#RALINK_GDMA_BASE
 0xBE002800

	)

459 
	#RALINK_NAND_CTRL_BASE
 0xBE003000

	)

460 
	#RALINK_NANDECC_CTRL_BASE
 0xBE003800

	)

461 
	#RALINK_CRYPTO_ENGINE_BASE
 0xBE004000

	)

462 
	#RALINK_MEMCTRL_BASE
 0xBE005000

	)

463 
	#RALINK_FRAME_ENGINE_BASE
 0xBE100000

	)

464 
	#RALINK_ETH_GMAC_BASE
 0xBE110000

	)

465 
	#RALINK_ETH_SW_BASE
 0xBE110000

	)

466 
	#RALINK_ROM_BASE
 0xBE118000

	)

467 
	#RALINK_MSDC_BASE
 0xBE130000

	)

468 
	#RALINK_PCI_BASE
 0xBE140000

	)

469 
	#RALINK_USB_HOST_BASE
 0x1E1C0000

	)

472 
	#RALINK_CPLLCFG0_REG
 (
RALINK_SYSCTL_BASE
+0x54)

	)

473 
	#RALINK_CPLLCFG1_REG
 (
RALINK_SYSCTL_BASE
+0x58)

	)

476 
	#RALINK_INTCTL_SYSCTL
 (1<<0)

	)

477 
	#RALINK_INTCTL_TIMER0
 (1<<1)

	)

478 
	#RALINK_INTCTL_WDTIMER
 (1<<2)

	)

479 
	#RALINK_INTCTL_ILL_ACCESS
 (1<<3)

	)

480 
	#RALINK_INTCTL_PCM
 (1<<4)

	)

481 
	#RALINK_INTCTL_UART
 (1<<5)

	)

482 
	#RALINK_INTCTL_PIO
 (1<<6)

	)

483 
	#RALINK_INTCTL_DMA
 (1<<7)

	)

484 
	#RALINK_INTCTL_PC
 (1<<9)

	)

485 
	#RALINK_INTCTL_I2S
 (1<<10)

	)

486 
	#RALINK_INTCTL_SPI
 (1<<11)

	)

487 
	#RALINK_INTCTL_UARTLITE
 (1<<12)

	)

488 
	#RALINK_INTCTL_CRYPTO
 (1<<13)

	)

489 
	#RALINK_INTCTL_ESW
 (1<<17)

	)

490 
	#RALINK_INTCTL_UHST
 (1<<18)

	)

491 
	#RALINK_INTCTL_UDEV
 (1<<19)

	)

492 
	#RALINK_INTCTL_GLOBAL
 (1<<31)

	)

495 
	#RALINK_SYS_RST
 (1<<0)

	)

496 
	#RALINK_TIMER_RST
 (1<<8)

	)

497 
	#RALINK_INTC_RST
 (1<<9)

	)

498 
	#RALINK_MC_RST
 (1<<10)

	)

499 
	#RALINK_PCM_RST
 (1<<11)

	)

500 
	#RALINK_UART_RST
 (1<<12)

	)

501 
	#RALINK_PIO_RST
 (1<<13)

	)

502 
	#RALINK_DMA_RST
 (1<<14)

	)

503 
	#RALINK_I2C_RST
 (1<<16)

	)

504 
	#RALINK_I2S_RST
 (1<<17)

	)

505 
	#RALINK_SPI_RST
 (1<<18)

	)

506 
	#RALINK_UARTL_RST
 (1<<19)

	)

507 
	#RALINK_FE_RST
 (1<<21)

	)

508 
	#RALINK_UHST_RST
 (1<<22)

	)

509 
	#RALINK_ESW_RST
 (1<<23)

	)

510 
	#RALINK_EPHY_RST
 (1<<24)

	)

511 
	#RALINK_UDEV_RST
 (1<<25)

	)

512 
	#RALINK_PCIE0_RST
 (1<<26)

	)

513 
	#RALINK_PCIE1_RST
 (1<<27)

	)

514 
	#RALINK_MIPS_CNT_RST
 (1<<28)

	)

515 
	#RALINK_CRYPTO_RST
 (1<<29)

	)

519 
	#RALINK_UPHY1_CLK_EN
 (1<<22)

	)

520 
	#RALINK_UPHY0_CLK_EN
 (1<<25)

	)

522 #ñi‡
deföed
 (
RT2883_FPGA_BOARD
Ë|| deföed (
RT2883_ASIC_BOARD
)

524 
	#RALINK_SYSCTL_BASE
 0xB0000000

	)

525 
	#RALINK_TIMER_BASE
 0xB0000100

	)

526 
	#RALINK_INTCL_BASE
 0xB0000200

	)

527 
	#RALINK_MEMCTRL_BASE
 0xB0000300

	)

528 
	#RALINK_PCM_BASE
 0xB0000400

	)

529 
	#RALINK_UART_BASE
 0xB0000500

	)

530 
	#RALINK_PIO_BASE
 0xB0000600

	)

531 
	#RALINK_GDMA_BASE
 0xB0000700

	)

532 
	#RALINK_NAND_CTRL_BASE
 0xB0000800

	)

533 
	#RALINK_I2C_BASE
 0xB0000900

	)

534 
	#RALINK_I2S_BASE
 0xB0000A00

	)

535 
	#RALINK_SPI_BASE
 0xB0000B00

	)

536 
	#RALINK_UART_LITE_BASE
 0xB0000C00

	)

537 
	#RALINK_FRAME_ENGINE_BASE
 0xB0100000

	)

538 
	#RALINK_PCI_BASE
 0xB0140000

	)

539 
	#RALINK_11N_MAC_BASE
 0xB0180000

	)

540 
	#RALINK_USB_OTG_BASE
 0xB01C0000

	)

543 
	#RALINK_INTCTL_SYSCTL
 (1<<0)

	)

544 
	#RALINK_INTCTL_TIMER0
 (1<<1)

	)

545 
	#RALINK_INTCTL_WDTIMER
 (1<<2)

	)

546 
	#RALINK_INTCTL_ILL_ACCESS
 (1<<3)

	)

547 
	#RALINK_INTCTL_PCM
 (1<<4)

	)

548 
	#RALINK_INTCTL_UART
 (1<<5)

	)

549 
	#RALINK_INTCTL_PIO
 (1<<6)

	)

550 
	#RALINK_INTCTL_DMA
 (1<<7)

	)

551 
	#RALINK_INTCTL_NAND
 (1<<8)

	)

552 
	#RALINK_INTCTL_PC
 (1<<9)

	)

553 
	#RALINK_INTCTL_I2S
 (1<<10)

	)

554 
	#RALINK_INTCTL_UARTLITE
 (1<<12)

	)

555 
	#RALINK_INTCTL_OTG
 (1<<18)

	)

556 
	#RALINK_INTCTL_OTG_IRQN
 18

	)

557 
	#RALINK_INTCTL_GLOBAL
 (1<<31)

	)

560 
	#RALINK_SYS_RST
 (1<<0)

	)

561 
	#RALINK_CPU_RST
 (1<<1)

	)

562 
	#RALINK_TIMER_RST
 (1<<8)

	)

563 
	#RALINK_INTC_RST
 (1<<9)

	)

564 
	#RALINK_MC_RST
 (1<<10)

	)

565 
	#RALINK_PCM_RST
 (1<<11)

	)

566 
	#RALINK_UART_RST
 (1<<12)

	)

567 
	#RALINK_PIO_RST
 (1<<13)

	)

568 
	#RALINK_DMA_RST
 (1<<14)

	)

569 
	#RALINK_I2C_RST
 (1<<16)

	)

570 
	#RALINK_I2S_RST
 (1<<17)

	)

571 
	#RALINK_SPI_RST
 (1<<18)

	)

572 
	#RALINK_UARTL_RST
 (1<<19)

	)

573 
	#RALINK_WLAN_RST
 (1<<20)

	)

574 
	#RALINK_FE_RST
 (1<<21)

	)

575 
	#RALINK_OTG_RST
 (1<<22)

	)

576 
	#RALINK_PCIE_RST
 (1<<23)

	)

579 #ñi‡
deföed
 (
RT3883_FPGA_BOARD
Ë|| deföed (
RT3883_ASIC_BOARD
)

581 
	#RALINK_SYSCTL_BASE
 0xB0000000

	)

582 
	#RALINK_TIMER_BASE
 0xB0000100

	)

583 
	#RALINK_INTCL_BASE
 0xB0000200

	)

584 
	#RALINK_MEMCTRL_BASE
 0xB0000300

	)

585 
	#RALINK_UART_BASE
 0xB0000500

	)

586 
	#RALINK_PIO_BASE
 0xB0000600

	)

587 
	#RALINK_NOR_CTRL_BASE
 0xB0000700

	)

588 
	#RALINK_NAND_CTRL_BASE
 0xB0000810

	)

589 
	#RALINK_I2C_BASE
 0xB0000900

	)

590 
	#RALINK_I2S_BASE
 0xB0000A00

	)

591 
	#RALINK_SPI_BASE
 0xB0000B00

	)

592 
	#RALINK_UART_LITE_BASE
 0xB0000C00

	)

593 
	#RALINK_PCM_BASE
 0xB0002000

	)

594 
	#RALINK_GDMA_BASE
 0xB0002800

	)

595 
	#RALINK_CODEC1_BASE
 0xB0003000

	)

596 
	#RALINK_CODEC2_BASE
 0xB0003800

	)

597 
	#RALINK_FRAME_ENGINE_BASE
 0xB0100000

	)

598 
	#RALINK_USB_DEV_BASE
 0xB0120000

	)

599 
	#RALINK_PCI_BASE
 0xB0140000

	)

600 
	#RALINK_11N_MAC_BASE
 0xB0180000

	)

601 
	#RALINK_USB_HOST_BASE
 0xB01C0000

	)

602 
	#RALINK_PCIE_BASE
 0xB0200000

	)

605 
	#RALINK_INTCTL_SYSCTL
 (1<<0)

	)

606 
	#RALINK_INTCTL_TIMER0
 (1<<1)

	)

607 
	#RALINK_INTCTL_WDTIMER
 (1<<2)

	)

608 
	#RALINK_INTCTL_ILL_ACCESS
 (1<<3)

	)

609 
	#RALINK_INTCTL_PCM
 (1<<4)

	)

610 
	#RALINK_INTCTL_UART
 (1<<5)

	)

611 
	#RALINK_INTCTL_PIO
 (1<<6)

	)

612 
	#RALINK_INTCTL_DMA
 (1<<7)

	)

613 
	#RALINK_INTCTL_NAND
 (1<<8)

	)

614 
	#RALINK_INTCTL_PC
 (1<<9)

	)

615 
	#RALINK_INTCTL_I2S
 (1<<10)

	)

616 
	#RALINK_INTCTL_UARTLITE
 (1<<12)

	)

617 
	#RALINK_INTCTL_UHST
 (1<<18)

	)

618 
	#RALINK_INTCTL_UDEV
 (1<<19)

	)

621 
	#RALINK_SYS_RST
 (1<<0)

	)

622 
	#RALINK_TIMER_RST
 (1<<8)

	)

623 
	#RALINK_INTC_RST
 (1<<9)

	)

624 
	#RALINK_MC_RST
 (1<<10)

	)

625 
	#RALINK_PCM_RST
 (1<<11)

	)

626 
	#RALINK_UART_RST
 (1<<12)

	)

627 
	#RALINK_PIO_RST
 (1<<13)

	)

628 
	#RALINK_DMA_RST
 (1<<14)

	)

629 
	#RALINK_NAND_RST
 (1<<15)

	)

630 
	#RALINK_I2C_RST
 (1<<16)

	)

631 
	#RALINK_I2S_RST
 (1<<17)

	)

632 
	#RALINK_SPI_RST
 (1<<18)

	)

633 
	#RALINK_UARTL_RST
 (1<<19)

	)

634 
	#RALINK_WLAN_RST
 (1<<20)

	)

635 
	#RALINK_FE_RST
 (1<<21)

	)

636 
	#RALINK_UHST_RST
 (1<<22)

	)

637 
	#RALINK_PCIE_RST
 (1<<23)

	)

638 
	#RALINK_PCI_RST
 (1<<24)

	)

639 
	#RALINK_UDEV_RST
 (1<<25)

	)

640 
	#RALINK_FLASH_RST
 (1<<26)

	)

643 
	#RALINK_UPHY1_CLK_EN
 (1<<20)

	)

644 
	#RALINK_UPHY0_CLK_EN
 (1<<18)

	)

645 
	#RALINK_GE1_CLK_EN
 (1<<16)

	)

648 #ñi‡
deföed
 (
RT5350_FPGA_BOARD
Ë|| deföed (
RT5350_ASIC_BOARD
)

650 
	#RALINK_SYSCTL_BASE
 0xB0000000

	)

651 
	#RALINK_TIMER_BASE
 0xB0000100

	)

652 
	#RALINK_INTCL_BASE
 0xB0000200

	)

653 
	#RALINK_MEMCTRL_BASE
 0xB0000300

	)

654 
	#RALINK_UART_BASE
 0xB0000500

	)

655 
	#RALINK_PIO_BASE
 0xB0000600

	)

656 
	#RALINK_I2C_BASE
 0xB0000900

	)

657 
	#RALINK_I2S_BASE
 0xB0000A00

	)

658 
	#RALINK_SPI_BASE
 0xB0000B00

	)

659 
	#RALINK_UART_LITE_BASE
 0xB0000C00

	)

660 
	#RALINK_PCM_BASE
 0xB0002000

	)

661 
	#RALINK_GDMA_BASE
 0xB0002800

	)

662 
	#RALINK_FRAME_ENGINE_BASE
 0xB0100000

	)

663 
	#RALINK_ETH_SW_BASE
 0xB0110000

	)

664 
	#RALINK_USB_DEV_BASE
 0xB0120000

	)

665 
	#RALINK_11N_MAC_BASE
 0xB0180000

	)

666 
	#RALINK_USB_HOST_BASE
 0xB01C0000

	)

669 
	#RALINK_INTCTL_SYSCTL
 (1<<0)

	)

670 
	#RALINK_INTCTL_TIMER0
 (1<<1)

	)

671 
	#RALINK_INTCTL_WDTIMER
 (1<<2)

	)

672 
	#RALINK_INTCTL_ILL_ACCESS
 (1<<3)

	)

673 
	#RALINK_INTCTL_PCM
 (1<<4)

	)

674 
	#RALINK_INTCTL_UART
 (1<<5)

	)

675 
	#RALINK_INTCTL_PIO
 (1<<6)

	)

676 
	#RALINK_INTCTL_DMA
 (1<<7)

	)

677 
	#RALINK_INTCTL_PC
 (1<<9)

	)

678 
	#RALINK_INTCTL_I2S
 (1<<10)

	)

679 
	#RALINK_INTCTL_UARTLITE
 (1<<12)

	)

680 
	#RALINK_INTCTL_ESW
 (1<<17)

	)

681 
	#RALINK_INTCTL_UHST
 (1<<18)

	)

682 
	#RALINK_INTCTL_UDEV
 (1<<19)

	)

683 
	#RALINK_INTCTL_GLOBAL
 (1<<31)

	)

686 
	#RALINK_SYS_RST
 (1<<0)

	)

687 
	#RALINK_TIMER_RST
 (1<<8)

	)

688 
	#RALINK_INTC_RST
 (1<<9)

	)

689 
	#RALINK_MC_RST
 (1<<10)

	)

690 
	#RALINK_PCM_RST
 (1<<11)

	)

691 
	#RALINK_UART_RST
 (1<<12)

	)

692 
	#RALINK_PIO_RST
 (1<<13)

	)

693 
	#RALINK_DMA_RST
 (1<<14)

	)

694 
	#RALINK_I2C_RST
 (1<<16)

	)

695 
	#RALINK_I2S_RST
 (1<<17)

	)

696 
	#RALINK_SPI_RST
 (1<<18)

	)

697 
	#RALINK_UARTL_RST
 (1<<19)

	)

698 
	#RALINK_WLAN_RST
 (1<<20)

	)

699 
	#RALINK_FE_RST
 (1<<21)

	)

700 
	#RALINK_UHST_RST
 (1<<22)

	)

701 
	#RALINK_ESW_RST
 (1<<23)

	)

702 
	#RALINK_EPHY_RST
 (1<<24)

	)

703 
	#RALINK_UDEV_RST
 (1<<25)

	)

704 
	#RALINK_MIPS_RST
 (1<<26)

	)

707 
	#RALINK_UPHY0_CLK_EN
 (1<<18)

	)

708 
	#RALINK_GE1_CLK_EN
 (1<<16)

	)

710 #ñi‡
deföed
 (
RT6855A_FPGA_BOARD
Ë|| deföed (
RT6855A_ASIC_BOARD
)

712 
	#RALINK_SYSCTL_BASE
 0xBFB00000

	)

713 
	#RALINK_TIMER_BASE
 0xBFBF0100

	)

714 
	#RALINK_INTCL_BASE
 0xBFB40000

	)

715 
	#RALINK_MEMCTRL_BASE
 0xBFB20000

	)

716 
	#RALINK_PIO_BASE
 0xBFBF0200

	)

717 
	#RALINK_NAND_CTRL_BASE
 0xBFBE0010

	)

718 
	#RALINK_I2C_BASE
 0xBFBF8000

	)

719 
	#RALINK_I2S_BASE
 0xBFBF8100

	)

720 
	#RALINK_SPI_BASE
 0xBFBC0B00

	)

721 
	#RALINK_UART_LITE_BASE
 0xBFBF0000

	)

722 
	#RALINK_UART_LITE2_BASE
 0xBFBF0300

	)

723 
	#RALINK_PCM_BASE
 0xBFBD0000

	)

724 
	#RALINK_GDMA_BASE
 0xBFB30000

	)

725 
	#RALINK_FRAME_ENGINE_BASE
 0xBFB50000

	)

726 
	#RALINK_ETH_SW_BASE
 0xBFB58000

	)

728 
	#RALINK_PCI_BASE
 0xBFB80000

	)

730 
	#RALINK_PCIE_BASE
 0xBFB81000

	)

733 
	#RALINK_INTCTL_UARTLITE
 (1<<0)

	)

734 
	#RALINK_INTCTL_PIO
 (1<<10)

	)

735 
	#RALINK_INTCTL_PCM
 (1<<11)

	)

736 
	#RALINK_INTCTL_DMA
 (1<<14)

	)

737 
	#RALINK_INTCTL_GMAC2
 (1<<15)

	)

738 
	#RALINK_INTCTL_PCI
 (1<<17)

	)

739 
	#RALINK_INTCTL_UHST2
 (1<<20)

	)

740 
	#RALINK_INTCTL_GMAC1
 (1<<21)

	)

741 
	#RALINK_INTCTL_UHST1
 (1<<23)

	)

742 
	#RALINK_INTCTL_PCIE
 (1<<24)

	)

743 
	#RALINK_INTCTL_NAND
 (1<<25)

	)

744 
	#RALINK_INTCTL_SPI
 (1<<27)

	)

748 
	#RALINK_TIMER_RST
 (1<<8)

	)

749 
	#RALINK_INTC_RST
 (1<<9)

	)

750 
	#RALINK_MC_RST
 (1<<10)

	)

751 
	#RALINK_PCM_RST
 (1<<11)

	)

752 
	#RALINK_UART_RST
 (1<<12)

	)

753 
	#RALINK_PIO_RST
 (1<<13)

	)

754 
	#RALINK_DMA_RST
 (1<<14)

	)

755 
	#RALINK_I2C_RST
 (1<<16)

	)

756 
	#RALINK_I2S_RST
 (1<<17)

	)

757 
	#RALINK_SPI_RST
 (1<<18)

	)

758 
	#RALINK_UARTL_RST
 (1<<19)

	)

759 
	#RALINK_WLAN_RST
 (1<<20)

	)

760 
	#RALINK_FE_RST
 (1<<21)

	)

761 
	#RALINK_UHST_RST
 (1<<22)

	)

762 
	#RALINK_ESW_RST
 (1<<23)

	)

763 
	#RALINK_EPHY_RST
 (1<<24)

	)

764 
	#RALINK_UDEV_RST
 (1<<25)

	)

771 #ifde‡
ON_BOARD_DDR2


775 
	#DDR_CFG0_REG
 
RALINK_MEMCTRL_BASE
+0x40

	)

776 
	#RAS_OFFSET
 23

	)

777 
	#TRFC_OFFSET
 13

	)

778 
	#TRFI_OFFSET
 0

	)

779 #ifde‡ 
ON_BOARD_32BIT_DRAM_BUS


780 
	#BL_VALUE
 2

781 #ñ£

	)

782 
	#BL_VALUE
 3

784 

	)

785 
	#CAS_OFFSET
 4

	)

786 
	#BL_OFFSET
 0

	)

787 
	#AddôiveL©ícy_OFFSET
 3

	)

789 #i‡
deföed
 (
W9751G6IB_25
)

790 
	#RAS_VALUE
 7

	)

791 
	#TRFC_VALUE
 9

	)

792 
	#TRFI_VALUE
 650

	)

793 
	#CAS_VALUE
 3

	)

794 
	#AddôiveL©ícy_VALUE
 0

	)

798 #i‡
deföed
 (
RT6855A_ASIC_BOARD
Ë|| deföed (
RT6855A_FPGA_BOARD
)

799 
	#RALINK_SDRAM_CFG0_REG
 (
RALINK_MEMCTRL_BASE
)

	)

800 
	#RALINK_SDRAM_CFG1_REG
 (
RALINK_MEMCTRL_BASE
+0x4)

	)

801 
	#RALINK_DDR_CFG0
 (
RALINK_MEMCTRL_BASE
+0x40)

	)

802 
	#RALINK_DDR_CFG1
 (
RALINK_MEMCTRL_BASE
+0x44)

	)

803 
	#RALINK_DDR_CFG2
 (
RALINK_MEMCTRL_BASE
+0x48)

	)

804 
	#RALINK_DDR_CFG3
 (
RALINK_MEMCTRL_BASE
+0x4c)

	)

805 
	#RALINK_DDR_CFG4
 (
RALINK_MEMCTRL_BASE
+0x50)

	)

806 
	#RALINK_DDR_CFG9
 (
RALINK_MEMCTRL_BASE
+0x64)

	)

809 #i‡
deföed
 (
MT7620_ASIC_BOARD
Ë|| deföed (
MT7620_FPGA_BOARD
Ë|| deföed (
MT7628_ASIC_BOARD
Ë|| deföed (
MT7628_FPGA_BOARD
)

811 
	#RALINK_CPLLCFG0_REG
 (
RALINK_SYSCTL_BASE
+0x54)

	)

812 
	#RALINK_CPLLCFG1_REG
 (
RALINK_SYSCTL_BASE
+0x58)

	)

813 
	#CPLL_SW_CONFIG
 (0x1UL << 31)

	)

814 
	#CPLL_MULT_RATIO_SHIFT
 16

	)

815 
	#CPLL_MULT_RATIO
 (0x7UL << 
CPLL_MULT_RATIO_SHIFT
)

	)

816 
	#CPLL_DIV_RATIO_SHIFT
 10

	)

817 
	#CPLL_DIV_RATIO
 (0x3UL << 
CPLL_DIV_RATIO_SHIFT
)

	)

818 
	#BASE_CLOCK
 40

	)

822 #i‡
deföed
 (
RT6855A_ASIC_BOARD
Ë|| deföed (
RT6855A_FPGA_BOARD
)

823 
	#RALINK_TIMER_CTL
 (
RALINK_TIMER_BASE
 + 0x00)

	)

824 
	#RALINK_TIMER5_LDV
 (
RALINK_TIMER_BASE
 + 0x2C)

	)

827 #i‡
deföed
 (
RT6855A_ASIC_BOARD
Ë|| deföed (
RT6855A_FPGA_BOARD
)

828 
	#RALINK_HIR_REG
 (
RALINK_SYSCTL_BASE
+0x64)

	)

831 #i‡
deföed
 (
MT7621_ASIC_BOARD
Ë|| deföed (
MT7621_FPGA_BOARD
)

832 
	#RALINK_PIO_BASE
 0xBE000600

	)

833 
	#RALINK_CLKCFG0_REG
 0xBE00002C

	)

834 
	#RALINK_GPIOMODE_REG
 0xBE000060

	)

835 
	#RALINK_CUR_CLK_STS_REG
 0xBE000044

	)

836 
	#RALINK_DYN_CFG0_REG
 0xBE000410

	)

839 #i‡
deföed
 (
MT7628_ASIC_BOARD
Ë|| deföed (
MT7628_FPGA_BOARD
)

840 
	#RALINK_CLKCFG0_REG
 0xB000002C

	)

841 
	#RALINK_DYN_CFG0_REG
 0xB0000440

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/rtc.h

27 #i‚de‡
_RTC_H_


28 
	#_RTC_H_


	)

43 
	sπc_time
 {

44 
	mtm_£c
;

45 
	mtm_mö
;

46 
	mtm_hour
;

47 
	mtm_mday
;

48 
	mtm_m⁄
;

49 
	mtm_yór
;

50 
	mtm_wday
;

51 
	mtm_yday
;

52 
	mtm_isd°
;

55 
πc_gë
 (
πc_time
 *);

56 
πc_£t
 (
πc_time
 *);

57 
πc_ª£t
 ();

59 
Gªg‹ünDay
 (
πc_time
 *);

60 
to_tm
 (, 
πc_time
 *);

61 
mktime
 (, , ,

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/s_record.h

95 
	#SREC_START
 0

	)

96 
	#SREC_DATA2
 1

	)

97 
	#SREC_DATA3
 2

	)

98 
	#SREC_DATA4
 3

	)

99 
	#SREC_COUNT
 5

	)

100 
	#SREC_END4
 7

	)

101 
	#SREC_END3
 8

	)

102 
	#SREC_END2
 9

	)

103 
	#SREC_EMPTY
 10

	)

105 
	#SREC_REC_OK
 
SREC_EMPTY


	)

107 
	#SREC_E_BADTYPE
 -1

	)

108 
	#SREC_E_NOSREC
 -2

	)

109 
	#SREC_E_BADCHKS
 -3

	)

111 
	#SREC_MAXRECLEN
 (512 + 4Ë

	)

112 
	#SREC_MAXBINLEN
 255

	)

114 
§ec_decode
 (*
öput
, *
cou¡
, 
ul⁄g
 *
addr
, *
d©a
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/scsi.h

24 #i‚de‡
_SCSI_H


25 
	#_SCSI_H


	)

27 
	sSCSI_cmd_block
{

28 
	mcmd
[16];

29 
	m£n£_buf
[64];

30 
	m°©us
;

31 
	mèrgë
;

32 
	mlun
;

33 
	mcmdÀn
;

34 
	md©Æí
;

35 * 
	mpd©a
;

36 
	mmsgout
[12];

37 
	mmsgö
[12];

38 
	m£n£cmdÀn
;

39 
	m£n£d©Æí
;

40 
	m£n£cmd
[6];

41 
	mc⁄å_°©
;

42 
	må™s_byãs
;

44 
	m¥iv
;

45 }
	tccb
;

58 
	#M_COMPLETE
 (0x00)

	)

59 
	#M_EXTENDED
 (0x01)

	)

60 
	#M_SAVE_DP
 (0x02)

	)

61 
	#M_RESTORE_DP
 (0x03)

	)

62 
	#M_DISCONNECT
 (0x04)

	)

63 
	#M_ID_ERROR
 (0x05)

	)

64 
	#M_ABORT
 (0x06)

	)

65 
	#M_REJECT
 (0x07)

	)

66 
	#M_NOOP
 (0x08)

	)

67 
	#M_PARITY
 (0x09)

	)

68 
	#M_LCOMPLETE
 (0x0a)

	)

69 
	#M_FCOMPLETE
 (0x0b)

	)

70 
	#M_RESET
 (0x0c)

	)

71 
	#M_ABORT_TAG
 (0x0d)

	)

72 
	#M_CLEAR_QUEUE
 (0x0e)

	)

73 
	#M_INIT_REC
 (0x0f)

	)

74 
	#M_REL_REC
 (0x10)

	)

75 
	#M_TERMINATE
 (0x11)

	)

76 
	#M_SIMPLE_TAG
 (0x20)

	)

77 
	#M_HEAD_TAG
 (0x21)

	)

78 
	#M_ORDERED_TAG
 (0x22)

	)

79 
	#M_IGN_RESIDUE
 (0x23)

	)

80 
	#M_IDENTIFY
 (0x80)

	)

82 
	#M_X_MODIFY_DP
 (0x00)

	)

83 
	#M_X_SYNC_REQ
 (0x01)

	)

84 
	#M_X_WIDE_REQ
 (0x03)

	)

85 
	#M_X_PPR_REQ
 (0x04)

	)

92 
	#S_GOOD
 (0x00)

	)

93 
	#S_CHECK_COND
 (0x02)

	)

94 
	#S_COND_MET
 (0x04)

	)

95 
	#S_BUSY
 (0x08)

	)

96 
	#S_INT
 (0x10)

	)

97 
	#S_INT_COND_MET
 (0x14)

	)

98 
	#S_CONFLICT
 (0x18)

	)

99 
	#S_TERMINATED
 (0x20)

	)

100 
	#S_QUEUE_FULL
 (0x28)

	)

101 
	#S_ILLEGAL
 (0xff)

	)

102 
	#S_SENSE
 (0x80)

	)

108 
	#SENSE_NO_SENSE
 0x0

	)

109 
	#SENSE_RECOVERED_ERROR
 0x1

	)

110 
	#SENSE_NOT_READY
 0x2

	)

111 
	#SENSE_MEDIUM_ERROR
 0x3

	)

112 
	#SENSE_HARDWARE_ERROR
 0x4

	)

113 
	#SENSE_ILLEGAL_REQUEST
 0x5

	)

114 
	#SENSE_UNIT_ATTENTION
 0x6

	)

115 
	#SENSE_DATA_PROTECT
 0x7

	)

116 
	#SENSE_BLANK_CHECK
 0x8

	)

117 
	#SENSE_VENDOR_SPECIFIC
 0x9

	)

118 
	#SENSE_COPY_ABORTED
 0xA

	)

119 
	#SENSE_ABORTED_COMMAND
 0xB

	)

120 
	#SENSE_VOLUME_OVERFLOW
 0xD

	)

121 
	#SENSE_MISCOMPARE
 0xE

	)

124 
	#SCSI_CHANGE_DEF
 0x40

	)

125 
	#SCSI_COMPARE
 0x39

	)

126 
	#SCSI_COPY
 0x18

	)

127 
	#SCSI_COP_VERIFY
 0x3A

	)

128 
	#SCSI_INQUIRY
 0x12

	)

129 
	#SCSI_LOG_SELECT
 0x4C

	)

130 
	#SCSI_LOG_SENSE
 0x4D

	)

131 
	#SCSI_MODE_SEL6
 0x15

	)

132 
	#SCSI_MODE_SEL10
 0x55

	)

133 
	#SCSI_MODE_SEN6
 0x1A

	)

134 
	#SCSI_MODE_SEN10
 0x5A

	)

135 
	#SCSI_READ_BUFF
 0x3C

	)

136 
	#SCSI_REQ_SENSE
 0x03

	)

137 
	#SCSI_SEND_DIAG
 0x1D

	)

138 
	#SCSI_TST_U_RDY
 0x00

	)

139 
	#SCSI_WRITE_BUFF
 0x3B

	)

143 
	#SCSI_COMPARE
 0x39

	)

144 
	#SCSI_FORMAT
 0x04

	)

145 
	#SCSI_LCK_UN_CAC
 0x36

	)

146 
	#SCSI_PREFETCH
 0x34

	)

147 
	#SCSI_MED_REMOVL
 0x1E

	)

148 
	#SCSI_READ6
 0x08

	)

149 
	#SCSI_READ10
 0x28

	)

150 
	#SCSI_RD_CAPAC
 0x25

	)

151 
	#SCSI_RD_DEFECT
 0x37

	)

152 
	#SCSI_READ_LONG
 0x3E

	)

153 
	#SCSI_REASS_BLK
 0x07

	)

154 
	#SCSI_RCV_DIAG
 0x1C

	)

155 
	#SCSI_RELEASE
 0x17

	)

156 
	#SCSI_REZERO
 0x01

	)

157 
	#SCSI_SRCH_DAT_E
 0x31

	)

158 
	#SCSI_SRCH_DAT_H
 0x30

	)

159 
	#SCSI_SRCH_DAT_L
 0x32

	)

160 
	#SCSI_SEEK6
 0x0B

	)

161 
	#SCSI_SEEK10
 0x2B

	)

162 
	#SCSI_SEND_DIAG
 0x1D

	)

163 
	#SCSI_SET_LIMIT
 0x33

	)

164 
	#SCSI_START_STP
 0x1B

	)

165 
	#SCSI_SYNC_CACHE
 0x35

	)

166 
	#SCSI_VERIFY
 0x2F

	)

167 
	#SCSI_WRITE6
 0x0A

	)

168 
	#SCSI_WRITE10
 0x2A

	)

169 
	#SCSI_WRT_VERIFY
 0x2E

	)

170 
	#SCSI_WRITE_LONG
 0x3F

	)

171 
	#SCSI_WRITE_SAME
 0x41

	)

178 
scsi_¥öt_îr‹
(
ccb
 *
pccb
);

179 
scsi_exec
(
ccb
 *
pccb
);

180 
scsi_bus_ª£t
();

181 
scsi_low_Àvñ_öô
(
busdevfunc
);

187 
scsi_öô
();

190 
	#SCSI_IDENTIFY
 0xC0

	)

193 
	#SCSI_SEL_TIME_OUT
 0x00000101

	)

194 
	#SCSI_HNS_TIME_OUT
 0x00000102

	)

195 
	#SCSI_MA_TIME_OUT
 0x00000103

	)

196 
	#SCSI_UNEXP_DIS
 0x00000104

	)

198 
	#SCSI_INT_STATE
 0x00010000

	)

201 #i‚de‡
TRUE


202 
	#TRUE
 1

	)

204 #i‚de‡
FALSE


205 
	#FALSE
 0

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/serial.h

1 #i‚de‡
__SERIAL_H__


2 
	#__SERIAL_H__


	)

4 
	#NAMESIZE
 16

	)

5 
	#CTLRSIZE
 8

	)

7 
	s£rül_devi˚
 {

8 
	m«me
[
NAMESIZE
];

9 
	m˘Ã
[
CTLRSIZE
];

11 (*
	möô
) ();

12 (*
	m£tbrg
) ();

13 (*
	mgëc
) ();

14 (*
	mt°c
) ();

15 (*
	mputc
Ë(c⁄° 
	mc
);

16 (*
	mputs
Ë(c⁄° *
	ms
);

18 
£rül_devi˚
 *
	m√xt
;

21 
£rül_devi˚
 
£rül_smc_devi˚
;

22 
£rül_devi˚
 
£rül_scc_devi˚
;

23 
£rül_devi˚
 * 
deÁu…_£rül_c⁄sﬁe
 ();

25 #i‡
deföed
(
CONFIG_405GP
Ë|| deföed(
CONFIG_405CR
Ë|| deföed(
CONFIG_440
) \

26 || 
	$deföed
(
CONFIG_405EP
)

27 
£rül_devi˚
 
£rül0_devi˚
;

28 
£rül_devi˚
 
£rül1_devi˚
;

32 
	`£rül_öôülize
();

33 
	`£rül_devi˚s_öô
();

34 
	`£rül_assign
(* 
«me
);

35 
	`£rül_ªöô_Æl
();

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/spi.h

24 #i‚de‡
_SPI_H_


25 
	#_SPI_H_


	)

30 (*
	t•i_chù£l_ty≥
)(
	tcs
);

36 
	`•i_öô
();

71 
	`•i_x„r
(
•i_chù£l_ty≥
 
chù£l
, 
bôÀn
, 
uch¨
 *
dout
, uch¨ *
dö
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/spi_api.h

1 #i‚de‡
_SPI_API_H_


2 
	#_SPI_SPI_H_


	)

5 
ø•i_öô
();

6 
•i_ív_öô
();

8 
ø•i_wrôe
(*
buf
, 
to
, 
Àn
);

9 
ø•i_ªad
(*
buf
, 
‰om
, 
Àn
);

10 
ø•i_îa£
(
offs
, 
Àn
);

11 
ø•i_îa£_wrôe
(*
buf
, 
offs
, 
cou¡
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/sysdefs.h

31 #i‚de‡
SYSDEFS_H


32 
	#SYSDEFS_H


	)

42 #ifde‡
__ASSEMBLER__


43 
	#_ASSEMBLER_


	)

46 #ifde‡
__ghs__


47 
	#_GHS_


	)

50 #ifde‡
_ASSEMBLER_


54 #ifde‡ 
__ghs__


55 
	#ALIGN
(
x
Ë.##
	`Æign
 (1 << (x))

	)

57 
	#ALIGN
(
x
Ë.##
	`Æign
 (x)

	)

60 #ifde‡
__ghs__


61 
	#SET_MIPS3
()

	)

62 
	#SET_MIPS0
()

	)

63 
	#SET_PUSH
()

	)

64 
	#SET_POP
()

	)

66 
	#SET_MIPS3
(Ë.##
£t
 
mùs3


	)

67 
	#SET_MIPS0
(Ë.##
£t
 
mùs0


	)

68 
	#SET_PUSH
(Ë.##
£t
 
push


	)

69 
	#SET_POP
(Ë.##
£t
 
p›


	)

81 #ifde‡
_BSS_OLD_


82 
	#BSS
 .##
£˘i⁄
 
bss


	)

84 
	#BSS
 .##
bss


	)

87 
	#SWAPEND32
–
§c
, 
tmp0
, 
tmp1
 )\

88 
™d
 
tmp0
, 
§c
, 0xff;\

89 
§l
 
§c
, 8;\

90 
¶l
 
tmp0
, 8;\

91 
™d
 
tmp1
, 
§c
, 0xff;\

92 
‹
 
tmp0
, 
tmp1
;\

93 
§l
 
§c
, 8;\

94 
¶l
 
tmp0
, 8;\

95 
™d
 
tmp1
, 
§c
, 0xff;\

96 
‹
 
tmp0
, 
tmp1
;\

97 
§l
 
§c
, 8;\

98 
¶l
 
tmp0
, 8;\

99 
‹
 
§c
, 
tmp0


	)

101 
	#LEAF
(
«me
)\

102 .##
ãxt
;\

103 .##
globl
 
«me
;\

104 .##
ít
 
«me
;\

105 
«me
:

	)

108 
	#SLEAF
(
«me
)\

109 .##
ãxt
;\

110 .##
ít
 
«me
;\

111 
«me
:

	)

114 #ifde‡
__ghs__


115 
	#END
(
«me
)\

116 .##
íd
 
«me


	)

118 
	#END
(
«me
)\

119 .##
size
 
«me
,.-name;\

120 .##
íd
 
«me


	)

124 
	#EXTERN
(
«me
)

	)

130 
	#SWAPEND32
(
d
Ë((
	`BYTE
(d,0) << 24) |\

131 (
	`BYTE
(
d
,1) << 16) |\

132 (
	`BYTE
(
d
,2) << 8) |\

133 (
	`BYTE
(
d
,3Ë<< 0))

	)

135 
	#SWAPEND64
(
d
Ë((
	`BYTE
(d,0) << 56) |\

136 (
	`BYTE
(
d
,1) << 48) |\

137 (
	`BYTE
(
d
,2) << 40) |\

138 (
	`BYTE
(
d
,3) << 32) |\

139 (
	`BYTE
(
d
,4) << 24) |\

140 (
	`BYTE
(
d
,5) << 16) |\

141 (
	`BYTE
(
d
,6) << 8) |\

142 (
	`BYTE
(
d
,7Ë<< 0))

	)

144 
	tUINT8
;

145 sig√d 
	tINT8
;

146 
	tUINT16
;

147 sig√d 
	tINT16
;

148 
	tUINT32
;

149 sig√d 
	tINT32
;

150 
	tUINT64
;

151 sig√d 
	tINT64
;

152 
UINT8
 
	tboﬁ
;

154 #i‚de‡
_SIZE_T


155 
	#_SIZE_T


	)

156 #ifde‡
__ghs__


157 
	tsize_t
;

159 
	tsize_t
;

170 
	#FALSE
 0

	)

171 
	#TRUE
 (!
FALSE
)

	)

173 
	#NULL
 ((*)0)

	)

174 
	#MIN
(
x
,
y
Ë((xË< (yË? (xË: (y))

	)

175 
	#MAX
(
x
,
y
Ë((xË> (yË? (xË: (y))

	)

177 
	#INCWRAP
–
±r
, 
size
 ) (±rË(’å)+1Ë% (size)

	)

178 
	#DECWRAP
–
±r
, 
size
 ) (±rË((’åË=0Ë? ((sizeË- 1Ë: (’åË- 1))

	)

180 
	#MAXUINT
(
w
) (\

181 ((
w
Ë=(
UINT8
)) ? 0xFFU :\

182 ((
w
Ë=(
UINT16
)) ? 0xFFFFU :\

183 ((
w
Ë=(
UINT32
)) ? 0xFFFFFFFFU : 0\

184 )

	)

186 
	#MAXINT
(
w
) (\

187 ((
w
Ë=(
INT8
)) ? 0x7F :\

188 ((
w
Ë=(
INT16
)) ? 0x7FFF :\

189 ((
w
Ë=(
INT32
)) ? 0x7FFFFFFF : 0\

190 )

	)

192 
	#MSK
(
n
Ë((1 << (n)Ë- 1)

	)

194 
	#KUSEG_MSK
 0x80000000

	)

195 
	#KSEG_MSK
 0xE0000000

	)

196 
	#KUSEGBASE
 0x00000000

	)

197 
	#KSEG0BASE
 0x80000000

	)

198 
	#KSEG1BASE
 0xA0000000

	)

199 
	#KSSEGBASE
 0xC0000000

	)

200 
	#KSEG3BASE
 0xE0000000

	)

218 #ifde‡
_ASSEMBLER_


219 
	#KSEG0
(
addr
Ë((◊ddrË& ~
KSEG_MSK
Ë| 
KSEG0BASE
)

	)

220 
	#KSEG1
(
addr
Ë((◊ddrË& ~
KSEG_MSK
Ë| 
KSEG1BASE
)

	)

221 
	#KSSEG
(
addr
Ë((◊ddrË& ~
KSEG_MSK
Ë| 
KSSEGBASE
)

	)

222 
	#KSEG3
(
addr
Ë((◊ddrË& ~
KSEG_MSK
Ë| 
KSEG3BASE
)

	)

223 
	#KUSEG
(
addr
Ë((◊ddrË& ~
KUSEG_MSK
Ë| 
KUSEGBASE
)

	)

224 
	#PHYS
(
addr
Ë–◊ddrË& ~
KSEG_MSK
)

	)

225 
	#KSEG0A
(
ªg
Ë
™d
Ñeg, ~
KSEG_MSK
; 
‹
Ñeg, 
KSEG0BASE


	)

226 
	#KSEG1A
(
ªg
Ë
™d
Ñeg, ~
KSEG_MSK
; 
‹
Ñeg, 
KSEG1BASE


	)

227 
	#PHYSA
(
ªg
Ë
™d
Ñeg, ~
KSEG_MSK


	)

228 
	#KSEG0A2
(
d
,
s
Ë
™d
 d, s, ~
KSEG_MSK
; 
‹
 d, 
KSEG0BASE


	)

229 
	#KSEG1A2
(
d
,
s
Ë
™d
 d, s, ~
KSEG_MSK
; 
‹
 d, 
KSEG1BASE


	)

230 
	#PHYSA2
(
d
,
s
Ë
™d
 d, s, ~
KSEG_MSK


	)

232 
	#KSEG0
(
addr
Ë(((
UINT32
)◊ddrË& ~
KSEG_MSK
Ë| 
KSEG0BASE
)

	)

233 
	#KSEG1
(
addr
Ë(((
UINT32
)◊ddrË& ~
KSEG_MSK
Ë| 
KSEG1BASE
)

	)

234 
	#KSSEG
(
addr
Ë(((
UINT32
)◊ddrË& ~
KSEG_MSK
Ë| 
KSSEGBASE
)

	)

235 
	#KSEG3
(
addr
Ë(((
UINT32
)◊ddrË& ~
KSEG_MSK
Ë| 
KSEG3BASE
)

	)

236 
	#KUSEG
(
addr
Ë(((
UINT32
)◊ddrË& ~
KUSEG_MSK
Ë| 
KUSEGBASE
)

	)

237 
	#PHYS
(
addr
Ë((
UINT32
)◊ddrË& ~
KSEG_MSK
)

	)

240 
	#CACHED
(
addr
Ë
	`KSEG0
◊ddr)

	)

241 
	#UNCACHED
(
addr
Ë
	`KSEG1
◊ddr)

	)

244 #ifde‡
_ASSEMBLER_


250 
	#HIKSEG0
(
addr
Ë((
	`KSEG0
◊ddrË+ 0x8000Ë& 0xffff0000)

	)

251 
	#HIKSEG1
(
addr
Ë((
	`KSEG1
◊ddrË+ 0x8000Ë& 0xffff0000)

	)

252 
	#HI_PART
(
addr
Ë((◊ddrË+ 0x8000Ë& 0xffff0000)

	)

253 
	#LO_OFFS
(
addr
Ë(◊ddrË& 0xffff)

	)

258 
	#HI32
(
d©a64
Ë((
UINT32
)(d©a64 >> 32))

	)

259 
	#LO32
(
d©a64
Ë((
UINT32
)(d©a64 & 0xFFFFFFFF))

	)

261 
	#REG8
–
addr
 ) (*(vﬁ©ûê
UINT8
 *Ë◊ddr))

	)

262 
	#REG16
–
addr
 ) (*(vﬁ©ûê
UINT16
 *)◊ddr))

	)

263 
	#REG32
–
addr
 ) (*(vﬁ©ûê
UINT32
 *)◊ddr))

	)

264 
	#REG64
–
addr
 ) (*(vﬁ©ûê
UINT64
 *)◊ddr))

	)

268 
	#REGFIELD
(
ªg
, 
rÊd
Ë((‘egË&ÑÊd##
_MSK
Ë>>ÑÊd##
_SHF
)

	)

271 
	#REGA
(
addr
Ë
	`REG32
◊ddr)

	)

274 
	#REGP
(
ba£
,
phys
Ë
	`REG32
–(
UINT32
)(ba£Ë+ (physË)

	)

277 
	#REG
(
ba£
,
offs
Ë
	`REG32
–(
UINT32
)(ba£Ë+ offs##
_
##
OFS
 )

	)

284 
	#REGARD
(
addr
,
Êd
Ë((
	`REGA
◊ddrË&áddr##
_
##Êd##_##
MSK
) \

285 >> 
addr
##
_
##
Êd
##_##
SHF
)

	)

288 
	#REGAWRI
(
addr
,
Êd
,
ötvÆ
Ë((
	`REGA
◊ddrË& ~◊ddr##
_
##Êd##_##
MSK
))\

289 | ((
ötvÆ
Ë<< 
addr
##
_
##
Êd
##_##
SHF
))

	)

292 
	#REGAWRE
(
addr
,
Êd
,
íumvÆ
Ë((
	`REGA
◊ddrË& ~◊ddr##
_
##Êd##_##
MSK
))\

293 | ((
addr
##
_
##
Êd
##_##
íumvÆ
Ë<<áddr##_##Êd##_##
SHF
))

	)

306 
	#REGRD
(
ba£
,
offs
,
Êd
Ë((
	`REG
(ba£,offsË& offs##
_
##Êd##_##
MSK
) \

307 >> 
offs
##
_
##
Êd
##_##
SHF
)

	)

310 
	#REGWRI
(
ba£
,
offs
,
Êd
,
ötvÆ
)((
	`REG
(ba£,offs)& ~(offs##
_
##Êd##_##
MSK
))\

311 | (((
ötvÆ
Ë<< 
offs
##
_
##
Êd
##_##
SHF
Ë& offs##_##Êd##_##
MSK
))

	)

314 
	#REGWRE
(
ba£
,
offs
,
Êd
,
íumvÆ
)((
	`REG
(ba£,offsË& ~(offs##
_
##Êd##_##
MSK
))\

315 | ((
offs
##
_
##
Êd
##_##
íumvÆ
Ë<< offs##_##Êd##_##
SHF
))

	)

319 
	#REGPRD
(
ba£
,
phys
,
Êd
Ë((
	`REGP
(ba£,physË&Öhys##
_
##Êd##_##
MSK
) \

320 >> 
phys
##
_
##
Êd
##_##
SHF
)

	)

323 
	#REGPWRI
(
ba£
,
phys
,
Êd
,
ötvÆ
)((
	`REGP
(ba£,phys)& ~’hys##
_
##Êd##_##
MSK
))\

324 | ((
ötvÆ
Ë<< 
phys
##
_
##
Êd
##_##
SHF
))

	)

327 
	#REGPWRE
(
ba£
,
phys
,
Êd
,
íumvÆ
)((
	`REGP
(ba£,physË& ~’hys##
_
##Êd##_##
MSK
))\

328 | ((
phys
##
_
##
Êd
##_##
íumvÆ
Ë<<Öhys##_##Êd##_##
SHF
))

	)

335 
	#SWAP_BYTEADDR32
–
addr
 ) ( (addrË^ 0x3 )

	)

336 
	#SWAP_UINT16ADDR32
–
addr
 ) ( (addrË^ 0x2 )

	)

338 
	#BYTE
(
d
,
n
Ë(((dË>> (“Ë<< 3)Ë& 0xFF)

	)

341 #ifde‡
EL


342 
	#SWAP_BYTEADDR_EL
(
addr
Ë
	)
addr

344 
	#SWAP_BYTEADDR_EL
(
addr
Ë
	`SWAP_BYTEADDR32
–add∏)

	)

348 #ifde‡
EB


349 
	#SWAP_BYTEADDR_EB
(
addr
Ë
	)
addr

351 
	#SWAP_BYTEADDR_EB
(
addr
Ë
	`SWAP_BYTEADDR32
–add∏)

	)

355 #ifde‡
EL


356 
	#SWAP_UINT16ADDR_EL
(
addr
Ë
	)
addr

358 
	#SWAP_UINT16ADDR_EL
(
addr
Ë
	`SWAP_UINT16ADDR32
–add∏)

	)

362 #ifde‡
EB


363 
	#SWAP_UINT16ADDR_EB
(
addr
Ë
	)
addr

365 
	#SWAP_UINT16ADDR_EB
(
addr
Ë
	`SWAP_UINT16ADDR32
–add∏)

	)

368 #ifde‡
EL


369 
	#REGW32LE
(
addr
, 
d©a
Ë
	`REG32
◊ddrË(d©a)

	)

370 
	#REGR32LE
(
addr
, 
d©a
Ë(d©aË
	`REG32
◊ddr)

	)

372 
	#REGW32LE
(
addr
, 
d©a
Ë
	`REG32
◊ddrË
	`SWAPEND32
(d©a)

	)

373 
	#REGR32LE
(
addr
, 
d©a
Ë(d©aË
	`REG32
◊ddr), (d©aË
	`SWAPEND32
(d©a)

	)

377 #ifde‡
EL


378 
	#CPU_TO_LE32
–
vÆue
 ) (vÆue)

	)

379 
	#LE32_TO_CPU
–
vÆue
 ) (vÆue)

	)

381 
	#CPU_TO_LE16
–
vÆue
 ) (vÆue)

	)

382 
	#LE16_TO_CPU
–
vÆue
 ) (vÆue)

	)

384 
	#CPU_TO_LE32
–
vÆue
 ) ( ( ((
UINT32
)value) << 24) | \

385 ((0x0000FF00UL & ((
UINT32
)
vÆue
)) << 8) | \

386 ((0x00FF0000UL & ((
UINT32
)
vÆue
)) >> 8) | \

387 –((
UINT32
)
vÆue
Ë>> 24Ë)

	)

388 
	#LE32_TO_CPU
–
vÆue
 ) 
	`CPU_TO_LE32
–vÆuê)

	)

390 
	#CPU_TO_LE16
–
vÆue
 ) ( ((
UINT16
)(((UINT16)value) << 8)) | \

391 ((
UINT16
)(((UINT16)
vÆue
Ë>> 8)Ë)

	)

392 
	#LE16_TO_CPU
–
vÆue
 ) 
	`CPU_TO_LE16
–vÆuê)

	)

396 #ifde‡
EB


397 
	#CPU_TO_BE32
–
vÆue
 ) (vÆue)

	)

398 
	#BE32_TO_CPU
–
vÆue
 ) (vÆue)

	)

400 
	#CPU_TO_BE16
–
vÆue
 ) (vÆue)

	)

401 
	#BE16_TO_CPU
–
vÆue
 ) (vÆue)

	)

403 
	#CPU_TO_BE32
–
vÆue
 ) ( ( ((
UINT32
)value) << 24) | \

404 ((0x0000FF00UL & ((
UINT32
)
vÆue
)) << 8) | \

405 ((0x00FF0000UL & ((
UINT32
)
vÆue
)) >> 8) | \

406 –((
UINT32
)
vÆue
Ë>> 24Ë)

	)

407 
	#BE32_TO_CPU
–
vÆue
 ) 
	`CPU_TO_BE32
–vÆuê)

	)

409 
	#CPU_TO_BE16
–
vÆue
 ) ( ((
UINT16
)(((UINT16)value) << 8)) | \

410 ((
UINT16
)(((UINT16)
vÆue
Ë>> 8)Ë)

	)

411 
	#BE16_TO_CPU
–
vÆue
 ) 
	`CPU_TO_BE16
–vÆuê)

	)

414 #ifde‡
_ASSEMBLER_


415 
	$EXTERN
(
deÁu…_p‹t
)

416 
	$EXTERN
(
debug_p‹t
)

417 
	$EXTERN
(
deÁu…_gdb_p‹t
)

419 
UINT8
 
deÁu…_p‹t
;

420 
UINT8
 
debug_p‹t
;

421 
UINT8
 
deÁu…_gdb_p‹t
;

425 
	#PORT_TTY0
 0

	)

426 
	#PORT_TTY1
 1

	)

427 
	#PORT_NET
 2

	)

428 
	#DEFAULT_PORT
 
deÁu…_p‹t


	)

429 
	#DEBUG_PORT
 
degug_p‹t


	)

430 
	#DEFAULT_GDB_PORT
 
deÁu…_gdb_p‹t


	)

433 
	#DEFAULT_TTY_PORT
 
PORT_TTY0


	)

436 
	#DEFAULT_BOOTPORT_ENV
 "ây0"

	)

439 
	#CTRL_A
 ('A'-0x40)

	)

440 
	#CTRL_B
 ('B'-0x40)

	)

441 
	#CTRL_C
 ('C'-0x40)

	)

442 
	#CTRL_D
 ('D'-0x40)

	)

443 
	#CTRL_E
 ('E'-0x40)

	)

444 
	#CTRL_F
 ('F'-0x40)

	)

445 
	#CTRL_H
 ('H'-0x40)

	)

446 
	#CTRL_K
 ('K'-0x40)

	)

447 
	#CTRL_N
 ('N'-0x40)

	)

448 
	#CTRL_P
 ('P'-0x40)

	)

449 
	#CTRL_U
 ('U'-0x40)

	)

450 
	#DEL
 0x7F

	)

451 
	#TAB
 0x09

	)

452 
	#CR
 0x0D

	)

453 
	#LF
 0x0A

	)

454 
	#ESC
 0x1B

	)

455 
	#SP
 0x20

	)

456 
	#CSI
 0x9B

	)

457 
	#EOF_SREC
 -2

	)

458 
	#UART_ERROR
 -1

	)

462 
	#DEF2STR1
(
x
Ë#x

	)

463 
	#DEF2STR
(
x
Ë
	`DEF2STR1
(x)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/systemace.h

1 #i‚de‡
__SYSTEMACE_H


2 
	#__SYSTEMACE_H


	)

24 #ifde‡
CONFIG_SYSTEMACE


26 
	~<∑π.h
>

28 
block_dev_desc_t
 * 
sy°ema˚_gë_dev
(
dev
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/unxz.h

11 #i‚de‡
DECOMPRESS_UNXZ_H


12 
	#DECOMPRESS_UNXZ_H


	)

14 
unxz
(*
ö
, 
ö_size
, *
out
, *
ö_u£d
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/usb.h

9 #i‚de‡
_USB_H_


10 
	#_USB_H_


	)

12 
	~<usb_defs.h
>

13 
	~<löux/usb/ch9.h
>

14 
	~<asm/ˇche.h
>

20 #i‡
ARCH_DMA_MINALIGN
 > 32

21 
	#USB_DMA_MINALIGN
 
ARCH_DMA_MINALIGN


	)

23 
	#USB_DMA_MINALIGN
 32

	)

27 
	#USB_ALTSETTINGALLOC
 4

	)

28 
	#USB_MAXALTSETTING
 128

	)

30 
	#USB_MAX_DEVICE
 32

	)

31 
	#USB_MAXCONFIG
 8

	)

32 
	#USB_MAXINTERFACES
 8

	)

33 
	#USB_MAXENDPOINTS
 16

	)

34 
	#USB_MAXCHILDREN
 8

	)

35 
	#USB_MAX_HUB
 16

	)

37 
	#USB_CNTL_TIMEOUT
 100

	)

43 
	#USB_TIMEOUT_MS
(
pùe
Ë(
	`usb_pùebulk
’ùeË? 5000 : 1000)

	)

46 
	sdevªque°
 {

47 
	mªque°ty≥
;

48 
	mªque°
;

49 
	mvÆue
;

50 
	mödex
;

51 
	mÀngth
;

52 } 
__©åibuã__
 ((
∑cked
));

55 
	susb_öãrÁ˚
 {

56 
usb_öãrÁ˚_des¸ùt‹
 
	mdesc
;

58 
	mno_of_ï
;

59 
	mnum_Æt£âög
;

60 
	ma˘_Æt£âög
;

62 
usb_ídpoöt_des¸ùt‹
 
	mï_desc
[
USB_MAXENDPOINTS
];

68 
usb_ss_ï_comp_des¸ùt‹
 
	mss_ï_comp_desc
[
USB_MAXENDPOINTS
];

69 } 
__©åibuã__
 ((
∑cked
));

72 
	susb_c⁄fig
 {

73 
usb_c⁄fig_des¸ùt‹
 
	mdesc
;

75 
	mno_of_if
;

76 
usb_öãrÁ˚
 
	mif_desc
[
USB_MAXINTERFACES
];

77 } 
__©åibuã__
 ((
∑cked
));

81 
	mPACKET_SIZE_8
 = 0,

82 
	mPACKET_SIZE_16
 = 1,

83 
	mPACKET_SIZE_32
 = 2,

84 
	mPACKET_SIZE_64
 = 3,

87 
	susb_devi˚
 {

88 
	mdevnum
;

89 
	m•ìd
;

90 
	mmf
[32];

91 
	m¥od
[32];

92 
	m£rül
[32];

95 
	mmax∑ckësize
;

97 
	mtoggÀ
[2];

101 
	mhÆãd
[2];

102 
	mïmax∑ckëö
[16];

103 
	mïmax∑ckëout
[16];

105 
	mc⁄figno
;

107 
usb_devi˚_des¸ùt‹
 
des¸ùt‹


108 
__©åibuã__
((
Æig√d
(
ARCH_DMA_MINALIGN
)));

109 
usb_c⁄fig
 
	mc⁄fig
;

111 
	mhave_œngid
;

112 
	m°rög_œngid
;

113 (*
	múq_h™dÀ
)(
usb_devi˚
 *
	mdev
);

114 
	múq_°©us
;

115 
	múq_a˘_Àn
;

116 *
	m¥iv±r
;

121 
	m°©us
;

122 
	ma˘_Àn
;

123 
	mmaxchûd
;

124 
	mp‹är
;

125 
usb_devi˚
 *
	m∑ª¡
;

126 
usb_devi˚
 *
	mchûdªn
[
USB_MAXCHILDREN
];

128 *
	mc⁄åﬁÀr
;

130 
	m¶Ÿ_id
;

134 
	eusb_öô_ty≥
 {

135 
	mUSB_INIT_HOST
,

136 
	mUSB_INIT_DEVICE


149 #i‡
deföed
(
CONFIG_USB_UHCI
Ë|| deföed(
CONFIG_USB_OHCI
) || \

150 
deföed
(
CONFIG_USB_EHCI
Ë|| deföed(
CONFIG_USB_OHCI_NEW
) || \

151 
deföed
(
CONFIG_USB_SL811HS
Ë|| deföed(
CONFIG_USB_ISP116X_HCD
) || \

152 
deföed
(
CONFIG_USB_R8A66597_HCD
Ë|| deföed(
CONFIG_USB_DAVINCI
) || \

153 
deföed
(
CONFIG_USB_OMAP3
Ë|| deföed(
CONFIG_USB_DA8XX
) || \

154 
deföed
(
CONFIG_USB_BLACKFIN
Ë|| deföed(
CONFIG_USB_AM35X
) || \

155 
deföed
(
CONFIG_USB_MUSB_DSPS
Ë|| deföed(
CONFIG_USB_MUSB_AM35X
) || \

156 
deföed
(
CONFIG_USB_MUSB_OMAP2PLUS
Ë|| 
	$deföed
(
CONFIG_USB_XHCI
)

158 
	`usb_lowÀvñ_öô
(
ödex
, 
usb_öô_ty≥
 
öô
, **
c⁄åﬁÀr
);

159 
	`usb_lowÀvñ_°›
(
ödex
);

161 
	`submô_bulk_msg
(
usb_devi˚
 *
dev
, 
pùe
,

162 *
buf„r
, 
å™s„r_Àn
);

163 
	`submô_c⁄åﬁ_msg
(
usb_devi˚
 *
dev
, 
pùe
, *
buf„r
,

164 
å™s„r_Àn
, 
devªque°
 *
£tup
);

165 
	`submô_öt_msg
(
usb_devi˚
 *
dev
, 
pùe
, *
buf„r
,

166 
å™s„r_Àn
, 
öãrvÆ
);

169 
	#USB_UHCI_VEND_ID
 0x8086

	)

170 
	#USB_UHCI_DEV_ID
 0x7112

	)

179 #ñi‡
	`deföed
(
CONFIG_USB_GADGET_PXA2XX
)

181 
	`udc_disc⁄√˘
();

192 
	`bﬂrd_usb_öô
(
ödex
, 
usb_öô_ty≥
 
öô
);

201 
	`bﬂrd_usb_˛ónup
(
ödex
, 
usb_öô_ty≥
 
öô
);

209 #ifde‡
CONFIG_USB_CABLE_CHECK


210 
	`usb_ˇbÀ_c⁄√˘ed
();

213 #ifde‡
CONFIG_USB_STORAGE


215 
	#USB_MAX_STOR_DEV
 5

	)

216 
block_dev_desc_t
 *
	`usb_°‹_gë_dev
(
ödex
);

217 
	`usb_°‹_sˇn
(
mode
);

218 
	`usb_°‹_öfo
();

222 #ifde‡
CONFIG_USB_HOST_ETHER


224 
	#USB_MAX_ETH_DEV
 5

	)

225 
	`usb_ho°_ëh_sˇn
(
mode
);

229 #ifde‡
CONFIG_USB_KEYBOARD


231 
	`drv_usb_kbd_öô
();

232 
	`usb_kbd_dîegi°î
();

236 
	`usb_öô
();

237 
	`usb_°›
();

240 
	`usb_£t_¥Ÿocﬁ
(
usb_devi˚
 *
dev
, 
i‚um
, 
¥Ÿocﬁ
);

241 
	`usb_£t_idÀ
(
usb_devi˚
 *
dev
, 
i‚um
, 
duøti⁄
,

242 
ªp‹t_id
);

243 
usb_devi˚
 *
	`usb_gë_dev_ödex
(
ödex
);

244 
	`usb_c⁄åﬁ_msg
(
usb_devi˚
 *
dev
, 
pùe
,

245 
ªque°
, 
ªque°ty≥
,

246 
vÆue
, 
ödex
,

247 *
d©a
, 
size
, 
timeout
);

248 
	`usb_bulk_msg
(
usb_devi˚
 *
dev
, 
pùe
,

249 *
d©a
, 
Àn
, *
a˘uÆ_Àngth
, 
timeout
);

250 
	`usb_submô_öt_msg
(
usb_devi˚
 *
dev
, 
pùe
,

251 *
buf„r
, 
å™s„r_Àn
, 
öãrvÆ
);

252 
	`usb_dißbÀ_asynch
(
dißbÀ
);

253 
	`usb_max∑ckë
(
usb_devi˚
 *
dev
, 
pùe
);

254 
	`usb_gë_c⁄figuøti⁄_no
(
usb_devi˚
 *
dev
, *
buf„r
,

255 
cfgno
);

256 
	`usb_gë_ªp‹t
(
usb_devi˚
 *
dev
, 
i‚um
, 
ty≥
,

257 
id
, *
buf
, 
size
);

258 
	`usb_gë_˛ass_des¸ùt‹
(
usb_devi˚
 *
dev
, 
i‚um
,

259 
ty≥
, 
id
, *
buf
,

260 
size
);

261 
	`usb_˛ór_hÆt
(
usb_devi˚
 *
dev
, 
pùe
);

262 
	`usb_°rög
(
usb_devi˚
 *
dev
, 
ödex
, *
buf
, 
size_t
 
size
);

263 
	`usb_£t_öãrÁ˚
(
usb_devi˚
 *
dev
, 
öãrÁ˚
, 
Æã∫©e
);

267 
	#__sw≠_16
(
x
) \

268 ({ 
x_
 = ()
x
; \

270 ((
x_
 & 0x00FFU) << 8) | ((x_ & 0xFF00U) >> 8)); \

271 
	}
})

	)

272 
	#__sw≠_32
(
x
) \

273 ({ 
x_
 = ()
x
; \

275 ((
x_
 & 0x000000FFUL) << 24) | \

276 ((
x_
 & 0x0000FF00UL) << 8) | \

277 ((
x_
 & 0x00FF0000UL) >> 8) | \

278 ((
x_
 & 0xFF000000UL) >> 24)); \

279 })

	)

281 #ifde‡
__LITTLE_ENDIAN


282 
	#sw≠_16
(
x
Ë(x)

	)

283 
	#sw≠_32
(
x
Ë(x)

	)

285 
	#sw≠_16
(
x
Ë
	`__sw≠_16
(x)

	)

286 
	#sw≠_32
(
x
Ë
	`__sw≠_32
(x)

	)

323 #i‡
deföed
 (
RALINK_OHCI
Ë|| deföed (
RALINK_EHCI
)

324 
	#¸óã_pùe
(
dev
,
ídpoöt
) \

325 (((
dev
)->
devnum
 << 8Ë| (
ídpoöt
 << 15Ë| ((dev)->
•ìd
 << 26Ë| (dev)->
max∑ckësize
)

	)

327 
	#¸óã_pùe
(
dev
,
ídpoöt
) \

328 (((
dev
)->
devnum
 << 8Ë| ((
ídpoöt
) << 15) | \

329 (
dev
)->
max∑ckësize
)

	)

332 
	#deÁu…_pùe
(
dev
Ë((dev)->
•ìd
 << 26)

	)

334 
	#usb_¢d˘æpùe
(
dev
, 
ídpoöt
Ë((
PIPE_CONTROL
 << 30) | \

335 
	`¸óã_pùe
(
dev
, 
ídpoöt
))

	)

336 
	#usb_rcv˘æpùe
(
dev
, 
ídpoöt
Ë((
PIPE_CONTROL
 << 30) | \

337 
	`¸óã_pùe
(
dev
, 
ídpoöt
) | \

338 
USB_DIR_IN
)

	)

339 
	#usb_¢diso˝ùe
(
dev
, 
ídpoöt
Ë((
PIPE_ISOCHRONOUS
 << 30) | \

340 
	`¸óã_pùe
(
dev
, 
ídpoöt
))

	)

341 
	#usb_rcviso˝ùe
(
dev
, 
ídpoöt
Ë((
PIPE_ISOCHRONOUS
 << 30) | \

342 
	`¸óã_pùe
(
dev
, 
ídpoöt
) | \

343 
USB_DIR_IN
)

	)

344 
	#usb_¢dbulkpùe
(
dev
, 
ídpoöt
Ë((
PIPE_BULK
 << 30) | \

345 
	`¸óã_pùe
(
dev
, 
ídpoöt
))

	)

346 
	#usb_rcvbulkpùe
(
dev
, 
ídpoöt
Ë((
PIPE_BULK
 << 30) | \

347 
	`¸óã_pùe
(
dev
, 
ídpoöt
) | \

348 
USB_DIR_IN
)

	)

349 
	#usb_¢döçùe
(
dev
, 
ídpoöt
Ë((
PIPE_INTERRUPT
 << 30) | \

350 
	`¸óã_pùe
(
dev
, 
ídpoöt
))

	)

351 
	#usb_rcvöçùe
(
dev
, 
ídpoöt
Ë((
PIPE_INTERRUPT
 << 30) | \

352 
	`¸óã_pùe
(
dev
, 
ídpoöt
) | \

353 
USB_DIR_IN
)

	)

354 
	#usb_¢ddef˘æ
(
dev
Ë((
PIPE_CONTROL
 << 30) | \

355 
	`deÁu…_pùe
(
dev
))

	)

356 
	#usb_rcvdef˘æ
(
dev
Ë((
PIPE_CONTROL
 << 30) | \

357 
	`deÁu…_pùe
(
dev
) | \

358 
USB_DIR_IN
)

	)

361 
	#usb_gëtoggÀ
(
dev
, 
ï
, 
out
Ë(((dev)->
toggÀ
[out] >>ÉpË& 1)

	)

362 
	#usb_dŸoggÀ
(
dev
, 
ï
, 
out
Ë((dev)->
toggÀ
[out] ^(1 <<Ép))

	)

363 
	#usb_£âoggÀ
(
dev
, 
ï
, 
out
, 
bô
Ë((dev)->
toggÀ
[out] = \

364 ((
dev
)->
toggÀ
[
out
] & \

365 ~(1 << 
ï
)Ë| ((
bô
Ë<<Ép))

	)

368 
	#usb_ídpoöt_out
(
ï_dú
Ë((”p_dú >> 7Ë& 1Ë^ 1)

	)

369 
	#usb_ídpoöt_hÆt
(
dev
, 
ï
, 
out
Ë((dev)->
hÆãd
[out] |(1 << (ï)))

	)

370 
	#usb_ídpoöt_ru¬ög
(
dev
, 
ï
, 
out
Ë((dev)->
hÆãd
[out] &~(1 << (ï)))

	)

371 
	#usb_ídpoöt_hÆãd
(
dev
, 
ï
, 
out
Ë((dev)->
hÆãd
[out] & (1 << (ï)))

	)

373 
	#usb_∑ckëid
(
pùe
Ë((’ùeË& 
USB_DIR_IN
Ë? 
USB_PID_IN
 : \

374 
USB_PID_OUT
)

	)

376 
	#usb_pùeout
(
pùe
Ë(((’ùeË>> 7Ë& 1Ë^ 1)

	)

377 
	#usb_pùeö
(
pùe
Ë((’ùeË>> 7Ë& 1)

	)

378 
	#usb_pùedevi˚
(
pùe
Ë((’ùeË>> 8Ë& 0x7f)

	)

379 
	#usb_pùe_ídpdev
(
pùe
Ë((’ùeË>> 8Ë& 0x7ff)

	)

380 
	#usb_pùìndpoöt
(
pùe
Ë((’ùeË>> 15Ë& 0xf)

	)

381 
	#usb_pùed©a
(
pùe
Ë((’ùeË>> 19Ë& 1)

	)

382 
	#usb_pùe•ìd
(
pùe
Ë((’ùeË>> 26Ë& 3)

	)

383 
	#usb_pùe¶ow
(
pùe
Ë(
	`usb_pùe•ìd
’ùeË=
USB_SPEED_LOW
)

	)

384 
	#usb_pùëy≥
(
pùe
Ë((’ùeË>> 30Ë& 3)

	)

385 
	#usb_pùeisoc
(
pùe
Ë(
	`usb_pùëy≥
(’ùe)Ë=
PIPE_ISOCHRONOUS
)

	)

386 
	#usb_pùeöt
(
pùe
Ë(
	`usb_pùëy≥
(’ùe)Ë=
PIPE_INTERRUPT
)

	)

387 
	#usb_pùec⁄åﬁ
(
pùe
Ë(
	`usb_pùëy≥
(’ùe)Ë=
PIPE_CONTROL
)

	)

388 
	#usb_pùebulk
(
pùe
Ë(
	`usb_pùëy≥
(’ùe)Ë=
PIPE_BULK
)

	)

390 
	#usb_pùe_ï_ödex
(
pùe
) \

391 
	`usb_pùec⁄åﬁ
(
pùe
Ë? (
	`usb_pùìndpoöt
(pipe) * 2) : \

392 ((
	`usb_pùìndpoöt
(
pùe
) * 2) - \

393 (
	`usb_pùeö
(
pùe
Ë? 0 : 1))

	)

398 
	susb_p‹t_°©us
 {

399 
	mwP‹tSètus
;

400 
	mwP‹tCh™ge
;

401 } 
__©åibuã__
 ((
∑cked
));

403 
	susb_hub_°©us
 {

404 
	mwHubSètus
;

405 
	mwHubCh™ge
;

406 } 
__©åibuã__
 ((
∑cked
));

410 
	susb_hub_des¸ùt‹
 {

411 
	mbLígth
;

412 
	mbDes¸ùt‹Ty≥
;

413 
	mbNbrP‹ts
;

414 
	mwHubCh¨a˘îi°ics
;

415 
	mbPwrOn2PwrGood
;

416 
	mbHubC⁄åCuºít
;

417 
	mDevi˚RemovabÀ
[(
USB_MAXCHILDREN
+1+7)/8];

418 
	mP‹tPowîCålMask
[(
USB_MAXCHILDREN
+1+7)/8];

421 } 
__©åibuã__
 ((
∑cked
));

424 
	susb_hub_devi˚
 {

425 
usb_devi˚
 *
	mpusb_dev
;

426 
usb_hub_des¸ùt‹
 
	mdesc
;

429 
usb_hub_ª£t
();

430 
hub_p‹t_ª£t
(
usb_devi˚
 *
dev
, 
p‹t
,

431 *
p‹t°©
);

433 
usb_devi˚
 *
usb_Æloc_√w_devi˚
(*
c⁄åﬁÀr
);

435 
usb_√w_devi˚
(
usb_devi˚
 *
dev
);

436 
usb_‰ì_devi˚
();

437 
usb_Æloc_devi˚
(
usb_devi˚
 *
dev
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/usb_defs.h

9 #i‚de‡
_USB_DEFS_H_


10 
	#_USB_DEFS_H_


	)

15 
	#USB_CLASS_PER_INTERFACE
 0

	)

16 
	#USB_CLASS_AUDIO
 1

	)

17 
	#USB_CLASS_COMM
 2

	)

18 
	#USB_CLASS_HID
 3

	)

19 
	#USB_CLASS_PRINTER
 7

	)

20 
	#USB_CLASS_MASS_STORAGE
 8

	)

21 
	#USB_CLASS_HUB
 9

	)

22 
	#USB_CLASS_DATA
 10

	)

23 
	#USB_CLASS_VENDOR_SPEC
 0xff

	)

26 
	#USB_SUB_HID_NONE
 0

	)

27 
	#USB_SUB_HID_BOOT
 1

	)

30 
	#USB_PROT_HID_NONE
 0

	)

31 
	#USB_PROT_HID_KEYBOARD
 1

	)

32 
	#USB_PROT_HID_MOUSE
 2

	)

36 
	#US_SC_RBC
 1

	)

37 
	#US_SC_8020
 2

	)

38 
	#US_SC_QIC
 3

	)

39 
	#US_SC_UFI
 4

	)

40 
	#US_SC_8070
 5

	)

41 
	#US_SC_SCSI
 6

	)

42 
	#US_SC_MIN
 
US_SC_RBC


	)

43 
	#US_SC_MAX
 
US_SC_SCSI


	)

46 
	#US_PR_CB
 1

	)

47 
	#US_PR_CBI
 0

	)

48 
	#US_PR_BULK
 0x50

	)

51 
	#USB_TYPE_STANDARD
 (0x00 << 5)

	)

52 
	#USB_TYPE_CLASS
 (0x01 << 5)

	)

53 
	#USB_TYPE_VENDOR
 (0x02 << 5)

	)

54 
	#USB_TYPE_RESERVED
 (0x03 << 5)

	)

57 
	#USB_RECIP_DEVICE
 0x00

	)

58 
	#USB_RECIP_INTERFACE
 0x01

	)

59 
	#USB_RECIP_ENDPOINT
 0x02

	)

60 
	#USB_RECIP_OTHER
 0x03

	)

63 
	#USB_DIR_OUT
 0

	)

64 
	#USB_DIR_IN
 0x80

	)

70 
	#Devi˚Reque°
 \

71 ((
USB_DIR_IN
 | 
USB_TYPE_STANDARD
 | 
USB_RECIP_DEVICE
Ë<< 8)

	)

73 
	#Devi˚OutReque°
 \

74 ((
USB_DIR_OUT
 | 
USB_TYPE_STANDARD
 | 
USB_RECIP_DEVICE
Ë<< 8)

	)

76 
	#I¡îÁ˚Reque°
 \

77 ((
USB_DIR_IN
 | 
USB_TYPE_STANDARD
 | 
USB_RECIP_INTERFACE
Ë<< 8)

	)

79 
	#EndpoötReque°
 \

80 ((
USB_DIR_IN
 | 
USB_TYPE_STANDARD
 | 
USB_RECIP_INTERFACE
Ë<< 8)

	)

82 
	#EndpoötOutReque°
 \

83 ((
USB_DIR_OUT
 | 
USB_TYPE_STANDARD
 | 
USB_RECIP_INTERFACE
Ë<< 8)

	)

86 
	#USB_DT_DEVICE
 0x01

	)

87 
	#USB_DT_CONFIG
 0x02

	)

88 
	#USB_DT_STRING
 0x03

	)

89 
	#USB_DT_INTERFACE
 0x04

	)

90 
	#USB_DT_ENDPOINT
 0x05

	)

92 
	#USB_DT_HID
 (
USB_TYPE_CLASS
 | 0x01)

	)

93 
	#USB_DT_REPORT
 (
USB_TYPE_CLASS
 | 0x02)

	)

94 
	#USB_DT_PHYSICAL
 (
USB_TYPE_CLASS
 | 0x03)

	)

95 
	#USB_DT_HUB
 (
USB_TYPE_CLASS
 | 0x09)

	)

98 
	#USB_DT_DEVICE_SIZE
 18

	)

99 
	#USB_DT_CONFIG_SIZE
 9

	)

100 
	#USB_DT_INTERFACE_SIZE
 9

	)

101 
	#USB_DT_ENDPOINT_SIZE
 7

	)

102 
	#USB_DT_ENDPOINT_AUDIO_SIZE
 9

	)

103 
	#USB_DT_HUB_NONVAR_SIZE
 7

	)

104 
	#USB_DT_HID_SIZE
 9

	)

107 
	#USB_ENDPOINT_NUMBER_MASK
 0x0‡

	)

108 
	#USB_ENDPOINT_DIR_MASK
 0x80

	)

110 
	#USB_ENDPOINT_XFERTYPE_MASK
 0x03

	)

111 
	#USB_ENDPOINT_XFER_CONTROL
 0

	)

112 
	#USB_ENDPOINT_XFER_ISOC
 1

	)

113 
	#USB_ENDPOINT_XFER_BULK
 2

	)

114 
	#USB_ENDPOINT_XFER_INT
 3

	)

117 
	#USB_PID_UNDEF_0
 0xf0

	)

118 
	#USB_PID_OUT
 0xe1

	)

119 
	#USB_PID_ACK
 0xd2

	)

120 
	#USB_PID_DATA0
 0xc3

	)

121 
	#USB_PID_UNDEF_4
 0xb4

	)

122 
	#USB_PID_SOF
 0xa5

	)

123 
	#USB_PID_UNDEF_6
 0x96

	)

124 
	#USB_PID_UNDEF_7
 0x87

	)

125 
	#USB_PID_UNDEF_8
 0x78

	)

126 
	#USB_PID_IN
 0x69

	)

127 
	#USB_PID_NAK
 0x5a

	)

128 
	#USB_PID_DATA1
 0x4b

	)

129 
	#USB_PID_PREAMBLE
 0x3c

	)

130 
	#USB_PID_SETUP
 0x2d

	)

131 
	#USB_PID_STALL
 0x1e

	)

132 
	#USB_PID_UNDEF_F
 0x0f

	)

135 
	#USB_REQ_GET_STATUS
 0x00

	)

136 
	#USB_REQ_CLEAR_FEATURE
 0x01

	)

137 
	#USB_REQ_SET_FEATURE
 0x03

	)

138 
	#USB_REQ_SET_ADDRESS
 0x05

	)

139 
	#USB_REQ_GET_DESCRIPTOR
 0x06

	)

140 
	#USB_REQ_SET_DESCRIPTOR
 0x07

	)

141 
	#USB_REQ_GET_CONFIGURATION
 0x08

	)

142 
	#USB_REQ_SET_CONFIGURATION
 0x09

	)

143 
	#USB_REQ_GET_INTERFACE
 0x0A

	)

144 
	#USB_REQ_SET_INTERFACE
 0x0B

	)

145 
	#USB_REQ_SYNCH_FRAME
 0x0C

	)

148 
	#USB_REQ_GET_REPORT
 0x01

	)

149 
	#USB_REQ_GET_IDLE
 0x02

	)

150 
	#USB_REQ_GET_PROTOCOL
 0x03

	)

151 
	#USB_REQ_SET_REPORT
 0x09

	)

152 
	#USB_REQ_SET_IDLE
 0x0A

	)

153 
	#USB_REQ_SET_PROTOCOL
 0x0B

	)

156 
	#USB_FEAT_HALT
 0x00

	)

157 
	#USB_FEAT_WAKEUP
 0x01

	)

158 
	#USB_FEAT_TEST
 0x02

	)

161 
	#USB_TEST_MODE_J
 0x01

	)

162 
	#USB_TEST_MODE_K
 0x02

	)

163 
	#USB_TEST_MODE_SE0_NAK
 0x03

	)

164 
	#USB_TEST_MODE_PACKET
 0x04

	)

165 
	#USB_TEST_MODE_FORCE_ENABLE
 0x05

	)

170 
	#PIPE_ISOCHRONOUS
 0

	)

171 
	#PIPE_INTERRUPT
 1

	)

172 
	#PIPE_CONTROL
 2

	)

173 
	#PIPE_BULK
 3

	)

174 
	#PIPE_DEVEP_MASK
 0x0007ff00

	)

176 
	#USB_ISOCHRONOUS
 0

	)

177 
	#USB_INTERRUPT
 1

	)

178 
	#USB_CONTROL
 2

	)

179 
	#USB_BULK
 3

	)

182 
	#USB_ST_ACTIVE
 0x1

	)

183 
	#USB_ST_STALLED
 0x2

	)

184 
	#USB_ST_BUF_ERR
 0x4

	)

185 
	#USB_ST_BABBLE_DET
 0x8

	)

186 
	#USB_ST_NAK_REC
 0x10

	)

187 
	#USB_ST_CRC_ERR
 0x20

	)

188 
	#USB_ST_BIT_ERR
 0x40

	)

189 
	#USB_ST_NOT_PROC
 0x80000000L

	)

200 
	#USB_RT_HUB
 (
USB_TYPE_CLASS
 | 
USB_RECIP_DEVICE
)

	)

201 
	#USB_RT_PORT
 (
USB_TYPE_CLASS
 | 
USB_RECIP_OTHER
)

	)

206 
	#C_HUB_LOCAL_POWER
 0

	)

207 
	#C_HUB_OVER_CURRENT
 1

	)

212 
	#USB_PORT_FEAT_CONNECTION
 0

	)

213 
	#USB_PORT_FEAT_ENABLE
 1

	)

214 
	#USB_PORT_FEAT_SUSPEND
 2

	)

215 
	#USB_PORT_FEAT_OVER_CURRENT
 3

	)

216 
	#USB_PORT_FEAT_RESET
 4

	)

217 
	#USB_PORT_FEAT_POWER
 8

	)

218 
	#USB_PORT_FEAT_LOWSPEED
 9

	)

219 
	#USB_PORT_FEAT_HIGHSPEED
 10

	)

220 
	#USB_PORT_FEAT_C_CONNECTION
 16

	)

221 
	#USB_PORT_FEAT_C_ENABLE
 17

	)

222 
	#USB_PORT_FEAT_C_SUSPEND
 18

	)

223 
	#USB_PORT_FEAT_C_OVER_CURRENT
 19

	)

224 
	#USB_PORT_FEAT_C_RESET
 20

	)

225 
	#USB_PORT_FEAT_TEST
 21

	)

231 
	#USB_SS_PORT_FEAT_U1_TIMEOUT
 23

	)

232 
	#USB_SS_PORT_FEAT_U2_TIMEOUT
 24

	)

233 
	#USB_SS_PORT_FEAT_C_LINK_STATE
 25

	)

234 
	#USB_SS_PORT_FEAT_C_CONFIG_ERROR
 26

	)

235 
	#USB_SS_PORT_FEAT_BH_RESET
 28

	)

236 
	#USB_SS_PORT_FEAT_C_BH_RESET
 29

	)

239 
	#USB_PORT_STAT_CONNECTION
 0x0001

	)

240 
	#USB_PORT_STAT_ENABLE
 0x0002

	)

241 
	#USB_PORT_STAT_SUSPEND
 0x0004

	)

242 
	#USB_PORT_STAT_OVERCURRENT
 0x0008

	)

243 
	#USB_PORT_STAT_RESET
 0x0010

	)

244 
	#USB_PORT_STAT_POWER
 0x0100

	)

245 
	#USB_PORT_STAT_LOW_SPEED
 0x0200

	)

246 
	#USB_PORT_STAT_HIGH_SPEED
 0x0400

	)

247 
	#USB_PORT_STAT_SUPER_SPEED
 0x0600

	)

248 
	#USB_PORT_STAT_SPEED_MASK
 \

249 (
USB_PORT_STAT_LOW_SPEED
 | 
USB_PORT_STAT_HIGH_SPEED
)

	)

255 
	#USB_SS_PORT_STAT_LINK_STATE
 0x01e0

	)

256 
	#USB_SS_PORT_STAT_POWER
 0x0200

	)

257 
	#USB_SS_PORT_STAT_SPEED
 0x1c00

	)

258 
	#USB_SS_PORT_STAT_SPEED_5GBPS
 0x0000

	)

261 
	#USB_PORT_STAT_C_CONNECTION
 0x0001

	)

262 
	#USB_PORT_STAT_C_ENABLE
 0x0002

	)

263 
	#USB_PORT_STAT_C_SUSPEND
 0x0004

	)

264 
	#USB_PORT_STAT_C_OVERCURRENT
 0x0008

	)

265 
	#USB_PORT_STAT_C_RESET
 0x0010

	)

271 
	#USB_SS_PORT_STAT_C_BH_RESET
 0x0020

	)

272 
	#USB_SS_PORT_STAT_C_LINK_STATE
 0x0040

	)

273 
	#USB_SS_PORT_STAT_C_CONFIG_ERROR
 0x0080

	)

276 
	#HUB_CHAR_LPSM
 0x0003

	)

277 
	#HUB_CHAR_COMPOUND
 0x0004

	)

278 
	#HUB_CHAR_OCPM
 0x0018

	)

283 
	#HUB_STATUS_LOCAL_POWER
 0x0001

	)

284 
	#HUB_STATUS_OVERCURRENT
 0x0002

	)

286 
	#HUB_CHANGE_LOCAL_POWER
 0x0001

	)

287 
	#HUB_CHANGE_OVERCURRENT
 0x0002

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/version.h

24 #i‚def 
__VERSION_H__


25 
	#__VERSION_H__


	)

27 
	~"../uboŸ_vîsi⁄.h
"

28 
	~<c⁄figs/π2880.h
>

30 
	#U_BOOT_VERSION
 "U-BoŸ 1.1.3"

	)

32 #i‡
deföed
 (
RT2880_ASIC_BOARD
Ë|| deföed (
RT2883_ASIC_BOARD
Ë|| deföed (
RT3052_ASIC_BOARD
Ë|| deföed (
RT3352_ASIC_BOARD
Ë|| deföed (
RT3883_ASIC_BOARD
Ë|| deföed (
RT5350_ASIC_BOARD
Ë|| deföed (
RT6855_ASIC_BOARD
Ë|| deföed (
RT6855A_ASIC_BOARD
Ë|| deföed (
MT7620_ASIC_BOARD
Ë|| deföed (
MT7621_ASIC_BOARD
Ë||deföed (
MT7628_ASIC_BOARD
)

33 
	#CHIP_TYPE
 "ASIC"

	)

34 #ñi‡
deföed
 (
RT2880_FPGA_BOARD
Ë|| deföed (
RT2883_FPGA_BOARD
Ë|| deföed (
RT3052_FPGA_BOARD
Ë|| deföed (
RT3352_FPGA_BOARD
Ë|| deföed (
RT3883_FPGA_BOARD
Ë|| deföed (
RT5350_FPGA_BOARD
Ë|| deföed (
RT6855_FPGA_BOARD
Ë|| deföed (
RT6855A_FPGA_BOARD
Ë|| deföed (
MT7620_FPGA_BOARD
Ë|| deföed (
MT7621_FPGA_BOARD
Ë|| deföed (
MT7628_FPGA_BOARD
)

35 
	#CHIP_TYPE
 "FPGA"

	)

40 #i‡
deföed
 (
RT2880_SHUTTLE
)

41 
	#CHIP_VERSION
 "2880_ShuâÀ"

	)

42 #ñi‡
deföed
 (
RT2880_MP
)

43 
	#CHIP_VERSION
 "2880_MP"

	)

44 #ñi‡
deföed
 (
RT2883_MP
)

45 
	#CHIP_VERSION
 "2883_MP"

	)

46 #ñi‡
deföed
 (
RT3052_MP2
)

47 
	#CHIP_VERSION
 "3052_MP2"

	)

48 #ñi‡
deföed
 (
RT3352_MP
)

49 
	#CHIP_VERSION
 "3352_MP"

	)

50 #ñi‡
deföed
 (
RT3883_MP
)

51 
	#CHIP_VERSION
 "3883_MP"

	)

52 #ñi‡
deföed
 (
RT5350_MP
)

53 
	#CHIP_VERSION
 "5350_MP"

	)

54 #ñi‡
deföed
 (
RT6855_MP
)

55 
	#CHIP_VERSION
 "6855_MP"

	)

56 #ñi‡
deföed
 (
RT6855A_MP
)

57 
	#CHIP_VERSION
 "6855A_MP"

	)

58 #ñi‡
deföed
 (
MT7620_MP
)

59 
	#CHIP_VERSION
 "7620_MP"

	)

60 #ñi‡
deföed
 (
MT7621_MP
)

61 
	#CHIP_VERSION
 "7621_MP"

	)

62 #ñi‡
deföed
 (
MT7628_MP
)

63 
	#CHIP_VERSION
 "7628_MP"

	)

69 #i‡
deföed
 (
MAC_TO_100SW_MODE
)

70 
	#GMAC_MODE
 "(MACÅÿ100SW Mode)"

	)

71 #ñi‡
deföed
 (
MAC_TO_100PHY_MODE
)

72 
	#GMAC_MODE
 "(MACÅÿ100PHY Mode)"

	)

73 #ñi‡
deföed
 (
MAC_TO_GIGAPHY_MODE
)

74 #i‡
deföed
 (
RT3883_USE_GE1
Ë|| deföed (
MT7621_USE_GE1
)

75 
	#GMAC_MODE
 "(MAC1ÅÿGigaPHY Mode)"

	)

76 #ñi‡
deföed
 (
RT3883_USE_GE2
Ë|| deföed (
MT7621_USE_GE2
)

77 
	#GMAC_MODE
 "(MAC2ÅÿGigaPHY Mode)"

	)

79 
	#GMAC_MODE
 "(MACÅÿGigaPHY Mode)"

	)

81 #i‚de‡
MAC_TO_GIGAPHY_MODE_ADDR


84 #ñi‡
deföed
 (
MAC_TO_VITESSE_MODE
)

85 
	#GMAC_MODE
 "(MACÅÿVITESSE Mode)"

	)

86 #ñi‡
deföed
 (
MAC_TO_MT7530_MODE
)

87 
	#GMAC_MODE
 "(MACÅÿMT7530 Mode)"

	)

88 #ñi‡
deföed
 (
RT3052_ASIC_BOARD
Ë|| deföed (
RT3052_FPGA_BOARD
) || \

89 
deföed
 (
RT3352_ASIC_BOARD
Ë|| deföed (
RT3352_FPGA_BOARD
) || \

90 
deföed
 (
RT5350_ASIC_BOARD
Ë|| deföed (
RT5350_FPGA_BOARD
) || \

91 
deföed
 (
RT6855_ASIC_BOARD
Ë|| deföed (
RT6855_FPGA_BOARD
) || \

92 
deföed
 (
MT7620_ASIC_BOARD
Ë|| deföed (
MT7620_FPGA_BOARD
) || \

93 
deföed
 (
MT7621_ASIC_BOARD
Ë|| deföed (
MT7621_FPGA_BOARD
) || \

94 
deföed
 (
MT7628_ASIC_BOARD
Ë|| deföed (
MT7628_FPGA_BOARD
) || \

95 
deföed
 (
RT6855A_ASIC_BOARD
Ë|| 
	$deföed
 (
RT6855A_FPGA_BOARD
)

97 #i‡
	`deföed
 (
P5_MAC_TO_NONE_MODE
)

98 
	#GMAC_MODE
 "(P‹t5<->N⁄e)"

	)

99 #ñi‡
	`deföed
 (
P5_MAC_TO_PHY_MODE
)

100 
	#GMAC_MODE
 "(P‹t5<->Phy)"

	)

101 #ñi‡
	`deföed
 (
P5_RGMII_TO_MAC_MODE
)

102 
	#GMAC_MODE
 "(P‹t5<->GigaSW)"

	)

103 #ñi‡
	`deföed
 (
P5_MII_TO_MAC_MODE
)

104 
	#GMAC_MODE
 "(P‹t5<->RvMII)"

	)

105 #ñi‡
	`deföed
 (
P5_RMII_TO_MAC_MODE
)

106 
	#GMAC_MODE
 "(P‹t5<->MII)"

	)

113 #i‡
	`deföed
 (
ON_BOARD_16M_DRAM_COMPONENT
)

114 
	#DRAM_COMPONENT
 16

	)

115 #ñi‡
	`deföed
 (
ON_BOARD_64M_DRAM_COMPONENT
)

116 
	#DRAM_COMPONENT
 64

	)

117 #ñi‡
	`deföed
 (
ON_BOARD_128M_DRAM_COMPONENT
)

118 
	#DRAM_COMPONENT
 128

	)

119 #ñi‡
	`deföed
 (
ON_BOARD_256M_DRAM_COMPONENT
)

120 
	#DRAM_COMPONENT
 256

	)

121 #ñi‡
	`deföed
 (
ON_BOARD_512M_DRAM_COMPONENT
)

122 
	#DRAM_COMPONENT
 512

	)

123 #ñi‡
	`deföed
 (
ON_BOARD_1024M_DRAM_COMPONENT
)

124 
	#DRAM_COMPONENT
 1024

	)

125 #ñi‡
	`deföed
 (
ON_BOARD_2048M_DRAM_COMPONENT
)

126 
	#DRAM_COMPONENT
 2048

	)

127 #ñi‡
	`deföed
 (
ON_BOARD_4096M_DRAM_COMPONENT
)

128 
	#DRAM_COMPONENT
 3584

	)

129 #ñi‡
	`deföed
 (
RT3883_FPGA_BOARD
Ë|| deföed (
RT3883_ASIC_BOARD
Ë|| deföed (
RT3352_FPGA_BOARD
Ë|| deföed (
RT3352_ASIC_BOARD
)

130 
	#DRAM_COMPONENT
 ({ 
_x
 = ((
	`RALINK_REG
(
RT2880_SYSCFG_REG
) >> 12) & 0x7); \

131 (
_x
 == 6)? 2048 : (_x == 5)? 1024 : (_x == 4)? 512 : \

132 (
_x
 =3)? 256 : (_x =2)? 128 : (_x =1)? 64 : 16; 
	}
})

	)

133 #ñi‡
deföed
 
CFG_ENV_IS_IN_SPI


134 
	#DRAM_COMPONENT
 ({ 
_x
 = ((
	`RALINK_REG
(
RT2880_SYSCFG_REG
) >> 26) & 0x3); \

135 (
_x
 =0x2)? 256 : (_x =0x1)? 128 : 64; })

	)

140 #i‡
deföed
 (
ON_BOARD_16BIT_DRAM_BUS
)

141 
	#DRAM_BUS
 16

	)

142 #ñi‡
deföed
 (
ON_BOARD_32BIT_DRAM_BUS
)

143 
	#DRAM_BUS
 32

	)

144 #ñi‡
deföed
 (
RT3883_FPGA_BOARD
Ë|| deföed (
RT3883_ASIC_BOARD
Ë|| deföed (
RT3352_FPGA_BOARD
Ë|| deföed (
RT3352_ASIC_BOARD
)

145 
	#DRAM_BUS
 ({ ((
	`RALINK_REG
(
RT2880_SYSCFG_REG
Ë>> 15Ë& 0x1)? 32 : 16; })

	)

146 #ñi‡
deföed
 (
CFG_ENV_IS_IN_SPI
)

147 
	#DRAM_BUS
 ({ ((
	`RALINK_REG
(
RT2880_SYSCFG_REG
Ë>> 28Ë& 0x1)? 32 : 16; })

	)

152 #i‡
deföed
 (
CFG_ENV_IS_IN_SPI
Ë&& !deföed (
RT3883_FPGA_BOARD
Ë&& !deföed (RT3883_FPGA_BOARDË&& !deföed (
RT6855A_FPGA_BOARD
Ë&& !deföed (
RT6855A_ASIC_BOARD
Ë&& !deföed (
MT7620_FPGA_BOARD
Ë&& !deföed (
MT7620_ASIC_BOARD
Ë&& !deföed (
MT7621_FPGA_BOARD
Ë&& !deföed (
MT7621_ASIC_BOARD
Ë&& !deföed (
MT7628_FPGA_BOARD
Ë&& !deföed (
MT7628_ASIC_BOARD
)

153 #i‡
deföed
 (
RT3352_FPGA_BOARD
Ë|| deföed (
RT3352_ASIC_BOARD
)

154 
	#DDR_INFO
 ({ ((
	`RALINK_REG
(
RT2880_SYSCFG_REG
) >> 17) & 0x1)? \

155 (((
	`RALINK_REG
(
RT2880_SYSCFG_REG
) >> 10) & 0x1)? "DDR, width 16" : "DDR, width 8") : \

156 "SDR"; })

	)

158 
	#DDR_INFO
 "SDR"

	)

161 #i‡
deföed
 (
ON_BOARD_DDR3
Ë|| deföed (
ON_BOARD_DDR2
Ë|| deföed(
ON_BOARD_DDR1
)

162 #ifde‡
ON_BOARD_DDR_WIDTH_8


163 
	#DDR_INFO
 "DDR, width 8"

	)

165 
	#DDR_INFO
 "DDR, width 16"

	)

168 
	#DDR_INFO
 "SDR"

	)

172 
	#DRAM_SIZE
 ((
DRAM_COMPONENT
/8)*(
DRAM_BUS
/16))

	)

174 #i‡
deföed
 (
ON_BOARD_2M_FLASH_COMPONENT
)

175 
	#FLASH_MSG
 "Fœsh comp⁄ít: 2 MByã†NOR Fœsh"

	)

176 #ñi‡
deföed
 (
ON_BOARD_4M_FLASH_COMPONENT
)

177 
	#FLASH_MSG
 "Fœsh comp⁄ít: 4 MByã†NOR Fœsh"

	)

178 #ñi‡
deföed
 (
ON_BOARD_8M_FLASH_COMPONENT
)

179 
	#FLASH_MSG
 "Fœsh comp⁄ít: 8 MByã†NOR Fœsh"

	)

180 #ñi‡
deföed
 (
ON_BOARD_16M_FLASH_COMPONENT
)

181 
	#FLASH_MSG
 "Fœsh comp⁄ít: 16 MByã†NOR Fœsh"

	)

182 #ñi‡
deföed
 (
ON_BOARD_32M_FLASH_COMPONENT
)

183 
	#FLASH_MSG
 "Fœsh comp⁄ít: 32 MByã†NOR Fœsh"

	)

184 #i‚de‡
RT3052_MP2


188 #i‡
deföed
 (
RT2880_ASIC_BOARD
Ë|| deföed (
RT2880_FPGA_BOARD
)

190 #ñi‡
deföed
 
CFG_ENV_IS_IN_FLASH


191 
	#FLASH_MSG
 "Fœsh comp⁄ít: NOR Fœsh"

	)

192 #ñi‡
deföed
 
CFG_ENV_IS_IN_NAND


193 
	#FLASH_MSG
 "Fœsh comp⁄ít: NAND Fœsh"

	)

194 #ñi‡
deföed
 
CFG_ENV_IS_IN_SPI


195 
	#FLASH_MSG
 "Fœsh comp⁄ít: SPI Fœsh"

	)

202 
	#SHOW_VER_STR
() \

204 
	`¥ötf
("============================================ \n"); \

205 
	`¥ötf
("RÆök UBoŸ Vîsi⁄: %s\n", 
RALINK_LOCAL_VERSION
); \

206 
	`¥ötf
("-------------------------------------------- \n"); \

207 
	`¥ötf
("%†%†%s\n",
CHIP_TYPE
, 
CHIP_VERSION
, 
GMAC_MODE
); \

208 
	`¥ötf
("DRAM comp⁄ít: %d Mbô†%s\n", 
DRAM_COMPONENT
, 
DDR_INFO
); \

209 
	`¥ötf
("DRAM bus: %d bô\n", 
DRAM_BUS
); \

210 
	`¥ötf
("TŸÆ mem‹y: %d MByãs\n", 
DRAM_SIZE
); \

211 
	`¥ötf
("%s\n", 
FLASH_MSG
); \

212 
	`¥ötf
("%s\n", "D©e:" 
__DATE__
 " Time:" 
__TIME__
 ); \

213 
	`¥ötf
("============================================ \n"); \

214 }0)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/watchdog.h

27 #i‚de‡
_WATCHDOG_H_


28 
	#_WATCHDOG_H_


	)

30 #i‡
deföed
(
CONFIG_HW_WATCHDOG
Ë&& deföed(
CONFIG_WATCHDOG
)

34 #i‡
deföed
(
__ASSEMBLY__
Ë&& deföed(
__NIOS__
)

41 #ifde‡
CONFIG_HW_WATCHDOG


42 #i‡
deföed
(
__ASSEMBLY__
)

43 
	#WATCHDOG_RESET
 
bl
 
hw_w©chdog_ª£t


	)

45 
hw_w©chdog_ª£t
();

47 
	#WATCHDOG_RESET
 
hw_w©chdog_ª£t


	)

53 #i‡
deföed
(
CONFIG_WATCHDOG
)

54 #i‡
deföed
(
__ASSEMBLY__
)

55 
	#WATCHDOG_RESET
 
bl
 
w©chdog_ª£t


	)

57 
w©chdog_ª£t
();

59 
	#WATCHDOG_RESET
 
w©chdog_ª£t


	)

65 #i‡
deföed
(
__ASSEMBLY__
)

66 
	#WATCHDOG_RESET


	)

68 
	#WATCHDOG_RESET
(Ë{}

	)

78 #i‡(
deföed
(
CONFIG_8xx
Ë|| deföed(
CONFIG_MPC860
)Ë&& !deföed(
__ASSEMBLY__
)

79 
ª£t_8xx_w©chdog
(vﬁ©ûê
imm≠_t
 *
immr
);

83 #i‡
deföed
(
CONFIG_5xx
Ë&& !deföed(
__ASSEMBLY__
)

84 
ª£t_5xx_w©chdog
(vﬁ©ûê
imm≠_t
 *
immr
);

88 #i‡
deföed
(
CONFIG_4xx
Ë&& !deföed(
__ASSEMBLY__
)

89 
ª£t_4xx_w©chdog
();

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/xilinx.h

25 
	~<Âga.h
>

27 #i‚de‡
_XILINX_H_


28 
	#_XILINX_H_


	)

32 
	#CFG_SPARTAN2
 
	`CFG_FPGA_DEV
–0x1 )

	)

33 
	#CFG_VIRTEX_E
 
	`CFG_FPGA_DEV
–0x2 )

	)

34 
	#CFG_VIRTEX2
 
	`CFG_FPGA_DEV
–0x4 )

	)

35 
	#CFG_XILINX_SPARTAN2
 (
CFG_FPGA_XILINX
 | 
CFG_SPARTAN2
)

	)

36 
	#CFG_XILINX_VIRTEX_E
 (
CFG_FPGA_XILINX
 | 
CFG_VIRTEX_E
)

	)

37 
	#CFG_XILINX_VIRTEX2
 (
CFG_FPGA_XILINX
 | 
CFG_VIRTEX2
)

	)

43 
	#CFG_XILINX_IF_SS
 
	`CFG_FPGA_IF
–0x1 )

	)

44 
	#CFG_XILINX_IF_MS
 
	`CFG_FPGA_IF
–0x2 )

	)

45 
	#CFG_XILINX_IF_SP
 
	`CFG_FPGA_IF
–0x4 )

	)

46 
	#CFG_XILINX_IF_JTAG
 
	`CFG_FPGA_IF
–0x8 )

	)

47 
	#CFG_XILINX_IF_MSM
 
	`CFG_FPGA_IF
–0x10 )

	)

48 
	#CFG_XILINX_IF_SSM
 
	`CFG_FPGA_IF
–0x20 )

	)

53 
	mmö_xûöx_iÁ˚_ty≥
,

54 
	m¶ave_£rül
,

55 
	mma°î_£rül
,

56 
	m¶ave_∑øŒñ
,

57 
	mjèg_mode
,

58 
	mma°î_£À˘m≠
,

59 
	m¶ave_£À˘m≠
,

60 
	mmax_xûöx_iÁ˚_ty≥


61 } 
	tXûöx_iÁ˚
;

64 
	mmö_xûöx_ty≥
,

65 
	mXûöx_S∑π™2
,

66 
	mXûöx_VúãxE
,

67 
	mXûöx_Vúãx2
,

68 
	mmax_xûöx_ty≥


69 } 
	tXûöx_Famûy
;

72 
Xûöx_Famûy
 
	mÁmûy
;

73 
Xûöx_iÁ˚
 
	miÁ˚
;

74 
size_t
 
	msize
;

75 * 
	miÁ˚_‚s
;

76 
	mcookõ
;

77 } 
	tXûöx_desc
;

81 
xûöx_lﬂd
–
Xûöx_desc
 *
desc
, *
image
, 
size_t
 
size
 );

82 
xûöx_dump
–
Xûöx_desc
 *
desc
, *
buf
, 
size_t
 
bsize
 );

83 
xûöx_öfo
–
Xûöx_desc
 *
desc
 );

84 
xûöx_ªloc
–
Xûöx_desc
 *
desc
, 
ul⁄g
 
ªloc_off£t
 );

88 (*
	tXûöx_pgm_‚
)–
	tas£π_pgm
, 
	tÊush
, 
	tcookõ
 );

89 (*
	tXûöx_öô_‚
)–
	tcookõ
 );

90 (*
	tXûöx_îr_‚
)–
	tcookõ
 );

91 (*
	tXûöx_d⁄e_‚
)–
	tcookõ
 );

92 (*
	tXûöx_˛k_‚
)–
	tas£π_˛k
, 
	tÊush
, 
	tcookõ
 );

93 (*
	tXûöx_cs_‚
)–
	tas£π_cs
, 
	tÊush
, 
	tcookõ
 );

94 (*
	tXûöx_wr_‚
)–
	tas£π_wrôe
, 
	tÊush
, 
	tcookõ
 );

95 (*
	tXûöx_rd©a_‚
)–*
	td©a
, 
	tcookõ
 );

96 (*
	tXûöx_wd©a_‚
)–
	td©a
, 
	tÊush
, 
	tcookõ
 );

97 (*
	tXûöx_busy_‚
)–
	tcookõ
 );

98 (*
	tXûöx_ab‹t_‚
)–
	tcookõ
 );

99 (*
	tXûöx_¥e_‚
)–
	tcookõ
 );

100 (*
	tXûöx_po°_‚
)–
	tcookõ
 );

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/xz.h

11 #i‚de‡
XZ_H


12 
	#XZ_H


	)

14 
	~<löux/°ddef.h
>

15 
	~<löux/ty≥s.h
>

18 #i‚de‡
XZ_EXTERN


19 
	#XZ_EXTERN
 

	)

23 #i‚de‡
XZ_FUNC


24 
	#XZ_FUNC


	)

52 
	exz_mode
 {

53 
XZ_SINGLE
,

54 
XZ_PREALLOC
,

55 
XZ_DYNALLOC


108 
	exz_ªt
 {

109 
	mXZ_OK
 = 0,

110 
	mXZ_STREAM_END
,

111 
	mXZ_UNSUPPORTED_CHECK
,

112 
	mXZ_MEM_ERROR
,

113 
	mXZ_MEMLIMIT_ERROR
,

114 
	mXZ_FORMAT_ERROR
,

115 
	mXZ_OPTIONS_ERROR
,

116 
	mXZ_DATA_ERROR
,

117 
	mXZ_BUF_ERROR


136 
	sxz_buf
 {

137 c⁄° 
uöt8_t
 *
	mö
;

138 
size_t
 
	mö_pos
;

139 
size_t
 
	mö_size
;

141 
uöt8_t
 *
	mout
;

142 
size_t
 
	mout_pos
;

143 
size_t
 
	mout_size
;

149 
	gxz_dec
;

194 
XZ_EXTERN
 
xz_dec
 * 
XZ_FUNC
 
xz_dec_öô
(

195 
xz_mode
 
mode
, 
uöt32_t
 
di˘_max
);

215 
XZ_EXTERN
 
xz_ªt
 
XZ_FUNC
 
xz_dec_run
(
xz_dec
 *
s
, 
xz_buf
 *
b
);

228 
XZ_EXTERN
 
XZ_FUNC
 
xz_dec_ª£t
(
xz_dec
 *
s
);

235 
XZ_EXTERN
 
XZ_FUNC
 
xz_dec_íd
(
xz_dec
 *
s
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/zlib.h

40 #i‚de‡
_ZLIB_H


41 
	#_ZLIB_H


	)

67 #i‚de‡
STDC


68 #i‡
deföed
(
MSDOS
Ë|| deföed(
__STDC__
Ë|| deföed(
__˝lu•lus
)

69 
	#STDC


	)

73 #ifdef 
__MWERKS__


74 
	~<unix.h
>

78 #i‚de‡
MAX_MEM_LEVEL


79 #ifde‡
MAXSEG_64K


80 
	#MAX_MEM_LEVEL
 8

	)

82 
	#MAX_MEM_LEVEL
 9

	)

86 #i‚de‡
FAR


87 
	#FAR


	)

91 #i‚de‡
MAX_WBITS


92 
	#MAX_WBITS
 15

	)

110 #i‚de‡
OF


111 #ifde‡
STDC


112 
	#OF
(
¨gs
Ë
	)
args

114 
	#OF
(
¨gs
Ë()

	)

118 
	tByã
;

119 
	tuI¡
;

120 
	tuL⁄g
;

122 
Byã
 
	tFAR
 
	tByãf
;

123 
	tFAR
 
	tch¨f
;

124 
	tFAR
 
	tötf
;

125 
uI¡
 
	tFAR
 
	tuI¡f
;

126 
uL⁄g
 
	tFAR
 
	tuL⁄gf
;

128 #ifde‡
STDC


129 
	tFAR
 *
	tvoidpf
;

130 *
	tvoidp
;

132 
Byã
 
	tFAR
 *
	tvoidpf
;

133 
Byã
 *
	tvoidp
;

138 
	#ZLIB_VERSION
 "0.95P"

	)

159 
	$voidpf
 (*
	tÆloc_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, 
	tuI¡
 
	tôems
, uI¡ 
	tsize
));

160 (*
	t‰ì_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	taddªss
, 
	tuI¡
 
	tnbyãs
));

162 (*
	tcb_func
Ë
	tOF
((
	tByãf
 *
	tbuf
, 
	tuI¡
 
	tÀn
));

164 
öã∫Æ_°©e
;

166 
	sz_°ªam_s
 {

167 
Byãf
 *
√xt_ö
;

168 
uI¡
 
avaû_ö
;

169 
uL⁄g
 
tŸÆ_ö
;

171 
Byãf
 *
√xt_out
;

172 
uI¡
 
avaû_out
;

173 
uL⁄g
 
tŸÆ_out
;

175 *
msg
;

176 
öã∫Æ_°©e
 
FAR
 *
°©e
;

178 
Æloc_func
 
zÆloc
;

179 
‰ì_func
 
z‰ì
;

180 
voidp
 
›aque
;

182 
Byã
 
d©a_ty≥
;

184 
cb_func
 
outcb
;

186 } 
	tz_°ªam
;

219 
	#Z_NO_FLUSH
 0

	)

220 
	#Z_PARTIAL_FLUSH
 1

	)

221 
	#Z_FULL_FLUSH
 2

	)

222 
	#Z_SYNC_FLUSH
 3

	)

223 
	#Z_FINISH
 4

	)

224 
	#Z_PACKET_FLUSH
 5

	)

227 
	#Z_OK
 0

	)

228 
	#Z_STREAM_END
 1

	)

229 
	#Z_ERRNO
 (-1)

	)

230 
	#Z_STREAM_ERROR
 (-2)

	)

231 
	#Z_DATA_ERROR
 (-3)

	)

232 
	#Z_MEM_ERROR
 (-4)

	)

233 
	#Z_BUF_ERROR
 (-5)

	)

236 
	#Z_BEST_SPEED
 1

	)

237 
	#Z_BEST_COMPRESSION
 9

	)

238 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

241 
	#Z_FILTERED
 1

	)

242 
	#Z_HUFFMAN_ONLY
 2

	)

243 
	#Z_DEFAULT_STRATEGY
 0

	)

245 
	#Z_BINARY
 0

	)

246 
	#Z_ASCII
 1

	)

247 
	#Z_UNKNOWN
 2

	)

250 
	#Z_NULL
 0

	)

252 *
zlib_vîsi⁄
;

260 
öÊ©eInô
 
	`OF
((
z_°ªam
 *
°rm
));

274 
öÊ©e
 
	`OF
((
z_°ªam
 *
°rm
, 
Êush
));

325 
öÊ©eEnd
 
	`OF
((
z_°ªam
 *
°rm
));

338 
öÊ©eInô2
 
	`OF
((
z_°ªam
 *
°rm
,

339 
wödowBôs
));

371 
öÊ©eSync
 
	`OF
((
z_°ªam
 *
°rm
));

386 
öÊ©eRe£t
 
	`OF
((
z_°ªam
 *
°rm
));

396 
öÊ©eIncomp
 
	`OF
((
z_°ªam
 *
°rm
));

413 
uL⁄g
 
adÀr32
 
	`OF
((uL⁄g 
adÀr
, 
Byãf
 *
buf
, 
uI¡
 
Àn
));

430 #i‚de‡
_Z_UTIL_H


431 
	söã∫Æ_°©e
 {
dummy
;};

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/LzmaDec.h

4 #i‚de‡
__LZMADEC_H


5 
	#__LZMADEC_H


	)

7 
	~"Ty≥s.h
"

13 #ifde‡
_LZMA_PROB32


14 
	#CLzmaProb
 
UI¡32


	)

16 
	#CLzmaProb
 
UI¡16


	)

22 
	#LZMA_PROPS_SIZE
 5

	)

24 
	s_CLzmaPr›s


26 
	mlc
, 
	mÕ
, 
	mpb
;

27 
UI¡32
 
	mdicSize
;

28 } 
	tCLzmaPr›s
;

36 
SRes
 
LzmaPr›s_Decode
(
CLzmaPr›s
 *
p
, c⁄° 
Byã
 *
d©a
, 
size
);

44 
	#LZMA_REQUIRED_INPUT_MAX
 20

	)

48 
CLzmaPr›s
 
	m¥›
;

49 
CLzmaProb
 *
	m¥obs
;

50 
Byã
 *
	mdic
;

51 c⁄° 
Byã
 *
	mbuf
;

52 
UI¡32
 
	mønge
, 
	mcode
;

53 
SizeT
 
	mdicPos
;

54 
SizeT
 
	mdicBufSize
;

55 
UI¡32
 
	m¥o˚s£dPos
;

56 
UI¡32
 
	mcheckDicSize
;

57 
	m°©e
;

58 
UI¡32
 
	mªps
[4];

59 
	mªmaöLí
;

60 
	m√edFlush
;

61 
	m√edInôSèã
;

62 
UI¡32
 
	mnumProbs
;

63 
	mãmpBufSize
;

64 
Byã
 
	mãmpBuf
[
LZMA_REQUIRED_INPUT_MAX
];

65 } 
	tCLzmaDec
;

67 
	#LzmaDec_C⁄°ru˘
(
p
Ë{ (p)->
dic
 = 0; (p)->
¥obs
 = 0; }

	)

69 
LzmaDec_Inô
(
CLzmaDec
 *
p
);

77 
	mLZMA_FINISH_ANY
,

78 
	mLZMA_FINISH_END


79 } 
	tELzmaFöishMode
;

98 
	mLZMA_STATUS_NOT_SPECIFIED
,

99 
	mLZMA_STATUS_FINISHED_WITH_MARK
,

100 
	mLZMA_STATUS_NOT_FINISHED
,

101 
	mLZMA_STATUS_NEEDS_MORE_INPUT
,

102 
	mLZMA_STATUS_MAYBE_FINISHED_WITHOUT_MARK


103 } 
	tELzmaSètus
;

130 
SRes
 
LzmaDec_AŒoˇãProbs
(
CLzmaDec
 *
p
, c⁄° 
Byã
 *
¥›s
, 
¥›sSize
, 
ISzAŒoc
 *
Æloc
);

131 
LzmaDec_FªeProbs
(
CLzmaDec
 *
p
, 
ISzAŒoc
 *
Æloc
);

133 
SRes
 
LzmaDec_AŒoˇã
(
CLzmaDec
 *
°©e
, c⁄° 
Byã
 *
¥›
, 
¥›sSize
, 
ISzAŒoc
 *
Æloc
);

134 
LzmaDec_Fªe
(
CLzmaDec
 *
°©e
, 
ISzAŒoc
 *
Æloc
);

177 
SRes
 
LzmaDec_DecodeToDic
(
CLzmaDec
 *
p
, 
SizeT
 
dicLimô
,

178 c⁄° 
Byã
 *
§c
, 
SizeT
 *
§cLí
, 
ELzmaFöishMode
 
föishMode
, 
ELzmaSètus
 *
°©us
);

194 
SRes
 
LzmaDec_DecodeToBuf
(
CLzmaDec
 *
p
, 
Byã
 *
de°
, 
SizeT
 *
de°Lí
,

195 c⁄° 
Byã
 *
§c
, 
SizeT
 *
§cLí
, 
ELzmaFöishMode
 
föishMode
, 
ELzmaSètus
 *
°©us
);

219 
SRes
 
LzmaDecode
(
Byã
 *
de°
, 
SizeT
 *
de°Lí
, c⁄° Byã *
§c
, SizeT *
§cLí
,

220 c⁄° 
Byã
 *
¥›D©a
, 
¥›Size
, 
ELzmaFöishMode
 
föishMode
,

221 
ELzmaSètus
 *
°©us
, 
ISzAŒoc
 *
Æloc
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/LzmaDecode.c

22 
	~"LzmaDecode.h
"

23 
	~<mÆloc.h
>

25 #i‚de‡
Byã


26 
	#Byã
 

	)

29 
	#kNumT›Bôs
 24

	)

30 
	#kT›VÆue
 ((
UI¡32
)1 << 
kNumT›Bôs
)

	)

32 
	#kNumBôModñTŸÆBôs
 11

	)

33 
	#kBôModñTŸÆ
 (1 << 
kNumBôModñTŸÆBôs
)

	)

34 
	#kNumMoveBôs
 5

	)

36 
	s_CR™geDecodî


38 
Byã
 *
	mBuf„r
;

39 
Byã
 *
	mBuf„rLim
;

40 
UI¡32
 
	mR™ge
;

41 
UI¡32
 
	mCode
;

42 #ifde‡
_LZMA_IN_CB


43 
ILzmaInCÆlback
 *
	mInCÆlback
;

44 
	mResu…
;

46 
	mExåaByãs
;

47 } 
	tCR™geDecodî
;

49 
Byã
 
	$R™geDecodîRódByã
(
CR™geDecodî
 *
rd
)

51 i‡(
rd
->
Buf„r
 =rd->
Buf„rLim
)

53 #ifde‡
_LZMA_IN_CB


54 
UI¡32
 
size
;

55 
rd
->
Resu…
 =Ñd->
InCÆlback
->
	`Ród
‘d->InCÆlback, &rd->
Buf„r
, &
size
);

56 
rd
->
Buf„rLim
 =Ñd->
Buf„r
 + 
size
;

57 i‡(
size
 == 0)

60 
rd
->
ExåaByãs
 = 1;

64  (*
rd
->
Buf„r
++);

65 
	}
}

68 
	#RódByã
 (
	`R™geDecodîRódByã
(
rd
))

	)

70 
R™geDecodîInô
(
CR™geDecodî
 *
rd
,

71 #ifde‡
_LZMA_IN_CB


72 
ILzmaInCÆlback
 *
öCÆlback


74 
Byã
 *
°ªam
, 
UI¡32
 
buf„rSize


78 
	gi
;

79 #ifde‡
_LZMA_IN_CB


80 
	grd
->
	gInCÆlback
 = 
öCÆlback
;

81 
	grd
->
	gBuf„r
 = 
rd
->
Buf„rLim
 = 0;

83 
	grd
->
	gBuf„r
 = 
°ªam
;

84 
	grd
->
	gBuf„rLim
 = 
°ªam
 + 
buf„rSize
;

86 
	grd
->
	gExåaByãs
 = 0;

87 
	grd
->
	gCode
 = 0;

88 
	grd
->
	gR™ge
 = (0xFFFFFFFF);

89 
	gi
 = 0; i < 5; i++)

90 
	grd
->
	gCode
 = (
rd
->
Code
 << 8Ë| 
RódByã
;

93 
	#RC_INIT_VAR
 
UI¡32
 
ønge
 = 
rd
->
R™ge
; UI¡32 
code
 =Ñd->
Code
;

	)

94 
	#RC_FLUSH_VAR
 
rd
->
R™ge
 = 
ønge
;Ñd->
Code
 = 
code
;

	)

95 
	#RC_NORMALIZE
 i‡(
ønge
 < 
kT›VÆue
Ë{Ñ™gê<<8; 
code
 = (codê<< 8Ë| 
RódByã
; }

	)

97 
UI¡32
 
	$R™geDecodîDecodeDúe˘Bôs
(
CR™geDecodî
 *
rd
, 
numTŸÆBôs
)

99 
RC_INIT_VAR


100 
UI¡32
 
ªsu…
 = 0;

101 
i
;

102 
i
 = 
numTŸÆBôs
; i > 0; i--)

105 
ønge
 >>= 1;

107 
ªsu…
 <<= 1;

108 i‡(
code
 >
ønge
)

110 
code
 -
ønge
;

111 
ªsu…
 |= 1;

119 
RC_NORMALIZE


121 
RC_FLUSH_VAR


122  
ªsu…
;

123 
	}
}

125 
	$R™geDecodîBôDecode
(
CProb
 *
¥ob
, 
CR™geDecodî
 *
rd
)

127 
UI¡32
 
bound
 = (
rd
->
R™ge
 >> 
kNumBôModñTŸÆBôs
Ë* *
¥ob
;

128 i‡(
rd
->
Code
 < 
bound
)

130 
rd
->
R™ge
 = 
bound
;

131 *
¥ob
 +(
kBôModñTŸÆ
 - *¥obË>> 
kNumMoveBôs
;

132 i‡(
rd
->
R™ge
 < 
kT›VÆue
)

134 
rd
->
Code
 = (rd->Codê<< 8Ë| 
RódByã
;

135 
rd
->
R™ge
 <<= 8;

141 
rd
->
R™ge
 -
bound
;

142 
rd
->
Code
 -
bound
;

143 *
¥ob
 -(*¥obË>> 
kNumMoveBôs
;

144 i‡(
rd
->
R™ge
 < 
kT›VÆue
)

146 
rd
->
Code
 = (rd->Codê<< 8Ë| 
RódByã
;

147 
rd
->
R™ge
 <<= 8;

151 
	}
}

153 
	#RC_GET_BIT2
(
¥ob
, 
mi
, 
A0
, 
A1
Ë\

	)

154 
UI¡32
 
	gbound
 = (
ønge
 >> 
kNumBôModñTŸÆBôs
Ë* *
¥ob
; \

155 i‡(
	gcode
 < 
	gbound
) \

156 { 
	gA0
; 
	gønge
 = 
bound
; *
	g¥ob
 +(
kBôModñTŸÆ
 - *
¥ob
Ë>> 
kNumMoveBôs
; 
	gmi
 <<= 1; } \

158 { 
	gA1
; 
	gønge
 -
bound
; 
	gcode
 -bound; *
	g¥ob
 -(*
¥ob
Ë>> 
kNumMoveBôs
; 
	gmi
 = (
mi
 + mi) + 1; } \

159 
	gRC_NORMALIZE


161 
	#RC_GET_BIT
(
¥ob
, 
mi
Ë
	`RC_GET_BIT2
’rob, mi, ; , ;)

	)

163 
	$R™geDecodîBôTªeDecode
(
CProb
 *
¥obs
, 
numLevñs
, 
CR™geDecodî
 *
rd
)

165 
mi
 = 1;

166 
i
;

167 #ifde‡
_LZMA_LOC_OPT


168 
RC_INIT_VAR


170 
i
 = 
numLevñs
; i > 0; i--)

172 #ifde‡
_LZMA_LOC_OPT


173 
CProb
 *
¥ob
 = 
¥obs
 + 
mi
;

174 
	`RC_GET_BIT
(
¥ob
, 
mi
)

176 
mi
 = (mò+ miË+ 
	`R™geDecodîBôDecode
(
¥obs
 + mi, 
rd
);

179 #ifde‡
_LZMA_LOC_OPT


180 
RC_FLUSH_VAR


182  
mi
 - (1 << 
numLevñs
);

183 
	}
}

185 
	$R™geDecodîRevî£BôTªeDecode
(
CProb
 *
¥obs
, 
numLevñs
, 
CR™geDecodî
 *
rd
)

187 
mi
 = 1;

188 
i
;

189 
symbﬁ
 = 0;

190 #ifde‡
_LZMA_LOC_OPT


191 
RC_INIT_VAR


193 
i
 = 0; i < 
numLevñs
; i++)

195 #ifde‡
_LZMA_LOC_OPT


196 
CProb
 *
¥ob
 = 
¥obs
 + 
mi
;

197 
	`RC_GET_BIT2
(
¥ob
, 
mi
, ; , 
symbﬁ
 |(1 << 
i
))

199 
bô
 = 
	`R™geDecodîBôDecode
(
¥obs
 + 
mi
, 
rd
);

200 
mi
 = mò+ mò+ 
bô
;

201 
symbﬁ
 |(
bô
 << 
i
);

204 #ifde‡
_LZMA_LOC_OPT


205 
RC_FLUSH_VAR


207  
symbﬁ
;

208 
	}
}

210 
Byã
 
	$LzmaLôîÆDecode
(
CProb
 *
¥obs
, 
CR™geDecodî
 *
rd
)

212 
symbﬁ
 = 1;

213 #ifde‡
_LZMA_LOC_OPT


214 
RC_INIT_VAR


218 #ifde‡
_LZMA_LOC_OPT


219 
CProb
 *
¥ob
 = 
¥obs
 + 
symbﬁ
;

220 
	`RC_GET_BIT
(
¥ob
, 
symbﬁ
)

222 
symbﬁ
 = (symbﬁ + symbﬁË| 
	`R™geDecodîBôDecode
(
¥obs
 + symbﬁ, 
rd
);

225 
symbﬁ
 < 0x100);

226 #ifde‡
_LZMA_LOC_OPT


227 
RC_FLUSH_VAR


229  
symbﬁ
;

230 
	}
}

232 
Byã
 
	$LzmaLôîÆDecodeM©ch
(
CProb
 *
¥obs
, 
CR™geDecodî
 *
rd
, 
Byã
 
m©chByã
)

234 
symbﬁ
 = 1;

235 #ifde‡
_LZMA_LOC_OPT


236 
RC_INIT_VAR


240 
bô
;

241 
m©chBô
 = (
m©chByã
 >> 7) & 1;

242 
m©chByã
 <<= 1;

243 #ifde‡
_LZMA_LOC_OPT


245 
CProb
 *
¥ob
 = 
¥obs
 + ((1 + 
m©chBô
Ë<< 8Ë+ 
symbﬁ
;

246 
	`RC_GET_BIT2
(
¥ob
, 
symbﬁ
, 
bô
 = 0, bit = 1)

249 
bô
 = 
	`R™geDecodîBôDecode
(
¥obs
 + ((1 + 
m©chBô
Ë<< 8Ë+ 
symbﬁ
, 
rd
);

250 
symbﬁ
 = (symbﬁ << 1Ë| 
bô
;

252 i‡(
m©chBô
 !
bô
)

254 
symbﬁ
 < 0x100)

256 #ifde‡
_LZMA_LOC_OPT


257 
CProb
 *
¥ob
 = 
¥obs
 + 
symbﬁ
;

258 
	`RC_GET_BIT
(
¥ob
, 
symbﬁ
)

260 
symbﬁ
 = (symbﬁ + symbﬁË| 
	`R™geDecodîBôDecode
(
¥obs
 + symbﬁ, 
rd
);

266 
symbﬁ
 < 0x100);

267 #ifde‡
_LZMA_LOC_OPT


268 
RC_FLUSH_VAR


270  
symbﬁ
;

271 
	}
}

273 
	#kNumPosBôsMax
 4

	)

274 
	#kNumPosSèãsMax
 (1 << 
kNumPosBôsMax
)

	)

276 
	#kLíNumLowBôs
 3

	)

277 
	#kLíNumLowSymbﬁs
 (1 << 
kLíNumLowBôs
)

	)

278 
	#kLíNumMidBôs
 3

	)

279 
	#kLíNumMidSymbﬁs
 (1 << 
kLíNumMidBôs
)

	)

280 
	#kLíNumHighBôs
 8

	)

281 
	#kLíNumHighSymbﬁs
 (1 << 
kLíNumHighBôs
)

	)

283 
	#LíChoi˚
 0

	)

284 
	#LíChoi˚2
 (
LíChoi˚
 + 1)

	)

285 
	#LíLow
 (
LíChoi˚2
 + 1)

	)

286 
	#LíMid
 (
LíLow
 + (
kNumPosSèãsMax
 << 
kLíNumLowBôs
))

	)

287 
	#LíHigh
 (
LíMid
 + (
kNumPosSèãsMax
 << 
kLíNumMidBôs
))

	)

288 
	#kNumLíProbs
 (
LíHigh
 + 
kLíNumHighSymbﬁs
)

	)

290 
	$LzmaLíDecode
(
CProb
 *
p
, 
CR™geDecodî
 *
rd
, 
posSèã
)

292 if(
	`R™geDecodîBôDecode
(
p
 + 
LíChoi˚
, 
rd
) == 0)

293  
	`R™geDecodîBôTªeDecode
(
p
 + 
LíLow
 +

294 (
posSèã
 << 
kLíNumLowBôs
), kLíNumLowBôs, 
rd
);

295 if(
	`R™geDecodîBôDecode
(
p
 + 
LíChoi˚2
, 
rd
) == 0)

296  
kLíNumLowSymbﬁs
 + 
	`R™geDecodîBôTªeDecode
(
p
 + 
LíMid
 +

297 (
posSèã
 << 
kLíNumMidBôs
), kLíNumMidBôs, 
rd
);

298  
kLíNumLowSymbﬁs
 + 
kLíNumMidSymbﬁs
 +

299 
	`R™geDecodîBôTªeDecode
(
p
 + 
LíHigh
, 
kLíNumHighBôs
, 
rd
);

300 
	}
}

302 
	#kNumSèãs
 12

	)

304 
	#kSèπPosModñIndex
 4

	)

305 
	#kEndPosModñIndex
 14

	)

306 
	#kNumFuŒDi°™˚s
 (1 << (
kEndPosModñIndex
 >> 1))

	)

308 
	#kNumPosSlŸBôs
 6

	)

309 
	#kNumLíToPosSèãs
 4

	)

311 
	#kNumAlignBôs
 4

	)

312 
	#kAlignTabÀSize
 (1 << 
kNumAlignBôs
)

	)

314 
	#kM©chMöLí
 2

	)

316 
	#IsM©ch
 0

	)

317 
	#IsRï
 (
IsM©ch
 + (
kNumSèãs
 << 
kNumPosBôsMax
))

	)

318 
	#IsRïG0
 (
IsRï
 + 
kNumSèãs
)

	)

319 
	#IsRïG1
 (
IsRïG0
 + 
kNumSèãs
)

	)

320 
	#IsRïG2
 (
IsRïG1
 + 
kNumSèãs
)

	)

321 
	#IsRï0L⁄g
 (
IsRïG2
 + 
kNumSèãs
)

	)

322 
	#PosSlŸ
 (
IsRï0L⁄g
 + (
kNumSèãs
 << 
kNumPosBôsMax
))

	)

323 
	#S≥cPos
 (
PosSlŸ
 + (
kNumLíToPosSèãs
 << 
kNumPosSlŸBôs
))

	)

324 
	#Align
 (
S≥cPos
 + 
kNumFuŒDi°™˚s
 - 
kEndPosModñIndex
)

	)

325 
	#LíCodî
 (
Align
 + 
kAlignTabÀSize
)

	)

326 
	#RïLíCodî
 (
LíCodî
 + 
kNumLíProbs
)

	)

327 
	#LôîÆ
 (
RïLíCodî
 + 
kNumLíProbs
)

	)

329 #i‡
LôîÆ
 !
LZMA_BASE_SIZE


330 
	gSt›CompûögDueBUG


333 #ifde‡
_LZMA_OUT_READ


335 
	s_LzmaV¨Sèã


337 
CR™geDecodî
 
	mR™geDecodî
;

338 
Byã
 *
	mDi˘i⁄¨y
;

339 
UI¡32
 
	mDi˘i⁄¨ySize
;

340 
UI¡32
 
	mDi˘i⁄¨yPos
;

341 
UI¡32
 
	mGlobÆPos
;

342 
UI¡32
 
	mRïs
[4];

343 
	mlc
;

344 
	mÕ
;

345 
	mpb
;

346 
	mSèã
;

347 
	mPªviousIsM©ch
;

348 
	mRemaöLí
;

349 } 
	tLzmaV¨Sèã
;

351 
LzmaDecodîInô
(

352 *
buf„r
, 
UI¡32
 
buf„rSize
,

353 
lc
, 
Õ
, 
pb
,

354 *
di˘i⁄¨y
, 
UI¡32
 
di˘i⁄¨ySize
,

355 #ifde‡
_LZMA_IN_CB


356 
ILzmaInCÆlback
 *
öCÆlback


358 *
öSåóm
, 
UI¡32
 
öSize


362 
LzmaV¨Sèã
 *
	gvs
 = (LzmaV¨Sèã *)
buf„r
;

363 
CProb
 *
	gp
 = (CProb *)(
buf„r
 + (
LzmaV¨Sèã
));

364 
UI¡32
 
	gnumProbs
 = 
LôîÆ
 + ((UI¡32)
LZMA_LIT_SIZE
 << (
lc
 + 
Õ
));

365 
UI¡32
 
	gi
;

366 i‡(
	gbuf„rSize
 < 
numProbs
 * (
	gCProb
Ë+ (
	gLzmaV¨Sèã
))

367  
	gLZMA_RESULT_NOT_ENOUGH_MEM
;

368 
	gvs
->
	gDi˘i⁄¨y
 = 
di˘i⁄¨y
;

369 
	gvs
->
	gDi˘i⁄¨ySize
 = 
di˘i⁄¨ySize
;

370 
	gvs
->
	gDi˘i⁄¨yPos
 = 0;

371 
	gvs
->
	gGlobÆPos
 = 0;

372 
	gvs
->
	gRïs
[0] = 
vs
->
Rïs
[1] = vs->Reps[2] = vs->Reps[3] = 1;

373 
	gvs
->
	glc
 = 
lc
;

374 
	gvs
->
	gÕ
 = 
Õ
;

375 
	gvs
->
	gpb
 = 
pb
;

376 
	gvs
->
	gSèã
 = 0;

377 
	gvs
->
	gPªviousIsM©ch
 = 0;

378 
	gvs
->
	gRemaöLí
 = 0;

379 
	gdi˘i⁄¨y
[
di˘i⁄¨ySize
 - 1] = 0;

380 
	gi
 = 0; i < 
	gnumProbs
; i++)

381 
	gp
[
i
] = 
kBôModñTŸÆ
 >> 1;

382 
R™geDecodîInô
(&
vs
->
R™geDecodî
,

383 #ifde‡
_LZMA_IN_CB


384 
öCÆlback


386 
öSåóm
, 
öSize


389  
	gLZMA_RESULT_OK
;

392 
	$LzmaDecode
(*
buf„r
,

393 *
outSåóm
, 
UI¡32
 
outSize
,

394 
UI¡32
 *
outSizePro˚s£d
)

396 
LzmaV¨Sèã
 *
vs
 = (LzmaV¨Sèã *)
buf„r
;

397 
CProb
 *
p
 = (CProb *)(
buf„r
 + (
LzmaV¨Sèã
));

398 
CR™geDecodî
 
rd
 = 
vs
->
R™geDecodî
;

399 
°©e
 = 
vs
->
Sèã
;

400 
¥eviousIsM©ch
 = 
vs
->
PªviousIsM©ch
;

401 
Byã
 
¥eviousByã
;

402 
UI¡32
 
ªp0
 = 
vs
->
Rïs
[0], 
ªp1
 = vs->Rïs[1], 
ªp2
 = vs->Rïs[2], 
ªp3
 = vs->Reps[3];

403 
UI¡32
 
nowPos
 = 0;

404 
UI¡32
 
posSèãMask
 = (1 << (
vs
->
pb
)) - 1;

405 
UI¡32
 
lôîÆPosMask
 = (1 << (
vs
->
Õ
)) - 1;

406 
lc
 = 
vs
->lc;

407 
Àn
 = 
vs
->
RemaöLí
;

408 
UI¡32
 
globÆPos
 = 
vs
->
GlobÆPos
;

410 
Byã
 *
di˘i⁄¨y
 = 
vs
->
Di˘i⁄¨y
;

411 
UI¡32
 
di˘i⁄¨ySize
 = 
vs
->
Di˘i⁄¨ySize
;

412 
UI¡32
 
di˘i⁄¨yPos
 = 
vs
->
Di˘i⁄¨yPos
;

414 i‡(
Àn
 == -1)

416 *
outSizePro˚s£d
 = 0;

417  
LZMA_RESULT_OK
;

420 
Àn
 > 0 && 
nowPos
 < 
outSize
)

422 
UI¡32
 
pos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

423 i‡(
pos
 >
di˘i⁄¨ySize
)

424 
pos
 +
di˘i⁄¨ySize
;

425 
outSåóm
[
nowPos
++] = 
di˘i⁄¨y
[
di˘i⁄¨yPos
] = di˘i⁄¨y[
pos
];

426 i‡(++
di˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

427 
di˘i⁄¨yPos
 = 0;

428 
Àn
--;

430 i‡(
di˘i⁄¨yPos
 == 0)

431 
¥eviousByã
 = 
di˘i⁄¨y
[
di˘i⁄¨ySize
 - 1];

433 
¥eviousByã
 = 
di˘i⁄¨y
[
di˘i⁄¨yPos
 - 1];

436 
	`LzmaDecode
(

437 
Byã
 *
buf„r
, 
UI¡32
 
buf„rSize
,

438 
lc
, 
Õ
, 
pb
,

439 #ifde‡
_LZMA_IN_CB


440 
ILzmaInCÆlback
 *
öCÆlback
,

442 *
öSåóm
, 
UI¡32
 
öSize
,

444 *
outSåóm
, 
UI¡32
 
outSize
,

445 
UI¡32
 *
outSizePro˚s£d
)

447 
UI¡32
 
numProbs
 = 
LôîÆ
 + ((UI¡32)
LZMA_LIT_SIZE
 << (
lc
 + 
Õ
));

448 
CProb
 *
p
 = (CProb *)
buf„r
;

449 
CR™geDecodî
 
rd
;

450 
UI¡32
 
i
;

451 
°©e
 = 0;

452 
¥eviousIsM©ch
 = 0;

453 
Byã
 
¥eviousByã
 = 0;

454 
UI¡32
 
ªp0
 = 1, 
ªp1
 = 1, 
ªp2
 = 1, 
ªp3
 = 1;

455 
UI¡32
 
nowPos
 = 0;

456 
UI¡32
 
posSèãMask
 = (1 << 
pb
) - 1;

457 
UI¡32
 
lôîÆPosMask
 = (1 << 
Õ
) - 1;

458 
Àn
 = 0;

459 i‡(
buf„rSize
 < 
numProbs
 * (
CProb
))

460  
LZMA_RESULT_NOT_ENOUGH_MEM
;

461 
i
 = 0; i < 
numProbs
; i++)

462 
p
[
i
] = 
kBôModñTŸÆ
 >> 1;

463 
	`R™geDecodîInô
(&
rd
,

464 #ifde‡
_LZMA_IN_CB


465 
öCÆlback


467 
öSåóm
, 
öSize


472 *
outSizePro˚s£d
 = 0;

473 
nowPos
 < 
outSize
)

475 
posSèã
 = ()(

476 (
nowPos


477 #ifde‡
_LZMA_OUT_READ


478 + 
globÆPos


481 & 
posSèãMask
);

482 #ifde‡
_LZMA_IN_CB


483 i‡(
rd
.
Resu…
 !
LZMA_RESULT_OK
)

484  
rd
.
Resu…
;

486 i‡(
rd
.
ExåaByãs
 != 0)

487  
LZMA_RESULT_DATA_ERROR
;

488 i‡(
	`R™geDecodîBôDecode
(
p
 + 
IsM©ch
 + (
°©e
 << 
kNumPosBôsMax
Ë+ 
posSèã
, &
rd
) == 0)

490 
CProb
 *
¥obs
 = 
p
 + 
LôîÆ
 + (
LZMA_LIT_SIZE
 *

492 (
nowPos


493 #ifde‡
_LZMA_OUT_READ


494 + 
globÆPos


497 & 
lôîÆPosMask
Ë<< 
lc
Ë+ (
¥eviousByã
 >> (8 -Üc))));

499 i‡(
°©e
 < 4) state = 0;

500 i‡(
°©e
 < 10) state -= 3;

501 
°©e
 -= 6;

502 i‡(
¥eviousIsM©ch
)

504 
Byã
 
m©chByã
;

505 #ifde‡
_LZMA_OUT_READ


506 
UI¡32
 
pos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

507 i‡(
pos
 >
di˘i⁄¨ySize
)

508 
pos
 +
di˘i⁄¨ySize
;

509 
m©chByã
 = 
di˘i⁄¨y
[
pos
];

511 
m©chByã
 = 
outSåóm
[
nowPos
 - 
ªp0
];

513 
¥eviousByã
 = 
	`LzmaLôîÆDecodeM©ch
(
¥obs
, &
rd
, 
m©chByã
);

514 
¥eviousIsM©ch
 = 0;

517 
¥eviousByã
 = 
	`LzmaLôîÆDecode
(
¥obs
, &
rd
);

518 
outSåóm
[
nowPos
++] = 
¥eviousByã
;

519 #ifde‡
_LZMA_OUT_READ


520 
di˘i⁄¨y
[
di˘i⁄¨yPos
] = 
¥eviousByã
;

521 i‡(++
di˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

522 
di˘i⁄¨yPos
 = 0;

527 
¥eviousIsM©ch
 = 1;

528 i‡(
	`R™geDecodîBôDecode
(
p
 + 
IsRï
 + 
°©e
, &
rd
) == 1)

530 i‡(
	`R™geDecodîBôDecode
(
p
 + 
IsRïG0
 + 
°©e
, &
rd
) == 0)

532 i‡(
	`R™geDecodîBôDecode
(
p
 + 
IsRï0L⁄g
 + (
°©e
 << 
kNumPosBôsMax
Ë+ 
posSèã
, &
rd
) == 0)

534 #ifde‡
_LZMA_OUT_READ


535 
UI¡32
 
pos
;

538 (
nowPos


539 #ifde‡
_LZMA_OUT_READ


540 + 
globÆPos


544  
LZMA_RESULT_DATA_ERROR
;

545 
°©e
 = state < 7 ? 9 : 11;

546 #ifde‡
_LZMA_OUT_READ


547 
pos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

548 i‡(
pos
 >
di˘i⁄¨ySize
)

549 
pos
 +
di˘i⁄¨ySize
;

550 
¥eviousByã
 = 
di˘i⁄¨y
[
pos
];

551 
di˘i⁄¨y
[
di˘i⁄¨yPos
] = 
¥eviousByã
;

552 i‡(++
di˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

553 
di˘i⁄¨yPos
 = 0;

555 
¥eviousByã
 = 
outSåóm
[
nowPos
 - 
ªp0
];

557 
outSåóm
[
nowPos
++] = 
¥eviousByã
;

563 
UI¡32
 
di°™˚
;

564 if(
	`R™geDecodîBôDecode
(
p
 + 
IsRïG1
 + 
°©e
, &
rd
) == 0)

565 
di°™˚
 = 
ªp1
;

568 if(
	`R™geDecodîBôDecode
(
p
 + 
IsRïG2
 + 
°©e
, &
rd
) == 0)

569 
di°™˚
 = 
ªp2
;

572 
di°™˚
 = 
ªp3
;

573 
ªp3
 = 
ªp2
;

575 
ªp2
 = 
ªp1
;

577 
ªp1
 = 
ªp0
;

578 
ªp0
 = 
di°™˚
;

580 
Àn
 = 
	`LzmaLíDecode
(
p
 + 
RïLíCodî
, &
rd
, 
posSèã
);

581 
°©e
 = state < 7 ? 8 : 11;

585 
posSlŸ
;

586 
ªp3
 = 
ªp2
;

587 
ªp2
 = 
ªp1
;

588 
ªp1
 = 
ªp0
;

589 
°©e
 = state < 7 ? 7 : 10;

590 
Àn
 = 
	`LzmaLíDecode
(
p
 + 
LíCodî
, &
rd
, 
posSèã
);

591 
posSlŸ
 = 
	`R™geDecodîBôTªeDecode
(
p
 + 
PosSlŸ
 +

592 ((
Àn
 < 
kNumLíToPosSèãs
 ?Üen : kNumLenToPosStates - 1) <<

593 
kNumPosSlŸBôs
), kNumPosSlŸBôs, &
rd
);

594 i‡(
posSlŸ
 >
kSèπPosModñIndex
)

596 
numDúe˘Bôs
 = ((
posSlŸ
 >> 1) - 1);

597 
ªp0
 = ((2 | ((
UI¡32
)
posSlŸ
 & 1)Ë<< 
numDúe˘Bôs
);

598 i‡(
posSlŸ
 < 
kEndPosModñIndex
)

600 
ªp0
 +
	`R™geDecodîRevî£BôTªeDecode
(

601 
p
 + 
S≥cPos
 + 
ªp0
 - 
posSlŸ
 - 1, 
numDúe˘Bôs
, &
rd
);

605 
ªp0
 +
	`R™geDecodîDecodeDúe˘Bôs
(&
rd
,

606 
numDúe˘Bôs
 - 
kNumAlignBôs
) << kNumAlignBits;

607 
ªp0
 +
	`R™geDecodîRevî£BôTªeDecode
(
p
 + 
Align
, 
kNumAlignBôs
, &
rd
);

611 
ªp0
 = 
posSlŸ
;

612 
ªp0
++;

614 i‡(
ªp0
 =(
UI¡32
)(0))

617 
Àn
 = -1;

620 i‡(
ªp0
 > 
nowPos


621 #ifde‡
_LZMA_OUT_READ


622 + 
globÆPos


626  
LZMA_RESULT_DATA_ERROR
;

628 
Àn
 +
kM©chMöLí
;

631 #ifde‡
_LZMA_OUT_READ


632 
UI¡32
 
pos
 = 
di˘i⁄¨yPos
 - 
ªp0
;

633 i‡(
pos
 >
di˘i⁄¨ySize
)

634 
pos
 +
di˘i⁄¨ySize
;

635 
¥eviousByã
 = 
di˘i⁄¨y
[
pos
];

636 
di˘i⁄¨y
[
di˘i⁄¨yPos
] = 
¥eviousByã
;

637 i‡(++
di˘i⁄¨yPos
 =
di˘i⁄¨ySize
)

638 
di˘i⁄¨yPos
 = 0;

640 
¥eviousByã
 = 
outSåóm
[
nowPos
 - 
ªp0
];

642 
outSåóm
[
nowPos
++] = 
¥eviousByã
;

643 
Àn
--;

645 
Àn
 > 0 && 
nowPos
 < 
outSize
);

649 #ifde‡
_LZMA_OUT_READ


650 
vs
->
R™geDecodî
 = 
rd
;

651 
vs
->
Di˘i⁄¨yPos
 = 
di˘i⁄¨yPos
;

652 
vs
->
GlobÆPos
 = 
globÆPos
 + 
nowPos
;

653 
vs
->
Rïs
[0] = 
ªp0
;

654 
vs
->
Rïs
[1] = 
ªp1
;

655 
vs
->
Rïs
[2] = 
ªp2
;

656 
vs
->
Rïs
[3] = 
ªp3
;

657 
vs
->
Sèã
 = 
°©e
;

658 
vs
->
PªviousIsM©ch
 = 
¥eviousIsM©ch
;

659 
vs
->
RemaöLí
 = 
Àn
;

662 *
outSizePro˚s£d
 = 
nowPos
;

663  
LZMA_RESULT_OK
;

664 
	}
}

666 
	$lzmaBuffToBuffDecom¥ess
(*
de°
,*
de°Àn
,*
§c
,
§˛í
)

668 
com¥es£dSize
, 
outSize
, 
outSizePro˚s£d
, 
lzmaI¡î«lSize
;

669 *
lzmaI¡î«lD©a
;

670 
¥›îtõs
[5];

671 
¥›0
;

672 
ii
;

673 
lc
, 
Õ
, 
pb
;

674 
ªs
;

675 #ifde‡
_LZMA_IN_CB


676 
CBuf„r
 
bo
;

680 
	`mem˝y
(
¥›îtõs
,
§c
,(properties));

681 
§c
 +(
¥›îtõs
);

682 
outSize
 = 0;

683 
ii
 = 0; ii < 4; ii++)

685 
b
;

686 
	`mem˝y
(&
b
,
§c
, (b));

687 
§c
 +(
b
);

688 
outSize
 +()(
b
Ë<< (
ii
 * 8);

691 i‡(
outSize
 == 0xFFFFFFFF)

697 
ii
 = 0; ii < 4; ii++)

699 
b
;

700 
	`mem˝y
(&
b
,
§c
, (b));

701 
§c
 +(
b
);

702 i‡(
b
 != 0)

709 
¥›0
 = 
¥›îtõs
[0];

710 i‡(
¥›0
 >= (9*5*5))

715 
pb
 = 0; 
¥›0
 >= (9 * 5);

716 
pb
++, 
¥›0
 -= (9 * 5));

717 
Õ
 = 0; 
¥›0
 >= 9;

718 
Õ
++, 
¥›0
 -= 9);

719 
lc
 = 
¥›0
;

721 
com¥es£dSize
 = 
§˛í
 - 13;

722 
lzmaI¡î«lSize
 =

723 (
LZMA_BASE_SIZE
 + (
LZMA_LIT_SIZE
 << (
lc
 + 
Õ
)))* (
CProb
);

725 #ifde‡
_LZMA_OUT_READ


726 
lzmaI¡î«lSize
 += 100;

729 
lzmaI¡î«lD©a
 = (*)
	`mÆloc
(
lzmaI¡î«lSize
);

730 i‡(
lzmaI¡î«lD©a
 == 0)

736 #ifde‡
_LZMA_IN_CB


737 
bo
.
InCÆlback
.
Ród
 = 
LzmaRódCom¥es£d
;

738 
bo
.
Buf„r
 = (*)
§c
;

739 
bo
.
Size
 = 
com¥es£dSize
;

742 #ifde‡
_LZMA_OUT_READ


744 
UI¡32
 
nowPos
;

745 *
di˘i⁄¨y
;

746 
UI¡32
 
di˘i⁄¨ySize
 = 0;

747 
i
;

748 
i
 = 0; i < 4; i++)

749 
di˘i⁄¨ySize
 +(
UI¡32
)(
¥›îtõs
[1 + 
i
]) << (i * 8);

750 
di˘i⁄¨y
 = 
	`mÆloc
(
di˘i⁄¨ySize
);

751 i‡(
di˘i⁄¨y
 == 0)

753 
	`•rötf
(
rs
 + 
	`°æí
(rs), "\n can'tállocate");

756 
	`LzmaDecodîInô
((*)
lzmaI¡î«lD©a
, 
lzmaI¡î«lSize
,

757 
lc
, 
Õ
, 
pb
,

758 
di˘i⁄¨y
, 
di˘i⁄¨ySize
,

759 #ifde‡
_LZMA_IN_CB


760 &
bo
.
InCÆlback


762 (*)
§c
, 
com¥es£dSize


765 
nowPos
 = 0;ÇowPo†< 
outSize
;)

767 
UI¡32
 
blockSize
 = 
outSize
 - 
nowPos
;

768 
UI¡32
 
kBlockSize
 = 0x10000;

769 i‡(
blockSize
 > 
kBlockSize
)

770 
blockSize
 = 
kBlockSize
;

771 
ªs
 = 
	`LzmaDecode
((*)
lzmaI¡î«lD©a
,

772 ((*)
de°
Ë+ 
nowPos
, 
blockSize
, &
outSizePro˚s£d
);

773 i‡(
ªs
 != 0)

775 
	`•rötf
(
rs
 + 
	`°æí
‘s), "\√º‹ = %d\n", 
ªs
);

778 i‡(
outSizePro˚s£d
 == 0)

780 
outSize
 = 
nowPos
;

783 
nowPos
 +
outSizePro˚s£d
;

785 
	`‰ì
(
di˘i⁄¨y
);

789 
ªs
 = 
	`LzmaDecode
((*)
lzmaI¡î«lD©a
, 
lzmaI¡î«lSize
,

790 
lc
, 
Õ
, 
pb
,

791 #ifde‡
_LZMA_IN_CB


792 &
bo
.
InCÆlback
,

794 (*)
§c
, 
com¥es£dSize
,

796 (*)
de°
, 
outSize
, &
outSizePro˚s£d
);

797 
outSize
 = 
outSizePro˚s£d
;

800 i‡(
ªs
 != 0)

806 *
de°Àn
 = 
outSize
;

807 
	`‰ì
(
lzmaI¡î«lD©a
);

809 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/LzmaTools.h

28 #i‚de‡
__LZMA_TOOL_H__


29 
	#__LZMA_TOOL_H__


	)

31 
	~<lzma/LzmaTy≥s.h
>

33 
lzmaBuffToBuffDecom¥ess
 (*
outSåóm
, 
SizeT
 *
uncom¥es£dSize
,

34 *
öSåóm
, 
SizeT
 
Àngth
);

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/Types.h

4 #i‚de‡
__7Z_TYPES_H


5 
	#__7Z_TYPES_H


	)

7 
	~<°ddef.h
>

9 #ifde‡
_WIN32


10 
	~<wödows.h
>

13 
	#SZ_OK
 0

	)

15 
	#SZ_ERROR_DATA
 1

	)

16 
	#SZ_ERROR_MEM
 2

	)

17 
	#SZ_ERROR_CRC
 3

	)

18 
	#SZ_ERROR_UNSUPPORTED
 4

	)

19 
	#SZ_ERROR_PARAM
 5

	)

20 
	#SZ_ERROR_INPUT_EOF
 6

	)

21 
	#SZ_ERROR_OUTPUT_EOF
 7

	)

22 
	#SZ_ERROR_READ
 8

	)

23 
	#SZ_ERROR_WRITE
 9

	)

24 
	#SZ_ERROR_PROGRESS
 10

	)

25 
	#SZ_ERROR_FAIL
 11

	)

26 
	#SZ_ERROR_THREAD
 12

	)

28 
	#SZ_ERROR_ARCHIVE
 16

	)

29 
	#SZ_ERROR_NO_ARCHIVE
 17

	)

31 
	tSRes
;

33 #ifde‡
_WIN32


34 
DWORD
 
	tWRes
;

36 
	tWRes
;

39 #i‚de‡
RINOK


40 
	#RINOK
(
x
Ë{ 
__ªsu…__
 = (x); i‡(__ªsu…__ !0Ë __ªsu…__; }

	)

43 
	tByã
;

44 
	tI¡16
;

45 
	tUI¡16
;

47 #ifde‡
_LZMA_UINT32_IS_ULONG


48 
	tI¡32
;

49 
	tUI¡32
;

51 
	tI¡32
;

52 
	tUI¡32
;

55 #ifde‡
_SZ_NO_INT_64


60 
	tI¡64
;

61 
	tUI¡64
;

65 #i‡
deföed
(
_MSC_VER
Ë|| deföed(
__BORLANDC__
)

66 
__öt64
 
	tI¡64
;

67 
	t__öt64
 
	tUI¡64
;

69 
	tI¡64
;

70 
	tUI¡64
;

75 #ifde‡
_LZMA_NO_SYSTEM_SIZE_T


76 
UI¡32
 
	tSizeT
;

78 
size_t
 
	tSizeT
;

81 
	tBoﬁ
;

82 
	#True
 1

	)

83 
	#FÆ£
 0

	)

86 #ifde‡
_MSC_VER


88 #i‡
_MSC_VER
 >= 1300

89 
	#MY_NO_INLINE
 
	`__de˛•ec
(
noölöe
)

	)

91 
	#MY_NO_INLINE


	)

94 
	#MY_CDECL
 
__cde˛


	)

95 
	#MY_STD_CALL
 
__°dˇŒ


	)

96 
	#MY_FAST_CALL
 
MY_NO_INLINE
 
__Á°ˇŒ


	)

100 
	#MY_CDECL


	)

101 
	#MY_STD_CALL


	)

102 
	#MY_FAST_CALL


	)

111 
SRes
 (*
Ród
)(*
	mp
, *
	mbuf
, 
size_t
 *
	msize
);

114 } 
	tISeqInSåóm
;

117 
SRes
 
SeqInSåóm_Ród
(
ISeqInSåóm
 *
°ªam
, *
buf
, 
size_t
 
size
);

118 
SRes
 
SeqInSåóm_Ród2
(
ISeqInSåóm
 *
°ªam
, *
buf
, 
size_t
 
size
, SRe†
îr‹Ty≥
);

119 
SRes
 
SeqInSåóm_RódByã
(
ISeqInSåóm
 *
°ªam
, 
Byã
 *
buf
);

123 
size_t
 (*
Wrôe
)(*
	mp
, c⁄° *
	mbuf
, size_à
	msize
);

126 } 
	tISeqOutSåóm
;

130 
	mSZ_SEEK_SET
 = 0,

131 
	mSZ_SEEK_CUR
 = 1,

132 
	mSZ_SEEK_END
 = 2

133 } 
	tESzSìk
;

137 
SRes
 (*
Ród
)(*
	mp
, *
	mbuf
, 
size_t
 *
	msize
);

138 
SRes
 (*
Sìk
)(*
	mp
, 
I¡64
 *
	mpos
, 
ESzSìk
 
	m‹igö
);

139 } 
	tISìkInSåóm
;

143 
SRes
 (*
Look
)(*
	mp
, **
	mbuf
, 
size_t
 *
	msize
);

147 
SRes
 (*
Skù
)(*
	mp
, 
size_t
 
	moff£t
);

150 
SRes
 (*
Ród
)(*
	mp
, *
	mbuf
, 
size_t
 *
	msize
);

152 
SRes
 (*
Sìk
)(*
	mp
, 
I¡64
 *
	mpos
, 
ESzSìk
 
	m‹igö
);

153 } 
	tILookInSåóm
;

155 
SRes
 
LookInSåóm_LookRód
(
ILookInSåóm
 *
°ªam
, *
buf
, 
size_t
 *
size
);

156 
SRes
 
LookInSåóm_SìkTo
(
ILookInSåóm
 *
°ªam
, 
UI¡64
 
off£t
);

159 
SRes
 
LookInSåóm_Ród2
(
ILookInSåóm
 *
°ªam
, *
buf
, 
size_t
 
size
, SRe†
îr‹Ty≥
);

160 
SRes
 
LookInSåóm_Ród
(
ILookInSåóm
 *
°ªam
, *
buf
, 
size_t
 
size
);

162 
	#LookToRód_BUF_SIZE
 (1 << 14)

	)

166 
ILookInSåóm
 
	ms
;

167 
ISìkInSåóm
 *
	mªÆSåóm
;

168 
size_t
 
	mpos
;

169 
size_t
 
	msize
;

170 
Byã
 
	mbuf
[
LookToRód_BUF_SIZE
];

171 } 
	tCLookToRód
;

173 
LookToRód_Cª©eVTabÀ
(
CLookToRód
 *
p
, 
lookahód
);

174 
LookToRód_Inô
(
CLookToRód
 *
p
);

178 
ISeqInSåóm
 
	ms
;

179 
ILookInSåóm
 *
	mªÆSåóm
;

180 } 
	tCSecToLook
;

182 
SecToLook_Cª©eVTabÀ
(
CSecToLook
 *
p
);

186 
ISeqInSåóm
 
	ms
;

187 
ILookInSåóm
 *
	mªÆSåóm
;

188 } 
	tCSecToRód
;

190 
SecToRód_Cª©eVTabÀ
(
CSecToRód
 *
p
);

194 
SRes
 (*
Progªss
)(*
	mp
, 
UI¡64
 
	möSize
, UI¡64 
	moutSize
);

197 } 
	tICom¥essProgªss
;

201 *(*
	mAŒoc
)(*
	mp
, 
size_t
 
	msize
);

202 (*
	mFªe
)(*
	mp
, *
	maddªss
);

203 } 
	tISzAŒoc
;

205 
	#IAŒoc_AŒoc
(
p
, 
size
Ë’)->
	`AŒoc
(’), size)

	)

206 
	#IAŒoc_Fªe
(
p
, 
a
Ë’)->
	`Fªe
(’),á)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/bzlib.c

1 
	~<c⁄fig.h
>

2 
	~<comm⁄.h
>

3 
	~<w©chdog.h
>

4 #ifde‡
CONFIG_BZIP2


85 
	~"bzlib_¥iv©e.h
"

93 #i‚de‡
BZ_NO_STDIO


94 
	$BZ2_bz__As£πH__Áû
 ( 
îrcode
 )

96 
	`Ârötf
(
°dîr
,

105 
îrcode
,

106 
	`BZ2_bzlibVîsi⁄
()

109 i‡(
îrcode
 == 1007) {

110 
	`Ârötf
(
°dîr
,

137 
	`exô
(3);

138 
	}
}

144 
	$bz_c⁄fig_ok
 ( )

150 
	}
}

155 * 
	$deÁu…_bzÆloc
 ( * 
›aque
, 
I¡32
 
ôems
, I¡32 
size
 )

157 * 
v
 = 
	`mÆloc
 ( 
ôems
 * 
size
 );

158  
v
;

159 
	}
}

162 
	$deÁu…_bz‰ì
 ( * 
›aque
, * 
addr
 )

164 i‡(
addr
 !
NULL
Ë
	`‰ì
 (áddr );

165 
	}
}

167 #i‚de‡
BZ_NO_COMPRESS


170 
	$¥ï¨e_√w_block
 ( 
ESèã
* 
s
 )

172 
I¡32
 
i
;

173 
s
->
nblock
 = 0;

174 
s
->
numZ
 = 0;

175 
s
->
°©e_out_pos
 = 0;

176 
	`BZ_INITIALISE_CRC
 ( 
s
->
blockCRC
 );

177 
i
 = 0; i < 256; i++Ë
s
->
öU£
[i] = 
FÆ£
;

178 
s
->
blockNo
++;

179 
	}
}

184 
	$öô_RL
 ( 
ESèã
* 
s
 )

186 
s
->
°©e_ö_ch
 = 256;

187 
s
->
°©e_ö_Àn
 = 0;

188 
	}
}

192 
Boﬁ
 
	$i£m±y_RL
 ( 
ESèã
* 
s
 )

194 i‡(
s
->
°©e_ö_ch
 < 256 && s->
°©e_ö_Àn
 > 0)

195  
FÆ£
; 

196  
True
;

197 
	}
}

200 
	$BZ_API
(
BZ2_bzCom¥essInô
)

201 –
bz_°ªam
* 
°rm
,

202 
blockSize100k
,

203 
vîbosôy
,

204 
w‹kFa˘‹
 )

206 
I¡32
 
n
;

207 
ESèã
* 
s
;

209 i‡(!
	`bz_c⁄fig_ok
()Ë 
BZ_CONFIG_ERROR
;

211 i‡(
°rm
 =
NULL
 ||

212 
blockSize100k
 < 1 || blockSize100k > 9 ||

213 
w‹kFa˘‹
 < 0 || workFactor > 250)

214  
BZ_PARAM_ERROR
;

216 i‡(
w‹kFa˘‹
 == 0) workFactor = 30;

217 i‡(
°rm
->
bzÆloc
 =
NULL
Ë°rm->bzÆlo¯
deÁu…_bzÆloc
;

218 i‡(
°rm
->
bz‰ì
 =
NULL
Ë°rm->bz‰ì = 
deÁu…_bz‰ì
;

220 
s
 = 
	`BZALLOC
–(
ESèã
) );

221 i‡(
s
 =
NULL
Ë 
BZ_MEM_ERROR
;

222 
s
->
°rm
 = strm;

224 
s
->
¨r1
 = 
NULL
;

225 
s
->
¨r2
 = 
NULL
;

226 
s
->
·ab
 = 
NULL
;

228 
n
 = 100000 * 
blockSize100k
;

229 
s
->
¨r1
 = 
	`BZALLOC
–
n
 * (
UI¡32
) );

230 
s
->
¨r2
 = 
	`BZALLOC
–(
n
+
BZ_N_OVERSHOOT
Ë* (
UI¡32
) );

231 
s
->
·ab
 = 
	`BZALLOC
–65537 * (
UI¡32
) );

233 i‡(
s
->
¨r1
 =
NULL
 || s->
¨r2
 =NULL || s->
·ab
 == NULL) {

234 i‡(
s
->
¨r1
 !
NULL
Ë
	`BZFREE
(s->arr1);

235 i‡(
s
->
¨r2
 !
NULL
Ë
	`BZFREE
(s->arr2);

236 i‡(
s
->
·ab
 !
NULL
Ë
	`BZFREE
(s->ftab);

237 i‡(
s
 !
NULL
Ë
	`BZFREE
(s);

238  
BZ_MEM_ERROR
;

241 
s
->
blockNo
 = 0;

242 
s
->
°©e
 = 
BZ_S_INPUT
;

243 
s
->
mode
 = 
BZ_M_RUNNING
;

244 
s
->
comböedCRC
 = 0;

245 
s
->
blockSize100k
 = blockSize100k;

246 
s
->
nblockMAX
 = 100000 * 
blockSize100k
 - 19;

247 
s
->
vîbosôy
 = verbosity;

248 
s
->
w‹kFa˘‹
 = workFactor;

250 
s
->
block
 = (
UCh¨
*)s->
¨r2
;

251 
s
->
mtfv
 = (
UI¡16
*)s->
¨r1
;

252 
s
->
zbôs
 = 
NULL
;

253 
s
->
±r
 = (
UI¡32
*)s->
¨r1
;

255 
°rm
->
°©e
 = 
s
;

256 
°rm
->
tŸÆ_ö_lo32
 = 0;

257 
°rm
->
tŸÆ_ö_hi32
 = 0;

258 
°rm
->
tŸÆ_out_lo32
 = 0;

259 
°rm
->
tŸÆ_out_hi32
 = 0;

260 
	`öô_RL
 ( 
s
 );

261 
	`¥ï¨e_√w_block
 ( 
s
 );

262  
BZ_OK
;

263 
	}
}

268 
	$add_∑ú_to_block
 ( 
ESèã
* 
s
 )

270 
I¡32
 
i
;

271 
UCh¨
 
ch
 = (UCh¨)(
s
->
°©e_ö_ch
);

272 
i
 = 0; i < 
s
->
°©e_ö_Àn
; i++) {

273 
	`BZ_UPDATE_CRC
–
s
->
blockCRC
, 
ch
 );

275 
s
->
öU£
[s->
°©e_ö_ch
] = 
True
;

276 
s
->
°©e_ö_Àn
) {

278 
s
->
block
[s->
nblock
] = (
UCh¨
)
ch
; s->nblock++;

281 
s
->
block
[s->
nblock
] = (
UCh¨
)
ch
; s->nblock++;

282 
s
->
block
[s->
nblock
] = (
UCh¨
)
ch
; s->nblock++;

285 
s
->
block
[s->
nblock
] = (
UCh¨
)
ch
; s->nblock++;

286 
s
->
block
[s->
nblock
] = (
UCh¨
)
ch
; s->nblock++;

287 
s
->
block
[s->
nblock
] = (
UCh¨
)
ch
; s->nblock++;

290 
s
->
öU£
[s->
°©e_ö_Àn
-4] = 
True
;

291 
s
->
block
[s->
nblock
] = (
UCh¨
)
ch
; s->nblock++;

292 
s
->
block
[s->
nblock
] = (
UCh¨
)
ch
; s->nblock++;

293 
s
->
block
[s->
nblock
] = (
UCh¨
)
ch
; s->nblock++;

294 
s
->
block
[s->
nblock
] = (
UCh¨
)
ch
; s->nblock++;

295 
s
->
block
[s->
nblock
] = ((
UCh¨
)(s->
°©e_ö_Àn
-4));

296 
s
->
nblock
++;

299 
	}
}

304 
	$Êush_RL
 ( 
ESèã
* 
s
 )

306 i‡(
s
->
°©e_ö_ch
 < 256Ë
	`add_∑ú_to_block
 ( s );

307 
	`öô_RL
 ( 
s
 );

308 
	}
}

312 
	#ADD_CHAR_TO_BLOCK
(
zs
,
zchh0
) \

314 
UI¡32
 
zchh
 = (UI¡32)(
zchh0
); \

316 i‡(
zchh
 !
zs
->
°©e_ö_ch
 && \

317 
zs
->
°©e_ö_Àn
 == 1) { \

318 
UCh¨
 
ch
 = (UCh¨)(
zs
->
°©e_ö_ch
); \

319 
	`BZ_UPDATE_CRC
–
zs
->
blockCRC
, 
ch
 ); \

320 
zs
->
öU£
[zs->
°©e_ö_ch
] = 
True
; \

321 
zs
->
block
[zs->
nblock
] = (
UCh¨
)
ch
; \

322 
zs
->
nblock
++; \

323 
zs
->
°©e_ö_ch
 = 
zchh
; \

327 i‡(
zchh
 !
zs
->
°©e_ö_ch
 || \

328 
zs
->
°©e_ö_Àn
 == 255) { \

329 i‡(
zs
->
°©e_ö_ch
 < 256) \

330 
	`add_∑ú_to_block
 ( 
zs
 ); \

331 
zs
->
°©e_ö_ch
 = 
zchh
; \

332 
zs
->
°©e_ö_Àn
 = 1; \

334 
zs
->
°©e_ö_Àn
++; \

336 }

	)

341 
Boﬁ
 
	$c›y_öput_u¡û_°›
 ( 
ESèã
* 
s
 )

343 
Boﬁ
 
¥ogªss_ö
 = 
FÆ£
;

345 i‡(
s
->
mode
 =
BZ_M_RUNNING
) {

348 
True
) {

350 i‡(
s
->
nblock
 >s->
nblockMAX
) ;

352 i‡(
s
->
°rm
->
avaû_ö
 == 0) ;

353 
¥ogªss_ö
 = 
True
;

354 
	`ADD_CHAR_TO_BLOCK
 ( 
s
, (
UI¡32
)(*((
UCh¨
*)(s->
°rm
->
√xt_ö
))) );

355 
s
->
°rm
->
√xt_ö
++;

356 
s
->
°rm
->
avaû_ö
--;

357 
s
->
°rm
->
tŸÆ_ö_lo32
++;

358 i‡(
s
->
°rm
->
tŸÆ_ö_lo32
 =0Ës->°rm->
tŸÆ_ö_hi32
++;

364 
True
) {

366 i‡(
s
->
nblock
 >s->
nblockMAX
) ;

368 i‡(
s
->
°rm
->
avaû_ö
 == 0) ;

370 i‡(
s
->
avaû_ö_ex≥˘
 == 0) ;

371 
¥ogªss_ö
 = 
True
;

372 
	`ADD_CHAR_TO_BLOCK
 ( 
s
, (
UI¡32
)(*((
UCh¨
*)(s->
°rm
->
√xt_ö
))) );

373 
s
->
°rm
->
√xt_ö
++;

374 
s
->
°rm
->
avaû_ö
--;

375 
s
->
°rm
->
tŸÆ_ö_lo32
++;

376 i‡(
s
->
°rm
->
tŸÆ_ö_lo32
 =0Ës->°rm->
tŸÆ_ö_hi32
++;

377 
s
->
avaû_ö_ex≥˘
--;

380  
¥ogªss_ö
;

381 
	}
}

386 
Boﬁ
 
	$c›y_ouçut_u¡û_°›
 ( 
ESèã
* 
s
 )

388 
Boﬁ
 
¥ogªss_out
 = 
FÆ£
;

390 
True
) {

393 i‡(
s
->
°rm
->
avaû_out
 == 0) ;

396 i‡(
s
->
°©e_out_pos
 >s->
numZ
) ;

398 
¥ogªss_out
 = 
True
;

399 *(
s
->
°rm
->
√xt_out
Ës->
zbôs
[s->
°©e_out_pos
];

400 
s
->
°©e_out_pos
++;

401 
s
->
°rm
->
avaû_out
--;

402 
s
->
°rm
->
√xt_out
++;

403 
s
->
°rm
->
tŸÆ_out_lo32
++;

404 i‡(
s
->
°rm
->
tŸÆ_out_lo32
 =0Ës->°rm->
tŸÆ_out_hi32
++;

407  
¥ogªss_out
;

408 
	}
}

413 
Boﬁ
 
	$h™dÀ_com¥ess
 ( 
bz_°ªam
* 
°rm
 )

415 
Boﬁ
 
¥ogªss_ö
 = 
FÆ£
;

416 
Boﬁ
 
¥ogªss_out
 = 
FÆ£
;

417 
ESèã
* 
s
 = 
°rm
->
°©e
;

419 
True
) {

421 i‡(
s
->
°©e
 =
BZ_S_OUTPUT
) {

422 
¥ogªss_out
 |
	`c›y_ouçut_u¡û_°›
 ( 
s
 );

423 i‡(
s
->
°©e_out_pos
 < s->
numZ
) ;

424 i‡(
s
->
mode
 =
BZ_M_FINISHING
 &&

425 
s
->
avaû_ö_ex≥˘
 == 0 &&

426 
	`i£m±y_RL
(
s
)) ;

427 
	`¥ï¨e_√w_block
 ( 
s
 );

428 
s
->
°©e
 = 
BZ_S_INPUT
;

429 i‡(
s
->
mode
 =
BZ_M_FLUSHING
 &&

430 
s
->
avaû_ö_ex≥˘
 == 0 &&

431 
	`i£m±y_RL
(
s
)) ;

434 i‡(
s
->
°©e
 =
BZ_S_INPUT
) {

435 
¥ogªss_ö
 |
	`c›y_öput_u¡û_°›
 ( 
s
 );

436 i‡(
s
->
mode
 !
BZ_M_RUNNING
 && s->
avaû_ö_ex≥˘
 == 0) {

437 
	`Êush_RL
 ( 
s
 );

438 
	`BZ2_com¥essBlock
 ( 
s
, (
Boﬁ
)(s->
mode
 =
BZ_M_FINISHING
) );

439 
s
->
°©e
 = 
BZ_S_OUTPUT
;

442 i‡(
s
->
nblock
 >s->
nblockMAX
) {

443 
	`BZ2_com¥essBlock
 ( 
s
, 
FÆ£
 );

444 
s
->
°©e
 = 
BZ_S_OUTPUT
;

447 i‡(
s
->
°rm
->
avaû_ö
 == 0) {

454  
¥ogªss_ö
 || 
¥ogªss_out
;

455 
	}
}

459 
	$BZ_API
(
BZ2_bzCom¥ess
Ë–
bz_°ªam
 *
°rm
, 
a˘i⁄
 )

461 
Boﬁ
 
¥ogªss
;

462 
ESèã
* 
s
;

463 i‡(
°rm
 =
NULL
Ë 
BZ_PARAM_ERROR
;

464 
s
 = 
°rm
->
°©e
;

465 i‡(
s
 =
NULL
Ë 
BZ_PARAM_ERROR
;

466 i‡(
s
->
°rm
 !°rmË 
BZ_PARAM_ERROR
;

468 
¥eswôch
:

469 
s
->
mode
) {

471 
BZ_M_IDLE
:

472  
BZ_SEQUENCE_ERROR
;

474 
BZ_M_RUNNING
:

475 i‡(
a˘i⁄
 =
BZ_RUN
) {

476 
¥ogªss
 = 
	`h™dÀ_com¥ess
 ( 
°rm
 );

477  
¥ogªss
 ? 
BZ_RUN_OK
 : 
BZ_PARAM_ERROR
;

480 i‡(
a˘i⁄
 =
BZ_FLUSH
) {

481 
s
->
avaû_ö_ex≥˘
 = 
°rm
->
avaû_ö
;

482 
s
->
mode
 = 
BZ_M_FLUSHING
;

483 
¥eswôch
;

486 i‡(
a˘i⁄
 =
BZ_FINISH
) {

487 
s
->
avaû_ö_ex≥˘
 = 
°rm
->
avaû_ö
;

488 
s
->
mode
 = 
BZ_M_FINISHING
;

489 
¥eswôch
;

492  
BZ_PARAM_ERROR
;

494 
BZ_M_FLUSHING
:

495 i‡(
a˘i⁄
 !
BZ_FLUSH
Ë 
BZ_SEQUENCE_ERROR
;

496 i‡(
s
->
avaû_ö_ex≥˘
 !s->
°rm
->
avaû_ö
)

497  
BZ_SEQUENCE_ERROR
;

498 
¥ogªss
 = 
	`h™dÀ_com¥ess
 ( 
°rm
 );

499 i‡(
s
->
avaû_ö_ex≥˘
 > 0 || !
	`i£m±y_RL
(s) ||

500 
s
->
°©e_out_pos
 < s->
numZ
Ë 
BZ_FLUSH_OK
;

501 
s
->
mode
 = 
BZ_M_RUNNING
;

502  
BZ_RUN_OK
;

504 
BZ_M_FINISHING
:

505 i‡(
a˘i⁄
 !
BZ_FINISH
Ë 
BZ_SEQUENCE_ERROR
;

506 i‡(
s
->
avaû_ö_ex≥˘
 !s->
°rm
->
avaû_ö
)

507  
BZ_SEQUENCE_ERROR
;

508 
¥ogªss
 = 
	`h™dÀ_com¥ess
 ( 
°rm
 );

509 i‡(!
¥ogªss
Ë 
BZ_SEQUENCE_ERROR
;

510 i‡(
s
->
avaû_ö_ex≥˘
 > 0 || !
	`i£m±y_RL
(s) ||

511 
s
->
°©e_out_pos
 < s->
numZ
Ë 
BZ_FINISH_OK
;

512 
s
->
mode
 = 
BZ_M_IDLE
;

513  
BZ_STREAM_END
;

515  
BZ_OK
;

516 
	}
}

520 
	$BZ_API
(
BZ2_bzCom¥essEnd
Ë–
bz_°ªam
 *
°rm
 )

522 
ESèã
* 
s
;

523 i‡(
°rm
 =
NULL
Ë 
BZ_PARAM_ERROR
;

524 
s
 = 
°rm
->
°©e
;

525 i‡(
s
 =
NULL
Ë 
BZ_PARAM_ERROR
;

526 i‡(
s
->
°rm
 !°rmË 
BZ_PARAM_ERROR
;

528 i‡(
s
->
¨r1
 !
NULL
Ë
	`BZFREE
(s->arr1);

529 i‡(
s
->
¨r2
 !
NULL
Ë
	`BZFREE
(s->arr2);

530 i‡(
s
->
·ab
 !
NULL
Ë
	`BZFREE
(s->ftab);

531 
	`BZFREE
(
°rm
->
°©e
);

533 
°rm
->
°©e
 = 
NULL
;

535  
BZ_OK
;

536 
	}
}

544 
	$BZ_API
(
BZ2_bzDecom¥essInô
)

545 –
bz_°ªam
* 
°rm
,

546 
vîbosôy
,

547 
smÆl
 )

549 
DSèã
* 
s
;

551 i‡(!
	`bz_c⁄fig_ok
()Ë 
BZ_CONFIG_ERROR
;

553 i‡(
°rm
 =
NULL
Ë 
BZ_PARAM_ERROR
;

554 i‡(
smÆl
 !0 && smÆ»!1Ë 
BZ_PARAM_ERROR
;

555 i‡(
vîbosôy
 < 0 || vîbosôy > 4Ë 
BZ_PARAM_ERROR
;

557 i‡(
°rm
->
bzÆloc
 =
NULL
Ë°rm->bzÆlo¯
deÁu…_bzÆloc
;

558 i‡(
°rm
->
bz‰ì
 =
NULL
Ë°rm->bz‰ì = 
deÁu…_bz‰ì
;

560 
s
 = 
	`BZALLOC
–(
DSèã
) );

561 i‡(
s
 =
NULL
Ë 
BZ_MEM_ERROR
;

562 
s
->
°rm
 = strm;

563 
°rm
->
°©e
 = 
s
;

564 
s
->
°©e
 = 
BZ_X_MAGIC_1
;

565 
s
->
bsLive
 = 0;

566 
s
->
bsBuff
 = 0;

567 
s
->
ˇlcuœãdComböedCRC
 = 0;

568 
°rm
->
tŸÆ_ö_lo32
 = 0;

569 
°rm
->
tŸÆ_ö_hi32
 = 0;

570 
°rm
->
tŸÆ_out_lo32
 = 0;

571 
°rm
->
tŸÆ_out_hi32
 = 0;

572 
s
->
smÆlDecom¥ess
 = (
Boﬁ
)
smÆl
;

573 
s
->
Œ4
 = 
NULL
;

574 
s
->
Œ16
 = 
NULL
;

575 
s
->
â
 = 
NULL
;

576 
s
->
cuºBlockNo
 = 0;

577 
s
->
vîbosôy
 = verbosity;

579  
BZ_OK
;

580 
	}
}

585 
	$unRLE_obuf_to_ouçut_FAST
 ( 
DSèã
* 
s
 )

587 
UCh¨
 
k1
;

589 i‡(
s
->
blockR™domi£d
) {

591 
True
) {

593 
True
) {

594 i‡(
s
->
°rm
->
avaû_out
 == 0) ;

595 i‡(
s
->
°©e_out_Àn
 == 0) ;

596 *–(
UCh¨
*)(
s
->
°rm
->
√xt_out
ËËs->
°©e_out_ch
;

597 
	`BZ_UPDATE_CRC
 ( 
s
->
ˇlcuœãdBlockCRC
, s->
°©e_out_ch
 );

598 
s
->
°©e_out_Àn
--;

599 
s
->
°rm
->
√xt_out
++;

600 
s
->
°rm
->
avaû_out
--;

601 
s
->
°rm
->
tŸÆ_out_lo32
++;

602 i‡(
s
->
°rm
->
tŸÆ_out_lo32
 =0Ës->°rm->
tŸÆ_out_hi32
++;

606 i‡(
s
->
nblock_u£d
 =s->
ßve_nblock
+1) ;

609 
s
->
°©e_out_Àn
 = 1;

610 
s
->
°©e_out_ch
 = s->
k0
;

611 
	`BZ_GET_FAST
(
k1
); 
BZ_RAND_UPD_MASK
;

612 
k1
 ^
BZ_RAND_MASK
; 
s
->
nblock_u£d
++;

613 i‡(
s
->
nblock_u£d
 =s->
ßve_nblock
+1) ;

614 i‡(
k1
 !
s
->
k0
) { s->k0 = k1; ; };

616 
s
->
°©e_out_Àn
 = 2;

617 
	`BZ_GET_FAST
(
k1
); 
BZ_RAND_UPD_MASK
;

618 
k1
 ^
BZ_RAND_MASK
; 
s
->
nblock_u£d
++;

619 i‡(
s
->
nblock_u£d
 =s->
ßve_nblock
+1) ;

620 i‡(
k1
 !
s
->
k0
) { s->k0 = k1; ; };

622 
s
->
°©e_out_Àn
 = 3;

623 
	`BZ_GET_FAST
(
k1
); 
BZ_RAND_UPD_MASK
;

624 
k1
 ^
BZ_RAND_MASK
; 
s
->
nblock_u£d
++;

625 i‡(
s
->
nblock_u£d
 =s->
ßve_nblock
+1) ;

626 i‡(
k1
 !
s
->
k0
) { s->k0 = k1; ; };

628 
	`BZ_GET_FAST
(
k1
); 
BZ_RAND_UPD_MASK
;

629 
k1
 ^
BZ_RAND_MASK
; 
s
->
nblock_u£d
++;

630 
s
->
°©e_out_Àn
 = ((
I¡32
)
k1
) + 4;

631 
	`BZ_GET_FAST
(
s
->
k0
); 
BZ_RAND_UPD_MASK
;

632 
s
->
k0
 ^
BZ_RAND_MASK
; s->
nblock_u£d
++;

638 
UI¡32
 
c_ˇlcuœãdBlockCRC
 = 
s
->
ˇlcuœãdBlockCRC
;

639 
UCh¨
 
c_°©e_out_ch
 = 
s
->
°©e_out_ch
;

640 
I¡32
 
c_°©e_out_Àn
 = 
s
->
°©e_out_Àn
;

641 
I¡32
 
c_nblock_u£d
 = 
s
->
nblock_u£d
;

642 
I¡32
 
c_k0
 = 
s
->
k0
;

643 
UI¡32
* 
c_â
 = 
s
->
â
;

644 
UI¡32
 
c_tPos
 = 
s
->
tPos
;

645 * 
cs_√xt_out
 = 
s
->
°rm
->
√xt_out
;

646 
cs_avaû_out
 = 
s
->
°rm
->
avaû_out
;

649 
UI¡32
 
avaû_out_INIT
 = 
cs_avaû_out
;

650 
I¡32
 
s_ßve_nblockPP
 = 
s
->
ßve_nblock
+1;

651 
tŸÆ_out_lo32_ﬁd
;

653 
True
) {

656 i‡(
c_°©e_out_Àn
 > 0) {

657 
True
) {

658 i‡(
cs_avaû_out
 =0Ë
ªtu∫_nŸr
;

659 i‡(
c_°©e_out_Àn
 == 1) ;

660 *–(
UCh¨
*)(
cs_√xt_out
ËË
c_°©e_out_ch
;

661 
	`BZ_UPDATE_CRC
 ( 
c_ˇlcuœãdBlockCRC
, 
c_°©e_out_ch
 );

662 
c_°©e_out_Àn
--;

663 
cs_√xt_out
++;

664 
cs_avaû_out
--;

666 
s_°©e_out_Àn_eq_⁄e
:

668 i‡(
cs_avaû_out
 == 0) {

669 
c_°©e_out_Àn
 = 1; 
ªtu∫_nŸr
;

671 *–(
UCh¨
*)(
cs_√xt_out
ËË
c_°©e_out_ch
;

672 
	`BZ_UPDATE_CRC
 ( 
c_ˇlcuœãdBlockCRC
, 
c_°©e_out_ch
 );

673 
cs_√xt_out
++;

674 
cs_avaû_out
--;

678 i‡(
c_nblock_u£d
 =
s_ßve_nblockPP
) {

679 
c_°©e_out_Àn
 = 0; 
ªtu∫_nŸr
;

681 
c_°©e_out_ch
 = 
c_k0
;

682 
	`BZ_GET_FAST_C
(
k1
); 
c_nblock_u£d
++;

683 i‡(
k1
 !
c_k0
) {

684 
c_k0
 = 
k1
; 
s_°©e_out_Àn_eq_⁄e
;

686 i‡(
c_nblock_u£d
 =
s_ßve_nblockPP
)

687 
s_°©e_out_Àn_eq_⁄e
;

689 
c_°©e_out_Àn
 = 2;

690 
	`BZ_GET_FAST_C
(
k1
); 
c_nblock_u£d
++;

691 i‡(
c_nblock_u£d
 =
s_ßve_nblockPP
) ;

692 i‡(
k1
 !
c_k0
) { c_k0 = k1; ; };

694 
c_°©e_out_Àn
 = 3;

695 
	`BZ_GET_FAST_C
(
k1
); 
c_nblock_u£d
++;

696 i‡(
c_nblock_u£d
 =
s_ßve_nblockPP
) ;

697 i‡(
k1
 !
c_k0
) { c_k0 = k1; ; };

699 
	`BZ_GET_FAST_C
(
k1
); 
c_nblock_u£d
++;

700 
c_°©e_out_Àn
 = ((
I¡32
)
k1
) + 4;

701 
	`BZ_GET_FAST_C
(
c_k0
); 
c_nblock_u£d
++;

704 
ªtu∫_nŸr
:

705 
tŸÆ_out_lo32_ﬁd
 = 
s
->
°rm
->
tŸÆ_out_lo32
;

706 
s
->
°rm
->
tŸÆ_out_lo32
 +(
avaû_out_INIT
 - 
cs_avaû_out
);

707 i‡(
s
->
°rm
->
tŸÆ_out_lo32
 < 
tŸÆ_out_lo32_ﬁd
)

708 
s
->
°rm
->
tŸÆ_out_hi32
++;

711 
s
->
ˇlcuœãdBlockCRC
 = 
c_ˇlcuœãdBlockCRC
;

712 
s
->
°©e_out_ch
 = 
c_°©e_out_ch
;

713 
s
->
°©e_out_Àn
 = 
c_°©e_out_Àn
;

714 
s
->
nblock_u£d
 = 
c_nblock_u£d
;

715 
s
->
k0
 = 
c_k0
;

716 
s
->
â
 = 
c_â
;

717 
s
->
tPos
 = 
c_tPos
;

718 
s
->
°rm
->
√xt_out
 = 
cs_√xt_out
;

719 
s
->
°rm
->
avaû_out
 = 
cs_avaû_out
;

722 
	}
}

726 
__ölöe__
 
I¡32
 
	$BZ2_ödexI¡oF
 ( 
I¡32
 
ödx
, I¡32 *
c·ab
 )

728 
I¡32
 
nb
, 
«
, 
mid
;

729 
nb
 = 0;

730 
«
 = 256;

732 
mid
 = (
nb
 + 
«
) >> 1;

733 i‡(
ödx
 >
c·ab
[
mid
]Ë
nb
 = mid; 
«
 = mid;

735 
«
 - 
nb
 != 1);

736  
nb
;

737 
	}
}

742 
	$unRLE_obuf_to_ouçut_SMALL
 ( 
DSèã
* 
s
 )

744 
UCh¨
 
k1
;

746 i‡(
s
->
blockR™domi£d
) {

748 
True
) {

750 
True
) {

751 i‡(
s
->
°rm
->
avaû_out
 == 0) ;

752 i‡(
s
->
°©e_out_Àn
 == 0) ;

753 *–(
UCh¨
*)(
s
->
°rm
->
√xt_out
ËËs->
°©e_out_ch
;

754 
	`BZ_UPDATE_CRC
 ( 
s
->
ˇlcuœãdBlockCRC
, s->
°©e_out_ch
 );

755 
s
->
°©e_out_Àn
--;

756 
s
->
°rm
->
√xt_out
++;

757 
s
->
°rm
->
avaû_out
--;

758 
s
->
°rm
->
tŸÆ_out_lo32
++;

759 i‡(
s
->
°rm
->
tŸÆ_out_lo32
 =0Ës->°rm->
tŸÆ_out_hi32
++;

763 i‡(
s
->
nblock_u£d
 =s->
ßve_nblock
+1) ;

766 
s
->
°©e_out_Àn
 = 1;

767 
s
->
°©e_out_ch
 = s->
k0
;

768 
	`BZ_GET_SMALL
(
k1
); 
BZ_RAND_UPD_MASK
;

769 
k1
 ^
BZ_RAND_MASK
; 
s
->
nblock_u£d
++;

770 i‡(
s
->
nblock_u£d
 =s->
ßve_nblock
+1) ;

771 i‡(
k1
 !
s
->
k0
) { s->k0 = k1; ; };

773 
s
->
°©e_out_Àn
 = 2;

774 
	`BZ_GET_SMALL
(
k1
); 
BZ_RAND_UPD_MASK
;

775 
k1
 ^
BZ_RAND_MASK
; 
s
->
nblock_u£d
++;

776 i‡(
s
->
nblock_u£d
 =s->
ßve_nblock
+1) ;

777 i‡(
k1
 !
s
->
k0
) { s->k0 = k1; ; };

779 
s
->
°©e_out_Àn
 = 3;

780 
	`BZ_GET_SMALL
(
k1
); 
BZ_RAND_UPD_MASK
;

781 
k1
 ^
BZ_RAND_MASK
; 
s
->
nblock_u£d
++;

782 i‡(
s
->
nblock_u£d
 =s->
ßve_nblock
+1) ;

783 i‡(
k1
 !
s
->
k0
) { s->k0 = k1; ; };

785 
	`BZ_GET_SMALL
(
k1
); 
BZ_RAND_UPD_MASK
;

786 
k1
 ^
BZ_RAND_MASK
; 
s
->
nblock_u£d
++;

787 
s
->
°©e_out_Àn
 = ((
I¡32
)
k1
) + 4;

788 
	`BZ_GET_SMALL
(
s
->
k0
); 
BZ_RAND_UPD_MASK
;

789 
s
->
k0
 ^
BZ_RAND_MASK
; s->
nblock_u£d
++;

794 
True
) {

796 
True
) {

797 i‡(
s
->
°rm
->
avaû_out
 == 0) ;

798 i‡(
s
->
°©e_out_Àn
 == 0) ;

799 *–(
UCh¨
*)(
s
->
°rm
->
√xt_out
ËËs->
°©e_out_ch
;

800 
	`BZ_UPDATE_CRC
 ( 
s
->
ˇlcuœãdBlockCRC
, s->
°©e_out_ch
 );

801 
s
->
°©e_out_Àn
--;

802 
s
->
°rm
->
√xt_out
++;

803 
s
->
°rm
->
avaû_out
--;

804 
s
->
°rm
->
tŸÆ_out_lo32
++;

805 i‡(
s
->
°rm
->
tŸÆ_out_lo32
 =0Ës->°rm->
tŸÆ_out_hi32
++;

809 i‡(
s
->
nblock_u£d
 =s->
ßve_nblock
+1) ;

811 
s
->
°©e_out_Àn
 = 1;

812 
s
->
°©e_out_ch
 = s->
k0
;

813 
	`BZ_GET_SMALL
(
k1
); 
s
->
nblock_u£d
++;

814 i‡(
s
->
nblock_u£d
 =s->
ßve_nblock
+1) ;

815 i‡(
k1
 !
s
->
k0
) { s->k0 = k1; ; };

817 
s
->
°©e_out_Àn
 = 2;

818 
	`BZ_GET_SMALL
(
k1
); 
s
->
nblock_u£d
++;

819 i‡(
s
->
nblock_u£d
 =s->
ßve_nblock
+1) ;

820 i‡(
k1
 !
s
->
k0
) { s->k0 = k1; ; };

822 
s
->
°©e_out_Àn
 = 3;

823 
	`BZ_GET_SMALL
(
k1
); 
s
->
nblock_u£d
++;

824 i‡(
s
->
nblock_u£d
 =s->
ßve_nblock
+1) ;

825 i‡(
k1
 !
s
->
k0
) { s->k0 = k1; ; };

827 
	`BZ_GET_SMALL
(
k1
); 
s
->
nblock_u£d
++;

828 
s
->
°©e_out_Àn
 = ((
I¡32
)
k1
) + 4;

829 
	`BZ_GET_SMALL
(
s
->
k0
); s->
nblock_u£d
++;

833 
	}
}

837 
	$BZ_API
(
BZ2_bzDecom¥ess
Ë–
bz_°ªam
 *
°rm
 )

839 
DSèã
* 
s
;

840 i‡(
°rm
 =
NULL
Ë 
BZ_PARAM_ERROR
;

841 
s
 = 
°rm
->
°©e
;

842 i‡(
s
 =
NULL
Ë 
BZ_PARAM_ERROR
;

843 i‡(
s
->
°rm
 !°rmË 
BZ_PARAM_ERROR
;

845 
True
) {

846 #i‡
	`deföed
(
CONFIG_HW_WATCHDOG
Ë|| deföed(
CONFIG_WATCHDOG
)

847 
	`WATCHDOG_RESET
();

849 i‡(
s
->
°©e
 =
BZ_X_IDLE
Ë 
BZ_SEQUENCE_ERROR
;

850 i‡(
s
->
°©e
 =
BZ_X_OUTPUT
) {

851 i‡(
s
->
smÆlDecom¥ess
)

852 
	`unRLE_obuf_to_ouçut_SMALL
 ( 
s
 ); 

853 
	`unRLE_obuf_to_ouçut_FAST
 ( 
s
 );

854 i‡(
s
->
nblock_u£d
 =s->
ßve_nblock
+1 && s->
°©e_out_Àn
 == 0) {

855 
	`BZ_FINALISE_CRC
 ( 
s
->
ˇlcuœãdBlockCRC
 );

856 i‡(
s
->
vîbosôy
 >= 3)

857 
	`VPrötf2
 ( " {0x%x, 0x%x}", 
s
->
°‹edBlockCRC
,

858 
s
->
ˇlcuœãdBlockCRC
 );

859 i‡(
s
->
vîbosôy
 >2Ë
	`VPrötf0
 ( "]" );

860 i‡(
s
->
ˇlcuœãdBlockCRC
 !s->
°‹edBlockCRC
)

861  
BZ_DATA_ERROR
;

862 
s
->
ˇlcuœãdComböedCRC


863 (
s
->
ˇlcuœãdComböedCRC
 << 1) |

864 (
s
->
ˇlcuœãdComböedCRC
 >> 31);

865 
s
->
ˇlcuœãdComböedCRC
 ^s->
ˇlcuœãdBlockCRC
;

866 
s
->
°©e
 = 
BZ_X_BLKHDR_1
;

868  
BZ_OK
;

871 i‡(
s
->
°©e
 >
BZ_X_MAGIC_1
) {

872 
I¡32
 
r
 = 
	`BZ2_decom¥ess
 ( 
s
 );

873 i‡(
r
 =
BZ_STREAM_END
) {

874 i‡(
s
->
vîbosôy
 >= 3)

875 
	`VPrötf2
 ( "\n combined CRCs: stored = 0x%x, computed = 0x%x",

876 
s
->
°‹edComböedCRC
, s->
ˇlcuœãdComböedCRC
 );

877 i‡(
s
->
ˇlcuœãdComböedCRC
 !s->
°‹edComböedCRC
)

878  
BZ_DATA_ERROR
;

879  
r
;

881 i‡(
s
->
°©e
 !
BZ_X_OUTPUT
Ë 
r
;

885 
	`As£πH
 ( 0, 6001 );

888 
	}
}

892 
	$BZ_API
(
BZ2_bzDecom¥essEnd
Ë–
bz_°ªam
 *
°rm
 )

894 
DSèã
* 
s
;

895 i‡(
°rm
 =
NULL
Ë 
BZ_PARAM_ERROR
;

896 
s
 = 
°rm
->
°©e
;

897 i‡(
s
 =
NULL
Ë 
BZ_PARAM_ERROR
;

898 i‡(
s
->
°rm
 !°rmË 
BZ_PARAM_ERROR
;

900 i‡(
s
->
â
 !
NULL
Ë
	`BZFREE
(s->tt);

901 i‡(
s
->
Œ16
 !
NULL
Ë
	`BZFREE
(s->ll16);

902 i‡(
s
->
Œ4
 !
NULL
Ë
	`BZFREE
(s->ll4);

904 
	`BZFREE
(
°rm
->
°©e
);

905 
°rm
->
°©e
 = 
NULL
;

907  
BZ_OK
;

908 
	}
}

911 #i‚de‡
BZ_NO_STDIO


916 
	#BZ_SETERR
(
ìe
) \

918 i‡(
bzîr‹
 !
NULL
Ë*bzîr‹ = 
ìe
; \

919 i‡(
bzf
 !
NULL
Ëbzf->
œ°Eº
 = 
ìe
; \

920 }

	)

924 
FILE
* 
	mh™dÀ
;

925 
Ch¨
 
	mbuf
[
BZ_MAX_UNUSED
];

926 
I¡32
 
	mbufN
;

927 
Boﬁ
 
	mwrôög
;

928 
bz_°ªam
 
	m°rm
;

929 
I¡32
 
	mœ°Eº
;

930 
Boﬁ
 
	möôüli£dOk
;

932 
	tbzFûe
;

936 
Boﬁ
 
	$my„of
 ( 
FILE
* 
f
 )

938 
I¡32
 
c
 = 
	`fgëc
 ( 
f
 );

939 i‡(
c
 =
EOF
Ë 
True
;

940 
	`ungëc
 ( 
c
, 
f
 );

941  
FÆ£
;

942 
	}
}

946 
BZFILE
* 
	$BZ_API
(
BZ2_bzWrôeO≥n
)

947 –* 
bzîr‹
,

948 
FILE
* 
f
,

949 
blockSize100k
,

950 
vîbosôy
,

951 
w‹kFa˘‹
 )

953 
I¡32
 
ªt
;

954 
bzFûe
* 
bzf
 = 
NULL
;

956 
	`BZ_SETERR
(
BZ_OK
);

958 i‡(
f
 =
NULL
 ||

959 (
blockSize100k
 < 1 || blockSize100k > 9) ||

960 (
w‹kFa˘‹
 < 0 || workFactor > 250) ||

961 (
vîbosôy
 < 0 || verbosity > 4))

962 { 
	`BZ_SETERR
(
BZ_PARAM_ERROR
);  
NULL
; };

964 i‡(
	`„º‹
(
f
))

965 { 
	`BZ_SETERR
(
BZ_IO_ERROR
);  
NULL
; };

967 
bzf
 = 
	`mÆloc
 ( (
bzFûe
) );

968 i‡(
bzf
 =
NULL
)

969 { 
	`BZ_SETERR
(
BZ_MEM_ERROR
);  
NULL
; };

971 
	`BZ_SETERR
(
BZ_OK
);

972 
bzf
->
öôüli£dOk
 = 
FÆ£
;

973 
bzf
->
bufN
 = 0;

974 
bzf
->
h™dÀ
 = 
f
;

975 
bzf
->
wrôög
 = 
True
;

976 
bzf
->
°rm
.
bzÆloc
 = 
NULL
;

977 
bzf
->
°rm
.
bz‰ì
 = 
NULL
;

978 
bzf
->
°rm
.
›aque
 = 
NULL
;

980 i‡(
w‹kFa˘‹
 == 0) workFactor = 30;

981 
ªt
 = 
	`BZ2_bzCom¥essInô
 ( &(
bzf
->
°rm
), 
blockSize100k
,

982 
vîbosôy
, 
w‹kFa˘‹
 );

983 i‡(
ªt
 !
BZ_OK
)

984 { 
	`BZ_SETERR
(
ªt
); 
	`‰ì
(
bzf
);  
NULL
; };

986 
bzf
->
°rm
.
avaû_ö
 = 0;

987 
bzf
->
öôüli£dOk
 = 
True
;

988  
bzf
;

989 
	}
}

993 
	$BZ_API
(
BZ2_bzWrôe
)

994 –* 
bzîr‹
,

995 
BZFILE
* 
b
,

996 * 
buf
,

997 
Àn
 )

999 
I¡32
 
n
, 
n2
, 
ªt
;

1000 
bzFûe
* 
bzf
 = (bzFûe*)
b
;

1002 
	`BZ_SETERR
(
BZ_OK
);

1003 i‡(
bzf
 =
NULL
 || 
buf
 =NULL || 
Àn
 < 0)

1004 { 
	`BZ_SETERR
(
BZ_PARAM_ERROR
); ; };

1005 i‡(!(
bzf
->
wrôög
))

1006 { 
	`BZ_SETERR
(
BZ_SEQUENCE_ERROR
); ; };

1007 i‡(
	`„º‹
(
bzf
->
h™dÀ
))

1008 { 
	`BZ_SETERR
(
BZ_IO_ERROR
); ; };

1010 i‡(
Àn
 == 0)

1011 { 
	`BZ_SETERR
(
BZ_OK
); ; };

1013 
bzf
->
°rm
.
avaû_ö
 = 
Àn
;

1014 
bzf
->
°rm
.
√xt_ö
 = 
buf
;

1016 
True
) {

1017 
bzf
->
°rm
.
avaû_out
 = 
BZ_MAX_UNUSED
;

1018 
bzf
->
°rm
.
√xt_out
 = bzf->
buf
;

1019 
ªt
 = 
	`BZ2_bzCom¥ess
 ( &(
bzf
->
°rm
), 
BZ_RUN
 );

1020 i‡(
ªt
 !
BZ_RUN_OK
)

1021 { 
	`BZ_SETERR
(
ªt
); ; };

1023 i‡(
bzf
->
°rm
.
avaû_out
 < 
BZ_MAX_UNUSED
) {

1024 
n
 = 
BZ_MAX_UNUSED
 - 
bzf
->
°rm
.
avaû_out
;

1025 
n2
 = 
	`fwrôe
 ( (*)(
bzf
->
buf
), (
UCh¨
),

1026 
n
, 
bzf
->
h™dÀ
 );

1027 i‡(
n
 !
n2
 || 
	`„º‹
(
bzf
->
h™dÀ
))

1028 { 
	`BZ_SETERR
(
BZ_IO_ERROR
); ; };

1031 i‡(
bzf
->
°rm
.
avaû_ö
 == 0)

1032 { 
	`BZ_SETERR
(
BZ_OK
); ; };

1034 
	}
}

1038 
	$BZ_API
(
BZ2_bzWrôeClo£
)

1039 –* 
bzîr‹
,

1040 
BZFILE
* 
b
,

1041 
ab™d⁄
,

1042 * 
nbyãs_ö
,

1043 * 
nbyãs_out
 )

1045 
	`BZ2_bzWrôeClo£64
 ( 
bzîr‹
, 
b
, 
ab™d⁄
,

1046 
nbyãs_ö
, 
NULL
, 
nbyãs_out
, NULL );

1047 
	}
}

1050 
	$BZ_API
(
BZ2_bzWrôeClo£64
)

1051 –* 
bzîr‹
,

1052 
BZFILE
* 
b
,

1053 
ab™d⁄
,

1054 * 
nbyãs_ö_lo32
,

1055 * 
nbyãs_ö_hi32
,

1056 * 
nbyãs_out_lo32
,

1057 * 
nbyãs_out_hi32
 )

1059 
I¡32
 
n
, 
n2
, 
ªt
;

1060 
bzFûe
* 
bzf
 = (bzFûe*)
b
;

1062 i‡(
bzf
 =
NULL
)

1063 { 
	`BZ_SETERR
(
BZ_OK
); ; };

1064 i‡(!(
bzf
->
wrôög
))

1065 { 
	`BZ_SETERR
(
BZ_SEQUENCE_ERROR
); ; };

1066 i‡(
	`„º‹
(
bzf
->
h™dÀ
))

1067 { 
	`BZ_SETERR
(
BZ_IO_ERROR
); ; };

1069 i‡(
nbyãs_ö_lo32
 !
NULL
) *nbytes_in_lo32 = 0;

1070 i‡(
nbyãs_ö_hi32
 !
NULL
) *nbytes_in_hi32 = 0;

1071 i‡(
nbyãs_out_lo32
 !
NULL
) *nbytes_out_lo32 = 0;

1072 i‡(
nbyãs_out_hi32
 !
NULL
) *nbytes_out_hi32 = 0;

1074 i‡((!
ab™d⁄
Ë&& 
bzf
->
œ°Eº
 =
BZ_OK
) {

1075 
True
) {

1076 
bzf
->
°rm
.
avaû_out
 = 
BZ_MAX_UNUSED
;

1077 
bzf
->
°rm
.
√xt_out
 = bzf->
buf
;

1078 
ªt
 = 
	`BZ2_bzCom¥ess
 ( &(
bzf
->
°rm
), 
BZ_FINISH
 );

1079 i‡(
ªt
 !
BZ_FINISH_OK
 &&Ñë !
BZ_STREAM_END
)

1080 { 
	`BZ_SETERR
(
ªt
); ; };

1082 i‡(
bzf
->
°rm
.
avaû_out
 < 
BZ_MAX_UNUSED
) {

1083 
n
 = 
BZ_MAX_UNUSED
 - 
bzf
->
°rm
.
avaû_out
;

1084 
n2
 = 
	`fwrôe
 ( (*)(
bzf
->
buf
), (
UCh¨
),

1085 
n
, 
bzf
->
h™dÀ
 );

1086 i‡(
n
 !
n2
 || 
	`„º‹
(
bzf
->
h™dÀ
))

1087 { 
	`BZ_SETERR
(
BZ_IO_ERROR
); ; };

1090 i‡(
ªt
 =
BZ_STREAM_END
) ;

1094 i‡–!
ab™d⁄
 && !
	`„º‹
 ( 
bzf
->
h™dÀ
 ) ) {

1095 
	`fÊush
 ( 
bzf
->
h™dÀ
 );

1096 i‡(
	`„º‹
(
bzf
->
h™dÀ
))

1097 { 
	`BZ_SETERR
(
BZ_IO_ERROR
); ; };

1100 i‡(
nbyãs_ö_lo32
 !
NULL
)

1101 *
nbyãs_ö_lo32
 = 
bzf
->
°rm
.
tŸÆ_ö_lo32
;

1102 i‡(
nbyãs_ö_hi32
 !
NULL
)

1103 *
nbyãs_ö_hi32
 = 
bzf
->
°rm
.
tŸÆ_ö_hi32
;

1104 i‡(
nbyãs_out_lo32
 !
NULL
)

1105 *
nbyãs_out_lo32
 = 
bzf
->
°rm
.
tŸÆ_out_lo32
;

1106 i‡(
nbyãs_out_hi32
 !
NULL
)

1107 *
nbyãs_out_hi32
 = 
bzf
->
°rm
.
tŸÆ_out_hi32
;

1109 
	`BZ_SETERR
(
BZ_OK
);

1110 
	`BZ2_bzCom¥essEnd
 ( &(
bzf
->
°rm
) );

1111 
	`‰ì
 ( 
bzf
 );

1112 
	}
}

1116 
BZFILE
* 
	$BZ_API
(
BZ2_bzRódO≥n
)

1117 –* 
bzîr‹
,

1118 
FILE
* 
f
,

1119 
vîbosôy
,

1120 
smÆl
,

1121 * 
unu£d
,

1122 
nUnu£d
 )

1124 
bzFûe
* 
bzf
 = 
NULL
;

1125 
ªt
;

1127 
	`BZ_SETERR
(
BZ_OK
);

1129 i‡(
f
 =
NULL
 ||

1130 (
smÆl
 != 0 && small != 1) ||

1131 (
vîbosôy
 < 0 || verbosity > 4) ||

1132 (
unu£d
 =
NULL
 && 
nUnu£d
 != 0) ||

1133 (
unu£d
 !
NULL
 && (
nUnu£d
 < 0 ||ÇUnu£d > 
BZ_MAX_UNUSED
)))

1134 { 
	`BZ_SETERR
(
BZ_PARAM_ERROR
);  
NULL
; };

1136 i‡(
	`„º‹
(
f
))

1137 { 
	`BZ_SETERR
(
BZ_IO_ERROR
);  
NULL
; };

1139 
bzf
 = 
	`mÆloc
 ( (
bzFûe
) );

1140 i‡(
bzf
 =
NULL
)

1141 { 
	`BZ_SETERR
(
BZ_MEM_ERROR
);  
NULL
; };

1143 
	`BZ_SETERR
(
BZ_OK
);

1145 
bzf
->
öôüli£dOk
 = 
FÆ£
;

1146 
bzf
->
h™dÀ
 = 
f
;

1147 
bzf
->
bufN
 = 0;

1148 
bzf
->
wrôög
 = 
FÆ£
;

1149 
bzf
->
°rm
.
bzÆloc
 = 
NULL
;

1150 
bzf
->
°rm
.
bz‰ì
 = 
NULL
;

1151 
bzf
->
°rm
.
›aque
 = 
NULL
;

1153 
nUnu£d
 > 0) {

1154 
bzf
->
buf
[bzf->
bufN
] = *((
UCh¨
*)(
unu£d
)); bzf->bufN++;

1155 
unu£d
 = ((*)–1 + ((
UCh¨
*)(unused)) ));

1156 
nUnu£d
--;

1159 
ªt
 = 
	`BZ2_bzDecom¥essInô
 ( &(
bzf
->
°rm
), 
vîbosôy
, 
smÆl
 );

1160 i‡(
ªt
 !
BZ_OK
)

1161 { 
	`BZ_SETERR
(
ªt
); 
	`‰ì
(
bzf
);  
NULL
; };

1163 
bzf
->
°rm
.
avaû_ö
 = bzf->
bufN
;

1164 
bzf
->
°rm
.
√xt_ö
 = bzf->
buf
;

1166 
bzf
->
öôüli£dOk
 = 
True
;

1167  
bzf
;

1168 
	}
}

1172 
	$BZ_API
(
BZ2_bzRódClo£
Ë–*
bzîr‹
, 
BZFILE
 *
b
 )

1174 
bzFûe
* 
bzf
 = (bzFûe*)
b
;

1176 
	`BZ_SETERR
(
BZ_OK
);

1177 i‡(
bzf
 =
NULL
)

1178 { 
	`BZ_SETERR
(
BZ_OK
); ; };

1180 i‡(
bzf
->
wrôög
)

1181 { 
	`BZ_SETERR
(
BZ_SEQUENCE_ERROR
); ; };

1183 i‡(
bzf
->
öôüli£dOk
)

1184 ()
	`BZ2_bzDecom¥essEnd
 ( &(
bzf
->
°rm
) );

1185 
	`‰ì
 ( 
bzf
 );

1186 
	}
}

1190 
	$BZ_API
(
BZ2_bzRód
)

1191 –* 
bzîr‹
,

1192 
BZFILE
* 
b
,

1193 * 
buf
,

1194 
Àn
 )

1196 
I¡32
 
n
, 
ªt
;

1197 
bzFûe
* 
bzf
 = (bzFûe*)
b
;

1199 
	`BZ_SETERR
(
BZ_OK
);

1201 i‡(
bzf
 =
NULL
 || 
buf
 =NULL || 
Àn
 < 0)

1202 { 
	`BZ_SETERR
(
BZ_PARAM_ERROR
);  0; };

1204 i‡(
bzf
->
wrôög
)

1205 { 
	`BZ_SETERR
(
BZ_SEQUENCE_ERROR
);  0; };

1207 i‡(
Àn
 == 0)

1208 { 
	`BZ_SETERR
(
BZ_OK
);  0; };

1210 
bzf
->
°rm
.
avaû_out
 = 
Àn
;

1211 
bzf
->
°rm
.
√xt_out
 = 
buf
;

1213 
True
) {

1215 i‡(
	`„º‹
(
bzf
->
h™dÀ
))

1216 { 
	`BZ_SETERR
(
BZ_IO_ERROR
);  0; };

1218 i‡(
bzf
->
°rm
.
avaû_ö
 =0 && !
	`my„of
(bzf->
h™dÀ
)) {

1219 
n
 = 
	`‰ód
 ( 
bzf
->
buf
, (
UCh¨
),

1220 
BZ_MAX_UNUSED
, 
bzf
->
h™dÀ
 );

1221 i‡(
	`„º‹
(
bzf
->
h™dÀ
))

1222 { 
	`BZ_SETERR
(
BZ_IO_ERROR
);  0; };

1223 
bzf
->
bufN
 = 
n
;

1224 
bzf
->
°rm
.
avaû_ö
 = bzf->
bufN
;

1225 
bzf
->
°rm
.
√xt_ö
 = bzf->
buf
;

1228 
ªt
 = 
	`BZ2_bzDecom¥ess
 ( &(
bzf
->
°rm
) );

1230 i‡(
ªt
 !
BZ_OK
 &&Ñë !
BZ_STREAM_END
)

1231 { 
	`BZ_SETERR
(
ªt
);  0; };

1233 i‡(
ªt
 =
BZ_OK
 && 
	`my„of
(
bzf
->
h™dÀ
) &&

1234 
bzf
->
°rm
.
avaû_ö
 =0 && bzf->°rm.
avaû_out
 > 0)

1235 { 
	`BZ_SETERR
(
BZ_UNEXPECTED_EOF
);  0; };

1237 i‡(
ªt
 =
BZ_STREAM_END
)

1238 { 
	`BZ_SETERR
(
BZ_STREAM_END
);

1239  
Àn
 - 
bzf
->
°rm
.
avaû_out
; };

1240 i‡(
bzf
->
°rm
.
avaû_out
 == 0)

1241 { 
	`BZ_SETERR
(
BZ_OK
);  
Àn
; };

1246 
	}
}

1250 
	$BZ_API
(
BZ2_bzRódGëUnu£d
)

1251 –* 
bzîr‹
,

1252 
BZFILE
* 
b
,

1253 ** 
unu£d
,

1254 * 
nUnu£d
 )

1256 
bzFûe
* 
bzf
 = (bzFûe*)
b
;

1257 i‡(
bzf
 =
NULL
)

1258 { 
	`BZ_SETERR
(
BZ_PARAM_ERROR
); ; };

1259 i‡(
bzf
->
œ°Eº
 !
BZ_STREAM_END
)

1260 { 
	`BZ_SETERR
(
BZ_SEQUENCE_ERROR
); ; };

1261 i‡(
unu£d
 =
NULL
 || 
nUnu£d
 == NULL)

1262 { 
	`BZ_SETERR
(
BZ_PARAM_ERROR
); ; };

1264 
	`BZ_SETERR
(
BZ_OK
);

1265 *
nUnu£d
 = 
bzf
->
°rm
.
avaû_ö
;

1266 *
unu£d
 = 
bzf
->
°rm
.
√xt_ö
;

1267 
	}
}

1274 #i‚de‡
BZ_NO_COMPRESS


1276 
	$BZ_API
(
BZ2_bzBuffToBuffCom¥ess
)

1277 –* 
de°
,

1278 * 
de°Lí
,

1279 * 
sour˚
,

1280 
sour˚Lí
,

1281 
blockSize100k
,

1282 
vîbosôy
,

1283 
w‹kFa˘‹
 )

1285 
bz_°ªam
 
°rm
;

1286 
ªt
;

1288 i‡(
de°
 =
NULL
 || 
de°Lí
 == NULL ||

1289 
sour˚
 =
NULL
 ||

1290 
blockSize100k
 < 1 || blockSize100k > 9 ||

1291 
vîbosôy
 < 0 || verbosity > 4 ||

1292 
w‹kFa˘‹
 < 0 || workFactor > 250)

1293  
BZ_PARAM_ERROR
;

1295 i‡(
w‹kFa˘‹
 == 0) workFactor = 30;

1296 
°rm
.
bzÆloc
 = 
NULL
;

1297 
°rm
.
bz‰ì
 = 
NULL
;

1298 
°rm
.
›aque
 = 
NULL
;

1299 
ªt
 = 
	`BZ2_bzCom¥essInô
 ( &
°rm
, 
blockSize100k
,

1300 
vîbosôy
, 
w‹kFa˘‹
 );

1301 i‡(
ªt
 !
BZ_OK
) Ñet;

1303 
°rm
.
√xt_ö
 = 
sour˚
;

1304 
°rm
.
√xt_out
 = 
de°
;

1305 
°rm
.
avaû_ö
 = 
sour˚Lí
;

1306 
°rm
.
avaû_out
 = *
de°Lí
;

1308 
ªt
 = 
	`BZ2_bzCom¥ess
 ( &
°rm
, 
BZ_FINISH
 );

1309 i‡(
ªt
 =
BZ_FINISH_OK
Ë
ouçut_ovîÊow
;

1310 i‡(
ªt
 !
BZ_STREAM_END
Ë
îrh™dÀr
;

1313 *
de°Lí
 -
°rm
.
avaû_out
;

1314 
	`BZ2_bzCom¥essEnd
 ( &
°rm
 );

1315  
BZ_OK
;

1317 
ouçut_ovîÊow
:

1318 
	`BZ2_bzCom¥essEnd
 ( &
°rm
 );

1319  
BZ_OUTBUFF_FULL
;

1321 
îrh™dÀr
:

1322 
	`BZ2_bzCom¥essEnd
 ( &
°rm
 );

1323  
ªt
;

1324 
	}
}

1328 
	$BZ_API
(
BZ2_bzBuffToBuffDecom¥ess
)

1329 –* 
de°
,

1330 * 
de°Lí
,

1331 * 
sour˚
,

1332 
sour˚Lí
,

1333 
smÆl
,

1334 
vîbosôy
 )

1336 
bz_°ªam
 
°rm
;

1337 
ªt
;

1339 i‡(
de°Lí
 =
NULL
 || 
sour˚
 == NULL)

1340  
BZ_PARAM_ERROR
;

1342 
°rm
.
bzÆloc
 = 
NULL
;

1343 
°rm
.
bz‰ì
 = 
NULL
;

1344 
°rm
.
›aque
 = 
NULL
;

1345 
ªt
 = 
	`BZ2_bzDecom¥essInô
 ( &
°rm
, 
vîbosôy
, 
smÆl
 );

1346 i‡(
ªt
 !
BZ_OK
) Ñet;

1348 
°rm
.
√xt_ö
 = 
sour˚
;

1349 
°rm
.
√xt_out
 = 
de°
;

1350 
°rm
.
avaû_ö
 = 
sour˚Lí
;

1351 
°rm
.
avaû_out
 = *
de°Lí
;

1353 
ªt
 = 
	`BZ2_bzDecom¥ess
 ( &
°rm
 );

1354 i‡(
ªt
 =
BZ_OK
Ë
ouçut_ovîÊow_‹_eof
;

1355 i‡(
ªt
 !
BZ_STREAM_END
Ë
îrh™dÀr
;

1358 *
de°Lí
 -
°rm
.
avaû_out
;

1359 
	`BZ2_bzDecom¥essEnd
 ( &
°rm
 );

1360  
BZ_OK
;

1362 
ouçut_ovîÊow_‹_eof
:

1363 i‡(
°rm
.
avaû_out
 > 0) {

1364 
	`BZ2_bzDecom¥essEnd
 ( &
°rm
 );

1365  
BZ_UNEXPECTED_EOF
;

1367 
	`BZ2_bzDecom¥essEnd
 ( &
°rm
 );

1368  
BZ_OUTBUFF_FULL
;

1371 
îrh™dÀr
:

1372 
	`BZ2_bzDecom¥essEnd
 ( &
°rm
 );

1373  
ªt
;

1374 
	}
}

1393 c⁄° * 
	$BZ_API
(
BZ2_bzlibVîsi⁄
)()

1395  
BZ_VERSION
;

1396 
	}
}

1399 #i‚de‡
BZ_NO_STDIO


1402 #i‡
deföed
(
_WIN32
Ë|| deföed(
OS2
Ë|| deföed(
MSDOS
)

1403 
	~<f˙é.h
>

1404 
	~<io.h
>

1405 
	#SET_BINARY_MODE
(
fûe
Ë
	`£tmode
(
	`fûío
(fûe),
O_BINARY
)

	)

1407 
	#SET_BINARY_MODE
(
fûe
)

	)

1410 
BZFILE
 * 
	gbz›í_‹_bzd›í


1411 –c⁄° *
	g∑th
,

1412 
	gfd
,

1413 c⁄° *
	gmode
,

1414 
	g›í_mode
)

1416 
	gbzîr
;

1417 
	gunu£d
[
BZ_MAX_UNUSED
];

1418 
	gblockSize100k
 = 9;

1419 
	gwrôög
 = 0;

1420 
	gmode2
[10] = "";

1421 
FILE
 *
	gÂ
 = 
NULL
;

1422 
BZFILE
 *
	gbzÂ
 = 
NULL
;

1423 
	gvîbosôy
 = 0;

1424 
	gw‹kFa˘‹
 = 30;

1425 
	gsmÆlMode
 = 0;

1426 
	gnUnu£d
 = 0;

1428 i‡(
	gmode
 =
NULL
)  NULL;

1429 *
	gmode
) {

1430 *
	gmode
) {

1432 
wrôög
 = 0; ;

1434 
wrôög
 = 1; ;

1436 
smÆlMode
 = 1; ;

1438 i‡(
isdigô
(()(*
mode
))) {

1439 
blockSize100k
 = *
mode
-
BZ_HDR_0
;

1442 
	gmode
++;

1444 
°rˇt
(
mode2
, 
wrôög
 ? "w" : "r" );

1445 
°rˇt
(
mode2
,"b");

1447 i‡(
	g›í_mode
==0) {

1448 i‡(
∑th
==
NULL
 || 
°rcmp
(path,"")==0) {

1449 
Â
 = (
wrôög
 ? 
°dout
 : 
°dö
);

1450 
SET_BINARY_MODE
(
Â
);

1452 
	gÂ
 = 
f›í
(
∑th
,
mode2
);

1455 #ifde‡
BZ_STRICT_ANSI


1456 
	gÂ
 = 
NULL
;

1458 
	gÂ
 = 
fd›í
(
fd
,
mode2
);

1461 i‡(
	gÂ
 =
NULL
)  NULL;

1463 i‡(
	gwrôög
) {

1465 i‡(
	gblockSize100k
 < 1) blockSize100k = 1;

1466 i‡(
	gblockSize100k
 > 9) blockSize100k = 9;

1467 
	gbzÂ
 = 
BZ2_bzWrôeO≥n
(&
bzîr
,
Â
,
blockSize100k
,

1468 
vîbosôy
,
w‹kFa˘‹
);

1470 
	gbzÂ
 = 
BZ2_bzRódO≥n
(&
bzîr
,
Â
,
vîbosôy
,
smÆlMode
,

1471 
unu£d
,
nUnu£d
);

1473 i‡(
	gbzÂ
 =
NULL
) {

1474 i‡(
Â
 !
°dö
 && f∞!
°dout
Ë
f˛o£
(fp);

1475  
	gNULL
;

1477  
	gbzÂ
;

1487 
BZFILE
 * 
	$BZ_API
(
BZ2_bz›í
)

1488 –c⁄° *
∑th
,

1489 c⁄° *
mode
 )

1491  
	`bz›í_‹_bzd›í
(
∑th
,-1,
mode
, 0);

1492 
	}
}

1496 
BZFILE
 * 
	$BZ_API
(
BZ2_bzd›í
)

1497 –
fd
,

1498 c⁄° *
mode
 )

1500  
	`bz›í_‹_bzd›í
(
NULL
,
fd
,
mode
, 1);

1501 
	}
}

1505 
	$BZ_API
(
BZ2_bzªad
Ë(
BZFILE
* 
b
, * 
buf
, 
Àn
 )

1507 
bzîr
, 
ƒód
;

1508 i‡(((
bzFûe
*)
b
)->
œ°Eº
 =
BZ_STREAM_END
)  0;

1509 
ƒód
 = 
	`BZ2_bzRód
(&
bzîr
,
b
,
buf
,
Àn
);

1510 i‡(
bzîr
 =
BZ_OK
 || bzî∏=
BZ_STREAM_END
) {

1511  
ƒód
;

1515 
	}
}

1519 
	$BZ_API
(
BZ2_bzwrôe
Ë(
BZFILE
* 
b
, * 
buf
, 
Àn
 )

1521 
bzîr
;

1523 
	`BZ2_bzWrôe
(&
bzîr
,
b
,
buf
,
Àn
);

1524 if(
bzîr
 =
BZ_OK
){

1525  
Àn
;

1529 
	}
}

1533 
	$BZ_API
(
BZ2_bzÊush
Ë(
BZFILE
 *
b
)

1537 
	}
}

1541 
	$BZ_API
(
BZ2_bz˛o£
Ë(
BZFILE
* 
b
)

1543 
bzîr
;

1544 
FILE
 *
Â
 = ((
bzFûe
 *)
b
)->
h™dÀ
;

1546 i‡(
b
==
NULL
) {;}

1547 if(((
bzFûe
*)
b
)->
wrôög
){

1548 
	`BZ2_bzWrôeClo£
(&
bzîr
,
b
,0,
NULL
,NULL);

1549 if(
bzîr
 !
BZ_OK
){

1550 
	`BZ2_bzWrôeClo£
(
NULL
,
b
,1,NULL,NULL);

1553 
	`BZ2_bzRódClo£
(&
bzîr
,
b
);

1555 if(
Â
!=
°dö
 && fp!=
°dout
){

1556 
	`f˛o£
(
Â
);

1558 
	}
}

1565 *
	gbzîr‹°rögs
[] = {

1585 c⁄° * 
	$BZ_API
(
BZ2_bzîr‹
Ë(
BZFILE
 *
b
, *
î∫um
)

1587 
îr
 = ((
bzFûe
 *)
b
)->
œ°Eº
;

1589 if(
îr
>0)Érr = 0;

1590 *
î∫um
 = 
îr
;

1591  
bzîr‹°rögs
[
îr
*-1];

1592 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/bzlib_crctable.c

1 
	~<c⁄fig.h
>

2 #ifde‡
CONFIG_BZIP2


64 
	~"bzlib_¥iv©e.h
"

73 
UI¡32
 
	gBZ2_¸c32TabÀ
[256] = {

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/bzlib_decompress.c

1 
	~<c⁄fig.h
>

2 
	~<comm⁄.h
>

3 
	~<w©chdog.h
>

4 #ifde‡
CONFIG_BZIP2


66 
	~"bzlib_¥iv©e.h
"

71 
	$makeM≠s_d
 ( 
DSèã
* 
s
 )

73 
I¡32
 
i
;

74 
s
->
nInU£
 = 0;

75 
i
 = 0; i < 256; i++)

76 i‡(
s
->
öU£
[
i
]) {

77 
s
->
£qToUn£q
[s->
nInU£
] = 
i
;

78 
s
->
nInU£
++;

80 
	}
}

84 
	#RETURN
(
ºr
) \

85 { 
ªtVÆ
 = 
ºr
; 
ßve_°©e_™d_ªtu∫
; };

	)

87 
	#GET_BITS
(
Œl
,
vvv
,
¬n
) \

88 
Œl
: 
s
->
°©e
 =Üll; \

89 
True
) { \

90 i‡(
s
->
bsLive
 >
¬n
) { \

91 
UI¡32
 
v
; \

92 
v
 = (
s
->
bsBuff
 >> \

93 (
s
->
bsLive
-
¬n
)) & ((1 <<Çnn)-1); \

94 
s
->
bsLive
 -
¬n
; \

95 
vvv
 = 
v
; \

98 i‡(
s
->
°rm
->
avaû_ö
 =0Ë
	`RETURN
(
BZ_OK
); \

99 
s
->
bsBuff
 \

100 (
s
->
bsBuff
 << 8) | \

101 ((
UI¡32
) \

102 (*((
UCh¨
*)(
s
->
°rm
->
√xt_ö
)))); \

103 
s
->
bsLive
 += 8; \

104 
s
->
°rm
->
√xt_ö
++; \

105 
s
->
°rm
->
avaû_ö
--; \

106 
s
->
°rm
->
tŸÆ_ö_lo32
++; \

107 i‡(
s
->
°rm
->
tŸÆ_ö_lo32
 == 0) \

108 
s
->
°rm
->
tŸÆ_ö_hi32
++; \

109 }

	)

111 
	#GET_UCHAR
(
Œl
,
uuu
) \

112 
	`GET_BITS
(
Œl
,
uuu
,8)

	)

114 
	#GET_BIT
(
Œl
,
uuu
) \

115 
	`GET_BITS
(
Œl
,
uuu
,1)

	)

118 
	#GET_MTF_VAL
(
œbñ1
,
œbñ2
,
lvÆ
) \

120 i‡(
groupPos
 == 0) { \

121 
groupNo
++; \

122 i‡(
groupNo
 >
nSñe˘‹s
) \

123 
	`RETURN
(
BZ_DATA_ERROR
); \

124 
groupPos
 = 
BZ_G_SIZE
; \

125 
gSñ
 = 
s
->
£À˘‹
[
groupNo
]; \

126 
gMöÀn
 = 
s
->
möLís
[
gSñ
]; \

127 
gLimô
 = &(
s
->
limô
[
gSñ
][0]); \

128 
gPîm
 = &(
s
->
≥rm
[
gSñ
][0]); \

129 
gBa£
 = &(
s
->
ba£
[
gSñ
][0]); \

131 
groupPos
--; \

132 
zn
 = 
gMöÀn
; \

133 
	`GET_BITS
(
œbñ1
, 
zvec
, 
zn
); \

135 i‡(
zn
 > 20 ) \

136 
	`RETURN
(
BZ_DATA_ERROR
); \

137 i‡(
zvec
 <
gLimô
[
zn
]) ; \

138 
zn
++; \

139 
	`GET_BIT
(
œbñ2
, 
zj
); \

140 
zvec
 = (zve¯<< 1Ë| 
zj
; \

142 i‡(
zvec
 - 
gBa£
[
zn
] < 0 \

143 || 
zvec
 - 
gBa£
[
zn
] >
BZ_MAX_ALPHA_SIZE
) \

144 
	`RETURN
(
BZ_DATA_ERROR
); \

145 
lvÆ
 = 
gPîm
[
zvec
 - 
gBa£
[
zn
]]; \

146 }

	)

150 
I¡32
 
	$BZ2_decom¥ess
 ( 
DSèã
* 
s
 )

152 
UCh¨
 
uc
;

153 
I¡32
 
ªtVÆ
;

154 
I¡32
 
möLí
, 
maxLí
;

155 
bz_°ªam
* 
°rm
 = 
s
->strm;

158 
I¡32
 
i
;

159 
I¡32
 
j
;

160 
I¡32
 
t
;

161 
I¡32
 
ÆphaSize
;

162 
I¡32
 
nGroups
;

163 
I¡32
 
nSñe˘‹s
;

164 
I¡32
 
EOB
;

165 
I¡32
 
groupNo
;

166 
I¡32
 
groupPos
;

167 
I¡32
 
√xtSym
;

168 
I¡32
 
nblockMAX
;

169 
I¡32
 
nblock
;

170 
I¡32
 
es
;

171 
I¡32
 
N
;

172 
I¡32
 
cuº
;

173 
I¡32
 
zt
;

174 
I¡32
 
zn
;

175 
I¡32
 
zvec
;

176 
I¡32
 
zj
;

177 
I¡32
 
gSñ
;

178 
I¡32
 
gMöÀn
;

179 
I¡32
* 
gLimô
;

180 
I¡32
* 
gBa£
;

181 
I¡32
* 
gPîm
;

183 i‡(
s
->
°©e
 =
BZ_X_MAGIC_1
) {

185 
s
->
ßve_i
 = 0;

186 
s
->
ßve_j
 = 0;

187 
s
->
ßve_t
 = 0;

188 
s
->
ßve_ÆphaSize
 = 0;

189 
s
->
ßve_nGroups
 = 0;

190 
s
->
ßve_nSñe˘‹s
 = 0;

191 
s
->
ßve_EOB
 = 0;

192 
s
->
ßve_groupNo
 = 0;

193 
s
->
ßve_groupPos
 = 0;

194 
s
->
ßve_√xtSym
 = 0;

195 
s
->
ßve_nblockMAX
 = 0;

196 
s
->
ßve_nblock
 = 0;

197 
s
->
ßve_es
 = 0;

198 
s
->
ßve_N
 = 0;

199 
s
->
ßve_cuº
 = 0;

200 
s
->
ßve_zt
 = 0;

201 
s
->
ßve_zn
 = 0;

202 
s
->
ßve_zvec
 = 0;

203 
s
->
ßve_zj
 = 0;

204 
s
->
ßve_gSñ
 = 0;

205 
s
->
ßve_gMöÀn
 = 0;

206 
s
->
ßve_gLimô
 = 
NULL
;

207 
s
->
ßve_gBa£
 = 
NULL
;

208 
s
->
ßve_gPîm
 = 
NULL
;

212 
i
 = 
s
->
ßve_i
;

213 
j
 = 
s
->
ßve_j
;

214 
t
 = 
s
->
ßve_t
;

215 
ÆphaSize
 = 
s
->
ßve_ÆphaSize
;

216 
nGroups
 = 
s
->
ßve_nGroups
;

217 
nSñe˘‹s
 = 
s
->
ßve_nSñe˘‹s
;

218 
EOB
 = 
s
->
ßve_EOB
;

219 
groupNo
 = 
s
->
ßve_groupNo
;

220 
groupPos
 = 
s
->
ßve_groupPos
;

221 
√xtSym
 = 
s
->
ßve_√xtSym
;

222 
nblockMAX
 = 
s
->
ßve_nblockMAX
;

223 
nblock
 = 
s
->
ßve_nblock
;

224 
es
 = 
s
->
ßve_es
;

225 
N
 = 
s
->
ßve_N
;

226 
cuº
 = 
s
->
ßve_cuº
;

227 
zt
 = 
s
->
ßve_zt
;

228 
zn
 = 
s
->
ßve_zn
;

229 
zvec
 = 
s
->
ßve_zvec
;

230 
zj
 = 
s
->
ßve_zj
;

231 
gSñ
 = 
s
->
ßve_gSñ
;

232 
gMöÀn
 = 
s
->
ßve_gMöÀn
;

233 
gLimô
 = 
s
->
ßve_gLimô
;

234 
gBa£
 = 
s
->
ßve_gBa£
;

235 
gPîm
 = 
s
->
ßve_gPîm
;

237 
ªtVÆ
 = 
BZ_OK
;

239 
s
->
°©e
) {

241 
	`GET_UCHAR
(
BZ_X_MAGIC_1
, 
uc
);

242 i‡(
uc
 !
BZ_HDR_B
Ë
	`RETURN
(
BZ_DATA_ERROR_MAGIC
);

244 
	`GET_UCHAR
(
BZ_X_MAGIC_2
, 
uc
);

245 i‡(
uc
 !
BZ_HDR_Z
Ë
	`RETURN
(
BZ_DATA_ERROR_MAGIC
);

247 
	`GET_UCHAR
(
BZ_X_MAGIC_3
, 
uc
)

248 i‡(
uc
 !
BZ_HDR_h
Ë
	`RETURN
(
BZ_DATA_ERROR_MAGIC
);

250 
	`GET_BITS
(
BZ_X_MAGIC_4
, 
s
->
blockSize100k
, 8)

251 i‡(
s
->
blockSize100k
 < (
BZ_HDR_0
 + 1) ||

252 
s
->
blockSize100k
 > (
BZ_HDR_0
 + 9)Ë
	`RETURN
(
BZ_DATA_ERROR_MAGIC
);

253 
s
->
blockSize100k
 -
BZ_HDR_0
;

255 i‡(
s
->
smÆlDecom¥ess
) {

256 
s
->
Œ16
 = 
	`BZALLOC
–s->
blockSize100k
 * 100000 * (
UI¡16
) );

257 
s
->
Œ4
 = 
	`BZALLOC
(

258 ((1 + 
s
->
blockSize100k
 * 100000Ë>> 1Ë* (
UCh¨
)

260 i‡(
s
->
Œ16
 =
NULL
 || s->
Œ4
 =NULLË
	`RETURN
(
BZ_MEM_ERROR
);

262 
s
->
â
 = 
	`BZALLOC
–s->
blockSize100k
 * 100000 * (
I¡32
) );

263 i‡(
s
->
â
 =
NULL
Ë
	`RETURN
(
BZ_MEM_ERROR
);

266 
	`GET_UCHAR
(
BZ_X_BLKHDR_1
, 
uc
);

268 i‡(
uc
 =0x17Ë
ídhdr_2
;

269 i‡(
uc
 !0x31Ë
	`RETURN
(
BZ_DATA_ERROR
);

270 
	`GET_UCHAR
(
BZ_X_BLKHDR_2
, 
uc
);

271 i‡(
uc
 !0x41Ë
	`RETURN
(
BZ_DATA_ERROR
);

272 
	`GET_UCHAR
(
BZ_X_BLKHDR_3
, 
uc
);

273 i‡(
uc
 !0x59Ë
	`RETURN
(
BZ_DATA_ERROR
);

274 
	`GET_UCHAR
(
BZ_X_BLKHDR_4
, 
uc
);

275 i‡(
uc
 !0x26Ë
	`RETURN
(
BZ_DATA_ERROR
);

276 
	`GET_UCHAR
(
BZ_X_BLKHDR_5
, 
uc
);

277 i‡(
uc
 !0x53Ë
	`RETURN
(
BZ_DATA_ERROR
);

278 
	`GET_UCHAR
(
BZ_X_BLKHDR_6
, 
uc
);

279 i‡(
uc
 !0x59Ë
	`RETURN
(
BZ_DATA_ERROR
);

281 
s
->
cuºBlockNo
++;

282 i‡(
s
->
vîbosôy
 >= 2)

283 
	`VPrötf1
 ( "\¿ [%d: huff+mt‡", 
s
->
cuºBlockNo
 );

285 
s
->
°‹edBlockCRC
 = 0;

286 
	`GET_UCHAR
(
BZ_X_BCRC_1
, 
uc
);

287 
s
->
°‹edBlockCRC
 = (s->°‹edBlockCRC << 8Ë| ((
UI¡32
)
uc
);

288 
	`GET_UCHAR
(
BZ_X_BCRC_2
, 
uc
);

289 
s
->
°‹edBlockCRC
 = (s->°‹edBlockCRC << 8Ë| ((
UI¡32
)
uc
);

290 
	`GET_UCHAR
(
BZ_X_BCRC_3
, 
uc
);

291 
s
->
°‹edBlockCRC
 = (s->°‹edBlockCRC << 8Ë| ((
UI¡32
)
uc
);

292 
	`GET_UCHAR
(
BZ_X_BCRC_4
, 
uc
);

293 
s
->
°‹edBlockCRC
 = (s->°‹edBlockCRC << 8Ë| ((
UI¡32
)
uc
);

295 
	`GET_BITS
(
BZ_X_RANDBIT
, 
s
->
blockR™domi£d
, 1);

297 
s
->
‹igPå
 = 0;

298 
	`GET_UCHAR
(
BZ_X_ORIGPTR_1
, 
uc
);

299 
s
->
‹igPå
 = (s->‹igPå << 8Ë| ((
I¡32
)
uc
);

300 
	`GET_UCHAR
(
BZ_X_ORIGPTR_2
, 
uc
);

301 
s
->
‹igPå
 = (s->‹igPå << 8Ë| ((
I¡32
)
uc
);

302 
	`GET_UCHAR
(
BZ_X_ORIGPTR_3
, 
uc
);

303 
s
->
‹igPå
 = (s->‹igPå << 8Ë| ((
I¡32
)
uc
);

305 i‡(
s
->
‹igPå
 < 0)

306 
	`RETURN
(
BZ_DATA_ERROR
);

307 i‡(
s
->
‹igPå
 > 10 + 100000*s->
blockSize100k
)

308 
	`RETURN
(
BZ_DATA_ERROR
);

311 
i
 = 0; i < 16; i++) {

312 
	`GET_BIT
(
BZ_X_MAPPING_1
, 
uc
);

313 i‡(
uc
 == 1)

314 
s
->
öU£16
[
i
] = 
True
; 

315 
s
->
öU£16
[
i
] = 
FÆ£
;

318 
i
 = 0; i < 256; i++Ë
s
->
öU£
[i] = 
FÆ£
;

320 
i
 = 0; i < 16; i++)

321 i‡(
s
->
öU£16
[
i
])

322 
j
 = 0; j < 16; j++) {

323 
	`GET_BIT
(
BZ_X_MAPPING_2
, 
uc
);

324 i‡(
uc
 =1Ë
s
->
öU£
[
i
 * 16 + 
j
] = 
True
;

326 
	`makeM≠s_d
 ( 
s
 );

327 i‡(
s
->
nInU£
 =0Ë
	`RETURN
(
BZ_DATA_ERROR
);

328 
ÆphaSize
 = 
s
->
nInU£
+2;

331 
	`GET_BITS
(
BZ_X_SELECTOR_1
, 
nGroups
, 3);

332 i‡(
nGroups
 < 2 ||ÇGroup†> 6Ë
	`RETURN
(
BZ_DATA_ERROR
);

333 
	`GET_BITS
(
BZ_X_SELECTOR_2
, 
nSñe˘‹s
, 15);

334 i‡(
nSñe˘‹s
 < 1Ë
	`RETURN
(
BZ_DATA_ERROR
);

335 
i
 = 0; i < 
nSñe˘‹s
; i++) {

336 
j
 = 0;

337 
True
) {

338 
	`GET_BIT
(
BZ_X_SELECTOR_3
, 
uc
);

339 i‡(
uc
 == 0) ;

340 
j
++;

341 i‡(
j
 >
nGroups
Ë
	`RETURN
(
BZ_DATA_ERROR
);

343 
s
->
£À˘‹Mtf
[
i
] = 
j
;

348 
UCh¨
 
pos
[
BZ_N_GROUPS
], 
tmp
, 
v
;

349 
v
 = 0; v < 
nGroups
; v++Ë
pos
[v] = v;

351 
i
 = 0; i < 
nSñe˘‹s
; i++) {

352 
v
 = 
s
->
£À˘‹Mtf
[
i
];

353 
tmp
 = 
pos
[
v
];

354 
v
 > 0Ë{ 
pos
[v] =Öos[v-1]; v--; }

355 
pos
[0] = 
tmp
;

356 
s
->
£À˘‹
[
i
] = 
tmp
;

361 
t
 = 0;Å < 
nGroups
;Å++) {

362 
	`GET_BITS
(
BZ_X_CODING_1
, 
cuº
, 5);

363 
i
 = 0; i < 
ÆphaSize
; i++) {

364 
True
) {

365 i‡(
cuº
 < 1 || cuº > 20Ë
	`RETURN
(
BZ_DATA_ERROR
);

366 
	`GET_BIT
(
BZ_X_CODING_2
, 
uc
);

367 i‡(
uc
 == 0) ;

368 
	`GET_BIT
(
BZ_X_CODING_3
, 
uc
);

369 i‡(
uc
 =0Ë
cuº
++; curr--;

371 
s
->
Àn
[
t
][
i
] = 
cuº
;

376 
t
 = 0;Å < 
nGroups
;Å++) {

377 
möLí
 = 32;

378 
maxLí
 = 0;

379 
i
 = 0; i < 
ÆphaSize
; i++) {

380 i‡(
s
->
Àn
[
t
][
i
] > 
maxLí
) maxLen = s->len[t][i];

381 i‡(
s
->
Àn
[
t
][
i
] < 
möLí
) minLen = s->len[t][i];

383 
	`BZ2_hbCª©eDecodeTabÀs
 (

384 &(
s
->
limô
[
t
][0]),

385 &(
s
->
ba£
[
t
][0]),

386 &(
s
->
≥rm
[
t
][0]),

387 &(
s
->
Àn
[
t
][0]),

388 
möLí
, 
maxLí
, 
ÆphaSize


390 
s
->
möLís
[
t
] = 
möLí
;

395 
EOB
 = 
s
->
nInU£
+1;

396 
nblockMAX
 = 100000 * 
s
->
blockSize100k
;

397 
groupNo
 = -1;

398 
groupPos
 = 0;

400 
i
 = 0; i <255; i++Ë
s
->
unz·ab
[i] = 0;

404 
I¡32
 
ii
, 
jj
, 
kk
;

405 
kk
 = 
MTFA_SIZE
-1;

406 
ii
 = 256 / 
MTFL_SIZE
 - 1; ii >= 0; ii--) {

407 
jj
 = 
MTFL_SIZE
-1; jj >= 0; jj--) {

408 
s
->
mtÁ
[
kk
] = (
UCh¨
)(
ii
 * 
MTFL_SIZE
 + 
jj
);

409 
kk
--;

411 
s
->
mtfba£
[
ii
] = 
kk
 + 1;

416 
nblock
 = 0;

417 
	`GET_MTF_VAL
(
BZ_X_MTF_1
, 
BZ_X_MTF_2
, 
√xtSym
);

419 
True
) {

421 #i‡
	`deföed
(
CONFIG_HW_WATCHDOG
Ë|| deföed(
CONFIG_WATCHDOG
)

422 
	`WATCHDOG_RESET
();

424 i‡(
√xtSym
 =
EOB
) ;

426 i‡(
√xtSym
 =
BZ_RUNA
 ||ÇextSym =
BZ_RUNB
) {

428 
es
 = -1;

429 
N
 = 1;

431 i‡(
√xtSym
 =
BZ_RUNA
Ë
es
 =É†+ (0+1Ë* 
N
; 

432 i‡(
√xtSym
 =
BZ_RUNB
Ë
es
 =É†+ (1+1Ë* 
N
;

433 
N
 = N * 2;

434 
	`GET_MTF_VAL
(
BZ_X_MTF_3
, 
BZ_X_MTF_4
, 
√xtSym
);

436 
√xtSym
 =
BZ_RUNA
 ||ÇextSym =
BZ_RUNB
);

438 
es
++;

439 
uc
 = 
s
->
£qToUn£q
[ s->
mtÁ
[s->
mtfba£
[0]] ];

440 
s
->
unz·ab
[
uc
] +
es
;

442 i‡(
s
->
smÆlDecom¥ess
)

443 
es
 > 0) {

444 i‡(
nblock
 >
nblockMAX
Ë
	`RETURN
(
BZ_DATA_ERROR
);

445 
s
->
Œ16
[
nblock
] = (
UI¡16
)
uc
;

446 
nblock
++;

447 
es
--;

450 
es
 > 0) {

451 i‡(
nblock
 >
nblockMAX
Ë
	`RETURN
(
BZ_DATA_ERROR
);

452 
s
->
â
[
nblock
] = (
UI¡32
)
uc
;

453 
nblock
++;

454 
es
--;

461 i‡(
nblock
 >
nblockMAX
Ë
	`RETURN
(
BZ_DATA_ERROR
);

465 
I¡32
 
ii
, 
jj
, 
kk
, 
µ
, 
 o
, 
off
;

466 
UI¡32
 
¬
;

467 
¬
 = (
UI¡32
)(
√xtSym
 - 1);

469 i‡(
¬
 < 
MTFL_SIZE
) {

471 
µ
 = 
s
->
mtfba£
[0];

472 
uc
 = 
s
->
mtÁ
[
µ
+
¬
];

473 
¬
 > 3) {

474 
I¡32
 
z
 = 
µ
+
¬
;

475 
s
->
mtÁ
[(
z
) ] = s->mtfa[(z)-1];

476 
s
->
mtÁ
[(
z
)-1] = s->mtfa[(z)-2];

477 
s
->
mtÁ
[(
z
)-2] = s->mtfa[(z)-3];

478 
s
->
mtÁ
[(
z
)-3] = s->mtfa[(z)-4];

479 
¬
 -= 4;

481 
¬
 > 0) {

482 
s
->
mtÁ
[(
µ
+
¬
)] = s->mtfa[(pp+nn)-1];Çn--;

484 
s
->
mtÁ
[
µ
] = 
uc
;

487 
 o
 = 
¬
 / 
MTFL_SIZE
;

488 
off
 = 
¬
 % 
MTFL_SIZE
;

489 
µ
 = 
s
->
mtfba£
[
 o
] + 
off
;

490 
uc
 = 
s
->
mtÁ
[
µ
];

491 
µ
 > 
s
->
mtfba£
[
 o
]) {

492 
s
->
mtÁ
[
µ
] = s->mtfa[pp-1];Öp--;

494 
s
->
mtfba£
[
 o
]++;

495 
 o
 > 0) {

496 
s
->
mtfba£
[
 o
]--;

497 
s
->
mtÁ
[s->
mtfba£
[
 o
]]

498 
s
->
mtÁ
[s->
mtfba£
[
 o
-1] + 
MTFL_SIZE
 - 1];

499 
 o
--;

501 
s
->
mtfba£
[0]--;

502 
s
->
mtÁ
[s->
mtfba£
[0]] = 
uc
;

503 i‡(
s
->
mtfba£
[0] == 0) {

504 
kk
 = 
MTFA_SIZE
-1;

505 
ii
 = 256 / 
MTFL_SIZE
-1; ii >= 0; ii--) {

506 #i‡
	`deföed
(
CONFIG_HW_WATCHDOG
Ë|| deföed(
CONFIG_WATCHDOG
)

507 
	`WATCHDOG_RESET
();

509 
jj
 = 
MTFL_SIZE
-1; jj >= 0; jj--) {

510 
s
->
mtÁ
[
kk
] = s->mtÁ[s->
mtfba£
[
ii
] + 
jj
];

511 
kk
--;

513 
s
->
mtfba£
[
ii
] = 
kk
 + 1;

520 
s
->
unz·ab
[s->
£qToUn£q
[
uc
]]++;

521 i‡(
s
->
smÆlDecom¥ess
)

522 
s
->
Œ16
[
nblock
] = (
UI¡16
)(s->
£qToUn£q
[
uc
]); 

523 
s
->
â
[
nblock
] = (
UI¡32
)(s->
£qToUn£q
[
uc
]);

524 
nblock
++;

526 
	`GET_MTF_VAL
(
BZ_X_MTF_5
, 
BZ_X_MTF_6
, 
√xtSym
);

534 i‡(
s
->
‹igPå
 < 0 || s->‹igPå >
nblock
)

535 
	`RETURN
(
BZ_DATA_ERROR
);

537 
s
->
°©e_out_Àn
 = 0;

538 
s
->
°©e_out_ch
 = 0;

539 
	`BZ_INITIALISE_CRC
 ( 
s
->
ˇlcuœãdBlockCRC
 );

540 
s
->
°©e
 = 
BZ_X_OUTPUT
;

541 i‡(
s
->
vîbosôy
 >2Ë
	`VPrötf0
 ( "rt+rld" );

544 
s
->
c·ab
[0] = 0;

545 
i
 = 1; i <256; i++Ë
s
->
c·ab
[i] = s->
unz·ab
[i-1];

546 
i
 = 1; i <256; i++Ë
s
->
c·ab
[i] += s->cftab[i-1];

548 i‡(
s
->
smÆlDecom¥ess
) {

551 
i
 = 0; i <256; i++Ë
s
->
c·abC›y
[i] = s->
c·ab
[i];

554 
i
 = 0; i < 
nblock
; i++) {

555 
uc
 = (
UCh¨
)(
s
->
Œ16
[
i
]);

556 
	`SET_LL
(
i
, 
s
->
c·abC›y
[
uc
]);

557 
s
->
c·abC›y
[
uc
]++;

561 
i
 = 
s
->
‹igPå
;

562 
j
 = 
	`GET_LL
(
i
);

564 
I¡32
 
tmp
 = 
	`GET_LL
(
j
);

565 
	`SET_LL
(
j
, 
i
);

566 
i
 = 
j
;

567 
j
 = 
tmp
;

569 
i
 !
s
->
‹igPå
);

571 #i‡
	`deföed
(
CONFIG_HW_WATCHDOG
Ë|| deföed(
CONFIG_WATCHDOG
)

572 
	`WATCHDOG_RESET
();

574 
s
->
tPos
 = s->
‹igPå
;

575 
s
->
nblock_u£d
 = 0;

576 i‡(
s
->
blockR™domi£d
) {

577 
BZ_RAND_INIT_MASK
;

578 
	`BZ_GET_SMALL
(
s
->
k0
); s->
nblock_u£d
++;

579 
BZ_RAND_UPD_MASK
; 
s
->
k0
 ^
BZ_RAND_MASK
;

581 
	`BZ_GET_SMALL
(
s
->
k0
); s->
nblock_u£d
++;

586 #i‡
	`deföed
(
CONFIG_HW_WATCHDOG
Ë|| deföed(
CONFIG_WATCHDOG
)

587 
	`WATCHDOG_RESET
();

590 
i
 = 0; i < 
nblock
; i++) {

591 
uc
 = (
UCh¨
)(
s
->
â
[
i
] & 0xff);

592 
s
->
â
[s->
c·ab
[
uc
]] |(
i
 << 8);

593 
s
->
c·ab
[
uc
]++;

596 
s
->
tPos
 = s->
â
[s->
‹igPå
] >> 8;

597 
s
->
nblock_u£d
 = 0;

598 i‡(
s
->
blockR™domi£d
) {

599 
BZ_RAND_INIT_MASK
;

600 
	`BZ_GET_FAST
(
s
->
k0
); s->
nblock_u£d
++;

601 
BZ_RAND_UPD_MASK
; 
s
->
k0
 ^
BZ_RAND_MASK
;

603 
	`BZ_GET_FAST
(
s
->
k0
); s->
nblock_u£d
++;

608 
	`RETURN
(
BZ_OK
);

611 
ídhdr_2
:

613 
	`GET_UCHAR
(
BZ_X_ENDHDR_2
, 
uc
);

614 i‡(
uc
 !0x72Ë
	`RETURN
(
BZ_DATA_ERROR
);

615 
	`GET_UCHAR
(
BZ_X_ENDHDR_3
, 
uc
);

616 i‡(
uc
 !0x45Ë
	`RETURN
(
BZ_DATA_ERROR
);

617 
	`GET_UCHAR
(
BZ_X_ENDHDR_4
, 
uc
);

618 i‡(
uc
 !0x38Ë
	`RETURN
(
BZ_DATA_ERROR
);

619 
	`GET_UCHAR
(
BZ_X_ENDHDR_5
, 
uc
);

620 i‡(
uc
 !0x50Ë
	`RETURN
(
BZ_DATA_ERROR
);

621 
	`GET_UCHAR
(
BZ_X_ENDHDR_6
, 
uc
);

622 i‡(
uc
 !0x90Ë
	`RETURN
(
BZ_DATA_ERROR
);

624 
s
->
°‹edComböedCRC
 = 0;

625 
	`GET_UCHAR
(
BZ_X_CCRC_1
, 
uc
);

626 
s
->
°‹edComböedCRC
 = (s->°‹edComböedCRC << 8Ë| ((
UI¡32
)
uc
);

627 
	`GET_UCHAR
(
BZ_X_CCRC_2
, 
uc
);

628 
s
->
°‹edComböedCRC
 = (s->°‹edComböedCRC << 8Ë| ((
UI¡32
)
uc
);

629 
	`GET_UCHAR
(
BZ_X_CCRC_3
, 
uc
);

630 
s
->
°‹edComböedCRC
 = (s->°‹edComböedCRC << 8Ë| ((
UI¡32
)
uc
);

631 
	`GET_UCHAR
(
BZ_X_CCRC_4
, 
uc
);

632 
s
->
°‹edComböedCRC
 = (s->°‹edComböedCRC << 8Ë| ((
UI¡32
)
uc
);

634 
s
->
°©e
 = 
BZ_X_IDLE
;

635 
	`RETURN
(
BZ_STREAM_END
);

637 : 
	`As£πH
 ( 
FÆ£
, 4001 );

640 
	`As£πH
 ( 
FÆ£
, 4002 );

642 
ßve_°©e_™d_ªtu∫
:

644 
s
->
ßve_i
 = 
i
;

645 
s
->
ßve_j
 = 
j
;

646 
s
->
ßve_t
 = 
t
;

647 
s
->
ßve_ÆphaSize
 = 
ÆphaSize
;

648 
s
->
ßve_nGroups
 = 
nGroups
;

649 
s
->
ßve_nSñe˘‹s
 = 
nSñe˘‹s
;

650 
s
->
ßve_EOB
 = 
EOB
;

651 
s
->
ßve_groupNo
 = 
groupNo
;

652 
s
->
ßve_groupPos
 = 
groupPos
;

653 
s
->
ßve_√xtSym
 = 
√xtSym
;

654 
s
->
ßve_nblockMAX
 = 
nblockMAX
;

655 
s
->
ßve_nblock
 = 
nblock
;

656 
s
->
ßve_es
 = 
es
;

657 
s
->
ßve_N
 = 
N
;

658 
s
->
ßve_cuº
 = 
cuº
;

659 
s
->
ßve_zt
 = 
zt
;

660 
s
->
ßve_zn
 = 
zn
;

661 
s
->
ßve_zvec
 = 
zvec
;

662 
s
->
ßve_zj
 = 
zj
;

663 
s
->
ßve_gSñ
 = 
gSñ
;

664 
s
->
ßve_gMöÀn
 = 
gMöÀn
;

665 
s
->
ßve_gLimô
 = 
gLimô
;

666 
s
->
ßve_gBa£
 = 
gBa£
;

667 
s
->
ßve_gPîm
 = 
gPîm
;

669  
ªtVÆ
;

670 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/bzlib_huffman.c

1 
	~<c⁄fig.h
>

2 #ifde‡
CONFIG_BZIP2


64 
	~"bzlib_¥iv©e.h
"

67 
	#WEIGHTOF
(
zz0
Ë((zz0Ë& 0xffffff00)

	)

68 
	#DEPTHOF
(
zz1
Ë((zz1Ë& 0x000000ff)

	)

69 
	#MYMAX
(
zz2
,
zz3
Ë((zz2Ë> (zz3Ë? (zz2Ë: (zz3))

	)

71 
	#ADDWEIGHTS
(
zw1
,
zw2
) \

72 (
	`WEIGHTOF
(
zw1
)+WEIGHTOF(
zw2
)) | \

73 (1 + 
	`MYMAX
(
	`DEPTHOF
(
zw1
),DEPTHOF(
zw2
)))

	)

75 
	#UPHEAP
(
z
) \

77 
I¡32
 
zz
, 
tmp
; \

78 
zz
 = 
z
; 
tmp
 = 
hóp
[zz]; \

79 
weight
[
tmp
] < weight[
hóp
[
zz
 >> 1]]) { \

80 
hóp
[
zz
] = heap[zz >> 1]; \

81 
zz
 >>= 1; \

83 
hóp
[
zz
] = 
tmp
; \

84 }

	)

86 
	#DOWNHEAP
(
z
) \

88 
I¡32
 
zz
, 
yy
, 
tmp
; \

89 
zz
 = 
z
; 
tmp
 = 
hóp
[zz]; \

90 
True
) { \

91 
yy
 = 
zz
 << 1; \

92 i‡(
yy
 > 
nHóp
) ; \

93 i‡(
yy
 < 
nHóp
 && \

94 
weight
[
hóp
[
yy
+1]] < weight[heap[yy]]) \

95 
yy
++; \

96 i‡(
weight
[
tmp
] < weight[
hóp
[
yy
]]) ; \

97 
hóp
[
zz
] = hóp[
yy
]; \

98 
zz
 = 
yy
; \

100 
hóp
[
zz
] = 
tmp
; \

101 }

	)

105 
	$BZ2_hbMakeCodeLígths
 ( 
UCh¨
 *
Àn
,

106 
I¡32
 *
‰eq
,

107 
I¡32
 
ÆphaSize
,

108 
I¡32
 
maxLí
 )

114 
I¡32
 
nNodes
, 
nHóp
, 
n1
, 
n2
, 
i
, 
j
, 
k
;

115 
Boﬁ
 
tooL⁄g
;

117 
I¡32
 
hóp
 [ 
BZ_MAX_ALPHA_SIZE
 + 2 ];

118 
I¡32
 
weight
 [ 
BZ_MAX_ALPHA_SIZE
 * 2 ];

119 
I¡32
 
∑ª¡
 [ 
BZ_MAX_ALPHA_SIZE
 * 2 ];

121 
i
 = 0; i < 
ÆphaSize
; i++)

122 
weight
[
i
+1] = (
‰eq
[i] == 0 ? 1 : freq[i]) << 8;

124 
True
) {

126 
nNodes
 = 
ÆphaSize
;

127 
nHóp
 = 0;

129 
hóp
[0] = 0;

130 
weight
[0] = 0;

131 
∑ª¡
[0] = -2;

133 
i
 = 1; i <
ÆphaSize
; i++) {

134 
∑ª¡
[
i
] = -1;

135 
nHóp
++;

136 
hóp
[
nHóp
] = 
i
;

137 
	`UPHEAP
(
nHóp
);

140 
	`As£πH
–
nHóp
 < (
BZ_MAX_ALPHA_SIZE
+2), 2001 );

142 
nHóp
 > 1) {

143 
n1
 = 
hóp
[1]; hóp[1] = hóp[
nHóp
];ÇHóp--; 
	`DOWNHEAP
(1);

144 
n2
 = 
hóp
[1]; hóp[1] = hóp[
nHóp
];ÇHóp--; 
	`DOWNHEAP
(1);

145 
nNodes
++;

146 
∑ª¡
[
n1
] =Ö¨ít[
n2
] = 
nNodes
;

147 
weight
[
nNodes
] = 
	`ADDWEIGHTS
(weight[
n1
], weight[
n2
]);

148 
∑ª¡
[
nNodes
] = -1;

149 
nHóp
++;

150 
hóp
[
nHóp
] = 
nNodes
;

151 
	`UPHEAP
(
nHóp
);

154 
	`As£πH
–
nNodes
 < (
BZ_MAX_ALPHA_SIZE
 * 2), 2002 );

156 
tooL⁄g
 = 
FÆ£
;

157 
i
 = 1; i <
ÆphaSize
; i++) {

158 
j
 = 0;

159 
k
 = 
i
;

160 
∑ª¡
[
k
] >0Ë{ k =Ö¨ít[k]; 
j
++; }

161 
Àn
[
i
-1] = 
j
;

162 i‡(
j
 > 
maxLí
Ë
tooL⁄g
 = 
True
;

165 i‡(! 
tooL⁄g
) ;

167 
i
 = 1; i < 
ÆphaSize
; i++) {

168 
j
 = 
weight
[
i
] >> 8;

169 
j
 = 1 + (j / 2);

170 
weight
[
i
] = 
j
 << 8;

173 
	}
}

177 
	$BZ2_hbAssignCodes
 ( 
I¡32
 *
code
,

178 
UCh¨
 *
Àngth
,

179 
I¡32
 
möLí
,

180 
I¡32
 
maxLí
,

181 
I¡32
 
ÆphaSize
 )

183 
I¡32
 
n
, 
vec
, 
i
;

185 
vec
 = 0;

186 
n
 = 
möLí
;Ç <
maxLí
;Ç++) {

187 
i
 = 0; i < 
ÆphaSize
; i++)

188 i‡(
Àngth
[
i
] =
n
Ë{ 
code
[i] = 
vec
; vec++; };

189 
vec
 <<= 1;

191 
	}
}

195 
	$BZ2_hbCª©eDecodeTabÀs
 ( 
I¡32
 *
limô
,

196 
I¡32
 *
ba£
,

197 
I¡32
 *
≥rm
,

198 
UCh¨
 *
Àngth
,

199 
I¡32
 
möLí
,

200 
I¡32
 
maxLí
,

201 
I¡32
 
ÆphaSize
 )

203 
I¡32
 
µ
, 
i
, 
j
, 
vec
;

205 
µ
 = 0;

206 
i
 = 
möLí
; i <
maxLí
; i++)

207 
j
 = 0; j < 
ÆphaSize
; j++)

208 i‡(
Àngth
[
j
] =
i
Ë{ 
≥rm
[
µ
] = j;Öp++; };

210 
i
 = 0; i < 
BZ_MAX_CODE_LEN
; i++Ë
ba£
[i] = 0;

211 
i
 = 0; i < 
ÆphaSize
; i++Ë
ba£
[
Àngth
[i]+1]++;

213 
i
 = 1; i < 
BZ_MAX_CODE_LEN
; i++Ë
ba£
[i] += base[i-1];

215 
i
 = 0; i < 
BZ_MAX_CODE_LEN
; i++Ë
limô
[i] = 0;

216 
vec
 = 0;

218 
i
 = 
möLí
; i <
maxLí
; i++) {

219 
vec
 +(
ba£
[
i
+1] - base[i]);

220 
limô
[
i
] = 
vec
-1;

221 
vec
 <<= 1;

223 
i
 = 
möLí
 + 1; i <
maxLí
; i++)

224 
ba£
[
i
] = ((
limô
[i-1] + 1) << 1) - base[i];

225 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/bzlib_private.h

66 #i‚de‡
_BZLIB_PRIVATE_H


67 
	#_BZLIB_PRIVATE_H


	)

69 
	~<mÆloc.h
>

71 
	~"bzlib.h
"

73 #i‚de‡
BZ_NO_STDIO


74 
	~<°dio.h
>

75 
	~<˘y≥.h
>

76 
	~<°rög.h
>

82 
	#BZ_VERSION
 "1.0.2, 30-Dec-2001"

	)

84 
	tCh¨
;

85 
	tBoﬁ
;

86 
	tUCh¨
;

87 
	tI¡32
;

88 
	tUI¡32
;

89 
	tI¡16
;

90 
	tUI¡16
;

92 
	#True
 ((
Boﬁ
)1)

	)

93 
	#FÆ£
 ((
Boﬁ
)0)

	)

95 #i‚de‡
__GNUC__


96 
	#__ölöe__


	)

99 #i‚de‡
BZ_NO_STDIO


100 
BZ2_bz__As£πH__Áû
 ( 
îrcode
 );

101 
	#As£πH
(
c⁄d
,
îrcode
) \

102 { i‡(!(
c⁄d
)Ë
	`BZ2_bz__As£πH__Áû
 ( 
îrcode
 ); }

	)

103 #i‡
BZ_DEBUG


104 
	#As£πD
(
c⁄d
,
msg
) \

105 { i‡(!(
c⁄d
)) { \

106 
	`Ârötf
 ( 
°dîr
, \

107 "\n\∆ibbzù2(debug buûd): i¡î«»îr‹\n\t%s\n", 
msg
 );\

108 
	`exô
(1); \

109 }}

	)

111 
	#As£πD
(
c⁄d
,
msg
Ë

	)

113 
	#VPrötf0
(
zf
) \

114 
	`Ârötf
(
°dîr
,
zf
)

	)

115 
	#VPrötf1
(
zf
,
za1
) \

116 
	`Ârötf
(
°dîr
,
zf
,
za1
)

	)

117 
	#VPrötf2
(
zf
,
za1
,
za2
) \

118 
	`Ârötf
(
°dîr
,
zf
,
za1
,
za2
)

	)

119 
	#VPrötf3
(
zf
,
za1
,
za2
,
za3
) \

120 
	`Ârötf
(
°dîr
,
zf
,
za1
,
za2
,
za3
)

	)

121 
	#VPrötf4
(
zf
,
za1
,
za2
,
za3
,
za4
) \

122 
	`Ârötf
(
°dîr
,
zf
,
za1
,
za2
,
za3
,
za4
)

	)

123 
	#VPrötf5
(
zf
,
za1
,
za2
,
za3
,
za4
,
za5
) \

124 
	`Ârötf
(
°dîr
,
zf
,
za1
,
za2
,
za3
,
za4
,
za5
)

	)

126 
bz_öã∫Æ_îr‹
 ( 
îrcode
 );

127 
	#As£πH
(
c⁄d
,
îrcode
) \

128 { i‡(!(
c⁄d
)Ë
	`bz_öã∫Æ_îr‹
 ( 
îrcode
 ); }

	)

129 
	#As£πD
(
c⁄d
,
msg
Ë

	)

130 
	#VPrötf0
(
zf
Ë

	)

131 
	#VPrötf1
(
zf
,
za1
Ë

	)

132 
	#VPrötf2
(
zf
,
za1
,
za2
Ë

	)

133 
	#VPrötf3
(
zf
,
za1
,
za2
,
za3
Ë

	)

134 
	#VPrötf4
(
zf
,
za1
,
za2
,
za3
,
za4
Ë

	)

135 
	#VPrötf5
(
zf
,
za1
,
za2
,
za3
,
za4
,
za5
Ë

	)

139 
	#BZALLOC
(
¬n
Ë(
°rm
->
bzÆloc
)(°rm->
›aque
,“¬),1)

	)

140 
	#BZFREE
(
µp
Ë(
°rm
->
bz‰ì
)(°rm->
›aque
,’µ))

	)

145 
	#BZ_HDR_B
 0x42

	)

146 
	#BZ_HDR_Z
 0x5®

	)

147 
	#BZ_HDR_h
 0x68

	)

148 
	#BZ_HDR_0
 0x30

	)

152 
	#BZ_MAX_ALPHA_SIZE
 258

	)

153 
	#BZ_MAX_CODE_LEN
 23

	)

155 
	#BZ_RUNA
 0

	)

156 
	#BZ_RUNB
 1

	)

158 
	#BZ_N_GROUPS
 6

	)

159 
	#BZ_G_SIZE
 50

	)

160 
	#BZ_N_ITERS
 4

	)

162 
	#BZ_MAX_SELECTORS
 (2 + (900000 / 
BZ_G_SIZE
))

	)

167 
I¡32
 
BZ2_rNums
[512];

169 
	#BZ_RAND_DECLS
 \

170 
I¡32
 
rNToGo
; \

171 
I¡32
 
rTPos
 \

172 

	)

173 
	#BZ_RAND_INIT_MASK
 \

174 
s
->
rNToGo
 = 0; \

175 
s
->
rTPos
 = 0 \

176 

	)

177 
	#BZ_RAND_MASK
 ((
s
->
rNToGo
 =1Ë? 1 : 0)

	)

179 
	#BZ_RAND_UPD_MASK
 \

180 i‡(
s
->
rNToGo
 == 0) { \

181 
s
->
rNToGo
 = 
BZ2_rNums
[s->
rTPos
]; \

182 
s
->
rTPos
++; \

183 i‡(
s
->
rTPos
 == 512) s->rTPos = 0; \

185 
s
->
rNToGo
--;

	)

190 
UI¡32
 
BZ2_¸c32TabÀ
[256];

192 
	#BZ_INITIALISE_CRC
(
¸cV¨
) \

194 
¸cV¨
 = 0xffffffffL; \

195 }

	)

197 
	#BZ_FINALISE_CRC
(
¸cV¨
) \

199 
¸cV¨
 = ~(crcVar); \

200 }

	)

202 
	#BZ_UPDATE_CRC
(
¸cV¨
,
cha
) \

204 
¸cV¨
 = (crcVar << 8) ^ \

205 
BZ2_¸c32TabÀ
[(
¸cV¨
 >> 24) ^ \

206 ((
UCh¨
)
cha
)]; \

207 }

	)

212 
	#BZ_M_IDLE
 1

	)

213 
	#BZ_M_RUNNING
 2

	)

214 
	#BZ_M_FLUSHING
 3

	)

215 
	#BZ_M_FINISHING
 4

	)

217 
	#BZ_S_OUTPUT
 1

	)

218 
	#BZ_S_INPUT
 2

	)

220 
	#BZ_N_RADIX
 2

	)

221 
	#BZ_N_QSORT
 12

	)

222 
	#BZ_N_SHELL
 18

	)

223 
	#BZ_N_OVERSHOOT
 (
BZ_N_RADIX
 + 
BZ_N_QSORT
 + 
BZ_N_SHELL
 + 2)

	)

231 
bz_°ªam
* 
	m°rm
;

235 
I¡32
 
	mmode
;

236 
I¡32
 
	m°©e
;

239 
UI¡32
 
	mavaû_ö_ex≥˘
;

242 
UI¡32
* 
	m¨r1
;

243 
UI¡32
* 
	m¨r2
;

244 
UI¡32
* 
	m·ab
;

245 
I¡32
 
	m‹igPå
;

248 
UI¡32
* 
	m±r
;

249 
UCh¨
* 
	mblock
;

250 
UI¡16
* 
	mmtfv
;

251 
UCh¨
* 
	mzbôs
;

254 
I¡32
 
	mw‹kFa˘‹
;

257 
UI¡32
 
	m°©e_ö_ch
;

258 
I¡32
 
	m°©e_ö_Àn
;

259 
	mBZ_RAND_DECLS
;

262 
I¡32
 
	mnblock
;

263 
I¡32
 
	mnblockMAX
;

264 
I¡32
 
	mnumZ
;

265 
I¡32
 
	m°©e_out_pos
;

268 
I¡32
 
	mnInU£
;

269 
Boﬁ
 
	möU£
[256];

270 
UCh¨
 
	mun£qToSeq
[256];

273 
UI¡32
 
	mbsBuff
;

274 
I¡32
 
	mbsLive
;

277 
UI¡32
 
	mblockCRC
;

278 
UI¡32
 
	mcomböedCRC
;

281 
I¡32
 
	mvîbosôy
;

282 
I¡32
 
	mblockNo
;

283 
I¡32
 
	mblockSize100k
;

286 
I¡32
 
	mnMTF
;

287 
I¡32
 
	mmtfFªq
 [
BZ_MAX_ALPHA_SIZE
];

288 
UCh¨
 
	m£À˘‹
 [
BZ_MAX_SELECTORS
];

289 
UCh¨
 
	m£À˘‹Mtf
[
BZ_MAX_SELECTORS
];

291 
UCh¨
 
	mÀn
 [
BZ_N_GROUPS
][
BZ_MAX_ALPHA_SIZE
];

292 
I¡32
 
	mcode
 [
BZ_N_GROUPS
][
BZ_MAX_ALPHA_SIZE
];

293 
I¡32
 
	mr‰eq
 [
BZ_N_GROUPS
][
BZ_MAX_ALPHA_SIZE
];

295 
UI¡32
 
	mÀn_∑ck
[
BZ_MAX_ALPHA_SIZE
][4];

298 
	tESèã
;

304 
BZ2_blockS‹t
 ( 
ESèã
* );

307 
BZ2_com¥essBlock
 ( 
ESèã
*, 
Boﬁ
 );

310 
BZ2_bsInôWrôe
 ( 
ESèã
* );

313 
BZ2_hbAssignCodes
 ( 
I¡32
*, 
UCh¨
*, Int32, Int32, Int32 );

316 
BZ2_hbMakeCodeLígths
 ( 
UCh¨
*, 
I¡32
*, Int32, Int32 );

321 
	#BZ_X_IDLE
 1

	)

322 
	#BZ_X_OUTPUT
 2

	)

324 
	#BZ_X_MAGIC_1
 10

	)

325 
	#BZ_X_MAGIC_2
 11

	)

326 
	#BZ_X_MAGIC_3
 12

	)

327 
	#BZ_X_MAGIC_4
 13

	)

328 
	#BZ_X_BLKHDR_1
 14

	)

329 
	#BZ_X_BLKHDR_2
 15

	)

330 
	#BZ_X_BLKHDR_3
 16

	)

331 
	#BZ_X_BLKHDR_4
 17

	)

332 
	#BZ_X_BLKHDR_5
 18

	)

333 
	#BZ_X_BLKHDR_6
 19

	)

334 
	#BZ_X_BCRC_1
 20

	)

335 
	#BZ_X_BCRC_2
 21

	)

336 
	#BZ_X_BCRC_3
 22

	)

337 
	#BZ_X_BCRC_4
 23

	)

338 
	#BZ_X_RANDBIT
 24

	)

339 
	#BZ_X_ORIGPTR_1
 25

	)

340 
	#BZ_X_ORIGPTR_2
 26

	)

341 
	#BZ_X_ORIGPTR_3
 27

	)

342 
	#BZ_X_MAPPING_1
 28

	)

343 
	#BZ_X_MAPPING_2
 29

	)

344 
	#BZ_X_SELECTOR_1
 30

	)

345 
	#BZ_X_SELECTOR_2
 31

	)

346 
	#BZ_X_SELECTOR_3
 32

	)

347 
	#BZ_X_CODING_1
 33

	)

348 
	#BZ_X_CODING_2
 34

	)

349 
	#BZ_X_CODING_3
 35

	)

350 
	#BZ_X_MTF_1
 36

	)

351 
	#BZ_X_MTF_2
 37

	)

352 
	#BZ_X_MTF_3
 38

	)

353 
	#BZ_X_MTF_4
 39

	)

354 
	#BZ_X_MTF_5
 40

	)

355 
	#BZ_X_MTF_6
 41

	)

356 
	#BZ_X_ENDHDR_2
 42

	)

357 
	#BZ_X_ENDHDR_3
 43

	)

358 
	#BZ_X_ENDHDR_4
 44

	)

359 
	#BZ_X_ENDHDR_5
 45

	)

360 
	#BZ_X_ENDHDR_6
 46

	)

361 
	#BZ_X_CCRC_1
 47

	)

362 
	#BZ_X_CCRC_2
 48

	)

363 
	#BZ_X_CCRC_3
 49

	)

364 
	#BZ_X_CCRC_4
 50

	)

369 
	#MTFA_SIZE
 4096

	)

370 
	#MTFL_SIZE
 16

	)

378 
bz_°ªam
* 
	m°rm
;

381 
I¡32
 
	m°©e
;

384 
UCh¨
 
	m°©e_out_ch
;

385 
I¡32
 
	m°©e_out_Àn
;

386 
Boﬁ
 
	mblockR™domi£d
;

387 
	mBZ_RAND_DECLS
;

390 
UI¡32
 
	mbsBuff
;

391 
I¡32
 
	mbsLive
;

394 
I¡32
 
	mblockSize100k
;

395 
Boﬁ
 
	msmÆlDecom¥ess
;

396 
I¡32
 
	mcuºBlockNo
;

397 
I¡32
 
	mvîbosôy
;

400 
I¡32
 
	m‹igPå
;

401 
UI¡32
 
	mtPos
;

402 
I¡32
 
	mk0
;

403 
I¡32
 
	munz·ab
[256];

404 
I¡32
 
	mnblock_u£d
;

405 
I¡32
 
	mc·ab
[257];

406 
I¡32
 
	mc·abC›y
[257];

409 
UI¡32
 *
	mâ
;

412 
UI¡16
 *
	mŒ16
;

413 
UCh¨
 *
	mŒ4
;

416 
UI¡32
 
	m°‹edBlockCRC
;

417 
UI¡32
 
	m°‹edComböedCRC
;

418 
UI¡32
 
	mˇlcuœãdBlockCRC
;

419 
UI¡32
 
	mˇlcuœãdComböedCRC
;

422 
I¡32
 
	mnInU£
;

423 
Boﬁ
 
	möU£
[256];

424 
Boﬁ
 
	möU£16
[16];

425 
UCh¨
 
	m£qToUn£q
[256];

428 
UCh¨
 
	mmtÁ
 [
MTFA_SIZE
];

429 
I¡32
 
	mmtfba£
[256 / 
MTFL_SIZE
];

430 
UCh¨
 
	m£À˘‹
 [
BZ_MAX_SELECTORS
];

431 
UCh¨
 
	m£À˘‹Mtf
[
BZ_MAX_SELECTORS
];

432 
UCh¨
 
	mÀn
 [
BZ_N_GROUPS
][
BZ_MAX_ALPHA_SIZE
];

434 
I¡32
 
	mlimô
 [
BZ_N_GROUPS
][
BZ_MAX_ALPHA_SIZE
];

435 
I¡32
 
	mba£
 [
BZ_N_GROUPS
][
BZ_MAX_ALPHA_SIZE
];

436 
I¡32
 
	m≥rm
 [
BZ_N_GROUPS
][
BZ_MAX_ALPHA_SIZE
];

437 
I¡32
 
	mmöLís
[
BZ_N_GROUPS
];

440 
I¡32
 
	mßve_i
;

441 
I¡32
 
	mßve_j
;

442 
I¡32
 
	mßve_t
;

443 
I¡32
 
	mßve_ÆphaSize
;

444 
I¡32
 
	mßve_nGroups
;

445 
I¡32
 
	mßve_nSñe˘‹s
;

446 
I¡32
 
	mßve_EOB
;

447 
I¡32
 
	mßve_groupNo
;

448 
I¡32
 
	mßve_groupPos
;

449 
I¡32
 
	mßve_√xtSym
;

450 
I¡32
 
	mßve_nblockMAX
;

451 
I¡32
 
	mßve_nblock
;

452 
I¡32
 
	mßve_es
;

453 
I¡32
 
	mßve_N
;

454 
I¡32
 
	mßve_cuº
;

455 
I¡32
 
	mßve_zt
;

456 
I¡32
 
	mßve_zn
;

457 
I¡32
 
	mßve_zvec
;

458 
I¡32
 
	mßve_zj
;

459 
I¡32
 
	mßve_gSñ
;

460 
I¡32
 
	mßve_gMöÀn
;

461 
I¡32
* 
	mßve_gLimô
;

462 
I¡32
* 
	mßve_gBa£
;

463 
I¡32
* 
	mßve_gPîm
;

466 
	tDSèã
;

471 
	#BZ_GET_FAST
(
cccc
) \

472 
s
->
tPos
 = s->
â
[s->tPos]; \

473 
cccc
 = (
UCh¨
)(
s
->
tPos
 & 0xff); \

474 
s
->
tPos
 >>8;

	)

476 
	#BZ_GET_FAST_C
(
cccc
) \

477 
c_tPos
 = 
c_â
[c_tPos]; \

478 
cccc
 = (
UCh¨
)(
c_tPos
 & 0xff); \

479 
c_tPos
 >>8;

	)

481 
	#SET_LL4
(
i
,
n
) \

482 { i‡(((
i
) & 0x1) == 0) \

483 
s
->
Œ4
[(
i
Ë>> 1] = (s->Œ4[(iË>> 1] & 0xf0Ë| (
n
); \

484 
s
->
Œ4
[(
i
Ë>> 1] = (s->Œ4[(iË>> 1] & 0x0fË| ((
n
) << 4); \

485 }

	)

487 
	#GET_LL4
(
i
) \

488 ((((
UI¡32
)(
s
->
Œ4
[(
i
Ë>> 1])Ë>> (((iË<< 2Ë& 0x4)Ë& 0xF)

	)

490 
	#SET_LL
(
i
,
n
) \

491 { 
s
->
Œ16
[
i
] = (
UI¡16
)(
n
 & 0x0000ffff); \

492 
	`SET_LL4
(
i
, 
n
 >> 16); \

493 }

	)

495 
	#GET_LL
(
i
) \

496 (((
UI¡32
)
s
->
Œ16
[
i
]Ë| (
	`GET_LL4
(iË<< 16))

	)

498 
	#BZ_GET_SMALL
(
cccc
) \

499 
cccc
 = 
	`BZ2_ödexI¡oF
 ( 
s
->
tPos
, s->
c·ab
 ); \

500 
s
->
tPos
 = 
	`GET_LL
(s->tPos);

	)

505 
I¡32


506 
BZ2_ödexI¡oF
 ( 
I¡32
, Int32* );

508 
I¡32


509 
BZ2_decom¥ess
 ( 
DSèã
* );

512 
BZ2_hbCª©eDecodeTabÀs
 ( 
I¡32
*, I¡32*, I¡32*, 
UCh¨
*,

513 
I¡32
, Int32, Int32 );

521 #ifde‡
BZ_NO_STDIO


522 #i‚de‡
NULL


523 
	#NULL
 0

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/bzlib_randtable.c

1 
	~<c⁄fig.h
>

2 #ifde‡
CONFIG_BZIP2


64 
	~"bzlib_¥iv©e.h
"

68 
I¡32
 
	gBZ2_rNums
[512] = {

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/crc32.c

11 #i‚de‡
USE_HOSTCC


12 
	~<comm⁄.h
>

15 
	~"zlib.h
"

17 
	#loˇl
 

	)

18 
	#ZEXPORT


	)

19 
¸c32
 (, const *, );

21 
	#DYNAMIC_CRC_TABLE


	)

23 #ifde‡
DYNAMIC_CRC_TABLE


25 
loˇl
 
	g¸c_èbÀ_em±y
 = 1;

26 
loˇl
 
uL⁄gf
 
	g¸c_èbÀ
[256];

27 
loˇl
 
make_¸c_èbÀ
 
OF
(());

53 
loˇl
 
	$make_¸c_èbÀ
()

55 
uL⁄g
 
c
;

56 
n
, 
k
;

57 
uL⁄g
 
pﬁy
;

59 c⁄° 
Byã
 
p
[] = {0,1,2,4,5,7,8,10,11,12,16,22,23,26};

62 
pﬁy
 = 0L;

63 
n
 = 0;Ç < (
p
)/(
Byã
);Ç++)

64 
pﬁy
 |1L << (31 - 
p
[
n
]);

66 
n
 = 0;Ç < 256;Ç++)

68 
c
 = (
uL⁄g
)
n
;

69 
k
 = 0; k < 8; k++)

70 
c
 = c & 1 ? 
pﬁy
 ^ (c >> 1) : c >> 1;

71 
¸c_èbÀ
[
n
] = 
c
;

73 
¸c_èbÀ_em±y
 = 0;

74 
	}
}

79 
loˇl
 c⁄° 
uL⁄gf
 
	g¸c_èbÀ
[256] = {

139 c⁄° 
uL⁄gf
 * 
ZEXPORT
 
	$gë_¸c_èbÀ
()

141 #ifde‡
DYNAMIC_CRC_TABLE


142 i‡(
¸c_èbÀ_em±y
Ë
	`make_¸c_èbÀ
();

144  (c⁄° 
uL⁄gf
 *)
¸c_èbÀ
;

145 
	}
}

149 
	#DO1
(
buf
Ë
¸c
 = 
¸c_èbÀ
[(()¸¯^ (*buf++)Ë& 0xff] ^ (¸¯>> 8);

	)

150 
	#DO2
(
buf
Ë
	`DO1
(buf); DO1(buf);

	)

151 
	#DO4
(
buf
Ë
	`DO2
(buf); DO2(buf);

	)

152 
	#DO8
(
buf
Ë
	`DO4
(buf); DO4(buf);

	)

155 
uL⁄g
 
ZEXPORT
 
	$¸c32
(
¸c
, 
buf
, 
Àn
)

156 
uL⁄g
 
¸c
;

157 c⁄° 
Byãf
 *
buf
;

158 
uI¡
 
Àn
;

160 #ifde‡
DYNAMIC_CRC_TABLE


161 i‡(
¸c_èbÀ_em±y
)

162 
	`make_¸c_èbÀ
();

164 
¸c
 = crc ^ 0xffffffffL;

165 
Àn
 >= 8)

167 
	`DO8
(
buf
);

168 
Àn
 -= 8;

170 i‡(
Àn
) do {

171 
	`DO1
(
buf
);

172 } --
Àn
);

173  
¸c
 ^ 0xffffffffL;

174 
	}
}

176 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_JFFS2
)

181 
uL⁄g
 
ZEXPORT
 
	$¸c32_no_comp
(
uL⁄g
 
¸c
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
)

183 #ifde‡
DYNAMIC_CRC_TABLE


184 i‡(
¸c_èbÀ_em±y
)

185 
	`make_¸c_èbÀ
();

187 
Àn
 >= 8)

189 
	`DO8
(
buf
);

190 
Àn
 -= 8;

192 i‡(
Àn
) do {

193 
	`DO1
(
buf
);

194 } --
Àn
);

196  
¸c
;

197 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/ctype.c

30 
	~<löux/˘y≥.h
>

32 
	g_˘y≥
[] = {

33 
_C
,_C,_C,_C,_C,_C,_C,_C,

34 
_C
,_C|
_S
,_C|_S,_C|_S,_C|_S,_C|_S,_C,_C,

35 
_C
,_C,_C,_C,_C,_C,_C,_C,

36 
_C
,_C,_C,_C,_C,_C,_C,_C,

37 
_S
|
_SP
,
_P
,_P,_P,_P,_P,_P,_P,

38 
_P
,_P,_P,_P,_P,_P,_P,_P,

39 
_D
,_D,_D,_D,_D,_D,_D,_D,

40 
_D
,_D,
_P
,_P,_P,_P,_P,_P,

41 
_P
,
_U
|
_X
,_U|_X,_U|_X,_U|_X,_U|_X,_U|_X,_U,

42 
_U
,_U,_U,_U,_U,_U,_U,_U,

43 
_U
,_U,_U,_U,_U,_U,_U,_U,

44 
_U
,_U,_U,
_P
,_P,_P,_P,_P,

45 
_P
,
_L
|
_X
,_L|_X,_L|_X,_L|_X,_L|_X,_L|_X,_L,

46 
_L
,_L,_L,_L,_L,_L,_L,_L,

47 
_L
,_L,_L,_L,_L,_L,_L,_L,

48 
_L
,_L,_L,
_P
,_P,_P,_P,
_C
,

51 
_S
|
_SP
,
_P
,_P,_P,_P,_P,_P,_P,_P,_P,_P,_P,_P,_P,_P,_P,

52 
_P
,_P,_P,_P,_P,_P,_P,_P,_P,_P,_P,_P,_P,_P,_P,_P,

53 
_U
,_U,_U,_U,_U,_U,_U,_U,_U,_U,_U,_U,_U,_U,_U,_U,

54 
_U
,_U,_U,_U,_U,_U,_U,
_P
,_U,_U,_U,_U,_U,_U,_U,
_L
,

55 
_L
,_L,_L,_L,_L,_L,_L,_L,_L,_L,_L,_L,_L,_L,_L,_L,

56 
_L
,_L,_L,_L,_L,_L,_L,
_P
,_L,_L,_L,_L,_L,_L,_L,_L};

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/decompress_unxz.c

103 
	#XZ_PREBOOT


	)

105 
	#STATIC
 

	)

112 
	#XZ_EXTERN
 

	)

118 
	#XZ_FUNC


	)

124 
	#XZ_INTERNAL_CRC32
 1

	)

131 
	#XZ_IGNORE_KCONFIG


	)

132 #ifde‡
CONFIG_X86


133 
	#XZ_DEC_X86


	)

135 #ifde‡
CONFIG_PPC


136 
	#XZ_DEC_POWERPC


	)

138 #ifde‡
CONFIG_ARM


139 
	#XZ_DEC_ARM


	)

141 #ifde‡
CONFIG_IA64


142 
	#XZ_DEC_IA64


	)

144 #ifde‡
CONFIG_SPARC


145 
	#XZ_DEC_SPARC


	)

148 
	~"xz_¥iv©e.h
"

150 #ifde‡
XZ_PREBOOT


155 #unde‡
kmÆloc


156 #unde‡
k‰ì


157 #unde‡
vmÆloc


158 #unde‡
v‰ì


159 
	#kmÆloc
(
size
, 
Êags
Ë
	`mÆloc
(size)

	)

160 
	#k‰ì
(
±r
Ë
	`‰ì
’å)

	)

161 
	#vmÆloc
(
size
Ë
	`mÆloc
(size)

	)

162 
	#v‰ì
(
±r
Ë
	`‰ì
’å)

	)

166 
	~"xz_dec_°ªam.c
"

167 
	~"xz_dec_lzma2.c
"

168 
	~"xz_dec_bcj.c
"

175 
	#DICT_MAX
 (1024 * 1024)

	)

178 
	#XZ_IOBUF_SIZE
 4096

	)

192 
XZ_FUNC
 
	$unxz
–*
ö
, 
ö_size
,

193 *
out
, *
ö_u£d
)

195 
xz_buf
 
b
;

196 
xz_dec
 *
s
;

197 
xz_ªt
 
ªt
;

199 i‡(
ö
 !
NULL
 && 
out
 != NULL)

200 
s
 = 
	`xz_dec_öô
(
XZ_SINGLE
, 0);

204 i‡(
s
 =
NULL
)

207 
b
.
ö
 = in;

208 
b
.
ö_pos
 = 0;

209 
b
.
ö_size
 = in_size;

210 
b
.
out_pos
 = 0;

212 i‡(
ö_u£d
 !
NULL
)

213 *
ö_u£d
 = 0;

215 
b
.
out
 = out;

216 
b
.
out_size
 = (
size_t
)-1;

217 
ªt
 = 
	`xz_dec_run
(
s
, &
b
);

219 i‡(
ö_u£d
 !
NULL
)

220 *
ö_u£d
 +
b
.
ö_pos
;

222 
	`xz_dec_íd
(
s
);

224  
ªt
==
XZ_STREAM_END
?0:ret;

225 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/display_options.c

24 
	~<comm⁄.h
>

26 
	$di•œy_›ti⁄s
 ()

28 
vîsi⁄_°rög
[];

30 #i‡
	`deföed
(
BUILD_TAG
)

31 
	`¥ötf
 ("\n\n%s, Buûd: %s\n\n", 
vîsi⁄_°rög
, 
BUILD_TAG
);

33 
	`¥ötf
 ("\n\n%s\n\n", 
vîsi⁄_°rög
);

36 
	}
}

42 
	$¥öt_size
 (
ul⁄g
 
size
, c⁄° *
s
)

44 
ul⁄g
 
m
, 
n
;

45 
ul⁄g
 
d
 = 1 << 20;

46 
c
 = 'M';

48 i‡(
size
 < 
d
) {

49 
c
 = 'k';

50 
d
 = 1 << 10;

53 
n
 = 
size
 / 
d
;

55 
m
 = (10 * (
size
 - (
n
 * 
d
)) + (d / 2) ) / d;

57 i‡(
m
 >= 10) {

58 
m
 -= 10;

59 
n
 += 1;

62 
	`¥ötf
 ("%2ld", 
n
);

63 i‡(
m
) {

64 
	`¥ötf
 (".%ld", 
m
);

66 
	`¥ötf
 (" %cB%s", 
c
, 
s
);

67 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/string.c

18 
	~<löux/ty≥s.h
>

19 
	~<löux/°rög.h
>

20 
	~<löux/˘y≥.h
>

21 
	~<mÆloc.h
>

25 #i‚de‡
CONFIG_MIPS16


26 
	#__HAVE_ARCH_STRNICMP


	)

27 
	#__HAVE_ARCH_STRNICMP


	)

28 
	#__HAVE_ARCH_STRCPY


	)

29 
	#__HAVE_ARCH_STRNCPY


	)

30 
	#__HAVE_ARCH_STRCAT


	)

31 
	#__HAVE_ARCH_STRNCAT


	)

32 
	#__HAVE_ARCH_STRCMP


	)

33 
	#__HAVE_ARCH_STRNCMP


	)

34 
	#__HAVE_ARCH_STRDUP


	)

35 
	#__HAVE_ARCH_STRSPN


	)

36 
	#__HAVE_ARCH_STRPBRK


	)

37 
	#__HAVE_ARCH_STRTOK


	)

38 
	#__HAVE_ARCH_STRSEP


	)

39 
	#__HAVE_ARCH_STRSWAB


	)

40 
	#__HAVE_ARCH_BCOPY


	)

41 
	#__HAVE_ARCH_MEMSCAN


	)

42 
	#__HAVE_ARCH_STRSTR


	)

43 
	#__HAVE_ARCH_MEMCHR


	)

45 #i‚de‡
__HAVE_ARCH_STRNICMP


52 
	$°∫icmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
Àn
)

55 
c1
, 
c2
;

57 
c1
 = 0; 
c2
 = 0;

58 i‡(
Àn
) {

60 
c1
 = *
s1
; 
c2
 = *
s2
;

61 
s1
++; 
s2
++;

62 i‡(!
c1
)

64 i‡(!
c2
)

66 i‡(
c1
 =
c2
)

68 
c1
 = 
	`tﬁowî
(c1);

69 
c2
 = 
	`tﬁowî
(c2);

70 i‡(
c1
 !
c2
)

72 } --
Àn
);

74  ()
c1
 - ()
c2
;

75 
	}
}

78 * 
	g___°πok
;

80 #i‚de‡
__HAVE_ARCH_STRCPY


86 * 
	$°r˝y
(* 
de°
,c⁄° *
§c
)

88 *
tmp
 = 
de°
;

90 (*
de°
++ = *
§c
++) != '\0')

92  
tmp
;

93 
	}
}

96 #i‚de‡
__HAVE_ARCH_STRNCPY


107 * 
	$°∫˝y
(* 
de°
,c⁄° *
§c
,
size_t
 
cou¡
)

109 *
tmp
 = 
de°
;

111 
cou¡
-- && (*
de°
++ = *
§c
++) != '\0')

114  
tmp
;

115 
	}
}

118 #i‚de‡
__HAVE_ARCH_STRCAT


124 * 
	$°rˇt
(* 
de°
, c⁄° * 
§c
)

126 *
tmp
 = 
de°
;

128 *
de°
)

129 
de°
++;

130 (*
de°
++ = *
§c
++) != '\0')

133  
tmp
;

134 
	}
}

137 #i‚de‡
__HAVE_ARCH_STRNCAT


147 * 
	$°∫ˇt
(*
de°
, c⁄° *
§c
, 
size_t
 
cou¡
)

149 *
tmp
 = 
de°
;

151 i‡(
cou¡
) {

152 *
de°
)

153 
de°
++;

154 (*
de°
++ = *
§c
++)) {

155 i‡(--
cou¡
 == 0) {

156 *
de°
 = '\0';

162  
tmp
;

163 
	}
}

166 #i‚de‡
__HAVE_ARCH_STRCMP


172 
	$°rcmp
(c⁄° * 
cs
,c⁄° * 
˘
)

174 sig√d 
__ªs
;

177 i‡((
__ªs
 = *
cs
 - *
˘
++) != 0 || !*cs++)

181  
__ªs
;

182 
	}
}

185 #i‚de‡
__HAVE_ARCH_STRNCMP


192 
	$°∫cmp
(c⁄° * 
cs
,c⁄° * 
˘
,
size_t
 
cou¡
)

194 sig√d 
__ªs
 = 0;

196 
cou¡
) {

197 i‡((
__ªs
 = *
cs
 - *
˘
++) != 0 || !*cs++)

199 
cou¡
--;

202  
__ªs
;

203 
	}
}

206 #i‚de‡
__HAVE_ARCH_STRCHR


212 * 
	$°rchr
(c⁄° * 
s
, 
c
)

214 ; *
s
 !(Ë
c
; ++s)

215 i‡(*
s
 == '\0')

216  
NULL
;

217  (*Ë
s
;

218 
	}
}

221 #i‚de‡
__HAVE_ARCH_STRRCHR


227 * 
	$°ºchr
(c⁄° * 
s
, 
c
)

229 c⁄° *
p
 = 
s
 + 
	`°æí
(s);

231 i‡(*
p
 =()
c
)

232  (*)
p
;

233 } --
p
 >
s
);

234  
NULL
;

235 
	}
}

238 #i‚de‡
__HAVE_ARCH_STRLEN


243 
size_t
 
	$°æí
(c⁄° * 
s
)

245 c⁄° *
sc
;

247 
sc
 = 
s
; *sc != '\0'; ++sc)

249  
sc
 - 
s
;

250 
	}
}

253 #i‚de‡
__HAVE_ARCH_STRNLEN


259 
size_t
 
	$°∫Àn
(c⁄° * 
s
, 
size_t
 
cou¡
)

261 c⁄° *
sc
;

263 
sc
 = 
s
; 
cou¡
-- && *sc != '\0'; ++sc)

265  
sc
 - 
s
;

266 
	}
}

269 #i‚de‡
__HAVE_ARCH_STRDUP


270 * 
	$°rdup
(c⁄° *
s
)

272 *
√w
;

274 i‡((
s
 =
NULL
) ||

275 ((
√w
 = 
	`mÆloc
 (
	`°æí
(
s
Ë+ 1)Ë=
NULL
) ) {

276  
NULL
;

279 
	`°r˝y
 (
√w
, 
s
);

280  
√w
;

281 
	}
}

284 #i‚de‡
__HAVE_ARCH_STRSPN


291 
size_t
 
	$°r•n
(c⁄° *
s
, c⁄° *
ac˚±
)

293 c⁄° *
p
;

294 c⁄° *
a
;

295 
size_t
 
cou¡
 = 0;

297 
p
 = 
s
; *p != '\0'; ++p) {

298 
a
 = 
ac˚±
; *a != '\0'; ++a) {

299 i‡(*
p
 =*
a
)

302 i‡(*
a
 == '\0')

303  
cou¡
;

304 ++
cou¡
;

307  
cou¡
;

308 
	}
}

311 #i‚de‡
__HAVE_ARCH_STRPBRK


317 * 
	$°Ωbrk
(c⁄° * 
cs
,c⁄° * 
˘
)

319 c⁄° *
sc1
,*
sc2
;

321  
sc1
 = 
cs
; *sc1 != '\0'; ++sc1) {

322  
sc2
 = 
˘
; *sc2 != '\0'; ++sc2) {

323 i‡(*
sc1
 =*
sc2
)

324  (*Ë
sc1
;

327  
NULL
;

328 
	}
}

331 #i‚de‡
__HAVE_ARCH_STRTOK


339 * 
	$°πok
(* 
s
,c⁄° * 
˘
)

341 *
sbegö
, *
£nd
;

343 
sbegö
 = 
s
 ? s : 
___°πok
;

344 i‡(!
sbegö
) {

345  
NULL
;

347 
sbegö
 +
	`°r•n
(sbegö,
˘
);

348 i‡(*
sbegö
 == '\0') {

349 
___°πok
 = 
NULL
;

350 –
NULL
 );

352 
£nd
 = 
	`°Ωbrk
–
sbegö
, 
˘
);

353 i‡(
£nd
 && *send != '\0')

354 *
£nd
++ = '\0';

355 
___°πok
 = 
£nd
;

356  (
sbegö
);

357 
	}
}

360 #i‚de‡
__HAVE_ARCH_STRSEP


372 * 
	$°r£p
(**
s
, c⁄° *
˘
)

374 *
sbegö
 = *
s
, *
íd
;

376 i‡(
sbegö
 =
NULL
)

377  
NULL
;

379 
íd
 = 
	`°Ωbrk
(
sbegö
, 
˘
);

380 i‡(
íd
)

381 *
íd
++ = '\0';

382 *
s
 = 
íd
;

384  
sbegö
;

385 
	}
}

388 #i‚de‡
__HAVE_ARCH_STRSWAB


396 *
	$°rswab
(c⁄° *
s
)

398 *
p
;

400 i‡((
NULL
 =
s
) || ('\0' == *s)) {

401  (
NULL
);

404 
p
 = ((*)
s
 + 1); '\0' != *p;Ö += 2) {

405 
tmp
;

406 
tmp
 = *(
p
-1);

407 *(
p
-1) = *p;

408 *
p
 = 
tmp
;

411  (*Ë
s
;

412 
	}
}

415 #i‚de‡
__HAVE_ARCH_MEMSET


424 * 
	$mem£t
(* 
s
,
c
,
size_t
 
cou¡
)

426 *
xs
 = (*Ë
s
;

428 
cou¡
--)

429 *
xs
++ = 
c
;

431  
s
;

432 
	}
}

435 #i‚de‡
__HAVE_ARCH_BCOPY


448 * 
	$bc›y
(c⁄° * 
§c
, * 
de°
, 
cou¡
)

450 *
tmp
 = 
de°
;

452 
cou¡
--)

453 *
tmp
++ = *
§c
++;

455  
de°
;

456 
	}
}

459 #i‚de‡
__HAVE_ARCH_MEMCPY


469 * 
	$mem˝y
(* 
de°
,c⁄° *
§c
,
size_t
 
cou¡
)

471 *
tmp
 = (*Ë
de°
, *
s
 = (*Ë
§c
;

473 
cou¡
--)

474 *
tmp
++ = *
s
++;

476  
de°
;

477 
	}
}

480 #i‚de‡
__HAVE_ARCH_MEMMOVE


489 * 
	$memmove
(* 
de°
,c⁄° *
§c
,
size_t
 
cou¡
)

491 *
tmp
, *
s
;

493 i‡(
de°
 <
§c
) {

494 
tmp
 = (*Ë
de°
;

495 
s
 = (*Ë
§c
;

496 
cou¡
--)

497 *
tmp
++ = *
s
++;

500 
tmp
 = (*Ë
de°
 + 
cou¡
;

501 
s
 = (*Ë
§c
 + 
cou¡
;

502 
cou¡
--)

503 *--
tmp
 = *--
s
;

506  
de°
;

507 
	}
}

510 #i‚de‡
__HAVE_ARCH_MEMCMP


517 
	$memcmp
(c⁄° * 
cs
,c⁄° * 
˘
,
size_t
 
cou¡
)

519 c⁄° *
su1
, *
su2
;

520 
ªs
 = 0;

522  
su1
 = 
cs
, 
su2
 = 
˘
; 0 < 
cou¡
; ++su1, ++su2, count--)

523 i‡((
ªs
 = *
su1
 - *
su2
) != 0)

525  
ªs
;

526 
	}
}

529 #i‚de‡
__HAVE_ARCH_MEMSCAN


539 * 
	$memsˇn
(* 
addr
, 
c
, 
size_t
 
size
)

541 * 
p
 = (*Ë
addr
;

543 
size
) {

544 i‡(*
p
 =
c
)

545  (*Ë
p
;

546 
p
++;

547 
size
--;

549  (*Ë
p
;

550 
	}
}

553 #i‚de‡
__HAVE_ARCH_STRSTR


559 * 
	$°r°r
(c⁄° * 
s1
,c⁄° * 
s2
)

561 
l1
, 
l2
;

563 
l2
 = 
	`°æí
(
s2
);

564 i‡(!
l2
)

565  (*Ë
s1
;

566 
l1
 = 
	`°æí
(
s1
);

567 
l1
 >
l2
) {

568 
l1
--;

569 i‡(!
	`memcmp
(
s1
,
s2
,
l2
))

570  (*Ë
s1
;

571 
s1
++;

573  
NULL
;

574 
	}
}

577 #i‚de‡
__HAVE_ARCH_MEMCHR


587 *
	$memchr
(c⁄° *
s
, 
c
, 
size_t
 
n
)

589 c⁄° *
p
 = 
s
;

590 
n
-- != 0) {

591 i‡(()
c
 =*
p
++) {

592  (*)(
p
-1);

595  
NULL
;

596 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/vsprintf.c

12 
	~<°d¨g.h
>

13 
	~<löux/ty≥s.h
>

14 
	~<löux/°rög.h
>

15 
	~<löux/˘y≥.h
>

17 
	~<comm⁄.h
>

18 #i‡!
deföed
 (
CONFIG_PANIC_HANG
)

19 
	~<comm™d.h
>

21 
do_ª£t
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[]);

24 
	$sim∂e_°πoul
(c⁄° *
˝
,**
ídp
,
ba£
)

26 
ªsu…
 = 0,
vÆue
;

28 i‡(*
˝
 == '0') {

29 
˝
++;

30 i‡((*
˝
 ='x'Ë&& 
	`isxdigô
(cp[1])) {

31 
ba£
 = 16;

32 
˝
++;

34 i‡(!
ba£
) {

35 
ba£
 = 8;

38 i‡(!
ba£
) {

39 
ba£
 = 10;

41 
	`isxdigô
(*
˝
Ë&& (
vÆue
 = 
	`isdigô
(*˝Ë? *˝-'0' : (
	`i¶owî
(*cp)

42 ? 
	`touµî
(*
˝
Ë: *˝)-'A'+10Ë< 
ba£
) {

43 
ªsu…
 =Ñesu…*
ba£
 + 
vÆue
;

44 
˝
++;

46 i‡(
ídp
)

47 *
ídp
 = (*)
˝
;

48  
ªsu…
;

49 
	}
}

51 
	$sim∂e_°πﬁ
(c⁄° *
˝
,**
ídp
,
ba£
)

53 if(*
˝
=='-')

54  -
	`sim∂e_°πoul
(
˝
+1,
ídp
,
ba£
);

55  
	`sim∂e_°πoul
(
˝
,
ídp
,
ba£
);

56 
	}
}

58 #ifde‡
CFG_64BIT_STRTOUL


59 
	$sim∂e_°πouŒ
 (c⁄° *
˝
, **
ídp
, 
ba£
)

61 
ªsu…
 = 0, 
vÆue
;

63 i‡(*
˝
 == '0') {

64 
˝
++;

65 i‡((*
˝
 ='x'Ë&& 
	`isxdigô
 (cp[1])) {

66 
ba£
 = 16;

67 
˝
++;

69 i‡(!
ba£
) {

70 
ba£
 = 8;

73 i‡(!
ba£
) {

74 
ba£
 = 10;

76 
	`isxdigô
 (*
˝
Ë&& (
vÆue
 = 
	`isdigô
 (*cp)

77 ? *
˝
 - '0'

78 : (
	`i¶owî
 (*
˝
Ë? 
	`touµî
 (*˝Ë: *˝Ë- 'A' + 10Ë< 
ba£
) {

79 
ªsu…
 =Ñesu… * 
ba£
 + 
vÆue
;

80 
˝
++;

82 i‡(
ídp
)

83 *
ídp
 = (*Ë
˝
;

84  
ªsu…
;

85 
	}
}

89 
	#is_digô
(
c
Ë((cË>'0' && (cË<'9')

	)

91 
	$skù_©oi
(c⁄° **
s
)

93 
i
=0;

95 
	`is_digô
(**
s
))

96 
i
 = i*10 + *((*
s
)++) - '0';

97  
i
;

98 
	}
}

100 
	#ZEROPAD
 1

	)

101 
	#SIGN
 2

	)

102 
	#PLUS
 4

	)

103 
	#SPACE
 8

	)

104 
	#LEFT
 16

	)

105 
	#SPECIAL
 32

	)

106 
	#LARGE
 64

	)

108 
	#do_div
(
n
,
ba£
) ({ \

109 
__ªs
; \

110 
__ªs
 = ((Ë
n
Ë% (Ë
ba£
; \

111 
n
 = ((ËnË/ (Ë
ba£
; \

112 
__ªs
; \

113 })

	)

115 #ifde‡
CFG_64BIT_VSPRINTF


116 * 
	$numbî
(* 
°r
, 
num
, 
ba£
, 
size
, 
¥ecisi⁄
 ,
ty≥
)

118 * 
	$numbî
(* 
°r
, 
num
, 
ba£
, 
size
, 
¥ecisi⁄
 ,
ty≥
)

121 
c
,
sign
,
tmp
[66];

122 c⁄° *
digôs
="0123456789abcdefghijklmnopqrstuvwxyz";

123 
i
;

125 i‡(
ty≥
 & 
LARGE
)

126 
digôs
 = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

127 i‡(
ty≥
 & 
LEFT
)

128 
ty≥
 &~
ZEROPAD
;

129 i‡(
ba£
 < 2 || base > 36)

131 
c
 = (
ty≥
 & 
ZEROPAD
) ? '0' : ' ';

132 
sign
 = 0;

133 i‡(
ty≥
 & 
SIGN
) {

134 i‡(
num
 < 0) {

135 
sign
 = '-';

136 
num
 = -num;

137 
size
--;

138 } i‡(
ty≥
 & 
PLUS
) {

139 
sign
 = '+';

140 
size
--;

141 } i‡(
ty≥
 & 
SPACE
) {

142 
sign
 = ' ';

143 
size
--;

146 i‡(
ty≥
 & 
SPECIAL
) {

147 i‡(
ba£
 == 16)

148 
size
 -= 2;

149 i‡(
ba£
 == 8)

150 
size
--;

152 
i
 = 0;

153 i‡(
num
 == 0)

154 
tmp
[
i
++]='0';

155 
num
 != 0)

156 
tmp
[
i
++] = 
digôs
[
	`do_div
(
num
,
ba£
)];

157 i‡(
i
 > 
¥ecisi⁄
)

158 
¥ecisi⁄
 = 
i
;

159 
size
 -
¥ecisi⁄
;

160 i‡(!(
ty≥
&(
ZEROPAD
+
LEFT
)))

161 
size
-->0)

162 *
°r
++ = ' ';

163 i‡(
sign
)

164 *
°r
++ = 
sign
;

165 i‡(
ty≥
 & 
SPECIAL
) {

166 i‡(
ba£
==8)

167 *
°r
++ = '0';

168 i‡(
ba£
==16) {

169 *
°r
++ = '0';

170 *
°r
++ = 
digôs
[33];

173 i‡(!(
ty≥
 & 
LEFT
))

174 
size
-- > 0)

175 *
°r
++ = 
c
;

176 
i
 < 
¥ecisi⁄
--)

177 *
°r
++ = '0';

178 
i
-- > 0)

179 *
°r
++ = 
tmp
[
i
];

180 
size
-- > 0)

181 *
°r
++ = ' ';

182  
°r
;

183 
	}
}

186 
•rötf
(* 
buf
, c⁄° *
fmt
, ...);

188 
	$v•rötf
(*
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

190 
Àn
;

191 #ifde‡
CFG_64BIT_VSPRINTF


192 
num
;

194 
num
;

196 
i
, 
ba£
;

197 * 
°r
;

198 c⁄° *
s
;

200 
Êags
;

202 
fõld_width
;

203 
¥ecisi⁄
;

205 
quÆifõr
;

207 
°r
=
buf
 ; *
fmt
 ; ++fmt) {

208 i‡(*
fmt
 != '%') {

209 *
°r
++ = *
fmt
;

214 
Êags
 = 0;

215 
ª≥©
:

216 ++
fmt
;

217 *
fmt
) {

218 '-': 
Êags
 |
LEFT
; 
ª≥©
;

219 '+': 
Êags
 |
PLUS
; 
ª≥©
;

220 ' ': 
Êags
 |
SPACE
; 
ª≥©
;

221 '#': 
Êags
 |
SPECIAL
; 
ª≥©
;

222 '0': 
Êags
 |
ZEROPAD
; 
ª≥©
;

226 
fõld_width
 = -1;

227 i‡(
	`is_digô
(*
fmt
))

228 
fõld_width
 = 
	`skù_©oi
(&
fmt
);

229 i‡(*
fmt
 == '*') {

230 ++
fmt
;

232 
fõld_width
 = 
	`va_¨g
(
¨gs
, );

233 i‡(
fõld_width
 < 0) {

234 
fõld_width
 = -field_width;

235 
Êags
 |
LEFT
;

240 
¥ecisi⁄
 = -1;

241 i‡(*
fmt
 == '.') {

242 ++
fmt
;

243 i‡(
	`is_digô
(*
fmt
))

244 
¥ecisi⁄
 = 
	`skù_©oi
(&
fmt
);

245 i‡(*
fmt
 == '*') {

246 ++
fmt
;

248 
¥ecisi⁄
 = 
	`va_¨g
(
¨gs
, );

250 i‡(
¥ecisi⁄
 < 0)

251 
¥ecisi⁄
 = 0;

255 
quÆifõr
 = -1;

256 i‡(*
fmt
 == 'h' || *fmt == 'l' || *fmt == 'q') {

257 
quÆifõr
 = *
fmt
;

258 ++
fmt
;

262 
ba£
 = 10;

264 *
fmt
) {

266 i‡(!(
Êags
 & 
LEFT
))

267 --
fõld_width
 > 0)

268 *
°r
++ = ' ';

269 *
°r
++ = (Ë
	`va_¨g
(
¨gs
, );

270 --
fõld_width
 > 0)

271 *
°r
++ = ' ';

275 
s
 = 
	`va_¨g
(
¨gs
, *);

276 i‡(!
s
)

277 
s
 = "<NULL>";

279 
Àn
 = 
	`°∫Àn
(
s
, 
¥ecisi⁄
);

281 i‡(!(
Êags
 & 
LEFT
))

282 
Àn
 < 
fõld_width
--)

283 *
°r
++ = ' ';

284 
i
 = 0; i < 
Àn
; ++i)

285 *
°r
++ = *
s
++;

286 
Àn
 < 
fõld_width
--)

287 *
°r
++ = ' ';

291 i‡(
fõld_width
 == -1) {

292 
fõld_width
 = 2*(*);

293 
Êags
 |
ZEROPAD
;

295 
°r
 = 
	`numbî
(str,

296 (Ë
	`va_¨g
(
¨gs
, *), 16,

297 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

302 i‡(
quÆifõr
 == 'l') {

303 * 
ù
 = 
	`va_¨g
(
¨gs
, *);

304 *
ù
 = (
°r
 - 
buf
);

306 * 
ù
 = 
	`va_¨g
(
¨gs
, *);

307 *
ù
 = (
°r
 - 
buf
);

312 *
°r
++ = '%';

317 
ba£
 = 8;

321 
Êags
 |
LARGE
;

323 
ba£
 = 16;

328 
Êags
 |
SIGN
;

333 *
°r
++ = '%';

334 i‡(*
fmt
)

335 *
°r
++ = *
fmt
;

337 --
fmt
;

340 #ifde‡
CFG_64BIT_VSPRINTF


341 i‡(
quÆifõr
 == 'q')

342 
num
 = 
	`va_¨g
(
¨gs
, );

345 i‡(
quÆifõr
 == 'l')

346 
num
 = 
	`va_¨g
(
¨gs
, );

347 i‡(
quÆifõr
 == 'h') {

348 
num
 = (Ë
	`va_¨g
(
¨gs
, );

349 i‡(
Êags
 & 
SIGN
)

350 
num
 = ()Çum;

351 } i‡(
Êags
 & 
SIGN
)

352 
num
 = 
	`va_¨g
(
¨gs
, );

354 
num
 = 
	`va_¨g
(
¨gs
, );

355 
°r
 = 
	`numbî
(°r, 
num
, 
ba£
, 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

357 *
°r
 = '\0';

358  
°r
-
buf
;

359 
	}
}

361 
	$•rötf
(* 
buf
, c⁄° *
fmt
, ...)

363 
va_li°
 
¨gs
;

364 
i
;

366 
	`va_°¨t
(
¨gs
, 
fmt
);

367 
i
=
	`v•rötf
(
buf
,
fmt
,
¨gs
);

368 
	`va_íd
(
¨gs
);

369  
i
;

370 
	}
}

373 
	$∑nic
(c⁄° *
fmt
, ...)

375 
va_li°
 
¨gs
;

376 
	`va_°¨t
(
¨gs
, 
fmt
);

377 
	`v¥ötf
(
fmt
, 
¨gs
);

378 
	`putc
('\n');

379 
	`va_íd
(
¨gs
);

380 #i‡
	`deföed
 (
CONFIG_PANIC_HANG
)

381 
	`h™g
();

383 
	`udñay
 (100000);

384 
	`do_ª£t
 (
NULL
, 0, 0, NULL);

386 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/xz_dec_bcj.c

11 
	~"xz_¥iv©e.h
"

17 #ifde‡
XZ_DEC_BCJ


19 
	sxz_dec_bcj
 {

22 
	mBCJ_X86
 = 4,

23 
	mBCJ_POWERPC
 = 5,

24 
	mBCJ_IA64
 = 6,

25 
	mBCJ_ARM
 = 7,

26 
	mBCJ_ARMTHUMB
 = 8,

27 
	mBCJ_SPARC
 = 9

28 } 
	mty≥
;

35 
xz_ªt
 
	mªt
;

38 
boﬁ
 
	msögÀ_ˇŒ
;

45 
uöt32_t
 
	mpos
;

48 
uöt32_t
 
	mx86_¥ev_mask
;

51 
uöt8_t
 *
	mout
;

52 
size_t
 
	mout_pos
;

53 
size_t
 
	mout_size
;

57 
size_t
 
	mfûãªd
;

60 
size_t
 
	msize
;

74 
uöt8_t
 
	mbuf
[16];

75 } 
	mãmp
;

78 #ifde‡
XZ_DEC_X86


83 
	#bcj_x86_ã°_msbyã
(
b
Ë((bË=0x00 || (bË=0xFF)

	)

85 
noölöe_f‹_°ack
 
size_t
 
XZ_FUNC
 
	$bcj_x86
(

86 
xz_dec_bcj
 *
s
, 
uöt8_t
 *
buf
, 
size_t
 
size
)

88 c⁄° 
boﬁ
 
mask_to_Ælowed_°©us
[8]

89 { 
åue
,Årue,Årue, 
Ál£
,Årue, false, false, false };

91 c⁄° 
uöt8_t
 
mask_to_bô_num
[8] = { 0, 1, 2, 2, 3, 3, 3, 3 };

93 
size_t
 
i
;

94 
size_t
 
¥ev_pos
 = (size_t)-1;

95 
uöt32_t
 
¥ev_mask
 = 
s
->
x86_¥ev_mask
;

96 
uöt32_t
 
§c
;

97 
uöt32_t
 
de°
;

98 
uöt32_t
 
j
;

99 
uöt8_t
 
b
;

101 i‡(
size
 <= 4)

104 
size
 -= 4;

105 
i
 = 0; i < 
size
; ++i) {

106 i‡((
buf
[
i
] & 0xFE) != 0xE8)

109 
¥ev_pos
 = 
i
 -Örev_pos;

110 i‡(
¥ev_pos
 > 3) {

111 
¥ev_mask
 = 0;

113 
¥ev_mask
 = (¥ev_mask << (
¥ev_pos
 - 1)) & 7;

114 i‡(
¥ev_mask
 != 0) {

115 
b
 = 
buf
[
i
 + 4 - 
mask_to_bô_num
[
¥ev_mask
]];

116 i‡(!
mask_to_Ælowed_°©us
[
¥ev_mask
]

117 || 
	`bcj_x86_ã°_msbyã
(
b
)) {

118 
¥ev_pos
 = 
i
;

119 
¥ev_mask
 = (prev_mask << 1) | 1;

125 
¥ev_pos
 = 
i
;

127 i‡(
	`bcj_x86_ã°_msbyã
(
buf
[
i
 + 4])) {

128 
§c
 = (
uöt32_t
 *)
	`gë_u«lig√d_À32
(
buf
 + 
i
 + 1);

130 
åue
) {

131 
de°
 = 
§c
 - (
s
->
pos
 + (
uöt32_t
)
i
 + 5);

132 i‡(
¥ev_mask
 == 0)

135 
j
 = 
mask_to_bô_num
[
¥ev_mask
] * 8;

136 
b
 = (
uöt8_t
)(
de°
 >> (24 - 
j
));

137 i‡(!
	`bcj_x86_ã°_msbyã
(
b
))

140 
§c
 = 
de°
 ^ (((
uöt32_t
)1 << (32 - 
j
)) - 1);

143 
de°
 &= 0x01FFFFFF;

144 
de°
 |(
uöt32_t
)0 - (dest & 0x01000000);

145 
	`put_u«lig√d_À32
(
de°
, 
buf
 + 
i
 + 1);

147 
i
 += 4;

149 
¥ev_mask
 = (prev_mask << 1) | 1;

153 
¥ev_pos
 = 
i
 -Örev_pos;

154 
s
->
x86_¥ev_mask
 = 
¥ev_pos
 > 3 ? 0 : 
¥ev_mask
 << (prev_pos - 1);

155  
i
;

156 
	}
}

159 #ifde‡
XZ_DEC_POWERPC


160 
noölöe_f‹_°ack
 
size_t
 
XZ_FUNC
 
	$bcj_powîpc
(

161 
xz_dec_bcj
 *
s
, 
uöt8_t
 *
buf
, 
size_t
 
size
)

163 
size_t
 
i
;

164 
uöt32_t
 
ö°r
;

166 
i
 = 0; i + 4 <
size
; i += 4) {

167 
ö°r
 = 
	`gë_u«lig√d_be32
(
buf
 + 
i
);

168 i‡((
ö°r
 & 0xFC000003) == 0x48000001) {

169 
ö°r
 &= 0x03FFFFFC;

170 
ö°r
 -
s
->
pos
 + (
uöt32_t
)
i
;

171 
ö°r
 &= 0x03FFFFFC;

172 
ö°r
 |= 0x48000001;

173 
	`put_u«lig√d_be32
(
ö°r
, 
buf
 + 
i
);

177  
i
;

178 
	}
}

181 #ifde‡
XZ_DEC_IA64


182 
noölöe_f‹_°ack
 
size_t
 
XZ_FUNC
 
	$bcj_ü64
(

183 
xz_dec_bcj
 *
s
, 
uöt8_t
 *
buf
, 
size_t
 
size
)

185 c⁄° 
uöt8_t
 
bønch_èbÀ
[32] = {

199 
size_t
 
i
;

200 
size_t
 
j
;

203 
uöt32_t
 
¶Ÿ
;

206 
uöt32_t
 
bô_pos
;

209 
uöt32_t
 
byã_pos
;

210 
uöt32_t
 
bô_ªs
;

213 
uöt32_t
 
addr
;

216 
uöt32_t
 
mask
;

219 
uöt64_t
 
ö°r
;

222 
uöt64_t
 
n‹m
;

224 
i
 = 0; i + 16 <
size
; i += 16) {

225 
mask
 = 
bønch_èbÀ
[
buf
[
i
] & 0x1F];

226 
¶Ÿ
 = 0, 
bô_pos
 = 5; slot < 3; ++slot, bit_pos += 41) {

227 i‡(((
mask
 >> 
¶Ÿ
) & 1) == 0)

230 
byã_pos
 = 
bô_pos
 >> 3;

231 
bô_ªs
 = 
bô_pos
 & 7;

232 
ö°r
 = 0;

233 
j
 = 0; j < 6; ++j)

234 
ö°r
 |(
uöt64_t
)(
buf
[
i
 + 
j
 + 
byã_pos
])

235 << (8 * 
j
);

237 
n‹m
 = 
ö°r
 >> 
bô_ªs
;

239 i‡(((
n‹m
 >> 37) & 0x0F) == 0x05

240 && ((
n‹m
 >> 9) & 0x07) == 0) {

241 
addr
 = (
n‹m
 >> 13) & 0x0FFFFF;

242 
addr
 |((
uöt32_t
)(
n‹m
 >> 36) & 1) << 20;

243 
addr
 <<= 4;

244 
addr
 -
s
->
pos
 + (
uöt32_t
)
i
;

245 
addr
 >>= 4;

247 
n‹m
 &~((
uöt64_t
)0x8FFFFF << 13);

248 
n‹m
 |(
uöt64_t
)(
addr
 & 0x0FFFFF) << 13;

249 
n‹m
 |(
uöt64_t
)(
addr
 & 0x100000)

252 
ö°r
 &(1 << 
bô_ªs
) - 1;

253 
ö°r
 |
n‹m
 << 
bô_ªs
;

255 
j
 = 0; j < 6; j++)

256 
buf
[
i
 + 
j
 + 
byã_pos
]

257 (
uöt8_t
)(
ö°r
 >> (8 * 
j
));

262  
i
;

263 
	}
}

266 #ifde‡
XZ_DEC_ARM


267 
noölöe_f‹_°ack
 
size_t
 
XZ_FUNC
 
	$bcj_¨m
(

268 
xz_dec_bcj
 *
s
, 
uöt8_t
 *
buf
, 
size_t
 
size
)

270 
size_t
 
i
;

271 
uöt32_t
 
addr
;

273 
i
 = 0; i + 4 <
size
; i += 4) {

274 i‡(
buf
[
i
 + 3] == 0xEB) {

275 
addr
 = (
uöt32_t
)
buf
[
i
] | ((uint32_t)buf[i + 1] << 8)

276 | ((
uöt32_t
)
buf
[
i
 + 2] << 16);

277 
addr
 <<= 2;

278 
addr
 -
s
->
pos
 + (
uöt32_t
)
i
 + 8;

279 
addr
 >>= 2;

280 
buf
[
i
] = (
uöt8_t
)
addr
;

281 
buf
[
i
 + 1] = (
uöt8_t
)(
addr
 >> 8);

282 
buf
[
i
 + 2] = (
uöt8_t
)(
addr
 >> 16);

286  
i
;

287 
	}
}

290 #ifde‡
XZ_DEC_ARMTHUMB


291 
noölöe_f‹_°ack
 
size_t
 
XZ_FUNC
 
	$bcj_¨mthumb
(

292 
xz_dec_bcj
 *
s
, 
uöt8_t
 *
buf
, 
size_t
 
size
)

294 
size_t
 
i
;

295 
uöt32_t
 
addr
;

297 
i
 = 0; i + 4 <
size
; i += 2) {

298 i‡((
buf
[
i
 + 1] & 0xF8) == 0xF0

299 && (
buf
[
i
 + 3] & 0xF8) == 0xF8) {

300 
addr
 = (((
uöt32_t
)
buf
[
i
 + 1] & 0x07) << 19)

301 | ((
uöt32_t
)
buf
[
i
] << 11)

302 | (((
uöt32_t
)
buf
[
i
 + 3] & 0x07) << 8)

303 | (
uöt32_t
)
buf
[
i
 + 2];

304 
addr
 <<= 1;

305 
addr
 -
s
->
pos
 + (
uöt32_t
)
i
 + 4;

306 
addr
 >>= 1;

307 
buf
[
i
 + 1] = (
uöt8_t
)(0xF0 | ((
addr
 >> 19) & 0x07));

308 
buf
[
i
] = (
uöt8_t
)(
addr
 >> 11);

309 
buf
[
i
 + 3] = (
uöt8_t
)(0xF8 | ((
addr
 >> 8) & 0x07));

310 
buf
[
i
 + 2] = (
uöt8_t
)
addr
;

311 
i
 += 2;

315  
i
;

316 
	}
}

319 #ifde‡
XZ_DEC_SPARC


320 
noölöe_f‹_°ack
 
size_t
 
XZ_FUNC
 
	$bcj_•¨c
(

321 
xz_dec_bcj
 *
s
, 
uöt8_t
 *
buf
, 
size_t
 
size
)

323 
size_t
 
i
;

324 
uöt32_t
 
ö°r
;

326 
i
 = 0; i + 4 <
size
; i += 4) {

327 
ö°r
 = 
	`gë_u«lig√d_be32
(
buf
 + 
i
);

328 i‡((
ö°r
 >> 22) == 0x100 || (instr >> 22) == 0x1FF) {

329 
ö°r
 <<= 2;

330 
ö°r
 -
s
->
pos
 + (
uöt32_t
)
i
;

331 
ö°r
 >>= 2;

332 
ö°r
 = ((
uöt32_t
)0x40000000 - (instr & 0x400000))

333 | 0x40000000 | (
ö°r
 & 0x3FFFFF);

334 
	`put_u«lig√d_be32
(
ö°r
, 
buf
 + 
i
);

338  
i
;

339 
	}
}

350 
XZ_FUNC
 
	$bcj_≠∂y
(
xz_dec_bcj
 *
s
,

351 
uöt8_t
 *
buf
, 
size_t
 *
pos
, size_à
size
)

353 
size_t
 
fûãªd
;

355 
buf
 +*
pos
;

356 
size
 -*
pos
;

358 
s
->
ty≥
) {

359 #ifde‡
XZ_DEC_X86


360 
BCJ_X86
:

361 
fûãªd
 = 
	`bcj_x86
(
s
, 
buf
, 
size
);

364 #ifde‡
XZ_DEC_POWERPC


365 
BCJ_POWERPC
:

366 
fûãªd
 = 
	`bcj_powîpc
(
s
, 
buf
, 
size
);

369 #ifde‡
XZ_DEC_IA64


370 
BCJ_IA64
:

371 
fûãªd
 = 
	`bcj_ü64
(
s
, 
buf
, 
size
);

374 #ifde‡
XZ_DEC_ARM


375 
BCJ_ARM
:

376 
fûãªd
 = 
	`bcj_¨m
(
s
, 
buf
, 
size
);

379 #ifde‡
XZ_DEC_ARMTHUMB


380 
BCJ_ARMTHUMB
:

381 
fûãªd
 = 
	`bcj_¨mthumb
(
s
, 
buf
, 
size
);

384 #ifde‡
XZ_DEC_SPARC


385 
BCJ_SPARC
:

386 
fûãªd
 = 
	`bcj_•¨c
(
s
, 
buf
, 
size
);

391 
fûãªd
 = 0;

395 *
pos
 +
fûãªd
;

396 
s
->
pos
 +
fûãªd
;

397 
	}
}

404 
XZ_FUNC
 
	$bcj_Êush
(
xz_dec_bcj
 *
s
, 
xz_buf
 *
b
)

406 
size_t
 
c›y_size
;

408 
c›y_size
 = 
	`mö_t
(
size_t
, 
s
->
ãmp
.
fûãªd
, 
b
->
out_size
 - b->
out_pos
);

409 
	`mem˝y
(
b
->
out
 + b->
out_pos
, 
s
->
ãmp
.
buf
, 
c›y_size
);

410 
b
->
out_pos
 +
c›y_size
;

412 
s
->
ãmp
.
fûãªd
 -
c›y_size
;

413 
s
->
ãmp
.
size
 -
c›y_size
;

414 
	`memmove
(
s
->
ãmp
.
buf
, s->ãmp.bu‡+ 
c›y_size
, s->ãmp.
size
);

415 
	}
}

422 
XZ_EXTERN
 
xz_ªt
 
XZ_FUNC
 
	$xz_dec_bcj_run
(
xz_dec_bcj
 *
s
,

423 
xz_dec_lzma2
 *
lzma2
, 
xz_buf
 *
b
)

425 
size_t
 
out_°¨t
;

432 i‡(
s
->
ãmp
.
fûãªd
 > 0) {

433 
	`bcj_Êush
(
s
, 
b
);

434 i‡(
s
->
ãmp
.
fûãªd
 > 0)

435  
XZ_OK
;

437 i‡(
s
->
ªt
 =
XZ_STREAM_END
)

438  
XZ_STREAM_END
;

449 i‡(
s
->
ãmp
.
size
 < 
b
->
out_size
 - b->
out_pos
) {

450 
out_°¨t
 = 
b
->
out_pos
;

451 
	`mem˝y
(
b
->
out
 + b->
out_pos
, 
s
->
ãmp
.
buf
, s->ãmp.
size
);

452 
b
->
out_pos
 +
s
->
ãmp
.
size
;

454 
s
->
ªt
 = 
	`xz_dec_lzma2_run
(
lzma2
, 
b
);

455 i‡(
s
->
ªt
 !
XZ_STREAM_END


456 && (
s
->
ªt
 !
XZ_OK
 || s->
sögÀ_ˇŒ
))

457  
s
->
ªt
;

459 
	`bcj_≠∂y
(
s
, 
b
->
out
, &
out_°¨t
, b->
out_pos
);

466 i‡(
s
->
ªt
 =
XZ_STREAM_END
)

467  
XZ_STREAM_END
;

469 
s
->
ãmp
.
size
 = 
b
->
out_pos
 - 
out_°¨t
;

470 
b
->
out_pos
 -
s
->
ãmp
.
size
;

471 
	`mem˝y
(
s
->
ãmp
.
buf
, 
b
->
out
 + b->
out_pos
, s->ãmp.
size
);

481 i‡(
s
->
ãmp
.
size
 > 0) {

483 
s
->
out
 = 
b
->out;

484 
s
->
out_pos
 = 
b
->out_pos;

485 
s
->
out_size
 = 
b
->out_size;

486 
b
->
out
 = 
s
->
ãmp
.
buf
;

487 
b
->
out_pos
 = 
s
->
ãmp
.
size
;

488 
b
->
out_size
 = (
s
->
ãmp
.
buf
);

490 
s
->
ªt
 = 
	`xz_dec_lzma2_run
(
lzma2
, 
b
);

492 
s
->
ãmp
.
size
 = 
b
->
out_pos
;

493 
b
->
out
 = 
s
->out;

494 
b
->
out_pos
 = 
s
->out_pos;

495 
b
->
out_size
 = 
s
->out_size;

497 i‡(
s
->
ªt
 !
XZ_OK
 && s->ªà!
XZ_STREAM_END
)

498  
s
->
ªt
;

500 
	`bcj_≠∂y
(
s
, s->
ãmp
.
buf
, &s->ãmp.
fûãªd
, s->ãmp.
size
);

507 i‡(
s
->
ªt
 =
XZ_STREAM_END
)

508 
s
->
ãmp
.
fûãªd
 = s->ãmp.
size
;

510 
	`bcj_Êush
(
s
, 
b
);

511 i‡(
s
->
ãmp
.
fûãªd
 > 0)

512  
XZ_OK
;

515  
s
->
ªt
;

516 
	}
}

518 
XZ_EXTERN
 
xz_dec_bcj
 * 
XZ_FUNC
 
	$xz_dec_bcj_¸óã
(
boﬁ
 
sögÀ_ˇŒ
)

520 
xz_dec_bcj
 *
s
 = 
	`kmÆloc
((*s), 
GFP_KERNEL
);

521 i‡(
s
 !
NULL
)

522 
s
->
sögÀ_ˇŒ
 = single_call;

524  
s
;

525 
	}
}

527 
XZ_EXTERN
 
xz_ªt
 
XZ_FUNC
 
	$xz_dec_bcj_ª£t
(

528 
xz_dec_bcj
 *
s
, 
uöt8_t
 
id
)

530 
id
) {

531 #ifde‡
XZ_DEC_X86


532 
BCJ_X86
:

534 #ifde‡
XZ_DEC_POWERPC


535 
BCJ_POWERPC
:

537 #ifde‡
XZ_DEC_IA64


538 
BCJ_IA64
:

540 #ifde‡
XZ_DEC_ARM


541 
BCJ_ARM
:

543 #ifde‡
XZ_DEC_ARMTHUMB


544 
BCJ_ARMTHUMB
:

546 #ifde‡
XZ_DEC_SPARC


547 
BCJ_SPARC
:

553  
XZ_OPTIONS_ERROR
;

556 
s
->
ty≥
 = 
id
;

557 
s
->
ªt
 = 
XZ_OK
;

558 
s
->
pos
 = 0;

559 
s
->
x86_¥ev_mask
 = 0;

560 
s
->
ãmp
.
fûãªd
 = 0;

561 
s
->
ãmp
.
size
 = 0;

563  
XZ_OK
;

564 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/xz_dec_lzma2.c

11 
	~"xz_¥iv©e.h
"

12 
	~"xz_lzma2.h
"

17 
	#RC_INIT_BYTES
 5

	)

26 
	#LZMA_IN_REQUIRED
 21

	)

44 
	sdi˘i⁄¨y
 {

46 
uöt8_t
 *
	mbuf
;

49 
size_t
 
	m°¨t
;

52 
size_t
 
	mpos
;

58 
size_t
 
	mfuŒ
;

61 
size_t
 
	mlimô
;

68 
size_t
 
	míd
;

75 
uöt32_t
 
	msize
;

81 
uöt32_t
 
	msize_max
;

88 
uöt32_t
 
	mÆloˇãd
;

91 
xz_mode
 
	mmode
;

95 
	src_dec
 {

96 
uöt32_t
 
	mønge
;

97 
uöt32_t
 
	mcode
;

103 
uöt32_t
 
	möô_byãs_À·
;

109 c⁄° 
uöt8_t
 *
	mö
;

110 
size_t
 
	mö_pos
;

111 
size_t
 
	mö_limô
;

115 
	slzma_Àn_dec
 {

117 
uöt16_t
 
	mchoi˚
;

120 
uöt16_t
 
	mchoi˚2
;

123 
uöt16_t
 
	mlow
[
POS_STATES_MAX
][
LEN_LOW_SYMBOLS
];

126 
uöt16_t
 
	mmid
[
POS_STATES_MAX
][
LEN_MID_SYMBOLS
];

129 
uöt16_t
 
	mhigh
[
LEN_HIGH_SYMBOLS
];

132 
	slzma_dec
 {

134 
uöt32_t
 
	mªp0
;

135 
uöt32_t
 
	mªp1
;

136 
uöt32_t
 
	mªp2
;

137 
uöt32_t
 
	mªp3
;

140 
lzma_°©e
 
	m°©e
;

146 
uöt32_t
 
	mÀn
;

154 
uöt32_t
 
	mlc
;

155 
uöt32_t
 
	mlôîÆ_pos_mask
;

156 
uöt32_t
 
	mpos_mask
;

159 
uöt16_t
 
	mis_m©ch
[
STATES
][
POS_STATES_MAX
];

162 
uöt16_t
 
	mis_ªp
[
STATES
];

168 
uöt16_t
 
	mis_ªp0
[
STATES
];

174 
uöt16_t
 
	mis_ªp1
[
STATES
];

177 
uöt16_t
 
	mis_ªp2
[
STATES
];

183 
uöt16_t
 
	mis_ªp0_l⁄g
[
STATES
][
POS_STATES_MAX
];

190 
uöt16_t
 
	mdi°_¶Ÿ
[
DIST_STATES
][
DIST_SLOTS
];

196 
uöt16_t
 
	mdi°_•ecül
[
FULL_DISTANCES
 - 
DIST_MODEL_END
];

202 
uöt16_t
 
	mdi°_Æign
[
ALIGN_SIZE
];

205 
lzma_Àn_dec
 
	mm©ch_Àn_dec
;

208 
lzma_Àn_dec
 
	mªp_Àn_dec
;

211 
uöt16_t
 
	mlôîÆ
[
LITERAL_CODERS_MAX
][
LITERAL_CODER_SIZE
];

214 
	slzma2_dec
 {

216 
	elzma2_£q
 {

217 
	mSEQ_CONTROL
,

218 
	mSEQ_UNCOMPRESSED_1
,

219 
	mSEQ_UNCOMPRESSED_2
,

220 
	mSEQ_COMPRESSED_0
,

221 
	mSEQ_COMPRESSED_1
,

222 
	mSEQ_PROPERTIES
,

223 
	mSEQ_LZMA_PREPARE
,

224 
	mSEQ_LZMA_RUN
,

225 
	mSEQ_COPY


226 } 
	m£quí˚
;

229 
lzma2_£q
 
	m√xt_£quí˚
;

232 
uöt32_t
 
	muncom¥es£d
;

238 
uöt32_t
 
	mcom¥es£d
;

244 
boﬁ
 
	m√ed_di˘_ª£t
;

250 
boﬁ
 
	m√ed_¥›s
;

253 
	sxz_dec_lzma2
 {

263 
rc_dec
 
	mrc
;

264 
di˘i⁄¨y
 
	mdi˘
;

265 
lzma2_dec
 
	mlzma2
;

266 
lzma_dec
 
	mlzma
;

273 
uöt32_t
 
	msize
;

274 
uöt8_t
 
	mbuf
[3 * 
LZMA_IN_REQUIRED
];

275 } 
	mãmp
;

286 
XZ_FUNC
 
	$di˘_ª£t
(
di˘i⁄¨y
 *
di˘
, 
xz_buf
 *
b
)

288 i‡(
	`DEC_IS_SINGLE
(
di˘
->
mode
)) {

289 
di˘
->
buf
 = 
b
->
out
 + b->
out_pos
;

290 
di˘
->
íd
 = 
b
->
out_size
 - b->
out_pos
;

293 
di˘
->
°¨t
 = 0;

294 
di˘
->
pos
 = 0;

295 
di˘
->
limô
 = 0;

296 
di˘
->
fuŒ
 = 0;

297 
	}
}

300 
XZ_FUNC
 
	$di˘_limô
(
di˘i⁄¨y
 *
di˘
, 
size_t
 
out_max
)

302 i‡(
di˘
->
íd
 - di˘->
pos
 <
out_max
)

303 
di˘
->
limô
 = di˘->
íd
;

305 
di˘
->
limô
 = di˘->
pos
 + 
out_max
;

306 
	}
}

309 
boﬁ
 
XZ_FUNC
 
	$di˘_has_•a˚
(c⁄° 
di˘i⁄¨y
 *
di˘
)

311  
di˘
->
pos
 < di˘->
limô
;

312 
	}
}

320 
ölöe
 
uöt32_t
 
XZ_FUNC
 
	$di˘_gë
(

321 c⁄° 
di˘i⁄¨y
 *
di˘
, 
uöt32_t
 
di°
)

323 
size_t
 
off£t
 = 
di˘
->
pos
 - 
di°
 - 1;

325 i‡(
di°
 >
di˘
->
pos
)

326 
off£t
 +
di˘
->
íd
;

328  
di˘
->
fuŒ
 > 0 ? di˘->
buf
[
off£t
] : 0;

329 
	}
}

334 
ölöe
 
XZ_FUNC
 
	$di˘_put
(
di˘i⁄¨y
 *
di˘
, 
uöt8_t
 
byã
)

336 
di˘
->
buf
[di˘->
pos
++] = 
byã
;

338 i‡(
di˘
->
fuŒ
 < di˘->
pos
)

339 
di˘
->
fuŒ
 = di˘->
pos
;

340 
	}
}

347 
boﬁ
 
XZ_FUNC
 
	$di˘_ª≥©
(

348 
di˘i⁄¨y
 *
di˘
, 
uöt32_t
 *
Àn
, uöt32_à
di°
)

350 
size_t
 
back
;

351 
uöt32_t
 
À·
;

353 i‡(
di°
 >
di˘
->
fuŒ
 || di° >di˘->
size
)

354  
Ál£
;

356 
À·
 = 
	`mö_t
(
size_t
, 
di˘
->
limô
 - di˘->
pos
, *
Àn
);

357 *
Àn
 -
À·
;

359 
back
 = 
di˘
->
pos
 - 
di°
 - 1;

360 i‡(
di°
 >
di˘
->
pos
)

361 
back
 +
di˘
->
íd
;

364 
di˘
->
buf
[di˘->
pos
++] = di˘->buf[
back
++];

365 i‡(
back
 =
di˘
->
íd
)

366 
back
 = 0;

367 } --
À·
 > 0);

369 i‡(
di˘
->
fuŒ
 < di˘->
pos
)

370 
di˘
->
fuŒ
 = di˘->
pos
;

372  
åue
;

373 
	}
}

376 
XZ_FUNC
 
	$di˘_uncom¥es£d
(

377 
di˘i⁄¨y
 *
di˘
, 
xz_buf
 *
b
, 
uöt32_t
 *
À·
)

379 
size_t
 
c›y_size
;

381 *
À·
 > 0 && 
b
->
ö_pos
 < b->
ö_size


382 && 
b
->
out_pos
 < b->
out_size
) {

383 
c›y_size
 = 
	`mö
(
b
->
ö_size
 - b->
ö_pos
,

384 
b
->
out_size
 - b->
out_pos
);

385 i‡(
c›y_size
 > 
di˘
->
íd
 - di˘->
pos
)

386 
c›y_size
 = 
di˘
->
íd
 - di˘->
pos
;

387 i‡(
c›y_size
 > *
À·
)

388 
c›y_size
 = *
À·
;

390 *
À·
 -
c›y_size
;

392 
	`mem˝y
(
di˘
->
buf
 + di˘->
pos
, 
b
->
ö
 + b->
ö_pos
, 
c›y_size
);

393 
di˘
->
pos
 +
c›y_size
;

395 i‡(
di˘
->
fuŒ
 < di˘->
pos
)

396 
di˘
->
fuŒ
 = di˘->
pos
;

398 i‡(
	`DEC_IS_MULTI
(
di˘
->
mode
)) {

399 i‡(
di˘
->
pos
 =di˘->
íd
)

400 
di˘
->
pos
 = 0;

402 
	`mem˝y
(
b
->
out
 + b->
out_pos
, b->
ö
 + b->
ö_pos
,

403 
c›y_size
);

406 
di˘
->
°¨t
 = di˘->
pos
;

408 
b
->
out_pos
 +
c›y_size
;

409 
b
->
ö_pos
 +
c›y_size
;

412 
	}
}

419 
uöt32_t
 
XZ_FUNC
 
	$di˘_Êush
(
di˘i⁄¨y
 *
di˘
, 
xz_buf
 *
b
)

421 
size_t
 
c›y_size
 = 
di˘
->
pos
 - di˘->
°¨t
;

423 i‡(
	`DEC_IS_MULTI
(
di˘
->
mode
)) {

424 i‡(
di˘
->
pos
 =di˘->
íd
)

425 
di˘
->
pos
 = 0;

427 
	`mem˝y
(
b
->
out
 + b->
out_pos
, 
di˘
->
buf
 + di˘->
°¨t
,

428 
c›y_size
);

431 
di˘
->
°¨t
 = di˘->
pos
;

432 
b
->
out_pos
 +
c›y_size
;

433  
c›y_size
;

434 
	}
}

441 
XZ_FUNC
 
	$rc_ª£t
(
rc_dec
 *
rc
)

443 
rc
->
ønge
 = (
uöt32_t
)-1;

444 
rc
->
code
 = 0;

445 
rc
->
öô_byãs_À·
 = 
RC_INIT_BYTES
;

446 
	}
}

452 
boﬁ
 
XZ_FUNC
 
	$rc_ªad_öô
(
rc_dec
 *
rc
, 
xz_buf
 *
b
)

454 
rc
->
öô_byãs_À·
 > 0) {

455 i‡(
b
->
ö_pos
 =b->
ö_size
)

456  
Ál£
;

458 
rc
->
code
 = (rc->codê<< 8Ë+ 
b
->
ö
[b->
ö_pos
++];

459 --
rc
->
öô_byãs_À·
;

462  
åue
;

463 
	}
}

466 
ölöe
 
boﬁ
 
XZ_FUNC
 
	$rc_limô_ex˚eded
(c⁄° 
rc_dec
 *
rc
)

468  
rc
->
ö_pos
 >Ñc->
ö_limô
;

469 
	}
}

475 
ölöe
 
boﬁ
 
XZ_FUNC
 
	$rc_is_föished
(c⁄° 
rc_dec
 *
rc
)

477  
rc
->
code
 == 0;

478 
	}
}

481 
__Æways_ölöe
 
XZ_FUNC
 
	$rc_n‹mÆize
(
rc_dec
 *
rc
)

483 i‡(
rc
->
ønge
 < 
RC_TOP_VALUE
) {

484 
rc
->
ønge
 <<
RC_SHIFT_BITS
;

485 
rc
->
code
 = (rc->codê<< 
RC_SHIFT_BITS
Ë+Ñc->
ö
[rc->
ö_pos
++];

487 
	}
}

500 
__Æways_ölöe
 
XZ_FUNC
 
	$rc_bô
(
rc_dec
 *
rc
, 
uöt16_t
 *
¥ob
)

502 
uöt32_t
 
bound
;

503 
bô
;

505 
	`rc_n‹mÆize
(
rc
);

506 
bound
 = (
rc
->
ønge
 >> 
RC_BIT_MODEL_TOTAL_BITS
Ë* *
¥ob
;

507 i‡(
rc
->
code
 < 
bound
) {

508 
rc
->
ønge
 = 
bound
;

509 *
¥ob
 +(
RC_BIT_MODEL_TOTAL
 - *¥obË>> 
RC_MOVE_BITS
;

510 
bô
 = 0;

512 
rc
->
ønge
 -
bound
;

513 
rc
->
code
 -
bound
;

514 *
¥ob
 -*¥ob >> 
RC_MOVE_BITS
;

515 
bô
 = 1;

518  
bô
;

519 
	}
}

522 
__Æways_ölöe
 
uöt32_t
 
XZ_FUNC
 
	$rc_bôåì
(

523 
rc_dec
 *
rc
, 
uöt16_t
 *
¥obs
, 
uöt32_t
 
limô
)

525 
uöt32_t
 
symbﬁ
 = 1;

528 i‡(
	`rc_bô
(
rc
, &
¥obs
[
symbﬁ
]))

529 
symbﬁ
 = (symbol << 1) + 1;

531 
symbﬁ
 <<= 1;

532 } 
symbﬁ
 < 
limô
);

534  
symbﬁ
;

535 
	}
}

538 
__Æways_ölöe
 
XZ_FUNC
 
	$rc_bôåì_ªvî£
(
rc_dec
 *
rc
,

539 
uöt16_t
 *
¥obs
, 
uöt32_t
 *
de°
, uöt32_à
limô
)

541 
uöt32_t
 
symbﬁ
 = 1;

542 
uöt32_t
 
i
 = 0;

545 i‡(
	`rc_bô
(
rc
, &
¥obs
[
symbﬁ
])) {

546 
symbﬁ
 = (symbol << 1) + 1;

547 *
de°
 +1 << 
i
;

549 
symbﬁ
 <<= 1;

551 } ++
i
 < 
limô
);

552 
	}
}

555 
ölöe
 
XZ_FUNC
 
	$rc_dúe˘
(

556 
rc_dec
 *
rc
, 
uöt32_t
 *
de°
, uöt32_à
limô
)

558 
uöt32_t
 
mask
;

561 
	`rc_n‹mÆize
(
rc
);

562 
rc
->
ønge
 >>= 1;

563 
rc
->
code
 -rc->
ønge
;

564 
mask
 = (
uöt32_t
)0 - (
rc
->
code
 >> 31);

565 
rc
->
code
 +rc->
ønge
 & 
mask
;

566 *
de°
 = (*de° << 1Ë+ (
mask
 + 1);

567 } --
limô
 > 0);

568 
	}
}

575 
uöt16_t
 * 
XZ_FUNC
 
	$lzma_lôîÆ_¥obs
(
xz_dec_lzma2
 *
s
)

577 
uöt32_t
 
¥ev_byã
 = 
	`di˘_gë
(&
s
->
di˘
, 0);

578 
uöt32_t
 
low
 = 
¥ev_byã
 >> (8 - 
s
->
lzma
.
lc
);

579 
uöt32_t
 
high
 = (
s
->
di˘
.
pos
 & s->
lzma
.
lôîÆ_pos_mask
Ë<< s->lzma.
lc
;

580  
s
->
lzma
.
lôîÆ
[
low
 + 
high
];

581 
	}
}

584 
XZ_FUNC
 
	$lzma_lôîÆ
(
xz_dec_lzma2
 *
s
)

586 
uöt16_t
 *
¥obs
;

587 
uöt32_t
 
symbﬁ
;

588 
uöt32_t
 
m©ch_byã
;

589 
uöt32_t
 
m©ch_bô
;

590 
uöt32_t
 
off£t
;

591 
uöt32_t
 
i
;

593 
¥obs
 = 
	`lzma_lôîÆ_¥obs
(
s
);

595 i‡(
	`lzma_°©e_is_lôîÆ
(
s
->
lzma
.
°©e
)) {

596 
symbﬁ
 = 
	`rc_bôåì
(&
s
->
rc
, 
¥obs
, 0x100);

598 
symbﬁ
 = 1;

599 
m©ch_byã
 = 
	`di˘_gë
(&
s
->
di˘
, s->
lzma
.
ªp0
) << 1;

600 
off£t
 = 0x100;

603 
m©ch_bô
 = 
m©ch_byã
 & 
off£t
;

604 
m©ch_byã
 <<= 1;

605 
i
 = 
off£t
 + 
m©ch_bô
 + 
symbﬁ
;

607 i‡(
	`rc_bô
(&
s
->
rc
, &
¥obs
[
i
])) {

608 
symbﬁ
 = (symbol << 1) + 1;

609 
off£t
 &
m©ch_bô
;

611 
symbﬁ
 <<= 1;

612 
off£t
 &~
m©ch_bô
;

614 } 
symbﬁ
 < 0x100);

617 
	`di˘_put
(&
s
->
di˘
, (
uöt8_t
)
symbﬁ
);

618 
	`lzma_°©e_lôîÆ
(&
s
->
lzma
.
°©e
);

619 
	}
}

622 
XZ_FUNC
 
	$lzma_Àn
(
xz_dec_lzma2
 *
s
, 
lzma_Àn_dec
 *
l
,

623 
uöt32_t
 
pos_°©e
)

625 
uöt16_t
 *
¥obs
;

626 
uöt32_t
 
limô
;

628 i‡(!
	`rc_bô
(&
s
->
rc
, &
l
->
choi˚
)) {

629 
¥obs
 = 
l
->
low
[
pos_°©e
];

630 
limô
 = 
LEN_LOW_SYMBOLS
;

631 
s
->
lzma
.
Àn
 = 
MATCH_LEN_MIN
;

633 i‡(!
	`rc_bô
(&
s
->
rc
, &
l
->
choi˚2
)) {

634 
¥obs
 = 
l
->
mid
[
pos_°©e
];

635 
limô
 = 
LEN_MID_SYMBOLS
;

636 
s
->
lzma
.
Àn
 = 
MATCH_LEN_MIN
 + 
LEN_LOW_SYMBOLS
;

638 
¥obs
 = 
l
->
high
;

639 
limô
 = 
LEN_HIGH_SYMBOLS
;

640 
s
->
lzma
.
Àn
 = 
MATCH_LEN_MIN
 + 
LEN_LOW_SYMBOLS


641 + 
LEN_MID_SYMBOLS
;

645 
s
->
lzma
.
Àn
 +
	`rc_bôåì
(&s->
rc
, 
¥obs
, 
limô
) -Üimit;

646 
	}
}

649 
XZ_FUNC
 
	$lzma_m©ch
(
xz_dec_lzma2
 *
s
, 
uöt32_t
 
pos_°©e
)

651 
uöt16_t
 *
¥obs
;

652 
uöt32_t
 
di°_¶Ÿ
;

653 
uöt32_t
 
limô
;

655 
	`lzma_°©e_m©ch
(&
s
->
lzma
.
°©e
);

657 
s
->
lzma
.
ªp3
 = s->lzma.
ªp2
;

658 
s
->
lzma
.
ªp2
 = s->lzma.
ªp1
;

659 
s
->
lzma
.
ªp1
 = s->lzma.
ªp0
;

661 
	`lzma_Àn
(
s
, &s->
lzma
.
m©ch_Àn_dec
, 
pos_°©e
);

663 
¥obs
 = 
s
->
lzma
.
di°_¶Ÿ
[
	`lzma_gë_di°_°©e
(s->lzma.
Àn
)];

664 
di°_¶Ÿ
 = 
	`rc_bôåì
(&
s
->
rc
, 
¥obs
, 
DIST_SLOTS
) - DIST_SLOTS;

666 i‡(
di°_¶Ÿ
 < 
DIST_MODEL_START
) {

667 
s
->
lzma
.
ªp0
 = 
di°_¶Ÿ
;

669 
limô
 = (
di°_¶Ÿ
 >> 1) - 1;

670 
s
->
lzma
.
ªp0
 = 2 + (
di°_¶Ÿ
 & 1);

672 i‡(
di°_¶Ÿ
 < 
DIST_MODEL_END
) {

673 
s
->
lzma
.
ªp0
 <<
limô
;

674 
¥obs
 = 
s
->
lzma
.
di°_•ecül
 + s->lzma.
ªp0


675 - 
di°_¶Ÿ
 - 1;

676 
	`rc_bôåì_ªvî£
(&
s
->
rc
, 
¥obs
,

677 &
s
->
lzma
.
ªp0
, 
limô
);

679 
	`rc_dúe˘
(&
s
->
rc
, &s->
lzma
.
ªp0
, 
limô
 - 
ALIGN_BITS
);

680 
s
->
lzma
.
ªp0
 <<
ALIGN_BITS
;

681 
	`rc_bôåì_ªvî£
(&
s
->
rc
, s->
lzma
.
di°_Æign
,

682 &
s
->
lzma
.
ªp0
, 
ALIGN_BITS
);

685 
	}
}

691 
XZ_FUNC
 
	$lzma_ªp_m©ch
(
xz_dec_lzma2
 *
s
, 
uöt32_t
 
pos_°©e
)

693 
uöt32_t
 
tmp
;

695 i‡(!
	`rc_bô
(&
s
->
rc
, &s->
lzma
.
is_ªp0
[s->lzma.
°©e
])) {

696 i‡(!
	`rc_bô
(&
s
->
rc
, &s->
lzma
.
is_ªp0_l⁄g
[

697 
s
->
lzma
.
°©e
][
pos_°©e
])) {

698 
	`lzma_°©e_sh‹t_ªp
(&
s
->
lzma
.
°©e
);

699 
s
->
lzma
.
Àn
 = 1;

703 i‡(!
	`rc_bô
(&
s
->
rc
, &s->
lzma
.
is_ªp1
[s->lzma.
°©e
])) {

704 
tmp
 = 
s
->
lzma
.
ªp1
;

706 i‡(!
	`rc_bô
(&
s
->
rc
, &s->
lzma
.
is_ªp2
[s->lzma.
°©e
])) {

707 
tmp
 = 
s
->
lzma
.
ªp2
;

709 
tmp
 = 
s
->
lzma
.
ªp3
;

710 
s
->
lzma
.
ªp3
 = s->lzma.
ªp2
;

713 
s
->
lzma
.
ªp2
 = s->lzma.
ªp1
;

716 
s
->
lzma
.
ªp1
 = s->lzma.
ªp0
;

717 
s
->
lzma
.
ªp0
 = 
tmp
;

720 
	`lzma_°©e_l⁄g_ªp
(&
s
->
lzma
.
°©e
);

721 
	`lzma_Àn
(
s
, &s->
lzma
.
ªp_Àn_dec
, 
pos_°©e
);

722 
	}
}

725 
boﬁ
 
XZ_FUNC
 
	$lzma_maö
(
xz_dec_lzma2
 *
s
)

727 
uöt32_t
 
pos_°©e
;

733 i‡(
	`di˘_has_•a˚
(&
s
->
di˘
Ë&& s->
lzma
.
Àn
 > 0)

734 
	`di˘_ª≥©
(&
s
->
di˘
, &s->
lzma
.
Àn
, s->lzma.
ªp0
);

740 
	`di˘_has_•a˚
(&
s
->
di˘
Ë&& !
	`rc_limô_ex˚eded
(&s->
rc
)) {

741 
pos_°©e
 = 
s
->
di˘
.
pos
 & s->
lzma
.
pos_mask
;

743 i‡(!
	`rc_bô
(&
s
->
rc
, &s->
lzma
.
is_m©ch
[

744 
s
->
lzma
.
°©e
][
pos_°©e
])) {

745 
	`lzma_lôîÆ
(
s
);

747 i‡(
	`rc_bô
(&
s
->
rc
, &s->
lzma
.
is_ªp
[s->lzma.
°©e
]))

748 
	`lzma_ªp_m©ch
(
s
, 
pos_°©e
);

750 
	`lzma_m©ch
(
s
, 
pos_°©e
);

752 i‡(!
	`di˘_ª≥©
(&
s
->
di˘
, &s->
lzma
.
Àn
, s->lzma.
ªp0
))

753  
Ál£
;

761 
	`rc_n‹mÆize
(&
s
->
rc
);

763  
åue
;

764 
	}
}

770 
XZ_FUNC
 
	$lzma_ª£t
(
xz_dec_lzma2
 *
s
)

772 
uöt16_t
 *
¥obs
;

773 
size_t
 
i
;

775 
s
->
lzma
.
°©e
 = 
STATE_LIT_LIT
;

776 
s
->
lzma
.
ªp0
 = 0;

777 
s
->
lzma
.
ªp1
 = 0;

778 
s
->
lzma
.
ªp2
 = 0;

779 
s
->
lzma
.
ªp3
 = 0;

790 
¥obs
 = 
s
->
lzma
.
is_m©ch
[0];

791 
i
 = 0; i < 
PROBS_TOTAL
; ++i)

792 
¥obs
[
i
] = 
RC_BIT_MODEL_TOTAL
 / 2;

794 
	`rc_ª£t
(&
s
->
rc
);

795 
	}
}

802 
boﬁ
 
XZ_FUNC
 
	$lzma_¥›s
(
xz_dec_lzma2
 *
s
, 
uöt8_t
 
¥›s
)

804 i‡(
¥›s
 > (4 * 5 + 4) * 9 + 8)

805  
Ál£
;

807 
s
->
lzma
.
pos_mask
 = 0;

808 
¥›s
 >= 9 * 5) {

809 
¥›s
 -= 9 * 5;

810 ++
s
->
lzma
.
pos_mask
;

813 
s
->
lzma
.
pos_mask
 = (1 << s->lzma.pos_mask) - 1;

815 
s
->
lzma
.
lôîÆ_pos_mask
 = 0;

816 
¥›s
 >= 9) {

817 
¥›s
 -= 9;

818 ++
s
->
lzma
.
lôîÆ_pos_mask
;

821 
s
->
lzma
.
lc
 = 
¥›s
;

823 i‡(
s
->
lzma
.
lc
 + s->lzma.
lôîÆ_pos_mask
 > 4)

824  
Ál£
;

826 
s
->
lzma
.
lôîÆ_pos_mask
 = (1 << s->lzma.literal_pos_mask) - 1;

828 
	`lzma_ª£t
(
s
);

830  
åue
;

831 
	}
}

849 
boﬁ
 
XZ_FUNC
 
	$lzma2_lzma
(
xz_dec_lzma2
 *
s
, 
xz_buf
 *
b
)

851 
size_t
 
ö_avaû
;

852 
uöt32_t
 
tmp
;

854 
ö_avaû
 = 
b
->
ö_size
 - b->
ö_pos
;

855 i‡(
s
->
ãmp
.
size
 > 0 || s->
lzma2
.
com¥es£d
 == 0) {

856 
tmp
 = 2 * 
LZMA_IN_REQUIRED
 - 
s
->
ãmp
.
size
;

857 i‡(
tmp
 > 
s
->
lzma2
.
com¥es£d
 - s->
ãmp
.
size
)

858 
tmp
 = 
s
->
lzma2
.
com¥es£d
 - s->
ãmp
.
size
;

859 i‡(
tmp
 > 
ö_avaû
)

860 
tmp
 = 
ö_avaû
;

862 
	`mem˝y
(
s
->
ãmp
.
buf
 + s->ãmp.
size
, 
b
->
ö
 + b->
ö_pos
, 
tmp
);

864 i‡(
s
->
ãmp
.
size
 + 
tmp
 =s->
lzma2
.
com¥es£d
) {

865 
	`memzîo
(
s
->
ãmp
.
buf
 + s->ãmp.
size
 + 
tmp
,

866 (
s
->
ãmp
.
buf
)

867 - 
s
->
ãmp
.
size
 - 
tmp
);

868 
s
->
rc
.
ö_limô
 = s->
ãmp
.
size
 + 
tmp
;

869 } i‡(
s
->
ãmp
.
size
 + 
tmp
 < 
LZMA_IN_REQUIRED
) {

870 
s
->
ãmp
.
size
 +
tmp
;

871 
b
->
ö_pos
 +
tmp
;

872  
åue
;

874 
s
->
rc
.
ö_limô
 = s->
ãmp
.
size
 + 
tmp
 - 
LZMA_IN_REQUIRED
;

877 
s
->
rc
.
ö
 = s->
ãmp
.
buf
;

878 
s
->
rc
.
ö_pos
 = 0;

880 i‡(!
	`lzma_maö
(
s
Ë|| s->
rc
.
ö_pos
 > s->
ãmp
.
size
 + 
tmp
)

881  
Ál£
;

883 
s
->
lzma2
.
com¥es£d
 -s->
rc
.
ö_pos
;

885 i‡(
s
->
rc
.
ö_pos
 < s->
ãmp
.
size
) {

886 
s
->
ãmp
.
size
 -s->
rc
.
ö_pos
;

887 
	`memmove
(
s
->
ãmp
.
buf
, s->ãmp.bu‡+ s->
rc
.
ö_pos
,

888 
s
->
ãmp
.
size
);

889  
åue
;

892 
b
->
ö_pos
 +
s
->
rc
.ö_po†- s->
ãmp
.
size
;

893 
s
->
ãmp
.
size
 = 0;

896 
ö_avaû
 = 
b
->
ö_size
 - b->
ö_pos
;

897 i‡(
ö_avaû
 >
LZMA_IN_REQUIRED
) {

898 
s
->
rc
.
ö
 = 
b
->in;

899 
s
->
rc
.
ö_pos
 = 
b
->in_pos;

901 i‡(
ö_avaû
 >
s
->
lzma2
.
com¥es£d
 + 
LZMA_IN_REQUIRED
)

902 
s
->
rc
.
ö_limô
 = 
b
->
ö_pos
 + s->
lzma2
.
com¥es£d
;

904 
s
->
rc
.
ö_limô
 = 
b
->
ö_size
 - 
LZMA_IN_REQUIRED
;

906 i‡(!
	`lzma_maö
(
s
))

907  
Ál£
;

909 
ö_avaû
 = 
s
->
rc
.
ö_pos
 - 
b
->in_pos;

910 i‡(
ö_avaû
 > 
s
->
lzma2
.
com¥es£d
)

911  
Ál£
;

913 
s
->
lzma2
.
com¥es£d
 -
ö_avaû
;

914 
b
->
ö_pos
 = 
s
->
rc
.in_pos;

917 
ö_avaû
 = 
b
->
ö_size
 - b->
ö_pos
;

918 i‡(
ö_avaû
 < 
LZMA_IN_REQUIRED
) {

919 i‡(
ö_avaû
 > 
s
->
lzma2
.
com¥es£d
)

920 
ö_avaû
 = 
s
->
lzma2
.
com¥es£d
;

922 
	`mem˝y
(
s
->
ãmp
.
buf
, 
b
->
ö
 + b->
ö_pos
, 
ö_avaû
);

923 
s
->
ãmp
.
size
 = 
ö_avaû
;

924 
b
->
ö_pos
 +
ö_avaû
;

927  
åue
;

928 
	}
}

934 
XZ_EXTERN
 
xz_ªt
 
XZ_FUNC
 
	$xz_dec_lzma2_run
(

935 
xz_dec_lzma2
 *
s
, 
xz_buf
 *
b
)

937 
uöt32_t
 
tmp
;

939 
b
->
ö_pos
 < b->
ö_size
 || 
s
->
lzma2
.
£quí˚
 =
SEQ_LZMA_RUN
) {

940 
s
->
lzma2
.
£quí˚
) {

941 
SEQ_CONTROL
:

973 
tmp
 = 
b
->
ö
[b->
ö_pos
++];

975 i‡(
tmp
 >= 0xE0 ||Åmp == 0x01) {

976 
s
->
lzma2
.
√ed_¥›s
 = 
åue
;

977 
s
->
lzma2
.
√ed_di˘_ª£t
 = 
Ál£
;

978 
	`di˘_ª£t
(&
s
->
di˘
, 
b
);

979 } i‡(
s
->
lzma2
.
√ed_di˘_ª£t
) {

980  
XZ_DATA_ERROR
;

983 i‡(
tmp
 >= 0x80) {

984 
s
->
lzma2
.
uncom¥es£d
 = (
tmp
 & 0x1F) << 16;

985 
s
->
lzma2
.
£quí˚
 = 
SEQ_UNCOMPRESSED_1
;

987 i‡(
tmp
 >= 0xC0) {

993 
s
->
lzma2
.
√ed_¥›s
 = 
Ál£
;

994 
s
->
lzma2
.
√xt_£quí˚


995 
SEQ_PROPERTIES
;

997 } i‡(
s
->
lzma2
.
√ed_¥›s
) {

998  
XZ_DATA_ERROR
;

1001 
s
->
lzma2
.
√xt_£quí˚


1002 
SEQ_LZMA_PREPARE
;

1003 i‡(
tmp
 >= 0xA0)

1004 
	`lzma_ª£t
(
s
);

1007 i‡(
tmp
 == 0x00)

1008  
XZ_STREAM_END
;

1010 i‡(
tmp
 > 0x02)

1011  
XZ_DATA_ERROR
;

1013 
s
->
lzma2
.
£quí˚
 = 
SEQ_COMPRESSED_0
;

1014 
s
->
lzma2
.
√xt_£quí˚
 = 
SEQ_COPY
;

1019 
SEQ_UNCOMPRESSED_1
:

1020 
s
->
lzma2
.
uncom¥es£d


1021 +(
uöt32_t
)
b
->
ö
[b->
ö_pos
++] << 8;

1022 
s
->
lzma2
.
£quí˚
 = 
SEQ_UNCOMPRESSED_2
;

1025 
SEQ_UNCOMPRESSED_2
:

1026 
s
->
lzma2
.
uncom¥es£d


1027 +(
uöt32_t
)
b
->
ö
[b->
ö_pos
++] + 1;

1028 
s
->
lzma2
.
£quí˚
 = 
SEQ_COMPRESSED_0
;

1031 
SEQ_COMPRESSED_0
:

1032 
s
->
lzma2
.
com¥es£d


1033 (
uöt32_t
)
b
->
ö
[b->
ö_pos
++] << 8;

1034 
s
->
lzma2
.
£quí˚
 = 
SEQ_COMPRESSED_1
;

1037 
SEQ_COMPRESSED_1
:

1038 
s
->
lzma2
.
com¥es£d


1039 +(
uöt32_t
)
b
->
ö
[b->
ö_pos
++] + 1;

1040 
s
->
lzma2
.
£quí˚
 = s->lzma2.
√xt_£quí˚
;

1043 
SEQ_PROPERTIES
:

1044 i‡(!
	`lzma_¥›s
(
s
, 
b
->
ö
[b->
ö_pos
++]))

1045  
XZ_DATA_ERROR
;

1047 
s
->
lzma2
.
£quí˚
 = 
SEQ_LZMA_PREPARE
;

1049 
SEQ_LZMA_PREPARE
:

1050 i‡(
s
->
lzma2
.
com¥es£d
 < 
RC_INIT_BYTES
)

1051  
XZ_DATA_ERROR
;

1053 i‡(!
	`rc_ªad_öô
(&
s
->
rc
, 
b
))

1054  
XZ_OK
;

1056 
s
->
lzma2
.
com¥es£d
 -
RC_INIT_BYTES
;

1057 
s
->
lzma2
.
£quí˚
 = 
SEQ_LZMA_RUN
;

1059 
SEQ_LZMA_RUN
:

1069 
	`di˘_limô
(&
s
->
di˘
, 
	`mö_t
(
size_t
,

1070 
b
->
out_size
 - b->
out_pos
,

1071 
s
->
lzma2
.
uncom¥es£d
));

1072 i‡(!
	`lzma2_lzma
(
s
, 
b
))

1073  
XZ_DATA_ERROR
;

1075 
s
->
lzma2
.
uncom¥es£d
 -
	`di˘_Êush
(&s->
di˘
, 
b
);

1077 i‡(
s
->
lzma2
.
uncom¥es£d
 == 0) {

1078 i‡(
s
->
lzma2
.
com¥es£d
 > 0 || s->
lzma
.
Àn
 > 0

1079 || !
	`rc_is_föished
(&
s
->
rc
))

1080  
XZ_DATA_ERROR
;

1082 
	`rc_ª£t
(&
s
->
rc
);

1083 
s
->
lzma2
.
£quí˚
 = 
SEQ_CONTROL
;

1085 } i‡(
b
->
out_pos
 =b->
out_size


1086 || (
b
->
ö_pos
 =b->
ö_size


1087 && 
s
->
ãmp
.
size


1088 < 
s
->
lzma2
.
com¥es£d
)) {

1089  
XZ_OK
;

1094 
SEQ_COPY
:

1095 
	`di˘_uncom¥es£d
(&
s
->
di˘
, 
b
, &s->
lzma2
.
com¥es£d
);

1096 i‡(
s
->
lzma2
.
com¥es£d
 > 0)

1097  
XZ_OK
;

1099 
s
->
lzma2
.
£quí˚
 = 
SEQ_CONTROL
;

1104  
XZ_OK
;

1105 
	}
}

1107 
XZ_EXTERN
 
xz_dec_lzma2
 * 
XZ_FUNC
 
	$xz_dec_lzma2_¸óã
(

1108 
xz_mode
 
mode
, 
uöt32_t
 
di˘_max
)

1110 
xz_dec_lzma2
 *
s
 = 
	`kmÆloc
((*s), 
GFP_KERNEL
);

1111 i‡(
s
 =
NULL
)

1112  
NULL
;

1114 
s
->
di˘
.
mode
 = mode;

1115 
s
->
di˘
.
size_max
 = 
di˘_max
;

1117 i‡(
	`DEC_IS_PREALLOC
(
mode
)) {

1118 
s
->
di˘
.
buf
 = 
	`vmÆloc
(
di˘_max
);

1119 i‡(
s
->
di˘
.
buf
 =
NULL
) {

1120 
	`k‰ì
(
s
);

1121  
NULL
;

1123 } i‡(
	`DEC_IS_DYNALLOC
(
mode
)) {

1124 
s
->
di˘
.
buf
 = 
NULL
;

1125 
s
->
di˘
.
Æloˇãd
 = 0;

1128  
s
;

1129 
	}
}

1131 
XZ_EXTERN
 
xz_ªt
 
XZ_FUNC
 
	$xz_dec_lzma2_ª£t
(

1132 
xz_dec_lzma2
 *
s
, 
uöt8_t
 
¥›s
)

1135 i‡(
¥›s
 > 39)

1136  
XZ_OPTIONS_ERROR
;

1138 
s
->
di˘
.
size
 = 2 + (
¥›s
 & 1);

1139 
s
->
di˘
.
size
 <<(
¥›s
 >> 1) + 11;

1141 i‡(
	`DEC_IS_MULTI
(
s
->
di˘
.
mode
)) {

1142 i‡(
s
->
di˘
.
size
 > s->di˘.
size_max
)

1143  
XZ_MEMLIMIT_ERROR
;

1145 
s
->
di˘
.
íd
 = s->di˘.
size
;

1147 i‡(
	`DEC_IS_DYNALLOC
(
s
->
di˘
.
mode
)) {

1148 i‡(
s
->
di˘
.
Æloˇãd
 < s->di˘.
size
) {

1149 
	`v‰ì
(
s
->
di˘
.
buf
);

1150 
s
->
di˘
.
buf
 = 
	`vmÆloc
(s->di˘.
size
);

1151 i‡(
s
->
di˘
.
buf
 =
NULL
) {

1152 
s
->
di˘
.
Æloˇãd
 = 0;

1153  
XZ_MEM_ERROR
;

1159 
s
->
lzma
.
Àn
 = 0;

1161 
s
->
lzma2
.
£quí˚
 = 
SEQ_CONTROL
;

1162 
s
->
lzma2
.
√ed_di˘_ª£t
 = 
åue
;

1164 
s
->
ãmp
.
size
 = 0;

1166  
XZ_OK
;

1167 
	}
}

1169 
XZ_EXTERN
 
XZ_FUNC
 
	$xz_dec_lzma2_íd
(
xz_dec_lzma2
 *
s
)

1171 i‡(
	`DEC_IS_MULTI
(
s
->
di˘
.
mode
))

1172 
	`v‰ì
(
s
->
di˘
.
buf
);

1174 
	`k‰ì
(
s
);

1175 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/xz_dec_stream.c

10 
	~"xz_¥iv©e.h
"

11 
	~"xz_°ªam.h
"

14 
	sxz_dec_hash
 {

15 
vli_ty≥
 
	mu≈added
;

16 
vli_ty≥
 
	muncom¥es£d
;

17 
uöt32_t
 
	m¸c32
;

20 
	sxz_dec
 {

23 
	mSEQ_STREAM_HEADER
,

24 
	mSEQ_BLOCK_START
,

25 
	mSEQ_BLOCK_HEADER
,

26 
	mSEQ_BLOCK_UNCOMPRESS
,

27 
	mSEQ_BLOCK_PADDING
,

28 
	mSEQ_BLOCK_CHECK
,

29 
	mSEQ_INDEX
,

30 
	mSEQ_INDEX_PADDING
,

31 
	mSEQ_INDEX_CRC32
,

32 
	mSEQ_STREAM_FOOTER


33 } 
	m£quí˚
;

36 
uöt32_t
 
	mpos
;

39 
vli_ty≥
 
	mvli
;

42 
size_t
 
	mö_°¨t
;

43 
size_t
 
	mout_°¨t
;

46 
uöt32_t
 
	m¸c32
;

49 
xz_check
 
	mcheck_ty≥
;

52 
xz_mode
 
	mmode
;

58 
boﬁ
 
	mÆlow_buf_îr‹
;

66 
vli_ty≥
 
	mcom¥es£d
;

72 
vli_ty≥
 
	muncom¥es£d
;

75 
uöt32_t
 
	msize
;

76 } 
	mblock_hódî
;

81 
vli_ty≥
 
	mcom¥es£d
;

84 
vli_ty≥
 
	muncom¥es£d
;

87 
vli_ty≥
 
	mcou¡
;

93 
xz_dec_hash
 
	mhash
;

94 } 
	mblock
;

100 
	mSEQ_INDEX_COUNT
,

101 
	mSEQ_INDEX_UNPADDED
,

102 
	mSEQ_INDEX_UNCOMPRESSED


103 } 
	m£quí˚
;

106 
vli_ty≥
 
	msize
;

109 
vli_ty≥
 
	mcou¡
;

115 
xz_dec_hash
 
	mhash
;

116 } 
	mödex
;

126 
size_t
 
	mpos
;

127 
size_t
 
	msize
;

128 
uöt8_t
 
	mbuf
[1024];

129 } 
	mãmp
;

131 
xz_dec_lzma2
 *
	mlzma2
;

133 #ifde‡
XZ_DEC_BCJ


134 
xz_dec_bcj
 *
	mbcj
;

135 
boﬁ
 
	mbcj_a˘ive
;

139 #ifde‡
XZ_DEC_ANY_CHECK


141 c⁄° 
uöt8_t
 
	gcheck_sizes
[16] = {

157 
boﬁ
 
XZ_FUNC
 
	$fûl_ãmp
(
xz_dec
 *
s
, 
xz_buf
 *
b
)

159 
size_t
 
c›y_size
 = 
	`mö_t
(size_t,

160 
b
->
ö_size
 - b->
ö_pos
, 
s
->
ãmp
.
size
 - s->ãmp.
pos
);

162 
	`mem˝y
(
s
->
ãmp
.
buf
 + s->ãmp.
pos
, 
b
->
ö
 + b->
ö_pos
, 
c›y_size
);

163 
b
->
ö_pos
 +
c›y_size
;

164 
s
->
ãmp
.
pos
 +
c›y_size
;

166 i‡(
s
->
ãmp
.
pos
 =s->ãmp.
size
) {

167 
s
->
ãmp
.
pos
 = 0;

168  
åue
;

171  
Ál£
;

172 
	}
}

175 
xz_ªt
 
XZ_FUNC
 
	$dec_vli
(
xz_dec
 *
s
,

176 c⁄° 
uöt8_t
 *
ö
, 
size_t
 *
ö_pos
, size_à
ö_size
)

178 
uöt8_t
 
byã
;

180 i‡(
s
->
pos
 == 0)

181 
s
->
vli
 = 0;

183 *
ö_pos
 < 
ö_size
) {

184 
byã
 = 
ö
[*
ö_pos
];

185 ++*
ö_pos
;

187 
s
->
vli
 |(
vli_ty≥
)(
byã
 & 0x7FË<< s->
pos
;

189 i‡((
byã
 & 0x80) == 0) {

191 i‡(
byã
 =0 && 
s
->
pos
 != 0)

192  
XZ_DATA_ERROR
;

194 
s
->
pos
 = 0;

195  
XZ_STREAM_END
;

198 
s
->
pos
 += 7;

199 i‡(
s
->
pos
 =7 * 
VLI_BYTES_MAX
)

200  
XZ_DATA_ERROR
;

203  
XZ_OK
;

204 
	}
}

218 
xz_ªt
 
XZ_FUNC
 
	$dec_block
(
xz_dec
 *
s
, 
xz_buf
 *
b
)

220 
xz_ªt
 
ªt
;

222 
s
->
ö_°¨t
 = 
b
->
ö_pos
;

223 
s
->
out_°¨t
 = 
b
->
out_pos
;

225 #ifde‡
XZ_DEC_BCJ


226 i‡(
s
->
bcj_a˘ive
)

227 
ªt
 = 
	`xz_dec_bcj_run
(
s
->
bcj
, s->
lzma2
, 
b
);

230 
ªt
 = 
	`xz_dec_lzma2_run
(
s
->
lzma2
, 
b
);

232 
s
->
block
.
com¥es£d
 +
b
->
ö_pos
 - s->
ö_°¨t
;

233 
s
->
block
.
uncom¥es£d
 +
b
->
out_pos
 - s->
out_°¨t
;

239 i‡(
s
->
block
.
com¥es£d
 > s->
block_hódî
.compressed

240 || 
s
->
block
.
uncom¥es£d


241 > 
s
->
block_hódî
.
uncom¥es£d
)

242  
XZ_DATA_ERROR
;

244 i‡(
s
->
check_ty≥
 =
XZ_CHECK_CRC32
)

245 
s
->
¸c32
 = 
	`¸c32
(

246 
s
->
¸c32
, 
b
->
out
 + s->
out_°¨t
, b->
out_pos
 - s->out_start);

248 i‡(
ªt
 =
XZ_STREAM_END
) {

249 i‡(
s
->
block_hódî
.
com¥es£d
 !
VLI_UNKNOWN


250 && 
s
->
block_hódî
.
com¥es£d


251 !
s
->
block
.
com¥es£d
)

252  
XZ_DATA_ERROR
;

254 i‡(
s
->
block_hódî
.
uncom¥es£d
 !
VLI_UNKNOWN


255 && 
s
->
block_hódî
.
uncom¥es£d


256 !
s
->
block
.
uncom¥es£d
)

257  
XZ_DATA_ERROR
;

259 
s
->
block
.
hash
.
u≈added
 +s->
block_hódî
.
size


260 + 
s
->
block
.
com¥es£d
;

262 #ifde‡
XZ_DEC_ANY_CHECK


263 
s
->
block
.
hash
.
u≈added
 +
check_sizes
[s->
check_ty≥
];

265 i‡(
s
->
check_ty≥
 =
XZ_CHECK_CRC32
)

266 
s
->
block
.
hash
.
u≈added
 += 4;

269 
s
->
block
.
hash
.
uncom¥es£d
 += s->block.uncompressed;

270 
s
->
block
.
hash
.
¸c32
 = 
	`¸c32
(

271 
s
->
block
.
hash
.
¸c32
,

272 (c⁄° 
uöt8_t
 *)&
s
->
block
.
hash
,

273 (
s
->
block
.
hash
));

275 ++
s
->
block
.
cou¡
;

278  
ªt
;

279 
	}
}

282 
XZ_FUNC
 
	$ödex_upd©e
(
xz_dec
 *
s
, c⁄° 
xz_buf
 *
b
)

284 
size_t
 
ö_u£d
 = 
b
->
ö_pos
 - 
s
->
ö_°¨t
;

285 
s
->
ödex
.
size
 +
ö_u£d
;

286 
s
->
¸c32
 = 
	`¸c32
(s->¸c32, 
b
->
ö
 + s->
ö_°¨t
, 
ö_u£d
);

287 
	}
}

297 
xz_ªt
 
XZ_FUNC
 
	$dec_ödex
(
xz_dec
 *
s
, 
xz_buf
 *
b
)

299 
xz_ªt
 
ªt
;

302 
ªt
 = 
	`dec_vli
(
s
, 
b
->
ö
, &b->
ö_pos
, b->
ö_size
);

303 i‡(
ªt
 !
XZ_STREAM_END
) {

304 
	`ödex_upd©e
(
s
, 
b
);

305  
ªt
;

308 
s
->
ödex
.
£quí˚
) {

309 
SEQ_INDEX_COUNT
:

310 
s
->
ödex
.
cou¡
 = s->
vli
;

317 i‡(
s
->
ödex
.
cou¡
 !s->
block
.count)

318  
XZ_DATA_ERROR
;

320 
s
->
ödex
.
£quí˚
 = 
SEQ_INDEX_UNPADDED
;

323 
SEQ_INDEX_UNPADDED
:

324 
s
->
ödex
.
hash
.
u≈added
 +s->
vli
;

325 
s
->
ödex
.
£quí˚
 = 
SEQ_INDEX_UNCOMPRESSED
;

328 
SEQ_INDEX_UNCOMPRESSED
:

329 
s
->
ödex
.
hash
.
uncom¥es£d
 +s->
vli
;

330 
s
->
ödex
.
hash
.
¸c32
 = 
	`¸c32
(

331 
s
->
ödex
.
hash
.
¸c32
,

332 (c⁄° 
uöt8_t
 *)&
s
->
ödex
.
hash
,

333 (
s
->
ödex
.
hash
));

334 --
s
->
ödex
.
cou¡
;

335 
s
->
ödex
.
£quí˚
 = 
SEQ_INDEX_UNPADDED
;

338 } 
s
->
ödex
.
cou¡
 > 0);

340  
XZ_STREAM_END
;

341 
	}
}

347 
xz_ªt
 
XZ_FUNC
 
	$¸c32_vÆid©e
(
xz_dec
 *
s
, 
xz_buf
 *
b
)

350 i‡(
b
->
ö_pos
 =b->
ö_size
)

351  
XZ_OK
;

353 i‡(((
s
->
¸c32
 >> s->
pos
Ë& 0xFFË!
b
->
ö
[b->
ö_pos
++])

354  
XZ_DATA_ERROR
;

356 
s
->
pos
 += 8;

358 } 
s
->
pos
 < 32);

360 
s
->
¸c32
 = 0;

361 
s
->
pos
 = 0;

363  
XZ_STREAM_END
;

364 
	}
}

366 #ifde‡
XZ_DEC_ANY_CHECK


371 
boﬁ
 
XZ_FUNC
 
	$check_skù
(
xz_dec
 *
s
, 
xz_buf
 *
b
)

373 
s
->
pos
 < 
check_sizes
[s->
check_ty≥
]) {

374 i‡(
b
->
ö_pos
 =b->
ö_size
)

375  
Ál£
;

377 ++
b
->
ö_pos
;

378 ++
s
->
pos
;

381 
s
->
pos
 = 0;

383  
åue
;

384 
	}
}

388 
xz_ªt
 
XZ_FUNC
 
	$dec_°ªam_hódî
(
xz_dec
 *
s
)

390 c⁄° 
uöt8_t
 
HEADER_MAGIC
[6] = { 0xFD, '7', 'z', 'X', 'Z', 0x00 };

391 i‡(!
	`memeq
(
s
->
ãmp
.
buf
, 
HEADER_MAGIC
, 
HEADER_MAGIC_SIZE
))

392  
XZ_FORMAT_ERROR
;

394 i‡(
	`¸c32
(0, 
s
->
ãmp
.
buf
 + 
HEADER_MAGIC_SIZE
, 2)

395 !*(*)(
s
->
ãmp
.
buf
 + 
HEADER_MAGIC_SIZE
 + 2))

396  
XZ_DATA_ERROR
;

398 i‡(
s
->
ãmp
.
buf
[
HEADER_MAGIC_SIZE
] != 0) {

399 
	`¥ötf
("%d\n",
__LINE__
);

400  
XZ_OPTIONS_ERROR
;

409 
s
->
check_ty≥
 = s->
ãmp
.
buf
[
HEADER_MAGIC_SIZE
 + 1];

411 #ifde‡
XZ_DEC_ANY_CHECK


412 i‡(
s
->
check_ty≥
 > 
XZ_CHECK_MAX
)

413  
XZ_OPTIONS_ERROR
;

415 i‡(
s
->
check_ty≥
 > 
XZ_CHECK_CRC32
)

416  
XZ_UNSUPPORTED_CHECK
;

418 i‡(
s
->
check_ty≥
 > 
XZ_CHECK_CRC32
) {

419 
	`¥ötf
("%d s->check_ty≥=%d\n",
__LINE__
, 
s
->
check_ty≥
);

420  
XZ_OPTIONS_ERROR
;

424  
XZ_OK
;

425 
	}
}

428 
xz_ªt
 
XZ_FUNC
 
	$dec_°ªam_foŸî
(
xz_dec
 *
s
)

430 i‡(!
	`memeq
(
s
->
ãmp
.
buf
 + 10, 
FOOTER_MAGIC
, 
FOOTER_MAGIC_SIZE
))

431  
XZ_DATA_ERROR
;

433 i‡(
	`¸c32
(0, 
s
->
ãmp
.
buf
 + 4, 6) != *(*)(s->temp.buf))

434  
XZ_DATA_ERROR
;

441 i‡((
s
->
ödex
.
size
 >> 2Ë!*(*)(s->
ãmp
.
buf
 + 4))

442  
XZ_DATA_ERROR
;

444 i‡(
s
->
ãmp
.
buf
[8] !0 || s->ãmp.buf[9] !s->
check_ty≥
)

445  
XZ_DATA_ERROR
;

451  
XZ_STREAM_END
;

452 
	}
}

455 
xz_ªt
 
XZ_FUNC
 
	$dec_block_hódî
(
xz_dec
 *
s
)

457 
xz_ªt
 
ªt
;

463 
s
->
ãmp
.
size
 -= 4;

464 i‡(
	`¸c32
(0, 
s
->
ãmp
.
buf
, s->ãmp.
size
)

465 !*(*)(
s
->
ãmp
.
buf
 + s->ãmp.
size
))

466  
XZ_DATA_ERROR
;

468 
s
->
ãmp
.
pos
 = 2;

474 #ifde‡
XZ_DEC_BCJ


475 i‡(
s
->
ãmp
.
buf
[1] & 0x3E)

477 i‡(
s
->
ãmp
.
buf
[1] & 0x3F)

479  
XZ_OPTIONS_ERROR
;

482 i‡(
s
->
ãmp
.
buf
[1] & 0x40) {

483 i‡(
	`dec_vli
(
s
, s->
ãmp
.
buf
, &s->ãmp.
pos
, s->ãmp.
size
)

484 !
XZ_STREAM_END
)

485  
XZ_DATA_ERROR
;

487 
s
->
block_hódî
.
com¥es£d
 = s->
vli
;

489 
s
->
block_hódî
.
com¥es£d
 = 
VLI_UNKNOWN
;

493 i‡(
s
->
ãmp
.
buf
[1] & 0x80) {

494 i‡(
	`dec_vli
(
s
, s->
ãmp
.
buf
, &s->ãmp.
pos
, s->ãmp.
size
)

495 !
XZ_STREAM_END
)

496  
XZ_DATA_ERROR
;

498 
s
->
block_hódî
.
uncom¥es£d
 = s->
vli
;

500 
s
->
block_hódî
.
uncom¥es£d
 = 
VLI_UNKNOWN
;

503 #ifde‡
XZ_DEC_BCJ


505 
s
->
bcj_a˘ive
 = s->
ãmp
.
buf
[1] & 0x01;

506 i‡(
s
->
bcj_a˘ive
) {

507 i‡(
s
->
ãmp
.
size
 - s->ãmp.
pos
 < 2)

508  
XZ_OPTIONS_ERROR
;

510 
ªt
 = 
	`xz_dec_bcj_ª£t
(
s
->
bcj
, s->
ãmp
.
buf
[s->ãmp.
pos
++]);

511 i‡(
ªt
 !
XZ_OK
)

512  
ªt
;

518 i‡(
s
->
ãmp
.
buf
[s->ãmp.
pos
++] != 0x00)

519  
XZ_OPTIONS_ERROR
;

524 i‡(
s
->
ãmp
.
size
 - s->ãmp.
pos
 < 2)

525  
XZ_DATA_ERROR
;

528 i‡(
s
->
ãmp
.
buf
[s->ãmp.
pos
++] != 0x21)

529  
XZ_OPTIONS_ERROR
;

532 i‡(
s
->
ãmp
.
buf
[s->ãmp.
pos
++] != 0x01)

533  
XZ_OPTIONS_ERROR
;

536 i‡(
s
->
ãmp
.
size
 - s->ãmp.
pos
 < 1)

537  
XZ_DATA_ERROR
;

539 
ªt
 = 
	`xz_dec_lzma2_ª£t
(
s
->
lzma2
, s->
ãmp
.
buf
[s->ãmp.
pos
++]);

540 i‡(
ªt
 !
XZ_OK
)

541  
ªt
;

544 
s
->
ãmp
.
pos
 < s->ãmp.
size
)

545 i‡(
s
->
ãmp
.
buf
[s->ãmp.
pos
++] != 0x00)

546  
XZ_OPTIONS_ERROR
;

548 
s
->
ãmp
.
pos
 = 0;

549 
s
->
block
.
com¥es£d
 = 0;

550 
s
->
block
.
uncom¥es£d
 = 0;

552  
XZ_OK
;

553 
	}
}

555 
xz_ªt
 
XZ_FUNC
 
	$dec_maö
(
xz_dec
 *
s
, 
xz_buf
 *
b
)

557 
xz_ªt
 
ªt
;

563 
s
->
ö_°¨t
 = 
b
->
ö_pos
;

565 
åue
) {

566 
s
->
£quí˚
) {

567 
SEQ_STREAM_HEADER
:

576 i‡(!
	`fûl_ãmp
(
s
, 
b
))

577  
XZ_OK
;

586 
s
->
£quí˚
 = 
SEQ_BLOCK_START
;

588 
ªt
 = 
	`dec_°ªam_hódî
(
s
);

589 i‡(
ªt
 !
XZ_OK
)

590  
ªt
;

592 
SEQ_BLOCK_START
:

594 i‡(
b
->
ö_pos
 =b->
ö_size
)

595  
XZ_OK
;

598 i‡(
b
->
ö
[b->
ö_pos
] == 0) {

599 
s
->
ö_°¨t
 = 
b
->
ö_pos
++;

600 
s
->
£quí˚
 = 
SEQ_INDEX
;

608 
s
->
block_hódî
.
size


609 ((
uöt32_t
)
b
->
ö
[b->
ö_pos
] + 1) * 4;

611 
s
->
ãmp
.
size
 = s->
block_hódî
.size;

612 
s
->
ãmp
.
pos
 = 0;

613 
s
->
£quí˚
 = 
SEQ_BLOCK_HEADER
;

615 
SEQ_BLOCK_HEADER
:

616 i‡(!
	`fûl_ãmp
(
s
, 
b
))

617  
XZ_OK
;

619 
ªt
 = 
	`dec_block_hódî
(
s
);

620 i‡(
ªt
 !
XZ_OK
)

621  
ªt
;

623 
s
->
£quí˚
 = 
SEQ_BLOCK_UNCOMPRESS
;

625 
SEQ_BLOCK_UNCOMPRESS
:

626 
ªt
 = 
	`dec_block
(
s
, 
b
);

627 i‡(
ªt
 !
XZ_STREAM_END
)

628  
ªt
;

630 
s
->
£quí˚
 = 
SEQ_BLOCK_PADDING
;

632 
SEQ_BLOCK_PADDING
:

640 
s
->
block
.
com¥es£d
 & 3) {

641 i‡(
b
->
ö_pos
 =b->
ö_size
)

642  
XZ_OK
;

644 i‡(
b
->
ö
[b->
ö_pos
++] != 0)

645  
XZ_DATA_ERROR
;

647 ++
s
->
block
.
com¥es£d
;

650 
s
->
£quí˚
 = 
SEQ_BLOCK_CHECK
;

652 
SEQ_BLOCK_CHECK
:

653 i‡(
s
->
check_ty≥
 =
XZ_CHECK_CRC32
) {

654 
ªt
 = 
	`¸c32_vÆid©e
(
s
, 
b
);

655 i‡(
ªt
 !
XZ_STREAM_END
)

656  
ªt
;

658 #ifde‡
XZ_DEC_ANY_CHECK


659 i‡(!
	`check_skù
(
s
, 
b
)) {

660  
XZ_OK
;

664 
s
->
£quí˚
 = 
SEQ_BLOCK_START
;

667 
SEQ_INDEX
:

668 
ªt
 = 
	`dec_ödex
(
s
, 
b
);

669 i‡(
ªt
 !
XZ_STREAM_END
)

670  
ªt
;

672 
s
->
£quí˚
 = 
SEQ_INDEX_PADDING
;

674 
SEQ_INDEX_PADDING
:

675 (
s
->
ödex
.
size
 + (
b
->
ö_pos
 - s->
ö_°¨t
))

677 i‡(
b
->
ö_pos
 =b->
ö_size
) {

678 
	`ödex_upd©e
(
s
, 
b
);

679  
XZ_OK
;

682 i‡(
b
->
ö
[b->
ö_pos
++] != 0)

683  
XZ_DATA_ERROR
;

687 
	`ödex_upd©e
(
s
, 
b
);

690 i‡(!
	`memeq
(&
s
->
block
.
hash
, &s->
ödex
.hash,

691 (
s
->
block
.
hash
)))

692  
XZ_DATA_ERROR
;

694 
s
->
£quí˚
 = 
SEQ_INDEX_CRC32
;

696 
SEQ_INDEX_CRC32
:

697 
ªt
 = 
	`¸c32_vÆid©e
(
s
, 
b
);

698 i‡(
ªt
 !
XZ_STREAM_END
)

699  
ªt
;

701 
s
->
ãmp
.
size
 = 
STREAM_HEADER_SIZE
;

702 
s
->
£quí˚
 = 
SEQ_STREAM_FOOTER
;

704 
SEQ_STREAM_FOOTER
:

705 i‡(!
	`fûl_ãmp
(
s
, 
b
))

706  
XZ_OK
;

708  
	`dec_°ªam_foŸî
(
s
);

713 
	}
}

740 
XZ_EXTERN
 
xz_ªt
 
XZ_FUNC
 
	$xz_dec_run
(
xz_dec
 *
s
, 
xz_buf
 *
b
)

742 
size_t
 
ö_°¨t
;

743 
size_t
 
out_°¨t
;

744 
xz_ªt
 
ªt
;

746 i‡(
	`DEC_IS_SINGLE
(
s
->
mode
))

747 
	`xz_dec_ª£t
(
s
);

749 
ö_°¨t
 = 
b
->
ö_pos
;

750 
out_°¨t
 = 
b
->
out_pos
;

751 
ªt
 = 
	`dec_maö
(
s
, 
b
);

753 i‡(
	`DEC_IS_SINGLE
(
s
->
mode
)) {

754 i‡(
ªt
 =
XZ_OK
)

755 
ªt
 = 
b
->
ö_pos
 =b->
ö_size


756 ? 
XZ_DATA_ERROR
 : 
XZ_BUF_ERROR
;

758 i‡(
ªt
 !
XZ_STREAM_END
) {

759 
b
->
ö_pos
 = 
ö_°¨t
;

760 
b
->
out_pos
 = 
out_°¨t
;

763 } i‡(
ªt
 =
XZ_OK
 && 
ö_°¨t
 =
b
->
ö_pos


764 && 
out_°¨t
 =
b
->
out_pos
) {

765 i‡(
s
->
Ælow_buf_îr‹
)

766 
ªt
 = 
XZ_BUF_ERROR
;

768 
s
->
Ælow_buf_îr‹
 = 
åue
;

770 
s
->
Ælow_buf_îr‹
 = 
Ál£
;

773  
ªt
;

774 
	}
}

776 
XZ_EXTERN
 
xz_dec
 * 
XZ_FUNC
 
	$xz_dec_öô
(

777 
xz_mode
 
mode
, 
uöt32_t
 
di˘_max
)

779 
xz_dec
 *
s
 = 
	`kmÆloc
((*s), 
GFP_KERNEL
);

780 i‡(
s
 =
NULL
)

781  
NULL
;

783 
s
->
mode
 = mode;

785 #ifde‡
XZ_DEC_BCJ


786 
s
->
bcj
 = 
	`xz_dec_bcj_¸óã
(
	`DEC_IS_SINGLE
(
mode
));

787 i‡(
s
->
bcj
 =
NULL
)

788 
îr‹_bcj
;

791 
s
->
lzma2
 = 
	`xz_dec_lzma2_¸óã
(
mode
, 
di˘_max
);

792 i‡(
s
->
lzma2
 =
NULL
)

793 
îr‹_lzma2
;

795 
	`xz_dec_ª£t
(
s
);

796  
s
;

798 
îr‹_lzma2
:

799 #ifde‡
XZ_DEC_BCJ


800 
	`xz_dec_bcj_íd
(
s
->
bcj
);

801 
îr‹_bcj
:

803 
	`k‰ì
(
s
);

804  
NULL
;

805 
	}
}

807 
XZ_EXTERN
 
XZ_FUNC
 
	$xz_dec_ª£t
(
xz_dec
 *
s
)

809 
s
->
£quí˚
 = 
SEQ_STREAM_HEADER
;

810 
s
->
Ælow_buf_îr‹
 = 
Ál£
;

811 
s
->
pos
 = 0;

812 
s
->
¸c32
 = 0;

813 
	`memzîo
(&
s
->
block
, (s->block));

814 
	`memzîo
(&
s
->
ödex
, (s->index));

815 
s
->
ãmp
.
pos
 = 0;

816 
s
->
ãmp
.
size
 = 
STREAM_HEADER_SIZE
;

817 
	}
}

819 
XZ_EXTERN
 
XZ_FUNC
 
	$xz_dec_íd
(
xz_dec
 *
s
)

821 i‡(
s
 !
NULL
) {

822 
	`xz_dec_lzma2_íd
(
s
->
lzma2
);

823 #ifde‡
XZ_DEC_BCJ


824 
	`xz_dec_bcj_íd
(
s
->
bcj
);

826 
	`k‰ì
(
s
);

828 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/xz_lzma2.h

11 #i‚de‡
XZ_LZMA2_H


12 
	#XZ_LZMA2_H


	)

15 
	#RC_SHIFT_BITS
 8

	)

16 
	#RC_TOP_BITS
 24

	)

17 
	#RC_TOP_VALUE
 (1 << 
RC_TOP_BITS
)

	)

18 
	#RC_BIT_MODEL_TOTAL_BITS
 11

	)

19 
	#RC_BIT_MODEL_TOTAL
 (1 << 
RC_BIT_MODEL_TOTAL_BITS
)

	)

20 
	#RC_MOVE_BITS
 5

	)

27 
	#POS_STATES_MAX
 (1 << 4)

	)

42 
	elzma_°©e
 {

43 
	mSTATE_LIT_LIT
,

44 
	mSTATE_MATCH_LIT_LIT
,

45 
	mSTATE_REP_LIT_LIT
,

46 
	mSTATE_SHORTREP_LIT_LIT
,

47 
	mSTATE_MATCH_LIT
,

48 
	mSTATE_REP_LIT
,

49 
	mSTATE_SHORTREP_LIT
,

50 
	mSTATE_LIT_MATCH
,

51 
	mSTATE_LIT_LONGREP
,

52 
	mSTATE_LIT_SHORTREP
,

53 
	mSTATE_NONLIT_MATCH
,

54 
	mSTATE_NONLIT_REP


58 
	#STATES
 12

	)

61 
	#LIT_STATES
 7

	)

64 
ölöe
 
XZ_FUNC
 
	$lzma_°©e_lôîÆ
(
lzma_°©e
 *
°©e
)

66 i‡(*
°©e
 <
STATE_SHORTREP_LIT_LIT
)

67 *
°©e
 = 
STATE_LIT_LIT
;

68 i‡(*
°©e
 <
STATE_LIT_SHORTREP
)

69 *
°©e
 -= 3;

71 *
°©e
 -= 6;

72 
	}
}

75 
ölöe
 
XZ_FUNC
 
	$lzma_°©e_m©ch
(
lzma_°©e
 *
°©e
)

77 *
°©e
 = *°©ê< 
LIT_STATES
 ? 
STATE_LIT_MATCH
 : 
STATE_NONLIT_MATCH
;

78 
	}
}

81 
ölöe
 
XZ_FUNC
 
	$lzma_°©e_l⁄g_ªp
(
lzma_°©e
 *
°©e
)

83 *
°©e
 = *°©ê< 
LIT_STATES
 ? 
STATE_LIT_LONGREP
 : 
STATE_NONLIT_REP
;

84 
	}
}

87 
ölöe
 
XZ_FUNC
 
	$lzma_°©e_sh‹t_ªp
(
lzma_°©e
 *
°©e
)

89 *
°©e
 = *°©ê< 
LIT_STATES
 ? 
STATE_LIT_SHORTREP
 : 
STATE_NONLIT_REP
;

90 
	}
}

93 
ölöe
 
boﬁ
 
XZ_FUNC
 
	$lzma_°©e_is_lôîÆ
(
lzma_°©e
 
°©e
)

95  
°©e
 < 
LIT_STATES
;

96 
	}
}

106 
	#LITERAL_CODER_SIZE
 0x300

	)

109 
	#LITERAL_CODERS_MAX
 (1 << 4)

	)

112 
	#MATCH_LEN_MIN
 2

	)

121 
	#LEN_LOW_BITS
 3

	)

122 
	#LEN_LOW_SYMBOLS
 (1 << 
LEN_LOW_BITS
)

	)

123 
	#LEN_MID_BITS
 3

	)

124 
	#LEN_MID_SYMBOLS
 (1 << 
LEN_MID_BITS
)

	)

125 
	#LEN_HIGH_BITS
 8

	)

126 
	#LEN_HIGH_SYMBOLS
 (1 << 
LEN_HIGH_BITS
)

	)

127 
	#LEN_SYMBOLS
 (
LEN_LOW_SYMBOLS
 + 
LEN_MID_SYMBOLS
 + 
LEN_HIGH_SYMBOLS
)

	)

133 
	#MATCH_LEN_MAX
 (
MATCH_LEN_MIN
 + 
LEN_SYMBOLS
 - 1)

	)

141 
	#DIST_STATES
 4

	)

147 
ölöe
 
uöt32_t
 
XZ_FUNC
 
	$lzma_gë_di°_°©e
(
uöt32_t
 
Àn
)

149  
Àn
 < 
DIST_STATES
 + 
MATCH_LEN_MIN


150 ? 
Àn
 - 
MATCH_LEN_MIN
 : 
DIST_STATES
 - 1;

151 
	}
}

158 
	#DIST_SLOT_BITS
 6

	)

159 
	#DIST_SLOTS
 (1 << 
DIST_SLOT_BITS
)

	)

168 
	#DIST_MODEL_START
 4

	)

180 
	#DIST_MODEL_END
 14

	)

183 
	#FULL_DISTANCES_BITS
 (
DIST_MODEL_END
 / 2)

	)

184 
	#FULL_DISTANCES
 (1 << 
FULL_DISTANCES_BITS
)

	)

190 
	#ALIGN_BITS
 4

	)

191 
	#ALIGN_SIZE
 (1 << 
ALIGN_BITS
)

	)

192 
	#ALIGN_MASK
 (
ALIGN_SIZE
 - 1)

	)

195 
	#PROBS_TOTAL
 (1846 + 
LITERAL_CODERS_MAX
 * 
LITERAL_CODER_SIZE
)

	)

202 
	#REPS
 4

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/xz_private.h

10 #i‚de‡
XZ_PRIVATE_H


11 
	#XZ_PRIVATE_H


	)

13 
	~<comm⁄.h
>

14 
	~<löux/ty≥s.h
>

15 
	~<asm/byã‹dî.h
>

16 
	~<asm/u«lig√d.h
>

17 
	~<mÆloc.h
>

18 
	~<xz.h
>

20 #i‚de‡
__Æways_ölöe


21 
	#__Æways_ölöe
 
ölöe


	)

24 #i‚de‡
GFP_KERNEL


25 
	#GFP_KERNEL
 0

	)

28 #i‚de‡
memzîo


29 
	#memzîo
(
±r
, 
Àn
Ë
	`mem£t
’å, 0,Üí)

	)

32 #i‚de‡
memeq


33 
	#memeq
(
s1
, 
s2
, 
n
Ë(
	`memcmp
(s1, s2,ÇË=0)

	)

36 #i‚de‡
gë_À32


37 
	#gë_À32
(
x
Ë
	`gë_u«lig√d_À32
(x)

	)

40 #i‚de‡
boﬁ


41 
	tboﬁ
;

42 
	#Ál£
 (0)

	)

43 
	#åue
 (!
Ál£
)

	)

46 #i‚de‡
mö_t


47 
	#mö_t
(
ty≥
,
x
,
y
) \

48 ({ 
ty≥
 
__x
 = (
x
);Åy≥ 
__y
 = (
y
); __x < __y ? __x: __y; })

	)

50 #i‚de‡
max_t


51 
	#max_t
(
ty≥
,
x
,
y
) \

52 ({ 
ty≥
 
__x
 = (
x
);Åy≥ 
__y
 = (
y
); __x > __y ? __x: __y; })

	)

56 #i‡!
deföed
(
XZ_DEC_SINGLE
Ë&& !deföed(
XZ_DEC_PREALLOC
) \

57 && !
	$deföed
(
XZ_DEC_DYNALLOC
)

58 
	#XZ_DEC_SINGLE


	)

59 
	#XZ_DEC_PREALLOC


	)

60 
	#XZ_DEC_DYNALLOC


	)

68 #ifde‡
XZ_DEC_SINGLE


69 
	#DEC_IS_SINGLE
(
mode
Ë((modeË=
XZ_SINGLE
)

	)

71 
	#DEC_IS_SINGLE
(
mode
Ë(
Ál£
)

	)

74 #ifde‡
XZ_DEC_PREALLOC


75 
	#DEC_IS_PREALLOC
(
mode
Ë((modeË=
XZ_PREALLOC
)

	)

77 
	#DEC_IS_PREALLOC
(
mode
Ë(
Ál£
)

	)

80 #ifde‡
XZ_DEC_DYNALLOC


81 
	#DEC_IS_DYNALLOC
(
mode
Ë((modeË=
XZ_DYNALLOC
)

	)

83 
	#DEC_IS_DYNALLOC
(
mode
Ë(
Ál£
)

	)

86 #i‡!
	`deföed
(
XZ_DEC_SINGLE
)

87 
	#DEC_IS_MULTI
(
mode
Ë(
åue
)

	)

88 #ñi‡
	`deföed
(
XZ_DEC_PREALLOC
Ë|| deföed(
XZ_DEC_DYNALLOC
)

89 
	#DEC_IS_MULTI
(
mode
Ë((modeË!
XZ_SINGLE
)

	)

91 
	#DEC_IS_MULTI
(
mode
Ë(
Ál£
)

	)

98 #i‚de‡
XZ_DEC_BCJ


99 #i‡
	`deföed
(
XZ_DEC_X86
Ë|| deföed(
XZ_DEC_POWERPC
) \

100 || 
	`deföed
(
XZ_DEC_IA64
Ë|| deföed(
XZ_DEC_ARM
) \

101 || 
	`deföed
(
XZ_DEC_ARM
Ë|| deföed(
XZ_DEC_ARMTHUMB
) \

102 || 
	$deföed
(
XZ_DEC_SPARC
)

103 
	#XZ_DEC_BCJ


	)

111 
XZ_EXTERN
 
xz_dec_lzma2
 * 
XZ_FUNC
 
	`xz_dec_lzma2_¸óã
(

112 
xz_mode
 
mode
, 
uöt32_t
 
di˘_max
);

120 
XZ_EXTERN
 
xz_ªt
 
XZ_FUNC
 
	`xz_dec_lzma2_ª£t
(

121 
xz_dec_lzma2
 *
s
, 
uöt8_t
 
¥›s
);

124 
XZ_EXTERN
 
xz_ªt
 
XZ_FUNC
 
	`xz_dec_lzma2_run
(

125 
xz_dec_lzma2
 *
s
, 
xz_buf
 *
b
);

128 
XZ_EXTERN
 
XZ_FUNC
 
	`xz_dec_lzma2_íd
(
xz_dec_lzma2
 *
s
);

130 #ifde‡
XZ_DEC_BCJ


135 
XZ_EXTERN
 
xz_dec_bcj
 * 
XZ_FUNC
 
	`xz_dec_bcj_¸óã
(
boﬁ
 
sögÀ_ˇŒ
);

143 
XZ_EXTERN
 
xz_ªt
 
XZ_FUNC
 
	`xz_dec_bcj_ª£t
(

144 
xz_dec_bcj
 *
s
, 
uöt8_t
 
id
);

151 
XZ_EXTERN
 
xz_ªt
 
XZ_FUNC
 
	`xz_dec_bcj_run
(
xz_dec_bcj
 *
s
,

152 
xz_dec_lzma2
 *
lzma2
, 
xz_buf
 *
b
);

155 
	#xz_dec_bcj_íd
(
s
Ë
	`k‰ì
(s)

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/xz_stream.h

10 #i‚de‡
XZ_STREAM_H


11 
	#XZ_STREAM_H


	)

19 
	#STREAM_HEADER_SIZE
 12

	)

22 
	#HEADER_MAGIC_SIZE
 6

	)

24 
	#FOOTER_MAGIC
 "YZ"

	)

25 
	#FOOTER_MAGIC_SIZE
 2

	)

31 
uöt64_t
 
	tvli_ty≥
;

33 
	#VLI_MAX
 ((
vli_ty≥
)-1 / 2)

	)

34 
	#VLI_UNKNOWN
 ((
vli_ty≥
)-1)

	)

37 
	#VLI_BYTES_MAX
 ((
vli_ty≥
Ë* 8 / 7)

	)

40 
	exz_check
 {

41 
	mXZ_CHECK_NONE
 = 0,

42 
	mXZ_CHECK_CRC32
 = 1,

43 
	mXZ_CHECK_CRC64
 = 4,

44 
	mXZ_CHECK_SHA256
 = 10

48 
	#XZ_CHECK_MAX
 15

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/zlib.c

28 
	#_Z_UTIL_H


	)

30 
	~"zlib.h
"

32 #i‚de‡
loˇl


33 
	#loˇl
 

	)

37 
	#FAR


	)

39 
	tuch
;

40 
uch
 
	tFAR
 
	tuchf
;

41 
	tush
;

42 
ush
 
	tFAR
 
	tushf
;

43 
	tulg
;

45 *
z_îrmsg
[];

47 
	#ERR_RETURN
(
°rm
,
îr
Ë (°rm->
msg
=
z_îrmsg
[1-îr],Éº)

	)

50 #i‚de‡
NULL


51 
	#NULL
 ((*Ë0)

	)

56 
	#DEFLATED
 8

	)

58 #i‚de‡
DEF_WBITS


59 
	#DEF_WBITS
 
MAX_WBITS


	)

63 #i‡
MAX_MEM_LEVEL
 >= 8

64 
	#DEF_MEM_LEVEL
 8

	)

66 
	#DEF_MEM_LEVEL
 
MAX_MEM_LEVEL


	)

70 
	#STORED_BLOCK
 0

	)

71 
	#STATIC_TREES
 1

	)

72 
	#DYN_TREES
 2

	)

75 
	#MIN_MATCH
 3

	)

76 
	#MAX_MATCH
 258

	)

81 
	~<löux/°rög.h
>

82 
	#zmem˝y
 
mem˝y


	)

83 
	#zmemzîo
(
de°
, 
Àn
Ë
	`mem£t
(de°, 0,Üí)

	)

86 #ifde‡
DEBUG_ZLIB


87 
	~<°dio.h
>

88 #i‚de‡
vîbo£


89 
	#vîbo£
 0

	)

91 
	#As£π
(
c⁄d
,
msg
Ë{if(!(c⁄d)Ë
	`z_îr‹
(msg);}

	)

92 
	#Tø˚
(
x
Ë
Ârötf
 
	)
x

93 
	#Tø˚v
(
x
Ë{i‡(
vîbo£
Ë
Ârötf
 x ;}

	)

94 
	#Tø˚vv
(
x
Ë{i‡(
vîbo£
>1Ë
Ârötf
 x ;}

	)

95 
	#Tø˚c
(
c
,
x
Ë{i‡(
vîbo£
 && (c)Ë
Ârötf
 x ;}

	)

96 
	#Tø˚cv
(
c
,
x
Ë{i‡(
vîbo£
>1 && (c)Ë
Ârötf
 x ;}

	)

98 
	#As£π
(
c⁄d
,
msg
)

	)

99 
	#Tø˚
(
x
)

	)

100 
	#Tø˚v
(
x
)

	)

101 
	#Tø˚vv
(
x
)

	)

102 
	#Tø˚c
(
c
,
x
)

	)

103 
	#Tø˚cv
(
c
,
x
)

	)

107 
	$uL⁄g
 (*
	tcheck_func
Ë
	tOF
((
	tuL⁄g
 
	tcheck
, 
	tByãf
 *
	tbuf
, 
	tuI¡
 
	tÀn
));

112 
	#ZALLOC
(
°rm
, 
ôems
, 
size
) \

113 (*((
°rm
)->
zÆloc
))((°rm)->
›aque
, (
ôems
), (
size
))

	)

114 
	#ZFREE
(
°rm
, 
addr
, 
size
) \

115 (*((
°rm
)->
z‰ì
))((°rm)->
›aque
, (
voidpf
)(
addr
), (
size
))

	)

116 
	#TRY_FREE
(
s
, 
p
, 
n
Ë{i‡’Ë
	`ZFREE
(s,Ö,Ç);
	}

	)
}

139 
	göÊ©e_blocks_°©e
;

140 
öÊ©e_blocks_°©e
 
	tFAR
 
	töÊ©e_blocks_°©ef
;

142 
loˇl
 
öÊ©e_blocks_°©ef
 * 
öÊ©e_blocks_√w
 
OF
((

143 
z_°ªam
 *
z
,

144 
check_func
 
c
,

145 
uI¡
 
w
));

147 
loˇl
 
öÊ©e_blocks
 
OF
((

148 
öÊ©e_blocks_°©ef
 *,

149 
z_°ªam
 *,

152 
loˇl
 
öÊ©e_blocks_ª£t
 
OF
((

153 
öÊ©e_blocks_°©ef
 *,

154 
z_°ªam
 *,

155 
uL⁄gf
 *));

157 
loˇl
 
öÊ©e_blocks_‰ì
 
OF
((

158 
öÊ©e_blocks_°©ef
 *,

159 
z_°ªam
 *,

160 
uL⁄gf
 *));

162 
loˇl
 
öÊ©e_addhi°‹y
 
OF
((

163 
öÊ©e_blocks_°©ef
 *,

164 
z_°ªam
 *));

166 
loˇl
 
öÊ©e_∑ckë_Êush
 
OF
((

167 
öÊ©e_blocks_°©ef
 *));

183 
öÊ©e_hu·_s
 
	tFAR
 
	töÊ©e_hu·
;

185 
	söÊ©e_hu·_s
 {

188 
Byã
 
	mEx›
;

189 
Byã
 
	mBôs
;

190 } 
	mwh©
;

191 
uI¡
 
	mNÆloc
;

192 
Byãf
 *
	m∑d
;

193 } 
	mw‹d
;

195 
uI¡
 
	mBa£
;

196 
öÊ©e_hu·
 *
	mNext
;

197 } 
	mm‹e
;

200 #ifde‡
DEBUG_ZLIB


201 
loˇl
 
uI¡
 
	göÊ©e_hu·s
;

204 
loˇl
 
öÊ©e_åìs_bôs
 
OF
((

205 
uI¡f
 *,

206 
uI¡f
 *,

207 
öÊ©e_hu·
 * 
FAR
 *,

208 
z_°ªam
 *));

210 
loˇl
 
öÊ©e_åìs_dy«mic
 
OF
((

211 
uI¡
,

212 
uI¡
,

213 
uI¡f
 *,

214 
uI¡f
 *,

215 
uI¡f
 *,

216 
öÊ©e_hu·
 * 
FAR
 *,

217 
öÊ©e_hu·
 * 
FAR
 *,

218 
z_°ªam
 *));

220 
loˇl
 
öÊ©e_åìs_fixed
 
OF
((

221 
uI¡f
 *,

222 
uI¡f
 *,

223 
öÊ©e_hu·
 * 
FAR
 *,

224 
öÊ©e_hu·
 * 
FAR
 *));

226 
loˇl
 
öÊ©e_åìs_‰ì
 
OF
((

227 
öÊ©e_hu·
 *,

228 
z_°ªam
 *));

242 
	göÊ©e_codes_°©e
;

243 
öÊ©e_codes_°©e
 
	tFAR
 
	töÊ©e_codes_°©ef
;

245 
loˇl
 
öÊ©e_codes_°©ef
 *
öÊ©e_codes_√w
 
OF
((

246 
uI¡
, uInt,

247 
öÊ©e_hu·
 *, inflate_huft *,

248 
z_°ªam
 *));

250 
loˇl
 
öÊ©e_codes
 
OF
((

251 
öÊ©e_blocks_°©ef
 *,

252 
z_°ªam
 *,

255 
loˇl
 
öÊ©e_codes_‰ì
 
OF
((

256 
öÊ©e_codes_°©ef
 *,

257 
z_°ªam
 *));

267 
	söã∫Æ_°©e
 {

271 
	mMETHOD
,

272 
	mFLAG
,

273 
	mBLOCKS
,

274 
	mCHECK4
,

275 
	mCHECK3
,

276 
	mCHECK2
,

277 
	mCHECK1
,

278 
	mDONE
,

279 
	mBAD
}

280 
	mmode
;

284 
uI¡
 
	mmëhod
;

286 
uL⁄g
 
	mwas
;

287 
uL⁄g
 
	m√ed
;

288 } 
	mcheck
;

289 
uI¡
 
	mm¨kî
;

290 } 
	msub
;

293 
	mnowøp
;

294 
uI¡
 
	mwbôs
;

295 
öÊ©e_blocks_°©ef


296 *
	mblocks
;

301 
	$öÊ©eRe£t
(
z
)

302 
z_°ªam
 *
z
;

304 
uL⁄g
 
c
;

306 i‡(
z
 =
Z_NULL
 || z->
°©e
 == Z_NULL)

307  
Z_STREAM_ERROR
;

308 
z
->
tŸÆ_ö
 = z->
tŸÆ_out
 = 0;

309 
z
->
msg
 = 
Z_NULL
;

310 
z
->
°©e
->
mode
 = z->°©e->
nowøp
 ? 
BLOCKS
 : 
METHOD
;

311 
	`öÊ©e_blocks_ª£t
(
z
->
°©e
->
blocks
, z, &
c
);

312 
	`Tø˚
((
°dîr
, "inflate:Ñeset\n"));

313  
Z_OK
;

314 
	}
}

317 
	$öÊ©eEnd
(
z
)

318 
z_°ªam
 *
z
;

320 
uL⁄g
 
c
;

322 i‡(
z
 =
Z_NULL
 || z->
°©e
 =Z_NULL || z->
z‰ì
 == Z_NULL)

323  
Z_STREAM_ERROR
;

324 i‡(
z
->
°©e
->
blocks
 !
Z_NULL
)

325 
	`öÊ©e_blocks_‰ì
(
z
->
°©e
->
blocks
, z, &
c
);

326 
	`ZFREE
(
z
, z->
°©e
, (
öã∫Æ_°©e
));

327 
z
->
°©e
 = 
Z_NULL
;

328 
	`Tø˚
((
°dîr
, "inflate:Énd\n"));

329  
Z_OK
;

330 
	}
}

333 
	$öÊ©eInô2
(
z
, 
w
)

334 
z_°ªam
 *
z
;

335 
w
;

338 i‡(
z
 =
Z_NULL
)

339  
Z_STREAM_ERROR
;

342 i‡((
z
->
°©e
 = (
öã∫Æ_°©e
 
FAR
 *)

343 
	`ZALLOC
(
z
,1,(
öã∫Æ_°©e
))Ë=
Z_NULL
)

344  
Z_MEM_ERROR
;

345 
z
->
°©e
->
blocks
 = 
Z_NULL
;

348 
z
->
°©e
->
nowøp
 = 0;

349 i‡(
w
 < 0)

351 
w
 = - w;

352 
z
->
°©e
->
nowøp
 = 1;

356 i‡(
w
 < 8 || w > 15)

358 
	`öÊ©eEnd
(
z
);

359  
Z_STREAM_ERROR
;

361 
z
->
°©e
->
wbôs
 = (
uI¡
)
w
;

364 i‡((
z
->
°©e
->
blocks
 =

365 
	`öÊ©e_blocks_√w
(
z
, z->
°©e
->
nowøp
 ? 
Z_NULL
 : 
adÀr32
, 1 << 
w
))

366 =
Z_NULL
)

368 
	`öÊ©eEnd
(
z
);

369  
Z_MEM_ERROR
;

371 
	`Tø˚
((
°dîr
, "inflate:állocated\n"));

374 
	`öÊ©eRe£t
(
z
);

375  
Z_OK
;

376 
	}
}

379 
	$öÊ©eInô
(
z
)

380 
z_°ªam
 *
z
;

382  
	`öÊ©eInô2
(
z
, 
DEF_WBITS
);

383 
	}
}

386 
	#NEEDBYTE
 {if(
z
->
avaû_ö
==0)
em±y
;
r
=
Z_OK
;}

	)

387 
	#NEXTBYTE
 (
z
->
avaû_ö
--,z->
tŸÆ_ö
++,*z->
√xt_ö
++)

	)

389 
	$öÊ©e
(
z
, 
f
)

390 
z_°ªam
 *
z
;

391 
f
;

393 
r
;

394 
uI¡
 
b
;

396 i‡(
z
 =
Z_NULL
 || z->
√xt_ö
 == Z_NULL)

397  
Z_STREAM_ERROR
;

398 
r
 = 
Z_BUF_ERROR
;

399 1Ë
z
->
°©e
->
mode
)

401 
METHOD
:

402 
NEEDBYTE


403 i‡(((
z
->
°©e
->
sub
.
mëhod
 = 
NEXTBYTE
Ë& 0xfË!
DEFLATED
)

405 
z
->
°©e
->
mode
 = 
BAD
;

406 
z
->
msg
 = "unknown compression method";

407 
z
->
°©e
->
sub
.
m¨kî
 = 5;

410 i‡((
z
->
°©e
->
sub
.
mëhod
 >> 4Ë+ 8 > z->°©e->
wbôs
)

412 
z
->
°©e
->
mode
 = 
BAD
;

413 
z
->
msg
 = "invalid window size";

414 
z
->
°©e
->
sub
.
m¨kî
 = 5;

417 
z
->
°©e
->
mode
 = 
FLAG
;

418 
FLAG
:

419 
NEEDBYTE


420 i‡((
b
 = 
NEXTBYTE
) & 0x20)

422 
z
->
°©e
->
mode
 = 
BAD
;

423 
z
->
msg
 = "invalidÑeserved bit";

424 
z
->
°©e
->
sub
.
m¨kî
 = 5;

427 i‡(((
z
->
°©e
->
sub
.
mëhod
 << 8Ë+ 
b
) % 31)

429 
z
->
°©e
->
mode
 = 
BAD
;

430 
z
->
msg
 = "incorrect header check";

431 
z
->
°©e
->
sub
.
m¨kî
 = 5;

434 
	`Tø˚
((
°dîr
, "inflate: zlib header ok\n"));

435 
z
->
°©e
->
mode
 = 
BLOCKS
;

436 
BLOCKS
:

437 
r
 = 
	`öÊ©e_blocks
(
z
->
°©e
->
blocks
, z,Ñ);

438 i‡(
f
 =
Z_PACKET_FLUSH
 && 
z
->
avaû_ö
 =0 && z->
avaû_out
 != 0)

439 
r
 = 
	`öÊ©e_∑ckë_Êush
(
z
->
°©e
->
blocks
);

440 i‡(
r
 =
Z_DATA_ERROR
)

442 
z
->
°©e
->
mode
 = 
BAD
;

443 
z
->
°©e
->
sub
.
m¨kî
 = 0;

446 i‡(
r
 !
Z_STREAM_END
)

447  
r
;

448 
r
 = 
Z_OK
;

449 
	`öÊ©e_blocks_ª£t
(
z
->
°©e
->
blocks
, z, &z->°©e->
sub
.
check
.
was
);

450 i‡(
z
->
°©e
->
nowøp
)

452 
z
->
°©e
->
mode
 = 
DONE
;

455 
z
->
°©e
->
mode
 = 
CHECK4
;

456 
CHECK4
:

457 
NEEDBYTE


458 
z
->
°©e
->
sub
.
check
.
√ed
 = (
uL⁄g
)
NEXTBYTE
 << 24;

459 
z
->
°©e
->
mode
 = 
CHECK3
;

460 
CHECK3
:

461 
NEEDBYTE


462 
z
->
°©e
->
sub
.
check
.
√ed
 +(
uL⁄g
)
NEXTBYTE
 << 16;

463 
z
->
°©e
->
mode
 = 
CHECK2
;

464 
CHECK2
:

465 
NEEDBYTE


466 
z
->
°©e
->
sub
.
check
.
√ed
 +(
uL⁄g
)
NEXTBYTE
 << 8;

467 
z
->
°©e
->
mode
 = 
CHECK1
;

468 
CHECK1
:

469 
NEEDBYTE


470 
z
->
°©e
->
sub
.
check
.
√ed
 +(
uL⁄g
)
NEXTBYTE
;

472 i‡(
z
->
°©e
->
sub
.
check
.
was
 !z->°©e->sub.check.
√ed
)

474 
z
->
°©e
->
mode
 = 
BAD
;

475 
z
->
msg
 = "incorrect data check";

476 
z
->
°©e
->
sub
.
m¨kî
 = 5;

479 
	`Tø˚
((
°dîr
, "inflate: zlib check ok\n"));

480 
z
->
°©e
->
mode
 = 
DONE
;

481 
DONE
:

482  
Z_STREAM_END
;

483 
BAD
:

484  
Z_DATA_ERROR
;

486  
Z_STREAM_ERROR
;

489 
em±y
:

490 i‡(
f
 !
Z_PACKET_FLUSH
)

491  
r
;

492 
z
->
°©e
->
mode
 = 
BAD
;

493 
z
->
°©e
->
sub
.
m¨kî
 = 0;

494  
Z_DATA_ERROR
;

495 
	}
}

506 
	$öÊ©eIncomp
(
z
)

507 
z_°ªam
 *
z
;

509 i‡(
z
->
°©e
->
mode
 !
BLOCKS
)

510  
Z_DATA_ERROR
;

511  
	`öÊ©e_addhi°‹y
(
z
->
°©e
->
blocks
, z);

512 
	}
}

515 
	$öÊ©eSync
(
z
)

516 
z_°ªam
 *
z
;

518 
uI¡
 
n
;

519 
Byãf
 *
p
;

520 
uI¡
 
m
;

521 
uL⁄g
 
r
, 
w
;

524 i‡(
z
 =
Z_NULL
 || z->
°©e
 == Z_NULL)

525  
Z_STREAM_ERROR
;

526 i‡(
z
->
°©e
->
mode
 !
BAD
)

528 
z
->
°©e
->
mode
 = 
BAD
;

529 
z
->
°©e
->
sub
.
m¨kî
 = 0;

531 i‡((
n
 = 
z
->
avaû_ö
) == 0)

532  
Z_BUF_ERROR
;

533 
p
 = 
z
->
√xt_ö
;

534 
m
 = 
z
->
°©e
->
sub
.
m¨kî
;

537 
n
 && 
m
 < 4)

539 i‡(*
p
 =(
Byã
)(
m
 < 2 ? 0 : 0xff))

540 
m
++;

541 i‡(*
p
)

542 
m
 = 0;

544 
m
 = 4 - m;

545 
p
++, 
n
--;

549 
z
->
tŸÆ_ö
 +
p
 - z->
√xt_ö
;

550 
z
->
√xt_ö
 = 
p
;

551 
z
->
avaû_ö
 = 
n
;

552 
z
->
°©e
->
sub
.
m¨kî
 = 
m
;

555 i‡(
m
 != 4)

556  
Z_DATA_ERROR
;

557 
r
 = 
z
->
tŸÆ_ö
; 
w
 = z->
tŸÆ_out
;

558 
	`öÊ©eRe£t
(
z
);

559 
z
->
tŸÆ_ö
 = 
r
; z->
tŸÆ_out
 = 
w
;

560 
z
->
°©e
->
mode
 = 
BLOCKS
;

561  
Z_OK
;

562 
	}
}

564 #unde‡
NEEDBYTE


565 #unde‡
NEXTBYTE


579 
	söÊ©e_blocks_°©e
 {

583 
	mTYPE
,

584 
	mLENS
,

585 
	mSTORED
,

586 
	mTABLE
,

587 
	mBTREE
,

588 
	mDTREE
,

589 
	mCODES
,

590 
	mDRY
,

591 
	mDONEB
,

592 
	mBADB
}

593 
	mmode
;

597 
uI¡
 
	mÀ·
;

599 
uI¡
 
	mèbÀ
;

600 
uI¡
 
	mödex
;

601 
uI¡f
 *
	mbÀns
;

602 
uI¡
 
	mbb
;

603 
öÊ©e_hu·
 *
	mtb
;

604 
	mnbÀns
;

605 } 
	måìs
;

607 
öÊ©e_hu·
 *
	mé
, *
	mtd
;

608 
öÊ©e_codes_°©ef


609 *
	mcodes
;

610 } 
	mdecode
;

611 } 
	msub
;

612 
uI¡
 
	mœ°
;

615 
uI¡
 
	mbôk
;

616 
uL⁄g
 
	mbôb
;

617 
Byãf
 *
	mwödow
;

618 
Byãf
 *
	míd
;

619 
Byãf
 *
	mªad
;

620 
Byãf
 *
	mwrôe
;

621 
check_func
 
	mcheck‚
;

622 
uL⁄g
 
	mcheck
;

629 
	#UPDBITS
 {
s
->
bôb
=
b
;s->
bôk
=
k
;}

	)

630 
	#UPDIN
 {
z
->
avaû_ö
=
n
;z->
tŸÆ_ö
+=
p
-z->
√xt_ö
;z->√xt_öı;}

	)

631 
	#UPDOUT
 {
s
->
wrôe
=
q
;}

	)

632 
	#UPDATE
 {
UPDBITS
 
UPDIN
 
UPDOUT
}

	)

633 
	#LEAVE
 {
UPDATE
  
	`öÊ©e_Êush
(
s
,
z
,
r
);}

	)

635 
	#LOADIN
 {
p
=
z
->
√xt_ö
;
n
=z->
avaû_ö
;
b
=
s
->
bôb
;
k
=s->
bôk
;}

	)

636 
	#NEEDBYTE
 {if(
n
)
r
=
Z_OK
;
LEAVE
}

	)

637 
	#NEXTBYTE
 (
n
--,*
p
++)

	)

638 
	#NEEDBITS
(
j
Ë{
k
<(j)){
NEEDBYTE
;
b
|=((
uL⁄g
)
NEXTBYTE
)<<k;k+=8;}}

	)

639 
	#DUMPBITS
(
j
Ë{
b
>>=(j);
k
-=(j);}

	)

641 
	#WAVAIL
 (
q
<
s
->
ªad
?s->ªad-q-1:s->
íd
-q)

	)

642 
	#LOADOUT
 {
q
=
s
->
wrôe
;
m
=
WAVAIL
;}

	)

643 
	#WRAP
 {if(
q
==
s
->
íd
&&s->
ªad
!=s->
wödow
){q=s->wödow;
m
=
WAVAIL
;}}

	)

644 
	#FLUSH
 {
UPDOUT
 
r
=
	`öÊ©e_Êush
(
s
,
z
,r); 
LOADOUT
}

	)

645 
	#NEEDOUT
 {if(
m
==0){
WRAP
 if(m==0){
FLUSH
 WRAP if(m==0Ë
LEAVE
}}
r
=
Z_OK
;}

	)

646 
	#OUTBYTE
(
a
Ë{*
q
++=(
Byã
)◊);
m
--;}

	)

648 
	#LOAD
 {
LOADIN
 
LOADOUT
}

	)

655 
loˇl
 
uI¡
 
	g¥Ÿe˘_mask
[] = {0, 0, 0, 0, 0, 0, 0, 0, 0 ,0 ,0 ,0};

658 
loˇl
 
uI¡
 
	göÊ©e_mask
[] = {

665 
loˇl
 
öÊ©e_Êush
 
OF
((

666 
öÊ©e_blocks_°©ef
 *,

667 
z_°ªam
 *,

681 
loˇl
 
öÊ©e_Á°
 
OF
((

682 
uI¡
,

683 
uI¡
,

684 
öÊ©e_hu·
 *,

685 
öÊ©e_hu·
 *,

686 
öÊ©e_blocks_°©ef
 *,

687 
z_°ªam
 *));

697 
loˇl
 
uI¡
 
	gb‹dî
[] = {

746 
loˇl
 
	$öÊ©e_blocks_ª£t
(
s
, 
z
, 
c
)

747 
öÊ©e_blocks_°©ef
 *
s
;

748 
z_°ªam
 *
z
;

749 
uL⁄gf
 *
c
;

751 i‡(
s
->
check‚
 !
Z_NULL
)

752 *
c
 = 
s
->
check
;

753 i‡(
s
->
mode
 =
BTREE
 || s->modê=
DTREE
)

754 
	`ZFREE
(
z
, 
s
->
sub
.
åìs
.
bÀns
, s->sub.åìs.
nbÀns
 * (
uI¡
));

755 i‡(
s
->
mode
 =
CODES
)

757 
	`öÊ©e_codes_‰ì
(
s
->
sub
.
decode
.
codes
, 
z
);

758 
	`öÊ©e_åìs_‰ì
(
s
->
sub
.
decode
.
td
, 
z
);

759 
	`öÊ©e_åìs_‰ì
(
s
->
sub
.
decode
.
é
, 
z
);

761 
s
->
mode
 = 
TYPE
;

762 
s
->
bôk
 = 0;

763 
s
->
bôb
 = 0;

764 
s
->
ªad
 = s->
wrôe
 = s->
wödow
;

765 i‡(
s
->
check‚
 !
Z_NULL
)

766 
s
->
check
 = (*s->
check‚
)(0L, 
Z_NULL
, 0);

767 i‡(
z
->
outcb
 !
Z_NULL
)

768 (*
z
->
outcb
)(
Z_NULL
, 0);

769 
	`Tø˚
((
°dîr
, "inflate: blocksÑeset\n"));

770 
	}
}

773 
loˇl
 
öÊ©e_blocks_°©ef
 *
	$öÊ©e_blocks_√w
(
z
, 
c
, 
w
)

774 
z_°ªam
 *
z
;

775 
check_func
 
c
;

776 
uI¡
 
w
;

778 
öÊ©e_blocks_°©ef
 *
s
;

780 i‡((
s
 = (
öÊ©e_blocks_°©ef
 *)
ZALLOC


781 (
z
,1,(
öÊ©e_blocks_°©e
))Ë=
Z_NULL
)

782  
s
;

783 i‡((
s
->
wödow
 = (
Byãf
 *)
	`ZALLOC
(
z
, 1, 
w
)Ë=
Z_NULL
)

785 
	`ZFREE
(
z
, 
s
, (
öÊ©e_blocks_°©e
));

786  
Z_NULL
;

788 
s
->
íd
 = s->
wödow
 + 
w
;

789 
s
->
check‚
 = 
c
;

790 
s
->
mode
 = 
TYPE
;

791 
	`Tø˚
((
°dîr
, "inflate: blocksállocated\n"));

792 
	`öÊ©e_blocks_ª£t
(
s
, 
z
, &s->
check
);

793  
s
;

794 
	}
}

797 
loˇl
 
	$öÊ©e_blocks
(
s
, 
z
, 
r
)

798 
öÊ©e_blocks_°©ef
 *
s
;

799 
z_°ªam
 *
z
;

800 
r
;

802 
uI¡
 
t
;

803 
uL⁄g
 
b
;

804 
uI¡
 
k
;

805 
Byãf
 *
p
;

806 
uI¡
 
n
;

807 
Byãf
 *
q
;

808 
uI¡
 
m
;

811 
LOAD


814 1Ë
s
->
mode
)

816 
TYPE
:

817 
	`NEEDBITS
(3)

818 
t
 = (
uI¡
)
b
 & 7;

819 
s
->
œ°
 = 
t
 & 1;

820 
t
 >> 1)

823 
	`Tø˚
((
°dîr
, "inflate: stored block%s\n",

824 
s
->
œ°
 ? " (last)" : ""));

825 
	`DUMPBITS
(3)

826 
t
 = 
k
 & 7;

827 
	`DUMPBITS
(
t
)

828 
s
->
mode
 = 
LENS
;

831 
	`Tø˚
((
°dîr
, "inflate: fixed codes block%s\n",

832 
s
->
œ°
 ? " (last)" : ""));

834 
uI¡
 
bl
, 
bd
;

835 
öÊ©e_hu·
 *
é
, *
td
;

837 
	`öÊ©e_åìs_fixed
(&
bl
, &
bd
, &
é
, &
td
);

838 
s
->
sub
.
decode
.
codes
 = 
	`öÊ©e_codes_√w
(
bl
, 
bd
, 
é
, 
td
, 
z
);

839 i‡(
s
->
sub
.
decode
.
codes
 =
Z_NULL
)

841 
r
 = 
Z_MEM_ERROR
;

842 
LEAVE


844 
s
->
sub
.
decode
.
é
 = 
Z_NULL
;

845 
s
->
sub
.
decode
.
td
 = 
Z_NULL
;

847 
	`DUMPBITS
(3)

848 
s
->
mode
 = 
CODES
;

851 
	`Tø˚
((
°dîr
, "inflate: dynamic codes block%s\n",

852 
s
->
œ°
 ? " (last)" : ""));

853 
	`DUMPBITS
(3)

854 
s
->
mode
 = 
TABLE
;

857 
	`DUMPBITS
(3)

858 
s
->
mode
 = 
BADB
;

859 
z
->
msg
 = "invalid blockÅype";

860 
r
 = 
Z_DATA_ERROR
;

861 
LEAVE


864 
LENS
:

865 
	`NEEDBITS
(32)

866 i‡(((~
b
) >> 16) != (b & 0xffff))

868 
s
->
mode
 = 
BADB
;

869 
z
->
msg
 = "invalid stored blockÜengths";

870 
r
 = 
Z_DATA_ERROR
;

871 
LEAVE


873 
s
->
sub
.
À·
 = (
uI¡
)
b
 & 0xffff;

874 
b
 = 
k
 = 0;

875 
	`Tø˚v
((
°dîr
, "öÊ©e: st‹edÜígth %u\n", 
s
->
sub
.
À·
));

876 
s
->
mode
 = s->
sub
.
À·
 ? 
STORED
 : 
TYPE
;

878 
STORED
:

879 i‡(
n
 == 0)

880 
LEAVE


881 
NEEDOUT


882 
t
 = 
s
->
sub
.
À·
;

883 i‡(
t
 > 
n
)Å =Ç;

884 i‡(
t
 > 
m
)Å = m;

885 
	`zmem˝y
(
q
, 
p
, 
t
);

886 
p
 +
t
; 
n
 -=Å;

887 
q
 +
t
; 
m
 -=Å;

888 i‡((
s
->
sub
.
À·
 -
t
) != 0)

890 
	`Tø˚v
((
°dîr
, "inflate: storedÉnd, %luÅotal out\n",

891 
z
->
tŸÆ_out
 + (
q
 >
s
->
ªad
 ? q - s->read :

892 (
s
->
íd
 - s->
ªad
Ë+ (
q
 - s->
wödow
))));

893 
s
->
mode
 = s->
œ°
 ? 
DRY
 : 
TYPE
;

895 
TABLE
:

896 
	`NEEDBITS
(14)

897 
s
->
sub
.
åìs
.
èbÀ
 = 
t
 = (
uI¡
)
b
 & 0x3fff;

898 #i‚de‡
PKZIP_BUG_WORKAROUND


899 i‡((
t
 & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29)

901 
s
->
mode
 = 
BADB
;

902 
z
->
msg
 = "too manyÜength or distance symbols";

903 
r
 = 
Z_DATA_ERROR
;

904 
LEAVE


907 
t
 = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);

908 i‡(
t
 < 19)

909 
t
 = 19;

910 i‡((
s
->
sub
.
åìs
.
bÀns
 = (
uI¡f
*)
	`ZALLOC
(
z
, 
t
, (
uI¡
))Ë=
Z_NULL
)

912 
r
 = 
Z_MEM_ERROR
;

913 
LEAVE


915 
s
->
sub
.
åìs
.
nbÀns
 = 
t
;

916 
	`DUMPBITS
(14)

917 
s
->
sub
.
åìs
.
ödex
 = 0;

918 
	`Tø˚v
((
°dîr
, "inflate:Åable sizes ok\n"));

919 
s
->
mode
 = 
BTREE
;

920 
BTREE
:

921 
s
->
sub
.
åìs
.
ödex
 < 4 + (s->sub.åìs.
èbÀ
 >> 10))

923 
	`NEEDBITS
(3)

924 
s
->
sub
.
åìs
.
bÀns
[
b‹dî
[s->sub.åìs.
ödex
++]] = (
uI¡
)
b
 & 7;

925 
	`DUMPBITS
(3)

927 
s
->
sub
.
åìs
.
ödex
 < 19)

928 
s
->
sub
.
åìs
.
bÀns
[
b‹dî
[s->sub.åìs.
ödex
++]] = 0;

929 
s
->
sub
.
åìs
.
bb
 = 7;

930 
t
 = 
	`öÊ©e_åìs_bôs
(
s
->
sub
.
åìs
.
bÀns
, &s->sub.åìs.
bb
,

931 &
s
->
sub
.
åìs
.
tb
, 
z
);

932 i‡(
t
 !
Z_OK
)

934 
r
 = 
t
;

935 i‡(
r
 =
Z_DATA_ERROR
)

936 
s
->
mode
 = 
BADB
;

937 
LEAVE


939 
s
->
sub
.
åìs
.
ödex
 = 0;

940 
	`Tø˚v
((
°dîr
, "inflate: bitsÅree ok\n"));

941 
s
->
mode
 = 
DTREE
;

942 
DTREE
:

943 
t
 = 
s
->
sub
.
åìs
.
èbÀ
,

944 
s
->
sub
.
åìs
.
ödex
 < 258 + (
t
 & 0x1f) + ((t >> 5) & 0x1f))

946 
öÊ©e_hu·
 *
h
;

947 
uI¡
 
i
, 
j
, 
c
;

949 
t
 = 
s
->
sub
.
åìs
.
bb
;

950 
	`NEEDBITS
(
t
)

951 
h
 = 
s
->
sub
.
åìs
.
tb
 + ((
uI¡
)
b
 & 
öÊ©e_mask
[
t
]);

952 
t
 = 
h
->
w‹d
.
wh©
.
Bôs
;

953 
c
 = 
h
->
m‹e
.
Ba£
;

954 i‡(
c
 < 16)

956 
	`DUMPBITS
(
t
)

957 
s
->
sub
.
åìs
.
bÀns
[s->sub.åìs.
ödex
++] = 
c
;

961 
i
 = 
c
 == 18 ? 7 : c - 14;

962 
j
 = 
c
 == 18 ? 11 : 3;

963 
	`NEEDBITS
(
t
 + 
i
)

964 
	`DUMPBITS
(
t
)

965 
j
 +(
uI¡
)
b
 & 
öÊ©e_mask
[
i
];

966 
	`DUMPBITS
(
i
)

967 
i
 = 
s
->
sub
.
åìs
.
ödex
;

968 
t
 = 
s
->
sub
.
åìs
.
èbÀ
;

969 i‡(
i
 + 
j
 > 258 + (
t
 & 0x1f) + ((t >> 5) & 0x1f) ||

970 (
c
 =16 && 
i
 < 1))

972 
s
->
mode
 = 
BADB
;

973 
z
->
msg
 = "invalid bitÜengthÑepeat";

974 
r
 = 
Z_DATA_ERROR
;

975 
LEAVE


977 
c
 = c =16 ? 
s
->
sub
.
åìs
.
bÀns
[
i
 - 1] : 0;

979 
s
->
sub
.
åìs
.
bÀns
[
i
++] = 
c
;

980 } --
j
);

981 
s
->
sub
.
åìs
.
ödex
 = 
i
;

984 
	`öÊ©e_åìs_‰ì
(
s
->
sub
.
åìs
.
tb
, 
z
);

985 
s
->
sub
.
åìs
.
tb
 = 
Z_NULL
;

987 
uI¡
 
bl
, 
bd
;

988 
öÊ©e_hu·
 *
é
, *
td
;

989 
öÊ©e_codes_°©ef
 *
c
;

991 
bl
 = 9;

992 
bd
 = 6;

993 
t
 = 
s
->
sub
.
åìs
.
èbÀ
;

994 
t
 = 
	`öÊ©e_åìs_dy«mic
(257 + (t & 0x1f), 1 + ((t >> 5) & 0x1f),

995 
s
->
sub
.
åìs
.
bÀns
, &
bl
, &
bd
, &
é
, &
td
, 
z
);

996 i‡(
t
 !
Z_OK
)

998 i‡(
t
 =(
uI¡
)
Z_DATA_ERROR
)

999 
s
->
mode
 = 
BADB
;

1000 
r
 = 
t
;

1001 
LEAVE


1003 
	`Tø˚v
((
°dîr
, "inflate:Årees ok\n"));

1004 i‡((
c
 = 
	`öÊ©e_codes_√w
(
bl
, 
bd
, 
é
, 
td
, 
z
)Ë=
Z_NULL
)

1006 
	`öÊ©e_åìs_‰ì
(
td
, 
z
);

1007 
	`öÊ©e_åìs_‰ì
(
é
, 
z
);

1008 
r
 = 
Z_MEM_ERROR
;

1009 
LEAVE


1011 
	`ZFREE
(
z
, 
s
->
sub
.
åìs
.
bÀns
, s->sub.åìs.
nbÀns
 * (
uI¡
));

1012 
s
->
sub
.
decode
.
codes
 = 
c
;

1013 
s
->
sub
.
decode
.
é
 =Ål;

1014 
s
->
sub
.
decode
.
td
 =Åd;

1016 
s
->
mode
 = 
CODES
;

1017 
CODES
:

1018 
UPDATE


1019 i‡((
r
 = 
	`öÊ©e_codes
(
s
, 
z
,Ñ)Ë!
Z_STREAM_END
)

1020  
	`öÊ©e_Êush
(
s
, 
z
, 
r
);

1021 
r
 = 
Z_OK
;

1022 
	`öÊ©e_codes_‰ì
(
s
->
sub
.
decode
.
codes
, 
z
);

1023 
	`öÊ©e_åìs_‰ì
(
s
->
sub
.
decode
.
td
, 
z
);

1024 
	`öÊ©e_åìs_‰ì
(
s
->
sub
.
decode
.
é
, 
z
);

1025 
LOAD


1026 
	`Tø˚v
((
°dîr
, "inflate: codesÉnd, %luÅotal out\n",

1027 
z
->
tŸÆ_out
 + (
q
 >
s
->
ªad
 ? q - s->read :

1028 (
s
->
íd
 - s->
ªad
Ë+ (
q
 - s->
wödow
))));

1029 i‡(!
s
->
œ°
)

1031 
s
->
mode
 = 
TYPE
;

1034 i‡(
k
 > 7)

1036 
	`As£π
(
k
 < 16, "inflate_codes grabbedÅoo many bytes")

1037 
k
 -= 8;

1038 
n
++;

1039 
p
--;

1041 
s
->
mode
 = 
DRY
;

1042 
DRY
:

1043 
FLUSH


1044 i‡(
s
->
ªad
 !s->
wrôe
)

1045 
LEAVE


1046 
s
->
mode
 = 
DONEB
;

1047 
DONEB
:

1048 
r
 = 
Z_STREAM_END
;

1049 
LEAVE


1050 
BADB
:

1051 
r
 = 
Z_DATA_ERROR
;

1052 
LEAVE


1054 
r
 = 
Z_STREAM_ERROR
;

1055 
LEAVE


1057 
	}
}

1060 
loˇl
 
	$öÊ©e_blocks_‰ì
(
s
, 
z
, 
c
)

1061 
öÊ©e_blocks_°©ef
 *
s
;

1062 
z_°ªam
 *
z
;

1063 
uL⁄gf
 *
c
;

1065 
	`öÊ©e_blocks_ª£t
(
s
, 
z
, 
c
);

1066 
	`ZFREE
(
z
, 
s
->
wödow
, s->
íd
 - s->window);

1067 
	`ZFREE
(
z
, 
s
, (
öÊ©e_blocks_°©e
));

1068 
	`Tø˚
((
°dîr
, "inflate: blocks freed\n"));

1069  
Z_OK
;

1070 
	}
}

1080 
loˇl
 
	$öÊ©e_addhi°‹y
(
s
, 
z
)

1081 
öÊ©e_blocks_°©ef
 *
s
;

1082 
z_°ªam
 *
z
;

1084 
uL⁄g
 
b
;

1085 
uI¡
 
k
;

1086 
uI¡
 
t
;

1087 
Byãf
 *
p
;

1088 
uI¡
 
n
;

1089 
Byãf
 *
q
;

1090 
uI¡
 
m
;

1092 i‡(
s
->
ªad
 !s->
wrôe
)

1093  
Z_STREAM_ERROR
;

1094 i‡(
s
->
mode
 !
TYPE
)

1095  
Z_DATA_ERROR
;

1098 
LOAD


1102 
n
) {

1103 
t
 = 
n
;

1105 i‡(
t
 > 
m
)Å = m;

1107 i‡(
s
->
check‚
 !
Z_NULL
)

1108 
s
->
check
 = (*s->
check‚
)(s->check, 
q
, 
t
);

1110 i‡(
z
->
outcb
 !
Z_NULL
)

1111 (*
z
->
outcb
)(
q
, 
t
);

1112 
	`zmem˝y
(
q
, 
p
, 
t
);

1113 
q
 +
t
;

1114 
p
 +
t
;

1115 
n
 -
t
;

1116 
z
->
tŸÆ_out
 +
t
;

1117 
s
->
ªad
 = 
q
;

1119 i‡(
q
 =
s
->
íd
) {

1120 
s
->
ªad
 = 
q
 = s->
wödow
;

1121 
m
 = 
WAVAIL
;

1124 
UPDATE


1125  
Z_OK
;

1126 
	}
}

1133 
loˇl
 
	$öÊ©e_∑ckë_Êush
(
s
)

1134 
öÊ©e_blocks_°©ef
 *
s
;

1136 i‡(
s
->
mode
 !
LENS
)

1137  
Z_DATA_ERROR
;

1138 
s
->
mode
 = 
TYPE
;

1139  
Z_OK
;

1140 
	}
}

1150 
	#ba£
 
m‹e
.
Ba£


	)

1151 
	#√xt
 
m‹e
.
Next


	)

1152 
	#ex›
 
w‹d
.
wh©
.
Ex›


	)

1153 
	#bôs
 
w‹d
.
wh©
.
Bôs


	)

1156 
loˇl
 
hu·_buûd
 
OF
((

1157 
uI¡f
 *,

1158 
uI¡
,

1159 
uI¡
,

1160 
uI¡f
 *,

1161 
uI¡f
 *,

1162 
öÊ©e_hu·
 * 
FAR
*,

1163 
uI¡f
 *,

1164 
z_°ªam
 *));

1166 
loˇl
 
voidpf
 
ÁŒoc
 
OF
((

1167 
voidpf
,

1168 
uI¡
,

1169 
uI¡
));

1171 
loˇl
 
f‰ì
 
OF
((

1172 
voidpf
 
q
,

1173 
voidpf
 
p
,

1174 
uI¡
 
n
));

1177 
loˇl
 
uI¡
 
	g˝Àns
[] = {

1181 
loˇl
 
uI¡
 
	g˝Àxt
[] = {

1184 
loˇl
 
uI¡
 
	g˝di°
[] = {

1188 
loˇl
 
uI¡
 
	g˝dext
[] = {

1227 
	#BMAX
 15

	)

1228 
	#N_MAX
 288

	)

1230 #ifde‡
DEBUG_ZLIB


1231 
uI¡
 
	göÊ©e_hu·s
;

1234 
loˇl
 
	$hu·_buûd
(
b
, 
n
, 
s
, 
d
, 
e
, 
t
, 
m
, 
zs
)

1235 
uI¡f
 *
b
;

1236 
uI¡
 
n
;

1237 
uI¡
 
s
;

1238 
uI¡f
 *
d
;

1239 
uI¡f
 *
e
;

1240 
öÊ©e_hu·
 * 
FAR
 *
t
;

1241 
uI¡f
 *
m
;

1242 
z_°ªam
 *
zs
;

1250 
uI¡
 
a
;

1251 
uI¡
 
c
[
BMAX
+1];

1252 
uI¡
 
f
;

1253 
g
;

1254 
h
;

1255 
uI¡
 
i
;

1256 
uI¡
 
j
;

1257 
k
;

1258 
l
;

1259 
uI¡f
 *
p
;

1260 
öÊ©e_hu·
 *
q
;

1261 
öÊ©e_hu·_s
 
r
;

1262 
öÊ©e_hu·
 *
u
[
BMAX
];

1263 
uI¡
 
v
[
N_MAX
];

1264 
w
;

1265 
uI¡
 
x
[
BMAX
+1];

1266 
uI¡f
 *
xp
;

1267 
y
;

1268 
uI¡
 
z
;

1272 
p
 = 
c
;

1273 
	#C0
 *
p
++ = 0;

	)

1274 
	#C2
 
C0
 C0 C0 
	)
C0

1275 
	#C4
 
C2
 C2 C2 
	)
C2

1276 
C4


1277 
p
 = 
b
; 
i
 = 
n
;

1279 
c
[*
p
++]++;

1280 } --
i
);

1281 i‡(
c
[0] =
n
)

1283 *
t
 = (
öÊ©e_hu·
 *)
Z_NULL
;

1284 *
m
 = 0;

1285  
Z_OK
;

1290 
l
 = *
m
;

1291 
j
 = 1; j <
BMAX
; j++)

1292 i‡(
c
[
j
])

1294 
k
 = 
j
;

1295 i‡((
uI¡
)
l
 < 
j
)

1296 
l
 = 
j
;

1297 
i
 = 
BMAX
; i; i--)

1298 i‡(
c
[
i
])

1300 
g
 = 
i
;

1301 i‡((
uI¡
)
l
 > 
i
)

1302 
l
 = 
i
;

1303 *
m
 = 
l
;

1307 
y
 = 1 << 
j
; j < 
i
; j++, y <<= 1)

1308 i‡((
y
 -
c
[
j
]) < 0)

1309  
Z_DATA_ERROR
;

1310 i‡((
y
 -
c
[
i
]) < 0)

1311  
Z_DATA_ERROR
;

1312 
c
[
i
] +
y
;

1316 
x
[1] = 
j
 = 0;

1317 
p
 = 
c
 + 1; 
xp
 = 
x
 + 2;

1318 --
i
) {

1319 *
xp
++ = (
j
 +*
p
++);

1324 
p
 = 
b
; 
i
 = 0;

1326 i‡((
j
 = *
p
++) != 0)

1327 
v
[
x
[
j
]++] = 
i
;

1328 } ++
i
 < 
n
);

1332 
x
[0] = 
i
 = 0;

1333 
p
 = 
v
;

1334 
h
 = -1;

1335 
w
 = -
l
;

1336 
u
[0] = (
öÊ©e_hu·
 *)
Z_NULL
;

1337 
q
 = (
öÊ©e_hu·
 *)
Z_NULL
;

1338 
z
 = 0;

1341 ; 
k
 <
g
; k++)

1343 
a
 = 
c
[
k
];

1344 
a
--)

1348 
k
 > 
w
 + 
l
)

1350 
h
++;

1351 
w
 +
l
;

1354 
z
 = (z = 
g
 - 
w
Ë> (
uI¡
)
l
 ?Ü : z;

1355 i‡((
f
 = 1 << (
j
 = 
k
 - 
w
)Ë> 
a
 + 1)

1357 
f
 -
a
 + 1;

1358 
xp
 = 
c
 + 
k
;

1359 i‡(
j
 < 
z
)

1360 ++
j
 < 
z
)

1362 i‡((
f
 <<1Ë<*++
xp
)

1364 
f
 -*
xp
;

1367 
z
 = 1 << 
j
;

1370 i‡((
q
 = (
öÊ©e_hu·
 *)
ZALLOC


1371 (
zs
,
z
 + 1,(
öÊ©e_hu·
))Ë=
Z_NULL
)

1373 i‡(
h
)

1374 
	`öÊ©e_åìs_‰ì
(
u
[0], 
zs
);

1375  
Z_MEM_ERROR
;

1377 
q
->
w‹d
.
NÆloc
 = 
z
 + 1;

1378 #ifde‡
DEBUG_ZLIB


1379 
öÊ©e_hu·s
 +
z
 + 1;

1381 *
t
 = 
q
 + 1;

1382 *(
t
 = &(
q
->
√xt
)Ë
Z_NULL
;

1383 
u
[
h
] = ++
q
;

1386 i‡(
h
)

1388 
x
[
h
] = 
i
;

1389 
r
.
bôs
 = (
Byã
)
l
;

1390 
r
.
ex›
 = (
Byã
)
j
;

1391 
r
.
√xt
 = 
q
;

1392 
j
 = 
i
 >> (
w
 - 
l
);

1393 
u
[
h
-1][
j
] = 
r
;

1398 
r
.
bôs
 = (
Byã
)(
k
 - 
w
);

1399 i‡(
p
 >
v
 + 
n
)

1400 
r
.
ex›
 = 128 + 64;

1401 i‡(*
p
 < 
s
)

1403 
r
.
ex›
 = (
Byã
)(*
p
 < 256 ? 0 : 32 + 64);

1404 
r
.
ba£
 = *
p
++;

1408 
r
.
ex›
 = (
Byã
)
e
[*
p
 - 
s
] + 16 + 64;

1409 
r
.
ba£
 = 
d
[*
p
++ - 
s
];

1413 
f
 = 1 << (
k
 - 
w
);

1414 
j
 = 
i
 >> 
w
; j < 
z
; j +
f
)

1415 
q
[
j
] = 
r
;

1418 
j
 = 1 << (
k
 - 1); 
i
 & j; j >>= 1)

1419 
i
 ^
j
;

1420 
i
 ^
j
;

1423 (
i
 & ((1 << 
w
Ë- 1)Ë!
x
[
h
])

1425 
h
--;

1426 
w
 -
l
;

1433  
y
 !0 && 
g
 !1 ? 
Z_BUF_ERROR
 : 
Z_OK
;

1434 
	}
}

1437 
loˇl
 
	$öÊ©e_åìs_bôs
(
c
, 
bb
, 
tb
, 
z
)

1438 
uI¡f
 *
c
;

1439 
uI¡f
 *
bb
;

1440 
öÊ©e_hu·
 * 
FAR
 *
tb
;

1441 
z_°ªam
 *
z
;

1443 
r
;

1445 
r
 = 
	`hu·_buûd
(
c
, 19, 19, (
uI¡f
*)
Z_NULL
, (uI¡f*)Z_NULL, 
tb
, 
bb
, 
z
);

1446 i‡(
r
 =
Z_DATA_ERROR
)

1447 
z
->
msg
 = "oversubscribed dynamic bitÜengthsÅree";

1448 i‡(
r
 =
Z_BUF_ERROR
)

1450 
	`öÊ©e_åìs_‰ì
(*
tb
, 
z
);

1451 
z
->
msg
 = "incomplete dynamic bitÜengthsÅree";

1452 
r
 = 
Z_DATA_ERROR
;

1454  
r
;

1455 
	}
}

1458 
loˇl
 
	$öÊ©e_åìs_dy«mic
(
∆
, 
nd
, 
c
, 
bl
, 
bd
, 
é
, 
td
, 
z
)

1459 
uI¡
 
∆
;

1460 
uI¡
 
nd
;

1461 
uI¡f
 *
c
;

1462 
uI¡f
 *
bl
;

1463 
uI¡f
 *
bd
;

1464 
öÊ©e_hu·
 * 
FAR
 *
é
;

1465 
öÊ©e_hu·
 * 
FAR
 *
td
;

1466 
z_°ªam
 *
z
;

1468 
r
;

1471 i‡((
r
 = 
	`hu·_buûd
(
c
, 
∆
, 257, 
˝Àns
, 
˝Àxt
, 
é
, 
bl
, 
z
)Ë!
Z_OK
)

1473 i‡(
r
 =
Z_DATA_ERROR
)

1474 
z
->
msg
 = "oversubscribedÜiteral/lengthÅree";

1475 i‡(
r
 =
Z_BUF_ERROR
)

1477 
	`öÊ©e_åìs_‰ì
(*
é
, 
z
);

1478 
z
->
msg
 = "incompleteÜiteral/lengthÅree";

1479 
r
 = 
Z_DATA_ERROR
;

1481  
r
;

1485 i‡((
r
 = 
	`hu·_buûd
(
c
 + 
∆
, 
nd
, 0, 
˝di°
, 
˝dext
, 
td
, 
bd
, 
z
)Ë!
Z_OK
)

1487 i‡(
r
 =
Z_DATA_ERROR
)

1488 
z
->
msg
 = "oversubscribedÜiteral/lengthÅree";

1489 i‡(
r
 =
Z_BUF_ERROR
) {

1490 #ifde‡
PKZIP_BUG_WORKAROUND


1491 
r
 = 
Z_OK
;

1494 
	`öÊ©e_åìs_‰ì
(*
td
, 
z
);

1495 
z
->
msg
 = "incompleteÜiteral/lengthÅree";

1496 
r
 = 
Z_DATA_ERROR
;

1498 
	`öÊ©e_åìs_‰ì
(*
é
, 
z
);

1499  
r
;

1504  
Z_OK
;

1505 
	}
}

1509 
loˇl
 
	gfixed_lock
 = 0;

1510 
loˇl
 
	gfixed_buût
 = 0;

1511 
	#FIXEDH
 530

	)

1512 
loˇl
 
uI¡
 
	gfixed_À·
 = 
FIXEDH
;

1513 
loˇl
 
öÊ©e_hu·
 
	gfixed_mem
[
FIXEDH
];

1514 
loˇl
 
uI¡
 
	gfixed_bl
;

1515 
loˇl
 
uI¡
 
	gfixed_bd
;

1516 
loˇl
 
öÊ©e_hu·
 *
	gfixed_é
;

1517 
loˇl
 
öÊ©e_hu·
 *
	gfixed_td
;

1520 
loˇl
 
voidpf
 
	$ÁŒoc
(
q
, 
n
, 
s
)

1521 
voidpf
 
q
;

1522 
uI¡
 
n
;

1523 
uI¡
 
s
;

1525 
	`As£π
(
s
 =(
öÊ©e_hu·
Ë&& 
n
 <
fixed_À·
,

1527 i‡(
q
Ë
s
++;

1528 
fixed_À·
 -
n
;

1529  (
voidpf
)(
fixed_mem
 + 
fixed_À·
);

1530 
	}
}

1533 
loˇl
 
	$f‰ì
(
q
, 
p
, 
n
)

1534 
voidpf
 
q
;

1535 
voidpf
 
p
;

1536 
uI¡
 
n
;

1538 
	`As£π
(0, "inflate_trees ffree called!");

1539 i‡(
q
Ëq = 
p
;

1540 
	}
}

1543 
loˇl
 
	$öÊ©e_åìs_fixed
(
bl
, 
bd
, 
é
, 
td
)

1544 
uI¡f
 *
bl
;

1545 
uI¡f
 *
bd
;

1546 
öÊ©e_hu·
 * 
FAR
 *
é
;

1547 
öÊ©e_hu·
 * 
FAR
 *
td
;

1550 ++
fixed_lock
 > 1)

1551 
fixed_lock
--;

1552 i‡(!
fixed_buût
)

1554 
k
;

1555 
c
[288];

1556 
z_°ªam
 
z
;

1559 
z
.
zÆloc
 = 
ÁŒoc
;

1560 
z
.
z‰ì
 = 
f‰ì
;

1561 
z
.
›aque
 = 
Z_NULL
;

1564 
k
 = 0; k < 144; k++)

1565 
c
[
k
] = 8;

1566 ; 
k
 < 256; k++)

1567 
c
[
k
] = 9;

1568 ; 
k
 < 280; k++)

1569 
c
[
k
] = 7;

1570 ; 
k
 < 288; k++)

1571 
c
[
k
] = 8;

1572 
fixed_bl
 = 7;

1573 
	`hu·_buûd
(
c
, 288, 257, 
˝Àns
, 
˝Àxt
, &
fixed_é
, &
fixed_bl
, &
z
);

1576 
k
 = 0; k < 30; k++)

1577 
c
[
k
] = 5;

1578 
fixed_bd
 = 5;

1579 
	`hu·_buûd
(
c
, 30, 0, 
˝di°
, 
˝dext
, &
fixed_td
, &
fixed_bd
, &
z
);

1582 
fixed_buût
 = 1;

1584 
fixed_lock
--;

1585 *
bl
 = 
fixed_bl
;

1586 *
bd
 = 
fixed_bd
;

1587 *
é
 = 
fixed_é
;

1588 *
td
 = 
fixed_td
;

1589  
Z_OK
;

1590 
	}
}

1593 
loˇl
 
	$öÊ©e_åìs_‰ì
(
t
, 
z
)

1594 
öÊ©e_hu·
 *
t
;

1595 
z_°ªam
 *
z
;

1600 
öÊ©e_hu·
 *
p
, *
q
;

1603 
p
 = 
t
;

1604 
p
 !
Z_NULL
)

1606 
q
 = (--
p
)->
√xt
;

1607 
	`ZFREE
(
z
, 
p
,Ö->
w‹d
.
NÆloc
 * (
öÊ©e_hu·
));

1608 
p
 = 
q
;

1610  
Z_OK
;

1611 
	}
}

1620 
	#ba£
 
m‹e
.
Ba£


	)

1621 
	#√xt
 
m‹e
.
Next


	)

1622 
	#ex›
 
w‹d
.
wh©
.
Ex›


	)

1623 
	#bôs
 
w‹d
.
wh©
.
Bôs


	)

1626 
	söÊ©e_codes_°©e
 {

1630 
	mSTART
,

1631 
	mLEN
,

1632 
	mLENEXT
,

1633 
	mDIST
,

1634 
	mDISTEXT
,

1635 
	mCOPY
,

1636 
	mLIT
,

1637 
	mWASH
,

1638 
	mEND
,

1639 
	mBADCODE
}

1640 
	mmode
;

1643 
uI¡
 
	mÀn
;

1646 
öÊ©e_hu·
 *
	måì
;

1647 
uI¡
 
	m√ed
;

1648 } 
	mcode
;

1649 
uI¡
 
	mlô
;

1651 
uI¡
 
	mgë
;

1652 
uI¡
 
	mdi°
;

1653 } 
	mc›y
;

1654 } 
	msub
;

1657 
Byã
 
	mlbôs
;

1658 
Byã
 
	mdbôs
;

1659 
öÊ©e_hu·
 *
	m…ªe
;

1660 
öÊ©e_hu·
 *
	mdåì
;

1665 
loˇl
 
öÊ©e_codes_°©ef
 *
	$öÊ©e_codes_√w
(
bl
, 
bd
, 
é
, 
td
, 
z
)

1666 
uI¡
 
bl
, 
bd
;

1667 
öÊ©e_hu·
 *
é
, *
td
;

1668 
z_°ªam
 *
z
;

1670 
öÊ©e_codes_°©ef
 *
c
;

1672 i‡((
c
 = (
öÊ©e_codes_°©ef
 *)

1673 
	`ZALLOC
(
z
,1,(
öÊ©e_codes_°©e
))Ë!
Z_NULL
)

1675 
c
->
mode
 = 
START
;

1676 
c
->
lbôs
 = (
Byã
)
bl
;

1677 
c
->
dbôs
 = (
Byã
)
bd
;

1678 
c
->
…ªe
 = 
é
;

1679 
c
->
dåì
 = 
td
;

1680 
	`Tø˚v
((
°dîr
, "inflate: codesÇew\n"));

1682  
c
;

1683 
	}
}

1686 
loˇl
 
	$öÊ©e_codes
(
s
, 
z
, 
r
)

1687 
öÊ©e_blocks_°©ef
 *
s
;

1688 
z_°ªam
 *
z
;

1689 
r
;

1691 
uI¡
 
j
;

1692 
öÊ©e_hu·
 *
t
;

1693 
uI¡
 
e
;

1694 
uL⁄g
 
b
;

1695 
uI¡
 
k
;

1696 
Byãf
 *
p
;

1697 
uI¡
 
n
;

1698 
Byãf
 *
q
;

1699 
uI¡
 
m
;

1700 
Byãf
 *
f
;

1701 
öÊ©e_codes_°©ef
 *
c
 = 
s
->
sub
.
decode
.
codes
;

1704 
LOAD


1707 1Ë
c
->
mode
)

1709 
START
:

1710 #i‚de‡
SLOW


1711 i‡(
m
 >258 && 
n
 >= 10)

1713 
UPDATE


1714 
r
 = 
	`öÊ©e_Á°
(
c
->
lbôs
, c->
dbôs
, c->
…ªe
, c->
dåì
, 
s
, 
z
);

1715 
LOAD


1716 i‡(
r
 !
Z_OK
)

1718 
c
->
mode
 = 
r
 =
Z_STREAM_END
 ? 
WASH
 : 
BADCODE
;

1723 
c
->
sub
.
code
.
√ed
 = c->
lbôs
;

1724 
c
->
sub
.
code
.
åì
 = c->
…ªe
;

1725 
c
->
mode
 = 
LEN
;

1726 
LEN
:

1727 
j
 = 
c
->
sub
.
code
.
√ed
;

1728 
	`NEEDBITS
(
j
)

1729 
t
 = 
c
->
sub
.
code
.
åì
 + ((
uI¡
)
b
 & 
öÊ©e_mask
[
j
]);

1730 
	`DUMPBITS
(
t
->
bôs
)

1731 
e
 = (
uI¡
)(
t
->
ex›
);

1732 i‡(
e
 == 0)

1734 
c
->
sub
.
lô
 = 
t
->
ba£
;

1735 
	`Tø˚vv
((
°dîr
, 
t
->
ba£
 >= 0x20 &&Å->base < 0x7f ?

1737 "öÊ©e:ÜôîÆ 0x%02x\n", 
t
->
ba£
));

1738 
c
->
mode
 = 
LIT
;

1741 i‡(
e
 & 16)

1743 
c
->
sub
.
c›y
.
gë
 = 
e
 & 15;

1744 
c
->
Àn
 = 
t
->
ba£
;

1745 
c
->
mode
 = 
LENEXT
;

1748 i‡((
e
 & 64) == 0)

1750 
c
->
sub
.
code
.
√ed
 = 
e
;

1751 
c
->
sub
.
code
.
åì
 = 
t
->
√xt
;

1754 i‡(
e
 & 32)

1756 
	`Tø˚vv
((
°dîr
, "inflate:Énd of block\n"));

1757 
c
->
mode
 = 
WASH
;

1760 
c
->
mode
 = 
BADCODE
;

1761 
z
->
msg
 = "invalidÜiteral/length code";

1762 
r
 = 
Z_DATA_ERROR
;

1763 
LEAVE


1764 
LENEXT
:

1765 
j
 = 
c
->
sub
.
c›y
.
gë
;

1766 
	`NEEDBITS
(
j
)

1767 
c
->
Àn
 +(
uI¡
)
b
 & 
öÊ©e_mask
[
j
];

1768 
	`DUMPBITS
(
j
)

1769 
c
->
sub
.
code
.
√ed
 = c->
dbôs
;

1770 
c
->
sub
.
code
.
åì
 = c->
dåì
;

1771 
	`Tø˚vv
((
°dîr
, "öÊ©e:Üígth %u\n", 
c
->
Àn
));

1772 
c
->
mode
 = 
DIST
;

1773 
DIST
:

1774 
j
 = 
c
->
sub
.
code
.
√ed
;

1775 
	`NEEDBITS
(
j
)

1776 
t
 = 
c
->
sub
.
code
.
åì
 + ((
uI¡
)
b
 & 
öÊ©e_mask
[
j
]);

1777 
	`DUMPBITS
(
t
->
bôs
)

1778 
e
 = (
uI¡
)(
t
->
ex›
);

1779 i‡(
e
 & 16)

1781 
c
->
sub
.
c›y
.
gë
 = 
e
 & 15;

1782 
c
->
sub
.
c›y
.
di°
 = 
t
->
ba£
;

1783 
c
->
mode
 = 
DISTEXT
;

1786 i‡((
e
 & 64) == 0)

1788 
c
->
sub
.
code
.
√ed
 = 
e
;

1789 
c
->
sub
.
code
.
åì
 = 
t
->
√xt
;

1792 
c
->
mode
 = 
BADCODE
;

1793 
z
->
msg
 = "invalid distance code";

1794 
r
 = 
Z_DATA_ERROR
;

1795 
LEAVE


1796 
DISTEXT
:

1797 
j
 = 
c
->
sub
.
c›y
.
gë
;

1798 
	`NEEDBITS
(
j
)

1799 
c
->
sub
.
c›y
.
di°
 +(
uI¡
)
b
 & 
öÊ©e_mask
[
j
];

1800 
	`DUMPBITS
(
j
)

1801 
	`Tø˚vv
((
°dîr
, "öÊ©e: di°™˚ %u\n", 
c
->
sub
.
c›y
.
di°
));

1802 
c
->
mode
 = 
COPY
;

1803 
COPY
:

1804 #i‚de‡
__TURBOC__


1805 
f
 = (
uI¡
)(
q
 - 
s
->
wödow
Ë< 
c
->
sub
.
c›y
.
di°
 ?

1806 
s
->
íd
 - (
c
->
sub
.
c›y
.
di°
 - (
q
 - s->
wödow
)) :

1807 
q
 - 
c
->
sub
.
c›y
.
di°
;

1809 
f
 = 
q
 - 
c
->
sub
.
c›y
.
di°
;

1810 i‡((
uI¡
)(
q
 - 
s
->
wödow
Ë< 
c
->
sub
.
c›y
.
di°
)

1811 
f
 = 
s
->
íd
 - (
c
->
sub
.
c›y
.
di°
 - (
q
 - s->
wödow
));

1813 
c
->
Àn
)

1815 
NEEDOUT


1816 
	`OUTBYTE
(*
f
++)

1817 i‡(
f
 =
s
->
íd
)

1818 
f
 = 
s
->
wödow
;

1819 
c
->
Àn
--;

1821 
c
->
mode
 = 
START
;

1823 
LIT
:

1824 
NEEDOUT


1825 
	`OUTBYTE
(
c
->
sub
.
lô
)

1826 
c
->
mode
 = 
START
;

1828 
WASH
:

1829 
FLUSH


1830 i‡(
s
->
ªad
 !s->
wrôe
)

1831 
LEAVE


1832 
c
->
mode
 = 
END
;

1833 
END
:

1834 
r
 = 
Z_STREAM_END
;

1835 
LEAVE


1836 
BADCODE
:

1837 
r
 = 
Z_DATA_ERROR
;

1838 
LEAVE


1840 
r
 = 
Z_STREAM_ERROR
;

1841 
LEAVE


1843 
	}
}

1846 
loˇl
 
	$öÊ©e_codes_‰ì
(
c
, 
z
)

1847 
öÊ©e_codes_°©ef
 *
c
;

1848 
z_°ªam
 *
z
;

1850 
	`ZFREE
(
z
, 
c
, (
öÊ©e_codes_°©e
));

1851 
	`Tø˚v
((
°dîr
, "inflate: codes free\n"));

1852 
	}
}

1861 
loˇl
 
	$öÊ©e_Êush
(
s
, 
z
, 
r
)

1862 
öÊ©e_blocks_°©ef
 *
s
;

1863 
z_°ªam
 *
z
;

1864 
r
;

1866 
uI¡
 
n
;

1867 
Byãf
 *
p
, *
q
;

1870 
p
 = 
z
->
√xt_out
;

1871 
q
 = 
s
->
ªad
;

1874 
n
 = (
uI¡
)((
q
 <
s
->
wrôe
 ? s->wrôê: s->
íd
) - q);

1875 i‡(
n
 > 
z
->
avaû_out
)Ç = z->avail_out;

1876 i‡(
n
 && 
r
 =
Z_BUF_ERROR
Ë∏
Z_OK
;

1879 
z
->
avaû_out
 -
n
;

1880 
z
->
tŸÆ_out
 +
n
;

1883 i‡(
s
->
check‚
 !
Z_NULL
)

1884 
s
->
check
 = (*s->
check‚
)(s->check, 
q
, 
n
);

1887 i‡(
z
->
outcb
 !
Z_NULL
)

1888 (*
z
->
outcb
)(
q
, 
n
);

1891 
	`zmem˝y
(
p
, 
q
, 
n
);

1892 
p
 +
n
;

1893 
q
 +
n
;

1896 i‡(
q
 =
s
->
íd
)

1899 
q
 = 
s
->
wödow
;

1900 i‡(
s
->
wrôe
 =s->
íd
)

1901 
s
->
wrôe
 = s->
wödow
;

1904 
n
 = (
uI¡
)(
s
->
wrôe
 - 
q
);

1905 i‡(
n
 > 
z
->
avaû_out
)Ç = z->avail_out;

1906 i‡(
n
 && 
r
 =
Z_BUF_ERROR
Ë∏
Z_OK
;

1909 
z
->
avaû_out
 -
n
;

1910 
z
->
tŸÆ_out
 +
n
;

1913 i‡(
s
->
check‚
 !
Z_NULL
)

1914 
s
->
check
 = (*s->
check‚
)(s->check, 
q
, 
n
);

1917 i‡(
z
->
outcb
 !
Z_NULL
)

1918 (*
z
->
outcb
)(
q
, 
n
);

1921 
	`zmem˝y
(
p
, 
q
, 
n
);

1922 
p
 +
n
;

1923 
q
 +
n
;

1927 
z
->
√xt_out
 = 
p
;

1928 
s
->
ªad
 = 
q
;

1931  
r
;

1932 
	}
}

1942 
	#ba£
 
m‹e
.
Ba£


	)

1943 
	#√xt
 
m‹e
.
Next


	)

1944 
	#ex›
 
w‹d
.
wh©
.
Ex›


	)

1945 
	#bôs
 
w‹d
.
wh©
.
Bôs


	)

1948 
	#GRABBITS
(
j
Ë{
k
<(j)){
b
|=((
uL⁄g
)
NEXTBYTE
)<<k;k+=8;}}

	)

1949 
	#UNGRAB
 {
n
+=(
c
=
k
>>3);
p
-=c;k&=7;}

	)

1956 
loˇl
 
	$öÊ©e_Á°
(
bl
, 
bd
, 
é
, 
td
, 
s
, 
z
)

1957 
uI¡
 
bl
, 
bd
;

1958 
öÊ©e_hu·
 *
é
, *
td
;

1959 
öÊ©e_blocks_°©ef
 *
s
;

1960 
z_°ªam
 *
z
;

1962 
öÊ©e_hu·
 *
t
;

1963 
uI¡
 
e
;

1964 
uL⁄g
 
b
;

1965 
uI¡
 
k
;

1966 
Byãf
 *
p
;

1967 
uI¡
 
n
;

1968 
Byãf
 *
q
;

1969 
uI¡
 
m
;

1970 
uI¡
 
ml
;

1971 
uI¡
 
md
;

1972 
uI¡
 
c
;

1973 
uI¡
 
d
;

1974 
Byãf
 *
r
;

1977 
LOAD


1980 
ml
 = 
öÊ©e_mask
[
bl
];

1981 
md
 = 
öÊ©e_mask
[
bd
];

1986 
	`GRABBITS
(20)

1987 i‡((
e
 = (
t
 = 
é
 + ((
uI¡
)
b
 & 
ml
))->
ex›
) == 0)

1989 
	`DUMPBITS
(
t
->
bôs
)

1990 
	`Tø˚vv
((
°dîr
, 
t
->
ba£
 >= 0x20 &&Å->base < 0x7f ?

1992 "öÊ©e: *ÜôîÆ 0x%02x\n", 
t
->
ba£
));

1993 *
q
++ = (
Byã
)
t
->
ba£
;

1994 
m
--;

1998 
	`DUMPBITS
(
t
->
bôs
)

1999 i‡(
e
 & 16)

2002 
e
 &= 15;

2003 
c
 = 
t
->
ba£
 + ((
uI¡
)
b
 & 
öÊ©e_mask
[
e
]);

2004 
	`DUMPBITS
(
e
)

2005 
	`Tø˚vv
((
°dîr
, "öÊ©e: *Üígth %u\n", 
c
));

2008 
	`GRABBITS
(15);

2009 
e
 = (
t
 = 
td
 + ((
uI¡
)
b
 & 
md
))->
ex›
;

2011 
	`DUMPBITS
(
t
->
bôs
)

2012 i‡(
e
 & 16)

2015 
e
 &= 15;

2016 
	`GRABBITS
(
e
)

2017 
d
 = 
t
->
ba£
 + ((
uI¡
)
b
 & 
öÊ©e_mask
[
e
]);

2018 
	`DUMPBITS
(
e
)

2019 
	`Tø˚vv
((
°dîr
, "öÊ©e: * di°™˚ %u\n", 
d
));

2022 
m
 -
c
;

2023 i‡((
uI¡
)(
q
 - 
s
->
wödow
Ë>
d
)

2025 
r
 = 
q
 - 
d
;

2026 *
q
++ = *
r
++; 
c
--;

2027 *
q
++ = *
r
++; 
c
--;

2031 
e
 = 
d
 - (
q
 - 
s
->
wödow
);

2032 
r
 = 
s
->
íd
 - 
e
;

2033 i‡(
c
 > 
e
)

2035 
c
 -
e
;

2037 *
q
++ = *
r
++;

2038 } --
e
);

2039 
r
 = 
s
->
wödow
;

2043 *
q
++ = *
r
++;

2044 } --
c
);

2047 i‡((
e
 & 64) == 0)

2048 
e
 = (
t
 =Å->
√xt
 + ((
uI¡
)
b
 & 
öÊ©e_mask
[e]))->
ex›
;

2051 
z
->
msg
 = "invalid distance code";

2052 
UNGRAB


2053 
UPDATE


2054  
Z_DATA_ERROR
;

2059 i‡((
e
 & 64) == 0)

2061 i‡((
e
 = (
t
 =Å->
√xt
 + ((
uI¡
)
b
 & 
öÊ©e_mask
[e]))->
ex›
) == 0)

2063 
	`DUMPBITS
(
t
->
bôs
)

2064 
	`Tø˚vv
((
°dîr
, 
t
->
ba£
 >= 0x20 &&Å->base < 0x7f ?

2066 "öÊ©e: *ÜôîÆ 0x%02x\n", 
t
->
ba£
));

2067 *
q
++ = (
Byã
)
t
->
ba£
;

2068 
m
--;

2072 i‡(
e
 & 32)

2074 
	`Tø˚vv
((
°dîr
, "inflate: *Énd of block\n"));

2075 
UNGRAB


2076 
UPDATE


2077  
Z_STREAM_END
;

2081 
z
->
msg
 = "invalidÜiteral/length code";

2082 
UNGRAB


2083 
UPDATE


2084  
Z_DATA_ERROR
;

2087 } 
m
 >258 && 
n
 >= 10);

2090 
UNGRAB


2091 
UPDATE


2092  
Z_OK
;

2093 
	}
}

2104 *
	gzlib_vîsi⁄
 = 
ZLIB_VERSION
;

2106 *
	gz_îrmsg
[] = {

2125 
	#BASE
 65521L

	)

2126 
	#NMAX
 5552

	)

2129 
	#DO1
(
buf
Ë{
s1
 +*buf++; 
s2
 +s1;}

	)

2130 
	#DO2
(
buf
Ë
	`DO1
(buf); DO1(buf);

	)

2131 
	#DO4
(
buf
Ë
	`DO2
(buf); DO2(buf);

	)

2132 
	#DO8
(
buf
Ë
	`DO4
(buf); DO4(buf);

	)

2133 
	#DO16
(
buf
Ë
	`DO8
(buf); DO8(buf);

	)

2136 
uL⁄g
 
	$adÀr32
(
adÀr
, 
buf
, 
Àn
)

2137 
uL⁄g
 
adÀr
;

2138 
Byãf
 *
buf
;

2139 
uI¡
 
Àn
;

2141 
s1
 = 
adÀr
 & 0xffff;

2142 
s2
 = (
adÀr
 >> 16) & 0xffff;

2143 
k
;

2145 i‡(
buf
 =
Z_NULL
)  1L;

2147 
Àn
 > 0) {

2148 
k
 = 
Àn
 < 
NMAX
 ?Üen : NMAX;

2149 
Àn
 -
k
;

2150 
k
 >= 16) {

2151 
	`DO16
(
buf
);

2152 
k
 -= 16;

2154 i‡(
k
 != 0) do {

2155 
	`DO1
(
buf
);

2156 } --
k
);

2157 
s1
 %
BASE
;

2158 
s2
 %
BASE
;

2160  (
s2
 << 16Ë| 
s1
;

2161 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_mips/ashldi3.c

3 
	~"libgcc.h
"

5 
	$__ashldi3
(
u
, 
w‹d_ty≥
 
b
)

7 
DWuni⁄
 
uu
, 
w
;

8 
w‹d_ty≥
 
bm
;

10 i‡(
b
 == 0)

11  
u
;

13 
uu
.
Œ
 = 
u
;

14 
bm
 = 32 - 
b
;

16 i‡(
bm
 <= 0) {

17 
w
.
s
.
low
 = 0;

18 
w
.
s
.
high
 = (Ë
uu
.s.
low
 << -
bm
;

20 c⁄° 
ˇºõs
 = (Ë
uu
.
s
.
low
 >> 
bm
;

22 
w
.
s
.
low
 = (Ë
uu
.s.low << 
b
;

23 
w
.
s
.
high
 = ((Ë
uu
.s.high << 
b
Ë| 
ˇºõs
;

26  
w
.
Œ
;

27 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_mips/ashrdi3.c

3 
	~"libgcc.h
"

5 
	$__ashrdi3
(
u
, 
w‹d_ty≥
 
b
)

7 
DWuni⁄
 
uu
, 
w
;

8 
w‹d_ty≥
 
bm
;

10 i‡(
b
 == 0)

11  
u
;

13 
uu
.
Œ
 = 
u
;

14 
bm
 = 32 - 
b
;

16 i‡(
bm
 <= 0) {

18 
w
.
s
.
high
 =

19 
uu
.
s
.
high
 >> 31;

20 
w
.
s
.
low
 = 
uu
.s.
high
 >> -
bm
;

22 c⁄° 
ˇºõs
 = (Ë
uu
.
s
.
high
 << 
bm
;

24 
w
.
s
.
high
 = 
uu
.s.high >> 
b
;

25 
w
.
s
.
low
 = ((Ë
uu
.s.low >> 
b
Ë| 
ˇºõs
;

28  
w
.
Œ
;

29 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_mips/board.c

24 
	~<comm⁄.h
>

25 
	~<comm™d.h
>

26 
	~<mÆloc.h
>

27 
	~<devi˚s.h
>

28 
	~<vîsi⁄.h
>

29 
	~<√t.h
>

30 
	~<ívú⁄mít.h
>

31 
	~<asm/mù§egs.h
>

32 
	~<π_mm≠.h
>

33 
	~<•i_≠i.h
>

34 
	~<«nd_≠i.h
>

36 
	gDECLARE_GLOBAL_DATA_PTR
;

37 #unde‡
DEBUG


39 
	#SDRAM_CFG1_REG
 
RALINK_SYSCTL_BASE
 + 0x0304

	)

41 
	gmodifõs
= 0;

43 #ifde‡
DEBUG


44 
	#DATE
 "05/25/2006"

	)

45 
	#VERSION
 "v0.00e04"

	)

47 #i‡–((
CFG_ENV_ADDR
+
CFG_ENV_SIZE
Ë< 
CFG_MONITOR_BASE
) || \

48 (
	gCFG_ENV_ADDR
 >(
CFG_MONITOR_BASE
 + 
CFG_MONITOR_LEN
)) ) || \

49 
	$deföed
(
CFG_ENV_IS_IN_NVRAM
)

50 
	#TOTAL_MALLOC_LEN
 (
CFG_MALLOC_LEN
 + 
CFG_ENV_SIZE
)

	)

52 
	#TOTAL_MALLOC_LEN
 
CFG_MALLOC_LEN


	)

54 
	#ARGV_LEN
 128

	)

56 #i‡
	`deföed
 (
RT6855A_ASIC_BOARD
Ë|| deföed(
RT6855A_FPGA_BOARD
)

57 
	`w©chdog_ª£t
();

60 
	`timî_öô
();

62 
	`π2880_ëh_hÆt
(
ëh_devi˚
* 
dev
);

64 
	`£tup_öã∫Æ_gsw
();

65 
	`£tup_exã∫Æ_gsw
();

68 
	`öˇù_£t_˝u˛k
();

69 
	`do_boŸm
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[]);

70 
	`do_t·pb
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[]);

71 
	`do_mem_˝
 ( 
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[]);

72 
	`Êash_£˘_¥Ÿe˘
 (
p
, 
ul⁄g
 
addr_fú°
, ul⁄g 
addr_œ°
);

73 
	`Êash_£˘_îa£
 (
ul⁄g
 
addr_fú°
, ul⁄g 
addr_œ°
);

74 
	`gë_addr_bound¨y
 (
ul⁄g
 *
addr
);

75 
	`do_ª£t
(
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[]);

76 
	`öput_vÆue
(
u8
 *
°r
);

77 #i‡
	`deföed
 (
RT6855_ASIC_BOARD
Ë|| deföed (
RT6855_FPGA_BOARD
) || \

78 
	`deföed
 (
MT7620_ASIC_BOARD
Ë|| 
	$deföed
 (
MT7620_FPGA_BOARD
)

79 
	`π_gsw_öô
();

80 #ñi‡
	`deföed
 (
RT6855A_ASIC_BOARD
Ë|| deföed (
RT6855A_FPGA_BOARD
)

81 
	`π6855A_gsw_öô
();

82 #ñi‡
	`deföed
 (
RT3883_ASIC_BOARD
Ë&& deföed (
MAC_TO_MT7530_MODE
)

83 
	`π3883_gsw_öô
();

85 
	`π305x_esw_öô
();

87 
	`LANWANP¨tôi⁄
();

89 
ëh_devi˚
* 
π2880_pdev
;

91 
ul⁄g
 
uboŸ_íd_d©a
;

92 
ul⁄g
 
uboŸ_íd
;

94 #i‡
	`deföed
 (
RALINK_USB
 ) || deföed (
MTK_USB
)

95 
usb_°‹_cuº_dev
;

98 
ul⁄g
 
m⁄ô‹_Êash_Àn
;

100 c⁄° 
vîsi⁄_°rög
[] =

101 
U_BOOT_VERSION
" (" 
__DATE__
 " - " 
__TIME__
 ")";

103 
ul⁄g
 
lﬂd_addr
;

106 
mùs_˝u_„q
;

107 
mùs_bus_„q
;

113 
ul⁄g
 
mem_mÆloc_°¨t
;

114 
ul⁄g
 
mem_mÆloc_íd
;

115 
ul⁄g
 
mem_mÆloc_brk
;

117 
fûe_«me_•a˚
[
ARGV_LEN
];

119 
	#ªad_32bô_˝0_ªgi°î_wôh_£À˘1
(
sour˚
) \

120 ({ 
__ªs
; \

121 
__asm__
 
	`__vﬁ©ûe__
( \

124 "mfc0\t%0,"
	`STR
(
sour˚
)",1\n\t" \

126 : "Ù" (
__ªs
)); \

127 
__ªs
;
	}
})

	)

129 #i‡
deföed
 (
CONFIG_DDR_CAL
)

130 
__©åibuã__
((
nomùs16
)Ë
døm_ˇli
();

133 
	$Inô_Sy°em_Mode
()

135 
u32
 
ªg
;

136 #ifde‡
ASIC_BOARD


137 
u8
 
˛k_£l
;

139 #i‡
	`deföed
(
RT5350_ASIC_BOARD
)

140 
u8
 
˛k_£l2
;

143 
ªg
 = 
	`RALINK_REG
(
RT2880_SYSCFG_REG
);

148 #ifde‡
RT2880_FPGA_BOARD


149 
mùs_˝u_„q
 = 25 * 1000 *1000;

150 
mùs_bus_„q
 = 
mùs_˝u_„q
/2;

151 #ñi‡
	`deföed
 (
RT2883_FPGA_BOARD
Ë|| deföed (
RT3052_FPGA_BOARD
Ë|| deföed (
RT3352_FPGA_BOARD
Ë|| deföed (
RT5350_FPGA_BOARD
)

152 
mùs_˝u_„q
 = 40 * 1000 *1000;

153 
mùs_bus_„q
 = 
mùs_˝u_„q
/3;

154 #ñi‡
	`deföed
 (
RT6855A_FPGA_BOARD
)

155 
mùs_˝u_„q
 = 50 * 1000 *1000;

156 
mùs_bus_„q
 = 
mùs_˝u_„q
/2;

157 #ñi‡
	`deföed
 (
RT3883_FPGA_BOARD
)

158 
mùs_˝u_„q
 = 40 * 1000 *1000;

159 
mùs_bus_„q
 = 
mùs_˝u_„q
;

160 #ñi‡
	`deföed
 (
RT6855_FPGA_BOARD
Ë|| deföed (
MT7620_FPGA_BOARD
Ë|| deföed (
MT7628_FPGA_BOARD
)

161 
mùs_˝u_„q
 = 50 * 1000 *1000;

162 
mùs_bus_„q
 = 
mùs_˝u_„q
/4;

163 #ñi‡
	`deföed
 (
MT7621_FPGA_BOARD
)

164 
mùs_˝u_„q
 = 50 * 1000 *1000;

165 
mùs_bus_„q
 = 
mùs_˝u_„q
/4;

166 #ñi‡
	`deföed
 (
RT2883_ASIC_BOARD
)

167 
˛k_£l
 = (
ªg
>>20) & 0x03;

168 
˛k_£l
) {

170 
mùs_˝u_„q
 = (380*1000*1000);

173 
mùs_˝u_„q
 = (400*1000*1000);

176 
mùs_˝u_„q
 = (420*1000*1000);

179 
mùs_˝u_„q
 = (430*1000*1000);

182 
mùs_bus_„q
 = 
mùs_˝u_„q
/2;

183 #ñi‡
	`deföed
(
RT3052_ASIC_BOARD
)

184 #i‡
	`deföed
(
RT3350_ASIC_BOARD
)

186 
mùs_˝u_„q
 = (320*1000*1000);

188 
˛k_£l
 = (
ªg
>>18) & 0x01;

189 
˛k_£l
) {

191 
mùs_˝u_„q
 = (320*1000*1000);

194 
mùs_˝u_„q
 = (384*1000*1000);

198 
mùs_bus_„q
 = 
mùs_˝u_„q
 / 3;

199 #ñi‡
	`deföed
(
RT3352_ASIC_BOARD
)

200 
˛k_£l
 = (
ªg
>>8) & 0x01;

201 
˛k_£l
) {

203 
mùs_˝u_„q
 = (384*1000*1000);

206 
mùs_˝u_„q
 = (400*1000*1000);

209 
mùs_bus_„q
 = (133*1000*1000);

210 #ñi‡
	`deföed
(
RT5350_ASIC_BOARD
)

211 
˛k_£l2
 = (
ªg
>>10) & 0x01;

212 
˛k_£l
 = ((
ªg
>>8Ë& 0x01Ë+ (
˛k_£l2
 * 2);

213 
˛k_£l
) {

215 
mùs_˝u_„q
 = (360*1000*1000);

216 
mùs_bus_„q
 = (120*1000*1000);

222 
mùs_˝u_„q
 = (320*1000*1000);

223 
mùs_bus_„q
 = (80*1000*1000);

226 
mùs_˝u_„q
 = (300*1000*1000);

227 
mùs_bus_„q
 = (100*1000*1000);

230 #ñi‡
	`deföed
(
RT6855_ASIC_BOARD
)

231 
mùs_˝u_„q
 = (400*1000*1000);

232 
mùs_bus_„q
 = (133*1000*1000);

233 #ñi‡
	`deföed
 (
RT6855A_ASIC_BOARD
)

237 
ªg
 = 
	`RALINK_REG
(
RT2880_SYSCFG_REG
);

238 i‡((
ªg
 & (1 << 25)) == 0) {

239 i‡((
ªg
 & (1 << 9)) != 0)

240 
mùs_˝u_„q
 = (560*1000*1000);

242 i‡((
ªg
 & (1 << 26)) != 0)

243 
mùs_˝u_„q
 = (560*1000*1000);

245 
mùs_˝u_„q
 = (420*1000*1000);

247 
mùs_bus_„q
 = (140*1000*1000);

249 i‡((
ªg
 & (1 << 9)) != 0) {

250 
mùs_˝u_„q
 = (700*1000*1000);

251 i‡((
ªg
 & (1 << 26)) != 0)

252 
mùs_bus_„q
 = (175*1000*1000);

254 
mùs_bus_„q
 = 233333333;

256 
mùs_˝u_„q
 = (500*1000*1000);

257 i‡((
ªg
 & (1 << 26)) != 0)

258 
mùs_bus_„q
 = (125*1000*1000);

260 
mùs_bus_„q
 = 166666667;

263 #ñi‡
	`deföed
(
MT7620_ASIC_BOARD
)

264 
ªg
 = 
	`RALINK_REG
(
RALINK_CPLLCFG1_REG
);

265 if–
ªg
 & ((0x1UL) << 24) ){

266 
mùs_˝u_„q
 = (480*1000*1000);

268 
ªg
 = 
	`RALINK_REG
(
RALINK_CPLLCFG0_REG
);

269 if(!(
ªg
 & 
CPLL_SW_CONFIG
)){

270 
mùs_˝u_„q
 = (600*1000*1000);

273 
mu…_øtio
 = (
ªg
 & 
CPLL_MULT_RATIO
Ë>> 
CPLL_MULT_RATIO_SHIFT
;

274 
div_øtio
 = (
ªg
 & 
CPLL_DIV_RATIO
Ë>> 
CPLL_DIV_RATIO_SHIFT
;

275 
mu…_øtio
 += 24;

276 if(
div_øtio
 == 0)

277 
div_øtio
 = 2;

278 if(
div_øtio
 == 1)

279 
div_øtio
 = 3;

280 if(
div_øtio
 == 2)

281 
div_øtio
 = 4;

282 if(
div_øtio
 == 3)

283 
div_øtio
 = 8;

284 
mùs_˝u_„q
 = ((
BASE_CLOCK
 * 
mu…_øtio
 ) / 
div_øtio
) * 1000 * 1000;

287 
ªg
 = (
	`RALINK_REG
(
RT2880_SYSCFG_REG
)) >> 4 & 0x3;

288 if(
ªg
 == 0x0){

289 
mùs_bus_„q
 = 
mùs_˝u_„q
/4;

290 }if(
ªg
 == 0x1 ||Ñeg == 0x2 ){

291 
mùs_bus_„q
 = 
mùs_˝u_„q
/3;

293 
mùs_bus_„q
 = 
mùs_˝u_„q
/5;

295 #ñi‡
	`deföed
 (
MT7628_ASIC_BOARD
)

296 
ªg
 = 
	`RALINK_REG
(
RALINK_CLKCFG0_REG
);

297 i‡(
ªg
 & (0x1<<1)) {

298 
mùs_˝u_„q
 = (480*1000*1000)/
CPU_FRAC_DIV
;

299 }i‡(
ªg
 & 0x1) {

300 
mùs_˝u_„q
 = ((
	`RALINK_REG
(
RALINK_SYSCTL_BASE
+0x10)>>6)&0x1Ë? (40*1000*1000)/
CPU_FRAC_DIV
 \

301 : (25*1000*1000)/
CPU_FRAC_DIV
;

303 
mùs_˝u_„q
 = (575*1000*1000)/
CPU_FRAC_DIV
;

305 
mùs_bus_„q
 = 
mùs_˝u_„q
/3;

306 #ñi‡
	`deföed
(
MT7621_ASIC_BOARD
)

307 
ªg
 = 
	`RALINK_REG
(
RALINK_SYSCTL_BASE
 + 0x2C);

308 if–
ªg
 & ((0x1UL) << 30)) {

309 
ªg
 = 
	`RALINK_REG
(
RALINK_MEMCTRL_BASE
 + 0x648);

310 
mùs_˝u_„q
 = (((
ªg
 >> 4) & 0x7F) + 1) * 1000 * 1000;

311 
ªg
 = 
	`RALINK_REG
(
RALINK_SYSCTL_BASE
 + 0x10);

312 
ªg
 = (reg >> 6) & 0x7;

313 if(
ªg
 >= 6) {

314 
mùs_˝u_„q
 = mips_cpu_feq * 25;

315 } i‡(
ªg
 >=3) {

316 
mùs_˝u_„q
 = mips_cpu_feq * 20;

321 
ªg
 = 
	`RALINK_REG
(
RALINK_SYSCTL_BASE
 + 0x44);

322 
mùs_˝u_„q
 = (500 * (
ªg
 & 0x1F) / ((reg >> 8) & 0x1F)) * 1000 * 1000;

324 
mùs_bus_„q
 = 
mùs_˝u_„q
/4;

325 #ñi‡
	`deföed
 (
RT3883_ASIC_BOARD
)

326 
˛k_£l
 = (
ªg
>>8) & 0x03;

327 
˛k_£l
) {

329 
mùs_˝u_„q
 = (250*1000*1000);

332 
mùs_˝u_„q
 = (384*1000*1000);

335 
mùs_˝u_„q
 = (480*1000*1000);

338 
mùs_˝u_„q
 = (500*1000*1000);

341 #i‡
	`deföed
 (
CFG_ENV_IS_IN_SPI
)

342 i‡((
ªg
>>17) & 0x1) {

343 
˛k_£l
) {

345 
mùs_bus_„q
 = (125*1000*1000);

348 
mùs_bus_„q
 = (128*1000*1000);

351 
mùs_bus_„q
 = (160*1000*1000);

354 
mùs_bus_„q
 = (166*1000*1000);

359 
˛k_£l
) {

361 
mùs_bus_„q
 = (83*1000*1000);

364 
mùs_bus_„q
 = (96*1000*1000);

367 
mùs_bus_„q
 = (120*1000*1000);

370 
mùs_bus_„q
 = (125*1000*1000);

374 #ñi‡
deföed
 
ON_BOARD_SDR


375 
˛k_£l
) {

377 
mùs_bus_„q
 = (83*1000*1000);

380 
mùs_bus_„q
 = (96*1000*1000);

383 
mùs_bus_„q
 = (120*1000*1000);

386 
mùs_bus_„q
 = (125*1000*1000);

389 #ñi‡
deföed
 
ON_BOARD_DDR2


390 
˛k_£l
) {

392 
mùs_bus_„q
 = (125*1000*1000);

395 
mùs_bus_„q
 = (128*1000*1000);

398 
mùs_bus_„q
 = (160*1000*1000);

401 
mùs_bus_„q
 = (166*1000*1000);

405 #îr‹ 
undef
 
SDR
 
‹
 
DDR


408 
˛k_£l
 = (
ªg
>>20) & 0x03;

409 
˛k_£l
) {

410 #ifde‡
RT2880_MP


412 
mùs_˝u_„q
 = (250*1000*1000);

415 
mùs_˝u_„q
 = (266*1000*1000);

418 
mùs_˝u_„q
 = (280*1000*1000);

421 
mùs_˝u_„q
 = (300*1000*1000);

425 
mùs_˝u_„q
 = (233*1000*1000);

428 
mùs_˝u_„q
 = (250*1000*1000);

431 
mùs_˝u_„q
 = (266*1000*1000);

434 
mùs_˝u_„q
 = (280*1000*1000);

439 
mùs_bus_„q
 = 
mùs_˝u_„q
/2;

450 #i‡
	`deföed
(
ON_BOARD_SDR
Ë&& deföed(
ON_BOARD_256M_DRAM_COMPONENT
Ë&& (!deföed(
MT7620_ASIC_BOARD
))

452 
u32
 
tREF
;

453 
tREF
 = 
	`RALINK_REG
(
SDRAM_CFG1_REG
);

454 
tREF
 &= 0xffff0000;

455 #i‡
	`deföed
(
ASIC_BOARD
)

456 
tREF
 |= 0x00000300;

457 #ñi‡
	`deföed
(
FPGA_BOARD
)

458 
tREF
 |= 0x000004B;

462 
	`RALINK_REG
(
SDRAM_CFG1_REG
Ë
tREF
;

466 
	}
}

472 
	$mem_mÆloc_öô
 ()

475 
ul⁄g
 
de°_addr
 = 
CFG_MONITOR_BASE
 + 
gd
->
ªloc_off
;

477 
mem_mÆloc_íd
 = 
de°_addr
;

478 
mem_mÆloc_°¨t
 = 
de°_addr
 - 
TOTAL_MALLOC_LEN
;

479 
mem_mÆloc_brk
 = 
mem_mÆloc_°¨t
;

481 
	`mem£t
 ((*Ë
mem_mÆloc_°¨t
,

483 
mem_mÆloc_íd
 - 
mem_mÆloc_°¨t
);

484 
	}
}

486 *
	$sbrk
 (
±rdiff_t
 
ö¸emít
)

488 
ul⁄g
 
ﬁd
 = 
mem_mÆloc_brk
;

489 
ul⁄g
 
√w
 = 
ﬁd
 + 
ö¸emít
;

491 i‡((
√w
 < 
mem_mÆloc_°¨t
Ë|| (√w > 
mem_mÆloc_íd
)) {

492  (
NULL
);

494 
mem_mÆloc_brk
 = 
√w
;

495  ((*Ë
ﬁd
);

496 
	}
}

498 
	$öô_func_øm
 ()

501 #ifdef 
CONFIG_BOARD_TYPES


502 
bﬂrd_ty≥
 = 
gd
->board_type;

504 
bﬂrd_ty≥
 = 0;

506 
	`puts
 ("DRAM: ");

509 #ifde‡
RALINK_DDR_OPTIMIZATION


510 #ifde‡
ON_BOARD_DDR2


513 
u32
 
tDDR
;

514 
tDDR
 = 
	`RALINK_REG
(
DDR_CFG0_REG
);

516 
tDDR
 &= 0xf0780000;

517 
tDDR
 |
RAS_VALUE
 << 
RAS_OFFSET
;

518 
tDDR
 |
TRFC_VALUE
 << 
TRFC_OFFSET
;

519 
tDDR
 |
TRFI_VALUE
 << 
TRFI_OFFSET
;

520 
	`RALINK_REG
(
DDR_CFG0_REG
Ë
tDDR
;

526 i‡((
gd
->
øm_size
 = 
	`öôdøm
 (
bﬂrd_ty≥
)) > 0) {

527 
	`¥öt_size
 (
gd
->
øm_size
, "\n");

530 
	`puts
 ("*** failed ***\n");

533 
	}
}

535 
	$di•œy_b™√r
()

538 
	`¥ötf
 ("\n\n%s\n\n", 
vîsi⁄_°rög
);

540 
	}
}

550 
	$öô_baudøã
 ()

555 
gd
->
baudøã
 = 
CONFIG_BAUDRATE
;

562 
	}
}

586 (
	töô_‚c_t
) ();

588 
öô_‚c_t
 *
öô_£quí˚
[] = {

589 
timî_öô
,

590 
ív_öô
,

591 
öô_baudøã
,

592 
£rül_öô
,

593 
c⁄sﬁe_öô_f
,

594 
di•œy_b™√r
,

595 
checkbﬂrd
,

596 
öô_func_øm
,

597 
NULL
,

598 
	}
};

602 
__©åibuã__
((
nomùs16
)Ë
	$bﬂrd_öô_f
(
ul⁄g
 
boŸÊag
)

604 
gd_t
 
gd_d©a
, *
id
;

605 
bd_t
 *
bd
;

607 
ul⁄g
 
addr
, 
addr_•
, 
Àn
 = (ul⁄g)&
uboŸ_íd
 - 
CFG_MONITOR_BASE
;

608 
ul⁄g
 *
s
;

609 
u32
 
vÆue
;

610 (*
±r
)();

611 
u32
 
fdiv
 = 0, 
°ï
 = 0, 
‰ac
 = 0, 
i
;

613 #i‡
deföed
 
RT6855_FPGA_BOARD
 || deföed 
RT6855_ASIC_BOARD
 || \

614 
deföed
 
MT7620_FPGA_BOARD
 || deföed 
MT7620_ASIC_BOARD


615 
vÆue
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)(
RALINK_SPI_BASE
 + 0x10));

616 
vÆue
 &= ~(0x7);

617 
vÆue
 |= 0x2;

618 *(vﬁ©ûê
u_l⁄g
 *)(
RALINK_SPI_BASE
 + 0x10Ë
	`˝u_to_À32
(
vÆue
);

619 #ñi‡
deföed
 
MT7621_FPGA_BOARD
 || deföed 
MT7628_FPGA_BOARD


620 
vÆue
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)(
RALINK_SPI_BASE
 + 0x3c));

621 
vÆue
 &= ~(0xFFF);

622 *(vﬁ©ûê
u_l⁄g
 *)(
RALINK_SPI_BASE
 + 0x3cË
	`˝u_to_À32
(
vÆue
);

623 #ñi‡
deföed
 
MT7621_ASIC_BOARD


624 
vÆue
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)(
RALINK_SPI_BASE
 + 0x3c));

625 
vÆue
 &= ~(0xFFF);

626 
vÆue
 |= 5;

627 *(vﬁ©ûê
u_l⁄g
 *)(
RALINK_SPI_BASE
 + 0x3cË
	`˝u_to_À32
(
vÆue
);

628 #ñi‡ 
deföed
 
MT7628_ASIC_BOARD


629 
vÆue
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)(
RALINK_SPI_BASE
 + 0x3c));

630 
vÆue
 &= ~(0xFFF);

631 
vÆue
 |= 8;

632 *(vﬁ©ûê
u_l⁄g
 *)(
RALINK_SPI_BASE
 + 0x3cË
	`˝u_to_À32
(
vÆue
);

635 #i‡
	`deföed
(
MT7620_FPGA_BOARD
Ë|| deföed(
MT7620_ASIC_BOARD
)

637 
vÆue
 = 
	`RALINK_REG
(
RT2880_SYSCLKCFG_REG
);

638 
fdiv
 = ((
vÆue
>>8)&0x1F);

639 
°ï
 = ()(
vÆue
&0x1F);

640 
°ï
 < 
fdiv
) {

641 
vÆue
 = 
	`RALINK_REG
(
RT2880_SYSCLKCFG_REG
);

642 
°ï
 = ()(
vÆue
&0x1F) + 1;

643 
vÆue
 &= ~(0x1F);

644 
vÆue
 |(
°ï
&0x1F);

645 
	`RALINK_REG
(
RT2880_SYSCLKCFG_REG
Ë
vÆue
;

646 
	`udñay
(10);

648 #ñi‡
	`deföed
(
MT7628_ASIC_BOARD
)

649 
vÆue
 = 
	`RALINK_REG
(
RALINK_DYN_CFG0_REG
);

650 
fdiv
 = ()((
vÆue
>>8)&0x0F);

651 i‡((
CPU_FRAC_DIV
 < 1) || (CPU_FRAC_DIV > 10))

652 
‰ac
 = ()(
vÆue
&0x0F);

654 
‰ac
 = 
CPU_FRAC_DIV
;

655 
i
 = 0;

657 
‰ac
 < 
fdiv
) {

658 
vÆue
 = 
	`RALINK_REG
(
RALINK_DYN_CFG0_REG
);

659 
fdiv
 = ((
vÆue
>>8)&0x0F);

660 
fdiv
--;

661 
vÆue
 &= ~(0x0F<<8);

662 
vÆue
 |(
fdiv
<<8);

663 
	`RALINK_REG
(
RALINK_DYN_CFG0_REG
Ë
vÆue
;

664 
	`udñay
(500);

665 
i
++;

666 
vÆue
 = 
	`RALINK_REG
(
RALINK_DYN_CFG0_REG
);

667 
fdiv
 = ((
vÆue
>>8)&0x0F);

670 #ñi‡
	`deföed
 (
MT7621_ASIC_BOARD
)

671 #i‡(
MT7621_CPU_FREQUENCY
!=50)

672 
vÆue
 = 
	`RALINK_REG
(
RALINK_CUR_CLK_STS_REG
);

673 
fdiv
 = ((
vÆue
>>8)&0x1F);

674 
‰ac
 = ()(
vÆue
&0x1F);

676 
i
 = 0;

678 
‰ac
 < 
fdiv
) {

679 
vÆue
 = 
	`RALINK_REG
(
RALINK_DYN_CFG0_REG
);

680 
fdiv
 = ((
vÆue
>>8)&0x0F);

681 
fdiv
--;

682 
vÆue
 &= ~(0x0F<<8);

683 
vÆue
 |(
fdiv
<<8);

684 
	`RALINK_REG
(
RALINK_DYN_CFG0_REG
Ë
vÆue
;

685 
	`udñay
(500);

686 
i
++;

687 
vÆue
 = 
	`RALINK_REG
(
RALINK_CUR_CLK_STS_REG
);

688 
fdiv
 = ((
vÆue
>>8)&0x1F);

689 
‰ac
 = ()(
vÆue
&0x1F);

693 #i‡((
MT7621_CPU_FREQUENCY
!=50) && (MT7621_CPU_FREQUENCY!=500))

695 
vÆue
 = 
	`RALINK_REG
(
RALINK_CLKCFG0_REG
);

696 
vÆue
 &= ~(0x3<<30);

697 
vÆue
 |= (0x1<<30);

698 
	`RALINK_REG
(
RALINK_CLKCFG0_REG
Ë
vÆue
;

702 #ifde‡
CONFIG_PURPLE


703 
	`c›y_code
 (
ul⁄g
);

709 
gd
 = &
gd_d©a
;

711 
__asm__
 
	`__vﬁ©ûe__
("": : :"memory");

714 
	`mem£t
 ((*)
gd
, 0,  (
gd_t
));

716 #i‡
	`deföed
 (
RT6855A_ASIC_BOARD
Ë|| deföed(
RT6855A_FPGA_BOARD
)

717 
	`w©chdog_ª£t
();

719 
	`timî_öô
();

720 
	`ív_öô
();

721 
	`öô_baudøã
();

722 
	`£rül_öô
();

723 
	`c⁄sﬁe_öô_f
();

724 #i‡(
TEXT_BASE
 == 0xBFC00000) || (TEXT_BASE == 0xBF000000) || (TEXT_BASE == 0xBC000000)

725 #i‡
	`deföed
 (
CONFIG_DDR_CAL
)

726 
±r
 = 
døm_ˇli
;

727 
±r
 = (*)((
u32
)ptr & ~(1<<29));

728 (*
±r
)();

731 
	`di•œy_b™√r
();

732 
	`checkbﬂrd
();

734 
	`öô_func_øm
();

737 
vÆue
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)(
RALINK_SYSCTL_BASE
 + 0x0034));

738 
	`udñay
(100);

739 #i‡
	`deföed
 (
RT2880_FPGA_BOARD
Ë|| deföed (
RT2880_ASIC_BOARD
)

740 
vÆue
 |= (1 << 18);

741 #ñi‡
	`deföed
 (
MT7621_FPGA_BOARD
Ë|| deföed (
MT7621_ASIC_BOARD
)

746 
vÆue
 |= (1 << 21);

748 *(vﬁ©ûê
u_l⁄g
 *)(
RALINK_SYSCTL_BASE
 + 0x0034Ë
	`˝u_to_À32
(
vÆue
);

749 #i‡
	`deföed
 (
RT2880_FPGA_BOARD
Ë|| deföed (
RT2880_ASIC_BOARD
)

750 
vÆue
 &= ~(1 << 18);

751 #ñi‡
	`deföed
 (
MT7621_FPGA_BOARD
Ë|| deföed (
MT7621_ASIC_BOARD
)

754 
vÆue
 &= ~(1 << 21);

756 *(vﬁ©ûê
u_l⁄g
 *)(
RALINK_SYSCTL_BASE
 + 0x0034Ë
	`˝u_to_À32
(
vÆue
);

757 
	`udñay
(200);

760 
öô_‚c_±r
 = 
öô_£quí˚
; *init_fnc_ptr; ++init_fnc_ptr) {

762 i‡((*
öô_‚c_±r
)() != 0) {

763 
	`h™g
 ();

767 #ifde‡
DEBUG


768 
	`debug
("π2880 uboŸ %†%s\n", 
VERSION
, 
DATE
);

775 
addr
 = 
CFG_SDRAM_BASE
 + 
gd
->
øm_size
;

779 #ifde‡
DEBUG


780 
	`debug
 ("SERIAL_CLOCK_DIVISOR =%d \n", 
SERIAL_CLOCK_DIVISOR
);

781 
	`debug
 ("kaikî,,CONFIG_BAUDRATE =%d \n", 
CONFIG_BAUDRATE
);

782 
	`debug
 ("SDRAM SIZE:%08X\n",
gd
->
øm_size
);

787 
addr
 &= ~(4096 - 1);

788 #ifde‡
DEBUG


789 
	`debug
 ("T› o‡RAM ußbÀ f‹ U-BoŸát: %08lx\n", 
addr
);

795 
addr
 -
Àn
;

796 
addr
 &= ~(16 * 1024 - 1);

797 #ifde‡
DEBUG


798 
	`debug
 ("Re£rvög %ldk f‹ U-BoŸát: %08lx\n", 
Àn
 >> 10, 
addr
);

802 
addr_•
 = 
addr
 - 
TOTAL_MALLOC_LEN
;

803 #ifde‡
DEBUG


804 
	`debug
 ("Reserving %dk for malloc()át: %08lx\n",

805 
TOTAL_MALLOC_LEN
 >> 10, 
addr_•
);

811 
addr_•
 -(
bd_t
);

812 
bd
 = (
bd_t
 *)
addr_•
;

813 
gd
->
bd
 = bd;

814 #ifde‡
DEBUG


815 
	`debug
 ("Reserving %d Bytes for Board Infoát: %08lx\n",

816 (
bd_t
), 
addr_•
);

818 
addr_•
 -(
gd_t
);

819 
id
 = (
gd_t
 *)
addr_•
;

820 #ifde‡
DEBUG


821 
	`debug
 ("Reserving %d Bytes for Global Dataát: %08lx\n",

822  (
gd_t
), 
addr_•
);

826 
addr_•
 -
CFG_BOOTPARAMS_LEN
;

827 
bd
->
bi_boŸ_∑øms
 = 
addr_•
;

828 #ifde‡
DEBUG


829 
	`debug
 ("Reserving %dk for bootÖarams()át: %08lx\n",

830 
CFG_BOOTPARAMS_LEN
 >> 10, 
addr_•
);

838 
addr_•
 -= 16;

839 
addr_•
 &= ~0xF;

840 
s
 = (
ul⁄g
 *)
addr_•
;

841 *
s
-- = 0;

842 *
s
-- = 0;

843 
addr_•
 = (
ul⁄g
)
s
;

844 #ifde‡
DEBUG


845 
	`debug
 ("Sèck Poöã∏©: %08lx\n", 
addr_•
);

851 
bd
->
bi_mem°¨t
 = 
CFG_SDRAM_BASE
;

852 
bd
->
bi_memsize
 = 
gd
->
øm_size
;

853 
bd
->
bi_baudøã
 = 
gd
->
baudøã
;

855 
	`mem˝y
 (
id
, (*)
gd
,  (
gd_t
));

860 #ifde‡
CONFIG_PURPLE


861 
	`c›y_code
(
addr
);

865 #i‡
	`deföed
(
CFG_RUN_CODE_IN_RAM
)

870 
	`debug
 ("ªloˇã_codêPoöã∏©: %08lx\n", 
addr
);

871 
	`ªloˇã_code
 (
addr_•
, 
id
, 
addr
);

873 
	`debug
 ("ªloˇã_codêPoöã∏©: %08lx\n", 
addr
);

874 
	`ªloˇã_code
 (
addr_•
, 
id
, 
addr
);

878 
	}
}

880 
	#SEL_LOAD_LINUX_WRITE_FLASH_BY_SERIAL
 0

	)

881 
	#SEL_LOAD_LINUX_SDRAM
 1

	)

882 
	#SEL_LOAD_LINUX_WRITE_FLASH
 2

	)

883 
	#SEL_BOOT_FLASH
 3

	)

884 
	#SEL_ENTER_CLI
 4

	)

885 
	#SEL_LOAD_BOOT_WRITE_FLASH_BY_SERIAL
 7

	)

886 
	#SEL_LOAD_BOOT_SDRAM
 8

	)

887 
	#SEL_LOAD_BOOT_WRITE_FLASH
 9

	)

888 
	#SEL_LOAD_FIRMWARE_WRITE_FLASH
 102

	)

890 
	$O≥øti⁄Sñe˘
()

892 
	`¥ötf
("\nPlease chooseÅhe operation: \n");

893 
	`¥ötf
(" %d: Lﬂd sy°em codêtÿSDRAM vü TFTP. \n", 
SEL_LOAD_LINUX_SDRAM
);

894 
	`¥ötf
(" %d: Lﬂd sy°em codêthí wrôêtÿFœsh vü TFTP. \n", 
SEL_LOAD_LINUX_WRITE_FLASH
);

895 
	`¥ötf
(" %d: BoŸ sy°em codêvü Fœsh (deÁu…).\n", 
SEL_BOOT_FLASH
);

896 #ifde‡
RALINK_CMDLINE


897 
	`¥ötf
(" %d: E¡∏boŸ comm™dÜöêöãrÁ˚.\n", 
SEL_ENTER_CLI
);

899 #ifde‡
RALINK_UPGRADE_BY_SERIAL


900 
	`¥ötf
(" %d: Lﬂd BoŸ Lﬂdî codêthí wrôêtÿFœsh vü Sîül. \n", 
SEL_LOAD_BOOT_WRITE_FLASH_BY_SERIAL
);

902 
	`¥ötf
(" %d: Lﬂd BoŸ Lﬂdî codêthí wrôêtÿFœsh vü TFTP. \n", 
SEL_LOAD_BOOT_WRITE_FLASH
);

903 
	`¥ötf
(" %c: Lﬂd fúmw¨êthí wrôêtÿFœsh vü TFTP. \n", 
SEL_LOAD_FIRMWARE_WRITE_FLASH
);

904 
	}
}

906 
	$t·p_c⁄fig
(
ty≥
, *
¨gv
[])

908 *
s
;

909 
deÁu…_fûe
[
ARGV_LEN
], 
fûe
[ARGV_LEN], 
devù
[ARGV_LEN], 
§vù
[ARGV_LEN], 
deÁu…_ù
[ARGV_LEN];

911 
	`¥ötf
(" Please InputÇew ones /or Ctrl-CÅo discard\n");

913 
	`mem£t
(
deÁu…_fûe
, 0, 
ARGV_LEN
);

914 
	`mem£t
(
fûe
, 0, 
ARGV_LEN
);

915 
	`mem£t
(
devù
, 0, 
ARGV_LEN
);

916 
	`mem£t
(
§vù
, 0, 
ARGV_LEN
);

917 
	`mem£t
(
deÁu…_ù
, 0, 
ARGV_LEN
);

919 
	`¥ötf
("\tInput device IP ");

920 
s
 = 
	`gëív
("ipaddr");

921 
	`mem˝y
(
devù
, 
s
, 
	`°æí
(s));

922 
	`mem˝y
(
deÁu…_ù
, 
s
, 
	`°æí
(s));

924 
	`¥ötf
("(%sË", 
devù
);

925 
	`öput_vÆue
(
devù
);

926 
	`£ãnv
("ùaddr", 
devù
);

927 i‡(
	`°rcmp
(
deÁu…_ù
, 
devù
) != 0)

928 
modifõs
++;

930 
	`¥ötf
("\tInput server IP ");

931 
s
 = 
	`gëív
("serverip");

932 
	`mem˝y
(
§vù
, 
s
, 
	`°æí
(s));

933 
	`mem£t
(
deÁu…_ù
, 0, 
ARGV_LEN
);

934 
	`mem˝y
(
deÁu…_ù
, 
s
, 
	`°æí
(s));

936 
	`¥ötf
("(%sË", 
§vù
);

937 
	`öput_vÆue
(
§vù
);

938 
	`£ãnv
("£rvîù", 
§vù
);

939 i‡(
	`°rcmp
(
deÁu…_ù
, 
§vù
) != 0)

940 
modifõs
++;

942 if(
ty≥
 =
SEL_LOAD_BOOT_SDRAM


943 || 
ty≥
 =
SEL_LOAD_BOOT_WRITE_FLASH


944 #ifde‡
RALINK_UPGRADE_BY_SERIAL


945 || 
ty≥
 =
SEL_LOAD_BOOT_WRITE_FLASH_BY_SERIAL


948 if(
ty≥
 =
SEL_LOAD_BOOT_SDRAM
)

949 #i‡
	`deföed
 (
RT2880_ASIC_BOARD
Ë|| deföed (
RT2880_FPGA_BOARD
)

950 
¨gv
[1] = "0x8a200000";

952 
¨gv
[1] = "0x80200000";

955 #i‡
	`deföed
 (
RT2880_ASIC_BOARD
Ë|| deföed (
RT2880_FPGA_BOARD
)

956 
¨gv
[1] = "0x8a100000";

958 
¨gv
[1] = "0x80100000";

960 
	`¥ötf
("\tInput Uboot filename ");

962 
	`°∫˝y
(
¨gv
[2], "uboŸ.bö", 
ARGV_LEN
);

964 i‡(
ty≥
 =
SEL_LOAD_LINUX_WRITE_FLASH
) {

965 #i‡
	`deföed
 (
RT2880_ASIC_BOARD
Ë|| deföed (
RT2880_FPGA_BOARD
)

966 
¨gv
[1] = "0x8a100000";

968 
¨gv
[1] = "0x80100000";

970 
	`¥ötf
("\tInput Linux Kernel filename ");

972 
	`°∫˝y
(
¨gv
[2], "uImage", 
ARGV_LEN
);

974 i‡(
ty≥
 =
SEL_LOAD_LINUX_SDRAM
 ) {

976 #i‡
	`deföed
 (
RT2880_ASIC_BOARD
Ë|| deföed (
RT2880_FPGA_BOARD
)

977 
¨gv
[1] = "0x8a800000";

979 
¨gv
[1] = "0x80A00000";

981 
	`¥ötf
("\tInput Linux Kernel filename ");

983 
	`°∫˝y
(
¨gv
[2], "uImage", 
ARGV_LEN
);

985 i‡(
ty≥
 =
SEL_LOAD_FIRMWARE_WRITE_FLASH
) {

986 #i‡
	`deföed
 (
RT2880_ASIC_BOARD
Ë|| deföed (
RT2880_FPGA_BOARD
)

987 
¨gv
[1] = "0x8a100000";

989 
¨gv
[1] = "0x80100000";

991 
	`¥ötf
("\tInput Firmware filename ");

993 
	`°∫˝y
(
¨gv
[2], "Á˘‹y.bö", 
ARGV_LEN
);

996 
s
 = 
	`gëív
("bootfile");

997 i‡(
s
 !
NULL
) {

998 
	`mem˝y
(
fûe
, 
s
, 
	`°æí
(s));

999 
	`mem˝y
(
deÁu…_fûe
, 
s
, 
	`°æí
(s));

1001 
	`¥ötf
("(%sË", 
fûe
);

1002 
	`öput_vÆue
(
fûe
);

1003 i‡(
fûe
 =
NULL
)

1005 
	`c›y_fûíame
 (
¨gv
[2], 
fûe
, (file));

1006 
	`£ãnv
("boŸfûe", 
fûe
);

1007 i‡(
	`°rcmp
(
deÁu…_fûe
, 
fûe
) != 0)

1008 
modifõs
++;

1011 
	}
}

1013 
	$åiggî_hw_ª£t
()

1015 #ifde‡
GPIO14_RESET_MODE


1017 
	`RALINK_REG
(
RT2880_REG_PIODIR
)|=1<<14;

1019 
	`RALINK_REG
(
RT2880_REG_PIODATA
)|=1<<14;

1020 
	`udñay
(100);

1021 
	`RALINK_REG
(
RT2880_REG_PIODATA
)&=~(1<<14);

1023 
	}
}

1025 #ifde‡
DUAL_IMAGE_SUPPORT


1031 
	$c›y_image
(
dú
, 
image_size
)

1033 
ªt
 = 0;

1034 #ifde‡
CFG_ENV_IS_IN_FLASH


1035 
e_íd
, 
Àn
;

1038 i‡(
dú
 == 1) {

1039 #i‡
	`deföed
 (
CFG_ENV_IS_IN_NAND
)

1040 
	`¥ötf
("\nCopy Image:\nImage1(0x%X)Åo Image2(0x%X), size=0x%X\n",

1041 
CFG_KERN_ADDR
 - 
CFG_FLASH_BASE
,

1042 
CFG_KERN2_ADDR
 - 
CFG_FLASH_BASE
, 
image_size
);

1043 
	`ø«nd_ªad
((*)
CFG_SPINAND_LOAD_ADDR
, 
CFG_KERN_ADDR
-
CFG_FLASH_BASE
, 
image_size
);

1044 
ªt
 = 
	`ø«nd_îa£_wrôe
((*)
CFG_SPINAND_LOAD_ADDR
, 
CFG_KERN2_ADDR
-
CFG_FLASH_BASE
, 
image_size
);

1045 #ñi‡
	`deföed
 (
CFG_ENV_IS_IN_SPI
)

1046 
	`¥ötf
("\nCopy Image:\nImage1(0x%X)Åo Image2(0x%X), size=0x%X\n",

1047 
CFG_KERN_ADDR
 - 
CFG_FLASH_BASE
,

1048 
CFG_KERN2_ADDR
 - 
CFG_FLASH_BASE
, 
image_size
);

1049 
	`ø•i_ªad
((*)
CFG_SPINAND_LOAD_ADDR
, 
CFG_KERN_ADDR
-
CFG_FLASH_BASE
, 
image_size
);

1050 
ªt
 = 
	`ø•i_îa£_wrôe
((*)
CFG_SPINAND_LOAD_ADDR
, 
CFG_KERN2_ADDR
-
CFG_FLASH_BASE
, 
image_size
);

1052 
	`¥ötf
("\nC›y Image:\nImage1(0x%XËtÿImage2(0x%X), size=0x%X\n", 
CFG_KERN_ADDR
, 
CFG_KERN2_ADDR
, 
image_size
);

1053 
e_íd
 = 
CFG_KERN2_ADDR
 + 
image_size
 - 1;

1054 i‡(
	`gë_addr_bound¨y
(&
e_íd
) != 0)

1056 
	`¥ötf
("Eø£ from 0x%XÅÿ0x%X\n", 
CFG_KERN2_ADDR
, 
e_íd
);

1057 
	`Êash_£˘_îa£
(
CFG_KERN2_ADDR
, 
e_íd
);

1058 
	`mem˝y
(
CFG_LOAD_ADDR
, (*)
CFG_KERN_ADDR
, 
image_size
);

1059 
ªt
 = 
	`Êash_wrôe
((
uch¨
 *)
CFG_LOAD_ADDR
, (
ul⁄g
)
CFG_KERN2_ADDR
, 
image_size
);

1062 i‡(
dú
 == 2) {

1063 #i‡
	`deföed
 (
CFG_ENV_IS_IN_NAND
)

1064 
	`¥ötf
("\nCopy Image:\nImage2(0x%X)Åo Image1(0x%X), size=0x%X\n",

1065 
CFG_KERN2_ADDR
 - 
CFG_FLASH_BASE
,

1066 
CFG_KERN_ADDR
 - 
CFG_FLASH_BASE
, 
image_size
);

1067 
	`ø«nd_ªad
((*)
CFG_SPINAND_LOAD_ADDR
, 
CFG_KERN2_ADDR
-
CFG_FLASH_BASE
, 
image_size
);

1068 
ªt
 = 
	`ø«nd_îa£_wrôe
((*)
CFG_SPINAND_LOAD_ADDR
, 
CFG_KERN_ADDR
-
CFG_FLASH_BASE
, 
image_size
);

1069 #ñi‡
	`deföed
 (
CFG_ENV_IS_IN_SPI
)

1070 
	`¥ötf
("\nCopy Image:\nImage2(0x%X)Åo Image1(0x%X), size=0x%X\n",

1071 
CFG_KERN2_ADDR
 - 
CFG_FLASH_BASE
,

1072 
CFG_KERN_ADDR
 - 
CFG_FLASH_BASE
, 
image_size
);

1073 
	`ø•i_ªad
((*)
CFG_SPINAND_LOAD_ADDR
, 
CFG_KERN2_ADDR
-
CFG_FLASH_BASE
, 
image_size
);

1074 
ªt
 = 
	`ø•i_îa£_wrôe
((*)
CFG_SPINAND_LOAD_ADDR
, 
CFG_KERN_ADDR
-
CFG_FLASH_BASE
, 
image_size
);

1076 
	`¥ötf
("\nC›y Image:\nImage2(0x%XËtÿImage1(0x%X), size=0x%X\n", 
CFG_KERN2_ADDR
, 
CFG_KERN_ADDR
, 
image_size
);

1077 #i‡
	`deföed
 (
ON_BOARD_16M_FLASH_COMPONENT
Ë&& (deföed (
RT2880_ASIC_BOARD
Ë|| deföed (
RT2880_FPGA_BOARD
Ë|| deföed (
RT3052_MP1
))

1078 
Àn
 = 0x400000 - (
CFG_BOOTLOADER_SIZE
 + 
CFG_CONFIG_SIZE
 + 
CFG_FACTORY_SIZE
);

1079 i‡(
image_size
 <
Àn
) {

1080 
e_íd
 = 
CFG_KERN_ADDR
 + 
image_size
 - 1;

1081 i‡(
	`gë_addr_bound¨y
(&
e_íd
) != 0)

1083 
	`¥ötf
("Eø£ from 0x%X Tÿ0x%X\n", 
CFG_KERN_ADDR
, 
e_íd
);

1084 
	`Êash_£˘_îa£
(
CFG_KERN_ADDR
, 
e_íd
);

1085 
	`mem˝y
(
CFG_LOAD_ADDR
, (*)
CFG_KERN2_ADDR
, 
image_size
);

1086 
ªt
 = 
	`Êash_wrôe
((
uch¨
 *)
CFG_LOAD_ADDR
, (
ul⁄g
)
CFG_KERN_ADDR
, 
image_size
);

1089 
e_íd
 = 
CFG_KERN_ADDR
 + 
Àn
 - 1;

1090 i‡(
	`gë_addr_bound¨y
(&
e_íd
 - 1) != 0)

1092 
	`¥ötf
("Eø£ from 0x%X Tÿ0x%X\n", 
CFG_KERN_ADDR
, 
e_íd
);

1093 
	`Êash_£˘_îa£
(
CFG_KERN_ADDR
, 
e_íd
);

1094 
e_íd
 = 
PHYS_FLASH_2
 + (
image_size
 - 
Àn
) - 1;

1095 i‡(
	`gë_addr_bound¨y
(&
e_íd
) != 0)

1097 
	`¥ötf
("From 0x%X Tÿ0x%X\n", 
PHYS_FLASH_2
, 
e_íd
);

1098 
	`Êash_£˘_îa£
(
PHYS_FLASH_2
, 
e_íd
);

1099 
	`mem˝y
(
CFG_LOAD_ADDR
, (*)
CFG_KERN2_ADDR
, 
image_size
);

1100 
ªt
 = 
	`Êash_wrôe
((
uch¨
 *)
CFG_LOAD_ADDR
, (
ul⁄g
)
CFG_KERN_ADDR
, 
Àn
);

1101 
ªt
 = 
	`Êash_wrôe
((
uch¨
 *)(
CFG_LOAD_ADDR
 + 
Àn
), (
ul⁄g
)
PHYS_FLASH_2
, 
image_size
 -Üen);

1104 
e_íd
 = 
CFG_KERN_ADDR
 + 
image_size
 - 1;

1105 i‡(
	`gë_addr_bound¨y
(&
e_íd
) != 0)

1107 
	`¥ötf
("Eø£ from 0x%XÅÿ0x%X\n", 
CFG_KERN_ADDR
, 
e_íd
);

1108 
	`Êash_£˘_îa£
(
CFG_KERN_ADDR
, 
e_íd
);

1109 
	`mem˝y
(
CFG_LOAD_ADDR
, (*)
CFG_KERN2_ADDR
, 
image_size
);

1110 
ªt
 = 
	`Êash_wrôe
((
uch¨
 *)
CFG_LOAD_ADDR
, (
ul⁄g
)
CFG_KERN_ADDR
, 
image_size
);

1113 i‡(
ªt
 == 0) {

1114 
	`£ãnv
("Image1Stable", "0");

1115 
	`£ãnv
("Image1Try", "0");

1116 
	`ßvìnv
();

1120 
ªt
 = -1;

1122  
ªt
;

1124 
	}
}

1126 
	$debug_mode
()

1128 
	`¥ötf
("Upgrade Mode~~\n");

1131 
	}
}

1133 
	#MAX_TRY_TIMES
 3

	)

1134 
	$check_image_vÆid©i⁄
()

1136 
ªt
 = 0;

1137 
brokí1
 = 0, 
brokí2
 = 0;

1138 
Àn
 = 0, 
chksum
 = 0;

1139 
image_hódî_t
 
hdr1
, 
hdr2
;

1140 *
hdr1_addr
, *
hdr2_addr
;

1141 *
°abÀ
, *
åy
;

1143 
hdr1_addr
 = (*)
CFG_KERN_ADDR
;

1144 
hdr2_addr
 = (*)
CFG_KERN2_ADDR
;

1146 #i‡
	`deföed
 (
CFG_ENV_IS_IN_NAND
)

1147 
	`ø«nd_ªad
((*)&
hdr1
, ()
hdr1_addr
 - 
CFG_FLASH_BASE
, (
image_hódî_t
));

1148 
	`ø«nd_ªad
(*)(&
hdr2
, ()
hdr2_addr
 - 
CFG_FLASH_BASE
, (
image_hódî_t
));

1149 #ñi‡
	`deföed
 (
CFG_ENV_IS_IN_SPI
)

1150 
	`ø•i_ªad
((*)&
hdr1
, ()
hdr1_addr
 - 
CFG_FLASH_BASE
, (
image_hódî_t
));

1151 
	`ø•i_ªad
((*)&
hdr2
, ()
hdr2_addr
 - 
CFG_FLASH_BASE
, (
image_hódî_t
));

1153 
	`memmove
(&
hdr1
, (*)
hdr1_addr
, (
image_hódî_t
));

1154 
	`memmove
(&
hdr2
, (*)
hdr2_addr
, (
image_hódî_t
));

1157 
	`¥ötf
("\n=================================================\n");

1158 
	`¥ötf
("Check image validation:\n");

1161 
	`¥ötf
 ("Image1 Header Magic Number --> ");

1162 i‡(
	`¡ohl
(
hdr1
.
ih_magic
Ë!
IH_MAGIC
) {

1163 
brokí1
 = 1;

1164 
	`¥ötf
("Failed\n");

1167 
	`¥ötf
("OK\n");

1169 
	`¥ötf
 ("Image2 Header Magic Number --> ");

1170 i‡(
	`¡ohl
(
hdr2
.
ih_magic
Ë!
IH_MAGIC
) {

1171 
brokí2
 = 1;

1172 
	`¥ötf
("Failed\n");

1175 
	`¥ötf
("OK\n");

1179 i‡(
brokí1
 == 0) {

1180 
	`¥ötf
("Image1 Header Checksum --> ");

1181 
Àn
 = (
image_hódî_t
);

1182 
chksum
 = 
	`¡ohl
(
hdr1
.
ih_h¸c
);

1183 
hdr1
.
ih_h¸c
 = 0;

1184 i‡(
	`¸c32
(0, (*)&
hdr1
, 
Àn
Ë!
chksum
) {

1185 
brokí1
 = 1;

1186 
	`¥ötf
("Failed\n");

1189 
	`¥ötf
("OK\n");

1192 i‡(
brokí2
 == 0) {

1193 
	`¥ötf
("Image2 Header Checksum --> ");

1194 
Àn
 = (
image_hódî_t
);

1195 
chksum
 = 
	`¡ohl
(
hdr2
.
ih_h¸c
);

1196 
hdr2
.
ih_h¸c
 = 0;

1197 i‡(
	`¸c32
(0, (*)&
hdr2
, 
Àn
Ë!
chksum
) {

1198 
	`¥ötf
("Failed\n");

1199 
brokí2
 = 1;

1202 
	`¥ötf
("OK\n");

1207 i‡(
brokí1
 == 0) {

1208 
	`¥ötf
("Image1 Data Checksum --> ");

1209 
Àn
 = 
	`¡ohl
(
hdr1
.
ih_size
);

1210 
chksum
 = 
	`¡ohl
(
hdr1
.
ih_d¸c
);

1211 #i‡
	`deföed
 (
CFG_ENV_IS_IN_NAND
)

1212 
	`ø«nd_ªad
((*)
CFG_SPINAND_LOAD_ADDR
,

1213 ()
hdr1_addr
 - 
CFG_FLASH_BASE
 + (
image_hódî_t
),

1214 
Àn
);

1215 i‡(
	`¸c32
(0, (*)
CFG_SPINAND_LOAD_ADDR
, 
Àn
Ë!
chksum
)

1216 #ñi‡
	`deföed
 (
CFG_ENV_IS_IN_SPI
)

1217 
	`ø•i_ªad
((*)
CFG_SPINAND_LOAD_ADDR
,

1218 ()
hdr1_addr
 - 
CFG_FLASH_BASE
 + (
image_hódî_t
),

1219 
Àn
);

1220 i‡(
	`¸c32
(0, (*)
CFG_SPINAND_LOAD_ADDR
, 
Àn
Ë!
chksum
)

1222 i‡(
	`¸c32
(0, (*)(
hdr1_addr
 + (
image_hódî_t
)), 
Àn
Ë!
chksum
)

1225 
brokí1
 = 1;

1226 
	`¥ötf
("Failed\n");

1229 
	`¥ötf
("OK\n");

1232 i‡(
brokí2
 == 0) {

1233 
	`¥ötf
("Image2 Data Checksum --> ");

1234 
Àn
 = 
	`¡ohl
(
hdr2
.
ih_size
);

1235 
chksum
 = 
	`¡ohl
(
hdr2
.
ih_d¸c
);

1236 #i‡
	`deföed
 (
CFG_ENV_IS_IN_NAND
)

1237 
	`ø«nd_ªad
((*)
CFG_SPINAND_LOAD_ADDR
,

1238 ()
hdr2_addr
 - 
CFG_FLASH_BASE
 + (
image_hódî_t
),

1239 
Àn
);

1240 i‡(
	`¸c32
(0, (*)
CFG_SPINAND_LOAD_ADDR
, 
Àn
Ë!
chksum
)

1241 #ñi‡
	`deföed
 (
CFG_ENV_IS_IN_SPI
)

1242 
	`ø•i_ªad
((*)
CFG_SPINAND_LOAD_ADDR
,

1243 ()
hdr2_addr
 - 
CFG_FLASH_BASE
 + (
image_hódî_t
),

1244 
Àn
);

1245 i‡(
	`¸c32
(0, (*)
CFG_SPINAND_LOAD_ADDR
, 
Àn
Ë!
chksum
)

1247 i‡(
	`¸c32
(0, (*)(
hdr2_addr
 + (
image_hódî_t
)), 
Àn
Ë!
chksum
)

1250 
brokí2
 = 1;

1251 
	`¥ötf
("Failed\n");

1254 
	`¥ötf
("OK\n");

1258 
°abÀ
 = 
	`gëív
("Image1Stable");

1259 
	`¥ötf
("Image1 SèbÀ Fœg --> %s\n", !
	`°rcmp
(
°abÀ
, "1") ? "Stable" : "Not stable");

1260 
åy
 = 
	`gëív
("Image1Try");

1261 
	`¥ötf
("Image1 Try Cou¡î --> %s\n", (
åy
 =
NULL
) ? "0" :Åry);

1262 i‡((
	`°rcmp
(
°abÀ
, "1"Ë!0Ë&& (
	`sim∂e_°πoul
(
åy
, 
NULL
, 10)Ë> 
MAX_TRY_TIMES


1263 && (
brokí1
 == 0)) {

1264 
	`¥ötf
("\nImage1 i†nŸ sèbÀándÅry cou¡î > %X. Takêôá†®brokí image.", 
MAX_TRY_TIMES
);

1265 
brokí1
 = 1;

1268 
	`¥ötf
("\nImage1: %†Image2: %s\n", 
brokí1
 ? "Brokí" : "OK", 
brokí2
 ? "Broken" : "OK");

1269 i‡(
brokí1
 =1 && 
brokí2
 == 0) {

1270 
Àn
 = 
	`¡ohl
(
hdr2
.
ih_size
Ë+ (
image_hódî_t
);

1271 i‡(
Àn
 > 
CFG_KERN_SIZE
)

1272 
	`¥ötf
("\nImage1 i†brokí, buàImage2 size(0x%XËi†toÿbig÷imô=0x%X)!!\
\nGivêu∞c›yög image.\n", 
Àn
, 
CFG_KERN_SIZE
);

1275 
	`¥ötf
("Image1 is borken. Copy Image2Åo Image1\n");

1276 
	`c›y_image
(2, 
Àn
);

1279 i‡(
brokí1
 =0 && 
brokí2
 == 1) {

1280 
Àn
 = 
	`¡ohl
(
hdr1
.
ih_size
Ë+ (
image_hódî_t
);

1281 i‡(
Àn
 > 
CFG_KERN2_SIZE
)

1282 
	`¥ötf
("\nImage2 i†brokí, buàImage1 size(0x%XËi†toÿbig÷imô=0x%X)!!\
\nGivêu∞c›yög image.\n", 
Àn
, 
CFG_KERN2_SIZE
);

1285 
	`¥ötf
("\nImage2 is borken. Copy Image1Åo Image2.\n");

1286 
	`c›y_image
(1, 
Àn
);

1289 i‡(
brokí1
 =1 && 
brokí2
 == 1)

1290 
	`debug_mode
();

1292 
ªt
 = -1;

1294 
	`¥ötf
("\n=================================================\n");

1296  
ªt
;

1297 
	}
}

1311 
gd_t
 
	ggd_d©a
;

1313 
__©åibuã__
((
nomùs16
)Ë
	$bﬂrd_öô_r
 (
gd_t
 *
id
, 
ul⁄g
 
de°_addr
)

1315 
cmd_tbl_t
 *
cmdç
;

1316 
ul⁄g
 
size
;

1317 
	`mÆloc_bö_ªloc
 ();

1318 #i‚de‡
CFG_ENV_IS_NOWHERE


1319 * 
ív_«me_•ec
;

1321 *
s
, *
e
;

1322 
bd_t
 *
bd
;

1323 
i
;

1324 
timî1

CONFIG_BOOTDELAY
;

1325 
BoŸTy≥
='3', 
c⁄fúm
=0;

1326 
my_tmp
;

1327 
addr_°r
[11];

1328 #i‡
	`deföed
 (
CFG_ENV_IS_IN_FLASH
)

1329 
ul⁄g
 
e_íd
;

1332 #i‡
	`deföed
 (
RT2880_FPGA_BOARD
Ë|| deföed (
RT2880_ASIC_BOARD
)

1333 
u32
 
vÆue
,
kk
;

1335 
	`mem˝y
(&
gd_d©a
, (*)
gd
, (
gd_t
));

1336 
gd
 = &
gd_d©a
;

1338 
u32
 
c⁄fig1
,
lsize
,
iˇche_löesz
,
iˇche_£ts
,
iˇche_ways
,
iˇche_size
;

1339 
u32
 
dˇche_löesz
,
dˇche_£ts
,
dˇche_ways
,
dˇche_size
;

1341 
	`mem˝y
((*)(
CFG_SDRAM_BASE
 + 
DRAM_SIZE
*0x100000 - 0x10000), (*)
gd
, (
gd_t
));

1342 
gd
 = (
gd_t
 *)(
CFG_SDRAM_BASE
 + 
DRAM_SIZE
*0x100000- 0x10000);

1345 #i‡
	`deföed
(
MT7620_ASIC_BOARD
)

1347 
	`¥ötf
("enableÉphy clock...");

1348 
i
 = 5;

1349 
	`rw_rf_ªg
(1, 29, &
i
);

1350 
	`¥ötf
("done. ");

1351 
	`rw_rf_ªg
(0, 29, &
i
);

1352 
	`¥ötf
("r‡ªg 29 = %d\n", 
i
);

1355 
u32
 
vÆue
 = 
	`RALINK_REG
(0xb0000054);

1356 
vÆue
 = value >> 4;

1357 if(
vÆue
 & 0x00000008){

1358 
swög
 = ((
vÆue
 & 0x00000007) + 1) * 1250;

1359 
	`¥ötf
("SSCÉ«bÀd. swög=%d, uµîbound=%d\n", 
swög
, (
vÆue
 >> 4) & 0x3);

1361 
	`¥ötf
("SSC disabled.\n");

1366 #i‡
	`deföed
(
RT3052_ASIC_BOARD
)

1367 
	`adju°_vﬁège
();

1369 
	`adju°_vﬁège
();

1372 #i‡
	`deföed
 (
RT3052_FPGA_BOARD
Ë|| deföed(
RT3052_ASIC_BOARD
)

1373 #ifde‡
RALINK_EPHY_INIT


1374 
	`íabÀ_mdio
();

1376 
	`íabÀ_mdio
(0);

1385 
gd
->
Êags
 |
GD_FLG_RELOC
;

1387 
	`Inô_Sy°em_Mode
();

1389 #i‡
	`deföed
(
MT7628_ASIC_BOARD
)

1390 
	`RALINK_REG
(
RALINK_SYSCTL_BASE
+0x3C)|= (1<<8);

1391 
	`RALINK_REG
(
RALINK_SYSCTL_BASE
+0x64)&= ~((0x3<<16)|(0x3));

1393 #i‡
	`deföed
(
RT3052_ASIC_BOARD
Ë|| deföed(
RT3352_ASIC_BOARD
Ë|| deföed(
RT5350_ASIC_BOARD
)

1396 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0xA4)=0xC;

1397 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0xA8)=0xC;

1398 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0xAC)=0xC;

1399 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0xB0)=0xC;

1400 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0xB4)=0xC;

1401 
	`udñay
(500000);

1402 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0xA4)=0x5;

1403 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0xA8)=0x5;

1404 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0xAC)=0x5;

1405 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0xB0)=0x5;

1406 
	`RALINK_REG
(
RALINK_ETH_SW_BASE
+0xB4)=0x5;

1410 #i‡
	`deföed
(
RT3052_ASIC_BOARD
Ë|| deföed(
RT2883_ASIC_BOARD
)

1411 
	`c⁄fig_usbŸg
();

1412 
	`c⁄fig_usbŸg
();

1413 #ñi‡
	`deföed
(
RT3883_ASIC_BOARD
Ë|| deföed(
RT3352_ASIC_BOARD
Ë|| deföed(
RT5350_ASIC_BOARD
Ë|| deföed(
RT6855_ASIC_BOARD
Ë|| deföed (
MT7620_ASIC_BOARD
Ë|| deföed(
MT7628_ASIC_BOARD
)

1414 
	`c⁄fig_usb_ehciohci
();

1415 
	`c⁄fig_usb_ehciohci
();

1416 #ñi‡
	`deföed
(
MT7621_ASIC_BOARD
)

1417 
	`c⁄fig_usb_mtk_xhci
();

1418 
	`c⁄fig_usb_mtk_xhci
();

1420 #i‡
	`deföed
 (
MT7620_ASIC_BOARD
Ë|| deföed (
MT7628_ASIC_BOARD
)

1421 
	`dißbÀ_pcõ
();

1422 
	`dißbÀ_pcõ
();

1425 
u32
 
ªg
 = 
	`RALINK_REG
(
RT2880_RSTSTAT_REG
);

1426 if(
ªg
 & 
RT2880_WDRST
 ){

1427 
	`¥ötf
("***********************\n");

1428 
	`¥ötf
("Watchdog Reset Occurred\n");

1429 
	`¥ötf
("***********************\n");

1430 
	`RALINK_REG
(
RT2880_RSTSTAT_REG
)|=
RT2880_WDRST
;

1431 
	`RALINK_REG
(
RT2880_RSTSTAT_REG
)&=~
RT2880_WDRST
;

1432 
	`åiggî_hw_ª£t
();

1433 }if(
ªg
 & 
RT2880_SWSYSRST
){

1434 
	`¥ötf
("******************************\n");

1435 
	`¥ötf
("Software System Reset Occurred\n");

1436 
	`¥ötf
("******************************\n");

1437 
	`RALINK_REG
(
RT2880_RSTSTAT_REG
)|=
RT2880_SWSYSRST
;

1438 
	`RALINK_REG
(
RT2880_RSTSTAT_REG
)&=~
RT2880_SWSYSRST
;

1439 
	`åiggî_hw_ª£t
();

1440 }i‡(
ªg
 & 
RT2880_SWCPURST
){

1441 
	`¥ötf
("***************************\n");

1442 
	`¥ötf
("Software CPU Reset Occurred\n");

1443 
	`¥ötf
("***************************\n");

1444 
	`RALINK_REG
(
RT2880_RSTSTAT_REG
)|=
RT2880_SWCPURST
;

1445 
	`RALINK_REG
(
RT2880_RSTSTAT_REG
)&=~
RT2880_SWCPURST
;

1446 
	`åiggî_hw_ª£t
();

1449 #ifde‡
DEBUG


1450 
	`debug
 ("NowÑu¬ög i¿RAM - U-BoŸát: %08lx\n", 
de°_addr
);

1452 
gd
->
ªloc_off
 = 
de°_addr
 - 
CFG_MONITOR_BASE
;

1454 
m⁄ô‹_Êash_Àn
 = (
ul⁄g
)&
uboŸ_íd_d©a
 - 
de°_addr
;

1455 #ifde‡
DEBUG


1456 
	`debug
("\¿m⁄ô‹_Êash_À¿=%d \n",
m⁄ô‹_Êash_Àn
);

1461 
cmdç
 = &
__u_boŸ_cmd_°¨t
; cmdç !&
__u_boŸ_cmd_íd
; cmdtp++) {

1462 
ul⁄g
 
addr
;

1464 
addr
 = (
ul⁄g
Ë(
cmdç
->
cmd
Ë+ 
gd
->
ªloc_off
;

1465 #ifde‡
DEBUG


1466 
	`¥ötf
 ("Command \"%s\": 0x%08lx => 0x%08lx\n",

1467 
cmdç
->
«me
, (
ul⁄g
Ë(cmdç->
cmd
), 
addr
);

1469 
cmdç
->
cmd
 =

1470 ((*)(
cmd_tbl_s
 *, , , *[]))
addr
;

1472 
addr
 = (
ul⁄g
)(
cmdç
->
«me
Ë+ 
gd
->
ªloc_off
;

1473 
cmdç
->
«me
 = (*)
addr
;

1475 i‡(
cmdç
->
ußge
) {

1476 
addr
 = (
ul⁄g
)(
cmdç
->
ußge
Ë+ 
gd
->
ªloc_off
;

1477 
cmdç
->
ußge
 = (*)
addr
;

1479 #ifdef 
CFG_LONGHELP


1480 i‡(
cmdç
->
hñp
) {

1481 
addr
 = (
ul⁄g
)(
cmdç
->
hñp
Ë+ 
gd
->
ªloc_off
;

1482 
cmdç
->
hñp
 = (*)
addr
;

1488 #i‚de‡
CFG_ENV_IS_NOWHERE


1489 
ív_«me_•ec
 +
gd
->
ªloc_off
;

1492 
bd
 = 
gd
->bd;

1493 #i‡
	`deföed
 (
CFG_ENV_IS_IN_NAND
)

1494 #i‡
	`deföed
 (
MT7621_ASIC_BOARD
Ë|| deföed (
MT7621_FPGA_BOARD
)

1495 i‡((
size
 = 
	`mtk_«nd_¥obe
()Ë!(
ul⁄g
)0) {

1496 
	`¥ötf
("nandÖrobe fail\n");

1500 i‡((
size
 = 
	`ø«nd_öô
()Ë=(
ul⁄g
)-1) {

1501 
	`¥ötf
("ra_nand_init fail\n");

1505 
bd
->
bi_Êash°¨t
 = 0;

1506 
bd
->
bi_Êashsize
 = 
size
;

1507 
bd
->
bi_Êashoff£t
 = 0;

1508 #ñi‡
	`deföed
 (
CFG_ENV_IS_IN_SPI
)

1509 i‡((
size
 = 
	`ø•i_öô
()Ë=(
ul⁄g
)-1) {

1510 
	`¥ötf
("ra_spi_init fail\n");

1513 
bd
->
bi_Êash°¨t
 = 0;

1514 
bd
->
bi_Êashsize
 = 
size
;

1515 
bd
->
bi_Êashoff£t
 = 0;

1518 
size
 = 
	`Êash_öô
();

1520 
bd
->
bi_Êash°¨t
 = 
CFG_FLASH_BASE
;

1521 
bd
->
bi_Êashsize
 = 
size
;

1522 #i‡
CFG_MONITOR_BASE
 =
CFG_FLASH_BASE


1523 
bd
->
bi_Êashoff£t
 = 
m⁄ô‹_Êash_Àn
;

1525 
bd
->
bi_Êashoff£t
 = 0;

1529 #i‡
	`deföed
(
MT7628_ASIC_BOARD
)

1532 
ì35
, 
ì36
;

1533 
	`ø•i_ªad
((*)&
ì35
, 
CFG_FACTORY_ADDR
-
CFG_FLASH_BASE
+0x35, 1);

1534 
	`ø•i_ªad
((*)&
ì36
, 
CFG_FACTORY_ADDR
-
CFG_FLASH_BASE
+0x36, 1);

1535 i‡((
ì35
 & 0x2Ë|| ((
ì36
 & 0xc) == 0xc))

1537 
	`RALINK_REG
(
RALINK_SYSCTL_BASE
+0x60)|= ((0x3<<24)|(0x3 << 6));

1542 
	`RALINK_REG
(
RALINK_SYSCTL_BASE
+0x38)|= 0x200;

1545 
	`mem_mÆloc_öô
();

1546 
	`mÆloc_bö_ªloc
();

1548 #i‡
	`deföed
 (
CFG_ENV_IS_IN_NAND
)

1549 
	`«nd_ív_öô
();

1550 #ñi‡
	`deföed
 (
CFG_ENV_IS_IN_SPI
)

1551 
	`•i_ív_öô
();

1555 #i‡
	`deföed
(
RT3052_ASIC_BOARD
)

1556 
	`adju°_‰equícy
();

1559 #i‡
	`deföed
 (
RT3352_ASIC_BOARD
)

1560 
	`adju°_¸y°Æ_cúcuô
();

1561 
	`adju°_¸y°Æ_cúcuô
();

1563 #i‡
	`deföed
 (
RT3352_ASIC_BOARD
Ë|| deföed (
RT3883_ASIC_BOARD
)

1564 
	`adju°_rf_r17
();

1565 
	`adju°_rf_r17
();

1569 
	`ív_ªloˇã
();

1572 
s
 = 
	`gëív
 ("ethaddr");

1573 
i
 = 0; i < 6; ++i) {

1574 
bd
->
bi_íëaddr
[
i
] = 
s
 ? 
	`sim∂e_°πoul
 (s, &
e
, 16) : 0;

1575 i‡(
s
)

1576 
s
 = (*
e
) ?É + 1 :É;

1580 
bd
->
bi_ù_addr
 = 
	`gëív_IPaddr
("ipaddr");

1582 #i‡
	`deföed
(
CONFIG_PCI
)

1586 
	`puts
("\n DoÖci configuration !!\n");

1587 
	`pci_öô
();

1592 
	`devi˚s_öô
 ();

1594 
	`jum±abÀ_öô
 ();

1597 
	`c⁄sﬁe_öô_r
 ();

1600 i‡((
s
 = 
	`gëív
 ("lﬂdaddr")Ë!
NULL
) {

1601 
lﬂd_addr
 = 
	`sim∂e_°πoul
 (
s
, 
NULL
, 16);

1603 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_NET
)

1604 i‡((
s
 = 
	`gëív
 ("boŸfûe")Ë!
NULL
) {

1605 
	`c›y_fûíame
 (
BoŸFûe
, 
s
,  (BootFile));

1609 #i‡
	`deföed
(
CONFIG_MISC_INIT_R
)

1611 
	`misc_öô_r
 ();

1615 #i‡
	`deföed
(
RT3352_FPGA_BOARD
Ë|| deföed (
RT3352_ASIC_BOARD
) || \

1616 
	`deföed
(
RT3883_FPGA_BOARD
Ë|| deföed (
RT3883_ASIC_BOARD
) || \

1617 
	`deföed
(
RT5350_FPGA_BOARD
Ë|| deföed (
RT5350_ASIC_BOARD
)

1619 #i‡
	`deföed
(
CFG_ENV_IS_IN_SPI
Ë|| deföed (
CFG_ENV_IS_IN_NAND
)

1621 
ªg
, 
boŸ_‰om_ì¥om
=0;

1622 
ªg
 = 
	`RALINK_REG
(
RT2880_SYSCFG_REG
);

1624 
	`¥ötf
("============================================ \n");

1625 
	`¥ötf
("RÆök UBoŸ Vîsi⁄: %s\n", 
RALINK_LOCAL_VERSION
);

1626 
	`¥ötf
("-------------------------------------------- \n");

1627 
	`¥ötf
("%†%†%s\n",
CHIP_TYPE
, 
CHIP_VERSION
, 
GMAC_MODE
);

1628 
boŸ_‰om_ì¥om
 = ((
ªg
>>18) & 0x01);

1629 if(
boŸ_‰om_ì¥om
){

1630 
	`¥ötf
("DRAM_CONF_FROM: EEPROM \n");

1631 
	`¥ötf
("DRAM_SIZE: %d Mbô†%s\n", 
DRAM_COMPONENT
, 
DDR_INFO
);

1632 
	`¥ötf
("DRAM_TOTAL_WIDTH: %d bôs\n", 
DRAM_BUS
 );

1633 
	`¥ötf
("TOTAL_MEMORY_SIZE: %d MByãs\n", 
DRAM_SIZE
);

1635 
døm_width
, 
is_ddr2
, 
døm_tŸÆ_width
, 
tŸÆ_size
;

1636 
_x
 = ((
ªg
 >> 12) & 0x7);

1638 #i‡
	`deföed
(
RT3352_FPGA_BOARD
Ë|| deföed (
RT3352_ASIC_BOARD
)

1639 
døm_size
 = (
_x
 == 6)? 2048 : (_x == 5)? 1024 : (_x == 4)? 512 : (_x == 3)? 256 : (_x == 2)? 128 : \

1640 (
_x
 == 1)? 64 : (_x == 0)? 16 : 0;

1641 #ñi‡
	`deföed
 (
RT5350_FPGA_BOARD
Ë|| deföed (
RT5350_ASIC_BOARD
)

1642 
døm_size
 = (
_x
 == 4)? 512 : (_x == 3)? 256 : (_x == 2)? 128 : \

1643 (
_x
 == 1)? 64 : (_x == 0)? 16 : 0;

1644 #ñi‡
	`deföed
 (
RT3883_FPGA_BOARD
Ë|| deföed (
RT3883_ASIC_BOARD
)

1645 
døm_size
 = (
_x
 == 6)? 2048 : (_x == 5)? 1024 : (_x == 4)? 512 : \

1646 (
_x
 == 3)? 256 : (_x == 2)? 128 : (_x == 1)? 64 : \

1647 (
_x
 == 0)? 16 : 0;

1649 if(((
ªg
 >> 15) & 0x1)){

1650 
døm_tŸÆ_width
 = 32;

1652 
døm_tŸÆ_width
 = 16;

1655 
is_ddr2
 = ((
ªg
 >> 17) & 0x1);

1656 if(
is_ddr2
){

1657 if((
ªg
 >> 10) & 0x1){

1658 
døm_width
 = 16;

1660 
døm_width
 = 8;

1663 if((
ªg
 >> 10) & 0x1){

1664 
døm_width
 = 32;

1666 
døm_width
 = 16;

1669 
tŸÆ_size
 = (
døm_size
*(
døm_tŸÆ_width
/
døm_width
))/8;

1671 
	`¥ötf
("DRAM_CONF_FROM: %†\n", 
boŸ_‰om_ì¥om
 ? "EEPROM":"Boot-Strapping");

1672 
	`¥ötf
("DRAM_TYPE: %†\n", 
is_ddr2
 ? "DDR2":"SDRAM");

1673 
	`¥ötf
("DRAM_SIZE: %d Mbôs\n", 
døm_size
);

1674 
	`¥ötf
("DRAM_WIDTH: %d bôs\n", 
døm_width
);

1675 
	`¥ötf
("DRAM_TOTAL_WIDTH: %d bôs\n", 
døm_tŸÆ_width
 );

1676 
	`¥ötf
("TOTAL_MEMORY_SIZE: %d MByãs\n", 
tŸÆ_size
);

1678 
	`¥ötf
("%s\n", 
FLASH_MSG
);

1679 
	`¥ötf
("%s\n", "D©e:" 
__DATE__
 " Time:" 
__TIME__
 );

1680 
	`¥ötf
("============================================ \n");

1683 
	`SHOW_VER_STR
();

1687 #ñi‡(
	`deföed
 (
RT6855_ASIC_BOARD
Ë|| deföed (
RT6855_FPGA_BOARD
) || \

1688 
	`deföed
 (
RT6855A_ASIC_BOARD
Ë|| deföed (
RT6855A_FPGA_BOARD
) || \

1689 
	`deföed
 (
MT7620_ASIC_BOARD
Ë|| deföed (
MT7620_FPGA_BOARD
) || \

1690 
	`deföed
 (
MT7628_ASIC_BOARD
Ë|| deföed (
MT7628_FPGA_BOARD
)Ë&& deföed (
UBOOT_RAM
)

1692 
chù_mode
, 
døm_comp
, 
døm_bus
, 
is_ddr1
, 
is_ddr2
, 
d©a
, 
cfg0
, 
cfg1
, 
size
=0;

1693 
døm_ty≥_bô_off£t
 = 0;

1694 #i‡
	`deföed
 (
RT6855A_ASIC_BOARD
Ë|| deföed(
RT6855A_FPGA_BOARD
)

1695 
d©a
 = 
	`RALINK_REG
(
RALINK_SYSCTL_BASE
+0x8c);

1696 
chù_mode
 = ((
d©a
>>28) & 0x3)|(((data>>22) & 0x3)<<2);

1697 
døm_ty≥_bô_off£t
 = 24;

1699 
d©a
 = 
	`RALINK_REG
(
RALINK_SYSCTL_BASE
+0x10);

1700 
chù_mode
 = (
d©a
&0x0F);

1701 
døm_ty≥_bô_off£t
 = 4;

1703 (
d©a
>>
døm_ty≥_bô_off£t
)&0x3)

1707 
is_ddr2
 = 
is_ddr1
 = 0;

1709 #i‡
	`deföed
 (
RT6855A_ASIC_BOARD
Ë|| deföed(
RT6855A_FPGA_BOARD
)

1713 #i‡
	`deföed
 (
MT7620_ASIC_BOARD
Ë|| deföed (
MT7620_FPGA_BOARD
Ë|| deföed (
MT7628_ASIC_BOARD
Ë|| deföed (
MT7628_FPGA_BOARD
)

1714 
is_ddr1
 = 1;

1715 
is_ddr2
 = 0;

1717 
is_ddr2
 = 
is_ddr1
 = 0;

1720 #i‡
	`deföed
 (
RT6855A_ASIC_BOARD
Ë|| deföed(
RT6855A_FPGA_BOARD
)

1725 
is_ddr2
 = 0;

1726 
is_ddr1
 = 1;

1728 #i‡
	`deföed
 (
RT6855A_ASIC_BOARD
Ë|| deföed(
RT6855A_FPGA_BOARD
)

1733 
is_ddr2
 = 1;

1734 
is_ddr1
 = 0;

1738 (
d©a
>>
døm_ty≥_bô_off£t
)&0x3)

1741 #i‡
	`deföed
 (
MT7620_ASIC_BOARD
Ë|| deföed (
MT7620_FPGA_BOARD
Ë|| deföed (
MT7628_ASIC_BOARD
Ë|| deföed (
MT7628_FPGA_BOARD
) || \

1742 
	`deföed
 (
RT6855A_ASIC_BOARD
Ë|| deföed(
RT6855A_FPGA_BOARD
)

1746 
cfg0
 = 
	`RALINK_REG
(
RALINK_MEMCTRL_BASE
+0x0);

1747 
cfg1
 = 
	`RALINK_REG
(
RALINK_MEMCTRL_BASE
+0x4);

1748 
d©a
 = 
cfg1
;

1750 
døm_comp
 = 1<<(2+(((
d©a
>>16)&0x3)+11)+(((data>>20)&0x3)+8)+1+3-20);

1751 
døm_bus
 = ((
d©a
>>24)&0x1) ? 32 : 16;

1752 
size
 = 1<<(2 +(((
d©a
>>16)&0x3)+11)+(((data>>20)&0x3)+8)+1-20);

1756 #i‡
	`deföed
 (
MT7620_ASIC_BOARD
Ë|| deföed (
MT7620_FPGA_BOARD
Ë|| deföed (
MT7628_ASIC_BOARD
Ë|| deföed (
MT7628_FPGA_BOARD
) || \

1757 
	`deföed
 (
RT6855A_ASIC_BOARD
Ë|| deföed(
RT6855A_FPGA_BOARD
)

1760 
cfg0
 = 
	`RALINK_REG
(
RALINK_MEMCTRL_BASE
+0x40);

1761 
cfg1
 = 
	`RALINK_REG
(
RALINK_MEMCTRL_BASE
+0x44);

1762 
d©a
 = 
cfg1
;

1763 
døm_comp
 = 1<<(((
d©a
>>18)&0x7)+5);

1764 
døm_bus
 = 1<<(((
d©a
>>12)&0x3)+2);

1765 if(((
d©a
>>16)&0x3) < ((data>>12)&0x3))

1767 
size
 = 1<<(((
d©a
>>18)&0x7) + 22 + 1-20);

1771 
size
 = 1<<(((
d©a
>>18)&0x7) + 22-20);

1775 #i‡
	`deföed
 (
RT6855A_ASIC_BOARD
Ë|| deföed(
RT6855A_FPGA_BOARD
)

1776 i‡((((
	`RALINK_REG
(
RALINK_SYSCTL_BASE
+0x8c)>>30)&0x1)==0Ë&& ((
chù_mode
==2)||(chip_mode==3)))

1778 #i‡
	`deföed
(
ON_BOARD_DDR2
)

1779 
is_ddr2
 = 1;

1780 
is_ddr1
 = 0;

1781 #ñi‡
	`deföed
(
ON_BOARD_DDR1
)

1782 
is_ddr2
 = 0;

1783 
is_ddr1
 = 1;

1785 
is_ddr2
 = 
is_ddr1
 = 0;

1787 
døm_comp
 = 
DRAM_COMPONENT
;

1788 
døm_bus
 = 
DRAM_BUS
;

1789 
size
 = 
DRAM_SIZE
;

1792 
	`¥ötf
("============================================ \n");

1793 
	`¥ötf
("RÆök UBoŸ Vîsi⁄: %s\n", 
RALINK_LOCAL_VERSION
);

1794 
	`¥ötf
("-------------------------------------------- \n");

1795 
	`¥ötf
("%†%†%s\n",
CHIP_TYPE
, 
CHIP_VERSION
, 
GMAC_MODE
);

1796 #i‡
	`deföed
 (
RT6855A_ASIC_BOARD
Ë|| deföed (
RT6855A_FPGA_BOARD
)

1797 #i‡
	`deföed
 (
RT6855A_FPGA_BOARD
)

1798 if((!
is_ddr2
)&&(!
is_ddr1
))

1800 
	`¥ötf
("[SDR_CFG0=0x%08X, SDR_CFG1=0x%08X]\n", 
	`RALINK_REG
(
RALINK_MEMCTRL_BASE
+0x0),\

1801 
	`RALINK_REG
(
RALINK_MEMCTRL_BASE
+0x4));

1805 
	`¥ötf
("[DDR_CFG0 =0x%08X, DDR_CFG1 =0x%08X]\n", 
	`RALINK_REG
(
RALINK_MEMCTRL_BASE
+0x40),\

1806 
	`RALINK_REG
(
RALINK_MEMCTRL_BASE
+0x44));

1807 
	`¥ötf
("[DDR_CFG2 =0x%08X, DDR_CFG3 =0x%08X]\n", 
	`RALINK_REG
(
RALINK_MEMCTRL_BASE
+0x48),\

1808 
	`RALINK_REG
(
RALINK_MEMCTRL_BASE
+0x4C));

1809 
	`¥ötf
("[DDR_CFG4 =0x%08X, DDR_CFG10=0x%08X]\n", 
	`RALINK_REG
(
RALINK_MEMCTRL_BASE
+0x50),\

1810 
	`RALINK_REG
(
RALINK_MEMCTRL_BASE
+0x68));

1813 
	`¥ötf
("DRAM_CONF_FROM: %†\n", ((
	`RALINK_REG
(
RALINK_SYSCTL_BASE
+0x8c)>>30)&0x1) ? \

1814 "From SPI/NAND": (((
chù_mode
==2)||(chip_mode==3)) ? "From Uboot" : "Boot-strap"));

1815 #ñi‡
	`deföed
 (
MT7620_ASIC_BOARD
Ë|| deföed(
MT7620_FPGA_BOARD
Ë|| deföed (
MT7628_ASIC_BOARD
Ë|| deföed(
MT7628_FPGA_BOARD
)

1816 
	`¥ötf
("DRAM_CONF_FROM: %†\n", (((
	`RALINK_REG
(
RALINK_SYSCTL_BASE
+0x10)>>8)&0x1)==0) ? "From SPI/NAND":

1817 (((
chù_mode
==2)||(chip_mode==3)) ? "From Uboot" : "Auto-detection"));

1819 
	`¥ötf
("DRAM_CONF_FROM: %†\n", ((
	`RALINK_REG
(
RALINK_SYSCTL_BASE
+0x10)>>7)&0x1) ? "From SPI/NAND":

1820 (((
chù_mode
==2)||(chip_mode==3)) ? "From Uboot" : "Auto-detection"));

1822 
	`¥ötf
("DRAM_TYPE: %†\n", 
is_ddr2
 ? "DDR2": (
is_ddr1
 ? "DDR1" : "SDRAM"));

1823 
	`¥ötf
("DRAM comp⁄ít: %d Mbôs\n", 
døm_comp
);

1824 
	`¥ötf
("DRAM bus: %d bô\n", 
døm_bus
);

1825 
	`¥ötf
("TŸÆ mem‹y: %d MByãs\n", 
size
);

1826 
	`¥ötf
("%s\n", 
FLASH_MSG
);

1827 
	`¥ötf
("%s\n", "D©e:" 
__DATE__
 " Time:" 
__TIME__
 );

1828 
	`¥ötf
("============================================ \n");

1830 #ñi‡(
	`deföed
 (
MT7621_ASIC_BOARD
Ë|| deföed (
MT7621_FPGA_BOARD
))

1832 
	`¥ötf
("============================================ \n");

1833 
	`¥ötf
("RÆök UBoŸ Vîsi⁄: %s\n", 
RALINK_LOCAL_VERSION
);

1834 
	`¥ötf
("-------------------------------------------- \n");

1835 #ifde‡
RALINK_DUAL_CORE_FUN


1836 
	`¥ötf
("%†%†%†%s\n", 
CHIP_TYPE
, 
	`RALINK_REG
(
RT2880_CHIP_REV_ID_REG
)>>16&0x1 ? "MT7621A" : "MT7621N", "DuÆC‹e", 
GMAC_MODE
);

1838 if(
	`RALINK_REG
(
RT2880_CHIP_REV_ID_REG
)>>17&0x1) {

1839 
	`¥ötf
("%†%†%†%s\n", 
CHIP_TYPE
, 
	`RALINK_REG
(
RT2880_CHIP_REV_ID_REG
)>>16&0x1 ? "MT7621A" : "MT7621N", "SögÀC‹e", 
GMAC_MODE
);

1841 
	`¥ötf
("%†%s%†%s\n", 
CHIP_TYPE
, 
	`RALINK_REG
(
RT2880_CHIP_REV_ID_REG
)>>16&0x1 ? "MT7621A" : "MT7621N", "S", 
GMAC_MODE
);

1844 
	`¥ötf
("DRAM_CONF_FROM: %†\n", 
	`RALINK_REG
(
RT2880_SYSCFG_REG
)>>9&0x1 ? "Auto-Detection" : "EEPROM");

1845 
	`¥ötf
("DRAM_TYPE: %†\n", 
	`RALINK_REG
(
RT2880_SYSCFG_REG
)>>4&0x1 ? "DDR2": "DDR3");

1846 
	`¥ötf
("DRAM bus: %d bô\n", 
DRAM_BUS
);

1847 
	`¥ötf
("Xè»Mode=%d OCP R©io=%s\n", 
	`RALINK_REG
(
RT2880_SYSCFG_REG
)>>6&0x7, RALINK_REG(RT2880_SYSCFG_REG)>>5&0x1 ? "1/4":"1/3");

1848 
	`¥ötf
("%s\n", 
FLASH_MSG
);

1849 
	`¥ötf
("%s\n", "D©e:" 
__DATE__
 " Time:" 
__TIME__
 );

1850 
	`¥ötf
("============================================ \n");

1853 
	`SHOW_VER_STR
();

1858 #i‡
	`deföed
 (
RT2880_FPGA_BOARD
Ë|| deföed (
RT2880_ASIC_BOARD
)

1859 
vÆue
 = 
	`ªad_32bô_˝0_ªgi°î_wôh_£À˘1
(
CP0_CONFIG
);

1861 
kk
 = 
vÆue
 >> 7;

1862 
kk
 = kk & 0x7;

1864 if(
kk
)

1866 
	`debug
(" D-CACHE sëÅÿ%d way \n",
kk
 + 1);

1870 
	`debug
("\n D-CACHE Direct mapped\n");

1873 
kk
 = 
vÆue
 >> 16;

1874 
kk
 = kk & 0x7;

1877 if(
kk
)

1879 
	`debug
(" I-CACHE sëÅÿ%d way \n",
kk
 + 1);

1883 
	`debug
("\n I-CACHE Direct mapped\n");

1887 
c⁄fig1
 = 
	`ªad_32bô_˝0_ªgi°î_wôh_£À˘1
(
CP0_CONFIG
);

1889 i‡((
lsize
 = ((
c⁄fig1
 >> 19) & 7)))

1890 
iˇche_löesz
 = 2 << 
lsize
;

1892 
iˇche_löesz
 = 
lsize
;

1893 
iˇche_£ts
 = 64 << ((
c⁄fig1
 >> 22) & 7);

1894 
iˇche_ways
 = 1 + ((
c⁄fig1
 >> 16) & 7);

1896 
iˇche_size
 = 
iˇche_£ts
 *

1897 
iˇche_ways
 *

1898 
iˇche_löesz
;

1900 
	`¥ötf
("icache: sets:%d, ways:%d,Üinesz:%d ,total:%d\n",

1901 
iˇche_£ts
, 
iˇche_ways
, 
iˇche_löesz
, 
iˇche_size
);

1907 i‡((
lsize
 = ((
c⁄fig1
 >> 10) & 7)))

1908 
dˇche_löesz
 = 2 << 
lsize
;

1910 
dˇche_löesz
 = 
lsize
;

1911 
dˇche_£ts
 = 64 << ((
c⁄fig1
 >> 13) & 7);

1912 
dˇche_ways
 = 1 + ((
c⁄fig1
 >> 7) & 7);

1914 
dˇche_size
 = 
dˇche_£ts
 *

1915 
dˇche_ways
 *

1916 
dˇche_löesz
;

1918 
	`¥ötf
("dcache: sets:%d, ways:%d,Üinesz:%d ,total:%d \n",

1919 
dˇche_£ts
, 
dˇche_ways
, 
dˇche_löesz
, 
dˇche_size
);

1923 
	`debug
("\¿##### ThêCPU fªq = %d MHZ #### \n",
mùs_˝u_„q
/1000/1000);

1935 
	`debug
("É°im©êmem‹y sizê=%d Mbyãs\n",
gd
->
øm_size
 /1024/1024 );

1937 #i‡
	`deföed
 (
RT3052_ASIC_BOARD
Ë|| deföed (
RT3052_FPGA_BOARD
) || \

1938 
	`deföed
 (
RT3352_ASIC_BOARD
Ë|| deföed (
RT3352_FPGA_BOARD
) || \

1939 
	`deföed
 (
RT5350_ASIC_BOARD
Ë|| deföed (
RT5350_FPGA_BOARD
) || \

1940 
	`deföed
 (
MT7628_ASIC_BOARD
Ë|| deföed (
MT7628_FPGA_BOARD
)

1941 
	`π305x_esw_öô
();

1942 #ñi‡
	`deföed
 (
RT6855_ASIC_BOARD
Ë|| deföed (
RT6855_FPGA_BOARD
) || \

1943 
	`deföed
 (
MT7620_ASIC_BOARD
Ë|| deföed (
MT7620_FPGA_BOARD
)

1944 
	`π_gsw_öô
();

1945 #ñi‡
	`deföed
 (
RT6855A_ASIC_BOARD
Ë|| deföed (
RT6855A_FPGA_BOARD
)

1946 #ifde‡
FPGA_BOARD


1947 
	`π6855A_ëh_gpio_ª£t
();

1949 
	`π6855A_gsw_öô
();

1950 #ñi‡
	`deföed
 (
MT7621_ASIC_BOARD
Ë|| deföed (
MT7621_FPGA_BOARD
)

1952 
	`RALINK_REG
(0xbe000060) &= ~(1 << 12);

1953 
	`RALINK_REG
(0xbe000060) &= ~(1 << 14);

1954 
	`RALINK_REG
(0xbe000060) &= ~(1 << 15);

1955 #i‡
	`deföed
 (
MT7621_USE_GE2
Ë&& deföed (
GE_RGMII_FORCE_1000
)

1956 
	`£tup_exã∫Æ_gsw
();

1957 #ñi‡
	`deföed
 (
MAC_TO_MT7530_MODE
Ë|| deföed (
GE_RGMII_INTERNAL_P0_AN
Ë|| deföed (
GE_RGMII_INTERNAL_P4_AN
)

1958 
	`£tup_öã∫Æ_gsw
();

1960 #ñi‡
	`deföed
 (
RT3883_ASIC_BOARD
Ë&& deföed (
MAC_TO_MT7530_MODE
)

1961 
	`π3883_gsw_öô
();

1963 
	`LANWANP¨tôi⁄
();

1965 #ifde‡
DUAL_IMAGE_SUPPORT


1966 
	`check_image_vÆid©i⁄
();

1970 * 
s
;

1971 
s
 = 
	`gëív
 ("bootdelay");

1972 
timî1
 = 
s
 ? ()
	`sim∂e_°πﬁ
(s, 
NULL
, 10Ë: 
CONFIG_BOOTDELAY
;

1975 
	`O≥øti⁄Sñe˘
();

1976 
timî1
 > 0) {

1977 --
timî1
;

1979 
i
=0; i<100; ++i) {

1980 i‡((
my_tmp
 = 
	`t°c
()) != 0) {

1981 
timî1
 = 0;

1982 
BoŸTy≥
 = 
	`gëc
();

1983 i‡((
BoŸTy≥
 < '0' || BootType > '5') && (BootType != '7') && (BootType != '8')

1984 && (
BoŸTy≥
 !'9'Ë&& (BoŸTy≥ !
SEL_LOAD_FIRMWARE_WRITE_FLASH
))

1985 
BoŸTy≥
 = '3';

1986 
	`¥ötf
("\n\rYou choo£d %c\n\n", 
BoŸTy≥
);

1989 
	`udñay
 (10000);

1991 
	`¥ötf
 ("\b\b\b%2d ", 
timî1
);

1993 
	`putc
 ('\n');

1994 if(
BoŸTy≥
 == '3') {

1995 *
¨gv
[2];

1996 
	`•rötf
(
addr_°r
, "0x%X", 
CFG_KERN_ADDR
);

1997 
¨gv
[1] = &
addr_°r
[0];

1998 
	`¥ötf
(" \n3: System Boot system code via Flash.\n");

1999 
	`do_boŸm
(
cmdç
, 0, 2, 
¨gv
);

2002 *
¨gv
[4];

2003 
¨gc
= 3;

2005 
¨gv
[2] = &
fûe_«me_•a˚
[0];

2006 
	`mem£t
(
fûe_«me_•a˚
,0,
ARGV_LEN
);

2008 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_NET
)

2009 
	`ëh_öôülize
(
gd
->
bd
);

2012 
BoŸTy≥
) {

2014 
	`¥ötf
(" \n%d: Sy°em Lﬂd LöuxÅÿSDRAM vü TFTP. \n", 
SEL_LOAD_LINUX_SDRAM
);

2015 
	`t·p_c⁄fig
(
SEL_LOAD_LINUX_SDRAM
, 
¨gv
);

2016 
¨gc
= 3;

2017 
	`£ãnv
("autostart", "yes");

2018 
	`do_t·pb
(
cmdç
, 0, 
¨gc
, 
¨gv
);

2022 
	`¥ötf
(" \n%d: Sy°em Lﬂd Löux Kî√»thí wrôêtÿFœsh vü TFTP. \n", 
SEL_LOAD_LINUX_WRITE_FLASH
);

2023 
	`¥ötf
(" Warning!! Erase Linux in FlashÅhen burnÇew one. Are you sure?(Y/N)\n");

2024 
c⁄fúm
 = 
	`gëc
();

2025 i‡(
c⁄fúm
 != 'y' && confirm != 'Y') {

2026 
	`¥ötf
(" OperationÅerminated\n");

2029 
	`t·p_c⁄fig
(
SEL_LOAD_LINUX_WRITE_FLASH
, 
¨gv
);

2030 
¨gc
= 3;

2031 
	`£ãnv
("autostart", "no");

2032 
	`do_t·pb
(
cmdç
, 0, 
¨gc
, 
¨gv
);

2034 #i‡
	`deföed
 (
CFG_ENV_IS_IN_NAND
)

2036 
lﬂd_addªss
 = 
	`sim∂e_°πoul
(
¨gv
[1], 
NULL
, 16);

2037 
	`ø«nd_îa£_wrôe
((
u8
 *)
lﬂd_addªss
, 
CFG_KERN_ADDR
-
CFG_FLASH_BASE
, 
NëBoŸFûeX„rSize
);

2039 #ñi‡
	`deföed
 (
CFG_ENV_IS_IN_SPI
)

2041 
	`¥ötf
("define CFG_ENV_IS_IN_SPI!\n");

2042 
lﬂd_addªss
 = 
	`sim∂e_°πoul
(
¨gv
[1], 
NULL
, 16);

2043 
	`ø•i_îa£_wrôe
((
u8
 *)
lﬂd_addªss
, 
CFG_KERN_ADDR
-
CFG_FLASH_BASE
, 
NëBoŸFûeX„rSize
);

2046 #i‡(
	`deföed
 (
ON_BOARD_8M_FLASH_COMPONENT
Ë|| deföed (
ON_BOARD_16M_FLASH_COMPONENT
)Ë&& (deföed (
RT2880_ASIC_BOARD
Ë|| deföed (
RT2880_FPGA_BOARD
Ë|| deföed (
RT3052_MP1
))

2048 i‡(
NëBoŸFûeX„rSize
 <(0x400000 - (
CFG_BOOTLOADER_SIZE
 + 
CFG_CONFIG_SIZE
 + 
CFG_FACTORY_SIZE
))) {

2049 
e_íd
 = 
CFG_KERN_ADDR
 + 
NëBoŸFûeX„rSize
;

2050 i‡(0 !
	`gë_addr_bound¨y
(&
e_íd
))

2052 
	`¥ötf
("EraseÜinux kernel block !!\n");

2053 
	`¥ötf
("From 0x%X Tÿ0x%X\n", 
CFG_KERN_ADDR
, 
e_íd
);

2054 
	`Êash_£˘_îa£
(
CFG_KERN_ADDR
, 
e_íd
);

2056 i‡(
NëBoŸFûeX„rSize
 <
CFG_KERN_SIZE
) {

2057 
e_íd
 = 
PHYS_FLASH_2
 + 
NëBoŸFûeX„rSize
 - (0x400000 - (
CFG_BOOTLOADER_SIZE
 + 
CFG_CONFIG_SIZE
 + 
CFG_FACTORY_SIZE
));

2058 i‡(0 !
	`gë_addr_bound¨y
(&
e_íd
))

2060 
	`¥ötf
("EraseÜinux kernel block !!\n");

2061 
	`¥ötf
("From 0x%X Tÿ0x%X\n", 
CFG_KERN_ADDR
, 
CFG_FLASH_BASE
+0x3FFFFF);

2062 
	`Êash_£˘_îa£
(
CFG_KERN_ADDR
, 
CFG_FLASH_BASE
+0x3FFFFF);

2063 
	`¥ötf
("EraseÜinux file system block !!\n");

2064 
	`¥ötf
("From 0x%X Tÿ0x%X\n", 
PHYS_FLASH_2
, 
e_íd
);

2065 
	`Êash_£˘_îa£
(
PHYS_FLASH_2
, 
e_íd
);

2068 i‡(
NëBoŸFûeX„rSize
 <(
bd
->
bi_Êashsize
 - (
CFG_BOOTLOADER_SIZE
 + 
CFG_CONFIG_SIZE
 + 
CFG_FACTORY_SIZE
))) {

2069 
e_íd
 = 
CFG_KERN_ADDR
 + 
NëBoŸFûeX„rSize
;

2070 i‡(0 !
	`gë_addr_bound¨y
(&
e_íd
))

2072 
	`¥ötf
("EraseÜinux kernel block !!\n");

2073 
	`¥ötf
("From 0x%X Tÿ0x%X\n", 
CFG_KERN_ADDR
, 
e_íd
);

2074 
	`Êash_£˘_îa£
(
CFG_KERN_ADDR
, 
e_íd
);

2078 
	`¥ötf
("***********************************\n");

2079 
	`¥ötf
("The Linux Image size isÅoo big !! \n");

2080 
	`¥ötf
("***********************************\n");

2084 #ifde‡
DUAL_IMAGE_SUPPORT


2086 
	`£ãnv
("Image1Stable", "1");

2087 
	`ßvìnv
();

2091 
¨gc
 = 4;

2092 
¨gv
[0]= "cp.linux";

2093 
	`do_mem_˝
(
cmdç
, 0, 
¨gc
, 
¨gv
);

2096 #ifde‡
DUAL_IMAGE_SUPPORT


2098 
	`do_ª£t
(
cmdç
, 0, 
¨gc
, 
¨gv
);

2102 
¨gc
= 2;

2103 
	`•rötf
(
addr_°r
, "0x%X", 
CFG_KERN_ADDR
);

2104 
¨gv
[1] = &
addr_°r
[0];

2105 
	`do_boŸm
(
cmdç
, 0, 
¨gc
, 
¨gv
);

2108 #ifde‡
RALINK_CMDLINE


2110 
	`¥ötf
(" \n%d: Sy°em E¡î BoŸ Comm™d LöêI¡îÁ˚.\n", 
SEL_ENTER_CLI
);

2111 
	`¥ötf
 ("\n%s\n", 
vîsi⁄_°rög
);

2114 
	`maö_lo›
 ();

2118 #ifde‡
RALINK_UPGRADE_BY_SERIAL


2120 
	`¥ötf
("\n%d: Sy°em Lﬂd BoŸ LﬂdîÅhí wrôêtÿFœsh vü Sîül. \n", 
SEL_LOAD_BOOT_WRITE_FLASH_BY_SERIAL
);

2121 
¨gc
= 1;

2122 
	`£ãnv
("autostart", "no");

2123 
my_tmp
 = 
	`do_lﬂd_£rül_bö
(
cmdç
, 0, 
¨gc
, 
¨gv
);

2124 
NëBoŸFûeX„rSize
=
	`sim∂e_°πoul
(
	`gëív
("fûesize"), 
NULL
, 16);

2125 #i‡
	`deföed
(
SMALL_UBOOT_PARTITION
)

2126 i‡(
NëBoŸFûeX„rSize
 > 
CFG_UBOOT_SIZE
 || 
my_tmp
 == 1) {

2127 
	`¥ötf
("Abort: Bootloader isÅoo big or downloadáborted!\n");

2130 i‡(
NëBoŸFûeX„rSize
 > 
CFG_BOOTLOADER_SIZE
 || 
my_tmp
 == 1) {

2131 
	`¥ötf
("Abort: Bootloader isÅoo big or downloadáborted!\n");

2134 #i‡
	`deföed
 (
CFG_ENV_IS_IN_NAND
)

2136 
	`ø«nd_îa£_wrôe
((*)
CFG_LOAD_ADDR
, 0, 
NëBoŸFûeX„rSize
);

2138 #ñi‡
	`deföed
 (
CFG_ENV_IS_IN_SPI
)

2140 
	`ø•i_îa£_wrôe
((*)
CFG_LOAD_ADDR
, 0, 
NëBoŸFûeX„rSize
);

2145 
	`Êash_£˘_¥Ÿe˘
(0, 
CFG_FLASH_BASE
, CFG_FLASH_BASE+
CFG_BOOTLOADER_SIZE
-1);

2148 
	`¥ötf
("\n Erase U-Boot block !!\n");

2149 
	`¥ötf
("From 0x%X Tÿ0x%X\n", 
CFG_FLASH_BASE
, CFG_FLASH_BASE+
CFG_BOOTLOADER_SIZE
-1);

2150 
	`Êash_£˘_îa£
(
CFG_FLASH_BASE
, CFG_FLASH_BASE+
CFG_BOOTLOADER_SIZE
-1);

2153 
¨gc
 = 4;

2154 
¨gv
[0]= "cp.uboot";

2155 
	`do_mem_˝
(
cmdç
, 0, 
¨gc
, 
¨gv
);

2158 
	`Êash_£˘_¥Ÿe˘
(1, 
CFG_FLASH_BASE
, CFG_FLASH_BASE+
CFG_BOOTLOADER_SIZE
-1);

2163 
	`do_ª£t
(
cmdç
, 0, 
¨gc
, 
¨gv
);

2167 
	`¥ötf
(" \n%d: Sy°em Lﬂd UBoŸÅÿSDRAM vü TFTP. \n", 
SEL_LOAD_BOOT_SDRAM
);

2168 
	`t·p_c⁄fig
(
SEL_LOAD_BOOT_SDRAM
, 
¨gv
);

2169 
¨gc
= 3;

2170 
	`£ãnv
("autostart", "yes");

2171 
	`do_t·pb
(
cmdç
, 0, 
¨gc
, 
¨gv
);

2175 
	`¥ötf
(" \n%d: Sy°em Lﬂd BoŸ LﬂdîÅhí wrôêtÿFœsh vü TFTP. \n", 
SEL_LOAD_BOOT_WRITE_FLASH
);

2176 
	`¥ötf
(" Warning!! Erase Boot Loader in FlashÅhen burnÇew one. Are you sure?(Y/N)\n");

2177 
c⁄fúm
 = 
	`gëc
();

2178 i‡(
c⁄fúm
 != 'y' && confirm != 'Y') {

2179 
	`¥ötf
(" OperationÅerminated\n");

2182 
	`t·p_c⁄fig
(
SEL_LOAD_BOOT_WRITE_FLASH
, 
¨gv
);

2183 
¨gc
= 3;

2184 
	`£ãnv
("autostart", "no");

2185 
	`do_t·pb
(
cmdç
, 0, 
¨gc
, 
¨gv
);

2186 #i‡
	`deföed
(
SMALL_UBOOT_PARTITION
)

2187 i‡(
NëBoŸFûeX„rSize
 > 
CFG_UBOOT_SIZE
) {

2188 
	`¥ötf
("Ab‹t: boŸlﬂdî sizê%dÅoÿbig! \n", 
NëBoŸFûeX„rSize
);

2191 i‡(
NëBoŸFûeX„rSize
 > 
CFG_BOOTLOADER_SIZE
) {

2192 
	`¥ötf
("Ab‹t: boŸlﬂdî sizê%dÅoÿbig! \n", 
NëBoŸFûeX„rSize
);

2195 #i‡
	`deföed
 (
CFG_ENV_IS_IN_NAND
)

2197 
lﬂd_addªss
 = 
	`sim∂e_°πoul
(
¨gv
[1], 
NULL
, 16);

2198 
	`ø«nd_îa£_wrôe
((*)
lﬂd_addªss
, 0, 
NëBoŸFûeX„rSize
);

2200 #ñi‡
	`deföed
 (
CFG_ENV_IS_IN_SPI
)

2202 
lﬂd_addªss
 = 
	`sim∂e_°πoul
(
¨gv
[1], 
NULL
, 16);

2203 
	`ø•i_îa£_wrôe
((*)
lﬂd_addªss
, 0, 
NëBoŸFûeX„rSize
);

2208 
	`Êash_£˘_¥Ÿe˘
(0, 
CFG_FLASH_BASE
, CFG_FLASH_BASE+
CFG_BOOTLOADER_SIZE
-1);

2211 
	`¥ötf
("\n Erase U-Boot block !!\n");

2212 
	`¥ötf
("From 0x%X Tÿ0x%X\n", 
CFG_FLASH_BASE
, CFG_FLASH_BASE+
CFG_BOOTLOADER_SIZE
-1);

2213 
	`Êash_£˘_îa£
(
CFG_FLASH_BASE
, CFG_FLASH_BASE+
CFG_BOOTLOADER_SIZE
-1);

2216 
¨gc
 = 4;

2217 
¨gv
[0]= "cp.uboot";

2218 
	`do_mem_˝
(
cmdç
, 0, 
¨gc
, 
¨gv
);

2221 
	`Êash_£˘_¥Ÿe˘
(1, 
CFG_FLASH_BASE
, CFG_FLASH_BASE+
CFG_BOOTLOADER_SIZE
-1);

2226 
	`do_ª£t
(
cmdç
, 0, 
¨gc
, 
¨gv
);

2228 #ifde‡
RALINK_UPGRADE_BY_SERIAL


2229 #i‡
	`deföed
 (
CFG_ENV_IS_IN_NAND
Ë|| deföed (
CFG_ENV_IS_IN_SPI
)

2231 
	`¥ötf
("\n%d: Sy°em Lﬂd LöuxÅhí wrôêtÿFœsh vü Sîül. \n", 
SEL_LOAD_LINUX_WRITE_FLASH_BY_SERIAL
);

2232 
¨gc
= 1;

2233 
	`£ãnv
("autostart", "no");

2234 
my_tmp
 = 
	`do_lﬂd_£rül_bö
(
cmdç
, 0, 
¨gc
, 
¨gv
);

2235 
NëBoŸFûeX„rSize
=
	`sim∂e_°πoul
(
	`gëív
("fûesize"), 
NULL
, 16);

2237 #i‡
	`deföed
 (
CFG_ENV_IS_IN_NAND
)

2238 
	`ø«nd_îa£_wrôe
((*)
CFG_LOAD_ADDR
, 
CFG_KERN_ADDR
-
CFG_FLASH_BASE
, 
NëBoŸFûeX„rSize
);

2239 #ñi‡
	`deföed
 (
CFG_ENV_IS_IN_SPI
)

2240 
	`ø•i_îa£_wrôe
((*)
CFG_LOAD_ADDR
, 
CFG_KERN_ADDR
-
CFG_FLASH_BASE
, 
NëBoŸFûeX„rSize
);

2244 
	`do_ª£t
(
cmdç
, 0, 
¨gc
, 
¨gv
);

2250 #i‡
	`deföed
 (
RALINK_USB
Ë|| deföed (
MTK_USB
)

2251 #i‡
	`deföed
 (
CFG_ENV_IS_IN_NAND
Ë|| deföed (
CFG_ENV_IS_IN_SPI
)

2253 
	`¥ötf
("\n%d: System Load LinuxÅhen writeÅo Flash via USB Storage. \n", 5);

2255 
¨gc
 = 2;

2256 
¨gv
[1] = "start";

2257 
	`do_usb
(
cmdç
, 0, 
¨gc
, 
¨gv
);

2258 if–
usb_°‹_cuº_dev
 < 0){

2259 
	`¥ötf
("No USB Storage found. Upgrade F/W failed.\n");

2263 
¨gc
= 5;

2264 
¨gv
[1] = "usb";

2265 
¨gv
[2] = "0";

2266 
	`•rötf
(
addr_°r
, "0x%X", 
CFG_LOAD_ADDR
);

2267 
¨gv
[3] = &
addr_°r
[0];

2268 
¨gv
[4] = "root_uImage";

2269 
	`£ãnv
("autostart", "no");

2270 if(
	`do_Át_f¶ﬂd
(
cmdç
, 0, 
¨gc
, 
¨gv
)){

2271 
	`¥ötf
("Upgrade F/W from USB storage failed.\n");

2275 
NëBoŸFûeX„rSize
=
	`sim∂e_°πoul
(
	`gëív
("fûesize"), 
NULL
, 16);

2276 #i‡
	`deföed
 (
CFG_ENV_IS_IN_NAND
)

2277 
	`ø«nd_îa£_wrôe
((*)
CFG_LOAD_ADDR
, 
CFG_KERN_ADDR
-
CFG_FLASH_BASE
, 
NëBoŸFûeX„rSize
);

2278 #ñi‡
	`deföed
 (
CFG_ENV_IS_IN_SPI
)

2279 
	`ø•i_îa£_wrôe
((*)
CFG_LOAD_ADDR
, 
CFG_KERN_ADDR
-
CFG_FLASH_BASE
, 
NëBoŸFûeX„rSize
);

2283 
	`do_ª£t
(
cmdç
, 0, 
¨gc
, 
¨gv
);

2288 
SEL_LOAD_FIRMWARE_WRITE_FLASH
:

2289 
	`¥ötf
(" \n%c: Sy°em LﬂdÅhêfuŒ-fúmw¨êthí wrôêtÿFœsh vü TFTP. \n", 
SEL_LOAD_FIRMWARE_WRITE_FLASH
);

2290 
	`¥ötf
(" Warning!! EraseÅhe whole FlashÅhen burnÇew one. Are you sure?(Y/N)\n");

2291 
c⁄fúm
 = 
	`gëc
();

2292 i‡(
c⁄fúm
 != 'y' && confirm != 'Y') {

2293 
	`¥ötf
(" OperationÅerminated\n");

2296 
	`t·p_c⁄fig
(
SEL_LOAD_FIRMWARE_WRITE_FLASH
, 
¨gv
);

2297 
¨gc
= 3;

2298 
	`£ãnv
("autostart", "no");

2299 
	`do_t·pb
(
cmdç
, 0, 
¨gc
, 
¨gv
);

2300 #i‡
	`deföed
 (
CFG_ENV_IS_IN_NAND
)

2302 
	`¥ötf
("***********************************\n");

2303 
	`¥ötf
("Unsupport flashÅypeÇow !! \n");

2304 
	`¥ötf
("***********************************\n");

2306 #ñi‡
	`deföed
 (
CFG_ENV_IS_IN_SPI
)

2308 
lﬂd_addªss
 = 
	`sim∂e_°πoul
(
¨gv
[1], 
NULL
, 16);

2309 
	`ø•i_îa£_wrôe_Æl
((
u8
 *)
lﬂd_addªss
, 0, 
NëBoŸFûeX„rSize
);

2313 
	`¥ötf
("***********************************\n");

2314 
	`¥ötf
("Unsupport flashÅypeÇow !! \n");

2315 
	`¥ötf
("***********************************\n");

2320 
	`do_ª£t
(
cmdç
, 0, 
¨gc
, 
¨gv
);

2324 
	`¥ötf
(" \nSystem Boot Linux via Flash.\n");

2325 
	`do_boŸm
(
cmdç
, 0, 1, 
¨gv
);

2329 
	`do_ª£t
(
cmdç
, 0, 
¨gc
, 
¨gv
);

2334 
	}
}

2337 
	$h™g
 ()

2339 
	`puts
 ("### ERROR ### Please RESETÅhe board ###\n");

2341 
	}
}

2343 #i‡
deföed
 (
RALINK_RW_RF_REG_FUN
)

2344 #i‡
deföed
 (
MT7620_ASIC_BOARD
)

2345 
	#RF_CSR_CFG
 0xb0180500

	)

2346 
	#RF_CSR_KICK
 (1<<0)

	)

2347 
	$rw_rf_ªg
(
wrôe
, 
ªg
, *
d©a
)

2349 
u32
 
rfc§
, 
i
 = 0;

2352 
rfc§
 = 
	`RALINK_REG
(
RF_CSR_CFG
);

2353 i‡(! (
rfc§
 & (
u32
)
RF_CSR_KICK
) )

2355 i‡(++
i
 > 10000) {

2356 
	`puts
("Warning: AbortÑwÑfÑegister:Åoo busy\n");

2360 
rfc§
 = (
u32
)(
RF_CSR_KICK
 | ((
ªg
 & 0x3fË<< 16Ë| ((*
d©a
 & 0xff) << 8));

2361 i‡(
wrôe
)

2362 
rfc§
 |= 0x10;

2364 
	`RALINK_REG
(
RF_CSR_CFG
Ë
	`˝u_to_À32
(
rfc§
);

2365 
i
 = 0;

2367 
rfc§
 = 
	`RALINK_REG
(
RF_CSR_CFG
);

2368 i‡(! (
rfc§
 & (
u32
)
RF_CSR_KICK
) )

2370 i‡(++
i
 > 10000) {

2371 
	`puts
("Warning: still busy\n");

2376 
rfc§
 = 
	`RALINK_REG
(
RF_CSR_CFG
);

2377 i‡(((
rfc§
 & 0x3f0000Ë>> 16Ë!(
ªg
 & 0x3f)) {

2378 
	`puts
("Error:ÑwÑegister failed\n");

2381 *
d©a
 = ()–(
rfc§
 & 0xff00) >> 8) ;

2383 
	}
}

2385 
	#RF_CSR_CFG
 0xb0180500

	)

2386 
	#RF_CSR_KICK
 (1<<17)

	)

2387 
	$rw_rf_ªg
(
wrôe
, 
ªg
, *
d©a
)

2389 
u32
 
rfc§
, 
i
 = 0;

2392 
rfc§
 = 
	`RALINK_REG
(
RF_CSR_CFG
);

2393 i‡(! (
rfc§
 & (
u32
)
RF_CSR_KICK
) )

2395 i‡(++
i
 > 10000) {

2396 
	`puts
("Warning: AbortÑwÑfÑegister:Åoo busy\n");

2402 
rfc§
 = (
u32
)(
RF_CSR_KICK
 | ((
ªg
 & 0x3fË<< 8Ë| (*
d©a
 & 0xff));

2403 i‡(
wrôe
)

2404 
rfc§
 |= 0x10000;

2406 
	`RALINK_REG
(
RF_CSR_CFG
Ë
	`˝u_to_À32
(
rfc§
);

2408 
i
 = 0;

2410 
rfc§
 = 
	`RALINK_REG
(
RF_CSR_CFG
);

2411 i‡(! (
rfc§
 & (
u32
)
RF_CSR_KICK
) )

2413 i‡(++
i
 > 10000) {

2414 
	`puts
("Warning: still busy\n");

2419 
rfc§
 = 
	`RALINK_REG
(
RF_CSR_CFG
);

2421 i‡(((
rfc§
&0x1f00Ë>> 8Ë!(
ªg
 & 0x1f)) {

2422 
	`puts
("Error:ÑwÑegister failed\n");

2425 *
d©a
 = ()(
rfc§
 & 0xff);

2428 
	}
}

2432 #ifde‡
RALINK_RW_RF_REG_FUN


2433 #ifde‡
RALINK_CMDLINE


2434 
	$do_rw_rf
(
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[])

2436 
wrôe
, 
ªg
, 
d©a
;

2438 i‡((
¨gv
[1][0] ='r' ||árgv[1][0] ='R'Ë&& (
¨gc
 == 3)) {

2439 
wrôe
 = 0;

2440 
ªg
 = ()
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 10);

2441 
d©a
 = 0;

2443 i‡((
¨gv
[1][0] ='w' ||árgv[1][0] ='W'Ë&& (
¨gc
 == 4)) {

2444 
wrôe
 = 1;

2445 
ªg
 = ()
	`sim∂e_°πoul
(
¨gv
[2], 
NULL
, 10);

2446 
d©a
 = ()
	`sim∂e_°πoul
(
¨gv
[3], 
NULL
, 16);

2449 
	`¥ötf
 ("Ußge:\n%s\n", 
cmdç
->
ußge
);

2453 
	`rw_rf_ªg
(
wrôe
, 
ªg
, &
d©a
);

2454 i‡(!
wrôe
)

2455 
	`¥ötf
("r‡ªg <%d> = 0x%x\n", 
ªg
, 
d©a
);

2457 
	}
}

2459 
U_BOOT_CMD
(

2460 
rf
, 4, 1, 
do_rw_rf
,

2469 #i‡
deföed
(
RT3352_ASIC_BOARD
)

2470 
	$adju°_¸y°Æ_cúcuô
()

2472 
d
 = 0x45;

2474 
	`rw_rf_ªg
(1, 18, &
d
);

2475 
	}
}

2478 #i‡
deföed
(
RT3052_ASIC_BOARD
)

2482 
	$adju°_vﬁège
()

2484 
d
 = 0x25;

2485 
	`rw_rf_ªg
(1, 26, &
d
);

2486 
	}
}

2488 
	$adju°_‰equícy
()

2490 
u32
 
r23
;

2493 #i‡
	`deföed
 (
CFG_ENV_IS_IN_NAND
)

2494 
	`ø«nd_ªad
((*)&
r23
, 
CFG_FACTORY_ADDR
-
CFG_FLASH_BASE
+0x3a, 1);

2495 #ñi‡
	`deföed
 (
CFG_ENV_IS_IN_SPI
)

2496 
	`ø•i_ªad
((*)&
r23
, 
CFG_FACTORY_ADDR
-
CFG_FLASH_BASE
+0x3a, 1);

2498 
r23
 = *(vﬁ©ûê
u32
 *)(
CFG_FACTORY_ADDR
+0x38);

2499 
r23
 >>= 16;

2501 
r23
 &= 0xff;

2503 
	`rw_rf_ªg
(1, 23, &
r23
);

2504 
	}
}

2507 #i‡
deföed
 (
RT3352_ASIC_BOARD
Ë|| deföed (
RT3883_ASIC_BOARD
)

2508 
	$adju°_rf_r17
()

2510 
u32
 
r17
;

2511 
u32
 
i
;

2512 
u32
 
vÆ
;

2513 
u32
 
j
 = 0;

2516 #i‡
	`deföed
 (
CFG_ENV_IS_IN_NAND
)

2517 
	`ø«nd_ªad
((*)&
r17
, 
CFG_FACTORY_ADDR
-
CFG_FLASH_BASE
+0x3a, 1);

2518 #ñi‡
	`deföed
 (
CFG_ENV_IS_IN_SPI
)

2519 
	`ø•i_ªad
((*)&
r17
, 
CFG_FACTORY_ADDR
-
CFG_FLASH_BASE
+0x3a, 1);

2521 #i‡
	`deföed
 (
RT2880_ASIC_BOARD
)

2522 
r17
 = *(vﬁ©ûê
u32
 *)(
CFG_FACTORY_ADDR
+0x3a);

2523 #ñi‡
	`deföed
 (
RT3883_ASIC_BOARD
)

2524 
r17
 = *(vﬁ©ûê
u32
 *)(
CFG_FACTORY_ADDR
+0x44);

2528 
r17
 &= 0xff;

2530 if((
r17
 == 0) || (r17 == 0xff)){

2531 
r17
 = 0x2c;

2534 if(
r17
 <= 0xf) {

2535 
i
=1; i<=
r17
; i++) {

2537 
vÆ
 = 
i
;

2538 
vÆ
 |= 1 << 7;

2539 
	`rw_rf_ªg
(1, 17, &
vÆ
);

2540 
	`udñay
(2000);

2541 
	`rw_rf_ªg
(0, 17, &
vÆ
);

2546 
i
=1; i<=0xf; i++) {

2548 
vÆ
 = 
i
;

2549 
vÆ
 |= 1 << 7;

2550 
	`rw_rf_ªg
(1, 17, &
vÆ
);

2551 
	`udñay
(2000);

2552 
	`rw_rf_ªg
(0, 17, &
vÆ
);

2553 
	`¥ötf
("Upd©êRF_R17Åÿ0x%0X\n", 
vÆ
);

2555 
vÆ
 = 0x1f;

2556 
vÆ
 |= 1 << 7;

2557 
	`rw_rf_ªg
(1, 17, &
vÆ
);

2558 
	`udñay
(2000);

2559 
	`rw_rf_ªg
(0, 17, &
vÆ
);

2560 
	`¥ötf
("Upd©êRF_R17Åÿ0x%0X\n", 
vÆ
);

2562 if(
r17
 <= 0x1f) {

2563 
i
=0x1e; i>=
r17
; i--) {

2565 
vÆ
 = 
i
;

2566 
vÆ
 |= 1 << 7;

2567 
	`rw_rf_ªg
(1, 17, &
vÆ
);

2568 
	`udñay
(2000);

2569 
	`rw_rf_ªg
(0, 17, &
vÆ
);

2570 
	`¥ötf
("Upd©êRF_R17Åÿ0x%0X\n", 
vÆ
);

2572 } if((
r17
 > 0x1f) && (r17 <=0x2f)){

2573 
i
=0x2f; i>=
r17
; i--) {

2575 
vÆ
 = 
i
;

2576 
vÆ
 |= 1 << 7;

2577 
	`rw_rf_ªg
(1, 17, &
vÆ
);

2578 
	`udñay
(2000);

2579 
	`rw_rf_ªg
(0, 17, &
vÆ
);

2583 
vÆ
 = 0x2f;

2584 
vÆ
 |= 1 << 7;

2585 
	`rw_rf_ªg
(1, 17, &
vÆ
);

2586 
	`udñay
(2000);

2587 
	`rw_rf_ªg
(0, 17, &
vÆ
);

2590 if((
r17
 > 0x2f) && (r17 <= 0x3f)){

2591 
i
=0x3f; i>=
r17
; i--) {

2593 
vÆ
 = 
i
;

2594 
vÆ
 |= 1 << 7;

2595 
	`rw_rf_ªg
(1, 17, &
vÆ
);

2596 
	`udñay
(2000);

2597 
	`rw_rf_ªg
(0, 17, &
vÆ
);

2601 if(
r17
 > 0x3f){

2602 
vÆ
 = 0x3f;

2603 
vÆ
 |= 1 << 7;

2604 
	`rw_rf_ªg
(1, 17, &
vÆ
);

2605 
	`udñay
(2000);

2606 
	`rw_rf_ªg
(0, 17, &
vÆ
);

2612 
	}
}

2615 #i‡
deföed
(
RT3883_ASIC_BOARD
Ë|| deföed(
RT3352_ASIC_BOARD
Ë|| deföed(
RT5350_ASIC_BOARD
Ë|| deföed(
RT6855_ASIC_BOARD
Ë|| deföed (
MT7620_ASIC_BOARD
Ë|| deföed (
MT7628_ASIC_BOARD
)

2619 
	$c⁄fig_usb_ehciohci
()

2621 
u32
 
vÆ
;

2623 
vÆ
 = 
	`RALINK_REG
(
RT2880_RSTCTRL_REG
);

2624 
vÆ
 = vÆ | 
RALINK_UHST_RST
 | 
RALINK_UDEV_RST
;

2625 
	`RALINK_REG
(
RT2880_RSTCTRL_REG
Ë
vÆ
;

2627 
vÆ
 = 
	`RALINK_REG
(
RT2880_CLKCFG1_REG
);

2628 #i‡
	`deföed
(
RT5350_ASIC_BOARD
Ë|| deföed(
RT6855_ASIC_BOARD
)

2629 
vÆ
 = vÆ & ~(
RALINK_UPHY0_CLK_EN
) ;

2631 
vÆ
 = vÆ & ~(
RALINK_UPHY0_CLK_EN
 | 
RALINK_UPHY1_CLK_EN
) ;

2633 
	`RALINK_REG
(
RT2880_CLKCFG1_REG
Ë
vÆ
;

2634 
	}
}

2638 #i‡
deföed
(
MT7621_ASIC_BOARD
)

2639 
	$c⁄fig_usb_mtk_xhci
()

2641 
u32
 
ªgVÆue
;

2643 
ªgVÆue
 = 
	`RALINK_REG
(
RALINK_SYSCTL_BASE
 + 0x10);

2644 
ªgVÆue
 = (regValue >> 6) & 0x7;

2645 if(
ªgVÆue
 >= 6) {

2646 
	`¥ötf
("\nConfig XHCI 25M PLL \n");

2647 
	`RALINK_REG
(0xbe1d0784) = 0x20201a;

2648 
	`RALINK_REG
(0xbe1d0c20) = 0x80004;

2649 
	`RALINK_REG
(0xbe1d0c1c) = 0x18181819;

2650 
	`RALINK_REG
(0xbe1d0c24) = 0x18000000;

2651 
	`RALINK_REG
(0xbe1d0c38) = 0x25004a;

2652 
	`RALINK_REG
(0xbe1d0c40) = 0x48004a;

2653 
	`RALINK_REG
(0xbe1d0b24) = 0x190;

2654 
	`RALINK_REG
(0xbe1d0b10) = 0x1c000000;

2655 
	`RALINK_REG
(0xbe1d0b04) = 0x20000004;

2656 
	`RALINK_REG
(0xbe1d0b08) = 0xf203200;

2658 
	`RALINK_REG
(0xbe1d0b2c) = 0x1400028;

2660 
	`RALINK_REG
(0xbe1d0a40) = 0xffff0001;

2661 
	`RALINK_REG
(0xbe1d0a44) = 0x60001;

2662 } i‡(
ªgVÆue
 >=3 ) {

2663 
	`¥ötf
("\nConfig XHCI 40M PLL \n");

2664 
	`RALINK_REG
(0xbe1d0784) = 0x20201a;

2665 
	`RALINK_REG
(0xbe1d0c20) = 0x80104;

2666 
	`RALINK_REG
(0xbe1d0c1c) = 0x1818181e;

2667 
	`RALINK_REG
(0xbe1d0c24) = 0x1e400000;

2668 
	`RALINK_REG
(0xbe1d0c38) = 0x250073;

2669 
	`RALINK_REG
(0xbe1d0c40) = 0x71004a;

2670 
	`RALINK_REG
(0xbe1d0b24) = 0x140;

2671 
	`RALINK_REG
(0xbe1d0b10) = 0x23800000;

2672 
	`RALINK_REG
(0xbe1d0b04) = 0x20000005;

2673 
	`RALINK_REG
(0xbe1d0b08) = 0x12203200;

2675 
	`RALINK_REG
(0xbe1d0b2c) = 0x1400028;

2677 
	`RALINK_REG
(0xbe1d0a40) = 0xffff0001;

2678 
	`RALINK_REG
(0xbe1d0a44) = 0x60001;

2684 
	}
}

2688 #i‡
deföed
(
RT3052_ASIC_BOARD
Ë|| deföed(
RT2883_ASIC_BOARD
)

2689 
	$usbŸg_ho°_su•íd
()

2691 
u32
 
vÆ
;

2692 
i
, 
rc
=0, 
ªåy_cou¡
=0;

2694 
	`¥ötf
(".");

2696 
ªåy_su•íd
:

2697 
vÆ
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)(0xB01C0440));

2698 
vÆ
 = val >> 10;

2699 
vÆ
 = val & 0x00000003;

2701 if(
vÆ
 == 0x3){

2702 if(
ªåy_cou¡
++ < 0x100000)

2703 
ªåy_su•íd
;

2704 
	`¥ötf
("*** Error: D+/D- is 1/1, config usb failed.\n");

2709 
vÆ
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)(0xB01C0400));

2712 
vÆ
 = val | (1 << 2);

2713 *(vﬁ©ûê
u_l⁄g
 *)(0xB01C0400Ë
	`˝u_to_À32
(
vÆ
);

2714 
vÆ
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)(0xB01C0400));

2717 
vÆ
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)(0xB01C0440));

2721 
vÆ
 = val | (1 << 12);

2722 *(vﬁ©ûê
u_l⁄g
 *)(0xB01C0440Ë
	`˝u_to_À32
(
vÆ
);

2723 
vÆ
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)(0xB01C0440));

2726 
	`udñay
(3000);

2729 
vÆ
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)(0xB01C0440));

2733 
vÆ
 = val | (1 << 8);

2734 *(vﬁ©ûê
u_l⁄g
 *)(0xB01C0440Ë
	`˝u_to_À32
(
vÆ
);

2735 
vÆ
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)(0xB01C0440));

2738 
	`udñay
(10000);

2741 
vÆ
 = val & ~(1 << 8);

2742 *(vﬁ©ûê
u_l⁄g
 *)(0xB01C0440Ë
	`˝u_to_À32
(
vÆ
);

2743 
vÆ
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)(0xB01C0440));

2746 
	`udñay
(1000);

2749 
vÆ
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)(0xB01C0440));

2751 
vÆ
 = val | (1 << 7);

2753 
vÆ
 = val & 0xFFFFFFF3;

2755 *(vﬁ©ûê
u_l⁄g
 *)(0xB01C0440Ë
	`˝u_to_À32
(
vÆ
);

2757 
vÆ
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)(0xB01C0440));

2761 *(vﬁ©ûê
u_l⁄g
 *)(0xB01C0E00Ë
	`˝u_to_À32
(0x1);

2762 
vÆ
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)(0xB01C0E00));

2766 
i
=0; i<200000; i++){

2767 
vÆ
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)(0xB01C0440));

2768 
vÆ
 = val & (1 << 7);

2769 if(
vÆ
)

2771 
	`udñay
(1);

2774 if(
i
==200000){

2776 
rc
 = -1;

2778 
vÆ
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)(0xB01C0440));

2780 
	`udñay
(100000);

2782 
vÆ
 = 
	`RALINK_REG
(
RT2880_RSTCTRL_REG
);

2783 
vÆ
 = vÆ | 
RALINK_OTG_RST
;

2784 
	`RALINK_REG
(
RT2880_RSTCTRL_REG
Ë
vÆ
;

2785 
vÆ
 = vÆ & ~(
RALINK_OTG_RST
);

2786 
	`RALINK_REG
(
RT2880_RSTCTRL_REG
Ë
vÆ
;

2787 
	`udñay
(200000);

2789 
	`udñay
(200000);

2791  
rc
;

2792 
	}
}

2795 
	$usbŸg_devi˚_su•íd
()

2797 
u32
 
vÆ
;

2798 
rc
 = -1, 
åy_cou¡
;

2800 
	`¥ötf
(".");

2802 
	`RALINK_REG
(0xB01C0E00) = 0xF;

2803 
	`udñay
(100000);

2804 
vÆ
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)(0xB01C0808));

2807 
	`RALINK_REG
(0xB01C000C) = 0x40001408;

2808 
	`udñay
(50000);

2809 
	`RALINK_REG
(0xB01C0E00) = 0x1;

2810 
	`udñay
(100000);

2813 
åy_cou¡
=0 ;Åry_count< 1000 ;Åry_count++)

2815 
vÆ
 = 
	`À32_to_˝u
(*(vﬁ©ûê
u_l⁄g
 *)(0xB01C0808));

2817 if((
vÆ
 & 0x1)){

2818 
rc
 = 0;

2821 
	`udñay
(1000);

2824 
vÆ
 = 
	`RALINK_REG
(
RT2880_RSTCTRL_REG
);

2825 
vÆ
 = vÆ | 
RALINK_OTG_RST
;

2826 
	`RALINK_REG
(
RT2880_RSTCTRL_REG
Ë
vÆ
;

2827 
vÆ
 = vÆ & ~(
RALINK_OTG_RST
);

2828 
	`RALINK_REG
(
RT2880_RSTCTRL_REG
Ë
vÆ
;

2829 
	`udñay
(200000);

2831  
rc
;

2832 
	}
}

2834 
	$c⁄fig_usbŸg
()

2836 
i
, 
ho°_rc
, 
devi˚_rc
;

2838 
	`¥ötf
("config usb");

2839 
i
=0;i<2;i++){

2840 
devi˚_rc
 = 
	`usbŸg_devi˚_su•íd
();

2841 
ho°_rc
 = 
	`usbŸg_ho°_su•íd
();

2843 if(
ho°_rc
 =-1 && 
devi˚_rc
 == -1)

2849 
	`RALINK_REG
(0xB01C0E00) = 0xF;

2850 
	`¥ötf
("\n");

2852 
	}
}

2856 #i‡
deföed
 (
RT6855A_ASIC_BOARD
Ë|| deföed(
RT6855A_FPGA_BOARD
)

2857 
	$w©chdog_ª£t
()

2859 
w‹d
;

2860 
i
;

2863 i‡((
	`RALINK_REG
(
RALINK_HIR_REG
) & 0xffff0000) == 0x40000) {

2864 i‡(!(
	`RALINK_REG
(0xbfb00080) >> 31)) {

2866 
	`RALINK_REG
(
RALINK_TIMER5_LDV
) = 1000;

2868 
w‹d
 = 
	`RALINK_REG
(
RALINK_TIMER_CTL
);

2869 
w‹d
 |= ((1 << 5) | (1 << 25));

2870 
	`RALINK_REG
(
RALINK_TIMER_CTL
Ë
w‹d
;

2876 
	}
}

2879 #i‡
deföed
 (
MT7620_ASIC_BOARD
Ë|| deföed (
MT7628_ASIC_BOARD
)

2880 
	$dißbÀ_pcõ
()

2882 
u32
 
vÆ
;

2884 
vÆ
 = 
	`RALINK_REG
(
RT2880_RSTCTRL_REG
);

2885 
vÆ
 |
RALINK_PCIE0_RST
;

2886 
	`RALINK_REG
(
RT2880_RSTCTRL_REG
Ë
vÆ
;

2888 #i‡
	`deföed
 (
MT7628_ASIC_BOARD
)

2889 
vÆ
 = 
	`RALINK_REG
(
RT2880_CLKCFG1_REG
);

2890 
vÆ
 &~
RALINK_PCIE_CLK_EN
;

2891 
	`RALINK_REG
(
RT2880_CLKCFG1_REG
Ë
vÆ
;

2893 
	}
}

2896 #i‡
deföed
 (
CONFIG_DDR_CAL
)

2897 
	~<asm-mùs/mù§egs.h
>

2898 
	~<asm-mùs/ˇche›s.h
>

2899 
	~<asm/mù§egs.h
>

2900 
	~<asm/ˇche.h
>

2902 
ölöe
 
	$ˇl_mem˝y
(* 
§c
, * 
d°
, 
size
)

2904 
i
;

2905 * 
p§c
 = (*)
§c
, *
pd°
=(*)
d°
;

2906 
i
 = 0; i < 
size
; i++, 
p§c
++, 
pd°
++)

2907 (*
pd°
Ë(*
p§c
);

2909 
	}
}

2910 
ölöe
 
	$ˇl_mem£t
(* 
§c
, 
∑t
, 
size
)

2912 
i
;

2913 * 
p§c
 = (*)
§c
;

2914 
i
 = 0; i < 
size
; i++, 
p§c
++)

2915 (*
p§c
Ë
∑t
;

2917 
	}
}

2919 
	#¥ef_›
(
höt
,
addr
) \

2920 
__asm__
 
	`__vﬁ©ûe__
( \

2926 : "i" (
höt
), "R" (*(*)(
addr
)))

	)

2928 
	#ˇche_›
(
›
,
addr
) \

2929 
__asm__
 
	`__vﬁ©ûe__
( \

2936 : "i" (
›
), "R" (*(*)(
addr
)))

	)

2938 
__©åibuã__
((
nomùs16
)Ë
ölöe
 
	$ˇl_övÆid©e_dˇche_ønge
(
ul⁄g
 
°¨t_addr
, ul⁄g 
°›
)

2940 
lsize
 = 
CONFIG_SYS_CACHELINE_SIZE
;

2941 
addr
 = 
°¨t_addr
 & ~(
lsize
 - 1);

2942 
´nd
 = (
°›
 - 1Ë& ~(
lsize
 - 1);

2945 
	`ˇche_›
(
HIT_INVALIDATE_D
, 
addr
);

2946 i‡(
addr
 =
´nd
)

2948 
addr
 +
lsize
;

2950 
	}
}

2952 
ölöe
 
	$ˇl_∑tgí
(* 
°¨t_addr
, 
size
, 
büs
)

2954 
i
 = 0;

2955 
i
 = 0; i < 
size
; i++)

2956 
°¨t_addr
[
i
] = ((
ul⁄g
)°¨t_addr+i+
büs
);

2959 
	}
}

2961 
	#NUM_OF_CACHELINE
 128

	)

2962 
	#MIN_START
 6

	)

2963 
	#MIN_FINE_START
 0xF

	)

2964 
	#MAX_START
 7

	)

2965 
	#MAX_FINE_START
 0x0

	)

2966 
	#ˇl_debug
 
debug


	)

2968 
__©åibuã__
((
nomùs16
)Ë
	$døm_ˇli
()

2970 #i‡
	`deföed
(
ON_BOARD_64M_DRAM_COMPONENT
)

2971 
	#DRAM_BUTTOM
 0x800000

	)

2973 #i‡
	`deföed
(
ON_BOARD_128M_DRAM_COMPONENT
)

2974 
	#DRAM_BUTTOM
 0x1000000

	)

2976 #i‡
	`deföed
(
ON_BOARD_256M_DRAM_COMPONENT
)

2977 
	#DRAM_BUTTOM
 0x2000000

	)

2979 #i‡
	`deföed
(
ON_BOARD_512M_DRAM_COMPONENT
)

2980 
	#DRAM_BUTTOM
 0x4000000

	)

2982 #i‡
	`deföed
(
ON_BOARD_1024M_DRAM_COMPONENT
)

2983 
	#DRAM_BUTTOM
 0x8000000

	)

2985 #i‡
	`deföed
(
ON_BOARD_2048M_DRAM_COMPONENT
)

2986 
	#DRAM_BUTTOM
 0x10000000

	)

2989 * 
nc_addr
 = 0xA0000000+
DRAM_BUTTOM
-0x0400;

2990 * 
c_addr
 = 0x80000000+
DRAM_BUTTOM
-0x0400;

2991 
mö_cﬂr£_dqs
[2];

2992 
max_cﬂr£_dqs
[2];

2993 
mö_föe_dqs
[2];

2994 
max_föe_dqs
[2];

2995 
cﬂr£_dqs
[2];

2996 
föe_dqs
[2];

2997 
mö_dqs
[2];

2998 
max_dqs
[2];

2999 
ªg
 = 0, 
ddr_cfg2_ªg
 = 0;

3000 
ªt
 = 0;

3001 
Êag
 = 0, 
mö_Áûed_pos
[2], 
max_Áûed_pos
[2], 
mö_föe_Áûed_pos
[2], 
max_föe_Áûed_pos
[2];

3002 
i
,
j
, 
k
;

3003 
dqs
 = 0;

3004 
mö_cﬂr£_dqs_bnd
, 
mö_föe_dqs_bnd
, 
cﬂr£_dqs_dŒ
, 
föe_dqs_dŒ
;

3005 #i‡(
NUM_OF_CACHELINE
 > 40)

3007 
ˇche_∑t
[8*40];

3009 
u32
 
vÆue
, 
ã°_cou¡
 = 0;;

3010 
u32
 
fdiv
 = 0, 
°ï
 = 0, 
‰ac
 = 0;

3012 
vÆue
 = 
	`RALINK_REG
(
RALINK_DYN_CFG0_REG
);

3013 
fdiv
 = ()((
vÆue
>>8)&0x0F);

3014 i‡((
CPU_FRAC_DIV
 < 1) || (CPU_FRAC_DIV > 10))

3015 
‰ac
 = ()(
vÆue
&0x0F);

3017 
‰ac
 = 
CPU_FRAC_DIV
;

3018 
i
 = 0;

3020 
‰ac
 < 
fdiv
) {

3021 
vÆue
 = 
	`RALINK_REG
(
RALINK_DYN_CFG0_REG
);

3022 
fdiv
 = ((
vÆue
>>8)&0x0F);

3023 
fdiv
--;

3024 
vÆue
 &= ~(0x0F<<8);

3025 
vÆue
 |(
fdiv
<<8);

3026 
	`RALINK_REG
(
RALINK_DYN_CFG0_REG
Ë
vÆue
;

3027 
	`udñay
(500);

3028 
i
++;

3029 
vÆue
 = 
	`RALINK_REG
(
RALINK_DYN_CFG0_REG
);

3030 
fdiv
 = ((
vÆue
>>8)&0x0F);

3032 #i‡(
NUM_OF_CACHELINE
 > 40)

3034 
	`ˇl_mem˝y
(
ˇche_∑t
, 
døm_∑âîns
, 32*6);

3035 
	`ˇl_mem˝y
(
ˇche_∑t
+32*6, 
löe_toggÀ_∑âîn
, 32);

3036 
	`ˇl_mem˝y
(
ˇche_∑t
+32*6+32, 
∑âîn_kí
, 32*13);

3039 #i‡
	`deföed
(
MT7628_FPGA_BOARD
Ë|| deföed(
MT7628_ASIC_BOARD
)

3040 
	`RALINK_REG
(
RALINK_MEMCTRL_BASE
+0x10) &= ~(0x1<<4);

3042 
	`RALINK_REG
(
RALINK_MEMCTRL_BASE
+0x18) = &= ~(0x1<<4);

3044 
ddr_cfg2_ªg
 = 
	`RALINK_REG
(
RALINK_MEMCTRL_BASE
+0x48);

3045 
	`RALINK_REG
(
RALINK_MEMCTRL_BASE
+0x48)&=(~((0x3<<28)|(0x3<<26)));

3047 
TEST_LOOP
:

3048 
mö_cﬂr£_dqs
[0] = 
MIN_START
;

3049 
mö_cﬂr£_dqs
[1] = 
MIN_START
;

3050 
mö_föe_dqs
[0] = 
MIN_FINE_START
;

3051 
mö_föe_dqs
[1] = 
MIN_FINE_START
;

3052 
max_cﬂr£_dqs
[0] = 
MAX_START
;

3053 
max_cﬂr£_dqs
[1] = 
MAX_START
;

3054 
max_föe_dqs
[0] = 
MAX_FINE_START
;

3055 
max_föe_dqs
[1] = 
MAX_FINE_START
;

3056 
mö_Áûed_pos
[0] = 0xFF;

3057 
mö_föe_Áûed_pos
[0] = 0;

3058 
mö_Áûed_pos
[1] = 0xFF;

3059 
mö_föe_Áûed_pos
[1] = 0;

3060 
max_Áûed_pos
[0] = 0xFF;

3061 
max_föe_Áûed_pos
[0] = 0;

3062 
max_Áûed_pos
[1] = 0xFF;

3063 
max_föe_Áûed_pos
[1] = 0;

3064 
dqs
 = 0;

3067 
ªg
 = 
	`RALINK_REG
(
RALINK_MEMCTRL_BASE
+0x20);

3068 
cﬂr£_dqs_dŒ
 = (
ªg
 & 0xF00) >> 8;

3069 
föe_dqs_dŒ
 = (
ªg
 & 0xF0) >> 4;

3070 i‡(
cﬂr£_dqs_dŒ
<=8)

3071 
mö_cﬂr£_dqs_bnd
 = 8 - 
cﬂr£_dqs_dŒ
;

3073 
mö_cﬂr£_dqs_bnd
 = 0;

3075 i‡(
föe_dqs_dŒ
<=8)

3076 
mö_föe_dqs_bnd
 = 8 - 
föe_dqs_dŒ
;

3078 
mö_föe_dqs_bnd
 = 0;

3081 
DQS_CAL
:

3082 
Êag
 = 0;

3083 
j
 = 0;

3085 
k
 = 0; k < 2; k ++)

3087 
ã°_dqs
, 
Áûed_pos
 = 0;

3088 i‡(
k
 == 0)

3089 
ã°_dqs
 = 
MAX_START
;

3091 
ã°_dqs
 = 
MAX_FINE_START
;

3092 
Êag
 = 0;

3095 
Êag
 = 0;

3096 
nc_addr
 = 0xA0000000;Çc_add∏< (0xA0000000+
DRAM_BUTTOM
-
NUM_OF_CACHELINE
*32);Çc_addr+=((DRAM_BUTTOM>>6)+1*0x400))

3098 
	`RALINK_REG
(
RALINK_MEMCTRL_BASE
+0x64) = 0x00007474;

3099 
	`wmb
();

3100 
c_addr
 = (*)((
ul⁄g
)
nc_addr
 & 0xDFFFFFFF);

3101 
	`ˇl_mem£t
(((*)
c_addr
), 0x1F, 
NUM_OF_CACHELINE
*32);

3102 #i‡(
NUM_OF_CACHELINE
 > 40)

3103 
	`ˇl_∑tgí
(
nc_addr
, 
NUM_OF_CACHELINE
*8, 3);

3105 
	`ˇl_mem˝y
(((*)
nc_addr
), ((*)
ˇche_∑t
), 
NUM_OF_CACHELINE
*32);

3108 i‡(
dqs
 > 0)

3109 
	`RALINK_REG
(
RALINK_MEMCTRL_BASE
+0x64Ë0x00000074|(((
k
==1Ë? 
max_cﬂr£_dqs
[
dqs
] : 
ã°_dqs
)<<12)|(((k==0) ? 0xF :Åest_dqs)<<8);

3111 
	`RALINK_REG
(
RALINK_MEMCTRL_BASE
+0x64Ë0x00007400|(((
k
==1Ë? 
max_cﬂr£_dqs
[
dqs
] : 
ã°_dqs
)<<4)|(((k==0) ? 0xF :Åest_dqs)<<0);

3112 
	`wmb
();

3114 
	`ˇl_övÆid©e_dˇche_ønge
(((*)
c_addr
), ((*)c_addr)+
NUM_OF_CACHELINE
*32);

3115 
	`wmb
();

3116 
i
 = 0; i < 
NUM_OF_CACHELINE
*8; i ++)

3118 i‡(
i
 % 8 ==0)

3119 
	`¥ef_›
(0, &
c_addr
[
i
]);

3121 
i
 = 0; i < 
NUM_OF_CACHELINE
*8; i ++)

3123 #i‡(
NUM_OF_CACHELINE
 > 40)

3124 i‡(
c_addr
[
i
] !(
ul⁄g
)
nc_addr
+i+3)

3126 i‡(
c_addr
[
i
] !
ˇche_∑t
[i])

3129 
Êag
 = -1;

3130 
Áûed_pos
 = 
i
;

3131 
MAX_FAILED
;

3135 
MAX_FAILED
:

3136 i‡(
Êag
==-1)

3141 
ã°_dqs
++;

3142 }
ã°_dqs
<=0xF);

3144 i‡(
k
==0)

3146 
max_cﬂr£_dqs
[
dqs
] = 
ã°_dqs
;

3147 
max_Áûed_pos
[
dqs
] = 
Áûed_pos
;

3151 
ã°_dqs
--;

3153 i‡(
ã°_dqs
==
MAX_FINE_START
-1)

3155 
max_cﬂr£_dqs
[
dqs
]--;

3156 
max_föe_dqs
[
dqs
] = 0xF;

3160 
max_föe_dqs
[
dqs
] = 
ã°_dqs
;

3162 
max_föe_Áûed_pos
[
dqs
] = 
Áûed_pos
;

3166 
k
 = 0; k < 2; k ++)

3168 
ã°_dqs
, 
Áûed_pos
 = 0;

3169 i‡(
k
 == 0)

3170 
ã°_dqs
 = 
MIN_START
;

3172 
ã°_dqs
 = 
MIN_FINE_START
;

3173 
Êag
 = 0;

3176 
nc_addr
 = 0xA0000000;Çc_add∏< (0xA0000000+
DRAM_BUTTOM
-
NUM_OF_CACHELINE
*32); (nc_addr+=(DRAM_BUTTOM>>6)+1*0x480))

3178 
	`RALINK_REG
(
RALINK_MEMCTRL_BASE
+0x64) = 0x00007474;

3179 
	`wmb
();

3180 
c_addr
 = (*)((
ul⁄g
)
nc_addr
 & 0xDFFFFFFF);

3181 
	`RALINK_REG
(
RALINK_MEMCTRL_BASE
+0x64) = 0x00007474;

3182 
	`wmb
();

3183 
	`ˇl_mem£t
(((*)
c_addr
), 0x1F, 
NUM_OF_CACHELINE
*32);

3184 #i‡(
NUM_OF_CACHELINE
 > 40)

3185 
	`ˇl_∑tgí
(
nc_addr
, 
NUM_OF_CACHELINE
*8, 1);

3187 
	`ˇl_mem˝y
(((*)
nc_addr
), ((*)
ˇche_∑t
), 
NUM_OF_CACHELINE
*32);

3189 i‡(
dqs
 > 0)

3190 
	`RALINK_REG
(
RALINK_MEMCTRL_BASE
+0x64Ë0x00000074|(((
k
==1Ë? 
mö_cﬂr£_dqs
[
dqs
] : 
ã°_dqs
)<<12)|(((k==0) ? 0x0 :Åest_dqs)<<8);

3192 
	`RALINK_REG
(
RALINK_MEMCTRL_BASE
+0x64Ë0x00007400|(((
k
==1Ë? 
mö_cﬂr£_dqs
[
dqs
] : 
ã°_dqs
)<<4)|(((k==0) ? 0x0 :Åest_dqs)<<0);

3193 
	`wmb
();

3194 
	`ˇl_övÆid©e_dˇche_ønge
(((*)
c_addr
), ((*)c_addr)+
NUM_OF_CACHELINE
*32);

3195 
	`wmb
();

3196 
i
 = 0; i < 
NUM_OF_CACHELINE
*8; i ++)

3198 i‡(
i
 % 8 ==0)

3199 
	`¥ef_›
(0, &
c_addr
[
i
]);

3201 
i
 = 0; i < 
NUM_OF_CACHELINE
*8; i ++)

3203 #i‡(
NUM_OF_CACHELINE
 > 40)

3204 i‡(
c_addr
[
i
] !(
ul⁄g
)
nc_addr
+i+1)

3206 i‡(
c_addr
[
i
] !
ˇche_∑t
[i])

3209 
Êag
 = -1;

3210 
Áûed_pos
 = 
i
;

3211 
MIN_FAILED
;

3216 
MIN_FAILED
:

3218 i‡(
k
==0)

3220 i‡((
Êag
==-1)||(
ã°_dqs
==
mö_cﬂr£_dqs_bnd
))

3225 
ã°_dqs
--;

3227 i‡(
ã°_dqs
 < 
mö_cﬂr£_dqs_bnd
)

3232 i‡(
Êag
==-1)

3234 
ã°_dqs
++;

3237 i‡(
ã°_dqs
==
mö_föe_dqs_bnd
)

3243 
ã°_dqs
--;

3246 i‡(
ã°_dqs
 < 
mö_föe_dqs_bnd
)

3250 }
ã°_dqs
>=0);

3252 i‡(
k
==0)

3254 
mö_cﬂr£_dqs
[
dqs
] = 
ã°_dqs
;

3255 
mö_Áûed_pos
[
dqs
] = 
Áûed_pos
;

3259 i‡(
ã°_dqs
==
MIN_FINE_START
+1)

3261 
mö_cﬂr£_dqs
[
dqs
]++;

3262 
mö_föe_dqs
[
dqs
] = 0x0;

3266 
mö_föe_dqs
[
dqs
] = 
ã°_dqs
;

3268 
mö_föe_Áûed_pos
[
dqs
] = 
Áûed_pos
;

3272 i‡(
dqs
==0)

3274 
dqs
 = 1;

3275 
DQS_CAL
;

3278 
i
=0 ; i < 2; i++)

3280 
ãmp
;

3281 
cﬂr£_dqs
[
i
] = (
max_cﬂr£_dqs
[i] + 
mö_cﬂr£_dqs
[i])>>1;

3282 
ãmp
 = (((
max_cﬂr£_dqs
[
i
] + 
mö_cﬂr£_dqs
[i])%2)*4Ë+ ((
max_föe_dqs
[i] + 
mö_föe_dqs
[i])>>1);

3283 i‡(
ãmp
 >= 0x10)

3285 
cﬂr£_dqs
[
i
] ++;

3286 
föe_dqs
[
i
] = (
ãmp
-0x10) +0x8;

3290 
föe_dqs
[
i
] = 
ãmp
;

3292 #i‡(
MAX_TEST_LOOP
 > 1)

3293 
mö_°©i°ic
[
i
][
mö_cﬂr£_dqs
[i]][
mö_föe_dqs
[i]]++;

3294 
max_°©i°ic
[
i
][
max_cﬂr£_dqs
[i]][
max_föe_dqs
[i]]++;

3295 
˚¡î_°©i°ic
[
i
][
cﬂr£_dqs
[i]][
föe_dqs
[i]]++;

3298 
ªg
 = (
cﬂr£_dqs
[1]<<12)|(
föe_dqs
[1]<<8)|(coarse_dqs[0]<<4)|fine_dqs[0];

3300 #i‡
	`deföed
(
MT7628_FPGA_BOARD
Ë|| deföed(
MT7628_ASIC_BOARD
)

3301 
	`RALINK_REG
(
RALINK_MEMCTRL_BASE
+0x10) &= ~(0x1<<4);

3303 
	`RALINK_REG
(
RALINK_MEMCTRL_BASE
+0x18) = &= ~(0x1<<4);

3305 
	`RALINK_REG
(
RALINK_MEMCTRL_BASE
+0x64Ë
ªg
;

3306 
	`RALINK_REG
(
RALINK_MEMCTRL_BASE
+0x48Ë
ddr_cfg2_ªg
;

3307 #i‡
	`deföed
(
MT7628_FPGA_BOARD
Ë|| deföed(
MT7628_ASIC_BOARD
)

3308 
	`RALINK_REG
(
RALINK_MEMCTRL_BASE
+0x10) |= (0x1<<4);

3310 
	`RALINK_REG
(
RALINK_MEMCTRL_BASE
+0x18) |= (0x1<<4);

3313 
ã°_cou¡
++;

3316 
FINAL
:

3317 
j
 = 0; j < 2; j++)

3318 
	`ˇl_debug
("[%02X%02X%02X%02X]",
mö_cﬂr£_dqs
[
j
],
mö_föe_dqs
[j], 
max_cﬂr£_dqs
[j],
max_föe_dqs
[j]);

3319 
	`ˇl_debug
("\nDDR CÆibøti⁄ DQSÑeg = %08X\n",
ªg
);

3322 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_mips/ddr2.h

1 
RALINK_REG
(0xbe005018)=0x08080808;

2 
RALINK_REG
(0xbe005048)=0x0000d10d;

3 
RALINK_REG
(0xbe0050d8)=0x40100900;

4 
RALINK_REG
(0xbe0050f0)=0x00000000;

5 
RALINK_REG
(0xbe0050e4)=0x00000001;

6 
RALINK_REG
(0xbe005090)=0x00000000;

7 
RALINK_REG
(0xbe005094)=0x80000000;

8 
RALINK_REG
(0xbe0050dc)=0x83000000;

9 
RALINK_REG
(0xbe0050e0)=0x1a000000;

10 
RALINK_REG
(0xbe0050f4)=0x01000000;

11 
RALINK_REG
(0xbe0050fc)=0x07100000;

12 
RALINK_REG
(0xbe005168)=0x00000080;

13 
RALINK_REG
(0xbe005130)=0x30000000;

14 
udñay_a
(1*
⁄eu£c
);

15 
RALINK_REG
(0xbe0050d8)=0x40300900;

16 
RALINK_REG
(0xbe005004)=0xf0748661;

17 
RALINK_REG
(0xbe0051ec)=0x00000000;

18 
RALINK_REG
(0xbe00508c)=0x00000000;

19 
RALINK_REG
(0xbe005124)=0x80000000;

20 
RALINK_REG
(0xbe005094)=0x40404040;

21 
RALINK_REG
(0xbe0051c0)=0x00000000;

22 
RALINK_REG
(0xbe00507c)=0x40001273;

23 
RALINK_REG
(0xbe005028)=0xf1200f01;

24 
RALINK_REG
(0xbe005158)=0x00000000;

25 
RALINK_REG
(0xbe0051e0)=0x84000000;

26 
RALINK_REG
(0xbe0050e4)=0x00000005;

27 
udñay_a
(2*
⁄eu£c
);

28 
RALINK_REG
(0xbe005110)=0x00051100;

29 
RALINK_REG
(0xbe0051e4)=0x00000004;

30 
udñay_a
(1*
⁄eu£c
);

31 
RALINK_REG
(0xbe0051e4)=0x00000000;

32 
RALINK_REG
(0xbe005088)=0x00004000;

33 
RALINK_REG
(0xbe0051e4)=0x00000001;

34 
udñay_a
(1*
⁄eu£c
);

35 
RALINK_REG
(0xbe0051e4)=0x00000000;

36 
RALINK_REG
(0xbe005088)=0x00006000;

37 
RALINK_REG
(0xbe0051e4)=0x00000001;

38 
udñay_a
(1*
⁄eu£c
);

39 
RALINK_REG
(0xbe0051e4)=0x00000000;

40 
RALINK_REG
(0xbe005088)=0x00002000;

41 
RALINK_REG
(0xbe0051e4)=0x00000001;

42 
udñay_a
(1*
⁄eu£c
);

43 
RALINK_REG
(0xbe0051e4)=0x00000000;

44 
RALINK_REG
(0xbe005088)=0x00001b63;

45 
RALINK_REG
(0xbe0051e4)=0x00000001;

46 
udñay_a
(1*
⁄eu£c
);

47 
RALINK_REG
(0xbe0051e4)=0x00000000;

48 
RALINK_REG
(0xbe0051e4)=0x00000004;

49 
udñay_a
(1*
⁄eu£c
);

50 
RALINK_REG
(0xbe0051e4)=0x00000000;

51 
RALINK_REG
(0xbe0051e4)=0x00000008;

52 
udñay_a
(1*
⁄eu£c
);

53 
RALINK_REG
(0xbe0051e4)=0x00000000;

54 
RALINK_REG
(0xbe0051e4)=0x00000008;

55 
udñay_a
(1*
⁄eu£c
);

56 
RALINK_REG
(0xbe0051e4)=0x00000000;

57 
RALINK_REG
(0xbe005088)=0x00001a63;

58 
RALINK_REG
(0xbe0051e4)=0x00000001;

59 
udñay_a
(1*
⁄eu£c
);

60 
RALINK_REG
(0xbe0051e4)=0x00000000;

61 
RALINK_REG
(0xbe005088)=0x00002380;

62 
RALINK_REG
(0xbe0051e4)=0x00000001;

63 
udñay_a
(1*
⁄eu£c
);

64 
RALINK_REG
(0xbe0051e4)=0x00000000;

65 
RALINK_REG
(0xbe005088)=0x00002000;

66 
RALINK_REG
(0xbe0051e4)=0x00000001;

67 
udñay_a
(1*
⁄eu£c
);

68 
RALINK_REG
(0xbe0051e4)=0x00000000;

69 
RALINK_REG
(0xbe0051e4)=0x00001100;

70 
RALINK_REG
(0xbe0050e4)=0x00000005;

71 
RALINK_REG
(0xbe00507c)=0x40001273;

72 
RALINK_REG
(0xbe0051dc)=0x15602842;

73 
RALINK_REG
(0xbe00500c)=0x00000000;

74 
RALINK_REG
(0xbe005000)=0x22174441;

75 
RALINK_REG
(0xbe005044)=0x9f0f0481;

76 
RALINK_REG
(0xbe0051e8)=0x00000000;

77 
RALINK_REG
(0xbe005010)=0x00000000;

78 
RALINK_REG
(0xbe0050f8)=0xedcb000f;

79 
RALINK_REG
(0xbe0051d8)=0x00c80008;

80 
RALINK_REG
(0xbe005008)=0x0304692F;

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_mips/ddr3.h

1 
RALINK_REG
(0xbe005018)=0x0e0e0e0e;

2 
RALINK_REG
(0xbe005048)=0x0000d10d;

3 
RALINK_REG
(0xbe0050d8)=0x00100900;

4 
RALINK_REG
(0xbe0050f0)=0x00000000;

5 
udñay_a
(200*
⁄eu£c
);

6 
RALINK_REG
(0xbe0050e4)=0x000000b3;

7 
udñay_a
(500*
⁄eu£c
);

8 
RALINK_REG
(0xbe005090)=0x00000000;

9 
RALINK_REG
(0xbe005094)=0x80000000;

10 
RALINK_REG
(0xbe0050dc)=0x83000000;

11 
RALINK_REG
(0xbe0050e0)=0x14000000;

12 
RALINK_REG
(0xbe0050f4)=0x01000000;

13 
RALINK_REG
(0xbe0050fc)=0x07100000;

14 
RALINK_REG
(0xbe005168)=0x00000080;

15 
RALINK_REG
(0xbe005130)=0x30000000;

16 
udñay_a
(1*
⁄eu£c
);

17 
RALINK_REG
(0xbe0050d8)=0x00300900;

18 
RALINK_REG
(0xbe005004)=0xf07486a1;

19 
RALINK_REG
(0xbe0051ec)=0x00000000;

20 
RALINK_REG
(0xbe00508c)=0x00000000;

21 
RALINK_REG
(0xbe005124)=0x80000000;

22 
RALINK_REG
(0xbe005094)=0x00000000;

23 
RALINK_REG
(0xbe0051c0)=0x00000000;

24 
RALINK_REG
(0xbe00507c)=0xc2872215;

25 
RALINK_REG
(0xbe005028)=0xf1200f01;

26 
RALINK_REG
(0xbe005158)=0x00000000;

27 
RALINK_REG
(0xbe0051e0)=0x8c000000;

28 
RALINK_REG
(0xbe0050e4)=0x000000b7;

29 
udñay_a
(2*
⁄eu£c
);

30 
RALINK_REG
(0xbe005110)=0x00051100;

31 
RALINK_REG
(0xbe005088)=0x00004010;

32 
RALINK_REG
(0xbe0051e4)=0x00000001;

33 
udñay_a
(1*
⁄eu£c
);

34 
RALINK_REG
(0xbe0051e4)=0x00000000;

35 
RALINK_REG
(0xbe005088)=0x00006000;

36 
RALINK_REG
(0xbe0051e4)=0x00000001;

37 
udñay_a
(1*
⁄eu£c
);

38 
RALINK_REG
(0xbe0051e4)=0x00000000;

39 
RALINK_REG
(0xbe005088)=0x00002040;

40 
RALINK_REG
(0xbe0051e4)=0x00000001;

41 
udñay_a
(1*
⁄eu£c
);

42 
RALINK_REG
(0xbe0051e4)=0x00000000;

43 
RALINK_REG
(0xbe005088)=0x00001b61;

44 
RALINK_REG
(0xbe0051e4)=0x00000001;

45 
udñay_a
(1*
⁄eu£c
);

46 
RALINK_REG
(0xbe0051e4)=0x00000000;

47 
RALINK_REG
(0xbe005088)=0x00000400;

48 
RALINK_REG
(0xbe0051e4)=0x00000010;

49 
udñay_a
(1*
⁄eu£c
);

50 
RALINK_REG
(0xbe0051e4)=0x00000000;

51 
udñay_a
(1*
⁄eu£c
);

52 
RALINK_REG
(0xbe0051e4)=0x00001100;

53 
RALINK_REG
(0xbe0050e4)=0x000022b3;

54 
RALINK_REG
(0xbe0051e0)=0x8c000000;

55 
RALINK_REG
(0xbe00507c)=0xc2872211;

56 
RALINK_REG
(0xbe0051dc)=0x15602842;

57 
RALINK_REG
(0xbe00500c)=0x02000000;

58 
RALINK_REG
(0xbe005000)=0x44694683;

59 
RALINK_REG
(0xbe005044)=0x9f060481;

60 
RALINK_REG
(0xbe0051e8)=0x00000210;

61 
RALINK_REG
(0xbe005010)=0x00008888;

62 
RALINK_REG
(0xbe0050f8)=0xedcb000f;

63 
RALINK_REG
(0xbe0051d8)=0x00c80008;

64 
RALINK_REG
(0xbe005008)=0x03046948;

65 
RALINK_REG
(0xbe005200)=0x88888888;

66 
RALINK_REG
(0xbe005204)=0x88888888;

67 
RALINK_REG
(0xbe005208)=0x88888888;

68 
RALINK_REG
(0xbe00520c)=0x88888888;

69 
RALINK_REG
(0xbe005014)=0x00008888;

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_mips/ddr_init.c

1 
	~<comm⁄.h
>

2 
	~<π_mm≠.h
>

4 
	#DRAMC_BASE
 0xBE005000

	)

6 
	#MPLL_IN_LBK
 1

	)

9 
	#MEMPLL_CLK_200
 1

	)

11 
	#udñay_a
(
cou¡
) \

13 
dñay
; \

14 
asm
 vﬁ©ûê–\

	)

20 : "+r" (
dñay
) \

21 : "r" (
cou¡
) \

25 
	$ddr_öôülize
()

27 
⁄eu£c
 = 25;

29 #i‡
	`deföed
 (
FPGA_BOARD
)

30 
	`RALINK_REG
(0xbe005110)=0x00051100;

31 
	`RALINK_REG
(0xbe00507c)=0xb18731b5;

32 
	`RALINK_REG
(0xbe005048)=0x0000110d;

33 
	`RALINK_REG
(0xbe0050d8)=0x00100900;

34 
	`RALINK_REG
(0xbe0050e4)=0x000000a3;

35 
	`RALINK_REG
(0xbe00508c)=0x00000001;

36 
	`RALINK_REG
(0xbe005090)=0x00000000;

37 
	`RALINK_REG
(0xbe005094)=0x80000000;

38 
	`RALINK_REG
(0xbe0050dc)=0x83040040;

39 
	`RALINK_REG
(0xbe0050e0)=0x10040040;

40 
	`RALINK_REG
(0xbe0050f0)=0x00000000;

41 
	`RALINK_REG
(0xbe0050f4)=0x01000000;

42 
	`RALINK_REG
(0xbe005168)=0x00000080;

43 
	`RALINK_REG
(0xbe005130)=0x30000000;

44 
	`RALINK_REG
(0xbe0050d8)=0x00300900;

45 
	`RALINK_REG
(0xbe005004)=0xf0748663;

46 
	`RALINK_REG
(0xbe005124)=0x80000011;

47 
	`RALINK_REG
(0xbe005094)=0x40404040;

48 
	`RALINK_REG
(0xbe0051c0)=0x8000c8b8;

49 
	`RALINK_REG
(0xbe00507c)=0xb18711b5;

50 
	`RALINK_REG
(0xbe005028)=0xf1200f01;

51 
	`RALINK_REG
(0xbe0051e0)=0xa8000000;

52 
	`RALINK_REG
(0xbe005158)=0x00000000;

53 
	`RALINK_REG
(0xbe005004)=0xf07402e2;

54 
	`RALINK_REG
(0xbe0050e4)=0x000000a7;

56 
	`udñay_a
(
⁄eu£c
);

58 
	`RALINK_REG
(0xbe005088)=0x00004008;

59 
	`RALINK_REG
(0xbe0051e4)=0x00000001;

61 
	`udñay_a
(
⁄eu£c
);

63 
	`RALINK_REG
(0xbe0051e4)=0x00000000;

64 
	`RALINK_REG
(0xbe005088)=0x00006000;

65 
	`RALINK_REG
(0xbe0051e4)=0x00000001;

67 
	`udñay_a
(
⁄eu£c
);

69 
	`RALINK_REG
(0xbe0051e4)=0x00000000;

70 
	`RALINK_REG
(0xbe005088)=0x00002000;

71 
	`RALINK_REG
(0xbe0051e4)=0x00000001;

73 
	`udñay_a
(
⁄eu£c
);

75 
	`RALINK_REG
(0xbe0051e4)=0x00000000;

76 
	`RALINK_REG
(0xbe005088)=0x00000121;

77 
	`RALINK_REG
(0xbe0051e4)=0x00000001;

79 
	`udñay_a
(
⁄eu£c
);

81 
	`RALINK_REG
(0xbe0051e4)=0x00000000;

82 
	`RALINK_REG
(0xbe005088)=0x00000400;

83 
	`RALINK_REG
(0xbe0051e4)=0x00000010;

85 
	`udñay_a
(
⁄eu£c
);

87 
	`RALINK_REG
(0xbe0051e4)=0x00000000;

88 
	`RALINK_REG
(0xbe0051e4)=0x00001100;

90 
	`udñay_a
(
⁄eu£c
);

92 
	`RALINK_REG
(0xbe0051e4)=0x00000004;

94 
	`udñay_a
(
⁄eu£c
);

96 
	`RALINK_REG
(0xbe0051e4)=0x00000000;

97 
	`RALINK_REG
(0xbe0051e4)=0x00000008;

99 
	`udñay_a
(
⁄eu£c
);

101 
	`RALINK_REG
(0xbe0051e4)=0x00000000;

102 
	`RALINK_REG
(0xbe005088)=0x00002001;

103 
	`RALINK_REG
(0xbe0051e4)=0x00000001;

105 
	`udñay_a
(
⁄eu£c
);

107 
	`RALINK_REG
(0xbe0051e4)=0x00000000;

108 
	`RALINK_REG
(0xbe0051e4)=0x00000004;

110 
	`udñay_a
(
⁄eu£c
);

112 
	`RALINK_REG
(0xbe0051e4)=0x00000000;

113 
	`RALINK_REG
(0xbe0051e4)=0x00000008;

115 
	`udñay_a
(
⁄eu£c
);

117 
	`RALINK_REG
(0xbe0051e4)=0x00000000;

118 
	`RALINK_REG
(0xbe0050e4)=0x000007a3;

119 
	`RALINK_REG
(0xbe0051e0)=0x88000000;

120 
	`RALINK_REG
(0xbe005088)=0x0000ffff;

121 
	`RALINK_REG
(0xbe0051e4)=0x00000020;

123 
	`udñay_a
(
⁄eu£c
);

125 
	`RALINK_REG
(0xbe0051e4)=0x00000000;

126 
	`RALINK_REG
(0xbe0051dc)=0x106b2842;

127 
	`RALINK_REG
(0xbe005004)=0xf0748653;

129 
	`RALINK_REG
(0xbe00500c)=0x00000000;

130 
	`RALINK_REG
(0xbe005000)=0x00054411;

131 
	`RALINK_REG
(0xbe005044)=0xa8800401;

132 
	`RALINK_REG
(0xbe0051e8)=0x00000600;

133 
	`RALINK_REG
(0xbe005008)=0x00047905;

134 
	`RALINK_REG
(0xbe005010)=0x00000000;

135 
	`RALINK_REG
(0xbe0050f8)=0xedcb000f;

136 
	`RALINK_REG
(0xbe0050fc)=0x27010000;

137 
	`RALINK_REG
(0xbe0051d8)=0x00c80008;

140 i‡((
	`RALINK_REG
(0xBE000010)>>4)&0x1)

142 
	~"ddr2.h
"

146 
	~"ddr3.h
"

149 
	}
}

151 
	$mem∂l_öô
()

153 
⁄eu£c
 = 25;

154 
	~"m∂l40Mhz.h
"

156 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_mips/libgcc.h

1 #i‚de‡
__ASM_LIBGCC_H


2 
	#__ASM_LIBGCC_H


	)

4 
	~<asm/byã‹dî.h
>

6 
	tw‹d_ty≥
 
	t__©åibuã__
 ((
	tmode
 (
	t__w‹d__
)));

8 #ifde‡
__BIG_ENDIAN


9 
	sDW°ru˘
 {

10 
	mhigh
, 
	mlow
;

12 #ñi‡
deföed
(
__LITTLE_ENDIAN
)

13 
	sDW°ru˘
 {

14 
	mlow
, 
	mhigh
;

17 #îr‹ 
I
 
„ñ
 
sick
.

21 
DW°ru˘
 
	ms
;

22 
	mŒ
;

23 } 
	tDWuni⁄
;

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_mips/lshrdi3.c

3 
	~"libgcc.h
"

5 
	$__lshrdi3
(
u
, 
w‹d_ty≥
 
b
)

7 
DWuni⁄
 
uu
, 
w
;

8 
w‹d_ty≥
 
bm
;

10 i‡(
b
 == 0)

11  
u
;

13 
uu
.
Œ
 = 
u
;

14 
bm
 = 32 - 
b
;

16 i‡(
bm
 <= 0) {

17 
w
.
s
.
high
 = 0;

18 
w
.
s
.
low
 = (Ë
uu
.s.
high
 >> -
bm
;

20 c⁄° 
ˇºõs
 = (Ë
uu
.
s
.
high
 << 
bm
;

22 
w
.
s
.
high
 = (Ë
uu
.s.high >> 
b
;

23 
w
.
s
.
low
 = ((Ë
uu
.s.low >> 
b
Ë| 
ˇºõs
;

26  
w
.
Œ
;

27 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_mips/mips_linux.c

24 
	~<comm⁄.h
>

25 
	~<comm™d.h
>

26 
	~<image.h
>

27 
	~<zlib.h
>

28 
	~<asm/byã‹dî.h
>

29 
	~<asm/addr•a˚.h
>

31 
	#LINUX_MAX_ENVS
 256

	)

32 
	#LINUX_MAX_ARGS
 256

	)

34 #ifde‡
CONFIG_SHOW_BOOT_PROGRESS


35 
	~<°©us_Àd.h
>

36 
	#SHOW_BOOT_PROGRESS
(
¨g
Ë
	`show_boŸ_¥ogªss
◊rg)

	)

38 
	#SHOW_BOOT_PROGRESS
(
¨g
)

	)

41 
image_hódî_t
 
hódî
;

43 
do_ª£t
 (
cmd_tbl_t
 *
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[]);

45 
	glöux_¨gc
;

46 ** 
	glöux_¨gv
;

48 ** 
	glöux_ív
;

49 * 
	glöux_ív_p
;

50 
	glöux_ív_idx
;

52 
löux_∑øms_öô
 (
ul⁄g
 
°¨t
, * 
comm™dlöe
);

53 
löux_ív_£t
 (* 
ív_«me
, * 
ív_vÆ
);

56 
	$do_boŸm_löux
 (
cmd_tbl_t
 * 
cmdç
, 
Êag
, 
¨gc
, *
¨gv
[],

57 
ul⁄g
 
addr
, ul⁄g * 
Àn_±r
, 
vîify
)

59 
DECLARE_GLOBAL_DATA_PTR
;

61 
ul⁄g
 
Àn
 = 0, 
checksum
;

62 
ul⁄g
 
öôrd_°¨t
, 
öôrd_íd
;

63 
ul⁄g
 
d©a
;

64 (*
theKî√l
) (, **, **, *);

65 
image_hódî_t
 *
hdr
 = &
hódî
;

66 *
comm™dlöe
 = 
	`gëív
 ("bootargs");

67 
ív_buf
[12];

68 
i
;

70 
theKî√l
 =

71 ((*)(, **, **, *)Ë
	`¡ohl
 (
hdr
->
ih_ï
);

76 i‡(
¨gc
 >= 3) {

77 
	`SHOW_BOOT_PROGRESS
 (9);

79 
addr
 = 
	`sim∂e_°πoul
 (
¨gv
[2], 
NULL
, 16);

81 
	`¥ötf
 ("## Lﬂdög Ramdisk Imagê© %08lx ...\n", 
addr
);

84 
	`mem˝y
 (&
hódî
, (*Ë
addr
,  (
image_hódî_t
));

86 i‡(
	`¡ohl
 (
hdr
->
ih_magic
Ë!
IH_MAGIC
) {

87 
	`¥ötf
 ("Bad Magic Number\n");

88 
	`SHOW_BOOT_PROGRESS
 (-10);

89 
	`do_ª£t
 (
cmdç
, 
Êag
, 
¨gc
, 
¨gv
);

92 
d©a
 = (
ul⁄g
Ë& 
hódî
;

93 
Àn
 =  (
image_hódî_t
);

95 
checksum
 = 
	`¡ohl
 (
hdr
->
ih_h¸c
);

96 
hdr
->
ih_h¸c
 = 0;

98 i‡(
	`¸c32
 (0, (*Ë
d©a
, 
Àn
Ë!
checksum
) {

99 
	`¥ötf
 ("Bad Header Checksum\n");

100 
	`SHOW_BOOT_PROGRESS
 (-11);

101 
	`do_ª£t
 (
cmdç
, 
Êag
, 
¨gc
, 
¨gv
);

104 
	`SHOW_BOOT_PROGRESS
 (10);

106 
	`¥öt_image_hdr
 (
hdr
);

108 
d©a
 = 
addr
 +  (
image_hódî_t
);

109 
Àn
 = 
	`¡ohl
 (
hdr
->
ih_size
);

111 i‡(
vîify
) {

112 
ul⁄g
 
csum
 = 0;

114 
	`¥ötf
 (" Verifying Checksum ... ");

115 
csum
 = 
	`¸c32
 (0, (*Ë
d©a
, 
Àn
);

116 i‡(
csum
 !
	`¡ohl
 (
hdr
->
ih_d¸c
)) {

117 
	`¥ötf
 ("Bad Data CRC\n");

118 
	`SHOW_BOOT_PROGRESS
 (-12);

119 
	`do_ª£t
 (
cmdç
, 
Êag
, 
¨gc
, 
¨gv
);

121 
	`¥ötf
 ("OK\n");

124 
	`SHOW_BOOT_PROGRESS
 (11);

126 i‡((
hdr
->
ih_os
 !
IH_OS_LINUX
) ||

127 (
hdr
->
ih_¨ch
 !
IH_CPU_MIPS
) ||

128 (
hdr
->
ih_ty≥
 !
IH_TYPE_RAMDISK
)) {

129 
	`¥ötf
 ("No Linux MIPS Ramdisk Image\n");

130 
	`SHOW_BOOT_PROGRESS
 (-13);

131 
	`do_ª£t
 (
cmdç
, 
Êag
, 
¨gc
, 
¨gv
);

137 } i‡((
hdr
->
ih_ty≥
 =
IH_TYPE_MULTI
Ë&& (
Àn_±r
[1])) {

138 
ul⁄g
 
èû
 = 
	`¡ohl
 (
Àn_±r
[0]) % 4;

139 
i
;

141 
	`SHOW_BOOT_PROGRESS
 (13);

144 
d©a
 = (
ul⁄g
Ë(&
Àn_±r
[2]);

146 
i
 = 1; 
Àn_±r
[i]; ++i)

147 
d©a
 += 4;

149 
d©a
 +
	`¡ohl
 (
Àn_±r
[0]);

150 i‡(
èû
) {

151 
d©a
 +4 - 
èû
;

154 
Àn
 = 
	`¡ohl
 (
Àn_±r
[1]);

160 
	`SHOW_BOOT_PROGRESS
 (14);

162 
d©a
 = 0;

165 #ifdef 
DEBUG


166 i‡(!
d©a
) {

167 
	`¥ötf
 ("No initrd\n");

171 i‡(
d©a
) {

172 
öôrd_°¨t
 = 
d©a
;

173 
öôrd_íd
 = 
öôrd_°¨t
 + 
Àn
;

175 
öôrd_°¨t
 = 0;

176 
öôrd_íd
 = 0;

179 
	`SHOW_BOOT_PROGRESS
 (15);

181 #ifde‡
DEBUG


182 
	`¥ötf
 ("## Transferring controlÅo Linux (atáddress %08lx) ...\n",

183 (
ul⁄g
Ë
theKî√l
);

186 
	`löux_∑øms_öô
 (
	`UNCACHED_SDRAM
 (
gd
->
bd
->
bi_boŸ_∑øms
), 
comm™dlöe
);

188 #ifde‡
CONFIG_MEMSIZE_IN_BYTES


189 
	`•rötf
 (
ív_buf
, "%lu", 
gd
->
øm_size
);

190 #ifde‡
DEBUG


191 
	`¥ötf
 ("## GivögÜöux memsizêö byãs, %lu\n", 
gd
->
øm_size
);

194 
	`•rötf
 (
ív_buf
, "%lu", 
gd
->
øm_size
 >> 20);

195 #ifde‡
DEBUG


196 
	`¥ötf
 ("## GivögÜöux memsizêö MB, %lu\n", 
gd
->
øm_size
 >> 20);

200 
	`löux_ív_£t
 ("memsize", 
ív_buf
);

202 
	`•rötf
 (
ív_buf
, "0x%08X", (
uöt
Ë
	`UNCACHED_SDRAM
 (
öôrd_°¨t
));

203 
	`löux_ív_£t
 ("öôrd_°¨t", 
ív_buf
);

205 
	`•rötf
 (
ív_buf
, "0x%X", (
uöt
Ë(
öôrd_íd
 - 
öôrd_°¨t
));

206 
	`löux_ív_£t
 ("öôrd_size", 
ív_buf
);

208 
	`•rötf
 (
ív_buf
, "0x%08X", (
uöt
Ë(
gd
->
bd
->
bi_Êash°¨t
));

209 
	`löux_ív_£t
 ("Êash_°¨t", 
ív_buf
);

211 
	`•rötf
 (
ív_buf
, "0x%X", (
uöt
Ë(
gd
->
bd
->
bi_Êashsize
));

212 
	`löux_ív_£t
 ("Êash_size", 
ív_buf
);

214 
i
 = 1; i < 
löux_¨gc
; i++)

215 
löux_¨gv
[
i
] = 
	`KSEG0ADDR
(linux_argv[i]);

216 
löux_¨gv
 = 
	`KSEG0ADDR
(linux_argv);

217 
i
 = 0; i < 
löux_ív_idx
; i++)

218 
löux_ív
[
i
] = 
	`KSEG0ADDR
(linux_env[i]);

219 
löux_ív
 = 
	`KSEG0ADDR
(linux_env);

222 
	`¥ötf
 ("\nStarting kernel ...\n\n");

224 
	`theKî√l
 (
löux_¨gc
, 
löux_¨gv
, 
löux_ív
, 0);

225 
	}
}

227 
	$löux_∑øms_öô
 (
ul⁄g
 
°¨t
, *
löe
)

229 *
√xt
, *
quŸe
, *
¨gp
;

231 
löux_¨gc
 = 1;

232 
löux_¨gv
 = (**Ë
°¨t
;

233 
löux_¨gv
[0] = 0;

234 
¨gp
 = (*Ë(
löux_¨gv
 + 
LINUX_MAX_ARGS
);

236 
√xt
 = 
löe
;

238 
löe
 && *löê&& 
löux_¨gc
 < 
LINUX_MAX_ARGS
) {

239 
quŸe
 = 
	`°rchr
 (
löe
, '"');

240 
√xt
 = 
	`°rchr
 (
löe
, ' ');

242 
√xt
 !
NULL
 && 
quŸe
 != NULL && quote <Çext) {

246 
√xt
 = 
	`°rchr
 (
quŸe
 + 1, '"');

247 i‡(
√xt
 !
NULL
) {

248 
quŸe
 = 
	`°rchr
 (
√xt
 + 1, '"');

249 
√xt
 = 
	`°rchr
 (next + 1, ' ');

253 i‡(
√xt
 =
NULL
) {

254 
√xt
 = 
löe
 + 
	`°æí
 (line);

257 
löux_¨gv
[
löux_¨gc
] = 
¨gp
;

258 
	`mem˝y
 (
¨gp
, 
löe
, 
√xt
 -Üine);

259 
¨gp
[
√xt
 - 
löe
] = 0;

261 
¨gp
 +
√xt
 - 
löe
 + 1;

262 
löux_¨gc
++;

264 i‡(*
√xt
)

265 
√xt
++;

267 
löe
 = 
√xt
;

270 
löux_ív
 = (**Ë(((
ul⁄g
Ë
¨gp
 + 15) & ~15);

271 
löux_ív
[0] = 0;

272 
löux_ív_p
 = (*Ë(
löux_ív
 + 
LINUX_MAX_ENVS
);

273 
löux_ív_idx
 = 0;

274 
	}
}

276 
	$löux_ív_£t
 (*
ív_«me
, *
ív_vÆ
)

278 i‡(
löux_ív_idx
 < 
LINUX_MAX_ENVS
 - 1) {

279 
löux_ív
[
löux_ív_idx
] = 
löux_ív_p
;

281 
	`°r˝y
 (
löux_ív_p
, 
ív_«me
);

282 
löux_ív_p
 +
	`°æí
 (
ív_«me
);

284 
	`°r˝y
 (
löux_ív_p
, "=");

285 
löux_ív_p
 += 1;

287 
	`°r˝y
 (
löux_ív_p
, 
ív_vÆ
);

288 
löux_ív_p
 +
	`°æí
 (
ív_vÆ
);

290 
löux_ív_p
++;

291 
löux_ív
[++
löux_ív_idx
] = 0;

293 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_mips/mpll.h

1 
RALINK_REG
(0xbe005648)=0xc0005ab2;

2 
RALINK_REG
(0xbe005640)=0x00000223;

3 
RALINK_REG
(0xbe005604)=0x00040002;

4 
udñay_a
(1*
⁄eu£c
);

5 
RALINK_REG
(0xbe005604)=0x00040003;

6 
udñay_a
(2*
⁄eu£c
);

7 
RALINK_REG
(0xbe005600)=0x0c041981;

8 
RALINK_REG
(0xbe005600)=0x0e041981;

9 
udñay_a
(20*
⁄eu£c
);

10 
RALINK_REG
(0xbe00560c)=0x00080440;

11 
RALINK_REG
(0xbe00560c)=0x00090440;

12 
udñay_a
(2*
⁄eu£c
);

13 
RALINK_REG
(0xbe005600)=0x0e041985;

14 
udñay_a
(20*
⁄eu£c
);

15 i‡(((
RALINK_REG
(0xBE000010)>>6)&0x7)<3) {

17 
RALINK_REG
(0xbe005604)=0x00040101;

18 
udñay_a
(1*
⁄eu£c
);

19 
RALINK_REG
(0xbe005648)=0xc0004ab2;

20 #i‡
deföed
 (
MEMPLL_CLK_600
)

21 
RALINK_REG
(0xbe005618)=0xc00008f8;

22 
RALINK_REG
(0xbe005624)=0xc00008f8;

23 
RALINK_REG
(0xbe005630)=0xc00008f8;

24 
RALINK_REG
(0xbe005618)=0xc20008f8;

25 
RALINK_REG
(0xbe005624)=0xc20008f8;

26 
RALINK_REG
(0xbe005630)=0xc20008f8;

27 #ñi‡
deföed
 (
MEMPLL_CLK_400
)

28 
RALINK_REG
(0xbe005618)=0xc00008ab;

29 
RALINK_REG
(0xbe005624)=0xc00008ab;

30 
RALINK_REG
(0xbe005630)=0xc00008ab;

31 
RALINK_REG
(0xbe005618)=0xc20008ab;

32 
RALINK_REG
(0xbe005624)=0xc20008ab;

33 
RALINK_REG
(0xbe005630)=0xc20008ab;

34 #ñi‡
deföed
 (
MEMPLL_CLK_200
)

35 
RALINK_REG
(0xbe005618)=0xc400085a;

36 
RALINK_REG
(0xbe005624)=0xc400085a;

37 
RALINK_REG
(0xbe005630)=0xc400085a;

38 
RALINK_REG
(0xbe005618)=0xc600085a;

39 
RALINK_REG
(0xbe005624)=0xc600085a;

40 
RALINK_REG
(0xbe005630)=0xc600085a;

44 
RALINK_REG
(0xbe005648)=0xc0004ab2;

45 
udñay_a
(20*
⁄eu£c
);

46 
RALINK_REG
(0xbe005640)=0x00000233;

47 }i‡(((
RALINK_REG
(0xBE000010)>>6)&0x7)<6) {

49 
RALINK_REG
(0xbe005604)=0x00040103;

50 
udñay_a
(1*
⁄eu£c
);

51 
RALINK_REG
(0xbe005648)=0xc0005ab2;

52 #i‡
deföed
 (
MPLL_IN_LBK
)

54 #i‡
deföed
 (
MEMPLL_CLK_600
)

55 
RALINK_REG
(0xbe005618)=0xc00009e2;

56 
RALINK_REG
(0xbe005624)=0xc00009e2;

57 
RALINK_REG
(0xbe005630)=0xc00009e2;

58 
RALINK_REG
(0xbe005618)=0xc20009e2;

59 
RALINK_REG
(0xbe005624)=0xc20009e2;

60 
RALINK_REG
(0xbe005630)=0xc20009e2;

61 #ñi‡
deföed
 (
MEMPLL_CLK_400
)

62 
RALINK_REG
(0xbe005618)=0xc0000942;

63 
RALINK_REG
(0xbe005624)=0xc0000942;

64 
RALINK_REG
(0xbe005630)=0xc0000942;

65 
RALINK_REG
(0xbe005618)=0xc2000942;

66 
RALINK_REG
(0xbe005624)=0xc2000942;

67 
RALINK_REG
(0xbe005630)=0xc2000942;

68 #ñi‡
deföed
 (
MEMPLL_CLK_200
)

69 
RALINK_REG
(0xbe005618)=0xc4000942;

70 
RALINK_REG
(0xbe005624)=0xc4000942;

71 
RALINK_REG
(0xbe005630)=0xc4000942;

72 
RALINK_REG
(0xbe005618)=0xc6000942;

73 
RALINK_REG
(0xbe005624)=0xc6000942;

74 
RALINK_REG
(0xbe005630)=0xc6000942;

78 
RALINK_REG
(0xbe005648)=0xc2005ab2;

79 
udñay_a
(20*
⁄eu£c
);

80 
RALINK_REG
(0xbe005640)=0x00000233;

82 #i‡
deföed
 (
MEMPLL_CLK_600
)

83 
RALINK_REG
(0xbe005618)=0xc00008fa;

84 
RALINK_REG
(0xbe005624)=0xc00008fa;

85 
RALINK_REG
(0xbe005630)=0xc00008fa;

86 
RALINK_REG
(0xbe005624)=0xc20008fa;

87 
RALINK_REG
(0xbe005630)=0xc20008fa;

88 #ñi‡
deföed
 (
MEMPLL_CLK_400
)

89 
RALINK_REG
(0xbe005618)=0xc00008aa;

90 
RALINK_REG
(0xbe005624)=0xc00008aa;

91 
RALINK_REG
(0xbe005630)=0xc00008aa;

92 
RALINK_REG
(0xbe005618)=0xc20008aa;

93 
RALINK_REG
(0xbe005624)=0xc20008aa;

94 
RALINK_REG
(0xbe005630)=0xc20008aa;

95 #ñi‡
deföed
 (
MEMPLL_CLK_200
)

96 
RALINK_REG
(0xbe005618)=0xc400085a;

97 
RALINK_REG
(0xbe005624)=0xc400085a;

98 
RALINK_REG
(0xbe005630)=0xc400085a;

99 
RALINK_REG
(0xbe005618)=0xc600085a;

100 
RALINK_REG
(0xbe005624)=0xc600085a;

101 
RALINK_REG
(0xbe005630)=0xc600085a;

105 
RALINK_REG
(0xbe005648)=0xc2005ab2;

106 
udñay_a
(20*
⁄eu£c
);

107 
RALINK_REG
(0xbe005640)=0x00000233;

111 
RALINK_REG
(0xbe005604)=0x00040101;

112 
udñay_a
(1*
⁄eu£c
);

113 
RALINK_REG
(0xbe005648)=0xc0004a22;

114 #i‡
deföed
 (
MEMPLL_CLK_600
)

115 
RALINK_REG
(0xbe005618)=0xc00008c8;

116 
RALINK_REG
(0xbe005624)=0xc00008c8;

117 
RALINK_REG
(0xbe005630)=0xc00008c8;

118 
RALINK_REG
(0xbe005618)=0xc20008c8;

119 
RALINK_REG
(0xbe005624)=0xc20008c8;

120 
RALINK_REG
(0xbe005630)=0xc20008c8;

121 #ñi‡
deföed
 (
MEMPLL_CLK_400
)

122 
RALINK_REG
(0xbe005618)=0xc000088a;

123 
RALINK_REG
(0xbe005624)=0xc000088a;

124 
RALINK_REG
(0xbe005630)=0xc000088a;

125 
RALINK_REG
(0xbe005618)=0xc200088a;

126 
RALINK_REG
(0xbe005624)=0xc200088a;

127 
RALINK_REG
(0xbe005630)=0xc200088a;

128 #ñi‡
deföed
 (
MEMPLL_CLK_200
)

129 
RALINK_REG
(0xbe005618)=0xc400084a;

130 
RALINK_REG
(0xbe005624)=0xc400084a;

131 
RALINK_REG
(0xbe005630)=0xc400084a;

132 
RALINK_REG
(0xbe005618)=0xc600084a;

133 
RALINK_REG
(0xbe005624)=0xc600084a;

134 
RALINK_REG
(0xbe005630)=0xc600084a;

138 
RALINK_REG
(0xbe005648)=0xc2004a22;

139 
udñay_a
(20*
⁄eu£c
);

140 
RALINK_REG
(0xbe005640)=0x00000233;

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_mips/mpll40Mhz.h

1 
RALINK_REG
(0xbe005648)=0xc0005ab2;

2 
RALINK_REG
(0xbe005640)=0x00000223;

3 
RALINK_REG
(0xbe005604)=0x00040002;

4 
udñay_a
(1*
⁄eu£c
);

5 
RALINK_REG
(0xbe005604)=0x00040003;

6 
udñay_a
(2*
⁄eu£c
);

7 
RALINK_REG
(0xbe005600)=0x0c041981;

8 
RALINK_REG
(0xbe005600)=0x0e041981;

9 
udñay_a
(20*
⁄eu£c
);

10 
RALINK_REG
(0xbe00560c)=0x00080440;

11 
RALINK_REG
(0xbe00560c)=0x00090440;

12 
udñay_a
(2*
⁄eu£c
);

13 
RALINK_REG
(0xbe005600)=0x0e041985;

14 
udñay_a
(20*
⁄eu£c
);

16 
RALINK_REG
(0xbe005604)=0x00040103;

17 
udñay_a
(1*
⁄eu£c
);

18 
RALINK_REG
(0xbe005648)=0xc0005ab2;

19 #i‡
deföed
 (
MPLL_IN_LBK
)

21 #i‡
deföed
 (
MEMPLL_CLK_600
)

22 
RALINK_REG
(0xbe005618)=0xc00009e2;

23 
RALINK_REG
(0xbe005624)=0xc00009e2;

24 
RALINK_REG
(0xbe005630)=0xc00009e2;

25 
RALINK_REG
(0xbe005618)=0xc20009e2;

26 
RALINK_REG
(0xbe005624)=0xc20009e2;

27 
RALINK_REG
(0xbe005630)=0xc20009e2;

28 #ñi‡
deföed
 (
MEMPLL_CLK_400
)

29 
RALINK_REG
(0xbe005618)=0xc0000942;

30 
RALINK_REG
(0xbe005624)=0xc0000942;

31 
RALINK_REG
(0xbe005630)=0xc0000942;

32 
RALINK_REG
(0xbe005618)=0xc2000942;

33 
RALINK_REG
(0xbe005624)=0xc2000942;

34 
RALINK_REG
(0xbe005630)=0xc2000942;

35 #ñi‡
deföed
 (
MEMPLL_CLK_200
)

36 
RALINK_REG
(0xbe005618)=0xc4000942;

37 
RALINK_REG
(0xbe005624)=0xc4000942;

38 
RALINK_REG
(0xbe005630)=0xc4000942;

39 
RALINK_REG
(0xbe005618)=0xc6000942;

40 
RALINK_REG
(0xbe005624)=0xc6000942;

41 
RALINK_REG
(0xbe005630)=0xc6000942;

45 
RALINK_REG
(0xbe005648)=0xc2005ab2;

46 
udñay_a
(20*
⁄eu£c
);

47 
RALINK_REG
(0xbe005640)=0x00000233;

49 #i‡
deföed
 (
MEMPLL_CLK_600
)

50 
RALINK_REG
(0xbe005618)=0xc00008fa;

51 
RALINK_REG
(0xbe005624)=0xc00008fa;

52 
RALINK_REG
(0xbe005630)=0xc00008fa;

53 
RALINK_REG
(0xbe005624)=0xc20008fa;

54 
RALINK_REG
(0xbe005630)=0xc20008fa;

55 #ñi‡
deföed
 (
MEMPLL_CLK_400
)

56 
RALINK_REG
(0xbe005618)=0xc00008aa;

57 
RALINK_REG
(0xbe005624)=0xc00008aa;

58 
RALINK_REG
(0xbe005630)=0xc00008aa;

59 
RALINK_REG
(0xbe005618)=0xc20008aa;

60 
RALINK_REG
(0xbe005624)=0xc20008aa;

61 
RALINK_REG
(0xbe005630)=0xc20008aa;

62 #ñi‡
deföed
 (
MEMPLL_CLK_200
)

63 
RALINK_REG
(0xbe005618)=0xc400085a;

64 
RALINK_REG
(0xbe005624)=0xc400085a;

65 
RALINK_REG
(0xbe005630)=0xc400085a;

66 
RALINK_REG
(0xbe005618)=0xc600085a;

67 
RALINK_REG
(0xbe005624)=0xc600085a;

68 
RALINK_REG
(0xbe005630)=0xc600085a;

72 
RALINK_REG
(0xbe005648)=0xc2005ab2;

73 
udñay_a
(20*
⁄eu£c
);

74 
RALINK_REG
(0xbe005640)=0x00000233;

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_mips/time.c

24 
	~<comm⁄.h
>

26 
mùs_˝u_„q
;

28 
__©åibuã__
((
nomùs16
)Ë
	$mùs_com∑ª_£t
(
u32
 
v
)

30 
asm
 vﬁ©ûê("mtc0 %0, $11" : : "r" (
v
));

31 
	}
}

33 
__©åibuã__
((
nomùs16
)Ë
	$mùs_cou¡_£t
(
u32
 
v
)

35 
asm
 vﬁ©ûê("mtc0 %0, $9" : : "r" (
v
));

36 
	}
}

38 
__©åibuã__
((
nomùs16
)Ë
u32
 
	$mùs_cou¡_gë
()

40 
u32
 
cou¡
;

42 
asm
 vﬁ©ûê("mfc0 %0, $9" : "Ù" (
cou¡
) :);

43  
cou¡
;

44 
	}
}

49 
__©åibuã__
((
nomùs16
)Ë
	$timî_öô
()

52 
	`mùs_com∑ª_£t
(0);

53 
	`mùs_cou¡_£t
(0);

56 
	}
}

59 
__©åibuã__
((
nomùs16
)Ë
ul⁄g
 
	$gë_timî
(
ul⁄g
 
ba£
)

62  
	`mùs_cou¡_gë
(Ë- 
ba£
;

63 
	}
}

66 
__©åibuã__
((
nomùs16
)Ë
	$udñay
 (
u£c
)

68 
ul⁄g
 
tmo
;

69 
ul⁄g
 
°¨t
 = 
	`gë_timî
(0);

71 
tmo
 = 
u£c
 * ((
mùs_˝u_„q
/2) / 1000000);

72 (
ul⁄g
)((
	`mùs_cou¡_gë
(Ë- 
°¨t
)Ë< 
tmo
)

74 
	}
}

76 
__©åibuã__
((
nomùs16
)Ë
	$mdñay
(
m£c
)

78 
m£c
--)

79 
	`udñay
(1000);

80 
	}
}

87 
	$gë_ticks
()

89  
	`mùs_cou¡_gë
();

90 
	}
}

96 
ul⁄g
 
	$gë_tb˛k
()

98  
CFG_HZ
;

99 
	}
}

101 
	$ª£t_timî
()

103 
	`mùs_cou¡_£t
(0);

104 
	}
}

106 
	$£t_timî
(
ul⁄g
 
t
)

108 
	`mùs_cou¡_£t
(
t
);

109 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/net/bootp.c

12 
	#DEBUG
 1

	)

13 
	#DEBUG_BOOTP_EXT
 1

	)

16 #ifde‡
DEBUG_BOOTP_EXT


17 
	#debug_ext
(
fmt
,
¨gs
...Ë
	`¥ötf
 (fmà,##¨gs)

	)

19 
	#debug_ext
(
fmt
,
¨gs
...)

	)

22 
	~<comm⁄.h
>

23 
	~<comm™d.h
>

24 
	~<√t.h
>

25 
	~"boŸp.h
"

26 
	~"t·p.h
"

28 #ifde‡
CONFIG_STATUS_LED


29 
	~<°©us_Àd.h
>

32 
	#BOOTP_VENDOR_MAGIC
 0x63825363

	)

34 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_NET
)

36 
	#TIMEOUT
 5

	)

37 #i‚de‡
CONFIG_NET_RETRY_COUNT


38 
	#TIMEOUT_COUNT
 5

	)

40 
	#TIMEOUT_COUNT
 (
CONFIG_NET_RETRY_COUNT
)

	)

43 
	#PORT_BOOTPS
 67

	)

44 
	#PORT_BOOTPC
 68

	)

46 #i‚de‡
CONFIG_DHCP_MIN_EXT_LEN


47 
	#CONFIG_DHCP_MIN_EXT_LEN
 64

	)

50 
ul⁄g
 
	gBoŸpID
;

51 
	gBoŸpTry
;

52 #ifde‡
CONFIG_BOOTP_RANDOM_DELAY


53 
ul⁄g
 
	g£ed1
, 
	g£ed2
;

56 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_DHCP
)

57 
dh˝_°©e_t
 
	gdh˝_°©e
 = 
INIT
;

58 
	gdh˝_Àa£time
 = 0;

59 
IPaddr_t
 
	gNëDHCPSîvîIP
 = 0;

60 
Dh˝H™dÀr
(
uch¨
 * 
pkt
, 
de°
, 
§c
, 
Àn
);

64 *
	$dh˝msg2°r
(
ty≥
)

66 
ty≥
) {

76 
	}
}

79 #i‡(
CONFIG_BOOTP_MASK
 & 
CONFIG_BOOTP_VENDOREX
)

80 
u8
 *
dh˝_víd‹ex_¥ï
 (u8 *
e
);

81 
u8
 *
dh˝_víd‹ex_¥oc
 (u8 *
e
);

86 
	$BoŸpCheckPkt
(
uch¨
 *
pkt
, 
de°
, 
§c
, 
Àn
)

88 
BoŸp_t
 *
bp
 = (BoŸp_à*Ë
pkt
;

89 
ªtvÆ
 = 0;

91 i‡(
de°
 !
PORT_BOOTPC
 || 
§c
 !
PORT_BOOTPS
)

92 
ªtvÆ
 = -1;

93 i‡(
Àn
 <  (
BoŸp_t
Ë- 
OPT_SIZE
)

94 
ªtvÆ
 = -2;

95 i‡(
bp
->
bp_›
 !
OP_BOOTREQUEST
 &&

96 
bp
->
bp_›
 !
OP_BOOTREPLY
 &&

97 
bp
->
bp_›
 !
DHCP_OFFER
 &&

98 
bp
->
bp_›
 !
DHCP_ACK
 &&

99 
bp
->
bp_›
 !
DHCP_NAK
 ) {

100 
ªtvÆ
 = -3;

102 i‡(
bp
->
bp_hty≥
 !
HWT_ETHER
)

103 
ªtvÆ
 = -4;

104 i‡(
bp
->
bp_hÀn
 !
HWL_ETHER
)

105 
ªtvÆ
 = -5;

106 i‡(
	`NëRódL⁄g
((
ul⁄g
*)&
bp
->
bp_id
Ë!
BoŸpID
) {

107 
ªtvÆ
 = -6;

110 
	`debug
 ("FûãrögÖkà%d\n", 
ªtvÆ
);

112  
ªtvÆ
;

113 
	}
}

118 
	$BoŸpC›yNëP¨ams
(
BoŸp_t
 *
bp
)

120 
IPaddr_t
 
tmp_ù
;

122 
	`NëC›yIP
(&
NëOurIP
, &
bp
->
bp_yüddr
);

123 
	`NëC›yIP
(&
tmp_ù
, &
bp
->
bp_süddr
);

124 i‡(
tmp_ù
 != 0)

125 
	`NëC›yIP
(&
NëSîvîIP
, &
bp
->
bp_süddr
);

126 
	`mem˝y
 (
NëSîvîEthî
, ((
Ethî√t_t
 *)
NëRxPkt
)->
ë_§c
, 6);

127 i‡(
	`°æí
(
bp
->
bp_fûe
) > 0)

128 
	`c›y_fûíame
 (
BoŸFûe
, 
bp
->
bp_fûe
, (BootFile));

130 
	`debug
 ("BoŸfûe: %s\n", 
BoŸFûe
);

136 i‡(*
BoŸFûe
) {

137 
	`£ãnv
 ("boŸfûe", 
BoŸFûe
);

139 
	}
}

141 
	$åunˇã_sz
 (c⁄° *
«me
, 
maxÀn
, 
cuæí
)

143 i‡(
cuæí
 >
maxÀn
) {

144 
	`¥ötf
("*** WARNING: %s isÅooÜong (%d - max: %d) -Åruncated\n",

145 
«me
, 
cuæí
, 
maxÀn
);

146 
cuæí
 = 
maxÀn
 - 1;

148  (
cuæí
);

149 
	}
}

151 #i‡!(
CONFIG_COMMANDS
 & 
CFG_CMD_DHCP
)

153 
	$BoŸpVíd‹FõldPro˚ss
 (
u8
 * 
ext
)

155 
size
 = *(
ext
 + 1);

157 
	`debug_ext
 ("[BOOTP] Pro˚ssögÉxãnsi⁄ %d... (%d byãs)\n", *
ext
,

158 *(
ext
 + 1));

160 
NëBoŸFûeSize
 = 0;

162 *
ext
) {

165 i‡(
NëOurSub√tMask
 == 0)

166 
	`NëC›yIP
 (&
NëOurSub√tMask
, (
IPaddr_t
 *Ë(
ext
 + 2));

172 i‡(
NëOurG©ewayIP
 == 0) {

173 
	`NëC›yIP
 (&
NëOurG©ewayIP
, (
IPaddr_t
 *Ë(
ext
 + 2));

181 i‡(
NëOurDNSIP
 == 0) {

182 
	`NëC›yIP
 (&
NëOurDNSIP
, (
IPaddr_t
 *Ë(
ext
 + 2));

184 #i‡(
CONFIG_BOOTP_MASK
 & 
CONFIG_BOOTP_DNS2
)

185 i‡((
NëOurDNS2IP
 =0Ë&& (
size
 > 4)) {

186 
	`NëC›yIP
 (&
NëOurDNS2IP
, (
IPaddr_t
 *Ë(
ext
 + 2 + 4));

201 i‡(
NëOurHo°Name
[0] == 0) {

202 
size
 = 
	`åunˇã_sz
 ("Ho° Name",  (
NëOurHo°Name
), size);

203 
	`mem˝y
 (&
NëOurHo°Name
, 
ext
 + 2, 
size
);

204 
NëOurHo°Name
[
size
] = 0;

208 i‡(
size
 == 2)

209 
NëBoŸFûeSize
 = 
	`¡ohs
 (*(
ush‹t
 *Ë(
ext
 + 2));

210 i‡(
size
 == 4)

211 
NëBoŸFûeSize
 = 
	`¡ohl
 (*(
ul⁄g
 *Ë(
ext
 + 2));

220 i‡(
NëOurRoŸP©h
[0] == 0) {

221 
size
 = 
	`åunˇã_sz
 ("RoŸ P©h",  (
NëOurRoŸP©h
), size);

222 
	`mem˝y
 (&
NëOurRoŸP©h
, 
ext
 + 2, 
size
);

223 
NëOurRoŸP©h
[
size
] = 0;

235 i‡(
NëOurNISDomaö
[0] == 0) {

236 
size
 = 
	`åunˇã_sz
 ("NIS Domaö Name",  (
NëOurNISDomaö
), size);

237 
	`mem˝y
 (&
NëOurNISDomaö
, 
ext
 + 2, 
size
);

238 
NëOurNISDomaö
[
size
] = 0;

250 
	}
}

252 
	$BoŸpVíd‹Pro˚ss
 (
u8
 * 
ext
, 
size
)

254 
u8
 *
íd
 = 
ext
 + 
size
;

256 
	`debug_ext
 ("[BOOTP] CheckögÉxãnsi⁄ (%d byãs)...\n", 
size
);

258 (
ext
 < 
íd
) && (*ext != 0xff)) {

259 i‡(*
ext
 == 0) {

260 
ext
++;

262 
u8
 *
›t
 = 
ext
;

264 
ext
 +=Éxt[1] + 2;

265 i‡(
ext
 <
íd
)

266 
	`BoŸpVíd‹FõldPro˚ss
 (
›t
);

270 #ifde‡
DEBUG_BOOTP_EXT


271 
	`puts
 ("[BOOTP] Received fields: \n");

272 i‡(
NëOurSub√tMask
) {

273 
	`puts
 ("NetOurSubnetMask : ");

274 
	`¥öt_IPaddr
 (
NëOurSub√tMask
);

275 
	`putc
 ('\n');

278 i‡(
NëOurG©ewayIP
) {

279 
	`puts
 ("NetOurGatewayIP : ");

280 
	`¥öt_IPaddr
 (
NëOurG©ewayIP
);

281 
	`putc
 ('\n');

284 i‡(
NëBoŸFûeSize
) {

285 
	`¥ötf
 ("NëBoŸFûeSizê: %d\n", 
NëBoŸFûeSize
);

288 i‡(
NëOurHo°Name
[0]) {

289 
	`¥ötf
 ("NëOurHo°Namê : %s\n", 
NëOurHo°Name
);

292 i‡(
NëOurRoŸP©h
[0]) {

293 
	`¥ötf
 ("NëOurRoŸP©h : %s\n", 
NëOurRoŸP©h
);

296 i‡(
NëOurNISDomaö
[0]) {

297 
	`¥ötf
 ("NëOurNISDomaö : %s\n", 
NëOurNISDomaö
);

300 i‡(
NëBoŸFûeSize
) {

301 
	`¥ötf
 ("NëBoŸFûeSize: %d\n", 
NëBoŸFûeSize
);

304 
	}
}

309 
	$BoŸpH™dÀr
(
uch¨
 * 
pkt
, 
de°
, 
§c
, 
Àn
)

311 
BoŸp_t
 *
bp
;

312 *
s
;

314 
	`debug
 ("got BOOTPÖacket (src=%d, dst=%d,Üen=%d want_len=%d)\n",

315 
§c
, 
de°
, 
Àn
,  (
BoŸp_t
));

317 
bp
 = (
BoŸp_t
 *)
pkt
;

319 i‡(
	`BoŸpCheckPkt
(
pkt
, 
de°
, 
§c
, 
Àn
))

325 #ifde‡
CONFIG_STATUS_LED


326 
	`°©us_Àd_£t
 (
STATUS_LED_BOOT
, 
STATUS_LED_OFF
);

329 
	`BoŸpC›yNëP¨ams
(
bp
);

332 i‡(
	`NëRódL⁄g
((
ul⁄g
*)&
bp
->
bp_víd
[0]Ë=
	`ht⁄l
(
BOOTP_VENDOR_MAGIC
))

333 
	`BoŸpVíd‹Pro˚ss
(&
bp
->
bp_víd
[4], 
Àn
);

335 
	`NëSëTimeout
(0, (
th™d_f
 *)0);

337 
	`debug
 ("Got good BOOTP\n");

339 i‡((
s
 = 
	`gëív
("autﬁﬂd")Ë!
NULL
) {

340 i‡(*
s
 == 'n') {

345 
NëSèã
 = 
NETLOOP_SUCCESS
;

347 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_NFS
)

348 } i‡(
	`°rcmp
(
s
, "NFS") == 0) {

352 
	`NfsSèπ
();

358 
	`T·pSèπ
();

359 
	}
}

366 
	$BoŸpTimeout
()

368 i‡(
BoŸpTry
 >
TIMEOUT_COUNT
) {

369 
	`puts
 ("\nRetry countÉxceeded; startingágain\n");

370 
	`NëSèπAgaö
 ();

372 
	`NëSëTimeout
 (
TIMEOUT
 * 
CFG_HZ
, 
BoŸpTimeout
);

373 
	`BoŸpReque°
 ();

375 
	}
}

380 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_DHCP
)

381 
	$Dh˝Exãnded
 (
u8
 * 
e
, 
mesßge_ty≥
, 
IPaddr_t
 
SîvîID
, IPaddr_à
Reque°edIP
)

383 
u8
 *
°¨t
 = 
e
;

384 
u8
 *
˙t
;

386 #i‡(
CONFIG_BOOTP_MASK
 & 
CONFIG_BOOTP_VENDOREX
)

387 
u8
 *
x
;

389 #i‡(
CONFIG_BOOTP_MASK
 & 
CONFIG_BOOTP_SEND_HOSTNAME
)

390 
uch¨
 *
ho°«me
;

393 *
e
++ = 99;

394 *
e
++ = 130;

395 *
e
++ = 83;

396 *
e
++ = 99;

398 *
e
++ = 53;

399 *
e
++ = 1;

400 *
e
++ = 
mesßge_ty≥
;

402 *
e
++ = 57;

403 *
e
++ = 2;

404 *
e
++ = (576 - 312 + 
OPT_SIZE
) >> 8;

405 *
e
++ = (576 - 312 + 
OPT_SIZE
) & 0xff;

407 i‡(
SîvîID
) {

408 
tmp
 = 
	`¡ohl
 (
SîvîID
);

410 *
e
++ = 54;

411 *
e
++ = 4;

412 *
e
++ = 
tmp
 >> 24;

413 *
e
++ = 
tmp
 >> 16;

414 *
e
++ = 
tmp
 >> 8;

415 *
e
++ = 
tmp
 & 0xff;

418 i‡(
Reque°edIP
) {

419 
tmp
 = 
	`¡ohl
 (
Reque°edIP
);

421 *
e
++ = 50;

422 *
e
++ = 4;

423 *
e
++ = 
tmp
 >> 24;

424 *
e
++ = 
tmp
 >> 16;

425 *
e
++ = 
tmp
 >> 8;

426 *
e
++ = 
tmp
 & 0xff;

428 #i‡(
CONFIG_BOOTP_MASK
 & 
CONFIG_BOOTP_SEND_HOSTNAME
)

429 i‡((
ho°«me
 = 
	`gëív
 ("hostname"))) {

430 
ho°«mñí
 = 
	`°æí
 (
ho°«me
);

432 *
e
++ = 12;

433 *
e
++ = 
ho°«mñí
;

434 
	`mem˝y
 (
e
, 
ho°«me
, 
ho°«mñí
);

435 
e
 +
ho°«mñí
;

439 #i‡(
CONFIG_BOOTP_MASK
 & 
CONFIG_BOOTP_VENDOREX
)

440 i‡((
x
 = 
	`dh˝_víd‹ex_¥ï
 (
e
)))

441  
x
 - 
°¨t
;

444 *
e
++ = 55;

445 
˙t
 = 
e
++;

446 *
˙t
 = 0;

447 #i‡(
CONFIG_BOOTP_MASK
 & 
CONFIG_BOOTP_SUBNETMASK
)

448 *
e
++ = 1;

449 *
˙t
 += 1;

451 #i‡(
CONFIG_BOOTP_MASK
 & 
CONFIG_BOOTP_GATEWAY
)

452 *
e
++ = 3;

453 *
˙t
 += 1;

455 #i‡(
CONFIG_BOOTP_MASK
 & 
CONFIG_BOOTP_DNS
)

456 *
e
++ = 6;

457 *
˙t
 += 1;

459 #i‡(
CONFIG_BOOTP_MASK
 & 
CONFIG_BOOTP_HOSTNAME
)

460 *
e
++ = 12;

461 *
˙t
 += 1;

463 #i‡(
CONFIG_BOOTP_MASK
 & 
CONFIG_BOOTP_BOOTFILESIZE
)

464 *
e
++ = 13;

465 *
˙t
 += 1;

467 #i‡(
CONFIG_BOOTP_MASK
 & 
CONFIG_BOOTP_BOOTPATH
)

468 *
e
++ = 17;

469 *
˙t
 += 1;

471 #i‡(
CONFIG_BOOTP_MASK
 & 
CONFIG_BOOTP_NISDOMAIN
)

472 *
e
++ = 40;

473 *
˙t
 += 1;

475 *
e
++ = 255;

478 #ifdef 
CONFIG_DHCP_MIN_EXT_LEN


479 (
e
 - 
°¨t
Ë<
CONFIG_DHCP_MIN_EXT_LEN
)

480 *
e
++ = 0;

483  
e
 - 
°¨t
;

484 
	}
}

490 
	$BoŸpExãnded
 (
u8
 * 
e
)

492 
u8
 *
°¨t
 = 
e
;

494 *
e
++ = 99;

495 *
e
++ = 130;

496 *
e
++ = 83;

497 *
e
++ = 99;

499 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_DHCP
)

500 *
e
++ = 53;

501 *
e
++ = 1;

502 *
e
++ = 
DHCP_DISCOVER
;

504 *
e
++ = 57;

505 *
e
++ = 2;

506 *
e
++ = (576 - 312 + 
OPT_SIZE
) >> 16;

507 *
e
++ = (576 - 312 + 
OPT_SIZE
) & 0xff;

510 #i‡(
CONFIG_BOOTP_MASK
 & 
CONFIG_BOOTP_SUBNETMASK
)

511 *
e
++ = 1;

512 *
e
++ = 4;

513 
e
 += 4;

516 #i‡(
CONFIG_BOOTP_MASK
 & 
CONFIG_BOOTP_GATEWAY
)

517 *
e
++ = 3;

518 *
e
++ = 4;

519 
e
 += 4;

522 #i‡(
CONFIG_BOOTP_MASK
 & 
CONFIG_BOOTP_DNS
)

523 *
e
++ = 6;

524 *
e
++ = 4;

525 
e
 += 4;

528 #i‡(
CONFIG_BOOTP_MASK
 & 
CONFIG_BOOTP_HOSTNAME
)

529 *
e
++ = 12;

530 *
e
++ = 32;

531 
e
 += 32;

534 #i‡(
CONFIG_BOOTP_MASK
 & 
CONFIG_BOOTP_BOOTFILESIZE
)

535 *
e
++ = 13;

536 *
e
++ = 2;

537 
e
 += 2;

540 #i‡(
CONFIG_BOOTP_MASK
 & 
CONFIG_BOOTP_BOOTPATH
)

541 *
e
++ = 17;

542 *
e
++ = 32;

543 
e
 += 32;

546 #i‡(
CONFIG_BOOTP_MASK
 & 
CONFIG_BOOTP_NISDOMAIN
)

547 *
e
++ = 40;

548 *
e
++ = 32;

549 
e
 += 32;

552 *
e
++ = 255;

554  
e
 - 
°¨t
;

555 
	}
}

559 
	$BoŸpReque°
 ()

561 vﬁ©ûê
uch¨
 *
pkt
, *
ùhdr
;

562 
BoŸp_t
 *
bp
;

563 
ext_Àn
, 
pkéí
, 
ùÀn
;

565 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_DHCP
)

566 
dh˝_°©e
 = 
INIT
;

569 #ifde‡
CONFIG_BOOTP_RANDOM_DELAY


570 
bi_íëaddr
[6];

571 
ªg
;

572 *
e
,*
s
;

573 
uch¨
 
tmp
[64];

574 
ul⁄g
 
t°1
, 
t°2
, 
sum
, 
m_mask
, 
m_vÆue
 = 0;

576 i‡(
BoŸpTry
 ==0) {

578 
ªg
 = 
	`gëív_r
 ("ëhaddr", 
tmp
, (tmp));

579 
s
 = (
ªg
 > 0Ë? 
tmp
 : 
NULL
;

581 
ªg
=0;Ñeg<6; ++reg) {

582 
bi_íëaddr
[
ªg
] = 
s
 ? 
	`sim∂e_°πoul
(s, &
e
, 16) : 0;

583 i‡(
s
) {

584 
s
 = (*
e
) ?É+1 :É;

587 #ifde‡
DEBUG


588 
	`puts
 ("BootpRequest => Our Mac: ");

589 
ªg
=0;Ñeg<6;Ñeg++) {

590 
	`¥ötf
 ("%x%c",

591 
bi_íëaddr
[
ªg
],

592 
ªg
==5 ? '\n' : ':');

597 
t°1
=0;

598 
t°2
=0;

599 
ªg
=2;Ñeg<6;Ñeg++) {

600 
t°1
 =Åst1 << 8;

601 
t°1
 =Å°1 | 
bi_íëaddr
[
ªg
];

603 
ªg
=0;Ñeg<2;Ñeg++) {

604 
t°2
 =Å°2 | 
bi_íëaddr
[
ªg
];

605 
t°2
 =Åst2 << 8;

608 
£ed1
 = 
t°1
^
t°2
;

611 
m_mask
=0x1;

612 
ªg
=1;reg<=32;reg++) {

613 
m_vÆue
 |(
m_mask
 & 
£ed1
);

614 
£ed1
 = seed1 >> 1;

615 
m_vÆue
 = m_value << 1;

617 
£ed1
 = 
m_vÆue
;

618 
£ed2
 = 0xB78D0945;

623 
ªg
=0;reg<=0;reg++) {

624 
sum
 = 
£ed1
 + 
£ed2
;

625 i‡(
sum
 < 
£ed1
 || sum < 
£ed2
)

626 
sum
++;

627 
£ed2
 = 
£ed1
;

628 
£ed1
 = 
sum
;

630 i‡(
BoŸpTry
<=2) {

631 
sum
 = sum >> (22-
BoŸpTry
);

633 
sum
 = sum >> 19;

637 
	`¥ötf
 ("R™dom dñay: %ld ms...\n", 
sum
);

638 
ªg
=0;Ñeg <
sum
;Ñeg++) {

639 
	`udñay
(1000);

643 
	`¥ötf
("BOOTP brﬂdˇ° %d\n", ++
BoŸpTry
);

644 
pkt
 = 
NëTxPackë
;

645 
	`mem£t
 ((*)
pkt
, 0, 
PKTSIZE
);

647 
pkt
 +
	`NëSëEthî
’kt, 
NëBˇ°Addr
, 
PROT_IP
);

656 
ùhdr
 = 
pkt
;

657 
pkt
 +
IP_HDR_SIZE
;

659 
bp
 = (
BoŸp_t
 *)
pkt
;

660 
bp
->
bp_›
 = 
OP_BOOTREQUEST
;

661 
bp
->
bp_hty≥
 = 
HWT_ETHER
;

662 
bp
->
bp_hÀn
 = 
HWL_ETHER
;

663 
bp
->
bp_h›s
 = 0;

664 
bp
->
bp_£cs
 = 
	`ht⁄s
(
	`gë_timî
(0Ë/ 
CFG_HZ
);

665 
	`NëWrôeIP
(&
bp
->
bp_cüddr
, 0);

666 
	`NëWrôeIP
(&
bp
->
bp_yüddr
, 0);

667 
	`NëWrôeIP
(&
bp
->
bp_süddr
, 0);

668 
	`NëWrôeIP
(&
bp
->
bp_güddr
, 0);

669 
	`mem˝y
 (
bp
->
bp_chaddr
, 
NëOurEthî
, 6);

670 
	`c›y_fûíame
 (
bp
->
bp_fûe
, 
BoŸFûe
, (bp->bp_file));

673 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_DHCP
)

674 
ext_Àn
 = 
	`Dh˝Exãnded
(
bp
->
bp_víd
, 
DHCP_DISCOVER
, 0, 0);

676 
ext_Àn
 = 
	`BoŸpExãnded
(
bp
->
bp_víd
);

683 
BoŸpID
 = ((
ul⁄g
)
NëOurEthî
[2] << 24)

684 | ((
ul⁄g
)
NëOurEthî
[3] << 16)

685 | ((
ul⁄g
)
NëOurEthî
[4] << 8)

686 | (
ul⁄g
)
NëOurEthî
[5];

687 
BoŸpID
 +
	`gë_timî
(0);

688 
BoŸpID
 = 
	`ht⁄l
(BootpID);

689 
	`NëC›yL⁄g
(&
bp
->
bp_id
, &
BoŸpID
);

695 
pkéí
 = 
BOOTP_SIZE
 - (
bp
->
bp_víd
Ë+ 
ext_Àn
;

696 
ùÀn
 = 
BOOTP_HDR_SIZE
 - (
bp
->
bp_víd
Ë+ 
ext_Àn
;

697 
	`NëSëIP
(
ùhdr
, 0xFFFFFFFFL, 
PORT_BOOTPS
, 
PORT_BOOTPC
, 
ùÀn
);

698 
	`NëSëTimeout
(
SELECT_TIMEOUT
 * 
CFG_HZ
, 
BoŸpTimeout
);

700 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_DHCP
)

701 
dh˝_°©e
 = 
SELECTING
;

702 
	`NëSëH™dÀr
(
Dh˝H™dÀr
);

704 
	`NëSëH™dÀr
(
BoŸpH™dÀr
);

706 
	`NëSídPackë
(
NëTxPackë
, 
pkéí
);

707 
	}
}

709 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_DHCP
)

710 
	$Dh˝O±i⁄sPro˚ss
 (
uch¨
 * 
p›t
)

712 
uch¨
 *
íd
 = 
p›t
 + 
BOOTP_HDR_SIZE
;

713 
›Àn
, 
size
;

715 
p›t
 < 
íd
 && *popt != 0xff) {

716 
›Àn
 = *(
p›t
 + 1);

717 *
p›t
) {

719 
	`NëC›yIP
 (&
NëOurSub√tMask
, (
p›t
 + 2));

722 
	`NëC›yIP
 (&
NëOurG©ewayIP
, (
p›t
 + 2));

725 
	`NëC›yIP
 (&
NëOurDNSIP
, (
p›t
 + 2));

726 #i‡(
CONFIG_BOOTP_MASK
 & 
CONFIG_BOOTP_DNS2
)

727 i‡(*(
p›t
 + 1) > 4) {

728 
	`NëC›yIP
 (&
NëOurDNS2IP
, (
p›t
 + 2 + 4));

733 
size
 = 
	`åunˇã_sz
 ("Ho° Name",  (
NëOurHo°Name
), 
›Àn
);

734 
	`mem˝y
 (&
NëOurHo°Name
, 
p›t
 + 2, 
size
);

735 
NëOurHo°Name
[
size
] = 0;

740 
size
 = 
	`åunˇã_sz
 ("RoŸ P©h",  (
NëOurRoŸP©h
), 
›Àn
);

741 
	`mem˝y
 (&
NëOurRoŸP©h
, 
p›t
 + 2, 
size
);

742 
NëOurRoŸP©h
[
size
] = 0;

745 
	`NëC›yL⁄g
 (&
dh˝_Àa£time
, (
ul⁄g
 *Ë(
p›t
 + 2));

750 
	`NëC›yIP
 (&
NëDHCPSîvîIP
, (
p›t
 + 2));

757 #i‡(
CONFIG_BOOTP_MASK
 & 
CONFIG_BOOTP_VENDOREX
)

758 i‡(
	`dh˝_víd‹ex_¥oc
 (
p›t
))

761 
	`¥ötf
 ("*** Unh™dÀd DHCP O±i⁄ i¿OFFER/ACK: %d\n", *
p›t
);

764 
p›t
 +
›Àn
 + 2;

766 
	}
}

768 
	$Dh˝MesßgeTy≥
(*
p›t
)

770 i‡(
	`NëRódL⁄g
((
ul⁄g
*)
p›t
Ë!
	`ht⁄l
(
BOOTP_VENDOR_MAGIC
))

773 
p›t
 += 4;

774  *
p›t
 != 0xff ) {

775 i‡–*
p›t
 == 53 )

776  *(
p›t
 + 2);

777 
p›t
 += *(popt + 1) + 2;

780 
	}
}

782 
	$Dh˝SídReque°Pkt
(
BoŸp_t
 *
bp_of„r
)

784 vﬁ©ûê
uch¨
 *
pkt
, *
ùhdr
;

785 
BoŸp_t
 *
bp
;

786 
pkéí
, 
ùÀn
, 
exéí
;

787 
IPaddr_t
 
Of„ªdIP
;

789 
	`debug
 ("DhcpSendRequestPkt: Sending DHCPREQUEST\n");

790 
pkt
 = 
NëTxPackë
;

791 
	`mem£t
 ((*)
pkt
, 0, 
PKTSIZE
);

793 
pkt
 +
	`NëSëEthî
’kt, 
NëBˇ°Addr
, 
PROT_IP
);

795 
ùhdr
 = 
pkt
;

796 
pkt
 +
IP_HDR_SIZE
;

798 
bp
 = (
BoŸp_t
 *)
pkt
;

799 
bp
->
bp_›
 = 
OP_BOOTREQUEST
;

800 
bp
->
bp_hty≥
 = 
HWT_ETHER
;

801 
bp
->
bp_hÀn
 = 
HWL_ETHER
;

802 
bp
->
bp_h›s
 = 0;

803 
bp
->
bp_£cs
 = 
	`ht⁄s
(
	`gë_timî
(0Ë/ 
CFG_HZ
);

804 
	`NëC›yIP
(&
bp
->
bp_cüddr
, &
bp_of„r
->bp_ciaddr);

805 
	`NëC›yIP
(&
bp
->
bp_yüddr
, &
bp_of„r
->bp_yiaddr);

806 
	`NëC›yIP
(&
bp
->
bp_süddr
, &
bp_of„r
->bp_siaddr);

807 
	`NëC›yIP
(&
bp
->
bp_güddr
, &
bp_of„r
->bp_giaddr);

808 
	`mem˝y
 (
bp
->
bp_chaddr
, 
NëOurEthî
, 6);

814 
	`NëC›yL⁄g
(&
bp
->
bp_id
, &
bp_of„r
->bp_id);

819 
	`NëC›yIP
(&
Of„ªdIP
, &
bp
->
bp_yüddr
);

820 
exéí
 = 
	`Dh˝Exãnded
(
bp
->
bp_víd
, 
DHCP_REQUEST
, 
NëDHCPSîvîIP
, 
Of„ªdIP
);

822 
pkéí
 = 
BOOTP_SIZE
 - (
bp
->
bp_víd
Ë+ 
exéí
;

823 
ùÀn
 = 
BOOTP_HDR_SIZE
 - (
bp
->
bp_víd
Ë+ 
exéí
;

824 
	`NëSëIP
(
ùhdr
, 0xFFFFFFFFL, 
PORT_BOOTPS
, 
PORT_BOOTPC
, 
ùÀn
);

826 
	`debug
 ("Tønsmôtög DHCPREQUESTÖackë:Üí = %d\n", 
pkéí
);

827 
	`NëSídPackë
(
NëTxPackë
, 
pkéí
);

828 
	}
}

834 
	$Dh˝H™dÀr
(
uch¨
 * 
pkt
, 
de°
, 
§c
, 
Àn
)

836 
BoŸp_t
 *
bp
 = (BoŸp_à*)
pkt
;

838 
	`debug
 ("DHCPHandler: gotÖacket: (src=%d, dst=%d,Üen=%d) state: %d\n",

839 
§c
, 
de°
, 
Àn
, 
dh˝_°©e
);

841 i‡(
	`BoŸpCheckPkt
(
pkt
, 
de°
, 
§c
, 
Àn
))

844 
	`debug
 ("DHCPHandler: got DHCPÖacket: (src=%d, dst=%d,Üen=%d) state: %d\n",

845 
§c
, 
de°
, 
Àn
, 
dh˝_°©e
);

847 
dh˝_°©e
) {

848 
SELECTING
:

855 
	`debug
 ("DHCP: sèã=SELECTING bp_fûe: \"%s\"\n", 
bp
->
bp_fûe
);

856 #ifde‡
CFG_BOOTFILE_PREFIX


857 i‡(
	`°∫cmp
(
bp
->
bp_fûe
,

858 
CFG_BOOTFILE_PREFIX
,

859 
	`°æí
(
CFG_BOOTFILE_PREFIX
)) == 0 ) {

862 
	`debug
 ("TRANSITIONING TO REQUESTING STATE\n");

863 
dh˝_°©e
 = 
REQUESTING
;

865 i‡(
	`NëRódL⁄g
((
ul⁄g
*)&
bp
->
bp_víd
[0]Ë=
	`ht⁄l
(
BOOTP_VENDOR_MAGIC
))

866 
	`Dh˝O±i⁄sPro˚ss
(&
bp
->
bp_víd
[4]);

868 
	`BoŸpC›yNëP¨ams
(
bp
);

870 
	`NëSëTimeout
(
TIMEOUT
 * 
CFG_HZ
, 
BoŸpTimeout
);

871 
	`Dh˝SídReque°Pkt
(
bp
);

872 #ifde‡
CFG_BOOTFILE_PREFIX


878 
REQUESTING
:

879 
	`debug
 ("DHCP State: REQUESTING\n");

881 i‡–
	`Dh˝MesßgeTy≥
(
bp
->
bp_víd
Ë=
DHCP_ACK
 ) {

882 *
s
;

884 i‡(
	`NëRódL⁄g
((
ul⁄g
*)&
bp
->
bp_víd
[0]Ë=
	`ht⁄l
(
BOOTP_VENDOR_MAGIC
))

885 
	`Dh˝O±i⁄sPro˚ss
(&
bp
->
bp_víd
[4]);

886 
	`BoŸpC›yNëP¨ams
(
bp
);

887 
dh˝_°©e
 = 
BOUND
;

888 
	`puts
 ("DHCP client boundÅoáddress ");

889 
	`¥öt_IPaddr
(
NëOurIP
);

890 
	`putc
 ('\n');

893 i‡((
s
 = 
	`gëív
("autﬁﬂd")Ë!
NULL
) {

894 i‡(*
s
 == 'n') {

899 
NëSèã
 = 
NETLOOP_SUCCESS
;

901 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_NFS
)

902 } i‡(
	`°rcmp
(
s
, "NFS") == 0) {

906 
	`NfsSèπ
();

911 
	`T·pSèπ
();

916 
	`puts
 ("DHCP: INVALID STATE\n");

920 
	}
}

922 
	$Dh˝Reque°
()

924 
	`BoŸpReque°
();

925 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/net/bootp.h

9 #i‚de‡
__BOOTP_H__


10 
	#__BOOTP_H__


	)

12 #i‚de‡
__NET_H__


13 
	~<√t.h
>

21 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_DHCP
)

22 
	#OPT_SIZE
 312

	)

24 
	#OPT_SIZE
 64

	)

29 
uch¨
 
	mbp_›
;

30 
	#OP_BOOTREQUEST
 1

	)

31 
	#OP_BOOTREPLY
 2

	)

32 
uch¨
 
	mbp_hty≥
;

33 
	#HWT_ETHER
 1

	)

34 
uch¨
 
	mbp_hÀn
;

35 
	#HWL_ETHER
 6

	)

36 
uch¨
 
	mbp_h›s
;

37 
ul⁄g
 
	mbp_id
;

38 
ush‹t
 
	mbp_£cs
;

39 
ush‹t
 
	mbp_•¨e1
;

40 
IPaddr_t
 
	mbp_cüddr
;

41 
IPaddr_t
 
	mbp_yüddr
;

42 
IPaddr_t
 
	mbp_süddr
;

43 
IPaddr_t
 
	mbp_güddr
;

44 
uch¨
 
	mbp_chaddr
[16];

45 
	mbp_¢ame
[64];

46 
	mbp_fûe
[128];

47 
	mbp_víd
[
OPT_SIZE
];

48 } 
	tBoŸp_t
;

50 
	#BOOTP_HDR_SIZE
  (
BoŸp_t
)

	)

51 
	#BOOTP_SIZE
 (
ETHER_HDR_SIZE
 + 
IP_HDR_SIZE
 + 
BOOTP_HDR_SIZE
)

	)

59 
ul⁄g
 
BoŸpID
;

60 
BoŸFûe
[128];

61 
BoŸpTry
;

62 #ifde‡
CONFIG_BOOTP_RANDOM_DELAY


63 
ul⁄g
 
	g£ed1
, 
	g£ed2
;

68 
BoŸpReque°
 ();

71 
Dh˝Reque°
();

74 íum { 
	mINIT
,

75 
	mINIT_REBOOT
,

76 
	mREBOOTING
,

77 
	mSELECTING
,

78 
	mREQUESTING
,

79 
	mREBINDING
,

80 
	mBOUND
,

81 
	mRENEWING
 } 
	tdh˝_°©e_t
;

83 
	#DHCP_DISCOVER
 1

	)

84 
	#DHCP_OFFER
 2

	)

85 
	#DHCP_REQUEST
 3

	)

86 
	#DHCP_DECLINE
 4

	)

87 
	#DHCP_ACK
 5

	)

88 
	#DHCP_NAK
 6

	)

89 
	#DHCP_RELEASE
 7

	)

91 
	#SELECT_TIMEOUT
 3

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/net/eth.c

24 
	~<comm⁄.h
>

25 
	~<comm™d.h
>

26 
	~<√t.h
>

28 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_NET
)

30 #ifde‡
CFG_GT_6426x


31 
gt6426x_ëh_öôülize
(
bd_t
 *
bis
);

34 
au1x00_íë_öôülize
(
bd_t
*);

35 
dc21x4x_öôülize
(
bd_t
*);

36 
e1000_öôülize
(
bd_t
*);

37 
ì¥o100_öôülize
(
bd_t
*);

38 
ëh_3com_öôülize
(
bd_t
*);

39 
„c_öôülize
(
bd_t
*);

40 
öˇ_swôch_öôülize
(
bd_t
*);

41 
mpc5xxx_„c_öôülize
(
bd_t
*);

42 
mpc8220_„c_öôülize
(
bd_t
*);

43 
mv6436x_ëh_öôülize
(
bd_t
 *);

44 
mv6446x_ëh_öôülize
(
bd_t
 *);

45 
«t£mi_öôülize
(
bd_t
*);

46 
ns8382x_öôülize
(
bd_t
*);

47 
p˙ë_öôülize
(
bd_t
*);

48 
∂b2800_ëh_öôülize
(
bd_t
*);

49 
µc_4xx_ëh_öôülize
(
bd_t
 *);

50 
µc_440x_ëh_öôülize
(
bd_t
 *);

51 
πl8139_öôülize
(
bd_t
*);

52 
πl8169_öôülize
(
bd_t
*);

53 
scc_öôülize
(
bd_t
*);

54 
skge_öôülize
(
bd_t
*);

55 
t£c_öôülize
(
bd_t
*, );

56 
π2880_ëh_öôülize
(
bd_t
 *
bis
);

58 
ëh_devi˚
 *
	gëh_devi˚s
, *
	gëh_cuºít
;

60 
	$ëh_∑r£_íëaddr
(c⁄° *
addr
, 
uch¨
 *
íëaddr
)

62 *
íd
;

63 
i
;

65 
i
 = 0; i < 6; ++i) {

66 
íëaddr
[
i
] = 
addr
 ? 
	`sim∂e_°πoul
◊ddr, &
íd
, 16) : 0;

67 i‡(
addr
)

68 
addr
 = (*
íd
) ?Énd + 1 :Énd;

70 
	}
}

72 #ifde‡
CONFIG_NET_MULTI


73 
ëh_devi˚
 *
	$ëh_gë_dev
()

75  
ëh_cuºít
;

76 
	}
}

78 
	$ëh_gë_dev_ödex
 ()

80 
ëh_devi˚
 *
dev
;

81 
num
 = 0;

83 i‡(!
ëh_devi˚s
) {

87 
dev
 = 
ëh_devi˚s
; dev; dev = dev->
√xt
) {

88 i‡(
dev
 =
ëh_cuºít
)

90 ++
num
;

93 i‡(
dev
) {

94  (
num
);

98 
	}
}

101 
	$ëh_ªgi°î
(
ëh_devi˚
* 
dev
)

103 
ëh_devi˚
 *
d
;

105 i‡(!
ëh_devi˚s
) {

106 
ëh_cuºít
 = 
ëh_devi˚s
 = 
dev
;

107 #ifde‡
CONFIG_NET_MULTI


110 *
a˘
 = 
	`gëív
("ethact");

111 i‡(
a˘
 =
NULL
 || 
	`°rcmp
◊˘, 
ëh_cuºít
->
«me
) != 0)

112 
	`£ãnv
("ëha˘", 
ëh_cuºít
->
«me
);

116 
d
=
ëh_devi˚s
; d->
√xt
!=eth_devices; d=d->next);

117 
d
->
√xt
 = 
dev
;

120 
dev
->
°©e
 = 
ETH_STATE_INIT
;

121 
dev
->
√xt
 = 
ëh_devi˚s
;

124 
	}
}

126 
	$ëh_öôülize
(
bd_t
 *
bis
)

128 
π2880_gmac1_mac
[6];

129 
ëh_numbî
 = 0, 
ªgVÆue
=0;

131 
ëh_devi˚s
 = 
NULL
;

132 
ëh_cuºít
 = 
NULL
;

134 #ifde‡
CONFIG_DB64360


135 
	`mv6436x_ëh_öôülize
(
bis
);

137 #ifde‡
CONFIG_CPCI750


138 
	`mv6436x_ëh_öôülize
(
bis
);

140 #ifde‡
CONFIG_DB64460


141 
	`mv6446x_ëh_öôülize
(
bis
);

143 #i‡
	`deföed
(
CONFIG_405GP
Ë|| deföed(
CONFIG_405EP
) || \

144 –
	`deföed
(
CONFIG_440
Ë&& !deföed(
CONFIG_NET_MULTI
) )

145 
	`µc_4xx_ëh_öôülize
(
bis
);

147 #i‡
	`deföed
(
CONFIG_440
Ë&& deföed(
CONFIG_NET_MULTI
)

148 
	`µc_440x_ëh_öôülize
(
bis
);

150 #ifde‡
CONFIG_INCA_IP_SWITCH


151 
	`öˇ_swôch_öôülize
(
bis
);

153 #ifde‡
CONFIG_PLB2800_ETHER


155 
	`∂b2800_ëh_öôülize
(
bis
);

157 #ifde‡
SCC_ENET


158 
	`scc_öôülize
(
bis
);

160 #i‡
	`deföed
(
FEC_ENET
Ë|| deföed(
CONFIG_ETHER_ON_FCC
)

161 
	`„c_öôülize
(
bis
);

163 #i‡
	`deföed
(
CONFIG_MPC5xxx_FEC
)

164 
	`mpc5xxx_„c_öôülize
(
bis
);

166 #i‡
	`deföed
(
CONFIG_MPC8220
)

167 
	`mpc8220_„c_öôülize
(
bis
);

169 #i‡
	`deföed
(
CONFIG_SK98
)

170 
	`skge_öôülize
(
bis
);

172 #i‡
	`deföed
(
CONFIG_MPC85XX_TSEC1
)

173 
	`t£c_öôülize
(
bis
, 0);

175 #i‡
	`deföed
(
CONFIG_MPC85XX_TSEC2
)

176 
	`t£c_öôülize
(
bis
, 1);

178 #i‡
	`deföed
(
CONFIG_MPC85XX_FEC
)

179 
	`t£c_öôülize
(
bis
, 2);

181 #i‡
	`deföed
(
CONFIG_AU1X00
)

182 
	`au1x00_íë_öôülize
(
bis
);

184 #ifde‡
CONFIG_E1000


185 
	`e1000_öôülize
(
bis
);

187 #ifde‡
CONFIG_EEPRO100


188 
	`ì¥o100_öôülize
(
bis
);

190 #ifde‡
CONFIG_TULIP


191 
	`dc21x4x_öôülize
(
bis
);

193 #ifde‡
CONFIG_3COM


194 
	`ëh_3com_öôülize
(
bis
);

196 #ifde‡
CONFIG_PCNET


197 
	`p˙ë_öôülize
(
bis
);

199 #ifde‡
CFG_GT_6426x


200 
	`gt6426x_ëh_öôülize
(
bis
);

202 #ifde‡
CONFIG_NATSEMI


203 
	`«t£mi_öôülize
(
bis
);

205 #ifde‡
CONFIG_NS8382X


206 
	`ns8382x_öôülize
(
bis
);

208 #i‡
	`deföed
(
CONFIG_RTL8139
)

209 
	`πl8139_öôülize
(
bis
);

211 #i‡
	`deföed
(
CONFIG_RTL8169
)

212 
	`πl8169_öôülize
(
bis
);

215 #i‡
	`deföed
(
CONFIG_RT2880_ETH
)

216 
	`π2880_ëh_öôülize
(
bis
);

219 i‡(!
ëh_devi˚s
) {

220 
	`puts
 ("NoÉthernet found.\n");

222 
ëh_devi˚
 *
dev
 = 
ëh_devi˚s
;

223 *
ëh¥ime
 = 
	`gëív
 ("ethprime");

224 
em±y_mac
[6]={0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};

228 i‡(
ëh_numbî
)

229 
	`puts
 (", ");

231 i‡(
ëh¥ime
 && 
	`°rcmp
 (
dev
->
«me
,Éthprime) == 0) {

232 
ëh_cuºít
 = 
dev
;

233 
	`puts
 (" [PRIME]");

236 
	#GMAC0_OFFSET
 0x28

	)

237 
	#GDMA1_MAC_ADRL
 0x2C

	)

238 
	#GDMA1_MAC_ADRH
 0x30

	)

241 #i‡
	`deföed
 (
CFG_ENV_IS_IN_NAND
)

242 
	`ø«nd_ªad
(
π2880_gmac1_mac
,

243 
CFG_FACTORY_ADDR
 - 
CFG_FLASH_BASE
 + 
GMAC0_OFFSET
, 6);

244 #ñi‡
	`deföed
 (
CFG_ENV_IS_IN_SPI
)

245 
	`ø•i_ªad
(
π2880_gmac1_mac
,

246 
CFG_FACTORY_ADDR
 - 
CFG_FLASH_BASE
 + 
GMAC0_OFFSET
, 6);

248 
	`memmove
(
π2880_gmac1_mac
,

249 
CFG_FACTORY_ADDR
 + 
GMAC0_OFFSET
, 6);

253 i‡(
	`memcmp
(
π2880_gmac1_mac
, 
em±y_mac
, 6) == 0)

254 
	`ëh_∑r£_íëaddr
(
CONFIG_ETHADDR
, 
π2880_gmac1_mac
);

256 i‡(
	`memcmp
 (
π2880_gmac1_mac
, "\0\0\0\0\0\0", 6) == 0)

257 
	`ëh_∑r£_íëaddr
(
CONFIG_ETHADDR
, 
π2880_gmac1_mac
);

259 
	`mem˝y
(
dev
->
íëaddr
, 
π2880_gmac1_mac
, 6);

262 
ªgVÆue
 = (
π2880_gmac1_mac
[0] << 8)|(rt2880_gmac1_mac[1]);

263 *(vﬁ©ûê
u_l⁄g
 *)(
dev
->
ioba£
 + 
GDMA1_MAC_ADRH
)
ªgVÆue
;

265 
ªgVÆue
 = (
π2880_gmac1_mac
[2] << 24) | (rt2880_gmac1_mac[3] <<16) |

266 (
π2880_gmac1_mac
[4] << 8) |Ñt2880_gmac1_mac[5];

267 *(vﬁ©ûê
u_l⁄g
 *)(
dev
->
ioba£
 + 
GDMA1_MAC_ADRL
)
ªgVÆue
;

269 
ëh_numbî
++;

270 
dev
 = dev->
√xt
;

271 } 
dev
 !
ëh_devi˚s
);

273 #ifde‡
CONFIG_NET_MULTI


275 i‡(
ëh_cuºít
) {

276 *
a˘
 = 
	`gëív
("ethact");

277 i‡(
a˘
 =
NULL
 || 
	`°rcmp
◊˘, 
ëh_cuºít
->
«me
) != 0)

278 
	`£ãnv
("ëha˘", 
ëh_cuºít
->
«me
);

280 
	`£ãnv
("ëha˘", 
NULL
);

283 
	`¥ötf
("\n");

286  
ëh_numbî
;

287 
	}
}

289 #ifde‡
CONFIG_NET_MULTI


290 
	$ëh_£t_íëaddr
(
num
, *
addr
) {

291 
ëh_devi˚
 *
dev
;

292 
íëaddr
[6];

293 *
íd
;

294 
i
;

296 
	`debug
 ("ëh_£t_íëaddr“um=%d,áddr=%s)\n", 
num
, 
addr
);

298 i‡(!
ëh_devi˚s
)

301 
i
=0; i<6; i++) {

302 
íëaddr
[
i
] = 
addr
 ? 
	`sim∂e_°πoul
◊ddr, &
íd
, 16) : 0;

303 i‡(
addr
)

304 
addr
 = (*
íd
) ?Énd+1 :Énd;

307 
dev
 = 
ëh_devi˚s
;

308 
num
-- > 0) {

309 
dev
 = dev->
√xt
;

311 i‡(
dev
 =
ëh_devi˚s
)

315 
	`debug
 ( "SettingÇew HWáddress on %s\n"

317 
dev
->
«me
,

318 
dev
->
íëaddr
[0], dev->enetaddr[1],

319 
dev
->
íëaddr
[2], dev->enetaddr[3],

320 
dev
->
íëaddr
[4], dev->enetaddr[5]);

322 
	`mem˝y
(
dev
->
íëaddr
,Énetaddr, 6);

323 
	}
}

325 
	$ëh_öô
(
bd_t
 *
bis
)

327 
ëh_devi˚
* 
ﬁd_cuºít
;

329 i‡(!
ëh_cuºít
)

332 
ﬁd_cuºít
 = 
ëh_cuºít
;

334 
	`debug
 ("Tryög %s\n", 
ëh_cuºít
->
«me
);

336 i‡(
ëh_cuºít
->
	`öô
”th_cuºít, 
bis
)) {

337 
ëh_cuºít
->
°©e
 = 
ETH_STATE_ACTIVE
;

338 
	`¥ötf
("\n ETH_STATE_ACTIVE!! \n");

341 
	`¥ötf
 ("FAIL\n");

345 
	`ëh_åy_™Ÿhî
(0);

346 } 
ﬁd_cuºít
 !
ëh_cuºít
);

349 
	}
}

351 
	$ëh_hÆt
()

353 i‡(!
ëh_cuºít
)

356 
ëh_cuºít
->
	`hÆt
(eth_current);

358 
ëh_cuºít
->
°©e
 = 
ETH_STATE_PASSIVE
;

359 
	}
}

361 
	$ëh_£nd
(vﬁ©ûê*
∑ckë
, 
Àngth
)

363 i‡(!
ëh_cuºít
)

366  
ëh_cuºít
->
	`£nd
”th_cuºít, 
∑ckë
, 
Àngth
);

367 
	}
}

369 
	$ëh_rx
()

371 i‡(!
ëh_cuºít
)

374  
ëh_cuºít
->
	`ªcv
(eth_current);

375 
	}
}

377 
	$ëh_åy_™Ÿhî
(
fú°_ª°¨t
)

379 
ëh_devi˚
 *
fú°_Áûed
 = 
NULL
;

381 i‡(!
ëh_cuºít
)

384 i‡(
fú°_ª°¨t
) {

385 
fú°_Áûed
 = 
ëh_cuºít
;

388 
ëh_cuºít
 =Éth_cuºít->
√xt
;

390 #ifde‡
CONFIG_NET_MULTI


393 *
a˘
 = 
	`gëív
("ethact");

394 i‡(
a˘
 =
NULL
 || 
	`°rcmp
◊˘, 
ëh_cuºít
->
«me
) != 0)

395 
	`£ãnv
("ëha˘", 
ëh_cuºít
->
«me
);

398 i‡(
fú°_Áûed
 =
ëh_cuºít
) {

399 
NëRe°¨tWøp
 = 1;

402 
	}
}

404 #ifde‡
CONFIG_NET_MULTI


405 
	$ëh_£t_cuºít
()

407 *
a˘
;

408 
ëh_devi˚
* 
ﬁd_cuºít
;

410 i‡(!
ëh_cuºít
)

413 
a˘
 = 
	`gëív
("ethact");

414 i‡(
a˘
 !
NULL
) {

415 
ﬁd_cuºít
 = 
ëh_cuºít
;

417 i‡(
	`°rcmp
(
ëh_cuºít
->
«me
, 
a˘
) == 0)

419 
ëh_cuºít
 =Éth_cuºít->
√xt
;

420 } 
ﬁd_cuºít
 !
ëh_cuºít
);

423 
	`£ãnv
("ëha˘", 
ëh_cuºít
->
«me
);

424 
	}
}

427 #i‡
deföed
(
CONFIG_NET_MULTI
)

428 *
	$ëh_gë_«me
 ()

430  (
ëh_cuºít
 ?Éth_cuºít->
«me
 : "unknown");

431 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/net/net.c

70 
	~<comm⁄.h
>

71 
	~<w©chdog.h
>

72 
	~<comm™d.h
>

73 
	~<√t.h
>

74 
	~"boŸp.h
"

75 
	~"t·p.h
"

76 
	~"øΩ.h
"

78 
	~<asm/addr•a˚.h
>

79 #unde‡
DEBUG


80 #ifde‡
CONFIG_STATUS_LED


81 
	~<°©us_Àd.h
>

82 
	~<miùhy.h
>

85 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_NET
)

87 
	#ARP_TIMEOUT
 3

	)

88 #i‚def 
CONFIG_NET_RETRY_COUNT


89 
	#ARP_TIMEOUT_COUNT
 8

	)

91 
	#ARP_TIMEOUT_COUNT
 (
CONFIG_NET_RETRY_COUNT
)

	)

95 
	#ET_DEBUG


	)

100 
IPaddr_t
 
	gNëOurSub√tMask
=0;

101 
IPaddr_t
 
	gNëOurG©ewayIP
=0;

102 
IPaddr_t
 
	gNëOurDNSIP
=0;

103 #i‡(
CONFIG_BOOTP_MASK
 & 
CONFIG_BOOTP_DNS2
)

104 
IPaddr_t
 
	gNëOurDNS2IP
=0;

106 
	gNëOurNISDomaö
[32]={0,};

107 
	gNëOurHo°Name
[32]={0,};

108 
	gNëOurRoŸP©h
[64]={0,};

109 
ush‹t
 
	gNëBoŸFûeSize
=0;

113 
ul⁄g
 
	gNëBoŸFûeX„rSize
;

114 
uch¨
 
	gNëOurEthî
[6];

115 
uch¨
 
	gNëSîvîEthî
[6] =

117 
IPaddr_t
 
	gNëOurIP
;

118 
IPaddr_t
 
	gNëSîvîIP
;

119 vﬁ©ûê
uch¨
 *
	gNëRxPkt
;

120 
	gNëRxPktLí
;

121 
	gNëIPID
;

122 
uch¨
 
	gNëBˇ°Addr
[6] =

124 
uch¨
 
	gNëEthîNuŒAddr
[6] =

126 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_CDP
)

127 
uch¨
 
	gNëCDPAddr
[6] =

130 
	gNëSèã
;

131 #ifde‡
CONFIG_NET_MULTI


132 
	gNëRe°¨tWøp
 = 0;

133 
	gNëRe°¨ãd
 = 0;

134 
	gNëDevExi°s
 = 0;

137 #ifde‡
CONFIG_NET_VLAN


139 
ush‹t
 
	gNëOurVLAN
 = 0xFFFF;

140 
ush‹t
 
	gNëOurN©iveVLAN
 = 0xFFFF;

143 
	gBoŸFûe
[128];

145 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_PING
)

146 
IPaddr_t
 
	gNëPögIP
;

148 
PögSèπ
();

151 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_CDP
)

152 
CDPSèπ
();

155 #ifde‡
CONFIG_NETCONSOLE


156 
NcSèπ
();

157 
nc_öput_∑ckë
(
uch¨
 *
pkt
, 
de°
, 
§c
, 
Àn
);

161 vﬁ©ûê
uch¨
 *
	gPktBuf
;

163 vﬁ©ûê
uch¨
 
	gPkt_Buf_Poﬁ
[(
PKTBUFSRX
+2Ë* 
PKTSIZE_ALIGN
 + 
PKTALIGN
];

168 vﬁ©ûê
uch¨
 *
	gNëRxPackës
[
PKTBUFSRX
];

170 
rxh™d_f
 *
	g∑ckëH™dÀr
;

171 
th™d_f
 *
	gtimeH™dÀr
;

172 
ul⁄g
 
	gtimeSèπ
;

173 
ul⁄g
 
	gtimeDñè
;

174 vﬁ©ûê
uch¨
 *
	gNëTxPackë
 = 0;

176 
√t_check_¥îeq
 (
¥Ÿo_t
 
¥Ÿocﬁ
);

180 
IPaddr_t
 
	gNëAΩWaôPackëIP
;

181 
IPaddr_t
 
	gNëAΩWaôRïlyIP
;

182 
uch¨
 *
	gNëAΩWaôPackëMAC
;

183 
uch¨
 *
	gNëAΩWaôTxPackë
;

184 
	gNëAΩWaôTxPackëSize
;

185 
uch¨
 
	gNëAΩWaôPackëBuf
[
PKTSIZE_ALIGN
 + 
PKTALIGN
];

186 
ul⁄g
 
	gNëAΩWaôTimîSèπ
;

187 
	gNëAΩWaôTry
;

196 
VALID_BUFFER_STRUCT
 
π2880_‰ì_buf_li°
;

198 
BUFFER_ELEM
 *
π2880_‰ì_buf_íåy_dequeue
(
VALID_BUFFER_STRUCT
 *
hdr
);

205 
	$AΩReque°
 ()

207 
i
;

208 vﬁ©ûê
uch¨
 *
pkt
;

209 
ARP_t
 *
¨p
;

211 #ifde‡
ET_DEBUG


212 
	`¥ötf
 ("ARP brﬂdˇ° %d\n", 
NëAΩWaôTry
);

214 
pkt
 = 
NëTxPackë
;

216 
pkt
 +
	`NëSëEthî
 (pkt, 
NëBˇ°Addr
, 
PROT_ARP
);

218 
¨p
 = (
ARP_t
 *Ë
pkt
;

220 
¨p
->
¨_hrd
 = 
	`ht⁄s
 (
ARP_ETHER
);

221 
¨p
->
¨_¥o
 = 
	`ht⁄s
 (
PROT_IP
);

222 
¨p
->
¨_h 
 = 6;

223 
¨p
->
¨_∂n
 = 4;

224 
¨p
->
¨_›
 = 
	`ht⁄s
 (
ARPOP_REQUEST
);

226 
	`mem˝y
 (&
¨p
->
¨_d©a
[0], 
NëOurEthî
, 6);

227 
	`NëWrôeIP
 ((
uch¨
 *Ë& 
¨p
->
¨_d©a
[6], 
NëOurIP
);

228 
i
 = 10; i < 16; ++i) {

229 
¨p
->
¨_d©a
[
i
] = 0;

232 i‡((
NëAΩWaôPackëIP
 & 
NëOurSub√tMask
) !=

233 (
NëOurIP
 & 
NëOurSub√tMask
)) {

234 i‡(
NëOurG©ewayIP
 == 0) {

235 
	`puts
 ("## Warning: gatewayipÇeeded butÇot set\n");

237 
NëAΩWaôRïlyIP
 = 
NëOurG©ewayIP
;

239 
NëAΩWaôRïlyIP
 = 
NëAΩWaôPackëIP
;

242 
	`NëWrôeIP
 ((
uch¨
 *Ë& 
¨p
->
¨_d©a
[16], 
NëAΩWaôRïlyIP
);

243 (Ë
	`ëh_£nd
 (
NëTxPackë
, (
pkt
 - NëTxPackëË+ 
ARP_HDR_SIZE
);

244 
	}
}

246 
	$AΩTimeoutCheck
()

248 
ul⁄g
 
t
;

250 i‡(!
NëAΩWaôPackëIP
)

253 
t
 = 
	`gë_timî
(0);

256 i‡((
t
 - 
NëAΩWaôTimîSèπ
Ë> 
ARP_TIMEOUT
 * 
CFG_HZ
) {

257 
NëAΩWaôTry
++;

259 i‡(
NëAΩWaôTry
 >
ARP_TIMEOUT_COUNT
) {

260 
	`puts
 ("\nARP Retry countÉxceeded; startingágain\n");

261 
NëAΩWaôTry
 = 0;

262 
	`NëSèπAgaö
();

264 
NëAΩWaôTimîSèπ
 = 
t
;

265 
	`puts
("\nArpTimeoutCheck \n");

266 
	`AΩReque°
();

269 
	}
}

278 
	$NëLo›
(
¥Ÿo_t
 
¥Ÿocﬁ
)

280 
DECLARE_GLOBAL_DATA_PTR
;

282 
bd_t
 *
bd
 = 
gd
->bd;

284 #ifde‡
CONFIG_NET_MULTI


285 
NëRe°¨ãd
 = 0;

286 
NëDevExi°s
 = 0;

290 
NëAΩWaôPackëMAC
 = 
NULL
;

291 
NëAΩWaôTxPackë
 = 
NULL
;

292 
NëAΩWaôPackëIP
 = 0;

293 
NëAΩWaôRïlyIP
 = 0;

294 
NëAΩWaôTxPackë
 = 
NULL
;

295 #ifde‡
DEBUG


296 
	`¥ötf
("Fûe: %s, Func: %s, Löe: %d\n", 
__FILE__
,
__FUNCTION__
 , 
__LINE__
);

299 i‡(!
NëTxPackë
) {

300 
i
;

301 
BUFFER_ELEM
 *
buf
;

305 
buf
 = 
	`π2880_‰ì_buf_íåy_dequeue
(&
π2880_‰ì_buf_li°
);

306 
NëTxPackë
 = 
buf
->
pbuf
;

308 
	`debug
("\¿NëTxPackë = 0x%08X \n",
NëTxPackë
);

309 
i
 = 0; i < 
NUM_RX_DESC
; i++) {

311 
buf
 = 
	`π2880_‰ì_buf_íåy_dequeue
(&
π2880_‰ì_buf_li°
);

312 if(
buf
 =
NULL
)

314 
	`¥ötf
("\n Packet Buffer isÉmpty ! \n");

318 
NëRxPackës
[
i
] = 
buf
->
pbuf
;

323 
NëTxPackë
 = 
	`KSEG1ADDR
(NetTxPacket);

325 
	`¥ötf
("\¿KSEG1ADDR(NëTxPackëË0x%08X \n",
NëTxPackë
);

327 i‡(!
NëAΩWaôTxPackë
) {

328 
NëAΩWaôTxPackë
 = &
NëAΩWaôPackëBuf
[0] + (
PKTALIGN
 - 1);

329 
NëAΩWaôTxPackë
 -(
ul⁄g
)NëAΩWaôTxPackë % 
PKTALIGN
;

330 
NëAΩWaôTxPackëSize
 = 0;

332 
	`¥ötf
("\n NetLoop,callÉth_halt ! \n");

333 
	`ëh_hÆt
();

334 #ifde‡
CONFIG_NET_MULTI


335 
	`ëh_£t_cuºít
();

337 
	`¥ötf
("\n NetLoop,callÉth_init ! \n");

338 i‡(
	`ëh_öô
(
bd
) < 0)

340 
	`¥ötf
("\nÉth_init is fail !!\n");

344 
ª°¨t
:

345 #ifde‡
CONFIG_NET_MULTI


346 
	`mem˝y
 (
NëOurEthî
, 
	`ëh_gë_dev
()->
íëaddr
, 6);

348 
	`mem˝y
 (
NëOurEthî
, 
bd
->
bi_íëaddr
, 6);

351 
NëSèã
 = 
NETLOOP_CONTINUE
;

359 
¥Ÿocﬁ
) {

360 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_NFS
)

361 
NFS
:

363 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_PING
)

364 
PING
:

366 
NETCONS
:

367 
TFTP
:

368 
	`NëC›yIP
(&
NëOurIP
, &
bd
->
bi_ù_addr
);

369 
NëOurG©ewayIP
 = 
	`gëív_IPaddr
 ("gatewayip");

370 
NëOurSub√tMask

	`gëív_IPaddr
 ("netmask");

371 #ifde‡
CONFIG_NET_VLAN


372 
NëOurVLAN
 = 
	`gëív_VLAN
("vlan");

373 
NëOurN©iveVLAN
 = 
	`gëív_VLAN
("nvlan");

375 
NëSîvîIP
 = 
	`gëív_IPaddr
 ("serverip");

378 
BOOTP
:

379 
RARP
:

384 
NëOurIP
 = 0;

385 
NëSîvîIP
 = 
	`gëív_IPaddr
 ("serverip");

386 #ifde‡
CONFIG_NET_VLAN


387 
NëOurVLAN
 = 
	`gëív_VLAN
("vlan");

388 
NëOurN©iveVLAN
 = 
	`gëív_VLAN
("nvlan");

390 
CDP
:

391 #ifde‡
CONFIG_NET_VLAN


392 
NëOurVLAN
 = 
	`gëív_VLAN
("vlan");

393 
NëOurN©iveVLAN
 = 
	`gëív_VLAN
("nvlan");

401 
	`√t_check_¥îeq
 (
¥Ÿocﬁ
)) {

406 #ifde‡
CONFIG_NET_MULTI


413 #ifde‡
CONFIG_NET_MULTI


414 
NëDevExi°s
 = 1;

416 
¥Ÿocﬁ
) {

417 
TFTP
:

419 
	`T·pSèπ
();

422 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_DHCP
)

423 
DHCP
:

425 
BoŸpTry
 = 0;

426 
NëOurIP
 = 0;

427 
NëSîvîIP
 = 
	`gëív_IPaddr
 ("serverip");

428 
	`Dh˝Reque°
();

433 
BOOTP
:

434 
BoŸpTry
 = 0;

435 
	`BoŸpReque°
 ();

438 
RARP
:

439 
R¨pTry
 = 0;

440 
	`R¨pReque°
 ();

443 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_PING
)

444 
PING
:

445 
	`PögSèπ
();

448 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_NFS
)

449 
NFS
:

450 
	`NfsSèπ
();

453 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_CDP
)

454 
CDP
:

455 
	`CDPSèπ
();

458 #ifde‡
CONFIG_NETCONSOLE


459 
NETCONS
:

460 
	`NcSèπ
();

467 
NëBoŸFûeX„rSize
 = 0;

471 #i‡
	`deföed
(
CONFIG_MII
Ë|| (
CONFIG_COMMANDS
 & 
CFG_CMD_MII
)

472 #i‡
	`deföed
(
CFG_FAULT_ECHO_LINK_DOWN
Ë&& deföed(
CONFIG_STATUS_LED
Ë&& deföed(
STATUS_LED_RED
)

476 if(
	`miùhy_lök
(
CFG_FAULT_MII_ADDR
)) {

477 
	`°©us_Àd_£t
 (
STATUS_LED_RED
, 
STATUS_LED_OFF
);

479 
	`°©us_Àd_£t
 (
STATUS_LED_RED
, 
STATUS_LED_ON
);

489 
	`WATCHDOG_RESET
();

490 #ifde‡
CONFIG_SHOW_ACTIVITY


492 
	`show_a˘ivôy
(
¨g
);

493 
	`show_a˘ivôy
(1);

500 
	`ëh_rx
();

505 i‡(
	`˘æc
()) {

506 
	`ëh_hÆt
();

507 
	`puts
 ("\nAbort\n");

511 
	`AΩTimeoutCheck
();

517 i‡(
timeH™dÀr
 && ((
	`gë_timî
(0Ë- 
timeSèπ
Ë> 
timeDñè
)) {

518 
th™d_f
 *
x
;

520 #i‡
	`deföed
(
CONFIG_MII
Ë|| (
CONFIG_COMMANDS
 & 
CFG_CMD_MII
)

521 #i‡
	`deföed
(
CFG_FAULT_ECHO_LINK_DOWN
Ë&& deföed(
CONFIG_STATUS_LED
Ë&& deföed(
STATUS_LED_RED
)

525 if(
	`miùhy_lök
(
CFG_FAULT_MII_ADDR
)) {

526 
	`°©us_Àd_£t
 (
STATUS_LED_RED
, 
STATUS_LED_OFF
);

528 
	`°©us_Àd_£t
 (
STATUS_LED_RED
, 
STATUS_LED_ON
);

532 
x
 = 
timeH™dÀr
;

533 
timeH™dÀr
 = (
th™d_f
 *)0;

534 (*
x
)();

538 
NëSèã
) {

540 
NETLOOP_RESTART
:

541 #ifde‡
CONFIG_NET_MULTI


542 
NëRe°¨ãd
 = 1;

544 
ª°¨t
;

546 
NETLOOP_SUCCESS
:

547 i‡(
NëBoŸFûeX„rSize
 > 0) {

548 
buf
[10];

549 
	`¥ötf
("BytesÅransferred = %ld (%lx hex)\n",

550 
NëBoŸFûeX„rSize
,

551 
NëBoŸFûeX„rSize
);

552 
	`•rötf
(
buf
, "%lx", 
NëBoŸFûeX„rSize
);

553 
	`£ãnv
("fûesize", 
buf
);

555 
	`•rötf
(
buf
, "%lX", ()
lﬂd_addr
);

556 
	`£ãnv
("fûóddr", 
buf
);

558 
	`ëh_hÆt
();

559  
NëBoŸFûeX„rSize
;

561 
NETLOOP_FAIL
:

565 
	}
}

570 
	$°¨tAgaöTimeout
()

572 
NëSèã
 = 
NETLOOP_RESTART
;

573 
	}
}

576 
	$°¨tAgaöH™dÀr
(
uch¨
 * 
pkt
, 
de°
, 
§c
, 
Àn
)

579 
	}
}

581 
	$NëSèπAgaö
 ()

583 #ifdef 
CONFIG_NET_MULTI


584 
DECLARE_GLOBAL_DATA_PTR
;

586 *
ƒëry
;

587 
n‹ëry
 = 0, 
⁄˚
 = 0;

589 i‡((
ƒëry
 = 
	`gëív
 ("√åëry")Ë!
NULL
) {

590 
n‹ëry
 = (
	`°rcmp
 (
ƒëry
, "no") == 0);

591 
⁄˚
 = (
	`°rcmp
 (
ƒëry
, "once") == 0);

593 i‡(
n‹ëry
) {

594 
	`ëh_hÆt
 ();

595 
NëSèã
 = 
NETLOOP_FAIL
;

598 #i‚de‡
CONFIG_NET_MULTI


599 
	`NëSëTimeout
 (10 * 
CFG_HZ
, 
°¨tAgaöTimeout
);

600 
	`NëSëH™dÀr
 (
°¨tAgaöH™dÀr
);

602 
	`ëh_hÆt
 ();

603 
	`ëh_åy_™Ÿhî
 (!
NëRe°¨ãd
);

604 
	`ëh_öô
 (
gd
->
bd
);

605 i‡(
NëRe°¨tWøp
) {

606 
NëRe°¨tWøp
 = 0;

607 i‡(
NëDevExi°s
 && !
⁄˚
) {

608 
	`NëSëTimeout
 (10UL * 
CFG_HZ
, 
°¨tAgaöTimeout
);

609 
	`NëSëH™dÀr
 (
°¨tAgaöH™dÀr
);

611 
NëSèã
 = 
NETLOOP_FAIL
;

614 
NëSèã
 = 
NETLOOP_RESTART
;

617 
	}
}

625 
	$NëSëH™dÀr
(
rxh™d_f
 * 
f
)

627 
∑ckëH™dÀr
 = 
f
;

628 
	}
}

632 
	$NëSëTimeout
(
ul⁄g
 
iv
, 
th™d_f
 * 
f
)

634 i‡(
iv
 == 0) {

635 
timeH™dÀr
 = (
th™d_f
 *)0;

637 
timeH™dÀr
 = 
f
;

638 
timeSèπ
 = 
	`gë_timî
(0);

639 
timeDñè
 = 
iv
;

641 
	}
}

645 
	$NëSídPackë
(vﬁ©ûê
uch¨
 * 
pkt
, 
Àn
)

647 (Ë
	`ëh_£nd
(
pkt
, 
Àn
);

648 
	}
}

651 
	$NëSídUDPPackë
(
uch¨
 *
ëhî
, 
IPaddr_t
 
de°
, 
dp‹t
, 
•‹t
, 
Àn
)

653 
uch¨
 *
pkt
;

656 i‡(
de°
 == 0)

657 
de°
 = 0xFFFFFFFF;

660 i‡(
de°
 == 0xFFFFFFFF)

661 
ëhî
 = 
NëBˇ°Addr
;

664 i‡(
	`memcmp
(
ëhî
, 
NëEthîNuŒAddr
, 6) == 0) {

666 #ifde‡
ET_DEBUG


667 
	`¥ötf
("£ndög ARP f‹ %08lx\n", 
de°
);

670 
NëAΩWaôPackëIP
 = 
de°
;

671 
NëAΩWaôPackëMAC
 = 
ëhî
;

673 
pkt
 = 
NëAΩWaôTxPackë
;

674 
pkt
 +
	`NëSëEthî
 (pkt, 
NëAΩWaôPackëMAC
, 
PROT_IP
);

676 
	`NëSëIP
 (
pkt
, 
de°
, 
dp‹t
, 
•‹t
, 
Àn
);

677 
	`mem˝y
(
pkt
 + 
IP_HDR_SIZE
, (
uch¨
 *)
NëTxPackë
 + (pkà- (uch¨ *)
NëAΩWaôTxPackë
Ë+ IP_HDR_SIZE, 
Àn
);

680 
NëAΩWaôTxPackëSize
 = (
pkt
 - 
NëAΩWaôTxPackë
Ë+ 
IP_HDR_SIZE
 + 
Àn
;

683 
NëAΩWaôTry
 = 1;

684 
NëAΩWaôTimîSèπ
 = 
	`gë_timî
(0);

685 
	`AΩReque°
();

689 #ifde‡
ET_DEBUG


690 
	`¥ötf
("sending UDPÅo %08lx/%02x:%02x:%02x:%02x:%02x:%02x\n",

691 
de°
, 
ëhî
[0],Éther[1],Éther[2],Éther[3],Éther[4],Éther[5]);

694 
pkt
 = (
uch¨
 *)
NëTxPackë
;

695 
pkt
 +
	`NëSëEthî
 (pkt, 
ëhî
, 
PROT_IP
);

696 
	`NëSëIP
 (
pkt
, 
de°
, 
dp‹t
, 
•‹t
, 
Àn
);

697 (Ë
	`ëh_£nd
(
NëTxPackë
, (
pkt
 - NëTxPackëË+ 
IP_HDR_SIZE
 + 
Àn
);

700 
	}
}

702 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_PING
)

703 
ush‹t
 
	gPögSeqNo
;

705 
	$PögSíd
()

707 
uch¨
 
mac
[6];

708 vﬁ©ûê
IP_t
 *
ù
;

709 vﬁ©ûê
ush‹t
 *
s
;

710 
uch¨
 *
pkt
;

714 
	`mem˝y
(
mac
, 
NëEthîNuŒAddr
, 6);

716 #ifde‡
ET_DEBUG


717 
	`¥ötf
("£ndög ARP f‹ %08lx\n", 
NëPögIP
);

719 
	`¥ötf
("kaikî,PögSíd, sídög ARP f‹ %08lx\n", 
NëPögIP
);

720 
NëAΩWaôPackëIP
 = 
NëPögIP
;

721 
NëAΩWaôPackëMAC
 = 
mac
;

723 
pkt
 = 
NëAΩWaôTxPackë
;

724 
pkt
 +
	`NëSëEthî
’kt, 
mac
, 
PROT_IP
);

726 
ù
 = (vﬁ©ûê
IP_t
 *)
pkt
;

731 
ù
->
ù_hl_v
 = 0x45;

732 
ù
->
ù_tos
 = 0;

733 
ù
->
ù_Àn
 = 
	`ht⁄s
(
IP_HDR_SIZE_NO_UDP
 + 8);

734 
ù
->
ù_id
 = 
	`ht⁄s
(
NëIPID
++);

735 
ù
->
ù_off
 = 
	`ht⁄s
(0x4000);

736 
ù
->
ù_âl
 = 255;

737 
ù
->
ù_p
 = 0x01;

738 
ù
->
ù_sum
 = 0;

739 
	`NëC›yIP
((*)&
ù
->
ù_§c
, &
NëOurIP
);

740 
	`NëC›yIP
((*)&
ù
->
ù_d°
, &
NëPögIP
);

741 
ù
->
ù_sum
 = ~
	`NëCksum
((
uch¨
 *)ù, 
IP_HDR_SIZE_NO_UDP
 / 2);

743 
s
 = &
ù
->
udp_§c
;

744 
s
[0] = 
	`ht⁄s
(0x0800);

745 
s
[1] = 0;

746 
s
[2] = 0;

747 
s
[3] = 
	`ht⁄s
(
PögSeqNo
++);

748 
s
[1] = ~
	`NëCksum
((
uch¨
 *)s, 8/2);

751 
NëAΩWaôTxPackëSize
 = (
pkt
 - 
NëAΩWaôTxPackë
Ë+ 
IP_HDR_SIZE_NO_UDP
 + 8;

754 
NëAΩWaôTry
 = 1;

755 
NëAΩWaôTimîSèπ
 = 
	`gë_timî
(0);

756 
	`AΩReque°
();

758 
	}
}

761 
	$PögTimeout
 ()

763 
	`ëh_hÆt
();

764 
NëSèã
 = 
NETLOOP_FAIL
;

765 
	}
}

768 
	$PögH™dÀr
 (
uch¨
 * 
pkt
, 
de°
, 
§c
, 
Àn
)

770 
IPaddr_t
 
tmp
;

771 vﬁ©ûê
IP_t
 *
ù
 = (vﬁ©ûêIP_à*)
pkt
;

773 
tmp
 = 
	`NëRódIP
((*)&
ù
->
ù_§c
);

774 i‡(
tmp
 !
NëPögIP
)

777 
NëSèã
 = 
NETLOOP_SUCCESS
;

778 
	}
}

780 
	$PögSèπ
()

782 #i‡
	`deföed
(
CONFIG_NET_MULTI
)

783 
	`¥ötf
 ("Usög %†devi˚\n", 
	`ëh_gë_«me
());

785 
	`NëSëTimeout
 (10 * 
CFG_HZ
, 
PögTimeout
);

786 
	`NëSëH™dÀr
 (
PögH™dÀr
);

788 
	`PögSíd
();

789 
	}
}

792 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_CDP
)

794 
	#CDP_DEVICE_ID_TLV
 0x0001

	)

795 
	#CDP_ADDRESS_TLV
 0x0002

	)

796 
	#CDP_PORT_ID_TLV
 0x0003

	)

797 
	#CDP_CAPABILITIES_TLV
 0x0004

	)

798 
	#CDP_VERSION_TLV
 0x0005

	)

799 
	#CDP_PLATFORM_TLV
 0x0006

	)

800 
	#CDP_NATIVE_VLAN_TLV
 0x000a

	)

801 
	#CDP_APPLIANCE_VLAN_TLV
 0x000e

	)

802 
	#CDP_TRIGGER_TLV
 0x000f

	)

803 
	#CDP_POWER_CONSUMPTION_TLV
 0x0010

	)

804 
	#CDP_SYSNAME_TLV
 0x0014

	)

805 
	#CDP_SYSOBJECT_TLV
 0x0015

	)

806 
	#CDP_MANAGEMENT_ADDRESS_TLV
 0x0016

	)

808 
	#CDP_TIMEOUT
 (
CFG_HZ
/4Ë

	)

810 
	gCDPSeq
;

811 
	gCDPOK
;

813 
ush‹t
 
	gCDPN©iveVLAN
;

814 
ush‹t
 
	gCDPAµlün˚VLAN
;

816 c⁄° 
uch¨
 
	gCDP_SNAP_hdr
[8] = { 0xAA, 0xAA, 0x03, 0x00, 0x00, 0x0C, 0x20, 0x00 };

818 
ush‹t
 
	$CDP_compuã_csum
(c⁄° 
uch¨
 *
buff
, 
ush‹t
 
Àn
)

820 
ush‹t
 
csum
;

821 
odd
;

822 
ul⁄g
 
ªsu…
 = 0;

823 
ush‹t
 
À·ovî
;

825 i‡(
Àn
 > 0) {

826 
odd
 = 1 & (
ul⁄g
)
buff
;

827 i‡(
odd
) {

828 
ªsu…
 = *
buff
 << 8;

829 
Àn
--;

830 
buff
++;

832 
Àn
 > 1) {

833 
ªsu…
 +*((c⁄° 
ush‹t
 *)
buff
)++;

834 i‡(
ªsu…
 & 0x80000000)

835 
ªsu…
 = (result & 0xFFFF) + (result >> 16);

836 
Àn
 -= 2;

838 i‡(
Àn
) {

839 
À·ovî
 = (sig√d )(*(c⁄° sig√d *)
buff
);

841 
ªsu…
 = (ªsu… & 0xffff0000Ë| (‘esu… + 
À·ovî
) & 0x0000ffff);

843 
ªsu…
 >> 16)

844 
ªsu…
 = (result & 0xFFFF) + (result >> 16);

846 i‡(
odd
)

847 
ªsu…
 = ((result >> 8) & 0xff) | ((result & 0xff) << 8);

851 
ªsu…
 = (result & 0xffff) + (result >> 16);

853 
ªsu…
 = (result & 0xffff) + (result >> 16);

855 
ªsu…
 = (result & 0xffff) + (result >> 16);

858 
csum
 = ~(
ush‹t
)
ªsu…
;

861 i‡(
csum
 !
	`ht⁄s
(csum))

862 
csum
 = 
	`ht⁄s
(csum);

864  
csum
;

865 
	}
}

867 
	$CDPSídTriggî
()

869 vﬁ©ûê
uch¨
 *
pkt
;

870 vﬁ©ûê
ush‹t
 *
s
;

871 vﬁ©ûê
ush‹t
 *
˝
;

872 
Ethî√t_t
 *
ë
;

873 
Àn
;

874 
ush‹t
 
chksum
;

875 #i‡
	`deföed
(
CONFIG_CDP_DEVICE_ID
Ë|| deföed(
CONFIG_CDP_PORT_ID
) || \

876 
	`deföed
(
CONFIG_CDP_VERSION
Ë|| deföed(
CONFIG_CDP_PLATFORM
)

877 
buf
[32];

880 
pkt
 = 
NëTxPackë
;

881 
ë
 = (
Ethî√t_t
 *)
pkt
;

886 
	`mem˝y
(
ë
->
ë_de°
, 
NëCDPAddr
, 6);

887 
	`mem˝y
(
ë
->
ë_§c
, 
NëOurEthî
, 6);

889 
pkt
 +
ETHER_HDR_SIZE
;

892 
	`mem˝y
((
uch¨
 *)
pkt
, 
CDP_SNAP_hdr
, (CDP_SNAP_hdr));

893 
pkt
 +(
CDP_SNAP_hdr
);

896 *
pkt
++ = 0x02;

897 *
pkt
++ = 180;

898 
s
 = (vﬁ©ûê
ush‹t
 *)
pkt
;

899 
˝
 = 
s
;

900 *
s
++ = 
	`ht⁄s
(0);

903 #ifde‡
CONFIG_CDP_DEVICE_ID


904 *
s
++ = 
	`ht⁄s
(
CDP_DEVICE_ID_TLV
);

905 *
s
++ = 
	`ht⁄s
(
CONFIG_CDP_DEVICE_ID
);

906 
	`mem£t
(
buf
, 0, (buf));

907 
	`•rötf
(
buf
, 
CONFIG_CDP_DEVICE_ID_PREFIX
 "%02X%02X%02X%02X%02X%02X",

908 
NëOurEthî
[0] & 0xff, NetOurEther[1] & 0xff,

909 
NëOurEthî
[2] & 0xff, NetOurEther[3] & 0xff,

910 
NëOurEthî
[4] & 0xff, NetOurEther[5] & 0xff);

911 
	`mem˝y
((
uch¨
 *)
s
, 
buf
, 16);

912 
s
 += 16 / 2;

915 #ifde‡
CONFIG_CDP_PORT_ID


916 *
s
++ = 
	`ht⁄s
(
CDP_PORT_ID_TLV
);

917 
	`mem£t
(
buf
, 0, (buf));

918 
	`•rötf
(
buf
, 
CONFIG_CDP_PORT_ID
, 
	`ëh_gë_dev_ödex
());

919 
Àn
 = 
	`°æí
(
buf
);

920 i‡(
Àn
 & 1)

921 
Àn
++;

922 *
s
++ = 
	`ht⁄s
(
Àn
 + 4);

923 
	`mem˝y
((
uch¨
 *)
s
, 
buf
, 
Àn
);

924 
s
 +
Àn
 / 2;

927 #ifde‡
CONFIG_CDP_CAPABILITIES


928 *
s
++ = 
	`ht⁄s
(
CDP_CAPABILITIES_TLV
);

929 *
s
++ = 
	`ht⁄s
(8);

930 *(
ul⁄g
 *)
s
 = 
	`ht⁄l
(
CONFIG_CDP_CAPABILITIES
);

931 
s
 += 2;

934 #ifde‡
CONFIG_CDP_VERSION


935 *
s
++ = 
	`ht⁄s
(
CDP_VERSION_TLV
);

936 
	`mem£t
(
buf
, 0, (buf));

937 
	`°r˝y
(
buf
, 
CONFIG_CDP_VERSION
);

938 
Àn
 = 
	`°æí
(
buf
);

939 i‡(
Àn
 & 1)

940 
Àn
++;

941 *
s
++ = 
	`ht⁄s
(
Àn
 + 4);

942 
	`mem˝y
((
uch¨
 *)
s
, 
buf
, 
Àn
);

943 
s
 +
Àn
 / 2;

946 #ifde‡
CONFIG_CDP_PLATFORM


947 *
s
++ = 
	`ht⁄s
(
CDP_PLATFORM_TLV
);

948 
	`mem£t
(
buf
, 0, (buf));

949 
	`°r˝y
(
buf
, 
CONFIG_CDP_PLATFORM
);

950 
Àn
 = 
	`°æí
(
buf
);

951 i‡(
Àn
 & 1)

952 
Àn
++;

953 *
s
++ = 
	`ht⁄s
(
Àn
 + 4);

954 
	`mem˝y
((
uch¨
 *)
s
, 
buf
, 
Àn
);

955 
s
 +
Àn
 / 2;

958 #ifde‡
CONFIG_CDP_TRIGGER


959 *
s
++ = 
	`ht⁄s
(
CDP_TRIGGER_TLV
);

960 *
s
++ = 
	`ht⁄s
(8);

961 *(
ul⁄g
 *)
s
 = 
	`ht⁄l
(
CONFIG_CDP_TRIGGER
);

962 
s
 += 2;

965 #ifde‡
CONFIG_CDP_POWER_CONSUMPTION


966 *
s
++ = 
	`ht⁄s
(
CDP_POWER_CONSUMPTION_TLV
);

967 *
s
++ = 
	`ht⁄s
(6);

968 *
s
++ = 
	`ht⁄s
(
CONFIG_CDP_POWER_CONSUMPTION
);

972 
Àn
 = (
uch¨
 *)
s
 - ((uch¨ *)
NëTxPackë
 + 
ETHER_HDR_SIZE
);

973 
ë
->
ë_¥ŸÀn
 = 
	`ht⁄s
(
Àn
);

975 
Àn
 = 
ETHER_HDR_SIZE
 + (
CDP_SNAP_hdr
);

976 
chksum
 = 
	`CDP_compuã_csum
((
uch¨
 *)
NëTxPackë
 + 
Àn
, (uch¨ *)
s
 - (NetTxPacket +Üen));

977 i‡(
chksum
 == 0)

978 
chksum
 = 0xFFFF;

979 *
˝
 = 
	`ht⁄s
(
chksum
);

981 (Ë
	`ëh_£nd
(
NëTxPackë
, (
uch¨
 *)
s
 - NetTxPacket);

983 
	}
}

986 
	$CDPTimeout
 ()

988 
CDPSeq
++;

990 i‡(
CDPSeq
 < 3) {

991 
	`NëSëTimeout
 (
CDP_TIMEOUT
, 
CDPTimeout
);

992 
	`CDPSídTriggî
();

997 i‡(!
CDPOK
)

998 
	`NëSèπAgaö
();

1000 
NëSèã
 = 
NETLOOP_SUCCESS
;

1001 
	}
}

1004 
	$CDPDummyH™dÀr
 (
uch¨
 * 
pkt
, 
de°
, 
§c
, 
Àn
)

1007 
	}
}

1010 
	$CDPH™dÀr
(c⁄° 
uch¨
 * 
pkt
, 
Àn
)

1012 c⁄° 
uch¨
 *
t
;

1013 c⁄° 
ush‹t
 *
ss
;

1014 
ush‹t
 
ty≥
, 
éí
;

1015 
uch¨
 
≠∂id
;

1016 
ush‹t
 
vœn
, 
nvœn
;

1019 i‡(
Àn
 < (
CDP_SNAP_hdr
) + 4)

1020 
pkt_sh‹t
;

1023 i‡(
	`memcmp
(
pkt
, 
CDP_SNAP_hdr
, (CDP_SNAP_hdr)) != 0)

1026 
pkt
 +(
CDP_SNAP_hdr
);

1027 
Àn
 -(
CDP_SNAP_hdr
);

1030 i‡(
pkt
[0] < 0x02 ||Ökt[1] == 0)

1034 i‡(
pkt
[0] != 0x02)

1035 
	`¥ötf
("** WARNING: CDPÖacketÑeceived witháÖrotocol version %d > 2\n",

1036 
pkt
[0] & 0xff);

1038 i‡(
	`CDP_compuã_csum
(
pkt
, 
Àn
) != 0)

1041 
pkt
 += 4;

1042 
Àn
 -= 4;

1044 
vœn
 = 
	`ht⁄s
(-1);

1045 
nvœn
 = 
	`ht⁄s
(-1);

1046 
Àn
 > 0) {

1047 i‡(
Àn
 < 4)

1048 
pkt_sh‹t
;

1050 
ss
 = (c⁄° 
ush‹t
 *)
pkt
;

1051 
ty≥
 = 
	`¡ohs
(
ss
[0]);

1052 
éí
 = 
	`¡ohs
(
ss
[1]);

1053 i‡(
éí
 > 
Àn
) {

1054 
pkt_sh‹t
;

1057 
pkt
 +
éí
;

1058 
Àn
 -
éí
;

1060 
ss
 += 2;

1061 
éí
 -= 4;

1063 
ty≥
) {

1064 
CDP_DEVICE_ID_TLV
:

1066 
CDP_ADDRESS_TLV
:

1068 
CDP_PORT_ID_TLV
:

1070 
CDP_CAPABILITIES_TLV
:

1072 
CDP_VERSION_TLV
:

1074 
CDP_PLATFORM_TLV
:

1076 
CDP_NATIVE_VLAN_TLV
:

1077 
nvœn
 = *
ss
;

1079 
CDP_APPLIANCE_VLAN_TLV
:

1080 
t
 = (c⁄° 
uch¨
 *)
ss
;

1081 
éí
 > 0) {

1082 i‡(
éí
 < 3)

1083 
pkt_sh‹t
;

1085 
≠∂id
 = 
t
[0];

1086 
ss
 = (c⁄° 
ush‹t
 *)(
t
 + 1);

1088 #ifde‡
CONFIG_CDP_APPLIANCE_VLAN_TYPE


1089 i‡(
≠∂id
 =
CONFIG_CDP_APPLIANCE_VLAN_TYPE
)

1090 
vœn
 = *
ss
;

1092 
vœn
 = 
	`¡ohs
(*
ss
);

1094 
t
 +3; 
éí
 -= 3;

1097 
CDP_TRIGGER_TLV
:

1099 
CDP_POWER_CONSUMPTION_TLV
:

1101 
CDP_SYSNAME_TLV
:

1103 
CDP_SYSOBJECT_TLV
:

1105 
CDP_MANAGEMENT_ADDRESS_TLV
:

1110 
CDPAµlün˚VLAN
 = 
vœn
;

1111 
CDPN©iveVLAN
 = 
nvœn
;

1113 
CDPOK
 = 1;

1116 
pkt_sh‹t
:

1117 
	`¥ötf
("** CDPÖacket isÅoo short\n");

1119 
	}
}

1121 
	$CDPSèπ
()

1123 #i‡
	`deföed
(
CONFIG_NET_MULTI
)

1124 
	`¥ötf
 ("Usög %†devi˚\n", 
	`ëh_gë_«me
());

1126 
CDPSeq
 = 0;

1127 
CDPOK
 = 0;

1129 
CDPN©iveVLAN
 = 
	`ht⁄s
(-1);

1130 
CDPAµlün˚VLAN
 = 
	`ht⁄s
(-1);

1132 
	`NëSëTimeout
 (
CDP_TIMEOUT
, 
CDPTimeout
);

1133 
	`NëSëH™dÀr
 (
CDPDummyH™dÀr
);

1135 
	`CDPSídTriggî
();

1136 
	}
}

1141 
	$NëRe˚ive
(vﬁ©ûê
uch¨
 * 
öpkt
, 
Àn
)

1143 
Ethî√t_t
 *
ë
;

1144 
IP_t
 *
ù
;

1145 
ARP_t
 *
¨p
;

1146 
IPaddr_t
 
tmp
;

1147 
x
;

1148 
uch¨
 *
pkt
;

1149 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_CDP
)

1150 
iscdp
;

1152 
ush‹t
 
˘i
 = 0;

1153 #ifde‡
CONFIG_NET_VLAN


1154 
ush‹t
 
vœnid
 = 
VLAN_NONE
, 
myvœnid
, 
mynvœnid
;

1157 #ifde‡
ET_DEBUG


1158 
	`¥ötf
("packetÑeceived\n");

1161 
NëRxPkt
 = 
öpkt
;

1162 
NëRxPktLí
 = 
Àn
;

1163 
ë
 = (
Ethî√t_t
 *)
öpkt
;

1166 i‡(
Àn
 < 
ETHER_HDR_SIZE
)

1168 
	`¥ötf
("\¿í[%d] < ETHER_HDR_SIZE\n",
Àn
);

1172 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_CDP
)

1174 
iscdp
 = 
	`memcmp
(
ë
->
ë_de°
, 
NëCDPAddr
, 6) == 0;

1177 #ifde‡
CONFIG_NET_VLAN


1178 
myvœnid
 = 
	`¡ohs
(
NëOurVLAN
);

1179 i‡(
myvœnid
 =(
ush‹t
)-1)

1180 
myvœnid
 = 
VLAN_NONE
;

1181 
mynvœnid
 = 
	`¡ohs
(
NëOurN©iveVLAN
);

1182 i‡(
mynvœnid
 =(
ush‹t
)-1)

1183 
mynvœnid
 = 
VLAN_NONE
;

1186 
x
 = 
	`¡ohs
(
ë
->
ë_¥ŸÀn
);

1188 #ifde‡
ET_DEBUG


1189 
	`¥ötf
("packetÑeceived\n");

1192 i‡(
x
 < 1514) {

1196 
x
 = 
	`¡ohs
(
ë
->
ë_¥Ÿ
);

1198 
ù
 = (
IP_t
 *)(
öpkt
 + 
E802_HDR_SIZE
);

1199 
Àn
 -
E802_HDR_SIZE
;

1201 } i‡(
x
 !
PROT_VLAN
) {

1202 
ù
 = (
IP_t
 *)(
öpkt
 + 
ETHER_HDR_SIZE
);

1203 
Àn
 -
ETHER_HDR_SIZE
;

1206 #ifde‡
CONFIG_NET_VLAN


1207 
VLAN_Ethî√t_t
 *
vë
 = (VLAN_Ethî√t_à*)
ë
;

1209 #ifde‡
ET_DEBUG


1210 
	`¥ötf
("VLANÖacketÑeceived\n");

1213 i‡(
Àn
 < 
VLAN_ETHER_HDR_SIZE
)

1217 i‡((
	`¡ohs
(
NëOurVLAN
Ë& 
VLAN_IDMASK
Ë=
VLAN_NONE


1218 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_CDP
)

1219 && 
iscdp
 == 0

1224 
˘i
 = 
	`¡ohs
(
vë
->
vë_èg
);

1225 
vœnid
 = 
˘i
 & 
VLAN_IDMASK
;

1226 
x
 = 
	`¡ohs
(
vë
->
vë_ty≥
);

1228 
ù
 = (
IP_t
 *)(
öpkt
 + 
VLAN_ETHER_HDR_SIZE
);

1229 
Àn
 -
VLAN_ETHER_HDR_SIZE
;

1235 #ifde‡
ET_DEBUG


1236 
	`¥ötf
("Re˚ivê‰omÖrŸocﬁ 0x%x\n", 
x
);

1239 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_CDP
)

1240 i‡(
iscdp
) {

1241 
	`CDPH™dÀr
((
uch¨
 *)
ù
, 
Àn
);

1246 #ifde‡
CONFIG_NET_VLAN


1247 i‡((
myvœnid
 & 
VLAN_IDMASK
Ë!
VLAN_NONE
) {

1248 i‡(
vœnid
 =
VLAN_NONE
)

1249 
vœnid
 = (
mynvœnid
 & 
VLAN_IDMASK
);

1251 i‡(
vœnid
 !(
myvœnid
 & 
VLAN_IDMASK
))

1256 
x
) {

1258 
PROT_ARP
:

1268 #ifde‡
ET_DEBUG


1269 
	`puts
 ("Got ARP\n");

1271 
¨p
 = (
ARP_t
 *)
ù
;

1272 i‡(
Àn
 < 
ARP_HDR_SIZE
) {

1273 
	`¥ötf
("badÜígth %d < %d\n", 
Àn
, 
ARP_HDR_SIZE
);

1276 i‡(
	`¡ohs
(
¨p
->
¨_hrd
Ë!
ARP_ETHER
) {

1277 
	`¥ötf
("\nÇtohs(arp->ar_hrd) != ARP_ETHER\n");

1280 i‡(
	`¡ohs
(
¨p
->
¨_¥o
Ë!
PROT_IP
) {

1281 
	`¥ötf
("\nÇtohs(arp->ar_pro) != PROT_IP\n");

1284 i‡(
¨p
->
¨_h 
 != 6) {

1285 
	`¥ötf
("\nárp->ar_hln != 6 \n");

1288 i‡(
¨p
->
¨_∂n
 != 4) {

1289 
	`¥ötf
("\nárp->ar_pln != 4 \n");

1293 i‡(
NëOurIP
 == 0) {

1294 
	`¥ötf
("\n NetOurIP \n");

1298 i‡(
	`NëRódIP
(&
¨p
->
¨_d©a
[16]Ë!
NëOurIP
) {

1303 
	`¡ohs
(
¨p
->
¨_›
)) {

1304 
ARPOP_REQUEST
:

1305 
	`puts
 ("Got ARP REQUEST,Ñeturn our IP\n");

1306 
pkt
 = (
uch¨
 *)
ë
;

1307 
pkt
 +
	`NëSëEthî
’kt, 
ë
->
ë_§c
, 
PROT_ARP
);

1308 
¨p
->
¨_›
 = 
	`ht⁄s
(
ARPOP_REPLY
);

1309 
	`mem˝y
 (&
¨p
->
¨_d©a
[10], &arp->ar_data[0], 6);

1310 
	`NëC›yIP
(&
¨p
->
¨_d©a
[16], &arp->ar_data[6]);

1311 
	`mem˝y
 (&
¨p
->
¨_d©a
[ 0], 
NëOurEthî
, 6);

1312 
	`NëC›yIP
(&
¨p
->
¨_d©a
[ 6], &
NëOurIP
);

1313 (Ë
	`ëh_£nd
((
uch¨
 *)
ë
, (
pkt
 - (uch¨ *ÎtË+ 
ARP_HDR_SIZE
);

1316 
ARPOP_REPLY
:

1318 i‡(!
NëAΩWaôPackëIP
 || !
NëAΩWaôPackëMAC
)

1321 
	`¥ötf
("Got ARP REPLY, set server/gtwyÉtháddr (%02x:%02x:%02x:%02x:%02x:%02x)\n",

1322 
¨p
->
¨_d©a
[0],árp->ar_data[1],

1323 
¨p
->
¨_d©a
[2],árp->ar_data[3],

1324 
¨p
->
¨_d©a
[4],árp->ar_data[5]);

1326 
tmp
 = 
	`NëRódIP
(&
¨p
->
¨_d©a
[6]);

1329 i‡(
tmp
 =
NëAΩWaôRïlyIP
) {

1330 
	`puts
 ("Got it\n");

1333 
	`mem˝y
(
NëAΩWaôPackëMAC
, &
¨p
->
¨_d©a
[0], 6);

1335 #ifde‡
CONFIG_NETCONSOLE


1336 (*
∑ckëH™dÀr
)(0,0,0,0);

1340 
NëAΩWaôPackëIP
 = 0;

1341 
NëAΩWaôTxPackëSize
 = 0;

1342 
NëAΩWaôPackëMAC
 = 
NULL
;

1347 
T·pSèπed
;

1348 if(
T·pSèπed
 == 1) {

1349 
	`T·pSíd
 ();

1354 #ifde‡
ET_DEBUG


1355 
	`¥ötf
("U√x≥˘ed ARP opcodê0x%x\n", 
	`¡ohs
(
¨p
->
¨_›
));

1361 
PROT_RARP
:

1362 #ifde‡
ET_DEBUG


1363 
	`puts
 ("Got RARP\n");

1365 
¨p
 = (
ARP_t
 *)
ù
;

1366 i‡(
Àn
 < 
ARP_HDR_SIZE
) {

1367 
	`¥ötf
("badÜígth %d < %d\n", 
Àn
, 
ARP_HDR_SIZE
);

1371 i‡((
	`¡ohs
(
¨p
->
¨_›
Ë!
RARPOP_REPLY
) ||

1372 (
	`¡ohs
(
¨p
->
¨_hrd
Ë!
ARP_ETHER
) ||

1373 (
	`¡ohs
(
¨p
->
¨_¥o
Ë!
PROT_IP
) ||

1374 (
¨p
->
¨_h 
 !6Ë|| (¨p->
¨_∂n
 != 4)) {

1376 
	`puts
 ("invalid RARP header\n");

1378 
	`NëC›yIP
(&
NëOurIP
, &
¨p
->
¨_d©a
[16]);

1379 i‡(
NëSîvîIP
 == 0)

1380 
	`NëC›yIP
(&
NëSîvîIP
, &
¨p
->
¨_d©a
[ 6]);

1381 
	`mem˝y
 (
NëSîvîEthî
, &
¨p
->
¨_d©a
[ 0], 6);

1383 (*
∑ckëH™dÀr
)(0,0,0,0);

1387 
PROT_IP
:

1388 #ifde‡
ET_DEBUG


1389 
	`puts
 ("Got IP\n");

1391 i‡(
Àn
 < 
IP_HDR_SIZE
) {

1392 
	`debug
 ("À¿bad %d < %d\n", 
Àn
, 
IP_HDR_SIZE
);

1395 i‡(
Àn
 < 
	`¡ohs
(
ù
->
ù_Àn
)) {

1396 
	`¥ötf
("À¿bad %d < %d\n", 
Àn
, 
	`¡ohs
(
ù
->
ù_Àn
));

1399 
Àn
 = 
	`¡ohs
(
ù
->
ù_Àn
);

1400 #ifde‡
ET_DEBUG


1401 
	`¥ötf
("Àn=%d, v=%02x\n", 
Àn
, 
ù
->
ù_hl_v
 & 0xff);

1403 i‡((
ù
->
ù_hl_v
 & 0xf0) != 0x40) {

1406 i‡(
ù
->
ù_off
 & 
	`ht⁄s
(0x1fff)) {

1409 i‡(!
	`NëCksumOk
((
uch¨
 *)
ù
, 
IP_HDR_SIZE_NO_UDP
 / 2)) {

1410 
	`puts
 ("checksum bad\n");

1413 
tmp
 = 
	`NëRódIP
(&
ù
->
ù_d°
);

1414 i‡(
NëOurIP
 && 
tmp
 != NetOurIP &&Åmp != 0xFFFFFFFF) {

1417 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_PING
)

1435 i‡(
ù
->
ù_p
 =
IPPROTO_ICMP
) {

1436 
ICMP_t
 *
icmph
 = (ICMP_à*)&(
ù
->
udp_§c
);

1438 
icmph
->
ty≥
) {

1439 
ICMP_REDIRECT
:

1440 i‡(
icmph
->
code
 !
ICMP_REDIR_HOST
)

1442 
	`puts
 (" ICMP Host RedirectÅo ");

1443 
	`¥öt_IPaddr
(
icmph
->
un
.
g©eway
);

1444 
	`putc
(' ');

1446 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_PING
)

1447 
ICMP_ECHO_REPLY
:

1452 (*
∑ckëH™dÀr
)((
uch¨
 *)
ù
, 0, 0, 0);

1458 } i‡(
ù
->
ù_p
 !
IPPROTO_UDP
) {

1463 #ifde‡
CONFIG_NETCONSOLE


1464 
	`nc_öput_∑ckë
((
uch¨
 *)
ù
 +
IP_HDR_SIZE
,

1465 
	`¡ohs
(
ù
->
udp_d°
),

1466 
	`¡ohs
(
ù
->
udp_§c
),

1467 
	`¡ohs
(
ù
->
udp_Àn
) - 8);

1473 (*
∑ckëH™dÀr
)((
uch¨
 *)
ù
 +
IP_HDR_SIZE
,

1474 
	`¡ohs
(
ù
->
udp_d°
),

1475 
	`¡ohs
(
ù
->
udp_§c
),

1476 
	`¡ohs
(
ù
->
udp_Àn
) - 8);

1479 
	}
}

1484 
	$√t_check_¥îeq
 (
¥Ÿo_t
 
¥Ÿocﬁ
)

1486 
¥Ÿocﬁ
) {

1488 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_PING
)

1489 
PING
:

1490 i‡(
NëPögIP
 == 0) {

1491 
	`puts
 ("*** ERROR:ÖingáddressÇot given\n");

1494 
comm⁄
;

1496 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_NFS
)

1497 
NFS
:

1499 
NETCONS
:

1500 
TFTP
:

1501 i‡(
NëSîvîIP
 == 0) {

1502 
	`puts
 ("*** ERROR: `serverip'Çot set\n");

1505 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_PING
)

1506 
comm⁄
:

1509 i‡(
NëOurIP
 == 0) {

1510 
	`puts
 ("*** ERROR: `ipaddr'Çot set\n");

1515 
DHCP
:

1516 
RARP
:

1517 
BOOTP
:

1518 
CDP
:

1519 i‡(
	`memcmp
 (
NëOurEthî
, "\0\0\0\0\0\0", 6) == 0) {

1520 #ifde‡
CONFIG_NET_MULTI


1521 
	`ëh_gë_dev_ödex
 ();

1522 
num
 = 
	`ëh_gë_dev_ödex
 ();

1524 
num
) {

1526 
	`puts
 ("*** ERROR: NoÉthernet found.\n");

1529 
	`puts
 ("*** ERROR: `ethaddr'Çot set\n");

1532 
	`¥ötf
 ("*** ERROR: `eth%daddr'Çot set\n",

1533 
num
);

1537 
	`NëSèπAgaö
 ();

1540 
	`puts
 ("*** ERROR: `ethaddr'Çot set\n");

1549 
	}
}

1553 
	$NëCksumOk
(
uch¨
 * 
±r
, 
Àn
)

1555  !((
	`NëCksum
(
±r
, 
Àn
) + 1) & 0xfffe);

1556 
	}
}

1560 
	$NëCksum
(
uch¨
 * 
±r
, 
Àn
)

1562 
ul⁄g
 
xsum
;

1563 
ush‹t
 *
p
 = (ush‹à*)
±r
;

1565 
xsum
 = 0;

1566 
Àn
-- > 0)

1567 
xsum
 +*
p
++;

1568 
xsum
 = (xsum & 0xffff) + (xsum >> 16);

1569 
xsum
 = (xsum & 0xffff) + (xsum >> 16);

1570  (
xsum
 & 0xffff);

1571 
	}
}

1574 
	$NëEthHdrSize
()

1576 
ush‹t
 
myvœnid
;

1578 #ifde‡
CONFIG_NET_VLAN


1579 
myvœnid
 = 
	`¡ohs
(
NëOurVLAN
);

1580 i‡(
myvœnid
 =(
ush‹t
)-1)

1581 
myvœnid
 = 
VLAN_NONE
;

1583  ((
myvœnid
 & 
VLAN_IDMASK
Ë=
VLAN_NONE
Ë? 
ETHER_HDR_SIZE
 : 
VLAN_ETHER_HDR_SIZE
;

1585  
ETHER_HDR_SIZE
;

1587 
	}
}

1590 
	$NëSëEthî
(vﬁ©ûê
uch¨
 * 
xë
, uch¨ * 
addr
, 
uöt
 
¥Ÿ
)

1592 
Ethî√t_t
 *
ë
 = (Ethî√t_à*)
xë
;

1593 
ush‹t
 
myvœnid
;

1595 #ifde‡
CONFIG_NET_VLAN


1596 
myvœnid
 = 
	`¡ohs
(
NëOurVLAN
);

1597 i‡(
myvœnid
 =(
ush‹t
)-1)

1598 
myvœnid
 = 
VLAN_NONE
;

1601 
	`mem˝y
 (
ë
->
ë_de°
, 
addr
, 6);

1602 
	`mem˝y
 (
ë
->
ë_§c
, 
NëOurEthî
, 6);

1603 #ifde‡
CONFIG_NET_VLAN


1604 i‡((
myvœnid
 & 
VLAN_IDMASK
Ë=
VLAN_NONE
) {

1605 
ë
->
ë_¥ŸÀn
 = 
	`ht⁄s
(
¥Ÿ
);

1606  
ETHER_HDR_SIZE
;

1608 
VLAN_Ethî√t_t
 *
vë
 = (VLAN_Ethî√t_à*)
xë
;

1610 
vë
->
vë_vœn_ty≥
 = 
	`ht⁄s
(
PROT_VLAN
);

1611 
vë
->
vë_èg
 = 
	`ht⁄s
((0 << 5Ë| (
myvœnid
 & 
VLAN_IDMASK
));

1612 
vë
->
vë_ty≥
 = 
	`ht⁄s
(
¥Ÿ
);

1613  
VLAN_ETHER_HDR_SIZE
;

1616 
ë
->
ë_¥ŸÀn
 = 
	`ht⁄s
(
¥Ÿ
);

1617  
ETHER_HDR_SIZE
;

1620 
	}
}

1623 
	$NëSëIP
(vﬁ©ûê
uch¨
 * 
xù
, 
IPaddr_t
 
de°
, 
dp‹t
, 
•‹t
, 
Àn
)

1625 vﬁ©ûê
IP_t
 *
ù
 = (IP_à*)
xù
;

1632 i‡(
Àn
 & 1)

1633 
xù
[
IP_HDR_SIZE
 + 
Àn
] = 0;

1639 
ù
->
ù_hl_v
 = 0x45;

1640 
ù
->
ù_tos
 = 0;

1641 
ù
->
ù_Àn
 = 
	`ht⁄s
(
IP_HDR_SIZE
 + 
Àn
);

1642 
ù
->
ù_id
 = 
	`ht⁄s
(
NëIPID
++);

1643 
ù
->
ù_off
 = 
	`ht⁄s
(0x4000);

1644 
ù
->
ù_âl
 = 255;

1645 
ù
->
ù_p
 = 17;

1646 
ù
->
ù_sum
 = 0;

1647 
	`NëC›yIP
((*)&
ù
->
ù_§c
, &
NëOurIP
);

1648 
	`NëC›yIP
((*)&
ù
->
ù_d°
, &
de°
);

1649 
ù
->
udp_§c
 = 
	`ht⁄s
(
•‹t
);

1650 
ù
->
udp_d°
 = 
	`ht⁄s
(
dp‹t
);

1651 
ù
->
udp_Àn
 = 
	`ht⁄s
(8 + 
Àn
);

1652 
ù
->
udp_xsum
 = 0;

1653 
ù
->
ù_sum
 = ~
	`NëCksum
((
uch¨
 *)ù, 
IP_HDR_SIZE_NO_UDP
 / 2);

1654 
	}
}

1656 
	$c›y_fûíame
 (
uch¨
 *
d°
, uch¨ *
§c
, 
size
)

1658 i‡(*
§c
 && (*src == '"')) {

1659 ++
§c
;

1660 --
size
;

1663 (--
size
 > 0Ë&& *
§c
 && (*src != '"')) {

1664 *
d°
++ = *
§c
++;

1666 *
d°
 = '\0';

1667 
	}
}

1671 
	$ù_to_°rög
 (
IPaddr_t
 
x
, *
s
)

1673 
x
 = 
	`¡ohl
 (x);

1674 
	`•rötf
 (
s
, "%d.%d.%d.%d",

1675 (Ë((
x
 >> 24) & 0xff),

1676 (Ë((
x
 >> 16) & 0xff),

1677 (Ë((
x
 >> 8) & 0xff), () ((x >> 0) & 0xff)

1679 
	}
}

1681 
IPaddr_t
 
	$°rög_to_ù
(*
s
)

1683 
IPaddr_t
 
addr
;

1684 *
e
;

1685 
i
;

1687 i‡(
s
 =
NULL
)

1690 
addr
=0, 
i
=0; i<4; ++i) {

1691 
ul⁄g
 
vÆ
 = 
s
 ? 
	`sim∂e_°πoul
(s, &
e
, 10) : 0;

1692 
addr
 <<= 8;

1693 
addr
 |(
vÆ
 & 0xFF);

1694 i‡(
s
) {

1695 
s
 = (*
e
) ?É+1 :É;

1699  (
	`ht⁄l
(
addr
));

1700 
	}
}

1702 #ifde‡
CONFIG_NET_VLAN


1703 
	$VLAN_to_°rög
(
ush‹t
 
x
, *
s
)

1705 
x
 = 
	`¡ohs
(x);

1707 i‡(
x
 =(
ush‹t
)-1)

1708 
x
 = 
VLAN_NONE
;

1710 i‡(
x
 =
VLAN_NONE
)

1711 
	`°r˝y
(
s
, "none");

1713 
	`•rötf
(
s
, "%d", 
x
 & 
VLAN_IDMASK
);

1714 
	}
}

1716 
ush‹t
 
	$°rög_to_VLAN
(*
s
)

1718 
ush‹t
 
id
;

1720 i‡(
s
 =
NULL
)

1721  
	`ht⁄s
(
VLAN_NONE
);

1723 i‡(*
s
 < '0' || *s > '9')

1724 
id
 = 
VLAN_NONE
;

1726 
id
 = (
ush‹t
)
	`sim∂e_°πoul
(
s
, 
NULL
, 10);

1728  
	`ht⁄s
(
id
);

1729 
	}
}

1731 
ush‹t
 
	$gëív_VLAN
(*
v¨
)

1733  (
	`°rög_to_VLAN
(
	`gëív
(
v¨
)));

1734 
	}
}

1737 
	$¥öt_IPaddr
 (
IPaddr_t
 
x
)

1739 
tmp
[16];

1741 
	`ù_to_°rög
 (
x
, 
tmp
);

1743 
	`puts
 (
tmp
);

1744 
	}
}

1746 
IPaddr_t
 
	$gëív_IPaddr
 (*
v¨
)

1748  (
	`°rög_to_ù
(
	`gëív
(
v¨
)));

1749 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/net/rarp.c

24 
	~<comm⁄.h
>

25 
	~<comm™d.h
>

26 
	~<√t.h
>

28 
	~"boŸp.h
"

29 
	~"øΩ.h
"

30 
	~"t·p.h
"

32 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_NET
)

34 
	#TIMEOUT
 5

	)

35 #i‚def 
CONFIG_NET_RETRY_COUNT


36 
	#TIMEOUT_COUNT
 5

	)

38 
	#TIMEOUT_COUNT
 (
CONFIG_NET_RETRY_COUNT
)

	)

42 
	gR¨pTry
;

48 
	$R¨pH™dÀr
(
uch¨
 * 
dummi0
, 
dummi1
, 
dummi2
, 
dummi3
)

50 *
s
;

51 #ifdef 
DEBUG


52 
	`puts
 ("Got good RARP\n");

54 i‡((
s
 = 
	`gëív
("autﬁﬂd")Ë!
NULL
) {

55 i‡(*
s
 == 'n') {

60 
NëSèã
 = 
NETLOOP_SUCCESS
;

62 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_NFS
)

63 } i‡((
s
 !
NULL
Ë&& !
	`°rcmp
(s, "NFS")) {

64 
	`NfsSèπ
();

69 
	`T·pSèπ
 ();

70 
	}
}

77 
	$R¨pTimeout
()

79 i‡(
R¨pTry
 >
TIMEOUT_COUNT
) {

80 
	`puts
 ("\nRetry countÉxceeded; startingágain\n");

81 
	`NëSèπAgaö
 ();

83 
	`NëSëTimeout
 (
TIMEOUT
 * 
CFG_HZ
, 
R¨pTimeout
);

84 
	`R¨pReque°
 ();

86 
	}
}

90 
	$R¨pReque°
 ()

92 
i
;

93 vﬁ©ûê
uch¨
 *
pkt
;

94 
ARP_t
 * 
øΩ
;

96 
	`¥ötf
("RARP brﬂdˇ° %d\n", ++
R¨pTry
);

97 
pkt
 = 
NëTxPackë
;

99 
pkt
 +
	`NëSëEthî
’kt, 
NëBˇ°Addr
, 
PROT_RARP
);

101 
øΩ
 = (
ARP_t
 *)
pkt
;

103 
øΩ
->
¨_hrd
 = 
	`ht⁄s
 (
ARP_ETHER
);

104 
øΩ
->
¨_¥o
 = 
	`ht⁄s
 (
PROT_IP
);

105 
øΩ
->
¨_h 
 = 6;

106 
øΩ
->
¨_∂n
 = 4;

107 
øΩ
->
¨_›
 = 
	`ht⁄s
 (
RARPOP_REQUEST
);

108 
	`mem˝y
 (&
øΩ
->
¨_d©a
[0], 
NëOurEthî
, 6);

109 
	`mem˝y
 (&
øΩ
->
¨_d©a
[6], &
NëOurIP
, 4);

110 
	`mem˝y
 (&
øΩ
->
¨_d©a
[10], 
NëOurEthî
, 6);

112 
i
 = 0; i <= 3; i++) {

113 
øΩ
->
¨_d©a
[16 + 
i
] = 0xff;

116 
	`NëSídPackë
(
NëTxPackë
, (
pkt
 - NëTxPackëË+ 
ARP_HDR_SIZE
);

118 
	`NëSëTimeout
(
TIMEOUT
 * 
CFG_HZ
, 
R¨pTimeout
);

119 
	`NëSëH™dÀr
(
R¨pH™dÀr
);

120 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/net/rarp.h

25 #i‚de‡
__RARP_H__


26 
	#__RARP_H__


	)

28 #i‚de‡
__NET_H__


29 
	~<√t.h
>

38 
R¨pTry
;

40 
R¨pReque°
 ();

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/net/tftp.c

7 
	~<comm⁄.h
>

8 
	~<comm™d.h
>

9 
	~<√t.h
>

10 
	~"t·p.h
"

11 
	~"boŸp.h
"

13 #unde‡
ET_DEBUG


15 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_NET
)

17 
	#WELL_KNOWN_PORT
 69

	)

18 
	#TIMEOUT
 3

	)

19 #i‚def 
CONFIG_NET_RETRY_COUNT


20 
	#TIMEOUT_COUNT
 10

	)

22 
	#TIMEOUT_COUNT
 (
CONFIG_NET_RETRY_COUNT
 * 2)

	)

25 
	#HASHES_PER_LINE
 65

	)

30 
	#TFTP_RRQ
 1

	)

31 
	#TFTP_WRQ
 2

	)

32 
	#TFTP_DATA
 3

	)

33 
	#TFTP_ACK
 4

	)

34 
	#TFTP_ERROR
 5

	)

35 
	#TFTP_OACK
 6

	)

38 
	gT·pSîvîP‹t
;

39 
	gT·pOurP‹t
;

40 
	gT·pTimeoutCou¡
;

41 
ul⁄g
 
	gT·pBlock
;

42 
ul⁄g
 
	gT·pLa°Block
;

43 
ul⁄g
 
	gT·pBlockWøp
;

44 
ul⁄g
 
	gT·pBlockWøpOff£t
;

45 
	gT·pSèã
;

46 
	gT·pSèπed
;

48 
	#STATE_RRQ
 1

	)

49 
	#STATE_DATA
 2

	)

50 
	#STATE_TOO_LARGE
 3

	)

51 
	#STATE_BAD_MAGIC
 4

	)

52 
	#STATE_OACK
 5

	)

54 
	#TFTP_BLOCK_SIZE
 512

	)

55 
	#TFTP_SEQUENCE_SIZE
 ((
ul⁄g
)(1<<16)Ë

	)

57 
	#DEFAULT_NAME_LEN
 (8 + 4 + 1)

	)

58 
	gdeÁu…_fûíame
[
DEFAULT_NAME_LEN
];

59 *
	gt·p_fûíame
;

61 #ifde‡
CFG_DIRECT_FLASH_TFTP


62 
Êash_öfo_t
 
Êash_öfo
[
CFG_MAX_FLASH_BANKS
];

65 
__ölöe__
 

66 
	$°‹e_block
 (
block
, 
uch¨
 * 
§c
, 
Àn
)

68 
ul⁄g
 
off£t
 = 
block
 * 
TFTP_BLOCK_SIZE
 + 
T·pBlockWøpOff£t
;

69 
ul⁄g
 
√wsize
 = 
off£t
 + 
Àn
;

70 #ifde‡
CFG_DIRECT_FLASH_TFTP


71 
i
, 
rc
 = 0;

73 
i
=0; i<
CFG_MAX_FLASH_BANKS
; i++) {

75 i‡(
lﬂd_addr
 + 
off£t
 >
Êash_öfo
[
i
].
°¨t
[0]) {

76 
rc
 = 1;

81 i‡(
rc
) {

82 
rc
 = 
	`Êash_wrôe
 ((
uch¨
 *)
§c
, (
ul⁄g
)(
lﬂd_addr
+
off£t
), 
Àn
);

83 i‡(
rc
) {

84 
	`Êash_≥º‹
 (
rc
);

85 
NëSèã
 = 
NETLOOP_FAIL
;

92 ()
	`mem˝y
((*)(
lﬂd_addr
 + 
off£t
), 
§c
, 
Àn
);

95 i‡(
NëBoŸFûeX„rSize
 < 
√wsize
)

96 
NëBoŸFûeX„rSize
 = 
√wsize
;

97 
	}
}

99 
T·pSíd
 ();

100 
T·pTimeout
 ();

105 
	$T·pSíd
 ()

107 vﬁ©ûê
uch¨
 * 
pkt
;

108 vﬁ©ûê
uch¨
 * 
xp
;

109 
Àn
 = 0;

110 vﬁ©ûê
ush‹t
 *
s
;

115 
pkt
 = 
NëTxPackë
 + 
	`NëEthHdrSize
(Ë+ 
IP_HDR_SIZE
;

117 
T·pSèã
) {

119 
STATE_RRQ
:

120 
xp
 = 
pkt
;

121 
s
 = (
ush‹t
 *)
pkt
;

122 *
s
++ = 
	`ht⁄s
(
TFTP_RRQ
);

123 
pkt
 = (
uch¨
 *)
s
;

124 
	`°r˝y
 ((*)
pkt
, 
t·p_fûíame
);

125 
pkt
 +
	`°æí
(
t·p_fûíame
) + 1;

126 
	`°r˝y
 ((*)
pkt
, "octet");

127 
pkt
 += 5 + 1;

128 
	`°r˝y
 ((*)
pkt
, "timeout");

129 
pkt
 += 7 + 1;

130 
	`•rötf
((*)
pkt
, "%d", 
TIMEOUT
);

132 #ifde‡
ET_DEBUG


133 
	`¥ötf
("£nd o±i⁄ \"timeouà%s\"\n", (*)
pkt
);

135 
pkt
 +
	`°æí
((*)pkt) + 1;

136 
Àn
 = 
pkt
 - 
xp
;

139 
STATE_DATA
:

140 
STATE_OACK
:

141 
xp
 = 
pkt
;

142 
s
 = (
ush‹t
 *)
pkt
;

143 *
s
++ = 
	`ht⁄s
(
TFTP_ACK
);

144 *
s
++ = 
	`ht⁄s
(
T·pBlock
);

145 
pkt
 = (
uch¨
 *)
s
;

149 
Àn
 = 
pkt
 - 
xp
;

152 
STATE_TOO_LARGE
:

153 
xp
 = 
pkt
;

154 
s
 = (
ush‹t
 *)
pkt
;

155 *
s
++ = 
	`ht⁄s
(
TFTP_ERROR
);

156 *
s
++ = 
	`ht⁄s
(3);

157 
pkt
 = (
uch¨
 *)
s
;

158 
	`°r˝y
 ((*)
pkt
, "FileÅooÜarge");

159 
pkt
 += 14 + 1;

160 
Àn
 = 
pkt
 - 
xp
;

163 
STATE_BAD_MAGIC
:

164 
xp
 = 
pkt
;

165 
s
 = (
ush‹t
 *)
pkt
;

166 *
s
++ = 
	`ht⁄s
(
TFTP_ERROR
);

167 *
s
++ = 
	`ht⁄s
(2);

168 
pkt
 = (
uch¨
 *)
s
;

169 
	`°r˝y
 ((*)
pkt
, "File has bad magic");

170 
pkt
 += 18 + 1;

171 
Àn
 = 
pkt
 - 
xp
;

175 
	`NëSídUDPPackë
(
NëSîvîEthî
, 
NëSîvîIP
, 
T·pSîvîP‹t
, 
T·pOurP‹t
, 
Àn
);

176 
	}
}

180 
	$T·pH™dÀr
 (
uch¨
 * 
pkt
, 
de°
, 
§c
, 
Àn
)

182 
ush‹t
 
¥Ÿo
;

183 
ush‹t
 *
s
;

185 i‡(
de°
 !
T·pOurP‹t
) {

188 i‡(
T·pSèã
 !
STATE_RRQ
 && 
§c
 !
T·pSîvîP‹t
) {

192 i‡(
Àn
 < 2) {

195 
Àn
 -= 2;

197 
s
 = (
ush‹t
 *)
pkt
;

198 
¥Ÿo
 = *
s
++;

199 
pkt
 = (
uch¨
 *)
s
;

201 
	`¡ohs
(
¥Ÿo
)) {

203 
TFTP_RRQ
:

204 
TFTP_WRQ
:

205 
TFTP_ACK
:

207 
TFTP_OACK
:

208 #ifde‡
ET_DEBUG


209 
	`¥ötf
("GŸ OACK: %†%s\n", 
pkt
,Ökt+
	`°æí
(pkt)+1);

211 
T·pSèã
 = 
STATE_OACK
;

212 
T·pSîvîP‹t
 = 
§c
;

213 
	`T·pSíd
 ();

215 
TFTP_DATA
:

216 i‡(
Àn
 < 2)

218 
Àn
 -= 2;

219 
T·pBlock
 = 
	`¡ohs
(*(
ush‹t
 *)
pkt
);

229 i‡(
T·pBlock
 == 0) {

230 
T·pBlockWøp
++;

231 
T·pBlockWøpOff£t
 +
TFTP_BLOCK_SIZE
 * 
TFTP_SEQUENCE_SIZE
;

232 
	`¥ötf
 ("\n\à%lu MBÑeveived\n\à", 
T·pBlockWøpOff£t
>>20);

234 i‡(((
T·pBlock
 - 1) % 10) == 0) {

235 
	`puts
 ("#");

236 } i‡((
T·pBlock
 % (10 * 
HASHES_PER_LINE
)) == 0) {

237 
	`puts
 ("\n\t ");

241 #ifde‡
ET_DEBUG


242 i‡(
T·pSèã
 =
STATE_RRQ
) {

243 
	`puts
 ("Server didÇotácknowledgeÅimeout option!\n");

247 i‡(
T·pSèã
 =
STATE_RRQ
 || T·pSèã =
STATE_OACK
) {

249 
T·pSèã
 = 
STATE_DATA
;

250 
T·pSîvîP‹t
 = 
§c
;

251 
T·pLa°Block
 = 0;

252 
T·pBlockWøp
 = 0;

253 
T·pBlockWøpOff£t
 = 0;

255 i‡(
T·pBlock
 != 1) {

256 
	`¥ötf
 ("\nTFTPÉrror: "

259 
T·pBlock
);

260 
	`NëSèπAgaö
 ();

265 i‡(
T·pBlock
 =
T·pLa°Block
) {

269 
	`¥ötf
("\n Same blockágain; ignore it \n");

273 
T·pLa°Block
 = 
T·pBlock
;

274 
	`NëSëTimeout
 (
TIMEOUT
 * 
CFG_HZ
, 
T·pTimeout
);

276 
	`°‹e_block
 (
T·pBlock
 - 1, 
pkt
 + 2, 
Àn
);

282 
	`T·pSíd
 ();

284 i‡(
Àn
 < 
TFTP_BLOCK_SIZE
) {

289 
	`puts
 ("\ndone\n");

290 
NëSèã
 = 
NETLOOP_SUCCESS
;

294 
TFTP_ERROR
:

295 
	`¥ötf
 ("\nTFTPÉrror: '%s' (%d)\n",

296 
pkt
 + 2, 
	`¡ohs
(*(
ush‹t
 *)pkt));

297 
	`puts
 ("Startingágain\n\n");

298 
	`NëSèπAgaö
 ();

304 
	}
}

308 
	$T·pTimeout
 ()

310 i‡(++
T·pTimeoutCou¡
 > 
TIMEOUT_COUNT
) {

311 
	`puts
 ("\nRetry countÉxceeded; startingágain\n");

312 
	`NëSèπAgaö
 ();

314 
	`puts
 ("T ");

315 
	`NëSëTimeout
 (
TIMEOUT
 * 
CFG_HZ
, 
T·pTimeout
);

316 
	`T·pSíd
 ();

318 
	}
}

322 
	$T·pSèπ
 ()

324 
T·pSèπed
=1;

326 i‡(
BoŸFûe
[0] == '\0') {

327 
	`•rötf
(
deÁu…_fûíame
, "%s","test.bin");

328 
t·p_fûíame
 = 
deÁu…_fûíame
;

330 
	`¥ötf
 ("*** Warning:Ço boot fileÇame; using '%s'\n",

331 
t·p_fûíame
);

333 
t·p_fûíame
 = 
BoŸFûe
;

336 #i‡
	`deföed
(
CONFIG_NET_MULTI
)

337 
	`¥ötf
 ("Usög %†devi˚\n", 
	`ëh_gë_«me
());

339 
	`puts
 ("TFTP from sîvî "); 
	`¥öt_IPaddr
 (
NëSîvîIP
);

340 
	`puts
 ("; ou∏IPáddªs†i†"); 
	`¥öt_IPaddr
 (
NëOurIP
);

343 i‡(
NëOurG©ewayIP
 && 
NëOurSub√tMask
) {

344 
IPaddr_t
 
OurNë
 = 
NëOurIP
 & 
NëOurSub√tMask
;

345 
IPaddr_t
 
SîvîNë
 = 
NëSîvîIP
 & 
NëOurSub√tMask
;

347 i‡(
OurNë
 !
SîvîNë
) {

348 
	`puts
 ("; sendingÅhrough gateway ");

349 
	`¥öt_IPaddr
 (
NëOurG©ewayIP
) ;

352 
	`putc
 ('\n');

354 
	`¥ötf
 ("Fûíamê'%s'.", 
t·p_fûíame
);

356 i‡(
NëBoŸFûeSize
) {

357 
	`¥ötf
 (" Sizêi†0x%x Byã†", 
NëBoŸFûeSize
<<9);

358 
	`¥öt_size
 (
NëBoŸFûeSize
<<9, "");

361 
	`putc
 ('\n');

363 
	`¥ötf
 ("\¿TIMEOUT_COUNT=%d,Lﬂdáddªss: 0x%lx\n",
TIMEOUT_COUNT
,
lﬂd_addr
);

365 
	`puts
 ("Loading: *\b");

367 
	`NëSëTimeout
 (
TIMEOUT
 * 
CFG_HZ
, 
T·pTimeout
);

368 
	`NëSëH™dÀr
 (
T·pH™dÀr
);

370 
T·pSîvîP‹t
 = 
WELL_KNOWN_PORT
;

371 
T·pTimeoutCou¡
 = 0;

372 
T·pSèã
 = 
STATE_RRQ
;

373 
T·pOurP‹t
 = 1024 + (
	`gë_timî
(0) % 3072);

374 
T·pBlock
 = 0;

377 
	`mem£t
(
NëSîvîEthî
, 0, 6);

380 
	`T·pSíd
 ();

381 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/net/tftp.h

8 #i‚de‡
__TFTP_H__


9 
	#__TFTP_H__


	)

17 
T·pSèπ
 ();

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/rtc/date.c

28 
	~<comm⁄.h
>

29 
	~<comm™d.h
>

30 
	~<πc.h
>

32 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_DATE
Ë|| 
deföed
(
CONFIG_TIMESTAMP
)

34 
	#FEBRUARY
 2

	)

35 
	#STARTOFTIME
 1970

	)

36 
	#SECDAY
 86400L

	)

37 
	#SECYR
 (
SECDAY
 * 365)

	)

38 
	#À≠yór
(
yór
Ë((yórË% 4 =0)

	)

39 
	#days_ö_yór
(
a
Ë(
	`À≠yór
◊Ë? 366 : 365)

	)

40 
	#days_ö_m⁄th
(
a
Ë(
m⁄th_days
[◊Ë- 1])

	)

42 
	gm⁄th_days
[12] = {

49 
	$Gªg‹ünDay
(
πc_time
 * 
tm
)

51 
À≠sToD©e
;

52 
œ°Yór
;

53 
day
;

54 
M⁄thOff£t
[] = { 0,31,59,90,120,151,181,212,243,273,304,334 };

56 
œ°Yór
=
tm
->
tm_yór
-1;

61 
À≠sToD©e
 = 
œ°Yór
/4 -ÜastYear/100 +ÜastYear/400;

69 if((
tm
->
tm_yór
%4==0) &&

70 ((
tm
->
tm_yór
%100!=0) || (tm->tm_year%400==0)) &&

71 (
tm
->
tm_m⁄
>2)) {

75 
day
=1;

77 
day
=0;

80 
day
 +
œ°Yór
*365 + 
À≠sToD©e
 + 
M⁄thOff£t
[
tm
->
tm_m⁄
-1] +Åm->
tm_mday
;

82 
tm
->
tm_wday
=
day
%7;

83 
	}
}

85 
	$to_tm
(
tim
, 
πc_time
 * 
tm
)

87 
i
;

88 
hms
, 
day
;

90 
day
 = 
tim
 / 
SECDAY
;

91 
hms
 = 
tim
 % 
SECDAY
;

94 
tm
->
tm_hour
 = 
hms
 / 3600;

95 
tm
->
tm_mö
 = (
hms
 % 3600) / 60;

96 
tm
->
tm_£c
 = (
hms
 % 3600) % 60;

99 
i
 = 
STARTOFTIME
; 
day
 >
	`days_ö_yór
(i); i++) {

100 
day
 -
	`days_ö_yór
(
i
);

102 
tm
->
tm_yór
 = 
i
;

105 i‡(
	`À≠yór
(
tm
->
tm_yór
)) {

106 
	`days_ö_m⁄th
(
FEBRUARY
) = 29;

108 
i
 = 1; 
day
 >
	`days_ö_m⁄th
(i); i++) {

109 
day
 -
	`days_ö_m⁄th
(
i
);

111 
	`days_ö_m⁄th
(
FEBRUARY
) = 28;

112 
tm
->
tm_m⁄
 = 
i
;

115 
tm
->
tm_mday
 = 
day
 + 1;

120 
	`Gªg‹ünDay
(
tm
);

121 
	}
}

139 
	$mktime
 (
yór
, 
m⁄
,

140 
day
, 
hour
,

141 
mö
, 
£c
)

143 i‡(0 >(Ë(
m⁄
 -= 2)) {

144 
m⁄
 += 12;

145 
yór
 -= 1;

149 (Ë(
yór
/4 - yór/100 + yór/400 + 367*
m⁄
/12 + 
day
) +

150 
yór
*365 - 719499

151 )*24 + 
hour


152 )*60 + 
mö


153 )*60 + 
£c
;

154 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/scripts/lxdialog/checklist.c

24 
	~"dülog.h
"

26 
	gli°_width
, 
	gcheck_x
, 
	gôem_x
, 
	gcheckÊag
;

32 
	$¥öt_ôem
 (
WINDOW
 * 
wö
, c⁄° *
ôem
, 
°©us
,

33 
choi˚
, 
£À˘ed
)

35 
i
;

38 
	`w©å£t
 (
wö
, 
míubox_©å
);

39 
	`wmove
 (
wö
, 
choi˚
, 0);

40 
i
 = 0; i < 
li°_width
; i++)

41 
	`waddch
 (
wö
, ' ');

43 
	`wmove
 (
wö
, 
choi˚
, 
check_x
);

44 
	`w©å£t
 (
wö
, 
£À˘ed
 ? 
check_£À˘ed_©å
 : 
check_©å
);

45 i‡(
checkÊag
 =
FLAG_CHECK
)

46 
	`w¥ötw
 (
wö
, "[%c]", 
°©us
 ? 'X' : ' ');

48 
	`w¥ötw
 (
wö
, "(%c)", 
°©us
 ? 'X' : ' ');

50 
	`w©å£t
 (
wö
, 
£À˘ed
 ? 
èg_£À˘ed_©å
 : 
èg_©å
);

51 
	`mvwaddch
(
wö
, 
choi˚
, 
ôem_x
, 
ôem
[0]);

52 
	`w©å£t
 (
wö
, 
£À˘ed
 ? 
ôem_£À˘ed_©å
 : 
ôem_©å
);

53 
	`wadd°r
 (
wö
, (*)
ôem
+1);

54 
	}
}

60 
	$¥öt_¨rows
 (
WINDOW
 * 
wö
, 
choi˚
, 
ôem_no
, 
s¸ﬁl
,

61 
y
, 
x
, 
height
)

63 
	`wmove
(
wö
, 
y
, 
x
);

65 i‡(
s¸ﬁl
 > 0) {

66 
	`w©å£t
 (
wö
, 
u¨row_©å
);

67 
	`waddch
 (
wö
, 
ACS_UARROW
);

68 
	`wadd°r
 (
wö
, "(-)");

71 
	`w©å£t
 (
wö
, 
míubox_©å
);

72 
	`waddch
 (
wö
, 
ACS_HLINE
);

73 
	`waddch
 (
wö
, 
ACS_HLINE
);

74 
	`waddch
 (
wö
, 
ACS_HLINE
);

75 
	`waddch
 (
wö
, 
ACS_HLINE
);

78 
y
 = y + 
height
 + 1;

79 
	`wmove
(
wö
, 
y
, 
x
);

81 i‡((
height
 < 
ôem_no
Ë&& (
s¸ﬁl
 + 
choi˚
 < item_no - 1)) {

82 
	`w©å£t
 (
wö
, 
d¨row_©å
);

83 
	`waddch
 (
wö
, 
ACS_DARROW
);

84 
	`wadd°r
 (
wö
, "(+)");

87 
	`w©å£t
 (
wö
, 
míubox_b‹dî_©å
);

88 
	`waddch
 (
wö
, 
ACS_HLINE
);

89 
	`waddch
 (
wö
, 
ACS_HLINE
);

90 
	`waddch
 (
wö
, 
ACS_HLINE
);

91 
	`waddch
 (
wö
, 
ACS_HLINE
);

93 
	}
}

99 
	$¥öt_buâ⁄s
–
WINDOW
 *
dülog
, 
height
, 
width
, 
£À˘ed
)

101 
x
 = 
width
 / 2 - 11;

102 
y
 = 
height
 - 2;

104 
	`¥öt_buâ⁄
 (
dülog
, "Sñe˘", 
y
, 
x
, 
£À˘ed
 == 0);

105 
	`¥öt_buâ⁄
 (
dülog
, " Hñ∞", 
y
, 
x
 + 14, 
£À˘ed
 == 1);

107 
	`wmove
(
dülog
, 
y
, 
x
+1 + 14*
£À˘ed
);

108 
	`wª‰esh
 (
dülog
);

109 
	}
}

116 
	$dülog_checkli°
 (c⁄° *
tôÀ
, c⁄° *
¥om±
, 
height
, 
width
,

117 
li°_height
, 
ôem_no
, c⁄° * c⁄° * 
ôems
, 
Êag
)

120 
i
, 
x
, 
y
, 
box_x
, 
box_y
;

121 
key
 = 0, 
buâ⁄
 = 0, 
choi˚
 = 0, 
s¸ﬁl
 = 0, 
max_choi˚
, *
°©us
;

122 
WINDOW
 *
dülog
, *
li°
;

124 
checkÊag
 = 
Êag
;

127 i‡((
°©us
 = 
	`mÆloc
 ( (Ë* 
ôem_no
)Ë=
NULL
) {

128 
	`ídwö
 ();

129 
	`Ârötf
 (
°dîr
,

131 
	`exô
 (-1);

135 
i
 = 0; i < 
ôem_no
; i++) {

136 
°©us
[
i
] = !
	`°rˇ£cmp
 (
ôems
[i * 3 + 2], "on");

137 i‡(!
choi˚
 && 
°©us
[
i
])

138 
choi˚
 = 
i
;

141 
max_choi˚
 = 
	`MIN
 (
li°_height
, 
ôem_no
);

144 
x
 = (
COLS
 - 
width
) / 2;

145 
y
 = (
LINES
 - 
height
) / 2;

147 
	`døw_shadow
 (
°ds¸
, 
y
, 
x
, 
height
, 
width
);

149 
dülog
 = 
	`√wwö
 (
height
, 
width
, 
y
, 
x
);

150 
	`key∑d
 (
dülog
, 
TRUE
);

152 
	`døw_box
 (
dülog
, 0, 0, 
height
, 
width
, 
dülog_©å
, 
b‹dî_©å
);

153 
	`w©å£t
 (
dülog
, 
b‹dî_©å
);

154 
	`mvwaddch
 (
dülog
, 
height
-3, 0, 
ACS_LTEE
);

155 
i
 = 0; i < 
width
 - 2; i++)

156 
	`waddch
 (
dülog
, 
ACS_HLINE
);

157 
	`w©å£t
 (
dülog
, 
dülog_©å
);

158 
	`waddch
 (
dülog
, 
ACS_RTEE
);

160 i‡(
tôÀ
 !
NULL
 && 
	`°æí
—ôÀË>
width
-2 ) {

162 * 
tôÀ2
 = 
	`mÆloc
(
width
-2+1);

163 
	`mem˝y
–
tôÀ2
, 
tôÀ
, 
width
-2 );

164 
tôÀ2
[
width
-2] = '\0';

165 
tôÀ
 = 
tôÀ2
;

168 i‡(
tôÀ
 !
NULL
) {

169 
	`w©å£t
 (
dülog
, 
tôÀ_©å
);

170 
	`mvwaddch
 (
dülog
, 0, (
width
 - 
	`°æí
(
tôÀ
))/2 - 1, ' ');

171 
	`wadd°r
 (
dülog
, (*)
tôÀ
);

172 
	`waddch
 (
dülog
, ' ');

175 
	`w©å£t
 (
dülog
, 
dülog_©å
);

176 
	`¥öt_autowøp
 (
dülog
, 
¥om±
, 
width
 - 2, 1, 3);

178 
li°_width
 = 
width
 - 6;

179 
box_y
 = 
height
 - 
li°_height
 - 5;

180 
box_x
 = (
width
 - 
li°_width
) / 2 - 1;

183 
li°
 = 
	`subwö
 (
dülog
, 
li°_height
, 
li°_width
, 
y
+
box_y
+1, 
x
+
box_x
+1);

185 
	`key∑d
 (
li°
, 
TRUE
);

188 
	`døw_box
 (
dülog
, 
box_y
, 
box_x
, 
li°_height
 + 2, 
li°_width
 + 2,

189 
míubox_b‹dî_©å
, 
míubox_©å
);

192 
check_x
 = 0;

193 
i
 = 0; i < 
ôem_no
; i++)

194 
check_x
 = 
	`MAX
 (check_x, + 
	`°æí
 (
ôems
[
i
 * 3 + 1]) + 4);

196 
check_x
 = (
li°_width
 - check_x) / 2;

197 
ôem_x
 = 
check_x
 + 4;

199 i‡(
choi˚
 >
li°_height
) {

200 
s¸ﬁl
 = 
choi˚
 - 
li°_height
 + 1;

201 
choi˚
 -
s¸ﬁl
;

205 
i
 = 0; i < 
max_choi˚
; i++) {

206 
	`¥öt_ôem
 (
li°
, 
ôems
[(
s¸ﬁl
+
i
) * 3 + 1],

207 
°©us
[
i
+
s¸ﬁl
], i, i =
choi˚
);

210 
	`wnouåe‰esh
 (
li°
);

212 
	`¥öt_¨rows
(
dülog
, 
choi˚
, 
ôem_no
, 
s¸ﬁl
,

213 
box_y
, 
box_x
 + 
check_x
 + 5, 
li°_height
);

215 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 0);

217 
key
 !
ESC
) {

218 
key
 = 
	`wgëch
 (
dülog
);

220 
i
 = 0; i < 
max_choi˚
; i++)

221 i‡(
	`touµî
(
key
Ë=touµî(
ôems
[(
s¸ﬁl
+
i
)*3+1][0]))

225 i‡–
i
 < 
max_choi˚
 || 
key
 =
KEY_UP
 || key =
KEY_DOWN
 ||

226 
key
 == '+' || key == '-' ) {

227 i‡(
key
 =
KEY_UP
 || key == '-') {

228 i‡(!
choi˚
) {

229 i‡(!
s¸ﬁl
)

232 i‡(
li°_height
 > 1) {

234 
	`¥öt_ôem
 (
li°
, 
ôems
[
s¸ﬁl
 * 3 + 1],

235 
°©us
[
s¸ﬁl
], 0, 
FALSE
);

236 
	`s¸ﬁlok
 (
li°
, 
TRUE
);

237 
	`ws¸l
 (
li°
, -1);

238 
	`s¸ﬁlok
 (
li°
, 
FALSE
);

240 
s¸ﬁl
--;

241 
	`¥öt_ôem
 (
li°
, 
ôems
[
s¸ﬁl
 * 3 + 1],

242 
°©us
[
s¸ﬁl
], 0, 
TRUE
);

243 
	`wnouåe‰esh
 (
li°
);

245 
	`¥öt_¨rows
(
dülog
, 
choi˚
, 
ôem_no
, 
s¸ﬁl
,

246 
box_y
, 
box_x
 + 
check_x
 + 5, 
li°_height
);

248 
	`wª‰esh
 (
dülog
);

252 
i
 = 
choi˚
 - 1;

253 } i‡(
key
 =
KEY_DOWN
 || key == '+') {

254 i‡(
choi˚
 =
max_choi˚
 - 1) {

255 i‡(
s¸ﬁl
 + 
choi˚
 >
ôem_no
 - 1)

258 i‡(
li°_height
 > 1) {

260 
	`¥öt_ôem
 (
li°
, 
ôems
[(
s¸ﬁl
 + 
max_choi˚
 - 1) * 3 + 1],

261 
°©us
[
s¸ﬁl
 + 
max_choi˚
 - 1],

262 
max_choi˚
 - 1, 
FALSE
);

263 
	`s¸ﬁlok
 (
li°
, 
TRUE
);

264 
	`s¸ﬁl
 (
li°
);

265 
	`s¸ﬁlok
 (
li°
, 
FALSE
);

267 
s¸ﬁl
++;

268 
	`¥öt_ôem
 (
li°
, 
ôems
[(
s¸ﬁl
 + 
max_choi˚
 - 1) * 3 + 1],

269 
°©us
[
s¸ﬁl
 + 
max_choi˚
 - 1],

270 
max_choi˚
 - 1, 
TRUE
);

271 
	`wnouåe‰esh
 (
li°
);

273 
	`¥öt_¨rows
(
dülog
, 
choi˚
, 
ôem_no
, 
s¸ﬁl
,

274 
box_y
, 
box_x
 + 
check_x
 + 5, 
li°_height
);

276 
	`wª‰esh
 (
dülog
);

280 
i
 = 
choi˚
 + 1;

282 i‡(
i
 !
choi˚
) {

284 
	`¥öt_ôem
 (
li°
, 
ôems
[(
s¸ﬁl
 + 
choi˚
) * 3 + 1],

285 
°©us
[
s¸ﬁl
 + 
choi˚
], choi˚, 
FALSE
);

287 
choi˚
 = 
i
;

288 
	`¥öt_ôem
 (
li°
, 
ôems
[(
s¸ﬁl
 + 
choi˚
) * 3 + 1],

289 
°©us
[
s¸ﬁl
 + 
choi˚
], choi˚, 
TRUE
);

290 
	`wnouåe‰esh
 (
li°
);

291 
	`wª‰esh
 (
dülog
);

295 
key
) {

299 
	`dñwö
 (
dülog
);

300 
	`‰ì
 (
°©us
);

302 
TAB
:

303 
KEY_LEFT
:

304 
KEY_RIGHT
:

305 
buâ⁄
 = ((
key
 =
KEY_LEFT
 ? --button : ++button) < 0)

306 ? 1 : (
buâ⁄
 > 1 ? 0 : button);

308 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 
buâ⁄
);

309 
	`wª‰esh
 (
dülog
);

315 i‡(!
buâ⁄
) {

316 i‡(
Êag
 =
FLAG_CHECK
) {

317 
°©us
[
s¸ﬁl
 + 
choi˚
] = !status[scroll + choice];

318 
	`wmove
 (
li°
, 
choi˚
, 
check_x
);

319 
	`w©å£t
 (
li°
, 
check_£À˘ed_©å
);

320 
	`w¥ötw
 (
li°
, "[%c]", 
°©us
[
s¸ﬁl
 + 
choi˚
] ? 'X' : ' ');

322 i‡(!
°©us
[
s¸ﬁl
 + 
choi˚
]) {

323 
i
 = 0; i < 
ôem_no
; i++)

324 
°©us
[
i
] = 0;

325 
°©us
[
s¸ﬁl
 + 
choi˚
] = 1;

326 
i
 = 0; i < 
max_choi˚
; i++)

327 
	`¥öt_ôem
 (
li°
, 
ôems
[(
s¸ﬁl
 + 
i
) * 3 + 1],

328 
°©us
[
s¸ﬁl
 + 
i
], i, i =
choi˚
);

331 
	`wnouåe‰esh
 (
li°
);

332 
	`wª‰esh
 (
dülog
);

334 
i
 = 0; i < 
ôem_no
; i++) {

335 i‡(
°©us
[
i
]) {

336 i‡(
Êag
 =
FLAG_CHECK
) {

337 
	`Ârötf
 (
°dîr
, "\"%s\" ", 
ôems
[
i
 * 3]);

339 
	`Ârötf
 (
°dîr
, "%s", 
ôems
[
i
 * 3]);

345 
	`dñwö
 (
dülog
);

346 
	`‰ì
 (
°©us
);

347  
buâ⁄
;

350 
key
 = 
ESC
;

351 
ESC
:

356 
	`dñwö
 (
dülog
);

357 
	`‰ì
 (
°©us
);

359 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/scripts/lxdialog/colors.h

29 
	#SCREEN_FG
 
COLOR_CYAN


	)

30 
	#SCREEN_BG
 
COLOR_BLUE


	)

31 
	#SCREEN_HL
 
TRUE


	)

33 
	#SHADOW_FG
 
COLOR_BLACK


	)

34 
	#SHADOW_BG
 
COLOR_BLACK


	)

35 
	#SHADOW_HL
 
TRUE


	)

37 
	#DIALOG_FG
 
COLOR_BLACK


	)

38 
	#DIALOG_BG
 
COLOR_WHITE


	)

39 
	#DIALOG_HL
 
FALSE


	)

41 
	#TITLE_FG
 
COLOR_YELLOW


	)

42 
	#TITLE_BG
 
COLOR_WHITE


	)

43 
	#TITLE_HL
 
TRUE


	)

45 
	#BORDER_FG
 
COLOR_WHITE


	)

46 
	#BORDER_BG
 
COLOR_WHITE


	)

47 
	#BORDER_HL
 
TRUE


	)

49 
	#BUTTON_ACTIVE_FG
 
COLOR_WHITE


	)

50 
	#BUTTON_ACTIVE_BG
 
COLOR_BLUE


	)

51 
	#BUTTON_ACTIVE_HL
 
TRUE


	)

53 
	#BUTTON_INACTIVE_FG
 
COLOR_BLACK


	)

54 
	#BUTTON_INACTIVE_BG
 
COLOR_WHITE


	)

55 
	#BUTTON_INACTIVE_HL
 
FALSE


	)

57 
	#BUTTON_KEY_ACTIVE_FG
 
COLOR_WHITE


	)

58 
	#BUTTON_KEY_ACTIVE_BG
 
COLOR_BLUE


	)

59 
	#BUTTON_KEY_ACTIVE_HL
 
TRUE


	)

61 
	#BUTTON_KEY_INACTIVE_FG
 
COLOR_RED


	)

62 
	#BUTTON_KEY_INACTIVE_BG
 
COLOR_WHITE


	)

63 
	#BUTTON_KEY_INACTIVE_HL
 
FALSE


	)

65 
	#BUTTON_LABEL_ACTIVE_FG
 
COLOR_YELLOW


	)

66 
	#BUTTON_LABEL_ACTIVE_BG
 
COLOR_BLUE


	)

67 
	#BUTTON_LABEL_ACTIVE_HL
 
TRUE


	)

69 
	#BUTTON_LABEL_INACTIVE_FG
 
COLOR_BLACK


	)

70 
	#BUTTON_LABEL_INACTIVE_BG
 
COLOR_WHITE


	)

71 
	#BUTTON_LABEL_INACTIVE_HL
 
TRUE


	)

73 
	#INPUTBOX_FG
 
COLOR_BLACK


	)

74 
	#INPUTBOX_BG
 
COLOR_WHITE


	)

75 
	#INPUTBOX_HL
 
FALSE


	)

77 
	#INPUTBOX_BORDER_FG
 
COLOR_BLACK


	)

78 
	#INPUTBOX_BORDER_BG
 
COLOR_WHITE


	)

79 
	#INPUTBOX_BORDER_HL
 
FALSE


	)

81 
	#SEARCHBOX_FG
 
COLOR_BLACK


	)

82 
	#SEARCHBOX_BG
 
COLOR_WHITE


	)

83 
	#SEARCHBOX_HL
 
FALSE


	)

85 
	#SEARCHBOX_TITLE_FG
 
COLOR_YELLOW


	)

86 
	#SEARCHBOX_TITLE_BG
 
COLOR_WHITE


	)

87 
	#SEARCHBOX_TITLE_HL
 
TRUE


	)

89 
	#SEARCHBOX_BORDER_FG
 
COLOR_WHITE


	)

90 
	#SEARCHBOX_BORDER_BG
 
COLOR_WHITE


	)

91 
	#SEARCHBOX_BORDER_HL
 
TRUE


	)

93 
	#POSITION_INDICATOR_FG
 
COLOR_YELLOW


	)

94 
	#POSITION_INDICATOR_BG
 
COLOR_WHITE


	)

95 
	#POSITION_INDICATOR_HL
 
TRUE


	)

97 
	#MENUBOX_FG
 
COLOR_BLACK


	)

98 
	#MENUBOX_BG
 
COLOR_WHITE


	)

99 
	#MENUBOX_HL
 
FALSE


	)

101 
	#MENUBOX_BORDER_FG
 
COLOR_WHITE


	)

102 
	#MENUBOX_BORDER_BG
 
COLOR_WHITE


	)

103 
	#MENUBOX_BORDER_HL
 
TRUE


	)

105 
	#ITEM_FG
 
COLOR_BLACK


	)

106 
	#ITEM_BG
 
COLOR_WHITE


	)

107 
	#ITEM_HL
 
FALSE


	)

109 
	#ITEM_SELECTED_FG
 
COLOR_WHITE


	)

110 
	#ITEM_SELECTED_BG
 
COLOR_BLUE


	)

111 
	#ITEM_SELECTED_HL
 
TRUE


	)

113 
	#TAG_FG
 
COLOR_YELLOW


	)

114 
	#TAG_BG
 
COLOR_WHITE


	)

115 
	#TAG_HL
 
TRUE


	)

117 
	#TAG_SELECTED_FG
 
COLOR_YELLOW


	)

118 
	#TAG_SELECTED_BG
 
COLOR_BLUE


	)

119 
	#TAG_SELECTED_HL
 
TRUE


	)

121 
	#TAG_KEY_FG
 
COLOR_YELLOW


	)

122 
	#TAG_KEY_BG
 
COLOR_WHITE


	)

123 
	#TAG_KEY_HL
 
TRUE


	)

125 
	#TAG_KEY_SELECTED_FG
 
COLOR_YELLOW


	)

126 
	#TAG_KEY_SELECTED_BG
 
COLOR_BLUE


	)

127 
	#TAG_KEY_SELECTED_HL
 
TRUE


	)

129 
	#CHECK_FG
 
COLOR_BLACK


	)

130 
	#CHECK_BG
 
COLOR_WHITE


	)

131 
	#CHECK_HL
 
FALSE


	)

133 
	#CHECK_SELECTED_FG
 
COLOR_WHITE


	)

134 
	#CHECK_SELECTED_BG
 
COLOR_BLUE


	)

135 
	#CHECK_SELECTED_HL
 
TRUE


	)

137 
	#UARROW_FG
 
COLOR_GREEN


	)

138 
	#UARROW_BG
 
COLOR_WHITE


	)

139 
	#UARROW_HL
 
TRUE


	)

141 
	#DARROW_FG
 
COLOR_GREEN


	)

142 
	#DARROW_BG
 
COLOR_WHITE


	)

143 
	#DARROW_HL
 
TRUE


	)

147 
	#C_ATTR
(
x
,
y
Ë((x ? 
A_BOLD
 : 0Ë| 
	`COLOR_PAIR
((y)))

	)

148 
	#COLOR_NAME_LEN
 10

	)

149 
	#COLOR_COUNT
 8

	)

156 
	m«me
[
COLOR_NAME_LEN
];

157 
	mvÆue
;

158 } 
	tcﬁ‹_«mes_°
;

160 
cﬁ‹_«mes_°
 
cﬁ‹_«mes
[];

161 
cﬁ‹_èbÀ
[][3];

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/scripts/lxdialog/dialog.h

22 
	~<sys/ty≥s.h
>

23 
	~<f˙é.h
>

24 
	~<uni°d.h
>

25 
	~<˘y≥.h
>

26 
	~<°dlib.h
>

27 
	~<°rög.h
>

29 #ö˛udê
CURSES_LOC


39 #i‡
deföed
(
NCURSES_VERSION
Ë&& deföed(
_NEED_WRAP
Ë&& !deföed(
GCC_PRINTFLIKE
)

40 
	#OLD_NCURSES
 1

	)

41 #unde‡
wbkgd£t


42 
	#wbkgd£t
(
w
,
p
Ë

	)

44 
	#OLD_NCURSES
 0

	)

47 
	#TR
(
∑øms
Ë
_åa˚f
 
	)
params

49 
	#ESC
 27

	)

50 
	#TAB
 9

	)

51 
	#MAX_LEN
 2048

	)

52 
	#BUF_SIZE
 (10*1024)

	)

53 
	#MIN
(
x
,
y
Ë(x < y ? x : y)

	)

54 
	#MAX
(
x
,
y
Ë(x > y ? x : y)

	)

57 #i‚de‡
ACS_ULCORNER


58 
	#ACS_ULCORNER
 '+'

	)

60 #i‚de‡
ACS_LLCORNER


61 
	#ACS_LLCORNER
 '+'

	)

63 #i‚de‡
ACS_URCORNER


64 
	#ACS_URCORNER
 '+'

	)

66 #i‚de‡
ACS_LRCORNER


67 
	#ACS_LRCORNER
 '+'

	)

69 #i‚de‡
ACS_HLINE


70 
	#ACS_HLINE
 '-'

	)

72 #i‚de‡
ACS_VLINE


73 
	#ACS_VLINE
 '|'

	)

75 #i‚de‡
ACS_LTEE


76 
	#ACS_LTEE
 '+'

	)

78 #i‚de‡
ACS_RTEE


79 
	#ACS_RTEE
 '+'

	)

81 #i‚de‡
ACS_UARROW


82 
	#ACS_UARROW
 '^'

	)

84 #i‚de‡
ACS_DARROW


85 
	#ACS_DARROW
 'v'

	)

91 
	#s¸ìn_©å
 
©åibuãs
[0]

	)

92 
	#shadow_©å
 
©åibuãs
[1]

	)

93 
	#dülog_©å
 
©åibuãs
[2]

	)

94 
	#tôÀ_©å
 
©åibuãs
[3]

	)

95 
	#b‹dî_©å
 
©åibuãs
[4]

	)

96 
	#buâ⁄_a˘ive_©å
 
©åibuãs
[5]

	)

97 
	#buâ⁄_öa˘ive_©å
 
©åibuãs
[6]

	)

98 
	#buâ⁄_key_a˘ive_©å
 
©åibuãs
[7]

	)

99 
	#buâ⁄_key_öa˘ive_©å
 
©åibuãs
[8]

	)

100 
	#buâ⁄_œbñ_a˘ive_©å
 
©åibuãs
[9]

	)

101 
	#buâ⁄_œbñ_öa˘ive_©å
 
©åibuãs
[10]

	)

102 
	#öputbox_©å
 
©åibuãs
[11]

	)

103 
	#öputbox_b‹dî_©å
 
©åibuãs
[12]

	)

104 
	#£¨chbox_©å
 
©åibuãs
[13]

	)

105 
	#£¨chbox_tôÀ_©å
 
©åibuãs
[14]

	)

106 
	#£¨chbox_b‹dî_©å
 
©åibuãs
[15]

	)

107 
	#posôi⁄_ödiˇt‹_©å
 
©åibuãs
[16]

	)

108 
	#míubox_©å
 
©åibuãs
[17]

	)

109 
	#míubox_b‹dî_©å
 
©åibuãs
[18]

	)

110 
	#ôem_©å
 
©åibuãs
[19]

	)

111 
	#ôem_£À˘ed_©å
 
©åibuãs
[20]

	)

112 
	#èg_©å
 
©åibuãs
[21]

	)

113 
	#èg_£À˘ed_©å
 
©åibuãs
[22]

	)

114 
	#èg_key_©å
 
©åibuãs
[23]

	)

115 
	#èg_key_£À˘ed_©å
 
©åibuãs
[24]

	)

116 
	#check_©å
 
©åibuãs
[25]

	)

117 
	#check_£À˘ed_©å
 
©åibuãs
[26]

	)

118 
	#u¨row_©å
 
©åibuãs
[27]

	)

119 
	#d¨row_©å
 
©åibuãs
[28]

	)

122 
	#ATTRIBUTE_COUNT
 29

	)

127 
boﬁ
 
u£_cﬁ‹s
;

128 
boﬁ
 
u£_shadow
;

130 
chty≥
 
©åibuãs
[];

132 c⁄° *
backtôÀ
;

137 
¸óã_rc
 (c⁄° *
fûíame
);

138 
∑r£_rc
 ();

141 
öô_dülog
 ();

142 
íd_dülog
 ();

143 
©å_˛ór
 (
WINDOW
 * 
wö
, 
height
, 
width
, 
chty≥
 
©å
);

144 
dülog_˛ór
 ();

145 
cﬁ‹_£tup
 ();

146 
¥öt_autowøp
 (
WINDOW
 * 
wö
, c⁄° *
¥om±
, 
width
, 
y
, 
x
);

147 
¥öt_buâ⁄
 (
WINDOW
 * 
wö
, c⁄° *
œbñ
, 
y
, 
x
, 
£À˘ed
);

148 
døw_box
 (
WINDOW
 * 
wö
, 
y
, 
x
, 
height
, 
width
, 
chty≥
 
box
,

149 
chty≥
 
b‹dî
);

150 
døw_shadow
 (
WINDOW
 * 
wö
, 
y
, 
x
, 
height
, 
width
);

152 
fú°_Æpha
 (c⁄° *
°rög
, c⁄° *
exem±
);

153 
dülog_ye¢o
 (c⁄° *
tôÀ
, c⁄° *
¥om±
, 
height
, 
width
);

154 
dülog_msgbox
 (c⁄° *
tôÀ
, c⁄° *
¥om±
, 
height
,

155 
width
, 
∑u£
);

156 
dülog_ãxtbox
 (c⁄° *
tôÀ
, c⁄° *
fûe
, 
height
, 
width
);

157 
dülog_míu
 (c⁄° *
tôÀ
, c⁄° *
¥om±
, 
height
, 
width
,

158 
míu_height
, c⁄° *
choi˚
, 
ôem_no
,

159 c⁄° * c⁄° * 
ôems
);

160 
dülog_checkli°
 (c⁄° *
tôÀ
, c⁄° *
¥om±
, 
height
,

161 
width
, 
li°_height
, 
ôem_no
,

162 c⁄° * c⁄° * 
ôems
, 
Êag
);

163 
dülog_öput_ªsu…
[];

164 
dülog_öputbox
 (c⁄° *
tôÀ
, c⁄° *
¥om±
, 
height
,

165 
width
, c⁄° *
öô
);

176 
	#M_EVENT
 (
KEY_MAX
+1)

	)

183 
	#FLAG_CHECK
 1

	)

184 
	#FLAG_RADIO
 0

	)

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/scripts/lxdialog/inputbox.c

22 
	~"dülog.h
"

24 
	gdülog_öput_ªsu…
[
MAX_LEN
 + 1];

30 
	$¥öt_buâ⁄s
(
WINDOW
 *
dülog
, 
height
, 
width
, 
£À˘ed
)

32 
x
 = 
width
 / 2 - 11;

33 
y
 = 
height
 - 2;

35 
	`¥öt_buâ⁄
 (
dülog
, " Ok ", 
y
, 
x
, 
£À˘ed
==0);

36 
	`¥öt_buâ⁄
 (
dülog
, " Hñ∞", 
y
, 
x
 + 14, 
£À˘ed
==1);

38 
	`wmove
(
dülog
, 
y
, 
x
+1+14*
£À˘ed
);

39 
	`wª‰esh
(
dülog
);

40 
	}
}

46 
	$dülog_öputbox
 (c⁄° *
tôÀ
, c⁄° *
¥om±
, 
height
, 
width
,

47 c⁄° *
öô
)

49 
i
, 
x
, 
y
, 
box_y
, 
box_x
, 
box_width
;

50 
öput_x
 = 0, 
s¸ﬁl
 = 0, 
key
 = 0, 
buâ⁄
 = -1;

51 *
ö°r
 = 
dülog_öput_ªsu…
;

52 
WINDOW
 *
dülog
;

55 
x
 = (
COLS
 - 
width
) / 2;

56 
y
 = (
LINES
 - 
height
) / 2;

59 
	`døw_shadow
 (
°ds¸
, 
y
, 
x
, 
height
, 
width
);

61 
dülog
 = 
	`√wwö
 (
height
, 
width
, 
y
, 
x
);

62 
	`key∑d
 (
dülog
, 
TRUE
);

64 
	`døw_box
 (
dülog
, 0, 0, 
height
, 
width
, 
dülog_©å
, 
b‹dî_©å
);

65 
	`w©å£t
 (
dülog
, 
b‹dî_©å
);

66 
	`mvwaddch
 (
dülog
, 
height
-3, 0, 
ACS_LTEE
);

67 
i
 = 0; i < 
width
 - 2; i++)

68 
	`waddch
 (
dülog
, 
ACS_HLINE
);

69 
	`w©å£t
 (
dülog
, 
dülog_©å
);

70 
	`waddch
 (
dülog
, 
ACS_RTEE
);

72 i‡(
tôÀ
 !
NULL
 && 
	`°æí
—ôÀË>
width
-2 ) {

74 * 
tôÀ2
 = 
	`mÆloc
(
width
-2+1);

75 
	`mem˝y
–
tôÀ2
, 
tôÀ
, 
width
-2 );

76 
tôÀ2
[
width
-2] = '\0';

77 
tôÀ
 = 
tôÀ2
;

80 i‡(
tôÀ
 !
NULL
) {

81 
	`w©å£t
 (
dülog
, 
tôÀ_©å
);

82 
	`mvwaddch
 (
dülog
, 0, (
width
 - 
	`°æí
(
tôÀ
))/2 - 1, ' ');

83 
	`wadd°r
 (
dülog
, (*)
tôÀ
);

84 
	`waddch
 (
dülog
, ' ');

87 
	`w©å£t
 (
dülog
, 
dülog_©å
);

88 
	`¥öt_autowøp
 (
dülog
, 
¥om±
, 
width
 - 2, 1, 3);

91 
box_width
 = 
width
 - 6;

92 
	`gëyx
 (
dülog
, 
y
, 
x
);

93 
box_y
 = 
y
 + 2;

94 
box_x
 = (
width
 - 
box_width
) / 2;

95 
	`døw_box
 (
dülog
, 
y
 + 1, 
box_x
 - 1, 3, 
box_width
 + 2,

96 
b‹dî_©å
, 
dülog_©å
);

98 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 0);

101 
	`wmove
 (
dülog
, 
box_y
, 
box_x
);

102 
	`w©å£t
 (
dülog
, 
öputbox_©å
);

104 i‡(!
öô
)

105 
ö°r
[0] = '\0';

107 
	`°r˝y
 (
ö°r
, 
öô
);

109 
öput_x
 = 
	`°æí
 (
ö°r
);

111 i‡(
öput_x
 >
box_width
) {

112 
s¸ﬁl
 = 
öput_x
 - 
box_width
 + 1;

113 
öput_x
 = 
box_width
 - 1;

114 
i
 = 0; i < 
box_width
 - 1; i++)

115 
	`waddch
 (
dülog
, 
ö°r
[
s¸ﬁl
 + 
i
]);

117 
	`wadd°r
 (
dülog
, 
ö°r
);

119 
	`wmove
 (
dülog
, 
box_y
, 
box_x
 + 
öput_x
);

121 
	`wª‰esh
 (
dülog
);

123 
key
 !
ESC
) {

124 
key
 = 
	`wgëch
 (
dülog
);

126 i‡(
buâ⁄
 == -1) {

127 
key
) {

128 
TAB
:

129 
KEY_UP
:

130 
KEY_DOWN
:

132 
KEY_LEFT
:

134 
KEY_RIGHT
:

136 
KEY_BACKSPACE
:

138 i‡(
öput_x
 || 
s¸ﬁl
) {

139 
	`w©å£t
 (
dülog
, 
öputbox_©å
);

140 i‡(!
öput_x
) {

141 
s¸ﬁl
 = s¸ﬁ»< 
box_width
 - 1 ?

142 0 : 
s¸ﬁl
 - (
box_width
 - 1);

143 
	`wmove
 (
dülog
, 
box_y
, 
box_x
);

144 
i
 = 0; i < 
box_width
; i++)

145 
	`waddch
 (
dülog
, 
ö°r
[
s¸ﬁl
 + 
öput_x
 + 
i
] ?

146 
ö°r
[
s¸ﬁl
 + 
öput_x
 + 
i
] : ' ');

147 
öput_x
 = 
	`°æí
 (
ö°r
Ë- 
s¸ﬁl
;

149 
öput_x
--;

150 
ö°r
[
s¸ﬁl
 + 
öput_x
] = '\0';

151 
	`mvwaddch
 (
dülog
, 
box_y
, 
öput_x
 + 
box_x
, ' ');

152 
	`wmove
 (
dülog
, 
box_y
, 
öput_x
 + 
box_x
);

153 
	`wª‰esh
 (
dülog
);

157 i‡(
key
 < 0x100 && 
	`i•röt
 (key)) {

158 i‡(
s¸ﬁl
 + 
öput_x
 < 
MAX_LEN
) {

159 
	`w©å£t
 (
dülog
, 
öputbox_©å
);

160 
ö°r
[
s¸ﬁl
 + 
öput_x
] = 
key
;

161 
ö°r
[
s¸ﬁl
 + 
öput_x
 + 1] = '\0';

162 i‡(
öput_x
 =
box_width
 - 1) {

163 
s¸ﬁl
++;

164 
	`wmove
 (
dülog
, 
box_y
, 
box_x
);

165 
i
 = 0; i < 
box_width
 - 1; i++)

166 
	`waddch
 (
dülog
, 
ö°r
[
s¸ﬁl
 + 
i
]);

168 
	`wmove
 (
dülog
, 
box_y
, 
öput_x
++ + 
box_x
);

169 
	`waddch
 (
dülog
, 
key
);

171 
	`wª‰esh
 (
dülog
);

173 
	`Êash
 ();

178 
key
) {

181 
	`dñwö
 (
dülog
);

185 
	`dñwö
 (
dülog
);

187 
KEY_UP
:

188 
KEY_LEFT
:

189 
buâ⁄
) {

191 
buâ⁄
 = 1;

192 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 1);

195 
buâ⁄
 = -1;

196 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 0);

197 
	`wmove
 (
dülog
, 
box_y
, 
box_x
 + 
öput_x
);

198 
	`wª‰esh
 (
dülog
);

201 
buâ⁄
 = 0;

202 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 0);

206 
TAB
:

207 
KEY_DOWN
:

208 
KEY_RIGHT
:

209 
buâ⁄
) {

211 
buâ⁄
 = 0;

212 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 0);

215 
buâ⁄
 = 1;

216 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 1);

219 
buâ⁄
 = -1;

220 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 0);

221 
	`wmove
 (
dülog
, 
box_y
, 
box_x
 + 
öput_x
);

222 
	`wª‰esh
 (
dülog
);

228 
	`dñwö
 (
dülog
);

229  (
buâ⁄
 == -1 ? 0 : button);

232 
key
 = 
ESC
;

233 
ESC
:

238 
	`dñwö
 (
dülog
);

240 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/scripts/lxdialog/lxdialog.c

22 
	~"dülog.h
"

24 
Ußge
 (c⁄° *
«me
);

26 (
	tjum≥rFn
Ë(c⁄° *
	ttôÀ
, 
	t¨gc
, c⁄° * c⁄° * 
	t¨gv
);

28 
	sMode
 {

29 *
«me
;

30 
¨gmö
, 
¨gmax
, 
¨gmod
;

31 
jum≥rFn
 *
jum≥r
;

34 
jum≥rFn
 
j_míu
, 
j_checkli°
, 
j_ødiﬁi°
, 
j_ye¢o
, 
j_ãxtbox
, 
j_öputbox
;

35 
jum≥rFn
 
j_msgbox
, 
j_öfobox
;

37 
Mode
 
modes
[] =

39 {"--míu", 9, 0, 3, 
j_míu
},

40 {"--checkli°", 9, 0, 3, 
j_checkli°
},

41 {"--ødiﬁi°", 9, 0, 3, 
j_ødiﬁi°
},

42 {"--ye¢o", 5,5,1, 
j_ye¢o
},

43 {"--ãxtbox", 5,5,1, 
j_ãxtbox
},

44 {"--öputbox", 5, 6, 1, 
j_öputbox
},

45 {"--msgbox", 5, 5, 1, 
j_msgbox
},

46 {"--öfobox", 5, 5, 1, 
j_öfobox
},

47 {
NULL
, 0, 0, 0, NULL}

48 
	}
};

50 
Mode
 *
	gmodePå
;

52 #ifde‡
LOCALE


53 
	~<loˇÀ.h
>

57 
	$maö
 (
¨gc
, c⁄° * c⁄° * 
¨gv
)

59 
off£t
 = 0, 
˛ór_s¸ìn
 = 0, 
íd_comm⁄_›ts
 = 0, 
ªtvÆ
;

60 c⁄° *
tôÀ
 = 
NULL
;

62 #ifde‡
LOCALE


63 (Ë
	`£éoˇÀ
 (
LC_ALL
, "");

66 #ifde‡
TRACE


67 
	`åa˚
(
TRACE_CALLS
|
TRACE_UPDATE
);

69 i‡(
¨gc
 < 2) {

70 
	`Ußge
 (
¨gv
[0]);

71 
	`exô
 (-1);

74 
off£t
 < 
¨gc
 - 1 && !
íd_comm⁄_›ts
) {

75 i‡(!
	`°rcmp
 (
¨gv
[
off£t
 + 1], "--title")) {

76 i‡(
¨gc
 - 
off£t
 < 3 || 
tôÀ
 !
NULL
) {

77 
	`Ußge
 (
¨gv
[0]);

78 
	`exô
 (-1);

80 
tôÀ
 = 
¨gv
[
off£t
 + 2];

81 
off£t
 += 2;

83 } i‡(!
	`°rcmp
 (
¨gv
[
off£t
 + 1], "--backtitle")) {

84 i‡(
backtôÀ
 !
NULL
) {

85 
	`Ußge
 (
¨gv
[0]);

86 
	`exô
 (-1);

88 
backtôÀ
 = 
¨gv
[
off£t
 + 2];

89 
off£t
 += 2;

91 } i‡(!
	`°rcmp
 (
¨gv
[
off£t
 + 1], "--clear")) {

92 i‡(
˛ór_s¸ìn
) {

93 
	`Ußge
 (
¨gv
[0]);

94 
	`exô
 (-1);

95 } i‡(
¨gc
 == 2) {

96 
	`öô_dülog
 ();

97 
	`ª‰esh
 ();

98 
	`íd_dülog
 ();

101 
˛ór_s¸ìn
 = 1;

102 
off£t
++;

105 
íd_comm⁄_›ts
 = 1;

108 i‡(
¨gc
 - 1 =
off£t
) {

109 
	`Ußge
 (
¨gv
[0]);

110 
	`exô
 (-1);

114 
modePå
 = 
modes
; modePå->
«me
; modePtr++)

115 i‡(!
	`°rcmp
 (
¨gv
[
off£t
 + 1], 
modePå
->
«me
))

118 i‡(!
modePå
->
«me
)

119 
	`Ußge
 (
¨gv
[0]);

120 i‡(
¨gc
 - 
off£t
 < 
modePå
->
¨gmö
)

121 
	`Ußge
 (
¨gv
[0]);

122 i‡(
modePå
->
¨gmax
 && 
¨gc
 - 
off£t
 > modePtr->argmax)

123 
	`Ußge
 (
¨gv
[0]);

127 
	`öô_dülog
 ();

128 
ªtvÆ
 = (*(
modePå
->
jum≥r
)Ë(
tôÀ
, 
¨gc
 - 
off£t
, 
¨gv
 + offset);

130 i‡(
˛ór_s¸ìn
) {

131 
	`©å_˛ór
 (
°ds¸
, 
LINES
, 
COLS
, 
s¸ìn_©å
);

132 
	`ª‰esh
 ();

134 
	`íd_dülog
();

136 
	`exô
 (
ªtvÆ
);

137 
	}
}

143 
	$Ußge
 (c⁄° *
«me
)

145 
	`Ârötf
 (
°dîr
, "\
\ndülog, by SaviÿLam (œm836@cs.cuhk.hk).\
\¿Ö©ched by Stu¨àHîbîà(S.Hîbît@shef.ac.uk)\
\¿ modifõd/guâed f‹ u£á†®Löux kî√»c⁄figÅoﬁ by \
\¿ Wûlüm Rﬂdˇ∞‘ﬂdˇpw@cfw.com)\
\n\
\n* Di•œy dülog boxe†‰om shñ»s¸ùt†*\
\n\
\nUßge: %†--˛ór\
\¿ %†[--tôÀ <tôÀ>] [--backtôÀ <backtôÀ>] --˛ó∏<Box o±i⁄s>\
\n\
\nBox o±i⁄s:\
\n\
\¿ --míu <ãxt> <height> <width> <míu height> <èg1> <ôem1>...\
\¿ --checkli° <ãxt> <height> <width> <li° height> <èg1> <ôem1> <°©us1>...\
\¿ --ødiﬁi° <ãxt> <height> <width> <li° height> <èg1> <ôem1> <°©us1>...\
\¿ --ãxtbox <fûe> <height> <width>\
\¿ --öputbox <ãxt> <height> <width> [<öô>]\
\¿ --ye¢ÿ <ãxt> <height> <width>\
\n", 
«me
,Çame);

165 
	`exô
 (-1);

166 
	}
}

173 
	$j_míu
 (c⁄° *
t
, 
ac
, c⁄° * c⁄° * 
av
)

175  
	`dülog_míu
 (
t
, 
av
[2], 
	`©oi
 (av[3]),átoi (av[4]),

176 
	`©oi
 (
av
[5]),áv[6], (
ac
 - 6) / 2,áv + 7);

177 
	}
}

180 
	$j_checkli°
 (c⁄° *
t
, 
ac
, c⁄° * c⁄° * 
av
)

182  
	`dülog_checkli°
 (
t
, 
av
[2], 
	`©oi
 (av[3]),átoi (av[4]),

183 
	`©oi
 (
av
[5]), (
ac
 - 6Ë/ 3,áv + 6, 
FLAG_CHECK
);

184 
	}
}

187 
	$j_ødiﬁi°
 (c⁄° *
t
, 
ac
, c⁄° * c⁄° * 
av
)

189  
	`dülog_checkli°
 (
t
, 
av
[2], 
	`©oi
 (av[3]),átoi (av[4]),

190 
	`©oi
 (
av
[5]), (
ac
 - 6Ë/ 3,áv + 6, 
FLAG_RADIO
);

191 
	}
}

194 
	$j_ãxtbox
 (c⁄° *
t
, 
ac
, c⁄° * c⁄° * 
av
)

196  
	`dülog_ãxtbox
 (
t
, 
av
[2], 
	`©oi
 (av[3]),átoi (av[4]));

197 
	}
}

200 
	$j_ye¢o
 (c⁄° *
t
, 
ac
, c⁄° * c⁄° * 
av
)

202  
	`dülog_ye¢o
 (
t
, 
av
[2], 
	`©oi
 (av[3]),átoi (av[4]));

203 
	}
}

206 
	$j_öputbox
 (c⁄° *
t
, 
ac
, c⁄° * c⁄° * 
av
)

208 
ªt
 = 
	`dülog_öputbox
 (
t
, 
av
[2], 
	`©oi
 (av[3]),átoi (av[4]),

209 
ac
 =6 ? 
av
[5] : (*Ë
NULL
);

210 i‡(
ªt
 == 0)

211 
	`Ârötf
(
°dîr
, 
dülog_öput_ªsu…
);

212  
ªt
;

213 
	}
}

216 
	$j_msgbox
 (c⁄° *
t
, 
ac
, c⁄° * c⁄° * 
av
)

218  
	`dülog_msgbox
 (
t
, 
av
[2], 
	`©oi
 (av[3]),átoi (av[4]), 1);

219 
	}
}

222 
	$j_öfobox
 (c⁄° *
t
, 
ac
, c⁄° * c⁄° * 
av
)

224  
	`dülog_msgbox
 (
t
, 
av
[2], 
	`©oi
 (av[3]),átoi (av[4]), 0);

225 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/scripts/lxdialog/menubox.c

59 
	~"dülog.h
"

61 
	gmíu_width
, 
	gôem_x
;

67 
	$¥öt_ôem
 (
WINDOW
 * 
wö
, c⁄° *
ôem
, 
choi˚
, 
£À˘ed
, 
hŸkey
)

69 
j
;

70 
míu_ôem
[
míu_width
+1];

72 
	`°∫˝y
(
míu_ôem
, 
ôem
, 
míu_width
);

73 
míu_ôem
[
míu_width
] = 0;

74 
j
 = 
	`fú°_Æpha
(
míu_ôem
, "YyNnMm");

77 
	`w©å£t
 (
wö
, 
míubox_©å
);

78 
	`wmove
 (
wö
, 
choi˚
, 0);

79 #i‡
OLD_NCURSES


81 
i
;

82 
i
 = 0; i < 
míu_width
; i++)

83 
	`waddch
 (
wö
, ' ');

86 
	`w˛π€ﬁ
(
wö
);

88 
	`w©å£t
 (
wö
, 
£À˘ed
 ? 
ôem_£À˘ed_©å
 : 
ôem_©å
);

89 
	`mvwadd°r
 (
wö
, 
choi˚
, 
ôem_x
, 
míu_ôem
);

90 i‡(
hŸkey
) {

91 
	`w©å£t
 (
wö
, 
£À˘ed
 ? 
èg_key_£À˘ed_©å
 : 
èg_key_©å
);

92 
	`mvwaddch
(
wö
, 
choi˚
, 
ôem_x
+
j
, 
míu_ôem
[j]);

94 
	}
}

100 
	$¥öt_¨rows
 (
WINDOW
 * 
wö
, 
ôem_no
, 
s¸ﬁl
,

101 
y
, 
x
, 
height
)

103 
cur_y
, 
cur_x
;

105 
	`gëyx
(
wö
, 
cur_y
, 
cur_x
);

107 
	`wmove
(
wö
, 
y
, 
x
);

109 i‡(
s¸ﬁl
 > 0) {

110 
	`w©å£t
 (
wö
, 
u¨row_©å
);

111 
	`waddch
 (
wö
, 
ACS_UARROW
);

112 
	`wadd°r
 (
wö
, "(-)");

115 
	`w©å£t
 (
wö
, 
míubox_©å
);

116 
	`waddch
 (
wö
, 
ACS_HLINE
);

117 
	`waddch
 (
wö
, 
ACS_HLINE
);

118 
	`waddch
 (
wö
, 
ACS_HLINE
);

119 
	`waddch
 (
wö
, 
ACS_HLINE
);

122 
y
 = y + 
height
 + 1;

123 
	`wmove
(
wö
, 
y
, 
x
);

125 i‡((
height
 < 
ôem_no
Ë&& (
s¸ﬁl
 + height < item_no)) {

126 
	`w©å£t
 (
wö
, 
d¨row_©å
);

127 
	`waddch
 (
wö
, 
ACS_DARROW
);

128 
	`wadd°r
 (
wö
, "(+)");

131 
	`w©å£t
 (
wö
, 
míubox_b‹dî_©å
);

132 
	`waddch
 (
wö
, 
ACS_HLINE
);

133 
	`waddch
 (
wö
, 
ACS_HLINE
);

134 
	`waddch
 (
wö
, 
ACS_HLINE
);

135 
	`waddch
 (
wö
, 
ACS_HLINE
);

138 
	`wmove
(
wö
, 
cur_y
, 
cur_x
);

139 
	}
}

145 
	$¥öt_buâ⁄s
 (
WINDOW
 *
wö
, 
height
, 
width
, 
£À˘ed
)

147 
x
 = 
width
 / 2 - 16;

148 
y
 = 
height
 - 2;

150 
	`¥öt_buâ⁄
 (
wö
, "Sñe˘", 
y
, 
x
, 
£À˘ed
 == 0);

151 
	`¥öt_buâ⁄
 (
wö
, " Exô ", 
y
, 
x
 + 12, 
£À˘ed
 == 1);

152 
	`¥öt_buâ⁄
 (
wö
, " Hñ∞", 
y
, 
x
 + 24, 
£À˘ed
 == 2);

154 
	`wmove
(
wö
, 
y
, 
x
+1+12*
£À˘ed
);

155 
	`wª‰esh
 (
wö
);

156 
	}
}

162 
	$dülog_míu
 (c⁄° *
tôÀ
, c⁄° *
¥om±
, 
height
, 
width
,

163 
míu_height
, c⁄° *
cuºít
, 
ôem_no
,

164 c⁄° * c⁄° * 
ôems
)

167 
i
, 
j
, 
x
, 
y
, 
box_x
, 
box_y
;

168 
key
 = 0, 
buâ⁄
 = 0, 
s¸ﬁl
 = 0, 
choi˚
 = 0, 
fú°_ôem
 = 0, 
max_choi˚
;

169 
WINDOW
 *
dülog
, *
míu
;

170 
FILE
 *
f
;

172 
max_choi˚
 = 
	`MIN
 (
míu_height
, 
ôem_no
);

175 
x
 = (
COLS
 - 
width
) / 2;

176 
y
 = (
LINES
 - 
height
) / 2;

178 
	`døw_shadow
 (
°ds¸
, 
y
, 
x
, 
height
, 
width
);

180 
dülog
 = 
	`√wwö
 (
height
, 
width
, 
y
, 
x
);

181 
	`key∑d
 (
dülog
, 
TRUE
);

183 
	`døw_box
 (
dülog
, 0, 0, 
height
, 
width
, 
dülog_©å
, 
b‹dî_©å
);

184 
	`w©å£t
 (
dülog
, 
b‹dî_©å
);

185 
	`mvwaddch
 (
dülog
, 
height
 - 3, 0, 
ACS_LTEE
);

186 
i
 = 0; i < 
width
 - 2; i++)

187 
	`waddch
 (
dülog
, 
ACS_HLINE
);

188 
	`w©å£t
 (
dülog
, 
dülog_©å
);

189 
	`wbkgd£t
 (
dülog
, 
dülog_©å
 & 
A_COLOR
);

190 
	`waddch
 (
dülog
, 
ACS_RTEE
);

192 i‡(
tôÀ
 !
NULL
 && 
	`°æí
—ôÀË>
width
-2 ) {

194 * 
tôÀ2
 = 
	`mÆloc
(
width
-2+1);

195 
	`mem˝y
–
tôÀ2
, 
tôÀ
, 
width
-2 );

196 
tôÀ2
[
width
-2] = '\0';

197 
tôÀ
 = 
tôÀ2
;

200 i‡(
tôÀ
 !
NULL
) {

201 
	`w©å£t
 (
dülog
, 
tôÀ_©å
);

202 
	`mvwaddch
 (
dülog
, 0, (
width
 - 
	`°æí
(
tôÀ
))/2 - 1, ' ');

203 
	`wadd°r
 (
dülog
, (*)
tôÀ
);

204 
	`waddch
 (
dülog
, ' ');

207 
	`w©å£t
 (
dülog
, 
dülog_©å
);

208 
	`¥öt_autowøp
 (
dülog
, 
¥om±
, 
width
 - 2, 1, 3);

210 
míu_width
 = 
width
 - 6;

211 
box_y
 = 
height
 - 
míu_height
 - 5;

212 
box_x
 = (
width
 - 
míu_width
) / 2 - 1;

215 
míu
 = 
	`subwö
 (
dülog
, 
míu_height
, 
míu_width
,

216 
y
 + 
box_y
 + 1, 
x
 + 
box_x
 + 1);

217 
	`key∑d
 (
míu
, 
TRUE
);

220 
	`døw_box
 (
dülog
, 
box_y
, 
box_x
, 
míu_height
 + 2, 
míu_width
 + 2,

221 
míubox_b‹dî_©å
, 
míubox_©å
);

227 
ôem_x
 = 0;

228 
i
 = 0; i < 
ôem_no
; i++) {

229 
ôem_x
 = 
	`MAX
 (ôem_x, 
	`MIN
(
míu_width
, 
	`°æí
 (
ôems
[
i
 * 2 + 1]) + 2));

230 i‡(
	`°rcmp
(
cuºít
, 
ôems
[
i
*2]Ë=0Ë
choi˚
 = i;

233 
ôem_x
 = (
míu_width
 - item_x) / 2;

236 i‡–(
f
=
	`f›í
("lxdülog.s¸…mp","r")Ë!
NULL
 ) {

237 i‡–(
	`fsˇnf
(
f
,"%d\n",&
s¸ﬁl
Ë=1Ë&& (s¸ﬁ»<
choi˚
) &&

238 (
s¸ﬁl
+
max_choi˚
 > 
choi˚
) && (scroll >= 0) &&

239 (
s¸ﬁl
+
max_choi˚
 <
ôem_no
) ) {

240 
fú°_ôem
 = 
s¸ﬁl
;

241 
choi˚
 = choi˚ - 
s¸ﬁl
;

242 
	`f˛o£
(
f
);

244 
s¸ﬁl
=0;

245 
	`ªmove
("lxdialog.scrltmp");

246 
	`f˛o£
(
f
);

247 
f
=
NULL
;

250 i‡–(
choi˚
 >
max_choi˚
Ë|| (
f
==
NULL
 && choice >= max_choice/2) ) {

251 i‡(
choi˚
 >
ôem_no
-
max_choi˚
/2)

252 
s¸ﬁl
 = 
fú°_ôem
 = 
ôem_no
-
max_choi˚
;

254 
s¸ﬁl
 = 
fú°_ôem
 = 
choi˚
 - 
max_choi˚
/2;

255 
choi˚
 = choi˚ - 
s¸ﬁl
;

259 
i
=0; i < 
max_choi˚
; i++) {

260 
	`¥öt_ôem
 (
míu
, 
ôems
[(
fú°_ôem
 + 
i
Ë* 2 + 1], i, i =
choi˚
,

261 (
ôems
[(
fú°_ôem
 + 
i
)*2][0] != ':'));

264 
	`wnouåe‰esh
 (
míu
);

266 
	`¥öt_¨rows
(
dülog
, 
ôem_no
, 
s¸ﬁl
,

267 
box_y
, 
box_x
+
ôem_x
+1, 
míu_height
);

269 
	`¥öt_buâ⁄s
 (
dülog
, 
height
, 
width
, 0);

271 
key
 !
ESC
) {

272 
key
 = 
	`wgëch
(
dülog
);

274 i‡(
key
 < 256 && 
	`ißÕha
(key)Ëkey = 
	`tﬁowî
(key);

276 i‡(
	`°rchr
("ynm", 
key
))

277 
i
 = 
max_choi˚
;

279 
i
 = 
choi˚
+1; i < 
max_choi˚
; i++) {

280 
j
 = 
	`fú°_Æpha
(
ôems
[(
s¸ﬁl
+
i
)*2+1], "YyNnMm");

281 i‡(
key
 =
	`tﬁowî
(
ôems
[(
s¸ﬁl
+
i
)*2+1][
j
]))

284 i‡(
i
 =
max_choi˚
)

285 
i
 = 0; i < 
max_choi˚
; i++) {

286 
j
 = 
	`fú°_Æpha
(
ôems
[(
s¸ﬁl
+
i
)*2+1], "YyNnMm");

287 i‡(
key
 =
	`tﬁowî
(
ôems
[(
s¸ﬁl
+
i
)*2+1][
j
]))

292 i‡(
i
 < 
max_choi˚
 ||

293 
key
 =
KEY_UP
 || key =
KEY_DOWN
 ||

294 
key
 == '-' || key == '+' ||

295 
key
 =
KEY_PPAGE
 || key =
KEY_NPAGE
) {

297 
	`¥öt_ôem
 (
míu
, 
ôems
[(
s¸ﬁl
+
choi˚
)*2+1], choi˚, 
FALSE
,

298 (
ôems
[(
s¸ﬁl
+
choi˚
)*2][0] != ':'));

300 i‡(
key
 =
KEY_UP
 || key == '-') {

301 i‡(
choi˚
 < 2 && 
s¸ﬁl
) {

303 
	`s¸ﬁlok
 (
míu
, 
TRUE
);

304 
	`ws¸l
 (
míu
, -1);

305 
	`s¸ﬁlok
 (
míu
, 
FALSE
);

307 
s¸ﬁl
--;

309 
	`¥öt_ôem
 (
míu
, 
ôems
[
s¸ﬁl
 * 2 + 1], 0, 
FALSE
,

310 (
ôems
[
s¸ﬁl
*2][0] != ':'));

312 
choi˚
 = 
	`MAX
(choice - 1, 0);

314 } i‡(
key
 =
KEY_DOWN
 || key == '+') {

316 
	`¥öt_ôem
 (
míu
, 
ôems
[(
s¸ﬁl
+
choi˚
)*2+1], choi˚, 
FALSE
,

317 (
ôems
[(
s¸ﬁl
+
choi˚
)*2][0] != ':'));

319 i‡((
choi˚
 > 
max_choi˚
-3) &&

320 (
s¸ﬁl
 + 
max_choi˚
 < 
ôem_no
)

323 
	`s¸ﬁlok
 (
míu
, 
TRUE
);

324 
	`s¸ﬁl
 (
míu
);

325 
	`s¸ﬁlok
 (
míu
, 
FALSE
);

327 
s¸ﬁl
++;

329 
	`¥öt_ôem
 (
míu
, 
ôems
[(
s¸ﬁl
+
max_choi˚
-1)*2+1],

330 
max_choi˚
-1, 
FALSE
,

331 (
ôems
[(
s¸ﬁl
+
max_choi˚
-1)*2][0] != ':'));

333 
choi˚
 = 
	`MIN
(choi˚+1, 
max_choi˚
-1);

335 } i‡(
key
 =
KEY_PPAGE
) {

336 
	`s¸ﬁlok
 (
míu
, 
TRUE
);

337 
i
=0; (ò< 
max_choi˚
); i++) {

338 i‡(
s¸ﬁl
 > 0) {

339 
	`ws¸l
 (
míu
, -1);

340 
s¸ﬁl
--;

341 
	`¥öt_ôem
 (
míu
, 
ôems
[
s¸ﬁl
 * 2 + 1], 0, 
FALSE
,

342 (
ôems
[
s¸ﬁl
*2][0] != ':'));

344 i‡(
choi˚
 > 0)

345 
choi˚
--;

348 
	`s¸ﬁlok
 (
míu
, 
FALSE
);

350 } i‡(
key
 =
KEY_NPAGE
) {

351 
i
=0; (ò< 
max_choi˚
); i++) {

352 i‡(
s¸ﬁl
+
max_choi˚
 < 
ôem_no
) {

353 
	`s¸ﬁlok
 (
míu
, 
TRUE
);

354 
	`s¸ﬁl
(
míu
);

355 
	`s¸ﬁlok
 (
míu
, 
FALSE
);

356 
s¸ﬁl
++;

357 
	`¥öt_ôem
 (
míu
, 
ôems
[(
s¸ﬁl
+
max_choi˚
-1)*2+1],

358 
max_choi˚
-1, 
FALSE
,

359 (
ôems
[(
s¸ﬁl
+
max_choi˚
-1)*2][0] != ':'));

361 i‡(
choi˚
+1 < 
max_choi˚
)

362 
choi˚
++;

367 
choi˚
 = 
i
;

369 
	`¥öt_ôem
 (
míu
, 
ôems
[(
s¸ﬁl
+
choi˚
)*2+1], choi˚, 
TRUE
,

370 (
ôems
[(
s¸ﬁl
+
choi˚
)*2][0] != ':'));

372 
	`¥öt_¨rows
(
dülog
, 
ôem_no
, 
s¸ﬁl
,

373 
box_y
, 
box_x
+
ôem_x
+1, 
míu_height
);

375 
	`wnouåe‰esh
 (
míu
);

376 
	`wª‰esh
 (
dülog
);

381 
key
) {

382 
KEY_LEFT
:

383 
TAB
:

384 
KEY_RIGHT
:

385 
buâ⁄
 = ((
key
 =
KEY_LEFT
 ? --button : ++button) < 0)

386 ? 2 : (
buâ⁄
 > 2 ? 0 : button);

388 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 
buâ⁄
);

389 
	`wª‰esh
 (
dülog
);

397 i‡–(
f
=
	`f›í
("lxdülog.s¸…mp","w")Ë!
NULL
 ) {

398 
	`Ârötf
(
f
,"%d\n",
s¸ﬁl
);

399 
	`f˛o£
(
f
);

401 
	`dñwö
 (
dülog
);

402 
	`Ârötf
(
°dîr
, "%s\n", 
ôems
[(
s¸ﬁl
 + 
choi˚
) * 2]);

403 
key
) {

413 
buâ⁄
 = 2;

415 
	`dñwö
 (
dülog
);

416 i‡(
buâ⁄
 == 2)

417 
	`Ârötf
(
°dîr
, "%s \"%s\"\n",

418 
ôems
[(
s¸ﬁl
 + 
choi˚
) * 2],

419 
ôems
[(
s¸ﬁl
 + 
choi˚
) * 2 + 1] +

420 
	`fú°_Æpha
(
ôems
[(
s¸ﬁl
 + 
choi˚
) * 2 + 1],""));

422 
	`Ârötf
(
°dîr
, "%s\n", 
ôems
[(
s¸ﬁl
 + 
choi˚
) * 2]);

424 
	`ªmove
("lxdialog.scrltmp");

425  
buâ⁄
;

428 
key
 = 
ESC
;

429 
ESC
:

434 
	`dñwö
 (
dülog
);

435 
	`ªmove
("lxdialog.scrltmp");

437 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/scripts/lxdialog/msgbox.c

22 
	~"dülog.h
"

29 
	$dülog_msgbox
 (c⁄° *
tôÀ
, c⁄° *
¥om±
, 
height
, 
width
,

30 
∑u£
)

32 
i
, 
x
, 
y
, 
key
 = 0;

33 
WINDOW
 *
dülog
;

36 
x
 = (
COLS
 - 
width
) / 2;

37 
y
 = (
LINES
 - 
height
) / 2;

39 
	`døw_shadow
 (
°ds¸
, 
y
, 
x
, 
height
, 
width
);

41 
dülog
 = 
	`√wwö
 (
height
, 
width
, 
y
, 
x
);

42 
	`key∑d
 (
dülog
, 
TRUE
);

44 
	`døw_box
 (
dülog
, 0, 0, 
height
, 
width
, 
dülog_©å
, 
b‹dî_©å
);

46 i‡(
tôÀ
 !
NULL
 && 
	`°æí
—ôÀË>
width
-2 ) {

48 * 
tôÀ2
 = 
	`mÆloc
(
width
-2+1);

49 
	`mem˝y
–
tôÀ2
, 
tôÀ
, 
width
-2 );

50 
tôÀ2
[
width
-2] = '\0';

51 
tôÀ
 = 
tôÀ2
;

54 i‡(
tôÀ
 !
NULL
) {

55 
	`w©å£t
 (
dülog
, 
tôÀ_©å
);

56 
	`mvwaddch
 (
dülog
, 0, (
width
 - 
	`°æí
(
tôÀ
))/2 - 1, ' ');

57 
	`wadd°r
 (
dülog
, (*)
tôÀ
);

58 
	`waddch
 (
dülog
, ' ');

60 
	`w©å£t
 (
dülog
, 
dülog_©å
);

61 
	`¥öt_autowøp
 (
dülog
, 
¥om±
, 
width
 - 2, 1, 2);

63 i‡(
∑u£
) {

64 
	`w©å£t
 (
dülog
, 
b‹dî_©å
);

65 
	`mvwaddch
 (
dülog
, 
height
 - 3, 0, 
ACS_LTEE
);

66 
i
 = 0; i < 
width
 - 2; i++)

67 
	`waddch
 (
dülog
, 
ACS_HLINE
);

68 
	`w©å£t
 (
dülog
, 
dülog_©å
);

69 
	`waddch
 (
dülog
, 
ACS_RTEE
);

71 
	`¥öt_buâ⁄
 (
dülog
, " Ok ",

72 
height
 - 2, 
width
 / 2 - 4, 
TRUE
);

74 
	`wª‰esh
 (
dülog
);

75 
key
 !
ESC
 && key != '\n' && key != ' ' &&

76 
key
 != 'O' && key != 'o' && key != 'X' && key != 'x')

77 
key
 = 
	`wgëch
 (
dülog
);

79 
key
 = '\n';

80 
	`wª‰esh
 (
dülog
);

83 
	`dñwö
 (
dülog
);

84  
key
 =
ESC
 ? -1 : 0;

85 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/scripts/lxdialog/textbox.c

22 
	~"dülog.h
"

24 
back_löes
 (
n
);

25 
¥öt_∑ge
 (
WINDOW
 * 
wö
, 
height
, 
width
);

26 
¥öt_löe
 (
WINDOW
 * 
wö
, 
row
, 
width
);

27 *
gë_löe
 ();

28 
¥öt_posôi⁄
 (
WINDOW
 * 
wö
, 
height
, 
width
);

30 
	ghs¸ﬁl
 = 0, 
	gfd
, 
	gfûe_size
, 
	gbyãs_ªad
;

31 
	gbegö_ªached
 = 1, 
	gíd_ªached
 = 0, 
	g∑ge_Àngth
;

32 *
	gbuf
, *
	g∑ge
;

38 
	$dülog_ãxtbox
 (c⁄° *
tôÀ
, c⁄° *
fûe
, 
height
, 
width
)

40 
i
, 
x
, 
y
, 
cur_x
, 
cur_y
, 
Âos
, 
key
 = 0;

41 
∑s£d_íd
;

42 
£¨ch_ãrm
[
MAX_LEN
 + 1];

43 
WINDOW
 *
dülog
, *
ãxt
;

45 
£¨ch_ãrm
[0] = '\0';

48 i‡((
fd
 = 
	`›í
 (
fûe
, 
O_RDONLY
)) == -1) {

49 
	`ídwö
 ();

50 
	`Ârötf
 (
°dîr
,

52 
	`exô
 (-1);

56 i‡((
fûe_size
 = 
	`l£ek
 (
fd
, 0, 
SEEK_END
)) == -1) {

57 
	`ídwö
 ();

58 
	`Ârötf
 (
°dîr
, "\nError getting file size in dialog_textbox().\n");

59 
	`exô
 (-1);

62 i‡(
	`l£ek
 (
fd
, 0, 
SEEK_SET
) == -1) {

63 
	`ídwö
 ();

64 
	`Ârötf
 (
°dîr
, "\nError moving fileÖointer in dialog_textbox().\n");

65 
	`exô
 (-1);

68 i‡((
buf
 = 
	`mÆloc
 (
BUF_SIZE
 + 1)Ë=
NULL
) {

69 
	`ídwö
 ();

70 
	`Ârötf
 (
°dîr
, "\nCan'tállocate memory in dialog_textbox().\n");

71 
	`exô
 (-1);

73 i‡((
byãs_ªad
 = 
	`ªad
 (
fd
, 
buf
, 
BUF_SIZE
)) == -1) {

74 
	`ídwö
 ();

75 
	`Ârötf
 (
°dîr
, "\nErrorÑeading file in dialog_textbox().\n");

76 
	`exô
 (-1);

78 
buf
[
byãs_ªad
] = '\0';

79 
∑ge
 = 
buf
;

82 
x
 = (
COLS
 - 
width
) / 2;

83 
y
 = (
LINES
 - 
height
) / 2;

86 
	`døw_shadow
 (
°ds¸
, 
y
, 
x
, 
height
, 
width
);

88 
dülog
 = 
	`√wwö
 (
height
, 
width
, 
y
, 
x
);

89 
	`key∑d
 (
dülog
, 
TRUE
);

92 
ãxt
 = 
	`subwö
 (
dülog
, 
height
 - 4, 
width
 - 2, 
y
 + 1, 
x
 + 1);

93 
	`w©å£t
 (
ãxt
, 
dülog_©å
);

94 
	`wbkgd£t
 (
ãxt
, 
dülog_©å
 & 
A_COLOR
);

96 
	`key∑d
 (
ãxt
, 
TRUE
);

99 
	`døw_box
 (
dülog
, 0, 0, 
height
, 
width
, 
dülog_©å
, 
b‹dî_©å
);

101 
	`w©å£t
 (
dülog
, 
b‹dî_©å
);

102 
	`mvwaddch
 (
dülog
, 
height
-3, 0, 
ACS_LTEE
);

103 
i
 = 0; i < 
width
 - 2; i++)

104 
	`waddch
 (
dülog
, 
ACS_HLINE
);

105 
	`w©å£t
 (
dülog
, 
dülog_©å
);

106 
	`wbkgd£t
 (
dülog
, 
dülog_©å
 & 
A_COLOR
);

107 
	`waddch
 (
dülog
, 
ACS_RTEE
);

109 i‡(
tôÀ
 !
NULL
 && 
	`°æí
—ôÀË>
width
-2 ) {

111 * 
tôÀ2
 = 
	`mÆloc
(
width
-2+1);

112 
	`mem˝y
–
tôÀ2
, 
tôÀ
, 
width
-2 );

113 
tôÀ2
[
width
-2] = '\0';

114 
tôÀ
 = 
tôÀ2
;

117 i‡(
tôÀ
 !
NULL
) {

118 
	`w©å£t
 (
dülog
, 
tôÀ_©å
);

119 
	`mvwaddch
 (
dülog
, 0, (
width
 - 
	`°æí
(
tôÀ
))/2 - 1, ' ');

120 
	`wadd°r
 (
dülog
, (*)
tôÀ
);

121 
	`waddch
 (
dülog
, ' ');

123 
	`¥öt_buâ⁄
 (
dülog
, " Exô ", 
height
 - 2, 
width
 / 2 - 4, 
TRUE
);

124 
	`wnouåe‰esh
 (
dülog
);

125 
	`gëyx
 (
dülog
, 
cur_y
, 
cur_x
);

128 
	`©å_˛ór
 (
ãxt
, 
height
 - 4, 
width
 - 2, 
dülog_©å
);

129 
	`¥öt_∑ge
 (
ãxt
, 
height
 - 4, 
width
 - 2);

130 
	`¥öt_posôi⁄
 (
dülog
, 
height
, 
width
);

131 
	`wmove
 (
dülog
, 
cur_y
, 
cur_x
);

132 
	`wª‰esh
 (
dülog
);

134 (
key
 !
ESC
) && (key != '\n')) {

135 
key
 = 
	`wgëch
 (
dülog
);

136 
key
) {

141 
	`dñwö
 (
dülog
);

142 
	`‰ì
 (
buf
);

143 
	`˛o£
 (
fd
);

146 
KEY_HOME
:

147 i‡(!
begö_ªached
) {

148 
begö_ªached
 = 1;

150 i‡((
Âos
 = 
	`l£ek
 (
fd
, 0, 
SEEK_CUR
)) == -1) {

151 
	`ídwö
 ();

152 
	`Ârötf
 (
°dîr
,

154 
	`exô
 (-1);

156 i‡(
Âos
 > 
byãs_ªad
) {

157 i‡(
	`l£ek
 (
fd
, 0, 
SEEK_SET
) == -1) {

158 
	`ídwö
 ();

159 
	`Ârötf
 (
°dîr
, "\nError moving fileÖointer in "

161 
	`exô
 (-1);

163 i‡((
byãs_ªad
 = 
	`ªad
 (
fd
, 
buf
, 
BUF_SIZE
)) == -1) {

164 
	`ídwö
 ();

165 
	`Ârötf
 (
°dîr
,

167 
	`exô
 (-1);

169 
buf
[
byãs_ªad
] = '\0';

171 
∑ge
 = 
buf
;

172 
	`¥öt_∑ge
 (
ãxt
, 
height
 - 4, 
width
 - 2);

173 
	`¥öt_posôi⁄
 (
dülog
, 
height
, 
width
);

174 
	`wmove
 (
dülog
, 
cur_y
, 
cur_x
);

175 
	`wª‰esh
 (
dülog
);

179 
KEY_END
:

181 
íd_ªached
 = 1;

183 i‡((
Âos
 = 
	`l£ek
 (
fd
, 0, 
SEEK_CUR
)) == -1) {

184 
	`ídwö
 ();

185 
	`Ârötf
 (
°dîr
,

187 
	`exô
 (-1);

189 i‡(
Âos
 < 
fûe_size
) {

190 i‡(
	`l£ek
 (
fd
, -
BUF_SIZE
, 
SEEK_END
) == -1) {

191 
	`ídwö
 ();

192 
	`Ârötf
 (
°dîr
,

194 
	`exô
 (-1);

196 i‡((
byãs_ªad
 = 
	`ªad
 (
fd
, 
buf
, 
BUF_SIZE
)) == -1) {

197 
	`ídwö
 ();

198 
	`Ârötf
 (
°dîr
,

200 
	`exô
 (-1);

202 
buf
[
byãs_ªad
] = '\0';

204 
∑ge
 = 
buf
 + 
byãs_ªad
;

205 
	`back_löes
 (
height
 - 4);

206 
	`¥öt_∑ge
 (
ãxt
, 
height
 - 4, 
width
 - 2);

207 
	`¥öt_posôi⁄
 (
dülog
, 
height
, 
width
);

208 
	`wmove
 (
dülog
, 
cur_y
, 
cur_x
);

209 
	`wª‰esh
 (
dülog
);

213 
KEY_UP
:

214 i‡(!
begö_ªached
) {

215 
	`back_löes
 (
∑ge_Àngth
 + 1);

222 
	`s¸ﬁlok
 (
ãxt
, 
TRUE
);

223 
	`ws¸l
 (
ãxt
, -1);

224 
	`s¸ﬁlok
 (
ãxt
, 
FALSE
);

225 
∑ge_Àngth
 = 0;

226 
∑s£d_íd
 = 0;

227 
i
 = 0; i < 
height
 - 4; i++) {

228 i‡(!
i
) {

230 
	`¥öt_löe
 (
ãxt
, 0, 
width
 - 2);

231 
	`wnouåe‰esh
 (
ãxt
);

234 
	`gë_löe
 ();

235 i‡(!
∑s£d_íd
)

236 
∑ge_Àngth
++;

237 i‡(
íd_ªached
 && !
∑s£d_íd
)

238 
∑s£d_íd
 = 1;

241 
	`¥öt_posôi⁄
 (
dülog
, 
height
, 
width
);

242 
	`wmove
 (
dülog
, 
cur_y
, 
cur_x
);

243 
	`wª‰esh
 (
dülog
);

248 
KEY_PPAGE
:

249 i‡(
begö_ªached
)

251 
	`back_löes
 (
∑ge_Àngth
 + 
height
 - 4);

252 
	`¥öt_∑ge
 (
ãxt
, 
height
 - 4, 
width
 - 2);

253 
	`¥öt_posôi⁄
 (
dülog
, 
height
, 
width
);

254 
	`wmove
 (
dülog
, 
cur_y
, 
cur_x
);

255 
	`wª‰esh
 (
dülog
);

259 
KEY_DOWN
:

260 i‡(!
íd_ªached
) {

261 
begö_ªached
 = 0;

262 
	`s¸ﬁlok
 (
ãxt
, 
TRUE
);

263 
	`s¸ﬁl
 (
ãxt
);

264 
	`s¸ﬁlok
 (
ãxt
, 
FALSE
);

265 
	`¥öt_löe
 (
ãxt
, 
height
 - 5, 
width
 - 2);

266 
	`wnouåe‰esh
 (
ãxt
);

267 
	`¥öt_posôi⁄
 (
dülog
, 
height
, 
width
);

268 
	`wmove
 (
dülog
, 
cur_y
, 
cur_x
);

269 
	`wª‰esh
 (
dülog
);

272 
KEY_NPAGE
:

274 i‡(
íd_ªached
)

277 
begö_ªached
 = 0;

278 
	`¥öt_∑ge
 (
ãxt
, 
height
 - 4, 
width
 - 2);

279 
	`¥öt_posôi⁄
 (
dülog
, 
height
, 
width
);

280 
	`wmove
 (
dülog
, 
cur_y
, 
cur_x
);

281 
	`wª‰esh
 (
dülog
);

286 
KEY_LEFT
:

287 i‡(
hs¸ﬁl
 <= 0)

290 i‡(
key
 == '0')

291 
hs¸ﬁl
 = 0;

293 
hs¸ﬁl
--;

295 
	`back_löes
 (
∑ge_Àngth
);

296 
	`¥öt_∑ge
 (
ãxt
, 
height
 - 4, 
width
 - 2);

297 
	`wmove
 (
dülog
, 
cur_y
, 
cur_x
);

298 
	`wª‰esh
 (
dülog
);

302 
KEY_RIGHT
:

303 i‡(
hs¸ﬁl
 >
MAX_LEN
)

305 
hs¸ﬁl
++;

307 
	`back_löes
 (
∑ge_Àngth
);

308 
	`¥öt_∑ge
 (
ãxt
, 
height
 - 4, 
width
 - 2);

309 
	`wmove
 (
dülog
, 
cur_y
, 
cur_x
);

310 
	`wª‰esh
 (
dülog
);

312 
ESC
:

317 
	`dñwö
 (
dülog
);

318 
	`‰ì
 (
buf
);

319 
	`˛o£
 (
fd
);

321 
	}
}

328 
	$back_löes
 (
n
)

330 
i
, 
Âos
;

332 
begö_ªached
 = 0;

337 i‡(!
íd_ªached
) {

339 i‡(
∑ge
 =
buf
) {

340 i‡((
Âos
 = 
	`l£ek
 (
fd
, 0, 
SEEK_CUR
)) == -1) {

341 
	`ídwö
 ();

342 
	`Ârötf
 (
°dîr
, "\nError moving fileÖointer in "

344 
	`exô
 (-1);

346 i‡(
Âos
 > 
byãs_ªad
) {

353 i‡(
Âos
 < 
BUF_SIZE
 / 2 + 
byãs_ªad
) {

355 i‡(
	`l£ek
 (
fd
, 0, 
SEEK_SET
) == -1) {

356 
	`ídwö
 ();

357 
	`Ârötf
 (
°dîr
, "\nError moving fileÖointer in "

359 
	`exô
 (-1);

361 
∑ge
 = 
buf
 + 
Âos
 - 
byãs_ªad
;

363 i‡(
	`l£ek
 (
fd
, -(
BUF_SIZE
 / 2 + 
byãs_ªad
), 
SEEK_CUR
)

365 
	`ídwö
 ();

366 
	`Ârötf
 (
°dîr
, "\nError moving fileÖointer "

368 
	`exô
 (-1);

370 
∑ge
 = 
buf
 + 
BUF_SIZE
 / 2;

372 i‡((
byãs_ªad
 = 
	`ªad
 (
fd
, 
buf
, 
BUF_SIZE
)) == -1) {

373 
	`ídwö
 ();

374 
	`Ârötf
 (
°dîr
, "\nErrorÑeading file in back_lines().\n");

375 
	`exô
 (-1);

377 
buf
[
byãs_ªad
] = '\0';

379 
begö_ªached
 = 1;

383 i‡(*(--
∑ge
) != '\n') {

385 
	`ídwö
 ();

386 
	`Ârötf
 (
°dîr
, "\nInternalÉrror in back_lines().\n");

387 
	`exô
 (-1);

391 
i
 = 0; i < 
n
; i++)

393 i‡(
∑ge
 =
buf
) {

394 i‡((
Âos
 = 
	`l£ek
 (
fd
, 0, 
SEEK_CUR
)) == -1) {

395 
	`ídwö
 ();

396 
	`Ârötf
 (
°dîr
,

398 
	`exô
 (-1);

400 i‡(
Âos
 > 
byãs_ªad
) {

402 i‡(
Âos
 < 
BUF_SIZE
 / 2 + 
byãs_ªad
) {

404 i‡(
	`l£ek
 (
fd
, 0, 
SEEK_SET
) == -1) {

405 
	`ídwö
 ();

406 
	`Ârötf
 (
°dîr
, "\nError moving fileÖointer "

408 
	`exô
 (-1);

410 
∑ge
 = 
buf
 + 
Âos
 - 
byãs_ªad
;

412 i‡(
	`l£ek
 (
fd
, -(
BUF_SIZE
 / 2 + 
byãs_ªad
),

413 
SEEK_CUR
) == -1) {

414 
	`ídwö
 ();

415 
	`Ârötf
 (
°dîr
, "\nError moving fileÖointer"

417 
	`exô
 (-1);

419 
∑ge
 = 
buf
 + 
BUF_SIZE
 / 2;

421 i‡((
byãs_ªad
 = 
	`ªad
 (
fd
, 
buf
, 
BUF_SIZE
)) == -1) {

422 
	`ídwö
 ();

423 
	`Ârötf
 (
°dîr
, "\nErrorÑeading file in "

425 
	`exô
 (-1);

427 
buf
[
byãs_ªad
] = '\0';

429 
begö_ªached
 = 1;

433 } *(--
∑ge
) != '\n');

434 
∑ge
++;

435 
	}
}

441 
	$¥öt_∑ge
 (
WINDOW
 * 
wö
, 
height
, 
width
)

443 
i
, 
∑s£d_íd
 = 0;

445 
∑ge_Àngth
 = 0;

446 
i
 = 0; i < 
height
; i++) {

447 
	`¥öt_löe
 (
wö
, 
i
, 
width
);

448 i‡(!
∑s£d_íd
)

449 
∑ge_Àngth
++;

450 i‡(
íd_ªached
 && !
∑s£d_íd
)

451 
∑s£d_íd
 = 1;

453 
	`wnouåe‰esh
 (
wö
);

454 
	}
}

460 
	$¥öt_löe
 (
WINDOW
 * 
wö
, 
row
, 
width
)

462 
y
, 
x
;

463 *
löe
;

465 
löe
 = 
	`gë_löe
 ();

466 
löe
 +
	`MIN
 (
	`°æí
 (löe), 
hs¸ﬁl
);

467 
	`wmove
 (
wö
, 
row
, 0);

468 
	`waddch
 (
wö
, ' ');

469 
	`waddn°r
 (
wö
, 
löe
, 
	`MIN
 (
	`°æí
 (löe), 
width
 - 2));

471 
	`gëyx
 (
wö
, 
y
, 
x
);

473 #i‡
OLD_NCURSES


475 
i
;

476 
i
 = 0; i < 
width
 - 
x
; i++)

477 
	`waddch
 (
wö
, ' ');

480 
	`w˛π€ﬁ
(
wö
);

482 
	}
}

490 
	$gë_löe
 ()

492 
i
 = 0, 
Âos
;

493 
löe
[
MAX_LEN
 + 1];

495 
íd_ªached
 = 0;

496 *
∑ge
 != '\n') {

497 i‡(*
∑ge
 == '\0') {

499 i‡((
Âos
 = 
	`l£ek
 (
fd
, 0, 
SEEK_CUR
)) == -1) {

500 
	`ídwö
 ();

501 
	`Ârötf
 (
°dîr
, "\nError moving fileÖointer in "

503 
	`exô
 (-1);

505 i‡(
Âos
 < 
fûe_size
) {

508 i‡((
byãs_ªad
 = 
	`ªad
 (
fd
, 
buf
, 
BUF_SIZE
)) == -1) {

509 
	`ídwö
 ();

510 
	`Ârötf
 (
°dîr
, "\nErrorÑeading file in get_line().\n");

511 
	`exô
 (-1);

513 
buf
[
byãs_ªad
] = '\0';

514 
∑ge
 = 
buf
;

516 i‡(!
íd_ªached
)

517 
íd_ªached
 = 1;

520 } i‡(
i
 < 
MAX_LEN
)

521 
löe
[
i
++] = *(
∑ge
++);

524 i‡(
i
 =
MAX_LEN
)

525 
löe
[
i
++] = '\0';

526 
∑ge
++;

529 i‡(
i
 <
MAX_LEN
)

530 
löe
[
i
] = '\0';

531 i‡(!
íd_ªached
)

532 
∑ge
++;

534  
löe
;

535 
	}
}

541 
	$¥öt_posôi⁄
 (
WINDOW
 * 
wö
, 
height
, 
width
)

543 
Âos
, 
≥r˚¡
;

545 i‡((
Âos
 = 
	`l£ek
 (
fd
, 0, 
SEEK_CUR
)) == -1) {

546 
	`ídwö
 ();

547 
	`Ârötf
 (
°dîr
, "\nError moving fileÖointer inÖrint_position().\n");

548 
	`exô
 (-1);

550 
	`w©å£t
 (
wö
, 
posôi⁄_ödiˇt‹_©å
);

551 
	`wbkgd£t
 (
wö
, 
posôi⁄_ödiˇt‹_©å
 & 
A_COLOR
);

552 
≥r˚¡
 = !
fûe_size
 ?

553 100 : ((
Âos
 - 
byãs_ªad
 + 
∑ge
 - 
buf
Ë* 100Ë/ 
fûe_size
;

554 
	`wmove
 (
wö
, 
height
 - 3, 
width
 - 9);

555 
	`w¥ötw
 (
wö
, "(%3d%%)", 
≥r˚¡
);

556 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/scripts/lxdialog/util.c

22 
	~"dülog.h
"

26 
boﬁ
 
	gu£_cﬁ‹s
 = 1;

28 c⁄° *
	gbacktôÀ
 = 
NULL
;

30 c⁄° *
	gdülog_ªsu…
;

35 
chty≥
 
	g©åibuãs
[] =

37 
A_NORMAL
,

38 
A_NORMAL
,

39 
A_NORMAL
,

40 
A_BOLD
,

41 
A_NORMAL
,

42 
A_REVERSE
,

43 
A_DIM
,

44 
A_REVERSE
,

45 
A_BOLD
,

46 
A_REVERSE
,

47 
A_NORMAL
,

48 
A_NORMAL
,

49 
A_NORMAL
,

50 
A_NORMAL
,

51 
A_BOLD
,

52 
A_NORMAL
,

53 
A_BOLD
,

54 
A_NORMAL
,

55 
A_NORMAL
,

56 
A_NORMAL
,

57 
A_REVERSE
,

58 
A_BOLD
,

59 
A_REVERSE
,

60 
A_BOLD
,

61 
A_REVERSE
,

62 
A_BOLD
,

63 
A_REVERSE
,

64 
A_BOLD
,

65 
A_BOLD


69 
	~"cﬁ‹s.h
"

74 
	gcﬁ‹_èbÀ
[][3] =

76 {
SCREEN_FG
, 
SCREEN_BG
, 
SCREEN_HL
},

77 {
SHADOW_FG
, 
SHADOW_BG
, 
SHADOW_HL
},

78 {
DIALOG_FG
, 
DIALOG_BG
, 
DIALOG_HL
},

79 {
TITLE_FG
, 
TITLE_BG
, 
TITLE_HL
},

80 {
BORDER_FG
, 
BORDER_BG
, 
BORDER_HL
},

81 {
BUTTON_ACTIVE_FG
, 
BUTTON_ACTIVE_BG
, 
BUTTON_ACTIVE_HL
},

82 {
BUTTON_INACTIVE_FG
, 
BUTTON_INACTIVE_BG
, 
BUTTON_INACTIVE_HL
},

83 {
BUTTON_KEY_ACTIVE_FG
, 
BUTTON_KEY_ACTIVE_BG
, 
BUTTON_KEY_ACTIVE_HL
},

84 {
BUTTON_KEY_INACTIVE_FG
, 
BUTTON_KEY_INACTIVE_BG
, 
BUTTON_KEY_INACTIVE_HL
},

85 {
BUTTON_LABEL_ACTIVE_FG
, 
BUTTON_LABEL_ACTIVE_BG
, 
BUTTON_LABEL_ACTIVE_HL
},

86 {
BUTTON_LABEL_INACTIVE_FG
, 
BUTTON_LABEL_INACTIVE_BG
,

87 
BUTTON_LABEL_INACTIVE_HL
},

88 {
INPUTBOX_FG
, 
INPUTBOX_BG
, 
INPUTBOX_HL
},

89 {
INPUTBOX_BORDER_FG
, 
INPUTBOX_BORDER_BG
, 
INPUTBOX_BORDER_HL
},

90 {
SEARCHBOX_FG
, 
SEARCHBOX_BG
, 
SEARCHBOX_HL
},

91 {
SEARCHBOX_TITLE_FG
, 
SEARCHBOX_TITLE_BG
, 
SEARCHBOX_TITLE_HL
},

92 {
SEARCHBOX_BORDER_FG
, 
SEARCHBOX_BORDER_BG
, 
SEARCHBOX_BORDER_HL
},

93 {
POSITION_INDICATOR_FG
, 
POSITION_INDICATOR_BG
, 
POSITION_INDICATOR_HL
},

94 {
MENUBOX_FG
, 
MENUBOX_BG
, 
MENUBOX_HL
},

95 {
MENUBOX_BORDER_FG
, 
MENUBOX_BORDER_BG
, 
MENUBOX_BORDER_HL
},

96 {
ITEM_FG
, 
ITEM_BG
, 
ITEM_HL
},

97 {
ITEM_SELECTED_FG
, 
ITEM_SELECTED_BG
, 
ITEM_SELECTED_HL
},

98 {
TAG_FG
, 
TAG_BG
, 
TAG_HL
},

99 {
TAG_SELECTED_FG
, 
TAG_SELECTED_BG
, 
TAG_SELECTED_HL
},

100 {
TAG_KEY_FG
, 
TAG_KEY_BG
, 
TAG_KEY_HL
},

101 {
TAG_KEY_SELECTED_FG
, 
TAG_KEY_SELECTED_BG
, 
TAG_KEY_SELECTED_HL
},

102 {
CHECK_FG
, 
CHECK_BG
, 
CHECK_HL
},

103 {
CHECK_SELECTED_FG
, 
CHECK_SELECTED_BG
, 
CHECK_SELECTED_HL
},

104 {
UARROW_FG
, 
UARROW_BG
, 
UARROW_HL
},

105 {
DARROW_FG
, 
DARROW_BG
, 
DARROW_HL
},

112 
	$©å_˛ór
 (
WINDOW
 * 
wö
, 
height
, 
width
, 
chty≥
 
©å
)

114 
i
, 
j
;

116 
	`w©å£t
 (
wö
, 
©å
);

117 
i
 = 0; i < 
height
; i++) {

118 
	`wmove
 (
wö
, 
i
, 0);

119 
j
 = 0; j < 
width
; j++)

120 
	`waddch
 (
wö
, ' ');

122 
	`touchwö
 (
wö
);

123 
	}
}

125 
	$dülog_˛ór
 ()

127 
	`©å_˛ór
 (
°ds¸
, 
LINES
, 
COLS
, 
s¸ìn_©å
);

129 i‡(
backtôÀ
 !
NULL
) {

130 
i
;

132 
	`w©å£t
 (
°ds¸
, 
s¸ìn_©å
);

133 
	`mvwadd°r
 (
°ds¸
, 0, 1, (*)
backtôÀ
);

134 
	`wmove
 (
°ds¸
, 1, 1);

135 
i
 = 1; i < 
COLS
 - 1; i++)

136 
	`waddch
 (
°ds¸
, 
ACS_HLINE
);

138 
	`wnouåe‰esh
 (
°ds¸
);

139 
	}
}

145 
	$öô_dülog
 ()

147 
	`öôs¸
 ();

148 
	`key∑d
 (
°ds¸
, 
TRUE
);

149 
	`cbªak
 ();

150 
	`n€cho
 ();

153 i‡(
u£_cﬁ‹s
)

154 
	`cﬁ‹_£tup
 ();

157 
	`dülog_˛ór
 ();

158 
	}
}

164 
	$cﬁ‹_£tup
 ()

166 
i
;

168 i‡(
	`has_cﬁ‹s
 ()) {

169 
	`°¨t_cﬁ‹
 ();

172 
i
 = 0; i < 
ATTRIBUTE_COUNT
; i++)

173 
	`öô_∑ú
 (
i
 + 1, 
cﬁ‹_èbÀ
[i][0], color_table[i][1]);

176 
i
 = 0; i < 
ATTRIBUTE_COUNT
; i++)

177 
©åibuãs
[
i
] = 
	`C_ATTR
 (
cﬁ‹_èbÀ
[i][2], i + 1);

179 
	}
}

185 
	$íd_dülog
 ()

187 
	`ídwö
 ();

188 
	}
}

198 
	$¥öt_autowøp
 (
WINDOW
 * 
wö
, c⁄° *
¥om±
, 
width
, 
y
, 
x
)

200 
√wl
, 
cur_x
, 
cur_y
;

201 
i
, 
¥om±_Àn
, 
room
, 
wÀn
;

202 
ãmp°r
[
MAX_LEN
 + 1], *
w‹d
, *
•
, *
•2
;

204 
	`°r˝y
 (
ãmp°r
, 
¥om±
);

206 
¥om±_Àn
 = 
	`°æí
(
ãmp°r
);

211 
i
=0; i<
¥om±_Àn
; i++) {

212 if(
ãmp°r
[
i
] == '\n')Åempstr[i] = ' ';

215 i‡(
¥om±_Àn
 <
width
 - 
x
 * 2) {

216 
	`wmove
 (
wö
, 
y
, (
width
 - 
¥om±_Àn
) / 2);

217 
	`wadd°r
 (
wö
, 
ãmp°r
);

219 
cur_x
 = 
x
;

220 
cur_y
 = 
y
;

221 
√wl
 = 1;

222 
w‹d
 = 
ãmp°r
;

223 
w‹d
 && *word) {

224 
•
 = 
	`ödex
(
w‹d
, ' ');

225 i‡(
•
)

226 *
•
++ = 0;

231 
room
 = 
width
 - 
cur_x
;

232 
wÀn
 = 
	`°æí
(
w‹d
);

233 i‡(
wÀn
 > 
room
 ||

234 (
√wl
 && 
wÀn
 < 4 && 
•
 && wÀn+1+
	`°æí
(•Ë> 
room


235 && (!(
•2
 = 
	`ödex
(
•
, ' ')Ë|| 
wÀn
+1+(•2-•Ë> 
room
))) {

236 
cur_y
++;

237 
cur_x
 = 
x
;

239 
	`wmove
 (
wö
, 
cur_y
, 
cur_x
);

240 
	`wadd°r
 (
wö
, 
w‹d
);

241 
	`gëyx
 (
wö
, 
cur_y
, 
cur_x
);

242 
cur_x
++;

243 i‡(
•
 && *sp == ' ') {

244 
cur_x
++;

245 *++
•
 == ' ');

246 
√wl
 = 1;

248 
√wl
 = 0;

249 
w‹d
 = 
•
;

252 
	}
}

258 
	$¥öt_buâ⁄
 (
WINDOW
 * 
wö
, c⁄° *
œbñ
, 
y
, 
x
, 
£À˘ed
)

260 
i
, 
ãmp
;

262 
	`wmove
 (
wö
, 
y
, 
x
);

263 
	`w©å£t
 (
wö
, 
£À˘ed
 ? 
buâ⁄_a˘ive_©å
 : 
buâ⁄_öa˘ive_©å
);

264 
	`wadd°r
 (
wö
, "<");

265 
ãmp
 = 
	`°r•n
 (
œbñ
, " ");

266 
œbñ
 +
ãmp
;

267 
	`w©å£t
 (
wö
, 
£À˘ed
 ? 
buâ⁄_œbñ_a˘ive_©å


268 : 
buâ⁄_œbñ_öa˘ive_©å
);

269 
i
 = 0; i < 
ãmp
; i++)

270 
	`waddch
 (
wö
, ' ');

271 
	`w©å£t
 (
wö
, 
£À˘ed
 ? 
buâ⁄_key_a˘ive_©å


272 : 
buâ⁄_key_öa˘ive_©å
);

273 
	`waddch
 (
wö
, 
œbñ
[0]);

274 
	`w©å£t
 (
wö
, 
£À˘ed
 ? 
buâ⁄_œbñ_a˘ive_©å


275 : 
buâ⁄_œbñ_öa˘ive_©å
);

276 
	`wadd°r
 (
wö
, (*)
œbñ
 + 1);

277 
	`w©å£t
 (
wö
, 
£À˘ed
 ? 
buâ⁄_a˘ive_©å
 : 
buâ⁄_öa˘ive_©å
);

278 
	`wadd°r
 (
wö
, ">");

279 
	`wmove
 (
wö
, 
y
, 
x
 + 
ãmp
 + 1);

280 
	}
}

286 
	$døw_box
 (
WINDOW
 * 
wö
, 
y
, 
x
, 
height
, 
width
,

287 
chty≥
 
box
, chty≥ 
b‹dî
)

289 
i
, 
j
;

291 
	`w©å£t
 (
wö
, 0);

292 
i
 = 0; i < 
height
; i++) {

293 
	`wmove
 (
wö
, 
y
 + 
i
, 
x
);

294 
j
 = 0; j < 
width
; j++)

295 i‡(!
i
 && !
j
)

296 
	`waddch
 (
wö
, 
b‹dî
 | 
ACS_ULCORNER
);

297 i‡(
i
 =
height
 - 1 && !
j
)

298 
	`waddch
 (
wö
, 
b‹dî
 | 
ACS_LLCORNER
);

299 i‡(!
i
 && 
j
 =
width
 - 1)

300 
	`waddch
 (
wö
, 
box
 | 
ACS_URCORNER
);

301 i‡(
i
 =
height
 - 1 && 
j
 =
width
 - 1)

302 
	`waddch
 (
wö
, 
box
 | 
ACS_LRCORNER
);

303 i‡(!
i
)

304 
	`waddch
 (
wö
, 
b‹dî
 | 
ACS_HLINE
);

305 i‡(
i
 =
height
 - 1)

306 
	`waddch
 (
wö
, 
box
 | 
ACS_HLINE
);

307 i‡(!
j
)

308 
	`waddch
 (
wö
, 
b‹dî
 | 
ACS_VLINE
);

309 i‡(
j
 =
width
 - 1)

310 
	`waddch
 (
wö
, 
box
 | 
ACS_VLINE
);

312 
	`waddch
 (
wö
, 
box
 | ' ');

314 
	}
}

321 
	$døw_shadow
 (
WINDOW
 * 
wö
, 
y
, 
x
, 
height
, 
width
)

323 
i
;

325 i‡(
	`has_cﬁ‹s
 ()) {

326 
	`w©å£t
 (
wö
, 
shadow_©å
);

327 
	`wmove
 (
wö
, 
y
 + 
height
, 
x
 + 2);

328 
i
 = 0; i < 
width
; i++)

329 
	`waddch
 (
wö
, 
	`wöch
 (wöË& 
A_CHARTEXT
);

330 
i
 = 
y
 + 1; i < y + 
height
 + 1; i++) {

331 
	`wmove
 (
wö
, 
i
, 
x
 + 
width
);

332 
	`waddch
 (
wö
, 
	`wöch
 (wöË& 
A_CHARTEXT
);

333 
	`waddch
 (
wö
, 
	`wöch
 (wöË& 
A_CHARTEXT
);

335 
	`wnouåe‰esh
 (
wö
);

337 
	}
}

343 
	$fú°_Æpha
(c⁄° *
°rög
, c⁄° *
exem±
)

345 
i
, 
ö_∑ªn
=0, 
c
;

347 
i
 = 0; i < 
	`°æí
(
°rög
); i++) {

348 
c
 = 
	`tﬁowî
(
°rög
[
i
]);

350 i‡(
	`°rchr
("<[(", 
c
)Ë++
ö_∑ªn
;

351 i‡(
	`°rchr
(">])", 
c
)Ë--
ö_∑ªn
;

353 i‡((! 
ö_∑ªn
Ë&& 
	`ißÕha
(
c
) &&

354 
	`°rchr
(
exem±
, 
c
) == 0)

355  
i
;

359 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/scripts/lxdialog/yesno.c

22 
	~"dülog.h
"

28 
	$¥öt_buâ⁄s
(
WINDOW
 *
dülog
, 
height
, 
width
, 
£À˘ed
)

30 
x
 = 
width
 / 2 - 10;

31 
y
 = 
height
 - 2;

33 
	`¥öt_buâ⁄
 (
dülog
, " Ye†", 
y
, 
x
, 
£À˘ed
 == 0);

34 
	`¥öt_buâ⁄
 (
dülog
, " Nÿ ", 
y
, 
x
 + 13, 
£À˘ed
 == 1);

36 
	`wmove
(
dülog
, 
y
, 
x
+1 + 13*
£À˘ed
 );

37 
	`wª‰esh
 (
dülog
);

38 
	}
}

44 
	$dülog_ye¢o
 (c⁄° *
tôÀ
, c⁄° *
¥om±
, 
height
, 
width
)

46 
i
, 
x
, 
y
, 
key
 = 0, 
buâ⁄
 = 0;

47 
WINDOW
 *
dülog
;

50 
x
 = (
COLS
 - 
width
) / 2;

51 
y
 = (
LINES
 - 
height
) / 2;

53 
	`døw_shadow
 (
°ds¸
, 
y
, 
x
, 
height
, 
width
);

55 
dülog
 = 
	`√wwö
 (
height
, 
width
, 
y
, 
x
);

56 
	`key∑d
 (
dülog
, 
TRUE
);

58 
	`døw_box
 (
dülog
, 0, 0, 
height
, 
width
, 
dülog_©å
, 
b‹dî_©å
);

59 
	`w©å£t
 (
dülog
, 
b‹dî_©å
);

60 
	`mvwaddch
 (
dülog
, 
height
-3, 0, 
ACS_LTEE
);

61 
i
 = 0; i < 
width
 - 2; i++)

62 
	`waddch
 (
dülog
, 
ACS_HLINE
);

63 
	`w©å£t
 (
dülog
, 
dülog_©å
);

64 
	`waddch
 (
dülog
, 
ACS_RTEE
);

66 i‡(
tôÀ
 !
NULL
 && 
	`°æí
—ôÀË>
width
-2 ) {

68 * 
tôÀ2
 = 
	`mÆloc
(
width
-2+1);

69 
	`mem˝y
–
tôÀ2
, 
tôÀ
, 
width
-2 );

70 
tôÀ2
[
width
-2] = '\0';

71 
tôÀ
 = 
tôÀ2
;

74 i‡(
tôÀ
 !
NULL
) {

75 
	`w©å£t
 (
dülog
, 
tôÀ_©å
);

76 
	`mvwaddch
 (
dülog
, 0, (
width
 - 
	`°æí
(
tôÀ
))/2 - 1, ' ');

77 
	`wadd°r
 (
dülog
, (*)
tôÀ
);

78 
	`waddch
 (
dülog
, ' ');

81 
	`w©å£t
 (
dülog
, 
dülog_©å
);

82 
	`¥öt_autowøp
 (
dülog
, 
¥om±
, 
width
 - 2, 1, 3);

84 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 0);

86 
key
 !
ESC
) {

87 
key
 = 
	`wgëch
 (
dülog
);

88 
key
) {

91 
	`dñwö
 (
dülog
);

95 
	`dñwö
 (
dülog
);

98 
TAB
:

99 
KEY_LEFT
:

100 
KEY_RIGHT
:

101 
buâ⁄
 = ((
key
 =
KEY_LEFT
 ? --button : ++button) < 0)

102 ? 1 : (
buâ⁄
 > 1 ? 0 : button);

104 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 
buâ⁄
);

105 
	`wª‰esh
 (
dülog
);

109 
	`dñwö
 (
dülog
);

110  
buâ⁄
;

111 
ESC
:

116 
	`dñwö
 (
dülog
);

118 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/scripts/tkcond.c

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

32 
	~"tk∑r£.h
"

39 
	$m¨k_v¨übÀs
–
kc⁄fig
 * 
scfg
 )

41 
kc⁄fig
 * 
cfg
;

42 
i
;

44  
i
 = 1; i <
max_v¨num
; i++ )

45 
v¨èbÀ
[
i
].
deföed
 = 0;

46  
cfg
 = 
scfg
; cfg !
NULL
; cfg = cfg->
√xt
 )

48 i‡–
cfg
->
tokí
 =
tokí_boﬁ


49 || 
cfg
->
tokí
 =
tokí_choi˚_ôem


50 || 
cfg
->
tokí
 =
tokí_deföe_boﬁ


51 || 
cfg
->
tokí
 =
tokí_deföe_hex


52 || 
cfg
->
tokí
 =
tokí_deföe_öt


53 || 
cfg
->
tokí
 =
tokí_deföe_°rög


54 || 
cfg
->
tokí
 =
tokí_deföe_åi°©e


55 || 
cfg
->
tokí
 =
tokí_dï_boﬁ


56 || 
cfg
->
tokí
 =
tokí_dï_mboﬁ


57 || 
cfg
->
tokí
 =
tokí_dï_åi°©e


58 || 
cfg
->
tokí
 =
tokí_hex


59 || 
cfg
->
tokí
 =
tokí_öt


60 || 
cfg
->
tokí
 =
tokí_°rög


61 || 
cfg
->
tokí
 =
tokí_åi°©e


62 || 
cfg
->
tokí
 =
tokí_un£t
 )

64 i‡–
cfg
->
«meödex
 > 0 )

66 
v¨èbÀ
[
cfg
->
«meödex
].
deföed
 = 1;

70 
	}
}

74 
	$‰ì_c⁄d
–
c⁄dôi⁄
 *
c⁄d
 )

76 
c⁄dôi⁄
 *
tmp
, *
tmp1
;

77  
tmp
 = 
c⁄d
;Åmp;Åm∞
tmp1
 )

79 
tmp1
 = 
tmp
->
√xt
;

80 
	`‰ì
–(*)
tmp
 );

82 
	}
}

91 
c⁄dôi⁄
 * 
	$ªmove_b™g
–
c⁄dôi⁄
 * condition )

93 
c⁄dôi⁄
 * 
c⁄da
, * 
c⁄db
, * 
¥ev
 = 
NULL
;

95  
c⁄da
 = 
c⁄dôi⁄
; c⁄da; c⁄d®c⁄da->
√xt
 )

97 i‡–
c⁄da
->
›
 =
›_b™g
 && c⁄da->
√xt
 &&

98 –
c⁄db
 = 
c⁄da
->
√xt
->next ) )

100 i‡–
c⁄db
->
›
 =
›_eq
 || c⁄db->› =
›_√q
 )

102 
c⁄db
->
›
 = (c⁄db->› =
›_eq
Ë? 
›_√q
 : op_eq;

103 
c⁄da
->
›
 = 
›_nuked
;

104 i‡–
¥ev
 )

106 
¥ev
->
√xt
 = 
c⁄da
->next;

110 
c⁄dôi⁄
 = 
c⁄da
->
√xt
;

112 
c⁄da
->
√xt
 = 
NULL
;

113 
	`‰ì_c⁄d
–
c⁄da
 );

114 
c⁄da
 = 
c⁄db
;

117 
¥ev
 = 
c⁄da
;

119  
c⁄dôi⁄
;

120 
	}
}

128 
c⁄dôi⁄
 * 
	$joö_c⁄dôi⁄_°ack
–
c⁄dôi⁄
 * 
c⁄dôi⁄s
 [],

129 
dïth
 )

131 
c⁄dôi⁄
 * 
c⁄d_li°
;

132 
c⁄dôi⁄
 * 
c⁄d_œ°
;

133 
i
, 
is_fú°
 = 1;

135 
c⁄d_li°
 = 
c⁄d_œ°
 = 
NULL
;

137  
i
 = 0; i < 
dïth
; i++ )

139 i‡–
c⁄dôi⁄s
[
i
]->
›
 =
›_Ál£
 )

141 
c⁄dôi⁄
 * 
˙ew
;

144 
˙ew
 = 
	`mÆloc
( (*cnew) );

145 
	`mem£t
–
˙ew
, 0, (*cnew) );

146 
˙ew
->
›
 = 
›_Ál£
;

147 
c⁄d_li°
 = 
c⁄d_œ°
 = 
˙ew
;

148 
joö_d⁄e
;

151  
i
 = 0; i < 
dïth
; i++ )

153 
c⁄dôi⁄
 * 
c⁄d
;

154 
c⁄dôi⁄
 * 
˙ew
;

155 
add_∑ªn
;

158 i‡–
c⁄dôi⁄s
[
i
]->
›
 =
›_åue
 )

162 i‡–!
is_fú°
 )

164 
˙ew
 = 
	`mÆloc
( (*cnew) );

165 
	`mem£t
–
˙ew
, 0, (*cnew) );

166 
˙ew
->
›
 = 
›_™d
;

167 
c⁄d_œ°
->
√xt
 = 
˙ew
;

168 
c⁄d_œ°
 = 
˙ew
;

171 i‡–
c⁄dôi⁄s
[
i
]->
›
 !
›_Õ¨í
 )

174 
add_∑ªn
 = 1;

175 
˙ew
 = 
	`mÆloc
( (*cnew) );

176 
	`mem£t
–
˙ew
, 0, (*cnew) );

177 
˙ew
->
›
 = 
›_Õ¨í
;

178 i‡–
c⁄d_œ°
 =
NULL
 )

179 { 
c⁄d_li°
 = 
c⁄d_œ°
 = 
˙ew
; }

181 { 
c⁄d_œ°
->
√xt
 = 
˙ew
; cond_last = cnew; }

185 
add_∑ªn
 = 0;

189  
c⁄d
 = 
c⁄dôi⁄s
 [
i
]; c⁄d !
NULL
; c⁄d = c⁄d->
√xt
 )

191 
˙ew
 = 
	`mÆloc
( (*cnew) );

192 
˙ew
->
√xt
 = 
NULL
;

193 
˙ew
->
›
 = 
c⁄d
->op;

194 
˙ew
->
°r
 = 
c⁄d
->°∏? 
	`°rdup
–c⁄d->°∏Ë: 
NULL
;

195 
˙ew
->
«meödex
 = 
c⁄d
->nameindex;

196 i‡–
c⁄d_œ°
 =
NULL
 )

197 { 
c⁄d_li°
 = 
c⁄d_œ°
 = 
˙ew
; }

199 { 
c⁄d_œ°
->
√xt
 = 
˙ew
; cond_last = cnew; }

202 i‡–
add_∑ªn
 )

205 
˙ew
 = 
	`mÆloc
( (*cnew) );

206 
	`mem£t
–
˙ew
, 0, (*cnew) );

207 
˙ew
->
›
 = 
›_Ω¨í
;

208 
c⁄d_œ°
->
√xt
 = 
˙ew
;

209 
c⁄d_œ°
 = 
˙ew
;

211 
is_fú°
 = 0;

218 
c⁄dôi⁄
 *
c⁄d1
, *
c⁄d1b
, *
c⁄d1c
, *
c⁄d1d
, *
c⁄d1e
, *
c⁄d1f
;

220  
c⁄d1
 = 
c⁄d_li°
; c⁄d1 !
NULL
; c⁄d1 = c⁄d1->
√xt
 )

222 i‡–
c⁄d1
->
›
 =
›_Õ¨í
 )

224 
c⁄d1b
 = 
c⁄d1
 ->
√xt
; i‡–c⁄d1b =
NULL
 ) ;

225 
c⁄d1c
 = 
c⁄d1b
->
√xt
; i‡–c⁄d1¯=
NULL
 ) ;

226 
c⁄d1d
 = 
c⁄d1c
->
√xt
; i‡–c⁄d1d =
NULL
 ) ;

227 
c⁄d1e
 = 
c⁄d1d
->
√xt
; i‡–c⁄d1ê=
NULL
 ) ;

228 
c⁄d1f
 = 
c⁄d1e
->
√xt
; i‡–c⁄d1‡=
NULL
 ) ;

230 i‡–
c⁄d1b
->
›
 =
›_v¨übÀ


231 && ( 
c⁄d1c
->
›
 =
›_eq
 || c⁄d1c->› =
›_√q
 )

232 && 
c⁄d1d
->
›
 =
›_c⁄°™t


233 && 
c⁄d1e
->
›
 =
›_Ω¨í
 )

235 
c⁄dôi⁄
 *
c⁄d2
, *
c⁄d2b
, *
c⁄d2c
, *
c⁄d2d
, *
c⁄d2e
, *
c⁄d2f
;

237  
c⁄d2
 = 
c⁄d1f
->
√xt
; c⁄d2 !
NULL
; cond2 = cond2->next )

239 i‡–
c⁄d2
->
›
 =
›_Õ¨í
 )

241 
c⁄d2b
 = 
c⁄d2
 ->
√xt
; i‡–c⁄d2b =
NULL
 ) ;

242 
c⁄d2c
 = 
c⁄d2b
->
√xt
; i‡–c⁄d2¯=
NULL
 ) ;

243 
c⁄d2d
 = 
c⁄d2c
->
√xt
; i‡–c⁄d2d =
NULL
 ) ;

244 
c⁄d2e
 = 
c⁄d2d
->
√xt
; i‡–c⁄d2ê=
NULL
 ) ;

245 
c⁄d2f
 = 
c⁄d2e
->
√xt
;

248 i‡–
c⁄d2b
->
›
 =
›_v¨übÀ


249 && 
c⁄d2b
->
«meödex
 =
c⁄d1b
->nameindex

250 && 
c⁄d2c
->
›
 =
c⁄d1c
->op

251 && 
c⁄d2d
->
›
 =
›_c⁄°™t


252 && 
	`°rcmp
–
c⁄d2d
->
°r
, 
c⁄d1d
->str ) == 0

253 && 
c⁄d2e
->
›
 =
›_Ω¨í
 )

256 i‡–
c⁄d1f
->
›
 =
›_™d


257 || ( 
c⁄d2f
 !
NULL
 && c⁄d2f->
›
 =
›_™d
 ) )

260 
c⁄d1
 ->
›
 = 
›_nuked
;

261 
c⁄d1b
->
›
 = 
›_nuked
;

262 
c⁄d1c
->
›
 = 
›_nuked
;

263 
c⁄d1d
->
›
 = 
›_nuked
;

264 
c⁄d1e
->
›
 = 
›_nuked
;

265 i‡–
c⁄d1f
->
›
 =
›_™d
 )

266 
c⁄d1f
->
›
 = 
›_nuked
;

268 
c⁄d2f
->
›
 = 
›_nuked
;

278 
joö_d⁄e
:

279  
c⁄d_li°
;

280 
	}
}

284 * 
	gcuºít_¨ch
 = 
NULL
;

289 
c⁄dôi⁄
 *
	$ñimö©e_Ÿhî_¨ch
–
c⁄dôi⁄
 *
li°
 )

291 
c⁄dôi⁄
 *
c⁄d1a
 = 
li°
, *
c⁄d1b
 = 
NULL
, *
c⁄d1c
 = NULL, *
c⁄d1d
 = NULL;

292 i‡–
cuºít_¨ch
 =
NULL
 )

293 
cuºít_¨ch
 = 
	`gëív
( "ARCH" );

294 i‡–
cuºít_¨ch
 =
NULL
 )

296 
	`Ârötf
–
°dîr
, "error: ARCH undefined\n" );

297 
	`exô
( 1 );

299 i‡–
c⁄d1a
->
›
 =
›_v¨übÀ


300 && ! 
	`°rcmp
–
v¨èbÀ
[
c⁄d1a
->
«meödex
].
«me
, "ARCH" ) )

302 
c⁄d1b
 = 
c⁄d1a
->
√xt
; i‡–c⁄d1b =
NULL
 ) 
d⁄e
;

303 
c⁄d1c
 = 
c⁄d1b
->
√xt
; i‡–c⁄d1¯=
NULL
 ) 
d⁄e
;

304 
c⁄d1d
 = 
c⁄d1c
->
√xt
;

305 i‡–
c⁄d1c
->
›
 =
›_c⁄°™t
 && 
c⁄d1d
 =
NULL
 )

307 i‡–(
c⁄d1b
->
›
 =
›_eq
 && 
	`°rcmp
–
c⁄d1c
->
°r
, 
cuºít_¨ch
 ))

308 || (
c⁄d1b
->
›
 =
›_√q
 && ! 
	`°rcmp
–
c⁄d1c
->
°r
, 
cuºít_¨ch
 )) )

311 
c⁄d1a
->
›
 = 
›_Ál£
;

312 
c⁄d1a
->
√xt
 = 
NULL
;

313 
	`‰ì_c⁄d
–
c⁄d1b
 );

314  
c⁄d1a
;

316 i‡–(
c⁄d1b
->
›
 =
›_√q
 && 
	`°rcmp
–
c⁄d1c
->
°r
, 
cuºít_¨ch
 ))

317 || (
c⁄d1b
->
›
 =
›_eq
 && ! 
	`°rcmp
–
c⁄d1c
->
°r
, 
cuºít_¨ch
 )) )

320 
c⁄d1a
->
›
 = 
›_åue
;

321 
c⁄d1a
->
√xt
 = 
NULL
;

322 
	`‰ì_c⁄d
–
c⁄d1b
 );

323  
c⁄d1a
;

326 i‡–
c⁄d1c
->
›
 =
›_c⁄°™t
 && 
c⁄d1d
->› =
›_‹
 )

328 i‡–(
c⁄d1b
->
›
 =
›_eq
 && 
	`°rcmp
–
c⁄d1c
->
°r
, 
cuºít_¨ch
 ))

329 || (
c⁄d1b
->
›
 =
›_√q
 && ! 
	`°rcmp
–
c⁄d1c
->
°r
, 
cuºít_¨ch
 )) )

332 
c⁄d1b
 = 
c⁄d1d
->
√xt
;

333 
c⁄d1d
->
√xt
 = 
NULL
;

334 
	`‰ì_c⁄d
–
c⁄d1a
 );

335  
	`ñimö©e_Ÿhî_¨ch
–
c⁄d1b
 );

337 i‡–(
c⁄d1b
->
›
 =
›_√q
 && 
	`°rcmp
–
c⁄d1c
->
°r
, 
cuºít_¨ch
 ))

338 || (
c⁄d1b
->
›
 =
›_eq
 && ! 
	`°rcmp
–
c⁄d1c
->
°r
, 
cuºít_¨ch
 )) )

341 
c⁄d1a
->
›
 = 
›_åue
;

342 
c⁄d1a
->
√xt
 = 
NULL
;

343 
	`‰ì_c⁄d
–
c⁄d1b
 );

344  
c⁄d1a
;

347 i‡–
c⁄d1c
->
›
 =
›_c⁄°™t
 && 
c⁄d1d
->› =
›_™d
 )

349 i‡–(
c⁄d1b
->
›
 =
›_eq
 && 
	`°rcmp
–
c⁄d1c
->
°r
, 
cuºít_¨ch
 ))

350 || (
c⁄d1b
->
›
 =
›_√q
 && ! 
	`°rcmp
–
c⁄d1c
->
°r
, 
cuºít_¨ch
 )) )

353 
l_∑r
 = 0;

355  
c⁄d1c
 = 
c⁄d1d
->
√xt
; cond1c; cond1c = cond1c->next )

357 i‡–
c⁄d1c
->
›
 =
›_Õ¨í
 )

358 
l_∑r
++;

359 i‡–
c⁄d1c
->
›
 =
›_Ω¨í
 )

360 
l_∑r
--;

361 i‡–
c⁄d1c
->
›
 =
›_‹
 && 
l_∑r
 == 0 )

363  
c⁄d1a
;

364 i‡–
l_∑r
 < 0 )

366 
	`Ârötf
–
°dîr
, "incorrect condition:ÖrogrammingÉrror ?\n" );

367 
	`exô
( 1 );

370 
c⁄d1a
->
›
 = 
›_Ál£
;

371 
c⁄d1a
->
√xt
 = 
NULL
;

372 
	`‰ì_c⁄d
–
c⁄d1b
 );

373  
c⁄d1a
;

375 i‡–(
c⁄d1b
->
›
 =
›_√q
 && 
	`°rcmp
–
c⁄d1c
->
°r
, 
cuºít_¨ch
 ))

376 || (
c⁄d1b
->
›
 =
›_eq
 && ! 
	`°rcmp
–
c⁄d1c
->
°r
, 
cuºít_¨ch
 )) )

379 
c⁄d1b
 = 
c⁄d1d
->
√xt
;

380 
c⁄d1d
->
√xt
 = 
NULL
;

381 
	`‰ì_c⁄d
–
c⁄d1a
 );

382  
	`ñimö©e_Ÿhî_¨ch
–
c⁄d1b
 );

386 i‡–
c⁄d1a
->
›
 =
›_v¨übÀ
 && ! 
v¨èbÀ
[c⁄d1a->
«meödex
].
deföed
 )

388 
c⁄d1b
 = 
c⁄d1a
->
√xt
; i‡–c⁄d1b =
NULL
 ) 
d⁄e
;

389 
c⁄d1c
 = 
c⁄d1b
->
√xt
; i‡–c⁄d1¯=
NULL
 ) 
d⁄e
;

390 
c⁄d1d
 = 
c⁄d1c
->
√xt
;

392 i‡–
c⁄d1c
->
›
 =
›_c⁄°™t


393 && ( 
c⁄d1d
 =
NULL
 || c⁄d1d->
›
 =
›_™d
 ) )

395 i‡–
c⁄d1b
->
›
 =
›_eq
 && 
	`°rcmp
–
c⁄d1c
->
°r
, "" ) )

397 
c⁄d1a
->
›
 = 
›_Ál£
;

398 
c⁄d1a
->
√xt
 = 
NULL
;

399 
	`‰ì_c⁄d
–
c⁄d1b
 );

400  
c⁄d1a
;

403 i‡–
c⁄d1c
->
›
 =
›_c⁄°™t
 && 
c⁄d1d
->› =
›_‹
 )

405 i‡–
c⁄d1b
->
›
 =
›_eq
 && 
	`°rcmp
–
c⁄d1c
->
°r
, "" ) )

407 
c⁄d1b
 = 
c⁄d1d
->
√xt
;

408 
c⁄d1d
->
√xt
 = 
NULL
;

409 
	`‰ì_c⁄d
–
c⁄d1a
 );

410  
	`ñimö©e_Ÿhî_¨ch
–
c⁄d1b
 );

414 
d⁄e
:

415  
li°
;

416 
	}
}

423 
	$fix_c⁄dôi⁄Æs
–
kc⁄fig
 * 
scfg
 )

425 
kc⁄fig
 * 
cfg
;

430 
	`m¨k_v¨übÀs
–
scfg
 );

442 
c⁄dôi⁄
 * 
c⁄d_°ack
 [32];

443 
dïth
 = 0;

444 
kc⁄fig
 * 
¥ev
 = 
NULL
;

446  
cfg
 = 
scfg
; cfg !
NULL
; cfg = cfg->
√xt
 )

448 
good
 = 1;

449  
cfg
->
tokí
 )

454 
tokí_if
:

455 
c⁄d_°ack
 [
dïth
++] =

456 
	`ªmove_b™g
–
	`ñimö©e_Ÿhî_¨ch
–
cfg
->
c⁄d
 ) );

457 
cfg
->
c⁄d
 = 
NULL
;

460 
tokí_ñ£
:

469 
c⁄dôi⁄
 * 
c⁄d
;

471  
c⁄d
 = 
c⁄d_°ack
 [
dïth
-1];

472 
c⁄d
 !
NULL
;

473 
c⁄d
 = c⁄d->
√xt
 )

475  
c⁄d
->
›
 )

478 
›_™d
: 
c⁄d
->
›
 = 
›_‹
; ;

479 
›_‹
: 
c⁄d
->
›
 = 
›_™d1
; ;

480 
›_√q
: 
c⁄d
->
›
 = 
›_eq
; ;

481 
›_eq
: 
c⁄d
->
›
 = 
›_√q
; ;

482 
›_åue
: 
c⁄d
->
›
 = 
›_Ál£
;;

483 
›_Ál£
:
c⁄d
->
›
 = 
›_åue
; ;

489 
tokí_fi
:

490 --
dïth
;

493 
tokí_boﬁ
:

494 
tokí_choi˚_ôem
:

495 
tokí_choi˚_hódî
:

496 
tokí_commít
:

497 
tokí_deföe_boﬁ
:

498 
tokí_deföe_hex
:

499 
tokí_deföe_öt
:

500 
tokí_deföe_°rög
:

501 
tokí_deföe_åi°©e
:

502 
tokí_ídmíu
:

503 
tokí_hex
:

504 
tokí_öt
:

505 
tokí_maömíu_›ti⁄
:

506 
tokí_°rög
:

507 
tokí_åi°©e
:

508 
tokí_un£t
:

509 
cfg
->
c⁄d
 = 
	`joö_c⁄dôi⁄_°ack
–
c⁄d_°ack
, 
dïth
 );

510 i‡–
cfg
->
c⁄d
 && cfg->c⁄d->
›
 =
›_Ál£
 )

512 
good
 = 0;

513 i‡–
¥ev
 )

514 
¥ev
->
√xt
 = 
cfg
->next;

516 
scfg
 = 
cfg
->
√xt
;

520 
tokí_dï_boﬁ
:

521 
tokí_dï_mboﬁ
:

522 
tokí_dï_åi°©e
:

527 i‡–
cfg
->
c⁄d
 )

529 
c⁄d_°ack
 [
dïth
] = 
	`ñimö©e_Ÿhî_¨ch
–
cfg
->
c⁄d
 );

530 
cfg
->
c⁄d
 = 
	`joö_c⁄dôi⁄_°ack
–
c⁄d_°ack
, 
dïth
+1 );

534 
cfg
->
c⁄d
 = 
	`joö_c⁄dôi⁄_°ack
–
c⁄d_°ack
, 
dïth
 );

536 i‡–
cfg
->
c⁄d
 && cfg->c⁄d->
›
 =
›_Ál£
 )

538 
good
 = 0;

539 i‡–
¥ev
 )

540 
¥ev
->
√xt
 = 
cfg
->next;

542 
scfg
 = 
cfg
->
√xt
;

546 i‡–
good
 )

547 
¥ev
 = 
cfg
;

550 
	}
}

555 
	$dump_c⁄dôi⁄
–
c⁄dôi⁄
 *
li°
 )

557 
c⁄dôi⁄
 *
tmp
;

558  
tmp
 = 
li°
;Åmp;Åm∞tmp->
√xt
 )

560 
tmp
->
›
)

564 
›_v¨übÀ
:

565 
	`¥ötf
–" %s", 
v¨èbÀ
[
tmp
->
«meödex
].
«me
 );

567 
›_c⁄°™t
:

568 
	`¥ötf
–" %s", 
tmp
->
°r
 );

570 
›_eq
:

571 
	`¥ötf
( " =" );

573 
›_b™g
:

574 
	`¥ötf
( " !" );

576 
›_√q
:

577 
	`¥ötf
( " !=" );

579 
›_™d
:

580 
›_™d1
:

581 
	`¥ötf
( " -a" );

583 
›_‹
:

584 
	`¥ötf
( " -o" );

586 
›_åue
:

587 
	`¥ötf
( " TRUE" );

589 
›_Ál£
:

590 
	`¥ötf
( " FALSE" );

592 
›_Õ¨í
:

593 
	`¥ötf
( " (" );

595 
›_Ω¨í
:

596 
	`¥ötf
( " )" );

600 
	`¥ötf
( "\n" );

601 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/scripts/tkgen.c

111 
	~<°dio.h
>

112 
	~<°dlib.h
>

113 
	~<uni°d.h
>

114 
	~<°rög.h
>

115 
	~"tk∑r£.h
"

121 
	gtŸ_míu_num
 = 0;

126 
kc⁄fig
 * 
	gmíu_fú°
 [100];

127 
kc⁄fig
 * 
	gmíu_œ°
 [100];

133 
	$°¨t_¥oc
–* 
œbñ
, 
míu_num
, 
t›Àvñ
 )

135 i‡–
t›Àvñ
 )

136 
	`¥ötf
–"míu_›ti⁄ míu%d %d \"%s\"\n", 
míu_num
, míu_num, 
œbñ
 );

137 
	`¥ötf
–"¥o¯míu%d {wÅôÀ} {\n", 
míu_num
 );

138 
	`¥ötf
( "\tset oldFocus [focus]\n" );

139 i‡–
míu_fú°
[
míu_num
]->
míu_numbî
 != 0 )

140 
	`¥ötf
( "\tcatch {focus .menu%d}\n",

141 
míu_fú°
[
míu_num
]->
míu_numbî
 );

142 
	`¥ötf
–"\tˇtch {de°roy $w; uƒegi°î_a˘ivê%d}\n", 
míu_num
 );

143 
	`¥ötf
( "\ttoplevel $w -class Dialog\n" );

144 
	`¥ötf
( "\twm withdraw $w\n" );

145 
	`¥ötf
( "\tglobaláctive_menus\n" );

146 
	`¥ötf
–"\t£àa˘ive_míu†[ls‹à-öãgî [lö£π $a˘ive_míu†íd %d]]\n", 
míu_num
 );

147 
	`¥ötf
( "\tmessage $w.m -width 400 -aspect 300 -text \\\n" );

148 
	`¥ötf
–"\t\t\"%s\" -ªlõ‡øi£d\n", 
œbñ
 );

149 
	`¥ötf
( "\tpack $w.m -pady 10 -sideÅop -padx 10\n" );

150 
	`¥ötf
–"\twmÅôÀ $w \"%s\" \n\n", 
œbñ
 );

152 
	`¥ötf
–"\tböd $w <Esˇ≥> \"ˇtch {focu†$ﬁdFocus}; de°roy $w; uƒegi°î_a˘ivê%d; bªak\"\n", 
míu_num
);

154 
	`¥ötf
("\tsetÇextscript ");

155 
	`¥ötf
("\"catch {focus $oldFocus}; " );

161 i‡–
míu_num
 < 
tŸ_míu_num


162 && 
míu_fú°
[
míu_num
 + 1]->
míu_numbî
 != menu_num )

164 
to_de°r
;

166 
	`¥ötf
–"de°roy $w; uƒegi°î_a˘ivê%d; ", 
míu_num
 );

167 
to_de°r
 = 
míu_fú°
[
míu_num
]->
míu_numbî
;

168  
to_de°r
 > 0 && 
míu_fú°
[
míu_num
 + 1]->
míu_numbî
 !=Åo_destr )

170 
	`¥ötf
( "catch {destroy .menu%d}; unregister_active %d; ",

171 
to_de°r
,Åo_destr );

172 
to_de°r
 = 
míu_fú°
[to_de°r]->
míu_numbî
;

175 
	`¥ötf
( "menu%d .menu%d \\\"$title\\\"\"\n",

176 
míu_num
+1, menu_num+1 );

181 
	`¥ötf
( "\tframe $w.f\n" );

182 i‡–
t›Àvñ
 )

183 
	`¥ötf
( "\tbutton $w.f.back -text \"Main Menu\" \\\n" );

185 
	`¥ötf
( "\tbutton $w.f.back -text \"OK\" \\\n" );

186 
	`¥ötf
( "\t\t-width 15 -command \"catch {focus $oldFocus}; destroy $w; unregister_active %d\"\n",

187 
míu_num
 );

188 
	`¥ötf
( "\tbutton $w.f.next -text \"Next\" -underline 0\\\n" );

189 
	`¥ötf
( "\t\t-width 15 -command $nextscript\n");

191 i‡–
míu_num
 =
tŸ_míu_num
 ) {

192 
	`¥ötf
( "\t$w.f.next configure -state disabled\n" );

199 
	`¥ötf
( "\tbindáll <Alt-n> \"puts \\\"no more menus\\\" \"\n");

206 
	`¥ötf
( "\tbindáll <Alt-n> $nextscript\n");

208 
	`¥ötf
( "\tbutton $w.f.prev -text \"Prev\" -underline 0\\\n" );

209 
	`¥ötf
( "\t\t-width 15 -command \"catch {focus $oldFocus}; destroy $w; unregister_active %d; menu%d .menu%d \\\"$title\\\"\"\n",

210 
míu_num
, menu_num-1, menu_num-1 );

211 i‡–
míu_num
 == 1 ) {

212 
	`¥ötf
( "\t$w.f.prev configure -state disabled\n" );

216 
	`¥ötf
( "\tbind $w <Alt-p> \"catch {focus $oldFocus}; destroy $w; unregister_active %d; menu%d .menu%d \\\"$title\\\";break\"\n",

217 
míu_num
, menu_num-1, menu_num-1 );

219 
	`¥ötf
( "\tpack $w.f.back $w.f.next $w.f.prev -sideÜeft -expand on\n" );

220 
	`¥ötf
( "\tpack $w.f -pady 10 -side bottom -anchor w -fill x\n" );

225 
	`¥ötf
( "\tframe $w.topline -reliefÑidge -borderwidth 2 -height 2\n" );

226 
	`¥ötf
( "\tpack $w.topline -sideÅop -fill x\n\n" );

227 
	`¥ötf
( "\tframe $w.botline -reliefÑidge -borderwidth 2 -height 2\n" );

228 
	`¥ötf
( "\tpack $w.botline -side bottom -fill x\n\n" );

233 
	`¥ötf
( "\tframe $w.config\n" );

234 
	`¥ötf
( "\tpack $w.config -fill y -expand on\n\n" );

235 
	`¥ötf
( "\tscrollbar $w.config.vscroll -command \"$w.config.canvas yview\"\n" );

236 
	`¥ötf
( "\tpack $w.config.vscroll -sideÑight -fill y\n\n" );

241 
	`¥ötf
( "\tcanvas $w.config.canvas -height 1\\\n" );

242 
	`¥ötf
( "\t\t-relief flat -borderwidth 0 -yscrollcommand \"$w.config.vscroll set\" \\\n" );

243 
	`¥ötf
( "\t\t-width [expr [winfo screenwidth .] * 1 / 2] \n" );

244 
	`¥ötf
( "\tframe $w.config.f\n" );

245 
	`¥ötf
( "\tbind $w <Key-Down> \"$w.config.canvas yview scroll 1 unit;break;\"\n");

246 
	`¥ötf
( "\tbind $w <Key-Up> \"$w.config.canvas yview scroll -1 unit;break;\"\n");

247 
	`¥ötf
( "\tbind $w <Key-Next> \"$w.config.canvas yview scroll 1Öage;break;\"\n");

248 
	`¥ötf
( "\tbind $w <Key-Prior> \"$w.config.canvas yview scroll -1Öage;break;\"\n");

249 
	`¥ötf
( "\tbind $w <Key-Home> \"$w.config.canvas yview moveto 0;break;\"\n");

250 
	`¥ötf
( "\tbind $w <Key-End> \"$w.config.canvas yview moveto 1 ;break;\"\n");

251 
	`¥ötf
( "\tpack $w.config.canvas -sideÑight -fill y\n" );

252 
	`¥ötf
("\n\n");

253 
	}
}

263 
	$˛ór_globÆÊags
()

265 
i
;

266  
i
 = 1; i <
max_v¨num
; i++ )

267 
v¨èbÀ
[
i
].
globÆ_wrôãn
 = 0;

268 
	}
}

277 
	$globÆ
–c⁄° *
v¨
 )

279 
	`¥ötf
–"\tglobÆ %s\n", 
v¨
 );

280 
	}
}

288 
	$gíî©e_if
–
kc⁄fig
 * 
cfg
, 
c⁄dôi⁄
 * 
oc⁄d
,

289 
míu_num
, 
löe_num
 )

291 
c⁄dôi⁄
 * 
c⁄d
;

292 
dïídícy
 * 
tmp
;

293 
kc⁄fig
 * 
cfg1
;

295 i‡–
löe_num
 >= -1 )

297 i‡–
cfg
->
tokí
 =
tokí_deföe_boﬁ
 || cfg->tokí =
tokí_deföe_hex


298 || 
cfg
->
tokí
 =
tokí_deföe_öt
 || cfg->tokí =
tokí_deföe_°rög


299 || 
cfg
->
tokí
 =
tokí_deföe_åi°©e
 || cfg->tokí =
tokí_un£t
 )

301 i‡–
cfg
->
tokí
 =
tokí_commít
 && 
löe_num
 == -1 )

306 i‡–
cfg
->
tokí
 =
tokí_°rög
 || cfg->tokí =
tokí_maömíu_›ti⁄
 )

313  
c⁄d
 = 
oc⁄d
; c⁄d !
NULL
; c⁄d = c⁄d->
√xt
 )

315  
c⁄d
->
›
 )

320 
›_v¨übÀ
:

321 i‡–! 
v¨èbÀ
[
c⁄d
->
«meödex
].
globÆ_wrôãn
 )

323 
v¨èbÀ
[
c⁄d
->
«meödex
].
globÆ_wrôãn
 = 1;

324 
	`globÆ
–
v¨èbÀ
[
c⁄d
->
«meödex
].
«me
 );

333 i‡–
cfg
->
«meödex
 > 0 && ! 
v¨èbÀ
[cfg->«meödex].
globÆ_wrôãn
 )

335 
v¨èbÀ
[
cfg
->
«meödex
].
globÆ_wrôãn
 = 1;

336 
	`globÆ
–
v¨èbÀ
[
cfg
->
«meödex
].
«me
 );

342 
	`¥ötf
( "\tif {" );

343  
c⁄d
 = 
oc⁄d
; c⁄d !
NULL
; c⁄d = c⁄d->
√xt
 )

345  
c⁄d
->
›
 )

350 
›_b™g
: 
	`¥ötf
( " ! " ); ;

351 
›_eq
: 
	`¥ötf
( " == " ); ;

352 
›_√q
: 
	`¥ötf
( " != " ); ;

353 
›_™d
: 
	`¥ötf
( " && " ); ;

354 
›_™d1
: 
	`¥ötf
( " && " ); ;

355 
›_‹
: 
	`¥ötf
( " || " ); ;

356 
›_Õ¨í
: 
	`¥ötf
( "(" ); ;

357 
›_Ω¨í
: 
	`¥ötf
( ")" ); ;

359 
›_v¨übÀ
:

360 
	`¥ötf
–"$%s", 
v¨èbÀ
[
c⁄d
->
«meödex
].
«me
 );

363 
›_c⁄°™t
:

364 i‡–
	`°rcmp
–
c⁄d
->
°r
, "y" ) =0 ) 
	`¥ötf
( "1" );

365 i‡–
	`°rcmp
–
c⁄d
->
°r
, "n" ) =0 ) 
	`¥ötf
( "0" );

366 i‡–
	`°rcmp
–
c⁄d
->
°r
, "m" ) =0 ) 
	`¥ötf
( "2" );

367 i‡–
	`°rcmp
–
c⁄d
->
°r
, "" ) =0 ) 
	`¥ötf
( "4" );

369 
	`¥ötf
–"\"%s\"", 
c⁄d
->
°r
 );

373 
	`¥ötf
( "}Åhen {" );

379 i‡–
löe_num
 >= -1 )

381 
modtoyes
 = 0;

383  
cfg
->
tokí
 )

386 
	`¥ötf
( " }\n" );

389 
tokí_dï_mboﬁ
:

390 
modtoyes
 = 1;

391 
tokí_dï_boﬁ
:

392 
	`¥ötf
( "\n" );

393  
tmp
 = 
cfg
->
dïíd
;Åmp;Åm∞tmp->
√xt
 )

394 i‡–! 
v¨èbÀ
[
	`gë_v¨num
–
tmp
->
«me
 )].
globÆ_wrôãn
 )

396 
	`globÆ
–
tmp
->
«me
 );

398 
	`¥ötf
( "\tsetÅmpvar_dep [effective_dep [list" );

399  
tmp
 = 
cfg
->
dïíd
;Åmp;Åm∞tmp->
√xt
 )

400 
	`¥ötf
–" $%s", 
tmp
->
«me
 );

401 
	`¥ötf
( "]];set %s [sync_bool $%s $tmpvar_dep %d];",

402 
v¨èbÀ
[
cfg
->
«meödex
].
«me
, vartable[cfg->nameindex].name,

403 
modtoyes
 );

404 
	`¥ötf
( "if {$tmpvar_dep != 1" );

405 i‡(
modtoyes
)

406 
	`¥ötf
( " && $tmpvar_dep != 2" );

407 
	`¥ötf
( "}Åhen {configure_entry .menu%d.config.f.x%d disabled {y};",

408 
míu_num
, 
löe_num
 );

409 
	`¥ötf
( "}Élse {" );

410 
	`¥ötf
( "configure_entry .menu%d.config.f.x%dÇormal {y};",

411 
míu_num
, 
löe_num
 );

412 
	`¥ötf
( "}; " );

413 
tokí_boﬁ
:

414 i‡–
cfg
->
tokí
 =
tokí_boﬁ
 )

415 
	`¥ötf
( "\n\t" );

416 
	`¥ötf
( "configure_entry .menu%d.config.f.x%dÇormal {nÜ",

417 
míu_num
, 
löe_num
 );

418 i‡–
cfg
->
tokí
 =
tokí_boﬁ
 )

419 
	`¥ötf
( " y" );

420 
	`¥ötf
( "}" );

421 
	`¥ötf
( "}Élse {");

422 
	`¥ötf
( "configure_entry .menu%d.config.f.x%d disabled {yÇÜ}}\n",

423 
míu_num
, 
löe_num
 );

426 
tokí_choi˚_hódî
:

427 
	`¥ötf
( "configure_entry .menu%d.config.f.x%dÇormal {xÜ}",

428 
míu_num
, 
löe_num
 );

429 
	`¥ötf
( "}Élse {" );

430 
	`¥ötf
( "configure_entry .menu%d.config.f.x%d disabled {xÜ}",

431 
míu_num
, 
löe_num
 );

432 
	`¥ötf
( "}\n" );

435 
tokí_choi˚_ôem
:

436 
	`Ârötf
–
°dîr
, "InternalÉrror onÅoken_choice_item\n" );

437 
	`exô
( 1 );

439 
tokí_dï_åi°©e
:

440 
	`¥ötf
( "\n" );

441  
tmp
 = 
cfg
->
dïíd
;Åmp;Åm∞tmp->
√xt
 )

442 i‡–! 
v¨èbÀ
[
	`gë_v¨num
–
tmp
->
«me
 )].
globÆ_wrôãn
 )

444 
	`globÆ
–
tmp
->
«me
 );

446 
	`¥ötf
( "\tsetÅmpvar_dep [effective_dep [list" );

447  
tmp
 = 
cfg
->
dïíd
;Åmp;Åm∞tmp->
√xt
 )

448 
	`¥ötf
–" $%s", 
tmp
->
«me
 );

449 
	`¥ötf
( "]];set %s [sync_tristate $%s $tmpvar_dep];",

450 
v¨èbÀ
[
cfg
->
«meödex
].
«me
, vartable[cfg->nameindex].name );

451 
	`¥ötf
( "\tif {$tmpvar_dep != 1}Åhen {" );

452 
	`¥ötf
( "configure_entry .menu%d.config.f.x%d disabled {y}",

453 
míu_num
, 
löe_num
 );

454 
	`¥ötf
( "}Élse {" );

455 
	`¥ötf
( "configure_entry .menu%d.config.f.x%dÇormal {y}",

456 
míu_num
, 
löe_num
 );

457 
	`¥ötf
( "}; " );

458 
	`¥ötf
( "if {$tmpvar_dep == 0}Åhen {" );

459 
	`¥ötf
( "configure_entry .menu%d.config.f.x%d disabled {m}",

460 
míu_num
, 
löe_num
 );

461 
	`¥ötf
( "}Élse {" );

462 
	`¥ötf
( "configure_entry .menu%d.config.f.x%dÇormal {m}",

463 
míu_num
, 
löe_num
 );

464 
	`¥ötf
( "}; " );

465 
tokí_åi°©e
:

466 i‡–
cfg
->
tokí
 =
tokí_åi°©e
 )

468 
	`¥ötf
( "\n\tconfigure_entry .menu%d.config.f.x%dÇormal {y}; ",

469 
míu_num
, 
löe_num
 );

471 
	`¥ötf
( "if {($CONFIG_MODULES == 1)}Åhen {" );

472 
	`¥ötf
( "configure_entry .menu%d.config.f.x%dÇormal {m}}Élse {",

473 
míu_num
, 
löe_num
 );

474 
	`¥ötf
( "configure_entry .menu%d.config.f.x%d disabled {m}}; ",

475 
míu_num
, 
löe_num
 );

476 
	`¥ötf
( "configure_entry .menu%d.config.f.x%dÇormal {nÜ}",

477 
míu_num
, 
löe_num
 );

483 
	`¥ötf
( "}Élse {" );

484 
	`¥ötf
( "configure_entry .menu%d.config.f.x%d disabled {yÇ mÜ}}\n",

485 
míu_num
, 
löe_num
 );

488 
tokí_hex
:

489 
tokí_öt
:

490 
tokí_°rög
:

491 
	`¥ötf
( ".menu%d.config.f.x%d.x configure -stateÇormal -foreground [ cget .ref -foreground ]; ",

492 
míu_num
, 
löe_num
 );

493 
	`¥ötf
( ".menu%d.config.f.x%d.l configure -stateÇormal; ",

494 
míu_num
, 
löe_num
 );

495 
	`¥ötf
( "}Élse {" );

496 
	`¥ötf
( ".menu%d.config.f.x%d.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; ",

497 
míu_num
, 
löe_num
 );

498 
	`¥ötf
( ".menu%d.config.f.x%d.l configure -state disabled}\n",

499 
míu_num
, 
löe_num
 );

502 
tokí_commít
:

503 
tokí_maömíu_›ti⁄
:

504 i‡–
löe_num
 >= 0 )

506 
	`¥ötf
( "configure_entry .menu%d.config.f.x%dÇormal {m}",

507 
míu_num
, 
löe_num
 );

508 
	`¥ötf
( "}Élse {" );

509 
	`¥ötf
( "configure_entry .menu%d.config.f.x%d disabled {m}}\n",

510 
míu_num
, 
löe_num
 );

513 
	`¥ötf
( ".f0.x%d configure -stateÇormal }Élse { .f0.x%d configure -state disabled }\n",

514 
míu_num
, menu_num );

520 
modtoyes
 = 0;

522  
cfg
->
tokí
 )

525 
	`¥ötf
( " }\n" );

528 
tokí_dï_mboﬁ
:

529 
modtoyes
 = 1;

530 
tokí_dï_boﬁ
:

531 
	`¥ötf
( "\n" );

532  
tmp
 = 
cfg
->
dïíd
;Åmp;Åm∞tmp->
√xt
 )

533 i‡–! 
v¨èbÀ
[
	`gë_v¨num
–
tmp
->
«me
 )].
globÆ_wrôãn
 )

535 
	`globÆ
–
tmp
->
«me
 );

537 
	`¥ötf
( "\tsetÅmpvar_dep [effective_dep [list" );

538  
tmp
 = 
cfg
->
dïíd
;Åmp;Åm∞tmp->
√xt
 )

539 
	`¥ötf
–" $%s", 
tmp
->
«me
 );

540 
	`¥ötf
( "]];set %s [sync_bool $%s $tmpvar_dep %d];",

541 
v¨èbÀ
[
cfg
->
«meödex
].
«me
, vartable[cfg->nameindex].name,

542 
modtoyes
 );

543 
tokí_boﬁ
:

544 i‡–
cfg
->
tokí
 =
tokí_boﬁ
 )

545 
	`¥ötf
( "\n\t" );

546 
	`¥ötf
( "set %s [expr $%s&15]",

547 
v¨èbÀ
[
cfg
->
«meödex
].
«me
, vartable[cfg->nameindex].name );

548 
	`¥ötf
( "}\n");

551 
tokí_choi˚_hódî
:

552 
	`¥ötf
( "}Élse {" );

553  
cfg1
 = 
cfg
->
√xt
;

554 
cfg1
 !
NULL
 && cfg1->
tokí
 =
tokí_choi˚_ôem
;

555 
cfg1
 = cfg1->
√xt
 )

556 
	`¥ötf
–"£à%†4;", 
v¨èbÀ
[
cfg1
->
«meödex
].
«me
 );

557 
	`¥ötf
( "}\n" );

560 
tokí_choi˚_ôem
:

561 
	`Ârötf
–
°dîr
, "InternalÉrror onÅoken_choice_item\n" );

562 
	`exô
( 1 );

564 
tokí_deföe_boﬁ
:

565 
tokí_deföe_åi°©e
:

566 i‡–! 
v¨èbÀ
[
	`gë_v¨num
–
cfg
->
vÆue
 )].
globÆ_wrôãn
 )

568 
	`globÆ
–
cfg
->
vÆue
 );

570 
	`¥ötf
( "set %s $%s }\n",

571 
v¨èbÀ
[
cfg
->
«meödex
].
«me
, cfg->
vÆue
 );

574 
tokí_deföe_hex
:

575 
tokí_deföe_öt
:

576 
	`¥ötf
( "set %s %s }\n",

577 
v¨èbÀ
[
cfg
->
«meödex
].
«me
, cfg->
vÆue
 );

580 
tokí_deföe_°rög
:

581 
	`¥ötf
( "set %s \"%s\" }\n",

582 
v¨èbÀ
[
cfg
->
«meödex
].
«me
, cfg->
vÆue
 );

585 
tokí_dï_åi°©e
:

586 
	`¥ötf
( "\n" );

587  
tmp
 = 
cfg
->
dïíd
;Åmp;Åm∞tmp->
√xt
 )

588 i‡–! 
v¨èbÀ
[
	`gë_v¨num
–
tmp
->
«me
 )].
globÆ_wrôãn
 )

590 
	`globÆ
–
tmp
->
«me
 );

592 
	`¥ötf
( "\tsetÅmpvar_dep [effective_dep [list" );

593  
tmp
 = 
cfg
->
dïíd
;Åmp;Åm∞tmp->
√xt
 )

594 
	`¥ötf
–" $%s", 
tmp
->
«me
 );

595 
	`¥ötf
( "]]; set %s [sync_tristate $%s $tmpvar_dep]; ",

596 
v¨èbÀ
[
cfg
->
«meödex
].
«me
, vartable[cfg->nameindex].name );

597 
tokí_åi°©e
:

598 i‡–
cfg
->
tokí
 =
tokí_åi°©e
 )

599 
	`¥ötf
( "if {($CONFIG_MODULES == 0) && ($%s == 2)}Åhen {set %s 1}; ",

600 
v¨èbÀ
[
cfg
->
«meödex
].
«me
,

601 
v¨èbÀ
[
cfg
->
«meödex
].
«me
 );

606 
	`¥ötf
( "set %s [expr $%s&15]",

607 
v¨èbÀ
[
cfg
->
«meödex
].
«me
, vartable[cfg->nameindex].name );

608 
	`¥ötf
( "}\n" );

611 
tokí_hex
:

612 
tokí_öt
:

613 i‡–
cfg
->
vÆue
 && *cfg->value == '$' )

615 
ödex
 = 
	`gë_v¨num
–
cfg
->
vÆue
+1 );

616 
	`¥ötf
( "\n" );

617 i‡–! 
v¨èbÀ
[
ödex
].
globÆ_wrôãn
 )

619 
	`globÆ
–
v¨èbÀ
[
ödex
].
«me
 );

621 
	`¥ötf
( "\t" );

623 i‡–
cfg
->
tokí
 =
tokí_hex
 )

624 
	`¥ötf
( "validate_hex " );

625 i‡–
cfg
->
tokí
 =
tokí_öt
 )

626 
	`¥ötf
( "validate_int " );

627 
	`¥ötf
( "%s \"$%s\" %s}\n",

628 
v¨èbÀ
[
cfg
->
«meödex
].
«me
, vartable[cfg->nameindex].name,

629 
cfg
->
vÆue
 );

632 
tokí_un£t
:

633 
	`¥ötf
–"£à%†4}\n", 
v¨èbÀ
[
cfg
->
«meödex
].
«me
 );

637 
	}
}

643 
	$gíî©e_wrôec⁄fig
–
kc⁄fig
 * 
cfg
 )

645 
c⁄dôi⁄
 * 
c⁄d
;

646 
dïídícy
 * 
tmp
;

647 
dïmod
 = 2;

652 i‡–
cfg
->
tokí
 !
tokí_commít
 )

654 i‡–
cfg
->
«meödex
 > 0 && ! 
v¨èbÀ
[cfg->«meödex].
globÆ_wrôãn
 )

656 
v¨èbÀ
[
cfg
->
«meödex
].
globÆ_wrôãn
 = 1;

657 
	`globÆ
–
v¨èbÀ
[
cfg
->
«meödex
].
«me
 );

659 i‡–
cfg
->
tokí
 =
tokí_deföe_åi°©e
 || cfg->tokí =
tokí_deföe_boﬁ
 )

661 i‡–! 
v¨èbÀ
[
	`gë_v¨num
–
cfg
->
vÆue
 )].
globÆ_wrôãn
 )

663 
v¨èbÀ
[
	`gë_v¨num
–
cfg
->
vÆue
 )].
globÆ_wrôãn
 = 1;

664 
	`globÆ
–
cfg
->
vÆue
 );

667 i‡–
cfg
->
«meödex
 <0 && cfg->
tokí
 =
tokí_choi˚_hódî
 )

669 
	`¥ötf
–"\tglobÆÅmpv¨_%d\n", -(
cfg
->
«meödex
) );

676  
c⁄d
 = 
cfg
->c⁄d; c⁄d !
NULL
; c⁄d = c⁄d->
√xt
 )

678  
c⁄d
->
›
 )

683 
›_v¨übÀ
:

684 i‡–! 
v¨èbÀ
[
c⁄d
->
«meödex
].
globÆ_wrôãn
 )

686 
v¨èbÀ
[
c⁄d
->
«meödex
].
globÆ_wrôãn
 = 1;

687 
	`globÆ
–
v¨èbÀ
[
c⁄d
->
«meödex
].
«me
 );

696 
	`¥ötf
( "\t" );

701 i‡–
cfg
->
c⁄d
 !
NULL
 )

703 
	`¥ötf
( "if {" );

704  
c⁄d
 = 
cfg
->c⁄d; c⁄d !
NULL
; c⁄d = c⁄d->
√xt
 )

706  
c⁄d
->
›
 )

709 
›_b™g
: 
	`¥ötf
( " ! " ); ;

710 
›_eq
: 
	`¥ötf
( " == " ); ;

711 
›_√q
: 
	`¥ötf
( " != " ); ;

712 
›_™d
: 
	`¥ötf
( " && " ); ;

713 
›_™d1
: 
	`¥ötf
( " && " ); ;

714 
›_‹
: 
	`¥ötf
( " || " ); ;

715 
›_Õ¨í
: 
	`¥ötf
( "(" ); ;

716 
›_Ω¨í
: 
	`¥ötf
( ")" ); ;

718 
›_v¨übÀ
:

719 
	`¥ötf
–"$%s", 
v¨èbÀ
[
c⁄d
->
«meödex
].
«me
 );

722 
›_c⁄°™t
:

723 i‡–
	`°rcmp
–
c⁄d
->
°r
, "n" ) =0 ) 
	`¥ötf
( "0" );

724 i‡–
	`°rcmp
–
c⁄d
->
°r
, "y" ) =0 ) 
	`¥ötf
( "1" );

725 i‡–
	`°rcmp
–
c⁄d
->
°r
, "m" ) =0 ) 
	`¥ötf
( "2" );

726 i‡–
	`°rcmp
–
c⁄d
->
°r
, "" ) =0 ) 
	`¥ötf
( "4" );

728 
	`¥ötf
–"\"%s\"", 
c⁄d
->
°r
 );

732 
	`¥ötf
( "}Åhen {" );

739  
cfg
->
tokí
 )

742 i‡–
cfg
->
c⁄d
 !
NULL
 )

743 
	`¥ötf
( " }" );

744 
	`¥ötf
( "\n" );

747 
tokí_boﬁ
:

748 
tokí_åi°©e
:

749 
	`¥ötf
( "write_tristate $cfg $autocfg %s $%s [list $notmod] 2",

750 
v¨èbÀ
[
cfg
->
«meödex
].
«me
, vartable[cfg->nameindex].name );

751 i‡–
cfg
->
c⁄d
 !
NULL
 )

752 
	`¥ötf
( " }" );

753 
	`¥ötf
( "\n" );

756 
tokí_choi˚_hódî
:

763 
kc⁄fig
 * 
cfg1
;

764  
cfg1
 = 
cfg
->
√xt
;

765 
cfg1
 !
NULL
 && cfg1->
tokí
 =
tokí_choi˚_ôem
;

766 
cfg1
 = cfg1->
√xt
 )

768 
	`¥ötf
("\n\tif { $tmpvar_%d == \"%s\" }Åhen { write_tristate $cfg $autocfg %s 1 [list $notmod] 2 }Élse { write_tristate $cfg $autocfg %s 0 [list $notmod] 2 }",

769 -(
cfg
->
«meödex
), 
cfg1
->
œbñ
,

770 
v¨èbÀ
[
cfg1
->
«meödex
].
«me
,

771 
v¨èbÀ
[
cfg1
->
«meödex
].
«me
 );

774 i‡–
cfg
->
c⁄d
 !
NULL
 )

775 
	`¥ötf
( "}" );

776 
	`¥ötf
( "\n" );

779 
tokí_choi˚_ôem
:

780 
	`Ârötf
–
°dîr
, "InternalÉrror onÅoken_choice_item\n" );

781 
	`exô
( 1 );

783 
tokí_commít
:

784 
	`¥ötf
( "write_comment $cfg $autocfg \"%s\"",

785 
cfg
->
œbñ
 );

786 i‡–
cfg
->
c⁄d
 !
NULL
 )

787 
	`¥ötf
( "}" );

788 
	`¥ötf
( "\n" );

791 
tokí_deföe_boﬁ
:

792 
tokí_deföe_åi°©e
:

793 i‡–
cfg
->
c⁄d
 =
NULL
 )

795 
	`¥ötf
( "write_tristate $cfg $autocfg %s $%s [list $notmod] 2\n",

796 
v¨èbÀ
[
cfg
->
«meödex
].
«me
, vartable[cfg->nameindex].name );

800 
	`¥ötf
( "write_tristate $cfg $autocfg %s $%s [list $notmod] 2 }\n",

801 
v¨èbÀ
[
cfg
->
«meödex
].
«me
, cfg->
vÆue
 );

805 
tokí_dï_mboﬁ
:

806 
dïmod
 = 1;

807 
tokí_dï_boﬁ
:

808 
tokí_dï_åi°©e
:

809 
	`¥ötf
( "write_tristate $cfg $autocfg %s $%s [list",

810 
v¨èbÀ
[
cfg
->
«meödex
].
«me
, vartable[cfg->nameindex].name );

811  
tmp
 = 
cfg
->
dïíd
;Åmp;Åm∞tmp->
√xt
 )

812 
	`¥ötf
–" $%s", 
tmp
->
«me
 );

813 
	`¥ötf
–"] %d", 
dïmod
 );

814 i‡–
cfg
->
c⁄d
 !
NULL
 )

815 
	`¥ötf
( " }" );

816 
	`¥ötf
( "\n" );

819 
tokí_deföe_hex
:

820 
	`¥ötf
( "write_hex $cfg $autocfg %s %s $notmod",

821 
v¨èbÀ
[
cfg
->
«meödex
].
«me
, cfg->
vÆue
 );

822 i‡–
cfg
->
c⁄d
 !
NULL
 )

823 
	`¥ötf
( " }" );

824 
	`¥ötf
( "\n" );

827 
tokí_deföe_öt
:

828 
	`¥ötf
( "write_int $cfg $autocfg %s %s $notmod",

829 
v¨èbÀ
[
cfg
->
«meödex
].
«me
, cfg->
vÆue
 );

830 i‡–
cfg
->
c⁄d
 !
NULL
 )

831 
	`¥ötf
( " }" );

832 
	`¥ötf
( "\n" );

835 
tokí_deföe_°rög
:

836 
	`¥ötf
( "write_string $cfg $autocfg %s \"%s\" $notmod",

837 
v¨èbÀ
[
cfg
->
«meödex
].
«me
, cfg->
vÆue
 );

838 i‡–
cfg
->
c⁄d
 !
NULL
 )

839 
	`¥ötf
( " }" );

840 
	`¥ötf
( "\n" );

843 
tokí_hex
:

844 
	`¥ötf
( "write_hex $cfg $autocfg %s $%s $notmod",

845 
v¨èbÀ
[
cfg
->
«meödex
].
«me
, vartable[cfg->nameindex].name );

846 i‡–
cfg
->
c⁄d
 !
NULL
 )

847 
	`¥ötf
( " }" );

848 
	`¥ötf
( "\n" );

851 
tokí_öt
:

852 
	`¥ötf
( "write_int $cfg $autocfg %s $%s $notmod",

853 
v¨èbÀ
[
cfg
->
«meödex
].
«me
, vartable[cfg->nameindex].name );

854 i‡–
cfg
->
c⁄d
 !
NULL
 )

855 
	`¥ötf
( " }" );

856 
	`¥ötf
( "\n" );

859 
tokí_°rög
:

860 
	`¥ötf
( "write_string $cfg $autocfg %s \"$%s\" $notmod",

861 
v¨èbÀ
[
cfg
->
«meödex
].
«me
, vartable[cfg->nameindex].name );

862 i‡–
cfg
->
c⁄d
 !
NULL
 )

863 
	`¥ötf
( " }" );

864 
	`¥ötf
( "\n" );

867 
	}
}

869 
	$gíî©e_upd©e_v¨
–
kc⁄fig
 * 
scfg
, 
míu_num
 )

871 
kc⁄fig
 * 
cfg
;

873 i‡–
míu_num
>0 )

875 
	`¥ötf
–"¥o¯upd©e_deföe_míu%d {} {\n", 
míu_num
 );

876 
	`¥ötf
( "\tupdate_define_mainmenu\n" );

879 
	`¥ötf
( "proc update_define_mainmenu {} {\n" );

880 
	`˛ór_globÆÊags
();

881 
	`globÆ
( "CONFIG_MODULES" );

882 
v¨èbÀ
[ 
	`gë_v¨num
–"CONFIG_MODULES" ) ].
globÆ_wrôãn
 = 1;

883  
cfg
 = 
scfg
; cfg !
NULL
; cfg = cfg->
√xt
 )

885 i‡–
cfg
->
míu_numbî
 =
míu_num
 && (cfg->
tokí
 =
tokí_deföe_boﬁ
 || cfg->tokí =
tokí_deföe_åi°©e


886 || 
cfg
->
tokí
 =
tokí_deföe_hex
 || cfg->tokí =
tokí_deföe_öt


887 || 
cfg
->
tokí
 =
tokí_deföe_°rög
 || cfg->tokí =
tokí_un£t


888 || 
cfg
->
tokí
 =
tokí_åi°©e
) )

890 i‡–! 
v¨èbÀ
[
cfg
->
«meödex
].
globÆ_wrôãn
 )

892 
v¨èbÀ
[
cfg
->
«meödex
].
globÆ_wrôãn
 = 1;

893 
	`globÆ
–
v¨èbÀ
[
cfg
->
«meödex
].
«me
 );

901  
cfg
 = 
scfg
; cfg !
NULL
; cfg = cfg->
√xt
 ) {

902 i‡(
cfg
->
míu_numbî
 !
míu_num
)

904 i‡(!
cfg
->
c⁄d
)

906 
cfg
->
tokí
) {

907 
tokí_boﬁ
:

908 
tokí_åi°©e
:

909 i‡(! 
v¨èbÀ
[
cfg
->
«meödex
].
globÆ_wrôãn
) {

910 
v¨èbÀ
[
cfg
->
«meödex
].
globÆ_wrôãn
 = 1;

911 
	`globÆ
(
v¨èbÀ
[
cfg
->
«meödex
].
«me
);

913 
	`¥ötf
("£à%†[ex¥ $%s|16]\n", 
v¨èbÀ
[
cfg
->
«meödex
].
«me
,

914 
v¨èbÀ
[
cfg
->
«meödex
].
«me
);

921  
cfg
 = 
scfg
; cfg !
NULL
; cfg = cfg->
√xt
 )

923 
tmp
[20];

924 
kc⁄fig
 * 
cfg1
;

926 i‡–
cfg
->
míu_numbî
 =
míu_num
 )

928  
cfg
->
tokí
 )

931 
tokí_choi˚_ôem
:

933 
tokí_choi˚_hódî
:

934 
	`•rötf
–
tmp
, "tmpv¨_%d", -(
cfg
->
«meödex
) );

935 
	`globÆ
–
tmp
 );

936  
cfg1
 = 
cfg
->
√xt
;

937 
cfg1
 !
NULL
 && cfg1->
tokí
 =
tokí_choi˚_ôem
;

938 
cfg1
 = cfg1->
√xt
 )

940 
v¨èbÀ
[
cfg1
->
«meödex
].
globÆ_wrôãn
 = 1;

941 
	`globÆ
–
v¨èbÀ
[
cfg1
->
«meödex
].
«me
 );

942 
	`¥ötf
( "\tif {$tmpvar_%d == \"%s\"}Åhen {set %s 1}Élse {set %s 0}\n",

943 -(
cfg
->
«meödex
), 
cfg1
->
œbñ
,

944 
v¨èbÀ
[
cfg1
->
«meödex
].
«me
,

945 
v¨èbÀ
[
cfg1
->
«meödex
].
«me
 );

948 
tokí_boﬁ
:

949 
tokí_deföe_boﬁ
:

950 
tokí_deföe_åi°©e
:

951 
tokí_deföe_hex
:

952 
tokí_deföe_öt
:

953 
tokí_deföe_°rög
:

954 
tokí_dï_boﬁ
:

955 
tokí_dï_åi°©e
:

956 
tokí_dï_mboﬁ
:

957 
tokí_öt
:

958 
tokí_hex
:

959 
tokí_maömíu_›ti⁄
:

960 
tokí_åi°©e
:

961 
tokí_un£t
:

962 i‡–
cfg
->
c⁄d
 !
NULL
 )

963 
	`gíî©e_if
–
cfg
, cfg->
c⁄d
, 
míu_num
, -2 );

964  
cfg
->
tokí
 )

966 
tokí_åi°©e
:

967 
	`¥ötf
( "\n\tif {($CONFIG_MODULES == 0)}Åhen {if {($%s == 2)}Åhen {set %s 1}}\n",

968 
v¨èbÀ
[
cfg
->
«meödex
].
«me
, vartable[cfg->nameindex].name );

970 
tokí_deföe_boﬁ
:

971 
tokí_deföe_åi°©e
:

972 i‡–! 
v¨èbÀ
[
	`gë_v¨num
–
cfg
->
vÆue
 )].
globÆ_wrôãn
 )

974 
v¨èbÀ
[
	`gë_v¨num
–
cfg
->
vÆue
 )].
globÆ_wrôãn
 = 1;

975 
	`globÆ
–
cfg
->
vÆue
 );

977 
	`¥ötf
–"\t£à%†$%s\n", 
v¨èbÀ
[
cfg
->
«meödex
].
«me
,

978 
cfg
->
vÆue
 );

980 
tokí_deföe_hex
:

981 
tokí_deföe_öt
:

982 
	`¥ötf
–"\t£à%†%s\n", 
v¨èbÀ
[
cfg
->
«meödex
].
«me
,

983 
cfg
->
vÆue
 );

985 
tokí_deföe_°rög
:

986 
	`¥ötf
–"\t£à%†\"%s\"\n", 
v¨èbÀ
[
cfg
->
«meödex
].
«me
,

987 
cfg
->
vÆue
 );

989 
tokí_un£t
:

990 
	`¥ötf
–"\t£à%†4\n", 
v¨èbÀ
[
cfg
->
«meödex
].
«me
 );

997 
	`¥ötf
( "}\n\n\n" );

998 
	}
}

1004 
	$íd_¥oc
–
kc⁄fig
 * 
scfg
, 
míu_num
 )

1006 
kc⁄fig
 * 
cfg
;

1007 
i
;

1009 
	`¥ötf
( "\n\n\n" );

1010 
	`¥ötf
( "\tfocus $w\n" );

1011 
	`¥ötf
( "\tupdate_active\n" );

1012 
	`¥ötf
( "\tglobal winx; global winy\n" );

1013 i‡–
míu_fú°
[
míu_num
]->
míu_numbî
 != 0 )

1015 
	`¥ötf
( "\tif {[winfoÉxists .menu%d] == 0}Åhen ",

1016 
míu_fú°
[
míu_num
]->
míu_numbî
 );

1017 
	`¥ötf
( "{menu%d .menu%d \"%s\"}\n",

1018 
míu_fú°
[
míu_num
]->
míu_numbî
, menu_first[menu_num]->menu_number,

1019 
míu_fú°
[míu_fú°[
míu_num
]->
míu_numbî
]->
œbñ
 );

1020 
	`¥ötf
( "\tset winx [expr [winfo x .menu%d]+30]; set winy [expr [winfo y .menu%d]+30]\n",

1021 
míu_fú°
[
míu_num
]->
míu_numbî
, menu_first[menu_num]->menu_number );

1024 
	`¥ötf
( "\tset winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]\n" );

1025 
	`¥ötf
( "\tif {[winfoÉxists $w]}Åhen {wm geometry $w +$winx+$winy}\n" );

1037 
	`¥ötf
( "\tupdate idletasks\n" );

1038 
	`¥ötf
( "\tif {[winfoÉxists $w]}Åhen {$w.config.canvas create window 0 0 -anchorÇw -window $w.config.f\n\n" );

1039 
	`¥ötf
( "\t$w.config.canvas configure \\\n" );

1040 
	`¥ötf
( "\t\t-width [expr [winfoÑeqwidth $w.config.f] + 1]\\\n" );

1041 
	`¥ötf
( "\t\t-scrollregion \"-1 -1 [expr [winfoÑeqwidth $w.config.f] + 1] \\\n" );

1042 
	`¥ötf
( "\t\t\t [expr [winfoÑeqheight $w.config.f] + 1]\"\n\n" );

1048 
	`¥ötf
( "\tset winy [expr [winfoÑeqh $w] - [winfoÑeqh $w.config.canvas]]\n" );

1049 
	`¥ötf
( "\tset scry [expr [winfo screenh $w] / 2]\n" );

1050 
	`¥ötf
( "\tset maxy [expr [winfo screenh $w] * 3 / 4]\n" );

1051 
	`¥ötf
( "\tset canvtotal [expr [winfoÑeqh $w.config.f] + 2]\n" );

1052 
	`¥ötf
( "\tif [expr $winy + $canvtotal < $maxy] {\n" );

1053 
	`¥ötf
( "\t\t$w.config.canvas configure -height $canvtotal\n" );

1054 
	`¥ötf
( "\t}Élse {\n" );

1055 
	`¥ötf
( "\t\t$w.config.canvas configure -height [expr $scry - $winy]\n" );

1056 
	`¥ötf
( "\t\t}\n\t}\n" );

1062 
	`¥ötf
( "\tupdate idletasks\n" );

1063 
	`¥ötf
( "\tif {[winfoÉxists $w]}Åhen {\n\twm maxsize $w [winfo width $w] [winfo screenheight $w]\n" );

1064 
	`¥ötf
( "\twm minsize $w [winfo width $w] 100\n\n" );

1065 
	`¥ötf
( "\twm deiconify $w\n" );

1066 
	`¥ötf
( "}\n}\n\n" );

1075 
	`¥ötf
–"¥o¯upd©e_míu%d {} {\n", 
míu_num
 );

1080 
	`˛ór_globÆÊags
();

1081  
cfg
 = 
scfg
; cfg !
NULL
; cfg = cfg->
√xt
 )

1083 i‡–
cfg
->
míu_numbî
 =
míu_num


1084 && 
cfg
->
tokí
 !
tokí_maömíu_›ti⁄


1085 && 
cfg
->
tokí
 !
tokí_choi˚_ôem
 )

1087 i‡–
cfg
->
c⁄d
 !
NULL
 )

1089 
i
;

1090 i‡–(
cfg
->
tokí
 =
tokí_åi°©e
 || cfg->tokí =
tokí_dï_åi°©e
)

1091 && ! 
v¨èbÀ
[
i
 = 
	`gë_v¨num
–"CONFIG_MODULES" )].
globÆ_wrôãn
 )

1093 
	`globÆ
( "CONFIG_MODULES" );

1094 
v¨èbÀ
[
i
].
globÆ_wrôãn
 = 1;

1096 
	`gíî©e_if
–
cfg
, cfg->
c⁄d
, cfg->
míu_numbî
, cfg->
míu_löe
 );

1100 i‡–
cfg
->
tokí
 =
tokí_åi°©e
 )

1102 i‡–! 
v¨èbÀ
[
cfg
->
«meödex
].
globÆ_wrôãn
 )

1104 
v¨èbÀ
[
cfg
->
«meödex
].
globÆ_wrôãn
 = 1;

1105 
	`¥ötf
–"\tglobÆ %s\n", 
v¨èbÀ
[
cfg
->
«meödex
].
«me
 );

1107 i‡–! 
v¨èbÀ
[
i
 = 
	`gë_v¨num
–"CONFIG_MODULES" )].
globÆ_wrôãn
 )

1109 
	`globÆ
( "CONFIG_MODULES" );

1110 
v¨èbÀ
[
i
].
globÆ_wrôãn
 = 1;

1112 
	`¥ötf
( "\n\tif {($CONFIG_MODULES == 1)}Åhen {configure_entry .menu%d.config.f.x%dÇormal {m}}Élse {configure_entry .menu%d.config.f.x%d disabled {m}}\n",

1113 
míu_num
, 
cfg
->
míu_löe
,

1114 
míu_num
, 
cfg
->
míu_löe
 );

1118 i‡–
cfg
->
tokí
 =
tokí_maömíu_›ti⁄


1119 && 
cfg
->
míu_numbî
 =
míu_num


1120 && 
cfg
->
c⁄d
 !
NULL
 )

1122 
	`gíî©e_if
–
cfg
, cfg->
c⁄d
, 
míu_num
, cfg->
míu_löe
 );

1125 
	`¥ötf
("}\n\n\n");

1127 
	`gíî©e_upd©e_v¨
–
scfg
, 
míu_num
 );

1128 
	}
}

1133 
	$dump_tk_s¸ùt
–
kc⁄fig
 * 
scfg
 )

1135 
míu_dïth
;

1136 
míu_num
 [64];

1137 
imíu
, 
i
;

1138 
t›_Àvñ_num
 = 0;

1139 
kc⁄fig
 * 
cfg
;

1140 
kc⁄fig
 * 
cfg1
 = 
NULL
;

1141 c⁄° * 
«me
 = "No Name";

1147 
tŸ_míu_num
 = 0;

1148 
míu_dïth
 = 0;

1149 
míu_num
 [0] = 0;

1151  
cfg
 = 
scfg
; cfg !
NULL
; cfg = cfg->
√xt
 )

1153  
cfg
->
tokí
 )

1158 
tokí_maömíu_«me
:

1159 
«me
 = 
cfg
->
œbñ
;

1162 
tokí_maömíu_›ti⁄
:

1163 i‡–++
míu_dïth
 >= 64 )

1164 { 
	`Ârötf
–
°dîr
, "míu†toÿdìp\n" ); 
	`exô
( 1 ); }

1165 i‡–++
tŸ_míu_num
 >= 100 )

1166 { 
	`Ârötf
–
°dîr
, "toÿm™y míus\n" ); 
	`exô
( 1 ); }

1167 
míu_num
 [
míu_dïth
] = 
tŸ_míu_num
;

1168 
míu_fú°
 [
tŸ_míu_num
] = 
cfg
;

1169 
míu_œ°
 [
tŸ_míu_num
] = 
cfg
;

1174 
cfg
->
míu_numbî
 = 
míu_num
[
míu_dïth
 - 1];

1175 i‡–
míu_dïth
 == 1 )

1176 ++
t›_Àvñ_num
;

1179 
tokí_ídmíu
:

1180 
míu_œ°
 [
míu_num
 [
míu_dïth
]] = 
cfg
;

1182 i‡–--
míu_dïth
 < 0 )

1183 { 
	`Ârötf
–
°dîr
, "unm©chedÉndmíu\n" ); 
	`exô
( 1 ); }

1186 
tokí_boﬁ
:

1187 
tokí_choi˚_hódî
:

1188 
tokí_choi˚_ôem
:

1189 
tokí_commít
:

1190 
tokí_dï_boﬁ
:

1191 
tokí_dï_åi°©e
:

1192 
tokí_dï_mboﬁ
:

1193 
tokí_hex
:

1194 
tokí_öt
:

1195 
tokí_°rög
:

1196 
tokí_åi°©e
:

1197 
cfg
->
míu_numbî
 = 
míu_num
[
míu_dïth
];

1198 i‡–
míu_dïth
 == 0 )

1199 { 
	`Ârötf
–
°dîr
, "°©emíànŸ i¿míu\n" ); 
	`exô
( 1 ); }

1202 
tokí_deföe_boﬁ
:

1203 
tokí_deföe_hex
:

1204 
tokí_deföe_öt
:

1205 
tokí_deföe_°rög
:

1206 
tokí_deföe_åi°©e
:

1207 
tokí_un£t
:

1208 
cfg
->
míu_numbî
 = 
míu_num
[
míu_dïth
];

1220 
	`¥ötf
–"£àmíus_≥r_cﬁum¿%d\n", (
t›_Àvñ_num
 + 4 + 1 + 2) / 3 );

1221 
	`¥ötf
–"£àtŸÆ_míu†%d\n\n", 
tŸ_míu_num
 );

1223 
	`¥ötf
( "procÅoplevel_menu {num} {\n" );

1224  
imíu
 = 1; imíu <
tŸ_míu_num
; ++imenu )

1226 
∑ª¡
 = 1;

1228 i‡–
míu_fú°
[
imíu
]->
míu_numbî
 == 0 )

1229 
∑ª¡
 = 
míu_fú°
[
imíu
]->
míu_numbî
;

1231 
	`¥ötf
( "\tif {$num == %d}Åhen {return %d}\n",

1232 
imíu
, 
míu_fú°
[imíu]->
míu_numbî
 );

1234 
	`¥ötf
( "\treturn $num\n}\n\n" );

1239 
	`¥ötf
–"maömíu_«mê\"%s\"\n", 
«me
 );

1240  
imíu
 = 1; imíu <
tŸ_míu_num
; ++imenu )

1242 
míu_löe
 = 0;

1243 
ƒ_submíu
 = 
imíu
;

1244 
míu_«me_omôãd
 = 0;

1245 
›t_cou¡
 = 0;

1247 
	`˛ór_globÆÊags
();

1248 
	`°¨t_¥oc
–
míu_fú°
[
imíu
]->
œbñ
, imenu,

1249 !
míu_fú°
[
imíu
]->
míu_numbî
 );

1251  
cfg
 = 
míu_fú°
[
imíu
]->
√xt
; cfg !
NULL
 && cfg !
míu_œ°
[imenu]; cfg = cfg->next )

1253  
cfg
->
tokí
 )

1258 
tokí_maömíu_›ti⁄
:

1259  
míu_fú°
[++
ƒ_submíu
]->
míu_numbî
 > 
imíu
 )

1261 
cfg
->
míu_löe
 = menu_line++;

1262 
	`¥ötf
( "\tsubmenu $w.config.f %d %d \"%s\" %d\n",

1263 
cfg
->
míu_numbî
, cfg->
míu_löe
, cfg->
œbñ
, 
ƒ_submíu
 );

1264 
cfg
 = 
míu_œ°
[
ƒ_submíu
];

1267 
tokí_commít
:

1268 i‡–!
cfg
->
míu_löe
 && !
míu_«me_omôãd
 )

1270 
cfg
->
míu_löe
 = -1;

1271 
míu_«me_omôãd
 = 1;

1275 
míu_«me_omôãd
 = 1;

1276 
cfg
->
míu_löe
 = menu_line++;

1277 
	`¥ötf
( "\tcomment $w.config.f %d %d \"%s\"\n",

1278 
cfg
->
míu_numbî
, cfg->
míu_löe
, cfg->
œbñ
 );

1282 
tokí_boﬁ
:

1283 
cfg
->
míu_löe
 = menu_line++;

1284 
	`¥ötf
( "\tbool $w.config.f %d %d \"%s\" %s\n",

1285 
cfg
->
míu_numbî
, cfg->
míu_löe
, cfg->
œbñ
,

1286 
v¨èbÀ
[
cfg
->
«meödex
].
«me
 );

1289 
tokí_choi˚_hódî
:

1294 
cfg
->
míu_löe
 = menu_line++;

1295 
	`¥ötf
–"\tglobÆÅmpv¨_%d\n", -(
cfg
->
«meödex
) );

1296 
	`¥ötf
( "\tminimenu $w.config.f %d %d \"%s\"Åmpvar_%d %s\n",

1297 
cfg
->
míu_numbî
, cfg->
míu_löe
, cfg->
œbñ
,

1298 -(
cfg
->
«meödex
), 
v¨èbÀ
[cfg->
√xt
->«meödex].
«me
 );

1299 
	`¥ötf
( "\tmenu $w.config.f.x%d.x.menu -tearoffcommand \"menutitle \\\"%s\\\"\"\n",

1300 
cfg
->
míu_löe
, cfg->
œbñ
 );

1301 
cfg1
 = 
cfg
;

1302 
›t_cou¡
 = 0;

1305 
tokí_choi˚_ôem
:

1307 
	`¥ötf
( "\t$w.config.f.x%d.x.menuáddÑadiobutton -label \"%s\" -variableÅmpvar_%d -value \"%s\" -command \"update_active\"\n",

1308 
cfg1
->
míu_löe
, 
cfg
->
œbñ
, -(cfg1->
«meödex
),

1309 
cfg
->
œbñ
 );

1310 
›t_cou¡
++;

1311 i‡–
cfg
->
√xt
 && cfg->√xt->
tokí
 !
tokí_choi˚_ôem
 ) {

1313 
	`¥ötf
( "\tmenusplit $w $w.config.f.x%d.x.menu %d\n",

1314 
cfg1
->
míu_löe
, 
›t_cou¡
 );

1318 
tokí_dï_boﬁ
:

1319 
tokí_dï_mboﬁ
:

1320 
cfg
->
míu_löe
 = menu_line++;

1321 
	`¥ötf
( "\tdep_bool $w.config.f %d %d \"%s\" %s\n",

1322 
cfg
->
míu_numbî
, cfg->
míu_löe
, cfg->
œbñ
,

1323 
v¨èbÀ
[
cfg
->
«meödex
].
«me
 );

1326 
tokí_dï_åi°©e
:

1327 
cfg
->
míu_löe
 = menu_line++;

1328 
	`¥ötf
( "\tdep_tristate $w.config.f %d %d \"%s\" %s\n",

1329 
cfg
->
míu_numbî
, cfg->
míu_löe
, cfg->
œbñ
,

1330 
v¨èbÀ
[
cfg
->
«meödex
].
«me
 );

1333 
tokí_hex
:

1334 
cfg
->
míu_löe
 = menu_line++;

1335 
	`¥ötf
( "\thex $w.config.f %d %d \"%s\" %s\n",

1336 
cfg
->
míu_numbî
, cfg->
míu_löe
, cfg->
œbñ
,

1337 
v¨èbÀ
[
cfg
->
«meödex
].
«me
 );

1340 
tokí_öt
:

1341 
cfg
->
míu_löe
 = menu_line++;

1342 
	`¥ötf
( "\tint $w.config.f %d %d \"%s\" %s\n",

1343 
cfg
->
míu_numbî
, cfg->
míu_löe
, cfg->
œbñ
,

1344 
v¨èbÀ
[
cfg
->
«meödex
].
«me
 );

1347 
tokí_°rög
:

1348 
cfg
->
míu_löe
 = menu_line++;

1349 
	`¥ötf
( "\tistring $w.config.f %d %d \"%s\" %s\n",

1350 
cfg
->
míu_numbî
, cfg->
míu_löe
, cfg->
œbñ
,

1351 
v¨èbÀ
[
cfg
->
«meödex
].
«me
 );

1354 
tokí_åi°©e
:

1355 
cfg
->
míu_löe
 = menu_line++;

1356 
	`¥ötf
( "\ttristate $w.config.f %d %d \"%s\" %s\n",

1357 
cfg
->
míu_numbî
, cfg->
míu_löe
, cfg->
œbñ
,

1358 
v¨èbÀ
[
cfg
->
«meödex
].
«me
 );

1363 
	`íd_¥oc
–
scfg
, 
imíu
 );

1372 
	`˛ór_globÆÊags
();

1373 
	`¥ötf
( "proc update_mainmenu {} {\n" );

1374  
imíu
 = 1; imíu <
tŸ_míu_num
; imenu++ )

1376 i‡–
míu_fú°
[
imíu
]->
c⁄d
 !
NULL
 && míu_fú°[imíu]->
míu_numbî
 == 0 )

1377 
	`gíî©e_if
–
míu_fú°
[
imíu
], míu_fú°[imíu]->
c⁄d
, imenu, -1 );

1379 
	`¥ötf
( "}\n\n\n" );

1381 
	`˛ór_globÆÊags
();

1387  
cfg
 = 
scfg
; cfg !
NULL
; cfg = cfg->
√xt
 )

1389  
cfg
->
tokí
 )

1394 
tokí_boﬁ
:

1395 
tokí_choi˚_ôem
:

1396 
tokí_dï_boﬁ
:

1397 
tokí_dï_åi°©e
:

1398 
tokí_dï_mboﬁ
:

1399 
tokí_åi°©e
:

1400 i‡–! 
v¨èbÀ
[
cfg
->
«meödex
].
globÆ_wrôãn
 )

1402 
	`¥ötf
–"£à%†0\n", 
v¨èbÀ
[
cfg
->
«meödex
].
«me
 );

1403 
v¨èbÀ
[
cfg
->
«meödex
].
globÆ_wrôãn
 = 1;

1407 
tokí_choi˚_hódî
:

1408 
	`¥ötf
–"£àtmpv¨_%d \"“Ÿ së)\"\n", -(
cfg
->
«meödex
) );

1411 
tokí_hex
:

1412 
tokí_öt
:

1413 i‡–! 
v¨èbÀ
[
cfg
->
«meödex
].
globÆ_wrôãn
 )

1415 
	`¥ötf
–"£à%†%s\n", 
v¨èbÀ
[
cfg
->
«meödex
].
«me
, cfg->
vÆue
 ? cfg->value : "0" );

1416 
v¨èbÀ
[
cfg
->
«meödex
].
globÆ_wrôãn
 = 1;

1420 
tokí_°rög
:

1421 i‡–! 
v¨èbÀ
[
cfg
->
«meödex
].
globÆ_wrôãn
 )

1423 
	`¥ötf
–"£à%†\"%s\"\n", 
v¨èbÀ
[
cfg
->
«meödex
].
«me
, cfg->
vÆue
 );

1424 
v¨èbÀ
[
cfg
->
«meödex
].
globÆ_wrôãn
 = 1;

1433  
i
 = 1; i <
max_v¨num
; i++ )

1435 i‡–! 
v¨èbÀ
[
i
].
globÆ_wrôãn


1436 && 
	`°∫cmp
–
v¨èbÀ
[
i
].
«me
, "CONSTANT_", 9 ) )

1437 
	`¥ötf
–"£à%†4\n", 
v¨èbÀ
[
i
].
«me
 );

1443 
	`¥ötf
( "proc writeconfig {file1 file2} {\n" );

1444 
	`¥ötf
( "\tset cfg [open $file1 w]\n" );

1445 
	`¥ötf
( "\tsetáutocfg [open $file2 w]\n" );

1446 
	`¥ötf
( "\tsetÇotmod 1\n" );

1447 
	`¥ötf
( "\tsetÇotset 0\n" );

1448 
	`¥ötf
( "\tputs $cfg \"#\"\n");

1449 
	`¥ötf
( "\tputs $cfg \"# Automatically generated make config: don'tÉdit\"\n");

1450 
	`¥ötf
( "\tputs $cfg \"#\"\n" );

1452 
	`¥ötf
( "\tputs $autocfg \"/*\"\n" );

1453 
	`¥ötf
( "\tputs $autocfg \" * Automatically generated C config: don'tÉdit\"\n" );

1454 
	`¥ötf
( "\tputs $autocfg \" */\"\n" );

1455 
	`¥ötf
( "\tputs $autocfg \"#define AUTOCONF_INCLUDED\"\n" );

1457 
	`˛ór_globÆÊags
();

1458  
cfg
 = 
scfg
; cfg !
NULL
; cfg = cfg->
√xt
 )

1460  
cfg
->
tokí
 )

1465 
tokí_boﬁ
:

1466 
tokí_choi˚_hódî
:

1467 
tokí_commít
:

1468 
tokí_deföe_boﬁ
:

1469 
tokí_deföe_hex
:

1470 
tokí_deföe_öt
:

1471 
tokí_deföe_°rög
:

1472 
tokí_deföe_åi°©e
:

1473 
tokí_dï_boﬁ
:

1474 
tokí_dï_åi°©e
:

1475 
tokí_dï_mboﬁ
:

1476 
tokí_hex
:

1477 
tokí_öt
:

1478 
tokí_°rög
:

1479 
tokí_åi°©e
:

1480 
	`gíî©e_wrôec⁄fig
–
cfg
 );

1484 
	`¥ötf
( "\tclose $cfg\n" );

1485 
	`¥ötf
( "\tclose $autocfg\n" );

1486 
	`¥ötf
( "}\n\n\n" );

1493 
	`¥ötf
( "proc clear_choices { } {\n" );

1494  
cfg
 = 
scfg
; cfg !
NULL
; cfg = cfg->
√xt
 )

1496 i‡–
cfg
->
tokí
 =
tokí_choi˚_hódî
 )

1498  
cfg1
 = 
cfg
->
√xt
;

1499 
cfg1
 !
NULL
 && cfg1->
tokí
 =
tokí_choi˚_ôem
;

1500 
cfg1
 = cfg1->
√xt
 )

1502 
	`¥ötf
( "\tglobal %s; set %s 0\n",

1503 
v¨èbÀ
[
cfg1
->
«meödex
].
«me
,

1504 
v¨èbÀ
[
cfg1
->
«meödex
].
«me
 );

1508 
	`¥ötf
( "}\n\n\n" );

1510 
	`¥ötf
( "proc update_choices { } {\n" );

1511  
cfg
 = 
scfg
; cfg !
NULL
; cfg = cfg->
√xt
 )

1513 i‡–
cfg
->
tokí
 =
tokí_choi˚_hódî
 )

1515 
	`¥ötf
–"\tglobÆÅmpv¨_%d\n", -(
cfg
->
«meödex
) );

1516 
	`¥ötf
("\t£àtmpv¨_%d \"%s\"\n", -(
cfg
->
«meödex
), cfg->
vÆue
);

1517  
cfg1
 = 
cfg
->
√xt
;

1518 
cfg1
 !
NULL
 && cfg1->
tokí
 =
tokí_choi˚_ôem
;

1519 
cfg1
 = cfg1->
√xt
 )

1521 
	`¥ötf
–"\tglobÆ %s\n", 
v¨èbÀ
[
cfg1
->
«meödex
].
«me
 );

1522 
	`¥ötf
( "\tif { $%s == 1 }Åhen { setÅmpvar_%d \"%s\" }\n",

1523 
v¨èbÀ
[
cfg1
->
«meödex
].
«me
,

1524 -(
cfg
->
«meödex
), 
cfg1
->
œbñ
 );

1528 
	`¥ötf
( "}\n\n\n" );

1530 
	`gíî©e_upd©e_v¨
–
scfg
, 0 );

1536 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/scripts/tkparse.c

48 
	~<°dio.h
>

49 
	~<°dlib.h
>

50 
	~<°rög.h
>

52 
	~"tk∑r£.h
"

54 
kc⁄fig
 * 
	gc⁄fig_li°
 = 
NULL
;

55 
kc⁄fig
 * 
	gc⁄fig_œ°
 = 
NULL
;

56 c⁄° * 
	gcuºít_fûe
 = "<unknown file>";

57 
	glöío
 = 0;

59 
do_sour˚
( const * );

61 #unde‡
°rcmp


62 
	$my_°rcmp
–c⁄° * 
s1
, c⁄° * 
s2
 ) {  
	`°rcmp
–s1, s2 ); 
	}
}

63 
	#°rcmp
 
my_°rcmp


	)

68 
	$sy¡ax_îr‹
–c⁄° * 
msg
 )

70 
	`Ârötf
–
°dîr
, "%s: %d: %s\n", 
cuºít_fûe
, 
löío
, 
msg
 );

71 
	`exô
( 1 );

72 
	}
}

80 
	#VARTABLE_SIZE
 8192

	)

81 
v¨übÀ
 
	gv¨èbÀ
[
VARTABLE_SIZE
];

82 
	gmax_v¨num
 = 0;

84 
	$gë_v¨num
–* 
«me
 )

86 
i
;

88  
i
 = 1; i <
max_v¨num
; i++ )

89 i‡–
	`°rcmp
–
v¨èbÀ
[
i
].
«me
,Çame ) == 0 )

90  
i
;

91 i‡(
max_v¨num
 > 
VARTABLE_SIZE
-1)

92 
	`sy¡ax_îr‹
( "Too many variables defined." );

93 
v¨èbÀ
[++
max_v¨num
].
«me
 = 
	`mÆloc
–
	`°æí
(Çame )+1 );

94 
	`°r˝y
–
v¨èbÀ
[
max_v¨num
].
«me
,Çame );

95  
max_v¨num
;

96 
	}
}

103 c⁄° * 
	$gë_°rög
–c⁄° * 
≤t
, ** 
œbñ
 )

105 c⁄° * 
w‹d
;

107 
w‹d
 = 
≤t
;

110 i‡–*
≤t
 == '\0' || *pnt == ' ' || *pnt == '\t' )

112 
≤t
++;

115 *
œbñ
 = 
	`mÆloc
–
≤t
 - 
w‹d
 + 1 );

116 
	`mem˝y
–*
œbñ
, 
w‹d
, 
≤t
 - word );

117 (*
œbñ
)[
≤t
 - 
w‹d
] = '\0';

119 i‡–*
≤t
 != '\0' )

120 
≤t
++;

121  
≤t
;

122 
	}
}

130 c⁄° * 
	$gë_q°rög
–c⁄° * 
≤t
, ** 
œbñ
 )

132 
quŸe_ch¨
;

133 
	#NEWLABELLEN
 16384

	)

134 
√wœbñ
 [
NEWLABELLEN
];

135 * 
≤t1
;

140 i‡–*
≤t
 == '\0' )

141  
≤t
;

142 
quŸe_ch¨
 = *
≤t
++;

143 i‡–
quŸe_ch¨
 == '"' || quote_char == '\'' )

148 
≤t1
 = 
√wœbñ
;

151 i‡–*
≤t
 == '\0' )

152 
	`sy¡ax_îr‹
( "unterminated quoted string" );

153 i‡–*
≤t
 =
quŸe_ch¨
 &&Önt[-1] != '\\' )

157 i‡((
≤t1
 - 
√wœbñ
Ë>(
NEWLABELLEN
 - 2))

158 
	`sy¡ax_îr‹
( "Buffer overrun - increase NEWLABELLEN." );

161 i‡–*
≤t
 == '"' || *pnt == '\'' || *pnt == '[' || *pnt == ']' )

162 *
≤t1
++ = '\\';

163 *
≤t1
++ = *
≤t
++;

167 *
≤t1
++ = '\0';

168 *
œbñ
 = (*Ë
	`mÆloc
–
≤t1
 - 
√wœbñ
 );

169 
	`mem˝y
–*
œbñ
, 
√wœbñ
, 
≤t1
 -Çewlabel );

172 
≤t
++;

173  *
≤t
 == ' ' || *pnt == '\t' )

174 
≤t
++;

175  
≤t
;

176 
	}
}

184 c⁄° * 
	$gë_qnq°rög
–c⁄° * 
≤t
, ** 
œbñ
 )

186 
quŸe_ch¨
;

188  *
≤t
 == ' ' || *pnt == '\t' )

189 
≤t
++;

191 i‡–*
≤t
 == '\0' )

192  
≤t
;

193 
quŸe_ch¨
 = *
≤t
;

194 i‡–
quŸe_ch¨
 == '"' || quote_char == '\'' )

195  
	`gë_q°rög
–
≤t
, 
œbñ
 );

197  
	`gë_°rög
–
≤t
, 
œbñ
 );

198 
	}
}

205 
c⁄dôi⁄
 * 
	$tokíize_if
–c⁄° * 
≤t
 )

207 
c⁄dôi⁄
 * 
li°
;

208 
c⁄dôi⁄
 * 
œ°
;

209 
c⁄dôi⁄
 * 
¥ev
;

212  *
≤t
 == ' ' || *pnt == '\t' )

213 
≤t
++;

214 i‡–*
≤t
 != '[' )

215 
	`sy¡ax_îr‹
( "bad 'if' condition" );

216 
≤t
++;

218 
li°
 = 
œ°
 = 
NULL
;

221 
c⁄dôi⁄
 * 
c⁄d
;

224  *
≤t
 == ' ' || *pnt == '\t' )

225 
≤t
++;

226 i‡–*
≤t
 == '\0' )

227 
	`sy¡ax_îr‹
( "unterminated 'if' condition" );

228 i‡–*
≤t
 == ']' )

229  
li°
;

232 
c⁄d
 = 
	`mÆloc
( (*cond) );

233 
	`mem£t
–
c⁄d
, 0, (*cond) );

234 i‡–
œ°
 =
NULL
 )

235 { 
li°
 = 
œ°
 = 
c⁄d
; 
¥ev
 = 
NULL
; }

237 { 
¥ev
 = 
œ°
;Üa°->
√xt
 = 
c⁄d
;Üast = cond; }

240 i‡–*
≤t
 == '-' &&Önt[1] == 'a' )

242 i‡–! 
¥ev
 || (Öªv->
›
 !
›_v¨übÀ
 &&Öªv->› !
›_c⁄°™t
 ) )

243 
	`sy¡ax_îr‹
( "incorrectárgument" );

244 
c⁄d
->
›
 = 
›_™d
; 
≤t
 += 2; ;

247 i‡–*
≤t
 == '-' &&Önt[1] == 'o' )

249 i‡–! 
¥ev
 || (Öªv->
›
 !
›_v¨übÀ
 &&Öªv->› !
›_c⁄°™t
 ) )

250 
	`sy¡ax_îr‹
( "incorrectárgument" );

251 
c⁄d
->
›
 = 
›_‹
; 
≤t
 += 2; ;

254 i‡–*
≤t
 == '!' &&Önt[1] == '=' )

256 i‡–! 
¥ev
 || (Öªv->
›
 !
›_v¨übÀ
 &&Öªv->› !
›_c⁄°™t
 ) )

257 
	`sy¡ax_îr‹
( "incorrectárgument" );

258 
c⁄d
->
›
 = 
›_√q
; 
≤t
 += 2; ;

261 i‡–*
≤t
 == '=' )

263 i‡–! 
¥ev
 || (Öªv->
›
 !
›_v¨übÀ
 &&Öªv->› !
›_c⁄°™t
 ) )

264 
	`sy¡ax_îr‹
( "incorrectárgument" );

265 
c⁄d
->
›
 = 
›_eq
; 
≤t
 += 1; ;

268 i‡–*
≤t
 == '!' )

270 i‡–
¥ev
 && (Öªv->
›
 !
›_™d
 &&Öªv->› !
›_‹


271 && 
¥ev
->
›
 !
›_b™g
 ) )

272 
	`sy¡ax_îr‹
( "incorrectárgument" );

273 
c⁄d
->
›
 = 
›_b™g
; 
≤t
 += 1; ;

276 i‡–*
≤t
 == '"' )

278 c⁄° * 
w‹d
;

280 i‡–
¥ev
 && (Öªv->
›
 =
›_v¨übÀ
 ||Öªv->› =
›_c⁄°™t
 ) )

281 
	`sy¡ax_îr‹
( "incorrectárgument" );

283 
≤t
++;

284 i‡–*
≤t
 == '$' )

285 { 
c⁄d
->
›
 = 
›_v¨übÀ
; 
≤t
++; }

287 { 
c⁄d
->
›
 = 
›_c⁄°™t
; }

290 
w‹d
 = 
≤t
;

293 i‡–*
≤t
 == '\0' )

294 
	`sy¡ax_îr‹
( "unterminated double quote" );

295 i‡–*
≤t
 == '"' )

297 
≤t
++;

302 * 
°r
 = 
	`mÆloc
–
≤t
 - 
w‹d
 + 1 );

303 
	`mem˝y
–
°r
, 
w‹d
, 
≤t
 - word );

304 
°r
 [
≤t
 - 
w‹d
] = '\0';

305 i‡–
c⁄d
->
›
 =
›_v¨übÀ
 )

307 
c⁄d
->
«meödex
 = 
	`gë_v¨num
–
°r
 );

308 
	`‰ì
–
°r
 );

312 
c⁄d
->
°r
 = str;

316 
≤t
++;

321 
	`sy¡ax_îr‹
( "bad if condition" );

323 
	}
}

331 c⁄° * 
	$tokíize_choi˚s
–
kc⁄fig
 * 
cfg_choo£
,

332 c⁄° * 
≤t
 )

334 
deÁu…_checked
 = 0;

337 
kc⁄fig
 * 
cfg
;

338 * 
buf„r
 = 
	`mÆloc
( 64 );

341  *
≤t
 == ' ' || *pnt == '\t' )

342 
≤t
++;

343 i‡–*
≤t
 == '\0' )

344  
≤t
;

347 
cfg
 = 
	`mÆloc
( (*cfg) );

348 
	`mem£t
–
cfg
, 0, (*cfg) );

349 i‡–
c⁄fig_œ°
 =
NULL
 )

350 { 
c⁄fig_œ°
 = 
c⁄fig_li°
 = 
cfg
; }

352 { 
c⁄fig_œ°
->
√xt
 = 
cfg
; config_last = cfg; }

355 
cfg
->
tokí
 = 
tokí_choi˚_ôem
;

356 
cfg
->
cfg_∑ª¡
 = 
cfg_choo£
;

357 
≤t
 = 
	`gë_°rög
–≤t, &
cfg
->
œbñ
 );

358 i‡–! 
deÁu…_checked
 &&

359 ! 
	`°∫cmp
–
cfg
->
œbñ
, 
cfg_choo£
->
vÆue
, 
	`°æí
( cfg_choose->value ) ) )

361 
deÁu…_checked
 = 1;

362 
	`‰ì
–
cfg_choo£
->
vÆue
 );

363 
cfg_choo£
->
vÆue
 = 
cfg
->
œbñ
;

365  *
≤t
 == ' ' || *pnt == '\t' )

366 
≤t
++;

367 
≤t
 = 
	`gë_°rög
–≤t, &
buf„r
 );

368 
cfg
->
«meödex
 = 
	`gë_v¨num
–
buf„r
 );

370 i‡–! 
deÁu…_checked
 )

371 
	`sy¡ax_îr‹
( "bad 'choice' default value" );

372  
≤t
;

373 
	}
}

380 
	$tokíize_löe
–c⁄° * 
≤t
 )

382 
kc⁄fig
 * 
œ°_míu›ti⁄
 = 
NULL
;

383 
e_tokí
 
tokí
;

384 
kc⁄fig
 * 
cfg
;

385 
dïídícy
 ** 
dï_±r
;

386 * 
buf„r
 = 
	`mÆloc
( 64 );

389  *
≤t
 == ' ' || *pnt == '\t' )

390 
≤t
++;

396 
	#m©ch_tokí
(
t
, 
s
) \

397 i‡(
	`°∫cmp
(
≤t
, 
s
, 
	`°æí
(s)Ë=0Ë{ 
tokí
 = 
t
;Ö¡ +°æí(s); ; }

	)

399 
tokí
 = 
tokí_UNKNOWN
;

400  *
≤t
 )

410 
	`m©ch_tokí
–
tokí_boﬁ
, "bool" );

414 
	`m©ch_tokí
–
tokí_choi˚_hódî
, "choice" );

415 
	`m©ch_tokí
–
tokí_commít
, "comment" );

419 
	`m©ch_tokí
–
tokí_deföe_boﬁ
, "define_bool" );

420 
	`m©ch_tokí
–
tokí_deföe_hex
, "define_hex" );

421 
	`m©ch_tokí
–
tokí_deföe_öt
, "define_int" );

422 
	`m©ch_tokí
–
tokí_deföe_°rög
, "define_string" );

423 
	`m©ch_tokí
–
tokí_deföe_åi°©e
, "define_tristate" );

424 
	`m©ch_tokí
–
tokí_dï_boﬁ
, "dep_bool" );

425 
	`m©ch_tokí
–
tokí_dï_mboﬁ
, "dep_mbool" );

426 
	`m©ch_tokí
–
tokí_dï_åi°©e
, "dep_tristate" );

430 
	`m©ch_tokí
–
tokí_ñ£
, "else" );

431 
	`m©ch_tokí
–
tokí_ídmíu
, "endmenu" );

435 
	`m©ch_tokí
–
tokí_fi
, "fi" );

439 
	`m©ch_tokí
–
tokí_hex
, "hex" );

443 
	`m©ch_tokí
–
tokí_if
, "if" );

444 
	`m©ch_tokí
–
tokí_öt
, "int" );

448 
	`m©ch_tokí
–
tokí_maömíu_«me
, "mainmenu_name" );

449 
	`m©ch_tokí
–
tokí_maömíu_›ti⁄
, "mainmenu_option" );

453 
	`m©ch_tokí
–
tokí_sour˚
, "source" );

454 
	`m©ch_tokí
–
tokí_°rög
, "string" );

458 
	`m©ch_tokí
–
tokí_thí
, "then" );

459 
	`m©ch_tokí
–
tokí_åi°©e
, "tristate" );

463 
	`m©ch_tokí
–
tokí_un£t
, "unset" );

467 #unde‡
m©ch_tokí


469 i‡–
tokí
 =
tokí_sour˚
 )

471  *
≤t
 == ' ' || *pnt == '\t' )

472 
≤t
++;

473 
	`do_sour˚
–
≤t
 );

477 i‡–
tokí
 =
tokí_thí
 )

479 i‡–
c⁄fig_œ°
 !
NULL
 && c⁄fig_œ°->
tokí
 =
tokí_if
 )

481 
	`sy¡ax_îr‹
( "bogus 'then'" );

485 i‡–
tokí
 =
tokí_un£t
 )

487 
	`Ârötf
–
°dîr
, "Ignoring 'unset' command\n" );

492 i‡–
tokí
 =
tokí_UNKNOWN
 ) {

493 *
msg
 = 
	`mÆloc
(
	`°æí
(
≤t
) + 20);

494 
	`•rötf
(
msg
, "unknow¿comm™d: %s", 
≤t
);

495 
	`sy¡ax_îr‹
–
msg
 );

496 
	`‰ì
(
msg
);

502 
cfg
 = 
	`mÆloc
( (*cfg) );

503 
	`mem£t
–
cfg
, 0, (*cfg) );

504 i‡–
c⁄fig_œ°
 =
NULL
 )

505 { 
c⁄fig_œ°
 = 
c⁄fig_li°
 = 
cfg
; }

507 { 
c⁄fig_œ°
->
√xt
 = 
cfg
; config_last = cfg; }

512  *
≤t
 == ' ' || *pnt == '\t' )

513 
≤t
++;

515 
cfg
->
tokí
 =Åoken;

516  
tokí
 )

519 
	`sy¡ax_îr‹
( "unknownÅoken" );

521 
tokí_boﬁ
:

522 
tokí_åi°©e
:

523 
≤t
 = 
	`gë_q°rög
 (Ö¡, &
cfg
->
œbñ
 );

524 
≤t
 = 
	`gë_°rög
 (Ö¡, &
buf„r
 );

525 
cfg
->
«meödex
 = 
	`gë_v¨num
–
buf„r
 );

528 
tokí_choi˚_hódî
:

530 
choo£_numbî
 = 0;

531 * 
choi˚_li°
;

533 
≤t
 = 
	`gë_q°rög
 (Ö¡, &
cfg
->
œbñ
 );

534 
≤t
 = 
	`gë_q°rög
 (Ö¡, &
choi˚_li°
 );

535 
≤t
 = 
	`gë_°rög
 (Ö¡, &
cfg
->
vÆue
 );

536 
cfg
->
«meödex
 = -(
choo£_numbî
++);

537 
	`tokíize_choi˚s
–
cfg
, 
choi˚_li°
 );

538 
	`‰ì
–
choi˚_li°
 );

542 
tokí_commít
:

543 
≤t
 = 
	`gë_q°rög
’¡, &
cfg
->
œbñ
);

544 i‡–
œ°_míu›ti⁄
 !
NULL
 )

546 
≤t
 = 
	`gë_q°rög
’¡, &
cfg
->
œbñ
);

547 i‡(
cfg
->
œbñ
 =
NULL
)

548 
	`sy¡ax_îr‹
( "missing commentÅext" );

549 
œ°_míu›ti⁄
->
œbñ
 = 
cfg
->label;

550 
œ°_míu›ti⁄
 = 
NULL
;

554 
tokí_deföe_boﬁ
:

555 
tokí_deföe_åi°©e
:

556 
≤t
 = 
	`gë_°rög
–≤t, &
buf„r
 );

557 
cfg
->
«meödex
 = 
	`gë_v¨num
–
buf„r
 );

558  *
≤t
 == ' ' || *pnt == '\t' )

559 
≤t
++;

560 i‡––
≤t
[0] == 'Y' ||Önt[0] == 'M' ||Önt[0] == 'N'

561 || 
≤t
[0] == 'y' ||Önt[0] == 'm' ||Önt[0] == 'n' )

562 && ( 
≤t
[1] == '\0' ||Önt[1] == ' ' ||Önt[1] == '\t' ) )

564 i‡–*
≤t
 ='n' || *≤à='N' ) 
cfg
->
vÆue
 = 
	`°rdup
( "CONSTANT_N" );

565 i‡–*
≤t
 ='y' || *≤à='Y' ) 
cfg
->
vÆue
 = 
	`°rdup
( "CONSTANT_Y" );

566 i‡–*
≤t
 ='m' || *≤à='M' ) 
cfg
->
vÆue
 = 
	`°rdup
( "CONSTANT_M" );

568 i‡–*
≤t
 == '$' )

570 
≤t
++;

571 
≤t
 = 
	`gë_°rög
–≤t, &
cfg
->
vÆue
 );

575 
	`sy¡ax_îr‹
( "unknown define_bool value" );

577 
	`gë_v¨num
–
cfg
->
vÆue
 );

580 
tokí_deföe_hex
:

581 
tokí_deföe_öt
:

582 
≤t
 = 
	`gë_°rög
–≤t, &
buf„r
 );

583 
cfg
->
«meödex
 = 
	`gë_v¨num
–
buf„r
 );

584 
≤t
 = 
	`gë_°rög
–≤t, &
cfg
->
vÆue
 );

587 
tokí_deföe_°rög
:

588 
≤t
 = 
	`gë_°rög
–≤t, &
buf„r
 );

589 
cfg
->
«meödex
 = 
	`gë_v¨num
–
buf„r
 );

590 
≤t
 = 
	`gë_qnq°rög
–≤t, &
cfg
->
vÆue
 );

591 i‡(
cfg
->
vÆue
 =
NULL
)

592 
	`sy¡ax_îr‹
( "missing value" );

595 
tokí_dï_boﬁ
:

596 
tokí_dï_mboﬁ
:

597 
tokí_dï_åi°©e
:

598 
≤t
 = 
	`gë_q°rög
 (Ö¡, &
cfg
->
œbñ
 );

599 
≤t
 = 
	`gë_°rög
 (Ö¡, &
buf„r
 );

600 
cfg
->
«meödex
 = 
	`gë_v¨num
–
buf„r
 );

602  *
≤t
 == ' ' || *pnt == '\t' )

603 
≤t
++;

605 
dï_±r
 = &(
cfg
->
dïíd
);

608 *
dï_±r
 = (
dïídícy
 *Ë
	`mÆloc
( ( dependency ) );

609 (*
dï_±r
)->
√xt
 = 
NULL
;

611 i‡––
≤t
[0] == 'Y' ||Önt[0] == 'M' ||Önt[0] == 'N'

612 || 
≤t
[0] == 'y' ||Önt[0] == 'm' ||Önt[0] == 'n' )

613 && ( 
≤t
[1] == '\0' ||Önt[1] == ' ' ||Önt[1] == '\t' ) )

616 i‡–
≤t
[0] == 'Y' ||Önt[0] == 'y' )

617 (*
dï_±r
)->
«me
 = 
	`°rdup
( "CONSTANT_Y" );

618 i‡–
≤t
[0] == 'N' ||Önt[0] == 'n' )

619 (*
dï_±r
)->
«me
 = 
	`°rdup
( "CONSTANT_N" );

621 (*
dï_±r
)->
«me
 = 
	`°rdup
( "CONSTANT_M" );

622 
≤t
++;

623 
	`gë_v¨num
–(*
dï_±r
)->
«me
 );

625 i‡–*
≤t
 == '$' )

627 
≤t
++;

628 
≤t
 = 
	`gë_°rög
–≤t, &(*
dï_±r
)->
«me
 );

629 
	`gë_v¨num
–(*
dï_±r
)->
«me
 );

633 
	`sy¡ax_îr‹
( "can't handle dep_bool/dep_mbool/dep_tristate condition" );

635 
dï_±r
 = &(*dï_±r)->
√xt
;

636  *
≤t
 == ' ' || *pnt == '\t' )

637 
≤t
++;

638 }  *
≤t
 );

644 
Áke_if
 [8192];

645 
dïídícy
 * 
dï
;

646 
c⁄dôi⁄
 ** 
c⁄d_±r
;

647 
fú°
 = 1;

649 
c⁄d_±r
 = &(
cfg
->
c⁄d
);

650  
dï
 = 
cfg
->
dïíd
; dï; dï = dï->
√xt
 )

652 i‡–
tokí
 =
tokí_dï_åi°©e


653 && ! 
	`°rcmp
–
dï
->
«me
, "CONSTANT_M" ) )

657 i‡–
fú°
 )

659 
fú°
 = 0;

663 *
c⁄d_±r
 = 
	`mÆloc
–(
c⁄dôi⁄
) );

664 
	`mem£t
–*
c⁄d_±r
, 0, (
c⁄dôi⁄
) );

665 (*
c⁄d_±r
)->
›
 = 
›_™d
;

666 
c⁄d_±r
 = &(*c⁄d_±r)->
√xt
;

668 *
c⁄d_±r
 = 
	`mÆloc
–(
c⁄dôi⁄
) );

669 
	`mem£t
–*
c⁄d_±r
, 0, (
c⁄dôi⁄
) );

670 (*
c⁄d_±r
)->
›
 = 
›_Õ¨í
;

671 i‡–
tokí
 =
tokí_dï_boﬁ
 )

672 
	`•rötf
–
Áke_if
, "[ \"$%s\" = \"y\" -o \"$%s\" = \"\" ];Åhen",

673 
dï
->
«me
, dep->name );

675 
	`•rötf
–
Áke_if
, "[ \"$%s\" = \"y\" -o \"$%s\" = \"m\" -o \"$%s\" = \"\" ];Åhen",

676 
dï
->
«me
, dep->name, dep->name );

677 (*
c⁄d_±r
)->
√xt
 = 
	`tokíize_if
–
Áke_if
 );

678  *
c⁄d_±r
 )

679 
c⁄d_±r
 = &(*c⁄d_±r)->
√xt
;

680 *
c⁄d_±r
 = 
	`mÆloc
–(
c⁄dôi⁄
) );

681 
	`mem£t
–*
c⁄d_±r
, 0, (
c⁄dôi⁄
) );

682 (*
c⁄d_±r
)->
›
 = 
›_Ω¨í
;

683 
c⁄d_±r
 = &(*c⁄d_±r)->
√xt
;

688 
tokí_ñ£
:

689 
tokí_ídmíu
:

690 
tokí_fi
:

693 
tokí_hex
:

694 
tokí_öt
:

695 
≤t
 = 
	`gë_q°rög
 (Ö¡, &
cfg
->
œbñ
 );

696 
≤t
 = 
	`gë_°rög
 (Ö¡, &
buf„r
 );

697 
cfg
->
«meödex
 = 
	`gë_v¨num
–
buf„r
 );

698 
≤t
 = 
	`gë_°rög
 (Ö¡, &
cfg
->
vÆue
 );

701 
tokí_°rög
:

702 
≤t
 = 
	`gë_q°rög
 (Ö¡, &
cfg
->
œbñ
 );

703 
≤t
 = 
	`gë_°rög
 (Ö¡, &
buf„r
 );

704 
cfg
->
«meödex
 = 
	`gë_v¨num
–
buf„r
 );

705 
≤t
 = 
	`gë_qnq°rög
 (Ö¡, &
cfg
->
vÆue
 );

706 i‡(
cfg
->
vÆue
 =
NULL
) {

707 
	`Ârötf
(
°dîr
, "%s", 
cfg
->
œbñ
);

708 
	`sy¡ax_îr‹
( "missing initial value" );

712 
tokí_if
:

713 
cfg
->
c⁄d
 = 
	`tokíize_if
–
≤t
 );

716 
tokí_maömíu_«me
:

717 
≤t
 = 
	`gë_q°rög
–≤t, &
cfg
->
œbñ
 );

720 
tokí_maömíu_›ti⁄
:

721 i‡–
	`°∫cmp
–
≤t
, "next_comment", 12 ) == 0 )

722 
œ°_míu›ti⁄
 = 
cfg
;

724 
≤t
 = 
	`gë_q°rög
–≤t, &
cfg
->
œbñ
 );

727 
tokí_un£t
:

728 
≤t
 = 
	`gë_°rög
–≤t, &
buf„r
 );

729 
cfg
->
«meödex
 = 
	`gë_v¨num
–
buf„r
 );

730  *
≤t
 == ' ' || *pnt == '\t' )

731 
≤t
++;

732 *
≤t
)

734 
cfg
->
√xt
 = (
kc⁄fig
 *Ë
	`mÆloc
( (kconfig) );

735 
	`mem£t
–
cfg
->
√xt
, 0, (
kc⁄fig
) );

736 
cfg
 = cfg->
√xt
;

737 
cfg
->
tokí
 = 
tokí_un£t
;

738 
≤t
 = 
	`gë_°rög
–≤t, &
buf„r
 );

739 
cfg
->
«meödex
 = 
	`gë_v¨num
–
buf„r
 );

740  *
≤t
 == ' ' || *pnt == '\t' )

741 
≤t
++;

746 
	}
}

753 
	$do_sour˚
–c⁄° * 
fûíame
 )

755 
buf„r
 [16384];

756 
FILE
 * 
öfûe
;

757 c⁄° * 
ﬁd_fûe
;

758 
ﬁd_löío
;

759 
off£t
;

762 i‡–
	`°rcmp
–
fûíame
, "-" ) == 0 )

763 
öfûe
 = 
°dö
;

765 
öfûe
 = 
	`f›í
–
fûíame
, "r" );

768 i‡–
öfûe
 =
NULL
 )

770 
	`•rötf
–
buf„r
, "../%s", 
fûíame
 );

771 
öfûe
 = 
	`f›í
–
buf„r
, "r" );

774 i‡–
öfûe
 =
NULL
 )

776 
	`•rötf
–
buf„r
, "u«bÀÅÿ›í %s", 
fûíame
 );

777 
	`sy¡ax_îr‹
–
buf„r
 );

781 
ﬁd_fûe
 = 
cuºít_fûe
;

782 
ﬁd_löío
 = 
löío
;

783 
cuºít_fûe
 = 
fûíame
;

784 
löío
 = 0;

787  
off£t
 = 0; ; )

789 * 
≤t
;

792 
	`fgës
–
buf„r
 + 
off£t
, (buf„rË- off£t, 
öfûe
 );

793 i‡–
	`„of
–
öfûe
 ) )

795 
löío
++;

798 
≤t
 = 
buf„r
 + 
	`°æí
(buffer) - 1;

799 i‡–*
≤t
 == '\n' )

800 *
≤t
-- = '\0';

803 i‡–*
≤t
 == '\\' )

805 
off£t
 = 
≤t
 - 
buf„r
;

810 
	`tokíize_löe
–
buf„r
 );

811 
off£t
 = 0;

815 i‡–
öfûe
 !
°dö
 )

816 
	`f˛o£
–
öfûe
 );

817 
cuºít_fûe
 = 
ﬁd_fûe
;

818 
löío
 = 
ﬁd_löío
;

820 
	}
}

827 
	$maö
–
¨gc
, c⁄° * 
¨gv
 [] )

829 
	`do_sour˚
 ( "-" );

830 
	`fix_c⁄dôi⁄Æs
 ( 
c⁄fig_li°
 );

831 
	`dump_tk_s¸ùt
 ( 
c⁄fig_li°
 );

833 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/scripts/tkparse.h

9 
	ee_tokí


11 
	mtokí_UNKNOWN
,

12 
	mtokí_boﬁ
,

13 
	mtokí_choi˚_hódî
,

14 
	mtokí_choi˚_ôem
,

15 
	mtokí_commít
,

16 
	mtokí_deföe_boﬁ
,

17 
	mtokí_deföe_hex
,

18 
	mtokí_deföe_öt
,

19 
	mtokí_deföe_°rög
,

20 
	mtokí_deföe_åi°©e
,

21 
	mtokí_dï_boﬁ
,

22 
	mtokí_dï_mboﬁ
,

23 
	mtokí_dï_åi°©e
,

24 
	mtokí_ñ£
,

25 
	mtokí_ídmíu
,

26 
	mtokí_fi
,

27 
	mtokí_hex
,

28 
	mtokí_if
,

29 
	mtokí_öt
,

30 
	mtokí_maömíu_«me
,

31 
	mtokí_maömíu_›ti⁄
,

32 
	mtokí_sour˚
,

33 
	mtokí_°rög
,

34 
	mtokí_thí
,

35 
	mtokí_åi°©e
,

36 
	mtokí_un£t
,

43 
	e›î©‹


45 
	m›_eq
,

46 
	m›_√q
,

47 
	m›_™d
,

48 
	m›_™d1
,

49 
	m›_‹
,

50 
	m›_b™g
,

51 
	m›_Õ¨í
,

52 
	m›_Ω¨í
,

53 
	m›_c⁄°™t
,

54 
	m›_v¨übÀ
,

55 
	m›_åue
,

56 
	m›_Ál£
,

57 
	m›_nuked


72 
	sc⁄dôi⁄


74 
c⁄dôi⁄
 * 
	m√xt
;

75 
›î©‹
 
	m›
;

76 c⁄° * 
	m°r
;

77 
	m«meödex
;

84 
	sdïídícy


86 * 
	m«me
;

87 
dïídícy
 * 
	m√xt
;

94 
	skc⁄fig


96 
kc⁄fig
 * 
	m√xt
;

97 
e_tokí
 
	mtokí
;

98 
	m«meödex
;

99 * 
	mœbñ
;

100 * 
	mvÆue
;

101 
c⁄dôi⁄
 * 
	mc⁄d
;

102 
dïídícy
 * 
	mdïíd
;

103 
kc⁄fig
 * 
	mcfg_∑ª¡
;

106 
	mmíu_numbî
;

107 
	mmíu_löe
;

108 
kc⁄fig
 * 
	mmíu_√xt
;

111 
	sv¨übÀ


113 * 
	m«me
;

114 
	mdeföed
;

115 
	mglobÆ_wrôãn
;

118 
v¨übÀ
 
v¨èbÀ
[];

119 
max_v¨num
;

125 
fix_c⁄dôi⁄Æs
 ( 
kc⁄fig
 * 
scfg
 );

126 
dump_tk_s¸ùt
 ( 
kc⁄fig
 * 
scfg
 );

127 
gë_v¨num
 ( * 
«me
 );

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/stage1/boot.c

1 
	~"c⁄figs/π2880.h
"

2 
	~<comm⁄.h
>

3 
	~"π_mm≠.h
"

6 
n‹_öô
();

7 
«nd_öô
();

8 
•i_öô
();

10 
n‹_ªad
(
uöt32_t
 
d°
, uöt32_à
§c_off
, uöt32_à
size
);

11 
«nd_ªad
(
uöt32_t
 
d°
, uöt32_à
§c_off
, uöt32_à
size
);

12 
•i_ªad
(
uöt32_t
 
d°
, uöt32_à
§c_off
, uöt32_à
size
);

15 
	$udñay
(
u£c
)

17 
	#MIPS_CPU_FREQ_US
 (320)

	)

18 vﬁ©ûê
cou¡
 = (
u£c
 * 
MIPS_CPU_FREQ_US
);

20 
asm
 volatile (".setÇoreorder \n"

24 :"r"(
cou¡
)

26 
	}
}

28 
	envøm_devi˚
 {

29 
	mNOR_FLASH
 = 1<<1,

30 
	mNAND_FLASH
 = 1<<2,

31 
	mSPI_FLASH
 = 1<<3,

32 } 
	tnvøm_t
;

35 
ölöe
 
nvøm_t
 
	$boŸ_‰om
()

38 #i‡
	`deföed
 (
CFG_ENV_IS_IN_FLASH
)

39  
NOR_FLASH
;

40 #ñi‡
	`deföed
 (
CFG_ENV_IS_IN_SPI
)

41  
SPI_FLASH
;

42 #ñi‡
	`deföed
 (
CFG_ENV_IS_IN_NAND
)

43  
NAND_FLASH
;

47 
	}
}

50 
nvøm_t
 
	gøm
 = 
NOR_FLASH
;

52 (*
	tNVRAM_READ_FUNC
)(
	tuöt32_t
 , uint32_t , uint32_t);

54 
ölöe
 
	$nvøm_öô
(
NVRAM_READ_FUNC
 *
nvøm_ªad
)

56 
øm
 = 
	`boŸ_‰om
();

58 i‡(
øm
 =
NOR_FLASH
) {

60 *
nvøm_ªad
 = 
n‹_ªad
;

62 i‡(
øm
 =
NAND_FLASH
) {

63 
	`«nd_öô
();

64 *
nvøm_ªad
 = 
«nd_ªad
;

66 i‡(
øm
 =
SPI_FLASH
) {

67 
	`•i_öô
();

68 *
nvøm_ªad
 = 
•i_ªad
;

72 
	}
}

74 
	$lﬂd_°age2
()

76 
image_hódî_t
 
hódî
[1];

77 
NVRAM_READ_FUNC
 
nvøm_ªad
;

79 (*
°age2
)(, **);

82 
	`nvøm_öô
(&
nvøm_ªad
);

85 
	`nvøm_ªad
((
uöt32_t
)
hódî
, 
CONFIG_STAGE2_OFFSET
, (header));

88 
	`nvøm_ªad
(
	`¡ohl
((
uöt32_t
)
hódî
[0].
ih_lﬂd
), 
CONFIG_STAGE2_OFFSET
 + (hódî),Çtohl(hódî[0].
ih_size
));

91 
°age2
 = ((*)(, **))
	`¡ohl
(
hódî
[0].
ih_ï
);

92 
	`°age2
(0, 0);

95 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/stage1/gdma.c

1 
	~<comm⁄.h
>

2 
	~"π_mm≠.h
"

6 
	#MAX_GDMA_CHANNEL
 8

	)

7 
	#MOD_VERSION
 "0.3"

	)

8 
	#RALINK_GDMA_CTRL_BASE
 (
RALINK_GDMA_BASE
)

	)

9 
	#RALINK_GDMAISTS
 (
RALINK_GDMA_BASE
 + 0x80)

	)

10 
	#RALINK_GDMASSTS
 (
RALINK_GDMA_BASE
 + 0x84)

	)

11 
	#RALINK_GDMAGCT
 (
RALINK_GDMA_BASE
 + 0x88)

	)

13 
	#GDMA_READ_REG
(
addr
Ë
	`À32_to_˝u
(*(vﬁ©ûê
u32
 *)◊ddr))

	)

14 
	#GDMA_WRITE_REG
(
addr
, 
vÆ
Ë*((vﬁ©ûê
uöt32_t
 *)◊ddr)Ë
	`˝u_to_À32
(vÆ)

	)

16 
	#RALINK_IRQ_ADDR
 
RALINK_INTCL_BASE


	)

17 
	#RALINK_REG_INTENA
 (
RALINK_IRQ_ADDR
 + 0x34)

	)

18 
	#RALINK_REG_INTDIS
 (
RALINK_IRQ_ADDR
 + 0x38)

	)

26 
	#GDMA_SRC_REG
(
ch
Ë(
RALINK_GDMA_BASE
 + ch*16)

	)

27 
	#GDMA_DST_REG
(
ch
Ë(
	`GDMA_SRC_REG
(chË+ 4)

	)

28 
	#GDMA_CTRL_REG
(
ch
Ë(
	`GDMA_DST_REG
(chË+ 4)

	)

29 
	#GDMA_CTRL_REG1
(
ch
Ë(
	`GDMA_CTRL_REG
(chË+ 4)

	)

32 
	#TX_DONE_INT_STATUS_OFFSET
 0

	)

33 
	#UMASK_INT_STATUS_OFFSET
 16

	)

36 
	#CH_UNMASK_INTEBL_OFFSET
 4

	)

37 
	#NEXT_UNMASK_CH_OFFSET
 1

	)

38 
	#CH_MASK_OFFSET
 0

	)

41 
	#MODE_SEL_OFFSET
 0

	)

42 
	#CH_EBL_OFFSET
 1

	)

43 
	#INT_EBL_OFFSET
 2

	)

44 
	#BRST_SIZE_OFFSET
 3

	)

45 
	#DST_BRST_MODE_OFFSET
 6

	)

46 
	#SRC_BRST_MODE_OFFSET
 7

	)

47 
	#DST_DMA_REQ_OFFSET
 8

	)

48 
	#SRC_DMA_REQ_OFFSET
 12

	)

49 
	#TRANS_CNT_OFFSET
 16

	)

51 
	#GDMA_PCM0_RX0
 0

	)

52 
	#GDMA_PCM0_RX1
 1

	)

53 
	#GDMA_PCM0_TX0
 2

	)

54 
	#GDMA_PCM0_TX1
 3

	)

56 
	#GDMA_PCM1_RX0
 4

	)

57 
	#GDMA_PCM1_RX1
 5

	)

58 
	#GDMA_PCM1_TX0
 6

	)

59 
	#GDMA_PCM1_TX1
 7

	)

61 
	#GDMA_I2S_TX0
 4

	)

62 
	#GDMA_I2S_TX1
 5

	)

65 #ifde‡
GDMA_DEBUG


66 
	#GDMA_PRINT
(
fmt
, 
¨gs
...Ë
	`¥ötk
(
KERN_INFO
 "GDMA: " fmt, ##árgs)

	)

68 
	#GDMA_PRINT
(
fmt
, 
¨gs
...Ë{ }

	)

75 
	eGdmaBu°îMode
 {

76 
	mINC_MODE
=0,

77 
	mFIX_MODE
=1

80 
	eGdmaBu°îSize
 {

81 
	mBUSTER_SIZE_4B
=0,

82 
	mBUSTER_SIZE_8B
=1,

83 
	mBUSTER_SIZE_16B
=2,

84 
	mBUSTER_SIZE_32B
=3,

85 
	mBUSTER_SIZE_64B
=4

88 
	eGdmaDmaReqNum
 {

89 
	mDMA_REQ0
=0,

90 
	mDMA_NAND_FLASH_REQ
=1,

91 
	mDMA_I2S_REQ
=2,

92 
	mDMA_PCM_RX0_REQ
=3,

93 
	mDMA_PCM_RX1_REQ
=4,

94 
	mDMA_PCM_TX0_REQ
=5,

95 
	mDMA_PCM_TX1_REQ
=6,

96 
	mDMA_REQ7
=7,

97 
	mDMA_MEM_REQ
=8

101 
	#DMA_CHNUM
 (0)

	)

103 
ölöe
 
	$«nd_dma_sync
()

106 
uöt32_t
 
d©a
;

107 
d©a
 = 
	`GDMA_READ_REG
(
	`GDMA_CTRL_REG1
(
DMA_CHNUM
));

108 
d©a
 &~–0x01 << 
CH_MASK_OFFSET
);

109 
	`GDMA_WRITE_REG
(
	`GDMA_CTRL_REG1
(
DMA_CHNUM
), 
d©a
);

112 !(
	`GDMA_READ_REG
(
RALINK_GDMAISTS
Ë& (1<<
DMA_CHNUM
))) {

113 
	`udñay
(1);

117 
	`GDMA_WRITE_REG
(
RALINK_GDMAISTS
, 1<<
DMA_CHNUM
);

120 
	}
}

122 
ölöe
 
	$ªÀa£_dma_buf
()

124 
uöt32_t
 
d©a
;

126 
d©a
 = 
	`GDMA_READ_REG
(
	`GDMA_CTRL_REG
(
DMA_CHNUM
));

127 
d©a
 &~–0x01 << 
CH_EBL_OFFSET
);

128 
	`GDMA_WRITE_REG
(
	`GDMA_CTRL_REG
(
DMA_CHNUM
), 
d©a
);

130 
	}
}

132 
ölöe
 
	$£t_gdma_ch
(
d°
,

133 
§c
, 
Àn
, 
bur°_size
,

134 
so·_mode
, 
§c_ªq_ty≥
, 
d°_ªq_ty≥
,

135 
§c_bur°_mode
, 
d°_bur°_mode
)

137 
uöt32_t
 
d©a
;

140 
	`GDMA_WRITE_REG
(
	`GDMA_SRC_REG
(
DMA_CHNUM
), (
§c
 & 0x1fffffff));

143 
	`GDMA_WRITE_REG
(
	`GDMA_DST_REG
(
DMA_CHNUM
), (
d°
 & 0x1fffffff));

152 
d©a
 = 0;

154 
d©a
 |–
DMA_CHNUM
 << 
NEXT_UNMASK_CH_OFFSET
);

155 
d©a
 |–(
so·_mode
 =0Ë<< 
CH_MASK_OFFSET
);

156 
	`GDMA_WRITE_REG
(
	`GDMA_CTRL_REG1
(
DMA_CHNUM
), 
d©a
);

159 
d©a
 = (
Àn
 << 
TRANS_CNT_OFFSET
);

160 
d©a
 |(
§c_ªq_ty≥
 << 
SRC_DMA_REQ_OFFSET
);

161 
d©a
 |(
d°_ªq_ty≥
 << 
DST_DMA_REQ_OFFSET
);

162 
d©a
 |(
§c_bur°_mode
 << 
SRC_BRST_MODE_OFFSET
);

163 
d©a
 |(
d°_bur°_mode
 << 
DST_BRST_MODE_OFFSET
);

164 
d©a
 |(
bur°_size
 << 
BRST_SIZE_OFFSET
);

166 
d©a
 |((
so·_mode
 !0Ë<< 
MODE_SEL_OFFSET
);

167 
d©a
 |(0x01<<
CH_EBL_OFFSET
);

168 
	`GDMA_WRITE_REG
(
	`GDMA_CTRL_REG
(
DMA_CHNUM
), 
d©a
);

173 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/stage1/nandc.c

1 
	~"c⁄figs/π2880.h
"

2 
	~<comm⁄.h
>

3 
	~"π_mm≠.h
"

5 
	#ø_öl
(
addr
Ë(*(vﬁ©ûê*)◊ddr))

	)

6 
	#ø_oué
(
addr
, 
vÆue
Ë(*(vﬁ©ûê*)◊ddrË(vÆue))

	)

7 
	#ø_a‹
(
addr
, 
a_mask
, 
o_vÆue
Ë
	`ø_oué
◊ddr, (
	`ø_öl
◊ddrË& (a_mask)Ë| (o_vÆue))

	)

12 
	#NFC_BASE
 
RALINK_NAND_CTRL_BASE


	)

13 
	#NFC_CTRL
 (
NFC_BASE
 + 0x0)

	)

14 
	#NFC_CONF
 (
NFC_BASE
 + 0x4)

	)

15 
	#NFC_CMD1
 (
NFC_BASE
 + 0x8)

	)

16 
	#NFC_CMD2
 (
NFC_BASE
 + 0xc)

	)

17 
	#NFC_CMD3
 (
NFC_BASE
 + 0x10)

	)

18 
	#NFC_ADDR
 (
NFC_BASE
 + 0x14)

	)

19 
	#NFC_DATA
 (
NFC_BASE
 + 0x18)

	)

20 
	#NFC_ECC
 (
NFC_BASE
 + 0x1c)

	)

21 
	#NFC_STATUS
 (
NFC_BASE
 + 0x20)

	)

22 
	#NFC_INT_EN
 (
NFC_BASE
 + 0x24)

	)

23 
	#NFC_INT_ST
 (
NFC_BASE
 + 0x28)

	)

26 
	#DMA_REQ1
 1

27 
	#DMA_NAND_FLASH_REQ
 
DMA_REQ1


	)

28 
	#BURST_SIZE_4B
 0

	)

29 
	#BURST_SIZE_8B
 1

	)

30 
	#BURST_SIZE_16B
 2

	)

31 
	#BURST_SIZE_32B
 3

	)

32 
	#BURST_SIZE_64B
 4

	)

33 
	#SW_MODE
 1

	)

34 
	#HW_MODE
 0

	)

35 
	#DMA_REQMEM
 0x08

	)

36 
	#TRN_FIX
 1

	)

37 
	#TRN_INC
 0

	)

42 
	#NAND_BYTE_SIZE
 (25)

43 
	#PAGE_SIZE
 (9)

44 
	#PAGE_SHIFT
 1

45 

	)

46 
	#PAGE_SIZE_BYTE
 (1<<
PAGE_SIZE
)

	)

47 
	#COLUMN_ADDR_MASK
 ((1<<(
PAGE_SIZE
-
PAGE_SHIFT
)Ë- 1)

	)

48 
	#COLUMN_ADDR_CYCLE
 (((
PAGE_SIZE
-
PAGE_SHIFT
Ë+ 7)/8)

	)

49 
	#ROW_ADDR_CYCLE
 ((
NAND_BYTE_SIZE
 - 
PAGE_SIZE
 + 7)/8)

	)

50 
	#ADDR_CYCLE
 (
COLUMN_ADDR_CYCLE
 + 
ROW_ADDR_CYCLE
)

	)

52 
_gp
;

53 
	#RELOCATE_OFFSET
 ({
off£t
, 
gŸ
 = ()&
_gp
; \

54 
asm
 vﬁ©ûê("subu %0, $gp, %1\n\t": "Ù"(
off£t
Ë:"r"(&
_gp
)); off£t; })

	)

55 
	#RELOCATE_CALL
(
func
, 
¨g
...Ë({
	`ty≥of
(funcË*
f
 =()(funcË+ 
RELOCATE_OFFSET
; 
	`f
◊rg);})

	)

59 
	$«nd_dma_puŒ
(*
d°
, 
Àn
)

61 
Àn
 > 0) {

62 
	#NFC_FIFO_SIZE_A
 (60)

	)

63 
	#NFC_FIFO_SIZE_B
 (512)

	)

64 
size
 = (
Àn
 > (
NFC_FIFO_SIZE_A
)) ? (NFC_FIFO_SIZE_A) :Üen;

67 
	`£t_gdma_ch
(
d°
, 
NFC_DATA
, 
size
,

68 
BURST_SIZE_4B
, 
HW_MODE
, 
DMA_REQ1
, 
DMA_REQMEM
,

69 
TRN_FIX
, 
TRN_INC
);

72 
	`«nd_dma_sync
();

75 
	`ªÀa£_dma_buf
();

77 
Àn
 -
size
;

78 
d°
 +
size
;

81 
	}
}

83 
	$«nd_öô
()

85 
ªåy
;

88 
	`ø_oué
(
NFC_CMD3
, 0xff);

89 
	`ø_oué
(
NFC_ADDR
, 0xfffffff);

90 
	`ø_oué
(
NFC_CONF
, 0x1021);

91 
	`udñay
(1);

94 
	`ø_oué
(
NFC_CTRL
, 
	`ø_öl
(NFC_CTRL) | 0x02);

95 
	`ø_oué
(
NFC_CTRL
, 
	`ø_öl
(NFC_CTRL) & ~0x02);

96 
	`ø_oué
(
NFC_INT_ST
, 
	`ø_öl
(NFC_INT_ST));

97 
ªåy
 = 100;

98 (
	`ø_öl
(
NFC_INT_ST
Ë& 0x02Ë!0x02 && 
ªåy
--);

99 i‡(
ªåy
 <= 0) {

102 
ªåy
 = 100;

103 (
	`ø_öl
(
NFC_STATUS
Ë& 0x1Ë!0x0 && 
ªåy
--) {

104 
	`udñay
(1);

108 
	}
}

110 #ifde‡
CONFIG_BADBLOCK_CHECK


111 
	$«nd_block_isbad
(
loff_t
 
offs
)

113 
cmd1
, 
bus_addr
, 
c⁄f
;

114 
p
;

115 *
c
;

117 
p
 = 0x80500000L;

119 
	`£t_gdma_ch
(
p
, 
NFC_DATA
, 1,

120 
BURST_SIZE_4B
, 
HW_MODE
, 
DMA_REQ1
, 
DMA_REQMEM
,

121 
TRN_FIX
, 
TRN_INC
);

124 
	`ø_oué
(
NFC_INT_ST
, 
	`ø_öl
(NFC_INT_ST));

125 
cmd1
 = 0x50;

126 
	`ø_oué
(
NFC_CMD1
, 
cmd1
);

127 
bus_addr
 = ((
offs
 >> 
PAGE_SIZE
Ë<< (
COLUMN_ADDR_CYCLE
*8)Ë| (4 & 
COLUMN_ADDR_MASK
);

128 
	`ø_oué
(
NFC_ADDR
, 
bus_addr
);

129 
c⁄f
 = 0x000141 | (
ADDR_CYCLE
 << 16) | (1 << 20);

130 
c⁄f
 |= (1<<2);

131 
	`ø_oué
(
NFC_CONF
, 
c⁄f
);

134 
	`«nd_dma_sync
();

137 
	`ªÀa£_dma_buf
();

139 
c
 = (*)
p
;

140 i‡((*
c
 & 0xff) == 0xff)

143 
	}
}

146 
	#WORK_AROUND_RXB_OV
 1

	)

147 
	$«nd_ªad
(
uöt32_t
 
d°
, uöt32_à
addr
, uöt32_à
size
)

149 
cmd1
, 
c⁄f
;

150 
p
 = 
d°
;

151 
bus_addr
;

152 
Àn
;

154 
	`ø_oué
(
NFC_INT_ST
, 
	`ø_öl
(NFC_INT_ST));

156 
size
 > 0) {

157 
bus_addr
 = ((
addr
 >> 
PAGE_SIZE
Ë<< (
COLUMN_ADDR_CYCLE
*8));

159 #ifde‡
CONFIG_BADBLOCK_CHECK


160 i‡(
	`«nd_block_isbad
(
addr
)) {

161 
addr
 += 0x4000;

166 
bus_addr
 |(
addr
 & 
COLUMN_ADDR_MASK
);

168 
cmd1
 = 0x00 | ((
addr
 >> (
PAGE_SIZE
 - 
PAGE_SHIFT
)) & ((1 << PAGE_SHIFT)-1));

171 
Àn
 = 
PAGE_SIZE_BYTE
 - (
addr
 % PAGE_SIZE_BYTE) ;

172 
Àn
 = (À¿> 
size
) ? size :Üen;

174 #i‡
	`deföed
 (
WORK_AROUND_RXB_OV
)

176 
Àn
 = (len > 60) ? 60 :Üen;

180 
	`£t_gdma_ch
(
p
, 
NFC_DATA
, 
Àn
,

181 
BURST_SIZE_4B
, 
HW_MODE
, 
DMA_REQ1
, 
DMA_REQMEM
,

182 
TRN_FIX
, 
TRN_INC
);

185 
	`ø_oué
(
NFC_INT_ST
, 
	`ø_öl
(NFC_INT_ST));

186 
	`ø_oué
(
NFC_CMD1
, 
cmd1
);

187 
	`ø_oué
(
NFC_ADDR
, 
bus_addr
);

188 
c⁄f
 = 0x000141| ((
ADDR_CYCLE
)<<16Ë| ((
Àn
) << 20);

189 
c⁄f
 |= (1<<2);

190 
	`ø_oué
(
NFC_CONF
, 
c⁄f
);

193 
	`«nd_dma_sync
();

196 
	`ªÀa£_dma_buf
();

198 
addr
 +
Àn
;

199 
size
 -
Àn
;

200 
p
 +
Àn
;

201 
Àn
 -=Üen;

205 
	}
}

208 
	$n‹_dma_puŒ
(*
d°
, *
§c
, 
Àn
)

210 
Àn
 > 0) {

211 
size
 = (
Àn
 > ((1<<16) - 4)) ? ((1<<16) - 4) :Üen;

213 
	`£t_gdma_ch
(
d°
, 
§c
, 
size
,

214 
BURST_SIZE_32B
, 
SW_MODE
, 
DMA_REQMEM
, DMA_REQMEM,

215 
TRN_INC
, TRN_INC);

218 
	`«nd_dma_sync
();

221 
	`ªÀa£_dma_buf
();

223 
Àn
 -
size
;

224 
d°
 +
size
;

225 
§c
 +
size
;

228 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/tools/crc.c

37 #i‚de‡
löt


39 
	gsccsid
[] = "@(#)crc.c 8.1 (Berkeley) 6/17/93";

42 
	~<sys/cdefs.h
>

44 
	~<sys/ty≥s.h
>

46 
	~<°döt.h
>

47 
	~<uni°d.h
>

50 c⁄° 
uöt32_t
 
	g¸˘ab
[] = {

111 
uöt32_t
 
	g¸c_tŸÆ
 = ~0;

114 
	$¸c
(
u_ch¨
* 
p§c
, 
uöt32_t
 *
cvÆ
, 
˛í
)

116 
uöt32_t
 
l¸c
;

117 
ƒ
;

118 
off_t
 
Àn
;

119 
u_ch¨
 *
pbuf
;

120 
tŸÆ_Àn
 = 
˛í
;

121 
	#COMPUTE
(
v¨
, 
ch
Ë(v¨Ë(v¨Ë<< 8 ^ 
¸˘ab
[(v¨Ë>> 24 ^ (ch)]

	)

123 
l¸c
 = 
Àn
 = 0;

124 
¸c_tŸÆ
 = ~crc_total;

126 
pbuf
 = 
p§c
;

127 
tŸÆ_Àn
>0)

129 i‡(
tŸÆ_Àn
 >= 64)

130 
ƒ
 = 64;

132 
ƒ
 = 
tŸÆ_Àn
;

133 
tŸÆ_Àn
-=
ƒ
;

134 
Àn
 +
ƒ
;Çr--; ++
pbuf
) {

135 
	`COMPUTE
(
l¸c
, *
pbuf
);

136 
	`COMPUTE
(
¸c_tŸÆ
, *
pbuf
);

142 ; 
Àn
 != 0;Üen >>= 8) {

143 
	`COMPUTE
(
l¸c
, 
Àn
 & 0xff);

144 
	`COMPUTE
(
¸c_tŸÆ
, 
Àn
 & 0xff);

147 *
cvÆ
 = ~
l¸c
;

148 
¸c_tŸÆ
 = ~crc_total;

150 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/tools/crc32.c

11 #i‚de‡
USE_HOSTCC


12 
	~<comm⁄.h
>

15 
	~"zlib.h
"

17 
	#loˇl
 

	)

18 
	#ZEXPORT


	)

19 
¸c32
 (, const *, );

21 #ifde‡
DYNAMIC_CRC_TABLE


23 
loˇl
 
	g¸c_èbÀ_em±y
 = 1;

24 
loˇl
 
uL⁄gf
 
	g¸c_èbÀ
[256];

25 
loˇl
 
make_¸c_èbÀ
 
OF
(());

51 
loˇl
 
	$make_¸c_èbÀ
()

53 
uL⁄g
 
c
;

54 
n
, 
k
;

55 
uL⁄g
 
pﬁy
;

57 c⁄° 
Byã
 
p
[] = {0,1,2,4,5,7,8,10,11,12,16,22,23,26};

60 
pﬁy
 = 0L;

61 
n
 = 0;Ç < (
p
)/(
Byã
);Ç++)

62 
pﬁy
 |1L << (31 - 
p
[
n
]);

64 
n
 = 0;Ç < 256;Ç++)

66 
c
 = (
uL⁄g
)
n
;

67 
k
 = 0; k < 8; k++)

68 
c
 = c & 1 ? 
pﬁy
 ^ (c >> 1) : c >> 1;

69 
¸c_èbÀ
[
n
] = 
c
;

71 
¸c_èbÀ_em±y
 = 0;

72 
	}
}

77 
loˇl
 c⁄° 
uL⁄gf
 
	g¸c_èbÀ
[256] = {

137 c⁄° 
uL⁄gf
 * 
ZEXPORT
 
	$gë_¸c_èbÀ
()

139 #ifde‡
DYNAMIC_CRC_TABLE


140 i‡(
¸c_èbÀ_em±y
Ë
	`make_¸c_èbÀ
();

142  (c⁄° 
uL⁄gf
 *)
¸c_èbÀ
;

143 
	}
}

147 
	#DO1
(
buf
Ë
¸c
 = 
¸c_èbÀ
[(()¸¯^ (*buf++)Ë& 0xff] ^ (¸¯>> 8);

	)

148 
	#DO2
(
buf
Ë
	`DO1
(buf); DO1(buf);

	)

149 
	#DO4
(
buf
Ë
	`DO2
(buf); DO2(buf);

	)

150 
	#DO8
(
buf
Ë
	`DO4
(buf); DO4(buf);

	)

153 
uL⁄g
 
ZEXPORT
 
	$¸c32
(
¸c
, 
buf
, 
Àn
)

154 
uL⁄g
 
¸c
;

155 c⁄° 
Byãf
 *
buf
;

156 
uI¡
 
Àn
;

158 #ifde‡
DYNAMIC_CRC_TABLE


159 i‡(
¸c_èbÀ_em±y
)

160 
	`make_¸c_èbÀ
();

162 
¸c
 = crc ^ 0xffffffffL;

163 
Àn
 >= 8)

165 
	`DO8
(
buf
);

166 
Àn
 -= 8;

168 i‡(
Àn
) do {

169 
	`DO1
(
buf
);

170 } --
Àn
);

171  
¸c
 ^ 0xffffffffL;

172 
	}
}

174 #i‡(
CONFIG_COMMANDS
 & 
CFG_CMD_JFFS2
)

179 
uL⁄g
 
ZEXPORT
 
	$¸c32_no_comp
(
uL⁄g
 
¸c
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
)

181 #ifde‡
DYNAMIC_CRC_TABLE


182 i‡(
¸c_èbÀ_em±y
)

183 
	`make_¸c_èbÀ
();

185 
Àn
 >= 8)

187 
	`DO8
(
buf
);

188 
Àn
 -= 8;

190 i‡(
Àn
) do {

191 
	`DO1
(
buf
);

192 } --
Àn
);

194  
¸c
;

195 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/tools/image.h

24 #i‚de‡
__IMAGE_H__


25 
	#__IMAGE_H__


	)

27 
	~"../autoc⁄f.h
"

32 
	#IH_OS_INVALID
 0

	)

33 
	#IH_OS_OPENBSD
 1

	)

34 
	#IH_OS_NETBSD
 2

	)

35 
	#IH_OS_FREEBSD
 3

	)

36 
	#IH_OS_4_4BSD
 4

	)

37 
	#IH_OS_LINUX
 5

	)

38 
	#IH_OS_SVR4
 6

	)

39 
	#IH_OS_ESIX
 7

	)

40 
	#IH_OS_SOLARIS
 8

	)

41 
	#IH_OS_IRIX
 9

	)

42 
	#IH_OS_SCO
 10

	)

43 
	#IH_OS_DELL
 11

	)

44 
	#IH_OS_NCR
 12

	)

45 
	#IH_OS_LYNXOS
 13

	)

46 
	#IH_OS_VXWORKS
 14

	)

47 
	#IH_OS_PSOS
 15

	)

48 
	#IH_OS_QNX
 16

	)

49 
	#IH_OS_U_BOOT
 17

	)

50 
	#IH_OS_RTEMS
 18

	)

51 
	#IH_OS_ARTOS
 19

	)

52 
	#IH_OS_UNITY
 20

	)

57 
	#IH_CPU_INVALID
 0

	)

58 
	#IH_CPU_ALPHA
 1

	)

59 
	#IH_CPU_ARM
 2

	)

60 
	#IH_CPU_I386
 3

	)

61 
	#IH_CPU_IA64
 4

	)

62 
	#IH_CPU_MIPS
 5

	)

63 
	#IH_CPU_MIPS64
 6

	)

64 
	#IH_CPU_PPC
 7

	)

65 
	#IH_CPU_S390
 8

	)

66 
	#IH_CPU_SH
 9

	)

67 
	#IH_CPU_SPARC
 10

	)

68 
	#IH_CPU_SPARC64
 11

	)

69 
	#IH_CPU_M68K
 12

	)

70 
	#IH_CPU_NIOS
 13

	)

71 
	#IH_CPU_MICROBLAZE
 14

	)

72 
	#IH_CPU_NIOS2
 15

	)

113 
	#IH_TYPE_INVALID
 0

	)

114 
	#IH_TYPE_STANDALONE
 1

	)

115 
	#IH_TYPE_KERNEL
 2

	)

116 
	#IH_TYPE_RAMDISK
 3

	)

117 
	#IH_TYPE_MULTI
 4

	)

118 
	#IH_TYPE_FIRMWARE
 5

	)

119 
	#IH_TYPE_SCRIPT
 6

	)

120 
	#IH_TYPE_FILESYSTEM
 7

	)

125 
	#IH_COMP_NONE
 0

	)

126 
	#IH_COMP_GZIP
 1

	)

127 
	#IH_COMP_BZIP2
 2

	)

128 
	#IH_COMP_LZMA
 3

	)

129 
	#IH_COMP_XZ
 5

	)

131 
	#IH_MAGIC
 0x27051956

	)

133 #i‡
deföed
 (
MT7621_ASIC_BOARD
Ë|| deföed (
MT7621_FPGA_BOARD
)

134 #i‡
deföed
 (
ON_BOARD_NAND_FLASH_COMPONENT
)

135 
	#IH_NMLEN
 (16-4)

	)

137 
	#IH_NMLEN
 (16)

	)

139 #ñi‡
deföed
 (
MT7620_ASIC_BOARD
Ë|| deföed (
MT7620_FPGA_BOARD
Ë|| deföed (
MT7628_ASIC_BOARD
Ë|| deföed (
MT7628_FPGA_BOARD
)

140 
	#IH_NMLEN
 (16-4*2Ë

	)

141 #ñi‡
deföed
 (
RT6855A_ASIC_BOARD
Ë|| deföed (
RT6855A_FPGA_BOARD
)

142 
	#IH_NMLEN
 (16-4*4)

	)

144 
	#IH_NMLEN
 16

	)

151 
	sdøm_hódî
 {

152 #i‡
deföed
(
MT7620_ASIC_BOARD
Ë|| deföed(
MT7620_FPGA_BOARD
Ë|| deföed(
MT7628_ASIC_BOARD
Ë|| deföed(
MT7628_FPGA_BOARD
)

153 
uöt16_t
 
	mddr_£lf_ª‰esh
;

154 
uöt16_t
 
	mddr_cfg11
;

155 
uöt32_t
 
	mddr_cfg10
;

157 #i‡
deföed
 (
RT6855A_ASIC_BOARD
Ë|| deföed (
RT6855A_FPGA_BOARD
)

158 
uöt32_t
 
	mdøm_∑d_£âög
;

159 
uöt32_t
 
	mddr_cfg2
;

160 
uöt32_t
 
	mddr_cfg3
;

161 
uöt32_t
 
	mddr_cfg4
;

163 
uöt8_t
 
	mdøm_∑rm
;

165 
uöt8_t
 
	mdøm_magic
;

167 
uöt8_t
 
	m˝u_∂l_magic_l
:4;

168 
uöt8_t
 
	mdøm_magic_h
:4;

169 }
	mu
;

171 
uöt16_t
 
	m˝u_∂l_cfg
;

172 #i‡
deföed
(
RT3052_ASIC_BOARD
Ë|| deföed(
RT3052_FPGA_BOARD
) ||\

173 
deföed
(
RT3352_ASIC_BOARD
Ë|| deföed(
RT3352_FPGA_BOARD
) ||\

174 
deföed
(
RT5350_ASIC_BOARD
Ë|| deföed(
RT5350_FPGA_BOARD
) ||\

175 
deföed
(
RT3883_ASIC_BOARD
Ë|| deföed(
RT3883_FPGA_BOARD
)

176 
uöt16_t
 
	mmagic_lh
;

177 
uöt16_t
 
	mmagic_hh
;

180 
uöt8_t
 
	msyscfg1
;

181 
uöt8_t
 
	mddr_cfg3
;

182 
uöt16_t
 
	mªsv1
;

183 
uöt32_t
 
	mªsv2
;

184 }
	mddr
;

187 
uöt32_t
 
	msdøm_cfg0
;

188 
uöt32_t
 
	msdøm_cfg1
;

189 }
	msdr
;

192 
uöt8_t
 
	mmagic
;

193 #i‡
deföed
 (
RT6855A_ASIC_BOARD
Ë|| deföed (
RT6855A_FPGA_BOARD
)

194 
uöt8_t
 
	mrsvd0
[3];

196 
uöt8_t
 
	mª£rvd
;

197 
uöt16_t
 
	msyscfg1_ddrcfg3_odt
;

201 
uöt32_t
 
	mddr_cfg0
;

202 
uöt32_t
 
	mddr_cfg1
;

203 }
	mddr
;

205 
uöt32_t
 
	msdøm_cfg0
;

206 
uöt32_t
 
	msdøm_cfg1
;

207 }
	msdr
;

210 } 
	tdøm_hódî_t
 
	t__©åibuã__
 ((
	t∑cked
));

212 
	s«nd_badblock_öfo1_ty≥
 {

213 
uöt32_t
 
	mecc_bôs
 : 3;

214 
uöt32_t
 
	mrsvd
 : 5;

215 
uöt32_t
 
	mecc_off£t
 : 8;

216 
uöt32_t
 
	mbad_block_off£r
 : 8;

217 
uöt32_t
 
	mchecksum
 : 8;

218 } 
	t«nd_badblock_öfo1_t
 
	t__©åibuã__
 ((
	t∑cked
));

220 
	s«nd_öfo_1_ty≥
 {

221 
uöt32_t
 
	m∑gesize
 : 2;

222 
uöt32_t
 
	mrsvd0
 : 2;

223 
uöt32_t
 
	maddr_cy˛e
 : 2;

224 
uöt32_t
 
	mrsvd1
 : 2;

225 
uöt32_t
 
	m•¨e_size
 : 2;

226 
uöt32_t
 
	mrsvd2
 : 2;

227 
uöt32_t
 
	mtŸÆ_size
 : 3;

228 
uöt32_t
 
	mrsvd3
 : 1;

229 
uöt32_t
 
	mblock_size
 : 2;

230 
uöt32_t
 
	mrsvd4
 : 2;

231 
uöt32_t
 
	mmagic_id
 : 12;

232 } 
	t«nd_öfo_1_t
 
	t__©åibuã__
 ((
	t∑cked
));

235 
	s«nd_hódî
 {

236 
uöt32_t
 
	m«nd_ac_timög
;

237 
uöt32_t
 
	mih_°age_off£t
;

238 
uöt32_t
 
	mih_boŸlﬂdî_off£t
;

241 
«nd_öfo_1_t
 
	m«nd_öfo_1
;

242 
uöt32_t
 
	m«nd_öfo_1_d©a
;

245 
uöt32_t
 
	m¸c
;

246 } 
	t«nd_hódî_t
 
	t__©åibuã__
 ((
	t∑cked
));

248 
	simage_hódî
 {

249 
uöt32_t
 
	mih_magic
;

250 
uöt32_t
 
	mih_h¸c
;

251 
uöt32_t
 
	mih_time
;

252 
uöt32_t
 
	mih_size
;

253 
uöt32_t
 
	mih_lﬂd
;

254 
uöt32_t
 
	mih_ï
;

255 
uöt32_t
 
	mih_d¸c
;

256 
uöt8_t
 
	mih_os
;

257 
uöt8_t
 
	mih_¨ch
;

258 
uöt8_t
 
	mih_ty≥
;

259 
uöt8_t
 
	mih_comp
;

260 
uöt8_t
 
	mih_«me
[
IH_NMLEN
];

261 #i‡
deföed
 (
MT7621_ASIC_BOARD
Ë|| deföed (
MT7621_FPGA_BOARD
)

262 
«nd_hódî_t
 
	mih_«nd
;

264 
døm_hódî_t
 
	mih_døm
;

266 } 
	timage_hódî_t
 
	t__©åibuã__
((
	t∑cked
));

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/tools/mkimage.c

23 
	~<î∫o.h
>

24 
	~<f˙é.h
>

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<°rög.h
>

28 #i‚de‡
__WIN32__


29 
	~<√töë/ö.h
>

31 
	~<sys/mm™.h
>

32 
	~<sys/°©.h
>

33 
	~<time.h
>

34 
	~<uni°d.h
>

36 #i‡
deföed
(
__BEOS__
Ë|| deföed(
__NëBSD__
Ë|| deföed(
__APPLE__
)

37 
	~<öây≥s.h
>

40 #ifde‡
__WIN32__


41 
	t__u32
;

43 
	#SWAP_LONG
(
x
) \

44 ((
__u32
)( \

45 (((
__u32
)(
x
) & (__u32)0x000000ffUL) << 24) | \

46 (((
__u32
)(
x
) & (__u32)0x0000ff00UL) << 8) | \

47 (((
__u32
)(
x
) & (__u32)0x00ff0000UL) >> 8) | \

48 (((
__u32
)(
x
Ë& (__u32)0xff000000ULË>> 24Ë))

	)

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 
	tuöt32_t
;

53 
	#¡ohl
(
a
Ë
	`SWAP_LONG
◊)

	)

54 
	#ht⁄l
(
a
Ë
	`SWAP_LONG
◊)

	)

57 #i‚def 
O_BINARY


58 
	#O_BINARY
 0

	)

61 
	~<image.h
>

62 
	~"../autoc⁄f.h
"

64 
î∫o
;

66 #i‚de‡
MAP_FAILED


67 
	#MAP_FAILED
 (-1)

	)

70 *
	gcmd«me
;

72 
¸c32
 (
¸c
, c⁄° *
buf
, 
Àn
);

74 
	sèbÀ_íåy
 {

75 
	mvÆ
;

76 *
	m¢ame
;

77 *
	m ame
;

78 } 
	tèbÀ_íåy_t
;

80 
èbÀ_íåy_t
 
	g¨ch_«me
[] = {

81 { 
IH_CPU_INVALID
, 
NULL
, "Invalid CPU", },

82 { 
IH_CPU_ALPHA
, "alpha", "Alpha", },

83 { 
IH_CPU_ARM
, "arm", "ARM", },

84 { 
IH_CPU_I386
, "x86", "Intel x86", },

85 { 
IH_CPU_IA64
, "ia64", "IA64", },

86 { 
IH_CPU_M68K
, "m68k", "MC68000", },

87 { 
IH_CPU_MICROBLAZE
, "microblaze", "MicroBlaze", },

88 { 
IH_CPU_MIPS
, "mips", "MIPS", },

89 { 
IH_CPU_MIPS64
, "mips64", "MIPS 64 Bit", },

90 { 
IH_CPU_PPC
, "ppc", "PowerPC", },

91 { 
IH_CPU_S390
, "s390", "IBM S390", },

92 { 
IH_CPU_SH
, "sh", "SuperH", },

93 { 
IH_CPU_SPARC
, "sparc", "SPARC", },

94 { 
IH_CPU_SPARC64
, "sparc64", "SPARC 64 Bit", },

98 
èbÀ_íåy_t
 
	gos_«me
[] = {

99 { 
IH_OS_INVALID
, 
NULL
, "Invalid OS", },

100 { 
IH_OS_4_4BSD
, "4_4bsd", "4_4BSD", },

101 { 
IH_OS_ARTOS
, "artos", "ARTOS", },

102 { 
IH_OS_DELL
, "dell", "Dell", },

103 { 
IH_OS_ESIX
, "esix", "Esix", },

104 { 
IH_OS_FREEBSD
, "freebsd", "FreeBSD", },

105 { 
IH_OS_IRIX
, "irix", "Irix", },

106 { 
IH_OS_LINUX
, "linux", "Linux", },

107 { 
IH_OS_LYNXOS
, "lynxos", "LynxOS", },

108 { 
IH_OS_NCR
, "ncr", "NCR", },

109 { 
IH_OS_NETBSD
, "netbsd", "NetBSD", },

110 { 
IH_OS_OPENBSD
, "openbsd", "OpenBSD", },

111 { 
IH_OS_PSOS
, "psos", "pSOS", },

112 { 
IH_OS_QNX
, "qnx", "QNX", },

113 { 
IH_OS_RTEMS
, "rtems", "RTEMS", },

114 { 
IH_OS_SCO
, "sco", "SCO", },

115 { 
IH_OS_SOLARIS
, "solaris", "Solaris", },

116 { 
IH_OS_SVR4
, "svr4", "SVR4", },

117 { 
IH_OS_U_BOOT
, "u-boot", "U-Boot", },

118 { 
IH_OS_VXWORKS
, "vxworks", "VxWorks", },

122 
èbÀ_íåy_t
 
	gty≥_«me
[] = {

123 { 
IH_TYPE_INVALID
, 
NULL
, "Invalid Image", },

124 { 
IH_TYPE_FILESYSTEM
, "filesystem", "Filesystem Image", },

125 { 
IH_TYPE_FIRMWARE
, "firmware", "Firmware", },

126 { 
IH_TYPE_KERNEL
, "kernel", "Kernel Image", },

127 { 
IH_TYPE_MULTI
, "multi", "Multi-File Image", },

128 { 
IH_TYPE_RAMDISK
, "ramdisk", "RAMDisk Image", },

129 { 
IH_TYPE_SCRIPT
, "script", "Script", },

130 { 
IH_TYPE_STANDALONE
, "standalone", "Standalone Program", },

134 
èbÀ_íåy_t
 
	gcomp_«me
[] = {

135 { 
IH_COMP_NONE
, "none", "uncompressed", },

136 { 
IH_COMP_BZIP2
, "bzip2", "bzip2 compressed", },

137 { 
IH_COMP_GZIP
, "gzip", "gzip compressed", },

138 { 
IH_COMP_LZMA
, "lzma", "lzma compressed", },

139 { 
IH_COMP_XZ
, "xz", "xz compressed", },

143 
c›y_fûe
 (, const *, );

144 
ußge
 ();

145 
¥öt_hódî
 (
image_hódî_t
 *);

146 
¥öt_ty≥
 (
image_hódî_t
 *);

147 *
put_èbÀ_íåy
 (
èbÀ_íåy_t
 *, *, );

148 *
put_¨ch
 ();

149 *
put_ty≥
 ();

150 *
put_os
 ();

151 *
put_comp
 ();

152 
gë_èbÀ_íåy
 (
èbÀ_íåy_t
 *, *, *);

153 
gë_¨ch
(*);

154 
gë_comp
(*);

155 
gë_os
 (*);

156 
gë_ty≥
(*);

159 *
	gd©afûe
;

160 *
	gimagefûe
;

162 
	gdÊag
 = 0;

163 
	geÊag
 = 0;

164 
	glÊag
 = 0;

165 
	gvÊag
 = 0;

166 
	gxÊag
 = 0;

167 
	g›t_os
 = 
IH_OS_LINUX
;

168 
	g›t_¨ch
 = 
IH_CPU_PPC
;

169 
	g›t_ty≥
 = 
IH_TYPE_KERNEL
;

170 
	g›t_comp
 = 
IH_COMP_GZIP
;

172 
image_hódî_t
 
	ghódî
;

173 
image_hódî_t
 *
	ghdr
 = &
hódî
;

176 
	$maö
 (
¨gc
, **
¨gv
)

178 
ifd
;

179 
uöt32_t
 
checksum
;

180 
uöt32_t
 
addr
;

181 
uöt32_t
 
ï
;

182 
°©
 
sbuf
;

183 *
±r
;

184 *
«me
 = "";

185 *
døm_«me
 = "";

186 
uöt32_t
 
døm_ty≥
;

187 
uöt32_t
 
døm_tŸÆ_width
;

188 
uöt32_t
 
døm_size
;

189 
uöt32_t
 
døm_width
;

190 
uöt32_t
 
døm_cfg0
;

191 
uöt32_t
 
døm_cfg1
;

192 
uöt16_t
 
˝u_∂l
;

193 
uöt32_t
 
°age1_°¨t
, 
boŸlﬂdî_°¨t
;

194 
cmd«me
 = *
¨gv
;

196 
addr
 = 
ï
 = 0;

198 --
¨gc
 > 0 && **++
¨gv
 == '-') {

199 *++*
¨gv
) {

200 **
¨gv
) {

202 
lÊag
 = 1;

205 i‡((--
¨gc
 <= 0) ||

206 (
›t_¨ch
 = 
	`gë_¨ch
(*++
¨gv
)) < 0)

207 
	`ußge
 ();

208 
NXTARG
;

210 i‡((--
¨gc
 <= 0) ||

211 (
›t_comp
 = 
	`gë_comp
(*++
¨gv
)) < 0)

212 
	`ußge
 ();

213 
NXTARG
;

215 i‡((--
¨gc
 <= 0) ||

216 (
›t_os
 = 
	`gë_os
(*++
¨gv
)) < 0)

217 
	`ußge
 ();

218 
NXTARG
;

220 i‡((--
¨gc
 <= 0) ||

221 (
›t_ty≥
 = 
	`gë_ty≥
(*++
¨gv
)) < 0)

222 
	`ußge
 ();

223 
NXTARG
;

226 i‡(--
¨gc
 <= 0)

227 
	`ußge
 ();

228 
addr
 = 
	`°πoul
 (*++
¨gv
, (**)&
±r
, 16);

229 i‡(*
±r
) {

230 
	`Ârötf
 (
°dîr
,

232 
cmd«me
, *
¨gv
);

233 
	`exô
 (
EXIT_FAILURE
);

235 
NXTARG
;

237 i‡(--
¨gc
 <= 0)

238 
	`ußge
 ();

239 
d©afûe
 = *++
¨gv
;

240 
dÊag
 = 1;

241 
NXTARG
;

243 i‡(--
¨gc
 <= 0)

244 
	`ußge
 ();

245 
ï
 = 
	`°πoul
 (*++
¨gv
, (**)&
±r
, 16);

246 i‡(*
±r
) {

247 
	`Ârötf
 (
°dîr
,

249 
cmd«me
, *
¨gv
);

250 
	`exô
 (
EXIT_FAILURE
);

252 
eÊag
 = 1;

253 
NXTARG
;

255 i‡(--
¨gc
 <= 0)

256 
	`ußge
 ();

257 
døm_«me
=*++
¨gv
;

258 if(
	`°∫ˇ£cmp
(
døm_«me
,"sdr",3)==0) {

259 
døm_ty≥
=0;

260 }if(
	`°∫ˇ£cmp
(
døm_«me
,"ddr",3)==0) {

261 
døm_ty≥
=1;

263 i‡(*
±r
) {

264 
	`Ârötf
 (
°dîr
,

266 
cmd«me
, *
¨gv
);

267 
	`exô
 (
EXIT_FAILURE
);

270 
NXTARG
;

272 i‡(--
¨gc
 <= 0)

273 
	`ußge
 ();

274 
døm_tŸÆ_width
 = 
	`°πoul
 (*++
¨gv
, (**)&
±r
, 10);

275 
døm_tŸÆ_width
) {

277 
døm_tŸÆ_width
=0;

280 
døm_tŸÆ_width
=1;

283 i‡(*
±r
) {

284 
	`Ârötf
 (
°dîr
,

286 
cmd«me
, *
¨gv
);

287 
	`exô
 (
EXIT_FAILURE
);

290 
NXTARG
;

292 i‡(--
¨gc
 <= 0)

293 
	`ußge
 ();

294 
døm_size
 = 
	`°πoul
 (*++
¨gv
, (**)&
±r
, 10);

295 
døm_size
) {

297 
døm_size
=0;

300 
døm_size
=1;

303 
døm_size
=2;

306 
døm_size
=3;

309 
døm_size
=4;

312 
døm_size
=5;

315 
døm_size
=6;

318 i‡(*
±r
) {

319 
	`Ârötf
 (
°dîr
,

321 
cmd«me
, *
¨gv
);

322 
	`exô
 (
EXIT_FAILURE
);

325 
NXTARG
;

327 i‡(--
¨gc
 <= 0)

328 
	`ußge
 ();

329 
døm_width
 = 
	`°πoul
 (*++
¨gv
, (**)&
±r
, 10);

330 
døm_width
) {

332 
døm_width
=0;

335 
døm_width
=1;

338 i‡(*
±r
) {

339 
	`Ârötf
 (
°dîr
,

341 
cmd«me
, *
¨gv
);

342 
	`exô
 (
EXIT_FAILURE
);

345 
NXTARG
;

347 i‡(--
¨gc
 <= 0)

348 
	`ußge
 ();

349 
«me
 = *++
¨gv
;

350 
NXTARG
;

352 
vÊag
++;

355 
xÊag
++;

358 i‡(--
¨gc
 <= 0)

359 
	`ußge
 ();

360 #i‡
	`deföed
 (
MT7621_ASIC_BOARD
Ë|| deföed (
MT7621_FPGA_BOARD
)

361 
°age1_°¨t
 = 
	`°πoul
 (*++
¨gv
, (**)&
±r
, 16);

363 
døm_cfg0
 = 
	`°πoul
 (*++
¨gv
, (**)&
±r
, 16);

364 i‡(*
±r
) {

365 
	`Ârötf
 (
°dîr
,

367 
cmd«me
, *
¨gv
);

368 
	`exô
 (
EXIT_FAILURE
);

371 
NXTARG
;

373 i‡(--
¨gc
 <= 0)

374 
	`ußge
 ();

375 #i‡
	`deföed
 (
MT7621_ASIC_BOARD
Ë|| deföed (
MT7621_FPGA_BOARD
)

376 
boŸlﬂdî_°¨t
 = 
	`°πoul
 (*++
¨gv
, (**)&
±r
, 16);

378 
døm_cfg1
 = 
	`°πoul
 (*++
¨gv
, (**)&
±r
, 16);

379 i‡(*
±r
) {

380 
	`Ârötf
 (
°dîr
,

382 
cmd«me
, *
¨gv
);

383 
	`exô
 (
EXIT_FAILURE
);

386 
NXTARG
;

388 i‡(--
¨gc
 <= 0)

389 
	`ußge
 ();

390 
˝u_∂l
 = 
	`°πoul
 (*++
¨gv
, (**)&
±r
, 16);

391 
NXTARG
;

393 
	`ußge
 ();

396 
NXTARG
: ;

399 i‡((
¨gc
 !1Ë|| ((
lÊag
 ^ 
dÊag
) == 0))

400 
	`ußge
();

402 i‡(!
eÊag
) {

403 
ï
 = 
addr
;

405 i‡(
xÊag
)

406 
ï
 +(
image_hódî_t
);

413 i‡(
xÊag
) {

414 i‡(
ï
 !
addr
 + (
image_hódî_t
)) {

415 
	`Ârötf
 (
°dîr
, "%s: For XIP,ÅheÉntryÖoint must beÅheÜoadáddr + %lu\n",

416 
cmd«me
,

417 ()(
image_hódî_t
));

418 
	`exô
 (
EXIT_FAILURE
);

422 
imagefûe
 = *
¨gv
;

424 i‡(
lÊag
) {

425 
ifd
 = 
	`›í
(
imagefûe
, 
O_RDONLY
|
O_BINARY
);

427 
ifd
 = 
	`›í
(
imagefûe
, 
O_RDWR
|
O_CREAT
|
O_TRUNC
|
O_BINARY
, 0666);

430 i‡(
ifd
 < 0) {

431 
	`Ârötf
 (
°dîr
, "%s: Can't open %s: %s\n",

432 
cmd«me
, 
imagefûe
, 
	`°ªº‹
(
î∫o
));

433 
	`exô
 (
EXIT_FAILURE
);

436 i‡(
lÊag
) {

437 
Àn
;

438 *
d©a
;

442 i‡(
	`f°©
(
ifd
, &
sbuf
) < 0) {

443 
	`Ârötf
 (
°dîr
, "%s: Can't stat %s: %s\n",

444 
cmd«me
, 
imagefûe
, 
	`°ªº‹
(
î∫o
));

445 
	`exô
 (
EXIT_FAILURE
);

448 i‡(()
sbuf
.
°_size
 < (
image_hódî_t
)) {

449 
	`Ârötf
 (
°dîr
,

451 
cmd«me
, 
imagefûe
);

452 
	`exô
 (
EXIT_FAILURE
);

455 
±r
 = (*)
	`mm≠
(0, 
sbuf
.
°_size
,

456 
PROT_READ
, 
MAP_SHARED
, 
ifd
, 0);

457 i‡((
ˇddr_t
)
±r
 == (caddr_t)-1) {

458 
	`Ârötf
 (
°dîr
, "%s: Can'tÑead %s: %s\n",

459 
cmd«me
, 
imagefûe
, 
	`°ªº‹
(
î∫o
));

460 
	`exô
 (
EXIT_FAILURE
);

468 
	`mem˝y
 (
hdr
, 
±r
, (
image_hódî_t
));

470 i‡(
	`¡ohl
(
hdr
->
ih_magic
Ë!
IH_MAGIC
) {

471 
	`Ârötf
 (
°dîr
,

473 
cmd«me
, 
imagefûe
);

474 
	`exô
 (
EXIT_FAILURE
);

477 
d©a
 = (*)
hdr
;

478 
Àn
 = (
image_hódî_t
);

480 
checksum
 = 
	`¡ohl
(
hdr
->
ih_h¸c
);

481 
hdr
->
ih_h¸c
 = 
	`ht⁄l
(0);

483 i‡(
	`¸c32
 (0, 
d©a
, 
Àn
Ë!
checksum
) {

484 
	`Ârötf
 (
°dîr
,

486 
imagefûe
);

489 
d©a
 = (*)(
±r
 + (
image_hódî_t
));

490 
Àn
 = 
sbuf
.
°_size
 - (
image_hódî_t
) ;

492 i‡(
	`¸c32
 (0, 
d©a
, 
Àn
Ë!
	`¡ohl
(
hdr
->
ih_d¸c
)) {

493 
	`Ârötf
 (
°dîr
,

495 
imagefûe
);

499 
	`¥öt_hódî
 ((
image_hódî_t
 *)
±r
);

501 (Ë
	`munm≠
((*)
±r
, 
sbuf
.
°_size
);

502 (Ë
	`˛o£
 (
ifd
);

504 
	`exô
 (
EXIT_SUCCESS
);

512 
	`mem£t
 (
hdr
, 0, (
image_hódî_t
));

514 i‡(
	`wrôe
(
ifd
, 
hdr
, (
image_hódî_t
)) != (image_header_t)) {

515 
	`Ârötf
 (
°dîr
, "%s: WriteÉrror on %s: %s\n",

516 
cmd«me
, 
imagefûe
, 
	`°ªº‹
(
î∫o
));

517 
	`exô
 (
EXIT_FAILURE
);

520 i‡(
›t_ty≥
 =
IH_TYPE_MULTI
 || o±_ty≥ =
IH_TYPE_SCRIPT
) {

521 *
fûe
 = 
d©afûe
;

522 
size
;

525 *
£p
 = 
NULL
;

527 i‡(
fûe
) {

528 i‡((
£p
 = 
	`°rchr
(
fûe
, ':')Ë!
NULL
) {

529 *
£p
 = '\0';

532 i‡(
	`°©
 (
fûe
, &
sbuf
) < 0) {

533 
	`Ârötf
 (
°dîr
, "%s: Can't stat %s: %s\n",

534 
cmd«me
, 
fûe
, 
	`°ªº‹
(
î∫o
));

535 
	`exô
 (
EXIT_FAILURE
);

537 
size
 = 
	`ht⁄l
(
sbuf
.
°_size
);

539 
size
 = 0;

542 i‡(
	`wrôe
(
ifd
, (*)&
size
, (size)) != (size)) {

543 
	`Ârötf
 (
°dîr
, "%s: WriteÉrror on %s: %s\n",

544 
cmd«me
, 
imagefûe
, 
	`°ªº‹
(
î∫o
));

545 
	`exô
 (
EXIT_FAILURE
);

548 i‡(!
fûe
) {

552 i‡(
£p
) {

553 *
£p
 = ':';

554 
fûe
 = 
£p
 + 1;

556 
fûe
 = 
NULL
;

560 
fûe
 = 
d©afûe
;

563 *
£p
 = 
	`°rchr
(
fûe
, ':');

564 i‡(
£p
) {

565 *
£p
 = '\0';

566 
	`c›y_fûe
 (
ifd
, 
fûe
, 1);

567 *
£p
++ = ':';

568 
fûe
 = 
£p
;

570 
	`c›y_fûe
 (
ifd
, 
fûe
, 0);

575 
	`c›y_fûe
 (
ifd
, 
d©afûe
, 0);

579 #i‡
	`deföed
(
_POSIX_SYNCHRONIZED_IO
Ë&& !deföed(
__sun__
Ë&& !deföed(
__FªeBSD__
)

580 (Ë
	`fd©async
 (
ifd
);

582 (Ë
	`fsync
 (
ifd
);

585 i‡(
	`f°©
(
ifd
, &
sbuf
) < 0) {

586 
	`Ârötf
 (
°dîr
, "%s: Can't stat %s: %s\n",

587 
cmd«me
, 
imagefûe
, 
	`°ªº‹
(
î∫o
));

588 
	`exô
 (
EXIT_FAILURE
);

591 
±r
 = (*)
	`mm≠
(0, 
sbuf
.
°_size
,

592 
PROT_READ
|
PROT_WRITE
, 
MAP_SHARED
, 
ifd
, 0);

593 i‡(
±r
 =(*)
MAP_FAILED
) {

594 
	`Ârötf
 (
°dîr
, "%s: Can't map %s: %s\n",

595 
cmd«me
, 
imagefûe
, 
	`°ªº‹
(
î∫o
));

596 
	`exô
 (
EXIT_FAILURE
);

599 
hdr
 = (
image_hódî_t
 *)
±r
;

601 
checksum
 = 
	`¸c32
 (0,

602 (c⁄° *)(
±r
 + (
image_hódî_t
)),

603 
sbuf
.
°_size
 - (
image_hódî_t
)

607 
hdr
->
ih_magic
 = 
	`ht⁄l
(
IH_MAGIC
);

608 
hdr
->
ih_time
 = 
	`ht⁄l
(
sbuf
.
°_mtime
);

609 
hdr
->
ih_size
 = 
	`ht⁄l
(
sbuf
.
°_size
 - (
image_hódî_t
));

610 
hdr
->
ih_lﬂd
 = 
	`ht⁄l
(
addr
);

611 
hdr
->
ih_ï
 = 
	`ht⁄l
(
ï
);

612 
hdr
->
ih_d¸c
 = 
	`ht⁄l
(
checksum
);

613 
hdr
->
ih_os
 = 
›t_os
;

614 
hdr
->
ih_¨ch
 = 
›t_¨ch
;

615 
hdr
->
ih_ty≥
 = 
›t_ty≥
;

616 
hdr
->
ih_comp
 = 
›t_comp
;

618 
	`°∫˝y
((*)
hdr
->
ih_«me
, 
«me
, 
IH_NMLEN
);

621 #i‡
	`deföed
 (
MT7621_ASIC_BOARD
Ë|| deföed(
MT7621_FPGA_BOARD
)

622 #i‡
	`deföed
 (
ON_BOARD_NAND_FLASH_COMPONENT
)

624 
	`¥ötf
("DDRCÆ CodêOff£à : 0x%08X\n",
°age1_°¨t
);

625 
	`¥ötf
("UboŸ Off£à : 0x%08X\n",
boŸlﬂdî_°¨t
);

626 
hdr
->
ih_«nd
.
ih_°age_off£t
 = 
	`ht⁄l
(
°age1_°¨t
);

627 
hdr
->
ih_«nd
.
ih_boŸlﬂdî_off£t
 = 
	`ht⁄l
(
boŸlﬂdî_°¨t
);

628 #i‡
	`deföed
 (
ON_BOARD_NAND_HEADER
)

629 
hdr
->
ih_«nd
.
«nd_öfo_1
.
∑gesize
 = 
NAND_PAGESIZE_INDEX
;

630 
hdr
->
ih_«nd
.
«nd_öfo_1
.
addr_cy˛e
 = 
NAND_ADDRLEN_INDEX
;

631 
hdr
->
ih_«nd
.
«nd_öfo_1
.
•¨e_size
 = 
NAND_SPARESIZE_INDEX
;

632 
hdr
->
ih_«nd
.
«nd_öfo_1
.
tŸÆ_size
 = 
NAND_TOTALSIZE_INDEX
;

633 
hdr
->
ih_«nd
.
«nd_öfo_1
.
block_size
 = 
NAND_BLOCKSIZE_INDEX
;

634 
hdr
->
ih_«nd
.
«nd_öfo_1
.
magic_id
 = 0xDA0;

635 
hdr
->
ih_«nd
.
«nd_öfo_1_d©a
 = 
	`ht⁄l
(()(hdr->ih_nand.nand_info_1_data));

636 
hdr
->
ih_«nd
.
«nd_ac_timög
 = 
	`ht⁄l
(
NAND_ACCTIME
);

641 if(
døm_size
==0) {

642 
hdr
->
ih_døm
.
døm_magic
=0;

644 #i‡
	`deföed
 (
RT3352_ASIC_BOARD
Ë|| deföed(
RT3352_FPGA_BOARD
) ||\

645 
	`deföed
 (
RT3883_ASIC_BOARD
Ë|| deföed(
RT3883_FPGA_BOARD
)

646 
hdr
->
ih_døm
.
døm_magic
=0x5A;

648 
hdr
->
ih_døm
.
u
.
døm_magic_h
=0x5;

652 
hdr
->
ih_døm
.
døm_∑rm
 = (
døm_ty≥
<<5 | 
døm_tŸÆ_width
<<4 | 
døm_size
<<1 | 
døm_width
);

654 if(
døm_cfg0
!=0xFF && 
døm_cfg1
!=0xFF) {

656 #i‡
	`deföed
 (
RT3052_ASIC_BOARD
Ë|| deföed(
RT3052_FPGA_BOARD
) ||\

657 
	`deföed
 (
RT3352_ASIC_BOARD
Ë|| deföed(
RT3352_FPGA_BOARD
) ||\

658 
	`deföed
 (
RT5350_ASIC_BOARD
Ë|| deföed(
RT5350_FPGA_BOARD
) ||\

659 
	`deföed
 (
RT3883_ASIC_BOARD
Ë|| deföed(
RT3883_FPGA_BOARD
)

660 
hdr
->
ih_døm
.
magic_lh
=0x5244;

661 
hdr
->
ih_døm
.
magic_hh
=0x4D41;

663 
hdr
->
ih_døm
.
magic
 = 0x68;

666 #i‡
	`deföed
(
RT3052_ASIC_BOARD
Ë|| deföed(
RT3052_FPGA_BOARD
) ||\

667 
	`deföed
(
RT3352_ASIC_BOARD
Ë|| deföed(
RT3352_FPGA_BOARD
) ||\

668 
	`deföed
(
RT5350_ASIC_BOARD
Ë|| deföed(
RT5350_FPGA_BOARD
) ||\

669 
	`deföed
(
RT3883_ASIC_BOARD
Ë|| deföed(
RT3883_FPGA_BOARD
)

670 
hdr
->
ih_døm
.
magic_lh
=0;

671 
hdr
->
ih_døm
.
magic_hh
=0;

673 
hdr
->
ih_døm
.
magic
 = 0x0;

675 
døm_cfg0
=0;

676 
døm_cfg1
=0;

679 #i‡
	`deföed
 (
CPU_PLL_PARAMETERS
)

680 #i‡
	`deföed
 (
RT6855A_ASIC_BOARD
Ë|| deföed(
RT6855A_FPGA_BOARD
)

682 #i‡
	`deföed
 (
MT7620_ASIC_BOARD
Ë|| deföed(
MT7620_FPGA_BOARD
Ë|| deföed (
MT7628_ASIC_BOARD
Ë|| deföed(
MT7628_FPGA_BOARD
)

683 #i‡
	`deföed
 (
CPLL_FROM_480MHZ
)

684 
˝u_∂l
 = 
	`¡ohs
(1<<11);

685 #ñi‡
	`deföed
 (
CPLL_FROM_XTAL
)

686 
˝u_∂l
 = 
	`¡ohs
(1<<12);

688 
˝u_∂l
 = 
	`¡ohs
((
CPLL_MULTI_RATIO_CFG
<<8)|(
CPLL_DIV_RATIO_CFG
<<6)|(
CPLL_SSC_CFG
<<0));

691 if(
˝u_∂l
==0) {

692 
hdr
->
ih_døm
.
u
.
˝u_∂l_magic_l
=0;

693 
hdr
->
ih_døm
.
˝u_∂l_cfg
 = 0;

695 
hdr
->
ih_døm
.
u
.
˝u_∂l_magic_l
=0xa;

696 
hdr
->
ih_døm
.
˝u_∂l_cfg
 = 
˝u_∂l
;

700 #i‡
	`deföed
 (
DRAM_PARAMETERS
)

701 #i‡
	`deföed
 (
RT3052_ASIC_BOARD
Ë|| deföed(
RT3052_FPGA_BOARD
) ||\

702 
	`deföed
 (
RT3352_ASIC_BOARD
Ë|| deföed(
RT3352_FPGA_BOARD
) ||\

703 
	`deföed
 (
RT5350_ASIC_BOARD
Ë|| deföed(
RT5350_FPGA_BOARD
) ||\

704 
	`deföed
 (
RT3883_ASIC_BOARD
Ë|| deföed(
RT3883_FPGA_BOARD
)

705 if(
døm_ty≥
==0) {

706 
hdr
->
ih_døm
.
sdr
.
sdøm_cfg0
 = 
døm_cfg0
;

707 
hdr
->
ih_døm
.
sdr
.
sdøm_cfg1
 = 
døm_cfg1
;

709 
hdr
->
ih_døm
.
ddr
.
syscfg1
(
døm_cfg0
 & 0x3F);

710 
hdr
->
ih_døm
.
ddr
.
ddr_cfg3
(
døm_cfg1
 & 0x3);

712 #ñi‡
	`deföed
 (
RT6855A_ASIC_BOARD
Ë|| deföed (
RT6855A_FPGA_BOARD
) ||\

713 
	`deföed
 (
MT7620_ASIC_BOARD
Ë|| deföed (
MT7620_FPGA_BOARD
) ||\

714 
	`deföed
 (
MT7628_ASIC_BOARD
Ë|| deföed (
MT7628_FPGA_BOARD
)

715 if(
døm_ty≥
==0) {

716 
hdr
->
ih_døm
.
sdr
.
sdøm_cfg0
 = 
	`¡ohl
(
døm_cfg0
);

717 
hdr
->
ih_døm
.
sdr
.
sdøm_cfg1
 = 
	`¡ohl
(
døm_cfg1
);

719 #i‡
	`deföed
 (
RT6855A_ASIC_BOARD
Ë|| deföed (
RT6855A_FPGA_BOARD
)

720 
hdr
->
ih_døm
.
ddr_cfg2
 = 
	`¡ohl
(
DDR_CFG2_SETTING
);

721 
hdr
->
ih_døm
.
ddr_cfg3
 = 
	`¡ohl
(
DDR_CFG3_SETTING
);

722 
hdr
->
ih_døm
.
ddr_cfg4
 = 
	`¡ohl
(
DDR_CFG4_SETTING
);

723 
hdr
->
ih_døm
.
døm_∑d_£âög
 = 
	`¡ohl
(
DRAM_PAD_SETTING
);

725 
hdr
->
ih_døm
.
ddr
.
ddr_cfg0
 = 
	`¡ohl
(
døm_cfg0
);

726 
hdr
->
ih_døm
.
ddr
.
ddr_cfg1
 = 
	`¡ohl
(
døm_cfg1
);

727 #i‡
	`deföed
 (
MT7620_ASIC_BOARD
Ë|| deföed (
MT7620_FPGA_BOARD
Ë|| (
MT7628_ASIC_BOARD
Ë|| deföed (
MT7628_FPGA_BOARD
)

728 
hdr
->
ih_døm
.
ddr_£lf_ª‰esh
 = 
	`¡ohs
((((
DDR_ODT_SRC
&0x0F)<<8)|(
DDR_ODT_OFF_DLY
&0x0F)<<4)|\

729 (
DDR_ODT_ON_DLY
&0x0F));

730 
hdr
->
ih_døm
.
syscfg1_ddrcfg3_odt
 = 
	`¡ohs
((
SYSCFG1_ODT
&0x0FFFC)|(
DDRCFG3_ODT
&0x03));

731 
hdr
->
ih_døm
.
ddr_cfg11
 = 
	`¡ohs
(((
DDR_CFG2_CAS
&0x7)<<13)|(
DDR_CFG11_FFD_EN
<<12)|(
DDR_CFG11_FCD_EN
<<11)|\

732 ((
DDR_CFG11_FFD
&0x0F)<<7)|(
DDR_CFG11_FCD
&0x7F));

733 
hdr
->
ih_døm
.
ddr_cfg10
 = 
	`¡ohl
(((
DDR_CFG3_DS
&0x1)<<31)|
DDR_CFG10_SETTING
&(~((1<<31)|(1<<23)|(1<<15)|(1<<7))));

742 #i‡(
	`deföed
 (
MT7621_ASIC_BOARD
Ë|| deföed (
MT7621_FPGA_BOARD
))

744 
	`¸c
((c⁄° *)
hdr
, &
checksum
, (
image_hódî_t
));

745 
hdr
->
ih_«nd
.
¸c
 = 
	`ht⁄l
(
checksum
);

747 
checksum
 = 
	`¸c32
(0,(c⁄° *)
hdr
,(
image_hódî_t
));

749 
hdr
->
ih_h¸c
 = 
	`ht⁄l
(
checksum
);

751 
	`¥öt_hódî
 (
hdr
);

753 (Ë
	`munm≠
((*)
±r
, 
sbuf
.
°_size
);

756 #i‡
	`deföed
(
_POSIX_SYNCHRONIZED_IO
Ë&& !deföed(
__sun__
Ë&& !deföed(
__FªeBSD__
)

757 (Ë
	`fd©async
 (
ifd
);

759 (Ë
	`fsync
 (
ifd
);

762 i‡(
	`˛o£
(
ifd
)) {

763 
	`Ârötf
 (
°dîr
, "%s: WriteÉrror on %s: %s\n",

764 
cmd«me
, 
imagefûe
, 
	`°ªº‹
(
î∫o
));

765 
	`exô
 (
EXIT_FAILURE
);

768 
	`exô
 (
EXIT_SUCCESS
);

769 
	}
}

772 
	$c›y_fûe
 (
ifd
, c⁄° *
d©afûe
, 
∑d
)

774 
dfd
;

775 
°©
 
sbuf
;

776 *
±r
;

777 
èû
;

778 
zîo
 = 0;

779 
off£t
 = 0;

780 
size
;

782 i‡(
vÊag
) {

783 
	`Ârötf
 (
°dîr
, "Addög Imagê%s\n", 
d©afûe
);

786 i‡((
dfd
 = 
	`›í
(
d©afûe
, 
O_RDONLY
|
O_BINARY
)) < 0) {

787 
	`Ârötf
 (
°dîr
, "%s: Can't open %s: %s\n",

788 
cmd«me
, 
d©afûe
, 
	`°ªº‹
(
î∫o
));

789 
	`exô
 (
EXIT_FAILURE
);

792 i‡(
	`f°©
(
dfd
, &
sbuf
) < 0) {

793 
	`Ârötf
 (
°dîr
, "%s: Can't stat %s: %s\n",

794 
cmd«me
, 
d©afûe
, 
	`°ªº‹
(
î∫o
));

795 
	`exô
 (
EXIT_FAILURE
);

798 
±r
 = (*)
	`mm≠
(0, 
sbuf
.
°_size
,

799 
PROT_READ
, 
MAP_SHARED
, 
dfd
, 0);

800 i‡(
±r
 =(*)
MAP_FAILED
) {

801 
	`Ârötf
 (
°dîr
, "%s: Can'tÑead %s: %s\n",

802 
cmd«me
, 
d©afûe
, 
	`°ªº‹
(
î∫o
));

803 
	`exô
 (
EXIT_FAILURE
);

806 i‡(
xÊag
) {

807 *
p
 = 
NULL
;

814 i‡(()
sbuf
.
°_size
 < (
image_hódî_t
)) {

815 
	`Ârötf
 (
°dîr
,

817 
cmd«me
, 
d©afûe
);

818 
	`exô
 (
EXIT_FAILURE
);

821 
p
=
±r
;Ö <Öå+(
image_hódî_t
);Ö++) {

822 i‡–*
p
 != 0xff ) {

823 
	`Ârötf
 (
°dîr
,

825 
cmd«me
, 
d©afûe
);

826 
	`exô
 (
EXIT_FAILURE
);

830 
off£t
 = (
image_hódî_t
);

833 
size
 = 
sbuf
.
°_size
 - 
off£t
;

834 i‡(
	`wrôe
(
ifd
, 
±r
 + 
off£t
, 
size
) != size) {

835 
	`Ârötf
 (
°dîr
, "%s: WriteÉrror on %s: %s\n",

836 
cmd«me
, 
imagefûe
, 
	`°ªº‹
(
î∫o
));

837 
	`exô
 (
EXIT_FAILURE
);

840 i‡(
∑d
 && ((
èû
 = 
size
 % 4) != 0)) {

842 i‡(
	`wrôe
(
ifd
, (*)&
zîo
, 4-
èû
) != 4-tail) {

843 
	`Ârötf
 (
°dîr
, "%s: WriteÉrror on %s: %s\n",

844 
cmd«me
, 
imagefûe
, 
	`°ªº‹
(
î∫o
));

845 
	`exô
 (
EXIT_FAILURE
);

849 (Ë
	`munm≠
((*)
±r
, 
sbuf
.
°_size
);

850 (Ë
	`˛o£
 (
dfd
);

851 
	}
}

854 
	$ußge
 ()

856 
	`Ârötf
 (
°dîr
, "Usage: %s -l image\n"

860 
cmd«me
, cmdname);

861 
	`Ârötf
 (
°dîr
, " -A ==> setárchitectureÅo 'arch'\n"

877 
	`exô
 (
EXIT_FAILURE
);

878 
	}
}

881 
	$¥öt_hódî
 (
image_hódî_t
 *
hdr
)

883 
time_t
 
time°amp
;

884 
uöt32_t
 
size
;

886 
time°amp
 = (
time_t
)
	`¡ohl
(
hdr
->
ih_time
);

887 
size
 = 
	`¡ohl
(
hdr
->
ih_size
);

889 
	`¥ötf
 ("ImagêName: %.*s\n", 
IH_NMLEN
, 
hdr
->
ih_«me
);

890 
	`¥ötf
 ("Cª©ed: %s", 
	`˘ime
(&
time°amp
));

891 
	`¥ötf
 ("ImagêTy≥: "); 
	`¥öt_ty≥
(
hdr
);

892 
	`¥ötf
 ("Data Size: %d Bytes = %.2f kB = %.2f MB\n",

893 
size
, ()size / 1.024e3, ()size / 1.048576e6 );

894 
	`¥ötf
 ("Lﬂd Addªss: 0x%08X\n", 
	`¡ohl
(
hdr
->
ih_lﬂd
));

895 
	`¥ötf
 ("E¡ry Poöt: 0x%08X\n", 
	`¡ohl
(
hdr
->
ih_ï
));

896 #i‡
	`deföed
 (
MT7621_ASIC_BOARD
Ë|| deföed (
MT7621_FPGA_BOARD
)

898 
	`¥ötf
 ("DRAM P¨amëî: %x (P¨m0=%x P¨m1=%x)\n", 
hdr
->
ih_døm
.
døm_∑rm
, hdr->ih_døm.
sdr
.
sdøm_cfg0
, hdr->ih_døm.sdr.
sdøm_cfg1
);

900 i‡(
hdr
->
ih_ty≥
 =
IH_TYPE_MULTI
 || hdr->ih_ty≥ =
IH_TYPE_SCRIPT
) {

901 
i
, 
±rs
;

902 
uöt32_t
 
pos
;

903 *
Àn_±r
 = (*) (

904 ()
hdr
 + (
image_hódî_t
)

908 
i
=0; 
Àn_±r
[i]; ++i)

910 
±rs
 = 
i
;

912 
pos
 = (
image_hódî_t
Ë+ 
±rs
 * ();

913 
	`¥ötf
 ("Contents:\n");

914 
i
=0; 
Àn_±r
[i]; ++i) {

915 
size
 = 
	`¡ohl
(
Àn_±r
[
i
]);

917 
	`¥ötf
 (" Image %d: %8d Bytes = %4d kB = %d MB\n",

918 
i
, 
size
, size>>10, size>>20);

919 i‡(
hdr
->
ih_ty≥
 =
IH_TYPE_SCRIPT
 && 
i
 > 0) {

925 
	`¥ötf
 (" Off£à%08X\n", 
pos
);

928 
size
 += 3;

929 
size
 &= ~3;

930 
pos
 +
size
;

933 
	}
}

937 
	$¥öt_ty≥
 (
image_hódî_t
 *
hdr
)

939 
	`¥ötf
 ("%s %s %s (%s)\n",

940 
	`put_¨ch
 (
hdr
->
ih_¨ch
),

941 
	`put_os
 (
hdr
->
ih_os
 ),

942 
	`put_ty≥
 (
hdr
->
ih_ty≥
),

943 
	`put_comp
 (
hdr
->
ih_comp
)

945 
	}
}

947 *
	$put_¨ch
 (
¨ch
)

949  (
	`put_èbÀ_íåy
(
¨ch_«me
, "Unknow¿Archôe˘uª", 
¨ch
));

950 
	}
}

952 *
	$put_os
 (
os
)

954  (
	`put_èbÀ_íåy
(
os_«me
, "Unknow¿OS", 
os
));

955 
	}
}

957 *
	$put_ty≥
 (
ty≥
)

959  (
	`put_èbÀ_íåy
(
ty≥_«me
, "Unknow¿Image", 
ty≥
));

960 
	}
}

962 *
	$put_comp
 (
comp
)

964  (
	`put_èbÀ_íåy
(
comp_«me
, "Unknow¿Com¥essi⁄", 
comp
));

965 
	}
}

967 *
	$put_èbÀ_íåy
 (
èbÀ_íåy_t
 *
èbÀ
, *
msg
, 
ty≥
)

969 ; 
èbÀ
->
vÆ
>=0; ++table) {

970 i‡(
èbÀ
->
vÆ
 =
ty≥
)

971  (
èbÀ
->
 ame
);

973  (
msg
);

974 
	}
}

976 
	$gë_¨ch
(*
«me
)

978  (
	`gë_èbÀ_íåy
(
¨ch_«me
, "CPU", 
«me
));

979 
	}
}

982 
	$gë_comp
(*
«me
)

984  (
	`gë_èbÀ_íåy
(
comp_«me
, "Com¥essi⁄", 
«me
));

985 
	}
}

988 
	$gë_os
 (*
«me
)

990  (
	`gë_èbÀ_íåy
(
os_«me
, "OS", 
«me
));

991 
	}
}

994 
	$gë_ty≥
(*
«me
)

996  (
	`gë_èbÀ_íåy
(
ty≥_«me
, "Image", 
«me
));

997 
	}
}

999 
	$gë_èbÀ_íåy
 (
èbÀ_íåy_t
 *
èbÀ
, *
msg
, *
«me
)

1001 
èbÀ_íåy_t
 *
t
;

1002 
fú°
 = 1;

1004 
t
=
èbÀ
;Å->
vÆ
>=0; ++t) {

1005 i‡(
t
->
¢ame
 && 
	`°rˇ£cmp
—->¢ame, 
«me
)==0)

1006  (
t
->
vÆ
);

1008 
	`Ârötf
 (
°dîr
, "\nInvÆid %†Ty≥ - vÆidÇame†¨e", 
msg
);

1009 
t
=
èbÀ
;Å->
vÆ
>=0; ++t) {

1010 i‡(
t
->
¢ame
 =
NULL
)

1012 
	`Ârötf
 (
°dîr
, "%¯%s", (
fú°
Ë? ':' : ',', 
t
->
¢ame
);

1013 
fú°
 = 0;

1015 
	`Ârötf
 (
°dîr
, "\n");

1017 
	}
}

	@/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/uboot_version.h

9 
	#RALINK_LOCAL_VERSION
 "4.3.0.0"

	)

	@/usr/include/asm/byteorder.h

1 #i‚de‡
_ASM_X86_BYTEORDER_H


2 
	#_ASM_X86_BYTEORDER_H


	)

4 
	~<löux/byã‹dî/lôée_ídün.h
>

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~<asm/posix_ty≥s_32.h
>

3 #ñi‡
deföed
(
__ILP32__
)

4 
	~<asm/posix_ty≥s_x32.h
>

6 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/asm/ptrace.h

1 #i‚de‡
_ASM_X86_PTRACE_H


2 
	#_ASM_X86_PTRACE_H


	)

5 
	~<asm/±ø˚-abi.h
>

6 
	~<asm/¥o˚ss‹-Êags.h
>

9 #i‚de‡
__ASSEMBLY__


11 #ifde‡
__i386__


16 
	s±_ªgs
 {

17 
	mebx
;

18 
	mecx
;

19 
	medx
;

20 
	mesi
;

21 
	medi
;

22 
	mebp
;

23 
	móx
;

24 
	mxds
;

25 
	mxes
;

26 
	mxfs
;

27 
	mxgs
;

28 
	m‹ig_óx
;

29 
	meù
;

30 
	mxcs
;

31 
	meÊags
;

32 
	me•
;

33 
	mxss
;

40 
	s±_ªgs
 {

45 
	mr15
;

46 
	mr14
;

47 
	mr13
;

48 
	mr12
;

49 
	mrbp
;

50 
	mrbx
;

52 
	mr11
;

53 
	mr10
;

54 
	mr9
;

55 
	mr8
;

56 
	møx
;

57 
	mrcx
;

58 
	mrdx
;

59 
	mrsi
;

60 
	mrdi
;

65 
	m‹ig_øx
;

67 
	mrù
;

68 
	mcs
;

69 
	meÊags
;

70 
	mr•
;

71 
	mss
;

	@/usr/include/asm/setup.h

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


119 #unde‡
°©ic_as£π


120 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

77 
	~<bôs/°©.h
>

79 
	#S_IFMT
 
__S_IFMT


	)

80 
	#S_IFDIR
 
__S_IFDIR


	)

81 
	#S_IFCHR
 
__S_IFCHR


	)

82 
	#S_IFBLK
 
__S_IFBLK


	)

83 
	#S_IFREG
 
__S_IFREG


	)

84 #ifde‡
__S_IFIFO


85 
	#S_IFIFO
 
__S_IFIFO


	)

87 #ifde‡
__S_IFLNK


88 
	#S_IFLNK
 
__S_IFLNK


	)

90 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


91 
	#S_IFSOCK
 
__S_IFSOCK


	)

96 
	#S_ISUID
 
__S_ISUID


	)

97 
	#S_ISGID
 
__S_ISGID


	)

99 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


101 
	#S_ISVTX
 
__S_ISVTX


	)

104 
	#S_IRUSR
 
__S_IREAD


	)

105 
	#S_IWUSR
 
__S_IWRITE


	)

106 
	#S_IXUSR
 
__S_IEXEC


	)

108 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

110 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

111 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

112 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

114 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

116 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

117 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

118 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

120 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

123 #ifdef 
__USE_MISC


124 #i‚de‡
R_OK


127 
	#R_OK
 4

	)

128 
	#W_OK
 2

	)

129 
	#X_OK
 1

	)

130 
	#F_OK
 0

	)

135 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


136 
	#SEEK_SET
 0

	)

137 
	#SEEK_CUR
 1

	)

138 
	#SEEK_END
 2

	)

146 
f˙é
 (
__fd
, 
__cmd
, ...);

155 #i‚de‡
__USE_FILE_OFFSET64


156 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

158 #ifde‡
__REDIRECT


159 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

160 
	`__n⁄nuŒ
 ((1));

162 
	#›í
 
›í64


	)

165 #ifde‡
__USE_LARGEFILE64


166 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

169 #ifde‡
__USE_ATFILE


179 #i‚de‡
__USE_FILE_OFFSET64


180 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

181 
	`__n⁄nuŒ
 ((2));

183 #ifde‡
__REDIRECT


184 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

185 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

187 
	#›í©
 
›í©64


	)

190 #ifde‡
__USE_LARGEFILE64


191 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

192 
	`__n⁄nuŒ
 ((2));

201 #i‚de‡
__USE_FILE_OFFSET64


202 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

204 #ifde‡
__REDIRECT


205 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

206 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

208 
	#¸ót
 
¸ót64


	)

211 #ifde‡
__USE_LARGEFILE64


212 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

215 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

216 && !
deföed
 
__USE_POSIX
))

225 
	#F_ULOCK
 0

	)

226 
	#F_LOCK
 1

	)

227 
	#F_TLOCK
 2

	)

228 
	#F_TEST
 3

	)

230 #i‚de‡
__USE_FILE_OFFSET64


231 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

233 #ifde‡
__REDIRECT


234 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

236 
	#lockf
 
lockf64


	)

239 #ifde‡
__USE_LARGEFILE64


240 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

244 #ifde‡
__USE_XOPEN2K


247 #i‚de‡
__USE_FILE_OFFSET64


248 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

249 
__advi£
Ë
__THROW
;

251 #ifde‡
__REDIRECT_NTH


252 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

253 
__off64_t
 
__Àn
, 
__advi£
),

254 
posix_Ádvi£64
);

256 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

259 #ifde‡
__USE_LARGEFILE64


260 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

261 
__advi£
Ë
__THROW
;

269 #i‚de‡
__USE_FILE_OFFSET64


270 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

272 #ifde‡
__REDIRECT


273 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

274 
__off64_t
 
__Àn
),

275 
posix_ÁŒoˇã64
);

277 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

280 #ifde‡
__USE_LARGEFILE64


281 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

287 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

288 && 
deföed
 
__va_¨g_∑ck_Àn


289 
	~<bôs/f˙é2.h
>

292 
__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/linux/byteorder/big_endian.h

1 #i‚de‡
_LINUX_BYTEORDER_BIG_ENDIAN_H


2 
	#_LINUX_BYTEORDER_BIG_ENDIAN_H


	)

4 #i‚de‡
__BIG_ENDIAN


5 
	#__BIG_ENDIAN
 4321

	)

7 #i‚de‡
__BIG_ENDIAN_BITFIELD


8 
	#__BIG_ENDIAN_BITFIELD


	)

11 
	~<löux/ty≥s.h
>

12 
	~<löux/swab.h
>

14 
	#__c⁄°™t_ht⁄l
(
x
Ë((
__be32
)(
__u32
)(x))

	)

15 
	#__c⁄°™t_¡ohl
(
x
Ë((
__u32
)(
__be32
)(x))

	)

16 
	#__c⁄°™t_ht⁄s
(
x
Ë((
__be16
)(
__u16
)(x))

	)

17 
	#__c⁄°™t_¡ohs
(
x
Ë((
__u16
)(
__be16
)(x))

	)

18 
	#__c⁄°™t_˝u_to_À64
(
x
Ë((
__À64
)
	`___c⁄°™t_swab64
((x)))

	)

19 
	#__c⁄°™t_À64_to_˝u
(
x
Ë
	`___c⁄°™t_swab64
((
__u64
)(
__À64
)(x))

	)

20 
	#__c⁄°™t_˝u_to_À32
(
x
Ë((
__À32
)
	`___c⁄°™t_swab32
((x)))

	)

21 
	#__c⁄°™t_À32_to_˝u
(
x
Ë
	`___c⁄°™t_swab32
((
__u32
)(
__À32
)(x))

	)

22 
	#__c⁄°™t_˝u_to_À16
(
x
Ë((
__À16
)
	`___c⁄°™t_swab16
((x)))

	)

23 
	#__c⁄°™t_À16_to_˝u
(
x
Ë
	`___c⁄°™t_swab16
((
__u16
)(
__À16
)(x))

	)

24 
	#__c⁄°™t_˝u_to_be64
(
x
Ë((
__be64
)(
__u64
)(x))

	)

25 
	#__c⁄°™t_be64_to_˝u
(
x
Ë((
__u64
)(
__be64
)(x))

	)

26 
	#__c⁄°™t_˝u_to_be32
(
x
Ë((
__be32
)(
__u32
)(x))

	)

27 
	#__c⁄°™t_be32_to_˝u
(
x
Ë((
__u32
)(
__be32
)(x))

	)

28 
	#__c⁄°™t_˝u_to_be16
(
x
Ë((
__be16
)(
__u16
)(x))

	)

29 
	#__c⁄°™t_be16_to_˝u
(
x
Ë((
__u16
)(
__be16
)(x))

	)

30 
	#__˝u_to_À64
(
x
Ë((
__À64
)
	`__swab64
((x)))

	)

31 
	#__À64_to_˝u
(
x
Ë
	`__swab64
((
__u64
)(
__À64
)(x))

	)

32 
	#__˝u_to_À32
(
x
Ë((
__À32
)
	`__swab32
((x)))

	)

33 
	#__À32_to_˝u
(
x
Ë
	`__swab32
((
__u32
)(
__À32
)(x))

	)

34 
	#__˝u_to_À16
(
x
Ë((
__À16
)
	`__swab16
((x)))

	)

35 
	#__À16_to_˝u
(
x
Ë
	`__swab16
((
__u16
)(
__À16
)(x))

	)

36 
	#__˝u_to_be64
(
x
Ë((
__be64
)(
__u64
)(x))

	)

37 
	#__be64_to_˝u
(
x
Ë((
__u64
)(
__be64
)(x))

	)

38 
	#__˝u_to_be32
(
x
Ë((
__be32
)(
__u32
)(x))

	)

39 
	#__be32_to_˝u
(
x
Ë((
__u32
)(
__be32
)(x))

	)

40 
	#__˝u_to_be16
(
x
Ë((
__be16
)(
__u16
)(x))

	)

41 
	#__be16_to_˝u
(
x
Ë((
__u16
)(
__be16
)(x))

	)

43 
__ölöe__
 
__À64
 
	$__˝u_to_À64p
(c⁄° 
__u64
 *
p
)

45  (
__À64
)
	`__swab64p
(
p
);

46 
	}
}

47 
__ölöe__
 
__u64
 
	$__À64_to_˝up
(c⁄° 
__À64
 *
p
)

49  
	`__swab64p
((
__u64
 *)
p
);

50 
	}
}

51 
__ölöe__
 
__À32
 
	$__˝u_to_À32p
(c⁄° 
__u32
 *
p
)

53  (
__À32
)
	`__swab32p
(
p
);

54 
	}
}

55 
__ölöe__
 
__u32
 
	$__À32_to_˝up
(c⁄° 
__À32
 *
p
)

57  
	`__swab32p
((
__u32
 *)
p
);

58 
	}
}

59 
__ölöe__
 
__À16
 
	$__˝u_to_À16p
(c⁄° 
__u16
 *
p
)

61  (
__À16
)
	`__swab16p
(
p
);

62 
	}
}

63 
__ölöe__
 
__u16
 
	$__À16_to_˝up
(c⁄° 
__À16
 *
p
)

65  
	`__swab16p
((
__u16
 *)
p
);

66 
	}
}

67 
__ölöe__
 
__be64
 
	$__˝u_to_be64p
(c⁄° 
__u64
 *
p
)

69  (
__be64
)*
p
;

70 
	}
}

71 
__ölöe__
 
__u64
 
	$__be64_to_˝up
(c⁄° 
__be64
 *
p
)

73  (
__u64
)*
p
;

74 
	}
}

75 
__ölöe__
 
__be32
 
	$__˝u_to_be32p
(c⁄° 
__u32
 *
p
)

77  (
__be32
)*
p
;

78 
	}
}

79 
__ölöe__
 
__u32
 
	$__be32_to_˝up
(c⁄° 
__be32
 *
p
)

81  (
__u32
)*
p
;

82 
	}
}

83 
__ölöe__
 
__be16
 
	$__˝u_to_be16p
(c⁄° 
__u16
 *
p
)

85  (
__be16
)*
p
;

86 
	}
}

87 
__ölöe__
 
__u16
 
	$__be16_to_˝up
(c⁄° 
__be16
 *
p
)

89  (
__u16
)*
p
;

90 
	}
}

91 
	#__˝u_to_À64s
(
x
Ë
	`__swab64s
((x))

	)

92 
	#__À64_to_˝us
(
x
Ë
	`__swab64s
((x))

	)

93 
	#__˝u_to_À32s
(
x
Ë
	`__swab32s
((x))

	)

94 
	#__À32_to_˝us
(
x
Ë
	`__swab32s
((x))

	)

95 
	#__˝u_to_À16s
(
x
Ë
	`__swab16s
((x))

	)

96 
	#__À16_to_˝us
(
x
Ë
	`__swab16s
((x))

	)

97 
	#__˝u_to_be64s
(
x
Ëdÿ{ ()(x); } 0)

	)

98 
	#__be64_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

99 
	#__˝u_to_be32s
(
x
Ëdÿ{ ()(x); } 0)

	)

100 
	#__be32_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

101 
	#__˝u_to_be16s
(
x
Ëdÿ{ ()(x); } 0)

	)

102 
	#__be16_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

	@/usr/include/linux/byteorder/little_endian.h

1 #i‚de‡
_LINUX_BYTEORDER_LITTLE_ENDIAN_H


2 
	#_LINUX_BYTEORDER_LITTLE_ENDIAN_H


	)

4 #i‚de‡
__LITTLE_ENDIAN


5 
	#__LITTLE_ENDIAN
 1234

	)

7 #i‚de‡
__LITTLE_ENDIAN_BITFIELD


8 
	#__LITTLE_ENDIAN_BITFIELD


	)

11 
	~<löux/ty≥s.h
>

12 
	~<löux/swab.h
>

14 
	#__c⁄°™t_ht⁄l
(
x
Ë((
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

15 
	#__c⁄°™t_¡ohl
(
x
Ë
	`___c⁄°™t_swab32
((
__be32
)(x))

	)

16 
	#__c⁄°™t_ht⁄s
(
x
Ë((
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

17 
	#__c⁄°™t_¡ohs
(
x
Ë
	`___c⁄°™t_swab16
((
__be16
)(x))

	)

18 
	#__c⁄°™t_˝u_to_À64
(
x
Ë((
__À64
)(
__u64
)(x))

	)

19 
	#__c⁄°™t_À64_to_˝u
(
x
Ë((
__u64
)(
__À64
)(x))

	)

20 
	#__c⁄°™t_˝u_to_À32
(
x
Ë((
__À32
)(
__u32
)(x))

	)

21 
	#__c⁄°™t_À32_to_˝u
(
x
Ë((
__u32
)(
__À32
)(x))

	)

22 
	#__c⁄°™t_˝u_to_À16
(
x
Ë((
__À16
)(
__u16
)(x))

	)

23 
	#__c⁄°™t_À16_to_˝u
(
x
Ë((
__u16
)(
__À16
)(x))

	)

24 
	#__c⁄°™t_˝u_to_be64
(
x
Ë((
__be64
)
	`___c⁄°™t_swab64
((x)))

	)

25 
	#__c⁄°™t_be64_to_˝u
(
x
Ë
	`___c⁄°™t_swab64
((
__u64
)(
__be64
)(x))

	)

26 
	#__c⁄°™t_˝u_to_be32
(
x
Ë((
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

27 
	#__c⁄°™t_be32_to_˝u
(
x
Ë
	`___c⁄°™t_swab32
((
__u32
)(
__be32
)(x))

	)

28 
	#__c⁄°™t_˝u_to_be16
(
x
Ë((
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

29 
	#__c⁄°™t_be16_to_˝u
(
x
Ë
	`___c⁄°™t_swab16
((
__u16
)(
__be16
)(x))

	)

30 
	#__˝u_to_À64
(
x
Ë((
__À64
)(
__u64
)(x))

	)

31 
	#__À64_to_˝u
(
x
Ë((
__u64
)(
__À64
)(x))

	)

32 
	#__˝u_to_À32
(
x
Ë((
__À32
)(
__u32
)(x))

	)

33 
	#__À32_to_˝u
(
x
Ë((
__u32
)(
__À32
)(x))

	)

34 
	#__˝u_to_À16
(
x
Ë((
__À16
)(
__u16
)(x))

	)

35 
	#__À16_to_˝u
(
x
Ë((
__u16
)(
__À16
)(x))

	)

36 
	#__˝u_to_be64
(
x
Ë((
__be64
)
	`__swab64
((x)))

	)

37 
	#__be64_to_˝u
(
x
Ë
	`__swab64
((
__u64
)(
__be64
)(x))

	)

38 
	#__˝u_to_be32
(
x
Ë((
__be32
)
	`__swab32
((x)))

	)

39 
	#__be32_to_˝u
(
x
Ë
	`__swab32
((
__u32
)(
__be32
)(x))

	)

40 
	#__˝u_to_be16
(
x
Ë((
__be16
)
	`__swab16
((x)))

	)

41 
	#__be16_to_˝u
(
x
Ë
	`__swab16
((
__u16
)(
__be16
)(x))

	)

43 
__ölöe__
 
__À64
 
	$__˝u_to_À64p
(c⁄° 
__u64
 *
p
)

45  (
__À64
)*
p
;

46 
	}
}

47 
__ölöe__
 
__u64
 
	$__À64_to_˝up
(c⁄° 
__À64
 *
p
)

49  (
__u64
)*
p
;

50 
	}
}

51 
__ölöe__
 
__À32
 
	$__˝u_to_À32p
(c⁄° 
__u32
 *
p
)

53  (
__À32
)*
p
;

54 
	}
}

55 
__ölöe__
 
__u32
 
	$__À32_to_˝up
(c⁄° 
__À32
 *
p
)

57  (
__u32
)*
p
;

58 
	}
}

59 
__ölöe__
 
__À16
 
	$__˝u_to_À16p
(c⁄° 
__u16
 *
p
)

61  (
__À16
)*
p
;

62 
	}
}

63 
__ölöe__
 
__u16
 
	$__À16_to_˝up
(c⁄° 
__À16
 *
p
)

65  (
__u16
)*
p
;

66 
	}
}

67 
__ölöe__
 
__be64
 
	$__˝u_to_be64p
(c⁄° 
__u64
 *
p
)

69  (
__be64
)
	`__swab64p
(
p
);

70 
	}
}

71 
__ölöe__
 
__u64
 
	$__be64_to_˝up
(c⁄° 
__be64
 *
p
)

73  
	`__swab64p
((
__u64
 *)
p
);

74 
	}
}

75 
__ölöe__
 
__be32
 
	$__˝u_to_be32p
(c⁄° 
__u32
 *
p
)

77  (
__be32
)
	`__swab32p
(
p
);

78 
	}
}

79 
__ölöe__
 
__u32
 
	$__be32_to_˝up
(c⁄° 
__be32
 *
p
)

81  
	`__swab32p
((
__u32
 *)
p
);

82 
	}
}

83 
__ölöe__
 
__be16
 
	$__˝u_to_be16p
(c⁄° 
__u16
 *
p
)

85  (
__be16
)
	`__swab16p
(
p
);

86 
	}
}

87 
__ölöe__
 
__u16
 
	$__be16_to_˝up
(c⁄° 
__be16
 *
p
)

89  
	`__swab16p
((
__u16
 *)
p
);

90 
	}
}

91 
	#__˝u_to_À64s
(
x
Ëdÿ{ ()(x); } 0)

	)

92 
	#__À64_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

93 
	#__˝u_to_À32s
(
x
Ëdÿ{ ()(x); } 0)

	)

94 
	#__À32_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

95 
	#__˝u_to_À16s
(
x
Ëdÿ{ ()(x); } 0)

	)

96 
	#__À16_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

97 
	#__˝u_to_be64s
(
x
Ë
	`__swab64s
((x))

	)

98 
	#__be64_to_˝us
(
x
Ë
	`__swab64s
((x))

	)

99 
	#__˝u_to_be32s
(
x
Ë
	`__swab32s
((x))

	)

100 
	#__be32_to_˝us
(
x
Ë
	`__swab32s
((x))

	)

101 
	#__˝u_to_be16s
(
x
Ë
	`__swab16s
((x))

	)

102 
	#__be16_to_˝us
(
x
Ë
	`__swab16s
((x))

	)

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

4 
	~<löux/sysöfo.h
>

9 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

10 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/rtc.h

11 #i‚de‡
_LINUX_RTC_H_


12 
	#_LINUX_RTC_H_


	)

20 
	sπc_time
 {

21 
	mtm_£c
;

22 
	mtm_mö
;

23 
	mtm_hour
;

24 
	mtm_mday
;

25 
	mtm_m⁄
;

26 
	mtm_yór
;

27 
	mtm_wday
;

28 
	mtm_yday
;

29 
	mtm_isd°
;

36 
	sπc_wkÆrm
 {

37 
	míabÀd
;

38 
	m≥ndög
;

39 
πc_time
 
	mtime
;

55 
	sπc_∂l_öfo
 {

56 
	m∂l_˘æ
;

57 
	m∂l_vÆue
;

58 
	m∂l_max
;

59 
	m∂l_mö
;

60 
	m∂l_posmu…
;

61 
	m∂l_√gmu…
;

62 
	m∂l_˛ock
;

70 
	#RTC_AIE_ON
 
	`_IO
('p', 0x01Ë

	)

71 
	#RTC_AIE_OFF
 
	`_IO
('p', 0x02Ë

	)

72 
	#RTC_UIE_ON
 
	`_IO
('p', 0x03Ë

	)

73 
	#RTC_UIE_OFF
 
	`_IO
('p', 0x04Ë

	)

74 
	#RTC_PIE_ON
 
	`_IO
('p', 0x05Ë

	)

75 
	#RTC_PIE_OFF
 
	`_IO
('p', 0x06Ë

	)

76 
	#RTC_WIE_ON
 
	`_IO
('p', 0x0fË

	)

77 
	#RTC_WIE_OFF
 
	`_IO
('p', 0x10Ë

	)

79 
	#RTC_ALM_SET
 
	`_IOW
('p', 0x07, 
πc_time
Ë

	)

80 
	#RTC_ALM_READ
 
	`_IOR
('p', 0x08, 
πc_time
Ë

	)

81 
	#RTC_RD_TIME
 
	`_IOR
('p', 0x09, 
πc_time
Ë

	)

82 
	#RTC_SET_TIME
 
	`_IOW
('p', 0x0a, 
πc_time
Ë

	)

83 
	#RTC_IRQP_READ
 
	`_IOR
('p', 0x0b, Ë

	)

84 
	#RTC_IRQP_SET
 
	`_IOW
('p', 0x0c, Ë

	)

85 
	#RTC_EPOCH_READ
 
	`_IOR
('p', 0x0d, Ë

	)

86 
	#RTC_EPOCH_SET
 
	`_IOW
('p', 0x0e, Ë

	)

88 
	#RTC_WKALM_SET
 
	`_IOW
('p', 0x0f, 
πc_wkÆrm
)

	)

89 
	#RTC_WKALM_RD
 
	`_IOR
('p', 0x10, 
πc_wkÆrm
)

	)

91 
	#RTC_PLL_GET
 
	`_IOR
('p', 0x11, 
πc_∂l_öfo
Ë

	)

92 
	#RTC_PLL_SET
 
	`_IOW
('p', 0x12, 
πc_∂l_öfo
Ë

	)

94 
	#RTC_VL_READ
 
	`_IOR
('p', 0x13, Ë

	)

95 
	#RTC_VL_CLR
 
	`_IO
('p', 0x14Ë

	)

98 
	#RTC_IRQF
 0x80

	)

99 
	#RTC_PF
 0x40

	)

100 
	#RTC_AF
 0x20

	)

101 
	#RTC_UF
 0x10

	)

104 
	#RTC_MAX_FREQ
 8192

	)

	@/usr/include/linux/sched.h

1 #i‚de‡
_LINUX_SCHED_H


2 
	#_LINUX_SCHED_H


	)

7 
	#CSIGNAL
 0x000000f‡

	)

8 
	#CLONE_VM
 0x00000100

	)

9 
	#CLONE_FS
 0x00000200

	)

10 
	#CLONE_FILES
 0x00000400

	)

11 
	#CLONE_SIGHAND
 0x00000800

	)

12 
	#CLONE_PTRACE
 0x00002000

	)

13 
	#CLONE_VFORK
 0x00004000

	)

14 
	#CLONE_PARENT
 0x00008000

	)

15 
	#CLONE_THREAD
 0x00010000

	)

16 
	#CLONE_NEWNS
 0x00020000

	)

17 
	#CLONE_SYSVSEM
 0x00040000

	)

18 
	#CLONE_SETTLS
 0x00080000

	)

19 
	#CLONE_PARENT_SETTID
 0x00100000

	)

20 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

21 
	#CLONE_DETACHED
 0x00400000

	)

22 
	#CLONE_UNTRACED
 0x00800000

	)

23 
	#CLONE_CHILD_SETTID
 0x01000000

	)

24 
	#CLONE_NEWCGROUP
 0x02000000

	)

25 
	#CLONE_NEWUTS
 0x04000000

	)

26 
	#CLONE_NEWIPC
 0x08000000

	)

27 
	#CLONE_NEWUSER
 0x10000000

	)

28 
	#CLONE_NEWPID
 0x20000000

	)

29 
	#CLONE_NEWNET
 0x40000000

	)

30 
	#CLONE_IO
 0x80000000

	)

35 
	#SCHED_NORMAL
 0

	)

36 
	#SCHED_FIFO
 1

	)

37 
	#SCHED_RR
 2

	)

38 
	#SCHED_BATCH
 3

	)

40 
	#SCHED_IDLE
 5

	)

41 
	#SCHED_DEADLINE
 6

	)

44 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

49 
	#SCHED_FLAG_RESET_ON_FORK
 0x01

	)

	@/usr/include/linux/stat.h

1 #i‚de‡
_LINUX_STAT_H


2 
	#_LINUX_STAT_H


	)

5 #i‡
deföed
(
__KERNEL__
Ë|| !deföed(
__GLIBC__
) || (__GLIBC__ < 2)

7 
	#S_IFMT
 00170000

	)

8 
	#S_IFSOCK
 0140000

	)

9 
	#S_IFLNK
 0120000

	)

10 
	#S_IFREG
 0100000

	)

11 
	#S_IFBLK
 0060000

	)

12 
	#S_IFDIR
 0040000

	)

13 
	#S_IFCHR
 0020000

	)

14 
	#S_IFIFO
 0010000

	)

15 
	#S_ISUID
 0004000

	)

16 
	#S_ISGID
 0002000

	)

17 
	#S_ISVTX
 0001000

	)

19 
	#S_ISLNK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFLNK
)

	)

20 
	#S_ISREG
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFREG
)

	)

21 
	#S_ISDIR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFDIR
)

	)

22 
	#S_ISCHR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFCHR
)

	)

23 
	#S_ISBLK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFBLK
)

	)

24 
	#S_ISFIFO
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFIFO
)

	)

25 
	#S_ISSOCK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFSOCK
)

	)

27 
	#S_IRWXU
 00700

	)

28 
	#S_IRUSR
 00400

	)

29 
	#S_IWUSR
 00200

	)

30 
	#S_IXUSR
 00100

	)

32 
	#S_IRWXG
 00070

	)

33 
	#S_IRGRP
 00040

	)

34 
	#S_IWGRP
 00020

	)

35 
	#S_IXGRP
 00010

	)

37 
	#S_IRWXO
 00007

	)

38 
	#S_IROTH
 00004

	)

39 
	#S_IWOTH
 00002

	)

40 
	#S_IXOTH
 00001

	)

	@/usr/include/linux/stddef.h

	@/usr/include/linux/string.h

1 #i‚de‡
_LINUX_STRING_H_


2 
	#_LINUX_STRING_H_


	)

6 
	~<°rög.h
>

	@/usr/include/linux/time.h

1 #i‚de‡
_LINUX_TIME_H


2 
	#_LINUX_TIME_H


	)

4 
	~<löux/ty≥s.h
>

7 #i‚de‡
_STRUCT_TIMESPEC


8 
	#_STRUCT_TIMESPEC


	)

9 
	stime•ec
 {

10 
__kî√l_time_t
 
	mtv_£c
;

11 
	mtv_n£c
;

15 
	stimevÆ
 {

16 
__kî√l_time_t
 
	mtv_£c
;

17 
__kî√l_su£c⁄ds_t
 
	mtv_u£c
;

20 
	stimez⁄e
 {

21 
	mtz_möuãswe°
;

22 
	mtz_d°time
;

30 
	#ITIMER_REAL
 0

	)

31 
	#ITIMER_VIRTUAL
 1

	)

32 
	#ITIMER_PROF
 2

	)

34 
	sôimî•ec
 {

35 
time•ec
 
	mô_öãrvÆ
;

36 
time•ec
 
	mô_vÆue
;

39 
	sôimîvÆ
 {

40 
timevÆ
 
	mô_öãrvÆ
;

41 
timevÆ
 
	mô_vÆue
;

47 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

49 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

50 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

51 
	#CLOCK_MONOTONIC_RAW
 4

	)

52 
	#CLOCK_REALTIME_COARSE
 5

	)

53 
	#CLOCK_MONOTONIC_COARSE
 6

	)

54 
	#CLOCK_BOOTTIME
 7

	)

55 
	#CLOCK_REALTIME_ALARM
 8

	)

56 
	#CLOCK_BOOTTIME_ALARM
 9

	)

57 
	#CLOCK_SGI_CYCLE
 10

	)

58 
	#CLOCK_TAI
 11

	)

60 
	#MAX_CLOCKS
 16

	)

61 
	#CLOCKS_MASK
 (
CLOCK_REALTIME
 | 
CLOCK_MONOTONIC
)

	)

62 
	#CLOCKS_MONO
 
CLOCK_MONOTONIC


	)

67 
	#TIMER_ABSTIME
 0x01

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/linux/usb/ch9.h

33 #i‚de‡
__LINUX_USB_CH9_H


34 
	#__LINUX_USB_CH9_H


	)

36 
	~<löux/ty≥s.h
>

37 
	~<asm/byã‹dî.h
>

49 
	#USB_DIR_OUT
 0

	)

50 
	#USB_DIR_IN
 0x80

	)

55 
	#USB_TYPE_MASK
 (0x03 << 5)

	)

56 
	#USB_TYPE_STANDARD
 (0x00 << 5)

	)

57 
	#USB_TYPE_CLASS
 (0x01 << 5)

	)

58 
	#USB_TYPE_VENDOR
 (0x02 << 5)

	)

59 
	#USB_TYPE_RESERVED
 (0x03 << 5)

	)

64 
	#USB_RECIP_MASK
 0x1f

	)

65 
	#USB_RECIP_DEVICE
 0x00

	)

66 
	#USB_RECIP_INTERFACE
 0x01

	)

67 
	#USB_RECIP_ENDPOINT
 0x02

	)

68 
	#USB_RECIP_OTHER
 0x03

	)

70 
	#USB_RECIP_PORT
 0x04

	)

71 
	#USB_RECIP_RPIPE
 0x05

	)

80 
	#USB_REQ_GET_STATUS
 0x00

	)

81 
	#USB_REQ_CLEAR_FEATURE
 0x01

	)

82 
	#USB_REQ_SET_FEATURE
 0x03

	)

83 
	#USB_REQ_SET_ADDRESS
 0x05

	)

84 
	#USB_REQ_GET_DESCRIPTOR
 0x06

	)

85 
	#USB_REQ_SET_DESCRIPTOR
 0x07

	)

86 
	#USB_REQ_GET_CONFIGURATION
 0x08

	)

87 
	#USB_REQ_SET_CONFIGURATION
 0x09

	)

88 
	#USB_REQ_GET_INTERFACE
 0x0A

	)

89 
	#USB_REQ_SET_INTERFACE
 0x0B

	)

90 
	#USB_REQ_SYNCH_FRAME
 0x0C

	)

91 
	#USB_REQ_SET_SEL
 0x30

	)

92 
	#USB_REQ_SET_ISOCH_DELAY
 0x31

	)

94 
	#USB_REQ_SET_ENCRYPTION
 0x0D

	)

95 
	#USB_REQ_GET_ENCRYPTION
 0x0E

	)

96 
	#USB_REQ_RPIPE_ABORT
 0x0E

	)

97 
	#USB_REQ_SET_HANDSHAKE
 0x0F

	)

98 
	#USB_REQ_RPIPE_RESET
 0x0F

	)

99 
	#USB_REQ_GET_HANDSHAKE
 0x10

	)

100 
	#USB_REQ_SET_CONNECTION
 0x11

	)

101 
	#USB_REQ_SET_SECURITY_DATA
 0x12

	)

102 
	#USB_REQ_GET_SECURITY_DATA
 0x13

	)

103 
	#USB_REQ_SET_WUSB_DATA
 0x14

	)

104 
	#USB_REQ_LOOPBACK_DATA_WRITE
 0x15

	)

105 
	#USB_REQ_LOOPBACK_DATA_READ
 0x16

	)

106 
	#USB_REQ_SET_INTERFACE_DS
 0x17

	)

119 
	#USB_DEVICE_SELF_POWERED
 0

	)

120 
	#USB_DEVICE_REMOTE_WAKEUP
 1

	)

121 
	#USB_DEVICE_TEST_MODE
 2

	)

122 
	#USB_DEVICE_BATTERY
 2

	)

123 
	#USB_DEVICE_B_HNP_ENABLE
 3

	)

124 
	#USB_DEVICE_WUSB_DEVICE
 3

	)

125 
	#USB_DEVICE_A_HNP_SUPPORT
 4

	)

126 
	#USB_DEVICE_A_ALT_HNP_SUPPORT
 5

	)

127 
	#USB_DEVICE_DEBUG_MODE
 6

	)

133 
	#TEST_J
 1

	)

134 
	#TEST_K
 2

	)

135 
	#TEST_SE0_NAK
 3

	)

136 
	#TEST_PACKET
 4

	)

137 
	#TEST_FORCE_EN
 5

	)

143 
	#USB_DEVICE_U1_ENABLE
 48

	)

144 
	#USB_DEVICE_U2_ENABLE
 49

	)

145 
	#USB_DEVICE_LTM_ENABLE
 50

	)

146 
	#USB_INTRF_FUNC_SUSPEND
 0

	)

148 
	#USB_INTR_FUNC_SUSPEND_OPT_MASK
 0xFF00

	)

152 
	#USB_INTRF_FUNC_SUSPEND_LP
 (1 << (8 + 0))

	)

153 
	#USB_INTRF_FUNC_SUSPEND_RW
 (1 << (8 + 1))

	)

158 
	#USB_INTRF_STAT_FUNC_RW_CAP
 1

	)

159 
	#USB_INTRF_STAT_FUNC_RW
 2

	)

161 
	#USB_ENDPOINT_HALT
 0

	)

164 
	#USB_DEV_STAT_U1_ENABLED
 2

	)

165 
	#USB_DEV_STAT_U2_ENABLED
 3

	)

166 
	#USB_DEV_STAT_LTM_ENABLED
 4

	)

185 
	susb_˘æªque°
 {

186 
__u8
 
	mbReque°Ty≥
;

187 
__u8
 
	mbReque°
;

188 
__À16
 
	mwVÆue
;

189 
__À16
 
	mwIndex
;

190 
__À16
 
	mwLígth
;

191 } 
__©åibuã__
 ((
∑cked
));

211 
	#USB_DT_DEVICE
 0x01

	)

212 
	#USB_DT_CONFIG
 0x02

	)

213 
	#USB_DT_STRING
 0x03

	)

214 
	#USB_DT_INTERFACE
 0x04

	)

215 
	#USB_DT_ENDPOINT
 0x05

	)

216 
	#USB_DT_DEVICE_QUALIFIER
 0x06

	)

217 
	#USB_DT_OTHER_SPEED_CONFIG
 0x07

	)

218 
	#USB_DT_INTERFACE_POWER
 0x08

	)

220 
	#USB_DT_OTG
 0x09

	)

221 
	#USB_DT_DEBUG
 0x0a

	)

222 
	#USB_DT_INTERFACE_ASSOCIATION
 0x0b

	)

224 
	#USB_DT_SECURITY
 0x0c

	)

225 
	#USB_DT_KEY
 0x0d

	)

226 
	#USB_DT_ENCRYPTION_TYPE
 0x0e

	)

227 
	#USB_DT_BOS
 0x0f

	)

228 
	#USB_DT_DEVICE_CAPABILITY
 0x10

	)

229 
	#USB_DT_WIRELESS_ENDPOINT_COMP
 0x11

	)

230 
	#USB_DT_WIRE_ADAPTER
 0x21

	)

231 
	#USB_DT_RPIPE
 0x22

	)

232 
	#USB_DT_CS_RADIO_CONTROL
 0x23

	)

234 
	#USB_DT_PIPE_USAGE
 0x24

	)

236 
	#USB_DT_SS_ENDPOINT_COMP
 0x30

	)

238 
	#USB_DT_SSP_ISOC_ENDPOINT_COMP
 0x31

	)

244 
	#USB_DT_CS_DEVICE
 (
USB_TYPE_CLASS
 | 
USB_DT_DEVICE
)

	)

245 
	#USB_DT_CS_CONFIG
 (
USB_TYPE_CLASS
 | 
USB_DT_CONFIG
)

	)

246 
	#USB_DT_CS_STRING
 (
USB_TYPE_CLASS
 | 
USB_DT_STRING
)

	)

247 
	#USB_DT_CS_INTERFACE
 (
USB_TYPE_CLASS
 | 
USB_DT_INTERFACE
)

	)

248 
	#USB_DT_CS_ENDPOINT
 (
USB_TYPE_CLASS
 | 
USB_DT_ENDPOINT
)

	)

251 
	susb_des¸ùt‹_hódî
 {

252 
__u8
 
	mbLígth
;

253 
__u8
 
	mbDes¸ùt‹Ty≥
;

254 } 
__©åibuã__
 ((
∑cked
));

260 
	susb_devi˚_des¸ùt‹
 {

261 
__u8
 
	mbLígth
;

262 
__u8
 
	mbDes¸ùt‹Ty≥
;

264 
__À16
 
	mbcdUSB
;

265 
__u8
 
	mbDevi˚Cœss
;

266 
__u8
 
	mbDevi˚SubCœss
;

267 
__u8
 
	mbDevi˚PrŸocﬁ
;

268 
__u8
 
	mbMaxPackëSize0
;

269 
__À16
 
	midVíd‹
;

270 
__À16
 
	midProdu˘
;

271 
__À16
 
	mbcdDevi˚
;

272 
__u8
 
	miM™uÁ˘uªr
;

273 
__u8
 
	miProdu˘
;

274 
__u8
 
	miSîülNumbî
;

275 
__u8
 
	mbNumC⁄figuøti⁄s
;

276 } 
__©åibuã__
 ((
∑cked
));

278 
	#USB_DT_DEVICE_SIZE
 18

	)

286 
	#USB_CLASS_PER_INTERFACE
 0

	)

287 
	#USB_CLASS_AUDIO
 1

	)

288 
	#USB_CLASS_COMM
 2

	)

289 
	#USB_CLASS_HID
 3

	)

290 
	#USB_CLASS_PHYSICAL
 5

	)

291 
	#USB_CLASS_STILL_IMAGE
 6

	)

292 
	#USB_CLASS_PRINTER
 7

	)

293 
	#USB_CLASS_MASS_STORAGE
 8

	)

294 
	#USB_CLASS_HUB
 9

	)

295 
	#USB_CLASS_CDC_DATA
 0x0a

	)

296 
	#USB_CLASS_CSCID
 0x0b

	)

297 
	#USB_CLASS_CONTENT_SEC
 0x0d

	)

298 
	#USB_CLASS_VIDEO
 0x0e

	)

299 
	#USB_CLASS_WIRELESS_CONTROLLER
 0xe0

	)

300 
	#USB_CLASS_MISC
 0xef

	)

301 
	#USB_CLASS_APP_SPEC
 0x„

	)

302 
	#USB_CLASS_VENDOR_SPEC
 0xff

	)

304 
	#USB_SUBCLASS_VENDOR_SPEC
 0xff

	)

316 
	susb_c⁄fig_des¸ùt‹
 {

317 
__u8
 
	mbLígth
;

318 
__u8
 
	mbDes¸ùt‹Ty≥
;

320 
__À16
 
	mwTŸÆLígth
;

321 
__u8
 
	mbNumI¡îÁ˚s
;

322 
__u8
 
	mbC⁄figuøti⁄VÆue
;

323 
__u8
 
	miC⁄figuøti⁄
;

324 
__u8
 
	mbmAâribuãs
;

325 
__u8
 
	mbMaxPowî
;

326 } 
__©åibuã__
 ((
∑cked
));

328 
	#USB_DT_CONFIG_SIZE
 9

	)

331 
	#USB_CONFIG_ATT_ONE
 (1 << 7Ë

	)

332 
	#USB_CONFIG_ATT_SELFPOWER
 (1 << 6Ë

	)

333 
	#USB_CONFIG_ATT_WAKEUP
 (1 << 5Ë

	)

334 
	#USB_CONFIG_ATT_BATTERY
 (1 << 4Ë

	)

339 
	susb_°rög_des¸ùt‹
 {

340 
__u8
 
	mbLígth
;

341 
__u8
 
	mbDes¸ùt‹Ty≥
;

343 
__À16
 
	mwD©a
[1];

344 } 
__©åibuã__
 ((
∑cked
));

353 
	susb_öãrÁ˚_des¸ùt‹
 {

354 
__u8
 
	mbLígth
;

355 
__u8
 
	mbDes¸ùt‹Ty≥
;

357 
__u8
 
	mbI¡îÁ˚Numbî
;

358 
__u8
 
	mbA…î«ãSëtög
;

359 
__u8
 
	mbNumEndpoöts
;

360 
__u8
 
	mbI¡îÁ˚Cœss
;

361 
__u8
 
	mbI¡îÁ˚SubCœss
;

362 
__u8
 
	mbI¡îÁ˚PrŸocﬁ
;

363 
__u8
 
	miI¡îÁ˚
;

364 } 
__©åibuã__
 ((
∑cked
));

366 
	#USB_DT_INTERFACE_SIZE
 9

	)

371 
	susb_ídpoöt_des¸ùt‹
 {

372 
__u8
 
	mbLígth
;

373 
__u8
 
	mbDes¸ùt‹Ty≥
;

375 
__u8
 
	mbEndpoötAddªss
;

376 
__u8
 
	mbmAâribuãs
;

377 
__À16
 
	mwMaxPackëSize
;

378 
__u8
 
	mbI¡îvÆ
;

382 
__u8
 
	mbRe‰esh
;

383 
__u8
 
	mbSynchAddªss
;

384 } 
__©åibuã__
 ((
∑cked
));

386 
	#USB_DT_ENDPOINT_SIZE
 7

	)

387 
	#USB_DT_ENDPOINT_AUDIO_SIZE
 9

	)

393 
	#USB_ENDPOINT_NUMBER_MASK
 0x0‡

	)

394 
	#USB_ENDPOINT_DIR_MASK
 0x80

	)

396 
	#USB_ENDPOINT_XFERTYPE_MASK
 0x03

	)

397 
	#USB_ENDPOINT_XFER_CONTROL
 0

	)

398 
	#USB_ENDPOINT_XFER_ISOC
 1

	)

399 
	#USB_ENDPOINT_XFER_BULK
 2

	)

400 
	#USB_ENDPOINT_XFER_INT
 3

	)

401 
	#USB_ENDPOINT_MAX_ADJUSTABLE
 0x80

	)

404 
	#USB_ENDPOINT_INTRTYPE
 0x30

	)

405 
	#USB_ENDPOINT_INTR_PERIODIC
 (0 << 4)

	)

406 
	#USB_ENDPOINT_INTR_NOTIFICATION
 (1 << 4)

	)

408 
	#USB_ENDPOINT_SYNCTYPE
 0x0c

	)

409 
	#USB_ENDPOINT_SYNC_NONE
 (0 << 2)

	)

410 
	#USB_ENDPOINT_SYNC_ASYNC
 (1 << 2)

	)

411 
	#USB_ENDPOINT_SYNC_ADAPTIVE
 (2 << 2)

	)

412 
	#USB_ENDPOINT_SYNC_SYNC
 (3 << 2)

	)

414 
	#USB_ENDPOINT_USAGE_MASK
 0x30

	)

415 
	#USB_ENDPOINT_USAGE_DATA
 0x00

	)

416 
	#USB_ENDPOINT_USAGE_FEEDBACK
 0x10

	)

417 
	#USB_ENDPOINT_USAGE_IMPLICIT_FB
 0x20

	)

427 
__ölöe__
 
	$usb_ídpoöt_num
(c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ïd
)

429  
ïd
->
bEndpoötAddªss
 & 
USB_ENDPOINT_NUMBER_MASK
;

430 
	}
}

439 
__ölöe__
 
	$usb_ídpoöt_ty≥
(c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ïd
)

441  
ïd
->
bmAâribuãs
 & 
USB_ENDPOINT_XFERTYPE_MASK
;

442 
	}
}

450 
__ölöe__
 
	$usb_ídpoöt_dú_ö
(c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ïd
)

452  ((
ïd
->
bEndpoötAddªss
 & 
USB_ENDPOINT_DIR_MASK
Ë=
USB_DIR_IN
);

453 
	}
}

461 
__ölöe__
 
	$usb_ídpoöt_dú_out
(

462 c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ïd
)

464  ((
ïd
->
bEndpoötAddªss
 & 
USB_ENDPOINT_DIR_MASK
Ë=
USB_DIR_OUT
);

465 
	}
}

473 
__ölöe__
 
	$usb_ídpoöt_x„r_bulk
(

474 c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ïd
)

476  ((
ïd
->
bmAâribuãs
 & 
USB_ENDPOINT_XFERTYPE_MASK
) ==

477 
USB_ENDPOINT_XFER_BULK
);

478 
	}
}

486 
__ölöe__
 
	$usb_ídpoöt_x„r_c⁄åﬁ
(

487 c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ïd
)

489  ((
ïd
->
bmAâribuãs
 & 
USB_ENDPOINT_XFERTYPE_MASK
) ==

490 
USB_ENDPOINT_XFER_CONTROL
);

491 
	}
}

500 
__ölöe__
 
	$usb_ídpoöt_x„r_öt
(

501 c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ïd
)

503  ((
ïd
->
bmAâribuãs
 & 
USB_ENDPOINT_XFERTYPE_MASK
) ==

504 
USB_ENDPOINT_XFER_INT
);

505 
	}
}

514 
__ölöe__
 
	$usb_ídpoöt_x„r_isoc
(

515 c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ïd
)

517  ((
ïd
->
bmAâribuãs
 & 
USB_ENDPOINT_XFERTYPE_MASK
) ==

518 
USB_ENDPOINT_XFER_ISOC
);

519 
	}
}

528 
__ölöe__
 
	$usb_ídpoöt_is_bulk_ö
(

529 c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ïd
)

531  
	`usb_ídpoöt_x„r_bulk
(
ïd
Ë&& 
	`usb_ídpoöt_dú_ö
(epd);

532 
	}
}

541 
__ölöe__
 
	$usb_ídpoöt_is_bulk_out
(

542 c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ïd
)

544  
	`usb_ídpoöt_x„r_bulk
(
ïd
Ë&& 
	`usb_ídpoöt_dú_out
(epd);

545 
	}
}

554 
__ölöe__
 
	$usb_ídpoöt_is_öt_ö
(

555 c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ïd
)

557  
	`usb_ídpoöt_x„r_öt
(
ïd
Ë&& 
	`usb_ídpoöt_dú_ö
(epd);

558 
	}
}

567 
__ölöe__
 
	$usb_ídpoöt_is_öt_out
(

568 c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ïd
)

570  
	`usb_ídpoöt_x„r_öt
(
ïd
Ë&& 
	`usb_ídpoöt_dú_out
(epd);

571 
	}
}

580 
__ölöe__
 
	$usb_ídpoöt_is_isoc_ö
(

581 c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ïd
)

583  
	`usb_ídpoöt_x„r_isoc
(
ïd
Ë&& 
	`usb_ídpoöt_dú_ö
(epd);

584 
	}
}

593 
__ölöe__
 
	$usb_ídpoöt_is_isoc_out
(

594 c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ïd
)

596  
	`usb_ídpoöt_x„r_isoc
(
ïd
Ë&& 
	`usb_ídpoöt_dú_out
(epd);

597 
	}
}

605 
__ölöe__
 
	$usb_ídpoöt_maxp
(c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ïd
)

607  
	`__À16_to_˝u
(
ïd
->
wMaxPackëSize
);

608 
	}
}

610 
__ölöe__
 
	$usb_ídpoöt_öãºu±_ty≥
(

611 c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ïd
)

613  
ïd
->
bmAâribuãs
 & 
USB_ENDPOINT_INTRTYPE
;

614 
	}
}

621 
	susb_s•_isoc_ï_comp_des¸ùt‹
 {

622 
__u8
 
	mbLígth
;

623 
__u8
 
	mbDes¸ùt‹Ty≥
;

624 
__À16
 
	mwRe£ved
;

625 
__À32
 
	mdwByãsPîI¡îvÆ
;

626 } 
__©åibuã__
 ((
∑cked
));

628 
	#USB_DT_SSP_ISOC_EP_COMP_SIZE
 8

	)

633 
	susb_ss_ï_comp_des¸ùt‹
 {

634 
__u8
 
	mbLígth
;

635 
__u8
 
	mbDes¸ùt‹Ty≥
;

637 
__u8
 
	mbMaxBur°
;

638 
__u8
 
	mbmAâribuãs
;

639 
__À16
 
	mwByãsPîI¡îvÆ
;

640 } 
__©åibuã__
 ((
∑cked
));

642 
	#USB_DT_SS_EP_COMP_SIZE
 6

	)

645 
__ölöe__
 

646 
	$usb_ss_max_°ªams
(c⁄° 
usb_ss_ï_comp_des¸ùt‹
 *
comp
)

648 
max_°ªams
;

650 i‡(!
comp
)

653 
max_°ªams
 = 
comp
->
bmAâribuãs
 & 0x1f;

655 i‡(!
max_°ªams
)

658 
max_°ªams
 = 1 << max_streams;

660  
max_°ªams
;

661 
	}
}

664 
	#USB_SS_MULT
(
p
Ë(1 + (’Ë& 0x3))

	)

666 
	#USB_SS_SSP_ISOC_COMP
(
p
Ë(’Ë& (1 << 7))

	)

671 
	susb_quÆifõr_des¸ùt‹
 {

672 
__u8
 
	mbLígth
;

673 
__u8
 
	mbDes¸ùt‹Ty≥
;

675 
__À16
 
	mbcdUSB
;

676 
__u8
 
	mbDevi˚Cœss
;

677 
__u8
 
	mbDevi˚SubCœss
;

678 
__u8
 
	mbDevi˚PrŸocﬁ
;

679 
__u8
 
	mbMaxPackëSize0
;

680 
__u8
 
	mbNumC⁄figuøti⁄s
;

681 
__u8
 
	mbRESERVED
;

682 } 
__©åibuã__
 ((
∑cked
));

688 
	susb_Ÿg_des¸ùt‹
 {

689 
__u8
 
	mbLígth
;

690 
__u8
 
	mbDes¸ùt‹Ty≥
;

692 
__u8
 
	mbmAâribuãs
;

693 } 
__©åibuã__
 ((
∑cked
));

696 
	susb_Ÿg20_des¸ùt‹
 {

697 
__u8
 
	mbLígth
;

698 
__u8
 
	mbDes¸ùt‹Ty≥
;

700 
__u8
 
	mbmAâribuãs
;

701 
__À16
 
	mbcdOTG
;

704 } 
__©åibuã__
 ((
∑cked
));

707 
	#USB_OTG_SRP
 (1 << 0)

	)

708 
	#USB_OTG_HNP
 (1 << 1Ë

	)

709 
	#USB_OTG_ADP
 (1 << 2Ë

	)

714 
	susb_debug_des¸ùt‹
 {

715 
__u8
 
	mbLígth
;

716 
__u8
 
	mbDes¸ùt‹Ty≥
;

719 
__u8
 
	mbDebugInEndpoöt
;

720 
__u8
 
	mbDebugOutEndpoöt
;

721 } 
__©åibuã__
((
∑cked
));

726 
	susb_öãrÁ˚_assoc_des¸ùt‹
 {

727 
__u8
 
	mbLígth
;

728 
__u8
 
	mbDes¸ùt‹Ty≥
;

730 
__u8
 
	mbFú°I¡îÁ˚
;

731 
__u8
 
	mbI¡îÁ˚Cou¡
;

732 
__u8
 
	mbFun˘i⁄Cœss
;

733 
__u8
 
	mbFun˘i⁄SubCœss
;

734 
__u8
 
	mbFun˘i⁄PrŸocﬁ
;

735 
__u8
 
	miFun˘i⁄
;

736 } 
__©åibuã__
 ((
∑cked
));

738 
	#USB_DT_INTERFACE_ASSOCIATION_SIZE
 8

	)

745 
	susb_£curôy_des¸ùt‹
 {

746 
__u8
 
	mbLígth
;

747 
__u8
 
	mbDes¸ùt‹Ty≥
;

749 
__À16
 
	mwTŸÆLígth
;

750 
__u8
 
	mbNumEn¸y±i⁄Ty≥s
;

751 } 
__©åibuã__
((
∑cked
));

758 
	susb_key_des¸ùt‹
 {

759 
__u8
 
	mbLígth
;

760 
__u8
 
	mbDes¸ùt‹Ty≥
;

762 
__u8
 
	mtTKID
[3];

763 
__u8
 
	mbRe£rved
;

764 
__u8
 
	mbKeyD©a
[0];

765 } 
__©åibuã__
((
∑cked
));

770 
	susb_í¸y±i⁄_des¸ùt‹
 {

771 
__u8
 
	mbLígth
;

772 
__u8
 
	mbDes¸ùt‹Ty≥
;

774 
__u8
 
	mbEn¸y±i⁄Ty≥
;

775 
	#USB_ENC_TYPE_UNSECURE
 0

	)

776 
	#USB_ENC_TYPE_WIRED
 1

	)

777 
	#USB_ENC_TYPE_CCM_1
 2

	)

778 
	#USB_ENC_TYPE_RSA_1
 3

	)

779 
__u8
 
	mbEn¸y±i⁄VÆue
;

780 
__u8
 
	mbAuthKeyIndex
;

781 } 
__©åibuã__
((
∑cked
));

787 
	susb_bos_des¸ùt‹
 {

788 
__u8
 
	mbLígth
;

789 
__u8
 
	mbDes¸ùt‹Ty≥
;

791 
__À16
 
	mwTŸÆLígth
;

792 
__u8
 
	mbNumDevi˚C≠s
;

793 } 
__©åibuã__
((
∑cked
));

795 
	#USB_DT_BOS_SIZE
 5

	)

799 
	susb_dev_ˇp_hódî
 {

800 
__u8
 
	mbLígth
;

801 
__u8
 
	mbDes¸ùt‹Ty≥
;

802 
__u8
 
	mbDevC≠abûôyTy≥
;

803 } 
__©åibuã__
((
∑cked
));

805 
	#USB_CAP_TYPE_WIRELESS_USB
 1

	)

807 
	susb_wúñess_ˇp_des¸ùt‹
 {

808 
__u8
 
	mbLígth
;

809 
__u8
 
	mbDes¸ùt‹Ty≥
;

810 
__u8
 
	mbDevC≠abûôyTy≥
;

812 
__u8
 
	mbmAâribuãs
;

813 
	#USB_WIRELESS_P2P_DRD
 (1 << 1)

	)

814 
	#USB_WIRELESS_BEACON_MASK
 (3 << 2)

	)

815 
	#USB_WIRELESS_BEACON_SELF
 (1 << 2)

	)

816 
	#USB_WIRELESS_BEACON_DIRECTED
 (2 << 2)

	)

817 
	#USB_WIRELESS_BEACON_NONE
 (3 << 2)

	)

818 
__À16
 
	mwPHYR©es
;

819 
	#USB_WIRELESS_PHY_53
 (1 << 0Ë

	)

820 
	#USB_WIRELESS_PHY_80
 (1 << 1)

	)

821 
	#USB_WIRELESS_PHY_107
 (1 << 2Ë

	)

822 
	#USB_WIRELESS_PHY_160
 (1 << 3)

	)

823 
	#USB_WIRELESS_PHY_200
 (1 << 4Ë

	)

824 
	#USB_WIRELESS_PHY_320
 (1 << 5)

	)

825 
	#USB_WIRELESS_PHY_400
 (1 << 6)

	)

826 
	#USB_WIRELESS_PHY_480
 (1 << 7)

	)

827 
__u8
 
	mbmTFITXPowîInfo
;

828 
__u8
 
	mbmFFITXPowîInfo
;

829 
__À16
 
	mbmB™dGroup
;

830 
__u8
 
	mbRe£rved
;

831 } 
__©åibuã__
((
∑cked
));

833 
	#USB_DT_USB_WIRELESS_CAP_SIZE
 11

	)

836 
	#USB_CAP_TYPE_EXT
 2

	)

838 
	susb_ext_ˇp_des¸ùt‹
 {

839 
__u8
 
	mbLígth
;

840 
__u8
 
	mbDes¸ùt‹Ty≥
;

841 
__u8
 
	mbDevC≠abûôyTy≥
;

842 
__À32
 
	mbmAâribuãs
;

843 
	#USB_LPM_SUPPORT
 (1 << 1Ë

	)

844 
	#USB_BESL_SUPPORT
 (1 << 2Ë

	)

845 
	#USB_BESL_BASELINE_VALID
 (1 << 3Ë

	)

846 
	#USB_BESL_DEEP_VALID
 (1 << 4Ë

	)

847 
	#USB_GET_BESL_BASELINE
(
p
Ë((’Ë& (0x‡<< 8)Ë>> 8)

	)

848 
	#USB_GET_BESL_DEEP
(
p
Ë((’Ë& (0x‡<< 12)Ë>> 12)

	)

849 } 
__©åibuã__
((
∑cked
));

851 
	#USB_DT_USB_EXT_CAP_SIZE
 7

	)

857 
	#USB_SS_CAP_TYPE
 3

	)

858 
	susb_ss_ˇp_des¸ùt‹
 {

859 
__u8
 
	mbLígth
;

860 
__u8
 
	mbDes¸ùt‹Ty≥
;

861 
__u8
 
	mbDevC≠abûôyTy≥
;

862 
__u8
 
	mbmAâribuãs
;

863 
	#USB_LTM_SUPPORT
 (1 << 1Ë

	)

864 
__À16
 
	mwS≥edSuµ‹ãd
;

865 
	#USB_LOW_SPEED_OPERATION
 (1Ë

	)

866 
	#USB_FULL_SPEED_OPERATION
 (1 << 1Ë

	)

867 
	#USB_HIGH_SPEED_OPERATION
 (1 << 2Ë

	)

868 
	#USB_5GBPS_OPERATION
 (1 << 3Ë

	)

869 
__u8
 
	mbFun˘i⁄ÆôySuµ‹t
;

870 
__u8
 
	mbU1devExôL©
;

871 
__À16
 
	mbU2DevExôL©
;

872 } 
__©åibuã__
((
∑cked
));

874 
	#USB_DT_USB_SS_CAP_SIZE
 10

	)

880 
	#CONTAINER_ID_TYPE
 4

	)

881 
	susb_ss_c⁄èöî_id_des¸ùt‹
 {

882 
__u8
 
	mbLígth
;

883 
__u8
 
	mbDes¸ùt‹Ty≥
;

884 
__u8
 
	mbDevC≠abûôyTy≥
;

885 
__u8
 
	mbRe£rved
;

886 
__u8
 
	mC⁄èöîID
[16];

887 } 
__©åibuã__
((
∑cked
));

889 
	#USB_DT_USB_SS_CONTN_ID_SIZE
 20

	)

895 
	#USB_SSP_CAP_TYPE
 0xa

	)

896 
	susb_s•_ˇp_des¸ùt‹
 {

897 
__u8
 
	mbLígth
;

898 
__u8
 
	mbDes¸ùt‹Ty≥
;

899 
__u8
 
	mbDevC≠abûôyTy≥
;

900 
__u8
 
	mbRe£rved
;

901 
__À32
 
	mbmAâribuãs
;

902 
	#USB_SSP_SUBLINK_SPEED_ATTRIBS
 (0x1‡<< 0Ë

	)

903 
	#USB_SSP_SUBLINK_SPEED_IDS
 (0x‡<< 5Ë

	)

904 
__u16
 
	mwFun˘i⁄ÆôySuµ‹t
;

905 
	#USB_SSP_MIN_SUBLINK_SPEED_ATTRIBUTE_ID
 (0xf)

	)

906 
	#USB_SSP_MIN_RX_LANE_COUNT
 (0x‡<< 8)

	)

907 
	#USB_SSP_MIN_TX_LANE_COUNT
 (0x‡<< 12)

	)

908 
__À16
 
	mwRe£rved
;

909 
__À32
 
	mbmSublökS≥edAâr
[1];

910 
	#USB_SSP_SUBLINK_SPEED_SSID
 (0xfË

	)

911 
	#USB_SSP_SUBLINK_SPEED_LSE
 (0x3 << 4Ë

	)

912 
	#USB_SSP_SUBLINK_SPEED_ST
 (0x3 << 6Ë

	)

913 
	#USB_SSP_SUBLINK_SPEED_RSVD
 (0x3‡<< 8Ë

	)

914 
	#USB_SSP_SUBLINK_SPEED_LP
 (0x3 << 14Ë

	)

915 
	#USB_SSP_SUBLINK_SPEED_LSM
 (0xf‡<< 16Ë

	)

916 } 
__©åibuã__
((
∑cked
));

922 
	#USB_PTM_CAP_TYPE
 0xb

	)

923 
	susb_±m_ˇp_des¸ùt‹
 {

924 
__u8
 
	mbLígth
;

925 
__u8
 
	mbDes¸ùt‹Ty≥
;

926 
__u8
 
	mbDevC≠abûôyTy≥
;

927 } 
__©åibuã__
((
∑cked
));

933 
	#USB_DT_USB_SSP_CAP_SIZE
(
sßc
Ë(16 + sß¯* 4)

	)

940 
	susb_wúñess_ï_comp_des¸ùt‹
 {

941 
__u8
 
	mbLígth
;

942 
__u8
 
	mbDes¸ùt‹Ty≥
;

944 
__u8
 
	mbMaxBur°
;

945 
__u8
 
	mbMaxSequí˚
;

946 
__À16
 
	mwMaxSåómDñay
;

947 
__À16
 
	mwOvîTheAúPackëSize
;

948 
__u8
 
	mbOvîTheAúI¡îvÆ
;

949 
__u8
 
	mbmCompAâribuãs
;

950 
	#USB_ENDPOINT_SWITCH_MASK
 0x03

	)

951 
	#USB_ENDPOINT_SWITCH_NO
 0

	)

952 
	#USB_ENDPOINT_SWITCH_SWITCH
 1

	)

953 
	#USB_ENDPOINT_SWITCH_SCALE
 2

	)

954 } 
__©åibuã__
((
∑cked
));

962 
	susb_h™dshake
 {

963 
__u8
 
	mbMesßgeNumbî
;

964 
__u8
 
	mbSètus
;

965 
__u8
 
	mtTKID
[3];

966 
__u8
 
	mbRe£rved
;

967 
__u8
 
	mCDID
[16];

968 
__u8
 
	mn⁄˚
[16];

969 
__u8
 
	mMIC
[8];

970 } 
__©åibuã__
((
∑cked
));

978 
	susb_c⁄√˘i⁄_c⁄ãxt
 {

979 
__u8
 
	mCHID
[16];

980 
__u8
 
	mCDID
[16];

981 
__u8
 
	mCK
[16];

982 } 
__©åibuã__
((
∑cked
));

988 
	eusb_devi˚_•ìd
 {

989 
	mUSB_SPEED_UNKNOWN
 = 0,

990 
	mUSB_SPEED_LOW
, 
	mUSB_SPEED_FULL
,

991 
	mUSB_SPEED_HIGH
,

992 
	mUSB_SPEED_WIRELESS
,

993 
	mUSB_SPEED_SUPER
,

994 
	mUSB_SPEED_SUPER_PLUS
,

998 
	eusb_devi˚_°©e
 {

1002 
	mUSB_STATE_NOTATTACHED
 = 0,

1005 
	mUSB_STATE_ATTACHED
,

1006 
	mUSB_STATE_POWERED
,

1007 
	mUSB_STATE_RECONNECTING
,

1008 
	mUSB_STATE_UNAUTHENTICATED
,

1009 
	mUSB_STATE_DEFAULT
,

1010 
	mUSB_STATE_ADDRESS
,

1011 
	mUSB_STATE_CONFIGURED
,

1013 
	mUSB_STATE_SUSPENDED


1023 
	eusb3_lök_°©e
 {

1024 
	mUSB3_LPM_U0
 = 0,

1025 
	mUSB3_LPM_U1
,

1026 
	mUSB3_LPM_U2
,

1027 
	mUSB3_LPM_U3


1030 
	#USB_DT_USB_PTM_ID_SIZE
 3

	)

1049 
	#USB3_LPM_DISABLED
 0x0

	)

1050 
	#USB3_LPM_U1_MAX_TIMEOUT
 0x7F

	)

1051 
	#USB3_LPM_U2_MAX_TIMEOUT
 0xFE

	)

1052 
	#USB3_LPM_DEVICE_INITIATED
 0xFF

	)

1054 
	susb_£t_£l_ªq
 {

1055 
__u8
 
	mu1_£l
;

1056 
__u8
 
	mu1_≥l
;

1057 
__À16
 
	mu2_£l
;

1058 
__À16
 
	mu2_≥l
;

1059 } 
__©åibuã__
 ((
∑cked
));

1066 
	#USB3_LPM_MAX_U1_SEL_PEL
 0xFF

	)

1067 
	#USB3_LPM_MAX_U2_SEL_PEL
 0xFFFF

	)

1077 
	#USB_SELF_POWER_VBUS_MAX_DRAW
 100

	)

	@/usr/include/linux/wait.h

1 #i‚de‡
_LINUX_WAIT_H


2 
	#_LINUX_WAIT_H


	)

4 
	#WNOHANG
 0x00000001

	)

5 
	#WUNTRACED
 0x00000002

	)

6 
	#WSTOPPED
 
WUNTRACED


	)

7 
	#WEXITED
 0x00000004

	)

8 
	#WCONTINUED
 0x00000008

	)

9 
	#WNOWAIT
 0x01000000

	)

11 
	#__WNOTHREAD
 0x20000000

	)

12 
	#__WALL
 0x40000000

	)

13 
	#__WCLONE
 0x80000000

	)

16 
	#P_ALL
 0

	)

17 
	#P_PID
 1

	)

18 
	#P_PGID
 2

	)

	@/usr/include/locale.h

22 #i‚def 
_LOCALE_H


23 
	#_LOCALE_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_NULL


	)

28 
	~<°ddef.h
>

29 
	~<bôs/loˇÀ.h
>

31 
	g__BEGIN_DECLS


35 
	#LC_CTYPE
 
__LC_CTYPE


	)

36 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

37 
	#LC_TIME
 
__LC_TIME


	)

38 
	#LC_COLLATE
 
__LC_COLLATE


	)

39 
	#LC_MONETARY
 
__LC_MONETARY


	)

40 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

41 
	#LC_ALL
 
__LC_ALL


	)

42 
	#LC_PAPER
 
__LC_PAPER


	)

43 
	#LC_NAME
 
__LC_NAME


	)

44 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

45 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

46 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

47 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

50 
__BEGIN_NAMESPACE_STD


53 
	slc⁄v


57 *
	mdecimÆ_poöt
;

58 *
	mthoußnds_£p
;

64 *
	mgroupög
;

70 *
	möt_cuº_symbﬁ
;

71 *
	mcuºícy_symbﬁ
;

72 *
	mm⁄_decimÆ_poöt
;

73 *
	mm⁄_thoußnds_£p
;

74 *
	mm⁄_groupög
;

75 *
	mposôive_sign
;

76 *
	m√g©ive_sign
;

77 
	möt_‰ac_digôs
;

78 
	m‰ac_digôs
;

80 
	mp_cs_¥e˚des
;

82 
	mp_£p_by_•a˚
;

84 
	mn_cs_¥e˚des
;

86 
	mn_£p_by_•a˚
;

93 
	mp_sign_po¢
;

94 
	mn_sign_po¢
;

95 #ifde‡
__USE_ISOC99


97 
	möt_p_cs_¥e˚des
;

99 
	möt_p_£p_by_•a˚
;

101 
	möt_n_cs_¥e˚des
;

103 
	möt_n_£p_by_•a˚
;

110 
	möt_p_sign_po¢
;

111 
	möt_n_sign_po¢
;

113 
	m__öt_p_cs_¥e˚des
;

114 
	m__öt_p_£p_by_•a˚
;

115 
	m__öt_n_cs_¥e˚des
;

116 
	m__öt_n_£p_by_•a˚
;

117 
	m__öt_p_sign_po¢
;

118 
	m__öt_n_sign_po¢
;

124 *
	$£éoˇÀ
 (
__ˇãg‹y
, c⁄° *
__loˇÀ
Ë
__THROW
;

127 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

129 
__END_NAMESPACE_STD


132 #ifdef 
__USE_XOPEN2K8


145 
	~<xloˇÀ.h
>

151 
__loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, c⁄° *
__loˇÀ
,

152 
__loˇÀ_t
 
__ba£
Ë
__THROW
;

158 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

159 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

160 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

161 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

162 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

163 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

164 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

165 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

166 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

167 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

168 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

169 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

170 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

171 | 
LC_NUMERIC_MASK
 \

172 | 
LC_TIME_MASK
 \

173 | 
LC_COLLATE_MASK
 \

174 | 
LC_MONETARY_MASK
 \

175 | 
LC_MESSAGES_MASK
 \

176 | 
LC_PAPER_MASK
 \

177 | 
LC_NAME_MASK
 \

178 | 
LC_ADDRESS_MASK
 \

179 | 
LC_TELEPHONE_MASK
 \

180 | 
LC_MEASUREMENT_MASK
 \

181 | 
LC_IDENTIFICATION_MASK
 \

182 )

	)

186 
__loˇÀ_t
 
	$du∂oˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

190 
	$‰ìloˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

197 
__loˇÀ_t
 
	$u£loˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

201 
	#LC_GLOBAL_LOCALE
 ((
__loˇÀ_t
Ë-1L)

	)

205 
__END_DECLS


	@/usr/include/malloc.h

19 #i‚de‡
_MALLOC_H


20 
	#_MALLOC_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°ddef.h
>

24 
	~<°dio.h
>

26 #ifde‡
_LIBC


27 
	#__MALLOC_HOOK_VOLATILE


	)

28 
	#__MALLOC_DEPRECATED


	)

30 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

31 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

35 
__BEGIN_DECLS


38 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

41 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

42 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

49 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

50 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

53 
	$‰ì
 (*
__±r
Ë
__THROW
;

56 
	$c‰ì
 (*
__±r
Ë
__THROW
;

59 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

60 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

63 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

67 *
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

71 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

74 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

75 
__THROW
 
__©åibuã_mÆloc__
;

79 
	smÆlöfo


81 
¨ía
;

82 
‹dblks
;

83 
smblks
;

84 
hblks
;

85 
hblkhd
;

86 
usmblks
;

87 
fsmblks
;

88 
u‹dblks
;

89 
f‹dblks
;

90 
kìpco°
;

94 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

97 #i‚de‡
M_MXFAST


98 
	#M_MXFAST
 1

	)

100 #i‚de‡
M_NLBLKS


101 
	#M_NLBLKS
 2

	)

103 #i‚de‡
M_GRAIN


104 
	#M_GRAIN
 3

	)

106 #i‚de‡
M_KEEP


107 
	#M_KEEP
 4

	)

111 
	#M_TRIM_THRESHOLD
 -1

	)

112 
	#M_TOP_PAD
 -2

	)

113 
	#M_MMAP_THRESHOLD
 -3

	)

114 
	#M_MMAP_MAX
 -4

	)

115 
	#M_CHECK_ACTION
 -5

	)

116 
	#M_PERTURB
 -6

	)

117 
	#M_ARENA_TEST
 -7

	)

118 
	#M_ARENA_MAX
 -8

	)

121 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

125 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

129 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

132 
	$mÆloc_°©s
 (Ë
__THROW
;

135 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

138 *
	$mÆloc_gë_°©e
 (Ë
__THROW
;

142 
	$mÆloc_£t_°©e
 (*
__±r
Ë
__THROW
;

147 (*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_öôülize_hook
) ()

148 
__MALLOC_DEPRECATED
;

150 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

152 
__MALLOC_DEPRECATED
;

153 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
)(
size_t
 
__size
,

155 
__MALLOC_DEPRECATED
;

156 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
)(*
__±r
,

157 
size_t
 
__size
,

159 
__MALLOC_DEPRECATED
;

160 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
)(
size_t
 
__Æignmít
,

161 
size_t
 
__size
,

163 
__MALLOC_DEPRECATED
;

164 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

167 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

170 
__END_DECLS


	@/usr/include/mtd/mtd-abi.h

20 #i‚de‡
__MTD_ABI_H__


21 
	#__MTD_ABI_H__


	)

23 
	~<löux/ty≥s.h
>

25 
	sîa£_öfo_u£r
 {

26 
__u32
 
	m°¨t
;

27 
__u32
 
	mÀngth
;

30 
	sîa£_öfo_u£r64
 {

31 
__u64
 
	m°¨t
;

32 
__u64
 
	mÀngth
;

35 
	smtd_oob_buf
 {

36 
__u32
 
	m°¨t
;

37 
__u32
 
	mÀngth
;

38 *
	m±r
;

41 
	smtd_oob_buf64
 {

42 
__u64
 
	m°¨t
;

43 
__u32
 
	m∑d
;

44 
__u32
 
	mÀngth
;

45 
__u64
 
	mu§_±r
;

62 
	mMTD_OPS_PLACE_OOB
 = 0,

63 
	mMTD_OPS_AUTO_OOB
 = 1,

64 
	mMTD_OPS_RAW
 = 2,

83 
	smtd_wrôe_ªq
 {

84 
__u64
 
	m°¨t
;

85 
__u64
 
	mÀn
;

86 
__u64
 
	moobÀn
;

87 
__u64
 
	mu§_d©a
;

88 
__u64
 
	mu§_oob
;

89 
__u8
 
	mmode
;

90 
__u8
 
	m∑ddög
[7];

93 
	#MTD_ABSENT
 0

	)

94 
	#MTD_RAM
 1

	)

95 
	#MTD_ROM
 2

	)

96 
	#MTD_NORFLASH
 3

	)

97 
	#MTD_NANDFLASH
 4

	)

98 
	#MTD_DATAFLASH
 6

	)

99 
	#MTD_UBIVOLUME
 7

	)

100 
	#MTD_MLCNANDFLASH
 8

	)

102 
	#MTD_WRITEABLE
 0x400

	)

103 
	#MTD_BIT_WRITEABLE
 0x800

	)

104 
	#MTD_NO_ERASE
 0x1000

	)

105 
	#MTD_POWERUP_LOCK
 0x2000

	)

108 
	#MTD_CAP_ROM
 0

	)

109 
	#MTD_CAP_RAM
 (
MTD_WRITEABLE
 | 
MTD_BIT_WRITEABLE
 | 
MTD_NO_ERASE
)

	)

110 
	#MTD_CAP_NORFLASH
 (
MTD_WRITEABLE
 | 
MTD_BIT_WRITEABLE
)

	)

111 
	#MTD_CAP_NANDFLASH
 (
MTD_WRITEABLE
)

	)

112 
	#MTD_CAP_NVRAM
 (
MTD_WRITEABLE
 | 
MTD_BIT_WRITEABLE
 | 
MTD_NO_ERASE
)

	)

115 
	#MTD_NANDECC_OFF
 0

116 
	#MTD_NANDECC_PLACE
 1

117 
	#MTD_NANDECC_AUTOPLACE
 2

118 
	#MTD_NANDECC_PLACEONLY
 3

119 
	#MTD_NANDECC_AUTOPL_USR
 4

120 

	)

122 
	#MTD_OTP_OFF
 0

	)

123 
	#MTD_OTP_FACTORY
 1

	)

124 
	#MTD_OTP_USER
 2

	)

126 
	smtd_öfo_u£r
 {

127 
__u8
 
	mty≥
;

128 
__u32
 
	mÊags
;

129 
__u32
 
	msize
;

130 
__u32
 
	mîa£size
;

131 
__u32
 
	mwrôesize
;

132 
__u32
 
	moobsize
;

133 
__u64
 
	m∑ddög
;

136 
	sªgi⁄_öfo_u£r
 {

137 
__u32
 
	moff£t
;

139 
__u32
 
	mîa£size
;

140 
__u32
 
	mnumblocks
;

141 
__u32
 
	mªgi⁄ödex
;

144 
	sŸp_öfo
 {

145 
__u32
 
	m°¨t
;

146 
__u32
 
	mÀngth
;

147 
__u32
 
	mlocked
;

157 
	#MEMGETINFO
 
	`_IOR
('M', 1, 
mtd_öfo_u£r
)

	)

159 
	#MEMERASE
 
	`_IOW
('M', 2, 
îa£_öfo_u£r
)

	)

161 
	#MEMWRITEOOB
 
	`_IOWR
('M', 3, 
mtd_oob_buf
)

	)

163 
	#MEMREADOOB
 
	`_IOWR
('M', 4, 
mtd_oob_buf
)

	)

165 
	#MEMLOCK
 
	`_IOW
('M', 5, 
îa£_öfo_u£r
)

	)

167 
	#MEMUNLOCK
 
	`_IOW
('M', 6, 
îa£_öfo_u£r
)

	)

169 
	#MEMGETREGIONCOUNT
 
	`_IOR
('M', 7, )

	)

171 
	#MEMGETREGIONINFO
 
	`_IOWR
('M', 8, 
ªgi⁄_öfo_u£r
)

	)

173 
	#MEMGETOOBSEL
 
	`_IOR
('M', 10, 
«nd_ooböfo
)

	)

175 
	#MEMGETBADBLOCK
 
	`_IOW
('M', 11, 
__kî√l_loff_t
)

	)

177 
	#MEMSETBADBLOCK
 
	`_IOW
('M', 12, 
__kî√l_loff_t
)

	)

179 
	#OTPSELECT
 
	`_IOR
('M', 13, )

	)

181 
	#OTPGETREGIONCOUNT
 
	`_IOW
('M', 14, )

	)

183 
	#OTPGETREGIONINFO
 
	`_IOW
('M', 15, 
Ÿp_öfo
)

	)

185 
	#OTPLOCK
 
	`_IOR
('M', 16, 
Ÿp_öfo
)

	)

187 
	#ECCGETLAYOUT
 
	`_IOR
('M', 17, 
«nd_ec˛ayout_u£r
)

	)

189 
	#ECCGETSTATS
 
	`_IOR
('M', 18, 
mtd_ecc_°©s
)

	)

191 
	#MTDFILEMODE
 
	`_IO
('M', 19)

	)

193 
	#MEMERASE64
 
	`_IOW
('M', 20, 
îa£_öfo_u£r64
)

	)

195 
	#MEMWRITEOOB64
 
	`_IOWR
('M', 21, 
mtd_oob_buf64
)

	)

197 
	#MEMREADOOB64
 
	`_IOWR
('M', 22, 
mtd_oob_buf64
)

	)

199 
	#MEMISLOCKED
 
	`_IOR
('M', 23, 
îa£_öfo_u£r
)

	)

205 
	#MEMWRITE
 
	`_IOWR
('M', 24, 
mtd_wrôe_ªq
)

	)

211 
	s«nd_ooböfo
 {

212 
__u32
 
	mu£ecc
;

213 
__u32
 
	meccbyãs
;

214 
__u32
 
	moob‰ì
[8][2];

215 
__u32
 
	mec˝os
[32];

218 
	s«nd_oob‰ì
 {

219 
__u32
 
	moff£t
;

220 
__u32
 
	mÀngth
;

223 
	#MTD_MAX_OOBFREE_ENTRIES
 8

	)

224 
	#MTD_MAX_ECCPOS_ENTRIES
 64

	)

233 
	s«nd_ec˛ayout_u£r
 {

234 
__u32
 
	meccbyãs
;

235 
__u32
 
	mec˝os
[
MTD_MAX_ECCPOS_ENTRIES
];

236 
__u32
 
	moobavaû
;

237 
«nd_oob‰ì
 
	moob‰ì
[
MTD_MAX_OOBFREE_ENTRIES
];

248 
	smtd_ecc_°©s
 {

249 
__u32
 
	mc‹ª˘ed
;

250 
__u32
 
	mÁûed
;

251 
__u32
 
	mbadblocks
;

252 
__u32
 
	mbbtblocks
;

272 
	emtd_fûe_modes
 {

273 
	mMTD_FILE_MODE_NORMAL
 = 
MTD_OTP_OFF
,

274 
	mMTD_FILE_MODE_OTP_FACTORY
 = 
MTD_OTP_FACTORY
,

275 
	mMTD_FILE_MODE_OTP_USER
 = 
MTD_OTP_USER
,

276 
	mMTD_FILE_MODE_RAW
,

279 
__ölöe__
 
	$mtd_ty≥_is_«nd_u£r
(c⁄° 
mtd_öfo_u£r
 *
mtd
)

281  
mtd
->
ty≥
 =
MTD_NANDFLASH
 || mtd->ty≥ =
MTD_MLCNANDFLASH
;

282 
	}
}

	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<°döt.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_MPLS
 = 137,

89 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


98 #i‚de‡
__USE_KERNEL_IPV6_DEFS


101 
	mIPPROTO_HOPOPTS
 = 0,

102 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

103 
	mIPPROTO_ROUTING
 = 43,

104 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

105 
	mIPPROTO_FRAGMENT
 = 44,

106 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

107 
	mIPPROTO_ICMPV6
 = 58,

108 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

109 
	mIPPROTO_NONE
 = 59,

110 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

111 
	mIPPROTO_DSTOPTS
 = 60,

112 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

113 
	mIPPROTO_MH
 = 135

114 
	#IPPROTO_MH
 
IPPROTO_MH


	)

119 
uöt16_t
 
	tö_p‹t_t
;

124 
	mIPPORT_ECHO
 = 7,

125 
	mIPPORT_DISCARD
 = 9,

126 
	mIPPORT_SYSTAT
 = 11,

127 
	mIPPORT_DAYTIME
 = 13,

128 
	mIPPORT_NETSTAT
 = 15,

129 
	mIPPORT_FTP
 = 21,

130 
	mIPPORT_TELNET
 = 23,

131 
	mIPPORT_SMTP
 = 25,

132 
	mIPPORT_TIMESERVER
 = 37,

133 
	mIPPORT_NAMESERVER
 = 42,

134 
	mIPPORT_WHOIS
 = 43,

135 
	mIPPORT_MTP
 = 57,

137 
	mIPPORT_TFTP
 = 69,

138 
	mIPPORT_RJE
 = 77,

139 
	mIPPORT_FINGER
 = 79,

140 
	mIPPORT_TTYLINK
 = 87,

141 
	mIPPORT_SUPDUP
 = 95,

144 
	mIPPORT_EXECSERVER
 = 512,

145 
	mIPPORT_LOGINSERVER
 = 513,

146 
	mIPPORT_CMDSERVER
 = 514,

147 
	mIPPORT_EFSSERVER
 = 520,

150 
	mIPPORT_BIFFUDP
 = 512,

151 
	mIPPORT_WHOSERVER
 = 513,

152 
	mIPPORT_ROUTESERVER
 = 520,

155 
	mIPPORT_RESERVED
 = 1024,

158 
	mIPPORT_USERRESERVED
 = 5000

166 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

167 
	#IN_CLASSA_NET
 0xff000000

	)

168 
	#IN_CLASSA_NSHIFT
 24

	)

169 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

170 
	#IN_CLASSA_MAX
 128

	)

172 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

173 
	#IN_CLASSB_NET
 0xffff0000

	)

174 
	#IN_CLASSB_NSHIFT
 16

	)

175 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

176 
	#IN_CLASSB_MAX
 65536

	)

178 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

179 
	#IN_CLASSC_NET
 0xffffff00

	)

180 
	#IN_CLASSC_NSHIFT
 8

	)

181 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

183 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

184 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

186 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

187 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

190 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

192 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

194 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

197 
	#IN_LOOPBACKNET
 127

	)

199 #i‚de‡
INADDR_LOOPBACK


200 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

204 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

205 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

206 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

207 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

209 #i‚de‡
__USE_KERNEL_IPV6_DEFS


211 
	sö6_addr


215 
uöt8_t
 
	m__u6_addr8
[16];

216 #ifde‡
__USE_MISC


217 
uöt16_t
 
	m__u6_addr16
[8];

218 
uöt32_t
 
	m__u6_addr32
[4];

220 } 
	m__ö6_u
;

221 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

222 #ifde‡
__USE_MISC


223 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

224 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

229 c⁄° 
ö6_addr
 
ö6addr_™y
;

230 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

231 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

232 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

234 
	#INET_ADDRSTRLEN
 16

	)

235 
	#INET6_ADDRSTRLEN
 46

	)

239 
	ssockaddr_ö


241 
__SOCKADDR_COMMON
 (
sö_
);

242 
ö_p‹t_t
 
	msö_p‹t
;

243 
ö_addr
 
	msö_addr
;

246 
	msö_zîo
[ (
sockaddr
) -

247 
__SOCKADDR_COMMON_SIZE
 -

248  (
ö_p‹t_t
) -

249  (
ö_addr
)];

252 #i‚de‡
__USE_KERNEL_IPV6_DEFS


254 
	ssockaddr_ö6


256 
__SOCKADDR_COMMON
 (
sö6_
);

257 
ö_p‹t_t
 
	msö6_p‹t
;

258 
uöt32_t
 
	msö6_Êowöfo
;

259 
ö6_addr
 
	msö6_addr
;

260 
uöt32_t
 
	msö6_sc›e_id
;

264 #ifde‡
__USE_MISC


266 
	sù_mªq


269 
ö_addr
 
	mimr_mu…üddr
;

272 
ö_addr
 
	mimr_öãrÁ˚
;

275 
	sù_mªq_sour˚


278 
ö_addr
 
	mimr_mu…üddr
;

281 
ö_addr
 
	mimr_öãrÁ˚
;

284 
ö_addr
 
	mimr_sour˚addr
;

288 #i‚de‡
__USE_KERNEL_IPV6_DEFS


290 
	sùv6_mªq


293 
ö6_addr
 
	mùv6mr_mu…üddr
;

296 
	mùv6mr_öãrÁ˚
;

300 #ifde‡
__USE_MISC


302 
	sgroup_ªq


305 
uöt32_t
 
	mgr_öãrÁ˚
;

308 
sockaddr_°‹age
 
	mgr_group
;

311 
	sgroup_sour˚_ªq


314 
uöt32_t
 
	mg§_öãrÁ˚
;

317 
sockaddr_°‹age
 
	mg§_group
;

320 
sockaddr_°‹age
 
	mg§_sour˚
;

325 
	sù_msfûãr


328 
ö_addr
 
	mimsf_mu…üddr
;

331 
ö_addr
 
	mimsf_öãrÁ˚
;

334 
uöt32_t
 
	mimsf_fmode
;

337 
uöt32_t
 
	mimsf_num§c
;

339 
ö_addr
 
	mimsf_¶i°
[1];

342 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

343 -  (
ö_addr
) \

344 + (
num§c
Ë*  (
ö_addr
))

	)

346 
	sgroup_fûãr


349 
uöt32_t
 
	mgf_öãrÁ˚
;

352 
sockaddr_°‹age
 
	mgf_group
;

355 
uöt32_t
 
	mgf_fmode
;

358 
uöt32_t
 
	mgf_num§c
;

360 
sockaddr_°‹age
 
	mgf_¶i°
[1];

363 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

364 -  (
sockaddr_°‹age
) \

365 + ((
num§c
) \

366 *  (
sockaddr_°‹age
)))

	)

376 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

377 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

378 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

379 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

380 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

381 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

382 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

384 
	~<ídün.h
>

387 
	~<bôs/byãsw≠.h
>

389 #ifde‡
__OPTIMIZE__


393 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


396 
	#¡ohl
(
x
Ë(x)

	)

397 
	#¡ohs
(
x
Ë(x)

	)

398 
	#ht⁄l
(
x
Ë(x)

	)

399 
	#ht⁄s
(
x
Ë(x)

	)

401 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


402 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

403 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

404 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

405 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

410 #ifde‡
__GNUC__


411 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

412 (
__exãnsi⁄__
 \

413 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

414 
__a
->
s6_addr32
[0] == 0 \

415 && 
__a
->
s6_addr32
[1] == 0 \

416 && 
__a
->
s6_addr32
[2] == 0 \

417 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

419 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

420 (
__exãnsi⁄__
 \

421 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

422 
__a
->
s6_addr32
[0] == 0 \

423 && 
__a
->
s6_addr32
[1] == 0 \

424 && 
__a
->
s6_addr32
[2] == 0 \

425 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

427 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

428 (
__exãnsi⁄__
 \

429 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

430 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

432 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

433 (
__exãnsi⁄__
 \

434 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

435 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

437 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

438 (
__exãnsi⁄__
 \

439 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

440 
__a
->
s6_addr32
[0] == 0 \

441 && 
__a
->
s6_addr32
[1] == 0 \

442 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

444 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

445 (
__exãnsi⁄__
 \

446 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

447 
__a
->
s6_addr32
[0] == 0 \

448 && 
__a
->
s6_addr32
[1] == 0 \

449 && 
__a
->
s6_addr32
[2] == 0 \

450 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

452 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

453 (
__exãnsi⁄__
 \

454 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

455 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

456 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

457 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

458 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

459 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

461 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

462 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

464 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

465 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

467 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

468 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

470 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

471 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

473 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

474 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

475 =
	`ht⁄l
 (0x„800000))

	)

477 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

478 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

479 =
	`ht⁄l
 (0x„c00000))

	)

481 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

482 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

483 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

484 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

486 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

487 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

488 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

489 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

490 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

492 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

493 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

495 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

496 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

499 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

501 #ifde‡
__USE_MISC


503 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

506 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

507 
__THROW
;

511 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

512 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

513 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

515 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

516 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

517 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

519 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

520 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

521 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

523 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

524 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

525 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

527 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

528 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

529 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

532 #ifde‡
__USE_GNU


533 
cmsghdr
;

535 #i‚de‡
__USE_KERNEL_IPV6_DEFS


537 
	sö6_pktöfo


539 
ö6_addr
 
ùi6_addr
;

540 
ùi6_ifödex
;

544 
	sù6_mtuöfo


546 
sockaddr_ö6
 
ù6m_addr
;

547 
uöt32_t
 
ù6m_mtu
;

552 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

553 
__THROW
 
__©åibuã_dïªˇãd__
;

554 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

555 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

556 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

557 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

558 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

559 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

560 
__mu…x
, 
__∂usy
)

561 
__THROW
 
__©åibuã_dïªˇãd__
;

562 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

563 
uöt8_t
 **
__çåp
)

564 
__THROW
 
__©åibuã_dïªˇãd__
;

565 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

566 
uöt8_t
 **
__çåp
, 
__ty≥
)

567 
__THROW
 
__©åibuã_dïªˇãd__
;

571 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

572 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

573 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

574 **
__d©abuÂ
Ë
__THROW
;

575 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

576 
__THROW
;

577 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

578 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

579 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

580 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

581 **
__d©abuÂ
Ë
__THROW
;

582 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

583 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

584 **
__d©abuÂ
Ë
__THROW
;

585 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

586 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

590 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

591 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

592 
__£gmíts
Ë
__THROW
;

593 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

594 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

595 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

596 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

597 
__THROW
;

603 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

604 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

605 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

606 
__THROW
;

609 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

610 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

611 
uöt32_t
 
__num§c
,

612 c⁄° 
ö_addr
 *
__¶i°
)

613 
__THROW
;

617 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

618 c⁄° 
sockaddr
 *
__group
,

619 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

620 
uöt32_t
 *
__num§c
,

621 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

624 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

625 c⁄° 
sockaddr
 *
__group
,

626 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

627 
uöt32_t
 
__num§c
,

628 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

631 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_MISC


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #ifde‡
__USE_POSIX


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #ifde‡
__USE_POSIX


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #ifde‡
__USE_POSIX2


872 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

878 
	`p˛o£
 (
FILE
 *
__°ªam
);

882 #ifdef 
__USE_POSIX


884 *
	$˘îmid
 (*
__s
Ë
__THROW
;

888 #ifde‡
__USE_XOPEN


890 *
	`cu£rid
 (*
__s
);

894 #ifdef 
__USE_GNU


895 
ob°ack
;

898 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

899 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

900 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

901 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

902 c⁄° *
__ª°ri˘
 
__f‹m©
,

903 
_G_va_li°
 
__¨gs
)

904 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

908 #ifde‡
__USE_POSIX


912 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

919 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

922 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


926 
	#__√ed_gë›t


	)

927 
	~<gë›t.h
>

932 #ifde‡
__USE_EXTERN_INLINES


933 
	~<bôs/°dio.h
>

935 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


936 
	~<bôs/°dio2.h
>

938 #ifde‡
__LDBL_COMPAT


939 
	~<bôs/°dio-ldbl.h
>

942 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_MISC


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #ifde‡
__USE_ISOC99


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_MISC


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__USE_ISOC99


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #ifde‡
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #ifde‡
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_MISC


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	$©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #ifde‡
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #ifde‡
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

758 #ifde‡
__USE_EXTERN_INLINES


759 
	~<bôs/°dlib-b£¨ch.h
>

764 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

766 #ifde‡
__USE_GNU


767 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

768 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

769 
	`__n⁄nuŒ
 ((1, 4));

774 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

775 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__END_NAMESPACE_STD


778 #ifde‡
__USE_ISOC99


779 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

780 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__BEGIN_NAMESPACE_STD


788 
div_t
 
	$div
 (
__numî
, 
__díom
)

789 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

790 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

791 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

792 
__END_NAMESPACE_STD


794 #ifde‡
__USE_ISOC99


795 
__BEGIN_NAMESPACE_C99


796 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

797 
__díom
)

798 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

799 
__END_NAMESPACE_C99


803 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

804 || 
deföed
 
__USE_MISC


811 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

812 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

817 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

818 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

824 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

827 #ifde‡
__USE_MISC


829 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

833 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

835 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

836 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

841 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

845 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

846 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

852 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

853 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

854 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

855 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

859 
__BEGIN_NAMESPACE_STD


862 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

865 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

866 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

869 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

873 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

874 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

876 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

877 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

878 
__THROW
;

879 
__END_NAMESPACE_STD


882 #ifde‡
__USE_MISC


887 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


898 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

899 *c⁄° *
__ª°ri˘
 
__tokís
,

900 **
__ª°ri˘
 
__vÆuï
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

905 #ifde‡
__USE_XOPEN


907 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2KXSI


915 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

918 #ifde‡
__USE_XOPEN


923 
	$gø¡±
 (
__fd
Ë
__THROW
;

927 
	$u∆ock±
 (
__fd
Ë
__THROW
;

932 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

935 #ifde‡
__USE_GNU


939 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

940 
__THROW
 
	`__n⁄nuŒ
 ((2));

943 
	`gë±
 ();

946 #ifde‡
__USE_MISC


950 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	~<bôs/°dlib-Êﬂt.h
>

957 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


958 
	~<bôs/°dlib.h
>

960 #ifde‡
__LDBL_COMPAT


961 
	~<bôs/°dlib-ldbl.h
>

965 #unde‡
__√ed_mÆloc_™d_ˇŒoc


967 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


171 *
	$°rdup
 (c⁄° *
__s
)

172 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_XOPEN2K8


179 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

180 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


185 
	#°rdu∑
(
s
) \

186 (
__exãnsi⁄__
 \

188 c⁄° *
__ﬁd
 = (
s
); \

189 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

190 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

191 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

192 
	}
}))

	)

195 
	#°∫du∑
(
s
, 
n
) \

196 (
__exãnsi⁄__
 \

198 c⁄° *
__ﬁd
 = (
s
); \

199 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

200 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

201 
__√w
[
__Àn
] = '\0'; \

202 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

203 }))

	)

206 
	g__BEGIN_NAMESPACE_STD


208 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


211 *
°rchr
 (*
__s
, 
__c
)

212 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

213 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

216 #ifde‡
__OPTIMIZE__


217 
__exã∫_Æways_ölöe
 *

218 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

223 
__exã∫_Æways_ölöe
 const *

224 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


226  
__buûtö_°rchr
 (
__s
, 
__c
);

231 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

232 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


238 *
	`°ºchr
 (*
__s
, 
__c
)

239 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

243 #ifde‡
__OPTIMIZE__


244 
__exã∫_Æways_ölöe
 *

245 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
__exã∫_Æways_ölöe
 const *

251 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


253  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

256 
	}
}

258 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

259 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

261 
__END_NAMESPACE_STD


263 #ifde‡
__USE_GNU


266 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


267 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

268 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

269 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 
__BEGIN_NAMESPACE_STD


280 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

281 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


290 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

291 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 #ifde‡
__OPTIMIZE__


296 
__exã∫_Æways_ölöe
 *

297 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


299  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

302 
__exã∫_Æways_ölöe
 const *

303 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


305  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

308 
	}
}

310 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

311 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


317 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

318 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

322 #ifde‡
__OPTIMIZE__


323 
__exã∫_Æways_ölöe
 *

324 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


326  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

329 
__exã∫_Æways_ölöe
 const *

330 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


332  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

335 
	}
}

337 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

338 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

343 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2));

345 
__END_NAMESPACE_STD


349 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

350 c⁄° *
__ª°ri˘
 
__dñim
,

351 **
__ª°ri˘
 
__ßve_±r
)

352 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

353 #ifde‡
__USE_POSIX


354 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

355 **
__ª°ri˘
 
__ßve_±r
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

359 #ifde‡
__USE_GNU


361 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


362 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

363 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

365 c⁄° *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

368 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

369 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 #ifde‡
__USE_GNU


377 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

378 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

379 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

383 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

384 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

387 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

392 
__BEGIN_NAMESPACE_STD


394 
size_t
 
	$°æí
 (c⁄° *
__s
)

395 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 
__END_NAMESPACE_STD


398 #ifdef 
__USE_XOPEN2K8


401 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

402 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

406 
__BEGIN_NAMESPACE_STD


408 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

409 
__END_NAMESPACE_STD


410 #ifde‡
__USE_XOPEN2K


418 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


421 #ifde‡
__REDIRECT_NTH


422 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

423 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

424 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

426 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

427 
__THROW
 
	`__n⁄nuŒ
 ((2));

428 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

433 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

434 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

438 #ifde‡
__USE_XOPEN2K8


440 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

446 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

448 #ifde‡
__USE_MISC


450 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

457 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

458 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

461 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


464 *
	`ödex
 (*
__s
, 
__c
)

465 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

466 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

467 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


470 
__exã∫_Æways_ölöe
 *

471 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


473  
	`__buûtö_ödex
 (
__s
, 
__c
);

476 
__exã∫_Æways_ölöe
 const *

477 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


479  
	`__buûtö_ödex
 (
__s
, 
__c
);

482 
	}
}

484 *
	$ödex
 (c⁄° *
__s
, 
__c
)

485 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

489 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


492 *
	`rödex
 (*
__s
, 
__c
)

493 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

495 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


498 
__exã∫_Æways_ölöe
 *

499 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


501  
	`__buûtö_rödex
 (
__s
, 
__c
);

504 
__exã∫_Æways_ölöe
 const *

505 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


507  
	`__buûtö_rödex
 (
__s
, 
__c
);

510 
	}
}

512 *
	$rödex
 (c⁄° *
__s
, 
__c
)

513 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

518 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

522 #ifdef 
__USE_GNU


523 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

524 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

525 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

530 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

534 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

537 #ifdef 
__USE_GNU


540 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

541 
__loˇÀ_t
 
__loc
)

542 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

544 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

545 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

546 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

549 #ifdef 
__USE_MISC


552 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

553 c⁄° *
__ª°ri˘
 
__dñim
)

554 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifdef 
__USE_XOPEN2K8


559 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

562 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

563 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

570 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 #ifdef 
__USE_GNU


579 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

580 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

583 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

586 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

588 #i‚de‡
ba£«me


593 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


594 "C++" *
	$ba£«me
 (*
__fûíame
)

595 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

596 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

597 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

605 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

606 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

607 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


627 
	~<bôs/°rög.h
>

630 
	~<bôs/°rög2.h
>

633 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


635 
	~<bôs/°rög3.h
>

639 #i‡
deföed
 
__USE_GNU
 && deföed 
__OPTIMIZE__
 \

640 && 
deföed
 
__exã∫_Æways_ölöe
 && 
	$__GNUC_PREREQ
 (3,2)

641 #i‡!
deföed
 
_FORCE_INLINES
 && !deföed 
_HAVE_STRING_ARCH_memp˝y


643 #unde‡
memp˝y


644 #unde‡
__memp˝y


645 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

646 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

648 
__exã∫_Æways_ölöe
 *

649 
	$__memp˝y_ölöe
 (*
__ª°ri˘
 
__de°
,

650 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

652  (*Ë
	`mem˝y
 (
__de°
, 
__§c
, 
__n
) + __n;

653 
	}
}

658 
	g__END_DECLS


	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
fct

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
fct

82 
	#__P
(
¨gs
Ë
	)
args

83 
	#__PMT
(
¨gs
Ë
	)
args

88 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

89 
	#__STRING
(
x
Ë#x

	)

92 
	#__±r_t
 *

	)

93 
	#__l⁄g_doubÀ_t
 

	)

97 #ifdef 
__˝lu•lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
«me
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
«me
)

	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

182 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

184 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

185 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

186 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

187 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

189 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

190 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

203 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

204 
	#__©åibuã__
(
xyz
Ë

	)

210 #i‡
__GNUC_PREREQ
 (2,96)

211 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

213 
	#__©åibuã_mÆloc__


	)

218 #i‡
__GNUC_PREREQ
 (4, 3)

219 
	#__©åibuã_Æloc_size__
(
∑øms
) \

220 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

222 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

228 #i‡
__GNUC_PREREQ
 (2,96)

229 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

231 
	#__©åibuã_puª__


	)

235 #i‡
__GNUC_PREREQ
 (2,5)

236 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

238 
	#__©åibuã_c⁄°__


	)

244 #i‡
__GNUC_PREREQ
 (3,1)

245 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

246 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

248 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

249 
	#__©åibuã_noölöe__


	)

253 #i‡
__GNUC_PREREQ
 (3,2)

254 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

256 
	#__©åibuã_dïªˇãd__


	)

265 #i‡
__GNUC_PREREQ
 (2,8)

266 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

268 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

275 #i‡
__GNUC_PREREQ
 (2,97)

276 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

277 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

279 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

284 #i‡
__GNUC_PREREQ
 (3,3)

285 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

287 
	#__n⁄nuŒ
(
∑øms
)

	)

292 #i‡
__GNUC_PREREQ
 (3,4)

293 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

294 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

295 #i‡
__USE_FORTIFY_LEVEL
 > 0

296 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

299 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

301 #i‚de‡
__wur


302 
	#__wur


	)

306 #i‡
__GNUC_PREREQ
 (3,2)

307 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

309 
	#__Æways_ölöe
 
__ölöe


	)

314 #i‡
__GNUC_PREREQ
 (4,3)

315 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

317 
	#__©åibuã_¨tificül__


	)

329 #i‡(!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

330 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

331 || 
deföed
 
__GNUC_GNU_INLINE__
)))

332 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


333 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

334 
	#__exã∫_Æways_ölöe
 \

335 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

337 
	#__exã∫_ölöe
 
__ölöe


	)

338 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

342 #ifde‡
__exã∫_Æways_ölöe


343 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

348 #i‡
__GNUC_PREREQ
 (4,3)

349 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

350 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

357 #i‡!
__GNUC_PREREQ
 (2,8)

358 
	#__exãnsi⁄__


	)

362 #i‡!
__GNUC_PREREQ
 (2,92)

363 
	#__ª°ri˘


	)

369 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


370 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

372 #ifde‡
__GNUC__


373 
	#__ª°ri˘_¨r


	)

375 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

376 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

379 
	#__ª°ri˘_¨r


	)

384 #i‡
__GNUC__
 >= 3

385 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

386 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

388 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

389 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

392 #i‡(!
deföed
 
_N‹ëu∫
 \

393 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

394 && !
	$__GNUC_PREREQ
 (4,7))

395 #i‡
	`__GNUC_PREREQ
 (2,8)

396 
	#_N‹ëu∫
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

398 
	#_N‹ëu∫


	)

402 #i‡(!
deföed
 
_Sètic_as£π
 && !deföed 
__˝lu•lus
 \

403 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

404 && (!
	`__GNUC_PREREQ
 (4, 6Ë|| 
deföed
 
__STRICT_ANSI__
))

405 
	#_Sètic_as£π
(
ex¥
, 
dügno°ic
) \

406 (*
	`__Sètic_as£π_fun˘i⁄
 ()) \

407 [!! (°ru˘ { 
__îr‹_if_√g©ive
: (
ex¥
Ë? 2 : -1; })]

	)

410 
	~<bôs/w‹dsize.h
>

412 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


413 
	#__LDBL_COMPAT
 1

	)

414 #ifde‡
__REDIRECT


415 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

416 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

417 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

418 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

419 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

420 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

421 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

422 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

423 
	#__LDBL_REDIR_DECL
(
«me
) \

424 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

425 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

426 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

427 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

428 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

431 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


432 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

433 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

434 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

435 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

436 
	#__LDBL_REDIR_DECL
(
«me
)

	)

437 #ifde‡
__REDIRECT


438 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

439 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

440 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/mman.h

19 #i‚def 
_SYS_MMAN_H


20 
	#_SYS_MMAN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 #i‚de‡
__off_t_deföed


28 #i‚de‡
__USE_FILE_OFFSET64


29 
__off_t
 
	toff_t
;

31 
__off64_t
 
	toff_t
;

33 
	#__off_t_deföed


	)

36 #i‚de‡
__mode_t_deföed


37 
__mode_t
 
	tmode_t
;

38 
	#__mode_t_deföed


	)

41 
	~<bôs/mm™.h
>

44 
	#MAP_FAILED
 ((*Ë-1)

	)

46 
	g__BEGIN_DECLS


56 #i‚de‡
__USE_FILE_OFFSET64


57 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

58 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

60 #ifde‡
__REDIRECT_NTH


61 * 
	`__REDIRECT_NTH
 (
mm≠
,

62 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

63 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

64 
mm≠64
);

66 
	#mm≠
 
mm≠64


	)

69 #ifde‡
__USE_LARGEFILE64


70 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

71 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

76 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

81 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

89 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

91 #ifde‡
__USE_MISC


94 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

96 #ifde‡
__USE_XOPEN2K


98 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

103 
	$mlock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

106 
	$mu∆ock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

111 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

115 
	$mu∆ockÆl
 (Ë
__THROW
;

117 #ifde‡
__USE_MISC


123 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

124 
__THROW
;

127 #ifde‡
__USE_GNU


133 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

134 
__Êags
, ...Ë
__THROW
;

138 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

139 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

144 
	`shm_›í
 (c⁄° *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

147 
	`shm_u∆ök
 (c⁄° *
__«me
);

149 
__END_DECLS


	@/usr/include/sys/param.h

19 #i‚de‡
_SYS_PARAM_H


20 
	#_SYS_PARAM_H
 1

	)

22 
	#__√ed_NULL


	)

23 
	~<°ddef.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<limôs.h
>

27 
	~<ídün.h
>

28 
	~<sig«l.h
>

31 
	~<bôs/∑øm.h
>

36 
	#NBBY
 
CHAR_BIT


	)

38 #i‡!
deföed
 
NGROUPS
 && deföed 
NGROUPS_MAX


39 
	#NGROUPS
 
NGROUPS_MAX


	)

41 #i‡!
deföed
 
MAXSYMLINKS
 && deföed 
SYMLOOP_MAX


42 
	#MAXSYMLINKS
 
SYMLOOP_MAX


	)

44 #i‡!
deföed
 
CANBSIZ
 && deföed 
MAX_CANON


45 
	#CANBSIZ
 
MAX_CANON


	)

47 #i‡!
deföed
 
MAXPATHLEN
 && deföed 
PATH_MAX


48 
	#MAXPATHLEN
 
PATH_MAX


	)

50 #i‡!
deföed
 
NOFILE
 && deföed 
OPEN_MAX


51 
	#NOFILE
 
OPEN_MAX


	)

53 #i‡!
deföed
 
MAXHOSTNAMELEN
 && deföed 
HOST_NAME_MAX


54 
	#MAXHOSTNAMELEN
 
HOST_NAME_MAX


	)

56 #i‚de‡
NCARGS


57 #ifde‡
ARG_MAX


58 
	#NCARGS
 
ARG_MAX


	)

62 
	#NCARGS
 
INT_MAX


	)

68 #i‚de‡
NOGROUP


69 
	#NOGROUP
 65535

	)

71 #i‚de‡
NODEV


72 
	#NODEV
 ((
dev_t
Ë-1Ë

	)

77 #i‚de‡
DEV_BSIZE


78 
	#DEV_BSIZE
 512

	)

83 
	#£tbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] |1<<((i)%NBBY))

	)

84 
	#˛rbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] &~(1<<((i)%NBBY)))

	)

85 
	#is£t
(
a
,
i
Ë(◊)[(i)/
NBBY
] & (1<<((i)%NBBY)))

	)

86 
	#is˛r
(
a
,
i
Ë((◊)[(i)/
NBBY
] & (1<<((i)%NBBY))Ë=0)

	)

89 #i‚de‡
howm™y


90 
	#howm™y
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

92 #ifde‡
__GNUC__


93 
	#roundup
(
x
, 
y
Ë(
	`__buûtö_c⁄°™t_p
 (yË&& 
	`powîof2
 (y) \

94 ? (((
x
Ë+ (
y
) - 1) & ~((y) - 1)) \

95 : ((((
x
Ë+ ((
y
Ë- 1)Ë/ (y)Ë* (y)))

	)

97 
	#roundup
(
x
, 
y
Ë((((xË+ ((yË- 1)Ë/ (y)Ë* (y))

	)

99 
	#powîof2
(
x
Ë((((xË- 1Ë& (x)Ë=0)

	)

102 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

103 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

	@/usr/include/sys/stat.h

22 #i‚def 
_SYS_STAT_H


23 
	#_SYS_STAT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_ATFILE


30 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


31 
	#__√ed_time_t


	)

33 #ifde‡
__USE_ATFILE


34 
	#__√ed_time•ec


	)

36 
	~<time.h
>

39 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


42 #i‚de‡
__dev_t_deföed


43 
__dev_t
 
	tdev_t
;

44 
	#__dev_t_deföed


	)

47 #i‚de‡
__gid_t_deföed


48 
__gid_t
 
	tgid_t
;

49 
	#__gid_t_deföed


	)

52 #i‚de‡
__öo_t_deföed


53 #i‚de‡
__USE_FILE_OFFSET64


54 
__öo_t
 
	töo_t
;

56 
__öo64_t
 
	töo_t
;

58 
	#__öo_t_deföed


	)

61 #i‚de‡
__mode_t_deföed


62 
__mode_t
 
	tmode_t
;

63 
	#__mode_t_deföed


	)

66 #i‚de‡
__∆ök_t_deföed


67 
__∆ök_t
 
	t∆ök_t
;

68 
	#__∆ök_t_deföed


	)

71 #i‚de‡
__off_t_deföed


72 #i‚de‡
__USE_FILE_OFFSET64


73 
__off_t
 
	toff_t
;

75 
__off64_t
 
	toff_t
;

77 
	#__off_t_deföed


	)

80 #i‚de‡
__uid_t_deföed


81 
__uid_t
 
	tuid_t
;

82 
	#__uid_t_deföed


	)

86 #ifde‡
__USE_UNIX98


87 #i‚de‡
__blk˙t_t_deföed


88 #i‚de‡
__USE_FILE_OFFSET64


89 
__blk˙t_t
 
	tblk˙t_t
;

91 
__blk˙t64_t
 
	tblk˙t_t
;

93 
	#__blk˙t_t_deföed


	)

96 #i‚de‡
__blksize_t_deföed


97 
__blksize_t
 
	tblksize_t
;

98 
	#__blksize_t_deföed


	)

102 
	g__BEGIN_DECLS


104 
	~<bôs/°©.h
>

106 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


107 
	#S_IFMT
 
__S_IFMT


	)

108 
	#S_IFDIR
 
__S_IFDIR


	)

109 
	#S_IFCHR
 
__S_IFCHR


	)

110 
	#S_IFBLK
 
__S_IFBLK


	)

111 
	#S_IFREG
 
__S_IFREG


	)

112 #ifde‡
__S_IFIFO


113 
	#S_IFIFO
 
__S_IFIFO


	)

115 #ifde‡
__S_IFLNK


116 
	#S_IFLNK
 
__S_IFLNK


	)

118 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

119 && 
deföed
 
	g__S_IFSOCK


120 
	#S_IFSOCK
 
__S_IFSOCK


	)

126 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

128 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

129 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

130 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

131 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

132 #ifde‡
__S_IFIFO


133 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

135 #ifde‡
__S_IFLNK


136 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

139 #i‡
deföed
 
__USE_MISC
 && !deföed 
__S_IFLNK


140 
	#S_ISLNK
(
mode
Ë0

	)

143 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

144 && 
deföed
 
	g__S_IFSOCK


145 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

146 #ñi‡
deföed
 
__USE_XOPEN2K


147 
	#S_ISSOCK
(
mode
Ë0

	)

154 #ifdef 
__USE_POSIX199309


155 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

156 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

157 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

163 
	#S_ISUID
 
__S_ISUID


	)

164 
	#S_ISGID
 
__S_ISGID


	)

166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


168 
	#S_ISVTX
 
__S_ISVTX


	)

171 
	#S_IRUSR
 
__S_IREAD


	)

172 
	#S_IWUSR
 
__S_IWRITE


	)

173 
	#S_IXUSR
 
__S_IEXEC


	)

175 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

177 #ifde‡
__USE_MISC


178 
	#S_IREAD
 
S_IRUSR


	)

179 
	#S_IWRITE
 
S_IWUSR


	)

180 
	#S_IEXEC
 
S_IXUSR


	)

183 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

184 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

185 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

187 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

189 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

190 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

191 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

193 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

196 #ifdef 
__USE_MISC


198 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

199 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

200 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

202 
	#S_BLKSIZE
 512

	)

206 #i‚de‡
__USE_FILE_OFFSET64


208 
	$°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

209 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

213 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

215 #ifde‡
__REDIRECT_NTH


216 
	`__REDIRECT_NTH
 (
°©
, (c⁄° *
__ª°ri˘
 
__fûe
,

217 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

218 
	`__n⁄nuŒ
 ((1, 2));

219 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

220 
	`__n⁄nuŒ
 ((2));

222 
	#°©
 
°©64


	)

223 
	#f°©
 
f°©64


	)

226 #ifde‡
__USE_LARGEFILE64


227 
	$°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

228 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

229 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

232 #ifde‡
__USE_ATFILE


236 #i‚de‡
__USE_FILE_OFFSET64


237 
	$f°©©
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

238 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

239 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

241 #ifde‡
__REDIRECT_NTH


242 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

243 
°©
 *
__ª°ri˘
 
__buf
,

244 
__Êag
),

245 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

247 
	#f°©©
 
f°©©64


	)

251 #ifde‡
__USE_LARGEFILE64


252 
	$f°©©64
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

253 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

254 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

258 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


259 #i‚de‡
__USE_FILE_OFFSET64


262 
	$l°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

263 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

265 #ifde‡
__REDIRECT_NTH


266 
	`__REDIRECT_NTH
 (
l°©
,

267 (c⁄° *
__ª°ri˘
 
__fûe
,

268 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

269 
	`__n⁄nuŒ
 ((1, 2));

271 
	#l°©
 
l°©64


	)

274 #ifde‡
__USE_LARGEFILE64


275 
	$l°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

276 
°©64
 *
__ª°ri˘
 
__buf
)

277 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

283 
	$chmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

284 
__THROW
 
	`__n⁄nuŒ
 ((1));

286 #ifde‡
__USE_MISC


290 
	$lchmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

291 
__THROW
 
	`__n⁄nuŒ
 ((1));

295 #ifde‡
__USE_POSIX


296 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

299 #ifde‡
__USE_ATFILE


302 
	$fchmod©
 (
__fd
, c⁄° *
__fûe
, 
__mode_t
 
__mode
,

303 
__Êag
)

304 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

313 #ifdef 
__USE_GNU


316 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

320 
	$mkdú
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1));

323 #ifde‡
__USE_ATFILE


327 
	$mkdú©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

328 
__THROW
 
	`__n⁄nuŒ
 ((2));

334 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


335 
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

336 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_ATFILE


342 
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

343 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

349 
	$mkfifo
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

350 
__THROW
 
	`__n⁄nuŒ
 ((1));

352 #ifde‡
__USE_ATFILE


356 
	$mkfifﬂt
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 #ifde‡
__USE_ATFILE


363 
	$utimíßt
 (
__fd
, c⁄° *
__∑th
,

364 c⁄° 
time•ec
 
__times
[2],

365 
__Êags
)

366 
__THROW
 
	`__n⁄nuŒ
 ((2));

369 #ifde‡
__USE_XOPEN2K8


371 
	$futimís
 (
__fd
, c⁄° 
time•ec
 
__times
[2]Ë
__THROW
;

389 #i‚de‡
_STAT_VER


390 
	#_STAT_VER
 0

	)

392 #i‚de‡
_MKNOD_VER


393 
	#_MKNOD_VER
 0

	)

397 #i‚de‡
__USE_FILE_OFFSET64


398 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

399 
__THROW
 
	`__n⁄nuŒ
 ((3));

400 
	$__x°©
 (
__vî
, c⁄° *
__fûíame
,

401 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

402 
	$__lx°©
 (
__vî
, c⁄° *
__fûíame
,

403 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

404 
	$__fx°©©
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

405 
°©
 *
__°©_buf
, 
__Êag
)

406 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

408 #ifde‡
__REDIRECT_NTH


409 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

410 
°©
 *
__°©_buf
), 
__fx°©64
)

411 
	`__n⁄nuŒ
 ((3));

412 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, c⁄° *
__fûíame
,

413 
°©
 *
__°©_buf
), 
__x°©64
)

414 
	`__n⁄nuŒ
 ((2, 3));

415 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, c⁄° *
__fûíame
,

416 
°©
 *
__°©_buf
), 
__lx°©64
)

417 
	`__n⁄nuŒ
 ((2, 3));

418 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

419 c⁄° *
__fûíame
,

420 
°©
 *
__°©_buf
, 
__Êag
),

421 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

424 
	#__fx°©
 
__fx°©64


	)

425 
	#__x°©
 
__x°©64


	)

426 
	#__lx°©
 
__lx°©64


	)

430 #ifde‡
__USE_LARGEFILE64


431 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

432 
__THROW
 
	`__n⁄nuŒ
 ((3));

433 
	$__x°©64
 (
__vî
, c⁄° *
__fûíame
,

434 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

435 
	$__lx°©64
 (
__vî
, c⁄° *
__fûíame
,

436 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

437 
	$__fx°©©64
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

438 
°©64
 *
__°©_buf
, 
__Êag
)

439 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

441 
	$__xmknod
 (
__vî
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

442 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

444 
	$__xmknod©
 (
__vî
, 
__fd
, c⁄° *
__∑th
,

445 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

446 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

448 #ifde‡
__USE_EXTERN_INLINES


451 
__exã∫_ölöe
 

452 
	`__NTH
 (
	$°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

454  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

455 
	}
}

457 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


458 
__exã∫_ölöe
 

459 
__NTH
 (
	$l°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

461  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

462 
	}
}

465 
__exã∫_ölöe
 

466 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

468  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

469 
	}
}

471 #ifde‡
__USE_ATFILE


472 
__exã∫_ölöe
 

473 
__NTH
 (
	$f°©©
 (
__fd
, c⁄° *
__fûíame
, 
°©
 *
__°©buf
,

474 
__Êag
))

476  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

477 
	}
}

480 #ifde‡
__USE_MISC


481 
__exã∫_ölöe
 

482 
__NTH
 (
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

484  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

485 
	}
}

488 #ifde‡
__USE_ATFILE


489 
__exã∫_ölöe
 

490 
__NTH
 (
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

491 
__dev_t
 
__dev
))

493  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

494 
	}
}

497 #i‡
deföed
 
__USE_LARGEFILE64
 \

498 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

499 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

500 
__exã∫_ölöe
 

501 
__NTH
 (
	$°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

503  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

504 
	}
}

506 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


507 
__exã∫_ölöe
 

508 
__NTH
 (
	$l°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

510  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

511 
	}
}

514 
__exã∫_ölöe
 

515 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

517  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

518 
	}
}

520 #ifde‡
__USE_ATFILE


521 
__exã∫_ölöe
 

522 
__NTH
 (
	$f°©©64
 (
__fd
, c⁄° *
__fûíame
, 
°©64
 *
__°©buf
,

523 
__Êag
))

525  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

526 
	}
}

533 
	g__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_MISC


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_MISC


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_MISC


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #i‡
deföed
 
__USE_MISC
 \

785 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

788 
	$ây¶Ÿ
 (Ë
__THROW
;

793 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

796 #ifde‡
__USE_ATFILE


799 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

800 c⁄° *
__to
, 
__Êags
)

801 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

804 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


806 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

813 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

817 #ifde‡
__USE_ATFILE


819 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

820 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

823 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

824 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

825 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

829 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

831 #ifde‡
__USE_ATFILE


833 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

834 
__THROW
 
	`__n⁄nuŒ
 ((2));

838 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

842 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

845 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

852 *
	`gëlogö
 ();

853 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


860 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

863 #ifdef 
__USE_MISC


865 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

869 #ifdef 
__USE_POSIX2


873 
	#__√ed_gë›t


	)

874 
	~<gë›t.h
>

878 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


882 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #i‡
deföed
 
__USE_MISC


889 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

890 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

894 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

900 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

902 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

903 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

909 
	$vh™gup
 (Ë
__THROW
;

912 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

920 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

921 
size_t
 
__off£t
, 
__sˇÀ
)

922 
__THROW
 
	`__n⁄nuŒ
 ((1));

928 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

932 *
	$gëu£rshñl
 (Ë
__THROW
;

933 
	$ídu£rshñl
 (Ë
__THROW
;

934 
	$£tu£rshñl
 (Ë
__THROW
;

940 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

944 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

947 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

951 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

959 
	`fsync
 (
__fd
);

962 #ifde‡
__USE_GNU


965 
	$syncfs
 (
__fd
Ë
__THROW
;

969 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


972 
	`gëho°id
 ();

975 
	$sync
 (Ë
__THROW
;

978 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


981 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

986 
	$gëdèbÀsize
 (Ë
__THROW
;

992 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


995 #i‚de‡
__USE_FILE_OFFSET64


996 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

999 #ifde‡
__REDIRECT_NTH


1000 
	`__REDIRECT_NTH
 (
åunˇã
,

1001 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1002 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1004 
	#åunˇã
 
åunˇã64


	)

1007 #ifde‡
__USE_LARGEFILE64


1008 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1014 #i‡
deföed
 
__USE_POSIX199309
 \

1015 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1018 #i‚de‡
__USE_FILE_OFFSET64


1019 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1023 
·runˇã64
Ë
__wur
;

1025 
	#·runˇã
 
·runˇã64


	)

1028 #ifde‡
__USE_LARGEFILE64


1029 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1035 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1036 || 
deföed
 
__USE_MISC


1040 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1046 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1050 #ifde‡
__USE_MISC


1061 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1066 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1078 
	#F_ULOCK
 0

	)

1079 
	#F_LOCK
 1

	)

1080 
	#F_TLOCK
 2

	)

1081 
	#F_TEST
 3

	)

1083 #i‚de‡
__USE_FILE_OFFSET64


1084 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1086 #ifde‡
__REDIRECT


1087 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1088 
lockf64
Ë
__wur
;

1090 
	#lockf
 
lockf64


	)

1093 #ifde‡
__USE_LARGEFILE64


1094 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1099 #ifde‡
__USE_GNU


1104 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1105 (
__exãnsi⁄__
 \

1106 ({ 
__ªsu…
; \

1107 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1108 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1109 
__ªsu…
; 
	}
}))

	)

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1121 #ifdef 
__USE_XOPEN


1123 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1124 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1129 
__THROW
 
	`__n⁄nuŒ
 ((1));

1136 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1137 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1143 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1145 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1150 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1151 
	~<bôs/uni°d.h
>

1154 
__END_DECLS


	@/usr/include/zlib.h

31 #i‚de‡
ZLIB_H


32 
	#ZLIB_H


	)

34 
	~"zc⁄f.h
"

36 #ifde‡
__˝lu•lus


40 
	#ZLIB_VERSION
 "1.2.8"

	)

41 
	#ZLIB_VERNUM
 0x1280

	)

42 
	#ZLIB_VER_MAJOR
 1

	)

43 
	#ZLIB_VER_MINOR
 2

	)

44 
	#ZLIB_VER_REVISION
 8

	)

45 
	#ZLIB_VER_SUBREVISION
 0

	)

80 
voidpf
 (*
	tÆloc_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, 
	tuI¡
 
	tôems
, uI¡ 
	tsize
));

81 (*
‰ì_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	taddªss
));

83 
öã∫Æ_°©e
;

85 
	sz_°ªam_s
 {

86 
z_c⁄°
 
Byãf
 *
√xt_ö
;

87 
uI¡
 
avaû_ö
;

88 
uL⁄g
 
tŸÆ_ö
;

90 
Byãf
 *
√xt_out
;

91 
uI¡
 
avaû_out
;

92 
uL⁄g
 
tŸÆ_out
;

94 
z_c⁄°
 *
msg
;

95 
öã∫Æ_°©e
 
FAR
 *
°©e
;

97 
Æloc_func
 
zÆloc
;

98 
‰ì_func
 
z‰ì
;

99 
voidpf
 
›aque
;

101 
d©a_ty≥
;

102 
uL⁄g
 
adÀr
;

103 
uL⁄g
 
ª£rved
;

104 } 
	tz_°ªam
;

106 
z_°ªam
 
	tFAR
 *
	tz_°ªamp
;

112 
	sgz_hódî_s
 {

113 
ãxt
;

114 
uL⁄g
 
time
;

115 
xÊags
;

116 
os
;

117 
Byãf
 *
exåa
;

118 
uI¡
 
exåa_Àn
;

119 
uI¡
 
exåa_max
;

120 
Byãf
 *
«me
;

121 
uI¡
 
«me_max
;

122 
Byãf
 *
commít
;

123 
uI¡
 
comm_max
;

124 
h¸c
;

125 
d⁄e
;

127 } 
	tgz_hódî
;

129 
gz_hódî
 
	tFAR
 *
	tgz_hódîp
;

164 
	#Z_NO_FLUSH
 0

	)

165 
	#Z_PARTIAL_FLUSH
 1

	)

166 
	#Z_SYNC_FLUSH
 2

	)

167 
	#Z_FULL_FLUSH
 3

	)

168 
	#Z_FINISH
 4

	)

169 
	#Z_BLOCK
 5

	)

170 
	#Z_TREES
 6

	)

173 
	#Z_OK
 0

	)

174 
	#Z_STREAM_END
 1

	)

175 
	#Z_NEED_DICT
 2

	)

176 
	#Z_ERRNO
 (-1)

	)

177 
	#Z_STREAM_ERROR
 (-2)

	)

178 
	#Z_DATA_ERROR
 (-3)

	)

179 
	#Z_MEM_ERROR
 (-4)

	)

180 
	#Z_BUF_ERROR
 (-5)

	)

181 
	#Z_VERSION_ERROR
 (-6)

	)

186 
	#Z_NO_COMPRESSION
 0

	)

187 
	#Z_BEST_SPEED
 1

	)

188 
	#Z_BEST_COMPRESSION
 9

	)

189 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

192 
	#Z_FILTERED
 1

	)

193 
	#Z_HUFFMAN_ONLY
 2

	)

194 
	#Z_RLE
 3

	)

195 
	#Z_FIXED
 4

	)

196 
	#Z_DEFAULT_STRATEGY
 0

	)

199 
	#Z_BINARY
 0

	)

200 
	#Z_TEXT
 1

	)

201 
	#Z_ASCII
 
Z_TEXT


	)

202 
	#Z_UNKNOWN
 2

	)

205 
	#Z_DEFLATED
 8

	)

208 
	#Z_NULL
 0

	)

210 
	#zlib_vîsi⁄
 
	`zlibVîsi⁄
()

	)

216 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zlibVîsi⁄
 
OF
(());

246 
ZEXTERN
 
ZEXPORT
 
deÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

353 
ZEXTERN
 
ZEXPORT
 
deÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

392 
ZEXTERN
 
ZEXPORT
 
öÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

508 
ZEXTERN
 
ZEXPORT
 
öÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

587 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

588 c⁄° 
Byãf
 *
di˘i⁄¨y
,

589 
uI¡
 
di˘Lígth
));

631 
ZEXTERN
 
ZEXPORT
 
deÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

632 
z_°ªamp
 
sour˚
));

649 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

660 
ZEXTERN
 
ZEXPORT
 
deÊ©eP¨ams
 
OF
((
z_°ªamp
 
°rm
,

661 
Àvñ
,

662 
°øãgy
));

681 
ZEXTERN
 
ZEXPORT
 
deÊ©eTu√
 
OF
((
z_°ªamp
 
°rm
,

682 
good_Àngth
,

683 
max_œzy
,

684 
ni˚_Àngth
,

685 
max_chaö
));

698 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
deÊ©eBound
 
OF
((
z_°ªamp
 
°rm
,

699 
uL⁄g
 
sour˚Lí
));

713 
ZEXTERN
 
ZEXPORT
 
deÊ©ePídög
 
OF
((
z_°ªamp
 
°rm
,

714 *
≥ndög
,

715 *
bôs
));

728 
ZEXTERN
 
ZEXPORT
 
deÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

729 
bôs
,

730 
vÆue
));

745 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëHódî
 
OF
((
z_°ªamp
 
°rm
,

746 
gz_hódîp
 
hód
));

819 
ZEXTERN
 
ZEXPORT
 
öÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

820 c⁄° 
Byãf
 *
di˘i⁄¨y
,

821 
uI¡
 
di˘Lígth
));

842 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

843 
Byãf
 *
di˘i⁄¨y
,

844 
uI¡
 *
di˘Lígth
));

857 
ZEXTERN
 
ZEXPORT
 
öÊ©eSync
 
OF
((
z_°ªamp
 
°rm
));

876 
ZEXTERN
 
ZEXPORT
 
öÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

877 
z_°ªamp
 
sour˚
));

892 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

902 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t2
 
OF
((
z_°ªamp
 
°rm
,

903 
wödowBôs
));

914 
ZEXTERN
 
ZEXPORT
 
öÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

915 
bôs
,

916 
vÆue
));

935 
ZEXTERN
 
ZEXPORT
 
öÊ©eM¨k
 
OF
((
z_°ªamp
 
°rm
));

963 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëHódî
 
OF
((
z_°ªamp
 
°rm
,

964 
gz_hódîp
 
hód
));

1025 (*
ö_func
Ë
	tOF
((
	tFAR
 *,

1026 
	tz_c⁄°
 
	tFAR
 * FAR *));

1027 (*
out_func
Ë
	tOF
((
	tFAR
 *, FAR *, ));

1029 
ZEXTERN
 
ZEXPORT
 
öÊ©eBack
 
OF
((
z_°ªamp
 
°rm
,

1030 
ö_func
 
ö
, 
FAR
 *
ö_desc
,

1031 
out_func
 
out
, 
FAR
 *
out_desc
));

1099 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackEnd
 
OF
((
z_°ªamp
 
°rm
));

1107 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
zlibCompûeFœgs
 
OF
(());

1148 #i‚de‡
Z_SOLO


1160 
ZEXTERN
 
ZEXPORT
 
com¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1161 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1174 
ZEXTERN
 
ZEXPORT
 
com¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1175 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
,

1176 
Àvñ
));

1190 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
com¥essBound
 
OF
((uL⁄g 
sour˚Lí
));

1197 
ZEXTERN
 
ZEXPORT
 
uncom¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1198 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1224 
gzFûe_s
 *
	tgzFûe
;

1264 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gzd›í
 
OF
((
fd
, c⁄° *
mode
));

1287 
ZEXTERN
 
ZEXPORT
 
gzbuf„r
 
OF
((
gzFûe
 
fûe
, 
size
));

1304 
ZEXTERN
 
ZEXPORT
 
gz£ç¨ams
 
OF
((
gzFûe
 
fûe
, 
Àvñ
, 
°øãgy
));

1313 
ZEXTERN
 
ZEXPORT
 
gzªad
 
OF
((
gzFûe
 
fûe
, 
voidp
 
buf
, 
Àn
));

1341 
ZEXTERN
 
ZEXPORT
 
gzwrôe
 
OF
((
gzFûe
 
fûe
,

1342 
voidpc
 
buf
, 
Àn
));

1349 
ZEXTERN
 
ZEXPORTVA
 
gz¥ötf
 
Z_ARG
((
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...));

1364 
ZEXTERN
 
ZEXPORT
 
gzputs
 
OF
((
gzFûe
 
fûe
, c⁄° *
s
));

1372 
ZEXTERN
 * 
ZEXPORT
 
gzgës
 
OF
((
gzFûe
 
fûe
, *
buf
, 
Àn
));

1385 
ZEXTERN
 
ZEXPORT
 
gzputc
 
OF
((
gzFûe
 
fûe
, 
c
));

1391 
ZEXTERN
 
ZEXPORT
 
gzgëc
 
OF
((
gzFûe
 
fûe
));

1400 
ZEXTERN
 
ZEXPORT
 
gzungëc
 
OF
((
c
, 
gzFûe
 
fûe
));

1412 
ZEXTERN
 
ZEXPORT
 
gzÊush
 
OF
((
gzFûe
 
fûe
, 
Êush
));

1447 
ZEXTERN
 
ZEXPORT
 
gzªwöd
 
OF
((
gzFûe
 
fûe
));

1475 
ZEXTERN
 
ZEXPORT
 
gzeof
 
OF
((
gzFûe
 
fûe
));

1490 
ZEXTERN
 
ZEXPORT
 
gzdúe˘
 
OF
((
gzFûe
 
fûe
));

1511 
ZEXTERN
 
ZEXPORT
 
gz˛o£
 
OF
((
gzFûe
 
fûe
));

1524 
ZEXTERN
 
ZEXPORT
 
gz˛o£_r
 
OF
((
gzFûe
 
fûe
));

1525 
ZEXTERN
 
ZEXPORT
 
gz˛o£_w
 
OF
((
gzFûe
 
fûe
));

1536 
ZEXTERN
 c⁄° * 
ZEXPORT
 
gzîr‹
 
OF
((
gzFûe
 
fûe
, *
î∫um
));

1552 
ZEXTERN
 
ZEXPORT
 
gz˛óªº
 
OF
((
gzFûe
 
fûe
));

1569 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1600 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32
 
OF
((uL⁄g 
¸c
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1633 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
,

1634 c⁄° *
vîsi⁄
, 
°ªam_size
));

1635 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
,

1636 c⁄° *
vîsi⁄
, 
°ªam_size
));

1637 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
, 
mëhod
,

1638 
wödowBôs
, 
memLevñ
,

1639 
°øãgy
, c⁄° *
vîsi⁄
,

1640 
°ªam_size
));

1641 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1642 c⁄° *
vîsi⁄
, 
°ªam_size
));

1643 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackInô_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1644 
FAR
 *
wödow
,

1645 c⁄° *
vîsi⁄
,

1646 
°ªam_size
));

1647 
	#deÊ©eInô
(
°rm
, 
Àvñ
) \

1648 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1649 
	#öÊ©eInô
(
°rm
) \

1650 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1651 
	#deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1652 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1653 (
°øãgy
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1654 
	#öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1655 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, \

1656 ()(
z_°ªam
))

	)

1657 
	#öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1658 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1659 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1661 #i‚de‡
Z_SOLO


1670 
	sgzFûe_s
 {

1671 
have
;

1672 *
√xt
;

1673 
z_off64_t
 
pos
;

1675 
ZEXTERN
 
ZEXPORT
 
gzgëc_
 
OF
((
gzFûe
 
fûe
));

1676 #ifde‡
Z_PREFIX_SET


1677 #unde‡
z_gzgëc


1678 
	#z_gzgëc
(
g
) \

1679 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: 
	`gzgëc
(g))

	)

1681 
	#gzgëc
(
g
) \

1682 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: 
	`gzgëc
(g))

	)

1691 #ifde‡
Z_LARGE64


1692 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1693 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off64_t, ));

1694 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1695 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1696 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1697 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1700 #i‡!
deföed
(
ZLIB_INTERNAL
Ë&& deföed(
Z_WANT64
)

1701 #ifde‡
Z_PREFIX_SET


1702 
	#z_gz›í
 
z_gz›í64


	)

1703 
	#z_gz£ek
 
z_gz£ek64


	)

1704 
	#z_gzãŒ
 
z_gzãŒ64


	)

1705 
	#z_gzoff£t
 
z_gzoff£t64


	)

1706 
	#z_adÀr32_comböe
 
z_adÀr32_comböe64


	)

1707 
	#z_¸c32_comböe
 
z_¸c32_comböe64


	)

1709 
	#gz›í
 
gz›í64


	)

1710 
	#gz£ek
 
gz£ek64


	)

1711 
	#gzãŒ
 
gzãŒ64


	)

1712 
	#gzoff£t
 
gzoff£t64


	)

1713 
	#adÀr32_comböe
 
adÀr32_comböe64


	)

1714 
	#¸c32_comböe
 
¸c32_comböe64


	)

1716 #i‚de‡
Z_LARGE64


1717 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1718 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off_t, ));

1719 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1720 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1721 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1722 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1725 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í
 
OF
((const *, const *));

1726 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek
 
OF
((
gzFûe
, z_off_t, ));

1727 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ
 
OF
((
gzFûe
));

1728 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t
 
OF
((
gzFûe
));

1729 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1730 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1735 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1736 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1741 #i‡!
deföed
(
ZUTIL_H
Ë&& !deföed(
NO_DUMMY_DECL
)

1742 
	söã∫Æ_°©e
 {
dummy
;};

1746 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zEº‹
 
OF
(());

1747 
ZEXTERN
 
ZEXPORT
 
öÊ©eSyncPoöt
 
OF
((
z_°ªamp
));

1748 
ZEXTERN
 c⁄° 
z_¸c_t
 
FAR
 * 
ZEXPORT
 
gë_¸c_èbÀ
 
OF
(());

1749 
ZEXTERN
 
ZEXPORT
 
öÊ©eUndîmöe
 
OF
((
z_°ªamp
, ));

1750 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1751 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1752 #i‡
deföed
(
_WIN32
Ë&& !deföed(
Z_SOLO
)

1753 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í_w
 
OF
((c⁄° 
wch¨_t
 *
∑th
,

1754 c⁄° *
mode
));

1756 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

1757 #i‚de‡
Z_SOLO


1758 
ZEXTERN
 
ZEXPORTVA
 
gzv¥ötf
 
Z_ARG
((
gzFûe
 
fûe
,

1759 c⁄° *
f‹m©
,

1760 
va_li°
 
va
));

1764 #ifde‡
__˝lu•lus


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

17 
	#ENOSYS
 38

	)

19 
	#ENOTEMPTY
 39

	)

20 
	#ELOOP
 40

	)

21 
	#EWOULDBLOCK
 
EAGAIN


	)

22 
	#ENOMSG
 42

	)

23 
	#EIDRM
 43

	)

24 
	#ECHRNG
 44

	)

25 
	#EL2NSYNC
 45

	)

26 
	#EL3HLT
 46

	)

27 
	#EL3RST
 47

	)

28 
	#ELNRNG
 48

	)

29 
	#EUNATCH
 49

	)

30 
	#ENOCSI
 50

	)

31 
	#EL2HLT
 51

	)

32 
	#EBADE
 52

	)

33 
	#EBADR
 53

	)

34 
	#EXFULL
 54

	)

35 
	#ENOANO
 55

	)

36 
	#EBADRQC
 56

	)

37 
	#EBADSLT
 57

	)

39 
	#EDEADLOCK
 
EDEADLK


	)

41 
	#EBFONT
 59

	)

42 
	#ENOSTR
 60

	)

43 
	#ENODATA
 61

	)

44 
	#ETIME
 62

	)

45 
	#ENOSR
 63

	)

46 
	#ENONET
 64

	)

47 
	#ENOPKG
 65

	)

48 
	#EREMOTE
 66

	)

49 
	#ENOLINK
 67

	)

50 
	#EADV
 68

	)

51 
	#ESRMNT
 69

	)

52 
	#ECOMM
 70

	)

53 
	#EPROTO
 71

	)

54 
	#EMULTIHOP
 72

	)

55 
	#EDOTDOT
 73

	)

56 
	#EBADMSG
 74

	)

57 
	#EOVERFLOW
 75

	)

58 
	#ENOTUNIQ
 76

	)

59 
	#EBADFD
 77

	)

60 
	#EREMCHG
 78

	)

61 
	#ELIBACC
 79

	)

62 
	#ELIBBAD
 80

	)

63 
	#ELIBSCN
 81

	)

64 
	#ELIBMAX
 82

	)

65 
	#ELIBEXEC
 83

	)

66 
	#EILSEQ
 84

	)

67 
	#ERESTART
 85

	)

68 
	#ESTRPIPE
 86

	)

69 
	#EUSERS
 87

	)

70 
	#ENOTSOCK
 88

	)

71 
	#EDESTADDRREQ
 89

	)

72 
	#EMSGSIZE
 90

	)

73 
	#EPROTOTYPE
 91

	)

74 
	#ENOPROTOOPT
 92

	)

75 
	#EPROTONOSUPPORT
 93

	)

76 
	#ESOCKTNOSUPPORT
 94

	)

77 
	#EOPNOTSUPP
 95

	)

78 
	#EPFNOSUPPORT
 96

	)

79 
	#EAFNOSUPPORT
 97

	)

80 
	#EADDRINUSE
 98

	)

81 
	#EADDRNOTAVAIL
 99

	)

82 
	#ENETDOWN
 100

	)

83 
	#ENETUNREACH
 101

	)

84 
	#ENETRESET
 102

	)

85 
	#ECONNABORTED
 103

	)

86 
	#ECONNRESET
 104

	)

87 
	#ENOBUFS
 105

	)

88 
	#EISCONN
 106

	)

89 
	#ENOTCONN
 107

	)

90 
	#ESHUTDOWN
 108

	)

91 
	#ETOOMANYREFS
 109

	)

92 
	#ETIMEDOUT
 110

	)

93 
	#ECONNREFUSED
 111

	)

94 
	#EHOSTDOWN
 112

	)

95 
	#EHOSTUNREACH
 113

	)

96 
	#EALREADY
 114

	)

97 
	#EINPROGRESS
 115

	)

98 
	#ESTALE
 116

	)

99 
	#EUCLEAN
 117

	)

100 
	#ENOTNAM
 118

	)

101 
	#ENAVAIL
 119

	)

102 
	#EISNAM
 120

	)

103 
	#EREMOTEIO
 121

	)

104 
	#EDQUOT
 122

	)

106 
	#ENOMEDIUM
 123

	)

107 
	#EMEDIUMTYPE
 124

	)

108 
	#ECANCELED
 125

	)

109 
	#ENOKEY
 126

	)

110 
	#EKEYEXPIRED
 127

	)

111 
	#EKEYREVOKED
 128

	)

112 
	#EKEYREJECTED
 129

	)

115 
	#EOWNERDEAD
 130

	)

116 
	#ENOTRECOVERABLE
 131

	)

118 
	#ERFKILL
 132

	)

120 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

6 
	~<asm-gíîic/öt-Œ64.h
>

	@/usr/include/asm/posix_types_32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_32_H


2 
	#_ASM_X86_POSIX_TYPES_32_H


	)

10 
	t__kî√l_mode_t
;

11 
	#__kî√l_mode_t
 
__kî√l_mode_t


	)

13 
	t__kî√l_ùc_pid_t
;

14 
	#__kî√l_ùc_pid_t
 
__kî√l_ùc_pid_t


	)

16 
	t__kî√l_uid_t
;

17 
	t__kî√l_gid_t
;

18 
	#__kî√l_uid_t
 
__kî√l_uid_t


	)

20 
	t__kî√l_ﬁd_dev_t
;

21 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

23 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_64.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_64_H


2 
	#_ASM_X86_POSIX_TYPES_64_H


	)

10 
	t__kî√l_ﬁd_uid_t
;

11 
	t__kî√l_ﬁd_gid_t
;

12 
	#__kî√l_ﬁd_uid_t
 
__kî√l_ﬁd_uid_t


	)

14 
	t__kî√l_ﬁd_dev_t
;

15 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

17 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_x32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_X32_H


2 
	#_ASM_X86_POSIX_TYPES_X32_H


	)

13 
	t__kî√l_l⁄g_t
;

14 
	t__kî√l_ul⁄g_t
;

15 
	#__kî√l_l⁄g_t
 
__kî√l_l⁄g_t


	)

17 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/asm/processor-flags.h

1 #i‚de‡
_ASM_X86_PROCESSOR_FLAGS_H


2 
	#_ASM_X86_PROCESSOR_FLAGS_H


	)

5 
	~<löux/c⁄°.h
>

10 
	#X86_EFLAGS_CF_BIT
 0

	)

11 
	#X86_EFLAGS_CF
 
	`_BITUL
(
X86_EFLAGS_CF_BIT
)

	)

12 
	#X86_EFLAGS_FIXED_BIT
 1

	)

13 
	#X86_EFLAGS_FIXED
 
	`_BITUL
(
X86_EFLAGS_FIXED_BIT
)

	)

14 
	#X86_EFLAGS_PF_BIT
 2

	)

15 
	#X86_EFLAGS_PF
 
	`_BITUL
(
X86_EFLAGS_PF_BIT
)

	)

16 
	#X86_EFLAGS_AF_BIT
 4

	)

17 
	#X86_EFLAGS_AF
 
	`_BITUL
(
X86_EFLAGS_AF_BIT
)

	)

18 
	#X86_EFLAGS_ZF_BIT
 6

	)

19 
	#X86_EFLAGS_ZF
 
	`_BITUL
(
X86_EFLAGS_ZF_BIT
)

	)

20 
	#X86_EFLAGS_SF_BIT
 7

	)

21 
	#X86_EFLAGS_SF
 
	`_BITUL
(
X86_EFLAGS_SF_BIT
)

	)

22 
	#X86_EFLAGS_TF_BIT
 8

	)

23 
	#X86_EFLAGS_TF
 
	`_BITUL
(
X86_EFLAGS_TF_BIT
)

	)

24 
	#X86_EFLAGS_IF_BIT
 9

	)

25 
	#X86_EFLAGS_IF
 
	`_BITUL
(
X86_EFLAGS_IF_BIT
)

	)

26 
	#X86_EFLAGS_DF_BIT
 10

	)

27 
	#X86_EFLAGS_DF
 
	`_BITUL
(
X86_EFLAGS_DF_BIT
)

	)

28 
	#X86_EFLAGS_OF_BIT
 11

	)

29 
	#X86_EFLAGS_OF
 
	`_BITUL
(
X86_EFLAGS_OF_BIT
)

	)

30 
	#X86_EFLAGS_IOPL_BIT
 12

	)

31 
	#X86_EFLAGS_IOPL
 (
	`_AC
(3,
UL
Ë<< 
X86_EFLAGS_IOPL_BIT
)

	)

32 
	#X86_EFLAGS_NT_BIT
 14

	)

33 
	#X86_EFLAGS_NT
 
	`_BITUL
(
X86_EFLAGS_NT_BIT
)

	)

34 
	#X86_EFLAGS_RF_BIT
 16

	)

35 
	#X86_EFLAGS_RF
 
	`_BITUL
(
X86_EFLAGS_RF_BIT
)

	)

36 
	#X86_EFLAGS_VM_BIT
 17

	)

37 
	#X86_EFLAGS_VM
 
	`_BITUL
(
X86_EFLAGS_VM_BIT
)

	)

38 
	#X86_EFLAGS_AC_BIT
 18

	)

39 
	#X86_EFLAGS_AC
 
	`_BITUL
(
X86_EFLAGS_AC_BIT
)

	)

40 
	#X86_EFLAGS_VIF_BIT
 19

	)

41 
	#X86_EFLAGS_VIF
 
	`_BITUL
(
X86_EFLAGS_VIF_BIT
)

	)

42 
	#X86_EFLAGS_VIP_BIT
 20

	)

43 
	#X86_EFLAGS_VIP
 
	`_BITUL
(
X86_EFLAGS_VIP_BIT
)

	)

44 
	#X86_EFLAGS_ID_BIT
 21

	)

45 
	#X86_EFLAGS_ID
 
	`_BITUL
(
X86_EFLAGS_ID_BIT
)

	)

50 
	#X86_CR0_PE_BIT
 0

	)

51 
	#X86_CR0_PE
 
	`_BITUL
(
X86_CR0_PE_BIT
)

	)

52 
	#X86_CR0_MP_BIT
 1

	)

53 
	#X86_CR0_MP
 
	`_BITUL
(
X86_CR0_MP_BIT
)

	)

54 
	#X86_CR0_EM_BIT
 2

	)

55 
	#X86_CR0_EM
 
	`_BITUL
(
X86_CR0_EM_BIT
)

	)

56 
	#X86_CR0_TS_BIT
 3

	)

57 
	#X86_CR0_TS
 
	`_BITUL
(
X86_CR0_TS_BIT
)

	)

58 
	#X86_CR0_ET_BIT
 4

	)

59 
	#X86_CR0_ET
 
	`_BITUL
(
X86_CR0_ET_BIT
)

	)

60 
	#X86_CR0_NE_BIT
 5

	)

61 
	#X86_CR0_NE
 
	`_BITUL
(
X86_CR0_NE_BIT
)

	)

62 
	#X86_CR0_WP_BIT
 16

	)

63 
	#X86_CR0_WP
 
	`_BITUL
(
X86_CR0_WP_BIT
)

	)

64 
	#X86_CR0_AM_BIT
 18

	)

65 
	#X86_CR0_AM
 
	`_BITUL
(
X86_CR0_AM_BIT
)

	)

66 
	#X86_CR0_NW_BIT
 29

	)

67 
	#X86_CR0_NW
 
	`_BITUL
(
X86_CR0_NW_BIT
)

	)

68 
	#X86_CR0_CD_BIT
 30

	)

69 
	#X86_CR0_CD
 
	`_BITUL
(
X86_CR0_CD_BIT
)

	)

70 
	#X86_CR0_PG_BIT
 31

	)

71 
	#X86_CR0_PG
 
	`_BITUL
(
X86_CR0_PG_BIT
)

	)

76 
	#X86_CR3_PWT_BIT
 3

	)

77 
	#X86_CR3_PWT
 
	`_BITUL
(
X86_CR3_PWT_BIT
)

	)

78 
	#X86_CR3_PCD_BIT
 4

	)

79 
	#X86_CR3_PCD
 
	`_BITUL
(
X86_CR3_PCD_BIT
)

	)

80 
	#X86_CR3_PCID_NOFLUSH_BIT
 63

	)

81 
	#X86_CR3_PCID_NOFLUSH
 
	`_BITULL
(
X86_CR3_PCID_NOFLUSH_BIT
)

	)

86 
	#X86_CR4_VME_BIT
 0

	)

87 
	#X86_CR4_VME
 
	`_BITUL
(
X86_CR4_VME_BIT
)

	)

88 
	#X86_CR4_PVI_BIT
 1

	)

89 
	#X86_CR4_PVI
 
	`_BITUL
(
X86_CR4_PVI_BIT
)

	)

90 
	#X86_CR4_TSD_BIT
 2

	)

91 
	#X86_CR4_TSD
 
	`_BITUL
(
X86_CR4_TSD_BIT
)

	)

92 
	#X86_CR4_DE_BIT
 3

	)

93 
	#X86_CR4_DE
 
	`_BITUL
(
X86_CR4_DE_BIT
)

	)

94 
	#X86_CR4_PSE_BIT
 4

	)

95 
	#X86_CR4_PSE
 
	`_BITUL
(
X86_CR4_PSE_BIT
)

	)

96 
	#X86_CR4_PAE_BIT
 5

	)

97 
	#X86_CR4_PAE
 
	`_BITUL
(
X86_CR4_PAE_BIT
)

	)

98 
	#X86_CR4_MCE_BIT
 6

	)

99 
	#X86_CR4_MCE
 
	`_BITUL
(
X86_CR4_MCE_BIT
)

	)

100 
	#X86_CR4_PGE_BIT
 7

	)

101 
	#X86_CR4_PGE
 
	`_BITUL
(
X86_CR4_PGE_BIT
)

	)

102 
	#X86_CR4_PCE_BIT
 8

	)

103 
	#X86_CR4_PCE
 
	`_BITUL
(
X86_CR4_PCE_BIT
)

	)

104 
	#X86_CR4_OSFXSR_BIT
 9

	)

105 
	#X86_CR4_OSFXSR
 
	`_BITUL
(
X86_CR4_OSFXSR_BIT
)

	)

106 
	#X86_CR4_OSXMMEXCPT_BIT
 10

	)

107 
	#X86_CR4_OSXMMEXCPT
 
	`_BITUL
(
X86_CR4_OSXMMEXCPT_BIT
)

	)

108 
	#X86_CR4_VMXE_BIT
 13

	)

109 
	#X86_CR4_VMXE
 
	`_BITUL
(
X86_CR4_VMXE_BIT
)

	)

110 
	#X86_CR4_SMXE_BIT
 14

	)

111 
	#X86_CR4_SMXE
 
	`_BITUL
(
X86_CR4_SMXE_BIT
)

	)

112 
	#X86_CR4_FSGSBASE_BIT
 16

	)

113 
	#X86_CR4_FSGSBASE
 
	`_BITUL
(
X86_CR4_FSGSBASE_BIT
)

	)

114 
	#X86_CR4_PCIDE_BIT
 17

	)

115 
	#X86_CR4_PCIDE
 
	`_BITUL
(
X86_CR4_PCIDE_BIT
)

	)

116 
	#X86_CR4_OSXSAVE_BIT
 18

	)

117 
	#X86_CR4_OSXSAVE
 
	`_BITUL
(
X86_CR4_OSXSAVE_BIT
)

	)

118 
	#X86_CR4_SMEP_BIT
 20

	)

119 
	#X86_CR4_SMEP
 
	`_BITUL
(
X86_CR4_SMEP_BIT
)

	)

120 
	#X86_CR4_SMAP_BIT
 21

	)

121 
	#X86_CR4_SMAP
 
	`_BITUL
(
X86_CR4_SMAP_BIT
)

	)

126 
	#X86_CR8_TPR
 
	`_AC
(0x0000000f,
UL
Ë

	)

135 
	#CX86_PCR0
 0x20

	)

136 
	#CX86_GCR
 0xb8

	)

137 
	#CX86_CCR0
 0xc0

	)

138 
	#CX86_CCR1
 0xc1

	)

139 
	#CX86_CCR2
 0xc2

	)

140 
	#CX86_CCR3
 0xc3

	)

141 
	#CX86_CCR4
 0xe8

	)

142 
	#CX86_CCR5
 0xe9

	)

143 
	#CX86_CCR6
 0xó

	)

144 
	#CX86_CCR7
 0xeb

	)

145 
	#CX86_PCR1
 0xf0

	)

146 
	#CX86_DIR0
 0x„

	)

147 
	#CX86_DIR1
 0xff

	)

148 
	#CX86_ARR_BASE
 0xc4

	)

149 
	#CX86_RCR_BASE
 0xdc

	)

	@/usr/include/asm/ptrace-abi.h

1 #i‚de‡
_ASM_X86_PTRACE_ABI_H


2 
	#_ASM_X86_PTRACE_ABI_H


	)

4 #ifde‡
__i386__


6 
	#EBX
 0

	)

7 
	#ECX
 1

	)

8 
	#EDX
 2

	)

9 
	#ESI
 3

	)

10 
	#EDI
 4

	)

11 
	#EBP
 5

	)

12 
	#EAX
 6

	)

13 
	#DS
 7

	)

14 
	#ES
 8

	)

15 
	#FS
 9

	)

16 
	#GS
 10

	)

17 
	#ORIG_EAX
 11

	)

18 
	#EIP
 12

	)

19 
	#CS
 13

	)

20 
	#EFL
 14

	)

21 
	#UESP
 15

	)

22 
	#SS
 16

	)

23 
	#FRAME_SIZE
 17

	)

27 #i‡
deföed
(
__ASSEMBLY__
Ë|| deföed(
__FRAME_OFFSETS
)

32 
	#R15
 0

	)

33 
	#R14
 8

	)

34 
	#R13
 16

	)

35 
	#R12
 24

	)

36 
	#RBP
 32

	)

37 
	#RBX
 40

	)

39 
	#R11
 48

	)

40 
	#R10
 56

	)

41 
	#R9
 64

	)

42 
	#R8
 72

	)

43 
	#RAX
 80

	)

44 
	#RCX
 88

	)

45 
	#RDX
 96

	)

46 
	#RSI
 104

	)

47 
	#RDI
 112

	)

52 
	#ORIG_RAX
 120

	)

54 
	#RIP
 128

	)

55 
	#CS
 136

	)

56 
	#EFLAGS
 144

	)

57 
	#RSP
 152

	)

58 
	#SS
 160

	)

62 
	#FRAME_SIZE
 168

	)

67 
	#PTRACE_GETREGS
 12

	)

68 
	#PTRACE_SETREGS
 13

	)

69 
	#PTRACE_GETFPREGS
 14

	)

70 
	#PTRACE_SETFPREGS
 15

	)

71 
	#PTRACE_GETFPXREGS
 18

	)

72 
	#PTRACE_SETFPXREGS
 19

	)

74 
	#PTRACE_OLDSETOPTIONS
 21

	)

77 
	#PTRACE_GET_THREAD_AREA
 25

	)

78 
	#PTRACE_SET_THREAD_AREA
 26

	)

80 #ifde‡
__x86_64__


81 
	#PTRACE_ARCH_PRCTL
 30

	)

84 
	#PTRACE_SYSEMU
 31

	)

85 
	#PTRACE_SYSEMU_SINGLESTEP
 32

	)

87 
	#PTRACE_SINGLEBLOCK
 33

	)

89 #i‚de‡
__ASSEMBLY__


90 
	~<löux/ty≥s.h
>

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/confname.h

19 #i‚de‡
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


529 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

535 
	m_CS_PATH
,

536 
	#_CS_PATH
 
_CS_PATH


	)

538 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

539 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

540 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	m_CS_GNU_LIBC_VERSION
,

543 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

544 
	m_CS_GNU_LIBPTHREAD_VERSION
,

545 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

547 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

548 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

549 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

552 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

553 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	m_CS_LFS_CFLAGS
 = 1000,

556 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

557 
	m_CS_LFS_LDFLAGS
,

558 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

559 
	m_CS_LFS_LIBS
,

560 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

561 
	m_CS_LFS_LINTFLAGS
,

562 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

563 
	m_CS_LFS64_CFLAGS
,

564 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

565 
	m_CS_LFS64_LDFLAGS
,

566 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

567 
	m_CS_LFS64_LIBS
,

568 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

569 
	m_CS_LFS64_LINTFLAGS
,

570 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

572 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

573 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

575 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

577 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

579 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

581 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

588 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

589 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LIBS
,

593 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

594 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

595 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

596 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

597 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

605 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

606 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

621 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

622 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

629 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

630 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

638 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

639 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

654 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

655 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

662 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

663 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

671 
	m_CS_V6_ENV
,

672 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

673 
	m_CS_V7_ENV


674 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #i‚de‡
__x86_64__


75 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 
	#_XBS5_ILP32_OFF32
 1

	)

95 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


98 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

19 #ifde‡
_ERRNO_H


21 #unde‡
EDOM


22 #unde‡
EILSEQ


23 #unde‡
ERANGE


24 
	~<löux/î∫o.h
>

27 
	#ENOTSUP
 
EOPNOTSUPP


	)

30 #i‚de‡
ECANCELED


31 
	#ECANCELED
 125

	)

35 #i‚de‡
EOWNERDEAD


36 
	#EOWNERDEAD
 130

	)

37 
	#ENOTRECOVERABLE
 131

	)

40 #i‚de‡
ERFKILL


41 
	#ERFKILL
 132

	)

44 #i‚de‡
EHWPOISON


45 
	#EHWPOISON
 133

	)

48 #i‚de‡
__ASSEMBLER__


50 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

52 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


54 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

59 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


63 
	#EDOM
 33

	)

64 
	#EILSEQ
 84

	)

65 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

19 #i‚de‡
_FCNTL_H


23 #ifde‡
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifde‡
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sÊock


37 
	ml_ty≥
;

38 
	ml_whí˚
;

39 #i‚de‡
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_°¨t
;

41 
__off_t
 
	ml_Àn
;

43 
__off64_t
 
	ml_°¨t
;

44 
__off64_t
 
	ml_Àn
;

46 
__pid_t
 
	ml_pid
;

49 #ifde‡
__USE_LARGEFILE64


50 
	sÊock64


52 
	ml_ty≥
;

53 
	ml_whí˚
;

54 
__off64_t
 
	ml_°¨t
;

55 
__off64_t
 
	ml_Àn
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bôs/f˙é-löux.h
>

	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/in.h

20 #i‚de‡
_NETINET_IN_H


29 #i‡
deföed
 
_UAPI_LINUX_IN6_H
 || deföed 
_UAPI_IPV6_H


33 
	#__USE_KERNEL_IPV6_DEFS


	)

39 
	#IP_OPTIONS
 4

	)

40 
	#IP_HDRINCL
 3

	)

41 
	#IP_TOS
 1

	)

42 
	#IP_TTL
 2

	)

43 
	#IP_RECVOPTS
 6

	)

45 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

46 
	#IP_RETOPTS
 7

	)

47 
	#IP_MULTICAST_IF
 32

	)

48 
	#IP_MULTICAST_TTL
 33

	)

49 
	#IP_MULTICAST_LOOP
 34

	)

50 
	#IP_ADD_MEMBERSHIP
 35

	)

51 
	#IP_DROP_MEMBERSHIP
 36

	)

52 
	#IP_UNBLOCK_SOURCE
 37

	)

53 
	#IP_BLOCK_SOURCE
 38

	)

54 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

55 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

56 
	#IP_MSFILTER
 41

	)

57 #ifde‡
__USE_MISC


58 
	#MCAST_JOIN_GROUP
 42

	)

59 
	#MCAST_BLOCK_SOURCE
 43

	)

60 
	#MCAST_UNBLOCK_SOURCE
 44

	)

61 
	#MCAST_LEAVE_GROUP
 45

	)

62 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

63 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

64 
	#MCAST_MSFILTER
 48

	)

65 
	#IP_MULTICAST_ALL
 49

	)

66 
	#IP_UNICAST_IF
 50

	)

68 
	#MCAST_EXCLUDE
 0

	)

69 
	#MCAST_INCLUDE
 1

	)

72 
	#IP_ROUTER_ALERT
 5

	)

73 
	#IP_PKTINFO
 8

	)

74 
	#IP_PKTOPTIONS
 9

	)

75 
	#IP_PMTUDISC
 10

	)

76 
	#IP_MTU_DISCOVER
 10

	)

77 
	#IP_RECVERR
 11

	)

78 
	#IP_RECVTTL
 12

	)

79 
	#IP_RECVTOS
 13

	)

80 
	#IP_MTU
 14

	)

81 
	#IP_FREEBIND
 15

	)

82 
	#IP_IPSEC_POLICY
 16

	)

83 
	#IP_XFRM_POLICY
 17

	)

84 
	#IP_PASSSEC
 18

	)

85 
	#IP_TRANSPARENT
 19

	)

86 
	#IP_MULTICAST_ALL
 49

	)

89 
	#IP_ORIGDSTADDR
 20

	)

90 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

92 
	#IP_MINTTL
 21

	)

93 
	#IP_NODEFRAG
 22

	)

94 
	#IP_CHECKSUM
 23

	)

95 
	#IP_BIND_ADDRESS_NO_PORT
 24

	)

98 
	#IP_PMTUDISC_DONT
 0

	)

99 
	#IP_PMTUDISC_WANT
 1

	)

100 
	#IP_PMTUDISC_DO
 2

	)

101 
	#IP_PMTUDISC_PROBE
 3

	)

105 
	#IP_PMTUDISC_INTERFACE
 4

	)

107 
	#IP_PMTUDISC_OMIT
 5

	)

109 
	#IP_MULTICAST_IF
 32

	)

110 
	#IP_MULTICAST_TTL
 33

	)

111 
	#IP_MULTICAST_LOOP
 34

	)

112 
	#IP_ADD_MEMBERSHIP
 35

	)

113 
	#IP_DROP_MEMBERSHIP
 36

	)

114 
	#IP_UNBLOCK_SOURCE
 37

	)

115 
	#IP_BLOCK_SOURCE
 38

	)

116 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

117 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

118 
	#IP_MSFILTER
 41

	)

119 
	#IP_MULTICAST_ALL
 49

	)

120 
	#IP_UNICAST_IF
 50

	)

123 
	#SOL_IP
 0

	)

125 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

126 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

127 
	#IP_MAX_MEMBERSHIPS
 20

	)

129 #ifde‡
__USE_MISC


133 
	sù_›ts


135 
ö_addr
 
	mù_d°
;

136 
	mù_›ts
[40];

140 
	sù_mªqn


142 
ö_addr
 
	mimr_mu…üddr
;

143 
ö_addr
 
	mimr_addªss
;

144 
	mimr_ifödex
;

148 
	sö_pktöfo


150 
	mùi_ifödex
;

151 
ö_addr
 
	mùi_•ec_d°
;

152 
ö_addr
 
	mùi_addr
;

159 
	#IPV6_ADDRFORM
 1

	)

160 
	#IPV6_2292PKTINFO
 2

	)

161 
	#IPV6_2292HOPOPTS
 3

	)

162 
	#IPV6_2292DSTOPTS
 4

	)

163 
	#IPV6_2292RTHDR
 5

	)

164 
	#IPV6_2292PKTOPTIONS
 6

	)

165 
	#IPV6_CHECKSUM
 7

	)

166 
	#IPV6_2292HOPLIMIT
 8

	)

168 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

170 
	#IPV6_NEXTHOP
 9

	)

171 
	#IPV6_AUTHHDR
 10

	)

172 
	#IPV6_UNICAST_HOPS
 16

	)

173 
	#IPV6_MULTICAST_IF
 17

	)

174 
	#IPV6_MULTICAST_HOPS
 18

	)

175 
	#IPV6_MULTICAST_LOOP
 19

	)

176 
	#IPV6_JOIN_GROUP
 20

	)

177 
	#IPV6_LEAVE_GROUP
 21

	)

178 
	#IPV6_ROUTER_ALERT
 22

	)

179 
	#IPV6_MTU_DISCOVER
 23

	)

180 
	#IPV6_MTU
 24

	)

181 
	#IPV6_RECVERR
 25

	)

182 
	#IPV6_V6ONLY
 26

	)

183 
	#IPV6_JOIN_ANYCAST
 27

	)

184 
	#IPV6_LEAVE_ANYCAST
 28

	)

185 
	#IPV6_IPSEC_POLICY
 34

	)

186 
	#IPV6_XFRM_POLICY
 35

	)

189 
	#IPV6_RECVPKTINFO
 49

	)

190 
	#IPV6_PKTINFO
 50

	)

191 
	#IPV6_RECVHOPLIMIT
 51

	)

192 
	#IPV6_HOPLIMIT
 52

	)

193 
	#IPV6_RECVHOPOPTS
 53

	)

194 
	#IPV6_HOPOPTS
 54

	)

195 
	#IPV6_RTHDRDSTOPTS
 55

	)

196 
	#IPV6_RECVRTHDR
 56

	)

197 
	#IPV6_RTHDR
 57

	)

198 
	#IPV6_RECVDSTOPTS
 58

	)

199 
	#IPV6_DSTOPTS
 59

	)

200 
	#IPV6_RECVPATHMTU
 60

	)

201 
	#IPV6_PATHMTU
 61

	)

202 
	#IPV6_DONTFRAG
 62

	)

205 
	#IPV6_RECVTCLASS
 66

	)

206 
	#IPV6_TCLASS
 67

	)

209 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

210 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

211 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

212 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

215 
	#IPV6_PMTUDISC_DONT
 0

	)

216 
	#IPV6_PMTUDISC_WANT
 1

	)

217 
	#IPV6_PMTUDISC_DO
 2

	)

218 
	#IPV6_PMTUDISC_PROBE
 3

	)

219 
	#IPV6_PMTUDISC_INTERFACE
 4

	)

220 
	#IPV6_PMTUDISC_OMIT
 5

	)

223 
	#SOL_IPV6
 41

	)

224 
	#SOL_ICMPV6
 58

	)

227 
	#IPV6_RTHDR_LOOSE
 0

	)

228 
	#IPV6_RTHDR_STRICT
 1

	)

230 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/locale.h

19 #i‡!
deföed
 
_LOCALE_H
 && !deföed 
_LANGINFO_H


23 #i‚de‡
_BITS_LOCALE_H


24 
	#_BITS_LOCALE_H
 1

	)

26 
	#__LC_CTYPE
 0

	)

27 
	#__LC_NUMERIC
 1

	)

28 
	#__LC_TIME
 2

	)

29 
	#__LC_COLLATE
 3

	)

30 
	#__LC_MONETARY
 4

	)

31 
	#__LC_MESSAGES
 5

	)

32 
	#__LC_ALL
 6

	)

33 
	#__LC_PAPER
 7

	)

34 
	#__LC_NAME
 8

	)

35 
	#__LC_ADDRESS
 9

	)

36 
	#__LC_TELEPHONE
 10

	)

37 
	#__LC_MEASUREMENT
 11

	)

38 
	#__LC_IDENTIFICATION
 12

	)

	@/usr/include/bits/mman.h

19 #i‚de‡
_SYS_MMAN_H


27 #ifde‡
__USE_MISC


28 
	#MAP_32BIT
 0x40

	)

32 #ifde‡
__USE_MISC


33 
	#MAP_GROWSDOWN
 0x00100

	)

34 
	#MAP_DENYWRITE
 0x00800

	)

35 
	#MAP_EXECUTABLE
 0x01000

	)

36 
	#MAP_LOCKED
 0x02000

	)

37 
	#MAP_NORESERVE
 0x04000

	)

38 
	#MAP_POPULATE
 0x08000

	)

39 
	#MAP_NONBLOCK
 0x10000

	)

40 
	#MAP_STACK
 0x20000

	)

41 
	#MAP_HUGETLB
 0x40000

	)

45 
	~<bôs/mm™-löux.h
>

	@/usr/include/bits/param.h

19 #i‚de‡
_SYS_PARAM_H


23 #i‚de‡
ARG_MAX


24 
	#__undef_ARG_MAX


	)

27 
	~<löux/limôs.h
>

28 
	~<löux/∑øm.h
>

31 #ifde‡
__undef_ARG_MAX


32 #unde‡
ARG_MAX


33 #unde‡
__undef_ARG_MAX


36 
	#MAXSYMLINKS
 20

	)

41 
	#NOFILE
 256

	)

42 
	#NCARGS
 131072

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

109 
	#__PTHREAD_SPINS
 0, 0

	)

111 
	m__nu£rs
;

112 
__exãnsi⁄__
 union

116 
	m__e•ös
;

117 
	m__ñisi⁄
;

118 
	#__•ös
 
__ñisi⁄_d©a
.
__e•ös


	)

119 
	#__ñisi⁄
 
__ñisi⁄_d©a
.
__ñisi⁄


	)

120 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

121 } 
	m__ñisi⁄_d©a
;

122 
__±hªad_¶i°_t
 
	m__li°
;

125 } 
	m__d©a
;

126 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

127 
	m__Æign
;

128 } 
	t±hªad_muãx_t
;

132 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

133 
	m__Æign
;

134 } 
	t±hªad_muãx©å_t
;

143 
	m__lock
;

144 
	m__fuãx
;

145 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

146 
__exãnsi⁄__
 
	m__wakeup_£q
;

147 
__exãnsi⁄__
 
	m__wokí_£q
;

148 *
	m__muãx
;

149 
	m__nwaôîs
;

150 
	m__brﬂdˇ°_£q
;

151 } 
	m__d©a
;

152 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

153 
__exãnsi⁄__
 
	m__Æign
;

154 } 
	t±hªad_c⁄d_t
;

158 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

159 
	m__Æign
;

160 } 
	t±hªad_c⁄d©å_t
;

164 
	t±hªad_key_t
;

168 
	t±hªad_⁄˚_t
;

171 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


176 #ifde‡
__x86_64__


179 
	m__lock
;

180 
	m__ƒ_ªadîs
;

181 
	m__ªadîs_wakeup
;

182 
	m__wrôî_wakeup
;

183 
	m__ƒ_ªadîs_queued
;

184 
	m__ƒ_wrôîs_queued
;

185 
	m__wrôî
;

186 
	m__sh¨ed
;

187 sig√d 
	m__rwñisi⁄
;

188 #ifde‡ 
__ILP32__


189 
	m__∑d1
[3];

190 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0 }

	)

192 
	m__∑d1
[7];

193 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0, 0, 0, 0, 0 }

	)

195 
	m__∑d2
;

198 
	m__Êags
;

199 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

200 } 
	m__d©a
;

204 
	m__lock
;

205 
	m__ƒ_ªadîs
;

206 
	m__ªadîs_wakeup
;

207 
	m__wrôî_wakeup
;

208 
	m__ƒ_ªadîs_queued
;

209 
	m__ƒ_wrôîs_queued
;

212 
	m__Êags
;

213 
	m__sh¨ed
;

214 sig√d 
	m__rwñisi⁄
;

215 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0

	)

216 
	m__∑d2
;

217 
	m__wrôî
;

218 } 
	m__d©a
;

220 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

221 
	m__Æign
;

222 } 
	t±hªad_rwlock_t
;

226 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

227 
	m__Æign
;

228 } 
	t±hªad_rwlock©å_t
;

232 #ifde‡
__USE_XOPEN2K


234 vﬁ©ûê
	t±hªad_•ölock_t
;

241 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

242 
	m__Æign
;

243 } 
	t±hªad_b¨rõr_t
;

247 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

248 
	m__Æign
;

249 } 
	t±hªad_b¨rõøâr_t
;

253 #i‚de‡
__x86_64__


255 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #ifde‡
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__glibc_ª£rved4
;

110 
	m__glibc_ª£rved5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #ifde‡
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #ifde‡
__USE_POSIX


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #ifde‡
__USE_POSIX


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #ifde‡
__USE_MISC


34 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

35 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

38 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_INLINE_u«lig√d
 1

	)

27 
	#_HAVE_STRING_ARCH_memp˝y
 1

	)

31 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

32 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

33 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

34 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

35 || 
deföed
 
	g__ßndybridge__
 || deföed 
	g__haswñl__
 \

36 || 
deföed
 
	g__b⁄√Œ__
 || deföed 
	g__sûvîm⁄t__
 \

37 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

38 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

39 || 
deföed
 
	g__amdÁm10__
 || deföed 
	g__bdvî1__
 \

40 || 
deföed
 
	g__bdvî2__
 || deföed 
	g__bdvî3__
 \

41 || 
deföed
 
	g__bdvî4__
 || deföed 
	g__btvî1__
 \

42 || 
deföed
 
	g__btvî2__
)

46 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

47 && 
deföed
 
	g__GNUC__
 && __GNUC__ >= 2

49 #i‚de‡
__STRING_INLINE


50 #i‚de‡
__exã∫_ölöe


51 
	#__STRING_INLINE
 
ölöe


	)

53 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

58 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

59 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

60 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

62 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

63 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

64 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

65 | ((c⁄° *Ë(
§c
))[
idx
])

	)

69 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

70 
	#mem˝y
(
de°
, 
§c
, 
n
) \

71 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

72 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

73 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

74 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

75 ((
n
) == 0 \

76 ? (
de°
) \

77 : (((
n
) % 4 == 0) \

78 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

79 : (((
n
) % 2 == 0) \

80 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

81 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

83 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

84 
size_t
 
__n
);

86 
__STRING_INLINE
 *

87 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

89 
__d0
, 
__d1
;

90 *
__tmp
 = 
__de°
;

91 
__asm__
 
__vﬁ©ûe__


99 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

100 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

102  
__de°
;

103 
	}
}

105 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

106 
size_t
 
__n
);

108 
__STRING_INLINE
 *

109 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

111 
__d0
, 
__d1
;

112 *
__tmp
 = 
__de°
;

113 
__asm__
 
__vﬁ©ûe__


126 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

127 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

129  
__de°
;

130 
	}
}

132 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

134 
__STRING_INLINE
 *

135 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

137 
__d0
, 
__d1
, 
__d2
;

138 *
__tmp
 = 
__de°
;

139 
__asm__
 
__vﬁ©ûe__


150 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

151 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

152 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

153 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

155  
__de°
;

156 
	}
}

158 
	#_HAVE_STRING_ARCH_memmove
 1

	)

159 #i‚de‡
_FORCE_INLINES


162 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

164 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

165 
	`__asm__
 ("memmove");

167 
__STRING_INLINE
 *

168 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

170 
__d0
, 
__d1
, 
__d2
;

171 *
__tmp
 = 
__de°
;

172 i‡(
__de°
 < 
__§c
)

173 
__asm__
 
__vﬁ©ûe__


176 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

177 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

178 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

179 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

181 
__asm__
 
__vﬁ©ûe__


187 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

188 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

189 : "0" (
__n
), "1" (__¿+ (c⁄° *Ë
__§c
),

190 "2" (
__n
 + (*Ë
__tmp
),

191 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

192  
__de°
;

193 
	}
}

197 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

198 #i‚de‡
_FORCE_INLINES


199 #i‚de‡
__PIC__


201 
__STRING_INLINE
 

202 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

204 
__d0
, 
__d1
, 
__d2
;

205 
__ªs
;

206 
__asm__
 
__vﬁ©ûe__


214 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

215 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

216 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

217 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

219  
__ªs
;

220 
	}
}

225 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

226 
	#_USE_STRING_ARCH_mem£t
 1

	)

227 
	#mem£t
(
s
, 
c
, 
n
) \

228 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

229 ? ((
n
) == 1 \

230 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

231 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

232 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

233 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

234 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

235 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

236 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

237 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

238 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

240 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

241 *((*Ë
__s
Ë(Ë(
c
); \

242 
__s
; })

	)

244 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

245 ({ *
__s
 = (
s
); \

247 
__ui
; \

248 
__usi
; \

249 
__uc
; \

250 } *
__u
 = 
__s
; \

251 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

257 i‡((
n
) == 3 || (n) >= 5) \

258 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

261 
n
) \

264 
__u
->
__ui
 = 
__c
; \

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

267 
__u
->
__ui
 = 
__c
; \

268 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

270 
__u
->
__ui
 = 
__c
; \

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

273 
__u
->
__usi
 = (Ë
__c
; \

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

275 
__u
->
__uc
 = (Ë
__c
; \

279 
__u
->
__ui
 = 
__c
; \

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__usi
 = (Ë
__c
; \

292 
__u
->
__ui
 = 
__c
; \

293 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__uc
 = (Ë
__c
; \

305 
__u
->
__ui
 = 
__c
; \

306 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

308 
__u
->
__ui
 = 
__c
; \

309 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

311 
__u
->
__ui
 = 
__c
; \

312 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

314 
__u
->
__ui
 = 
__c
; \

319 
__s
; })

	)

321 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

322 (((
n
) % 4 == 0) \

323 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

324 
n
) \

325 : (((
n
) % 2 == 0) \

326 ? 
	`__mem£t_c˙_by2
 (
s
, \

327 ((Ë((Ë(
c
))) * 0x01010101,\

328 
n
) \

329 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

331 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

332 
size_t
 
__n
);

334 
__STRING_INLINE
 *

335 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

337 *
__tmp
 = 
__s
;

338 
__d0
;

339 #ifde‡
__i686__


340 
__asm__
 
__vﬁ©ûe__


343 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

344 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

345 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

348 
__asm__
 
__vﬁ©ûe__


354 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

355 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

356 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

359  
__s
;

360 
	}
}

362 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

363 
size_t
 
__n
);

365 
__STRING_INLINE
 *

366 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

368 
__d0
, 
__d1
;

369 *
__tmp
 = 
__s
;

370 #ifde‡
__i686__


371 
__asm__
 
__vﬁ©ûe__


375 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

376 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

377 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

380 
__asm__
 
__vﬁ©ûe__


386 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

387 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

388 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

391  
__s
;

392 
	}
}

394 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

395 (((
n
) % 4 == 0) \

396 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

397 : (((
n
) % 2 == 0) \

398 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

399 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

401 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

403 
__STRING_INLINE
 *

404 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

406 *
__tmp
 = 
__s
;

407 
__d0
;

408 
__asm__
 
__vﬁ©ûe__


418 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

419 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

420 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

422  
__s
;

423 
	}
}

425 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

427 
__STRING_INLINE
 *

428 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

430 
__d0
, 
__d1
;

431 *
__tmp
 = 
__s
;

432 
__asm__
 
__vﬁ©ûe__


443 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

444 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

445 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

447  
__s
;

448 
	}
}

452 
	#_HAVE_STRING_ARCH_memchr
 1

	)

453 #i‚de‡
_FORCE_INLINES


454 
__STRING_INLINE
 *

455 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

457 
__d0
;

458 #ifde‡
__i686__


459 
__d1
;

461 *
__ªs
;

462 i‡(
__n
 == 0)

463  
NULL
;

464 #ifde‡
__i686__


465 
__asm__
 
__vﬁ©ûe__


469 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

470 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

471 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

474 
__asm__
 
__vﬁ©ûe__


480 : "=D" (
__ªs
), "=&c" (
__d0
)

481 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

482 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

485  
__ªs
 - 1;

486 
	}
}

489 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

490 #i‚de‡
_FORCE_INLINES


491 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

493 
__STRING_INLINE
 *

494 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

496 
__d0
;

497 #ifde‡
__i686__


498 
__d1
;

500 *
__ªs
;

501 i‡(
__n
 == 0)

502  
NULL
;

503 #ifde‡
__i686__


504 
__asm__
 
__vﬁ©ûe__


510 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

511 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

512 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

515 
__asm__
 
__vﬁ©ûe__


522 : "=D" (
__ªs
), "=&c" (
__d0
)

523 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

524 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

527  
__ªs
;

528 
	}
}

529 #ifde‡
__USE_GNU


530 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

535 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

536 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

538 #i‚de‡
_FORCE_INLINES


539 
__STRING_INLINE
 *

540 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

542 
__d0
;

543 *
__ªs
;

544 
__asm__
 
__vﬁ©ûe__


547 : "=D" (
__ªs
), "=&c" (
__d0
)

548 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

549 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

551  
__ªs
 - 1;

552 
	}
}

553 #ifde‡
__USE_GNU


554 
__STRING_INLINE
 *

555 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

557  
	`__øwmemchr
 (
__s
, 
__c
);

558 
	}
}

564 
	#_HAVE_STRING_ARCH_°æí
 1

	)

565 
	#°æí
(
°r
) \

566 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

567 ? 
	`__buûtö_°æí
 (
°r
) \

568 : 
	`__°æí_g
 (
°r
)))

	)

569 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

571 
__STRING_INLINE
 
size_t


572 
	$__°æí_g
 (c⁄° *
__°r
)

574 
__dummy
;

575 c⁄° *
__tmp
 = 
__°r
;

576 
__asm__
 
__vﬁ©ûe__


582 : "Ù" (
__tmp
), "=&q" (
__dummy
)

583 : "0" (
__°r
),

584 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

586  
__tmp
 - 
__°r
 - 1;

587 
	}
}

591 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

592 
	#°r˝y
(
de°
, 
§c
) \

593 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

594 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

595 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

596 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

597 (c⁄° *Ë(
§c
), \

598 
	`°æí
 (
§c
) + 1)) \

599 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

601 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

602 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

604 
__ui
; \

605 
__usi
; \

606 
__uc
; \

607 
__c
; \

608 } *
__u
 = (*Ë
__de°
; \

609 
§˛í
) \

612 
__u
->
__uc
 = '\0'; \

615 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

618 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

619 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

620 
__u
->
__uc
 = '\0'; \

623 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__uc
 = '\0'; \

631 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

632 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

633 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

636 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

637 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

638 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

640 
__u
->
__uc
 = '\0'; \

643 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

645 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

648 (*Ë
__de°
; }))

	)

650 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

652 
__STRING_INLINE
 *

653 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

655 *
__tmp
 = 
__de°
;

656 
__dummy
;

657 
__asm__
 
__vﬁ©ûe__


666 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

667 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

668 : "0" (
__§c
), "1" (
__tmp
),

669 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

671  
__de°
;

672 
	}
}

675 #ifde‡
__USE_GNU


676 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

678 
	#__°p˝y
(
de°
, 
§c
) \

679 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

680 ? (
	`°æí
 (
§c
) + 1 <= 8 \

681 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

682 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

683 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

684 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

685 ((
§˛í
) % 4 == 0 \

686 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

687 : ((
§˛í
) % 2 == 0 \

688 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

689 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

692 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

694 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

695 (
	`__exãnsi⁄__
 ({ union { \

696 
__ui
; \

697 
__usi
; \

698 
__uc
; \

699 
__c
; \

700 } *
__u
 = (*Ë(
de°
); \

701 
§˛í
) \

704 
__u
->
__uc
 = '\0'; \

707 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

708 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

711 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

712 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

713 
__u
->
__uc
 = '\0'; \

716 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

717 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

720 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

721 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

722 
__u
->
__uc
 = '\0'; \

725 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

726 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

727 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

728 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

731 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

732 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

733 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

734 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

735 
__u
->
__uc
 = '\0'; \

738 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

739 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

740 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

741 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

744 (*Ë
__u
; }))

	)

746 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

747 
size_t
 
__§˛í
);

749 
__STRING_INLINE
 *

750 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

752 *
__tmp
 = 
__de°
;

753 
__d0
, 
__d1
;

754 
__asm__
 
__vﬁ©ûe__


762 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

763 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

765  
__tmp
;

766 
	}
}

768 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

769 
size_t
 
__§˛í
);

771 
__STRING_INLINE
 *

772 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

774 *
__tmp
 = 
__de°
;

775 
__d0
, 
__d1
;

776 
__asm__
 
__vﬁ©ûe__


789 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

790 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

791 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

792 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

794  
__tmp
 + 2;

795 
	}
}

797 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

798 
size_t
 
__§˛í
);

800 
__STRING_INLINE
 *

801 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

803 
__d0
, 
__d1
;

804 *
__tmp
 = 
__de°
;

805 
__asm__
 
__vﬁ©ûe__


816 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

817 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

818 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

819 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

821  
__tmp
;

822 
	}
}

824 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

826 
__STRING_INLINE
 *

827 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

829 *
__tmp
 = 
__de°
;

830 
__dummy
;

831 
__asm__
 
__vﬁ©ûe__


840 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

841 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

842 : "0" (
__§c
), "1" (
__tmp
),

843 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

845  
__tmp
 - 1;

846 
	}
}

851 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

852 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

853 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

854 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

855 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

856 (c⁄° *Ë(
§c
), 
n
) \

857 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

858 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

859 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

860 (((
§˛í
) % 4 == 0) \

861 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

862 : (((
§˛í
) % 2 == 0) \

863 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

864 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

866 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

867 
size_t
 
__§˛í
, size_à
__n
);

869 
__STRING_INLINE
 *

870 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

872 *
__tmp
 = 
__de°
;

873 
__dummy1
, 
__dummy2
;

874 
__asm__
 
__vﬁ©ûe__


882 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

883 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

884 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

885 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

887 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

888  
__de°
;

889 
	}
}

891 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

892 
size_t
 
__§˛í
, size_à
__n
);

894 
__STRING_INLINE
 *

895 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

897 *
__tmp
 = 
__de°
;

898 
__dummy1
, 
__dummy2
;

899 
__asm__
 
__vﬁ©ûe__


912 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

913 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

914 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

915 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

917 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

918  
__de°
;

919 
	}
}

921 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

922 
size_t
 
__§˛í
, size_à
__n
);

924 
__STRING_INLINE
 *

925 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

927 
__d0
, 
__d1
;

928 *
__tmp
 = 
__de°
;

929 
__asm__
 
__vﬁ©ûe__


940 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

941 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

942 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

943 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

945 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

946  
__de°
;

947 
	}
}

949 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

950 
size_t
 
__n
);

952 
__STRING_INLINE
 *

953 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

955 *
__tmp
 = 
__de°
;

956 
__dummy
;

957 i‡(
__n
 > 0)

958 
__asm__
 
__vﬁ©ûe__


974 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

975 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

978  
__de°
;

979 
	}
}

983 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

984 
	#°rˇt
(
de°
, 
§c
) \

985 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

986 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

987 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

989 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

990 
size_t
 
__§˛í
);

992 
__STRING_INLINE
 *

993 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

995 #ifde‡
__i686__


996 
__d0
;

997 *
__tmp
;

998 
__asm__
 
__vﬁ©ûe__


1000 : "=D" (
__tmp
), "=&c" (
__d0
),

1001 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1002 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

1003 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1005 --
__tmp
;

1007 *
__tmp
 = 
__de°
;

1008 
__asm__
 
__vﬁ©ûe__


1014 : "Ù" (
__tmp
),

1015 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1016 : "0" (
__tmp
),

1017 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1020 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1021  
__de°
;

1022 
	}
}

1024 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1026 
__STRING_INLINE
 *

1027 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1029 *
__tmp
 = 
__de°
;

1030 
__dummy
;

1031 
__asm__
 
__vﬁ©ûe__


1044 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1045 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1046 : "1" (
__tmp
), "2" (
__§c
),

1047 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1049  
__de°
;

1050 
	}
}

1054 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1055 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1056 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1057 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1058 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1059 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1060 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1061 (c⁄° *Ë(
§c
), \

1062 (
n
)Ë0, 
__de°
)) \

1063 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1065 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1066 
size_t
 
__n
);

1068 
__STRING_INLINE
 *

1069 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1071 *
__tmp
 = 
__de°
;

1072 
__dummy
;

1073 #ifde‡
__i686__


1074 
__asm__
 
__vﬁ©ûe__


1088 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1089 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1092 --
__tmp
;

1093 
__asm__
 
__vﬁ©ûe__


1110 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1111 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1114  
__de°
;

1115 
	}
}

1119 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1120 
	#°rcmp
(
s1
, 
s2
) \

1121 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1122 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1123 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1124 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1125 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1126 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1127 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1128 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1129 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1130 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1131 (c⁄° *Ë(
s2
), \

1132 
	`°æí
 (
s1
)) \

1133 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1134 (c⁄° *Ë(
s2
), \

1135 
	`°æí
 (
s1
))) \

1136 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1137 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1138 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1139 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1140 (c⁄° *Ë(
s2
), \

1141 
	`°æí
 (
s2
)) \

1142 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1143 (c⁄° *Ë(
s2
), \

1144 
	`°æí
 (
s2
))) \

1145 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1147 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1148 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1149 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1151 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1152 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1154 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1155 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1156 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1159 
__ªsu…
; }))

	)

1161 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1162 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1163 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1164 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1166 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1167 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1169 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1170 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1171 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1174 
__ªsu…
; }))

	)

1176 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1177 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1178 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1179 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1181 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1182 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1184 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1185 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1186 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1189 
__ªsu…
; }))

	)

1191 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1193 
__STRING_INLINE
 

1194 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1196 
__ªs
;

1197 
__asm__
 
__vﬁ©ûe__


1213 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1214 : "1" (
__s1
), "2" (
__s2
),

1215 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1216 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1218  
__ªs
;

1219 
	}
}

1223 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1224 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1225 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1226 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1227 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1228 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1229 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1231 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1232 
size_t
 
__n
);

1234 
__STRING_INLINE
 

1235 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1237 
__ªs
;

1238 
__asm__
 
__vﬁ©ûe__


1257 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1258 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1259 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1260 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1262  
__ªs
;

1263 
	}
}

1267 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1268 
	#_USE_STRING_ARCH_°rchr
 1

	)

1269 
	#°rchr
(
s
, 
c
) \

1270 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1271 ? ((
c
) == '\0' \

1272 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1273 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1274 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1276 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1278 
__STRING_INLINE
 *

1279 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1281 
__d0
;

1282 *
__ªs
;

1283 
__asm__
 
__vﬁ©ûe__


1293 : "Ù" (
__ªs
), "=&a" (
__d0
)

1294 : "0" (
__s
), "1" (
__c
),

1295 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1297  
__ªs
;

1298 
	}
}

1300 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1302 
__STRING_INLINE
 *

1303 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1305 
__d0
;

1306 *
__ªs
;

1307 
__asm__
 
__vﬁ©ûe__


1318 : "Ù" (
__ªs
), "=&a" (
__d0
)

1319 : "0" (
__s
), "1" (
__c
),

1320 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1322  
__ªs
;

1323 
	}
}

1327 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1328 
	#__°rch∫ul
(
s
, 
c
) \

1329 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1330 ? ((
c
) == '\0' \

1331 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1332 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1333 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1335 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1337 
__STRING_INLINE
 *

1338 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1340 
__d0
;

1341 *
__ªs
;

1342 
__asm__
 
__vﬁ©ûe__


1352 : "Ù" (
__ªs
), "=&a" (
__d0
)

1353 : "0" (
__s
), "1" (
__c
),

1354 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1356  
__ªs
;

1357 
	}
}

1359 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1361 
__STRING_INLINE
 *

1362 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1364 
__d0
;

1365 *
__ªs
;

1366 
__asm__
 
__vﬁ©ûe__


1377 : "Ù" (
__ªs
), "=&a" (
__d0
)

1378 : "0" (
__s
), "1" (
__c
),

1379 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1381  
__ªs
;

1382 
	}
}

1383 #ifde‡
__USE_GNU


1384 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1388 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1390 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1391 
	#ödex
(
s
, 
c
) \

1392 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1393 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1394 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1399 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1400 
	#°ºchr
(
s
, 
c
) \

1401 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1402 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1403 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1405 #ifde‡
__i686__


1406 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1408 
__STRING_INLINE
 *

1409 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1411 
__d0
, 
__d1
;

1412 *
__ªs
;

1413 
__asm__
 
__vﬁ©ûe__


1421 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1422 : "0" (1), "1" (
__s
), "2" (
__c
),

1423 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1425  
__ªs
 - 1;

1426 
	}
}

1428 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1430 
__STRING_INLINE
 *

1431 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1433 
__d0
, 
__d1
;

1434 *
__ªs
;

1435 
__asm__
 
__vﬁ©ûe__


1444 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1445 : "0" (1), "1" (
__s
), "2" (
__c
),

1446 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1448  
__ªs
 - 1;

1449 
	}
}

1451 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1453 
__STRING_INLINE
 *

1454 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1456 
__d0
, 
__d1
;

1457 *
__ªs
;

1458 
__asm__
 
__vﬁ©ûe__


1468 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1469 : "0" (0), "1" (
__s
), "2" (
__c
),

1470 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1472  
__ªs
;

1473 
	}
}

1475 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1477 
__STRING_INLINE
 *

1478 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1480 
__d0
, 
__d1
;

1481 *
__ªs
;

1482 
__asm__
 
__vﬁ©ûe__


1493 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1494 : "0" (0), "1" (
__s
), "2" (
__c
),

1495 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1497  
__ªs
;

1498 
	}
}

1502 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1504 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1505 
	#rödex
(
s
, 
c
) \

1506 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1507 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1508 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1514 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1515 
	#°rc•n
(
s
, 
ªje˘
) \

1516 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1517 ? ((
ªje˘
)[0] == '\0' \

1518 ? 
	`°æí
 (
s
) \

1519 : ((
ªje˘
)[1] == '\0' \

1520 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1521 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1522 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1524 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1526 #i‚de‡
_FORCE_INLINES


1527 
__STRING_INLINE
 
size_t


1528 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1530 
__d0
;

1531 *
__ªs
;

1532 
__asm__
 
__vﬁ©ûe__


1541 : "Ù" (
__ªs
), "=&a" (
__d0
)

1542 : "0" (
__s
), "1" (
__ªje˘
),

1543 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1545  (
__ªs
 - 1Ë- 
__s
;

1546 
	}
}

1549 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1550 
size_t
 
__ªje˘_Àn
);

1552 
__STRING_INLINE
 
size_t


1553 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1555 
__d0
, 
__d1
, 
__d2
;

1556 c⁄° *
__ªs
;

1557 
__asm__
 
__vﬁ©ûe__


1568 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1569 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1571  (
__ªs
 - 1Ë- 
__s
;

1572 
	}
}

1574 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1575 #ifde‡
__PIC__


1577 
__STRING_INLINE
 
size_t


1578 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1580 
__d0
, 
__d1
, 
__d2
;

1581 c⁄° *
__ªs
;

1582 
__asm__
 
__vﬁ©ûe__


1599 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1600 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1602  (
__ªs
 - 1Ë- 
__s
;

1603 
	}
}

1605 
__STRING_INLINE
 
size_t


1606 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1608 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1609 c⁄° *
__ªs
;

1610 
__asm__
 
__vﬁ©ûe__


1624 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1625 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1628  (
__ªs
 - 1Ë- 
__s
;

1629 
	}
}

1635 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1636 
	#°r•n
(
s
, 
ac˚±
) \

1637 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1638 ? ((
ac˚±
)[0] == '\0' \

1639 ? ((Ë(
s
), 0) \

1640 : ((
ac˚±
)[1] == '\0' \

1641 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1642 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1643 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1645 #i‚de‡
_FORCE_INLINES


1646 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1648 
__STRING_INLINE
 
size_t


1649 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1651 
__d0
;

1652 *
__ªs
;

1654 
__asm__
 
__vﬁ©ûe__


1660 : "Ù" (
__ªs
), "=&q" (
__d0
)

1661 : "0" (
__s
), "1" (
__ac˚±
),

1662 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1664  (
__ªs
 - 1Ë- 
__s
;

1665 
	}
}

1668 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1669 
size_t
 
__ac˚±_Àn
);

1671 
__STRING_INLINE
 
size_t


1672 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1674 
__d0
, 
__d1
, 
__d2
;

1675 c⁄° *
__ªs
;

1676 
__asm__
 
__vﬁ©ûe__


1687 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1688 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1691 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1692 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1694  (
__ªs
 - 1Ë- 
__s
;

1695 
	}
}

1697 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1698 #ifde‡
__PIC__


1700 
__STRING_INLINE
 
size_t


1701 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1703 
__d0
, 
__d1
, 
__d2
;

1704 c⁄° *
__ªs
;

1705 
__asm__
 
__vﬁ©ûe__


1721 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1722 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1724  (
__ªs
 - 1Ë- 
__s
;

1725 
	}
}

1727 
__STRING_INLINE
 
size_t


1728 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1730 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1731 c⁄° *
__ªs
;

1732 
__asm__
 
__vﬁ©ûe__


1746 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1747 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1749  (
__ªs
 - 1Ë- 
__s
;

1750 
	}
}

1755 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1756 
	#°Ωbrk
(
s
, 
ac˚±
) \

1757 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1758 ? ((
ac˚±
)[0] == '\0' \

1759 ? ((Ë(
s
), (*) 0) \

1760 : ((
ac˚±
)[1] == '\0' \

1761 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1762 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1763 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1765 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1766 
size_t
 
__ac˚±_Àn
);

1768 
__STRING_INLINE
 *

1769 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1771 
__d0
, 
__d1
, 
__d2
;

1772 *
__ªs
;

1773 
__asm__
 
__vﬁ©ûe__


1788 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1789 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1791  
__ªs
;

1792 
	}
}

1794 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1795 #ifde‡
__PIC__


1797 
__STRING_INLINE
 *

1798 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1800 
__d0
, 
__d1
, 
__d2
;

1801 *
__ªs
;

1802 
__asm__
 
__vﬁ©ûe__


1823 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1824 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1826  
__ªs
;

1827 
	}
}

1829 
__STRING_INLINE
 *

1830 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1832 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1833 *
__ªs
;

1834 
__asm__
 
__vﬁ©ûe__


1853 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1854 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1856  
__ªs
;

1857 
	}
}

1862 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1863 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1864 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1865 ? ((
√edÀ
)[0] == '\0' \

1866 ? (
hay°ack
) \

1867 : ((
√edÀ
)[1] == '\0' \

1868 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1869 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1870 
	`°æí
 (
√edÀ
)))) \

1871 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1875 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1876 c⁄° 
__√edÀ
[],

1877 
size_t
 
__√edÀ_Àn
);

1879 
__STRING_INLINE
 *

1880 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1881 
size_t
 
__√edÀ_Àn
)

1883 
__d0
, 
__d1
, 
__d2
;

1884 *
__ªs
;

1885 
__asm__
 
__vﬁ©ûe__


1898 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1899 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1901  
__ªs
;

1902 
	}
}

1904 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1905 c⁄° *
__√edÀ
);

1906 #ifde‡
__PIC__


1908 
__STRING_INLINE
 *

1909 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1911 
__d0
, 
__d1
, 
__d2
;

1912 *
__ªs
;

1913 
__asm__
 
__vﬁ©ûe__


1932 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1933 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1934 "d" (
__√edÀ
)

1936  
__ªs
;

1937 
	}
}

1939 
__STRING_INLINE
 *

1940 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1942 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1943 *
__ªs
;

1944 
__asm__
 
__vﬁ©ûe__


1961 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1962 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1963 "b" (
__√edÀ
)

1965  
__ªs
;

1966 
	}
}

1972 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1973 #ifde‡
__i686__


1974 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1975 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1976 ? 
	`__buûtö_ffs
 (
w‹d
) \

1977 : ({ 
__˙t
, 
__tmp
; \

1978 
__asm__
 
__vﬁ©ûe__
 \

1981 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1982 : "rm" (
w‹d
), "1" (-1)); \

1983 
__˙t
 + 1; }))

	)

1985 #i‚de‡
ff¶


1986 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1991 #i‚de‡
_FORCE_INLINES


1992 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‚de‡
__NO_STRING_INLINES


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

49 #i‡
_STRING_INLINE_u«lig√d


51 
	~<ídün.h
>

52 
	~<bôs/ty≥s.h
>

54 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

56 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

57 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

65 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

66 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

68 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

69 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

70 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

71 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 °ru˘ { 
__¨r
[
N
]; } \

78 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #unde‡
__STRING2_COPY_TYPE


92 
	#__°rög2_1b±r_p
(
__x
) \

93 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

96 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


97 #i‡!
__GNUC_PREREQ
 (3, 0)

98 #i‡
_STRING_INLINE_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #i‡
__GNUC_PREREQ
 (2, 91)

194 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

202 #ifde‡
__USE_GNU


203 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


204 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


205 #i‡
__GNUC_PREREQ
 (3, 4)

206 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

207 #ñi‡
__GNUC_PREREQ
 (3, 0)

208 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

209 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

210 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

211 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

212 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

214 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

215 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

216 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

217 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

218 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

222 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

225 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


226 #i‡
_STRING_INLINE_u«lig√d


227 #i‚de‡
_FORCE_INLINES


228 
	#__memp˝y_¨gs
(
§c
) \

229 ((c⁄° *Ë(
§c
))[0], ((const *) (src))[2], \

230 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[6], \

231 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

236 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

237 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

238 
__uöt32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__memp˝y_smÆl
 (*
__de°1
,

241 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

242 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

243 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

244 
size_t
 
__§˛í
)

247 
__uöt32_t
 
__ui
;

248 
__uöt16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de°1
;

252 (Ë
__§˛í
)

255 
__u
->
__c
 = 
__§c0_1
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__§c0_2
;

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__§c2_1
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__§c0_4
;

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__§c4_1
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__§c0_4
;

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__§c4_2
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__§c0_4
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__§c4_2
;

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__§c6_1
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__§c0_4
;

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__§c4_4
;

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

299  (*Ë
__u
;

300 
	}
}

302 #i‚de‡
_FORCE_INLINES


303 
	#__memp˝y_¨gs
(
§c
) \

304 ((c⁄° *Ë(
§c
))[0], \

305 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1] } }), \

307 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

309 ((c⁄° *Ë(
§c
))[2] } }), \

310 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

312 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

315 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

316 ((c⁄° *Ë(
§c
))[4] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

319 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

320 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5] } }), \

321 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

323 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

324 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

325 ((c⁄° *Ë(
§c
))[6] } }), \

326 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

328 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

329 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

330 ((c⁄° *Ë(
§c
))[6], ((c⁄° *Ë(§c))[7] } })

	)

332 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

341 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

342 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

343 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

344 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sˇ2
;

349 
__STRING2_COPY_ARR3
 
__sˇ3
;

350 
__STRING2_COPY_ARR4
 
__sˇ4
;

351 
__STRING2_COPY_ARR5
 
__sˇ5
;

352 
__STRING2_COPY_ARR6
 
__sˇ6
;

353 
__STRING2_COPY_ARR7
 
__sˇ7
;

354 
__STRING2_COPY_ARR8
 
__sˇ8
;

355 } *
__u
 = 
__de°
;

356 (Ë
__§˛í
)

359 
__u
->
__c
 = 
__§c1
;

362 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

365 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

368 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

371 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

374 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

377 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

380 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

383  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

384 
	}
}

392 #i‚de‡
_HAVE_STRING_ARCH_°rchr


393 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

394 #i‡
__GNUC_PREREQ
 (3, 2)

395 
	#°rchr
(
s
, 
c
) \

396 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

397 && (
c
) == '\0' \

398 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

399 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

401 
	#°rchr
(
s
, 
c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

403 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

404 : 
	`°rchr
 (
s
, 
c
)))

	)

410 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
deföed
 
	g_FORCE_INLINES


412 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#°r˝y
(
de°
, 
§c
) \

414 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

415 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

416 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

417 
	`°æí
 (
§c
) + 1) \

418 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

419 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

422 #i‡
_STRING_INLINE_u«lig√d


423 #i‚de‡
_FORCE_INLINES


424 
	#__°r˝y_¨gs
(
§c
) \

425 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

430 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

431 
__uöt32_t
, __uöt32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__°r˝y_smÆl
 (*
__de°
,

434 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

435 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

436 
size_t
 
__§˛í
)

439 
__uöt32_t
 
__ui
;

440 
__uöt16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*Ë
__de°
;

443 (Ë
__§˛í
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__§c0_2
;

452 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__§c0_4
;

460 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__§c4_2
;

470 
__u
->
__ui
 = 
__§c0_4
;

471 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__§c4_2
;

473 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__§c0_4
;

478 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__§c4_4
;

482  
__de°
;

483 
	}
}

485 #i‚de‡
_FORCE_INLINES


486 
	#__°r˝y_¨gs
(
§c
) \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

489 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

492 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

494 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

495 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

497 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

499 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

501 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

502 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

503 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

505 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

506 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

508 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

510 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

511 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

512 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__°r˝y_smÆl
 (*
__de°
,

523 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

524 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

525 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

526 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sˇ2
;

531 
__STRING2_COPY_ARR3
 
__sˇ3
;

532 
__STRING2_COPY_ARR4
 
__sˇ4
;

533 
__STRING2_COPY_ARR5
 
__sˇ5
;

534 
__STRING2_COPY_ARR6
 
__sˇ6
;

535 
__STRING2_COPY_ARR7
 
__sˇ7
;

536 
__STRING2_COPY_ARR8
 
__sˇ8
;

537 } *
__u
 = (*Ë
__de°
;

538 (Ë
__§˛í
)

541 
__u
->
__c
 = '\0';

544 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

547 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

550 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

553 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

556 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

559 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

562 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

565  
__de°
;

566 
	}
}

572 #ifde‡
__USE_GNU


573 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


574 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


575 #i‡
__GNUC_PREREQ
 (3, 4)

576 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

577 #ñi‡
__GNUC_PREREQ
 (3, 0)

578 
	#__°p˝y
(
de°
, 
§c
) \

579 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

580 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

581 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

582 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

584 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

586 
	#__°p˝y
(
de°
, 
§c
) \

587 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

588 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

589 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

590 
	`°æí
 (
§c
) + 1) \

591 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

593 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

597 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

600 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


601 #i‡
_STRING_INLINE_u«lig√d


602 #i‚de‡
_FORCE_INLINES


603 
	#__°p˝y_¨gs
(
§c
) \

604 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

609 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

610 
__uöt32_t
, __uöt32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__°p˝y_smÆl
 (*
__de°
,

613 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

614 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

615 
size_t
 
__§˛í
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*Ë
__de°
;

623 (Ë
__§˛í
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__§c0_2
;

630 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__§c0_2
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__§c0_4
;

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__§c0_4
;

643 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__§c0_4
;

648 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__§c4_2
;

650 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__§c0_4
;

654 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__§c4_2
;

656 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__§c0_4
;

661 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__§c4_4
;

663 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #i‚de‡
_FORCE_INLINES


670 
	#__°p˝y_¨gs
(
§c
) \

671 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

676 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

678 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

679 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

681 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

683 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

685 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

686 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

687 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

689 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

690 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

692 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

694 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

695 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

696 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__°p˝y_smÆl
 (*
__de°
,

707 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

708 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

709 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

710 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sˇ2
;

715 
__STRING2_COPY_ARR3
 
__sˇ3
;

716 
__STRING2_COPY_ARR4
 
__sˇ4
;

717 
__STRING2_COPY_ARR5
 
__sˇ5
;

718 
__STRING2_COPY_ARR6
 
__sˇ6
;

719 
__STRING2_COPY_ARR7
 
__sˇ7
;

720 
__STRING2_COPY_ARR8
 
__sˇ8
;

721 } *
__u
 = (*Ë
__de°
;

722 (Ë
__§˛í
)

725 
__u
->
__c
 = '\0';

728 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

731 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

734 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

737 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

740 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

743 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

746 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

749  
__de°
 + 
__§˛í
 - 1;

750 
	}
}

758 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


759 #i‡
__GNUC_PREREQ
 (3, 2)

760 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

762 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

763 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

764 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

765 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

766 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

773 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


774 #ifde‡
_USE_STRING_ARCH_°rchr


775 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

776 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

777 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

778 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

779 ? 
	`°rˇt
 (
__de°
, 
§c
) \

780 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

781 
§c
, 
n
)Ë'\0', 
__de°
)) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

783 #ñi‡
__GNUC_PREREQ
 (3, 2)

784 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

786 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

787 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

788 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

789 ? 
	`°rˇt
 (
de°
, 
§c
) \

790 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

797 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


798 #i‡
__GNUC_PREREQ
 (3, 2)

799 
	#°rcmp
(
s1
, 
s2
) \

800 
__exãnsi⁄__
 \

801 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

802 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

803 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), 
__s2_Àn
 = __buûtö_°æí (
s2
), \

804 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

805 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

806 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

807 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

808 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), __s1_len < 4) \

809 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

810 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

811 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

812 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

813 && (
__s2_Àn
 = 
	`__buûtö_°æí
 (
s2
), __s2_len < 4) \

814 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

815 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

816 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

817 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#°rcmp
(
s1
, 
s2
) \

820 
__exãnsi⁄__
 \

821 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

822 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

823 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

824 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

825 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

826 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

827 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

829 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

830 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

831 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

832 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

833 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

834 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

835 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

836 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

837 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

838 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

843 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

844 - ((c⁄° *Ë(c⁄° *)(
s2
))[0]); \

845 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

847 
__ªsu…
 = (((const *) \

848 (c⁄° *Ë(
s1
))[1] \

850 (c⁄° *Ë(
s2
))[1]); \

851 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = \

855 (c⁄° *Ë(
s1
))[2] \

857 (c⁄° *Ë(
s2
))[2]); \

858 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

859 
__ªsu…
 = \

861 (c⁄° *Ë(
s1
))[3] \

863 (c⁄° *Ë(
s2
))[3]); \

866 
__ªsu…
; }))

	)

868 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

870 (c⁄° *Ë(c⁄° *Ë(
s2
); \

871 
__ªsu…
 = \

872 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

873 - 
__s2
[0]); \

874 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

876 
__ªsu…
 = (((const *) \

877 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

878 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

880 
__ªsu…
 = (((const *) \

881 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

882 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

883 
__ªsu…
 = (((const *) \

884 (c⁄° *Ë(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__ªsu…
; }))

	)

890 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
Ë(- 
	`__°rcmp_cg
 (s2, s1,Ü2))

	)

895 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


896 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

897 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

898 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

899 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

900 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

901 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

902 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

908 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


909 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


910 #i‡
__GNUC_PREREQ
 (3, 2)

911 
	#°rc•n
(
s
, 
ªje˘
) \

912 
__exãnsi⁄__
 \

913 ({ 
__r0
, 
__r1
, 
__r2
; \

914 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

915 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

916 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

917 : ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

918 ? 
	`°æí
 (
s
) \

919 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

920 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

921 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

922 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

923 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

924 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

925 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

926 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

928 
	#°rc•n
(
s
, 
ªje˘
) \

929 
__exãnsi⁄__
 \

930 ({ 
__r0
, 
__r1
, 
__r2
; \

931 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

932 ? ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

933 ? 
	`°æí
 (
s
) \

934 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

935 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

936 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

937 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

938 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

939 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

940 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

941 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

945 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

946 
__STRING_INLINE
 
size_t


947 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

949 
size_t
 
__ªsu…
 = 0;

950 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

951 ++
__ªsu…
;

952  
__ªsu…
;

953 
	}
}

955 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
,

956 
__ªje˘2
);

957 
__STRING_INLINE
 
size_t


958 
	$__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
)

960 
size_t
 
__ªsu…
 = 0;

961 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


962 && 
__s
[
__ªsu…
] !
__ªje˘2
)

963 ++
__ªsu…
;

964  
__ªsu…
;

965 
	}
}

967 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
,

968 
__ªje˘2
, 
__ªje˘3
);

969 
__STRING_INLINE
 
size_t


970 
	$__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
,

971 
__ªje˘3
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


975 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

976 ++
__ªsu…
;

977  
__ªsu…
;

978 
	}
}

984 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


985 #i‚de‡
_HAVE_STRING_ARCH_°r•n


986 #i‡
__GNUC_PREREQ
 (3, 2)

987 
	#°r•n
(
s
, 
ac˚±
) \

988 
__exãnsi⁄__
 \

989 ({ 
__a0
, 
__a1
, 
__a2
; \

990 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

991 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

992 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

993 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

994 ? ((Ë(
s
), (
size_t
) 0) \

995 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

996 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

997 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

998 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

999 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1000 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1001 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1002 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1004 
	#°r•n
(
s
, 
ac˚±
) \

1005 
__exãnsi⁄__
 \

1006 ({ 
__a0
, 
__a1
, 
__a2
; \

1007 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1008 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1009 ? ((Ë(
s
), (
size_t
) 0) \

1010 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1011 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1012 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1013 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1014 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1015 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1016 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1017 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1021 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1022 
__STRING_INLINE
 
size_t


1023 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1025 
size_t
 
__ªsu…
 = 0;

1027 
__s
[
__ªsu…
] =
__ac˚±
)

1028 ++
__ªsu…
;

1029  
__ªsu…
;

1030 
	}
}

1032 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1033 
__ac˚±2
);

1034 
__STRING_INLINE
 
size_t


1035 
	$__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1037 
size_t
 
__ªsu…
 = 0;

1039 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1040 ++
__ªsu…
;

1041  
__ªsu…
;

1042 
	}
}

1044 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1045 
__ac˚±2
, 
__ac˚±3
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1052 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1053 ++
__ªsu…
;

1054  
__ªsu…
;

1055 
	}
}

1060 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1061 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1062 #i‡
__GNUC_PREREQ
 (3, 2)

1063 
	#°Ωbrk
(
s
, 
ac˚±
) \

1064 
__exãnsi⁄__
 \

1065 ({ 
__a0
, 
__a1
, 
__a2
; \

1066 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1067 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1068 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1069 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1070 ? ((Ë(
s
), (*Ë
NULL
) \

1071 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1072 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1073 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1074 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1075 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1076 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1077 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1078 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1080 
	#°Ωbrk
(
s
, 
ac˚±
) \

1081 
__exãnsi⁄__
 \

1082 ({ 
__a0
, 
__a1
, 
__a2
; \

1083 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1084 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1085 ? ((Ë(
s
), (*Ë
NULL
) \

1086 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1087 ? 
	`°rchr
 (
s
, 
__a0
) \

1088 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1089 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1090 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1091 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1092 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1093 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1097 
__STRING_INLINE
 *
__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1098 
__ac˚±2
);

1099 
__STRING_INLINE
 *

1100 
	$__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1103 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1104 ++
__s
;

1105  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1106 
	}
}

1108 
__STRING_INLINE
 *
__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1109 
__ac˚±2
, 
__ac˚±3
);

1110 
__STRING_INLINE
 *

1111 
	$__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1114 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1115 && *
__s
 !
__ac˚±3
)

1116 ++
__s
;

1117  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1118 
	}
}

1124 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1125 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1126 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1127 ? (((c⁄° *Ë(
√edÀ
))[0] == '\0' \

1128 ? (*Ë(
size_t
Ë(
hay°ack
) \

1129 : (((c⁄° *Ë(
√edÀ
))[1] == '\0' \

1130 ? 
	`°rchr
 (
hay°ack
, \

1131 ((c⁄° *Ë(
√edÀ
))[0]) \

1132 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1133 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1137 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1138 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1139 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1140 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1141 && ((c⁄° *Ë(
£p
))[0] != '\0' \

1142 && ((c⁄° *Ë(
£p
))[1] == '\0' \

1143 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

1144 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1147 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1148 
__STRING_INLINE
 *

1149 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1151 *
__ªsu…
;

1152 i‡(
__s
 =
NULL
)

1153 
__s
 = *
__√xç
;

1154 *
__s
 =
__£p
)

1155 ++
__s
;

1156 
__ªsu…
 = 
NULL
;

1157 i‡(*
__s
 != '\0')

1159 
__ªsu…
 = 
__s
++;

1160 *
__s
 != '\0')

1161 i‡(*
__s
++ =
__£p
)

1163 
__s
[-1] = '\0';

1167 *
__√xç
 = 
__s
;

1168  
__ªsu…
;

1169 
	}
}

1170 #ifde‡
__USE_POSIX


1171 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1176 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1177 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1179 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

1180 
	#__°r£p
(
s
, 
ªje˘
) \

1181 
__exãnsi⁄__
 \

1182 ({ 
__r0
, 
__r1
, 
__r2
; \

1183 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1184 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

1185 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

1186 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

1187 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

1188 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1189 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

1190 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1191 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

1192 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1193 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1194 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1197 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1198 
__STRING_INLINE
 *

1199 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1201 *
__ªtvÆ
 = *
__s
;

1202 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1203 *(*
__s
)++ = '\0';

1204  
__ªtvÆ
;

1205 
	}
}

1207 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1208 
__STRING_INLINE
 *

1209 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1211 *
__ªtvÆ
 = *
__s
;

1212 i‡(
__ªtvÆ
 !
NULL
)

1214 *
__˝
 = 
__ªtvÆ
;

1217 i‡(*
__˝
 == '\0')

1219 
__˝
 = 
NULL
;

1222 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1224 *
__˝
++ = '\0';

1227 ++
__˝
;

1229 *
__s
 = 
__˝
;

1231  
__ªtvÆ
;

1232 
	}
}

1234 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1235 
__ªje˘3
);

1236 
__STRING_INLINE
 *

1237 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1239 *
__ªtvÆ
 = *
__s
;

1240 i‡(
__ªtvÆ
 !
NULL
)

1242 *
__˝
 = 
__ªtvÆ
;

1245 i‡(*
__˝
 == '\0')

1247 
__˝
 = 
NULL
;

1250 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1252 *
__˝
++ = '\0';

1255 ++
__˝
;

1257 *
__s
 = 
__˝
;

1259  
__ªtvÆ
;

1260 
	}
}

1261 #ifde‡
__USE_MISC


1262 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1269 #ifde‡
__USE_MISC


1271 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1272 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1273 
	~<°dlib.h
>

1276 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1278 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1279 
	#__°rdup
(
s
) \

1280 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1281 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1282 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1283 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1284 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1285 i‡(
__ªtvÆ
 !
NULL
) \

1286 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1287 
__ªtvÆ
; 
	}
})) \

1288 : 
	`__°rdup
 (
s
)))

	)

1290 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1291 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1295 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1297 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

1298 
__THROW
 
__©åibuã_mÆloc__
;

1299 
	#__°∫dup
(
s
, 
n
) \

1300 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1301 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1302 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1303 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1304 
size_t
 
__n
 = (
n
); \

1305 *
__ªtvÆ
; \

1306 i‡(
__n
 < 
__Àn
) \

1307 
__Àn
 = 
__n
 + 1; \

1308 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1309 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1312 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1313 
__Àn
 - 1); \

1315 
__ªtvÆ
; 
	}
})) \

1316 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1318 #ifde‡
__USE_XOPEN2K8


1319 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1325 #i‚de‡
_FORCE_INLINES


1326 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 #i‡!
__GNUC_PREREQ
 (5,0)

23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

27 #i‚de‡
__˝lu•lus


31 #unde‡
mem˝y


32 #unde‡
memmove


33 #unde‡
mem£t


34 #unde‡
°rˇt


35 #unde‡
°r˝y


36 #unde‡
°∫ˇt


37 #unde‡
°∫˝y


38 #ifde‡
__USE_GNU


39 #unde‡
memp˝y


40 #unde‡
°p˝y


42 #ifde‡
__USE_MISC


43 #unde‡
bc›y


44 #unde‡
bzîo


49 
__f‹tify_fun˘i⁄
 *

50 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

51 
size_t
 
__Àn
))

53  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

54 
	}
}

56 
__f‹tify_fun˘i⁄
 *

57 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

59  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

60 
	}
}

62 #ifde‡
__USE_GNU


63 
__f‹tify_fun˘i⁄
 *

64 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

65 
size_t
 
__Àn
))

67  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

68 
	}
}

77 
__f‹tify_fun˘i⁄
 *

78 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

82 #i‡!
	`__GNUC_PREREQ
 (5,0)

83 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

84 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

86 
	`__w¨n_mem£t_zîo_Àn
 ();

87  
__de°
;

90  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

91 
	}
}

93 #ifde‡
__USE_MISC


94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

100 
__f‹tify_fun˘i⁄
 

101 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

103 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

104 
	}
}

107 
__f‹tify_fun˘i⁄
 *

108 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

110  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

111 
	}
}

113 #ifde‡
__USE_GNU


114 
__f‹tify_fun˘i⁄
 *

115 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

117  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

118 
	}
}

122 
__f‹tify_fun˘i⁄
 *

123 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

124 
size_t
 
__Àn
))

126  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

127 
	}
}

130 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

131 
size_t
 
__de°Àn
Ë
__THROW
;

132 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

133 
size_t
 
__n
), 
°≤˝y
);

135 
__f‹tify_fun˘i⁄
 *

136 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

138 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

139 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿> 
	`__bos
 (
__de°
)))

140  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

141  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

142 
	}
}

145 
__f‹tify_fun˘i⁄
 *

146 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

148  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

149 
	}
}

152 
__f‹tify_fun˘i⁄
 *

153 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

154 
size_t
 
__Àn
))

156  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

157 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_MISC


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 ((
˛ock_t
Ë1000000)

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

81 
	#CLOCK_TAI
 11

	)

84 
	#TIMER_ABSTIME
 1

	)

87 #ifde‡
__USE_GNU


88 
	~<bôs/timex.h
>

90 
__BEGIN_DECLS


93 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

95 
__END_DECLS


101 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #i‡
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

107 #ñi‡
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bôs/ty≥sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ˇddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

192 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

40 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


41 #i‚de‡
__ENUM_IDTYPE_T


42 
	#__ENUM_IDTYPE_T
 1

	)

46 #unde‡
P_ALL


47 #unde‡
P_PID


48 #unde‡
P_PGID


52 
	mP_ALL
,

53 
	mP_PID
,

54 
	mP_PGID


55 } 
	tidty≥_t
;

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_MISC


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


152 #unde‡
_DEFAULT_SOURCE


153 
	#_DEFAULT_SOURCE
 1

	)

157 #ifde‡
_GNU_SOURCE


158 #unde‡
_ISOC95_SOURCE


159 
	#_ISOC95_SOURCE
 1

	)

160 #unde‡
_ISOC99_SOURCE


161 
	#_ISOC99_SOURCE
 1

	)

162 #unde‡
_ISOC11_SOURCE


163 
	#_ISOC11_SOURCE
 1

	)

164 #unde‡
_POSIX_SOURCE


165 
	#_POSIX_SOURCE
 1

	)

166 #unde‡
_POSIX_C_SOURCE


167 
	#_POSIX_C_SOURCE
 200809L

	)

168 #unde‡
_XOPEN_SOURCE


169 
	#_XOPEN_SOURCE
 700

	)

170 #unde‡
_XOPEN_SOURCE_EXTENDED


171 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

172 #unde‡
_LARGEFILE64_SOURCE


173 
	#_LARGEFILE64_SOURCE
 1

	)

174 #unde‡
_DEFAULT_SOURCE


175 
	#_DEFAULT_SOURCE
 1

	)

176 #unde‡
_ATFILE_SOURCE


177 
	#_ATFILE_SOURCE
 1

	)

182 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

183 || (!
deföed
 
	g__STRICT_ANSI__
 \

184 && !
deföed
 
	g_ISOC99_SOURCE
 \

185 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

186 && !
deföed
 
	g_XOPEN_SOURCE
))

187 #unde‡
_DEFAULT_SOURCE


188 
	#_DEFAULT_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC11_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

194 
	#__USE_ISOC11
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

200 
	#__USE_ISOC99
 1

	)

204 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

205 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

206 
	#__USE_ISOC95
 1

	)

213 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

214 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

215 
	#__USE_ISOCXX11
 1

	)

221 #ifde‡
_DEFAULT_SOURCE


222 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


223 
	#__USE_POSIX_IMPLICITLY
 1

	)

225 #unde‡
_POSIX_SOURCE


226 
	#_POSIX_SOURCE
 1

	)

227 #unde‡
_POSIX_C_SOURCE


228 
	#_POSIX_C_SOURCE
 200809L

	)

230 #i‡((!
deföed
 
__STRICT_ANSI__
 \

231 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

232 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

233 
	#_POSIX_SOURCE
 1

	)

234 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

235 
	#_POSIX_C_SOURCE
 2

	)

236 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

237 
	#_POSIX_C_SOURCE
 199506L

	)

238 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

239 
	#_POSIX_C_SOURCE
 200112L

	)

241 
	#_POSIX_C_SOURCE
 200809L

	)

243 
	#__USE_POSIX_IMPLICITLY
 1

	)

246 #i‡(
deföed
 
_POSIX_SOURCE
 \

247 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

248 || 
deföed
 
_XOPEN_SOURCE
)

249 
	#__USE_POSIX
 1

	)

252 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


253 
	#__USE_POSIX2
 1

	)

256 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

257 
	#__USE_POSIX199309
 1

	)

260 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

261 
	#__USE_POSIX199506
 1

	)

264 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

265 
	#__USE_XOPEN2K
 1

	)

266 #unde‡
__USE_ISOC95


267 
	#__USE_ISOC95
 1

	)

268 #unde‡
__USE_ISOC99


269 
	#__USE_ISOC99
 1

	)

272 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

273 
	#__USE_XOPEN2K8
 1

	)

274 #unde‡
_ATFILE_SOURCE


275 
	#_ATFILE_SOURCE
 1

	)

278 #ifdef 
_XOPEN_SOURCE


279 
	#__USE_XOPEN
 1

	)

280 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

281 
	#__USE_XOPEN_EXTENDED
 1

	)

282 
	#__USE_UNIX98
 1

	)

283 #unde‡
_LARGEFILE_SOURCE


284 
	#_LARGEFILE_SOURCE
 1

	)

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

286 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

287 
	#__USE_XOPEN2K8
 1

	)

288 
	#__USE_XOPEN2K8XSI
 1

	)

290 
	#__USE_XOPEN2K
 1

	)

291 
	#__USE_XOPEN2KXSI
 1

	)

292 #unde‡
__USE_ISOC95


293 
	#__USE_ISOC95
 1

	)

294 #unde‡
__USE_ISOC99


295 
	#__USE_ISOC99
 1

	)

298 #ifde‡
_XOPEN_SOURCE_EXTENDED


299 
	#__USE_XOPEN_EXTENDED
 1

	)

304 #ifde‡
_LARGEFILE_SOURCE


305 
	#__USE_LARGEFILE
 1

	)

308 #ifde‡
_LARGEFILE64_SOURCE


309 
	#__USE_LARGEFILE64
 1

	)

312 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

313 
	#__USE_FILE_OFFSET64
 1

	)

316 #i‡
deföed
 
_DEFAULT_SOURCE


317 
	#__USE_MISC
 1

	)

320 #ifdef 
_ATFILE_SOURCE


321 
	#__USE_ATFILE
 1

	)

324 #ifdef 
_GNU_SOURCE


325 
	#__USE_GNU
 1

	)

328 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


329 
	#__USE_REENTRANT
 1

	)

332 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

333 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

334 #i‡
_FORTIFY_SOURCE
 > 1

335 
	#__USE_FORTIFY_LEVEL
 2

	)

337 
	#__USE_FORTIFY_LEVEL
 1

	)

340 
	#__USE_FORTIFY_LEVEL
 0

	)

345 
	~<°dc-¥edef.h
>

353 #unde‡
__GNU_LIBRARY__


354 
	#__GNU_LIBRARY__
 6

	)

358 
	#__GLIBC__
 2

	)

359 
	#__GLIBC_MINOR__
 23

	)

361 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

362 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

365 #i‚de‡
__ASSEMBLER__


366 #i‚de‡
_SYS_CDEFS_H


367 
	~<sys/cdefs.h
>

372 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


373 
	#__USE_LARGEFILE
 1

	)

374 
	#__USE_LARGEFILE64
 1

	)

380 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

381 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

382 && 
deföed
 
	g__exã∫_ölöe


383 
	#__USE_EXTERN_INLINES
 1

	)

391 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


150 
	t_IO_lock_t
;

156 
	s_IO_m¨kî
 {

157 
_IO_m¨kî
 *
	m_√xt
;

158 
_IO_FILE
 *
	m_sbuf
;

162 
	m_pos
;

164 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

165 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

166 
	mpublic
:

167 
°ªamm¨kî
(
°ªambuf
 *
sb
);

168 ~
°ªamm¨kî
();

169 
ßvög
(Ë{  
	m_•os
 == -2; }

170 
dñè
(
°ªamm¨kî
&);

171 
dñè
();

176 
	e__codecvt_ªsu…


178 
	m__codecvt_ok
,

179 
	m__codecvt_∑πül
,

180 
	m__codecvt_îr‹
,

181 
	m__codecvt_noc⁄v


184 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


187 
	s_IO_codecvt


189 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

190 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

191 
	m__mb°©e_t
 *,

192 c⁄° 
	mwch¨_t
 *,

193 c⁄° 
	mwch¨_t
 *,

194 c⁄° 
	mwch¨_t
 **, *,

196 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

197 
	m__mb°©e_t
 *, *,

199 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

200 
	m__mb°©e_t
 *,

202 c⁄° **, 
	mwch¨_t
 *,

203 
	mwch¨_t
 *, wchar_t **);

204 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

205 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

206 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

207 c⁄° *, c⁄° *, 
	m_IO_size_t
);

208 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

210 
_IO_ic⁄v_t
 
	m__cd_ö
;

211 
_IO_ic⁄v_t
 
	m__cd_out
;

215 
	s_IO_wide_d©a


217 
wch¨_t
 *
	m_IO_ªad_±r
;

218 
wch¨_t
 *
	m_IO_ªad_íd
;

219 
wch¨_t
 *
	m_IO_ªad_ba£
;

220 
wch¨_t
 *
	m_IO_wrôe_ba£
;

221 
wch¨_t
 *
	m_IO_wrôe_±r
;

222 
wch¨_t
 *
	m_IO_wrôe_íd
;

223 
wch¨_t
 *
	m_IO_buf_ba£
;

224 
wch¨_t
 *
	m_IO_buf_íd
;

226 
wch¨_t
 *
	m_IO_ßve_ba£
;

227 
wch¨_t
 *
	m_IO_backup_ba£
;

229 
wch¨_t
 *
	m_IO_ßve_íd
;

231 
__mb°©e_t
 
	m_IO_°©e
;

232 
__mb°©e_t
 
	m_IO_œ°_°©e
;

233 
_IO_codecvt
 
	m_codecvt
;

235 
wch¨_t
 
	m_sh‹tbuf
[1];

237 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

241 
	s_IO_FILE
 {

242 
	m_Êags
;

243 
	#_IO_fûe_Êags
 
_Êags


	)

247 * 
	m_IO_ªad_±r
;

248 * 
	m_IO_ªad_íd
;

249 * 
	m_IO_ªad_ba£
;

250 * 
	m_IO_wrôe_ba£
;

251 * 
	m_IO_wrôe_±r
;

252 * 
	m_IO_wrôe_íd
;

253 * 
	m_IO_buf_ba£
;

254 * 
	m_IO_buf_íd
;

256 *
	m_IO_ßve_ba£
;

257 *
	m_IO_backup_ba£
;

258 *
	m_IO_ßve_íd
;

260 
_IO_m¨kî
 *
	m_m¨kîs
;

262 
_IO_FILE
 *
	m_chaö
;

264 
	m_fûío
;

266 
	m_blksize
;

268 
	m_Êags2
;

270 
_IO_off_t
 
	m_ﬁd_off£t
;

272 
	#__HAVE_COLUMN


	)

274 
	m_cur_cﬁumn
;

275 sig√d 
	m_vèbÀ_off£t
;

276 
	m_sh‹tbuf
[1];

280 
_IO_lock_t
 *
	m_lock
;

281 #ifde‡
_IO_USE_OLD_IO_FILE


284 
	s_IO_FILE_com∂ëe


286 
_IO_FILE
 
	m_fûe
;

288 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

289 
_IO_off64_t
 
	m_off£t
;

290 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


292 
_IO_codecvt
 *
	m_codecvt
;

293 
_IO_wide_d©a
 *
	m_wide_d©a
;

294 
_IO_FILE
 *
	m_‰ìªs_li°
;

295 *
	m_‰ìªs_buf
;

297 *
	m__∑d1
;

298 *
	m__∑d2
;

299 *
	m__∑d3
;

300 *
	m__∑d4
;

302 
size_t
 
	m__∑d5
;

303 
	m_mode
;

305 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

309 #i‚de‡
__˝lu•lus


310 
_IO_FILE
 
	t_IO_FILE
;

313 
	g_IO_FILE_∂us
;

315 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

316 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

317 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

318 #i‚de‡
_LIBC


319 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

320 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

321 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

323 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

324 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

325 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

333 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

341 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

342 
	tsize_t
 
	t__n
);

350 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

353 
	t__io_˛o£_‚
 (*
	t__cookõ
);

356 #ifde‡
_GNU_SOURCE


358 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

359 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

360 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

361 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

366 
__io_ªad_‚
 *
	mªad
;

367 
__io_wrôe_‚
 *
	mwrôe
;

368 
__io_£ek_‚
 *
	m£ek
;

369 
__io_˛o£_‚
 *
	m˛o£
;

370 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

371 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

373 
	g_IO_cookõ_fûe
;

376 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

377 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

381 #ifde‡
__˝lu•lus


385 
__undîÊow
 (
_IO_FILE
 *);

386 
__uÊow
 (
_IO_FILE
 *);

387 
__ovîÊow
 (
_IO_FILE
 *, );

388 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


389 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

390 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

391 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

394 #i‡ 
__GNUC__
 >= 3

395 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

397 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

400 
	#_IO_gëc_u∆ocked
(
_Â
) \

401 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

402 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

403 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

404 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

405 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

406 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

407 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

408 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

409 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

410 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

412 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


413 
	#_IO_gëwc_u∆ocked
(
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

415 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

416 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

417 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

418 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

422 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

423 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

426 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

427 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

429 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

430 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

431 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

432 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

434 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

437 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

438 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

440 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

441 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

442 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

444 #ifde‡
_IO_MTSAFE_IO


445 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

446 
	#_IO_Êockfûe
(
_Â
) \

447 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

448 
	#_IO_fu∆ockfûe
(
_Â
) \

449 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
Ë

	)

453 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

454 
	#_IO_·rylockfûe
(
_Â
Ë

	)

455 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

456 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

459 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

460 
_IO_va_li°
, *
__ª°ri˘
);

461 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

462 
_IO_va_li°
);

463 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

464 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

466 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

467 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

469 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

471 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


472 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

473 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

474 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

475 #i‡
__GNUC__
 >= 2

478 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


479 
	~<shlib-com∑t.h
>

480 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

481 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

482 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

483 c⁄° 
_IO_°dö_u£d
;

484 
wók_exã∫
 (
_IO_°dö_u£d
);

487 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


488 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

492 
	#_IO_fwide
(
__Â
, 
__mode
) \

493 ({ 
__ªsu…
 = (
__mode
); \

494 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

496 i‡((
__Â
)->
_mode
 == 0) \

498 (
__Â
)->
_mode
 = -1; \

499 
__ªsu…
 = (
__Â
)->
_mode
; \

501 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

502 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

504 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

505 
__ªsu…
; })

	)

508 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

509 
_IO_va_li°
, *
__ª°ri˘
);

510 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

511 
_IO_va_li°
);

512 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

513 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

516 #ifde‡
__LDBL_COMPAT


517 
	~<bôs/libio-ldbl.h
>

520 #ifde‡
__˝lu•lus


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/swab.h

1 #i‚de‡
_LINUX_SWAB_H


2 
	#_LINUX_SWAB_H


	)

4 
	~<löux/ty≥s.h
>

6 
	~<asm/swab.h
>

12 
	#___c⁄°™t_swab16
(
x
Ë((
__u16
)( \

13 (((
__u16
)(
x
) & (__u16)0x00ffU) << 8) | \

14 (((
__u16
)(
x
Ë& (__u16)0xff00UË>> 8)))

	)

16 
	#___c⁄°™t_swab32
(
x
Ë((
__u32
)( \

17 (((
__u32
)(
x
) & (__u32)0x000000ffUL) << 24) | \

18 (((
__u32
)(
x
) & (__u32)0x0000ff00UL) << 8) | \

19 (((
__u32
)(
x
) & (__u32)0x00ff0000UL) >> 8) | \

20 (((
__u32
)(
x
Ë& (__u32)0xff000000ULË>> 24)))

	)

22 
	#___c⁄°™t_swab64
(
x
Ë((
__u64
)( \

23 (((
__u64
)(
x
) & (__u64)0x00000000000000ffULL) << 56) | \

24 (((
__u64
)(
x
) & (__u64)0x000000000000ff00ULL) << 40) | \

25 (((
__u64
)(
x
) & (__u64)0x0000000000ff0000ULL) << 24) | \

26 (((
__u64
)(
x
) & (__u64)0x00000000ff000000ULL) << 8) | \

27 (((
__u64
)(
x
) & (__u64)0x000000ff00000000ULL) >> 8) | \

28 (((
__u64
)(
x
) & (__u64)0x0000ff0000000000ULL) >> 24) | \

29 (((
__u64
)(
x
) & (__u64)0x00ff000000000000ULL) >> 40) | \

30 (((
__u64
)(
x
Ë& (__u64)0xff00000000000000ULLË>> 56)))

	)

32 
	#___c⁄°™t_swahw32
(
x
Ë((
__u32
)( \

33 (((
__u32
)(
x
) & (__u32)0x0000ffffUL) << 16) | \

34 (((
__u32
)(
x
Ë& (__u32)0xffff0000ULË>> 16)))

	)

36 
	#___c⁄°™t_swahb32
(
x
Ë((
__u32
)( \

37 (((
__u32
)(
x
) & (__u32)0x00ff00ffUL) << 8) | \

38 (((
__u32
)(
x
Ë& (__u32)0xff00ff00ULË>> 8)))

	)

46 
__ölöe__
 
__u16
 
	$__fswab16
(
__u16
 
vÆ
)

48 #ifde‡
__HAVE_BUILTIN_BSWAP16__


49  
	`__buûtö_bsw≠16
(
vÆ
);

50 #ñi‡
	`deföed
 (
__¨ch_swab16
)

51  
	`__¨ch_swab16
(
vÆ
);

53  
	`___c⁄°™t_swab16
(
vÆ
);

55 
	}
}

57 
__ölöe__
 
__u32
 
	$__fswab32
(
__u32
 
vÆ
)

59 #ifde‡
__HAVE_BUILTIN_BSWAP32__


60  
	`__buûtö_bsw≠32
(
vÆ
);

61 #ñi‡
	`deföed
(
__¨ch_swab32
)

62  
	`__¨ch_swab32
(
vÆ
);

64  
	`___c⁄°™t_swab32
(
vÆ
);

66 
	}
}

68 
__ölöe__
 
__u64
 
	$__fswab64
(
__u64
 
vÆ
)

70 #ifde‡
__HAVE_BUILTIN_BSWAP64__


71  
	`__buûtö_bsw≠64
(
vÆ
);

72 #ñi‡
	`deföed
 (
__¨ch_swab64
)

73  
	`__¨ch_swab64
(
vÆ
);

74 #ñi‡
	`deföed
(
__SWAB_64_THRU_32__
)

75 
__u32
 
h
 = 
vÆ
 >> 32;

76 
__u32
 
l
 = 
vÆ
 & ((1ULL << 32) - 1);

77  (((
__u64
)
	`__fswab32
(
l
)Ë<< 32Ë| ((__u64)(__fswab32(
h
)));

79  
	`___c⁄°™t_swab64
(
vÆ
);

81 
	}
}

83 
__ölöe__
 
__u32
 
	$__fswahw32
(
__u32
 
vÆ
)

85 #ifde‡
__¨ch_swahw32


86  
	`__¨ch_swahw32
(
vÆ
);

88  
	`___c⁄°™t_swahw32
(
vÆ
);

90 
	}
}

92 
__ölöe__
 
__u32
 
	$__fswahb32
(
__u32
 
vÆ
)

94 #ifde‡
__¨ch_swahb32


95  
	`__¨ch_swahb32
(
vÆ
);

97  
	`___c⁄°™t_swahb32
(
vÆ
);

99 
	}
}

105 
	#__swab16
(
x
) \

106 (
	`__buûtö_c⁄°™t_p
((
__u16
)(
x
)) ? \

107 
	`___c⁄°™t_swab16
(
x
) : \

108 
	`__fswab16
(
x
))

	)

114 
	#__swab32
(
x
) \

115 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

116 
	`___c⁄°™t_swab32
(
x
) : \

117 
	`__fswab32
(
x
))

	)

123 
	#__swab64
(
x
) \

124 (
	`__buûtö_c⁄°™t_p
((
__u64
)(
x
)) ? \

125 
	`___c⁄°™t_swab64
(
x
) : \

126 
	`__fswab64
(
x
))

	)

134 
	#__swahw32
(
x
) \

135 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

136 
	`___c⁄°™t_swahw32
(
x
) : \

137 
	`__fswahw32
(
x
))

	)

145 
	#__swahb32
(
x
) \

146 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

147 
	`___c⁄°™t_swahb32
(
x
) : \

148 
	`__fswahb32
(
x
))

	)

154 
__ölöe__
 
__u16
 
	$__swab16p
(c⁄° 
__u16
 *
p
)

156 #ifde‡
__¨ch_swab16p


157  
	`__¨ch_swab16p
(
p
);

159  
	`__swab16
(*
p
);

161 
	}
}

167 
__ölöe__
 
__u32
 
	$__swab32p
(c⁄° 
__u32
 *
p
)

169 #ifde‡
__¨ch_swab32p


170  
	`__¨ch_swab32p
(
p
);

172  
	`__swab32
(*
p
);

174 
	}
}

180 
__ölöe__
 
__u64
 
	$__swab64p
(c⁄° 
__u64
 *
p
)

182 #ifde‡
__¨ch_swab64p


183  
	`__¨ch_swab64p
(
p
);

185  
	`__swab64
(*
p
);

187 
	}
}

195 
__ölöe__
 
__u32
 
	$__swahw32p
(c⁄° 
__u32
 *
p
)

197 #ifde‡
__¨ch_swahw32p


198  
	`__¨ch_swahw32p
(
p
);

200  
	`__swahw32
(*
p
);

202 
	}
}

210 
__ölöe__
 
__u32
 
	$__swahb32p
(c⁄° 
__u32
 *
p
)

212 #ifde‡
__¨ch_swahb32p


213  
	`__¨ch_swahb32p
(
p
);

215  
	`__swahb32
(*
p
);

217 
	}
}

223 
__ölöe__
 
	$__swab16s
(
__u16
 *
p
)

225 #ifde‡
__¨ch_swab16s


226 
	`__¨ch_swab16s
(
p
);

228 *
p
 = 
	`__swab16p
(p);

230 
	}
}

235 
__ölöe__
 
	$__swab32s
(
__u32
 *
p
)

237 #ifde‡
__¨ch_swab32s


238 
	`__¨ch_swab32s
(
p
);

240 *
p
 = 
	`__swab32p
(p);

242 
	}
}

248 
__ölöe__
 
	$__swab64s
(
__u64
 *
p
)

250 #ifde‡
__¨ch_swab64s


251 
	`__¨ch_swab64s
(
p
);

253 *
p
 = 
	`__swab64p
(p);

255 
	}
}

263 
__ölöe__
 
	$__swahw32s
(
__u32
 *
p
)

265 #ifde‡
__¨ch_swahw32s


266 
	`__¨ch_swahw32s
(
p
);

268 *
p
 = 
	`__swahw32p
(p);

270 
	}
}

278 
__ölöe__
 
	$__swahb32s
(
__u32
 *
p
)

280 #ifde‡
__¨ch_swahb32s


281 
	`__¨ch_swahb32s
(
p
);

283 *
p
 = 
	`__swahb32p
(p);

285 
	}
}

	@/usr/include/linux/sysinfo.h

1 #i‚de‡
_LINUX_SYSINFO_H


2 
	#_LINUX_SYSINFO_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#SI_LOAD_SHIFT
 16

	)

7 
	ssysöfo
 {

8 
__kî√l_l⁄g_t
 
	mu±ime
;

9 
__kî√l_ul⁄g_t
 
	mlﬂds
[3];

10 
__kî√l_ul⁄g_t
 
	mtŸÆøm
;

11 
__kî√l_ul⁄g_t
 
	m‰ìøm
;

12 
__kî√l_ul⁄g_t
 
	msh¨edøm
;

13 
__kî√l_ul⁄g_t
 
	mbuf„ºam
;

14 
__kî√l_ul⁄g_t
 
	mtŸÆsw≠
;

15 
__kî√l_ul⁄g_t
 
	m‰ìsw≠
;

16 
__u16
 
	m¥ocs
;

17 
__u16
 
	m∑d
;

18 
__kî√l_ul⁄g_t
 
	mtŸÆhigh
;

19 
__kî√l_ul⁄g_t
 
	m‰ìhigh
;

20 
__u32
 
	mmem_unô
;

21 
	m_f
[20-2*(
__kî√l_ul⁄g_t
)-(
__u32
)];

	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_MISC


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_MISC


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #ifde‡
__USE_XOPEN2K8


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

166 #ifde‡
__USE_XOPEN


167 #ifde‡
__GNUC__


168 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

170 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

172 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

177 #ifde‡
__USE_MISC


184 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

187 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

190 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

193 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

197 #ifde‡
__USE_MISC


198 
	#NSIG
 
_NSIG


	)

201 #ifde‡
__USE_GNU


202 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

206 #ifde‡
__USE_MISC


207 
__sigh™dÀr_t
 
	tsig_t
;

210 #ifde‡
__USE_POSIX


213 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

216 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

226 
__THROW
 
	`__n⁄nuŒ
 ((1));

228 #ifde‡
__USE_GNU


230 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

233 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

234 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

237 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

238 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

243 
	~<bôs/siga˘i⁄.h
>

246 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

247 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

254 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

257 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

258 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

261 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

268 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

269 
	`__n⁄nuŒ
 ((1, 2));

271 #ifde‡
__USE_POSIX199309


276 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

277 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

284 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

285 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

286 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

287 
	`__n⁄nuŒ
 ((1));

291 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

292 
__THROW
;

297 #ifde‡
__USE_MISC


301 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

302 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

306 
	~<bôs/sigc⁄ãxt.h
>

309 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

314 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


315 
	#__√ed_size_t


	)

316 
	~<°ddef.h
>

321 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

323 
	~<bôs/sig°ack.h
>

324 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


326 
	~<sys/uc⁄ãxt.h
>

332 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

333 
__THROW
 
__©åibuã_dïªˇãd__
;

337 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

338 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

342 #ifde‡
__USE_XOPEN_EXTENDED


346 
	$sighﬁd
 (
__sig
Ë
__THROW
;

349 
	$sigªl£
 (
__sig
Ë
__THROW
;

352 
	$sigign‹e
 (
__sig
Ë
__THROW
;

355 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

358 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


361 
	~<bôs/±hªadty≥s.h
>

362 
	~<bôs/sigthªad.h
>

369 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

371 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

375 
__END_DECLS


	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë(1UL << ((dË% 
__NFDBITS
)))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/socket.h

19 #i‚def 
_SYS_SOCKET_H


20 
	#_SYS_SOCKET_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


26 
	~<sys/uio.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

29 #ifde‡
__USE_GNU


31 
	~<bôs/sig£t.h
>

38 
	~<bôs/sockë.h
>

40 #ifde‡
__USE_MISC


43 
	sosockaddr


45 
	mß_Ámûy
;

46 
	mß_d©a
[14];

54 
	mSHUT_RD
 = 0,

55 
	#SHUT_RD
 
SHUT_RD


	)

56 
	mSHUT_WR
,

57 
	#SHUT_WR
 
SHUT_WR


	)

58 
	mSHUT_RDWR


59 
	#SHUT_RDWR
 
SHUT_RDWR


	)

68 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


69 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

70 
	#__CONST_SOCKADDR_ARG
 c⁄° 
sockaddr
 *

	)

74 
	#__SOCKADDR_ALLTYPES
 \

75 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

76 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

85 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

86 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

87 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

89 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

90 uni⁄ { 
	m__SOCKADDR_ALLTYPES


91 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

92 #unde‡
__SOCKADDR_ONETYPE


93 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëc⁄° ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

94 uni⁄ { 
	m__SOCKADDR_ALLTYPES


95 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

96 #unde‡
__SOCKADDR_ONETYPE


99 #ifde‡
__USE_GNU


101 
	smmsghdr


103 
msghdr
 
	mmsg_hdr
;

104 
	mmsg_Àn
;

113 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

119 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

120 
__fds
[2]Ë
__THROW
;

123 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

124 
__THROW
;

127 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

128 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

137 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

141 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

142 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

149 
ssize_t
 
	`£nd
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
, 
__Êags
);

156 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

163 
ssize_t
 
	`£ndto
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

164 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

165 
sockÀn_t
 
__addr_Àn
);

174 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

175 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

176 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

184 
ssize_t
 
	`£ndmsg
 (
__fd
, c⁄° 
msghdr
 *
__mesßge
,

185 
__Êags
);

187 #ifde‡
__USE_GNU


193 
	`£ndmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

194 
__vÀn
, 
__Êags
);

202 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

204 #ifde‡
__USE_GNU


210 
	`ªcvmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

211 
__vÀn
, 
__Êags
,

212 
time•ec
 *
__tmo
);

219 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

220 *
__ª°ri˘
 
__›tvÆ
,

221 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

226 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

227 c⁄° *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

233 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

243 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

244 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

246 #ifde‡
__USE_GNU


251 
	`ac˚±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

252 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
, 
__Êags
);

261 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

264 #ifde‡
__USE_XOPEN2K


266 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

270 #ifde‡
__USE_MISC


274 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

279 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


280 
	~<bôs/sockë2.h
>

283 
__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


26 
__exãnsi⁄__


27 
	$gnu_dev_maj‹
 (
__dev
)

28 
__THROW
 
__©åibuã_c⁄°__
;

29 
__exãnsi⁄__


30 
	$gnu_dev_mö‹
 (
__dev
)

31 
__THROW
 
__©åibuã_c⁄°__
;

32 
__exãnsi⁄__


33 
	$gnu_dev_makedev
 (
__maj‹
,

34 
__mö‹
)

35 
__THROW
 
__©åibuã_c⁄°__
;

37 #ifde‡
__USE_EXTERN_INLINES


38 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

39 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

41  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

42 
	}
}

44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

47  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

53  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

54 | (((Ë(
__mö‹
 & ~0xff)) << 12)

55 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

56 
	}
}

58 
	g__END_DECLS


61 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

62 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

63 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/zconf.h

8 #i‚de‡
ZCONF_H


9 
	#ZCONF_H


	)

17 #ifde‡
Z_PREFIX


18 
	#Z_PREFIX_SET


	)

21 
	#_di°_code
 
z__di°_code


	)

22 
	#_Àngth_code
 
z__Àngth_code


	)

23 
	#_å_Æign
 
z__å_Æign


	)

24 
	#_å_Êush_bôs
 
z__å_Êush_bôs


	)

25 
	#_å_Êush_block
 
z__å_Êush_block


	)

26 
	#_å_öô
 
z__å_öô


	)

27 
	#_å_°‹ed_block
 
z__å_°‹ed_block


	)

28 
	#_å_èŒy
 
z__å_èŒy


	)

29 
	#adÀr32
 
z_adÀr32


	)

30 
	#adÀr32_comböe
 
z_adÀr32_comböe


	)

31 
	#adÀr32_comböe64
 
z_adÀr32_comböe64


	)

32 #i‚de‡
Z_SOLO


33 
	#com¥ess
 
z_com¥ess


	)

34 
	#com¥ess2
 
z_com¥ess2


	)

35 
	#com¥essBound
 
z_com¥essBound


	)

37 
	#¸c32
 
z_¸c32


	)

38 
	#¸c32_comböe
 
z_¸c32_comböe


	)

39 
	#¸c32_comböe64
 
z_¸c32_comböe64


	)

40 
	#deÊ©e
 
z_deÊ©e


	)

41 
	#deÊ©eBound
 
z_deÊ©eBound


	)

42 
	#deÊ©eC›y
 
z_deÊ©eC›y


	)

43 
	#deÊ©eEnd
 
z_deÊ©eEnd


	)

44 
	#deÊ©eInô2_
 
z_deÊ©eInô2_


	)

45 
	#deÊ©eInô_
 
z_deÊ©eInô_


	)

46 
	#deÊ©eP¨ams
 
z_deÊ©eP¨ams


	)

47 
	#deÊ©ePídög
 
z_deÊ©ePídög


	)

48 
	#deÊ©ePrime
 
z_deÊ©ePrime


	)

49 
	#deÊ©eRe£t
 
z_deÊ©eRe£t


	)

50 
	#deÊ©eRe£tKìp
 
z_deÊ©eRe£tKìp


	)

51 
	#deÊ©eSëDi˘i⁄¨y
 
z_deÊ©eSëDi˘i⁄¨y


	)

52 
	#deÊ©eSëHódî
 
z_deÊ©eSëHódî


	)

53 
	#deÊ©eTu√
 
z_deÊ©eTu√


	)

54 
	#deÊ©e_c›yright
 
z_deÊ©e_c›yright


	)

55 
	#gë_¸c_èbÀ
 
z_gë_¸c_èbÀ


	)

56 #i‚de‡
Z_SOLO


57 
	#gz_îr‹
 
z_gz_îr‹


	)

58 
	#gz_ötmax
 
z_gz_ötmax


	)

59 
	#gz_°rwöîr‹
 
z_gz_°rwöîr‹


	)

60 
	#gzbuf„r
 
z_gzbuf„r


	)

61 
	#gz˛óªº
 
z_gz˛óªº


	)

62 
	#gz˛o£
 
z_gz˛o£


	)

63 
	#gz˛o£_r
 
z_gz˛o£_r


	)

64 
	#gz˛o£_w
 
z_gz˛o£_w


	)

65 
	#gzdúe˘
 
z_gzdúe˘


	)

66 
	#gzd›í
 
z_gzd›í


	)

67 
	#gzeof
 
z_gzeof


	)

68 
	#gzîr‹
 
z_gzîr‹


	)

69 
	#gzÊush
 
z_gzÊush


	)

70 
	#gzgëc
 
z_gzgëc


	)

71 
	#gzgëc_
 
z_gzgëc_


	)

72 
	#gzgës
 
z_gzgës


	)

73 
	#gzoff£t
 
z_gzoff£t


	)

74 
	#gzoff£t64
 
z_gzoff£t64


	)

75 
	#gz›í
 
z_gz›í


	)

76 
	#gz›í64
 
z_gz›í64


	)

77 #ifde‡
_WIN32


78 
	#gz›í_w
 
z_gz›í_w


	)

80 
	#gz¥ötf
 
z_gz¥ötf


	)

81 
	#gzv¥ötf
 
z_gzv¥ötf


	)

82 
	#gzputc
 
z_gzputc


	)

83 
	#gzputs
 
z_gzputs


	)

84 
	#gzªad
 
z_gzªad


	)

85 
	#gzªwöd
 
z_gzªwöd


	)

86 
	#gz£ek
 
z_gz£ek


	)

87 
	#gz£ek64
 
z_gz£ek64


	)

88 
	#gz£ç¨ams
 
z_gz£ç¨ams


	)

89 
	#gzãŒ
 
z_gzãŒ


	)

90 
	#gzãŒ64
 
z_gzãŒ64


	)

91 
	#gzungëc
 
z_gzungëc


	)

92 
	#gzwrôe
 
z_gzwrôe


	)

94 
	#öÊ©e
 
z_öÊ©e


	)

95 
	#öÊ©eBack
 
z_öÊ©eBack


	)

96 
	#öÊ©eBackEnd
 
z_öÊ©eBackEnd


	)

97 
	#öÊ©eBackInô_
 
z_öÊ©eBackInô_


	)

98 
	#öÊ©eC›y
 
z_öÊ©eC›y


	)

99 
	#öÊ©eEnd
 
z_öÊ©eEnd


	)

100 
	#öÊ©eGëHódî
 
z_öÊ©eGëHódî


	)

101 
	#öÊ©eInô2_
 
z_öÊ©eInô2_


	)

102 
	#öÊ©eInô_
 
z_öÊ©eInô_


	)

103 
	#öÊ©eM¨k
 
z_öÊ©eM¨k


	)

104 
	#öÊ©ePrime
 
z_öÊ©ePrime


	)

105 
	#öÊ©eRe£t
 
z_öÊ©eRe£t


	)

106 
	#öÊ©eRe£t2
 
z_öÊ©eRe£t2


	)

107 
	#öÊ©eSëDi˘i⁄¨y
 
z_öÊ©eSëDi˘i⁄¨y


	)

108 
	#öÊ©eGëDi˘i⁄¨y
 
z_öÊ©eGëDi˘i⁄¨y


	)

109 
	#öÊ©eSync
 
z_öÊ©eSync


	)

110 
	#öÊ©eSyncPoöt
 
z_öÊ©eSyncPoöt


	)

111 
	#öÊ©eUndîmöe
 
z_öÊ©eUndîmöe


	)

112 
	#öÊ©eRe£tKìp
 
z_öÊ©eRe£tKìp


	)

113 
	#öÊ©e_c›yright
 
z_öÊ©e_c›yright


	)

114 
	#öÊ©e_Á°
 
z_öÊ©e_Á°


	)

115 
	#öÊ©e_èbÀ
 
z_öÊ©e_èbÀ


	)

116 #i‚de‡
Z_SOLO


117 
	#uncom¥ess
 
z_uncom¥ess


	)

119 
	#zEº‹
 
z_zEº‹


	)

120 #i‚de‡
Z_SOLO


121 
	#zˇŒoc
 
z_zˇŒoc


	)

122 
	#zc‰ì
 
z_zc‰ì


	)

124 
	#zlibCompûeFœgs
 
z_zlibCompûeFœgs


	)

125 
	#zlibVîsi⁄
 
z_zlibVîsi⁄


	)

128 
	#Byã
 
z_Byã


	)

129 
	#Byãf
 
z_Byãf


	)

130 
	#Æloc_func
 
z_Æloc_func


	)

131 
	#ch¨f
 
z_ch¨f


	)

132 
	#‰ì_func
 
z_‰ì_func


	)

133 #i‚de‡
Z_SOLO


134 
	#gzFûe
 
z_gzFûe


	)

136 
	#gz_hódî
 
z_gz_hódî


	)

137 
	#gz_hódîp
 
z_gz_hódîp


	)

138 
	#ö_func
 
z_ö_func


	)

139 
	#ötf
 
z_ötf


	)

140 
	#out_func
 
z_out_func


	)

141 
	#uI¡
 
z_uI¡


	)

142 
	#uI¡f
 
z_uI¡f


	)

143 
	#uL⁄g
 
z_uL⁄g


	)

144 
	#uL⁄gf
 
z_uL⁄gf


	)

145 
	#voidp
 
z_voidp


	)

146 
	#voidpc
 
z_voidpc


	)

147 
	#voidpf
 
z_voidpf


	)

150 
	#gz_hódî_s
 
z_gz_hódî_s


	)

151 
	#öã∫Æ_°©e
 
z_öã∫Æ_°©e


	)

155 #i‡
deföed
(
__MSDOS__
Ë&& !deföed(
MSDOS
)

156 
	#MSDOS


	)

158 #i‡(
deföed
(
OS_2
Ë|| deföed(
__OS2__
)Ë&& !deföed(
OS2
)

159 
	#OS2


	)

161 #i‡
deföed
(
_WINDOWS
Ë&& !deföed(
WINDOWS
)

162 
	#WINDOWS


	)

164 #i‡
deföed
(
_WIN32
Ë|| deföed(
_WIN32_WCE
Ë|| deföed(
__WIN32__
)

165 #i‚de‡
WIN32


166 
	#WIN32


	)

169 #i‡(
deföed
(
MSDOS
Ë|| deföed(
OS2
Ë|| deföed(
WINDOWS
)Ë&& !deföed(
WIN32
)

170 #i‡!
deföed
(
__GNUC__
Ë&& !deföed(
__FLAT__
Ë&& !deföed(
__386__
)

171 #i‚de‡
SYS16BIT


172 
	#SYS16BIT


	)

181 #ifde‡
SYS16BIT


182 
	#MAXSEG_64K


	)

184 #ifde‡
MSDOS


185 
	#UNALIGNED_OK


	)

188 #ifde‡
__STDC_VERSION__


189 #i‚de‡
STDC


190 
	#STDC


	)

192 #i‡
__STDC_VERSION__
 >= 199901L

193 #i‚de‡
STDC99


194 
	#STDC99


	)

198 #i‡!
deföed
(
STDC
Ë&& (deföed(
__STDC__
Ë|| deföed(
__˝lu•lus
))

199 
	#STDC


	)

201 #i‡!
deföed
(
STDC
Ë&& (deföed(
__GNUC__
Ë|| deföed(
__BORLANDC__
))

202 
	#STDC


	)

204 #i‡!
deföed
(
STDC
Ë&& (deföed(
MSDOS
Ë|| deföed(
WINDOWS
Ë|| deföed(
WIN32
))

205 
	#STDC


	)

207 #i‡!
deföed
(
STDC
Ë&& (deföed(
OS2
Ë|| deföed(
__HOS_AIX__
))

208 
	#STDC


	)

211 #i‡
deföed
(
__OS400__
Ë&& !deföed(
STDC
)

212 
	#STDC


	)

215 #i‚de‡
STDC


217 c⁄°

	)

221 #i‡
deföed
(
ZLIB_CONST
Ë&& !deföed(
z_c⁄°
)

222 
	#z_c⁄°
 c⁄°

	)

224 
	#z_c⁄°


	)

228 #i‡
deföed
(
__MWERKS__
)||deföed(
≠∂ec
)||deföed(
THINK_C
)||deföed(
__SC__
)

229 
	#NO_DUMMY_DECL


	)

233 #i‚de‡
MAX_MEM_LEVEL


234 #ifde‡
MAXSEG_64K


235 
	#MAX_MEM_LEVEL
 8

	)

237 
	#MAX_MEM_LEVEL
 9

	)

246 #i‚de‡
MAX_WBITS


247 
	#MAX_WBITS
 15

	)

265 #i‚de‡
OF


266 #ifde‡
STDC


267 
	#OF
(
¨gs
Ë
	)
args

269 
	#OF
(
¨gs
Ë()

	)

273 #i‚de‡
Z_ARG


274 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

275 
	#Z_ARG
(
¨gs
Ë
	)
args

277 
	#Z_ARG
(
¨gs
Ë()

	)

287 #ifde‡
SYS16BIT


288 #i‡
deföed
(
M_I86SM
Ë|| deföed(
M_I86MM
)

290 
	#SMALL_MEDIUM


	)

291 #ifde‡
_MSC_VER


292 
	#FAR
 
_Ár


	)

294 
	#FAR
 
Ár


	)

297 #i‡(
deföed
(
__SMALL__
Ë|| deföed(
__MEDIUM__
))

299 
	#SMALL_MEDIUM


	)

300 #ifde‡
__BORLANDC__


301 
	#FAR
 
_Ár


	)

303 
	#FAR
 
Ár


	)

308 #i‡
deföed
(
WINDOWS
Ë|| deföed(
WIN32
)

312 #ifde‡
ZLIB_DLL


313 #i‡
deföed
(
WIN32
Ë&& (!deföed(
__BORLANDC__
) || (__BORLANDC__ >= 0x500))

314 #ifde‡
ZLIB_INTERNAL


315 
	#ZEXTERN
 
	`__de˛•ec
(
dŒexp‹t
)

	)

317 
	#ZEXTERN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

325 #ifde‡
ZLIB_WINAPI


326 #ifde‡
FAR


327 #unde‡
FAR


329 
	~<wödows.h
>

332 
	#ZEXPORT
 
WINAPI


	)

333 #ifde‡
WIN32


334 
	#ZEXPORTVA
 
WINAPIV


	)

336 
	#ZEXPORTVA
 
FAR
 
CDECL


	)

341 #i‡
deföed
 (
__BEOS__
)

342 #ifde‡
ZLIB_DLL


343 #ifde‡
ZLIB_INTERNAL


344 
	#ZEXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

345 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒexp‹t
)

	)

347 
	#ZEXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

348 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒimp‹t
)

	)

353 #i‚de‡
ZEXTERN


354 
	#ZEXTERN
 

	)

356 #i‚de‡
ZEXPORT


357 
	#ZEXPORT


	)

359 #i‚de‡
ZEXPORTVA


360 
	#ZEXPORTVA


	)

363 #i‚de‡
FAR


364 
	#FAR


	)

367 #i‡!
deföed
(
__MACTYPES__
)

368 
	tByã
;

370 
	tuI¡
;

371 
	tuL⁄g
;

373 #ifde‡
SMALL_MEDIUM


375 
	#Byãf
 
Byã
 
FAR


	)

377 
Byã
 
	tFAR
 
	tByãf
;

379 
	tFAR
 
	tch¨f
;

380 
	tFAR
 
	tötf
;

381 
uI¡
 
	tFAR
 
	tuI¡f
;

382 
uL⁄g
 
	tFAR
 
	tuL⁄gf
;

384 #ifde‡
STDC


385 c⁄° *
	tvoidpc
;

386 
	tFAR
 *
	tvoidpf
;

387 *
	tvoidp
;

389 
Byã
 c⁄° *
	tvoidpc
;

390 
Byã
 
	tFAR
 *
	tvoidpf
;

391 
Byã
 *
	tvoidp
;

394 #i‡!
deföed
(
Z_U4
Ë&& !deföed(
Z_SOLO
Ë&& deföed(
STDC
)

395 
	~<limôs.h
>

396 #i‡(
UINT_MAX
 == 0xffffffffUL)

397 
	#Z_U4
 

	)

398 #ñi‡(
ULONG_MAX
 == 0xffffffffUL)

399 
	#Z_U4
 

	)

400 #ñi‡(
USHRT_MAX
 == 0xffffffffUL)

401 
	#Z_U4
 

	)

405 #ifde‡
Z_U4


406 
Z_U4
 
	tz_¸c_t
;

408 
	tz_¸c_t
;

412 
	#Z_HAVE_UNISTD_H


	)

416 
	#Z_HAVE_STDARG_H


	)

419 #ifde‡
STDC


420 #i‚de‡
Z_SOLO


421 
	~<sys/ty≥s.h
>

425 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

426 #i‚de‡
Z_SOLO


427 
	~<°d¨g.h
>

431 #ifde‡
_WIN32


432 #i‚de‡
Z_SOLO


433 
	~<°ddef.h
>

443 #i‡
deföed
(
_LARGEFILE64_SOURCE
) && -_LARGEFILE64_SOURCE - -1 == 1

444 #unde‡
_LARGEFILE64_SOURCE


447 #i‡
deföed
(
__WATCOMC__
Ë&& !deföed(
Z_HAVE_UNISTD_H
)

448 
	#Z_HAVE_UNISTD_H


	)

450 #i‚de‡
Z_SOLO


451 #i‡
deföed
(
Z_HAVE_UNISTD_H
Ë|| deföed(
_LARGEFILE64_SOURCE
)

452 
	~<uni°d.h
>

453 #ifde‡
VMS


454 
	~<unixio.h
>

456 #i‚de‡
z_off_t


457 
	#z_off_t
 
off_t


	)

462 #i‡
deföed
(
_LFS64_LARGEFILE
) && _LFS64_LARGEFILE-0

463 
	#Z_LFS64


	)

466 #i‡
deföed
(
_LARGEFILE64_SOURCE
Ë&& deföed(
Z_LFS64
)

467 
	#Z_LARGE64


	)

470 #i‡
deföed
(
_FILE_OFFSET_BITS
Ë&& _FILE_OFFSET_BITS-0 =64 && deföed(
Z_LFS64
)

471 
	#Z_WANT64


	)

474 #i‡!
deföed
(
SEEK_SET
Ë&& !deföed(
Z_SOLO
)

475 
	#SEEK_SET
 0

	)

476 
	#SEEK_CUR
 1

	)

477 
	#SEEK_END
 2

	)

480 #i‚de‡
z_off_t


481 
	#z_off_t
 

	)

484 #i‡!
deföed
(
_WIN32
Ë&& deföed(
Z_LARGE64
)

485 
	#z_off64_t
 
off64_t


	)

487 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__GNUC__
Ë&& !deföed(
Z_SOLO
)

488 
	#z_off64_t
 
__öt64


	)

490 
	#z_off64_t
 
z_off_t


	)

495 #i‡
deföed
(
__MVS__
)

496 #¥agm®
m≠
(
deÊ©eInô_
,"DEIN")

497 #¥agm®
m≠
(
deÊ©eInô2_
,"DEIN2")

498 #¥agm®
m≠
(
deÊ©eEnd
,"DEEND")

499 #¥agm®
m≠
(
deÊ©eBound
,"DEBND")

500 #¥agm®
m≠
(
öÊ©eInô_
,"ININ")

501 #¥agm®
m≠
(
öÊ©eInô2_
,"ININ2")

502 #¥agm®
m≠
(
öÊ©eEnd
,"INEND")

503 #¥agm®
m≠
(
öÊ©eSync
,"INSY")

504 #¥agm®
m≠
(
öÊ©eSëDi˘i⁄¨y
,"INSEDI")

505 #¥agm®
m≠
(
com¥essBound
,"CMBND")

506 #¥agm®
m≠
(
öÊ©e_èbÀ
,"INTABL")

507 #¥agm®
m≠
(
öÊ©e_Á°
,"INFA")

508 #¥agm®
m≠
(
öÊ©e_c›yright
,"INCOPY")

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm-generic/posix_types.h

1 #i‚de‡
__ASM_GENERIC_POSIX_TYPES_H


2 
	#__ASM_GENERIC_POSIX_TYPES_H


	)

4 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__kî√l_l⁄g_t


14 
	t__kî√l_l⁄g_t
;

15 
	t__kî√l_ul⁄g_t
;

18 #i‚de‡
__kî√l_öo_t


19 
__kî√l_ul⁄g_t
 
	t__kî√l_öo_t
;

22 #i‚de‡
__kî√l_mode_t


23 
	t__kî√l_mode_t
;

26 #i‚de‡
__kî√l_pid_t


27 
	t__kî√l_pid_t
;

30 #i‚de‡
__kî√l_ùc_pid_t


31 
	t__kî√l_ùc_pid_t
;

34 #i‚de‡
__kî√l_uid_t


35 
	t__kî√l_uid_t
;

36 
	t__kî√l_gid_t
;

39 #i‚de‡
__kî√l_su£c⁄ds_t


40 
__kî√l_l⁄g_t
 
	t__kî√l_su£c⁄ds_t
;

43 #i‚de‡
__kî√l_daddr_t


44 
	t__kî√l_daddr_t
;

47 #i‚de‡
__kî√l_uid32_t


48 
	t__kî√l_uid32_t
;

49 
	t__kî√l_gid32_t
;

52 #i‚de‡
__kî√l_ﬁd_uid_t


53 
__kî√l_uid_t
 
	t__kî√l_ﬁd_uid_t
;

54 
__kî√l_gid_t
 
	t__kî√l_ﬁd_gid_t
;

57 #i‚de‡
__kî√l_ﬁd_dev_t


58 
	t__kî√l_ﬁd_dev_t
;

65 #i‚de‡
__kî√l_size_t


66 #i‡
__BITS_PER_LONG
 != 64

67 
	t__kî√l_size_t
;

68 
	t__kî√l_ssize_t
;

69 
	t__kî√l_±rdiff_t
;

71 
__kî√l_ul⁄g_t
 
	t__kî√l_size_t
;

72 
__kî√l_l⁄g_t
 
	t__kî√l_ssize_t
;

73 
__kî√l_l⁄g_t
 
	t__kî√l_±rdiff_t
;

77 #i‚de‡
__kî√l_fsid_t


79 
	mvÆ
[2];

80 } 
	t__kî√l_fsid_t
;

86 
__kî√l_l⁄g_t
 
	t__kî√l_off_t
;

87 
	t__kî√l_loff_t
;

88 
__kî√l_l⁄g_t
 
	t__kî√l_time_t
;

89 
__kî√l_l⁄g_t
 
	t__kî√l_˛ock_t
;

90 
	t__kî√l_timî_t
;

91 
	t__kî√l_˛ockid_t
;

92 * 
	t__kî√l_ˇddr_t
;

93 
	t__kî√l_uid16_t
;

94 
	t__kî√l_gid16_t
;

	@/usr/include/asm/swab.h

1 #i‚de‡
_ASM_X86_SWAB_H


2 
	#_ASM_X86_SWAB_H


	)

4 
	~<löux/ty≥s.h
>

7 
__ölöe__
 
__u32
 
	$__¨ch_swab32
(
__u32
 
vÆ
)

9 
	`__asm__
("bsw≠»%0" : "Ù" (
vÆ
) : "0" (val));

10  
vÆ
;

11 
	}
}

12 
	#__¨ch_swab32
 
__¨ch_swab32


	)

14 
__ölöe__
 
__u64
 
	$__¨ch_swab64
(
__u64
 
vÆ
)

16 #ifde‡
__i386__


19 
__u32
 
a
;

20 
__u32
 
b
;

21 } 
s
;

22 
__u64
 
u
;

23 } 
v
;

24 
v
.
u
 = 
vÆ
;

25 
	`__asm__
("bswapl %0 ; bswapl %1 ; xchgl %0,%1"

26 : "Ù" (
v
.
s
.
a
), "Ù" (v.s.
b
)

27 : "0" (
v
.
s
.
a
), "1" (v.s.
b
));

28  
v
.
u
;

30 
	`__asm__
("bsw≠q %0" : "Ù" (
vÆ
) : "0" (val));

31  
vÆ
;

33 
	}
}

34 
	#__¨ch_swab64
 
__¨ch_swab64


	)

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/fcntl-linux.h

19 #i‚def 
_FCNTL_H


37 #ifde‡
__USE_GNU


38 
	~<bôs/uio.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #i‚de‡
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #i‚de‡
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #i‚de‡
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #i‚de‡
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #i‚de‡
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #i‚de‡
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #i‚de‡
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #i‚de‡
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #i‚de‡
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #i‚de‡
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #i‚de‡
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #i‚de‡
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #i‚de‡
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #i‚de‡
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #i‚de‡
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #i‚de‡
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

99 #i‚de‡
__O_TMPFILE


100 
	#__O_TMPFILE
 (020000000 | 
__O_DIRECTORY
)

	)

103 #i‚de‡
F_GETLK


104 #i‚de‡
__USE_FILE_OFFSET64


105 
	#F_GETLK
 5

	)

106 
	#F_SETLK
 6

	)

107 
	#F_SETLKW
 7

	)

109 
	#F_GETLK
 
F_GETLK64


	)

110 
	#F_SETLK
 
F_SETLK64


	)

111 
	#F_SETLKW
 
F_SETLKW64


	)

114 #i‚de‡
F_GETLK64


115 
	#F_GETLK64
 12

	)

116 
	#F_SETLK64
 13

	)

117 
	#F_SETLKW64
 14

	)

131 #ifde‡
__USE_GNU


132 
	#F_OFD_GETLK
 36

	)

133 
	#F_OFD_SETLK
 37

	)

134 
	#F_OFD_SETLKW
 38

	)

137 #ifde‡
__USE_LARGEFILE64


138 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

141 #ifde‡
__USE_XOPEN2K8


142 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

143 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

144 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

147 #ifde‡
__USE_GNU


148 
	#O_DIRECT
 
__O_DIRECT


	)

149 
	#O_NOATIME
 
__O_NOATIME


	)

150 
	#O_PATH
 
__O_PATH


	)

151 
	#O_TMPFILE
 
__O_TMPFILE


	)

157 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


158 
	#O_DSYNC
 
__O_DSYNC


	)

159 #i‡
deföed
 
__O_RSYNC


160 
	#O_RSYNC
 
__O_RSYNC


	)

162 
	#O_RSYNC
 
O_SYNC


	)

167 
	#F_DUPFD
 0

	)

168 
	#F_GETFD
 1

	)

169 
	#F_SETFD
 2

	)

170 
	#F_GETFL
 3

	)

171 
	#F_SETFL
 4

	)

173 #i‚de‡
__F_SETOWN


174 
	#__F_SETOWN
 8

	)

175 
	#__F_GETOWN
 9

	)

178 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


179 
	#F_SETOWN
 
__F_SETOWN


	)

180 
	#F_GETOWN
 
__F_GETOWN


	)

183 #i‚de‡
__F_SETSIG


184 
	#__F_SETSIG
 10

	)

185 
	#__F_GETSIG
 11

	)

187 #i‚de‡
__F_SETOWN_EX


188 
	#__F_SETOWN_EX
 15

	)

189 
	#__F_GETOWN_EX
 16

	)

192 #ifde‡
__USE_GNU


193 
	#F_SETSIG
 
__F_SETSIG


	)

194 
	#F_GETSIG
 
__F_GETSIG


	)

195 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

196 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

199 #ifde‡
__USE_GNU


200 
	#F_SETLEASE
 1024

	)

201 
	#F_GETLEASE
 1025

	)

202 
	#F_NOTIFY
 1026

	)

203 
	#F_SETPIPE_SZ
 1031

	)

204 
	#F_GETPIPE_SZ
 1032

	)

206 #ifde‡
__USE_XOPEN2K8


207 
	#F_DUPFD_CLOEXEC
 1030

	)

212 
	#FD_CLOEXEC
 1

	)

214 #i‚de‡
F_RDLCK


216 
	#F_RDLCK
 0

	)

217 
	#F_WRLCK
 1

	)

218 
	#F_UNLCK
 2

	)

223 #i‚de‡
F_EXLCK


224 
	#F_EXLCK
 4

	)

225 
	#F_SHLCK
 8

	)

228 #ifde‡
__USE_MISC


230 
	#LOCK_SH
 1

	)

231 
	#LOCK_EX
 2

	)

232 
	#LOCK_NB
 4

	)

234 
	#LOCK_UN
 8

	)

237 #ifde‡
__USE_GNU


238 
	#LOCK_MAND
 32

	)

239 
	#LOCK_READ
 64

	)

240 
	#LOCK_WRITE
 128

	)

241 
	#LOCK_RW
 192

	)

244 #ifde‡
__USE_GNU


246 
	#DN_ACCESS
 0x00000001

	)

247 
	#DN_MODIFY
 0x00000002

	)

248 
	#DN_CREATE
 0x00000004

	)

249 
	#DN_DELETE
 0x00000008

	)

250 
	#DN_RENAME
 0x00000010

	)

251 
	#DN_ATTRIB
 0x00000020

	)

252 
	#DN_MULTISHOT
 0x80000000

	)

256 #ifde‡
__USE_GNU


258 
	e__pid_ty≥


260 
	mF_OWNER_TID
 = 0,

261 
	mF_OWNER_PID
,

262 
	mF_OWNER_PGRP
,

263 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


267 
	sf_ow√r_ex


269 
__pid_ty≥
 
	mty≥
;

270 
__pid_t
 
	mpid
;

276 #ifdef 
__USE_MISC


277 
	#FAPPEND
 
O_APPEND


	)

278 
	#FFSYNC
 
O_FSYNC


	)

279 
	#FASYNC
 
O_ASYNC


	)

280 
	#FNONBLOCK
 
O_NONBLOCK


	)

281 
	#FNDELAY
 
O_NDELAY


	)

284 #i‚de‡
__POSIX_FADV_DONTNEED


285 
	#__POSIX_FADV_DONTNEED
 4

	)

286 
	#__POSIX_FADV_NOREUSE
 5

	)

289 #ifde‡
__USE_XOPEN2K


290 
	#POSIX_FADV_NORMAL
 0

	)

291 
	#POSIX_FADV_RANDOM
 1

	)

292 
	#POSIX_FADV_SEQUENTIAL
 2

	)

293 
	#POSIX_FADV_WILLNEED
 3

	)

294 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

295 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

299 #ifde‡
__USE_GNU


301 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

304 
	#SYNC_FILE_RANGE_WRITE
 2

	)

307 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

312 
	#SPLICE_F_MOVE
 1

	)

313 
	#SPLICE_F_NONBLOCK
 2

	)

316 
	#SPLICE_F_MORE
 4

	)

317 
	#SPLICE_F_GIFT
 8

	)

321 
	#FALLOC_FL_KEEP_SIZE
 1

	)

324 
	#FALLOC_FL_PUNCH_HOLE
 2

	)

325 
	#FALLOC_FL_COLLAPSE_RANGE
 8

	)

328 
	#FALLOC_FL_ZERO_RANGE
 16

	)

333 
	sfûe_h™dÀ


335 
	mh™dÀ_byãs
;

336 
	mh™dÀ_ty≥
;

338 
	mf_h™dÀ
[0];

342 
	#MAX_HANDLE_SZ
 128

	)

346 #ifde‡
__USE_ATFILE


347 
	#AT_FDCWD
 -100

	)

350 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

351 
	#AT_REMOVEDIR
 0x200

	)

353 
	#AT_SYMLINK_FOLLOW
 0x400

	)

354 #ifde‡
__USE_GNU


355 
	#AT_NO_AUTOMOUNT
 0x800

	)

357 
	#AT_EMPTY_PATH
 0x1000

	)

359 
	#AT_EACCESS
 0x200

	)

363 
	g__BEGIN_DECLS


365 #ifde‡
__USE_GNU


368 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

369 
__THROW
;

376 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

377 
__Êags
);

384 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

385 
size_t
 
__cou¡
, 
__Êags
);

391 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

392 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

393 
__Êags
);

399 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

400 
__Êags
);

406 #i‚de‡
__USE_FILE_OFFSET64


407 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

409 #ifde‡
__REDIRECT


410 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

411 
__off64_t
 
__Àn
),

412 
ÁŒoˇã64
);

414 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

417 #ifde‡
__USE_LARGEFILE64


418 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

419 
__off64_t
 
__Àn
);

424 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

425 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

426 
__Êags
Ë
__THROW
;

432 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

433 
__Êags
);

437 
__END_DECLS


	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/mman-linux.h

19 #i‚de‡
_SYS_MMAN_H


35 
	#PROT_READ
 0x1

	)

36 
	#PROT_WRITE
 0x2

	)

37 
	#PROT_EXEC
 0x4

	)

38 
	#PROT_NONE
 0x0

	)

39 
	#PROT_GROWSDOWN
 0x01000000

	)

41 
	#PROT_GROWSUP
 0x02000000

	)

45 
	#MAP_SHARED
 0x01

	)

46 
	#MAP_PRIVATE
 0x02

	)

47 #ifde‡
__USE_MISC


48 
	#MAP_TYPE
 0x0‡

	)

52 
	#MAP_FIXED
 0x10

	)

53 #ifde‡
__USE_MISC


54 
	#MAP_FILE
 0

	)

55 #ifde‡
__MAP_ANONYMOUS


56 
	#MAP_ANONYMOUS
 
__MAP_ANONYMOUS


	)

58 
	#MAP_ANONYMOUS
 0x20

	)

60 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

62 
	#MAP_HUGE_SHIFT
 26

	)

63 
	#MAP_HUGE_MASK
 0x3f

	)

67 
	#MS_ASYNC
 1

	)

68 
	#MS_SYNC
 4

	)

69 
	#MS_INVALIDATE
 2

	)

72 #ifde‡
__USE_GNU


73 
	#MREMAP_MAYMOVE
 1

	)

74 
	#MREMAP_FIXED
 2

	)

78 #ifde‡
__USE_MISC


79 
	#MADV_NORMAL
 0

	)

80 
	#MADV_RANDOM
 1

	)

81 
	#MADV_SEQUENTIAL
 2

	)

82 
	#MADV_WILLNEED
 3

	)

83 
	#MADV_DONTNEED
 4

	)

84 
	#MADV_REMOVE
 9

	)

85 
	#MADV_DONTFORK
 10

	)

86 
	#MADV_DOFORK
 11

	)

87 
	#MADV_MERGEABLE
 12

	)

88 
	#MADV_UNMERGEABLE
 13

	)

89 
	#MADV_HUGEPAGE
 14

	)

90 
	#MADV_NOHUGEPAGE
 15

	)

91 
	#MADV_DONTDUMP
 16

	)

93 
	#MADV_DODUMP
 17

	)

94 
	#MADV_HWPOISON
 100

	)

98 #ifde‡
__USE_XOPEN2K


99 
	#POSIX_MADV_NORMAL
 0

	)

100 
	#POSIX_MADV_RANDOM
 1

	)

101 
	#POSIX_MADV_SEQUENTIAL
 2

	)

102 
	#POSIX_MADV_WILLNEED
 3

	)

103 
	#POSIX_MADV_DONTNEED
 4

	)

107 #i‚de‡
MCL_CURRENT


108 
	#MCL_CURRENT
 1

	)

109 
	#MCL_FUTURE
 2

	)

111 
	#MCL_ONFAULT
 4

	)

	@/usr/include/bits/posix1_lim.h

24 #i‚def 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

31 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

34 
	#_POSIX_AIO_MAX
 1

	)

37 
	#_POSIX_ARG_MAX
 4096

	)

40 #ifde‡
__USE_XOPEN2K


41 
	#_POSIX_CHILD_MAX
 25

	)

43 
	#_POSIX_CHILD_MAX
 6

	)

47 
	#_POSIX_DELAYTIMER_MAX
 32

	)

51 
	#_POSIX_HOST_NAME_MAX
 255

	)

54 
	#_POSIX_LINK_MAX
 8

	)

57 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

60 
	#_POSIX_MAX_CANON
 255

	)

64 
	#_POSIX_MAX_INPUT
 255

	)

67 
	#_POSIX_MQ_OPEN_MAX
 8

	)

70 
	#_POSIX_MQ_PRIO_MAX
 32

	)

73 
	#_POSIX_NAME_MAX
 14

	)

76 #ifde‡
__USE_XOPEN2K


77 
	#_POSIX_NGROUPS_MAX
 8

	)

79 
	#_POSIX_NGROUPS_MAX
 0

	)

83 #ifde‡
__USE_XOPEN2K


84 
	#_POSIX_OPEN_MAX
 20

	)

86 
	#_POSIX_OPEN_MAX
 16

	)

89 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

96 
	#_POSIX_PATH_MAX
 256

	)

99 
	#_POSIX_PIPE_BUF
 512

	)

103 
	#_POSIX_RE_DUP_MAX
 255

	)

106 
	#_POSIX_RTSIG_MAX
 8

	)

109 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

112 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

115 
	#_POSIX_SIGQUEUE_MAX
 32

	)

118 
	#_POSIX_SSIZE_MAX
 32767

	)

121 
	#_POSIX_STREAM_MAX
 8

	)

124 
	#_POSIX_SYMLINK_MAX
 255

	)

128 
	#_POSIX_SYMLOOP_MAX
 8

	)

131 
	#_POSIX_TIMER_MAX
 32

	)

134 
	#_POSIX_TTY_NAME_MAX
 9

	)

137 #ifde‡
__USE_XOPEN2K


138 
	#_POSIX_TZNAME_MAX
 6

	)

140 
	#_POSIX_TZNAME_MAX
 3

	)

143 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


145 
	#_POSIX_QLIMIT
 1

	)

149 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

152 
	#_POSIX_UIO_MAXIOV
 16

	)

156 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

160 
	~<bôs/loˇl_lim.h
>

163 #i‚def 
SSIZE_MAX


164 
	#SSIZE_MAX
 
LONG_MAX


	)

171 #i‚def 
NGROUPS_MAX


172 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

22 #i‚def 
_BITS_POSIX2_LIM_H


23 
	#_BITS_POSIX2_LIM_H
 1

	)

27 
	#_POSIX2_BC_BASE_MAX
 99

	)

30 
	#_POSIX2_BC_DIM_MAX
 2048

	)

33 
	#_POSIX2_BC_SCALE_MAX
 99

	)

36 
	#_POSIX2_BC_STRING_MAX
 1000

	)

40 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

44 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

47 
	#_POSIX2_LINE_MAX
 2048

	)

51 
	#_POSIX2_RE_DUP_MAX
 255

	)

55 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

62 #i‚def 
BC_BASE_MAX


63 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

65 #i‚def 
BC_DIM_MAX


66 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

68 #i‚def 
BC_SCALE_MAX


69 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

71 #i‚def 
BC_STRING_MAX


72 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

74 #i‚def 
COLL_WEIGHTS_MAX


75 
	#COLL_WEIGHTS_MAX
 255

	)

77 #i‚def 
EXPR_NEST_MAX


78 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

80 #i‚def 
LINE_MAX


81 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

83 #i‚def 
CHARCLASS_NAME_MAX


84 
	#CHARCLASS_NAME_MAX
 2048

	)

88 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/sigaction.h

19 #i‚de‡
_SIGNAL_H


24 
	ssiga˘i⁄


27 #ifde‡
__USE_POSIX199309


31 
__sigh™dÀr_t
 
	mß_h™dÀr
;

33 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

35 
	m__siga˘i⁄_h™dÀr
;

36 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

37 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

39 
__sigh™dÀr_t
 
	mß_h™dÀr
;

43 
__sig£t_t
 
	mß_mask
;

46 
	mß_Êags
;

49 (*
	mß_ª°‹î
) ();

53 
	#SA_NOCLDSTOP
 1

	)

54 
	#SA_NOCLDWAIT
 2

	)

55 
	#SA_SIGINFO
 4

	)

57 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


58 
	#SA_ONSTACK
 0x08000000

	)

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


61 
	#SA_RESTART
 0x10000000

	)

62 
	#SA_NODEFER
 0x40000000

	)

64 
	#SA_RESETHAND
 0x80000000

	)

66 #ifde‡
__USE_MISC


67 
	#SA_INTERRUPT
 0x20000000

	)

70 
	#SA_NOMASK
 
SA_NODEFER


	)

71 
	#SA_ONESHOT
 
SA_RESETHAND


	)

72 
	#SA_STACK
 
SA_ONSTACK


	)

76 
	#SIG_BLOCK
 0

	)

77 
	#SIG_UNBLOCK
 1

	)

78 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

18 #i‚de‡
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


25 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

26 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

27 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

29 
	s_Âx_sw_byãs


31 
__uöt32_t
 
	mmagic1
;

32 
__uöt32_t
 
	mexãnded_size
;

33 
__uöt64_t
 
	mx°©e_bv
;

34 
__uöt32_t
 
	mx°©e_size
;

35 
__uöt32_t
 
	m∑ddög
[7];

38 
	s_Âªg


40 
	msignifiˇnd
[4];

41 
	mexp⁄ít
;

44 
	s_Âxªg


46 
	msignifiˇnd
[4];

47 
	mexp⁄ít
;

48 
	m∑ddög
[3];

51 
	s_xmmªg


53 
__uöt32_t
 
	mñemít
[4];

58 #i‚de‡
__x86_64__


60 
	s_Â°©e


63 
__uöt32_t
 
	mcw
;

64 
__uöt32_t
 
	msw
;

65 
__uöt32_t
 
	mèg
;

66 
__uöt32_t
 
	mùoff
;

67 
__uöt32_t
 
	mcs£l
;

68 
__uöt32_t
 
	md©aoff
;

69 
__uöt32_t
 
	md©a£l
;

70 
_Âªg
 
	m_°
[8];

71 
	m°©us
;

72 
	mmagic
;

75 
__uöt32_t
 
	m_fx§_ív
[6];

76 
__uöt32_t
 
	mmxc§
;

77 
__uöt32_t
 
	mª£rved
;

78 
_Âxªg
 
	m_fx§_°
[8];

79 
_xmmªg
 
	m_xmm
[8];

80 
__uöt32_t
 
	m∑ddög
[56];

83 #i‚de‡
sigc⁄ãxt_°ru˘


88 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

91 
	#X86_FXSR_MAGIC
 0x0000

	)

93 
	ssigc⁄ãxt


95 
	mgs
, 
	m__gsh
;

96 
	mfs
, 
	m__fsh
;

97 
	mes
, 
	m__esh
;

98 
	mds
, 
	m__dsh
;

99 
	medi
;

100 
	mesi
;

101 
	mebp
;

102 
	me•
;

103 
	mebx
;

104 
	medx
;

105 
	mecx
;

106 
	móx
;

107 
	må≠no
;

108 
	mîr
;

109 
	meù
;

110 
	mcs
, 
	m__csh
;

111 
	meÊags
;

112 
	me•_©_sig«l
;

113 
	mss
, 
	m__ssh
;

114 
_Â°©e
 * 
	mÂ°©e
;

115 
	mﬁdmask
;

116 
	m¸2
;

121 
	s_Â°©e


124 
__uöt16_t
 
	mcwd
;

125 
__uöt16_t
 
	mswd
;

126 
__uöt16_t
 
	m·w
;

127 
__uöt16_t
 
	mf›
;

128 
__uöt64_t
 
	mrù
;

129 
__uöt64_t
 
	mrdp
;

130 
__uöt32_t
 
	mmxc§
;

131 
__uöt32_t
 
	mmx¸_mask
;

132 
_Âxªg
 
	m_°
[8];

133 
_xmmªg
 
	m_xmm
[16];

134 
__uöt32_t
 
	m∑ddög
[24];

137 
	ssigc⁄ãxt


139 
__uöt64_t
 
	mr8
;

140 
__uöt64_t
 
	mr9
;

141 
__uöt64_t
 
	mr10
;

142 
__uöt64_t
 
	mr11
;

143 
__uöt64_t
 
	mr12
;

144 
__uöt64_t
 
	mr13
;

145 
__uöt64_t
 
	mr14
;

146 
__uöt64_t
 
	mr15
;

147 
__uöt64_t
 
	mrdi
;

148 
__uöt64_t
 
	mrsi
;

149 
__uöt64_t
 
	mrbp
;

150 
__uöt64_t
 
	mrbx
;

151 
__uöt64_t
 
	mrdx
;

152 
__uöt64_t
 
	møx
;

153 
__uöt64_t
 
	mrcx
;

154 
__uöt64_t
 
	mr•
;

155 
__uöt64_t
 
	mrù
;

156 
__uöt64_t
 
	meÊags
;

157 
	mcs
;

158 
	mgs
;

159 
	mfs
;

160 
	m__∑d0
;

161 
__uöt64_t
 
	mîr
;

162 
__uöt64_t
 
	må≠no
;

163 
__uöt64_t
 
	mﬁdmask
;

164 
__uöt64_t
 
	m¸2
;

165 
__exãnsi⁄__
 union

167 
_Â°©e
 * 
	mÂ°©e
;

168 
__uöt64_t
 
	m__Â°©e_w‹d
;

170 
__uöt64_t
 
	m__ª£rved1
 [8];

175 
	s_xßve_hdr


177 
__uöt64_t
 
	mx°©e_bv
;

178 
__uöt64_t
 
	mª£rved1
[2];

179 
__uöt64_t
 
	mª£rved2
[5];

182 
	s_ymmh_°©e


184 
__uöt32_t
 
	mymmh_•a˚
[64];

187 
	s_x°©e


189 
_Â°©e
 
	mÂ°©e
;

190 
_xßve_hdr
 
	mx°©e_hdr
;

191 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/bits/siginfo.h

19 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

20 && !
deföed
 
	g__√ed_sigevít_t


24 
	~<bôs/w‹dsize.h
>

26 #i‡(!
deföed
 
__have_sigvÆ_t
 \

27 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

28 || 
deföed
 
	g__√ed_sigevít_t
))

29 
	#__have_sigvÆ_t
 1

	)

32 
	usigvÆ


34 
	msivÆ_öt
;

35 *
	msivÆ_±r
;

36 } 
	tsigvÆ_t
;

39 #i‡(!
deföed
 
__have_sigöfo_t
 \

40 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

41 
	#__have_sigöfo_t
 1

	)

43 
	#__SI_MAX_SIZE
 128

	)

44 #i‡
__WORDSIZE
 == 64

45 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

47 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

50 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

55 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

56 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

58 
__˛ock_t
 
	t__sigchld_˛ock_t
;

59 
	#__SI_ALIGNMENT


	)

64 
si_signo
;

65 
si_î∫o
;

67 
si_code
;

71 
_∑d
[
__SI_PAD_SIZE
];

76 
__pid_t
 
si_pid
;

77 
__uid_t
 
si_uid
;

78 } 
_kûl
;

83 
si_tid
;

84 
si_ovîrun
;

85 
sigvÆ_t
 
si_sigvÆ
;

86 } 
_timî
;

91 
__pid_t
 
si_pid
;

92 
__uid_t
 
si_uid
;

93 
sigvÆ_t
 
si_sigvÆ
;

94 } 
_π
;

99 
__pid_t
 
si_pid
;

100 
__uid_t
 
si_uid
;

101 
si_°©us
;

102 
__sigchld_˛ock_t
 
si_utime
;

103 
__sigchld_˛ock_t
 
si_°ime
;

104 } 
_sigchld
;

109 *
si_addr
;

110 
si_addr_lsb
;

113 *
_lowî
;

114 *
_uµî
;

115 } 
si_addr_bnd
;

116 } 
_sigÁu…
;

121 
si_b™d
;

122 
si_fd
;

123 } 
_sigpﬁl
;

128 *
_ˇŒ_addr
;

129 
_sysˇŒ
;

130 
_¨ch
;

131 } 
_sigsys
;

132 } 
_sifõlds
;

133 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

137 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

138 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

139 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

140 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

141 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

142 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

143 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

144 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

145 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

146 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

147 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

148 
	#si_addr_lsb
 
_sifõlds
.
_sigÁu…
.
si_addr_lsb


	)

149 
	#si_lowî
 
_sifõlds
.
_sigÁu…
.
si_addr_bnd
.
_lowî


	)

150 
	#si_uµî
 
_sifõlds
.
_sigÁu…
.
si_addr_bnd
.
_uµî


	)

151 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

152 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

153 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

154 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

155 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

162 
SI_ASYNCNL
 = -60,

163 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

164 
SI_TKILL
 = -6,

165 
	#SI_TKILL
 
SI_TKILL


	)

166 
SI_SIGIO
,

167 
	#SI_SIGIO
 
SI_SIGIO


	)

168 
SI_ASYNCIO
,

169 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

170 
SI_MESGQ
,

171 
	#SI_MESGQ
 
SI_MESGQ


	)

172 
SI_TIMER
,

173 
	#SI_TIMER
 
SI_TIMER


	)

174 
SI_QUEUE
,

175 
	#SI_QUEUE
 
SI_QUEUE


	)

176 
SI_USER
,

177 
	#SI_USER
 
SI_USER


	)

178 
SI_KERNEL
 = 0x80

179 
	#SI_KERNEL
 
SI_KERNEL


	)

183 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


187 
ILL_ILLOPC
 = 1,

188 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

189 
ILL_ILLOPN
,

190 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

191 
ILL_ILLADR
,

192 
	#ILL_ILLADR
 
ILL_ILLADR


	)

193 
ILL_ILLTRP
,

194 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

195 
ILL_PRVOPC
,

196 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

197 
ILL_PRVREG
,

198 
	#ILL_PRVREG
 
ILL_PRVREG


	)

199 
ILL_COPROC
,

200 
	#ILL_COPROC
 
ILL_COPROC


	)

201 
ILL_BADSTK


202 
	#ILL_BADSTK
 
ILL_BADSTK


	)

208 
FPE_INTDIV
 = 1,

209 
	#FPE_INTDIV
 
FPE_INTDIV


	)

210 
FPE_INTOVF
,

211 
	#FPE_INTOVF
 
FPE_INTOVF


	)

212 
FPE_FLTDIV
,

213 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

214 
FPE_FLTOVF
,

215 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

216 
FPE_FLTUND
,

217 
	#FPE_FLTUND
 
FPE_FLTUND


	)

218 
FPE_FLTRES
,

219 
	#FPE_FLTRES
 
FPE_FLTRES


	)

220 
FPE_FLTINV
,

221 
	#FPE_FLTINV
 
FPE_FLTINV


	)

222 
FPE_FLTSUB


223 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

229 
SEGV_MAPERR
 = 1,

230 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

231 
SEGV_ACCERR


232 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

238 
BUS_ADRALN
 = 1,

239 
	#BUS_ADRALN
 
BUS_ADRALN


	)

240 
BUS_ADRERR
,

241 
	#BUS_ADRERR
 
BUS_ADRERR


	)

242 
BUS_OBJERR
,

243 
	#BUS_OBJERR
 
BUS_OBJERR


	)

244 
BUS_MCEERR_AR
,

245 
	#BUS_MCEERR_AR
 
BUS_MCEERR_AR


	)

246 
BUS_MCEERR_AO


247 
	#BUS_MCEERR_AO
 
BUS_MCEERR_AO


	)

251 #ifde‡
__USE_XOPEN_EXTENDED


255 
TRAP_BRKPT
 = 1,

256 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

257 
TRAP_TRACE


258 
	#TRAP_TRACE
 
TRAP_TRACE


	)

262 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


266 
CLD_EXITED
 = 1,

267 
	#CLD_EXITED
 
CLD_EXITED


	)

268 
CLD_KILLED
,

269 
	#CLD_KILLED
 
CLD_KILLED


	)

270 
CLD_DUMPED
,

271 
	#CLD_DUMPED
 
CLD_DUMPED


	)

272 
CLD_TRAPPED
,

273 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

274 
CLD_STOPPED
,

275 
	#CLD_STOPPED
 
CLD_STOPPED


	)

276 
CLD_CONTINUED


277 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

283 
POLL_IN
 = 1,

284 
	#POLL_IN
 
POLL_IN


	)

285 
POLL_OUT
,

286 
	#POLL_OUT
 
POLL_OUT


	)

287 
POLL_MSG
,

288 
	#POLL_MSG
 
POLL_MSG


	)

289 
POLL_ERR
,

290 
	#POLL_ERR
 
POLL_ERR


	)

291 
POLL_PRI
,

292 
	#POLL_PRI
 
POLL_PRI


	)

293 
POLL_HUP


294 
	#POLL_HUP
 
POLL_HUP


	)

298 #unde‡
__√ed_sigöfo_t


302 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

303 && !
deföed
 
__have_sigevít_t


304 
	#__have_sigevít_t
 1

	)

307 
	#__SIGEV_MAX_SIZE
 64

	)

308 #i‡
__WORDSIZE
 == 64

309 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

311 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

315 #i‚de‡
__have_±hªad_©å_t


316 
±hªad_©å_t
 
	t±hªad_©å_t
;

317 
	#__have_±hªad_©å_t
 1

	)

320 
	ssigevít


322 
sigvÆ_t
 
sigev_vÆue
;

323 
sigev_signo
;

324 
sigev_nŸify
;

328 
_∑d
[
__SIGEV_PAD_SIZE
];

332 
__pid_t
 
_tid
;

336 (*
_fun˘i⁄
Ë(
sigvÆ_t
);

337 
±hªad_©å_t
 *
_©åibuã
;

338 } 
_sigev_thªad
;

339 } 
_sigev_un
;

340 } 
	tsigevít_t
;

343 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

344 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

349 
SIGEV_SIGNAL
 = 0,

350 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

351 
SIGEV_NONE
,

352 
	#SIGEV_NONE
 
SIGEV_NONE


	)

353 
SIGEV_THREAD
,

354 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

356 
SIGEV_THREAD_ID
 = 4

357 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

19 #ifdef 
_SIGNAL_H


22 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

23 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

24 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

26 #ifde‡
__USE_UNIX98


27 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

32 
	#SIGHUP
 1

	)

33 
	#SIGINT
 2

	)

34 
	#SIGQUIT
 3

	)

35 
	#SIGILL
 4

	)

36 
	#SIGTRAP
 5

	)

37 
	#SIGABRT
 6

	)

38 
	#SIGIOT
 6

	)

39 
	#SIGBUS
 7

	)

40 
	#SIGFPE
 8

	)

41 
	#SIGKILL
 9

	)

42 
	#SIGUSR1
 10

	)

43 
	#SIGSEGV
 11

	)

44 
	#SIGUSR2
 12

	)

45 
	#SIGPIPE
 13

	)

46 
	#SIGALRM
 14

	)

47 
	#SIGTERM
 15

	)

48 
	#SIGSTKFLT
 16

	)

49 
	#SIGCLD
 
SIGCHLD


	)

50 
	#SIGCHLD
 17

	)

51 
	#SIGCONT
 18

	)

52 
	#SIGSTOP
 19

	)

53 
	#SIGTSTP
 20

	)

54 
	#SIGTTIN
 21

	)

55 
	#SIGTTOU
 22

	)

56 
	#SIGURG
 23

	)

57 
	#SIGXCPU
 24

	)

58 
	#SIGXFSZ
 25

	)

59 
	#SIGVTALRM
 26

	)

60 
	#SIGPROF
 27

	)

61 
	#SIGWINCH
 28

	)

62 
	#SIGPOLL
 
SIGIO


	)

63 
	#SIGIO
 29

	)

64 
	#SIGPWR
 30

	)

65 
	#SIGSYS
 31

	)

66 
	#SIGUNUSED
 31

	)

68 
	#_NSIG
 65

	)

71 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

72 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

76 
	#__SIGRTMIN
 32

	)

77 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

19 #i‚def 
_SIGSET_H_ty≥s


20 
	#_SIGSET_H_ty≥s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__vÆ
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


42 
	#_SIGSET_H_‚s
 1

	)

44 #i‚de‡
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

49 
	#__sigmask
(
sig
) \

50 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

53 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

55 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfûl£t
(
£t
) \

62 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifde‡
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

73 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

75 !
__ªt
 && --
__˙t
 >= 0) \

76 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

77 
__ªt
 =0; }))

	)

78 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

79 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de°
 = (
de°
); \

81 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

82 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

83 --
__˙t
 >= 0) \

84 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

85 & 
__right
->
__vÆ
[
__˙t
]); \

86 0; }))

	)

87 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

88 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de°
 = (
de°
); \

90 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

91 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

92 --
__˙t
 >= 0) \

93 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

94 | 
__right
->
__vÆ
[
__˙t
]); \

95 0; }))

	)

102 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigdñ£t
 (
__sig£t_t
 *, );

106 #ifde‡
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

118 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

120 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

19 #i‚de‡
_SIGNAL_H


25 
	ssig°ack


27 *
	mss_•
;

28 
	mss_⁄°ack
;

35 
	mSS_ONSTACK
 = 1,

36 
	#SS_ONSTACK
 
SS_ONSTACK


	)

37 
	mSS_DISABLE


38 
	#SS_DISABLE
 
SS_DISABLE


	)

42 
	#MINSIGSTKSZ
 2048

	)

45 
	#SIGSTKSZ
 8192

	)

49 
	ssigÆt°ack


51 *
	mss_•
;

52 
	mss_Êags
;

53 
size_t
 
	mss_size
;

54 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

19 #i‚de‡
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


30 
	$±hªad_sigmask
 (
__how
,

31 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

32 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

35 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

37 #ifde‡
__USE_GNU


39 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

40 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/socket.h

19 #i‚de‡
__BITS_SOCKET_H


20 
	#__BITS_SOCKET_H


	)

22 #i‚de‡
_SYS_SOCKET_H


26 
	#__√ed_size_t


	)

27 
	~<°ddef.h
>

29 
	~<sys/ty≥s.h
>

32 #i‚de‡
__sockÀn_t_deföed


33 
__sockÀn_t
 
	tsockÀn_t
;

34 
	#__sockÀn_t_deföed


	)

38 
	~<bôs/sockë_ty≥.h
>

41 
	#PF_UNSPEC
 0

	)

42 
	#PF_LOCAL
 1

	)

43 
	#PF_UNIX
 
PF_LOCAL


	)

44 
	#PF_FILE
 
PF_LOCAL


	)

45 
	#PF_INET
 2

	)

46 
	#PF_AX25
 3

	)

47 
	#PF_IPX
 4

	)

48 
	#PF_APPLETALK
 5

	)

49 
	#PF_NETROM
 6

	)

50 
	#PF_BRIDGE
 7

	)

51 
	#PF_ATMPVC
 8

	)

52 
	#PF_X25
 9

	)

53 
	#PF_INET6
 10

	)

54 
	#PF_ROSE
 11

	)

55 
	#PF_DEC√t
 12

	)

56 
	#PF_NETBEUI
 13

	)

57 
	#PF_SECURITY
 14

	)

58 
	#PF_KEY
 15

	)

59 
	#PF_NETLINK
 16

	)

60 
	#PF_ROUTE
 
PF_NETLINK


	)

61 
	#PF_PACKET
 17

	)

62 
	#PF_ASH
 18

	)

63 
	#PF_ECONET
 19

	)

64 
	#PF_ATMSVC
 20

	)

65 
	#PF_RDS
 21

	)

66 
	#PF_SNA
 22

	)

67 
	#PF_IRDA
 23

	)

68 
	#PF_PPPOX
 24

	)

69 
	#PF_WANPIPE
 25

	)

70 
	#PF_LLC
 26

	)

71 
	#PF_IB
 27

	)

72 
	#PF_MPLS
 28

	)

73 
	#PF_CAN
 29

	)

74 
	#PF_TIPC
 30

	)

75 
	#PF_BLUETOOTH
 31

	)

76 
	#PF_IUCV
 32

	)

77 
	#PF_RXRPC
 33

	)

78 
	#PF_ISDN
 34

	)

79 
	#PF_PHONET
 35

	)

80 
	#PF_IEEE802154
 36

	)

81 
	#PF_CAIF
 37

	)

82 
	#PF_ALG
 38

	)

83 
	#PF_NFC
 39

	)

84 
	#PF_VSOCK
 40

	)

85 
	#PF_MAX
 41

	)

88 
	#AF_UNSPEC
 
PF_UNSPEC


	)

89 
	#AF_LOCAL
 
PF_LOCAL


	)

90 
	#AF_UNIX
 
PF_UNIX


	)

91 
	#AF_FILE
 
PF_FILE


	)

92 
	#AF_INET
 
PF_INET


	)

93 
	#AF_AX25
 
PF_AX25


	)

94 
	#AF_IPX
 
PF_IPX


	)

95 
	#AF_APPLETALK
 
PF_APPLETALK


	)

96 
	#AF_NETROM
 
PF_NETROM


	)

97 
	#AF_BRIDGE
 
PF_BRIDGE


	)

98 
	#AF_ATMPVC
 
PF_ATMPVC


	)

99 
	#AF_X25
 
PF_X25


	)

100 
	#AF_INET6
 
PF_INET6


	)

101 
	#AF_ROSE
 
PF_ROSE


	)

102 
	#AF_DEC√t
 
PF_DEC√t


	)

103 
	#AF_NETBEUI
 
PF_NETBEUI


	)

104 
	#AF_SECURITY
 
PF_SECURITY


	)

105 
	#AF_KEY
 
PF_KEY


	)

106 
	#AF_NETLINK
 
PF_NETLINK


	)

107 
	#AF_ROUTE
 
PF_ROUTE


	)

108 
	#AF_PACKET
 
PF_PACKET


	)

109 
	#AF_ASH
 
PF_ASH


	)

110 
	#AF_ECONET
 
PF_ECONET


	)

111 
	#AF_ATMSVC
 
PF_ATMSVC


	)

112 
	#AF_RDS
 
PF_RDS


	)

113 
	#AF_SNA
 
PF_SNA


	)

114 
	#AF_IRDA
 
PF_IRDA


	)

115 
	#AF_PPPOX
 
PF_PPPOX


	)

116 
	#AF_WANPIPE
 
PF_WANPIPE


	)

117 
	#AF_LLC
 
PF_LLC


	)

118 
	#AF_IB
 
PF_IB


	)

119 
	#AF_MPLS
 
PF_MPLS


	)

120 
	#AF_CAN
 
PF_CAN


	)

121 
	#AF_TIPC
 
PF_TIPC


	)

122 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

123 
	#AF_IUCV
 
PF_IUCV


	)

124 
	#AF_RXRPC
 
PF_RXRPC


	)

125 
	#AF_ISDN
 
PF_ISDN


	)

126 
	#AF_PHONET
 
PF_PHONET


	)

127 
	#AF_IEEE802154
 
PF_IEEE802154


	)

128 
	#AF_CAIF
 
PF_CAIF


	)

129 
	#AF_ALG
 
PF_ALG


	)

130 
	#AF_NFC
 
PF_NFC


	)

131 
	#AF_VSOCK
 
PF_VSOCK


	)

132 
	#AF_MAX
 
PF_MAX


	)

138 
	#SOL_RAW
 255

	)

139 
	#SOL_DECNET
 261

	)

140 
	#SOL_X25
 262

	)

141 
	#SOL_PACKET
 263

	)

142 
	#SOL_ATM
 264

	)

143 
	#SOL_AAL
 265

	)

144 
	#SOL_IRDA
 266

	)

147 
	#SOMAXCONN
 128

	)

150 
	~<bôs/sockaddr.h
>

153 
	ssockaddr


155 
__SOCKADDR_COMMON
 (
ß_
);

156 
	mß_d©a
[14];

162 
	#__ss_Æig¡y≥
 

	)

163 
	#_SS_PADSIZE
 \

164 (
_SS_SIZE
 - 
__SOCKADDR_COMMON_SIZE
 -  (
__ss_Æig¡y≥
))

	)

166 
	ssockaddr_°‹age


168 
__SOCKADDR_COMMON
 (
ss_
);

169 
	m__ss_∑ddög
[
_SS_PADSIZE
];

170 
__ss_Æig¡y≥
 
	m__ss_Æign
;

177 
	mMSG_OOB
 = 0x01,

178 
	#MSG_OOB
 
MSG_OOB


	)

179 
	mMSG_PEEK
 = 0x02,

180 
	#MSG_PEEK
 
MSG_PEEK


	)

181 
	mMSG_DONTROUTE
 = 0x04,

182 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

183 #ifde‡
__USE_GNU


185 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

186 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

188 
	mMSG_CTRUNC
 = 0x08,

189 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

190 
	mMSG_PROXY
 = 0x10,

191 
	#MSG_PROXY
 
MSG_PROXY


	)

192 
	mMSG_TRUNC
 = 0x20,

193 
	#MSG_TRUNC
 
MSG_TRUNC


	)

194 
	mMSG_DONTWAIT
 = 0x40,

195 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

196 
	mMSG_EOR
 = 0x80,

197 
	#MSG_EOR
 
MSG_EOR


	)

198 
	mMSG_WAITALL
 = 0x100,

199 
	#MSG_WAITALL
 
MSG_WAITALL


	)

200 
	mMSG_FIN
 = 0x200,

201 
	#MSG_FIN
 
MSG_FIN


	)

202 
	mMSG_SYN
 = 0x400,

203 
	#MSG_SYN
 
MSG_SYN


	)

204 
	mMSG_CONFIRM
 = 0x800,

205 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

206 
	mMSG_RST
 = 0x1000,

207 
	#MSG_RST
 
MSG_RST


	)

208 
	mMSG_ERRQUEUE
 = 0x2000,

209 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

210 
	mMSG_NOSIGNAL
 = 0x4000,

211 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

212 
	mMSG_MORE
 = 0x8000,

213 
	#MSG_MORE
 
MSG_MORE


	)

214 
	mMSG_WAITFORONE
 = 0x10000,

215 
	#MSG_WAITFORONE
 
MSG_WAITFORONE


	)

216 
	mMSG_FASTOPEN
 = 0x20000000,

217 
	#MSG_FASTOPEN
 
MSG_FASTOPEN


	)

219 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

222 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

228 
	smsghdr


230 *
	mmsg_«me
;

231 
sockÀn_t
 
	mmsg_«mñí
;

233 
iovec
 *
	mmsg_iov
;

234 
size_t
 
	mmsg_iovÀn
;

236 *
	mmsg_c⁄åﬁ
;

237 
size_t
 
	mmsg_c⁄åﬁÀn
;

242 
	mmsg_Êags
;

246 
	scmsghdr


248 
size_t
 
	mcmsg_Àn
;

253 
	mcmsg_Àvñ
;

254 
	mcmsg_ty≥
;

255 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

256 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

261 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

262 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

264 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

266 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

267 
	#CMSG_FIRSTHDR
(
mhdr
) \

268 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

269 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

270 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

271 & (
size_t
Ë~( (size_tË- 1))

	)

272 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

273 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

274 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

276 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

277 
cmsghdr
 *
__cmsg
Ë
__THROW
;

278 #ifde‡
__USE_EXTERN_INLINES


279 #i‚de‡
_EXTERN_INLINE


280 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

282 
_EXTERN_INLINE
 
cmsghdr
 *

283 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

285 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

287  (
cmsghdr
 *) 0;

289 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

290 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

291 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


292 + 
__mhdr
->
msg_c⁄åﬁÀn
)

293 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

294 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

296  (
cmsghdr
 *) 0;

297  
__cmsg
;

298 
	}
}

305 
	mSCM_RIGHTS
 = 0x01

306 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

307 #ifde‡
__USE_GNU


308 , 
	mSCM_CREDENTIALS
 = 0x02

309 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

313 #ifde‡
__USE_GNU


315 
	su¸ed


317 
pid_t
 
	mpid
;

318 
uid_t
 
	muid
;

319 
gid_t
 
	mgid
;

324 #i‚de‡
__USE_MISC


325 #i‚de‡
FIOGETOWN


326 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

328 #i‚de‡
FIOSETOWN


329 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

331 #i‚de‡
SIOCATMARK


332 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

334 #i‚de‡
SIOCGPGRP


335 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

337 #i‚de‡
SIOCGSTAMP


338 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

340 #i‚de‡
SIOCGSTAMPNS


341 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

343 #i‚de‡
SIOCSPGRP


344 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

349 
	~<asm/sockë.h
>

351 #i‚de‡
__USE_MISC


352 #ifde‡
__SYS_SOCKET_H_undef_FIOGETOWN


353 #unde‡
__SYS_SOCKET_H_undef_FIOGETOWN


354 #unde‡
FIOGETOWN


356 #ifde‡
__SYS_SOCKET_H_undef_FIOSETOWN


357 #unde‡
__SYS_SOCKET_H_undef_FIOSETOWN


358 #unde‡
FIOSETOWN


360 #ifde‡
__SYS_SOCKET_H_undef_SIOCATMARK


361 #unde‡
__SYS_SOCKET_H_undef_SIOCATMARK


362 #unde‡
SIOCATMARK


364 #ifde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


365 #unde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


366 #unde‡
SIOCGPGRP


368 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


369 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


370 #unde‡
SIOCGSTAMP


372 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


373 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


374 #unde‡
SIOCGSTAMPNS


376 #ifde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


377 #unde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


378 #unde‡
SIOCSPGRP


383 
	slögî


385 
	ml_⁄off
;

386 
	ml_lögî
;

	@/usr/include/bits/socket2.h

19 #i‚de‡
_SYS_SOCKET_H


23 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

24 
__Êags
);

25 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

26 
__Êags
), 
ªcv
);

27 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

29 
__Êags
), 
__ªcv_chk
)

30 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

33 
__f‹tify_fun˘i⁄
 
ssize_t


34 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

39  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

41 i‡(
__n
 > 
	`__bos0
 (
__buf
))

42  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

44  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

45 
	}
}

47 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

48 
size_t
 
__buÊí
, 
__Êags
,

49 
__SOCKADDR_ARG
 
__addr
,

50 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

51 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

52 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

53 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

54 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

55 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

56 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

57 
size_t
 
__buÊí
, 
__Êags
,

58 
__SOCKADDR_ARG
 
__addr
,

59 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

60 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

63 
__f‹tify_fun˘i⁄
 
ssize_t


64 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

65 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

67 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

70  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

71 
__addr
, 
__addr_Àn
);

72 i‡(
__n
 > 
	`__bos0
 (
__buf
))

73  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

74 
__addr
, 
__addr_Àn
);

76  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

77 
	}
}

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_SETOFFSET
 0x0100

	)

64 
	#ADJ_MICRO
 0x1000

	)

65 
	#ADJ_NANO
 0x2000

	)

66 
	#ADJ_TICK
 0x4000

	)

67 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

68 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

71 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

72 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

73 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

74 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

75 
	#MOD_STATUS
 
ADJ_STATUS


	)

76 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

77 
	#MOD_CLKB
 
ADJ_TICK


	)

78 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

79 
	#MOD_TAI
 
ADJ_TAI


	)

80 
	#MOD_MICRO
 
ADJ_MICRO


	)

81 
	#MOD_NANO
 
ADJ_NANO


	)

85 
	#STA_PLL
 0x0001

	)

86 
	#STA_PPSFREQ
 0x0002

	)

87 
	#STA_PPSTIME
 0x0004

	)

88 
	#STA_FLL
 0x0008

	)

90 
	#STA_INS
 0x0010

	)

91 
	#STA_DEL
 0x0020

	)

92 
	#STA_UNSYNC
 0x0040

	)

93 
	#STA_FREQHOLD
 0x0080

	)

95 
	#STA_PPSSIGNAL
 0x0100

	)

96 
	#STA_PPSJITTER
 0x0200

	)

97 
	#STA_PPSWANDER
 0x0400

	)

98 
	#STA_PPSERROR
 0x0800

	)

100 
	#STA_CLOCKERR
 0x1000

	)

101 
	#STA_NANO
 0x2000

	)

102 
	#STA_MODE
 0x4000

	)

103 
	#STA_CLK
 0x8000

	)

106 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

107 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

74 
	#__CPU_MASK_TYPE
 
__SYSCALL_ULONG_TYPE


	)

76 #ifde‡
__x86_64__


80 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

83 
	#__INO_T_MATCHES_INO64_T
 1

	)

87 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/xopen_lim.h

29 #i‚de‡
_XOPEN_LIM_H


30 
	#_XOPEN_LIM_H
 1

	)

32 
	#__√ed_IOV_MAX


	)

33 
	~<bôs/°dio_lim.h
>

65 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

70 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

73 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

76 
	#NL_MSGMAX
 
INT_MAX


	)

80 
	#NL_NMAX
 
INT_MAX


	)

83 
	#NL_SETMAX
 
INT_MAX


	)

86 
	#NL_TEXTMAX
 
INT_MAX


	)

89 
	#NZERO
 20

	)

93 #ifde‡
INT_MAX


94 #i‡
INT_MAX
 == 32767

95 
	#WORD_BIT
 16

	)

97 #i‡
INT_MAX
 == 2147483647

98 
	#WORD_BIT
 32

	)

101 
	#WORD_BIT
 64

	)

104 #ñi‡
deföed
 
__INT_MAX__


105 #i‡
__INT_MAX__
 == 32767

106 
	#WORD_BIT
 16

	)

108 #i‡
__INT_MAX__
 == 2147483647

109 
	#WORD_BIT
 32

	)

112 
	#WORD_BIT
 64

	)

116 
	#WORD_BIT
 32

	)

120 #ifde‡
LONG_MAX


121 #i‡
LONG_MAX
 == 2147483647

122 
	#LONG_BIT
 32

	)

125 
	#LONG_BIT
 64

	)

127 #ñi‡
deföed
 
__LONG_MAX__


128 #i‡
__LONG_MAX__
 == 2147483647

129 
	#LONG_BIT
 32

	)

132 
	#LONG_BIT
 64

	)

135 
	~<bôs/w‹dsize.h
>

136 #i‡
__WORDSIZE
 == 64

137 
	#LONG_BIT
 64

	)

139 
	#LONG_BIT
 32

	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/linux/const.h

3 #i‚de‡
_LINUX_CONST_H


4 
	#_LINUX_CONST_H


	)

15 #ifde‡
__ASSEMBLY__


16 
	#_AC
(
X
,
Y
Ë
	)
X

17 
	#_AT
(
T
,
X
Ë
	)
X

19 
	#__AC
(
X
,
Y
Ë(X##Y)

	)

20 
	#_AC
(
X
,
Y
Ë
	`__AC
(X,Y)

	)

21 
	#_AT
(
T
,
X
Ë((T)(X))

	)

24 
	#_BITUL
(
x
Ë(
	`_AC
(1,
UL
Ë<< (x))

	)

25 
	#_BITULL
(
x
Ë(
	`_AC
(1,
ULL
Ë<< (x))

	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/param.h

1 #i‚de‡
_LINUX_PARAM_H


2 
	#_LINUX_PARAM_H


	)

4 
	~<asm/∑øm.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

55 
	#__STDC_ISO_10646__
 201505L

	)

58 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/ucontext.h

18 #i‚de‡
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sig«l.h
>

26 
	~<bôs/sigc⁄ãxt.h
>

28 #ifde‡
__x86_64__


31 
__exãnsi⁄__
 
	tgªg_t
;

34 
	#NGREG
 23

	)

37 
gªg_t
 
	tgªg£t_t
[
NGREG
];

39 #ifde‡
__USE_GNU


43 
	mREG_R8
 = 0,

44 
	#REG_R8
 
REG_R8


	)

45 
	mREG_R9
,

46 
	#REG_R9
 
REG_R9


	)

47 
	mREG_R10
,

48 
	#REG_R10
 
REG_R10


	)

49 
	mREG_R11
,

50 
	#REG_R11
 
REG_R11


	)

51 
	mREG_R12
,

52 
	#REG_R12
 
REG_R12


	)

53 
	mREG_R13
,

54 
	#REG_R13
 
REG_R13


	)

55 
	mREG_R14
,

56 
	#REG_R14
 
REG_R14


	)

57 
	mREG_R15
,

58 
	#REG_R15
 
REG_R15


	)

59 
	mREG_RDI
,

60 
	#REG_RDI
 
REG_RDI


	)

61 
	mREG_RSI
,

62 
	#REG_RSI
 
REG_RSI


	)

63 
	mREG_RBP
,

64 
	#REG_RBP
 
REG_RBP


	)

65 
	mREG_RBX
,

66 
	#REG_RBX
 
REG_RBX


	)

67 
	mREG_RDX
,

68 
	#REG_RDX
 
REG_RDX


	)

69 
	mREG_RAX
,

70 
	#REG_RAX
 
REG_RAX


	)

71 
	mREG_RCX
,

72 
	#REG_RCX
 
REG_RCX


	)

73 
	mREG_RSP
,

74 
	#REG_RSP
 
REG_RSP


	)

75 
	mREG_RIP
,

76 
	#REG_RIP
 
REG_RIP


	)

77 
	mREG_EFL
,

78 
	#REG_EFL
 
REG_EFL


	)

79 
	mREG_CSGSFS
,

80 
	#REG_CSGSFS
 
REG_CSGSFS


	)

81 
	mREG_ERR
,

82 
	#REG_ERR
 
REG_ERR


	)

83 
	mREG_TRAPNO
,

84 
	#REG_TRAPNO
 
REG_TRAPNO


	)

85 
	mREG_OLDMASK
,

86 
	#REG_OLDMASK
 
REG_OLDMASK


	)

87 
	mREG_CR2


88 
	#REG_CR2
 
REG_CR2


	)

92 
	s_libc_Âxªg


94 
	msignifiˇnd
[4];

95 
	mexp⁄ít
;

96 
	m∑ddög
[3];

99 
	s_libc_xmmªg


101 
__uöt32_t
 
	mñemít
[4];

104 
	s_libc_Â°©e


107 
__uöt16_t
 
	mcwd
;

108 
__uöt16_t
 
	mswd
;

109 
__uöt16_t
 
	m·w
;

110 
__uöt16_t
 
	mf›
;

111 
__uöt64_t
 
	mrù
;

112 
__uöt64_t
 
	mrdp
;

113 
__uöt32_t
 
	mmxc§
;

114 
__uöt32_t
 
	mmx¸_mask
;

115 
_libc_Âxªg
 
	m_°
[8];

116 
_libc_xmmªg
 
	m_xmm
[16];

117 
__uöt32_t
 
	m∑ddög
[24];

121 
_libc_Â°©e
 *
	tÂªg£t_t
;

126 
gªg£t_t
 
	mgªgs
;

128 
Âªg£t_t
 
	mÂªgs
;

129 
__exãnsi⁄__
 
	m__ª£rved1
 [8];

130 } 
	tmc⁄ãxt_t
;

133 
	suc⁄ãxt


135 
	muc_Êags
;

136 
uc⁄ãxt
 *
	muc_lök
;

137 
°ack_t
 
	muc_°ack
;

138 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

139 
__sig£t_t
 
	muc_sigmask
;

140 
_libc_Â°©e
 
	m__Âªgs_mem
;

141 } 
	tuc⁄ãxt_t
;

146 
	tgªg_t
;

149 
	#NGREG
 19

	)

152 
gªg_t
 
	tgªg£t_t
[
NGREG
];

154 #ifde‡
__USE_GNU


158 
	mREG_GS
 = 0,

159 
	#REG_GS
 
REG_GS


	)

160 
	mREG_FS
,

161 
	#REG_FS
 
REG_FS


	)

162 
	mREG_ES
,

163 
	#REG_ES
 
REG_ES


	)

164 
	mREG_DS
,

165 
	#REG_DS
 
REG_DS


	)

166 
	mREG_EDI
,

167 
	#REG_EDI
 
REG_EDI


	)

168 
	mREG_ESI
,

169 
	#REG_ESI
 
REG_ESI


	)

170 
	mREG_EBP
,

171 
	#REG_EBP
 
REG_EBP


	)

172 
	mREG_ESP
,

173 
	#REG_ESP
 
REG_ESP


	)

174 
	mREG_EBX
,

175 
	#REG_EBX
 
REG_EBX


	)

176 
	mREG_EDX
,

177 
	#REG_EDX
 
REG_EDX


	)

178 
	mREG_ECX
,

179 
	#REG_ECX
 
REG_ECX


	)

180 
	mREG_EAX
,

181 
	#REG_EAX
 
REG_EAX


	)

182 
	mREG_TRAPNO
,

183 
	#REG_TRAPNO
 
REG_TRAPNO


	)

184 
	mREG_ERR
,

185 
	#REG_ERR
 
REG_ERR


	)

186 
	mREG_EIP
,

187 
	#REG_EIP
 
REG_EIP


	)

188 
	mREG_CS
,

189 
	#REG_CS
 
REG_CS


	)

190 
	mREG_EFL
,

191 
	#REG_EFL
 
REG_EFL


	)

192 
	mREG_UESP
,

193 
	#REG_UESP
 
REG_UESP


	)

194 
	mREG_SS


195 
	#REG_SS
 
REG_SS


	)

200 
	s_libc_Âªg


202 
	msignifiˇnd
[4];

203 
	mexp⁄ít
;

206 
	s_libc_Â°©e


208 
	mcw
;

209 
	msw
;

210 
	mèg
;

211 
	mùoff
;

212 
	mcs£l
;

213 
	md©aoff
;

214 
	md©a£l
;

215 
_libc_Âªg
 
	m_°
[8];

216 
	m°©us
;

220 
_libc_Â°©e
 *
	tÂªg£t_t
;

225 
gªg£t_t
 
	mgªgs
;

228 
Âªg£t_t
 
	mÂªgs
;

229 
	mﬁdmask
;

230 
	m¸2
;

231 } 
	tmc⁄ãxt_t
;

234 
	suc⁄ãxt


236 
	muc_Êags
;

237 
uc⁄ãxt
 *
	muc_lök
;

238 
°ack_t
 
	muc_°ack
;

239 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

240 
__sig£t_t
 
	muc_sigmask
;

241 
_libc_Â°©e
 
	m__Âªgs_mem
;

242 } 
	tuc⁄ãxt_t
;

	@/usr/include/sys/uio.h

18 #i‚de‡
_SYS_UIO_H


19 
	#_SYS_UIO_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

25 
	g__BEGIN_DECLS


28 
	~<bôs/uio.h
>

39 
ssize_t
 
	$ªadv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

40 
__wur
;

50 
ssize_t
 
	$wrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

51 
__wur
;

54 #ifde‡
__USE_MISC


55 #i‚de‡
__USE_FILE_OFFSET64


65 
ssize_t
 
	$¥ódv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

66 
__off_t
 
__off£t
Ë
__wur
;

77 
ssize_t
 
	$pwrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

78 
__off_t
 
__off£t
Ë
__wur
;

80 #ifde‡
__REDIRECT


81 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

82 
__cou¡
, 
__off64_t
 
__off£t
),

83 
¥ódv64
Ë
__wur
;

84 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

85 
__cou¡
, 
__off64_t
 
__off£t
),

86 
pwrôev64
Ë
__wur
;

88 
	#¥ódv
 
¥ódv64


	)

89 
	#pwrôev
 
pwrôev64


	)

93 #ifde‡
__USE_LARGEFILE64


103 
ssize_t
 
	$¥ódv64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

104 
__off64_t
 
__off£t
Ë
__wur
;

115 
ssize_t
 
	$pwrôev64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

116 
__off64_t
 
__off£t
Ë
__wur
;

120 
__END_DECLS


	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #i‡
deföed
(
__x86_64__
Ë&& !deföed(
__ILP32__
)

5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/asm/param.h

1 
	~<asm-gíîic/∑øm.h
>

	@/usr/include/asm/socket.h

1 
	~<asm-gíîic/sockë.h
>

	@/usr/include/bits/local_lim.h

24 #i‚de‡
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #i‚de‡
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #i‚de‡
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #i‚de‡
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<löux/limôs.h
>

41 #ifde‡
__undef_NR_OPEN


42 #unde‡
NR_OPEN


43 #unde‡
__undef_NR_OPEN


46 #ifde‡
__undef_LINK_MAX


47 #unde‡
LINK_MAX


48 #unde‡
__undef_LINK_MAX


51 #ifde‡
__undef_OPEN_MAX


52 #unde‡
OPEN_MAX


53 #unde‡
__undef_OPEN_MAX


56 #ifde‡
__undef_ARG_MAX


57 #unde‡
ARG_MAX


58 #unde‡
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #unde‡
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	#PTHREAD_STACK_MIN
 16384

	)

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/sockaddr.h

23 #i‚de‡
_BITS_SOCKADDR_H


24 
	#_BITS_SOCKADDR_H
 1

	)

28 
	tß_Ámûy_t
;

34 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

35 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

37 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

40 
	#_SS_SIZE
 128

	)

	@/usr/include/bits/socket_type.h

19 #i‚de‡
_SYS_SOCKET_H


24 
	e__sockë_ty≥


26 
	mSOCK_STREAM
 = 1,

28 
	#SOCK_STREAM
 
SOCK_STREAM


	)

29 
	mSOCK_DGRAM
 = 2,

31 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

32 
	mSOCK_RAW
 = 3,

33 
	#SOCK_RAW
 
SOCK_RAW


	)

34 
	mSOCK_RDM
 = 4,

35 
	#SOCK_RDM
 
SOCK_RDM


	)

36 
	mSOCK_SEQPACKET
 = 5,

38 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

39 
	mSOCK_DCCP
 = 6,

40 
	#SOCK_DCCP
 
SOCK_DCCP


	)

41 
	mSOCK_PACKET
 = 10,

44 
	#SOCK_PACKET
 
SOCK_PACKET


	)

49 
	mSOCK_CLOEXEC
 = 02000000,

51 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

52 
	mSOCK_NONBLOCK
 = 00004000

54 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

	@/usr/include/bits/uio.h

18 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_UIO_H


23 
	#_BITS_UIO_H
 1

	)

25 
	~<sys/ty≥s.h
>

39 
	#UIO_MAXIOV
 1024

	)

43 
	siovec


45 *
	miov_ba£
;

46 
size_t
 
	miov_Àn
;

52 #ifde‡
__USE_GNU


53 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


54 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

56 
__BEGIN_DECLS


59 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

60 
__liov˙t
,

61 c⁄° 
iovec
 *
__rvec
,

62 
__riov˙t
,

63 
__Êags
)

64 
__THROW
;

67 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

68 
__liov˙t
,

69 c⁄° 
iovec
 *
__rvec
,

70 
__riov˙t
,

71 
__Êags
)

72 
__THROW
;

74 
__END_DECLS


	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_Áâach


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_fdëach


	)

14 
	#__°ub_gây


	)

15 
	#__°ub_lchmod


	)

16 
	#__°ub_ªvoke


	)

17 
	#__°ub_£éogö


	)

18 
	#__°ub_sigªtu∫


	)

19 
	#__°ub_s°k


	)

20 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-x32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub___com∑t_¸óã_moduÀ


	)

12 
	#__°ub___com∑t_gë_kî√l_syms


	)

13 
	#__°ub___com∑t_quîy_moduÀ


	)

14 
	#__°ub___com∑t_u£lib


	)

15 
	#__°ub_chÊags


	)

16 
	#__°ub_Áâach


	)

17 
	#__°ub_fchÊags


	)

18 
	#__°ub_fdëach


	)

19 
	#__°ub_gëmsg


	)

20 
	#__°ub_gây


	)

21 
	#__°ub_lchmod


	)

22 
	#__°ub_nfs£rv˘l


	)

23 
	#__°ub_putmsg


	)

24 
	#__°ub_ªvoke


	)

25 
	#__°ub_£éogö


	)

26 
	#__°ub_sigªtu∫


	)

27 
	#__°ub_s°k


	)

28 
	#__°ub_°ty


	)

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

157 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

158 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

159 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

161 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

166 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

169 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

170 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

171 
__END_NAMESPACE_STD


173 #ifde‡
__USE_XOPEN2K8


175 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

178 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

179 
size_t
 
__n
Ë
__THROW
;

183 
	~<xloˇÀ.h
>

185 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
__loˇÀ_t
 
__loc
Ë
__THROW
;

188 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

189 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

192 
__BEGIN_NAMESPACE_STD


195 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

199 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

200 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

201 
__END_NAMESPACE_STD


203 #ifde‡
__USE_XOPEN2K8


209 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

210 
__loˇÀ_t
 
__loc
Ë
__THROW
;

215 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

216 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

219 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

222 
__BEGIN_NAMESPACE_STD


224 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


225 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

226 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

230 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

231 
__THROW
 
__©åibuã_puª__
;

234 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


235 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

236 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

240 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

241 
__THROW
 
__©åibuã_puª__
;

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_GNU


248 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

249 
__THROW
 
__©åibuã_puª__
;

252 
__BEGIN_NAMESPACE_STD


255 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

256 
__THROW
 
__©åibuã_puª__
;

259 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

260 
__THROW
 
__©åibuã_puª__
;

262 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


263 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

265 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

266 c⁄° 
wch¨_t
 *
__ac˚±
)

267 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

269 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

270 
__THROW
 
__©åibuã_puª__
;

273 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


274 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

276 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

277 c⁄° 
wch¨_t
 *
__√edÀ
)

278 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

280 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

281 
__THROW
 
__©åibuã_puª__
;

285 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

287 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

290 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

291 
__END_NAMESPACE_STD


293 #ifde‡
__USE_XOPEN


295 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


296 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

298 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

299 c⁄° 
wch¨_t
 *
__√edÀ
)

300 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

302 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

303 
__THROW
 
__©åibuã_puª__
;

307 #ifde‡
__USE_XOPEN2K8


309 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

310 
__THROW
 
__©åibuã_puª__
;

314 
__BEGIN_NAMESPACE_STD


316 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


317 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

319 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

320 
size_t
 
__n
)

321 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

323 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

328 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

329 
__THROW
 
__©åibuã_puª__
;

332 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

333 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

337 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

338 
__THROW
;

341 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

342 
__END_NAMESPACE_STD


344 #ifde‡
__USE_GNU


347 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

348 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

349 
__THROW
;

353 
__BEGIN_NAMESPACE_STD


356 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

360 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

364 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

368 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

369 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

370 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

373 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

377 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

378 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

379 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

380 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

381 
__END_NAMESPACE_STD


383 #ifde‡
__USE_EXTERN_INLINES


389 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

390 
__exã∫_ölöe
 
wöt_t


391 
	`__NTH
 (
	$btowc
 (
__c
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

393 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

395 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

396 
__exã∫_ölöe
 

397 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

398 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

399 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

401 
__exã∫_ölöe
 
size_t


402 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

403 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

404 {  (
__ps
 !
NULL


405 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

408 
__BEGIN_NAMESPACE_STD


411 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

412 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

418 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

419 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

420 
__END_NAMESPACE_STD


423 #ifdef 
__USE_XOPEN2K8


426 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

427 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

428 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

432 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

433 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

434 
size_t
 
__nwc
, size_à
__Àn
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

440 #ifde‡
__USE_XOPEN


442 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

446 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

450 
__BEGIN_NAMESPACE_STD


453 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

454 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

455 
__END_NAMESPACE_STD


457 #ifde‡
__USE_ISOC99


458 
__BEGIN_NAMESPACE_C99


460 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

461 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

462 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

463 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

464 
__END_NAMESPACE_C99


468 
__BEGIN_NAMESPACE_STD


471 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

476 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

478 
__THROW
;

479 
__END_NAMESPACE_STD


481 #ifde‡
__USE_ISOC99


482 
__BEGIN_NAMESPACE_C99


485 
__exãnsi⁄__


486 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

488 
__THROW
;

492 
__exãnsi⁄__


493 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

494 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

495 
__ba£
Ë
__THROW
;

496 
__END_NAMESPACE_C99


499 #ifde‡
__USE_GNU


502 
__exãnsi⁄__


503 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

504 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

505 
__THROW
;

509 
__exãnsi⁄__


510 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

511 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

512 
__ba£
Ë
__THROW
;

515 #ifde‡
__USE_GNU


529 
	~<xloˇÀ.h
>

533 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

534 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

535 
__loˇÀ_t
 
__loc
Ë
__THROW
;

537 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

546 
__exãnsi⁄__


547 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

549 
__ba£
, 
__loˇÀ_t
 
__loc
)

550 
__THROW
;

552 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

553 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

554 
__THROW
;

556 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

558 
__THROW
;

560 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

561 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

562 
__loˇÀ_t
 
__loc
Ë
__THROW
;

566 #ifde‡
__USE_XOPEN2K8


569 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

570 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

574 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

575 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
;

583 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

586 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


587 
__BEGIN_NAMESPACE_STD


590 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

597 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

598 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

607 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

608 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

609 
__THROW
 ;

615 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

616 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

617 
__gnuc_va_li°
 
__¨g
)

623 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

628 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

629 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

630 
__gnuc_va_li°
 
__¨g
)

631 
__THROW
 ;

638 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

639 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

648 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

649 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

650 
__THROW
 ;

652 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

653 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

654 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

655 #ifde‡
__REDIRECT


659 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

660 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_fwsˇnf
)

663 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

664 
__isoc99_wsˇnf
)

666 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

667 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

668 ...), 
__isoc99_swsˇnf
)

671 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

673 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

674 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

675 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

676 
__THROW
;

677 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

678 
	#wsˇnf
 
__isoc99_wsˇnf


	)

679 
	#swsˇnf
 
__isoc99_swsˇnf


	)

683 
__END_NAMESPACE_STD


686 #ifde‡
__USE_ISOC99


687 
__BEGIN_NAMESPACE_C99


692 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

693 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

694 
__gnuc_va_li°
 
__¨g
)

700 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

704 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

705 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

706 
__gnuc_va_li°
 
__¨g
)

707 
__THROW
 ;

709 #i‡!
deföed
 
__USE_GNU
 \

710 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

711 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

714 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

717 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

718 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

720 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

721 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

725 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

726 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
);

728 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
);

730 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

731 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

732 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

733 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

734 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

735 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

739 
__END_NAMESPACE_C99


743 
__BEGIN_NAMESPACE_STD


748 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

755 
wöt_t
 
	`gëwch¨
 ();

762 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

769 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

777 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

778 
__FILE
 *
__ª°ri˘
 
__°ªam
);

784 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

792 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

793 
__END_NAMESPACE_STD


796 #ifde‡
__USE_GNU


804 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

805 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

813 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

821 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

830 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

831 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

840 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

841 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

850 
__FILE
 *
__ª°ri˘
 
__°ªam
);

854 
__BEGIN_NAMESPACE_C99


858 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

859 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

860 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

861 
__END_NAMESPACE_C99


863 #ifde‡
__USE_GNU


864 
	~<xloˇÀ.h
>

868 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

869 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

870 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

871 
__loˇÀ_t
 
__loc
Ë
__THROW
;

880 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


881 
	#__√ed_iswxxx


	)

882 
	~<w˘y≥.h
>

886 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


887 
	~<bôs/wch¨2.h
>

890 #ifde‡
__LDBL_COMPAT


891 
	~<bôs/wch¨-ldbl.h
>

894 
__END_DECLS


902 #unde‡
__√ed_mb°©e_t


903 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/asm-generic/param.h

1 #i‚de‡
__ASM_GENERIC_PARAM_H


2 
	#__ASM_GENERIC_PARAM_H


	)

4 #i‚de‡
HZ


5 
	#HZ
 100

	)

8 #i‚de‡
EXEC_PAGESIZE


9 
	#EXEC_PAGESIZE
 4096

	)

12 #i‚de‡
NOGROUP


13 
	#NOGROUP
 (-1)

	)

16 
	#MAXHOSTNAMELEN
 64

	)

	@/usr/include/asm-generic/socket.h

1 #i‚de‡
__ASM_GENERIC_SOCKET_H


2 
	#__ASM_GENERIC_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

25 
	#SO_REUSEPORT
 15

	)

26 #i‚de‡
SO_PASSCRED


27 
	#SO_PASSCRED
 16

	)

28 
	#SO_PEERCRED
 17

	)

29 
	#SO_RCVLOWAT
 18

	)

30 
	#SO_SNDLOWAT
 19

	)

31 
	#SO_RCVTIMEO
 20

	)

32 
	#SO_SNDTIMEO
 21

	)

36 
	#SO_SECURITY_AUTHENTICATION
 22

	)

37 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

38 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

40 
	#SO_BINDTODEVICE
 25

	)

43 
	#SO_ATTACH_FILTER
 26

	)

44 
	#SO_DETACH_FILTER
 27

	)

45 
	#SO_GET_FILTER
 
SO_ATTACH_FILTER


	)

47 
	#SO_PEERNAME
 28

	)

48 
	#SO_TIMESTAMP
 29

	)

49 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

51 
	#SO_ACCEPTCONN
 30

	)

53 
	#SO_PEERSEC
 31

	)

54 
	#SO_PASSSEC
 34

	)

55 
	#SO_TIMESTAMPNS
 35

	)

56 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

58 
	#SO_MARK
 36

	)

60 
	#SO_TIMESTAMPING
 37

	)

61 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

63 
	#SO_PROTOCOL
 38

	)

64 
	#SO_DOMAIN
 39

	)

66 
	#SO_RXQ_OVFL
 40

	)

68 
	#SO_WIFI_STATUS
 41

	)

69 
	#SCM_WIFI_STATUS
 
SO_WIFI_STATUS


	)

70 
	#SO_PEEK_OFF
 42

	)

73 
	#SO_NOFCS
 43

	)

75 
	#SO_LOCK_FILTER
 44

	)

77 
	#SO_SELECT_ERR_QUEUE
 45

	)

79 
	#SO_BUSY_POLL
 46

	)

81 
	#SO_MAX_PACING_RATE
 47

	)

83 
	#SO_BPF_EXTENSIONS
 48

	)

85 
	#SO_INCOMING_CPU
 49

	)

87 
	#SO_ATTACH_BPF
 50

	)

88 
	#SO_DETACH_BPF
 
SO_DETACH_FILTER


	)

	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@/usr/include/asm/sockios.h

1 
	~<asm-gíîic/sockios.h
>

	@/usr/include/asm-generic/sockios.h

1 #i‚de‡
__ASM_GENERIC_SOCKIOS_H


2 
	#__ASM_GENERIC_SOCKIOS_H


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

11 
	#SIOCGSTAMPNS
 0x8907

	)

	@
1
.
1
/usr/include
488
30419
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/flash.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/CpuCp0RegDef.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/aux_intc.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/aux_reg_map.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/chip_reg_map.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/compiler.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/cpu.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/cpu_except.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/ethernet.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/except.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/ide3710.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/intc.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/lcd.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/mac.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/mem_map.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/mem_map_1fc0.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/mem_tst.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/palmpak_tst.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/pio.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/product.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/pubdefs.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/regdef.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/sysc.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/timer.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/include/uart.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/rt2880.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/serial.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/board/rt2880/serial.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/cmd_bdinfo.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/cmd_boot.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/cmd_bootm.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/cmd_console.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/cmd_fat.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/cmd_flash.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/cmd_load.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/cmd_mem.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/cmd_misc.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/cmd_net.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/cmd_nvedit.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/cmd_usb.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/command.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/console.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/devices.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/dlmalloc.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/env_common.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/env_flash.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/env_nand.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/env_spi.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/environment.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/exports.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/flash.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/lists.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/main.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/usb.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/usb_hub.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/common/usb_storage.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/cpu/ralink_soc/cpu.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/cpu/ralink_soc/interrupts.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/disk/part.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/disk/part_amiga.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/disk/part_amiga.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/disk/part_dos.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/disk/part_dos.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/disk/part_iso.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/disk/part_iso.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/disk/part_mac.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/disk/part_mac.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/MT7620_bmt.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/MT7620_bmt.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/bbu_spiflash.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/ehci-core.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/ehci-hcd.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/ehci-ra.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/ehci.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/i2c_drv.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/mii_mgr.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/msdc/config.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/msdc/mmc_core.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/msdc/mmc_core.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/msdc/mmc_test.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/msdc/mmc_test.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/msdc/msdc.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/msdc/msdc.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/msdc/msdc_cust.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/msdc/msdc_cust.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/msdc/msg.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/msdc/sdio.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/msdc/ts_msdc.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/msdc/utils.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/nand/bmt.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/nand/bmt.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/nand/mt6575_typedefs.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/nand/mtk_nand.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/nand/mtk_nand.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/nand/nand_base.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/nand/nand_def.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/nand/nand_device_list.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/nand/nand_ids.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/nand_flash.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/ohci-hcd.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/ohci.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/phy_val.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/phy_val.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/ralink_nand.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/ralink_spi.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/rt2880_eth.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/spi_drv.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/spi_flash.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/spi_rt6855A_flash.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/usb/host/mtk-phy-7621.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/usb/host/mtk-phy-7621.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/usb/host/mtk-phy-ahb.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/usb/host/mtk-phy.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/usb/host/mtk-phy.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/usb/host/xhci-mem.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/usb/host/xhci-mtk-power.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/usb/host/xhci-mtk-power.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/usb/host/xhci-mtk-scheduler.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/usb/host/xhci-mtk-scheduler.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/usb/host/xhci-mtk.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/usb/host/xhci-mtk.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/usb/host/xhci-ring.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/usb/host/xhci.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/usb/host/xhci.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/drivers/vtss.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/fs/fat/fat.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/fs/fat/file.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/ArchDefs.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/LzmaDecode.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/_exports.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/altera.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/addrspace.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/au1x00.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/bitops.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/byteorder.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/cachectl.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/cacheops.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/global_data.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/inca-ip.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/io.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/isadep.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/mipsregs.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/posix_types.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/processor.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/ptrace.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/reg.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/regdef.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/sgidefs.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/string.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/system.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/types.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm-mips/u-boot.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/addrspace.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/au1x00.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/bitops.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/byteorder.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/cache.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/cachectl.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/cacheops.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/errno-base.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/errno.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/global_data.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/inca-ip.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/io.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/isadep.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/mipsregs.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/posix_types.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/processor.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/ptrace.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/reg.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/regdef.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/sgidefs.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/string.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/system.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/types.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/u-boot.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/asm/unaligned.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/ata.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/bedbug/bedbug.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/bedbug/ppc.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/bedbug/regs.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/bedbug/tables.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/bedbug/type.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/bmp_layout.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/bmp_logo.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/bzlib.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/circbuf.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/cmd_confdefs.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/command.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/common.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/compiler.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/config.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/configs/rt2880.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/console.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/devices.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/environment.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/exports.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/fat.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/fat_old.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/flash.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/fpga.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/hush.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/i2c.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/ide.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/image.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/kgdb.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/launch.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/bitops.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/byteorder/big_endian.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/byteorder/generic.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/byteorder/little_endian.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/byteorder/swab.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/compiler-gcc.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/compiler-gcc3.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/compiler-gcc4.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/compiler.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/config.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/ctype.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/err.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/errno.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/mc146818rtc.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/mtd/bbm.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/mtd/doc2000.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/mtd/mtd.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/mtd/nand.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/mtd/nand_ecc.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/mtd/nand_ids.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/mtd/nftl.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/posix_types.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/stat.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/stddef.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/string.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/time.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/types.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/unaligned/access_ok.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/unaligned/be_byteshift.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/unaligned/generic.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/unaligned/le_byteshift.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/usb/atmel_usba_udc.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/usb/cdc.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/usb/ch9.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/usb/composite.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/usb/dwc3.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/usb/gadget.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/usb/musb.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/linux/usb/xhci-omap.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/lists.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/logbuff.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/lzma/LzmaDec.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/lzma/LzmaTools.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/lzma/LzmaTypes.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/malloc.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/mk48t59.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/mtd/mtd-abi.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/nand_api.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/net.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/part.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/post.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/rt_mmap.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/rtc.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/s_record.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/scsi.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/serial.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/spi.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/spi_api.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/sysdefs.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/systemace.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/unxz.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/usb.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/usb_defs.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/version.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/watchdog.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/xilinx.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/xz.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/include/zlib.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/LzmaDec.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/LzmaDecode.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/LzmaTools.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/Types.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/bzlib.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/bzlib_crctable.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/bzlib_decompress.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/bzlib_huffman.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/bzlib_private.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/bzlib_randtable.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/crc32.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/ctype.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/decompress_unxz.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/display_options.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/string.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/vsprintf.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/xz_dec_bcj.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/xz_dec_lzma2.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/xz_dec_stream.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/xz_lzma2.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/xz_private.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/xz_stream.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_generic/zlib.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_mips/ashldi3.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_mips/ashrdi3.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_mips/board.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_mips/ddr2.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_mips/ddr3.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_mips/ddr_init.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_mips/libgcc.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_mips/lshrdi3.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_mips/mips_linux.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_mips/mpll.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_mips/mpll40Mhz.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/lib_mips/time.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/net/bootp.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/net/bootp.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/net/eth.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/net/net.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/net/rarp.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/net/rarp.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/net/tftp.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/net/tftp.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/rtc/date.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/scripts/lxdialog/checklist.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/scripts/lxdialog/colors.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/scripts/lxdialog/dialog.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/scripts/lxdialog/inputbox.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/scripts/lxdialog/lxdialog.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/scripts/lxdialog/menubox.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/scripts/lxdialog/msgbox.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/scripts/lxdialog/textbox.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/scripts/lxdialog/util.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/scripts/lxdialog/yesno.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/scripts/tkcond.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/scripts/tkgen.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/scripts/tkparse.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/scripts/tkparse.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/stage1/boot.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/stage1/gdma.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/stage1/nandc.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/tools/crc.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/tools/crc32.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/tools/image.h
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/tools/mkimage.c
/data/dengshaolin/MTK/hd_mtk_openwrt/mtk/src/uboot-mtk/uboot_version.h
/usr/include/asm/byteorder.h
/usr/include/asm/errno.h
/usr/include/asm/posix_types.h
/usr/include/asm/ptrace.h
/usr/include/asm/setup.h
/usr/include/asm/types.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/inttypes.h
/usr/include/linux/byteorder/big_endian.h
/usr/include/linux/byteorder/little_endian.h
/usr/include/linux/errno.h
/usr/include/linux/kernel.h
/usr/include/linux/posix_types.h
/usr/include/linux/rtc.h
/usr/include/linux/sched.h
/usr/include/linux/stat.h
/usr/include/linux/stddef.h
/usr/include/linux/string.h
/usr/include/linux/time.h
/usr/include/linux/types.h
/usr/include/linux/usb/ch9.h
/usr/include/linux/wait.h
/usr/include/locale.h
/usr/include/malloc.h
/usr/include/mtd/mtd-abi.h
/usr/include/netinet/in.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/cdefs.h
/usr/include/sys/mman.h
/usr/include/sys/param.h
/usr/include/sys/stat.h
/usr/include/sys/types.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/zlib.h
/usr/include/alloca.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/types.h
/usr/include/asm/posix_types_32.h
/usr/include/asm/posix_types_64.h
/usr/include/asm/posix_types_x32.h
/usr/include/asm/processor-flags.h
/usr/include/asm/ptrace-abi.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/in.h
/usr/include/bits/locale.h
/usr/include/bits/mman.h
/usr/include/bits/param.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/limits.h
/usr/include/linux/swab.h
/usr/include/linux/sysinfo.h
/usr/include/signal.h
/usr/include/sys/select.h
/usr/include/sys/socket.h
/usr/include/sys/sysmacros.h
/usr/include/xlocale.h
/usr/include/zconf.h
/usr/include/_G_config.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm-generic/posix_types.h
/usr/include/asm/swab.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/endian.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/mman-linux.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/bits/xopen_lim.h
/usr/include/gnu/stubs.h
/usr/include/linux/const.h
/usr/include/linux/limits.h
/usr/include/linux/param.h
/usr/include/stdc-predef.h
/usr/include/sys/ucontext.h
/usr/include/sys/uio.h
/usr/include/asm/bitsperlong.h
/usr/include/asm/param.h
/usr/include/asm/socket.h
/usr/include/bits/local_lim.h
/usr/include/bits/sockaddr.h
/usr/include/bits/socket_type.h
/usr/include/bits/uio.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/gnu/stubs-x32.h
/usr/include/wchar.h
/usr/include/asm-generic/bitsperlong.h
/usr/include/asm-generic/param.h
/usr/include/asm-generic/socket.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/wctype.h
/usr/include/asm/sockios.h
/usr/include/asm-generic/sockios.h
